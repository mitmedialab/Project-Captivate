
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001776c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b0  080178b0  080178b0  000278b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018a60  08018a60  00028a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018a68  08018a68  00028a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018a6c  08018a6c  00028a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000134  20000004  08018a70  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000138  08018ba4  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001d4  08018c3d  000301d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028598  200001e8  08018c4e  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20028780  08018c4e  00038780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e5  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   000619ac  00000000  00000000  00030215  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000ad5c  00000000  00000000  00091bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003b80  00000000  00000000  0009c920  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000036a8  00000000  00000000  000a04a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000266f2  00000000  00000000  000a3b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000181f4  00000000  00000000  000ca23a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  000e242e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f600  00000000  00000000  000e2520  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  000f1b20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	08017894 	.word	0x08017894

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	08017894 	.word	0x08017894

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ec0:	f004 fed2 	bl	8005c68 <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f003 fa8f 	bl	80043ec <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_ADC1_Init+0xcc>)
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eda:	237f      	movs	r3, #127	; 0x7f
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eec:	f005 f8e8 	bl	80060c0 <HAL_ADC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000ef6:	f003 fa79 	bl	80043ec <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2002779c 	.word	0x2002779c
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	14f00020 	.word	0x14f00020

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_ADC_MspInit+0xa4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d13c      	bne.n	8000fac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f36:	f7ff ff69 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff66 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f006 fcfd 	bl	8007954 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f62:	2205      	movs	r2, #5
 8000f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f86:	2220      	movs	r2, #32
 8000f88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f92:	f006 f9af 	bl	80072f4 <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000f9c:	f003 fa26 	bl	80043ec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	20027800 	.word	0x20027800
 8000fbc:	40020008 	.word	0x40020008

08000fc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000fec:	f000 f80a 	bl	8001004 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ff0:	4903      	ldr	r1, [pc, #12]	; (8001000 <APPE_Init+0x18>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 f948 	bl	8003288 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ff8:	f000 f80e 	bl	8001018 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000ffc:	bf00      	nop
}
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200284e4 	.word	0x200284e4

08001004 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800100c:	f7ff ffd8 	bl	8000fc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001010:	f015 f854 	bl	80160bc <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}

08001018 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800101e:	f013 fcfb 	bl	8014a18 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001022:	2000      	movs	r0, #0
 8001024:	f00e f8c2 	bl	800f1ac <osMutexNew>
 8001028:	4602      	mov	r2, r0
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <appe_Tl_Init+0x70>)
 800102c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00e fa02 	bl	800f43c <osSemaphoreNew>
 8001038:	4602      	mov	r2, r0
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <appe_Tl_Init+0x74>)
 800103c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <appe_Tl_Init+0x78>)
 8001040:	2100      	movs	r1, #0
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <appe_Tl_Init+0x7c>)
 8001044:	f00d fd6e 	bl	800eb24 <osThreadNew>
 8001048:	4602      	mov	r2, r0
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <appe_Tl_Init+0x80>)
 800104c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <appe_Tl_Init+0x84>)
 8001050:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <appe_Tl_Init+0x88>)
 8001054:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <appe_Tl_Init+0x8c>)
 800105c:	f013 f9b6 	bl	80143cc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <appe_Tl_Init+0x90>)
 8001066:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <appe_Tl_Init+0x94>)
 800106a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800106c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001070:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f013 fe0c 	bl	8014c94 <TL_MM_Init>

  TL_Enable();
 800107c:	f013 fcc5 	bl	8014a0a <TL_Enable>

  return;
 8001080:	bf00      	nop
}
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20027860 	.word	0x20027860
 800108c:	20027878 	.word	0x20027878
 8001090:	08017d40 	.word	0x08017d40
 8001094:	08001199 	.word	0x08001199
 8001098:	20027864 	.word	0x20027864
 800109c:	20030600 	.word	0x20030600
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	2003070c 	.word	0x2003070c
 80010ac:	200300c4 	.word	0x200300c4

080010b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <APPE_SysStatusNot+0x16>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d008      	beq.n	80010d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010c4:	e00d      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00e f906 	bl	800f2e0 <osMutexAcquire>
      break;
 80010d4:	e005      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00e f95e 	bl	800f39c <osMutexRelease>
      break;
 80010e0:	bf00      	nop
  }
  return;
 80010e2:	bf00      	nop
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20027860 	.word	0x20027860

080010f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	330b      	adds	r3, #11
 80010fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800110a:	d004      	beq.n	8001116 <APPE_SysUserEvtRx+0x26>
 800110c:	f249 2201 	movw	r2, #37377	; 0x9201
 8001110:	4293      	cmp	r3, r2
 8001112:	d003      	beq.n	800111c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001114:	e008      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001116:	f000 f833 	bl	8001180 <APPE_SysEvtReadyProcessing>
         break;
 800111a:	e005      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f805 	bl	8001130 <APPE_SysEvtError>
         break;
 8001126:	bf00      	nop
  }
  return;
 8001128:	bf00      	nop
}
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b7d      	cmp	r3, #125	; 0x7d
 800113e:	d002      	beq.n	8001146 <APPE_SysEvtError+0x16>
 8001140:	2b7e      	cmp	r3, #126	; 0x7e
 8001142:	d006      	beq.n	8001152 <APPE_SysEvtError+0x22>
 8001144:	e00b      	b.n	800115e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <APPE_SysEvtError+0x44>)
 8001148:	2101      	movs	r1, #1
 800114a:	2000      	movs	r0, #0
 800114c:	f003 fffa 	bl	8005144 <logApplication>
       break;
 8001150:	e00c      	b.n	800116c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <APPE_SysEvtError+0x48>)
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f003 fff4 	bl	8005144 <logApplication>
       break;
 800115c:	e006      	b.n	800116c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <APPE_SysEvtError+0x4c>)
 8001162:	2101      	movs	r1, #1
 8001164:	2000      	movs	r0, #0
 8001166:	f003 ffed 	bl	8005144 <logApplication>
       break;
 800116a:	bf00      	nop
  }
  return;
 800116c:	bf00      	nop
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	080178c8 	.word	0x080178c8
 8001178:	080178ec 	.word	0x080178ec
 800117c:	0801790c 	.word	0x0801790c

08001180 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001184:	f013 fdf6 	bl	8014d74 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001188:	f013 fe20 	bl	8014dcc <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800118c:	2100      	movs	r1, #0
 800118e:	2001      	movs	r0, #1
 8001190:	f014 ffa6 	bl	80160e0 <UTIL_LPM_SetOffMode>
  return;
 8001194:	bf00      	nop
}
 8001196:	bd80      	pop	{r7, pc}

08001198 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	2100      	movs	r1, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	f00d fe1a 	bl	800ede0 <osThreadFlagsWait>
     shci_user_evt_proc();
 80011ac:	f013 f92a 	bl	8014404 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011b0:	e7f6      	b.n	80011a0 <ShciUserEvtProcess+0x8>
	...

080011b4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <shci_notify_asynch_evt+0x1c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00d fd5a 	bl	800ec7c <osThreadFlagsSet>
  return;
 80011c8:	bf00      	nop
}
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20027864 	.word	0x20027864

080011d4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <shci_cmd_resp_release+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00e fa2f 	bl	800f644 <osSemaphoreRelease>
  return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20027878 	.word	0x20027878

080011f4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <shci_cmd_resp_wait+0x20>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	4618      	mov	r0, r3
 8001206:	f00e f9b7 	bl	800f578 <osSemaphoreAcquire>
  return;
 800120a:	bf00      	nop
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20027878 	.word	0x20027878

08001218 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f013 fd73 	bl	8014d0c <TL_MM_EvtDone>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001240:	f004 fad8 	bl	80057f4 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}

0800124a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <vApplicationStackOverflowHook+0x24>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <vApplicationStackOverflowHook+0x24>)
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000204 	.word	0x20000204

08001280 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001290:	701a      	strb	r2, [r3, #0]

}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000204 	.word	0x20000204

080012a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012a4:	4a5c      	ldr	r2, [pc, #368]	; (8001418 <MX_FREERTOS_Init+0x178>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	2001      	movs	r0, #1
 80012aa:	f00e f8c7 	bl	800f43c <osSemaphoreNew>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b5a      	ldr	r3, [pc, #360]	; (800141c <MX_FREERTOS_Init+0x17c>)
 80012b2:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80012b4:	4a5a      	ldr	r2, [pc, #360]	; (8001420 <MX_FREERTOS_Init+0x180>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	2001      	movs	r0, #1
 80012ba:	f00e f8bf 	bl	800f43c <osSemaphoreNew>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b58      	ldr	r3, [pc, #352]	; (8001424 <MX_FREERTOS_Init+0x184>)
 80012c2:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80012c4:	4a58      	ldr	r2, [pc, #352]	; (8001428 <MX_FREERTOS_Init+0x188>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	f00e f8b7 	bl	800f43c <osSemaphoreNew>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b56      	ldr	r3, [pc, #344]	; (800142c <MX_FREERTOS_Init+0x18c>)
 80012d2:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, NULL, &viveTimer_attributes);
 80012d4:	4b56      	ldr	r3, [pc, #344]	; (8001430 <MX_FREERTOS_Init+0x190>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	4856      	ldr	r0, [pc, #344]	; (8001434 <MX_FREERTOS_Init+0x194>)
 80012dc:	f00d fe58 	bl	800ef90 <osTimerNew>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b55      	ldr	r3, [pc, #340]	; (8001438 <MX_FREERTOS_Init+0x198>)
 80012e4:	601a      	str	r2, [r3, #0]
//  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 80012e6:	4a55      	ldr	r2, [pc, #340]	; (800143c <MX_FREERTOS_Init+0x19c>)
 80012e8:	216c      	movs	r1, #108	; 0x6c
 80012ea:	200a      	movs	r0, #10
 80012ec:	f00e fa02 	bl	800f6f4 <osMessageQueueNew>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b53      	ldr	r3, [pc, #332]	; (8001440 <MX_FREERTOS_Init+0x1a0>)
 80012f4:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 80012f6:	4a53      	ldr	r2, [pc, #332]	; (8001444 <MX_FREERTOS_Init+0x1a4>)
 80012f8:	2104      	movs	r1, #4
 80012fa:	2003      	movs	r0, #3
 80012fc:	f00e f9fa 	bl	800f6f4 <osMessageQueueNew>
 8001300:	4602      	mov	r2, r0
 8001302:	4b51      	ldr	r3, [pc, #324]	; (8001448 <MX_FREERTOS_Init+0x1a8>)
 8001304:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 8001306:	4a51      	ldr	r2, [pc, #324]	; (800144c <MX_FREERTOS_Init+0x1ac>)
 8001308:	2106      	movs	r1, #6
 800130a:	2004      	movs	r0, #4
 800130c:	f00e f9f2 	bl	800f6f4 <osMessageQueueNew>
 8001310:	4602      	mov	r2, r0
 8001312:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <MX_FREERTOS_Init+0x1b0>)
 8001314:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 8001316:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <MX_FREERTOS_Init+0x1b4>)
 8001318:	2118      	movs	r1, #24
 800131a:	200a      	movs	r0, #10
 800131c:	f00e f9ea 	bl	800f6f4 <osMessageQueueNew>
 8001320:	4602      	mov	r2, r0
 8001322:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <MX_FREERTOS_Init+0x1b8>)
 8001324:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 8001326:	4a4d      	ldr	r2, [pc, #308]	; (800145c <MX_FREERTOS_Init+0x1bc>)
 8001328:	2128      	movs	r1, #40	; 0x28
 800132a:	200a      	movs	r0, #10
 800132c:	f00e f9e2 	bl	800f6f4 <osMessageQueueNew>
 8001330:	4602      	mov	r2, r0
 8001332:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <MX_FREERTOS_Init+0x1c0>)
 8001334:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8001336:	4a4b      	ldr	r2, [pc, #300]	; (8001464 <MX_FREERTOS_Init+0x1c4>)
 8001338:	2110      	movs	r1, #16
 800133a:	200a      	movs	r0, #10
 800133c:	f00e f9da 	bl	800f6f4 <osMessageQueueNew>
 8001340:	4602      	mov	r2, r0
 8001342:	4b49      	ldr	r3, [pc, #292]	; (8001468 <MX_FREERTOS_Init+0x1c8>)
 8001344:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 8001346:	4a49      	ldr	r2, [pc, #292]	; (800146c <MX_FREERTOS_Init+0x1cc>)
 8001348:	2118      	movs	r1, #24
 800134a:	2003      	movs	r0, #3
 800134c:	f00e f9d2 	bl	800f6f4 <osMessageQueueNew>
 8001350:	4602      	mov	r2, r0
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <MX_FREERTOS_Init+0x1d0>)
 8001354:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 8001356:	4a47      	ldr	r2, [pc, #284]	; (8001474 <MX_FREERTOS_Init+0x1d4>)
 8001358:	2106      	movs	r1, #6
 800135a:	200a      	movs	r0, #10
 800135c:	f00e f9ca 	bl	800f6f4 <osMessageQueueNew>
 8001360:	4602      	mov	r2, r0
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <MX_FREERTOS_Init+0x1d8>)
 8001364:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 8001366:	4a45      	ldr	r2, [pc, #276]	; (800147c <MX_FREERTOS_Init+0x1dc>)
 8001368:	2118      	movs	r1, #24
 800136a:	200a      	movs	r0, #10
 800136c:	f00e f9c2 	bl	800f6f4 <osMessageQueueNew>
 8001370:	4602      	mov	r2, r0
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <MX_FREERTOS_Init+0x1e0>)
 8001374:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 8001376:	4a43      	ldr	r2, [pc, #268]	; (8001484 <MX_FREERTOS_Init+0x1e4>)
 8001378:	2104      	movs	r1, #4
 800137a:	2001      	movs	r0, #1
 800137c:	f00e f9ba 	bl	800f6f4 <osMessageQueueNew>
 8001380:	4602      	mov	r2, r0
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <MX_FREERTOS_Init+0x1e8>)
 8001384:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8001386:	4a41      	ldr	r2, [pc, #260]	; (800148c <MX_FREERTOS_Init+0x1ec>)
 8001388:	2100      	movs	r1, #0
 800138a:	4841      	ldr	r0, [pc, #260]	; (8001490 <MX_FREERTOS_Init+0x1f0>)
 800138c:	f00d fbca 	bl	800eb24 <osThreadNew>
 8001390:	4602      	mov	r2, r0
 8001392:	4b40      	ldr	r3, [pc, #256]	; (8001494 <MX_FREERTOS_Init+0x1f4>)
 8001394:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <MX_FREERTOS_Init+0x1f8>)
 8001398:	2100      	movs	r1, #0
 800139a:	4840      	ldr	r0, [pc, #256]	; (800149c <MX_FREERTOS_Init+0x1fc>)
 800139c:	f00d fbc2 	bl	800eb24 <osThreadNew>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <MX_FREERTOS_Init+0x200>)
 80013a4:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80013a6:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <MX_FREERTOS_Init+0x204>)
 80013a8:	2100      	movs	r1, #0
 80013aa:	483f      	ldr	r0, [pc, #252]	; (80014a8 <MX_FREERTOS_Init+0x208>)
 80013ac:	f00d fbba 	bl	800eb24 <osThreadNew>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <MX_FREERTOS_Init+0x20c>)
 80013b4:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <MX_FREERTOS_Init+0x210>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	483e      	ldr	r0, [pc, #248]	; (80014b4 <MX_FREERTOS_Init+0x214>)
 80013bc:	f00d fbb2 	bl	800eb24 <osThreadNew>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MX_FREERTOS_Init+0x218>)
 80013c4:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 80013c6:	4a3d      	ldr	r2, [pc, #244]	; (80014bc <MX_FREERTOS_Init+0x21c>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	483d      	ldr	r0, [pc, #244]	; (80014c0 <MX_FREERTOS_Init+0x220>)
 80013cc:	f00d fbaa 	bl	800eb24 <osThreadNew>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <MX_FREERTOS_Init+0x224>)
 80013d4:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 80013d6:	4a3c      	ldr	r2, [pc, #240]	; (80014c8 <MX_FREERTOS_Init+0x228>)
 80013d8:	2100      	movs	r1, #0
 80013da:	483c      	ldr	r0, [pc, #240]	; (80014cc <MX_FREERTOS_Init+0x22c>)
 80013dc:	f00d fba2 	bl	800eb24 <osThreadNew>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <MX_FREERTOS_Init+0x230>)
 80013e4:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 80013e6:	4a3b      	ldr	r2, [pc, #236]	; (80014d4 <MX_FREERTOS_Init+0x234>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	483b      	ldr	r0, [pc, #236]	; (80014d8 <MX_FREERTOS_Init+0x238>)
 80013ec:	f00d fb9a 	bl	800eb24 <osThreadNew>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <MX_FREERTOS_Init+0x23c>)
 80013f4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_FREERTOS_Init+0x184>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f00e f8bb 	bl	800f578 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_FREERTOS_Init+0x18c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00e f8b5 	bl	800f578 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 800140e:	f7ff fdeb 	bl	8000fe8 <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	08017f60 	.word	0x08017f60
 800141c:	20027968 	.word	0x20027968
 8001420:	08017f70 	.word	0x08017f70
 8001424:	20027dac 	.word	0x20027dac
 8001428:	08017f80 	.word	0x08017f80
 800142c:	20027da4 	.word	0x20027da4
 8001430:	08017f50 	.word	0x08017f50
 8001434:	08003bdd 	.word	0x08003bdd
 8001438:	20027958 	.word	0x20027958
 800143c:	08017e60 	.word	0x08017e60
 8001440:	20027db8 	.word	0x20027db8
 8001444:	08017e78 	.word	0x08017e78
 8001448:	20027970 	.word	0x20027970
 800144c:	08017e90 	.word	0x08017e90
 8001450:	20027d9c 	.word	0x20027d9c
 8001454:	08017ea8 	.word	0x08017ea8
 8001458:	20027974 	.word	0x20027974
 800145c:	08017ec0 	.word	0x08017ec0
 8001460:	2002796c 	.word	0x2002796c
 8001464:	08017ed8 	.word	0x08017ed8
 8001468:	20027960 	.word	0x20027960
 800146c:	08017ef0 	.word	0x08017ef0
 8001470:	2002797c 	.word	0x2002797c
 8001474:	08017f08 	.word	0x08017f08
 8001478:	20027868 	.word	0x20027868
 800147c:	08017f20 	.word	0x08017f20
 8001480:	2002786c 	.word	0x2002786c
 8001484:	08017f38 	.word	0x08017f38
 8001488:	20027978 	.word	0x20027978
 800148c:	08017d64 	.word	0x08017d64
 8001490:	080014e1 	.word	0x080014e1
 8001494:	20027950 	.word	0x20027950
 8001498:	08017d88 	.word	0x08017d88
 800149c:	0800409d 	.word	0x0800409d
 80014a0:	2002795c 	.word	0x2002795c
 80014a4:	08017dac 	.word	0x08017dac
 80014a8:	080043fd 	.word	0x080043fd
 80014ac:	20027da0 	.word	0x20027da0
 80014b0:	08017dd0 	.word	0x08017dd0
 80014b4:	080039d5 	.word	0x080039d5
 80014b8:	20027dbc 	.word	0x20027dbc
 80014bc:	08017df4 	.word	0x08017df4
 80014c0:	08003b4d 	.word	0x08003b4d
 80014c4:	20027db0 	.word	0x20027db0
 80014c8:	08017e18 	.word	0x08017e18
 80014cc:	08003d0d 	.word	0x08003d0d
 80014d0:	20027da8 	.word	0x20027da8
 80014d4:	08017e3c 	.word	0x08017e3c
 80014d8:	080014f1 	.word	0x080014f1
 80014dc:	20027954 	.word	0x20027954

080014e0 <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f00d fd0d 	bl	800ef08 <osDelay>
 80014ee:	e7fb      	b.n	80014e8 <DefaultTask+0x8>

080014f0 <BlinkTask>:
float previousTick_ms = 0;
float tick_ms_diff = 0;

struct LogMessage statusMessage;

void BlinkTask(void *argument){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while(1){
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	2100      	movs	r1, #0
 80014fe:	2001      	movs	r0, #1
 8001500:	f00d fc6e 	bl	800ede0 <osThreadFlagsWait>
 8001504:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if (evt == 0x00000001U)  {
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d1f5      	bne.n	80014f8 <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800150c:	4b62      	ldr	r3, [pc, #392]	; (8001698 <BlinkTask+0x1a8>)
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	2200      	movs	r2, #0
 8001516:	4961      	ldr	r1, [pc, #388]	; (800169c <BlinkTask+0x1ac>)
 8001518:	f00e f9e6 	bl	800f8e8 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 800151c:	4b5f      	ldr	r3, [pc, #380]	; (800169c <BlinkTask+0x1ac>)
 800151e:	2201      	movs	r2, #1
 8001520:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <BlinkTask+0x1a8>)
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	2300      	movs	r3, #0
 8001528:	2200      	movs	r2, #0
 800152a:	495c      	ldr	r1, [pc, #368]	; (800169c <BlinkTask+0x1ac>)
 800152c:	f00e f968 	bl	800f800 <osMessageQueuePut>

			// start timer and PWM channel for blink LED
			HAL_TIM_Base_Start(&htim2);
 8001530:	485b      	ldr	r0, [pc, #364]	; (80016a0 <BlinkTask+0x1b0>)
 8001532:	f00a fa6f 	bl	800ba14 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001536:	2104      	movs	r1, #4
 8001538:	4859      	ldr	r0, [pc, #356]	; (80016a0 <BlinkTask+0x1b0>)
 800153a:	f00a fb21 	bl	800bb80 <HAL_TIM_PWM_Start>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 800153e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001542:	4958      	ldr	r1, [pc, #352]	; (80016a4 <BlinkTask+0x1b4>)
 8001544:	4858      	ldr	r0, [pc, #352]	; (80016a8 <BlinkTask+0x1b8>)
 8001546:	f004 fcd5 	bl	8005ef4 <HAL_ADC_Start_DMA>
//				buffer_pointer = &blinkMsgBuffer_1;
//		    	osMessageQueuePut(blinkMsgQueueHandle, &buffer_pointer, 0U, 0U);
				//osMessageQueuePut(blinkMsgQueueHandle, &blinkMsgBuffer_2, 0U, 0U);
//				osMessageQueuePut(blinkMsgQueueHandle, (void *) &blinkMsgBuffer_1, 0U, 0);

				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 800154a:	f04f 32ff 	mov.w	r2, #4294967295
 800154e:	2100      	movs	r1, #0
 8001550:	2006      	movs	r0, #6
 8001552:	f00d fc45 	bl	800ede0 <osThreadFlagsWait>
 8001556:	60f8      	str	r0, [r7, #12]

				if( (evt & 0x00000004U) == 0x00000004U){
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	2b00      	cmp	r3, #0
 8001560:	d064      	beq.n	800162c <BlinkTask+0x13c>

					// interpolate timestamps for blink packets
					if(previousTick_ms == 0){
 8001562:	4b52      	ldr	r3, [pc, #328]	; (80016ac <BlinkTask+0x1bc>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	eef5 7a40 	vcmp.f32	s15, #0.0
 800156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001570:	d108      	bne.n	8001584 <BlinkTask+0x94>
						previousTick_ms = HAL_GetTick();
 8001572:	f004 f93f 	bl	80057f4 <HAL_GetTick>
 8001576:	ee07 0a90 	vmov	s15, r0
 800157a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157e:	4b4b      	ldr	r3, [pc, #300]	; (80016ac <BlinkTask+0x1bc>)
 8001580:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 8001584:	f004 f936 	bl	80057f4 <HAL_GetTick>
 8001588:	ee07 0a90 	vmov	s15, r0
 800158c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001590:	4b46      	ldr	r3, [pc, #280]	; (80016ac <BlinkTask+0x1bc>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ee37 7a67 	vsub.f32	s14, s14, s15
 800159a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <BlinkTask+0x1c0>)
 80015a4:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 80015a8:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <BlinkTask+0x1c4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e039      	b.n	8001624 <BlinkTask+0x134>

						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator*BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80015b0:	4b40      	ldr	r3, [pc, #256]	; (80016b4 <BlinkTask+0x1c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2264      	movs	r2, #100	; 0x64
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	4a3a      	ldr	r2, [pc, #232]	; (80016a4 <BlinkTask+0x1b4>)
 80015bc:	4413      	add	r3, r2
 80015be:	4a3e      	ldr	r2, [pc, #248]	; (80016b8 <BlinkTask+0x1c8>)
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	2364      	movs	r3, #100	; 0x64
 80015c6:	461a      	mov	r2, r3
 80015c8:	f015 f8a8 	bl	801671c <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80015cc:	4b37      	ldr	r3, [pc, #220]	; (80016ac <BlinkTask+0x1bc>)
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <BlinkTask+0x1c0>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e0:	ee17 2a90 	vmov	r2, s15
 80015e4:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <BlinkTask+0x1c8>)
 80015e6:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 80015e8:	4b34      	ldr	r3, [pc, #208]	; (80016bc <BlinkTask+0x1cc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a32      	ldr	r2, [pc, #200]	; (80016b8 <BlinkTask+0x1c8>)
 80015ee:	6693      	str	r3, [r2, #104]	; 0x68

						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 80015f0:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <BlinkTask+0x1c8>)
 80015f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <BlinkTask+0x1bc>)
 80015fe:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <BlinkTask+0x1cc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	4a2c      	ldr	r2, [pc, #176]	; (80016bc <BlinkTask+0x1cc>)
 800160a:	6013      	str	r3, [r2, #0]

						osMessageQueuePut(blinkMsgQueueHandle, (void *) &blinkMsgBuffer_1, 0U, 0);
 800160c:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <BlinkTask+0x1d0>)
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	2200      	movs	r2, #0
 8001614:	4928      	ldr	r1, [pc, #160]	; (80016b8 <BlinkTask+0x1c8>)
 8001616:	f00e f8f3 	bl	800f800 <osMessageQueuePut>
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <BlinkTask+0x1c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <BlinkTask+0x1c4>)
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <BlinkTask+0x1c4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b09      	cmp	r3, #9
 800162a:	d9c1      	bls.n	80015b0 <BlinkTask+0xc0>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if( (evt & 0x00000002U) == 0x00000002U){
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d089      	beq.n	800154a <BlinkTask+0x5a>

					HAL_ADC_Stop_DMA(&hadc1);
 8001636:	481c      	ldr	r0, [pc, #112]	; (80016a8 <BlinkTask+0x1b8>)
 8001638:	f004 fce0 	bl	8005ffc <HAL_ADC_Stop_DMA>
//					while(HAL_ADC_Stop(&hadc1) != HAL_OK)
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800163c:	2104      	movs	r1, #4
 800163e:	4818      	ldr	r0, [pc, #96]	; (80016a0 <BlinkTask+0x1b0>)
 8001640:	f00a fae8 	bl	800bc14 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8001644:	4816      	ldr	r0, [pc, #88]	; (80016a0 <BlinkTask+0x1b0>)
 8001646:	f00a fa0f 	bl	800ba68 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <BlinkTask+0x1bc>)
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <BlinkTask+0x1a8>)
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	2200      	movs	r2, #0
 800165c:	490f      	ldr	r1, [pc, #60]	; (800169c <BlinkTask+0x1ac>)
 800165e:	f00e f943 	bl	800f8e8 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <BlinkTask+0x1ac>)
 8001664:	2200      	movs	r2, #0
 8001666:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if(statusMessage.positionEnabled == 1) osSemaphoreRelease(locNotifyHandle);
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <BlinkTask+0x1ac>)
 800166a:	795b      	ldrb	r3, [r3, #5]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d104      	bne.n	800167a <BlinkTask+0x18a>
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <BlinkTask+0x1d4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f00d ffe5 	bl	800f644 <osSemaphoreRelease>
					osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <BlinkTask+0x1a8>)
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	2300      	movs	r3, #0
 8001680:	2200      	movs	r2, #0
 8001682:	4906      	ldr	r1, [pc, #24]	; (800169c <BlinkTask+0x1ac>)
 8001684:	f00e f8bc 	bl	800f800 <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <BlinkTask+0x1d0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f00e f9cf 	bl	800fa30 <osMessageQueueReset>

					break;
 8001692:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8001694:	e730      	b.n	80014f8 <BlinkTask+0x8>
 8001696:	bf00      	nop
 8001698:	20027978 	.word	0x20027978
 800169c:	20027dc4 	.word	0x20027dc4
 80016a0:	20028548 	.word	0x20028548
 80016a4:	20000274 	.word	0x20000274
 80016a8:	2002779c 	.word	0x2002779c
 80016ac:	20000a4c 	.word	0x20000a4c
 80016b0:	20000a50 	.word	0x20000a50
 80016b4:	20000a48 	.word	0x20000a48
 80016b8:	20000208 	.word	0x20000208
 80016bc:	20000a44 	.word	0x20000a44
 80016c0:	20027db8 	.word	0x20027db8
 80016c4:	20027dac 	.word	0x20027dac

080016c8 <HAL_ADC_ErrorCallback>:
//    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//}

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  i++;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_ADC_ErrorCallback+0x24>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	3301      	adds	r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <HAL_ADC_ErrorCallback+0x24>)
 80016dc:	701a      	strb	r2, [r3, #0]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000a54 	.word	0x20000a54

080016f0 <HAL_ADC_ConvCpltCallback>:

//volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer[100]), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_ADC_ConvCpltCallback+0x24>)
 80016fa:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_ADC_ConvCpltCallback+0x28>)
 80016fc:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2104      	movs	r1, #4
 8001704:	4618      	mov	r0, r3
 8001706:	f00d fab9 	bl	800ec7c <osThreadFlagsSet>

}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20027dc0 	.word	0x20027dc0
 8001718:	2000065c 	.word	0x2000065c
 800171c:	20027954 	.word	0x20027954

08001720 <HAL_ADC_ConvHalfCpltCallback>:

//volatile uint8_t half = 0;
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = blink_buffer;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800172a:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800172c:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2104      	movs	r1, #4
 8001734:	4618      	mov	r0, r3
 8001736:	f00d faa1 	bl	800ec7c <osThreadFlagsSet>

}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20027dc0 	.word	0x20027dc0
 8001748:	20000274 	.word	0x20000274
 800174c:	20027954 	.word	0x20027954

08001750 <LL_AHB2_GRP1_EnableClock>:
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800175e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4313      	orrs	r3, r2
 8001766:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001774:	68fb      	ldr	r3, [r7, #12]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_COMP1_Init+0x50>)
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <MX_COMP1_Init+0x54>)
 800178c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_3_4VREFINT;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_COMP1_Init+0x50>)
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_COMP1_Init+0x58>)
 8001792:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_COMP1_Init+0x50>)
 8001796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <MX_COMP1_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_COMP1_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <MX_COMP1_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_COMP1_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <MX_COMP1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_COMP1_Init+0x50>)
 80017bc:	2231      	movs	r2, #49	; 0x31
 80017be:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <MX_COMP1_Init+0x50>)
 80017c2:	f005 fa77 	bl	8006cb4 <HAL_COMP_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80017cc:	f002 fe0e 	bl	80043ec <Error_Handler>
  }

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20027dcc 	.word	0x20027dcc
 80017d8:	40010200 	.word	0x40010200
 80017dc:	00c00020 	.word	0x00c00020

080017e0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_COMP_MspInit+0x5c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d117      	bne.n	8001832 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2001      	movs	r0, #1
 8001804:	f7ff ffa4 	bl	8001750 <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 8001808:	2302      	movs	r3, #2
 800180a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180c:	2303      	movs	r3, #3
 800180e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f006 f899 	bl	8007954 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2105      	movs	r1, #5
 8001826:	2016      	movs	r0, #22
 8001828:	f005 fd0d 	bl	8007246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800182c:	2016      	movs	r0, #22
 800182e:	f005 fd24 	bl	800727a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001832:	bf00      	nop
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40010200 	.word	0x40010200

08001840 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d02a      	beq.n	80018b0 <process_pulse_lengths+0x70>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3302      	adds	r3, #2
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d025      	beq.n	80018b0 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3302      	adds	r3, #2
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	bf8c      	ite	hi
 8001872:	2301      	movhi	r3, #1
 8001874:	2300      	movls	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	429a      	cmp	r2, r3
 8001884:	d10e      	bne.n	80018a4 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	005a      	lsls	r2, r3, #1
 800188c:	7efb      	ldrb	r3, [r7, #27]
 800188e:	431a      	orrs	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	4a1c      	ldr	r2, [pc, #112]	; (8001910 <process_pulse_lengths+0xd0>)
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e002      	b.n	80018aa <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 80018a4:	7efa      	ldrb	r2, [r7, #27]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db26      	blt.n	8001904 <process_pulse_lengths+0xc4>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b0f      	cmp	r3, #15
 80018bc:	dc22      	bgt.n	8001904 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2201      	movs	r2, #1
 80018ca:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f003 0203 	and.w	r2, r3, #3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 80018da:	e013      	b.n	8001904 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4413      	add	r3, r2
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	69f9      	ldr	r1, [r7, #28]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4291      	cmp	r1, r2
 80018f4:	d101      	bne.n	80018fa <process_pulse_lengths+0xba>
 80018f6:	2201      	movs	r2, #1
 80018f8:	e001      	b.n	80018fe <process_pulse_lengths+0xbe>
 80018fa:	f04f 32ff 	mov.w	r2, #4294967295
 80018fe:	441a      	add	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	609a      	str	r2, [r3, #8]
}
 8001904:	bf00      	nop
 8001906:	3724      	adds	r7, #36	; 0x24
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	08017f90 	.word	0x08017f90

08001914 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b03      	cmp	r3, #3
 8001924:	dd06      	ble.n	8001934 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	4413      	add	r3, r2
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	e001      	b.n	8001938 <get_phase+0x24>
    } else {
        return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <reset>:

void reset(CyclePhaseClassifier * self) {
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a05      	ldr	r2, [pc, #20]	; (8001974 <reset+0x30>)
 800195e:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	427a0000 	.word	0x427a0000

08001978 <LL_AHB1_GRP1_EnableClock>:
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001984:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4313      	orrs	r3, r2
 800198e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800199c:	68fb      	ldr	r3, [r7, #12]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019ae:	2004      	movs	r0, #4
 80019b0:	f7ff ffe2 	bl	8001978 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b4:	2001      	movs	r0, #1
 80019b6:	f7ff ffdf 	bl	8001978 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	200b      	movs	r0, #11
 80019c0:	f005 fc41 	bl	8007246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019c4:	200b      	movs	r0, #11
 80019c6:	f005 fc58 	bl	800727a <HAL_NVIC_EnableIRQ>

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	603a      	str	r2, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	460b      	mov	r3, r1
 80019de:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <IMU_begin+0x60>)
 80019e8:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <IMU_begin+0x64>)
 80019ec:	79bb      	ldrb	r3, [r7, #6]
 80019ee:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <IMU_begin+0x68>)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 80019f6:	f000 fa85 	bl	8001f04 <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <IMU_begin+0x6c>)
 80019fc:	22f9      	movs	r2, #249	; 0xf9
 80019fe:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <IMU_begin+0x6c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 8001a06:	2302      	movs	r3, #2
 8001a08:	2102      	movs	r1, #2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fc14 	bl	8002238 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 8001a10:	f000 fb6a 	bl	80020e8 <IMU_receivePacket>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <IMU_begin+0x6c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2bf8      	cmp	r3, #248	; 0xf8
 8001a20:	d101      	bne.n	8001a26 <IMU_begin+0x56>
		{
			return (true);
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000006 	.word	0x20000006
 8001a34:	20027e4e 	.word	0x20027e4e
 8001a38:	20027f14 	.word	0x20027f14
 8001a3c:	20027e8c 	.word	0x20027e8c

08001a40 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <IMU_dataAvailable+0x64>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2bff      	cmp	r3, #255	; 0xff
 8001a4a:	d00d      	beq.n	8001a68 <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <IMU_dataAvailable+0x68>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <IMU_dataAvailable+0x64>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f006 f8eb 	bl	8007c34 <HAL_GPIO_ReadPin>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <IMU_dataAvailable+0x28>
			return (false);
 8001a64:	2300      	movs	r3, #0
 8001a66:	e01b      	b.n	8001aa0 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001a68:	f000 fb3e 	bl	80020e8 <IMU_receivePacket>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d015      	beq.n	8001a9e <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <IMU_dataAvailable+0x6c>)
 8001a74:	789b      	ldrb	r3, [r3, #2]
 8001a76:	2203      	movs	r2, #3
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d107      	bne.n	8001a8c <IMU_dataAvailable+0x4c>
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <IMU_dataAvailable+0x70>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2bfb      	cmp	r3, #251	; 0xfb
 8001a82:	d103      	bne.n	8001a8c <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001a84:	f000 f832 	bl	8001aec <IMU_parseInputReport>
			return (true);
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e009      	b.n	8001aa0 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <IMU_dataAvailable+0x6c>)
 8001a8e:	789b      	ldrb	r3, [r3, #2]
 8001a90:	2202      	movs	r2, #2
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d103      	bne.n	8001a9e <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001a96:	f000 f80d 	bl	8001ab4 <IMU_parseCommandReport>
			return (true);
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20027e4e 	.word	0x20027e4e
 8001aa8:	20027f14 	.word	0x20027f14
 8001aac:	20027dfc 	.word	0x20027dfc
 8001ab0:	20027e8c 	.word	0x20027e8c

08001ab4 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <IMU_parseCommandReport+0x30>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2bf1      	cmp	r3, #241	; 0xf1
 8001ac0:	d109      	bne.n	8001ad6 <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <IMU_parseCommandReport+0x30>)
 8001ac4:	789b      	ldrb	r3, [r3, #2]
 8001ac6:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	2b07      	cmp	r3, #7
 8001acc:	d103      	bne.n	8001ad6 <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <IMU_parseCommandReport+0x30>)
 8001ad0:	795a      	ldrb	r2, [r3, #5]
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <IMU_parseCommandReport+0x34>)
 8001ad4:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20027e8c 	.word	0x20027e8c
 8001ae8:	20027f3f 	.word	0x20027f3f

08001aec <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001af2:	4b96      	ldr	r3, [pc, #600]	; (8001d4c <IMU_parseInputReport+0x260>)
 8001af4:	785b      	ldrb	r3, [r3, #1]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	4b94      	ldr	r3, [pc, #592]	; (8001d4c <IMU_parseInputReport+0x260>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001b04:	8a3b      	ldrh	r3, [r7, #16]
 8001b06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b0a:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001b0c:	8a3b      	ldrh	r3, [r7, #16]
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001b14:	4b8e      	ldr	r3, [pc, #568]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b16:	791b      	ldrb	r3, [r3, #4]
 8001b18:	061a      	lsls	r2, r3, #24
 8001b1a:	4b8d      	ldr	r3, [pc, #564]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b1c:	78db      	ldrb	r3, [r3, #3]
 8001b1e:	041b      	lsls	r3, r3, #16
 8001b20:	431a      	orrs	r2, r3
 8001b22:	4b8b      	ldr	r3, [pc, #556]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b24:	789b      	ldrb	r3, [r3, #2]
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	4a89      	ldr	r2, [pc, #548]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b2c:	7852      	ldrb	r2, [r2, #1]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	4a88      	ldr	r2, [pc, #544]	; (8001d54 <IMU_parseInputReport+0x268>)
 8001b32:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001b34:	4b86      	ldr	r3, [pc, #536]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b36:	79db      	ldrb	r3, [r3, #7]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001b3e:	4b84      	ldr	r3, [pc, #528]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b40:	7a9b      	ldrb	r3, [r3, #10]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	4b82      	ldr	r3, [pc, #520]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b48:	7a5b      	ldrb	r3, [r3, #9]
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001b52:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b54:	7b1b      	ldrb	r3, [r3, #12]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	b21a      	sxth	r2, r3
 8001b5a:	4b7d      	ldr	r3, [pc, #500]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b5c:	7adb      	ldrb	r3, [r3, #11]
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	4313      	orrs	r3, r2
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001b66:	4b7a      	ldr	r3, [pc, #488]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b68:	7b9b      	ldrb	r3, [r3, #14]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	4b78      	ldr	r3, [pc, #480]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b70:	7b5b      	ldrb	r3, [r3, #13]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001b7e:	2300      	movs	r3, #0
 8001b80:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001b82:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b86:	3b05      	subs	r3, #5
 8001b88:	2b09      	cmp	r3, #9
 8001b8a:	dd09      	ble.n	8001ba0 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001b8c:	4b70      	ldr	r3, [pc, #448]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b8e:	7c1b      	ldrb	r3, [r3, #16]
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	b21a      	sxth	r2, r3
 8001b94:	4b6e      	ldr	r3, [pc, #440]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b96:	7bdb      	ldrb	r3, [r3, #15]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	b21b      	sxth	r3, r3
 8001b9e:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001ba0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ba4:	3b05      	subs	r3, #5
 8001ba6:	2b0b      	cmp	r3, #11
 8001ba8:	dd09      	ble.n	8001bbe <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001baa:	4b69      	ldr	r3, [pc, #420]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001bac:	7c9b      	ldrb	r3, [r3, #18]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001bb4:	7c5b      	ldrb	r3, [r3, #17]
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001bbe:	4b64      	ldr	r3, [pc, #400]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001bc0:	795b      	ldrb	r3, [r3, #5]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d10d      	bne.n	8001be2 <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <IMU_parseInputReport+0x26c>)
 8001bcc:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001bce:	4a63      	ldr	r2, [pc, #396]	; (8001d5c <IMU_parseInputReport+0x270>)
 8001bd0:	89bb      	ldrh	r3, [r7, #12]
 8001bd2:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001bd4:	4a62      	ldr	r2, [pc, #392]	; (8001d60 <IMU_parseInputReport+0x274>)
 8001bd6:	897b      	ldrh	r3, [r7, #10]
 8001bd8:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001bda:	4a62      	ldr	r2, [pc, #392]	; (8001d64 <IMU_parseInputReport+0x278>)
 8001bdc:	893b      	ldrh	r3, [r7, #8]
 8001bde:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001be0:	e16a      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001be2:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001be4:	795b      	ldrb	r3, [r3, #5]
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d10d      	bne.n	8001c06 <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b5e      	ldr	r3, [pc, #376]	; (8001d68 <IMU_parseInputReport+0x27c>)
 8001bf0:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001bf2:	4a5e      	ldr	r2, [pc, #376]	; (8001d6c <IMU_parseInputReport+0x280>)
 8001bf4:	89bb      	ldrh	r3, [r7, #12]
 8001bf6:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001bf8:	4a5d      	ldr	r2, [pc, #372]	; (8001d70 <IMU_parseInputReport+0x284>)
 8001bfa:	897b      	ldrh	r3, [r7, #10]
 8001bfc:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001bfe:	4a5d      	ldr	r2, [pc, #372]	; (8001d74 <IMU_parseInputReport+0x288>)
 8001c00:	893b      	ldrh	r3, [r7, #8]
 8001c02:	8013      	strh	r3, [r2, #0]
}
 8001c04:	e158      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001c06:	4b52      	ldr	r3, [pc, #328]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001c08:	795b      	ldrb	r3, [r3, #5]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d10d      	bne.n	8001c2a <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <IMU_parseInputReport+0x28c>)
 8001c14:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001c16:	4a59      	ldr	r2, [pc, #356]	; (8001d7c <IMU_parseInputReport+0x290>)
 8001c18:	89bb      	ldrh	r3, [r7, #12]
 8001c1a:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001c1c:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <IMU_parseInputReport+0x294>)
 8001c1e:	897b      	ldrh	r3, [r7, #10]
 8001c20:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001c22:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <IMU_parseInputReport+0x298>)
 8001c24:	893b      	ldrh	r3, [r7, #8]
 8001c26:	8013      	strh	r3, [r2, #0]
}
 8001c28:	e146      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001c2a:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001c2c:	795b      	ldrb	r3, [r3, #5]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d10d      	bne.n	8001c4e <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	4b54      	ldr	r3, [pc, #336]	; (8001d88 <IMU_parseInputReport+0x29c>)
 8001c38:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001c3a:	4a54      	ldr	r2, [pc, #336]	; (8001d8c <IMU_parseInputReport+0x2a0>)
 8001c3c:	89bb      	ldrh	r3, [r7, #12]
 8001c3e:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001c40:	4a53      	ldr	r2, [pc, #332]	; (8001d90 <IMU_parseInputReport+0x2a4>)
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001c46:	4a53      	ldr	r2, [pc, #332]	; (8001d94 <IMU_parseInputReport+0x2a8>)
 8001c48:	893b      	ldrh	r3, [r7, #8]
 8001c4a:	8013      	strh	r3, [r2, #0]
}
 8001c4c:	e134      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001c4e:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001c50:	795b      	ldrb	r3, [r3, #5]
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d003      	beq.n	8001c5e <IMU_parseInputReport+0x172>
 8001c56:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001c58:	795b      	ldrb	r3, [r3, #5]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d166      	bne.n	8001d2c <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001c5e:	f003 fdc9 	bl	80057f4 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b4c      	ldr	r3, [pc, #304]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001c66:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001c68:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <IMU_parseInputReport+0x2b0>)
 8001c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	4619      	mov	r1, r3
 8001c76:	4610      	mov	r0, r2
 8001c78:	f000 f966 	bl	8001f48 <IMU_qToFloat>
 8001c7c:	eef0 7a40 	vmov.f32	s15, s0
 8001c80:	4b45      	ldr	r3, [pc, #276]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001c82:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001c86:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <IMU_parseInputReport+0x2b0>)
 8001c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	4610      	mov	r0, r2
 8001c96:	f000 f957 	bl	8001f48 <IMU_qToFloat>
 8001c9a:	eef0 7a40 	vmov.f32	s15, s0
 8001c9e:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001ca0:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001ca4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ca8:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <IMU_parseInputReport+0x2b0>)
 8001caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f000 f948 	bl	8001f48 <IMU_qToFloat>
 8001cb8:	eef0 7a40 	vmov.f32	s15, s0
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001cbe:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001cc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cc6:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <IMU_parseInputReport+0x2b0>)
 8001cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f000 f939 	bl	8001f48 <IMU_qToFloat>
 8001cd6:	eef0 7a40 	vmov.f32	s15, s0
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001cdc:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001ce0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ce4:	210c      	movs	r1, #12
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f92e 	bl	8001f48 <IMU_qToFloat>
 8001cec:	eef0 7a40 	vmov.f32	s15, s0
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001cf2:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <IMU_parseInputReport+0x2b4>)
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4926      	ldr	r1, [pc, #152]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001d00:	f00d fd7e 	bl	800f800 <osMessageQueuePut>
		quatAccuracy = status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <IMU_parseInputReport+0x2b8>)
 8001d0a:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001d0c:	4a26      	ldr	r2, [pc, #152]	; (8001da8 <IMU_parseInputReport+0x2bc>)
 8001d0e:	89bb      	ldrh	r3, [r7, #12]
 8001d10:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001d12:	4a26      	ldr	r2, [pc, #152]	; (8001dac <IMU_parseInputReport+0x2c0>)
 8001d14:	897b      	ldrh	r3, [r7, #10]
 8001d16:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001d18:	4a25      	ldr	r2, [pc, #148]	; (8001db0 <IMU_parseInputReport+0x2c4>)
 8001d1a:	893b      	ldrh	r3, [r7, #8]
 8001d1c:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001d1e:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <IMU_parseInputReport+0x2c8>)
 8001d20:	8afb      	ldrh	r3, [r7, #22]
 8001d22:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001d24:	4a24      	ldr	r2, [pc, #144]	; (8001db8 <IMU_parseInputReport+0x2cc>)
 8001d26:	8abb      	ldrh	r3, [r7, #20]
 8001d28:	8013      	strh	r3, [r2, #0]
}
 8001d2a:	e0c5      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001d2e:	795b      	ldrb	r3, [r3, #5]
 8001d30:	2b11      	cmp	r3, #17
 8001d32:	d147      	bne.n	8001dc4 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001d34:	f003 fd5e 	bl	80057f4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <IMU_parseInputReport+0x2d0>)
 8001d3c:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <IMU_parseInputReport+0x2d0>)
 8001d40:	893b      	ldrh	r3, [r7, #8]
 8001d42:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <IMU_parseInputReport+0x2d4>)
 8001d46:	893b      	ldrh	r3, [r7, #8]
 8001d48:	8013      	strh	r3, [r2, #0]
}
 8001d4a:	e0b5      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
 8001d4c:	20027dfc 	.word	0x20027dfc
 8001d50:	20027e8c 	.word	0x20027e8c
 8001d54:	20027e18 	.word	0x20027e18
 8001d58:	20027f54 	.word	0x20027f54
 8001d5c:	20027f3c 	.word	0x20027f3c
 8001d60:	20027f58 	.word	0x20027f58
 8001d64:	20027e54 	.word	0x20027e54
 8001d68:	20027e50 	.word	0x20027e50
 8001d6c:	20027e22 	.word	0x20027e22
 8001d70:	20027f40 	.word	0x20027f40
 8001d74:	20027e7e 	.word	0x20027e7e
 8001d78:	20027e80 	.word	0x20027e80
 8001d7c:	20027e82 	.word	0x20027e82
 8001d80:	20027e4a 	.word	0x20027e4a
 8001d84:	20027e48 	.word	0x20027e48
 8001d88:	20027e00 	.word	0x20027e00
 8001d8c:	20027e4c 	.word	0x20027e4c
 8001d90:	20027f42 	.word	0x20027f42
 8001d94:	20027e52 	.word	0x20027e52
 8001d98:	20027e64 	.word	0x20027e64
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	2002797c 	.word	0x2002797c
 8001da4:	20027e1e 	.word	0x20027e1e
 8001da8:	20027f56 	.word	0x20027f56
 8001dac:	20027e7c 	.word	0x20027e7c
 8001db0:	20027df8 	.word	0x20027df8
 8001db4:	20027e14 	.word	0x20027e14
 8001db8:	20027e56 	.word	0x20027e56
 8001dbc:	20027e04 	.word	0x20027e04
 8001dc0:	20027f5a 	.word	0x20027f5a
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001dc6:	795b      	ldrb	r3, [r3, #5]
 8001dc8:	2b13      	cmp	r3, #19
 8001dca:	d10d      	bne.n	8001de8 <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001dcc:	f003 fd12 	bl	80057f4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <IMU_parseInputReport+0x3d8>)
 8001dd4:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001dd8:	7a5a      	ldrb	r2, [r3, #9]
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <IMU_parseInputReport+0x3d8>)
 8001ddc:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001de0:	7a5a      	ldrb	r2, [r3, #9]
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <IMU_parseInputReport+0x3dc>)
 8001de4:	701a      	strb	r2, [r3, #0]
}
 8001de6:	e067      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001de8:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001dea:	795b      	ldrb	r3, [r3, #5]
 8001dec:	2b1e      	cmp	r3, #30
 8001dee:	d12b      	bne.n	8001e48 <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001df0:	f003 fd00 	bl	80057f4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <IMU_parseInputReport+0x3e0>)
 8001df8:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	74fb      	strb	r3, [r7, #19]
 8001dfe:	e00c      	b.n	8001e1a <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001e00:	7cfb      	ldrb	r3, [r7, #19]
 8001e02:	f103 020b 	add.w	r2, r3, #11
 8001e06:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <IMU_parseInputReport+0x3e4>)
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	7cfb      	ldrb	r3, [r7, #19]
 8001e0c:	440b      	add	r3, r1
 8001e0e:	492c      	ldr	r1, [pc, #176]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001e10:	5c8a      	ldrb	r2, [r1, r2]
 8001e12:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	3301      	adds	r3, #1
 8001e18:	74fb      	strb	r3, [r7, #19]
 8001e1a:	7cfb      	ldrb	r3, [r7, #19]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d9ef      	bls.n	8001e00 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001e22:	7a9a      	ldrb	r2, [r3, #10]
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <IMU_parseInputReport+0x3e8>)
 8001e26:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001e28:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <IMU_parseInputReport+0x3e4>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <IMU_parseInputReport+0x3e0>)
 8001e2e:	6810      	ldr	r0, [r2, #0]
 8001e30:	6851      	ldr	r1, [r2, #4]
 8001e32:	c303      	stmia	r3!, {r0, r1}
 8001e34:	7a12      	ldrb	r2, [r2, #8]
 8001e36:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <IMU_parseInputReport+0x3ec>)
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2200      	movs	r2, #0
 8001e40:	4922      	ldr	r1, [pc, #136]	; (8001ecc <IMU_parseInputReport+0x3e0>)
 8001e42:	f00d fcdd 	bl	800f800 <osMessageQueuePut>
}
 8001e46:	e037      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001e4a:	795b      	ldrb	r3, [r3, #5]
 8001e4c:	2b14      	cmp	r3, #20
 8001e4e:	d109      	bne.n	8001e64 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001e50:	4a22      	ldr	r2, [pc, #136]	; (8001edc <IMU_parseInputReport+0x3f0>)
 8001e52:	89bb      	ldrh	r3, [r7, #12]
 8001e54:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001e56:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <IMU_parseInputReport+0x3f4>)
 8001e58:	897b      	ldrh	r3, [r7, #10]
 8001e5a:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001e5c:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <IMU_parseInputReport+0x3f8>)
 8001e5e:	893b      	ldrh	r3, [r7, #8]
 8001e60:	8013      	strh	r3, [r2, #0]
}
 8001e62:	e029      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001e66:	795b      	ldrb	r3, [r3, #5]
 8001e68:	2b15      	cmp	r3, #21
 8001e6a:	d109      	bne.n	8001e80 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001e6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <IMU_parseInputReport+0x3fc>)
 8001e6e:	89bb      	ldrh	r3, [r7, #12]
 8001e70:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001e72:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <IMU_parseInputReport+0x400>)
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001e78:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <IMU_parseInputReport+0x404>)
 8001e7a:	893b      	ldrh	r3, [r7, #8]
 8001e7c:	8013      	strh	r3, [r2, #0]
}
 8001e7e:	e01b      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001e82:	795b      	ldrb	r3, [r3, #5]
 8001e84:	2b16      	cmp	r3, #22
 8001e86:	d109      	bne.n	8001e9c <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001e88:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <IMU_parseInputReport+0x408>)
 8001e8a:	89bb      	ldrh	r3, [r7, #12]
 8001e8c:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001e8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <IMU_parseInputReport+0x40c>)
 8001e90:	897b      	ldrh	r3, [r7, #10]
 8001e92:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001e94:	4a19      	ldr	r2, [pc, #100]	; (8001efc <IMU_parseInputReport+0x410>)
 8001e96:	893b      	ldrh	r3, [r7, #8]
 8001e98:	8013      	strh	r3, [r2, #0]
}
 8001e9a:	e00d      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001e9e:	795b      	ldrb	r3, [r3, #5]
 8001ea0:	2bf1      	cmp	r3, #241	; 0xf1
 8001ea2:	d109      	bne.n	8001eb8 <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001ea6:	79db      	ldrb	r3, [r3, #7]
 8001ea8:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	2b07      	cmp	r3, #7
 8001eae:	d103      	bne.n	8001eb8 <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001eb2:	7a9a      	ldrb	r2, [r3, #10]
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <IMU_parseInputReport+0x414>)
 8001eb6:	701a      	strb	r2, [r3, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20027e8c 	.word	0x20027e8c
 8001ec4:	20027e0c 	.word	0x20027e0c
 8001ec8:	20027e86 	.word	0x20027e86
 8001ecc:	20027f44 	.word	0x20027f44
 8001ed0:	20027e60 	.word	0x20027e60
 8001ed4:	20027f3e 	.word	0x20027f3e
 8001ed8:	20027960 	.word	0x20027960
 8001edc:	20027e84 	.word	0x20027e84
 8001ee0:	20027e5e 	.word	0x20027e5e
 8001ee4:	20027f0e 	.word	0x20027f0e
 8001ee8:	20027e02 	.word	0x20027e02
 8001eec:	20027e88 	.word	0x20027e88
 8001ef0:	20027e58 	.word	0x20027e58
 8001ef4:	20027e5c 	.word	0x20027e5c
 8001ef8:	20027e5a 	.word	0x20027e5a
 8001efc:	20027e20 	.word	0x20027e20
 8001f00:	20027f3f 	.word	0x20027f3f

08001f04 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <IMU_softReset+0x3c>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8001f0e:	2301      	movs	r3, #1
 8001f10:	2101      	movs	r1, #1
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f990 	bl	8002238 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8001f18:	20c8      	movs	r0, #200	; 0xc8
 8001f1a:	f003 fc83 	bl	8005824 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f1e:	bf00      	nop
 8001f20:	f000 f8e2 	bl	80020e8 <IMU_receivePacket>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1fa      	bne.n	8001f20 <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 8001f2a:	20c8      	movs	r0, #200	; 0xc8
 8001f2c:	f003 fc7a 	bl	8005824 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f30:	bf00      	nop
 8001f32:	f000 f8d9 	bl	80020e8 <IMU_receivePacket>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1fa      	bne.n	8001f32 <IMU_softReset+0x2e>
		;
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20027e8c 	.word	0x20027e8c
 8001f44:	00000000 	.word	0x00000000

08001f48 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	460a      	mov	r2, r1
 8001f52:	80fb      	strh	r3, [r7, #6]
 8001f54:	4613      	mov	r3, r2
 8001f56:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8001f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f64:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8001f68:	797b      	ldrb	r3, [r7, #5]
 8001f6a:	425b      	negs	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fa63 	bl	8000438 <__aeabi_i2d>
 8001f72:	4603      	mov	r3, r0
 8001f74:	460c      	mov	r4, r1
 8001f76:	ec44 3b11 	vmov	d1, r3, r4
 8001f7a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001fc0 <IMU_qToFloat+0x78>
 8001f7e:	f014 fbe1 	bl	8016744 <pow>
 8001f82:	ec56 5b10 	vmov	r5, r6, d0
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f7fe fa68 	bl	800045c <__aeabi_f2d>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	4628      	mov	r0, r5
 8001f96:	4631      	mov	r1, r6
 8001f98:	f7fe fab8 	bl	800050c <__aeabi_dmul>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	f7fe fd62 	bl	8000a6c <__aeabi_d2f>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	ee07 3a90 	vmov	s15, r3
}
 8001fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	40000000 	.word	0x40000000

08001fc8 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	2005      	movs	r0, #5
 8001fd8:	f000 f81a 	bl	8002010 <IMU_setFeatureCommand_2>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 8001ff2:	4a06      	ldr	r2, [pc, #24]	; (800200c <IMU_enableActivityClassifier+0x28>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8001ff8:	89fb      	ldrh	r3, [r7, #14]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	201e      	movs	r0, #30
 8002000:	f000 f818 	bl	8002034 <IMU_setFeatureCommand_3>
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20027e60 	.word	0x20027e60

08002010 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	460a      	mov	r2, r1
 800201a:	71fb      	strb	r3, [r7, #7]
 800201c:	4613      	mov	r3, r2
 800201e:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8002020:	88b9      	ldrh	r1, [r7, #4]
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2200      	movs	r2, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f804 	bl	8002034 <IMU_setFeatureCommand_3>
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	603a      	str	r2, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
 8002040:	460b      	mov	r3, r1
 8002042:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 8002044:	88bb      	ldrh	r3, [r7, #4]
 8002046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002052:	22fd      	movs	r2, #253	; 0xfd
 8002054:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8002056:	4a23      	ldr	r2, [pc, #140]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 800205e:	2200      	movs	r2, #0
 8002060:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002064:	2200      	movs	r2, #0
 8002066:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 800206a:	2200      	movs	r2, #0
 800206c:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002074:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	121b      	asrs	r3, r3, #8
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 800207e:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	141b      	asrs	r3, r3, #16
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002088:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	0e1b      	lsrs	r3, r3, #24
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002092:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002096:	2200      	movs	r2, #0
 8002098:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 800209c:	2200      	movs	r2, #0
 800209e:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 80020b2:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 80020bc:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 80020c6:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	0e1b      	lsrs	r3, r3, #24
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 80020d0:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 80020d2:	2302      	movs	r3, #2
 80020d4:	2111      	movs	r1, #17
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f8ae 	bl	8002238 <IMU_sendPacket>
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20027e8c 	.word	0x20027e8c

080020e8 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 80020ee:	4b22      	ldr	r3, [pc, #136]	; (8002178 <IMU_receivePacket+0x90>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <IMU_receivePacket+0x94>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f005 fd9a 	bl	8007c34 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <IMU_receivePacket+0x22>
		return (false);
 8002106:	2300      	movs	r3, #0
 8002108:	e031      	b.n	800216e <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <IMU_receivePacket+0x98>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f04f 31ff 	mov.w	r1, #4294967295
 8002112:	4618      	mov	r0, r3
 8002114:	f00d fa30 	bl	800f578 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <IMU_receivePacket+0x9c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b299      	uxth	r1, r3
 800211e:	2364      	movs	r3, #100	; 0x64
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2304      	movs	r3, #4
 8002124:	4a18      	ldr	r2, [pc, #96]	; (8002188 <IMU_receivePacket+0xa0>)
 8002126:	4819      	ldr	r0, [pc, #100]	; (800218c <IMU_receivePacket+0xa4>)
 8002128:	f005 ff38 	bl	8007f9c <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <IMU_receivePacket+0x98>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f00d fa87 	bl	800f644 <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <IMU_receivePacket+0xa0>)
 8002138:	785b      	ldrb	r3, [r3, #1]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	b21a      	sxth	r2, r3
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <IMU_receivePacket+0xa0>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b21b      	sxth	r3, r3
 8002144:	4313      	orrs	r3, r2
 8002146:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800214e:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002158:	2300      	movs	r3, #0
 800215a:	e008      	b.n	800216e <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	3b04      	subs	r3, #4
 8002160:	b29b      	uxth	r3, r3
 8002162:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f812 	bl	8002190 <IMU_getData>


	return (true); //We're done!
 800216c:	2301      	movs	r3, #1
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20027f14 	.word	0x20027f14
 800217c:	20027e4e 	.word	0x20027e4e
 8002180:	20027968 	.word	0x20027968
 8002184:	20000006 	.word	0x20000006
 8002188:	20027dfc 	.word	0x20027dfc
 800218c:	20027f64 	.word	0x20027f64

08002190 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af02      	add	r7, sp, #8
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 800219a:	2300      	movs	r3, #0
 800219c:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 800219e:	e036      	b.n	800220e <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 80021a4:	89bb      	ldrh	r3, [r7, #12]
 80021a6:	2b1c      	cmp	r3, #28
 80021a8:	d901      	bls.n	80021ae <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 80021aa:	231c      	movs	r3, #28
 80021ac:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <IMU_getData+0x90>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f04f 31ff 	mov.w	r1, #4294967295
 80021b6:	4618      	mov	r0, r3
 80021b8:	f00d f9de 	bl	800f578 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <IMU_getData+0x94>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b299      	uxth	r1, r3
 80021c2:	89bb      	ldrh	r3, [r7, #12]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	3304      	adds	r3, #4
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	2364      	movs	r3, #100	; 0x64
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	4a15      	ldr	r2, [pc, #84]	; (8002228 <IMU_getData+0x98>)
 80021d4:	4815      	ldr	r0, [pc, #84]	; (800222c <IMU_getData+0x9c>)
 80021d6:	f005 fee1 	bl	8007f9c <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <IMU_getData+0x90>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f00d fa30 	bl	800f644 <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 80021e4:	89fa      	ldrh	r2, [r7, #14]
 80021e6:	89bb      	ldrh	r3, [r7, #12]
 80021e8:	4413      	add	r3, r2
 80021ea:	2b7f      	cmp	r3, #127	; 0x7f
 80021ec:	dc07      	bgt.n	80021fe <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 80021ee:	89fb      	ldrh	r3, [r7, #14]
 80021f0:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <IMU_getData+0xa0>)
 80021f2:	4413      	add	r3, r2
 80021f4:	89ba      	ldrh	r2, [r7, #12]
 80021f6:	490f      	ldr	r1, [pc, #60]	; (8002234 <IMU_getData+0xa4>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	f014 fa8f 	bl	801671c <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 80021fe:	89fa      	ldrh	r2, [r7, #14]
 8002200:	89bb      	ldrh	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 8002206:	88fa      	ldrh	r2, [r7, #6]
 8002208:	89bb      	ldrh	r3, [r7, #12]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1c5      	bne.n	80021a0 <IMU_getData+0x10>
	}
	return (true); //Done!
 8002214:	2301      	movs	r3, #1
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20027968 	.word	0x20027968
 8002224:	20000006 	.word	0x20000006
 8002228:	20000a60 	.word	0x20000a60
 800222c:	20027f64 	.word	0x20027f64
 8002230:	20027e8c 	.word	0x20027e8c
 8002234:	20000a64 	.word	0x20000a64

08002238 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af02      	add	r7, sp, #8
 800223e:	4603      	mov	r3, r0
 8002240:	460a      	mov	r2, r1
 8002242:	71fb      	strb	r3, [r7, #7]
 8002244:	4613      	mov	r3, r2
 8002246:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002248:	79bb      	ldrb	r3, [r7, #6]
 800224a:	3304      	adds	r3, #4
 800224c:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <IMU_sendPacket+0x84>)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	121b      	asrs	r3, r3, #8
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <IMU_sendPacket+0x84>)
 800225c:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 800225e:	4a17      	ldr	r2, [pc, #92]	; (80022bc <IMU_sendPacket+0x84>)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <IMU_sendPacket+0x88>)
 8002268:	5cd2      	ldrb	r2, [r2, r3]
 800226a:	1c51      	adds	r1, r2, #1
 800226c:	b2c8      	uxtb	r0, r1
 800226e:	4914      	ldr	r1, [pc, #80]	; (80022c0 <IMU_sendPacket+0x88>)
 8002270:	54c8      	strb	r0, [r1, r3]
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <IMU_sendPacket+0x84>)
 8002274:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 8002276:	79bb      	ldrb	r3, [r7, #6]
 8002278:	461a      	mov	r2, r3
 800227a:	4912      	ldr	r1, [pc, #72]	; (80022c4 <IMU_sendPacket+0x8c>)
 800227c:	4812      	ldr	r0, [pc, #72]	; (80022c8 <IMU_sendPacket+0x90>)
 800227e:	f014 fa4d 	bl	801671c <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <IMU_sendPacket+0x94>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f04f 31ff 	mov.w	r1, #4294967295
 800228a:	4618      	mov	r0, r3
 800228c:	f00d f974 	bl	800f578 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <IMU_sendPacket+0x98>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b299      	uxth	r1, r3
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	b29a      	uxth	r2, r3
 800229a:	2364      	movs	r3, #100	; 0x64
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	4a06      	ldr	r2, [pc, #24]	; (80022bc <IMU_sendPacket+0x84>)
 80022a2:	480c      	ldr	r0, [pc, #48]	; (80022d4 <IMU_sendPacket+0x9c>)
 80022a4:	f005 fd86 	bl	8007db4 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <IMU_sendPacket+0x94>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f00d f9c9 	bl	800f644 <osSemaphoreRelease>

	return (true);
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20027f18 	.word	0x20027f18
 80022c0:	20000a58 	.word	0x20000a58
 80022c4:	20027e8c 	.word	0x20027e8c
 80022c8:	20027f1c 	.word	0x20027f1c
 80022cc:	20027968 	.word	0x20027968
 80022d0:	20000006 	.word	0x20000006
 80022d4:	20027f64 	.word	0x20027f64

080022d8 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <vPortSuppressTicksAndSleep+0x84>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <vPortSuppressTicksAndSleep+0x84>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022f2:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80022f6:	f00f ff93 	bl	8012220 <eTaskConfirmSleepModeStatus>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d107      	bne.n	8002310 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <vPortSuppressTicksAndSleep+0x84>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a15      	ldr	r2, [pc, #84]	; (800235c <vPortSuppressTicksAndSleep+0x84>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800230c:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 800230e:	e021      	b.n	8002354 <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d002      	beq.n	800231e <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f869 	bl	80023f0 <LpTimerStart>
    LpEnter( );
 800231e:	f000 f8cb 	bl	80024b8 <LpEnter>
    if (xExpectedIdleTime != (~0))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 800232a:	f000 f8cd 	bl	80024c8 <LpGetElapsedTime>
 800232e:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f00f fc8f 	bl	8011c54 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <vPortSuppressTicksAndSleep+0x88>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800233c:	4b07      	ldr	r3, [pc, #28]	; (800235c <vPortSuppressTicksAndSleep+0x84>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a06      	ldr	r2, [pc, #24]	; (800235c <vPortSuppressTicksAndSleep+0x84>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <vPortSuppressTicksAndSleep+0x8c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a06      	ldr	r2, [pc, #24]	; (8002368 <vPortSuppressTicksAndSleep+0x90>)
 800234e:	3b01      	subs	r3, #1
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	b662      	cpsie	i
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	e000e010 	.word	0xe000e010
 8002360:	e000e018 	.word	0xe000e018
 8002364:	20000a80 	.word	0x20000a80
 8002368:	e000e014 	.word	0xe000e014

0800236c <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  LpTimerInit( );
 8002370:	f000 f828 	bl	80023c4 <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <vPortSetupTimerInterrupt+0x40>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <vPortSetupTimerInterrupt+0x44>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <vPortSetupTimerInterrupt+0x48>)
 8002382:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <vPortSetupTimerInterrupt+0x4c>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <vPortSetupTimerInterrupt+0x50>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <vPortSetupTimerInterrupt+0x40>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <vPortSetupTimerInterrupt+0x44>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <vPortSetupTimerInterrupt+0x54>)
 800239e:	3b01      	subs	r3, #1
 80023a0:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <vPortSetupTimerInterrupt+0x4c>)
 80023a4:	2207      	movs	r2, #7
 80023a6:	601a      	str	r2, [r3, #0]
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000078 	.word	0x20000078
 80023b0:	10624dd3 	.word	0x10624dd3
 80023b4:	20000a80 	.word	0x20000a80
 80023b8:	e000e010 	.word	0xe000e010
 80023bc:	e000e018 	.word	0xe000e018
 80023c0:	e000e014 	.word	0xe000e014

080023c4 <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <LpTimerInit+0x14>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	4903      	ldr	r1, [pc, #12]	; (80023dc <LpTimerInit+0x18>)
 80023ce:	2000      	movs	r0, #0
 80023d0:	f001 f83a 	bl	8003448 <HW_TS_Create>

  return;
 80023d4:	bf00      	nop
}
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	080023e1 	.word	0x080023e1
 80023dc:	20000a88 	.word	0x20000a88

080023e0 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 80023e4:	bf00      	nop
}
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f241 02c6 	movw	r2, #4294	; 0x10c6
 80023fe:	4293      	cmp	r3, r2
 8002400:	d80c      	bhi.n	800241c <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <LpTimerStart+0xb8>)
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	099b      	lsrs	r3, r3, #6
 8002410:	4a26      	ldr	r2, [pc, #152]	; (80024ac <LpTimerStart+0xbc>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	e034      	b.n	8002486 <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a24      	ldr	r2, [pc, #144]	; (80024b0 <LpTimerStart+0xc0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d81b      	bhi.n	800245c <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	099b      	lsrs	r3, r3, #6
 8002434:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <LpTimerStart+0xbc>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <LpTimerStart+0xc0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d806      	bhi.n	8002454 <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	e018      	b.n	8002486 <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	e014      	b.n	8002486 <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	099b      	lsrs	r3, r3, #6
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <LpTimerStart+0xbc>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8002470:	4293      	cmp	r3, r2
 8002472:	d805      	bhi.n	8002480 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <LpTimerStart+0xb8>)
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	e002      	b.n	8002486 <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 8002480:	f04f 33ff 	mov.w	r3, #4294967295
 8002484:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <LpTimerStart+0xc4>)
 8002488:	791b      	ldrb	r3, [r3, #4]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4618      	mov	r0, r3
 800248e:	f001 f8db 	bl	8003648 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 8002492:	f001 f95f 	bl	8003754 <HW_TS_RTC_ReadLeftTicksToCount>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <LpTimerStart+0xc4>)
 800249c:	601a      	str	r2, [r3, #0]

  return;
 800249e:	bf00      	nop
}
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	000f4240 	.word	0x000f4240
 80024ac:	0113094d 	.word	0x0113094d
 80024b0:	00418937 	.word	0x00418937
 80024b4:	20000a84 	.word	0x20000a84

080024b8 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 80024bc:	bf00      	nop
}
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 80024ce:	4b16      	ldr	r3, [pc, #88]	; (8002528 <LpGetElapsedTime+0x60>)
 80024d0:	681c      	ldr	r4, [r3, #0]
 80024d2:	f001 f93f 	bl	8003754 <HW_TS_RTC_ReadLeftTicksToCount>
 80024d6:	4603      	mov	r3, r0
 80024d8:	1ae3      	subs	r3, r4, r3
 80024da:	f04f 0400 	mov.w	r4, #0
 80024de:	4a13      	ldr	r2, [pc, #76]	; (800252c <LpGetElapsedTime+0x64>)
 80024e0:	fb02 f104 	mul.w	r1, r2, r4
 80024e4:	2200      	movs	r2, #0
 80024e6:	fb02 f203 	mul.w	r2, r2, r3
 80024ea:	440a      	add	r2, r1
 80024ec:	490f      	ldr	r1, [pc, #60]	; (800252c <LpGetElapsedTime+0x64>)
 80024ee:	fba3 3401 	umull	r3, r4, r3, r1
 80024f2:	4422      	add	r2, r4
 80024f4:	4614      	mov	r4, r2
 80024f6:	e9c7 3400 	strd	r3, r4, [r7]
 80024fa:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 80024fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002502:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <LpGetElapsedTime+0x68>)
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	f7fe fb00 	bl	8000b0c <__aeabi_uldivmod>
 800250c:	4603      	mov	r3, r0
 800250e:	460c      	mov	r4, r1
 8002510:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <LpGetElapsedTime+0x60>)
 8002516:	791b      	ldrb	r3, [r3, #4]
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f80b 	bl	8003534 <HW_TS_Stop>

  return (uint32_t)return_value;
 800251e:	683b      	ldr	r3, [r7, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	20000a84 	.word	0x20000a84
 800252c:	00077240 	.word	0x00077240
 8002530:	000f4240 	.word	0x000f4240

08002534 <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{0.780941, 2.300994, -0.204002},
							  {-0.184830, -0.411017, 0.892694, 0.104180, 0.895032, 0.433664, -0.977233, 0.173155, -0.122609}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 8002534:	b4b0      	push	{r4, r5, r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a12      	ldr	r2, [pc, #72]	; (8002588 <_GeometryBuilder+0x54>)
 8002540:	461c      	mov	r4, r3
 8002542:	4615      	mov	r5, r2
 8002544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a0d      	ldr	r2, [pc, #52]	; (800258c <_GeometryBuilder+0x58>)
 8002558:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800255c:	4615      	mov	r5, r2
 800255e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002566:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800256a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <_GeometryBuilder+0x5c>)
 8002572:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8002576:	4613      	mov	r3, r2
 8002578:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800257a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bcb0      	pop	{r4, r5, r7}
 8002586:	4770      	bx	lr
 8002588:	20000008 	.word	0x20000008
 800258c:	20000038 	.word	0x20000038
 8002590:	20000a8c 	.word	0x20000a8c

08002594 <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 8002594:	b5b0      	push	{r4, r5, r7, lr}
 8002596:	b096      	sub	sp, #88	; 0x58
 8002598:	af02      	add	r7, sp, #8
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2bc7      	cmp	r3, #199	; 0xc7
 80025a4:	f340 8093 	ble.w	80026ce <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3360      	adds	r3, #96	; 0x60
 80025ac:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 80025ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	015b      	lsls	r3, r3, #5
 80025b4:	3310      	adds	r3, #16
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80025c0:	2300      	movs	r3, #0
 80025c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025c4:	e011      	b.n	80025ea <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80025ce:	3104      	adds	r1, #4
 80025d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 80025d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025dc:	4293      	cmp	r3, r2
 80025de:	bf38      	it	cc
 80025e0:	4613      	movcc	r3, r2
 80025e2:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80025e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e6:	3301      	adds	r3, #1
 80025e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80025ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	ddea      	ble.n	80025c6 <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 80025f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f2:	2b0b      	cmp	r3, #11
 80025f4:	d86b      	bhi.n	80026ce <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002600:	ed93 7a01 	vldr	s14, [r3, #4]
 8002604:	f107 0214 	add.w	r2, r7, #20
 8002608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800260c:	4619      	mov	r1, r3
 800260e:	eef0 0a47 	vmov.f32	s1, s14
 8002612:	eeb0 0a67 	vmov.f32	s0, s15
 8002616:	f000 f8e5 	bl	80027e4 <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002622:	edd3 7a02 	vldr	s15, [r3, #8]
 8002626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002628:	ed93 7a03 	vldr	s14, [r3, #12]
 800262c:	f107 0208 	add.w	r2, r7, #8
 8002630:	f107 0320 	add.w	r3, r7, #32
 8002634:	4619      	mov	r1, r3
 8002636:	eef0 0a47 	vmov.f32	s1, s14
 800263a:	eeb0 0a67 	vmov.f32	s0, s15
 800263e:	f000 f8d1 	bl	80027e4 <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3370      	adds	r3, #112	; 0x70
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	327c      	adds	r2, #124	; 0x7c
 800264a:	f107 0520 	add.w	r5, r7, #32
 800264e:	f107 0408 	add.w	r4, r7, #8
 8002652:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002656:	f107 0014 	add.w	r0, r7, #20
 800265a:	9201      	str	r2, [sp, #4]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	462b      	mov	r3, r5
 8002660:	4622      	mov	r2, r4
 8002662:	f000 f945 	bl	80028f0 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 8002666:	2300      	movs	r3, #0
 8002668:	647b      	str	r3, [r7, #68]	; 0x44
 800266a:	e019      	b.n	80026a0 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002670:	331c      	adds	r3, #28
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	ed93 7a00 	vldr	s14, [r3]
 800267a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	3304      	adds	r3, #4
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002690:	331c      	adds	r3, #28
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 800269a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269c:	3301      	adds	r3, #1
 800269e:	647b      	str	r3, [r7, #68]	; 0x44
 80026a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	dde2      	ble.n	800266c <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 80026a6:	f003 f8a5 	bl	80057f4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <consume_angles+0x144>)
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80026bc:	2300      	movs	r3, #0
 80026be:	2200      	movs	r2, #0
 80026c0:	f00d f89e 	bl	800f800 <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <consume_angles+0x148>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f00c ffbb 	bl	800f644 <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 80026ce:	bf00      	nop
 80026d0:	3750      	adds	r7, #80	; 0x50
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bdb0      	pop	{r4, r5, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2002786c 	.word	0x2002786c
 80026dc:	20027da4 	.word	0x20027da4

080026e0 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3304      	adds	r3, #4
 80026f0:	ed93 7a00 	vldr	s14, [r3]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	3308      	adds	r3, #8
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3308      	adds	r3, #8
 8002704:	edd3 6a00 	vldr	s13, [r3]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	3304      	adds	r3, #4
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3308      	adds	r3, #8
 8002722:	ed93 7a00 	vldr	s14, [r3]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	edd3 6a00 	vldr	s13, [r3]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3308      	adds	r3, #8
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800274a:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	ed93 7a00 	vldr	s14, [r3]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3304      	adds	r3, #4
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3304      	adds	r3, #4
 8002764:	edd3 6a00 	vldr	s13, [r3]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3308      	adds	r3, #8
 8002776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800277a:	edc3 7a00 	vstr	s15, [r3]
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <vec_length>:

float vec_length(float *vec) {
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	461a      	mov	r2, r3
 8002798:	2103      	movs	r1, #3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f013 fcce 	bl	801613c <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	f107 0308 	add.w	r3, r7, #8
 80027a8:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80027aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80027ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b6:	db09      	blt.n	80027cc <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80027b8:	ed97 0a05 	vldr	s0, [r7, #20]
 80027bc:	f014 f932 	bl	8016a24 <sqrtf>
 80027c0:	eef0 7a40 	vmov.f32	s15, s0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	edc3 7a00 	vstr	s15, [r3]
 80027ca:	e003      	b.n	80027d4 <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

    return res;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	ee07 3a90 	vmov	s15, r3
}
 80027da:	eeb0 0a67 	vmov.f32	s0, s15
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b09a      	sub	sp, #104	; 0x68
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6178      	str	r0, [r7, #20]
 80027ec:	ed87 0a04 	vstr	s0, [r7, #16]
 80027f0:	edc7 0a03 	vstr	s1, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 80027f8:	ed97 0a04 	vldr	s0, [r7, #16]
 80027fc:	f013 fdca 	bl	8016394 <arm_cos_f32>
 8002800:	eef0 7a40 	vmov.f32	s15, s0
 8002804:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800280e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002812:	f013 fd79 	bl	8016308 <arm_sin_f32>
 8002816:	eef0 7a40 	vmov.f32	s15, s0
 800281a:	eef1 7a67 	vneg.f32	s15, s15
 800281e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002828:	ed97 0a03 	vldr	s0, [r7, #12]
 800282c:	f013 fdb2 	bl	8016394 <arm_cos_f32>
 8002830:	eef0 7a40 	vmov.f32	s15, s0
 8002834:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002838:	ed97 0a03 	vldr	s0, [r7, #12]
 800283c:	f013 fd64 	bl	8016308 <arm_sin_f32>
 8002840:	eef0 7a40 	vmov.f32	s15, s0
 8002844:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8002848:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 8002854:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002858:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800285c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff3d 	bl	80026e0 <vec_cross_product>
    float len = vec_length(ray);
 8002866:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff8d 	bl	800278a <vec_length>
 8002870:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 8002874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002878:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800287c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002880:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002888:	2203      	movs	r2, #3
 800288a:	eeb0 0a66 	vmov.f32	s0, s13
 800288e:	4618      	mov	r0, r3
 8002890:	f013 fe24 	bl	80164dc <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 8002894:	2303      	movs	r3, #3
 8002896:	873b      	strh	r3, [r7, #56]	; 0x38
 8002898:	2303      	movs	r3, #3
 800289a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	330c      	adds	r3, #12
 80028a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 80028a2:	2303      	movs	r3, #3
 80028a4:	863b      	strh	r3, [r7, #48]	; 0x30
 80028a6:	2301      	movs	r3, #1
 80028a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80028aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028ae:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 80028b0:	2303      	movs	r3, #3
 80028b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80028b4:	2301      	movs	r3, #1
 80028b6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 80028bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028c0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80028c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028c8:	4618      	mov	r0, r3
 80028ca:	f013 fc7d 	bl	80161c8 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 80028ce:	f107 031c 	add.w	r3, r7, #28
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f107 011c 	add.w	r1, r7, #28
 80028e0:	2303      	movs	r3, #3
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	f013 fe96 	bl	8016614 <arm_add_f32>
}
 80028e8:	bf00      	nop
 80028ea:	3768      	adds	r7, #104	; 0x68
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b098      	sub	sp, #96	; 0x60
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 80028fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 800290a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800290e:	2303      	movs	r3, #3
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f013 fd88 	bl	8016428 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 8002918:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800291c:	2203      	movs	r2, #3
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68b8      	ldr	r0, [r7, #8]
 8002922:	f013 fe1f 	bl	8016564 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 8002926:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800292a:	2203      	movs	r2, #3
 800292c:	6839      	ldr	r1, [r7, #0]
 800292e:	68b8      	ldr	r0, [r7, #8]
 8002930:	f013 fe18 	bl	8016564 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 8002934:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002938:	2203      	movs	r2, #3
 800293a:	6839      	ldr	r1, [r7, #0]
 800293c:	6838      	ldr	r0, [r7, #0]
 800293e:	f013 fe11 	bl	8016564 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 8002942:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002946:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800294a:	2203      	movs	r2, #3
 800294c:	68b8      	ldr	r0, [r7, #8]
 800294e:	f013 fe09 	bl	8016564 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 8002952:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002956:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800295a:	2203      	movs	r2, #3
 800295c:	6838      	ldr	r0, [r7, #0]
 800295e:	f013 fe01 	bl	8016564 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 8002962:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002966:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800296a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800296e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002972:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800297a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800297e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 8002982:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002986:	eef0 7ae7 	vabs.f32	s15, s15
 800298a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002aa8 <intersect_lines+0x1b8>
 800298e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	d501      	bpl.n	800299c <intersect_lines+0xac>
        return 0;
 8002998:	2300      	movs	r3, #0
 800299a:	e081      	b.n	8002aa0 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 800299c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80029a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80029ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029b8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80029bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 80029c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 80029d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029d4:	2203      	movs	r2, #3
 80029d6:	4619      	mov	r1, r3
 80029d8:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80029dc:	68b8      	ldr	r0, [r7, #8]
 80029de:	f013 fd7d 	bl	80164dc <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 80029e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029e6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80029ea:	2303      	movs	r3, #3
 80029ec:	68f9      	ldr	r1, [r7, #12]
 80029ee:	f013 fe11 	bl	8016614 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 80029f2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80029f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fe:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002a02:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a0e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a16:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8002a1a:	f107 031c 	add.w	r3, r7, #28
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002a32:	6838      	ldr	r0, [r7, #0]
 8002a34:	f013 fd52 	bl	80164dc <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002a38:	f107 021c 	add.w	r2, r7, #28
 8002a3c:	f107 001c 	add.w	r0, r7, #28
 8002a40:	2303      	movs	r3, #3
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	f013 fde6 	bl	8016614 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a54:	f107 0210 	add.w	r2, r7, #16
 8002a58:	f107 011c 	add.w	r1, r7, #28
 8002a5c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a60:	2303      	movs	r3, #3
 8002a62:	f013 fdd7 	bl	8016614 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a6e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002a72:	4618      	mov	r0, r3
 8002a74:	f013 fd32 	bl	80164dc <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a78:	f107 0210 	add.w	r2, r7, #16
 8002a7c:	f107 011c 	add.w	r1, r7, #28
 8002a80:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a84:	2303      	movs	r3, #3
 8002a86:	f013 fccf 	bl	8016428 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fe7b 	bl	800278a <vec_length>
 8002a94:	eef0 7a40 	vmov.f32	s15, s0
 8002a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9a:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3760      	adds	r7, #96	; 0x60
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	3727c5ac 	.word	0x3727c5ac

08002aac <LL_AHB2_GRP1_EnableClock>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af4:	2004      	movs	r0, #4
 8002af6:	f7ff ffd9 	bl	8002aac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002afa:	2080      	movs	r0, #128	; 0x80
 8002afc:	f7ff ffd6 	bl	8002aac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b00:	2002      	movs	r0, #2
 8002b02:	f7ff ffd3 	bl	8002aac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	2001      	movs	r0, #1
 8002b08:	f7ff ffd0 	bl	8002aac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b0c:	2010      	movs	r0, #16
 8002b0e:	f7ff ffcd 	bl	8002aac <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b12:	2308      	movs	r3, #8
 8002b14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b16:	2303      	movs	r3, #3
 8002b18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4829      	ldr	r0, [pc, #164]	; (8002bc8 <MX_GPIO_Init+0xe8>)
 8002b24:	f004 ff16 	bl	8007954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8002b28:	f240 3333 	movw	r3, #819	; 0x333
 8002b2c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4824      	ldr	r0, [pc, #144]	; (8002bcc <MX_GPIO_Init+0xec>)
 8002b3c:	f004 ff0a 	bl	8007954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8002b40:	f649 13dc 	movw	r3, #39388	; 0x99dc
 8002b44:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b46:	2303      	movs	r3, #3
 8002b48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	4619      	mov	r1, r3
 8002b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b56:	f004 fefd 	bl	8007954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <MX_GPIO_Init+0xf0>)
 8002b60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b62:	2301      	movs	r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6e:	f004 fef1 	bl	8007954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002b72:	2304      	movs	r3, #4
 8002b74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b76:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <MX_GPIO_Init+0xf4>)
 8002b78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4812      	ldr	r0, [pc, #72]	; (8002bcc <MX_GPIO_Init+0xec>)
 8002b84:	f004 fee6 	bl	8007954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b88:	2310      	movs	r3, #16
 8002b8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	480f      	ldr	r0, [pc, #60]	; (8002bd8 <MX_GPIO_Init+0xf8>)
 8002b9a:	f004 fedb 	bl	8007954 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2105      	movs	r1, #5
 8002ba2:	2008      	movs	r0, #8
 8002ba4:	f004 fb4f 	bl	8007246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002ba8:	2008      	movs	r0, #8
 8002baa:	f004 fb66 	bl	800727a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2105      	movs	r1, #5
 8002bb2:	2017      	movs	r0, #23
 8002bb4:	f004 fb47 	bl	8007246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002bb8:	2017      	movs	r0, #23
 8002bba:	f004 fb5e 	bl	800727a <HAL_NVIC_EnableIRQ>

}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	48001c00 	.word	0x48001c00
 8002bcc:	48000400 	.word	0x48000400
 8002bd0:	10210000 	.word	0x10210000
 8002bd4:	10110000 	.word	0x10110000
 8002bd8:	48001000 	.word	0x48001000

08002bdc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <LL_EXTI_EnableIT_0_31+0x24>)
 8002be6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002bea:	4905      	ldr	r1, [pc, #20]	; (8002c00 <LL_EXTI_EnableIT_0_31+0x24>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	58000800 	.word	0x58000800

08002c04 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4904      	ldr	r1, [pc, #16]	; (8002c24 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]

}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	58000800 	.word	0x58000800

08002c28 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <ReadRtcSsrValue+0x3c>)
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <ReadRtcSsrValue+0x3c>)
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002c3e:	e005      	b.n	8002c4c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c44:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <ReadRtcSsrValue+0x3c>)
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d1f5      	bne.n	8002c40 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002c54:	683b      	ldr	r3, [r7, #0]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40002800 	.word	0x40002800

08002c68 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	460a      	mov	r2, r1
 8002c72:	71fb      	strb	r3, [r7, #7]
 8002c74:	4613      	mov	r3, r2
 8002c76:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002c78:	79ba      	ldrb	r2, [r7, #6]
 8002c7a:	491d      	ldr	r1, [pc, #116]	; (8002cf0 <LinkTimerAfter+0x88>)
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	3315      	adds	r3, #21
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d009      	beq.n	8002ca6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	4916      	ldr	r1, [pc, #88]	; (8002cf0 <LinkTimerAfter+0x88>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	79fa      	ldrb	r2, [r7, #7]
 8002ca4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002ca6:	79fa      	ldrb	r2, [r7, #7]
 8002ca8:	4911      	ldr	r1, [pc, #68]	; (8002cf0 <LinkTimerAfter+0x88>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3315      	adds	r3, #21
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002cba:	79fa      	ldrb	r2, [r7, #7]
 8002cbc:	490c      	ldr	r1, [pc, #48]	; (8002cf0 <LinkTimerAfter+0x88>)
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3314      	adds	r3, #20
 8002cca:	79ba      	ldrb	r2, [r7, #6]
 8002ccc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002cce:	79ba      	ldrb	r2, [r7, #6]
 8002cd0:	4907      	ldr	r1, [pc, #28]	; (8002cf0 <LinkTimerAfter+0x88>)
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	3315      	adds	r3, #21
 8002cde:	79fa      	ldrb	r2, [r7, #7]
 8002ce0:	701a      	strb	r2, [r3, #0]

  return;
 8002ce2:	bf00      	nop
}
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000138 	.word	0x20000138

08002cf4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460a      	mov	r2, r1
 8002cfe:	71fb      	strb	r3, [r7, #7]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002d04:	4b29      	ldr	r3, [pc, #164]	; (8002dac <LinkTimerBefore+0xb8>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	79ba      	ldrb	r2, [r7, #6]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d032      	beq.n	8002d76 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002d10:	79ba      	ldrb	r2, [r7, #6]
 8002d12:	4927      	ldr	r1, [pc, #156]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3314      	adds	r3, #20
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	4922      	ldr	r1, [pc, #136]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3315      	adds	r3, #21
 8002d34:	79fa      	ldrb	r2, [r7, #7]
 8002d36:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002d38:	79fa      	ldrb	r2, [r7, #7]
 8002d3a:	491d      	ldr	r1, [pc, #116]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	3315      	adds	r3, #21
 8002d48:	79ba      	ldrb	r2, [r7, #6]
 8002d4a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002d4c:	79fa      	ldrb	r2, [r7, #7]
 8002d4e:	4918      	ldr	r1, [pc, #96]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	3314      	adds	r3, #20
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002d60:	79ba      	ldrb	r2, [r7, #6]
 8002d62:	4913      	ldr	r1, [pc, #76]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3314      	adds	r3, #20
 8002d70:	79fa      	ldrb	r2, [r7, #7]
 8002d72:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002d74:	e014      	b.n	8002da0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002d76:	79fa      	ldrb	r2, [r7, #7]
 8002d78:	490d      	ldr	r1, [pc, #52]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	440b      	add	r3, r1
 8002d84:	3315      	adds	r3, #21
 8002d86:	79ba      	ldrb	r2, [r7, #6]
 8002d88:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002d8a:	79ba      	ldrb	r2, [r7, #6]
 8002d8c:	4908      	ldr	r1, [pc, #32]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	3314      	adds	r3, #20
 8002d9a:	79fa      	ldrb	r2, [r7, #7]
 8002d9c:	701a      	strb	r2, [r3, #0]
  return;
 8002d9e:	bf00      	nop
}
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	200001c8 	.word	0x200001c8
 8002db0:	20000138 	.word	0x20000138

08002db4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002dbe:	4b4e      	ldr	r3, [pc, #312]	; (8002ef8 <linkTimer+0x144>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d118      	bne.n	8002dfa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002dc8:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <linkTimer+0x144>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4b4b      	ldr	r3, [pc, #300]	; (8002efc <linkTimer+0x148>)
 8002dd0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002dd2:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <linkTimer+0x144>)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002dd8:	79fa      	ldrb	r2, [r7, #7]
 8002dda:	4949      	ldr	r1, [pc, #292]	; (8002f00 <linkTimer+0x14c>)
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	3315      	adds	r3, #21
 8002de8:	2206      	movs	r2, #6
 8002dea:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002dec:	4b45      	ldr	r3, [pc, #276]	; (8002f04 <linkTimer+0x150>)
 8002dee:	f04f 32ff 	mov.w	r2, #4294967295
 8002df2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	81fb      	strh	r3, [r7, #14]
 8002df8:	e078      	b.n	8002eec <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002dfa:	f000 f909 	bl	8003010 <ReturnTimeElapsed>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	493e      	ldr	r1, [pc, #248]	; (8002f00 <linkTimer+0x14c>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	3308      	adds	r3, #8
 8002e12:	6819      	ldr	r1, [r3, #0]
 8002e14:	89fb      	ldrh	r3, [r7, #14]
 8002e16:	79fa      	ldrb	r2, [r7, #7]
 8002e18:	4419      	add	r1, r3
 8002e1a:	4839      	ldr	r0, [pc, #228]	; (8002f00 <linkTimer+0x14c>)
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4403      	add	r3, r0
 8002e26:	3308      	adds	r3, #8
 8002e28:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002e2a:	79fa      	ldrb	r2, [r7, #7]
 8002e2c:	4934      	ldr	r1, [pc, #208]	; (8002f00 <linkTimer+0x14c>)
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	440b      	add	r3, r1
 8002e38:	3308      	adds	r3, #8
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002e3e:	4b2e      	ldr	r3, [pc, #184]	; (8002ef8 <linkTimer+0x144>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4619      	mov	r1, r3
 8002e46:	4a2e      	ldr	r2, [pc, #184]	; (8002f00 <linkTimer+0x14c>)
 8002e48:	460b      	mov	r3, r1
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	440b      	add	r3, r1
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	3308      	adds	r3, #8
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d337      	bcc.n	8002ecc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002e5c:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <linkTimer+0x144>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002e62:	7b7a      	ldrb	r2, [r7, #13]
 8002e64:	4926      	ldr	r1, [pc, #152]	; (8002f00 <linkTimer+0x14c>)
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	3315      	adds	r3, #21
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002e76:	e013      	b.n	8002ea0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002e78:	7b7a      	ldrb	r2, [r7, #13]
 8002e7a:	4921      	ldr	r1, [pc, #132]	; (8002f00 <linkTimer+0x14c>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	3315      	adds	r3, #21
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002e8c:	7b7a      	ldrb	r2, [r7, #13]
 8002e8e:	491c      	ldr	r1, [pc, #112]	; (8002f00 <linkTimer+0x14c>)
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	3315      	adds	r3, #21
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002ea0:	7b3b      	ldrb	r3, [r7, #12]
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d00b      	beq.n	8002ebe <linkTimer+0x10a>
 8002ea6:	7b3a      	ldrb	r2, [r7, #12]
 8002ea8:	4915      	ldr	r1, [pc, #84]	; (8002f00 <linkTimer+0x14c>)
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d2dc      	bcs.n	8002e78 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002ebe:	7b7a      	ldrb	r2, [r7, #13]
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fecf 	bl	8002c68 <LinkTimerAfter>
 8002eca:	e00f      	b.n	8002eec <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <linkTimer+0x144>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff0c 	bl	8002cf4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <linkTimer+0x144>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <linkTimer+0x148>)
 8002ee4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002ee6:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <linkTimer+0x144>)
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002eec:	89fb      	ldrh	r3, [r7, #14]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200001c8 	.word	0x200001c8
 8002efc:	200001c9 	.word	0x200001c9
 8002f00:	20000138 	.word	0x20000138
 8002f04:	200001cc 	.word	0x200001cc

08002f08 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	460a      	mov	r2, r1
 8002f12:	71fb      	strb	r3, [r7, #7]
 8002f14:	4613      	mov	r3, r2
 8002f16:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002f18:	4b39      	ldr	r3, [pc, #228]	; (8003000 <UnlinkTimer+0xf8>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	79fa      	ldrb	r2, [r7, #7]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d111      	bne.n	8002f48 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002f24:	4b36      	ldr	r3, [pc, #216]	; (8003000 <UnlinkTimer+0xf8>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4b36      	ldr	r3, [pc, #216]	; (8003004 <UnlinkTimer+0xfc>)
 8002f2c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002f2e:	79fa      	ldrb	r2, [r7, #7]
 8002f30:	4935      	ldr	r1, [pc, #212]	; (8003008 <UnlinkTimer+0x100>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3315      	adds	r3, #21
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <UnlinkTimer+0xf8>)
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	e03e      	b.n	8002fc6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002f48:	79fa      	ldrb	r2, [r7, #7]
 8002f4a:	492f      	ldr	r1, [pc, #188]	; (8003008 <UnlinkTimer+0x100>)
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	440b      	add	r3, r1
 8002f56:	3314      	adds	r3, #20
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002f5c:	79fa      	ldrb	r2, [r7, #7]
 8002f5e:	492a      	ldr	r1, [pc, #168]	; (8003008 <UnlinkTimer+0x100>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	3315      	adds	r3, #21
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002f70:	79f9      	ldrb	r1, [r7, #7]
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	4824      	ldr	r0, [pc, #144]	; (8003008 <UnlinkTimer+0x100>)
 8002f76:	460b      	mov	r3, r1
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	440b      	add	r3, r1
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4403      	add	r3, r0
 8002f80:	3315      	adds	r3, #21
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b2d8      	uxtb	r0, r3
 8002f86:	4920      	ldr	r1, [pc, #128]	; (8003008 <UnlinkTimer+0x100>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	3315      	adds	r3, #21
 8002f94:	4602      	mov	r2, r0
 8002f96:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f98:	7bbb      	ldrb	r3, [r7, #14]
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d013      	beq.n	8002fc6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002f9e:	79f9      	ldrb	r1, [r7, #7]
 8002fa0:	7bba      	ldrb	r2, [r7, #14]
 8002fa2:	4819      	ldr	r0, [pc, #100]	; (8003008 <UnlinkTimer+0x100>)
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	440b      	add	r3, r1
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4403      	add	r3, r0
 8002fae:	3314      	adds	r3, #20
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	b2d8      	uxtb	r0, r3
 8002fb4:	4914      	ldr	r1, [pc, #80]	; (8003008 <UnlinkTimer+0x100>)
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3314      	adds	r3, #20
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002fc6:	79fa      	ldrb	r2, [r7, #7]
 8002fc8:	490f      	ldr	r1, [pc, #60]	; (8003008 <UnlinkTimer+0x100>)
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <UnlinkTimer+0xf8>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b06      	cmp	r3, #6
 8002fe2:	d107      	bne.n	8002ff4 <UnlinkTimer+0xec>
 8002fe4:	79bb      	ldrb	r3, [r7, #6]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <UnlinkTimer+0x104>)
 8002fec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  return;
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
}
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	200001c8 	.word	0x200001c8
 8003004:	200001c9 	.word	0x200001c9
 8003008:	20000138 	.word	0x20000138
 800300c:	200001cc 	.word	0x200001cc

08003010 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <ReturnTimeElapsed+0x70>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d026      	beq.n	800306e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003020:	f7ff fe02 	bl	8002c28 <ReadRtcSsrValue>
 8003024:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8003026:	4b16      	ldr	r3, [pc, #88]	; (8003080 <ReturnTimeElapsed+0x70>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	429a      	cmp	r2, r3
 800302e:	d805      	bhi.n	800303c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003030:	4b13      	ldr	r3, [pc, #76]	; (8003080 <ReturnTimeElapsed+0x70>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	e00a      	b.n	8003052 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <ReturnTimeElapsed+0x74>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <ReturnTimeElapsed+0x70>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	4413      	add	r3, r2
 8003050:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <ReturnTimeElapsed+0x78>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <ReturnTimeElapsed+0x7c>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	40d3      	lsrs	r3, r2
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	e001      	b.n	8003072 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	b29b      	uxth	r3, r3
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200001cc 	.word	0x200001cc
 8003084:	20000aa2 	.word	0x20000aa2
 8003088:	20000aa1 	.word	0x20000aa1
 800308c:	20000aa0 	.word	0x20000aa0

08003090 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d108      	bne.n	80030b2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80030a0:	f7ff fdc2 	bl	8002c28 <ReadRtcSsrValue>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <RestartWakeupCounter+0xa8>)
 80030a8:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80030aa:	2003      	movs	r0, #3
 80030ac:	f004 f905 	bl	80072ba <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80030b0:	e03e      	b.n	8003130 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d803      	bhi.n	80030c0 <RestartWakeupCounter+0x30>
 80030b8:	4b20      	ldr	r3, [pc, #128]	; (800313c <RestartWakeupCounter+0xac>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d002      	beq.n	80030c6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80030c6:	bf00      	nop
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <RestartWakeupCounter+0xb0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f7      	beq.n	80030c8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80030d8:	4b19      	ldr	r3, [pc, #100]	; (8003140 <RestartWakeupCounter+0xb0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <RestartWakeupCounter+0xb0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80030ec:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <RestartWakeupCounter+0xb4>)
 80030f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80030f4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80030f6:	2003      	movs	r0, #3
 80030f8:	f004 f8ed 	bl	80072d6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <RestartWakeupCounter+0xb8>)
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	041b      	lsls	r3, r3, #16
 8003104:	88fa      	ldrh	r2, [r7, #6]
 8003106:	4910      	ldr	r1, [pc, #64]	; (8003148 <RestartWakeupCounter+0xb8>)
 8003108:	4313      	orrs	r3, r2
 800310a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800310c:	f7ff fd8c 	bl	8002c28 <ReadRtcSsrValue>
 8003110:	4602      	mov	r2, r0
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <RestartWakeupCounter+0xa8>)
 8003114:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <RestartWakeupCounter+0xb0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <RestartWakeupCounter+0xb0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003128:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800312a:	f3af 8000 	nop.w
  return ;
 800312e:	bf00      	nop
}
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	200001cc 	.word	0x200001cc
 800313c:	20000aa0 	.word	0x20000aa0
 8003140:	20000a9c 	.word	0x20000a9c
 8003144:	58000800 	.word	0x58000800
 8003148:	40002800 	.word	0x40002800

0800314c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <RescheduleTimerList+0x124>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d108      	bne.n	8003172 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003160:	bf00      	nop
 8003162:	4b44      	ldr	r3, [pc, #272]	; (8003274 <RescheduleTimerList+0x128>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f7      	bne.n	8003162 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8003172:	4b40      	ldr	r3, [pc, #256]	; (8003274 <RescheduleTimerList+0x128>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <RescheduleTimerList+0x128>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8003186:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <RescheduleTimerList+0x12c>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	493b      	ldr	r1, [pc, #236]	; (800327c <RescheduleTimerList+0x130>)
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	3308      	adds	r3, #8
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80031a0:	f7ff ff36 	bl	8003010 <ReturnTimeElapsed>
 80031a4:	4603      	mov	r3, r0
 80031a6:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d205      	bcs.n	80031bc <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <RescheduleTimerList+0x134>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e04d      	b.n	8003258 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	4a31      	ldr	r2, [pc, #196]	; (8003284 <RescheduleTimerList+0x138>)
 80031c0:	8812      	ldrh	r2, [r2, #0]
 80031c2:	b292      	uxth	r2, r2
 80031c4:	4413      	add	r3, r2
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d906      	bls.n	80031dc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80031ce:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <RescheduleTimerList+0x138>)
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80031d4:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <RescheduleTimerList+0x134>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	e03d      	b.n	8003258 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	b29a      	uxth	r2, r3
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80031e6:	4b26      	ldr	r3, [pc, #152]	; (8003280 <RescheduleTimerList+0x134>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031ec:	e034      	b.n	8003258 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80031ee:	7bfa      	ldrb	r2, [r7, #15]
 80031f0:	4922      	ldr	r1, [pc, #136]	; (800327c <RescheduleTimerList+0x130>)
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	3308      	adds	r3, #8
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	429a      	cmp	r2, r3
 8003204:	d20a      	bcs.n	800321c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	491c      	ldr	r1, [pc, #112]	; (800327c <RescheduleTimerList+0x130>)
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	440b      	add	r3, r1
 8003214:	3308      	adds	r3, #8
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e013      	b.n	8003244 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	4917      	ldr	r1, [pc, #92]	; (800327c <RescheduleTimerList+0x130>)
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	3308      	adds	r3, #8
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	7bfa      	ldrb	r2, [r7, #15]
 8003232:	1ac9      	subs	r1, r1, r3
 8003234:	4811      	ldr	r0, [pc, #68]	; (800327c <RescheduleTimerList+0x130>)
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4403      	add	r3, r0
 8003240:	3308      	adds	r3, #8
 8003242:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	490d      	ldr	r1, [pc, #52]	; (800327c <RescheduleTimerList+0x130>)
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	440b      	add	r3, r1
 8003252:	3315      	adds	r3, #21
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b06      	cmp	r3, #6
 800325c:	d1c7      	bne.n	80031ee <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800325e:	89bb      	ldrh	r3, [r7, #12]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff15 	bl	8003090 <RestartWakeupCounter>

  return ;
 8003266:	bf00      	nop
}
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40002800 	.word	0x40002800
 8003274:	20000a9c 	.word	0x20000a9c
 8003278:	200001c8 	.word	0x200001c8
 800327c:	20000138 	.word	0x20000138
 8003280:	200001d0 	.word	0x200001d0
 8003284:	20000aa4 	.word	0x20000aa4

08003288 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8003294:	4a61      	ldr	r2, [pc, #388]	; (800341c <HW_TS_Init+0x194>)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800329a:	4b60      	ldr	r3, [pc, #384]	; (800341c <HW_TS_Init+0x194>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	22ca      	movs	r2, #202	; 0xca
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24
 80032a4:	4b5d      	ldr	r3, [pc, #372]	; (800341c <HW_TS_Init+0x194>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2253      	movs	r2, #83	; 0x53
 80032ac:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032ae:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <HW_TS_Init+0x198>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4a5b      	ldr	r2, [pc, #364]	; (8003420 <HW_TS_Init+0x198>)
 80032b4:	f043 0320 	orr.w	r3, r3, #32
 80032b8:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80032ba:	4b59      	ldr	r3, [pc, #356]	; (8003420 <HW_TS_Init+0x198>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f1c3 0304 	rsb	r3, r3, #4
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b55      	ldr	r3, [pc, #340]	; (8003424 <HW_TS_Init+0x19c>)
 80032ce:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HW_TS_Init+0x198>)
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032d8:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80032dc:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	fa92 f2a2 	rbit	r2, r2
 80032e4:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	fab2 f282 	clz	r2, r2
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	40d3      	lsrs	r3, r2
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4b4c      	ldr	r3, [pc, #304]	; (8003428 <HW_TS_Init+0x1a0>)
 80032f8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80032fa:	4b49      	ldr	r3, [pc, #292]	; (8003420 <HW_TS_Init+0x198>)
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003304:	b29b      	uxth	r3, r3
 8003306:	3301      	adds	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	4b48      	ldr	r3, [pc, #288]	; (800342c <HW_TS_Init+0x1a4>)
 800330c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800330e:	4b47      	ldr	r3, [pc, #284]	; (800342c <HW_TS_Init+0x1a4>)
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	3b01      	subs	r3, #1
 8003314:	4a44      	ldr	r2, [pc, #272]	; (8003428 <HW_TS_Init+0x1a0>)
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	fb02 f303 	mul.w	r3, r2, r3
 800331c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003320:	4a40      	ldr	r2, [pc, #256]	; (8003424 <HW_TS_Init+0x19c>)
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	40d3      	lsrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800332e:	4293      	cmp	r3, r2
 8003330:	d904      	bls.n	800333c <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003332:	4b3f      	ldr	r3, [pc, #252]	; (8003430 <HW_TS_Init+0x1a8>)
 8003334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003338:	801a      	strh	r2, [r3, #0]
 800333a:	e003      	b.n	8003344 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	b29a      	uxth	r2, r3
 8003340:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HW_TS_Init+0x1a8>)
 8003342:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003344:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003348:	f7ff fc5c 	bl	8002c04 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800334c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003350:	f7ff fc44 	bl	8002bdc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d143      	bne.n	80033e2 <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800335a:	4b36      	ldr	r3, [pc, #216]	; (8003434 <HW_TS_Init+0x1ac>)
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003360:	4b35      	ldr	r3, [pc, #212]	; (8003438 <HW_TS_Init+0x1b0>)
 8003362:	f04f 32ff 	mov.w	r2, #4294967295
 8003366:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003368:	2300      	movs	r3, #0
 800336a:	75fb      	strb	r3, [r7, #23]
 800336c:	e00c      	b.n	8003388 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800336e:	7dfa      	ldrb	r2, [r7, #23]
 8003370:	4932      	ldr	r1, [pc, #200]	; (800343c <HW_TS_Init+0x1b4>)
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	330c      	adds	r3, #12
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003382:	7dfb      	ldrb	r3, [r7, #23]
 8003384:	3301      	adds	r3, #1
 8003386:	75fb      	strb	r3, [r7, #23]
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d9ef      	bls.n	800336e <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HW_TS_Init+0x1b8>)
 8003390:	2206      	movs	r2, #6
 8003392:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <HW_TS_Init+0x194>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4b1f      	ldr	r3, [pc, #124]	; (800341c <HW_TS_Init+0x194>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80033a8:	4b1c      	ldr	r3, [pc, #112]	; (800341c <HW_TS_Init+0x194>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HW_TS_Init+0x194>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80033bc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80033be:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HW_TS_Init+0x1bc>)
 80033c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033c4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80033c6:	2003      	movs	r0, #3
 80033c8:	f003 ff85 	bl	80072d6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80033cc:	4b13      	ldr	r3, [pc, #76]	; (800341c <HW_TS_Init+0x194>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HW_TS_Init+0x194>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	e00a      	b.n	80033f8 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HW_TS_Init+0x194>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80033f2:	2003      	movs	r0, #3
 80033f4:	f003 ff61 	bl	80072ba <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HW_TS_Init+0x194>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	22ff      	movs	r2, #255	; 0xff
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003402:	2200      	movs	r2, #0
 8003404:	2106      	movs	r1, #6
 8003406:	2003      	movs	r0, #3
 8003408:	f003 ff1d 	bl	8007246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800340c:	2003      	movs	r0, #3
 800340e:	f003 ff34 	bl	800727a <HAL_NVIC_EnableIRQ>

  return;
 8003412:	bf00      	nop
}
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000a9c 	.word	0x20000a9c
 8003420:	40002800 	.word	0x40002800
 8003424:	20000aa0 	.word	0x20000aa0
 8003428:	20000aa1 	.word	0x20000aa1
 800342c:	20000aa2 	.word	0x20000aa2
 8003430:	20000aa4 	.word	0x20000aa4
 8003434:	200001d0 	.word	0x200001d0
 8003438:	200001cc 	.word	0x200001cc
 800343c:	20000138 	.word	0x20000138
 8003440:	200001c8 	.word	0x200001c8
 8003444:	58000800 	.word	0x58000800

08003448 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003448:	b480      	push	{r7}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345e:	f3ef 8310 	mrs	r3, PRIMASK
 8003462:	61fb      	str	r3, [r7, #28]
  return(result);
 8003464:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003466:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003468:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800346a:	e004      	b.n	8003476 <HW_TS_Create+0x2e>
  {
    loop++;
 800346c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003470:	3301      	adds	r3, #1
 8003472:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800347a:	2b05      	cmp	r3, #5
 800347c:	d80c      	bhi.n	8003498 <HW_TS_Create+0x50>
 800347e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003482:	492b      	ldr	r1, [pc, #172]	; (8003530 <HW_TS_Create+0xe8>)
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	330c      	adds	r3, #12
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e9      	bne.n	800346c <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003498:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800349c:	2b06      	cmp	r3, #6
 800349e:	d037      	beq.n	8003510 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80034a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034a4:	4922      	ldr	r1, [pc, #136]	; (8003530 <HW_TS_Create+0xe8>)
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	330c      	adds	r3, #12
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80034c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034c4:	491a      	ldr	r1, [pc, #104]	; (8003530 <HW_TS_Create+0xe8>)
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	3310      	adds	r3, #16
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80034d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034da:	4915      	ldr	r1, [pc, #84]	; (8003530 <HW_TS_Create+0xe8>)
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	440b      	add	r3, r1
 80034e6:	330d      	adds	r3, #13
 80034e8:	79fa      	ldrb	r2, [r7, #7]
 80034ea:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80034ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034f0:	490f      	ldr	r1, [pc, #60]	; (8003530 <HW_TS_Create+0xe8>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003506:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003508:	2300      	movs	r3, #0
 800350a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800350e:	e007      	b.n	8003520 <HW_TS_Create+0xd8>
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003524:	4618      	mov	r0, r3
 8003526:	372c      	adds	r7, #44	; 0x2c
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	20000138 	.word	0x20000138

08003534 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	60fb      	str	r3, [r7, #12]
  return(result);
 8003544:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003548:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800354a:	2003      	movs	r0, #3
 800354c:	f003 fea3 	bl	8007296 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HW_TS_Stop+0xfc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	22ca      	movs	r2, #202	; 0xca
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
 800355a:	4b35      	ldr	r3, [pc, #212]	; (8003630 <HW_TS_Stop+0xfc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2253      	movs	r2, #83	; 0x53
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003564:	79fa      	ldrb	r2, [r7, #7]
 8003566:	4933      	ldr	r1, [pc, #204]	; (8003634 <HW_TS_Stop+0x100>)
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	330c      	adds	r3, #12
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d148      	bne.n	800360e <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fcc1 	bl	8002f08 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003586:	4b2c      	ldr	r3, [pc, #176]	; (8003638 <HW_TS_Stop+0x104>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	2b06      	cmp	r3, #6
 8003590:	d135      	bne.n	80035fe <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003592:	4b2a      	ldr	r3, [pc, #168]	; (800363c <HW_TS_Stop+0x108>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359e:	d108      	bne.n	80035b2 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80035a0:	bf00      	nop
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HW_TS_Stop+0xfc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f7      	bne.n	80035a2 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80035b2:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <HW_TS_Stop+0xfc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HW_TS_Stop+0xfc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80035c6:	bf00      	nop
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HW_TS_Stop+0xfc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f7      	beq.n	80035c8 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HW_TS_Stop+0xfc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HW_TS_Stop+0xfc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80035ec:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HW_TS_Stop+0x10c>)
 80035f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035f4:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80035f6:	2003      	movs	r0, #3
 80035f8:	f003 fe6d 	bl	80072d6 <HAL_NVIC_ClearPendingIRQ>
 80035fc:	e007      	b.n	800360e <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HW_TS_Stop+0x110>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	7cfa      	ldrb	r2, [r7, #19]
 8003606:	429a      	cmp	r2, r3
 8003608:	d001      	beq.n	800360e <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 800360a:	f7ff fd9f 	bl	800314c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800360e:	4b08      	ldr	r3, [pc, #32]	; (8003630 <HW_TS_Stop+0xfc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	22ff      	movs	r2, #255	; 0xff
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003618:	2003      	movs	r0, #3
 800361a:	f003 fe2e 	bl	800727a <HAL_NVIC_EnableIRQ>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003628:	bf00      	nop
}
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000a9c 	.word	0x20000a9c
 8003634:	20000138 	.word	0x20000138
 8003638:	200001c8 	.word	0x200001c8
 800363c:	40002800 	.word	0x40002800
 8003640:	58000800 	.word	0x58000800
 8003644:	200001c9 	.word	0x200001c9

08003648 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003654:	79fa      	ldrb	r2, [r7, #7]
 8003656:	493b      	ldr	r1, [pc, #236]	; (8003744 <HW_TS_Start+0xfc>)
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	330c      	adds	r3, #12
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d103      	bne.n	8003674 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff ff60 	bl	8003534 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003674:	f3ef 8310 	mrs	r3, PRIMASK
 8003678:	60fb      	str	r3, [r7, #12]
  return(result);
 800367a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800367c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800367e:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003680:	2003      	movs	r0, #3
 8003682:	f003 fe08 	bl	8007296 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003686:	4b30      	ldr	r3, [pc, #192]	; (8003748 <HW_TS_Start+0x100>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	22ca      	movs	r2, #202	; 0xca
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
 8003690:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HW_TS_Start+0x100>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2253      	movs	r2, #83	; 0x53
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800369a:	79fa      	ldrb	r2, [r7, #7]
 800369c:	4929      	ldr	r1, [pc, #164]	; (8003744 <HW_TS_Start+0xfc>)
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	330c      	adds	r3, #12
 80036aa:	2202      	movs	r2, #2
 80036ac:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80036ae:	79fa      	ldrb	r2, [r7, #7]
 80036b0:	4924      	ldr	r1, [pc, #144]	; (8003744 <HW_TS_Start+0xfc>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	440b      	add	r3, r1
 80036bc:	3308      	adds	r3, #8
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80036c2:	79fa      	ldrb	r2, [r7, #7]
 80036c4:	491f      	ldr	r1, [pc, #124]	; (8003744 <HW_TS_Start+0xfc>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	3304      	adds	r3, #4
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fb6b 	bl	8002db4 <linkTimer>
 80036de:	4603      	mov	r3, r0
 80036e0:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HW_TS_Start+0x104>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HW_TS_Start+0x108>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	7c7a      	ldrb	r2, [r7, #17]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d002      	beq.n	80036fa <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80036f4:	f7ff fd2a 	bl	800314c <RescheduleTimerList>
 80036f8:	e013      	b.n	8003722 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80036fa:	79fa      	ldrb	r2, [r7, #7]
 80036fc:	4911      	ldr	r1, [pc, #68]	; (8003744 <HW_TS_Start+0xfc>)
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	3308      	adds	r3, #8
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	8a7b      	ldrh	r3, [r7, #18]
 800370e:	79fa      	ldrb	r2, [r7, #7]
 8003710:	1ac9      	subs	r1, r1, r3
 8003712:	480c      	ldr	r0, [pc, #48]	; (8003744 <HW_TS_Start+0xfc>)
 8003714:	4613      	mov	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4403      	add	r3, r0
 800371e:	3308      	adds	r3, #8
 8003720:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HW_TS_Start+0x100>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	22ff      	movs	r2, #255	; 0xff
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800372c:	2003      	movs	r0, #3
 800372e:	f003 fda4 	bl	800727a <HAL_NVIC_EnableIRQ>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800373c:	bf00      	nop
}
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000138 	.word	0x20000138
 8003748:	20000a9c 	.word	0x20000a9c
 800374c:	200001c8 	.word	0x200001c8
 8003750:	200001c9 	.word	0x200001c9

08003754 <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375a:	f3ef 8310 	mrs	r3, PRIMASK
 800375e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003760:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003762:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003764:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003766:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003772:	d112      	bne.n	800379a <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 8003774:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 800377a:	f7ff fc49 	bl	8003010 <ReturnTimeElapsed>
 800377e:	4603      	mov	r3, r0
 8003780:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 8003782:	89fa      	ldrh	r2, [r7, #14]
 8003784:	89bb      	ldrh	r3, [r7, #12]
 8003786:	429a      	cmp	r2, r3
 8003788:	d904      	bls.n	8003794 <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 800378a:	89fa      	ldrh	r2, [r7, #14]
 800378c:	89bb      	ldrh	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	82fb      	strh	r3, [r7, #22]
 8003792:	e005      	b.n	80037a0 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	82fb      	strh	r3, [r7, #22]
 8003798:	e002      	b.n	80037a0 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 800379a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800379e:	82fb      	strh	r3, [r7, #22]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 80037aa:	8afb      	ldrh	r3, [r7, #22]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40002800 	.word	0x40002800

080037b8 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	4603      	mov	r3, r0
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	4613      	mov	r3, r2
 80037c8:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d000      	beq.n	80037d2 <HW_UART_Receive_IT+0x1a>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80037d0:	e00c      	b.n	80037ec <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(huart1, USART1);
 80037d2:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <HW_UART_Receive_IT+0x3c>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <HW_UART_Receive_IT+0x40>)
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <HW_UART_Receive_IT+0x44>)
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	89bb      	ldrh	r3, [r7, #12]
 80037e0:	461a      	mov	r2, r3
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	4804      	ldr	r0, [pc, #16]	; (80037f8 <HW_UART_Receive_IT+0x40>)
 80037e6:	f009 faa5 	bl	800cd34 <HAL_UART_Receive_IT>
            break;
 80037ea:	bf00      	nop
    }

    return;
 80037ec:	bf00      	nop
}
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20027f5c 	.word	0x20027f5c
 80037f8:	200285c8 	.word	0x200285c8
 80037fc:	40013800 	.word	0x40013800

08003800 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	4603      	mov	r3, r0
 800380c:	73fb      	strb	r3, [r7, #15]
 800380e:	4613      	mov	r3, r2
 8003810:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d000      	beq.n	800381a <HW_UART_Transmit_IT+0x1a>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8003818:	e00c      	b.n	8003834 <HW_UART_Transmit_IT+0x34>
            HW_UART_TX_IT(huart1, USART1);
 800381a:	4a08      	ldr	r2, [pc, #32]	; (800383c <HW_UART_Transmit_IT+0x3c>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b07      	ldr	r3, [pc, #28]	; (8003840 <HW_UART_Transmit_IT+0x40>)
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <HW_UART_Transmit_IT+0x44>)
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	89bb      	ldrh	r3, [r7, #12]
 8003828:	461a      	mov	r2, r3
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	4804      	ldr	r0, [pc, #16]	; (8003840 <HW_UART_Transmit_IT+0x40>)
 800382e:	f009 f9fd 	bl	800cc2c <HAL_UART_Transmit_IT>
            break;
 8003832:	bf00      	nop
    }

    return;
 8003834:	bf00      	nop
}
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20027f60 	.word	0x20027f60
 8003840:	200285c8 	.word	0x200285c8
 8003844:	40013800 	.word	0x40013800

08003848 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HAL_UART_RxCpltCallback+0x30>)
 8003858:	429a      	cmp	r2, r3
 800385a:	d000      	beq.n	800385e <HAL_UART_RxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 800385c:	e007      	b.n	800386e <HAL_UART_RxCpltCallback+0x26>
            if(HW_huart1RxCb)
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <HAL_UART_RxCpltCallback+0x34>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_UART_RxCpltCallback+0x24>
                HW_huart1RxCb();
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_UART_RxCpltCallback+0x34>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4798      	blx	r3
            break;
 800386c:	bf00      	nop
    }

    return;
 800386e:	bf00      	nop
}
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40013800 	.word	0x40013800
 800387c:	20027f5c 	.word	0x20027f5c

08003880 <LL_AHB2_GRP1_EnableClock>:
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800388e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4313      	orrs	r3, r2
 8003896:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4013      	ands	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038a4:	68fb      	ldr	r3, [r7, #12]
}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80038ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4013      	ands	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038d6:	68fb      	ldr	r3, [r7, #12]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <MX_I2C1_Init+0x74>)
 80038ea:	4a1c      	ldr	r2, [pc, #112]	; (800395c <MX_I2C1_Init+0x78>)
 80038ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 80038ee:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <MX_I2C1_Init+0x74>)
 80038f0:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <MX_I2C1_Init+0x7c>)
 80038f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <MX_I2C1_Init+0x74>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <MX_I2C1_Init+0x74>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003900:	4b15      	ldr	r3, [pc, #84]	; (8003958 <MX_I2C1_Init+0x74>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003906:	4b14      	ldr	r3, [pc, #80]	; (8003958 <MX_I2C1_Init+0x74>)
 8003908:	2200      	movs	r2, #0
 800390a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <MX_I2C1_Init+0x74>)
 800390e:	2200      	movs	r2, #0
 8003910:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <MX_I2C1_Init+0x74>)
 8003914:	2200      	movs	r2, #0
 8003916:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <MX_I2C1_Init+0x74>)
 800391a:	2200      	movs	r2, #0
 800391c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800391e:	480e      	ldr	r0, [pc, #56]	; (8003958 <MX_I2C1_Init+0x74>)
 8003920:	f004 f9b8 	bl	8007c94 <HAL_I2C_Init>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800392a:	f000 fd5f 	bl	80043ec <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800392e:	2100      	movs	r1, #0
 8003930:	4809      	ldr	r0, [pc, #36]	; (8003958 <MX_I2C1_Init+0x74>)
 8003932:	f006 f8b0 	bl	8009a96 <HAL_I2CEx_ConfigAnalogFilter>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800393c:	f000 fd56 	bl	80043ec <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003940:	2100      	movs	r1, #0
 8003942:	4805      	ldr	r0, [pc, #20]	; (8003958 <MX_I2C1_Init+0x74>)
 8003944:	f006 f8f2 	bl	8009b2c <HAL_I2CEx_ConfigDigitalFilter>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800394e:	f000 fd4d 	bl	80043ec <Error_Handler>
  }

}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20027f64 	.word	0x20027f64
 800395c:	40005400 	.word	0x40005400
 8003960:	00e27cae 	.word	0x00e27cae

08003964 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <HAL_I2C_MspInit+0x6c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d120      	bne.n	80039c8 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003986:	2001      	movs	r0, #1
 8003988:	f7ff ff7a 	bl	8003880 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800398c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003990:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003992:	2312      	movs	r3, #18
 8003994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800399e:	2304      	movs	r3, #4
 80039a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a2:	f107 030c 	add.w	r3, r7, #12
 80039a6:	4619      	mov	r1, r3
 80039a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ac:	f003 ffd2 	bl	8007954 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039b0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80039b4:	f7ff ff7d 	bl	80038b2 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80039b8:	2200      	movs	r2, #0
 80039ba:	2105      	movs	r1, #5
 80039bc:	201e      	movs	r0, #30
 80039be:	f003 fc42 	bl	8007246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80039c2:	201e      	movs	r0, #30
 80039c4:	f003 fc59 	bl	800727a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80039c8:	bf00      	nop
 80039ca:	3720      	adds	r7, #32
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40005400 	.word	0x40005400

080039d4 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 80039dc:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <InertialSensingTask+0xec>)
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 80039e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80039e6:	2120      	movs	r1, #32
 80039e8:	204a      	movs	r0, #74	; 0x4a
 80039ea:	f7fd fff1 	bl	80019d0 <IMU_begin>

	uint32_t evt = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80039f2:	f04f 32ff 	mov.w	r2, #4294967295
 80039f6:	2100      	movs	r1, #0
 80039f8:	2001      	movs	r0, #1
 80039fa:	f00b f9f1 	bl	800ede0 <osThreadFlagsWait>
		//evt = 0x00000001U;

	//			// configure IMU
		osDelay(500);
 80039fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a02:	f00b fa81 	bl	800ef08 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 8003a06:	2064      	movs	r0, #100	; 0x64
 8003a08:	f7fe fade 	bl	8001fc8 <IMU_enableRotationVector>
		osDelay(100);
 8003a0c:	2064      	movs	r0, #100	; 0x64
 8003a0e:	f00b fa7b 	bl	800ef08 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <InertialSensingTask+0xf0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <InertialSensingTask+0xf4>)
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a1e:	f7fe fae1 	bl	8001fe4 <IMU_enableActivityClassifier>

		// give some time for things to buffer
		osDelay(400);
 8003a22:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003a26:	f00b fa6f 	bl	800ef08 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 8003a2a:	2064      	movs	r0, #100	; 0x64
 8003a2c:	f00b fa6c 	bl	800ef08 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8003a30:	4b26      	ldr	r3, [pc, #152]	; (8003acc <InertialSensingTask+0xf8>)
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	2364      	movs	r3, #100	; 0x64
 8003a36:	2200      	movs	r2, #0
 8003a38:	4925      	ldr	r1, [pc, #148]	; (8003ad0 <InertialSensingTask+0xfc>)
 8003a3a:	f00b ff55 	bl	800f8e8 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 8003a3e:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <InertialSensingTask+0x100>)
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	2300      	movs	r3, #0
 8003a44:	2200      	movs	r2, #0
 8003a46:	4924      	ldr	r1, [pc, #144]	; (8003ad8 <InertialSensingTask+0x104>)
 8003a48:	f00b ff4e 	bl	800f8e8 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 8003a4c:	4b23      	ldr	r3, [pc, #140]	; (8003adc <InertialSensingTask+0x108>)
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	2200      	movs	r2, #0
 8003a54:	491e      	ldr	r1, [pc, #120]	; (8003ad0 <InertialSensingTask+0xfc>)
 8003a56:	f00b fed3 	bl	800f800 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 8003a5a:	2120      	movs	r1, #32
 8003a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a60:	f004 f8e8 	bl	8007c34 <HAL_GPIO_ReadPin>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <InertialSensingTask+0x9a>
 8003a6a:	f7fd ffe9 	bl	8001a40 <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2100      	movs	r1, #0
 8003a72:	2002      	movs	r0, #2
 8003a74:	f00b f9b4 	bl	800ede0 <osThreadFlagsWait>
 8003a78:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0d2      	beq.n	8003a2a <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 8003a84:	f7fe fa3e 	bl	8001f04 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 8003a88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a8c:	f00b fa3c 	bl	800ef08 <osDelay>

				inertialEnabled = 0;
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <InertialSensingTask+0xec>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <InertialSensingTask+0x108>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f00b ffc8 	bl	800fa30 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <InertialSensingTask+0x100>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f00b ffc3 	bl	800fa30 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <InertialSensingTask+0xf8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f00b ffbe 	bl	800fa30 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8003ab4:	200e      	movs	r0, #14
 8003ab6:	f00b f943 	bl	800ed40 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 8003aba:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003abc:	e799      	b.n	80039f2 <InertialSensingTask+0x1e>
 8003abe:	bf00      	nop
 8003ac0:	20000aa6 	.word	0x20000aa6
 8003ac4:	20000068 	.word	0x20000068
 8003ac8:	20027ff4 	.word	0x20027ff4
 8003acc:	2002797c 	.word	0x2002797c
 8003ad0:	20027fb8 	.word	0x20027fb8
 8003ad4:	20027960 	.word	0x20027960
 8003ad8:	20027fd0 	.word	0x20027fd0
 8003adc:	2002796c 	.word	0x2002796c

08003ae0 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d105      	bne.n	8003afc <HAL_GPIO_EXTI_Callback+0x1c>
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <HAL_GPIO_EXTI_Callback+0x24>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003af8:	f7fd ffa2 	bl	8001a40 <IMU_dataAvailable>
	}
}
 8003afc:	bf00      	nop
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000aa6 	.word	0x20000aa6

08003b08 <_Input>:
//#include "UART_Print.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003b14:	480b      	ldr	r0, [pc, #44]	; (8003b44 <_Input+0x3c>)
 8003b16:	f7fe fd0d 	bl	8002534 <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	480a      	ldr	r0, [pc, #40]	; (8003b48 <_Input+0x40>)
 8003b1e:	f000 fe9b 	bl	8004858 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <_Input+0x40>)
 8003b24:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <_Input+0x3c>)
 8003b26:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a06      	ldr	r2, [pc, #24]	; (8003b48 <_Input+0x40>)
 8003b2e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20028020 	.word	0x20028020
 8003b48:	200280a8 	.word	0x200280a8

08003b4c <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f00b f93e 	bl	800ede0 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003b64:	4818      	ldr	r0, [pc, #96]	; (8003bc8 <PulseHandlerTask+0x7c>)
 8003b66:	f007 ff55 	bl	800ba14 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8003b6a:	4818      	ldr	r0, [pc, #96]	; (8003bcc <PulseHandlerTask+0x80>)
 8003b6c:	f003 f984 	bl	8006e78 <HAL_COMP_Start>
		_Input(&input0, 0);
 8003b70:	2100      	movs	r1, #0
 8003b72:	4817      	ldr	r0, [pc, #92]	; (8003bd0 <PulseHandlerTask+0x84>)
 8003b74:	f7ff ffc8 	bl	8003b08 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003b78:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <PulseHandlerTask+0x88>)
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b80:	2200      	movs	r2, #0
 8003b82:	4915      	ldr	r1, [pc, #84]	; (8003bd8 <PulseHandlerTask+0x8c>)
 8003b84:	f00b feb0 	bl	800f8e8 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <PulseHandlerTask+0x84>)
 8003b8a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003b8e:	4912      	ldr	r1, [pc, #72]	; (8003bd8 <PulseHandlerTask+0x8c>)
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fe95 	bl	80048c0 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	2002      	movs	r0, #2
 8003b9c:	f00b f920 	bl	800ede0 <osThreadFlagsWait>
 8003ba0:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0e5      	beq.n	8003b78 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003bac:	4807      	ldr	r0, [pc, #28]	; (8003bcc <PulseHandlerTask+0x80>)
 8003bae:	f003 f9ad 	bl	8006f0c <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003bb2:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <PulseHandlerTask+0x7c>)
 8003bb4:	f007 ff58 	bl	800ba68 <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <PulseHandlerTask+0x88>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f00b ff37 	bl	800fa30 <osMessageQueueReset>
				break;
 8003bc2:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003bc4:	e7c8      	b.n	8003b58 <PulseHandlerTask+0xc>
 8003bc6:	bf00      	nop
 8003bc8:	20028588 	.word	0x20028588
 8003bcc:	20027dcc 	.word	0x20027dcc
 8003bd0:	20027980 	.word	0x20027980
 8003bd4:	20027868 	.word	0x20027868
 8003bd8:	20028000 	.word	0x20028000

08003bdc <get3D_location>:
//}

struct LogMessage statusMessage;


void get3D_location(void *arguments){
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003be8:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <get3D_location+0xc0>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	492b      	ldr	r1, [pc, #172]	; (8003ca0 <get3D_location+0xc4>)
 8003bf4:	f00b fe78 	bl	800f8e8 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8003bf8:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <get3D_location+0xc4>)
 8003bfa:	789b      	ldrb	r3, [r3, #2]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d10e      	bne.n	8003c1e <get3D_location+0x42>
		blinkActive = 1;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003c04:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <get3D_location+0xc8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2102      	movs	r1, #2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f00b f836 	bl	800ec7c <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8003c10:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <get3D_location+0xcc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f04f 31ff 	mov.w	r1, #4294967295
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f00b fcad 	bl	800f578 <osSemaphoreAcquire>
	}
	osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003c1e:	4b1f      	ldr	r3, [pc, #124]	; (8003c9c <get3D_location+0xc0>)
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	2300      	movs	r3, #0
 8003c24:	2200      	movs	r2, #0
 8003c26:	491e      	ldr	r1, [pc, #120]	; (8003ca0 <get3D_location+0xc4>)
 8003c28:	f00b fdea 	bl	800f800 <osMessageQueuePut>

	// stop blink code if running and hold I2C bus from being used
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003c2c:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <get3D_location+0xd0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f04f 31ff 	mov.w	r1, #4294967295
 8003c34:	4618      	mov	r0, r3
 8003c36:	f00b fc9f 	bl	800f578 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <get3D_location+0xd4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	f00b f81b 	bl	800ec7c <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, osWaitForever);
 8003c46:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <get3D_location+0xd8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f00b fc92 	bl	800f578 <osSemaphoreAcquire>

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8003c54:	4b15      	ldr	r3, [pc, #84]	; (8003cac <get3D_location+0xd0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f00b fcf3 	bl	800f644 <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8003c5e:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <get3D_location+0xd4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2102      	movs	r1, #2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f00b f809 	bl	800ec7c <osThreadFlagsSet>

	// empty queue
	osMessageQueueReset(viveQueueHandle);
 8003c6a:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <get3D_location+0xdc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f00b fede 	bl	800fa30 <osMessageQueueReset>

	if(blinkActive){
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00c      	beq.n	8003c94 <get3D_location+0xb8>
		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <get3D_location+0xc8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2101      	movs	r1, #1
 8003c80:	4618      	mov	r0, r3
 8003c82:	f00a fffb 	bl	800ec7c <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8003c86:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <get3D_location+0xcc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f00b fc72 	bl	800f578 <osSemaphoreAcquire>
	}

}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20027978 	.word	0x20027978
 8003ca0:	20027dc4 	.word	0x20027dc4
 8003ca4:	20027954 	.word	0x20027954
 8003ca8:	20027dac 	.word	0x20027dac
 8003cac:	20027968 	.word	0x20027968
 8003cb0:	20027db0 	.word	0x20027db0
 8003cb4:	20027da4 	.word	0x20027da4
 8003cb8:	2002786c 	.word	0x2002786c

08003cbc <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	807b      	strh	r3, [r7, #2]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003cd2:	723b      	strb	r3, [r7, #8]
 8003cd4:	887b      	ldrh	r3, [r7, #2]
 8003cd6:	817b      	strh	r3, [r7, #10]
 8003cd8:	883b      	ldrh	r3, [r7, #0]
 8003cda:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <enqueue_pulse+0x48>)
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	f107 0108 	add.w	r1, r7, #8
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f00b fd8a 	bl	800f800 <osMessageQueuePut>
	count = osMessageQueueGetCount(pulseQueueHandle);
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <enqueue_pulse+0x48>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f00b fe6b 	bl	800f9cc <osMessageQueueGetCount>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <enqueue_pulse+0x4c>)
 8003cfa:	601a      	str	r2, [r3, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20027868 	.word	0x20027868
 8003d08:	20000aa8 	.word	0x20000aa8

08003d0c <InterProcessorTask>:
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};

struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]

	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d18:	4b68      	ldr	r3, [pc, #416]	; (8003ebc <InterProcessorTask+0x1b0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d20:	4618      	mov	r0, r3
 8003d22:	f00b fc29 	bl	800f578 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003d26:	bf00      	nop
 8003d28:	2364      	movs	r3, #100	; 0x64
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	2306      	movs	r3, #6
 8003d2e:	4a64      	ldr	r2, [pc, #400]	; (8003ec0 <InterProcessorTask+0x1b4>)
 8003d30:	21e6      	movs	r1, #230	; 0xe6
 8003d32:	4864      	ldr	r0, [pc, #400]	; (8003ec4 <InterProcessorTask+0x1b8>)
 8003d34:	f004 f83e 	bl	8007db4 <HAL_I2C_Master_Transmit>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f4      	bne.n	8003d28 <InterProcessorTask+0x1c>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003d3e:	4b5f      	ldr	r3, [pc, #380]	; (8003ebc <InterProcessorTask+0x1b0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f00b fc7e 	bl	800f644 <osSemaphoreRelease>

	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f00b f846 	bl	800ede0 <osThreadFlagsWait>
 8003d54:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f3      	beq.n	8003d48 <InterProcessorTask+0x3c>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003d60:	4b59      	ldr	r3, [pc, #356]	; (8003ec8 <InterProcessorTask+0x1bc>)
 8003d62:	4a5a      	ldr	r2, [pc, #360]	; (8003ecc <InterProcessorTask+0x1c0>)
 8003d64:	6811      	ldr	r1, [r2, #0]
 8003d66:	6019      	str	r1, [r3, #0]
 8003d68:	8892      	ldrh	r2, [r2, #4]
 8003d6a:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d6c:	4b53      	ldr	r3, [pc, #332]	; (8003ebc <InterProcessorTask+0x1b0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	4618      	mov	r0, r3
 8003d76:	f00b fbff 	bl	800f578 <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003d7a:	bf00      	nop
 8003d7c:	2364      	movs	r3, #100	; 0x64
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2306      	movs	r3, #6
 8003d82:	4a51      	ldr	r2, [pc, #324]	; (8003ec8 <InterProcessorTask+0x1bc>)
 8003d84:	21e6      	movs	r1, #230	; 0xe6
 8003d86:	484f      	ldr	r0, [pc, #316]	; (8003ec4 <InterProcessorTask+0x1b8>)
 8003d88:	f004 f814 	bl	8007db4 <HAL_I2C_Master_Transmit>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f4      	bne.n	8003d7c <InterProcessorTask+0x70>
			osDelay(100);
 8003d92:	2064      	movs	r0, #100	; 0x64
 8003d94:	f00b f8b8 	bl	800ef08 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003d98:	4b48      	ldr	r3, [pc, #288]	; (8003ebc <InterProcessorTask+0x1b0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f00b fc51 	bl	800f644 <osSemaphoreRelease>
			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8003da2:	f04f 32ff 	mov.w	r2, #4294967295
 8003da6:	2100      	movs	r1, #0
 8003da8:	2006      	movs	r0, #6
 8003daa:	f00b f819 	bl	800ede0 <osThreadFlagsWait>
 8003dae:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d05b      	beq.n	8003e72 <InterProcessorTask+0x166>
 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003dba:	4b40      	ldr	r3, [pc, #256]	; (8003ebc <InterProcessorTask+0x1b0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f00b fbd8 	bl	800f578 <osSemaphoreAcquire>
// 					taskENTER_CRITICAL();
 					// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003dc8:	bf00      	nop
 8003dca:	2364      	movs	r3, #100	; 0x64
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	2306      	movs	r3, #6
 8003dd0:	4a3d      	ldr	r2, [pc, #244]	; (8003ec8 <InterProcessorTask+0x1bc>)
 8003dd2:	21e6      	movs	r1, #230	; 0xe6
 8003dd4:	483b      	ldr	r0, [pc, #236]	; (8003ec4 <InterProcessorTask+0x1b8>)
 8003dd6:	f003 ffed 	bl	8007db4 <HAL_I2C_Master_Transmit>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f4      	bne.n	8003dca <InterProcessorTask+0xbe>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003de0:	2008      	movs	r0, #8
 8003de2:	f00a ffad 	bl	800ed40 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003de6:	bf00      	nop
 8003de8:	2358      	movs	r3, #88	; 0x58
 8003dea:	4a39      	ldr	r2, [pc, #228]	; (8003ed0 <InterProcessorTask+0x1c4>)
 8003dec:	21e6      	movs	r1, #230	; 0xe6
 8003dee:	4835      	ldr	r0, [pc, #212]	; (8003ec4 <InterProcessorTask+0x1b8>)
 8003df0:	f004 f9ca 	bl	8008188 <HAL_I2C_Master_Receive_IT>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f6      	bne.n	8003de8 <InterProcessorTask+0xdc>
// 						osDelay(100);
// 						osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8003dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003dfe:	2100      	movs	r1, #0
 8003e00:	200a      	movs	r0, #10
 8003e02:	f00a ffed 	bl	800ede0 <osThreadFlagsWait>
 8003e06:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8003e08:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <InterProcessorTask+0x1b0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f00b fc19 	bl	800f644 <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d14d      	bne.n	8003eb8 <InterProcessorTask+0x1ac>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8003e1c:	4b2c      	ldr	r3, [pc, #176]	; (8003ed0 <InterProcessorTask+0x1c4>)
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e20:	4a2c      	ldr	r2, [pc, #176]	; (8003ed4 <InterProcessorTask+0x1c8>)
 8003e22:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003e24:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <InterProcessorTask+0x1c4>)
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	4a2a      	ldr	r2, [pc, #168]	; (8003ed4 <InterProcessorTask+0x1c8>)
 8003e2a:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	e01c      	b.n	8003e6c <InterProcessorTask+0x160>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <InterProcessorTask+0x1c4>)
 8003e38:	4413      	add	r3, r2
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4825      	ldr	r0, [pc, #148]	; (8003ed4 <InterProcessorTask+0x1c8>)
 8003e40:	f012 fc6c 	bl	801671c <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	3305      	adds	r3, #5
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <InterProcessorTask+0x1c4>)
 8003e4c:	4413      	add	r3, r2
 8003e4e:	2208      	movs	r2, #8
 8003e50:	4619      	mov	r1, r3
 8003e52:	4821      	ldr	r0, [pc, #132]	; (8003ed8 <InterProcessorTask+0x1cc>)
 8003e54:	f012 fc62 	bl	801671c <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8003e58:	4b20      	ldr	r3, [pc, #128]	; (8003edc <InterProcessorTask+0x1d0>)
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2200      	movs	r2, #0
 8003e60:	491c      	ldr	r1, [pc, #112]	; (8003ed4 <InterProcessorTask+0x1c8>)
 8003e62:	f00b fccd 	bl	800f800 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	dddf      	ble.n	8003e32 <InterProcessorTask+0x126>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d092      	beq.n	8003da2 <InterProcessorTask+0x96>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <InterProcessorTask+0x1b0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f04f 31ff 	mov.w	r1, #4294967295
 8003e84:	4618      	mov	r0, r3
 8003e86:	f00b fb77 	bl	800f578 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003e8a:	bf00      	nop
 8003e8c:	2364      	movs	r3, #100	; 0x64
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	2306      	movs	r3, #6
 8003e92:	4a0b      	ldr	r2, [pc, #44]	; (8003ec0 <InterProcessorTask+0x1b4>)
 8003e94:	21e6      	movs	r1, #230	; 0xe6
 8003e96:	480b      	ldr	r0, [pc, #44]	; (8003ec4 <InterProcessorTask+0x1b8>)
 8003e98:	f003 ff8c 	bl	8007db4 <HAL_I2C_Master_Transmit>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f4      	bne.n	8003e8c <InterProcessorTask+0x180>
					osSemaphoreRelease(messageI2C_LockHandle);
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <InterProcessorTask+0x1b0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f00b fbcc 	bl	800f644 <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <InterProcessorTask+0x1d0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f00b fdbd 	bl	800fa30 <osMessageQueueReset>

					break;
 8003eb6:	e000      	b.n	8003eba <InterProcessorTask+0x1ae>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003eb8:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003eba:	e745      	b.n	8003d48 <InterProcessorTask+0x3c>
 8003ebc:	20027968 	.word	0x20027968
 8003ec0:	08017f94 	.word	0x08017f94
 8003ec4:	20027f64 	.word	0x20027f64
 8003ec8:	200283d0 	.word	0x200283d0
 8003ecc:	20027870 	.word	0x20027870
 8003ed0:	20028378 	.word	0x20028378
 8003ed4:	200283d8 	.word	0x200283d8
 8003ed8:	200283e0 	.word	0x200283e0
 8003edc:	20027974 	.word	0x20027974

08003ee0 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2110      	movs	r1, #16
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f00a fec4 	bl	800ec7c <osThreadFlagsSet>
	test_1 = 1;
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20027da8 	.word	0x20027da8
 8003f08:	20000aac 	.word	0x20000aac

08003f0c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2108      	movs	r1, #8
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f00a feae 	bl	800ec7c <osThreadFlagsSet>
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20027da8 	.word	0x20027da8

08003f2c <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af04      	add	r7, sp, #16
 8003f32:	4603      	mov	r3, r0
 8003f34:	71fb      	strb	r3, [r7, #7]

	deviceAddress = ADDR << 1;
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <setup_LP5523+0xcc>)
 8003f3e:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f40:	4b2e      	ldr	r3, [pc, #184]	; (8003ffc <setup_LP5523+0xd0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f04f 31ff 	mov.w	r1, #4294967295
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f00b fb15 	bl	800f578 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8003f4e:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <setup_LP5523+0xd4>)
 8003f50:	2240      	movs	r2, #64	; 0x40
 8003f52:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003f54:	4b28      	ldr	r3, [pc, #160]	; (8003ff8 <setup_LP5523+0xcc>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b299      	uxth	r1, r3
 8003f5a:	2364      	movs	r3, #100	; 0x64
 8003f5c:	9302      	str	r3, [sp, #8]
 8003f5e:	2301      	movs	r3, #1
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	4b27      	ldr	r3, [pc, #156]	; (8004000 <setup_LP5523+0xd4>)
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2301      	movs	r3, #1
 8003f68:	2200      	movs	r2, #0
 8003f6a:	4826      	ldr	r0, [pc, #152]	; (8004004 <setup_LP5523+0xd8>)
 8003f6c:	f004 f97c 	bl	8008268 <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8003f70:	4b23      	ldr	r3, [pc, #140]	; (8004000 <setup_LP5523+0xd4>)
 8003f72:	224f      	movs	r2, #79	; 0x4f
 8003f74:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003f76:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <setup_LP5523+0xcc>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b299      	uxth	r1, r3
 8003f7c:	2364      	movs	r3, #100	; 0x64
 8003f7e:	9302      	str	r3, [sp, #8]
 8003f80:	2301      	movs	r3, #1
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <setup_LP5523+0xd4>)
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	2301      	movs	r3, #1
 8003f8a:	2236      	movs	r2, #54	; 0x36
 8003f8c:	481d      	ldr	r0, [pc, #116]	; (8004004 <setup_LP5523+0xd8>)
 8003f8e:	f004 f96b 	bl	8008268 <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 8003f92:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <setup_LP5523+0xcc>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b299      	uxth	r1, r3
 8003f98:	2364      	movs	r3, #100	; 0x64
 8003f9a:	9302      	str	r3, [sp, #8]
 8003f9c:	2309      	movs	r3, #9
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	4b19      	ldr	r3, [pc, #100]	; (8004008 <setup_LP5523+0xdc>)
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	2216      	movs	r2, #22
 8003fa8:	4816      	ldr	r0, [pc, #88]	; (8004004 <setup_LP5523+0xd8>)
 8003faa:	f004 f95d 	bl	8008268 <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 8003fae:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <setup_LP5523+0xcc>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	b299      	uxth	r1, r3
 8003fb4:	2364      	movs	r3, #100	; 0x64
 8003fb6:	9302      	str	r3, [sp, #8]
 8003fb8:	2309      	movs	r3, #9
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	4b13      	ldr	r3, [pc, #76]	; (800400c <setup_LP5523+0xe0>)
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	2226      	movs	r2, #38	; 0x26
 8003fc4:	480f      	ldr	r0, [pc, #60]	; (8004004 <setup_LP5523+0xd8>)
 8003fc6:	f004 f94f 	bl	8008268 <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <setup_LP5523+0xcc>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b299      	uxth	r1, r3
 8003fd0:	2364      	movs	r3, #100	; 0x64
 8003fd2:	9302      	str	r3, [sp, #8]
 8003fd4:	2309      	movs	r3, #9
 8003fd6:	9301      	str	r3, [sp, #4]
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <setup_LP5523+0xe4>)
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2301      	movs	r3, #1
 8003fde:	2206      	movs	r2, #6
 8003fe0:	4808      	ldr	r0, [pc, #32]	; (8004004 <setup_LP5523+0xd8>)
 8003fe2:	f004 f941 	bl	8008268 <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 8003fe6:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <setup_LP5523+0xd0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f00b fb2a 	bl	800f644 <osSemaphoreRelease>
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	200283f1 	.word	0x200283f1
 8003ffc:	20027968 	.word	0x20027968
 8004000:	200283f0 	.word	0x200283f0
 8004004:	20027f64 	.word	0x20027f64
 8004008:	20000ac8 	.word	0x20000ac8
 800400c:	2000006c 	.word	0x2000006c
 8004010:	08017f9c 	.word	0x08017f9c

08004014 <FrontLightsSet>:
//
//
//  return true;
//}

void FrontLightsSet(union ColorComplex *setColors){
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af04      	add	r7, sp, #16
 800401a:	6078      	str	r0, [r7, #4]
	memcpy(led_left_PWM, setColors, 9);
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <FrontLightsSet+0x78>)
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6810      	ldr	r0, [r2, #0]
 8004022:	6851      	ldr	r1, [r2, #4]
 8004024:	c303      	stmia	r3!, {r0, r1}
 8004026:	7a12      	ldrb	r2, [r2, #8]
 8004028:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f103 0209 	add.w	r2, r3, #9
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <FrontLightsSet+0x7c>)
 8004032:	6810      	ldr	r0, [r2, #0]
 8004034:	6851      	ldr	r1, [r2, #4]
 8004036:	c303      	stmia	r3!, {r0, r1}
 8004038:	7a12      	ldrb	r2, [r2, #8]
 800403a:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800403c:	4b15      	ldr	r3, [pc, #84]	; (8004094 <FrontLightsSet+0x80>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f04f 31ff 	mov.w	r1, #4294967295
 8004044:	4618      	mov	r0, r3
 8004046:	f00b fa97 	bl	800f578 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 800404a:	2364      	movs	r3, #100	; 0x64
 800404c:	9302      	str	r3, [sp, #8]
 800404e:	2309      	movs	r3, #9
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	4b0e      	ldr	r3, [pc, #56]	; (800408c <FrontLightsSet+0x78>)
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	2301      	movs	r3, #1
 8004058:	2216      	movs	r2, #22
 800405a:	2168      	movs	r1, #104	; 0x68
 800405c:	480e      	ldr	r0, [pc, #56]	; (8004098 <FrontLightsSet+0x84>)
 800405e:	f004 f903 	bl	8008268 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8004062:	2364      	movs	r3, #100	; 0x64
 8004064:	9302      	str	r3, [sp, #8]
 8004066:	2309      	movs	r3, #9
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <FrontLightsSet+0x7c>)
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	2301      	movs	r3, #1
 8004070:	2216      	movs	r2, #22
 8004072:	216a      	movs	r1, #106	; 0x6a
 8004074:	4808      	ldr	r0, [pc, #32]	; (8004098 <FrontLightsSet+0x84>)
 8004076:	f004 f8f7 	bl	8008268 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <FrontLightsSet+0x80>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f00b fae0 	bl	800f644 <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000ab0 	.word	0x20000ab0
 8004090:	20000abc 	.word	0x20000abc
 8004094:	20027968 	.word	0x20027968
 8004098:	20027f64 	.word	0x20027f64

0800409c <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af04      	add	r7, sp, #16
 80040a2:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 80040a4:	2034      	movs	r0, #52	; 0x34
 80040a6:	f7ff ff41 	bl	8003f2c <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 80040aa:	2035      	movs	r0, #53	; 0x35
 80040ac:	f7ff ff3e 	bl	8003f2c <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 80040b4:	2001      	movs	r0, #1
 80040b6:	f00a ff27 	bl	800ef08 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 80040ba:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <ThreadFrontLightsTask+0xdc>)
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	f107 010c 	add.w	r1, r7, #12
 80040c2:	f04f 33ff 	mov.w	r3, #4294967295
 80040c6:	2200      	movs	r2, #0
 80040c8:	f00b fc0e 	bl	800f8e8 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e011      	b.n	80040f6 <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	425b      	negs	r3, r3
 80040de:	b2d9      	uxtb	r1, r3
 80040e0:	4a26      	ldr	r2, [pc, #152]	; (800417c <ThreadFrontLightsTask+0xe0>)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	4413      	add	r3, r2
 80040e6:	460a      	mov	r2, r1
 80040e8:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	085b      	lsrs	r3, r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3301      	adds	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	ddea      	ble.n	80040d2 <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 80040fc:	2300      	movs	r3, #0
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	e011      	b.n	8004126 <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	b2db      	uxtb	r3, r3
 800410c:	425b      	negs	r3, r3
 800410e:	b2d9      	uxtb	r1, r3
 8004110:	4a1b      	ldr	r2, [pc, #108]	; (8004180 <ThreadFrontLightsTask+0xe4>)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4413      	add	r3, r2
 8004116:	460a      	mov	r2, r1
 8004118:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	3301      	adds	r3, #1
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b08      	cmp	r3, #8
 800412a:	ddea      	ble.n	8004102 <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800412c:	4b15      	ldr	r3, [pc, #84]	; (8004184 <ThreadFrontLightsTask+0xe8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f04f 31ff 	mov.w	r1, #4294967295
 8004134:	4618      	mov	r0, r3
 8004136:	f00b fa1f 	bl	800f578 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 800413a:	2364      	movs	r3, #100	; 0x64
 800413c:	9302      	str	r3, [sp, #8]
 800413e:	2309      	movs	r3, #9
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	4b0e      	ldr	r3, [pc, #56]	; (800417c <ThreadFrontLightsTask+0xe0>)
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	2301      	movs	r3, #1
 8004148:	2216      	movs	r2, #22
 800414a:	2168      	movs	r1, #104	; 0x68
 800414c:	480e      	ldr	r0, [pc, #56]	; (8004188 <ThreadFrontLightsTask+0xec>)
 800414e:	f004 f88b 	bl	8008268 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8004152:	2364      	movs	r3, #100	; 0x64
 8004154:	9302      	str	r3, [sp, #8]
 8004156:	2309      	movs	r3, #9
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <ThreadFrontLightsTask+0xe4>)
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	2301      	movs	r3, #1
 8004160:	2216      	movs	r2, #22
 8004162:	216a      	movs	r1, #106	; 0x6a
 8004164:	4808      	ldr	r0, [pc, #32]	; (8004188 <ThreadFrontLightsTask+0xec>)
 8004166:	f004 f87f 	bl	8008268 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <ThreadFrontLightsTask+0xe8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f00b fa68 	bl	800f644 <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 8004174:	e79c      	b.n	80040b0 <ThreadFrontLightsTask+0x14>
 8004176:	bf00      	nop
 8004178:	20027970 	.word	0x20027970
 800417c:	20000ab0 	.word	0x20000ab0
 8004180:	20000abc 	.word	0x20000abc
 8004184:	20027968 	.word	0x20027968
 8004188:	20027f64 	.word	0x20027f64

0800418c <LL_RCC_LSE_SetDriveCapability>:
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	f023 0218 	bic.w	r2, r3, #24
 80041a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041bc:	f001 fae8 	bl	8005790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041c0:	f000 f81c 	bl	80041fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041c4:	f7fe fc8c 	bl	8002ae0 <MX_GPIO_Init>
  MX_DMA_Init();
 80041c8:	f7fd fbef 	bl	80019aa <MX_DMA_Init>
  MX_ADC1_Init();
 80041cc:	f7fc fe38 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 80041d0:	f000 fe88 	bl	8004ee4 <MX_RTC_Init>
  MX_TIM2_Init();
 80041d4:	f001 f90a 	bl	80053ec <MX_TIM2_Init>
  MX_RF_Init();
 80041d8:	f000 fe6c 	bl	8004eb4 <MX_RF_Init>
  MX_USART1_UART_Init();
 80041dc:	f001 fa22 	bl	8005624 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80041e0:	f7ff fb80 	bl	80038e4 <MX_I2C1_Init>
  MX_COMP1_Init();
 80041e4:	f7fd face 	bl	8001784 <MX_COMP1_Init>
  MX_TIM16_Init();
 80041e8:	f001 f976 	bl	80054d8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80041ec:	f00a fc32 	bl	800ea54 <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80041f0:	f7fd f856 	bl	80012a0 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 80041f4:	f00a fc62 	bl	800eabc <osKernelStart>
//
//  for(int i = 0; i<1000; i++){
//	  test_packet[i] = i;
//  }

  while (1)
 80041f8:	e7fe      	b.n	80041f8 <main+0x40>
	...

080041fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b0ae      	sub	sp, #184	; 0xb8
 8004200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004202:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004206:	2248      	movs	r2, #72	; 0x48
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f012 fa91 	bl	8016732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004210:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]
 8004220:	615a      	str	r2, [r3, #20]
 8004222:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004224:	1d3b      	adds	r3, r7, #4
 8004226:	2250      	movs	r2, #80	; 0x50
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f012 fa81 	bl	8016732 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8004230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800423e:	f043 0310 	orr.w	r3, r3, #16
 8004242:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424e:	f043 0303 	orr.w	r3, r3, #3
 8004252:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004254:	2000      	movs	r0, #0
 8004256:	f7ff ff99 	bl	800418c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800425a:	4b3a      	ldr	r3, [pc, #232]	; (8004344 <SystemClock_Config+0x148>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004262:	4a38      	ldr	r2, [pc, #224]	; (8004344 <SystemClock_Config+0x148>)
 8004264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b36      	ldr	r3, [pc, #216]	; (8004344 <SystemClock_Config+0x148>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8004276:	230f      	movs	r3, #15
 8004278:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800427a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800427e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004280:	2301      	movs	r3, #1
 8004282:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004288:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800428a:	2340      	movs	r3, #64	; 0x40
 800428c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004290:	2305      	movs	r3, #5
 8004292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004296:	2300      	movs	r3, #0
 8004298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800429c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80042a0:	4618      	mov	r0, r3
 80042a2:	f006 f84d 	bl	800a340 <HAL_RCC_OscConfig>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80042ac:	f000 f89e 	bl	80043ec <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80042b0:	236f      	movs	r3, #111	; 0x6f
 80042b2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80042b4:	2302      	movs	r3, #2
 80042b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042b8:	2300      	movs	r3, #0
 80042ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042bc:	2300      	movs	r3, #0
 80042be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042c0:	2300      	movs	r3, #0
 80042c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80042c4:	2300      	movs	r3, #0
 80042c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80042c8:	2300      	movs	r3, #0
 80042ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80042cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80042d0:	2101      	movs	r1, #1
 80042d2:	4618      	mov	r0, r3
 80042d4:	f006 fb92 	bl	800a9fc <HAL_RCC_ClockConfig>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80042de:	f000 f885 	bl	80043ec <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80042e2:	f643 4305 	movw	r3, #15365	; 0x3c05
 80042e6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80042e8:	2306      	movs	r3, #6
 80042ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80042ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80042f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042f6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80042f8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80042fc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80042fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004302:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004308:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800430e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004312:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004318:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 800431a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800431e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8004320:	2302      	movs	r3, #2
 8004322:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8004324:	2300      	movs	r3, #0
 8004326:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004328:	1d3b      	adds	r3, r7, #4
 800432a:	4618      	mov	r0, r3
 800432c:	f006 ffd3 	bl	800b2d6 <HAL_RCCEx_PeriphCLKConfig>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <SystemClock_Config+0x13e>
  {
    Error_Handler();
 8004336:	f000 f859 	bl	80043ec <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800433a:	bf00      	nop
 800433c:	37b8      	adds	r7, #184	; 0xb8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	58000400 	.word	0x58000400

08004348 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 8004350:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <HAL_COMP_TriggerCallback+0x74>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	b29a      	uxth	r2, r3
 8004358:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <HAL_COMP_TriggerCallback+0x78>)
 800435a:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f002 fe37 	bl	8006fd0 <HAL_COMP_GetOutputLevel>
 8004362:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d109      	bne.n	800437e <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 800436a:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <HAL_COMP_TriggerCallback+0x78>)
 800436c:	881a      	ldrh	r2, [r3, #0]
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <HAL_COMP_TriggerCallback+0x7c>)
 8004370:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 8004374:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <HAL_COMP_TriggerCallback+0x7c>)
 8004376:	2201      	movs	r2, #1
 8004378:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 800437c:	e019      	b.n	80043b2 <HAL_COMP_TriggerCallback+0x6a>
	else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 800437e:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_COMP_TriggerCallback+0x7c>)
 8004380:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8004384:	2b00      	cmp	r3, #0
 8004386:	d014      	beq.n	80043b2 <HAL_COMP_TriggerCallback+0x6a>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d111      	bne.n	80043b2 <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <HAL_COMP_TriggerCallback+0x7c>)
 8004390:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 8004394:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_COMP_TriggerCallback+0x78>)
 8004396:	881a      	ldrh	r2, [r3, #0]
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <HAL_COMP_TriggerCallback+0x7c>)
 800439a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	4807      	ldr	r0, [pc, #28]	; (80043c4 <HAL_COMP_TriggerCallback+0x7c>)
 80043a6:	f7ff fc89 	bl	8003cbc <enqueue_pulse>
		input0.rise_valid_ = 0;
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_COMP_TriggerCallback+0x7c>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20028588 	.word	0x20028588
 80043c0:	20000ad2 	.word	0x20000ad2
 80043c4:	20027980 	.word	0x20027980

080043c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d101      	bne.n	80043de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80043da:	f001 f9f9 	bl	80057d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40012c00 	.word	0x40012c00

080043ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80043f0:	bf00      	nop
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <MasterThreadTask>:

uint8_t logEnabled = 0;
struct SystemStatus systemStatus = {0};

void MasterThreadTask(void *argument)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af02      	add	r7, sp, #8
 8004402:	6078      	str	r0, [r7, #4]
	// wait for STM32_WPAN to initialize
//	osThreadFlagsWait (0x00000008U, osFlagsWaitAny, osWaitForever);

//	startSensorThreads();

	uint8_t test = sizeof(struct SystemStatus);
 8004404:	2304      	movs	r3, #4
 8004406:	73fb      	strb	r3, [r7, #15]
//			get3D_location(&vive_loc);
//			osDelay(1000);
//		}
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever);
 8004408:	4b4e      	ldr	r3, [pc, #312]	; (8004544 <MasterThreadTask+0x148>)
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	f04f 33ff 	mov.w	r3, #4294967295
 8004410:	2200      	movs	r2, #0
 8004412:	494d      	ldr	r1, [pc, #308]	; (8004548 <MasterThreadTask+0x14c>)
 8004414:	f00b fa68 	bl	800f8e8 <osMessageQueueGet>

//		togLogMessageReceived.status = 0;
//		togLogMessageReceived.logStatus = 0;
		togLogMessageReceived.blinkEnabled = 1;
 8004418:	4b4b      	ldr	r3, [pc, #300]	; (8004548 <MasterThreadTask+0x14c>)
 800441a:	2201      	movs	r2, #1
 800441c:	709a      	strb	r2, [r3, #2]
		togLogMessageReceived.tempEnabled = 1;
 800441e:	4b4a      	ldr	r3, [pc, #296]	; (8004548 <MasterThreadTask+0x14c>)
 8004420:	2201      	movs	r2, #1
 8004422:	70da      	strb	r2, [r3, #3]
		togLogMessageReceived.intertialEnabled = 1;
 8004424:	4b48      	ldr	r3, [pc, #288]	; (8004548 <MasterThreadTask+0x14c>)
 8004426:	2201      	movs	r2, #1
 8004428:	711a      	strb	r2, [r3, #4]
		togLogMessageReceived.positionEnabled = 1;
 800442a:	4b47      	ldr	r3, [pc, #284]	; (8004548 <MasterThreadTask+0x14c>)
 800442c:	2201      	movs	r2, #1
 800442e:	715a      	strb	r2, [r3, #5]

		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 8004430:	4b46      	ldr	r3, [pc, #280]	; (800454c <MasterThreadTask+0x150>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f00b fafb 	bl	800fa30 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void *) &nullStatusMessage, 0U, 0);
 800443a:	4b44      	ldr	r3, [pc, #272]	; (800454c <MasterThreadTask+0x150>)
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	2300      	movs	r3, #0
 8004440:	2200      	movs	r2, #0
 8004442:	4943      	ldr	r1, [pc, #268]	; (8004550 <MasterThreadTask+0x154>)
 8004444:	f00b f9dc 	bl	800f800 <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if(togLogMessageReceived.logStatus == ENABLE_LOG)
 8004448:	4b3f      	ldr	r3, [pc, #252]	; (8004548 <MasterThreadTask+0x14c>)
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d168      	bne.n	8004522 <MasterThreadTask+0x126>
		{
			logEnabled = 1;
 8004450:	4b40      	ldr	r3, [pc, #256]	; (8004554 <MasterThreadTask+0x158>)
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8004456:	4b40      	ldr	r3, [pc, #256]	; (8004558 <MasterThreadTask+0x15c>)
 8004458:	4a3b      	ldr	r2, [pc, #236]	; (8004548 <MasterThreadTask+0x14c>)
 800445a:	6811      	ldr	r1, [r2, #0]
 800445c:	6019      	str	r1, [r3, #0]
 800445e:	8892      	ldrh	r2, [r2, #4]
 8004460:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 8004462:	4b3d      	ldr	r3, [pc, #244]	; (8004558 <MasterThreadTask+0x15c>)
 8004464:	789b      	ldrb	r3, [r3, #2]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d105      	bne.n	8004476 <MasterThreadTask+0x7a>
			{
				osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 800446a:	4b3c      	ldr	r3, [pc, #240]	; (800455c <MasterThreadTask+0x160>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2101      	movs	r1, #1
 8004470:	4618      	mov	r0, r3
 8004472:	f00a fc03 	bl	800ec7c <osThreadFlagsSet>
			}

			if(togLogMessageReceived.positionEnabled == SENSOR_ENABLE)
 8004476:	4b34      	ldr	r3, [pc, #208]	; (8004548 <MasterThreadTask+0x14c>)
 8004478:	795b      	ldrb	r3, [r3, #5]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d118      	bne.n	80044b0 <MasterThreadTask+0xb4>
			{
				// update status queue to notify other threads position is active
				osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800447e:	4b33      	ldr	r3, [pc, #204]	; (800454c <MasterThreadTask+0x150>)
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
 8004486:	2200      	movs	r2, #0
 8004488:	4935      	ldr	r1, [pc, #212]	; (8004560 <MasterThreadTask+0x164>)
 800448a:	f00b fa2d 	bl	800f8e8 <osMessageQueueGet>
				statusMessage.positionEnabled = 1;
 800448e:	4b34      	ldr	r3, [pc, #208]	; (8004560 <MasterThreadTask+0x164>)
 8004490:	2201      	movs	r2, #1
 8004492:	715a      	strb	r2, [r3, #5]
				osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8004494:	4b2d      	ldr	r3, [pc, #180]	; (800454c <MasterThreadTask+0x150>)
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	2300      	movs	r3, #0
 800449a:	2200      	movs	r2, #0
 800449c:	4930      	ldr	r1, [pc, #192]	; (8004560 <MasterThreadTask+0x164>)
 800449e:	f00b f9af 	bl	800f800 <osMessageQueuePut>

				// start timer for 3D position sample to be taken
				osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 80044a2:	4b30      	ldr	r3, [pc, #192]	; (8004564 <MasterThreadTask+0x168>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80044aa:	4618      	mov	r0, r3
 80044ac:	f00a fdf4 	bl	800f098 <osTimerStart>
			}

			if( (prevLogMessage.tempEnabled == SENSOR_ENABLE))
 80044b0:	4b29      	ldr	r3, [pc, #164]	; (8004558 <MasterThreadTask+0x15c>)
 80044b2:	78db      	ldrb	r3, [r3, #3]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d105      	bne.n	80044c4 <MasterThreadTask+0xc8>
			{
				osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 80044b8:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <MasterThreadTask+0x16c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2101      	movs	r1, #1
 80044be:	4618      	mov	r0, r3
 80044c0:	f00a fbdc 	bl	800ec7c <osThreadFlagsSet>
			}

			if( (prevLogMessage.intertialEnabled == SENSOR_ENABLE))
 80044c4:	4b24      	ldr	r3, [pc, #144]	; (8004558 <MasterThreadTask+0x15c>)
 80044c6:	791b      	ldrb	r3, [r3, #4]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d105      	bne.n	80044d8 <MasterThreadTask+0xdc>
			{
				osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 80044cc:	4b27      	ldr	r3, [pc, #156]	; (800456c <MasterThreadTask+0x170>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2101      	movs	r1, #1
 80044d2:	4618      	mov	r0, r3
 80044d4:	f00a fbd2 	bl	800ec7c <osThreadFlagsSet>
			}

			osDelay(500);
 80044d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044dc:	f00a fd14 	bl	800ef08 <osDelay>
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// allow sometime for context switching
				osDelay(50);
 80044e0:	2032      	movs	r0, #50	; 0x32
 80044e2:	f00a fd11 	bl	800ef08 <osDelay>

				// grab data from sensor thread queues
				grabSensorData();
 80044e6:	f000 f84d 	bl	8004584 <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived, &vive_loc);
 80044ea:	4b21      	ldr	r3, [pc, #132]	; (8004570 <MasterThreadTask+0x174>)
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	4b21      	ldr	r3, [pc, #132]	; (8004574 <MasterThreadTask+0x178>)
 80044f0:	4a21      	ldr	r2, [pc, #132]	; (8004578 <MasterThreadTask+0x17c>)
 80044f2:	4922      	ldr	r1, [pc, #136]	; (800457c <MasterThreadTask+0x180>)
 80044f4:	4822      	ldr	r0, [pc, #136]	; (8004580 <MasterThreadTask+0x184>)
 80044f6:	f000 f8fd 	bl	80046f4 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 80044fa:	4821      	ldr	r0, [pc, #132]	; (8004580 <MasterThreadTask+0x184>)
 80044fc:	f010 feae 	bl	801525c <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if(osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK)
 8004500:	4b10      	ldr	r3, [pc, #64]	; (8004544 <MasterThreadTask+0x148>)
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	2200      	movs	r2, #0
 8004508:	490f      	ldr	r1, [pc, #60]	; (8004548 <MasterThreadTask+0x14c>)
 800450a:	f00b f9ed 	bl	800f8e8 <osMessageQueueGet>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e5      	bne.n	80044e0 <MasterThreadTask+0xe4>
				{
					// disable threads
					if(togLogMessageReceived.status == DISABLE_SENSING){
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <MasterThreadTask+0x14c>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e1      	bne.n	80044e0 <MasterThreadTask+0xe4>

						masterExitRoutine();
 800451c:	f000 f8b4 	bl	8004688 <masterExitRoutine>

						// break out of first while loop and wait until told to start logging again
						break;
 8004520:	e00e      	b.n	8004540 <MasterThreadTask+0x144>
					}
				}
			}
		}
		else if( logEnabled==1 && togLogMessageReceived.logStatus == DISABLE_LOG)
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <MasterThreadTask+0x158>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	f47f af6e 	bne.w	8004408 <MasterThreadTask+0xc>
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <MasterThreadTask+0x14c>)
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f47f af69 	bne.w	8004408 <MasterThreadTask+0xc>
		{
			logEnabled = 0;
 8004536:	4b07      	ldr	r3, [pc, #28]	; (8004554 <MasterThreadTask+0x158>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 800453c:	f000 f8a4 	bl	8004688 <masterExitRoutine>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever);
 8004540:	e762      	b.n	8004408 <MasterThreadTask+0xc>
 8004542:	bf00      	nop
 8004544:	20027d9c 	.word	0x20027d9c
 8004548:	20027870 	.word	0x20027870
 800454c:	20027978 	.word	0x20027978
 8004550:	08017fa8 	.word	0x08017fa8
 8004554:	20000ad4 	.word	0x20000ad4
 8004558:	20027948 	.word	0x20027948
 800455c:	20027954 	.word	0x20027954
 8004560:	20027dc4 	.word	0x20027dc4
 8004564:	20027958 	.word	0x20027958
 8004568:	20027da8 	.word	0x20027da8
 800456c:	20027dbc 	.word	0x20027dbc
 8004570:	20028474 	.word	0x20028474
 8004574:	2002848c 	.word	0x2002848c
 8004578:	200284c8 	.word	0x200284c8
 800457c:	20028408 	.word	0x20028408
 8004580:	2002787c 	.word	0x2002787c

08004584 <grabSensorData>:


	}
}

void grabSensorData(void){
 8004584:	b5b0      	push	{r4, r5, r7, lr}
 8004586:	af00      	add	r7, sp, #0
	if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 8004588:	4b32      	ldr	r3, [pc, #200]	; (8004654 <grabSensorData+0xd0>)
 800458a:	789b      	ldrb	r3, [r3, #2]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d112      	bne.n	80045b6 <grabSensorData+0x32>
	{
		if(osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 1000)){
 8004590:	4b31      	ldr	r3, [pc, #196]	; (8004658 <grabSensorData+0xd4>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004598:	2200      	movs	r2, #0
 800459a:	4930      	ldr	r1, [pc, #192]	; (800465c <grabSensorData+0xd8>)
 800459c:	f00b f9a4 	bl	800f8e8 <osMessageQueueGet>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <grabSensorData+0x32>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 80045a6:	4a2d      	ldr	r2, [pc, #180]	; (800465c <grabSensorData+0xd8>)
 80045a8:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <grabSensorData+0xdc>)
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	236c      	movs	r3, #108	; 0x6c
 80045b0:	461a      	mov	r2, r3
 80045b2:	f012 f8b3 	bl	801671c <memcpy>
		}
	}

	if( (prevLogMessage.tempEnabled == SENSOR_ENABLE))
 80045b6:	4b27      	ldr	r3, [pc, #156]	; (8004654 <grabSensorData+0xd0>)
 80045b8:	78db      	ldrb	r3, [r3, #3]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d114      	bne.n	80045e8 <grabSensorData+0x64>
	{
		if(osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 1000)){
 80045be:	4b29      	ldr	r3, [pc, #164]	; (8004664 <grabSensorData+0xe0>)
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045c6:	2200      	movs	r2, #0
 80045c8:	4927      	ldr	r1, [pc, #156]	; (8004668 <grabSensorData+0xe4>)
 80045ca:	f00b f98d 	bl	800f8e8 <osMessageQueueGet>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <grabSensorData+0x64>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived, sizeof(struct parsedSecondaryProcessorPacket));
 80045d4:	4a24      	ldr	r2, [pc, #144]	; (8004668 <grabSensorData+0xe4>)
 80045d6:	4b25      	ldr	r3, [pc, #148]	; (800466c <grabSensorData+0xe8>)
 80045d8:	4614      	mov	r4, r2
 80045da:	461d      	mov	r5, r3
 80045dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80045e4:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}

	if( (prevLogMessage.positionEnabled == SENSOR_ENABLE))
 80045e8:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <grabSensorData+0xd0>)
 80045ea:	795b      	ldrb	r3, [r3, #5]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d114      	bne.n	800461a <grabSensorData+0x96>
		{
		if(osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 1000)){
 80045f0:	4b1f      	ldr	r3, [pc, #124]	; (8004670 <grabSensorData+0xec>)
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045f8:	2200      	movs	r2, #0
 80045fa:	491e      	ldr	r1, [pc, #120]	; (8004674 <grabSensorData+0xf0>)
 80045fc:	f00b f974 	bl	800f8e8 <osMessageQueueGet>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <grabSensorData+0x96>
				memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 8004606:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <grabSensorData+0xf0>)
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <grabSensorData+0xf4>)
 800460a:	4614      	mov	r4, r2
 800460c:	461d      	mov	r5, r3
 800460e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004612:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004616:	e884 0003 	stmia.w	r4, {r0, r1}
			}
		}

	if( (prevLogMessage.intertialEnabled == SENSOR_ENABLE))
 800461a:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <grabSensorData+0xd0>)
 800461c:	791b      	ldrb	r3, [r3, #4]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d115      	bne.n	800464e <grabSensorData+0xca>
	{
		if(osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)){
 8004622:	4b16      	ldr	r3, [pc, #88]	; (800467c <grabSensorData+0xf8>)
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	2300      	movs	r3, #0
 8004628:	2200      	movs	r2, #0
 800462a:	4915      	ldr	r1, [pc, #84]	; (8004680 <grabSensorData+0xfc>)
 800462c:	f00b f95c 	bl	800f8e8 <osMessageQueueGet>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <grabSensorData+0xca>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 8004636:	4a12      	ldr	r2, [pc, #72]	; (8004680 <grabSensorData+0xfc>)
 8004638:	4b12      	ldr	r3, [pc, #72]	; (8004684 <grabSensorData+0x100>)
 800463a:	4614      	mov	r4, r2
 800463c:	461d      	mov	r5, r3
 800463e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004646:	e895 0003 	ldmia.w	r5, {r0, r1}
 800464a:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 800464e:	bf00      	nop
 8004650:	bdb0      	pop	{r4, r5, r7, pc}
 8004652:	bf00      	nop
 8004654:	20027948 	.word	0x20027948
 8004658:	20027db8 	.word	0x20027db8
 800465c:	20028408 	.word	0x20028408
 8004660:	08017fb0 	.word	0x08017fb0
 8004664:	20027974 	.word	0x20027974
 8004668:	200284c8 	.word	0x200284c8
 800466c:	0801801c 	.word	0x0801801c
 8004670:	2002786c 	.word	0x2002786c
 8004674:	20028474 	.word	0x20028474
 8004678:	0801805c 	.word	0x0801805c
 800467c:	2002796c 	.word	0x2002796c
 8004680:	2002848c 	.word	0x2002848c
 8004684:	08018034 	.word	0x08018034

08004688 <masterExitRoutine>:



void masterExitRoutine(void){
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
	if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <masterExitRoutine+0x58>)
 800468e:	789b      	ldrb	r3, [r3, #2]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d105      	bne.n	80046a0 <masterExitRoutine+0x18>
	{
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8004694:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <masterExitRoutine+0x5c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2102      	movs	r1, #2
 800469a:	4618      	mov	r0, r3
 800469c:	f00a faee 	bl	800ec7c <osThreadFlagsSet>
	}

	if(prevLogMessage.positionEnabled == SENSOR_ENABLE)
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <masterExitRoutine+0x58>)
 80046a2:	795b      	ldrb	r3, [r3, #5]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d104      	bne.n	80046b2 <masterExitRoutine+0x2a>
	{
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 80046a8:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <masterExitRoutine+0x60>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f00a fd33 	bl	800f118 <osTimerStop>
	}

	if( (prevLogMessage.tempEnabled == SENSOR_ENABLE))
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <masterExitRoutine+0x58>)
 80046b4:	78db      	ldrb	r3, [r3, #3]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d105      	bne.n	80046c6 <masterExitRoutine+0x3e>
	{
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 80046ba:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <masterExitRoutine+0x64>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2102      	movs	r1, #2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f00a fadb 	bl	800ec7c <osThreadFlagsSet>
	}

	if( (prevLogMessage.intertialEnabled == SENSOR_ENABLE))
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <masterExitRoutine+0x58>)
 80046c8:	791b      	ldrb	r3, [r3, #4]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <masterExitRoutine+0x52>
	{
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <masterExitRoutine+0x68>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2102      	movs	r1, #2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f00a fad1 	bl	800ec7c <osThreadFlagsSet>
	}

}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20027948 	.word	0x20027948
 80046e4:	20027954 	.word	0x20027954
 80046e8:	20027958 	.word	0x20027958
 80046ec:	20027da8 	.word	0x20027da8
 80046f0:	20027dbc 	.word	0x20027dbc

080046f4 <packetizeData>:
void packetizeData(struct LogPacket *packet,
		struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg,
		struct inertialData *inertialMsg,
		VIVEVars *posMsg)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 8004702:	f001 f877 	bl	80057f4 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
//	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
//	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
//	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);

	// add sensor data
	memcpy ( &(packet->blink), blink, sizeof(struct blinkData) );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	226c      	movs	r2, #108	; 0x6c
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	4618      	mov	r0, r3
 8004716:	f012 f801 	bl	801671c <memcpy>
	memcpy ( &(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket) );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	336c      	adds	r3, #108	; 0x6c
 800471e:	2218      	movs	r2, #24
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4618      	mov	r0, r3
 8004724:	f011 fffa 	bl	801671c <memcpy>
	memcpy ( &(packet->inertial), inertialMsg, sizeof(struct inertialData) );
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3384      	adds	r3, #132	; 0x84
 800472c:	2228      	movs	r2, #40	; 0x28
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f011 fff3 	bl	801671c <memcpy>
	memcpy ( &(packet->pos), posMsg, sizeof(struct VIVEVars) );
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	33ac      	adds	r3, #172	; 0xac
 800473a:	2218      	movs	r2, #24
 800473c:	69b9      	ldr	r1, [r7, #24]
 800473e:	4618      	mov	r0, r3
 8004740:	f011 ffec 	bl	801671c <memcpy>
}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475a:	2b0f      	cmp	r3, #15
 800475c:	d80f      	bhi.n	800477e <vector_push+0x32>
    	self->items[self->count++] = *item;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004762:	1c51      	adds	r1, r2, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6619      	str	r1, [r3, #96]	; 0x60
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4413      	add	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	440b      	add	r3, r1
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	6811      	ldr	r1, [r2, #0]
 8004778:	6019      	str	r1, [r3, #0]
 800477a:	8892      	ldrh	r2, [r2, #4]
 800477c:	809a      	strh	r2, [r3, #4]
    }
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <vector_pop>:

Pulse vector_pop(vector *self){
 800478a:	b480      	push	{r7}
 800478c:	b085      	sub	sp, #20
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01c      	beq.n	80047d6 <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a0:	1e5a      	subs	r2, r3, #1
 80047a2:	6839      	ldr	r1, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	4413      	add	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	18ca      	adds	r2, r1, r3
 80047ae:	f107 0308 	add.w	r3, r7, #8
 80047b2:	6810      	ldr	r0, [r2, #0]
 80047b4:	6018      	str	r0, [r3, #0]
 80047b6:	8892      	ldrh	r2, [r2, #4]
 80047b8:	809a      	strh	r2, [r3, #4]
		self->count--;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047be:	1e5a      	subs	r2, r3, #1
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f107 0308 	add.w	r3, r7, #8
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	6010      	str	r0, [r2, #0]
 80047d0:	889b      	ldrh	r3, [r3, #4]
 80047d2:	8093      	strh	r3, [r2, #4]
 80047d4:	e005      	b.n	80047e2 <vector_pop+0x58>
	}
	return self->items[0];
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	6810      	ldr	r0, [r2, #0]
 80047dc:	6018      	str	r0, [r3, #0]
 80047de:	8892      	ldrh	r2, [r2, #4]
 80047e0:	809a      	strh	r2, [r3, #4]
}
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <vector_get>:

Pulse vector_get(vector *self, int index)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	db12      	blt.n	8004826 <vector_get+0x38>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d90d      	bls.n	8004826 <vector_get+0x38>
    	return self->items[index];
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	18ca      	adds	r2, r1, r3
 800481a:	4603      	mov	r3, r0
 800481c:	6811      	ldr	r1, [r2, #0]
 800481e:	6019      	str	r1, [r3, #0]
 8004820:	8892      	ldrh	r2, [r2, #4]
 8004822:	809a      	strh	r2, [r3, #4]
 8004824:	e005      	b.n	8004832 <vector_get+0x44>
    }
    return self->items[0];
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	6810      	ldr	r0, [r2, #0]
 800482c:	6018      	str	r0, [r3, #0]
 800482e:	8892      	ldrh	r2, [r2, #4]
 8004830:	809a      	strh	r2, [r3, #4]
}
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <vector_clear>:

void vector_clear(vector *self){
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
	self->count = 0;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	e00c      	b.n	8004894 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2264      	movs	r2, #100	; 0x64
 800487e:	fb02 f303 	mul.w	r3, r2, r3
 8004882:	3310      	adds	r3, #16
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	4413      	add	r3, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ffd8 	bl	800483e <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3301      	adds	r3, #1
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b01      	cmp	r3, #1
 8004898:	ddef      	ble.n	800487a <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	33d8      	adds	r3, #216	; 0xd8
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff ffcd 	bl	800483e <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff ffc7 	bl	800483e <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 80048b8:	bf00      	nop
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <consume_pulse>:

void consume_pulse(PulseProcessor *self, Pulse* p){
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	889b      	ldrh	r3, [r3, #4]
 80048ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80048d2:	d20c      	bcs.n	80048ee <consume_pulse+0x2e>
		//Ignore very long pulses
	}
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	889b      	ldrh	r3, [r3, #4]
 80048d8:	2b27      	cmp	r3, #39	; 0x27
 80048da:	d904      	bls.n	80048e6 <consume_pulse+0x26>
		process_long_pulse(self, p);
 80048dc:	6839      	ldr	r1, [r7, #0]
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f80a 	bl	80048f8 <process_long_pulse>
	}
	else{	//Short pulse -likely laser sweep
		process_short_pulse(self, p);
	}
}
 80048e4:	e003      	b.n	80048ee <consume_pulse+0x2e>
		process_short_pulse(self, p);
 80048e6:	6839      	ldr	r1, [r7, #0]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f897 	bl	8004a1c <process_short_pulse>
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d144      	bne.n	8004994 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d03f      	beq.n	8004994 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 800491a:	f107 0308 	add.w	r3, r7, #8
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff32 	bl	800478a <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	885a      	ldrh	r2, [r3, #2]
 800492a:	897b      	ldrh	r3, [r7, #10]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	b29a      	uxth	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 800493c:	461a      	mov	r2, r3
 800493e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8004942:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 8004946:	330d      	adds	r3, #13
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f113 0f1e 	cmn.w	r3, #30
 8004952:	db1c      	blt.n	800498e <process_long_pulse+0x96>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2b1d      	cmp	r3, #29
 8004958:	dc19      	bgt.n	800498e <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	885a      	ldrh	r2, [r3, #2]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc ffe5 	bl	8001944 <reset>

                reset_cycle_long_pulses(self);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa64 	bl	8004e48 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fa7c 	bl	8004e7e <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fa87 	bl	8004e9a <reset_cycle_short_pulses>
 800498c:	e002      	b.n	8004994 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fa75 	bl	8004e7e <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d02d      	beq.n	80049fc <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	885a      	ldrh	r2, [r3, #2]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	891b      	ldrh	r3, [r3, #8]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	e021      	b.n	80049f6 <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 80049b2:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <process_long_pulse+0x120>)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ba:	8a7a      	ldrh	r2, [r7, #18]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	b29b      	uxth	r3, r3
 80049c0:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 80049c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049c6:	f113 0f1e 	cmn.w	r3, #30
 80049ca:	db11      	blt.n	80049f0 <process_long_pulse+0xf8>
 80049cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049d0:	2b1d      	cmp	r3, #29
 80049d2:	dc0d      	bgt.n	80049f0 <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2264      	movs	r2, #100	; 0x64
 80049d8:	fb02 f303 	mul.w	r3, r2, r3
 80049dc:	3310      	adds	r3, #16
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	6839      	ldr	r1, [r7, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff feb1 	bl	800474c <vector_push>
                pulse_classified = 1;
 80049ea:	2301      	movs	r3, #1
 80049ec:	77fb      	strb	r3, [r7, #31]
                break;
 80049ee:	e005      	b.n	80049fc <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	3301      	adds	r3, #1
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	ddda      	ble.n	80049b2 <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 80049fc:	7ffb      	ldrb	r3, [r7, #31]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004a08:	6839      	ldr	r1, [r7, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff fe9e 	bl	800474c <vector_push>
    }
}
 8004a10:	bf00      	nop
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	08018074 	.word	0x08018074

08004a1c <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00f      	beq.n	8004a4e <process_short_pulse+0x32>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d208      	bcs.n	8004a4e <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	33d8      	adds	r3, #216	; 0xd8
 8004a40:	6839      	ldr	r1, [r7, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fe82 	bl	800474c <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f805 	bl	8004a58 <process_cycle_fix>
	}
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b0a2      	sub	sp, #136	; 0x88
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8004a60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <process_cycle_fix+0x2a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80b7 	beq.w	8004bf0 <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b09      	cmp	r3, #9
 8004a88:	d80d      	bhi.n	8004aa6 <process_cycle_fix+0x4e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <process_cycle_fix+0x4e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d004      	beq.n	8004aa6 <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aac:	e090      	b.n	8004bd0 <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab4:	2164      	movs	r1, #100	; 0x64
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	3370      	adds	r3, #112	; 0x70
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 8004ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d07e      	beq.n	8004bc6 <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	891a      	ldrh	r2, [r3, #8]
 8004acc:	49c0      	ldr	r1, [pc, #768]	; (8004dd0 <process_cycle_fix+0x378>)
 8004ace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ad2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004adc:	2300      	movs	r3, #0
 8004ade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ae2:	e03e      	b.n	8004b62 <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8004ae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae8:	2264      	movs	r2, #100	; 0x64
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	3310      	adds	r3, #16
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	18d1      	adds	r1, r2, r3
 8004af4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004af8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fe76 	bl	80047ee <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 8004b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004b12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b16:	4619      	mov	r1, r3
 8004b18:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8004b1c:	1acb      	subs	r3, r1, r3
 8004b1e:	441a      	add	r2, r3
 8004b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004b2a:	440b      	add	r3, r1
 8004b2c:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 8004b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004b40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b44:	4413      	add	r3, r2
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004b52:	440b      	add	r3, r1
 8004b54:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d3bb      	bcc.n	8004ae4 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d929      	bls.n	8004bc6 <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8004b72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004b82:	461a      	mov	r2, r3
 8004b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004b96:	440b      	add	r3, r1
 8004b98:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004bac:	461a      	mov	r2, r3
 8004bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004bc0:	440b      	add	r3, r1
 8004bc2:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bca:	3301      	adds	r3, #1
 8004bcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	f77f af6a 	ble.w	8004aae <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004be8:	4619      	mov	r1, r3
 8004bea:	f7fc fe29 	bl	8001840 <process_pulse_lengths>
 8004bee:	e008      	b.n	8004c02 <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	1e5a      	subs	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	f7fc fe80 	bl	8001914 <get_phase>
 8004c14:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8004c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f2c0 80b5 	blt.w	8004d88 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8004c1e:	f107 030c 	add.w	r3, r7, #12
 8004c22:	2220      	movs	r2, #32
 8004c24:	2100      	movs	r1, #0
 8004c26:	4618      	mov	r0, r3
 8004c28:	f011 fd83 	bl	8016732 <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8004c2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8004c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3c:	105b      	asrs	r3, r3, #1
 8004c3e:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	891a      	ldrh	r2, [r3, #8]
 8004c44:	4962      	ldr	r1, [pc, #392]	; (8004dd0 <process_cycle_fix+0x378>)
 8004c46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004c58:	440b      	add	r3, r1
 8004c5a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004c66:	2300      	movs	r3, #0
 8004c68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c6a:	e04a      	b.n	8004d02 <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004c72:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fdb8 	bl	80047ee <vector_get>
            uint32_t input_idx = p.input_idx;
 8004c7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c82:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004c84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c88:	085b      	lsrs	r3, r3, #1
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004c9a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004c9e:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8004ca2:	d32b      	bcc.n	8004cfc <process_cycle_fix+0x2a4>
 8004ca4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004ca8:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d825      	bhi.n	8004cfc <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8004cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cb8:	4413      	add	r3, r2
 8004cba:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <process_cycle_fix+0x280>
 8004cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cca:	4413      	add	r3, r2
 8004ccc:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004cd0:	889a      	ldrh	r2, [r3, #4]
 8004cd2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d211      	bcs.n	8004cfc <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8004cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004ce6:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8004cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004cf8:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004cfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cfe:	3301      	adds	r3, #1
 8004d00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004d08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d3ae      	bcc.n	8004c6c <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004d0e:	2300      	movs	r3, #0
 8004d10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d12:	e034      	b.n	8004d7e <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8004d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d028      	beq.n	8004d78 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8004d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d28:	015b      	lsls	r3, r3, #5
 8004d2a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4413      	add	r3, r2
 8004d32:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8004d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8004d42:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d4e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004dd4 <process_cycle_fix+0x37c>
 8004d52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d56:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004dd8 <process_cycle_fix+0x380>
 8004d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68d9      	ldr	r1, [r3, #12]
 8004d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d72:	3204      	adds	r2, #4
 8004d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d3c5      	bcc.n	8004d14 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8004d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	db06      	blt.n	8004d9c <process_cycle_fix+0x344>
 8004d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e008      	b.n	8004dae <process_cycle_fix+0x356>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf0c      	ite	eq
 8004da8:	2301      	moveq	r3, #1
 8004daa:	2300      	movne	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d02b      	beq.n	8004e0a <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	891a      	ldrh	r2, [r3, #8]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8004dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	db0c      	blt.n	8004ddc <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d908      	bls.n	8004ddc <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8004dca:	22c8      	movs	r2, #200	; 0xc8
 8004dcc:	e007      	b.n	8004dde <process_cycle_fix+0x386>
 8004dce:	bf00      	nop
 8004dd0:	08018074 	.word	0x08018074
 8004dd4:	40490fdb 	.word	0x40490fdb
 8004dd8:	46023400 	.word	0x46023400
 8004ddc:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004df2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f7fd fbc5 	bl	8002594 <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f81c 	bl	8004e48 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f834 	bl	8004e7e <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f83f 	bl	8004e9a <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	891a      	ldrh	r2, [r3, #8]
 8004e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	4413      	add	r3, r2
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004e2c:	330d      	adds	r3, #13
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60da      	str	r2, [r3, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	3788      	adds	r7, #136	; 0x88
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop

08004e48 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	e00c      	b.n	8004e70 <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2264      	movs	r2, #100	; 0x64
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	3310      	adds	r3, #16
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	4413      	add	r3, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fcea 	bl	800483e <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	ddef      	ble.n	8004e56 <reset_cycle_long_pulses+0xe>
	}
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b082      	sub	sp, #8
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fcd6 	bl	800483e <vector_clear>
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	33d8      	adds	r3, #216	; 0xd8
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fcc9 	bl	800483e <vector_clear>
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0

}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004eda:	bf00      	nop
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <MX_RTC_Init+0x34>)
 8004eea:	4a0c      	ldr	r2, [pc, #48]	; (8004f1c <MX_RTC_Init+0x38>)
 8004eec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <MX_RTC_Init+0x34>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8004ef4:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <MX_RTC_Init+0x34>)
 8004ef6:	220f      	movs	r2, #15
 8004ef8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8004efa:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <MX_RTC_Init+0x34>)
 8004efc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004f00:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004f02:	4805      	ldr	r0, [pc, #20]	; (8004f18 <MX_RTC_Init+0x34>)
 8004f04:	f006 fc6d 	bl	800b7e2 <HAL_RTC_Init>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8004f0e:	f7ff fa6d 	bl	80043ec <Error_Handler>
  }

}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	200284e4 	.word	0x200284e4
 8004f1c:	40002800 	.word	0x40002800

08004f20 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <HAL_RTC_MspInit+0x20>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d101      	bne.n	8004f36 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004f32:	f7ff ffc6 	bl	8004ec2 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40002800 	.word	0x40002800

08004f44 <LL_AHB3_GRP1_EnableClock>:
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4013      	ands	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f68:	68fb      	ldr	r3, [r7, #12]
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8004f7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004f7e:	f7ff ffe1 	bl	8004f44 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f82:	2200      	movs	r2, #0
 8004f84:	210f      	movs	r1, #15
 8004f86:	f06f 0001 	mvn.w	r0, #1
 8004f8a:	f002 f95c 	bl	8007246 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8004f8e:	2200      	movs	r2, #0
 8004f90:	210f      	movs	r1, #15
 8004f92:	202c      	movs	r0, #44	; 0x2c
 8004f94:	f002 f957 	bl	8007246 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8004f98:	2200      	movs	r2, #0
 8004f9a:	210f      	movs	r1, #15
 8004f9c:	202d      	movs	r0, #45	; 0x2d
 8004f9e:	f002 f952 	bl	8007246 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	; 0x30
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8004fe8:	2200      	movs	r2, #0
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	2019      	movs	r0, #25
 8004fee:	f002 f92a 	bl	8007246 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8004ff2:	2019      	movs	r0, #25
 8004ff4:	f002 f941 	bl	800727a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004ff8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ffc:	f7ff ffd3 	bl	8004fa6 <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005000:	f107 0208 	add.w	r2, r7, #8
 8005004:	f107 030c 	add.w	r3, r7, #12
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f005 fedc 	bl	800adc8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005010:	f005 fec4 	bl	800ad9c <HAL_RCC_GetPCLK2Freq>
 8005014:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	4a12      	ldr	r2, [pc, #72]	; (8005064 <HAL_InitTick+0x8c>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	0c9b      	lsrs	r3, r3, #18
 8005020:	3b01      	subs	r3, #1
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005024:	4b10      	ldr	r3, [pc, #64]	; (8005068 <HAL_InitTick+0x90>)
 8005026:	4a11      	ldr	r2, [pc, #68]	; (800506c <HAL_InitTick+0x94>)
 8005028:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800502a:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <HAL_InitTick+0x90>)
 800502c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005030:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005032:	4a0d      	ldr	r2, [pc, #52]	; (8005068 <HAL_InitTick+0x90>)
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <HAL_InitTick+0x90>)
 800503a:	2200      	movs	r2, #0
 800503c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800503e:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <HAL_InitTick+0x90>)
 8005040:	2200      	movs	r2, #0
 8005042:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005044:	4808      	ldr	r0, [pc, #32]	; (8005068 <HAL_InitTick+0x90>)
 8005046:	f006 fcba 	bl	800b9be <HAL_TIM_Base_Init>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005050:	4805      	ldr	r0, [pc, #20]	; (8005068 <HAL_InitTick+0x90>)
 8005052:	f006 fd35 	bl	800bac0 <HAL_TIM_Base_Start_IT>
 8005056:	4603      	mov	r3, r0
 8005058:	e000      	b.n	800505c <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
}
 800505c:	4618      	mov	r0, r3
 800505e:	3730      	adds	r7, #48	; 0x30
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	431bde83 	.word	0x431bde83
 8005068:	20028508 	.word	0x20028508
 800506c:	40012c00 	.word	0x40012c00

08005070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005074:	bf00      	nop
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800507e:	b480      	push	{r7}
 8005080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005082:	e7fe      	b.n	8005082 <HardFault_Handler+0x4>

08005084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005088:	e7fe      	b.n	8005088 <MemManage_Handler+0x4>

0800508a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800508a:	b480      	push	{r7}
 800508c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800508e:	e7fe      	b.n	800508e <BusFault_Handler+0x4>

08005090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005094:	e7fe      	b.n	8005094 <UsageFault_Handler+0x4>

08005096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005096:	b480      	push	{r7}
 8005098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800509a:	bf00      	nop
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80050a8:	2004      	movs	r0, #4
 80050aa:	f002 fddb 	bl	8007c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 80050ae:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <EXTI2_IRQHandler+0x1c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2104      	movs	r1, #4
 80050b4:	4618      	mov	r0, r3
 80050b6:	f009 fde1 	bl	800ec7c <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20027da8 	.word	0x20027da8

080050c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80050c8:	4802      	ldr	r0, [pc, #8]	; (80050d4 <DMA1_Channel1_IRQHandler+0x10>)
 80050ca:	f002 faf4 	bl	80076b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80050ce:	bf00      	nop
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20027800 	.word	0x20027800

080050d8 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80050dc:	4802      	ldr	r0, [pc, #8]	; (80050e8 <COMP_IRQHandler+0x10>)
 80050de:	f001 ff49 	bl	8006f74 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 80050e2:	bf00      	nop
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20027dcc 	.word	0x20027dcc

080050ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80050f0:	2020      	movs	r0, #32
 80050f2:	f002 fdb7 	bl	8007c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005100:	4803      	ldr	r0, [pc, #12]	; (8005110 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005102:	f006 fde7 	bl	800bcd4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005106:	4803      	ldr	r0, [pc, #12]	; (8005114 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005108:	f006 fde4 	bl	800bcd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800510c:	bf00      	nop
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20028508 	.word	0x20028508
 8005114:	20028588 	.word	0x20028588

08005118 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800511c:	4802      	ldr	r0, [pc, #8]	; (8005128 <I2C1_EV_IRQHandler+0x10>)
 800511e:	f003 f9b7 	bl	8008490 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20027f64 	.word	0x20027f64

0800512c <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005130:	f010 fe48 	bl	8015dc4 <HW_IPCC_Tx_Handler>

  return;
 8005134:	bf00      	nop
}
 8005136:	bd80      	pop	{r7, pc}

08005138 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 800513c:	f010 fde8 	bl	8015d10 <HW_IPCC_Rx_Handler>
  return;
 8005140:	bf00      	nop
}
 8005142:	bd80      	pop	{r7, pc}

08005144 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8005144:	b40c      	push	{r2, r3}
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	4603      	mov	r3, r0
 800514e:	460a      	mov	r2, r1
 8005150:	71fb      	strb	r3, [r7, #7]
 8005152:	4613      	mov	r3, r2
 8005154:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	b002      	add	sp, #8
 8005162:	4770      	bx	lr

08005164 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005168:	4b26      	ldr	r3, [pc, #152]	; (8005204 <SystemInit+0xa0>)
 800516a:	2200      	movs	r2, #0
 800516c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800516e:	4b25      	ldr	r3, [pc, #148]	; (8005204 <SystemInit+0xa0>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005174:	4a23      	ldr	r2, [pc, #140]	; (8005204 <SystemInit+0xa0>)
 8005176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800517a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005188:	f043 0301 	orr.w	r3, r3, #1
 800518c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800518e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005192:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005196:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051a2:	4b19      	ldr	r3, [pc, #100]	; (8005208 <SystemInit+0xa4>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b4:	f023 0305 	bic.w	r3, r3, #5
 80051b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80051d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <SystemInit+0xa8>)
 80051d6:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80051d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051dc:	4a0b      	ldr	r2, [pc, #44]	; (800520c <SystemInit+0xa8>)
 80051de:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80051e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80051f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f4:	2200      	movs	r2, #0
 80051f6:	619a      	str	r2, [r3, #24]
}
 80051f8:	bf00      	nop
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	e000ed00 	.word	0xe000ed00
 8005208:	faf6fefb 	.word	0xfaf6fefb
 800520c:	22041000 	.word	0x22041000

08005210 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	4a47      	ldr	r2, [pc, #284]	; (8005340 <SystemCoreClockUpdate+0x130>)
 8005224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800522a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 030c 	and.w	r3, r3, #12
 8005234:	2b0c      	cmp	r3, #12
 8005236:	d867      	bhi.n	8005308 <SystemCoreClockUpdate+0xf8>
 8005238:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <SystemCoreClockUpdate+0x30>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	08005275 	.word	0x08005275
 8005244:	08005309 	.word	0x08005309
 8005248:	08005309 	.word	0x08005309
 800524c:	08005309 	.word	0x08005309
 8005250:	0800527d 	.word	0x0800527d
 8005254:	08005309 	.word	0x08005309
 8005258:	08005309 	.word	0x08005309
 800525c:	08005309 	.word	0x08005309
 8005260:	08005285 	.word	0x08005285
 8005264:	08005309 	.word	0x08005309
 8005268:	08005309 	.word	0x08005309
 800526c:	08005309 	.word	0x08005309
 8005270:	0800528d 	.word	0x0800528d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8005274:	4a33      	ldr	r2, [pc, #204]	; (8005344 <SystemCoreClockUpdate+0x134>)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	6013      	str	r3, [r2, #0]
      break;
 800527a:	e049      	b.n	8005310 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 800527c:	4b31      	ldr	r3, [pc, #196]	; (8005344 <SystemCoreClockUpdate+0x134>)
 800527e:	4a32      	ldr	r2, [pc, #200]	; (8005348 <SystemCoreClockUpdate+0x138>)
 8005280:	601a      	str	r2, [r3, #0]
      break;
 8005282:	e045      	b.n	8005310 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005284:	4b2f      	ldr	r3, [pc, #188]	; (8005344 <SystemCoreClockUpdate+0x134>)
 8005286:	4a31      	ldr	r2, [pc, #196]	; (800534c <SystemCoreClockUpdate+0x13c>)
 8005288:	601a      	str	r2, [r3, #0]
      break;
 800528a:	e041      	b.n	8005310 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800528c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	091b      	lsrs	r3, r3, #4
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	3301      	adds	r3, #1
 80052a6:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d105      	bne.n	80052ba <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80052ae:	4a26      	ldr	r2, [pc, #152]	; (8005348 <SystemCoreClockUpdate+0x138>)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	e00d      	b.n	80052d6 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d105      	bne.n	80052cc <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80052c0:	4a22      	ldr	r2, [pc, #136]	; (800534c <SystemCoreClockUpdate+0x13c>)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e004      	b.n	80052d6 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	0a1b      	lsrs	r3, r3, #8
 80052de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	fb02 f303 	mul.w	r3, r2, r3
 80052e8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80052ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	0f5b      	lsrs	r3, r3, #29
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	3301      	adds	r3, #1
 80052f8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	4a10      	ldr	r2, [pc, #64]	; (8005344 <SystemCoreClockUpdate+0x134>)
 8005304:	6013      	str	r3, [r2, #0]
      break;
 8005306:	e003      	b.n	8005310 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8005308:	4a0e      	ldr	r2, [pc, #56]	; (8005344 <SystemCoreClockUpdate+0x134>)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	6013      	str	r3, [r2, #0]
      break;
 800530e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	091b      	lsrs	r3, r3, #4
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <SystemCoreClockUpdate+0x140>)
 800531e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005322:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8005324:	4b07      	ldr	r3, [pc, #28]	; (8005344 <SystemCoreClockUpdate+0x134>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	4a05      	ldr	r2, [pc, #20]	; (8005344 <SystemCoreClockUpdate+0x134>)
 8005330:	6013      	str	r3, [r2, #0]

}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	080180d8 	.word	0x080180d8
 8005344:	20000078 	.word	0x20000078
 8005348:	00f42400 	.word	0x00f42400
 800534c:	01e84800 	.word	0x01e84800
 8005350:	08018078 	.word	0x08018078

08005354 <LL_AHB2_GRP1_EnableClock>:
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800535c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4313      	orrs	r3, r2
 800536a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800536c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4013      	ands	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005378:	68fb      	ldr	r3, [r7, #12]
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <LL_APB1_GRP1_EnableClock>:
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800538e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005392:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4313      	orrs	r3, r2
 800539c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800539e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4013      	ands	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80053aa:	68fb      	ldr	r3, [r7, #12]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <LL_APB2_GRP1_EnableClock>:
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80053c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80053d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4013      	ands	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80053dc:	68fb      	ldr	r3, [r7, #12]
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08e      	sub	sp, #56	; 0x38
 80053f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	605a      	str	r2, [r3, #4]
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005400:	f107 031c 	add.w	r3, r7, #28
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800540c:	463b      	mov	r3, r7
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	609a      	str	r2, [r3, #8]
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	611a      	str	r2, [r3, #16]
 800541a:	615a      	str	r2, [r3, #20]
 800541c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800541e:	4b2d      	ldr	r3, [pc, #180]	; (80054d4 <MX_TIM2_Init+0xe8>)
 8005420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005424:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8005426:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <MX_TIM2_Init+0xe8>)
 8005428:	f240 227f 	movw	r2, #639	; 0x27f
 800542c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800542e:	4b29      	ldr	r3, [pc, #164]	; (80054d4 <MX_TIM2_Init+0xe8>)
 8005430:	2200      	movs	r2, #0
 8005432:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8005434:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <MX_TIM2_Init+0xe8>)
 8005436:	2209      	movs	r2, #9
 8005438:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800543a:	4b26      	ldr	r3, [pc, #152]	; (80054d4 <MX_TIM2_Init+0xe8>)
 800543c:	2200      	movs	r2, #0
 800543e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005440:	4b24      	ldr	r3, [pc, #144]	; (80054d4 <MX_TIM2_Init+0xe8>)
 8005442:	2200      	movs	r2, #0
 8005444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005446:	4823      	ldr	r0, [pc, #140]	; (80054d4 <MX_TIM2_Init+0xe8>)
 8005448:	f006 fab9 	bl	800b9be <HAL_TIM_Base_Init>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005452:	f7fe ffcb 	bl	80043ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800545a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800545c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005460:	4619      	mov	r1, r3
 8005462:	481c      	ldr	r0, [pc, #112]	; (80054d4 <MX_TIM2_Init+0xe8>)
 8005464:	f006 fe6e 	bl	800c144 <HAL_TIM_ConfigClockSource>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800546e:	f7fe ffbd 	bl	80043ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005472:	4818      	ldr	r0, [pc, #96]	; (80054d4 <MX_TIM2_Init+0xe8>)
 8005474:	f006 fb4e 	bl	800bb14 <HAL_TIM_PWM_Init>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800547e:	f7fe ffb5 	bl	80043ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005482:	2320      	movs	r3, #32
 8005484:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005486:	2300      	movs	r3, #0
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800548a:	f107 031c 	add.w	r3, r7, #28
 800548e:	4619      	mov	r1, r3
 8005490:	4810      	ldr	r0, [pc, #64]	; (80054d4 <MX_TIM2_Init+0xe8>)
 8005492:	f007 fadd 	bl	800ca50 <HAL_TIMEx_MasterConfigSynchronization>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800549c:	f7fe ffa6 	bl	80043ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054a0:	2360      	movs	r3, #96	; 0x60
 80054a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 80054a4:	2309      	movs	r3, #9
 80054a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80054b0:	463b      	mov	r3, r7
 80054b2:	2204      	movs	r2, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4807      	ldr	r0, [pc, #28]	; (80054d4 <MX_TIM2_Init+0xe8>)
 80054b8:	f006 fd2c 	bl	800bf14 <HAL_TIM_PWM_ConfigChannel>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80054c2:	f7fe ff93 	bl	80043ec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80054c6:	4803      	ldr	r0, [pc, #12]	; (80054d4 <MX_TIM2_Init+0xe8>)
 80054c8:	f000 f850 	bl	800556c <HAL_TIM_MspPostInit>

}
 80054cc:	bf00      	nop
 80054ce:	3738      	adds	r7, #56	; 0x38
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20028548 	.word	0x20028548

080054d8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80054dc:	4b0f      	ldr	r3, [pc, #60]	; (800551c <MX_TIM16_Init+0x44>)
 80054de:	4a10      	ldr	r2, [pc, #64]	; (8005520 <MX_TIM16_Init+0x48>)
 80054e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <MX_TIM16_Init+0x44>)
 80054e4:	221f      	movs	r2, #31
 80054e6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054e8:	4b0c      	ldr	r3, [pc, #48]	; (800551c <MX_TIM16_Init+0x44>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <MX_TIM16_Init+0x44>)
 80054f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054f4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <MX_TIM16_Init+0x44>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80054fc:	4b07      	ldr	r3, [pc, #28]	; (800551c <MX_TIM16_Init+0x44>)
 80054fe:	2200      	movs	r2, #0
 8005500:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <MX_TIM16_Init+0x44>)
 8005504:	2200      	movs	r2, #0
 8005506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005508:	4804      	ldr	r0, [pc, #16]	; (800551c <MX_TIM16_Init+0x44>)
 800550a:	f006 fa58 	bl	800b9be <HAL_TIM_Base_Init>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005514:	f7fe ff6a 	bl	80043ec <Error_Handler>
  }

}
 8005518:	bf00      	nop
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20028588 	.word	0x20028588
 8005520:	40014400 	.word	0x40014400

08005524 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005534:	d103      	bne.n	800553e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005536:	2001      	movs	r0, #1
 8005538:	f7ff ff25 	bl	8005386 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800553c:	e010      	b.n	8005560 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a09      	ldr	r2, [pc, #36]	; (8005568 <HAL_TIM_Base_MspInit+0x44>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d10b      	bne.n	8005560 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005548:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800554c:	f7ff ff34 	bl	80053b8 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005550:	2200      	movs	r2, #0
 8005552:	2100      	movs	r1, #0
 8005554:	2019      	movs	r0, #25
 8005556:	f001 fe76 	bl	8007246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800555a:	2019      	movs	r0, #25
 800555c:	f001 fe8d 	bl	800727a <HAL_NVIC_EnableIRQ>
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40014400 	.word	0x40014400

0800556c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005574:	f107 030c 	add.w	r3, r7, #12
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	605a      	str	r2, [r3, #4]
 800557e:	609a      	str	r2, [r3, #8]
 8005580:	60da      	str	r2, [r3, #12]
 8005582:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d112      	bne.n	80055b4 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800558e:	2002      	movs	r0, #2
 8005590:	f7ff fee0 	bl	8005354 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005594:	2308      	movs	r3, #8
 8005596:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005598:	2302      	movs	r3, #2
 800559a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a0:	2300      	movs	r3, #0
 80055a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80055a4:	2301      	movs	r3, #1
 80055a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055a8:	f107 030c 	add.w	r3, r7, #12
 80055ac:	4619      	mov	r1, r3
 80055ae:	4803      	ldr	r0, [pc, #12]	; (80055bc <HAL_TIM_MspPostInit+0x50>)
 80055b0:	f002 f9d0 	bl	8007954 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80055b4:	bf00      	nop
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	48000400 	.word	0x48000400

080055c0 <LL_AHB2_GRP1_EnableClock>:
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80055c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80055d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4013      	ands	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055e4:	68fb      	ldr	r3, [r7, #12]
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <LL_APB2_GRP1_EnableClock>:
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4313      	orrs	r3, r2
 8005608:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800560a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4013      	ands	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005616:	68fb      	ldr	r3, [r7, #12]
}
 8005618:	bf00      	nop
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005628:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 800562a:	4a24      	ldr	r2, [pc, #144]	; (80056bc <MX_USART1_UART_Init+0x98>)
 800562c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800562e:	4b22      	ldr	r3, [pc, #136]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 8005630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005636:	4b20      	ldr	r3, [pc, #128]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 8005638:	2200      	movs	r2, #0
 800563a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800563c:	4b1e      	ldr	r3, [pc, #120]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 800563e:	2200      	movs	r2, #0
 8005640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005642:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 8005644:	2200      	movs	r2, #0
 8005646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005648:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 800564a:	220c      	movs	r2, #12
 800564c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800564e:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 8005650:	2200      	movs	r2, #0
 8005652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8005654:	4b18      	ldr	r3, [pc, #96]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 8005656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800565a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800565c:	4b16      	ldr	r3, [pc, #88]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 800565e:	2200      	movs	r2, #0
 8005660:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005662:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 8005664:	2200      	movs	r2, #0
 8005666:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005668:	4b13      	ldr	r3, [pc, #76]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 800566a:	2200      	movs	r2, #0
 800566c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800566e:	4812      	ldr	r0, [pc, #72]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 8005670:	f007 fa8c 	bl	800cb8c <HAL_UART_Init>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800567a:	f7fe feb7 	bl	80043ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800567e:	2100      	movs	r1, #0
 8005680:	480d      	ldr	r0, [pc, #52]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 8005682:	f009 f902 	bl	800e88a <HAL_UARTEx_SetTxFifoThreshold>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800568c:	f7fe feae 	bl	80043ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005690:	2100      	movs	r1, #0
 8005692:	4809      	ldr	r0, [pc, #36]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 8005694:	f009 f937 	bl	800e906 <HAL_UARTEx_SetRxFifoThreshold>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800569e:	f7fe fea5 	bl	80043ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80056a2:	4805      	ldr	r0, [pc, #20]	; (80056b8 <MX_USART1_UART_Init+0x94>)
 80056a4:	f009 f8b8 	bl	800e818 <HAL_UARTEx_DisableFifoMode>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80056ae:	f7fe fe9d 	bl	80043ec <Error_Handler>
  }

}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	200285c8 	.word	0x200285c8
 80056bc:	40013800 	.word	0x40013800

080056c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c8:	f107 030c 	add.w	r3, r7, #12
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	605a      	str	r2, [r3, #4]
 80056d2:	609a      	str	r2, [r3, #8]
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a0e      	ldr	r2, [pc, #56]	; (8005718 <HAL_UART_MspInit+0x58>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d116      	bne.n	8005710 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80056e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80056e6:	f7ff ff84 	bl	80055f2 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ea:	2002      	movs	r0, #2
 80056ec:	f7ff ff68 	bl	80055c0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80056f0:	23c0      	movs	r3, #192	; 0xc0
 80056f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f4:	2302      	movs	r3, #2
 80056f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056fc:	2300      	movs	r3, #0
 80056fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005700:	2307      	movs	r3, #7
 8005702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005704:	f107 030c 	add.w	r3, r7, #12
 8005708:	4619      	mov	r1, r3
 800570a:	4804      	ldr	r0, [pc, #16]	; (800571c <HAL_UART_MspInit+0x5c>)
 800570c:	f002 f922 	bl	8007954 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005710:	bf00      	nop
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40013800 	.word	0x40013800
 800571c:	48000400 	.word	0x48000400

08005720 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005720:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005722:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005724:	3304      	adds	r3, #4

08005726 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005726:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005728:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800572a:	d3f9      	bcc.n	8005720 <CopyDataInit>
  bx lr
 800572c:	4770      	bx	lr

0800572e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800572e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005730:	3004      	adds	r0, #4

08005732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005732:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005734:	d3fb      	bcc.n	800572e <FillZerobss>
  bx lr
 8005736:	4770      	bx	lr

08005738 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005738:	480c      	ldr	r0, [pc, #48]	; (800576c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800573a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800573c:	480c      	ldr	r0, [pc, #48]	; (8005770 <LoopForever+0x8>)
 800573e:	490d      	ldr	r1, [pc, #52]	; (8005774 <LoopForever+0xc>)
 8005740:	4a0d      	ldr	r2, [pc, #52]	; (8005778 <LoopForever+0x10>)
 8005742:	2300      	movs	r3, #0
 8005744:	f7ff ffef 	bl	8005726 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005748:	480c      	ldr	r0, [pc, #48]	; (800577c <LoopForever+0x14>)
 800574a:	490d      	ldr	r1, [pc, #52]	; (8005780 <LoopForever+0x18>)
 800574c:	2300      	movs	r3, #0
 800574e:	f7ff fff0 	bl	8005732 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005752:	480c      	ldr	r0, [pc, #48]	; (8005784 <LoopForever+0x1c>)
 8005754:	490c      	ldr	r1, [pc, #48]	; (8005788 <LoopForever+0x20>)
 8005756:	2300      	movs	r3, #0
 8005758:	f7ff ffeb 	bl	8005732 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800575c:	f7ff fd02 	bl	8005164 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005760:	f010 ffb8 	bl	80166d4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8005764:	f7fe fd28 	bl	80041b8 <main>

08005768 <LoopForever>:

LoopForever:
  b LoopForever
 8005768:	e7fe      	b.n	8005768 <LoopForever>
 800576a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800576c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8005770:	20000004 	.word	0x20000004
 8005774:	20000138 	.word	0x20000138
 8005778:	08018a70 	.word	0x08018a70
  INIT_BSS _sbss, _ebss
 800577c:	200001e8 	.word	0x200001e8
 8005780:	20028780 	.word	0x20028780
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005784:	200300c4 	.word	0x200300c4
 8005788:	20030b5b 	.word	0x20030b5b

0800578c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800578c:	e7fe      	b.n	800578c <ADC1_IRQHandler>
	...

08005790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800579a:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <HAL_Init+0x3c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a0b      	ldr	r2, [pc, #44]	; (80057cc <HAL_Init+0x3c>)
 80057a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057a6:	2003      	movs	r0, #3
 80057a8:	f001 fd42 	bl	8007230 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057ac:	2000      	movs	r0, #0
 80057ae:	f7ff fc13 	bl	8004fd8 <HAL_InitTick>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	71fb      	strb	r3, [r7, #7]
 80057bc:	e001      	b.n	80057c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80057be:	f7ff fbda 	bl	8004f76 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80057c2:	79fb      	ldrb	r3, [r7, #7]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	58004000 	.word	0x58004000

080057d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80057d4:	4b05      	ldr	r3, [pc, #20]	; (80057ec <HAL_IncTick+0x1c>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <HAL_IncTick+0x20>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4413      	add	r3, r2
 80057de:	4a03      	ldr	r2, [pc, #12]	; (80057ec <HAL_IncTick+0x1c>)
 80057e0:	6013      	str	r3, [r2, #0]
}
 80057e2:	bf00      	nop
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	20028654 	.word	0x20028654
 80057f0:	20000080 	.word	0x20000080

080057f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  return uwTick;
 80057f8:	4b03      	ldr	r3, [pc, #12]	; (8005808 <HAL_GetTick+0x14>)
 80057fa:	681b      	ldr	r3, [r3, #0]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20028654 	.word	0x20028654

0800580c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005810:	4b03      	ldr	r3, [pc, #12]	; (8005820 <HAL_GetTickPrio+0x14>)
 8005812:	681b      	ldr	r3, [r3, #0]
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	2000007c 	.word	0x2000007c

08005824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800582c:	f7ff ffe2 	bl	80057f4 <HAL_GetTick>
 8005830:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d004      	beq.n	8005848 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 800583e:	4b09      	ldr	r3, [pc, #36]	; (8005864 <HAL_Delay+0x40>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8005848:	bf00      	nop
 800584a:	f7ff ffd3 	bl	80057f4 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	429a      	cmp	r2, r3
 8005858:	d8f7      	bhi.n	800584a <HAL_Delay+0x26>
    {
    }
  }
 800585a:	bf00      	nop
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000080 	.word	0x20000080

08005868 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	609a      	str	r2, [r3, #8]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80058c0:	b490      	push	{r4, r7}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3360      	adds	r3, #96	; 0x60
 80058d2:	461a      	mov	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80058dc:	6822      	ldr	r2, [r4, #0]
 80058de:	4b08      	ldr	r3, [pc, #32]	; (8005900 <LL_ADC_SetOffset+0x40>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058f2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc90      	pop	{r4, r7}
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	03fff000 	.word	0x03fff000

08005904 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005904:	b490      	push	{r4, r7}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3360      	adds	r3, #96	; 0x60
 8005912:	461a      	mov	r2, r3
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bc90      	pop	{r4, r7}
 800592a:	4770      	bx	lr

0800592c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800592c:	b490      	push	{r4, r7}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3360      	adds	r3, #96	; 0x60
 800593c:	461a      	mov	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4313      	orrs	r3, r2
 8005950:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005952:	bf00      	nop
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bc90      	pop	{r4, r7}
 800595a:	4770      	bx	lr

0800595c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005982:	b490      	push	{r4, r7}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3330      	adds	r3, #48	; 0x30
 8005992:	461a      	mov	r2, r3
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	0a1b      	lsrs	r3, r3, #8
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	4413      	add	r3, r2
 80059a0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	211f      	movs	r1, #31
 80059ac:	fa01 f303 	lsl.w	r3, r1, r3
 80059b0:	43db      	mvns	r3, r3
 80059b2:	401a      	ands	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	0e9b      	lsrs	r3, r3, #26
 80059b8:	f003 011f 	and.w	r1, r3, #31
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	fa01 f303 	lsl.w	r3, r1, r3
 80059c6:	4313      	orrs	r3, r2
 80059c8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc90      	pop	{r4, r7}
 80059d2:	4770      	bx	lr

080059d4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80059d4:	b490      	push	{r4, r7}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3314      	adds	r3, #20
 80059e4:	461a      	mov	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	0e5b      	lsrs	r3, r3, #25
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	4413      	add	r3, r2
 80059f2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	0d1b      	lsrs	r3, r3, #20
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	2107      	movs	r1, #7
 8005a00:	fa01 f303 	lsl.w	r3, r1, r3
 8005a04:	43db      	mvns	r3, r3
 8005a06:	401a      	ands	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	0d1b      	lsrs	r3, r3, #20
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	fa01 f303 	lsl.w	r3, r1, r3
 8005a16:	4313      	orrs	r3, r2
 8005a18:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005a1a:	bf00      	nop
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc90      	pop	{r4, r7}
 8005a22:	4770      	bx	lr

08005a24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	401a      	ands	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f003 0318 	and.w	r3, r3, #24
 8005a46:	4908      	ldr	r1, [pc, #32]	; (8005a68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005a48:	40d9      	lsrs	r1, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	400b      	ands	r3, r1
 8005a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a52:	431a      	orrs	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	0007ffff 	.word	0x0007ffff

08005a6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005a7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6093      	str	r3, [r2, #8]
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aa4:	d101      	bne.n	8005aaa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005ac8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005acc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005af4:	d101      	bne.n	8005afa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b1c:	f043 0201 	orr.w	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b44:	f043 0202 	orr.w	r2, r3, #2
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <LL_ADC_IsEnabled+0x18>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <LL_ADC_IsEnabled+0x1a>
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d101      	bne.n	8005b96 <LL_ADC_IsDisableOngoing+0x18>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <LL_ADC_IsDisableOngoing+0x1a>
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005bb8:	f043 0204 	orr.w	r2, r3, #4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005be0:	f043 0210 	orr.w	r2, r3, #16
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d101      	bne.n	8005c0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d101      	bne.n	8005c5a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e12a      	b.n	8005ed8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fb f93d 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fef1 	bl	8005a90 <LL_ADC_IsDeepPowerDownEnabled>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff fed7 	bl	8005a6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff ff0c 	bl	8005ae0 <LL_ADC_IsInternalRegulatorEnabled>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d113      	bne.n	8005cf6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff fef0 	bl	8005ab8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005cd8:	4b81      	ldr	r3, [pc, #516]	; (8005ee0 <HAL_ADC_Init+0x278>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	099b      	lsrs	r3, r3, #6
 8005cde:	4a81      	ldr	r2, [pc, #516]	; (8005ee4 <HAL_ADC_Init+0x27c>)
 8005ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce4:	099b      	lsrs	r3, r3, #6
 8005ce6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005ce8:	e002      	b.n	8005cf0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f9      	bne.n	8005cea <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff fef0 	bl	8005ae0 <LL_ADC_IsInternalRegulatorEnabled>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10d      	bne.n	8005d22 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0a:	f043 0210 	orr.w	r2, r3, #16
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	f043 0201 	orr.w	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff ff64 	bl	8005bf4 <LL_ADC_REG_IsConversionOngoing>
 8005d2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	f003 0310 	and.w	r3, r3, #16
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f040 80c5 	bne.w	8005ec6 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f040 80c1 	bne.w	8005ec6 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005d4c:	f043 0202 	orr.w	r2, r3, #2
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff fefd 	bl	8005b58 <LL_ADC_IsEnabled>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10b      	bne.n	8005d7c <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d64:	4860      	ldr	r0, [pc, #384]	; (8005ee8 <HAL_ADC_Init+0x280>)
 8005d66:	f7ff fef7 	bl	8005b58 <LL_ADC_IsEnabled>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d105      	bne.n	8005d7c <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	4619      	mov	r1, r3
 8005d76:	485d      	ldr	r0, [pc, #372]	; (8005eec <HAL_ADC_Init+0x284>)
 8005d78:	f7ff fd76 	bl	8005868 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	7e5b      	ldrb	r3, [r3, #25]
 8005d80:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d86:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005d8c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005d92:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d9a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d106      	bne.n	8005db8 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	3b01      	subs	r3, #1
 8005db0:	045b      	lsls	r3, r3, #17
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d009      	beq.n	8005dd4 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	4b45      	ldr	r3, [pc, #276]	; (8005ef0 <HAL_ADC_Init+0x288>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	69b9      	ldr	r1, [r7, #24]
 8005de4:	430b      	orrs	r3, r1
 8005de6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff ff01 	bl	8005bf4 <LL_ADC_REG_IsConversionOngoing>
 8005df2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff ff22 	bl	8005c42 <LL_ADC_INJ_IsConversionOngoing>
 8005dfe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d13d      	bne.n	8005e82 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d13a      	bne.n	8005e82 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e10:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e18:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e28:	f023 0302 	bic.w	r3, r3, #2
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	69b9      	ldr	r1, [r7, #24]
 8005e32:	430b      	orrs	r3, r1
 8005e34:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d118      	bne.n	8005e72 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e4a:	f023 0304 	bic.w	r3, r3, #4
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e56:	4311      	orrs	r1, r2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e5c:	4311      	orrs	r1, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e62:	430a      	orrs	r2, r1
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	611a      	str	r2, [r3, #16]
 8005e70:	e007      	b.n	8005e82 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0201 	bic.w	r2, r2, #1
 8005e80:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d10c      	bne.n	8005ea4 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e90:	f023 010f 	bic.w	r1, r3, #15
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	1e5a      	subs	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ea2:	e007      	b.n	8005eb4 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 020f 	bic.w	r2, r2, #15
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb8:	f023 0303 	bic.w	r3, r3, #3
 8005ebc:	f043 0201 	orr.w	r2, r3, #1
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	655a      	str	r2, [r3, #84]	; 0x54
 8005ec4:	e007      	b.n	8005ed6 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eca:	f043 0210 	orr.w	r2, r3, #16
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000078 	.word	0x20000078
 8005ee4:	053e2d63 	.word	0x053e2d63
 8005ee8:	50040000 	.word	0x50040000
 8005eec:	50040300 	.word	0x50040300
 8005ef0:	fff0c007 	.word	0xfff0c007

08005ef4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fe75 	bl	8005bf4 <LL_ADC_REG_IsConversionOngoing>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d167      	bne.n	8005fe0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_ADC_Start_DMA+0x2a>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e063      	b.n	8005fe6 <HAL_ADC_Start_DMA+0xf2>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fcb8 	bl	800689c <ADC_Enable>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d14f      	bne.n	8005fd6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f3e:	f023 0301 	bic.w	r3, r3, #1
 8005f42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d006      	beq.n	8005f64 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5a:	f023 0206 	bic.w	r2, r3, #6
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	659a      	str	r2, [r3, #88]	; 0x58
 8005f62:	e002      	b.n	8005f6a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	4a20      	ldr	r2, [pc, #128]	; (8005ff0 <HAL_ADC_Start_DMA+0xfc>)
 8005f70:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f76:	4a1f      	ldr	r2, [pc, #124]	; (8005ff4 <HAL_ADC_Start_DMA+0x100>)
 8005f78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ff8 <HAL_ADC_Start_DMA+0x104>)
 8005f80:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	221c      	movs	r2, #28
 8005f88:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0210 	orr.w	r2, r2, #16
 8005fa0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0201 	orr.w	r2, r2, #1
 8005fb0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3340      	adds	r3, #64	; 0x40
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f001 fa3f 	bl	8007444 <HAL_DMA_Start_IT>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fde8 	bl	8005ba4 <LL_ADC_REG_StartConversion>
 8005fd4:	e006      	b.n	8005fe4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005fde:	e001      	b.n	8005fe4 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	08006a01 	.word	0x08006a01
 8005ff4:	08006ad9 	.word	0x08006ad9
 8005ff8:	08006af5 	.word	0x08006af5

08005ffc <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800600a:	2b01      	cmp	r3, #1
 800600c:	d101      	bne.n	8006012 <HAL_ADC_Stop_DMA+0x16>
 800600e:	2302      	movs	r3, #2
 8006010:	e051      	b.n	80060b6 <HAL_ADC_Stop_DMA+0xba>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800601a:	2103      	movs	r1, #3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fb89 	bl	8006734 <ADC_ConversionStop>
 8006022:	4603      	mov	r3, r0
 8006024:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d13f      	bne.n	80060ac <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006040:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d10f      	bne.n	800606a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604e:	4618      	mov	r0, r3
 8006050:	f001 fa73 	bl	800753a <HAL_DMA_Abort>
 8006054:	4603      	mov	r3, r0
 8006056:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0210 	bic.w	r2, r2, #16
 8006078:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d105      	bne.n	800608c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fc65 	bl	8006950 <ADC_Disable>
 8006086:	4603      	mov	r3, r0
 8006088:	73fb      	strb	r3, [r7, #15]
 800608a:	e002      	b.n	8006092 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fc5f 	bl	8006950 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d109      	bne.n	80060ac <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	f043 0201 	orr.w	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b0a6      	sub	sp, #152	; 0x98
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x22>
 80060de:	2302      	movs	r3, #2
 80060e0:	e31e      	b.n	8006720 <HAL_ADC_ConfigChannel+0x660>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fd80 	bl	8005bf4 <LL_ADC_REG_IsConversionOngoing>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f040 8303 	bne.w	8006702 <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	6859      	ldr	r1, [r3, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	461a      	mov	r2, r3
 800610a:	f7ff fc3a 	bl	8005982 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f7ff fd6e 	bl	8005bf4 <LL_ADC_REG_IsConversionOngoing>
 8006118:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff fd8e 	bl	8005c42 <LL_ADC_INJ_IsConversionOngoing>
 8006126:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800612a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800612e:	2b00      	cmp	r3, #0
 8006130:	f040 8148 	bne.w	80063c4 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006134:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006138:	2b00      	cmp	r3, #0
 800613a:	f040 8143 	bne.w	80063c4 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6819      	ldr	r1, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	461a      	mov	r2, r3
 800614c:	f7ff fc42 	bl	80059d4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	08db      	lsrs	r3, r3, #3
 800615c:	f003 0303 	and.w	r3, r3, #3
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b04      	cmp	r3, #4
 8006170:	d00a      	beq.n	8006188 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6919      	ldr	r1, [r3, #16]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006182:	f7ff fb9d 	bl	80058c0 <LL_ADC_SetOffset>
 8006186:	e11d      	b.n	80063c4 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2100      	movs	r1, #0
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fbb8 	bl	8005904 <LL_ADC_GetOffsetChannel>
 8006194:	4603      	mov	r3, r0
 8006196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10a      	bne.n	80061b4 <HAL_ADC_ConfigChannel+0xf4>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2100      	movs	r1, #0
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fbad 	bl	8005904 <LL_ADC_GetOffsetChannel>
 80061aa:	4603      	mov	r3, r0
 80061ac:	0e9b      	lsrs	r3, r3, #26
 80061ae:	f003 021f 	and.w	r2, r3, #31
 80061b2:	e012      	b.n	80061da <HAL_ADC_ConfigChannel+0x11a>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2100      	movs	r1, #0
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fba2 	bl	8005904 <LL_ADC_GetOffsetChannel>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061ca:	fa93 f3a3 	rbit	r3, r3
 80061ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80061d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061d2:	fab3 f383 	clz	r3, r3
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d105      	bne.n	80061f2 <HAL_ADC_ConfigChannel+0x132>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	0e9b      	lsrs	r3, r3, #26
 80061ec:	f003 031f 	and.w	r3, r3, #31
 80061f0:	e00a      	b.n	8006208 <HAL_ADC_ConfigChannel+0x148>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061fa:	fa93 f3a3 	rbit	r3, r3
 80061fe:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8006200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006202:	fab3 f383 	clz	r3, r3
 8006206:	b2db      	uxtb	r3, r3
 8006208:	429a      	cmp	r2, r3
 800620a:	d106      	bne.n	800621a <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2200      	movs	r2, #0
 8006212:	2100      	movs	r1, #0
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fb89 	bl	800592c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2101      	movs	r1, #1
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fb6f 	bl	8005904 <LL_ADC_GetOffsetChannel>
 8006226:	4603      	mov	r3, r0
 8006228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <HAL_ADC_ConfigChannel+0x186>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2101      	movs	r1, #1
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff fb64 	bl	8005904 <LL_ADC_GetOffsetChannel>
 800623c:	4603      	mov	r3, r0
 800623e:	0e9b      	lsrs	r3, r3, #26
 8006240:	f003 021f 	and.w	r2, r3, #31
 8006244:	e010      	b.n	8006268 <HAL_ADC_ConfigChannel+0x1a8>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2101      	movs	r1, #1
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff fb59 	bl	8005904 <LL_ADC_GetOffsetChannel>
 8006252:	4603      	mov	r3, r0
 8006254:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006258:	fa93 f3a3 	rbit	r3, r3
 800625c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800625e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006260:	fab3 f383 	clz	r3, r3
 8006264:	b2db      	uxtb	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <HAL_ADC_ConfigChannel+0x1c0>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	0e9b      	lsrs	r3, r3, #26
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	e00a      	b.n	8006296 <HAL_ADC_ConfigChannel+0x1d6>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006288:	fa93 f3a3 	rbit	r3, r3
 800628c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800628e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006290:	fab3 f383 	clz	r3, r3
 8006294:	b2db      	uxtb	r3, r3
 8006296:	429a      	cmp	r2, r3
 8006298:	d106      	bne.n	80062a8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2200      	movs	r2, #0
 80062a0:	2101      	movs	r1, #1
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff fb42 	bl	800592c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2102      	movs	r1, #2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff fb28 	bl	8005904 <LL_ADC_GetOffsetChannel>
 80062b4:	4603      	mov	r3, r0
 80062b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <HAL_ADC_ConfigChannel+0x214>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2102      	movs	r1, #2
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fb1d 	bl	8005904 <LL_ADC_GetOffsetChannel>
 80062ca:	4603      	mov	r3, r0
 80062cc:	0e9b      	lsrs	r3, r3, #26
 80062ce:	f003 021f 	and.w	r2, r3, #31
 80062d2:	e010      	b.n	80062f6 <HAL_ADC_ConfigChannel+0x236>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2102      	movs	r1, #2
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff fb12 	bl	8005904 <LL_ADC_GetOffsetChannel>
 80062e0:	4603      	mov	r3, r0
 80062e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062e6:	fa93 f3a3 	rbit	r3, r3
 80062ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80062ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062ee:	fab3 f383 	clz	r3, r3
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	461a      	mov	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d105      	bne.n	800630e <HAL_ADC_ConfigChannel+0x24e>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	0e9b      	lsrs	r3, r3, #26
 8006308:	f003 031f 	and.w	r3, r3, #31
 800630c:	e00a      	b.n	8006324 <HAL_ADC_ConfigChannel+0x264>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006316:	fa93 f3a3 	rbit	r3, r3
 800631a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800631c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800631e:	fab3 f383 	clz	r3, r3
 8006322:	b2db      	uxtb	r3, r3
 8006324:	429a      	cmp	r2, r3
 8006326:	d106      	bne.n	8006336 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2200      	movs	r2, #0
 800632e:	2102      	movs	r1, #2
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff fafb 	bl	800592c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2103      	movs	r1, #3
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fae1 	bl	8005904 <LL_ADC_GetOffsetChannel>
 8006342:	4603      	mov	r3, r0
 8006344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10a      	bne.n	8006362 <HAL_ADC_ConfigChannel+0x2a2>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2103      	movs	r1, #3
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff fad6 	bl	8005904 <LL_ADC_GetOffsetChannel>
 8006358:	4603      	mov	r3, r0
 800635a:	0e9b      	lsrs	r3, r3, #26
 800635c:	f003 021f 	and.w	r2, r3, #31
 8006360:	e010      	b.n	8006384 <HAL_ADC_ConfigChannel+0x2c4>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2103      	movs	r1, #3
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff facb 	bl	8005904 <LL_ADC_GetOffsetChannel>
 800636e:	4603      	mov	r3, r0
 8006370:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006374:	fa93 f3a3 	rbit	r3, r3
 8006378:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800637a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637c:	fab3 f383 	clz	r3, r3
 8006380:	b2db      	uxtb	r3, r3
 8006382:	461a      	mov	r2, r3
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800638c:	2b00      	cmp	r3, #0
 800638e:	d105      	bne.n	800639c <HAL_ADC_ConfigChannel+0x2dc>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	0e9b      	lsrs	r3, r3, #26
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	e00a      	b.n	80063b2 <HAL_ADC_ConfigChannel+0x2f2>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a4:	fa93 f3a3 	rbit	r3, r3
 80063a8:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80063aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ac:	fab3 f383 	clz	r3, r3
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d106      	bne.n	80063c4 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2200      	movs	r2, #0
 80063bc:	2103      	movs	r1, #3
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff fab4 	bl	800592c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff fbc5 	bl	8005b58 <LL_ADC_IsEnabled>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f040 819f 	bne.w	8006714 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6818      	ldr	r0, [r3, #0]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	6819      	ldr	r1, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	461a      	mov	r2, r3
 80063e4:	f7ff fb1e 	bl	8005a24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	4aab      	ldr	r2, [pc, #684]	; (800669c <HAL_ADC_ConfigChannel+0x5dc>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	f040 80fd 	bne.w	80065ee <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10b      	bne.n	800641c <HAL_ADC_ConfigChannel+0x35c>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	0e9b      	lsrs	r3, r3, #26
 800640a:	3301      	adds	r3, #1
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2b09      	cmp	r3, #9
 8006412:	bf94      	ite	ls
 8006414:	2301      	movls	r3, #1
 8006416:	2300      	movhi	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	e012      	b.n	8006442 <HAL_ADC_ConfigChannel+0x382>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006424:	fa93 f3a3 	rbit	r3, r3
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800642a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642c:	fab3 f383 	clz	r3, r3
 8006430:	b2db      	uxtb	r3, r3
 8006432:	3301      	adds	r3, #1
 8006434:	f003 031f 	and.w	r3, r3, #31
 8006438:	2b09      	cmp	r3, #9
 800643a:	bf94      	ite	ls
 800643c:	2301      	movls	r3, #1
 800643e:	2300      	movhi	r3, #0
 8006440:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006442:	2b00      	cmp	r3, #0
 8006444:	d064      	beq.n	8006510 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800644e:	2b00      	cmp	r3, #0
 8006450:	d107      	bne.n	8006462 <HAL_ADC_ConfigChannel+0x3a2>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	0e9b      	lsrs	r3, r3, #26
 8006458:	3301      	adds	r3, #1
 800645a:	069b      	lsls	r3, r3, #26
 800645c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006460:	e00e      	b.n	8006480 <HAL_ADC_ConfigChannel+0x3c0>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	fa93 f3a3 	rbit	r3, r3
 800646e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006472:	fab3 f383 	clz	r3, r3
 8006476:	b2db      	uxtb	r3, r3
 8006478:	3301      	adds	r3, #1
 800647a:	069b      	lsls	r3, r3, #26
 800647c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006488:	2b00      	cmp	r3, #0
 800648a:	d109      	bne.n	80064a0 <HAL_ADC_ConfigChannel+0x3e0>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	0e9b      	lsrs	r3, r3, #26
 8006492:	3301      	adds	r3, #1
 8006494:	f003 031f 	and.w	r3, r3, #31
 8006498:	2101      	movs	r1, #1
 800649a:	fa01 f303 	lsl.w	r3, r1, r3
 800649e:	e010      	b.n	80064c2 <HAL_ADC_ConfigChannel+0x402>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	fa93 f3a3 	rbit	r3, r3
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	fab3 f383 	clz	r3, r3
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	3301      	adds	r3, #1
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2101      	movs	r1, #1
 80064be:	fa01 f303 	lsl.w	r3, r1, r3
 80064c2:	ea42 0103 	orr.w	r1, r2, r3
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <HAL_ADC_ConfigChannel+0x428>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	0e9b      	lsrs	r3, r3, #26
 80064d8:	3301      	adds	r3, #1
 80064da:	f003 021f 	and.w	r2, r3, #31
 80064de:	4613      	mov	r3, r2
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	4413      	add	r3, r2
 80064e4:	051b      	lsls	r3, r3, #20
 80064e6:	e011      	b.n	800650c <HAL_ADC_ConfigChannel+0x44c>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	fa93 f3a3 	rbit	r3, r3
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	fab3 f383 	clz	r3, r3
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	3301      	adds	r3, #1
 8006500:	f003 021f 	and.w	r2, r3, #31
 8006504:	4613      	mov	r3, r2
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	4413      	add	r3, r2
 800650a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800650c:	430b      	orrs	r3, r1
 800650e:	e069      	b.n	80065e4 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006518:	2b00      	cmp	r3, #0
 800651a:	d107      	bne.n	800652c <HAL_ADC_ConfigChannel+0x46c>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	0e9b      	lsrs	r3, r3, #26
 8006522:	3301      	adds	r3, #1
 8006524:	069b      	lsls	r3, r3, #26
 8006526:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800652a:	e00e      	b.n	800654a <HAL_ADC_ConfigChannel+0x48a>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	fa93 f3a3 	rbit	r3, r3
 8006538:	61fb      	str	r3, [r7, #28]
  return result;
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	fab3 f383 	clz	r3, r3
 8006540:	b2db      	uxtb	r3, r3
 8006542:	3301      	adds	r3, #1
 8006544:	069b      	lsls	r3, r3, #26
 8006546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006552:	2b00      	cmp	r3, #0
 8006554:	d109      	bne.n	800656a <HAL_ADC_ConfigChannel+0x4aa>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	0e9b      	lsrs	r3, r3, #26
 800655c:	3301      	adds	r3, #1
 800655e:	f003 031f 	and.w	r3, r3, #31
 8006562:	2101      	movs	r1, #1
 8006564:	fa01 f303 	lsl.w	r3, r1, r3
 8006568:	e010      	b.n	800658c <HAL_ADC_ConfigChannel+0x4cc>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	fa93 f3a3 	rbit	r3, r3
 8006576:	617b      	str	r3, [r7, #20]
  return result;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	fab3 f383 	clz	r3, r3
 800657e:	b2db      	uxtb	r3, r3
 8006580:	3301      	adds	r3, #1
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2101      	movs	r1, #1
 8006588:	fa01 f303 	lsl.w	r3, r1, r3
 800658c:	ea42 0103 	orr.w	r1, r2, r3
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10d      	bne.n	80065b8 <HAL_ADC_ConfigChannel+0x4f8>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	0e9b      	lsrs	r3, r3, #26
 80065a2:	3301      	adds	r3, #1
 80065a4:	f003 021f 	and.w	r2, r3, #31
 80065a8:	4613      	mov	r3, r2
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	4413      	add	r3, r2
 80065ae:	3b1e      	subs	r3, #30
 80065b0:	051b      	lsls	r3, r3, #20
 80065b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065b6:	e014      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x522>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	fa93 f3a3 	rbit	r3, r3
 80065c4:	60fb      	str	r3, [r7, #12]
  return result;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	fab3 f383 	clz	r3, r3
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	3301      	adds	r3, #1
 80065d0:	f003 021f 	and.w	r2, r3, #31
 80065d4:	4613      	mov	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4413      	add	r3, r2
 80065da:	3b1e      	subs	r3, #30
 80065dc:	051b      	lsls	r3, r3, #20
 80065de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065e2:	430b      	orrs	r3, r1
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	6892      	ldr	r2, [r2, #8]
 80065e8:	4619      	mov	r1, r3
 80065ea:	f7ff f9f3 	bl	80059d4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b2b      	ldr	r3, [pc, #172]	; (80066a0 <HAL_ADC_ConfigChannel+0x5e0>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 808c 	beq.w	8006714 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065fc:	4829      	ldr	r0, [pc, #164]	; (80066a4 <HAL_ADC_ConfigChannel+0x5e4>)
 80065fe:	f7ff f951 	bl	80058a4 <LL_ADC_GetCommonPathInternalCh>
 8006602:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006606:	4828      	ldr	r0, [pc, #160]	; (80066a8 <HAL_ADC_ConfigChannel+0x5e8>)
 8006608:	f7ff faa6 	bl	8005b58 <LL_ADC_IsEnabled>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d16d      	bne.n	80066ee <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a25      	ldr	r2, [pc, #148]	; (80066ac <HAL_ADC_ConfigChannel+0x5ec>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d126      	bne.n	800666a <HAL_ADC_ConfigChannel+0x5aa>
 800661c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d120      	bne.n	800666a <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <HAL_ADC_ConfigChannel+0x5e8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d170      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006636:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800663a:	4619      	mov	r1, r3
 800663c:	4819      	ldr	r0, [pc, #100]	; (80066a4 <HAL_ADC_ConfigChannel+0x5e4>)
 800663e:	f7ff f91e 	bl	800587e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006642:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <HAL_ADC_ConfigChannel+0x5f0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	099b      	lsrs	r3, r3, #6
 8006648:	4a1a      	ldr	r2, [pc, #104]	; (80066b4 <HAL_ADC_ConfigChannel+0x5f4>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	099a      	lsrs	r2, r3, #6
 8006650:	4613      	mov	r3, r2
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800665a:	e002      	b.n	8006662 <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	3b01      	subs	r3, #1
 8006660:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f9      	bne.n	800665c <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006668:	e054      	b.n	8006714 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a12      	ldr	r2, [pc, #72]	; (80066b8 <HAL_ADC_ConfigChannel+0x5f8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d123      	bne.n	80066bc <HAL_ADC_ConfigChannel+0x5fc>
 8006674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d11d      	bne.n	80066bc <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <HAL_ADC_ConfigChannel+0x5e8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d144      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800668a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800668e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006692:	4619      	mov	r1, r3
 8006694:	4803      	ldr	r0, [pc, #12]	; (80066a4 <HAL_ADC_ConfigChannel+0x5e4>)
 8006696:	f7ff f8f2 	bl	800587e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800669a:	e03b      	b.n	8006714 <HAL_ADC_ConfigChannel+0x654>
 800669c:	407f0000 	.word	0x407f0000
 80066a0:	80080000 	.word	0x80080000
 80066a4:	50040300 	.word	0x50040300
 80066a8:	50040000 	.word	0x50040000
 80066ac:	c7520000 	.word	0xc7520000
 80066b0:	20000078 	.word	0x20000078
 80066b4:	053e2d63 	.word	0x053e2d63
 80066b8:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a19      	ldr	r2, [pc, #100]	; (8006728 <HAL_ADC_ConfigChannel+0x668>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d126      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x654>
 80066c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d120      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a15      	ldr	r2, [pc, #84]	; (800672c <HAL_ADC_ConfigChannel+0x66c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d11b      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80066dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066e4:	4619      	mov	r1, r3
 80066e6:	4812      	ldr	r0, [pc, #72]	; (8006730 <HAL_ADC_ConfigChannel+0x670>)
 80066e8:	f7ff f8c9 	bl	800587e <LL_ADC_SetCommonPathInternalCh>
 80066ec:	e012      	b.n	8006714 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f2:	f043 0220 	orr.w	r2, r3, #32
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006700:	e008      	b.n	8006714 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	f043 0220 	orr.w	r2, r3, #32
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800671c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8006720:	4618      	mov	r0, r3
 8006722:	3798      	adds	r7, #152	; 0x98
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	80000001 	.word	0x80000001
 800672c:	50040000 	.word	0x50040000
 8006730:	50040300 	.word	0x50040300

08006734 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fa52 	bl	8005bf4 <LL_ADC_REG_IsConversionOngoing>
 8006750:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff fa73 	bl	8005c42 <LL_ADC_INJ_IsConversionOngoing>
 800675c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d103      	bne.n	800676c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 8090 	beq.w	800688c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d02a      	beq.n	80067d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	7e5b      	ldrb	r3, [r3, #25]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d126      	bne.n	80067d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7e1b      	ldrb	r3, [r3, #24]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d122      	bne.n	80067d0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800678a:	2301      	movs	r3, #1
 800678c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800678e:	e014      	b.n	80067ba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4a41      	ldr	r2, [pc, #260]	; (8006898 <ADC_ConversionStop+0x164>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d90d      	bls.n	80067b4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	f043 0210 	orr.w	r2, r3, #16
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a8:	f043 0201 	orr.w	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e06c      	b.n	800688e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	3301      	adds	r3, #1
 80067b8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	d1e3      	bne.n	8006790 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2240      	movs	r2, #64	; 0x40
 80067ce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d014      	beq.n	8006800 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff fa0a 	bl	8005bf4 <LL_ADC_REG_IsConversionOngoing>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00c      	beq.n	8006800 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff f9c7 	bl	8005b7e <LL_ADC_IsDisableOngoing>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d104      	bne.n	8006800 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff f9e6 	bl	8005bcc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d014      	beq.n	8006830 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff fa19 	bl	8005c42 <LL_ADC_INJ_IsConversionOngoing>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00c      	beq.n	8006830 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff f9af 	bl	8005b7e <LL_ADC_IsDisableOngoing>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff f9f5 	bl	8005c1a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	2b02      	cmp	r3, #2
 8006834:	d004      	beq.n	8006840 <ADC_ConversionStop+0x10c>
 8006836:	2b03      	cmp	r3, #3
 8006838:	d105      	bne.n	8006846 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800683a:	230c      	movs	r3, #12
 800683c:	617b      	str	r3, [r7, #20]
        break;
 800683e:	e005      	b.n	800684c <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006840:	2308      	movs	r3, #8
 8006842:	617b      	str	r3, [r7, #20]
        break;
 8006844:	e002      	b.n	800684c <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006846:	2304      	movs	r3, #4
 8006848:	617b      	str	r3, [r7, #20]
        break;
 800684a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800684c:	f7fe ffd2 	bl	80057f4 <HAL_GetTick>
 8006850:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006852:	e014      	b.n	800687e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006854:	f7fe ffce 	bl	80057f4 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b05      	cmp	r3, #5
 8006860:	d90d      	bls.n	800687e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	f043 0210 	orr.w	r2, r3, #16
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006872:	f043 0201 	orr.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e007      	b.n	800688e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	4013      	ands	r3, r2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e3      	bne.n	8006854 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3720      	adds	r7, #32
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	a33fffff 	.word	0xa33fffff

0800689c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff f955 	bl	8005b58 <LL_ADC_IsEnabled>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d146      	bne.n	8006942 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	4b24      	ldr	r3, [pc, #144]	; (800694c <ADC_Enable+0xb0>)
 80068bc:	4013      	ands	r3, r2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00d      	beq.n	80068de <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c6:	f043 0210 	orr.w	r2, r3, #16
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d2:	f043 0201 	orr.w	r2, r3, #1
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e032      	b.n	8006944 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff f910 	bl	8005b08 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80068e8:	f7fe ff84 	bl	80057f4 <HAL_GetTick>
 80068ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068ee:	e021      	b.n	8006934 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff f92f 	bl	8005b58 <LL_ADC_IsEnabled>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d104      	bne.n	800690a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff f8ff 	bl	8005b08 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800690a:	f7fe ff73 	bl	80057f4 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d90d      	bls.n	8006934 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691c:	f043 0210 	orr.w	r2, r3, #16
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006928:	f043 0201 	orr.w	r2, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e007      	b.n	8006944 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b01      	cmp	r3, #1
 8006940:	d1d6      	bne.n	80068f0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	8000003f 	.word	0x8000003f

08006950 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff f90e 	bl	8005b7e <LL_ADC_IsDisableOngoing>
 8006962:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f7ff f8f5 	bl	8005b58 <LL_ADC_IsEnabled>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d040      	beq.n	80069f6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d13d      	bne.n	80069f6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 030d 	and.w	r3, r3, #13
 8006984:	2b01      	cmp	r3, #1
 8006986:	d10c      	bne.n	80069a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff f8cf 	bl	8005b30 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2203      	movs	r2, #3
 8006998:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800699a:	f7fe ff2b 	bl	80057f4 <HAL_GetTick>
 800699e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069a0:	e022      	b.n	80069e8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	f043 0210 	orr.w	r2, r3, #16
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b2:	f043 0201 	orr.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e01c      	b.n	80069f8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80069be:	f7fe ff19 	bl	80057f4 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d90d      	bls.n	80069e8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d0:	f043 0210 	orr.w	r2, r3, #16
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069dc:	f043 0201 	orr.w	r2, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e007      	b.n	80069f8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e3      	bne.n	80069be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d14b      	bne.n	8006ab2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d021      	beq.n	8006a78 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe ff8f 	bl	800595c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d032      	beq.n	8006aaa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d12b      	bne.n	8006aaa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d11f      	bne.n	8006aaa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6e:	f043 0201 	orr.w	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	655a      	str	r2, [r3, #84]	; 0x54
 8006a76:	e018      	b.n	8006aaa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d111      	bne.n	8006aaa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d105      	bne.n	8006aaa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa2:	f043 0201 	orr.w	r2, r3, #1
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f7fa fe20 	bl	80016f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006ab0:	e00e      	b.n	8006ad0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f7fa fe02 	bl	80016c8 <HAL_ADC_ErrorCallback>
}
 8006ac4:	e004      	b.n	8006ad0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7fa fe1a 	bl	8001720 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b12:	f043 0204 	orr.w	r2, r3, #4
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7fa fdd4 	bl	80016c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <LL_EXTI_EnableIT_0_31>:
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006b30:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <LL_EXTI_EnableIT_0_31+0x24>)
 8006b32:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006b36:	4905      	ldr	r1, [pc, #20]	; (8006b4c <LL_EXTI_EnableIT_0_31+0x24>)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	58000800 	.word	0x58000800

08006b50 <LL_EXTI_DisableIT_0_31>:
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006b58:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <LL_EXTI_DisableIT_0_31+0x28>)
 8006b5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	43db      	mvns	r3, r3
 8006b62:	4905      	ldr	r1, [pc, #20]	; (8006b78 <LL_EXTI_DisableIT_0_31+0x28>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	58000800 	.word	0x58000800

08006b7c <LL_EXTI_EnableEvent_0_31>:
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <LL_EXTI_EnableEvent_0_31+0x24>)
 8006b86:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006b8a:	4905      	ldr	r1, [pc, #20]	; (8006ba0 <LL_EXTI_EnableEvent_0_31+0x24>)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	58000800 	.word	0x58000800

08006ba4 <LL_EXTI_DisableEvent_0_31>:
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006bac:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <LL_EXTI_DisableEvent_0_31+0x28>)
 8006bae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	4905      	ldr	r1, [pc, #20]	; (8006bcc <LL_EXTI_DisableEvent_0_31+0x28>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	58000800 	.word	0x58000800

08006bd0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006bd8:	4b05      	ldr	r3, [pc, #20]	; (8006bf0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	4904      	ldr	r1, [pc, #16]	; (8006bf0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	600b      	str	r3, [r1, #0]
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	58000800 	.word	0x58000800

08006bf4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006bfc:	4b06      	ldr	r3, [pc, #24]	; (8006c18 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	43db      	mvns	r3, r3
 8006c04:	4904      	ldr	r1, [pc, #16]	; (8006c18 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	600b      	str	r3, [r1, #0]

}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	58000800 	.word	0x58000800

08006c1c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	4904      	ldr	r1, [pc, #16]	; (8006c3c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	604b      	str	r3, [r1, #4]
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	58000800 	.word	0x58000800

08006c40 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006c48:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	4904      	ldr	r1, [pc, #16]	; (8006c64 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006c52:	4013      	ands	r3, r2
 8006c54:	604b      	str	r3, [r1, #4]
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	58000800 	.word	0x58000800

08006c68 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8006c70:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4013      	ands	r3, r2
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d101      	bne.n	8006c82 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	58000800 	.word	0x58000800

08006c94 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006c9c:	4a04      	ldr	r2, [pc, #16]	; (8006cb0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60d3      	str	r3, [r2, #12]
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	58000800 	.word	0x58000800

08006cb4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d102      	bne.n	8006cd0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	e0c4      	b.n	8006e5a <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cde:	d102      	bne.n	8006ce6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	e0b9      	b.n	8006e5a <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d109      	bne.n	8006d06 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fa fd6d 	bl	80017e0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d10:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4b49      	ldr	r3, [pc, #292]	; (8006e64 <HAL_COMP_Init+0x1b0>)
 8006d3e:	4013      	ands	r3, r2
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	6979      	ldr	r1, [r7, #20]
 8006d46:	430b      	orrs	r3, r1
 8006d48:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d52:	d106      	bne.n	8006d62 <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006d54:	4b44      	ldr	r3, [pc, #272]	; (8006e68 <HAL_COMP_Init+0x1b4>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a43      	ldr	r2, [pc, #268]	; (8006e68 <HAL_COMP_Init+0x1b4>)
 8006d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	e005      	b.n	8006d6e <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006d62:	4b41      	ldr	r3, [pc, #260]	; (8006e68 <HAL_COMP_Init+0x1b4>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a40      	ldr	r2, [pc, #256]	; (8006e68 <HAL_COMP_Init+0x1b4>)
 8006d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d6c:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d015      	beq.n	8006da8 <HAL_COMP_Init+0xf4>
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d112      	bne.n	8006da8 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006d82:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <HAL_COMP_Init+0x1b8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	099b      	lsrs	r3, r3, #6
 8006d88:	4a39      	ldr	r2, [pc, #228]	; (8006e70 <HAL_COMP_Init+0x1bc>)
 8006d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8e:	099a      	lsrs	r2, r3, #6
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006d9a:	e002      	b.n	8006da2 <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1f9      	bne.n	8006d9c <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a31      	ldr	r2, [pc, #196]	; (8006e74 <HAL_COMP_Init+0x1c0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d102      	bne.n	8006db8 <HAL_COMP_Init+0x104>
 8006db2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006db6:	e001      	b.n	8006dbc <HAL_COMP_Init+0x108>
 8006db8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006dbc:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d037      	beq.n	8006e3a <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006dd6:	6938      	ldr	r0, [r7, #16]
 8006dd8:	f7ff fefa 	bl	8006bd0 <LL_EXTI_EnableRisingTrig_0_31>
 8006ddc:	e002      	b.n	8006de4 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006dde:	6938      	ldr	r0, [r7, #16]
 8006de0:	f7ff ff08 	bl	8006bf4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006df0:	6938      	ldr	r0, [r7, #16]
 8006df2:	f7ff ff13 	bl	8006c1c <LL_EXTI_EnableFallingTrig_0_31>
 8006df6:	e002      	b.n	8006dfe <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006df8:	6938      	ldr	r0, [r7, #16]
 8006dfa:	f7ff ff21 	bl	8006c40 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8006dfe:	6938      	ldr	r0, [r7, #16]
 8006e00:	f7ff ff48 	bl	8006c94 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8006e10:	6938      	ldr	r0, [r7, #16]
 8006e12:	f7ff feb3 	bl	8006b7c <LL_EXTI_EnableEvent_0_31>
 8006e16:	e002      	b.n	8006e1e <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006e18:	6938      	ldr	r0, [r7, #16]
 8006e1a:	f7ff fec3 	bl	8006ba4 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8006e2a:	6938      	ldr	r0, [r7, #16]
 8006e2c:	f7ff fe7c 	bl	8006b28 <LL_EXTI_EnableIT_0_31>
 8006e30:	e009      	b.n	8006e46 <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006e32:	6938      	ldr	r0, [r7, #16]
 8006e34:	f7ff fe8c 	bl	8006b50 <LL_EXTI_DisableIT_0_31>
 8006e38:	e005      	b.n	8006e46 <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8006e3a:	6938      	ldr	r0, [r7, #16]
 8006e3c:	f7ff feb2 	bl	8006ba4 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8006e40:	6938      	ldr	r0, [r7, #16]
 8006e42:	f7ff fe85 	bl	8006b50 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006e5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3720      	adds	r7, #32
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	f9207c03 	.word	0xf9207c03
 8006e68:	40010204 	.word	0x40010204
 8006e6c:	20000078 	.word	0x20000078
 8006e70:	053e2d63 	.word	0x053e2d63
 8006e74:	40010200 	.word	0x40010200

08006e78 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d102      	bne.n	8006e94 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	73fb      	strb	r3, [r7, #15]
 8006e92:	e02f      	b.n	8006ef4 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ea2:	d102      	bne.n	8006eaa <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	73fb      	strb	r3, [r7, #15]
 8006ea8:	e024      	b.n	8006ef4 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d11c      	bne.n	8006ef0 <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0201 	orr.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006ece:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <HAL_COMP_Start+0x8c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	099b      	lsrs	r3, r3, #6
 8006ed4:	4a0c      	ldr	r2, [pc, #48]	; (8006f08 <HAL_COMP_Start+0x90>)
 8006ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eda:	099b      	lsrs	r3, r3, #6
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006ee0:	e002      	b.n	8006ee8 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f9      	bne.n	8006ee2 <HAL_COMP_Start+0x6a>
 8006eee:	e001      	b.n	8006ef4 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000078 	.word	0x20000078
 8006f08:	053e2d63 	.word	0x053e2d63

08006f0c <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	73fb      	strb	r3, [r7, #15]
 8006f22:	e01f      	b.n	8006f64 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f32:	d102      	bne.n	8006f3a <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	73fb      	strb	r3, [r7, #15]
 8006f38:	e014      	b.n	8006f64 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00c      	beq.n	8006f60 <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0201 	bic.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8006f5e:	e001      	b.n	8006f64 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
	...

08006f74 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a11      	ldr	r2, [pc, #68]	; (8006fc8 <HAL_COMP_IRQHandler+0x54>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d102      	bne.n	8006f8c <HAL_COMP_IRQHandler+0x18>
 8006f86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f8a:	e001      	b.n	8006f90 <HAL_COMP_IRQHandler+0x1c>
 8006f8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f90:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff fe68 	bl	8006c68 <LL_EXTI_IsActiveFlag_0_31>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d010      	beq.n	8006fc0 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8006f9e:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <HAL_COMP_IRQHandler+0x58>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d004      	beq.n	8006fb4 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8006faa:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8006fae:	f7ff fe71 	bl	8006c94 <LL_EXTI_ClearFlag_0_31>
 8006fb2:	e002      	b.n	8006fba <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f7ff fe6d 	bl	8006c94 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fd f9c4 	bl	8004348 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8006fc0:	bf00      	nop
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40010200 	.word	0x40010200
 8006fcc:	40010204 	.word	0x40010204

08006fd0 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	0f9b      	lsrs	r3, r3, #30
 8006fe0:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007000:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <__NVIC_SetPriorityGrouping+0x44>)
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800700c:	4013      	ands	r3, r2
 800700e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800701c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007022:	4a04      	ldr	r2, [pc, #16]	; (8007034 <__NVIC_SetPriorityGrouping+0x44>)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	60d3      	str	r3, [r2, #12]
}
 8007028:	bf00      	nop
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	e000ed00 	.word	0xe000ed00

08007038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800703c:	4b04      	ldr	r3, [pc, #16]	; (8007050 <__NVIC_GetPriorityGrouping+0x18>)
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	0a1b      	lsrs	r3, r3, #8
 8007042:	f003 0307 	and.w	r3, r3, #7
}
 8007046:	4618      	mov	r0, r3
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	e000ed00 	.word	0xe000ed00

08007054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800705e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007062:	2b00      	cmp	r3, #0
 8007064:	db0b      	blt.n	800707e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007066:	79fb      	ldrb	r3, [r7, #7]
 8007068:	f003 021f 	and.w	r2, r3, #31
 800706c:	4907      	ldr	r1, [pc, #28]	; (800708c <__NVIC_EnableIRQ+0x38>)
 800706e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	2001      	movs	r0, #1
 8007076:	fa00 f202 	lsl.w	r2, r0, r2
 800707a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	e000e100 	.word	0xe000e100

08007090 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800709a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	db10      	blt.n	80070c4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070a2:	79fb      	ldrb	r3, [r7, #7]
 80070a4:	f003 021f 	and.w	r2, r3, #31
 80070a8:	4909      	ldr	r1, [pc, #36]	; (80070d0 <__NVIC_DisableIRQ+0x40>)
 80070aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	2001      	movs	r0, #1
 80070b2:	fa00 f202 	lsl.w	r2, r0, r2
 80070b6:	3320      	adds	r3, #32
 80070b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80070bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80070c0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	e000e100 	.word	0xe000e100

080070d4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	db0c      	blt.n	8007100 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070e6:	79fb      	ldrb	r3, [r7, #7]
 80070e8:	f003 021f 	and.w	r2, r3, #31
 80070ec:	4907      	ldr	r1, [pc, #28]	; (800710c <__NVIC_SetPendingIRQ+0x38>)
 80070ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	2001      	movs	r0, #1
 80070f6:	fa00 f202 	lsl.w	r2, r0, r2
 80070fa:	3340      	adds	r3, #64	; 0x40
 80070fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	e000e100 	.word	0xe000e100

08007110 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800711a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800711e:	2b00      	cmp	r3, #0
 8007120:	db0c      	blt.n	800713c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	f003 021f 	and.w	r2, r3, #31
 8007128:	4907      	ldr	r1, [pc, #28]	; (8007148 <__NVIC_ClearPendingIRQ+0x38>)
 800712a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	2001      	movs	r0, #1
 8007132:	fa00 f202 	lsl.w	r2, r0, r2
 8007136:	3360      	adds	r3, #96	; 0x60
 8007138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	e000e100 	.word	0xe000e100

0800714c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	6039      	str	r1, [r7, #0]
 8007156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715c:	2b00      	cmp	r3, #0
 800715e:	db0a      	blt.n	8007176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	b2da      	uxtb	r2, r3
 8007164:	490c      	ldr	r1, [pc, #48]	; (8007198 <__NVIC_SetPriority+0x4c>)
 8007166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800716a:	0112      	lsls	r2, r2, #4
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	440b      	add	r3, r1
 8007170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007174:	e00a      	b.n	800718c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	b2da      	uxtb	r2, r3
 800717a:	4908      	ldr	r1, [pc, #32]	; (800719c <__NVIC_SetPriority+0x50>)
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	3b04      	subs	r3, #4
 8007184:	0112      	lsls	r2, r2, #4
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	440b      	add	r3, r1
 800718a:	761a      	strb	r2, [r3, #24]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	e000e100 	.word	0xe000e100
 800719c:	e000ed00 	.word	0xe000ed00

080071a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b089      	sub	sp, #36	; 0x24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	f1c3 0307 	rsb	r3, r3, #7
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	bf28      	it	cs
 80071be:	2304      	movcs	r3, #4
 80071c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	3304      	adds	r3, #4
 80071c6:	2b06      	cmp	r3, #6
 80071c8:	d902      	bls.n	80071d0 <NVIC_EncodePriority+0x30>
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3b03      	subs	r3, #3
 80071ce:	e000      	b.n	80071d2 <NVIC_EncodePriority+0x32>
 80071d0:	2300      	movs	r3, #0
 80071d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	fa02 f303 	lsl.w	r3, r2, r3
 80071de:	43da      	mvns	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	401a      	ands	r2, r3
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071e8:	f04f 31ff 	mov.w	r1, #4294967295
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	fa01 f303 	lsl.w	r3, r1, r3
 80071f2:	43d9      	mvns	r1, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071f8:	4313      	orrs	r3, r2
         );
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3724      	adds	r7, #36	; 0x24
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800720c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <__NVIC_SystemReset+0x20>)
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007218:	4903      	ldr	r1, [pc, #12]	; (8007228 <__NVIC_SystemReset+0x20>)
 800721a:	4b04      	ldr	r3, [pc, #16]	; (800722c <__NVIC_SystemReset+0x24>)
 800721c:	4313      	orrs	r3, r2
 800721e:	60cb      	str	r3, [r1, #12]
 8007220:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007224:	bf00      	nop
 8007226:	e7fd      	b.n	8007224 <__NVIC_SystemReset+0x1c>
 8007228:	e000ed00 	.word	0xe000ed00
 800722c:	05fa0004 	.word	0x05fa0004

08007230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff fed9 	bl	8006ff0 <__NVIC_SetPriorityGrouping>
}
 800723e:	bf00      	nop
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b086      	sub	sp, #24
 800724a:	af00      	add	r7, sp, #0
 800724c:	4603      	mov	r3, r0
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007254:	f7ff fef0 	bl	8007038 <__NVIC_GetPriorityGrouping>
 8007258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	6978      	ldr	r0, [r7, #20]
 8007260:	f7ff ff9e 	bl	80071a0 <NVIC_EncodePriority>
 8007264:	4602      	mov	r2, r0
 8007266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800726a:	4611      	mov	r1, r2
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff ff6d 	bl	800714c <__NVIC_SetPriority>
}
 8007272:	bf00      	nop
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
 8007280:	4603      	mov	r3, r0
 8007282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff fee3 	bl	8007054 <__NVIC_EnableIRQ>
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	4603      	mov	r3, r0
 800729e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80072a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff fef3 	bl	8007090 <__NVIC_DisableIRQ>
}
 80072aa:	bf00      	nop
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80072b6:	f7ff ffa7 	bl	8007208 <__NVIC_SystemReset>

080072ba <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b082      	sub	sp, #8
 80072be:	af00      	add	r7, sp, #0
 80072c0:	4603      	mov	r3, r0
 80072c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80072c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff ff03 	bl	80070d4 <__NVIC_SetPendingIRQ>
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	4603      	mov	r3, r0
 80072de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80072e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff ff13 	bl	8007110 <__NVIC_ClearPendingIRQ>
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e08d      	b.n	8007422 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	4b47      	ldr	r3, [pc, #284]	; (800742c <HAL_DMA_Init+0x138>)
 800730e:	429a      	cmp	r2, r3
 8007310:	d80f      	bhi.n	8007332 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	4b45      	ldr	r3, [pc, #276]	; (8007430 <HAL_DMA_Init+0x13c>)
 800731a:	4413      	add	r3, r2
 800731c:	4a45      	ldr	r2, [pc, #276]	; (8007434 <HAL_DMA_Init+0x140>)
 800731e:	fba2 2303 	umull	r2, r3, r2, r3
 8007322:	091b      	lsrs	r3, r3, #4
 8007324:	009a      	lsls	r2, r3, #2
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a42      	ldr	r2, [pc, #264]	; (8007438 <HAL_DMA_Init+0x144>)
 800732e:	641a      	str	r2, [r3, #64]	; 0x40
 8007330:	e00e      	b.n	8007350 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	4b40      	ldr	r3, [pc, #256]	; (800743c <HAL_DMA_Init+0x148>)
 800733a:	4413      	add	r3, r2
 800733c:	4a3d      	ldr	r2, [pc, #244]	; (8007434 <HAL_DMA_Init+0x140>)
 800733e:	fba2 2303 	umull	r2, r3, r2, r3
 8007342:	091b      	lsrs	r3, r3, #4
 8007344:	009a      	lsls	r2, r3, #2
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a3c      	ldr	r2, [pc, #240]	; (8007440 <HAL_DMA_Init+0x14c>)
 800734e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800738c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fa74 	bl	8007890 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073b0:	d102      	bne.n	80073b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80073cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d010      	beq.n	80073f8 <HAL_DMA_Init+0x104>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d80c      	bhi.n	80073f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa94 	bl	800790c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80073f4:	605a      	str	r2, [r3, #4]
 80073f6:	e008      	b.n	800740a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	40020407 	.word	0x40020407
 8007430:	bffdfff8 	.word	0xbffdfff8
 8007434:	cccccccd 	.word	0xcccccccd
 8007438:	40020000 	.word	0x40020000
 800743c:	bffdfbf8 	.word	0xbffdfbf8
 8007440:	40020400 	.word	0x40020400

08007444 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800745c:	2b01      	cmp	r3, #1
 800745e:	d101      	bne.n	8007464 <HAL_DMA_Start_IT+0x20>
 8007460:	2302      	movs	r3, #2
 8007462:	e066      	b.n	8007532 <HAL_DMA_Start_IT+0xee>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d155      	bne.n	8007524 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0201 	bic.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 f9b9 	bl	8007814 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d008      	beq.n	80074bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f042 020e 	orr.w	r2, r2, #14
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	e00f      	b.n	80074dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0204 	bic.w	r2, r2, #4
 80074ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 020a 	orr.w	r2, r2, #10
 80074da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d007      	beq.n	80074fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007510:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0201 	orr.w	r2, r2, #1
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	e005      	b.n	8007530 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800752c:	2302      	movs	r3, #2
 800752e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e04f      	b.n	80075ec <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d008      	beq.n	800756a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2204      	movs	r2, #4
 800755c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e040      	b.n	80075ec <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 020e 	bic.w	r2, r2, #14
 8007578:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007584:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007588:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0201 	bic.w	r2, r2, #1
 8007598:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759e:	f003 021c 	and.w	r2, r3, #28
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	2101      	movs	r1, #1
 80075a8:	fa01 f202 	lsl.w	r2, r1, r2
 80075ac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00c      	beq.n	80075da <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80075d8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b02      	cmp	r3, #2
 800760e:	d005      	beq.n	800761c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2204      	movs	r2, #4
 8007614:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	73fb      	strb	r3, [r7, #15]
 800761a:	e047      	b.n	80076ac <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 020e 	bic.w	r2, r2, #14
 800762a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0201 	bic.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007646:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800764a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007650:	f003 021c 	and.w	r2, r3, #28
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	2101      	movs	r1, #1
 800765a:	fa01 f202 	lsl.w	r2, r1, r2
 800765e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007668:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00c      	beq.n	800768c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007680:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800768a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
    }
  }
  return status;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d2:	f003 031c 	and.w	r3, r3, #28
 80076d6:	2204      	movs	r2, #4
 80076d8:	409a      	lsls	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4013      	ands	r3, r2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d026      	beq.n	8007730 <HAL_DMA_IRQHandler+0x7a>
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f003 0304 	and.w	r3, r3, #4
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d021      	beq.n	8007730 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d107      	bne.n	800770a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0204 	bic.w	r2, r2, #4
 8007708:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770e:	f003 021c 	and.w	r2, r3, #28
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	2104      	movs	r1, #4
 8007718:	fa01 f202 	lsl.w	r2, r1, r2
 800771c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007722:	2b00      	cmp	r3, #0
 8007724:	d071      	beq.n	800780a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800772e:	e06c      	b.n	800780a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007734:	f003 031c 	and.w	r3, r3, #28
 8007738:	2202      	movs	r2, #2
 800773a:	409a      	lsls	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4013      	ands	r3, r2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d02e      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xec>
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d029      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10b      	bne.n	8007774 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 020a 	bic.w	r2, r2, #10
 800776a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007778:	f003 021c 	and.w	r2, r3, #28
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	2102      	movs	r1, #2
 8007782:	fa01 f202 	lsl.w	r2, r1, r2
 8007786:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d038      	beq.n	800780a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80077a0:	e033      	b.n	800780a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a6:	f003 031c 	and.w	r3, r3, #28
 80077aa:	2208      	movs	r2, #8
 80077ac:	409a      	lsls	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4013      	ands	r3, r2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d02a      	beq.n	800780c <HAL_DMA_IRQHandler+0x156>
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f003 0308 	and.w	r3, r3, #8
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d025      	beq.n	800780c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 020e 	bic.w	r2, r2, #14
 80077ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d4:	f003 021c 	and.w	r2, r3, #28
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077dc:	2101      	movs	r1, #1
 80077de:	fa01 f202 	lsl.w	r2, r1, r2
 80077e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800780a:	bf00      	nop
 800780c:	bf00      	nop
}
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800782a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800783c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007842:	f003 021c 	and.w	r2, r3, #28
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	2101      	movs	r1, #1
 800784c:	fa01 f202 	lsl.w	r2, r1, r2
 8007850:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2b10      	cmp	r3, #16
 8007860:	d108      	bne.n	8007874 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007872:	e007      	b.n	8007884 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	60da      	str	r2, [r3, #12]
}
 8007884:	bf00      	nop
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	4b17      	ldr	r3, [pc, #92]	; (80078fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d80a      	bhi.n	80078ba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a8:	089b      	lsrs	r3, r3, #2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078b0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	6493      	str	r3, [r2, #72]	; 0x48
 80078b8:	e007      	b.n	80078ca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078be:	089b      	lsrs	r3, r3, #2
 80078c0:	009a      	lsls	r2, r3, #2
 80078c2:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80078c4:	4413      	add	r3, r2
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	3b08      	subs	r3, #8
 80078d2:	4a0c      	ldr	r2, [pc, #48]	; (8007904 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80078d4:	fba2 2303 	umull	r2, r3, r2, r3
 80078d8:	091b      	lsrs	r3, r3, #4
 80078da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a0a      	ldr	r2, [pc, #40]	; (8007908 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80078e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f003 031c 	and.w	r3, r3, #28
 80078e8:	2201      	movs	r2, #1
 80078ea:	409a      	lsls	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80078f0:	bf00      	nop
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	40020407 	.word	0x40020407
 8007900:	4002081c 	.word	0x4002081c
 8007904:	cccccccd 	.word	0xcccccccd
 8007908:	40020880 	.word	0x40020880

0800790c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4b0b      	ldr	r3, [pc, #44]	; (800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	461a      	mov	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a08      	ldr	r2, [pc, #32]	; (8007950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800792e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3b01      	subs	r3, #1
 8007934:	f003 0303 	and.w	r3, r3, #3
 8007938:	2201      	movs	r2, #1
 800793a:	409a      	lsls	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007940:	bf00      	nop
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	1000823f 	.word	0x1000823f
 8007950:	40020940 	.word	0x40020940

08007954 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007962:	e14c      	b.n	8007bfe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	2101      	movs	r1, #1
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	fa01 f303 	lsl.w	r3, r1, r3
 8007970:	4013      	ands	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 813e 	beq.w	8007bf8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d003      	beq.n	800798c <HAL_GPIO_Init+0x38>
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	2b12      	cmp	r3, #18
 800798a:	d123      	bne.n	80079d4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	08da      	lsrs	r2, r3, #3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3208      	adds	r2, #8
 8007994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007998:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	220f      	movs	r2, #15
 80079a4:	fa02 f303 	lsl.w	r3, r2, r3
 80079a8:	43db      	mvns	r3, r3
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	4013      	ands	r3, r2
 80079ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	691a      	ldr	r2, [r3, #16]
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	fa02 f303 	lsl.w	r3, r2, r3
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	08da      	lsrs	r2, r3, #3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3208      	adds	r2, #8
 80079ce:	6939      	ldr	r1, [r7, #16]
 80079d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	2203      	movs	r2, #3
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	43db      	mvns	r3, r3
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4013      	ands	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f003 0203 	and.w	r2, r3, #3
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	fa02 f303 	lsl.w	r3, r2, r3
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d00b      	beq.n	8007a28 <HAL_GPIO_Init+0xd4>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d007      	beq.n	8007a28 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a1c:	2b11      	cmp	r3, #17
 8007a1e:	d003      	beq.n	8007a28 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2b12      	cmp	r3, #18
 8007a26:	d130      	bne.n	8007a8a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	2203      	movs	r2, #3
 8007a34:	fa02 f303 	lsl.w	r3, r2, r3
 8007a38:	43db      	mvns	r3, r3
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a5e:	2201      	movs	r2, #1
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	43db      	mvns	r3, r3
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	091b      	lsrs	r3, r3, #4
 8007a74:	f003 0201 	and.w	r2, r3, #1
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	2203      	movs	r2, #3
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	43db      	mvns	r3, r3
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	689a      	ldr	r2, [r3, #8]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 8098 	beq.w	8007bf8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007ac8:	4a54      	ldr	r2, [pc, #336]	; (8007c1c <HAL_GPIO_Init+0x2c8>)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	089b      	lsrs	r3, r3, #2
 8007ace:	3302      	adds	r3, #2
 8007ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f003 0303 	and.w	r3, r3, #3
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	220f      	movs	r2, #15
 8007ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae4:	43db      	mvns	r3, r3
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007af2:	d019      	beq.n	8007b28 <HAL_GPIO_Init+0x1d4>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a4a      	ldr	r2, [pc, #296]	; (8007c20 <HAL_GPIO_Init+0x2cc>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d013      	beq.n	8007b24 <HAL_GPIO_Init+0x1d0>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a49      	ldr	r2, [pc, #292]	; (8007c24 <HAL_GPIO_Init+0x2d0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d00d      	beq.n	8007b20 <HAL_GPIO_Init+0x1cc>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a48      	ldr	r2, [pc, #288]	; (8007c28 <HAL_GPIO_Init+0x2d4>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d007      	beq.n	8007b1c <HAL_GPIO_Init+0x1c8>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a47      	ldr	r2, [pc, #284]	; (8007c2c <HAL_GPIO_Init+0x2d8>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d101      	bne.n	8007b18 <HAL_GPIO_Init+0x1c4>
 8007b14:	2304      	movs	r3, #4
 8007b16:	e008      	b.n	8007b2a <HAL_GPIO_Init+0x1d6>
 8007b18:	2307      	movs	r3, #7
 8007b1a:	e006      	b.n	8007b2a <HAL_GPIO_Init+0x1d6>
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e004      	b.n	8007b2a <HAL_GPIO_Init+0x1d6>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e002      	b.n	8007b2a <HAL_GPIO_Init+0x1d6>
 8007b24:	2301      	movs	r3, #1
 8007b26:	e000      	b.n	8007b2a <HAL_GPIO_Init+0x1d6>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	f002 0203 	and.w	r2, r2, #3
 8007b30:	0092      	lsls	r2, r2, #2
 8007b32:	4093      	lsls	r3, r2
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007b3a:	4938      	ldr	r1, [pc, #224]	; (8007c1c <HAL_GPIO_Init+0x2c8>)
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	089b      	lsrs	r3, r3, #2
 8007b40:	3302      	adds	r3, #2
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007b48:	4b39      	ldr	r3, [pc, #228]	; (8007c30 <HAL_GPIO_Init+0x2dc>)
 8007b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	43db      	mvns	r3, r3
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	4013      	ands	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b6e:	4a30      	ldr	r2, [pc, #192]	; (8007c30 <HAL_GPIO_Init+0x2dc>)
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8007b76:	4b2e      	ldr	r3, [pc, #184]	; (8007c30 <HAL_GPIO_Init+0x2dc>)
 8007b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	43db      	mvns	r3, r3
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4013      	ands	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007b9c:	4a24      	ldr	r2, [pc, #144]	; (8007c30 <HAL_GPIO_Init+0x2dc>)
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ba4:	4b22      	ldr	r3, [pc, #136]	; (8007c30 <HAL_GPIO_Init+0x2dc>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	43db      	mvns	r3, r3
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007bc8:	4a19      	ldr	r2, [pc, #100]	; (8007c30 <HAL_GPIO_Init+0x2dc>)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007bce:	4b18      	ldr	r3, [pc, #96]	; (8007c30 <HAL_GPIO_Init+0x2dc>)
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	43db      	mvns	r3, r3
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007bf2:	4a0f      	ldr	r2, [pc, #60]	; (8007c30 <HAL_GPIO_Init+0x2dc>)
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	fa22 f303 	lsr.w	r3, r2, r3
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f47f aeab 	bne.w	8007964 <HAL_GPIO_Init+0x10>
  }
}
 8007c0e:	bf00      	nop
 8007c10:	371c      	adds	r7, #28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	40010000 	.word	0x40010000
 8007c20:	48000400 	.word	0x48000400
 8007c24:	48000800 	.word	0x48000800
 8007c28:	48000c00 	.word	0x48000c00
 8007c2c:	48001000 	.word	0x48001000
 8007c30:	58000800 	.word	0x58000800

08007c34 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	691a      	ldr	r2, [r3, #16]
 8007c44:	887b      	ldrh	r3, [r7, #2]
 8007c46:	4013      	ands	r3, r2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	73fb      	strb	r3, [r7, #15]
 8007c50:	e001      	b.n	8007c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007c6e:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	88fb      	ldrh	r3, [r7, #6]
 8007c74:	4013      	ands	r3, r2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d006      	beq.n	8007c88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c7a:	4a05      	ldr	r2, [pc, #20]	; (8007c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c7c:	88fb      	ldrh	r3, [r7, #6]
 8007c7e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c80:	88fb      	ldrh	r3, [r7, #6]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fb ff2c 	bl	8003ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	58000800 	.word	0x58000800

08007c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e081      	b.n	8007daa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d106      	bne.n	8007cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7fb fe52 	bl	8003964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2224      	movs	r2, #36	; 0x24
 8007cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0201 	bic.w	r2, r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ce4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d107      	bne.n	8007d0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d0a:	609a      	str	r2, [r3, #8]
 8007d0c:	e006      	b.n	8007d1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007d1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d104      	bne.n	8007d2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6812      	ldr	r2, [r2, #0]
 8007d38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691a      	ldr	r2, [r3, #16]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	ea42 0103 	orr.w	r1, r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	021a      	lsls	r2, r3, #8
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	69d9      	ldr	r1, [r3, #28]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a1a      	ldr	r2, [r3, #32]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2220      	movs	r2, #32
 8007d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	817b      	strh	r3, [r7, #10]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b20      	cmp	r3, #32
 8007dd2:	f040 80da 	bne.w	8007f8a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_I2C_Master_Transmit+0x30>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e0d3      	b.n	8007f8c <HAL_I2C_Master_Transmit+0x1d8>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007dec:	f7fd fd02 	bl	80057f4 <HAL_GetTick>
 8007df0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	2319      	movs	r3, #25
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f001 fbba 	bl	8009578 <I2C_WaitOnFlagUntilTimeout>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e0be      	b.n	8007f8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2221      	movs	r2, #33	; 0x21
 8007e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2210      	movs	r2, #16
 8007e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	893a      	ldrh	r2, [r7, #8]
 8007e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	2bff      	cmp	r3, #255	; 0xff
 8007e3e:	d90e      	bls.n	8007e5e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	22ff      	movs	r2, #255	; 0xff
 8007e44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	8979      	ldrh	r1, [r7, #10]
 8007e4e:	4b51      	ldr	r3, [pc, #324]	; (8007f94 <HAL_I2C_Master_Transmit+0x1e0>)
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f001 fd1c 	bl	8009894 <I2C_TransferConfig>
 8007e5c:	e06c      	b.n	8007f38 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	8979      	ldrh	r1, [r7, #10]
 8007e70:	4b48      	ldr	r3, [pc, #288]	; (8007f94 <HAL_I2C_Master_Transmit+0x1e0>)
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f001 fd0b 	bl	8009894 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007e7e:	e05b      	b.n	8007f38 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	6a39      	ldr	r1, [r7, #32]
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f001 fbb7 	bl	80095f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e07b      	b.n	8007f8c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	781a      	ldrb	r2, [r3, #0]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d034      	beq.n	8007f38 <HAL_I2C_Master_Transmit+0x184>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d130      	bne.n	8007f38 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	2200      	movs	r2, #0
 8007ede:	2180      	movs	r1, #128	; 0x80
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f001 fb49 	bl	8009578 <I2C_WaitOnFlagUntilTimeout>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e04d      	b.n	8007f8c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2bff      	cmp	r3, #255	; 0xff
 8007ef8:	d90e      	bls.n	8007f18 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	22ff      	movs	r2, #255	; 0xff
 8007efe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	8979      	ldrh	r1, [r7, #10]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f001 fcbf 	bl	8009894 <I2C_TransferConfig>
 8007f16:	e00f      	b.n	8007f38 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	8979      	ldrh	r1, [r7, #10]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f001 fcae 	bl	8009894 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d19e      	bne.n	8007e80 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	6a39      	ldr	r1, [r7, #32]
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f001 fb96 	bl	8009678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e01a      	b.n	8007f8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6859      	ldr	r1, [r3, #4]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <HAL_I2C_Master_Transmit+0x1e4>)
 8007f6a:	400b      	ands	r3, r1
 8007f6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	e000      	b.n	8007f8c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007f8a:	2302      	movs	r3, #2
  }
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	80002000 	.word	0x80002000
 8007f98:	fe00e800 	.word	0xfe00e800

08007f9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	607a      	str	r2, [r7, #4]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	460b      	mov	r3, r1
 8007faa:	817b      	strh	r3, [r7, #10]
 8007fac:	4613      	mov	r3, r2
 8007fae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	f040 80db 	bne.w	8008174 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_I2C_Master_Receive+0x30>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e0d4      	b.n	8008176 <HAL_I2C_Master_Receive+0x1da>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007fd4:	f7fd fc0e 	bl	80057f4 <HAL_GetTick>
 8007fd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	2319      	movs	r3, #25
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f001 fac6 	bl	8009578 <I2C_WaitOnFlagUntilTimeout>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e0bf      	b.n	8008176 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2222      	movs	r2, #34	; 0x22
 8007ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2210      	movs	r2, #16
 8008002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	893a      	ldrh	r2, [r7, #8]
 8008016:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008022:	b29b      	uxth	r3, r3
 8008024:	2bff      	cmp	r3, #255	; 0xff
 8008026:	d90e      	bls.n	8008046 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	22ff      	movs	r2, #255	; 0xff
 800802c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008032:	b2da      	uxtb	r2, r3
 8008034:	8979      	ldrh	r1, [r7, #10]
 8008036:	4b52      	ldr	r3, [pc, #328]	; (8008180 <HAL_I2C_Master_Receive+0x1e4>)
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f001 fc28 	bl	8009894 <I2C_TransferConfig>
 8008044:	e06d      	b.n	8008122 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800804a:	b29a      	uxth	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008054:	b2da      	uxtb	r2, r3
 8008056:	8979      	ldrh	r1, [r7, #10]
 8008058:	4b49      	ldr	r3, [pc, #292]	; (8008180 <HAL_I2C_Master_Receive+0x1e4>)
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f001 fc17 	bl	8009894 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008066:	e05c      	b.n	8008122 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	6a39      	ldr	r1, [r7, #32]
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f001 fb3f 	bl	80096f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e07c      	b.n	8008176 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008098:	3b01      	subs	r3, #1
 800809a:	b29a      	uxth	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d034      	beq.n	8008122 <HAL_I2C_Master_Receive+0x186>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d130      	bne.n	8008122 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	2200      	movs	r2, #0
 80080c8:	2180      	movs	r1, #128	; 0x80
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f001 fa54 	bl	8009578 <I2C_WaitOnFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e04d      	b.n	8008176 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080de:	b29b      	uxth	r3, r3
 80080e0:	2bff      	cmp	r3, #255	; 0xff
 80080e2:	d90e      	bls.n	8008102 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	22ff      	movs	r2, #255	; 0xff
 80080e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	8979      	ldrh	r1, [r7, #10]
 80080f2:	2300      	movs	r3, #0
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f001 fbca 	bl	8009894 <I2C_TransferConfig>
 8008100:	e00f      	b.n	8008122 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008106:	b29a      	uxth	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008110:	b2da      	uxtb	r2, r3
 8008112:	8979      	ldrh	r1, [r7, #10]
 8008114:	2300      	movs	r3, #0
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f001 fbb9 	bl	8009894 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008126:	b29b      	uxth	r3, r3
 8008128:	2b00      	cmp	r3, #0
 800812a:	d19d      	bne.n	8008068 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	6a39      	ldr	r1, [r7, #32]
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f001 faa1 	bl	8009678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e01a      	b.n	8008176 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2220      	movs	r2, #32
 8008146:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6859      	ldr	r1, [r3, #4]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	4b0c      	ldr	r3, [pc, #48]	; (8008184 <HAL_I2C_Master_Receive+0x1e8>)
 8008154:	400b      	ands	r3, r1
 8008156:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	e000      	b.n	8008176 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008174:	2302      	movs	r3, #2
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	80002400 	.word	0x80002400
 8008184:	fe00e800 	.word	0xfe00e800

08008188 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af02      	add	r7, sp, #8
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	607a      	str	r2, [r7, #4]
 8008192:	461a      	mov	r2, r3
 8008194:	460b      	mov	r3, r1
 8008196:	817b      	strh	r3, [r7, #10]
 8008198:	4613      	mov	r3, r2
 800819a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b20      	cmp	r3, #32
 80081a6:	d153      	bne.n	8008250 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b6:	d101      	bne.n	80081bc <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80081b8:	2302      	movs	r3, #2
 80081ba:	e04a      	b.n	8008252 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <HAL_I2C_Master_Receive_IT+0x42>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e043      	b.n	8008252 <HAL_I2C_Master_Receive_IT+0xca>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2222      	movs	r2, #34	; 0x22
 80081d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2210      	movs	r2, #16
 80081de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	893a      	ldrh	r2, [r7, #8]
 80081f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4a19      	ldr	r2, [pc, #100]	; (800825c <HAL_I2C_Master_Receive_IT+0xd4>)
 80081f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4a18      	ldr	r2, [pc, #96]	; (8008260 <HAL_I2C_Master_Receive_IT+0xd8>)
 80081fe:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008204:	b29b      	uxth	r3, r3
 8008206:	2bff      	cmp	r3, #255	; 0xff
 8008208:	d906      	bls.n	8008218 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	22ff      	movs	r2, #255	; 0xff
 800820e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e007      	b.n	8008228 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800821c:	b29a      	uxth	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008226:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822c:	b2da      	uxtb	r2, r3
 800822e:	8979      	ldrh	r1, [r7, #10]
 8008230:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <HAL_I2C_Master_Receive_IT+0xdc>)
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f001 fb2c 	bl	8009894 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008244:	2102      	movs	r1, #2
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f001 fb52 	bl	80098f0 <I2C_Enable_IRQ>

    return HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	e000      	b.n	8008252 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008250:	2302      	movs	r3, #2
  }
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	ffff0000 	.word	0xffff0000
 8008260:	0800856d 	.word	0x0800856d
 8008264:	80002400 	.word	0x80002400

08008268 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	4608      	mov	r0, r1
 8008272:	4611      	mov	r1, r2
 8008274:	461a      	mov	r2, r3
 8008276:	4603      	mov	r3, r0
 8008278:	817b      	strh	r3, [r7, #10]
 800827a:	460b      	mov	r3, r1
 800827c:	813b      	strh	r3, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b20      	cmp	r3, #32
 800828c:	f040 80f9 	bne.w	8008482 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <HAL_I2C_Mem_Write+0x34>
 8008296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008298:	2b00      	cmp	r3, #0
 800829a:	d105      	bne.n	80082a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e0ed      	b.n	8008484 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d101      	bne.n	80082b6 <HAL_I2C_Mem_Write+0x4e>
 80082b2:	2302      	movs	r3, #2
 80082b4:	e0e6      	b.n	8008484 <HAL_I2C_Mem_Write+0x21c>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80082be:	f7fd fa99 	bl	80057f4 <HAL_GetTick>
 80082c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	2319      	movs	r3, #25
 80082ca:	2201      	movs	r2, #1
 80082cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f001 f951 	bl	8009578 <I2C_WaitOnFlagUntilTimeout>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e0d1      	b.n	8008484 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2221      	movs	r2, #33	; 0x21
 80082e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2240      	movs	r2, #64	; 0x40
 80082ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a3a      	ldr	r2, [r7, #32]
 80082fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008308:	88f8      	ldrh	r0, [r7, #6]
 800830a:	893a      	ldrh	r2, [r7, #8]
 800830c:	8979      	ldrh	r1, [r7, #10]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	4603      	mov	r3, r0
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 fd0f 	bl	8008d3c <I2C_RequestMemoryWrite>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e0a9      	b.n	8008484 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008334:	b29b      	uxth	r3, r3
 8008336:	2bff      	cmp	r3, #255	; 0xff
 8008338:	d90e      	bls.n	8008358 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	22ff      	movs	r2, #255	; 0xff
 800833e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008344:	b2da      	uxtb	r2, r3
 8008346:	8979      	ldrh	r1, [r7, #10]
 8008348:	2300      	movs	r3, #0
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f001 fa9f 	bl	8009894 <I2C_TransferConfig>
 8008356:	e00f      	b.n	8008378 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800835c:	b29a      	uxth	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008366:	b2da      	uxtb	r2, r3
 8008368:	8979      	ldrh	r1, [r7, #10]
 800836a:	2300      	movs	r3, #0
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f001 fa8e 	bl	8009894 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f001 f93b 	bl	80095f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e07b      	b.n	8008484 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	781a      	ldrb	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	3b01      	subs	r3, #1
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d034      	beq.n	8008430 <HAL_I2C_Mem_Write+0x1c8>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d130      	bne.n	8008430 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	2200      	movs	r2, #0
 80083d6:	2180      	movs	r1, #128	; 0x80
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f001 f8cd 	bl	8009578 <I2C_WaitOnFlagUntilTimeout>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e04d      	b.n	8008484 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2bff      	cmp	r3, #255	; 0xff
 80083f0:	d90e      	bls.n	8008410 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	22ff      	movs	r2, #255	; 0xff
 80083f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	8979      	ldrh	r1, [r7, #10]
 8008400:	2300      	movs	r3, #0
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f001 fa43 	bl	8009894 <I2C_TransferConfig>
 800840e:	e00f      	b.n	8008430 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008414:	b29a      	uxth	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800841e:	b2da      	uxtb	r2, r3
 8008420:	8979      	ldrh	r1, [r7, #10]
 8008422:	2300      	movs	r3, #0
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f001 fa32 	bl	8009894 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008434:	b29b      	uxth	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d19e      	bne.n	8008378 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f001 f91a 	bl	8009678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e01a      	b.n	8008484 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2220      	movs	r2, #32
 8008454:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6859      	ldr	r1, [r3, #4]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	4b0a      	ldr	r3, [pc, #40]	; (800848c <HAL_I2C_Mem_Write+0x224>)
 8008462:	400b      	ands	r3, r1
 8008464:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	e000      	b.n	8008484 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008482:	2302      	movs	r3, #2
  }
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	fe00e800 	.word	0xfe00e800

08008490 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	68f9      	ldr	r1, [r7, #12]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	4798      	blx	r3
  }
}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
 80084f8:	4613      	mov	r3, r2
 80084fa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af02      	add	r7, sp, #8
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008582:	2b01      	cmp	r3, #1
 8008584:	d101      	bne.n	800858a <I2C_Master_ISR_IT+0x1e>
 8008586:	2302      	movs	r3, #2
 8008588:	e115      	b.n	80087b6 <I2C_Master_ISR_IT+0x24a>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	091b      	lsrs	r3, r3, #4
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b00      	cmp	r3, #0
 800859c:	d013      	beq.n	80085c6 <I2C_Master_ISR_IT+0x5a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	091b      	lsrs	r3, r3, #4
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00d      	beq.n	80085c6 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2210      	movs	r2, #16
 80085b0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b6:	f043 0204 	orr.w	r2, r3, #4
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 ff92 	bl	80094e8 <I2C_Flush_TXDR>
 80085c4:	e0e2      	b.n	800878c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	089b      	lsrs	r3, r3, #2
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d023      	beq.n	800861a <I2C_Master_ISR_IT+0xae>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	089b      	lsrs	r3, r3, #2
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d01d      	beq.n	800861a <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f023 0304 	bic.w	r3, r3, #4
 80085e4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	b2d2      	uxtb	r2, r2
 80085f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008602:	3b01      	subs	r3, #1
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800860e:	b29b      	uxth	r3, r3
 8008610:	3b01      	subs	r3, #1
 8008612:	b29a      	uxth	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008618:	e0b8      	b.n	800878c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	085b      	lsrs	r3, r3, #1
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d01e      	beq.n	8008664 <I2C_Master_ISR_IT+0xf8>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	085b      	lsrs	r3, r3, #1
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d018      	beq.n	8008664 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	781a      	ldrb	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800864c:	3b01      	subs	r3, #1
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008658:	b29b      	uxth	r3, r3
 800865a:	3b01      	subs	r3, #1
 800865c:	b29a      	uxth	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008662:	e093      	b.n	800878c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	09db      	lsrs	r3, r3, #7
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	d05e      	beq.n	800872e <I2C_Master_ISR_IT+0x1c2>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	099b      	lsrs	r3, r3, #6
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	d058      	beq.n	800872e <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d041      	beq.n	800870a <I2C_Master_ISR_IT+0x19e>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800868a:	2b00      	cmp	r3, #0
 800868c:	d13d      	bne.n	800870a <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	b29b      	uxth	r3, r3
 8008696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800869a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	2bff      	cmp	r3, #255	; 0xff
 80086a4:	d90e      	bls.n	80086c4 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	22ff      	movs	r2, #255	; 0xff
 80086aa:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	8a79      	ldrh	r1, [r7, #18]
 80086b4:	2300      	movs	r3, #0
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f001 f8e9 	bl	8009894 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086c2:	e033      	b.n	800872c <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086d6:	d00c      	beq.n	80086f2 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80086e2:	8a79      	ldrh	r1, [r7, #18]
 80086e4:	2300      	movs	r3, #0
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	4603      	mov	r3, r0
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f001 f8d2 	bl	8009894 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086f0:	e01c      	b.n	800872c <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	8a79      	ldrh	r1, [r7, #18]
 80086fa:	2300      	movs	r3, #0
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f001 f8c6 	bl	8009894 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008708:	e010      	b.n	800872c <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008714:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008718:	d003      	beq.n	8008722 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 fbe4 	bl	8008ee8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008720:	e034      	b.n	800878c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008722:	2140      	movs	r1, #64	; 0x40
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 fe1f 	bl	8009368 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800872a:	e02f      	b.n	800878c <I2C_Master_ISR_IT+0x220>
 800872c:	e02e      	b.n	800878c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	099b      	lsrs	r3, r3, #6
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d028      	beq.n	800878c <I2C_Master_ISR_IT+0x220>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	099b      	lsrs	r3, r3, #6
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	d022      	beq.n	800878c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d119      	bne.n	8008784 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800875e:	d015      	beq.n	800878c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008768:	d108      	bne.n	800877c <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008778:	605a      	str	r2, [r3, #4]
 800877a:	e007      	b.n	800878c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 fbb3 	bl	8008ee8 <I2C_ITMasterSeqCplt>
 8008782:	e003      	b.n	800878c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008784:	2140      	movs	r1, #64	; 0x40
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fdee 	bl	8009368 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	095b      	lsrs	r3, r3, #5
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	d009      	beq.n	80087ac <I2C_Master_ISR_IT+0x240>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	095b      	lsrs	r3, r3, #5
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d003      	beq.n	80087ac <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80087a4:	6979      	ldr	r1, [r7, #20]
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 fc18 	bl	8008fdc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b086      	sub	sp, #24
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	60b9      	str	r1, [r7, #8]
 80087c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d101      	bne.n	80087e2 <I2C_Slave_ISR_IT+0x24>
 80087de:	2302      	movs	r3, #2
 80087e0:	e0ec      	b.n	80089bc <I2C_Slave_ISR_IT+0x1fe>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	095b      	lsrs	r3, r3, #5
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d009      	beq.n	800880a <I2C_Slave_ISR_IT+0x4c>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	095b      	lsrs	r3, r3, #5
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008802:	6939      	ldr	r1, [r7, #16]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 fc85 	bl	8009114 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	091b      	lsrs	r3, r3, #4
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b00      	cmp	r3, #0
 8008814:	d04d      	beq.n	80088b2 <I2C_Slave_ISR_IT+0xf4>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	091b      	lsrs	r3, r3, #4
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d047      	beq.n	80088b2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d128      	bne.n	800887e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b28      	cmp	r3, #40	; 0x28
 8008836:	d108      	bne.n	800884a <I2C_Slave_ISR_IT+0x8c>
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800883e:	d104      	bne.n	800884a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008840:	6939      	ldr	r1, [r7, #16]
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 fd3c 	bl	80092c0 <I2C_ITListenCplt>
 8008848:	e032      	b.n	80088b0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b29      	cmp	r3, #41	; 0x29
 8008854:	d10e      	bne.n	8008874 <I2C_Slave_ISR_IT+0xb6>
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800885c:	d00a      	beq.n	8008874 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2210      	movs	r2, #16
 8008864:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 fe3e 	bl	80094e8 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 fb78 	bl	8008f62 <I2C_ITSlaveSeqCplt>
 8008872:	e01d      	b.n	80088b0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2210      	movs	r2, #16
 800887a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800887c:	e096      	b.n	80089ac <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2210      	movs	r2, #16
 8008884:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888a:	f043 0204 	orr.w	r2, r3, #4
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d004      	beq.n	80088a2 <I2C_Slave_ISR_IT+0xe4>
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800889e:	f040 8085 	bne.w	80089ac <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a6:	4619      	mov	r1, r3
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 fd5d 	bl	8009368 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80088ae:	e07d      	b.n	80089ac <I2C_Slave_ISR_IT+0x1ee>
 80088b0:	e07c      	b.n	80089ac <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	089b      	lsrs	r3, r3, #2
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d030      	beq.n	8008920 <I2C_Slave_ISR_IT+0x162>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	089b      	lsrs	r3, r3, #2
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d02a      	beq.n	8008920 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d018      	beq.n	8008906 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	1c5a      	adds	r2, r3, #1
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	b29a      	uxth	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890a:	b29b      	uxth	r3, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	d14f      	bne.n	80089b0 <I2C_Slave_ISR_IT+0x1f2>
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008916:	d04b      	beq.n	80089b0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 fb22 	bl	8008f62 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800891e:	e047      	b.n	80089b0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	08db      	lsrs	r3, r3, #3
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00a      	beq.n	8008942 <I2C_Slave_ISR_IT+0x184>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	08db      	lsrs	r3, r3, #3
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	2b00      	cmp	r3, #0
 8008936:	d004      	beq.n	8008942 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008938:	6939      	ldr	r1, [r7, #16]
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 fa52 	bl	8008de4 <I2C_ITAddrCplt>
 8008940:	e037      	b.n	80089b2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	085b      	lsrs	r3, r3, #1
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d031      	beq.n	80089b2 <I2C_Slave_ISR_IT+0x1f4>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	085b      	lsrs	r3, r3, #1
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	2b00      	cmp	r3, #0
 8008958:	d02b      	beq.n	80089b2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895e:	b29b      	uxth	r3, r3
 8008960:	2b00      	cmp	r3, #0
 8008962:	d018      	beq.n	8008996 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	781a      	ldrb	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800897e:	b29b      	uxth	r3, r3
 8008980:	3b01      	subs	r3, #1
 8008982:	b29a      	uxth	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800898c:	3b01      	subs	r3, #1
 800898e:	b29a      	uxth	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	851a      	strh	r2, [r3, #40]	; 0x28
 8008994:	e00d      	b.n	80089b2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800899c:	d002      	beq.n	80089a4 <I2C_Slave_ISR_IT+0x1e6>
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d106      	bne.n	80089b2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fadc 	bl	8008f62 <I2C_ITSlaveSeqCplt>
 80089aa:	e002      	b.n	80089b2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80089ac:	bf00      	nop
 80089ae:	e000      	b.n	80089b2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80089b0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b088      	sub	sp, #32
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <I2C_Master_ISR_DMA+0x1a>
 80089da:	2302      	movs	r3, #2
 80089dc:	e0e1      	b.n	8008ba2 <I2C_Master_ISR_DMA+0x1de>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	091b      	lsrs	r3, r3, #4
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d017      	beq.n	8008a22 <I2C_Master_ISR_DMA+0x5e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	091b      	lsrs	r3, r3, #4
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d011      	beq.n	8008a22 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2210      	movs	r2, #16
 8008a04:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0a:	f043 0204 	orr.w	r2, r3, #4
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008a12:	2112      	movs	r1, #18
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 ff6b 	bl	80098f0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 fd64 	bl	80094e8 <I2C_Flush_TXDR>
 8008a20:	e0ba      	b.n	8008b98 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	09db      	lsrs	r3, r3, #7
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d072      	beq.n	8008b14 <I2C_Master_ISR_DMA+0x150>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	099b      	lsrs	r3, r3, #6
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d06c      	beq.n	8008b14 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a48:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d04e      	beq.n	8008af2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a60:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	2bff      	cmp	r3, #255	; 0xff
 8008a6a:	d906      	bls.n	8008a7a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	22ff      	movs	r2, #255	; 0xff
 8008a70:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008a72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	e010      	b.n	8008a9c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a8c:	d003      	beq.n	8008a96 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	617b      	str	r3, [r7, #20]
 8008a94:	e002      	b.n	8008a9c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a9a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	8a79      	ldrh	r1, [r7, #18]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 fef2 	bl	8009894 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b22      	cmp	r3, #34	; 0x22
 8008acc:	d108      	bne.n	8008ae0 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008adc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008ade:	e05b      	b.n	8008b98 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008aee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008af0:	e052      	b.n	8008b98 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008afc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b00:	d003      	beq.n	8008b0a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 f9f0 	bl	8008ee8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008b08:	e046      	b.n	8008b98 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008b0a:	2140      	movs	r1, #64	; 0x40
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 fc2b 	bl	8009368 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008b12:	e041      	b.n	8008b98 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	099b      	lsrs	r3, r3, #6
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d029      	beq.n	8008b74 <I2C_Master_ISR_DMA+0x1b0>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	099b      	lsrs	r3, r3, #6
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d023      	beq.n	8008b74 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d119      	bne.n	8008b6a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b44:	d027      	beq.n	8008b96 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b4e:	d108      	bne.n	8008b62 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b5e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008b60:	e019      	b.n	8008b96 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 f9c0 	bl	8008ee8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008b68:	e015      	b.n	8008b96 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008b6a:	2140      	movs	r1, #64	; 0x40
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 fbfb 	bl	8009368 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008b72:	e010      	b.n	8008b96 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	095b      	lsrs	r3, r3, #5
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <I2C_Master_ISR_DMA+0x1d4>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	095b      	lsrs	r3, r3, #5
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d005      	beq.n	8008b98 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008b8c:	68b9      	ldr	r1, [r7, #8]
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 fa24 	bl	8008fdc <I2C_ITMasterCplt>
 8008b94:	e000      	b.n	8008b98 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008b96:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b086      	sub	sp, #24
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	60f8      	str	r0, [r7, #12]
 8008bb2:	60b9      	str	r1, [r7, #8]
 8008bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bba:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d101      	bne.n	8008bce <I2C_Slave_ISR_DMA+0x24>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e0b1      	b.n	8008d32 <I2C_Slave_ISR_DMA+0x188>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	095b      	lsrs	r3, r3, #5
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d009      	beq.n	8008bf6 <I2C_Slave_ISR_DMA+0x4c>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	095b      	lsrs	r3, r3, #5
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 fa8f 	bl	8009114 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	091b      	lsrs	r3, r3, #4
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 8082 	beq.w	8008d08 <I2C_Slave_ISR_DMA+0x15e>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	091b      	lsrs	r3, r3, #4
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d07b      	beq.n	8008d08 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	0b9b      	lsrs	r3, r3, #14
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d105      	bne.n	8008c28 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	0bdb      	lsrs	r3, r3, #15
 8008c20:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d068      	beq.n	8008cfa <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00d      	beq.n	8008c4c <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	0bdb      	lsrs	r3, r3, #15
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d007      	beq.n	8008c4c <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00d      	beq.n	8008c70 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	0b9b      	lsrs	r3, r3, #14
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d007      	beq.n	8008c70 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d128      	bne.n	8008cc8 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b28      	cmp	r3, #40	; 0x28
 8008c80:	d108      	bne.n	8008c94 <I2C_Slave_ISR_DMA+0xea>
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c88:	d104      	bne.n	8008c94 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 fb17 	bl	80092c0 <I2C_ITListenCplt>
 8008c92:	e031      	b.n	8008cf8 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b29      	cmp	r3, #41	; 0x29
 8008c9e:	d10e      	bne.n	8008cbe <I2C_Slave_ISR_DMA+0x114>
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ca6:	d00a      	beq.n	8008cbe <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2210      	movs	r2, #16
 8008cae:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 fc19 	bl	80094e8 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 f953 	bl	8008f62 <I2C_ITSlaveSeqCplt>
 8008cbc:	e01c      	b.n	8008cf8 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2210      	movs	r2, #16
 8008cc4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008cc6:	e01d      	b.n	8008d04 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2210      	movs	r2, #16
 8008cce:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd4:	f043 0204 	orr.w	r2, r3, #4
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <I2C_Slave_ISR_DMA+0x140>
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ce8:	d10c      	bne.n	8008d04 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cee:	4619      	mov	r1, r3
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 fb39 	bl	8009368 <I2C_ITError>
      if (treatdmanack == 1U)
 8008cf6:	e005      	b.n	8008d04 <I2C_Slave_ISR_DMA+0x15a>
 8008cf8:	e004      	b.n	8008d04 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2210      	movs	r2, #16
 8008d00:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d02:	e011      	b.n	8008d28 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8008d04:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d06:	e00f      	b.n	8008d28 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	08db      	lsrs	r3, r3, #3
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d009      	beq.n	8008d28 <I2C_Slave_ISR_DMA+0x17e>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	08db      	lsrs	r3, r3, #3
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 f85e 	bl	8008de4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af02      	add	r7, sp, #8
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	4608      	mov	r0, r1
 8008d46:	4611      	mov	r1, r2
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	817b      	strh	r3, [r7, #10]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	813b      	strh	r3, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008d56:	88fb      	ldrh	r3, [r7, #6]
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	8979      	ldrh	r1, [r7, #10]
 8008d5c:	4b20      	ldr	r3, [pc, #128]	; (8008de0 <I2C_RequestMemoryWrite+0xa4>)
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 fd95 	bl	8009894 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d6a:	69fa      	ldr	r2, [r7, #28]
 8008d6c:	69b9      	ldr	r1, [r7, #24]
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 fc42 	bl	80095f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e02c      	b.n	8008dd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d7e:	88fb      	ldrh	r3, [r7, #6]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d105      	bne.n	8008d90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d84:	893b      	ldrh	r3, [r7, #8]
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	629a      	str	r2, [r3, #40]	; 0x28
 8008d8e:	e015      	b.n	8008dbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d90:	893b      	ldrh	r3, [r7, #8]
 8008d92:	0a1b      	lsrs	r3, r3, #8
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	69b9      	ldr	r1, [r7, #24]
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 fc28 	bl	80095f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e012      	b.n	8008dd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008db2:	893b      	ldrh	r3, [r7, #8]
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	2180      	movs	r1, #128	; 0x80
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 fbd6 	bl	8009578 <I2C_WaitOnFlagUntilTimeout>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e000      	b.n	8008dd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	80002000 	.word	0x80002000

08008de4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008dfa:	2b28      	cmp	r3, #40	; 0x28
 8008dfc:	d168      	bne.n	8008ed0 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	0c1b      	lsrs	r3, r3, #16
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	0c1b      	lsrs	r3, r3, #16
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008e1c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e2a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008e38:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d137      	bne.n	8008eb2 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8008e42:	897b      	ldrh	r3, [r7, #10]
 8008e44:	09db      	lsrs	r3, r3, #7
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	89bb      	ldrh	r3, [r7, #12]
 8008e4a:	4053      	eors	r3, r2
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	f003 0306 	and.w	r3, r3, #6
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d11c      	bne.n	8008e90 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008e56:	897b      	ldrh	r3, [r7, #10]
 8008e58:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d139      	bne.n	8008ee0 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2208      	movs	r2, #8
 8008e78:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008e82:	89ba      	ldrh	r2, [r7, #12]
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff fb2f 	bl	80084ec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008e8e:	e027      	b.n	8008ee0 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8008e90:	893b      	ldrh	r3, [r7, #8]
 8008e92:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008e94:	2104      	movs	r1, #4
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fd98 	bl	80099cc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008ea4:	89ba      	ldrh	r2, [r7, #12]
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff fb1e 	bl	80084ec <HAL_I2C_AddrCallback>
}
 8008eb0:	e016      	b.n	8008ee0 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008eb2:	2104      	movs	r1, #4
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fd89 	bl	80099cc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008ec2:	89ba      	ldrh	r2, [r7, #12]
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f7ff fb0f 	bl	80084ec <HAL_I2C_AddrCallback>
}
 8008ece:	e007      	b.n	8008ee0 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2208      	movs	r2, #8
 8008ed6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008ee0:	bf00      	nop
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b21      	cmp	r3, #33	; 0x21
 8008f02:	d115      	bne.n	8008f30 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2211      	movs	r2, #17
 8008f10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008f18:	2101      	movs	r1, #1
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fd56 	bl	80099cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7fa ffd9 	bl	8003ee0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f2e:	e014      	b.n	8008f5a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2220      	movs	r2, #32
 8008f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2212      	movs	r2, #18
 8008f3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008f44:	2102      	movs	r1, #2
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fd40 	bl	80099cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7fa ffd9 	bl	8003f0c <HAL_I2C_MasterRxCpltCallback>
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b29      	cmp	r3, #41	; 0x29
 8008f7c:	d112      	bne.n	8008fa4 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2228      	movs	r2, #40	; 0x28
 8008f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2221      	movs	r2, #33	; 0x21
 8008f8a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fd1c 	bl	80099cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff fa91 	bl	80084c4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008fa2:	e017      	b.n	8008fd4 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b2a      	cmp	r3, #42	; 0x2a
 8008fae:	d111      	bne.n	8008fd4 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2228      	movs	r2, #40	; 0x28
 8008fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2222      	movs	r2, #34	; 0x22
 8008fbc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008fbe:	2102      	movs	r1, #2
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fd03 	bl	80099cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff fa82 	bl	80084d8 <HAL_I2C_SlaveRxCpltCallback>
}
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2220      	movs	r2, #32
 8008fec:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	6859      	ldr	r1, [r3, #4]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	4b44      	ldr	r3, [pc, #272]	; (800910c <I2C_ITMasterCplt+0x130>)
 8008ffa:	400b      	ands	r3, r1
 8008ffc:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a40      	ldr	r2, [pc, #256]	; (8009110 <I2C_ITMasterCplt+0x134>)
 800900e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	091b      	lsrs	r3, r3, #4
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d009      	beq.n	8009030 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2210      	movs	r2, #16
 8009022:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009028:	f043 0204 	orr.w	r2, r3, #4
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fa59 	bl	80094e8 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009036:	2103      	movs	r1, #3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fcc7 	bl	80099cc <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009042:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b60      	cmp	r3, #96	; 0x60
 800904e:	d002      	beq.n	8009056 <I2C_ITMasterCplt+0x7a>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d006      	beq.n	8009064 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f983 	bl	8009368 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009062:	e04e      	b.n	8009102 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b21      	cmp	r3, #33	; 0x21
 800906e:	d121      	bne.n	80090b4 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b40      	cmp	r3, #64	; 0x40
 8009082:	d10b      	bne.n	800909c <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff fa41 	bl	800851c <HAL_I2C_MemTxCpltCallback>
}
 800909a:	e032      	b.n	8009102 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f7fa ff17 	bl	8003ee0 <HAL_I2C_MasterTxCpltCallback>
}
 80090b2:	e026      	b.n	8009102 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b22      	cmp	r3, #34	; 0x22
 80090be:	d120      	bne.n	8009102 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2220      	movs	r2, #32
 80090c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	2b40      	cmp	r3, #64	; 0x40
 80090d2:	d10b      	bne.n	80090ec <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7ff fa23 	bl	8008530 <HAL_I2C_MemRxCpltCallback>
}
 80090ea:	e00a      	b.n	8009102 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fa ff05 	bl	8003f0c <HAL_I2C_MasterRxCpltCallback>
}
 8009102:	bf00      	nop
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	fe00e800 	.word	0xfe00e800
 8009110:	ffff0000 	.word	0xffff0000

08009114 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2220      	movs	r2, #32
 8009130:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009132:	2107      	movs	r1, #7
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fc49 	bl	80099cc <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009148:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6859      	ldr	r1, [r3, #4]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	4b58      	ldr	r3, [pc, #352]	; (80092b8 <I2C_ITSlaveCplt+0x1a4>)
 8009156:	400b      	ands	r3, r1
 8009158:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f9c4 	bl	80094e8 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	0b9b      	lsrs	r3, r3, #14
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00b      	beq.n	8009184 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009170:	2b00      	cmp	r3, #0
 8009172:	d018      	beq.n	80091a6 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	b29a      	uxth	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009182:	e010      	b.n	80091a6 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	0bdb      	lsrs	r3, r3, #15
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00a      	beq.n	80091a6 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009194:	2b00      	cmp	r3, #0
 8009196:	d006      	beq.n	80091a6 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	089b      	lsrs	r3, r3, #2
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d020      	beq.n	80091f4 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f023 0304 	bic.w	r3, r3, #4
 80091b8:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	b2d2      	uxtb	r2, r2
 80091c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00c      	beq.n	80091f4 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091de:	3b01      	subs	r3, #1
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	3b01      	subs	r3, #1
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d005      	beq.n	800920a <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009202:	f043 0204 	orr.w	r2, r3, #4
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009222:	2b00      	cmp	r3, #0
 8009224:	d010      	beq.n	8009248 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f89b 	bl	8009368 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b28      	cmp	r3, #40	; 0x28
 800923c:	d138      	bne.n	80092b0 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800923e:	68f9      	ldr	r1, [r7, #12]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f83d 	bl	80092c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009246:	e033      	b.n	80092b0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009250:	d011      	beq.n	8009276 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7ff fe85 	bl	8008f62 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a18      	ldr	r2, [pc, #96]	; (80092bc <I2C_ITSlaveCplt+0x1a8>)
 800925c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2220      	movs	r2, #32
 8009262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7ff f94a 	bl	8008508 <HAL_I2C_ListenCpltCallback>
}
 8009274:	e01c      	b.n	80092b0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b22      	cmp	r3, #34	; 0x22
 8009280:	d10b      	bne.n	800929a <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7ff f920 	bl	80084d8 <HAL_I2C_SlaveRxCpltCallback>
}
 8009298:	e00a      	b.n	80092b0 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2220      	movs	r2, #32
 800929e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7ff f90a 	bl	80084c4 <HAL_I2C_SlaveTxCpltCallback>
}
 80092b0:	bf00      	nop
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	fe00e800 	.word	0xfe00e800
 80092bc:	ffff0000 	.word	0xffff0000

080092c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a25      	ldr	r2, [pc, #148]	; (8009364 <I2C_ITListenCplt+0xa4>)
 80092ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2220      	movs	r2, #32
 80092da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	089b      	lsrs	r3, r3, #2
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d022      	beq.n	800933e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009302:	b2d2      	uxtb	r2, r2
 8009304:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009314:	2b00      	cmp	r3, #0
 8009316:	d012      	beq.n	800933e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800931c:	3b01      	subs	r3, #1
 800931e:	b29a      	uxth	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	b29a      	uxth	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009336:	f043 0204 	orr.w	r2, r3, #4
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800933e:	2107      	movs	r1, #7
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fb43 	bl	80099cc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2210      	movs	r2, #16
 800934c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff f8d6 	bl	8008508 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	ffff0000 	.word	0xffff0000

08009368 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009378:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a55      	ldr	r2, [pc, #340]	; (80094dc <I2C_ITError+0x174>)
 8009386:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	431a      	orrs	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	2b28      	cmp	r3, #40	; 0x28
 800939e:	d005      	beq.n	80093ac <I2C_ITError+0x44>
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	2b29      	cmp	r3, #41	; 0x29
 80093a4:	d002      	beq.n	80093ac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	2b2a      	cmp	r3, #42	; 0x2a
 80093aa:	d10e      	bne.n	80093ca <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80093ac:	2103      	movs	r1, #3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fb0c 	bl	80099cc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2228      	movs	r2, #40	; 0x28
 80093b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a46      	ldr	r2, [pc, #280]	; (80094e0 <I2C_ITError+0x178>)
 80093c6:	635a      	str	r2, [r3, #52]	; 0x34
 80093c8:	e013      	b.n	80093f2 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80093ca:	2107      	movs	r1, #7
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fafd 	bl	80099cc <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b60      	cmp	r3, #96	; 0x60
 80093dc:	d003      	beq.n	80093e6 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2220      	movs	r2, #32
 80093e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009400:	d123      	bne.n	800944a <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009410:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009416:	2b00      	cmp	r3, #0
 8009418:	d05c      	beq.n	80094d4 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	4a31      	ldr	r2, [pc, #196]	; (80094e4 <I2C_ITError+0x17c>)
 8009420:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe f8e2 	bl	80075f8 <HAL_DMA_Abort_IT>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d04c      	beq.n	80094d4 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009444:	4610      	mov	r0, r2
 8009446:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009448:	e044      	b.n	80094d4 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009458:	d123      	bne.n	80094a2 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009468:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d030      	beq.n	80094d4 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009476:	4a1b      	ldr	r2, [pc, #108]	; (80094e4 <I2C_ITError+0x17c>)
 8009478:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe f8b6 	bl	80075f8 <HAL_DMA_Abort_IT>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d020      	beq.n	80094d4 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800949c:	4610      	mov	r0, r2
 800949e:	4798      	blx	r3
}
 80094a0:	e018      	b.n	80094d4 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b60      	cmp	r3, #96	; 0x60
 80094ac:	d10b      	bne.n	80094c6 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7ff f84a 	bl	8008558 <HAL_I2C_AbortCpltCallback>
}
 80094c4:	e006      	b.n	80094d4 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7ff f838 	bl	8008544 <HAL_I2C_ErrorCallback>
}
 80094d4:	bf00      	nop
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	ffff0000 	.word	0xffff0000
 80094e0:	080087bf 	.word	0x080087bf
 80094e4:	08009531 	.word	0x08009531

080094e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d103      	bne.n	8009506 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2200      	movs	r2, #0
 8009504:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b01      	cmp	r3, #1
 8009512:	d007      	beq.n	8009524 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	699a      	ldr	r2, [r3, #24]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f042 0201 	orr.w	r2, r2, #1
 8009522:	619a      	str	r2, [r3, #24]
  }
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009542:	2200      	movs	r2, #0
 8009544:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954a:	2200      	movs	r2, #0
 800954c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b60      	cmp	r3, #96	; 0x60
 8009558:	d107      	bne.n	800956a <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2220      	movs	r2, #32
 800955e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f7fe fff8 	bl	8008558 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009568:	e002      	b.n	8009570 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f7fe ffea 	bl	8008544 <HAL_I2C_ErrorCallback>
}
 8009570:	bf00      	nop
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	4613      	mov	r3, r2
 8009586:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009588:	e022      	b.n	80095d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009590:	d01e      	beq.n	80095d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009592:	f7fc f92f 	bl	80057f4 <HAL_GetTick>
 8009596:	4602      	mov	r2, r0
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d302      	bcc.n	80095a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d113      	bne.n	80095d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ac:	f043 0220 	orr.w	r2, r3, #32
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2220      	movs	r2, #32
 80095b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e00f      	b.n	80095f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699a      	ldr	r2, [r3, #24]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	4013      	ands	r3, r2
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	429a      	cmp	r2, r3
 80095de:	bf0c      	ite	eq
 80095e0:	2301      	moveq	r3, #1
 80095e2:	2300      	movne	r3, #0
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	461a      	mov	r2, r3
 80095e8:	79fb      	ldrb	r3, [r7, #7]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d0cd      	beq.n	800958a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009604:	e02c      	b.n	8009660 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	68b9      	ldr	r1, [r7, #8]
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 f8dc 	bl	80097c8 <I2C_IsAcknowledgeFailed>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e02a      	b.n	8009670 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009620:	d01e      	beq.n	8009660 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009622:	f7fc f8e7 	bl	80057f4 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	429a      	cmp	r2, r3
 8009630:	d302      	bcc.n	8009638 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d113      	bne.n	8009660 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963c:	f043 0220 	orr.w	r2, r3, #32
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2220      	movs	r2, #32
 8009648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e007      	b.n	8009670 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b02      	cmp	r3, #2
 800966c:	d1cb      	bne.n	8009606 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009684:	e028      	b.n	80096d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	68b9      	ldr	r1, [r7, #8]
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f000 f89c 	bl	80097c8 <I2C_IsAcknowledgeFailed>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e026      	b.n	80096e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800969a:	f7fc f8ab 	bl	80057f4 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d302      	bcc.n	80096b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d113      	bne.n	80096d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b4:	f043 0220 	orr.w	r2, r3, #32
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2220      	movs	r2, #32
 80096c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e007      	b.n	80096e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f003 0320 	and.w	r3, r3, #32
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d1cf      	bne.n	8009686 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80096fc:	e055      	b.n	80097aa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	68b9      	ldr	r1, [r7, #8]
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 f860 	bl	80097c8 <I2C_IsAcknowledgeFailed>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e053      	b.n	80097ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	f003 0320 	and.w	r3, r3, #32
 800971c:	2b20      	cmp	r3, #32
 800971e:	d129      	bne.n	8009774 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	f003 0304 	and.w	r3, r3, #4
 800972a:	2b04      	cmp	r3, #4
 800972c:	d105      	bne.n	800973a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	e03f      	b.n	80097ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2220      	movs	r2, #32
 8009740:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	6859      	ldr	r1, [r3, #4]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	4b1d      	ldr	r3, [pc, #116]	; (80097c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800974e:	400b      	ands	r3, r1
 8009750:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2220      	movs	r2, #32
 800975c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e022      	b.n	80097ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009774:	f7fc f83e 	bl	80057f4 <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	429a      	cmp	r2, r3
 8009782:	d302      	bcc.n	800978a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10f      	bne.n	80097aa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800978e:	f043 0220 	orr.w	r2, r3, #32
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2220      	movs	r2, #32
 800979a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e007      	b.n	80097ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	f003 0304 	and.w	r3, r3, #4
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	d1a2      	bne.n	80096fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	fe00e800 	.word	0xfe00e800

080097c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	f003 0310 	and.w	r3, r3, #16
 80097de:	2b10      	cmp	r3, #16
 80097e0:	d151      	bne.n	8009886 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097e2:	e022      	b.n	800982a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ea:	d01e      	beq.n	800982a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ec:	f7fc f802 	bl	80057f4 <HAL_GetTick>
 80097f0:	4602      	mov	r2, r0
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d302      	bcc.n	8009802 <I2C_IsAcknowledgeFailed+0x3a>
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d113      	bne.n	800982a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009806:	f043 0220 	orr.w	r2, r3, #32
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2220      	movs	r2, #32
 8009812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e02e      	b.n	8009888 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	f003 0320 	and.w	r3, r3, #32
 8009834:	2b20      	cmp	r3, #32
 8009836:	d1d5      	bne.n	80097e4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2210      	movs	r2, #16
 800983e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2220      	movs	r2, #32
 8009846:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f7ff fe4d 	bl	80094e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6859      	ldr	r1, [r3, #4]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <I2C_IsAcknowledgeFailed+0xc8>)
 800985a:	400b      	ands	r3, r1
 800985c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009862:	f043 0204 	orr.w	r2, r3, #4
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2220      	movs	r2, #32
 800986e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e000      	b.n	8009888 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	fe00e800 	.word	0xfe00e800

08009894 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	607b      	str	r3, [r7, #4]
 800989e:	460b      	mov	r3, r1
 80098a0:	817b      	strh	r3, [r7, #10]
 80098a2:	4613      	mov	r3, r2
 80098a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	0d5b      	lsrs	r3, r3, #21
 80098b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80098b4:	4b0d      	ldr	r3, [pc, #52]	; (80098ec <I2C_TransferConfig+0x58>)
 80098b6:	430b      	orrs	r3, r1
 80098b8:	43db      	mvns	r3, r3
 80098ba:	ea02 0103 	and.w	r1, r2, r3
 80098be:	897b      	ldrh	r3, [r7, #10]
 80098c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80098c4:	7a7b      	ldrb	r3, [r7, #9]
 80098c6:	041b      	lsls	r3, r3, #16
 80098c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098cc:	431a      	orrs	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	431a      	orrs	r2, r3
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	431a      	orrs	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	430a      	orrs	r2, r1
 80098dc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80098de:	bf00      	nop
 80098e0:	3714      	adds	r7, #20
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	03ff63ff 	.word	0x03ff63ff

080098f0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009904:	4a2f      	ldr	r2, [pc, #188]	; (80099c4 <I2C_Enable_IRQ+0xd4>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d004      	beq.n	8009914 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800990e:	4a2e      	ldr	r2, [pc, #184]	; (80099c8 <I2C_Enable_IRQ+0xd8>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d124      	bne.n	800995e <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009914:	887b      	ldrh	r3, [r7, #2]
 8009916:	f003 0304 	and.w	r3, r3, #4
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009924:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8009926:	887b      	ldrh	r3, [r7, #2]
 8009928:	f003 0311 	and.w	r3, r3, #17
 800992c:	2b11      	cmp	r3, #17
 800992e:	d103      	bne.n	8009938 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009936:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8009938:	887b      	ldrh	r3, [r7, #2]
 800993a:	f003 0312 	and.w	r3, r3, #18
 800993e:	2b12      	cmp	r3, #18
 8009940:	d103      	bne.n	800994a <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f043 0320 	orr.w	r3, r3, #32
 8009948:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800994a:	887b      	ldrh	r3, [r7, #2]
 800994c:	f003 0312 	and.w	r3, r3, #18
 8009950:	2b12      	cmp	r3, #18
 8009952:	d128      	bne.n	80099a6 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800995a:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800995c:	e023      	b.n	80099a6 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800995e:	887b      	ldrh	r3, [r7, #2]
 8009960:	f003 0304 	and.w	r3, r3, #4
 8009964:	2b00      	cmp	r3, #0
 8009966:	d003      	beq.n	8009970 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800996e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009970:	887b      	ldrh	r3, [r7, #2]
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8009980:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009982:	887b      	ldrh	r3, [r7, #2]
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8009992:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8009994:	887b      	ldrh	r3, [r7, #2]
 8009996:	f003 0312 	and.w	r3, r3, #18
 800999a:	2b12      	cmp	r3, #18
 800999c:	d103      	bne.n	80099a6 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f043 0320 	orr.w	r3, r3, #32
 80099a4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6819      	ldr	r1, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	430a      	orrs	r2, r1
 80099b4:	601a      	str	r2, [r3, #0]
}
 80099b6:	bf00      	nop
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	080089c5 	.word	0x080089c5
 80099c8:	08008bab 	.word	0x08008bab

080099cc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80099dc:	887b      	ldrh	r3, [r7, #2]
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00f      	beq.n	8009a06 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80099ec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80099fa:	2b28      	cmp	r3, #40	; 0x28
 80099fc:	d003      	beq.n	8009a06 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009a04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009a06:	887b      	ldrh	r3, [r7, #2]
 8009a08:	f003 0302 	and.w	r3, r3, #2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00f      	beq.n	8009a30 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009a16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a24:	2b28      	cmp	r3, #40	; 0x28
 8009a26:	d003      	beq.n	8009a30 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009a2e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009a30:	887b      	ldrh	r3, [r7, #2]
 8009a32:	f003 0304 	and.w	r3, r3, #4
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009a40:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8009a42:	887b      	ldrh	r3, [r7, #2]
 8009a44:	f003 0311 	and.w	r3, r3, #17
 8009a48:	2b11      	cmp	r3, #17
 8009a4a:	d103      	bne.n	8009a54 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009a52:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8009a54:	887b      	ldrh	r3, [r7, #2]
 8009a56:	f003 0312 	and.w	r3, r3, #18
 8009a5a:	2b12      	cmp	r3, #18
 8009a5c:	d103      	bne.n	8009a66 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f043 0320 	orr.w	r3, r3, #32
 8009a64:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8009a66:	887b      	ldrh	r3, [r7, #2]
 8009a68:	f003 0312 	and.w	r3, r3, #18
 8009a6c:	2b12      	cmp	r3, #18
 8009a6e:	d103      	bne.n	8009a78 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a76:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6819      	ldr	r1, [r3, #0]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	43da      	mvns	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	400a      	ands	r2, r1
 8009a88:	601a      	str	r2, [r3, #0]
}
 8009a8a:	bf00      	nop
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b20      	cmp	r3, #32
 8009aaa:	d138      	bne.n	8009b1e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d101      	bne.n	8009aba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e032      	b.n	8009b20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2224      	movs	r2, #36	; 0x24
 8009ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0201 	bic.w	r2, r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ae8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6819      	ldr	r1, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	430a      	orrs	r2, r1
 8009af8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f042 0201 	orr.w	r2, r2, #1
 8009b08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	e000      	b.n	8009b20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b1e:	2302      	movs	r3, #2
  }
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b20      	cmp	r3, #32
 8009b40:	d139      	bne.n	8009bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e033      	b.n	8009bb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2224      	movs	r2, #36	; 0x24
 8009b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f022 0201 	bic.w	r2, r2, #1
 8009b6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	021b      	lsls	r3, r3, #8
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f042 0201 	orr.w	r2, r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2220      	movs	r2, #32
 8009ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	e000      	b.n	8009bb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009bb6:	2302      	movs	r3, #2
  }
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bc8:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a04      	ldr	r2, [pc, #16]	; (8009be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bd2:	6013      	str	r3, [r2, #0]
}
 8009bd4:	bf00      	nop
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	58000400 	.word	0x58000400

08009be4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009be4:	b480      	push	{r7}
 8009be6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009be8:	4b04      	ldr	r3, [pc, #16]	; (8009bfc <HAL_PWREx_GetVoltageRange+0x18>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	58000400 	.word	0x58000400

08009c00 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8009c00:	b480      	push	{r7}
 8009c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8009c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c12:	d101      	bne.n	8009c18 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e000      	b.n	8009c1a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <LL_RCC_HSE_EnableBypass>:
{
 8009c24:	b480      	push	{r7}
 8009c26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8009c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c36:	6013      	str	r3, [r2, #0]
}
 8009c38:	bf00      	nop
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <LL_RCC_HSE_DisableBypass>:
{
 8009c42:	b480      	push	{r7}
 8009c44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8009c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c54:	6013      	str	r3, [r2, #0]
}
 8009c56:	bf00      	nop
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <LL_RCC_HSE_Enable>:
{
 8009c60:	b480      	push	{r7}
 8009c62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c72:	6013      	str	r3, [r2, #0]
}
 8009c74:	bf00      	nop
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr

08009c7e <LL_RCC_HSE_Disable>:
{
 8009c7e:	b480      	push	{r7}
 8009c80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8009c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c90:	6013      	str	r3, [r2, #0]
}
 8009c92:	bf00      	nop
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <LL_RCC_HSE_IsReady>:
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cae:	d101      	bne.n	8009cb4 <LL_RCC_HSE_IsReady+0x18>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e000      	b.n	8009cb6 <LL_RCC_HSE_IsReady+0x1a>
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <LL_RCC_HSI_Enable>:
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cd2:	6013      	str	r3, [r2, #0]
}
 8009cd4:	bf00      	nop
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <LL_RCC_HSI_Disable>:
{
 8009cde:	b480      	push	{r7}
 8009ce0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8009ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cf0:	6013      	str	r3, [r2, #0]
}
 8009cf2:	bf00      	nop
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <LL_RCC_HSI_IsReady>:
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d0e:	d101      	bne.n	8009d14 <LL_RCC_HSI_IsReady+0x18>
 8009d10:	2301      	movs	r3, #1
 8009d12:	e000      	b.n	8009d16 <LL_RCC_HSI_IsReady+0x1a>
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <LL_RCC_HSI_SetCalibTrimming>:
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8009d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	061b      	lsls	r3, r3, #24
 8009d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	604b      	str	r3, [r1, #4]
}
 8009d3e:	bf00      	nop
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <LL_RCC_HSI48_Enable>:
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8009d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d5a:	f043 0301 	orr.w	r3, r3, #1
 8009d5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8009d62:	bf00      	nop
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <LL_RCC_HSI48_Disable>:
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8009d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d7c:	f023 0301 	bic.w	r3, r3, #1
 8009d80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8009d84:	bf00      	nop
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <LL_RCC_HSI48_IsReady>:
{
 8009d8e:	b480      	push	{r7}
 8009d90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8009d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d101      	bne.n	8009da6 <LL_RCC_HSI48_IsReady+0x18>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <LL_RCC_HSI48_IsReady+0x1a>
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <LL_RCC_LSE_Enable>:
{
 8009db2:	b480      	push	{r7}
 8009db4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dc2:	f043 0301 	orr.w	r3, r3, #1
 8009dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009dca:	bf00      	nop
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <LL_RCC_LSE_Disable>:
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009de4:	f023 0301 	bic.w	r3, r3, #1
 8009de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009dec:	bf00      	nop
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <LL_RCC_LSE_EnableBypass>:
{
 8009df6:	b480      	push	{r7}
 8009df8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e06:	f043 0304 	orr.w	r3, r3, #4
 8009e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009e0e:	bf00      	nop
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <LL_RCC_LSE_DisableBypass>:
{
 8009e18:	b480      	push	{r7}
 8009e1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e28:	f023 0304 	bic.w	r3, r3, #4
 8009e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009e30:	bf00      	nop
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <LL_RCC_LSE_IsReady>:
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e46:	f003 0302 	and.w	r3, r3, #2
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d101      	bne.n	8009e52 <LL_RCC_LSE_IsReady+0x18>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e000      	b.n	8009e54 <LL_RCC_LSE_IsReady+0x1a>
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <LL_RCC_LSI1_Enable>:
{
 8009e5e:	b480      	push	{r7}
 8009e60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e6e:	f043 0301 	orr.w	r3, r3, #1
 8009e72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009e76:	bf00      	nop
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <LL_RCC_LSI1_Disable>:
{
 8009e80:	b480      	push	{r7}
 8009e82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e90:	f023 0301 	bic.w	r3, r3, #1
 8009e94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009e98:	bf00      	nop
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <LL_RCC_LSI1_IsReady>:
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8009ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d101      	bne.n	8009eba <LL_RCC_LSI1_IsReady+0x18>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e000      	b.n	8009ebc <LL_RCC_LSI1_IsReady+0x1a>
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <LL_RCC_LSI2_Enable>:
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ed6:	f043 0304 	orr.w	r3, r3, #4
 8009eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009ede:	bf00      	nop
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <LL_RCC_LSI2_Disable>:
{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ef8:	f023 0304 	bic.w	r3, r3, #4
 8009efc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009f00:	bf00      	nop
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <LL_RCC_LSI2_IsReady>:
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8009f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f16:	f003 0308 	and.w	r3, r3, #8
 8009f1a:	2b08      	cmp	r3, #8
 8009f1c:	d101      	bne.n	8009f22 <LL_RCC_LSI2_IsReady+0x18>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e000      	b.n	8009f24 <LL_RCC_LSI2_IsReady+0x1a>
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <LL_RCC_LSI2_SetTrimming>:
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b083      	sub	sp, #12
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8009f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	021b      	lsls	r3, r3, #8
 8009f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <LL_RCC_MSI_Enable>:
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8009f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f6a:	f043 0301 	orr.w	r3, r3, #1
 8009f6e:	6013      	str	r3, [r2, #0]
}
 8009f70:	bf00      	nop
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <LL_RCC_MSI_Disable>:
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8009f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f88:	f023 0301 	bic.w	r3, r3, #1
 8009f8c:	6013      	str	r3, [r2, #0]
}
 8009f8e:	bf00      	nop
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <LL_RCC_MSI_IsReady>:
{
 8009f98:	b480      	push	{r7}
 8009f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8009f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d101      	bne.n	8009fae <LL_RCC_MSI_IsReady+0x16>
 8009faa:	2301      	movs	r3, #1
 8009fac:	e000      	b.n	8009fb0 <LL_RCC_MSI_IsReady+0x18>
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <LL_RCC_MSI_SetRange>:
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b083      	sub	sp, #12
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8009fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	600b      	str	r3, [r1, #0]
}
 8009fd6:	bf00      	nop
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <LL_RCC_MSI_GetRange>:
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b083      	sub	sp, #12
 8009fe6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8009fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ff2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2bb0      	cmp	r3, #176	; 0xb0
 8009ff8:	d901      	bls.n	8009ffe <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8009ffa:	23b0      	movs	r3, #176	; 0xb0
 8009ffc:	607b      	str	r3, [r7, #4]
  return msiRange;
 8009ffe:	687b      	ldr	r3, [r7, #4]
}
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <LL_RCC_MSI_SetCalibTrimming>:
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	021b      	lsls	r3, r3, #8
 800a022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a026:	4313      	orrs	r3, r2
 800a028:	604b      	str	r3, [r1, #4]
}
 800a02a:	bf00      	nop
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <LL_RCC_SetSysClkSource>:
{
 800a036:	b480      	push	{r7}
 800a038:	b083      	sub	sp, #12
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a03e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f023 0203 	bic.w	r2, r3, #3
 800a048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4313      	orrs	r3, r2
 800a050:	608b      	str	r3, [r1, #8]
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <LL_RCC_GetSysClkSource>:
{
 800a05e:	b480      	push	{r7}
 800a060:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	f003 030c 	and.w	r3, r3, #12
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <LL_RCC_SetAHBPrescaler>:
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a07e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4313      	orrs	r3, r2
 800a090:	608b      	str	r3, [r1, #8]
}
 800a092:	bf00      	nop
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <LL_C2_RCC_SetAHBPrescaler>:
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b083      	sub	sp, #12
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a0a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a0ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a0b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <LL_RCC_SetAHB4Prescaler>:
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b083      	sub	sp, #12
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a0d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a0da:	f023 020f 	bic.w	r2, r3, #15
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	091b      	lsrs	r3, r3, #4
 800a0e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <LL_RCC_SetAPB1Prescaler>:
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a10a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4313      	orrs	r3, r2
 800a112:	608b      	str	r3, [r1, #8]
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <LL_RCC_SetAPB2Prescaler>:
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4313      	orrs	r3, r2
 800a13a:	608b      	str	r3, [r1, #8]
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <LL_RCC_GetAHBPrescaler>:
{
 800a148:	b480      	push	{r7}
 800a14a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a14c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a156:	4618      	mov	r0, r3
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <LL_C2_RCC_GetAHBPrescaler>:
{
 800a160:	b480      	push	{r7}
 800a162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800a164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a168:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a16c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a170:	4618      	mov	r0, r3
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <LL_RCC_GetAHB4Prescaler>:
{
 800a17a:	b480      	push	{r7}
 800a17c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a17e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a182:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a186:	011b      	lsls	r3, r3, #4
 800a188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <LL_RCC_GetAPB1Prescaler>:
{
 800a196:	b480      	push	{r7}
 800a198:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a19a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr

0800a1ae <LL_RCC_GetAPB2Prescaler>:
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a1b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a1ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1d8:	6013      	str	r3, [r2, #0]
}
 800a1da:	bf00      	nop
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a1e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1f6:	6013      	str	r3, [r2, #0]
}
 800a1f8:	bf00      	nop
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800a202:	b480      	push	{r7}
 800a204:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a214:	d101      	bne.n	800a21a <LL_RCC_PLL_IsReady+0x18>
 800a216:	2301      	movs	r3, #1
 800a218:	e000      	b.n	800a21c <LL_RCC_PLL_IsReady+0x1a>
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a226:	b480      	push	{r7}
 800a228:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a22a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	0a1b      	lsrs	r3, r3, #8
 800a232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800a236:	4618      	mov	r0, r3
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800a24e:	4618      	mov	r0, r3
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a258:	b480      	push	{r7}
 800a25a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a25c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800a266:	4618      	mov	r0, r3
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a270:	b480      	push	{r7}
 800a272:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	f003 0303 	and.w	r3, r3, #3
}
 800a27e:	4618      	mov	r0, r3
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800a288:	b480      	push	{r7}
 800a28a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a28c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a29a:	d101      	bne.n	800a2a0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e000      	b.n	800a2a2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a2b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a2b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2c0:	d101      	bne.n	800a2c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e000      	b.n	800a2c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a2d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a2de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2e6:	d101      	bne.n	800a2ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e000      	b.n	800a2ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a2fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a30a:	d101      	bne.n	800a310 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a30c:	2301      	movs	r3, #1
 800a30e:	e000      	b.n	800a312 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a32a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a32e:	d101      	bne.n	800a334 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a330:	2301      	movs	r3, #1
 800a332:	e000      	b.n	800a336 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a340:	b590      	push	{r4, r7, lr}
 800a342:	b08b      	sub	sp, #44	; 0x2c
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d101      	bne.n	800a352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e34b      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0320 	and.w	r3, r3, #32
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 808f 	beq.w	800a47e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a360:	f7ff fe7d 	bl	800a05e <LL_RCC_GetSysClkSource>
 800a364:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a366:	f7ff ff83 	bl	800a270 <LL_RCC_PLL_GetMainSource>
 800a36a:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d005      	beq.n	800a37e <HAL_RCC_OscConfig+0x3e>
 800a372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a374:	2b0c      	cmp	r3, #12
 800a376:	d149      	bne.n	800a40c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d146      	bne.n	800a40c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a37e:	f7ff fe0b 	bl	8009f98 <LL_RCC_MSI_IsReady>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d005      	beq.n	800a394 <HAL_RCC_OscConfig+0x54>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	69db      	ldr	r3, [r3, #28]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d101      	bne.n	800a394 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	e32a      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a398:	f7ff fe23 	bl	8009fe2 <LL_RCC_MSI_GetRange>
 800a39c:	4603      	mov	r3, r0
 800a39e:	429c      	cmp	r4, r3
 800a3a0:	d914      	bls.n	800a3cc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 fd40 	bl	800ae2c <RCC_SetFlashLatencyFromMSIRange>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e319      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7ff fdfd 	bl	8009fba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff fe21 	bl	800a00c <LL_RCC_MSI_SetCalibTrimming>
 800a3ca:	e013      	b.n	800a3f4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff fdf2 	bl	8009fba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7ff fe16 	bl	800a00c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 fd21 	bl	800ae2c <RCC_SetFlashLatencyFromMSIRange>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e2fa      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800a3f4:	f7fa ff0c 	bl	8005210 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a3f8:	4bb4      	ldr	r3, [pc, #720]	; (800a6cc <HAL_RCC_OscConfig+0x38c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fa fdeb 	bl	8004fd8 <HAL_InitTick>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d039      	beq.n	800a47c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e2ee      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	69db      	ldr	r3, [r3, #28]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d01e      	beq.n	800a452 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a414:	f7ff fda2 	bl	8009f5c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a418:	f7fb f9ec 	bl	80057f4 <HAL_GetTick>
 800a41c:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800a41e:	e008      	b.n	800a432 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a420:	f7fb f9e8 	bl	80057f4 <HAL_GetTick>
 800a424:	4602      	mov	r2, r0
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d901      	bls.n	800a432 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e2db      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800a432:	f7ff fdb1 	bl	8009f98 <LL_RCC_MSI_IsReady>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0f1      	beq.n	800a420 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	4618      	mov	r0, r3
 800a442:	f7ff fdba 	bl	8009fba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a1b      	ldr	r3, [r3, #32]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7ff fdde 	bl	800a00c <LL_RCC_MSI_SetCalibTrimming>
 800a450:	e015      	b.n	800a47e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a452:	f7ff fd92 	bl	8009f7a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a456:	f7fb f9cd 	bl	80057f4 <HAL_GetTick>
 800a45a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800a45c:	e008      	b.n	800a470 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a45e:	f7fb f9c9 	bl	80057f4 <HAL_GetTick>
 800a462:	4602      	mov	r2, r0
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d901      	bls.n	800a470 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e2bc      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800a470:	f7ff fd92 	bl	8009f98 <LL_RCC_MSI_IsReady>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1f1      	bne.n	800a45e <HAL_RCC_OscConfig+0x11e>
 800a47a:	e000      	b.n	800a47e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a47c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0301 	and.w	r3, r3, #1
 800a486:	2b00      	cmp	r3, #0
 800a488:	d05a      	beq.n	800a540 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a48a:	f7ff fde8 	bl	800a05e <LL_RCC_GetSysClkSource>
 800a48e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a490:	f7ff feee 	bl	800a270 <LL_RCC_PLL_GetMainSource>
 800a494:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	2b08      	cmp	r3, #8
 800a49a:	d005      	beq.n	800a4a8 <HAL_RCC_OscConfig+0x168>
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	2b0c      	cmp	r3, #12
 800a4a0:	d10d      	bne.n	800a4be <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	2b03      	cmp	r3, #3
 800a4a6:	d10a      	bne.n	800a4be <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4a8:	f7ff fbf8 	bl	8009c9c <LL_RCC_HSE_IsReady>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d045      	beq.n	800a53e <HAL_RCC_OscConfig+0x1fe>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d141      	bne.n	800a53e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e295      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c6:	d102      	bne.n	800a4ce <HAL_RCC_OscConfig+0x18e>
 800a4c8:	f7ff fbca 	bl	8009c60 <LL_RCC_HSE_Enable>
 800a4cc:	e00d      	b.n	800a4ea <HAL_RCC_OscConfig+0x1aa>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4d6:	d104      	bne.n	800a4e2 <HAL_RCC_OscConfig+0x1a2>
 800a4d8:	f7ff fba4 	bl	8009c24 <LL_RCC_HSE_EnableBypass>
 800a4dc:	f7ff fbc0 	bl	8009c60 <LL_RCC_HSE_Enable>
 800a4e0:	e003      	b.n	800a4ea <HAL_RCC_OscConfig+0x1aa>
 800a4e2:	f7ff fbcc 	bl	8009c7e <LL_RCC_HSE_Disable>
 800a4e6:	f7ff fbac 	bl	8009c42 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d012      	beq.n	800a518 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4f2:	f7fb f97f 	bl	80057f4 <HAL_GetTick>
 800a4f6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800a4f8:	e008      	b.n	800a50c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4fa:	f7fb f97b 	bl	80057f4 <HAL_GetTick>
 800a4fe:	4602      	mov	r2, r0
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	2b64      	cmp	r3, #100	; 0x64
 800a506:	d901      	bls.n	800a50c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e26e      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800a50c:	f7ff fbc6 	bl	8009c9c <LL_RCC_HSE_IsReady>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0f1      	beq.n	800a4fa <HAL_RCC_OscConfig+0x1ba>
 800a516:	e013      	b.n	800a540 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a518:	f7fb f96c 	bl	80057f4 <HAL_GetTick>
 800a51c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800a51e:	e008      	b.n	800a532 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a520:	f7fb f968 	bl	80057f4 <HAL_GetTick>
 800a524:	4602      	mov	r2, r0
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	2b64      	cmp	r3, #100	; 0x64
 800a52c:	d901      	bls.n	800a532 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	e25b      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800a532:	f7ff fbb3 	bl	8009c9c <LL_RCC_HSE_IsReady>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1f1      	bne.n	800a520 <HAL_RCC_OscConfig+0x1e0>
 800a53c:	e000      	b.n	800a540 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a53e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0302 	and.w	r3, r3, #2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d051      	beq.n	800a5f0 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a54c:	f7ff fd87 	bl	800a05e <LL_RCC_GetSysClkSource>
 800a550:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a552:	f7ff fe8d 	bl	800a270 <LL_RCC_PLL_GetMainSource>
 800a556:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	d005      	beq.n	800a56a <HAL_RCC_OscConfig+0x22a>
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	2b0c      	cmp	r3, #12
 800a562:	d113      	bne.n	800a58c <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b02      	cmp	r3, #2
 800a568:	d110      	bne.n	800a58c <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a56a:	f7ff fbc7 	bl	8009cfc <LL_RCC_HSI_IsReady>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d005      	beq.n	800a580 <HAL_RCC_OscConfig+0x240>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e234      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff fbcb 	bl	8009d20 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a58a:	e031      	b.n	800a5f0 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d019      	beq.n	800a5c8 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a594:	f7ff fb94 	bl	8009cc0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a598:	f7fb f92c 	bl	80057f4 <HAL_GetTick>
 800a59c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800a59e:	e008      	b.n	800a5b2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5a0:	f7fb f928 	bl	80057f4 <HAL_GetTick>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d901      	bls.n	800a5b2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e21b      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800a5b2:	f7ff fba3 	bl	8009cfc <LL_RCC_HSI_IsReady>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0f1      	beq.n	800a5a0 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff fbad 	bl	8009d20 <LL_RCC_HSI_SetCalibTrimming>
 800a5c6:	e013      	b.n	800a5f0 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a5c8:	f7ff fb89 	bl	8009cde <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5cc:	f7fb f912 	bl	80057f4 <HAL_GetTick>
 800a5d0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800a5d2:	e008      	b.n	800a5e6 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5d4:	f7fb f90e 	bl	80057f4 <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d901      	bls.n	800a5e6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e201      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800a5e6:	f7ff fb89 	bl	8009cfc <LL_RCC_HSI_IsReady>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1f1      	bne.n	800a5d4 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0308 	and.w	r3, r3, #8
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d106      	bne.n	800a60a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 80a2 	beq.w	800a74e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d075      	beq.n	800a6fe <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0310 	and.w	r3, r3, #16
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d046      	beq.n	800a6ac <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800a61e:	f7ff fc40 	bl	8009ea2 <LL_RCC_LSI1_IsReady>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d113      	bne.n	800a650 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800a628:	f7ff fc19 	bl	8009e5e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a62c:	f7fb f8e2 	bl	80057f4 <HAL_GetTick>
 800a630:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800a632:	e008      	b.n	800a646 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a634:	f7fb f8de 	bl	80057f4 <HAL_GetTick>
 800a638:	4602      	mov	r2, r0
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d901      	bls.n	800a646 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	e1d1      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800a646:	f7ff fc2c 	bl	8009ea2 <LL_RCC_LSI1_IsReady>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d0f1      	beq.n	800a634 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800a650:	f7ff fc39 	bl	8009ec6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a654:	f7fb f8ce 	bl	80057f4 <HAL_GetTick>
 800a658:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800a65a:	e008      	b.n	800a66e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800a65c:	f7fb f8ca 	bl	80057f4 <HAL_GetTick>
 800a660:	4602      	mov	r2, r0
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	2b03      	cmp	r3, #3
 800a668:	d901      	bls.n	800a66e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e1bd      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800a66e:	f7ff fc4c 	bl	8009f0a <LL_RCC_LSI2_IsReady>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d0f1      	beq.n	800a65c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	699b      	ldr	r3, [r3, #24]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff fc56 	bl	8009f2e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800a682:	f7ff fbfd 	bl	8009e80 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a686:	f7fb f8b5 	bl	80057f4 <HAL_GetTick>
 800a68a:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800a68c:	e008      	b.n	800a6a0 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a68e:	f7fb f8b1 	bl	80057f4 <HAL_GetTick>
 800a692:	4602      	mov	r2, r0
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d901      	bls.n	800a6a0 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e1a4      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800a6a0:	f7ff fbff 	bl	8009ea2 <LL_RCC_LSI1_IsReady>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1f1      	bne.n	800a68e <HAL_RCC_OscConfig+0x34e>
 800a6aa:	e050      	b.n	800a74e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800a6ac:	f7ff fbd7 	bl	8009e5e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b0:	f7fb f8a0 	bl	80057f4 <HAL_GetTick>
 800a6b4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800a6b6:	e00b      	b.n	800a6d0 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a6b8:	f7fb f89c 	bl	80057f4 <HAL_GetTick>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d904      	bls.n	800a6d0 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e18f      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
 800a6ca:	bf00      	nop
 800a6cc:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 800a6d0:	f7ff fbe7 	bl	8009ea2 <LL_RCC_LSI1_IsReady>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0ee      	beq.n	800a6b8 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800a6da:	f7ff fc05 	bl	8009ee8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800a6de:	e008      	b.n	800a6f2 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800a6e0:	f7fb f888 	bl	80057f4 <HAL_GetTick>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	d901      	bls.n	800a6f2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e17b      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800a6f2:	f7ff fc0a 	bl	8009f0a <LL_RCC_LSI2_IsReady>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1f1      	bne.n	800a6e0 <HAL_RCC_OscConfig+0x3a0>
 800a6fc:	e027      	b.n	800a74e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800a6fe:	f7ff fbf3 	bl	8009ee8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a702:	f7fb f877 	bl	80057f4 <HAL_GetTick>
 800a706:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800a708:	e008      	b.n	800a71c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800a70a:	f7fb f873 	bl	80057f4 <HAL_GetTick>
 800a70e:	4602      	mov	r2, r0
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	2b03      	cmp	r3, #3
 800a716:	d901      	bls.n	800a71c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	e166      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800a71c:	f7ff fbf5 	bl	8009f0a <LL_RCC_LSI2_IsReady>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1f1      	bne.n	800a70a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800a726:	f7ff fbab 	bl	8009e80 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a72a:	f7fb f863 	bl	80057f4 <HAL_GetTick>
 800a72e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800a730:	e008      	b.n	800a744 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a732:	f7fb f85f 	bl	80057f4 <HAL_GetTick>
 800a736:	4602      	mov	r2, r0
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d901      	bls.n	800a744 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e152      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800a744:	f7ff fbad 	bl	8009ea2 <LL_RCC_LSI1_IsReady>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1f1      	bne.n	800a732 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0304 	and.w	r3, r3, #4
 800a756:	2b00      	cmp	r3, #0
 800a758:	d05b      	beq.n	800a812 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a75a:	4ba6      	ldr	r3, [pc, #664]	; (800a9f4 <HAL_RCC_OscConfig+0x6b4>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a762:	2b00      	cmp	r3, #0
 800a764:	d114      	bne.n	800a790 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a766:	f7ff fa2d 	bl	8009bc4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a76a:	f7fb f843 	bl	80057f4 <HAL_GetTick>
 800a76e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a770:	e008      	b.n	800a784 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a772:	f7fb f83f 	bl	80057f4 <HAL_GetTick>
 800a776:	4602      	mov	r2, r0
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d901      	bls.n	800a784 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a780:	2303      	movs	r3, #3
 800a782:	e132      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a784:	4b9b      	ldr	r3, [pc, #620]	; (800a9f4 <HAL_RCC_OscConfig+0x6b4>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d0f0      	beq.n	800a772 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d102      	bne.n	800a79e <HAL_RCC_OscConfig+0x45e>
 800a798:	f7ff fb0b 	bl	8009db2 <LL_RCC_LSE_Enable>
 800a79c:	e00c      	b.n	800a7b8 <HAL_RCC_OscConfig+0x478>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	2b05      	cmp	r3, #5
 800a7a4:	d104      	bne.n	800a7b0 <HAL_RCC_OscConfig+0x470>
 800a7a6:	f7ff fb26 	bl	8009df6 <LL_RCC_LSE_EnableBypass>
 800a7aa:	f7ff fb02 	bl	8009db2 <LL_RCC_LSE_Enable>
 800a7ae:	e003      	b.n	800a7b8 <HAL_RCC_OscConfig+0x478>
 800a7b0:	f7ff fb10 	bl	8009dd4 <LL_RCC_LSE_Disable>
 800a7b4:	f7ff fb30 	bl	8009e18 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d014      	beq.n	800a7ea <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7c0:	f7fb f818 	bl	80057f4 <HAL_GetTick>
 800a7c4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800a7c6:	e00a      	b.n	800a7de <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7c8:	f7fb f814 	bl	80057f4 <HAL_GetTick>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d901      	bls.n	800a7de <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e105      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800a7de:	f7ff fb2c 	bl	8009e3a <LL_RCC_LSE_IsReady>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d0ef      	beq.n	800a7c8 <HAL_RCC_OscConfig+0x488>
 800a7e8:	e013      	b.n	800a812 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7ea:	f7fb f803 	bl	80057f4 <HAL_GetTick>
 800a7ee:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800a7f0:	e00a      	b.n	800a808 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7f2:	f7fa ffff 	bl	80057f4 <HAL_GetTick>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a800:	4293      	cmp	r3, r2
 800a802:	d901      	bls.n	800a808 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800a804:	2303      	movs	r3, #3
 800a806:	e0f0      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 800a808:	f7ff fb17 	bl	8009e3a <LL_RCC_LSE_IsReady>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1ef      	bne.n	800a7f2 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d02c      	beq.n	800a878 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a822:	2b00      	cmp	r3, #0
 800a824:	d014      	beq.n	800a850 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a826:	f7ff fa90 	bl	8009d4a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a82a:	f7fa ffe3 	bl	80057f4 <HAL_GetTick>
 800a82e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800a830:	e008      	b.n	800a844 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a832:	f7fa ffdf 	bl	80057f4 <HAL_GetTick>
 800a836:	4602      	mov	r2, r0
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d901      	bls.n	800a844 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800a840:	2303      	movs	r3, #3
 800a842:	e0d2      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800a844:	f7ff faa3 	bl	8009d8e <LL_RCC_HSI48_IsReady>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0f1      	beq.n	800a832 <HAL_RCC_OscConfig+0x4f2>
 800a84e:	e013      	b.n	800a878 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a850:	f7ff fa8c 	bl	8009d6c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a854:	f7fa ffce 	bl	80057f4 <HAL_GetTick>
 800a858:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800a85a:	e008      	b.n	800a86e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a85c:	f7fa ffca 	bl	80057f4 <HAL_GetTick>
 800a860:	4602      	mov	r2, r0
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	2b02      	cmp	r3, #2
 800a868:	d901      	bls.n	800a86e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e0bd      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800a86e:	f7ff fa8e 	bl	8009d8e <LL_RCC_HSI48_IsReady>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1f1      	bne.n	800a85c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 80b3 	beq.w	800a9e8 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a882:	f7ff fbec 	bl	800a05e <LL_RCC_GetSysClkSource>
 800a886:	4603      	mov	r3, r0
 800a888:	2b0c      	cmp	r3, #12
 800a88a:	d076      	beq.n	800a97a <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a890:	2b02      	cmp	r3, #2
 800a892:	d14b      	bne.n	800a92c <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a894:	f7ff fca6 	bl	800a1e4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a898:	f7fa ffac 	bl	80057f4 <HAL_GetTick>
 800a89c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800a89e:	e008      	b.n	800a8b2 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8a0:	f7fa ffa8 	bl	80057f4 <HAL_GetTick>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d901      	bls.n	800a8b2 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e09b      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800a8b2:	f7ff fca6 	bl	800a202 <LL_RCC_PLL_IsReady>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1f1      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a8bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8c0:	68da      	ldr	r2, [r3, #12]
 800a8c2:	4b4d      	ldr	r3, [pc, #308]	; (800a9f8 <HAL_RCC_OscConfig+0x6b8>)
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a8ce:	4311      	orrs	r1, r2
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a8d4:	0212      	lsls	r2, r2, #8
 800a8d6:	4311      	orrs	r1, r2
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a8dc:	4311      	orrs	r1, r2
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a8e2:	4311      	orrs	r1, r2
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a8f2:	f7ff fc68 	bl	800a1c6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a8f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a904:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a906:	f7fa ff75 	bl	80057f4 <HAL_GetTick>
 800a90a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800a90c:	e008      	b.n	800a920 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a90e:	f7fa ff71 	bl	80057f4 <HAL_GetTick>
 800a912:	4602      	mov	r2, r0
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d901      	bls.n	800a920 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800a91c:	2303      	movs	r3, #3
 800a91e:	e064      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800a920:	f7ff fc6f 	bl	800a202 <LL_RCC_PLL_IsReady>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d0f1      	beq.n	800a90e <HAL_RCC_OscConfig+0x5ce>
 800a92a:	e05d      	b.n	800a9e8 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a92c:	f7ff fc5a 	bl	800a1e4 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800a930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a93a:	f023 0303 	bic.w	r3, r3, #3
 800a93e:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800a940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a94a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800a94e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a952:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a954:	f7fa ff4e 	bl	80057f4 <HAL_GetTick>
 800a958:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800a95a:	e008      	b.n	800a96e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a95c:	f7fa ff4a 	bl	80057f4 <HAL_GetTick>
 800a960:	4602      	mov	r2, r0
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	2b02      	cmp	r3, #2
 800a968:	d901      	bls.n	800a96e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800a96a:	2303      	movs	r3, #3
 800a96c:	e03d      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800a96e:	f7ff fc48 	bl	800a202 <LL_RCC_PLL_IsReady>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1f1      	bne.n	800a95c <HAL_RCC_OscConfig+0x61c>
 800a978:	e036      	b.n	800a9e8 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d101      	bne.n	800a986 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	e031      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800a986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f003 0203 	and.w	r2, r3, #3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a998:	429a      	cmp	r2, r3
 800a99a:	d123      	bne.n	800a9e4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d11c      	bne.n	800a9e4 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	0a1b      	lsrs	r3, r3, #8
 800a9ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d114      	bne.n	800a9e4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d10d      	bne.n	800a9e4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d106      	bne.n	800a9e4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d001      	beq.n	800a9e8 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e000      	b.n	800a9ea <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	372c      	adds	r7, #44	; 0x2c
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd90      	pop	{r4, r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	58000400 	.word	0x58000400
 800a9f8:	11c1808c 	.word	0x11c1808c

0800a9fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e12a      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa10:	4b97      	ldr	r3, [pc, #604]	; (800ac70 <HAL_RCC_ClockConfig+0x274>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 0307 	and.w	r3, r3, #7
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d91b      	bls.n	800aa56 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa1e:	4b94      	ldr	r3, [pc, #592]	; (800ac70 <HAL_RCC_ClockConfig+0x274>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f023 0207 	bic.w	r2, r3, #7
 800aa26:	4992      	ldr	r1, [pc, #584]	; (800ac70 <HAL_RCC_ClockConfig+0x274>)
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa2e:	f7fa fee1 	bl	80057f4 <HAL_GetTick>
 800aa32:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa34:	e008      	b.n	800aa48 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800aa36:	f7fa fedd 	bl	80057f4 <HAL_GetTick>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d901      	bls.n	800aa48 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e10e      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa48:	4b89      	ldr	r3, [pc, #548]	; (800ac70 <HAL_RCC_ClockConfig+0x274>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 0307 	and.w	r3, r3, #7
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d1ef      	bne.n	800aa36 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 0302 	and.w	r3, r3, #2
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d016      	beq.n	800aa90 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7ff fb05 	bl	800a076 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800aa6c:	f7fa fec2 	bl	80057f4 <HAL_GetTick>
 800aa70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800aa72:	e008      	b.n	800aa86 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800aa74:	f7fa febe 	bl	80057f4 <HAL_GetTick>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d901      	bls.n	800aa86 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800aa82:	2303      	movs	r3, #3
 800aa84:	e0ef      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800aa86:	f7ff fbff 	bl	800a288 <LL_RCC_IsActiveFlag_HPRE>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d0f1      	beq.n	800aa74 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 0320 	and.w	r3, r3, #32
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d016      	beq.n	800aaca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7ff fafc 	bl	800a09e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800aaa6:	f7fa fea5 	bl	80057f4 <HAL_GetTick>
 800aaaa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800aaac:	e008      	b.n	800aac0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800aaae:	f7fa fea1 	bl	80057f4 <HAL_GetTick>
 800aab2:	4602      	mov	r2, r0
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d901      	bls.n	800aac0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e0d2      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800aac0:	f7ff fbf4 	bl	800a2ac <LL_RCC_IsActiveFlag_C2HPRE>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0f1      	beq.n	800aaae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d016      	beq.n	800ab04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff faf5 	bl	800a0ca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800aae0:	f7fa fe88 	bl	80057f4 <HAL_GetTick>
 800aae4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800aae6:	e008      	b.n	800aafa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800aae8:	f7fa fe84 	bl	80057f4 <HAL_GetTick>
 800aaec:	4602      	mov	r2, r0
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d901      	bls.n	800aafa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e0b5      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800aafa:	f7ff fbea 	bl	800a2d2 <LL_RCC_IsActiveFlag_SHDHPRE>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d0f1      	beq.n	800aae8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 0304 	and.w	r3, r3, #4
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d016      	beq.n	800ab3e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff faef 	bl	800a0f8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ab1a:	f7fa fe6b 	bl	80057f4 <HAL_GetTick>
 800ab1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ab20:	e008      	b.n	800ab34 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ab22:	f7fa fe67 	bl	80057f4 <HAL_GetTick>
 800ab26:	4602      	mov	r2, r0
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d901      	bls.n	800ab34 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e098      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ab34:	f7ff fbe0 	bl	800a2f8 <LL_RCC_IsActiveFlag_PPRE1>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d0f1      	beq.n	800ab22 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 0308 	and.w	r3, r3, #8
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d017      	beq.n	800ab7a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	00db      	lsls	r3, r3, #3
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7ff fae5 	bl	800a120 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ab56:	f7fa fe4d 	bl	80057f4 <HAL_GetTick>
 800ab5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ab5c:	e008      	b.n	800ab70 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ab5e:	f7fa fe49 	bl	80057f4 <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d901      	bls.n	800ab70 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e07a      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ab70:	f7ff fbd4 	bl	800a31c <LL_RCC_IsActiveFlag_PPRE2>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d0f1      	beq.n	800ab5e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d043      	beq.n	800ac0e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d106      	bne.n	800ab9c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800ab8e:	f7ff f885 	bl	8009c9c <LL_RCC_HSE_IsReady>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d11e      	bne.n	800abd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e064      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	2b03      	cmp	r3, #3
 800aba2:	d106      	bne.n	800abb2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800aba4:	f7ff fb2d 	bl	800a202 <LL_RCC_PLL_IsReady>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d113      	bne.n	800abd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e059      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d106      	bne.n	800abc8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800abba:	f7ff f9ed 	bl	8009f98 <LL_RCC_MSI_IsReady>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d108      	bne.n	800abd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e04e      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800abc8:	f7ff f898 	bl	8009cfc <LL_RCC_HSI_IsReady>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e047      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	4618      	mov	r0, r3
 800abdc:	f7ff fa2b 	bl	800a036 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abe0:	f7fa fe08 	bl	80057f4 <HAL_GetTick>
 800abe4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abe6:	e00a      	b.n	800abfe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800abe8:	f7fa fe04 	bl	80057f4 <HAL_GetTick>
 800abec:	4602      	mov	r2, r0
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d901      	bls.n	800abfe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e033      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abfe:	f7ff fa2e 	bl	800a05e <LL_RCC_GetSysClkSource>
 800ac02:	4602      	mov	r2, r0
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d1ec      	bne.n	800abe8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac0e:	4b18      	ldr	r3, [pc, #96]	; (800ac70 <HAL_RCC_ClockConfig+0x274>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 0307 	and.w	r3, r3, #7
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d21b      	bcs.n	800ac54 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac1c:	4b14      	ldr	r3, [pc, #80]	; (800ac70 <HAL_RCC_ClockConfig+0x274>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f023 0207 	bic.w	r2, r3, #7
 800ac24:	4912      	ldr	r1, [pc, #72]	; (800ac70 <HAL_RCC_ClockConfig+0x274>)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac2c:	f7fa fde2 	bl	80057f4 <HAL_GetTick>
 800ac30:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac32:	e008      	b.n	800ac46 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ac34:	f7fa fdde 	bl	80057f4 <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d901      	bls.n	800ac46 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e00f      	b.n	800ac66 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac46:	4b0a      	ldr	r3, [pc, #40]	; (800ac70 <HAL_RCC_ClockConfig+0x274>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 0307 	and.w	r3, r3, #7
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d1ef      	bne.n	800ac34 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800ac54:	f7fa fadc 	bl	8005210 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800ac58:	f7fa fdd8 	bl	800580c <HAL_GetTickPrio>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fa f9ba 	bl	8004fd8 <HAL_InitTick>
 800ac64:	4603      	mov	r3, r0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	58004000 	.word	0x58004000

0800ac74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac74:	b590      	push	{r4, r7, lr}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac7a:	f7ff f9f0 	bl	800a05e <LL_RCC_GetSysClkSource>
 800ac7e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10a      	bne.n	800ac9c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ac86:	f7ff f9ac 	bl	8009fe2 <LL_RCC_MSI_GetRange>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	091b      	lsrs	r3, r3, #4
 800ac8e:	f003 030f 	and.w	r3, r3, #15
 800ac92:	4a2a      	ldr	r2, [pc, #168]	; (800ad3c <HAL_RCC_GetSysClockFreq+0xc8>)
 800ac94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	e04a      	b.n	800ad32 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b04      	cmp	r3, #4
 800aca0:	d102      	bne.n	800aca8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aca2:	4b27      	ldr	r3, [pc, #156]	; (800ad40 <HAL_RCC_GetSysClockFreq+0xcc>)
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	e044      	b.n	800ad32 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b08      	cmp	r3, #8
 800acac:	d10a      	bne.n	800acc4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800acae:	f7fe ffa7 	bl	8009c00 <LL_RCC_HSE_IsEnabledDiv2>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d102      	bne.n	800acbe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800acb8:	4b21      	ldr	r3, [pc, #132]	; (800ad40 <HAL_RCC_GetSysClockFreq+0xcc>)
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	e039      	b.n	800ad32 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800acbe:	4b21      	ldr	r3, [pc, #132]	; (800ad44 <HAL_RCC_GetSysClockFreq+0xd0>)
 800acc0:	60fb      	str	r3, [r7, #12]
 800acc2:	e036      	b.n	800ad32 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800acc4:	f7ff fad4 	bl	800a270 <LL_RCC_PLL_GetMainSource>
 800acc8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d002      	beq.n	800acd6 <HAL_RCC_GetSysClockFreq+0x62>
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d003      	beq.n	800acdc <HAL_RCC_GetSysClockFreq+0x68>
 800acd4:	e00d      	b.n	800acf2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800acd6:	4b1a      	ldr	r3, [pc, #104]	; (800ad40 <HAL_RCC_GetSysClockFreq+0xcc>)
 800acd8:	60bb      	str	r3, [r7, #8]
        break;
 800acda:	e015      	b.n	800ad08 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800acdc:	f7fe ff90 	bl	8009c00 <LL_RCC_HSE_IsEnabledDiv2>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d102      	bne.n	800acec <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800ace6:	4b16      	ldr	r3, [pc, #88]	; (800ad40 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ace8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800acea:	e00d      	b.n	800ad08 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800acec:	4b15      	ldr	r3, [pc, #84]	; (800ad44 <HAL_RCC_GetSysClockFreq+0xd0>)
 800acee:	60bb      	str	r3, [r7, #8]
        break;
 800acf0:	e00a      	b.n	800ad08 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800acf2:	f7ff f976 	bl	8009fe2 <LL_RCC_MSI_GetRange>
 800acf6:	4603      	mov	r3, r0
 800acf8:	091b      	lsrs	r3, r3, #4
 800acfa:	f003 030f 	and.w	r3, r3, #15
 800acfe:	4a0f      	ldr	r2, [pc, #60]	; (800ad3c <HAL_RCC_GetSysClockFreq+0xc8>)
 800ad00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad04:	60bb      	str	r3, [r7, #8]
        break;
 800ad06:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800ad08:	f7ff fa8d 	bl	800a226 <LL_RCC_PLL_GetN>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	fb03 f402 	mul.w	r4, r3, r2
 800ad14:	f7ff faa0 	bl	800a258 <LL_RCC_PLL_GetDivider>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	091b      	lsrs	r3, r3, #4
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	fbb4 f4f3 	udiv	r4, r4, r3
 800ad22:	f7ff fa8d 	bl	800a240 <LL_RCC_PLL_GetR>
 800ad26:	4603      	mov	r3, r0
 800ad28:	0f5b      	lsrs	r3, r3, #29
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	fbb4 f3f3 	udiv	r3, r4, r3
 800ad30:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800ad32:	68fb      	ldr	r3, [r7, #12]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd90      	pop	{r4, r7, pc}
 800ad3c:	080180d8 	.word	0x080180d8
 800ad40:	00f42400 	.word	0x00f42400
 800ad44:	01e84800 	.word	0x01e84800

0800ad48 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad48:	b598      	push	{r3, r4, r7, lr}
 800ad4a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ad4c:	f7ff ff92 	bl	800ac74 <HAL_RCC_GetSysClockFreq>
 800ad50:	4604      	mov	r4, r0
 800ad52:	f7ff f9f9 	bl	800a148 <LL_RCC_GetAHBPrescaler>
 800ad56:	4603      	mov	r3, r0
 800ad58:	091b      	lsrs	r3, r3, #4
 800ad5a:	f003 030f 	and.w	r3, r3, #15
 800ad5e:	4a03      	ldr	r2, [pc, #12]	; (800ad6c <HAL_RCC_GetHCLKFreq+0x24>)
 800ad60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad64:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	bd98      	pop	{r3, r4, r7, pc}
 800ad6c:	08018078 	.word	0x08018078

0800ad70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad70:	b598      	push	{r3, r4, r7, lr}
 800ad72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ad74:	f7ff ffe8 	bl	800ad48 <HAL_RCC_GetHCLKFreq>
 800ad78:	4604      	mov	r4, r0
 800ad7a:	f7ff fa0c 	bl	800a196 <LL_RCC_GetAPB1Prescaler>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	0a1b      	lsrs	r3, r3, #8
 800ad82:	f003 0307 	and.w	r3, r3, #7
 800ad86:	4a04      	ldr	r2, [pc, #16]	; (800ad98 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad8c:	f003 031f 	and.w	r3, r3, #31
 800ad90:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	bd98      	pop	{r3, r4, r7, pc}
 800ad98:	080180b8 	.word	0x080180b8

0800ad9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad9c:	b598      	push	{r3, r4, r7, lr}
 800ad9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ada0:	f7ff ffd2 	bl	800ad48 <HAL_RCC_GetHCLKFreq>
 800ada4:	4604      	mov	r4, r0
 800ada6:	f7ff fa02 	bl	800a1ae <LL_RCC_GetAPB2Prescaler>
 800adaa:	4603      	mov	r3, r0
 800adac:	0adb      	lsrs	r3, r3, #11
 800adae:	f003 0307 	and.w	r3, r3, #7
 800adb2:	4a04      	ldr	r2, [pc, #16]	; (800adc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800adb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adb8:	f003 031f 	and.w	r3, r3, #31
 800adbc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	bd98      	pop	{r3, r4, r7, pc}
 800adc4:	080180b8 	.word	0x080180b8

0800adc8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	226f      	movs	r2, #111	; 0x6f
 800add6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800add8:	f7ff f941 	bl	800a05e <LL_RCC_GetSysClkSource>
 800addc:	4602      	mov	r2, r0
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800ade2:	f7ff f9b1 	bl	800a148 <LL_RCC_GetAHBPrescaler>
 800ade6:	4602      	mov	r2, r0
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800adec:	f7ff f9d3 	bl	800a196 <LL_RCC_GetAPB1Prescaler>
 800adf0:	4602      	mov	r2, r0
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800adf6:	f7ff f9da 	bl	800a1ae <LL_RCC_GetAPB2Prescaler>
 800adfa:	4602      	mov	r2, r0
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800ae00:	f7ff f9ae 	bl	800a160 <LL_C2_RCC_GetAHBPrescaler>
 800ae04:	4602      	mov	r2, r0
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800ae0a:	f7ff f9b6 	bl	800a17a <LL_RCC_GetAHB4Prescaler>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ae14:	4b04      	ldr	r3, [pc, #16]	; (800ae28 <HAL_RCC_GetClockConfig+0x60>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 0207 	and.w	r2, r3, #7
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	601a      	str	r2, [r3, #0]
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	58004000 	.word	0x58004000

0800ae2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ae2c:	b590      	push	{r4, r7, lr}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2bb0      	cmp	r3, #176	; 0xb0
 800ae38:	d903      	bls.n	800ae42 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ae3a:	4b15      	ldr	r3, [pc, #84]	; (800ae90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ae3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	e007      	b.n	800ae52 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	091b      	lsrs	r3, r3, #4
 800ae46:	f003 030f 	and.w	r3, r3, #15
 800ae4a:	4a11      	ldr	r2, [pc, #68]	; (800ae90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ae4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae50:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ae52:	f7ff f992 	bl	800a17a <LL_RCC_GetAHB4Prescaler>
 800ae56:	4603      	mov	r3, r0
 800ae58:	091b      	lsrs	r3, r3, #4
 800ae5a:	f003 030f 	and.w	r3, r3, #15
 800ae5e:	4a0d      	ldr	r2, [pc, #52]	; (800ae94 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800ae60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	4a0a      	ldr	r2, [pc, #40]	; (800ae98 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800ae70:	fba2 2303 	umull	r2, r3, r2, r3
 800ae74:	0c9c      	lsrs	r4, r3, #18
 800ae76:	f7fe feb5 	bl	8009be4 <HAL_PWREx_GetVoltageRange>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f000 f80c 	bl	800ae9c <RCC_SetFlashLatency>
 800ae84:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd90      	pop	{r4, r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	080180d8 	.word	0x080180d8
 800ae94:	08018078 	.word	0x08018078
 800ae98:	431bde83 	.word	0x431bde83

0800ae9c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ae9c:	b590      	push	{r4, r7, lr}
 800ae9e:	b093      	sub	sp, #76	; 0x4c
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800aea6:	4b39      	ldr	r3, [pc, #228]	; (800af8c <RCC_SetFlashLatency+0xf0>)
 800aea8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800aeac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aeae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800aeb2:	4a37      	ldr	r2, [pc, #220]	; (800af90 <RCC_SetFlashLatency+0xf4>)
 800aeb4:	f107 031c 	add.w	r3, r7, #28
 800aeb8:	ca07      	ldmia	r2, {r0, r1, r2}
 800aeba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800aebe:	4b35      	ldr	r3, [pc, #212]	; (800af94 <RCC_SetFlashLatency+0xf8>)
 800aec0:	f107 040c 	add.w	r4, r7, #12
 800aec4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800aeca:	2300      	movs	r3, #0
 800aecc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aed4:	d11c      	bne.n	800af10 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800aed6:	2300      	movs	r3, #0
 800aed8:	643b      	str	r3, [r7, #64]	; 0x40
 800aeda:	e015      	b.n	800af08 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800aedc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800aee4:	4413      	add	r3, r2
 800aee6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d808      	bhi.n	800af02 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800aef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800aef8:	4413      	add	r3, r2
 800aefa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800aefe:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800af00:	e022      	b.n	800af48 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800af02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af04:	3301      	adds	r3, #1
 800af06:	643b      	str	r3, [r7, #64]	; 0x40
 800af08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d9e6      	bls.n	800aedc <RCC_SetFlashLatency+0x40>
 800af0e:	e01b      	b.n	800af48 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800af10:	2300      	movs	r3, #0
 800af12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af14:	e015      	b.n	800af42 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800af16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800af1e:	4413      	add	r3, r2
 800af20:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	429a      	cmp	r2, r3
 800af28:	d808      	bhi.n	800af3c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800af2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800af32:	4413      	add	r3, r2
 800af34:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800af38:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800af3a:	e005      	b.n	800af48 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800af3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af3e:	3301      	adds	r3, #1
 800af40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af44:	2b02      	cmp	r3, #2
 800af46:	d9e6      	bls.n	800af16 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800af48:	4b13      	ldr	r3, [pc, #76]	; (800af98 <RCC_SetFlashLatency+0xfc>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f023 0207 	bic.w	r2, r3, #7
 800af50:	4911      	ldr	r1, [pc, #68]	; (800af98 <RCC_SetFlashLatency+0xfc>)
 800af52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af54:	4313      	orrs	r3, r2
 800af56:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800af58:	f7fa fc4c 	bl	80057f4 <HAL_GetTick>
 800af5c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800af5e:	e008      	b.n	800af72 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800af60:	f7fa fc48 	bl	80057f4 <HAL_GetTick>
 800af64:	4602      	mov	r2, r0
 800af66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d901      	bls.n	800af72 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800af6e:	2303      	movs	r3, #3
 800af70:	e007      	b.n	800af82 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800af72:	4b09      	ldr	r3, [pc, #36]	; (800af98 <RCC_SetFlashLatency+0xfc>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0307 	and.w	r3, r3, #7
 800af7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d1ef      	bne.n	800af60 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	374c      	adds	r7, #76	; 0x4c
 800af86:	46bd      	mov	sp, r7
 800af88:	bd90      	pop	{r4, r7, pc}
 800af8a:	bf00      	nop
 800af8c:	08017a70 	.word	0x08017a70
 800af90:	08017a80 	.word	0x08017a80
 800af94:	08017a8c 	.word	0x08017a8c
 800af98:	58004000 	.word	0x58004000

0800af9c <LL_RCC_LSE_IsEnabled>:
{
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800afa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afa8:	f003 0301 	and.w	r3, r3, #1
 800afac:	2b01      	cmp	r3, #1
 800afae:	d101      	bne.n	800afb4 <LL_RCC_LSE_IsEnabled+0x18>
 800afb0:	2301      	movs	r3, #1
 800afb2:	e000      	b.n	800afb6 <LL_RCC_LSE_IsEnabled+0x1a>
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <LL_RCC_LSE_IsReady>:
{
 800afc0:	b480      	push	{r7}
 800afc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800afc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afcc:	f003 0302 	and.w	r3, r3, #2
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d101      	bne.n	800afd8 <LL_RCC_LSE_IsReady+0x18>
 800afd4:	2301      	movs	r3, #1
 800afd6:	e000      	b.n	800afda <LL_RCC_LSE_IsReady+0x1a>
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <LL_RCC_SetRFWKPClockSource>:
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800afec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aff4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800aff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4313      	orrs	r3, r2
 800b000:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800b004:	bf00      	nop
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <LL_RCC_SetSMPSClockSource>:
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01e:	f023 0203 	bic.w	r2, r3, #3
 800b022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4313      	orrs	r3, r2
 800b02a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800b02c:	bf00      	nop
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <LL_RCC_SetSMPSPrescaler>:
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b046:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b04a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4313      	orrs	r3, r2
 800b052:	624b      	str	r3, [r1, #36]	; 0x24
}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <LL_RCC_SetUSARTClockSource>:
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b070:	f023 0203 	bic.w	r2, r3, #3
 800b074:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <LL_RCC_SetLPUARTClockSource>:
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b09c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b0a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b0ac:	bf00      	nop
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <LL_RCC_SetI2CClockSource>:
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b0c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	091b      	lsrs	r3, r3, #4
 800b0cc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800b0d0:	43db      	mvns	r3, r3
 800b0d2:	401a      	ands	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	011b      	lsls	r3, r3, #4
 800b0d8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800b0dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b0e6:	bf00      	nop
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <LL_RCC_SetLPTIMClockSource>:
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b0fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	0c1b      	lsrs	r3, r3, #16
 800b106:	041b      	lsls	r3, r3, #16
 800b108:	43db      	mvns	r3, r3
 800b10a:	401a      	ands	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	041b      	lsls	r3, r3, #16
 800b110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b114:	4313      	orrs	r3, r2
 800b116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b11a:	bf00      	nop
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <LL_RCC_SetSAIClockSource>:
{
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800b12e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b136:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b13a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4313      	orrs	r3, r2
 800b142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b146:	bf00      	nop
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <LL_RCC_SetRNGClockSource>:
{
 800b152:	b480      	push	{r7}
 800b154:	b083      	sub	sp, #12
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b15a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b162:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b172:	bf00      	nop
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <LL_RCC_SetCLK48ClockSource>:
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800b186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b18e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4313      	orrs	r3, r2
 800b19a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b19e:	bf00      	nop
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <LL_RCC_SetUSBClockSource>:
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b082      	sub	sp, #8
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7ff ffe3 	bl	800b17e <LL_RCC_SetCLK48ClockSource>
}
 800b1b8:	bf00      	nop
 800b1ba:	3708      	adds	r7, #8
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <LL_RCC_SetADCClockSource>:
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b1c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b1d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <LL_RCC_SetRTCClockSource>:
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b1f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4313      	orrs	r3, r2
 800b208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <LL_RCC_GetRTCClockSource>:
{
 800b218:	b480      	push	{r7}
 800b21a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b21c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b224:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800b228:	4618      	mov	r0, r3
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <LL_RCC_ForceBackupDomainReset>:
{
 800b232:	b480      	push	{r7}
 800b234:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b23a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b23e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b24a:	bf00      	nop
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <LL_RCC_ReleaseBackupDomainReset>:
{
 800b254:	b480      	push	{r7}
 800b256:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b26c:	bf00      	nop
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <LL_RCC_PLLSAI1_Enable>:
{
 800b276:	b480      	push	{r7}
 800b278:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b27a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b284:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b288:	6013      	str	r3, [r2, #0]
}
 800b28a:	bf00      	nop
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <LL_RCC_PLLSAI1_Disable>:
{
 800b294:	b480      	push	{r7}
 800b296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b2a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b2a6:	6013      	str	r3, [r2, #0]
}
 800b2a8:	bf00      	nop
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr

0800b2b2 <LL_RCC_PLLSAI1_IsReady>:
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b2b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2c4:	d101      	bne.n	800b2ca <LL_RCC_PLLSAI1_IsReady+0x18>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e000      	b.n	800b2cc <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b088      	sub	sp, #32
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b2de:	2300      	movs	r3, #0
 800b2e0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d033      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2fa:	d00c      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800b2fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b300:	d802      	bhi.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800b302:	2b00      	cmp	r3, #0
 800b304:	d010      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b306:	e017      	b.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800b308:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b30c:	d017      	beq.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x68>
 800b30e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b312:	d016      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800b314:	e010      	b.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b324:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b326:	e00d      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3304      	adds	r3, #4
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 f947 	bl	800b5c0 <RCCEx_PLLSAI1_ConfigNP>
 800b332:	4603      	mov	r3, r0
 800b334:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b336:	e005      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	77fb      	strb	r3, [r7, #31]
        break;
 800b33c:	e002      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800b33e:	bf00      	nop
 800b340:	e000      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800b342:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b344:	7ffb      	ldrb	r3, [r7, #31]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d105      	bne.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff fee9 	bl	800b126 <LL_RCC_SetSAIClockSource>
 800b354:	e001      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b356:	7ffb      	ldrb	r3, [r7, #31]
 800b358:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b362:	2b00      	cmp	r3, #0
 800b364:	d046      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b366:	f7ff ff57 	bl	800b218 <LL_RCC_GetRTCClockSource>
 800b36a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b370:	69ba      	ldr	r2, [r7, #24]
 800b372:	429a      	cmp	r2, r3
 800b374:	d03c      	beq.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b376:	f7fe fc25 	bl	8009bc4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d105      	bne.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff ff31 	bl	800b1ec <LL_RCC_SetRTCClockSource>
 800b38a:	e02e      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800b38c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b394:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800b396:	f7ff ff4c 	bl	800b232 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800b39a:	f7ff ff5b 	bl	800b254 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800b3ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800b3b6:	f7ff fdf1 	bl	800af9c <LL_RCC_LSE_IsEnabled>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d114      	bne.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b3c0:	f7fa fa18 	bl	80057f4 <HAL_GetTick>
 800b3c4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800b3c6:	e00b      	b.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3c8:	f7fa fa14 	bl	80057f4 <HAL_GetTick>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d902      	bls.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	77fb      	strb	r3, [r7, #31]
              break;
 800b3de:	e004      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800b3e0:	f7ff fdee 	bl	800afc0 <LL_RCC_LSE_IsReady>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d1ee      	bne.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800b3ea:	7ffb      	ldrb	r3, [r7, #31]
 800b3ec:	77bb      	strb	r3, [r7, #30]
 800b3ee:	e001      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3f0:	7ffb      	ldrb	r3, [r7, #31]
 800b3f2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d004      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	4618      	mov	r0, r3
 800b406:	f7ff fe2b 	bl	800b060 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f003 0302 	and.w	r3, r3, #2
 800b412:	2b00      	cmp	r3, #0
 800b414:	d004      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	69db      	ldr	r3, [r3, #28]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7ff fe36 	bl	800b08c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 0310 	and.w	r3, r3, #16
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d004      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b430:	4618      	mov	r0, r3
 800b432:	f7ff fe5e 	bl	800b0f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 0320 	and.w	r3, r3, #32
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d004      	beq.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b446:	4618      	mov	r0, r3
 800b448:	f7ff fe53 	bl	800b0f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 0304 	and.w	r3, r3, #4
 800b454:	2b00      	cmp	r3, #0
 800b456:	d004      	beq.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a1b      	ldr	r3, [r3, #32]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7ff fe2b 	bl	800b0b8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 0308 	and.w	r3, r3, #8
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d004      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b472:	4618      	mov	r0, r3
 800b474:	f7ff fe20 	bl	800b0b8 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b480:	2b00      	cmp	r3, #0
 800b482:	d022      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b488:	4618      	mov	r0, r3
 800b48a:	f7ff fe8e 	bl	800b1aa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b496:	d107      	bne.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800b498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b4a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4a6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4b0:	d10b      	bne.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f000 f8dd 	bl	800b676 <RCCEx_PLLSAI1_ConfigNQ>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b4c0:	7ffb      	ldrb	r3, [r7, #31]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d001      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800b4c6:	7ffb      	ldrb	r3, [r7, #31]
 800b4c8:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d02b      	beq.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4de:	d008      	beq.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4e8:	d003      	beq.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d105      	bne.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x228>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7ff fe2b 	bl	800b152 <LL_RCC_SetRNGClockSource>
 800b4fc:	e00a      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	2000      	movs	r0, #0
 800b50a:	f7ff fe22 	bl	800b152 <LL_RCC_SetRNGClockSource>
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f7ff fe35 	bl	800b17e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b518:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800b51c:	d107      	bne.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800b51e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b52c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b536:	2b00      	cmp	r3, #0
 800b538:	d022      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b53e:	4618      	mov	r0, r3
 800b540:	f7ff fe3e 	bl	800b1c0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b54c:	d107      	bne.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b54e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b55c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b566:	d10b      	bne.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	3304      	adds	r3, #4
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 f8dd 	bl	800b72c <RCCEx_PLLSAI1_ConfigNR>
 800b572:	4603      	mov	r3, r0
 800b574:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b576:	7ffb      	ldrb	r3, [r7, #31]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 800b57c:	7ffb      	ldrb	r3, [r7, #31]
 800b57e:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d004      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b590:	4618      	mov	r0, r3
 800b592:	f7ff fd27 	bl	800afe4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d009      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7ff fd46 	bl	800b038 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7ff fd2d 	bl	800b010 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800b5b6:	7fbb      	ldrb	r3, [r7, #30]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3720      	adds	r7, #32
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b5cc:	f7ff fe62 	bl	800b294 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b5d0:	f7fa f910 	bl	80057f4 <HAL_GetTick>
 800b5d4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b5d6:	e009      	b.n	800b5ec <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b5d8:	f7fa f90c 	bl	80057f4 <HAL_GetTick>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d902      	bls.n	800b5ec <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ea:	e004      	b.n	800b5f6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b5ec:	f7ff fe61 	bl	800b2b2 <LL_RCC_PLLSAI1_IsReady>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1f0      	bne.n	800b5d8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d137      	bne.n	800b66c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800b5fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	021b      	lsls	r3, r3, #8
 800b60c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b610:	4313      	orrs	r3, r2
 800b612:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800b614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b626:	4313      	orrs	r3, r2
 800b628:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800b62a:	f7ff fe24 	bl	800b276 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b62e:	f7fa f8e1 	bl	80057f4 <HAL_GetTick>
 800b632:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b634:	e009      	b.n	800b64a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b636:	f7fa f8dd 	bl	80057f4 <HAL_GetTick>
 800b63a:	4602      	mov	r2, r0
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	2b02      	cmp	r3, #2
 800b642:	d902      	bls.n	800b64a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800b644:	2303      	movs	r3, #3
 800b646:	73fb      	strb	r3, [r7, #15]
        break;
 800b648:	e004      	b.n	800b654 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b64a:	f7ff fe32 	bl	800b2b2 <LL_RCC_PLLSAI1_IsReady>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b01      	cmp	r3, #1
 800b652:	d1f0      	bne.n	800b636 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800b654:	7bfb      	ldrb	r3, [r7, #15]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d108      	bne.n	800b66c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800b65a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b65e:	691a      	ldr	r2, [r3, #16]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b668:	4313      	orrs	r3, r2
 800b66a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b682:	f7ff fe07 	bl	800b294 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b686:	f7fa f8b5 	bl	80057f4 <HAL_GetTick>
 800b68a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b68c:	e009      	b.n	800b6a2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b68e:	f7fa f8b1 	bl	80057f4 <HAL_GetTick>
 800b692:	4602      	mov	r2, r0
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d902      	bls.n	800b6a2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800b69c:	2303      	movs	r3, #3
 800b69e:	73fb      	strb	r3, [r7, #15]
      break;
 800b6a0:	e004      	b.n	800b6ac <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b6a2:	f7ff fe06 	bl	800b2b2 <LL_RCC_PLLSAI1_IsReady>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1f0      	bne.n	800b68e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d137      	bne.n	800b722 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800b6b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	021b      	lsls	r3, r3, #8
 800b6c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800b6ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800b6e0:	f7ff fdc9 	bl	800b276 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6e4:	f7fa f886 	bl	80057f4 <HAL_GetTick>
 800b6e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b6ea:	e009      	b.n	800b700 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b6ec:	f7fa f882 	bl	80057f4 <HAL_GetTick>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d902      	bls.n	800b700 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	73fb      	strb	r3, [r7, #15]
        break;
 800b6fe:	e004      	b.n	800b70a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b700:	f7ff fdd7 	bl	800b2b2 <LL_RCC_PLLSAI1_IsReady>
 800b704:	4603      	mov	r3, r0
 800b706:	2b01      	cmp	r3, #1
 800b708:	d1f0      	bne.n	800b6ec <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d108      	bne.n	800b722 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800b710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b714:	691a      	ldr	r2, [r3, #16]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	691b      	ldr	r3, [r3, #16]
 800b71a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b71e:	4313      	orrs	r3, r2
 800b720:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800b722:	7bfb      	ldrb	r3, [r7, #15]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b734:	2300      	movs	r3, #0
 800b736:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b738:	f7ff fdac 	bl	800b294 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b73c:	f7fa f85a 	bl	80057f4 <HAL_GetTick>
 800b740:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b742:	e009      	b.n	800b758 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b744:	f7fa f856 	bl	80057f4 <HAL_GetTick>
 800b748:	4602      	mov	r2, r0
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d902      	bls.n	800b758 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800b752:	2303      	movs	r3, #3
 800b754:	73fb      	strb	r3, [r7, #15]
      break;
 800b756:	e004      	b.n	800b762 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b758:	f7ff fdab 	bl	800b2b2 <LL_RCC_PLLSAI1_IsReady>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1f0      	bne.n	800b744 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800b762:	7bfb      	ldrb	r3, [r7, #15]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d137      	bne.n	800b7d8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800b768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	021b      	lsls	r3, r3, #8
 800b778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b77c:	4313      	orrs	r3, r2
 800b77e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800b780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b792:	4313      	orrs	r3, r2
 800b794:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800b796:	f7ff fd6e 	bl	800b276 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b79a:	f7fa f82b 	bl	80057f4 <HAL_GetTick>
 800b79e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b7a0:	e009      	b.n	800b7b6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b7a2:	f7fa f827 	bl	80057f4 <HAL_GetTick>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d902      	bls.n	800b7b6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	73fb      	strb	r3, [r7, #15]
        break;
 800b7b4:	e004      	b.n	800b7c0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b7b6:	f7ff fd7c 	bl	800b2b2 <LL_RCC_PLLSAI1_IsReady>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d1f0      	bne.n	800b7a2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800b7c0:	7bfb      	ldrb	r3, [r7, #15]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d108      	bne.n	800b7d8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800b7c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7ca:	691a      	ldr	r2, [r3, #16]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	691b      	ldr	r3, [r3, #16]
 800b7d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b082      	sub	sp, #8
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d101      	bne.n	800b7f4 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e090      	b.n	800b916 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d106      	bne.n	800b80e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7f9 fb89 	bl	8004f20 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2202      	movs	r2, #2
 800b812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	22ca      	movs	r2, #202	; 0xca
 800b81c:	625a      	str	r2, [r3, #36]	; 0x24
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2253      	movs	r2, #83	; 0x53
 800b824:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f89f 	bl	800b96a <RTC_EnterInitMode>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d009      	beq.n	800b846 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	22ff      	movs	r2, #255	; 0xff
 800b838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2204      	movs	r2, #4
 800b83e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	e067      	b.n	800b916 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	6812      	ldr	r2, [r2, #0]
 800b850:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b858:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	6899      	ldr	r1, [r3, #8]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	685a      	ldr	r2, [r3, #4]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	431a      	orrs	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	699b      	ldr	r3, [r3, #24]
 800b86e:	431a      	orrs	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	430a      	orrs	r2, r1
 800b876:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	68d2      	ldr	r2, [r2, #12]
 800b880:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6919      	ldr	r1, [r3, #16]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	041a      	lsls	r2, r3, #16
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	430a      	orrs	r2, r1
 800b894:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68da      	ldr	r2, [r3, #12]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8a4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f022 0203 	bic.w	r2, r2, #3
 800b8b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	69da      	ldr	r2, [r3, #28]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	695b      	ldr	r3, [r3, #20]
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	430a      	orrs	r2, r1
 800b8cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	f003 0320 	and.w	r3, r3, #32
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d113      	bne.n	800b904 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f81e 	bl	800b91e <HAL_RTC_WaitForSynchro>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00d      	beq.n	800b904 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	22ff      	movs	r2, #255	; 0xff
 800b8ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2204      	movs	r2, #4
 800b8f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	e008      	b.n	800b916 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	22ff      	movs	r2, #255	; 0xff
 800b90a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800b914:	2300      	movs	r3, #0
  }
}
 800b916:	4618      	mov	r0, r3
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b084      	sub	sp, #16
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	68da      	ldr	r2, [r3, #12]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b934:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b936:	f7f9 ff5d 	bl	80057f4 <HAL_GetTick>
 800b93a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b93c:	e009      	b.n	800b952 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b93e:	f7f9 ff59 	bl	80057f4 <HAL_GetTick>
 800b942:	4602      	mov	r2, r0
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b94c:	d901      	bls.n	800b952 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	e007      	b.n	800b962 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	f003 0320 	and.w	r3, r3, #32
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d0ee      	beq.n	800b93e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b084      	sub	sp, #16
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d119      	bne.n	800b9b4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f04f 32ff 	mov.w	r2, #4294967295
 800b988:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b98a:	f7f9 ff33 	bl	80057f4 <HAL_GetTick>
 800b98e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b990:	e009      	b.n	800b9a6 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800b992:	f7f9 ff2f 	bl	80057f4 <HAL_GetTick>
 800b996:	4602      	mov	r2, r0
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b9a0:	d901      	bls.n	800b9a6 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	e007      	b.n	800b9b6 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d0ee      	beq.n	800b992 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b082      	sub	sp, #8
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d101      	bne.n	800b9d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e01d      	b.n	800ba0c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d106      	bne.n	800b9ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f7f9 fd9d 	bl	8005524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	3304      	adds	r3, #4
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	4610      	mov	r0, r2
 800b9fe:	f000 fc83 	bl	800c308 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba0a:	2300      	movs	r3, #0
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	689a      	ldr	r2, [r3, #8]
 800ba2a:	4b0e      	ldr	r3, [pc, #56]	; (800ba64 <HAL_TIM_Base_Start+0x50>)
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b06      	cmp	r3, #6
 800ba34:	d00b      	beq.n	800ba4e <HAL_TIM_Base_Start+0x3a>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba3c:	d007      	beq.n	800ba4e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f042 0201 	orr.w	r2, r2, #1
 800ba4c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	00010007 	.word	0x00010007

0800ba68 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2202      	movs	r2, #2
 800ba74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	6a1a      	ldr	r2, [r3, #32]
 800ba7e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ba82:	4013      	ands	r3, r2
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10f      	bne.n	800baa8 <HAL_TIM_Base_Stop+0x40>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6a1a      	ldr	r2, [r3, #32]
 800ba8e:	f240 4344 	movw	r3, #1092	; 0x444
 800ba92:	4013      	ands	r3, r2
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d107      	bne.n	800baa8 <HAL_TIM_Base_Stop+0x40>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f022 0201 	bic.w	r2, r2, #1
 800baa6:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
	...

0800bac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68da      	ldr	r2, [r3, #12]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f042 0201 	orr.w	r2, r2, #1
 800bad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	689a      	ldr	r2, [r3, #8]
 800bade:	4b0c      	ldr	r3, [pc, #48]	; (800bb10 <HAL_TIM_Base_Start_IT+0x50>)
 800bae0:	4013      	ands	r3, r2
 800bae2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b06      	cmp	r3, #6
 800bae8:	d00b      	beq.n	800bb02 <HAL_TIM_Base_Start_IT+0x42>
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baf0:	d007      	beq.n	800bb02 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f042 0201 	orr.w	r2, r2, #1
 800bb00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	00010007 	.word	0x00010007

0800bb14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d101      	bne.n	800bb26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	e01d      	b.n	800bb62 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d106      	bne.n	800bb40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f815 	bl	800bb6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2202      	movs	r2, #2
 800bb44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	3304      	adds	r3, #4
 800bb50:	4619      	mov	r1, r3
 800bb52:	4610      	mov	r0, r2
 800bb54:	f000 fbd8 	bl	800c308 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b083      	sub	sp, #12
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bb72:	bf00      	nop
 800bb74:	370c      	adds	r7, #12
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
	...

0800bb80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f000 ff36 	bl	800ca04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a19      	ldr	r2, [pc, #100]	; (800bc04 <HAL_TIM_PWM_Start+0x84>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d009      	beq.n	800bbb6 <HAL_TIM_PWM_Start+0x36>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a18      	ldr	r2, [pc, #96]	; (800bc08 <HAL_TIM_PWM_Start+0x88>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d004      	beq.n	800bbb6 <HAL_TIM_PWM_Start+0x36>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a16      	ldr	r2, [pc, #88]	; (800bc0c <HAL_TIM_PWM_Start+0x8c>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d101      	bne.n	800bbba <HAL_TIM_PWM_Start+0x3a>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e000      	b.n	800bbbc <HAL_TIM_PWM_Start+0x3c>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d007      	beq.n	800bbd0 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bbce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	689a      	ldr	r2, [r3, #8]
 800bbd6:	4b0e      	ldr	r3, [pc, #56]	; (800bc10 <HAL_TIM_PWM_Start+0x90>)
 800bbd8:	4013      	ands	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b06      	cmp	r3, #6
 800bbe0:	d00b      	beq.n	800bbfa <HAL_TIM_PWM_Start+0x7a>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbe8:	d007      	beq.n	800bbfa <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f042 0201 	orr.w	r2, r2, #1
 800bbf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	40012c00 	.word	0x40012c00
 800bc08:	40014400 	.word	0x40014400
 800bc0c:	40014800 	.word	0x40014800
 800bc10:	00010007 	.word	0x00010007

0800bc14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2200      	movs	r2, #0
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 feec 	bl	800ca04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a25      	ldr	r2, [pc, #148]	; (800bcc8 <HAL_TIM_PWM_Stop+0xb4>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d009      	beq.n	800bc4a <HAL_TIM_PWM_Stop+0x36>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a24      	ldr	r2, [pc, #144]	; (800bccc <HAL_TIM_PWM_Stop+0xb8>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d004      	beq.n	800bc4a <HAL_TIM_PWM_Stop+0x36>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a22      	ldr	r2, [pc, #136]	; (800bcd0 <HAL_TIM_PWM_Stop+0xbc>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d101      	bne.n	800bc4e <HAL_TIM_PWM_Stop+0x3a>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e000      	b.n	800bc50 <HAL_TIM_PWM_Stop+0x3c>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d017      	beq.n	800bc84 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6a1a      	ldr	r2, [r3, #32]
 800bc5a:	f241 1311 	movw	r3, #4369	; 0x1111
 800bc5e:	4013      	ands	r3, r2
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10f      	bne.n	800bc84 <HAL_TIM_PWM_Stop+0x70>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	6a1a      	ldr	r2, [r3, #32]
 800bc6a:	f240 4344 	movw	r3, #1092	; 0x444
 800bc6e:	4013      	ands	r3, r2
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d107      	bne.n	800bc84 <HAL_TIM_PWM_Stop+0x70>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6a1a      	ldr	r2, [r3, #32]
 800bc8a:	f241 1311 	movw	r3, #4369	; 0x1111
 800bc8e:	4013      	ands	r3, r2
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10f      	bne.n	800bcb4 <HAL_TIM_PWM_Stop+0xa0>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6a1a      	ldr	r2, [r3, #32]
 800bc9a:	f240 4344 	movw	r3, #1092	; 0x444
 800bc9e:	4013      	ands	r3, r2
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d107      	bne.n	800bcb4 <HAL_TIM_PWM_Stop+0xa0>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f022 0201 	bic.w	r2, r2, #1
 800bcb2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3708      	adds	r7, #8
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	40012c00 	.word	0x40012c00
 800bccc:	40014400 	.word	0x40014400
 800bcd0:	40014800 	.word	0x40014800

0800bcd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	f003 0302 	and.w	r3, r3, #2
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d122      	bne.n	800bd30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	f003 0302 	and.w	r3, r3, #2
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d11b      	bne.n	800bd30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f06f 0202 	mvn.w	r2, #2
 800bd00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2201      	movs	r2, #1
 800bd06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	f003 0303 	and.w	r3, r3, #3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d003      	beq.n	800bd1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fad7 	bl	800c2ca <HAL_TIM_IC_CaptureCallback>
 800bd1c:	e005      	b.n	800bd2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 fac9 	bl	800c2b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fada 	bl	800c2de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	f003 0304 	and.w	r3, r3, #4
 800bd3a:	2b04      	cmp	r3, #4
 800bd3c:	d122      	bne.n	800bd84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	f003 0304 	and.w	r3, r3, #4
 800bd48:	2b04      	cmp	r3, #4
 800bd4a:	d11b      	bne.n	800bd84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f06f 0204 	mvn.w	r2, #4
 800bd54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2202      	movs	r2, #2
 800bd5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	699b      	ldr	r3, [r3, #24]
 800bd62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d003      	beq.n	800bd72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 faad 	bl	800c2ca <HAL_TIM_IC_CaptureCallback>
 800bd70:	e005      	b.n	800bd7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fa9f 	bl	800c2b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fab0 	bl	800c2de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	f003 0308 	and.w	r3, r3, #8
 800bd8e:	2b08      	cmp	r3, #8
 800bd90:	d122      	bne.n	800bdd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	f003 0308 	and.w	r3, r3, #8
 800bd9c:	2b08      	cmp	r3, #8
 800bd9e:	d11b      	bne.n	800bdd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f06f 0208 	mvn.w	r2, #8
 800bda8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2204      	movs	r2, #4
 800bdae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	69db      	ldr	r3, [r3, #28]
 800bdb6:	f003 0303 	and.w	r3, r3, #3
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 fa83 	bl	800c2ca <HAL_TIM_IC_CaptureCallback>
 800bdc4:	e005      	b.n	800bdd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa75 	bl	800c2b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fa86 	bl	800c2de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	f003 0310 	and.w	r3, r3, #16
 800bde2:	2b10      	cmp	r3, #16
 800bde4:	d122      	bne.n	800be2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	f003 0310 	and.w	r3, r3, #16
 800bdf0:	2b10      	cmp	r3, #16
 800bdf2:	d11b      	bne.n	800be2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f06f 0210 	mvn.w	r2, #16
 800bdfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2208      	movs	r2, #8
 800be02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	69db      	ldr	r3, [r3, #28]
 800be0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d003      	beq.n	800be1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fa59 	bl	800c2ca <HAL_TIM_IC_CaptureCallback>
 800be18:	e005      	b.n	800be26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 fa4b 	bl	800c2b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 fa5c 	bl	800c2de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	2b01      	cmp	r3, #1
 800be38:	d10e      	bne.n	800be58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b01      	cmp	r3, #1
 800be46:	d107      	bne.n	800be58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f06f 0201 	mvn.w	r2, #1
 800be50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7f8 fab8 	bl	80043c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be62:	2b80      	cmp	r3, #128	; 0x80
 800be64:	d10e      	bne.n	800be84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be70:	2b80      	cmp	r3, #128	; 0x80
 800be72:	d107      	bne.n	800be84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fe50 	bl	800cb24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be92:	d10e      	bne.n	800beb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be9e:	2b80      	cmp	r3, #128	; 0x80
 800bea0:	d107      	bne.n	800beb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800beaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fe43 	bl	800cb38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bebc:	2b40      	cmp	r3, #64	; 0x40
 800bebe:	d10e      	bne.n	800bede <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beca:	2b40      	cmp	r3, #64	; 0x40
 800becc:	d107      	bne.n	800bede <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fa0a 	bl	800c2f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	f003 0320 	and.w	r3, r3, #32
 800bee8:	2b20      	cmp	r3, #32
 800beea:	d10e      	bne.n	800bf0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	f003 0320 	and.w	r3, r3, #32
 800bef6:	2b20      	cmp	r3, #32
 800bef8:	d107      	bne.n	800bf0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f06f 0220 	mvn.w	r2, #32
 800bf02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fe03 	bl	800cb10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf0a:	bf00      	nop
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
	...

0800bf14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d101      	bne.n	800bf2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bf2a:	2302      	movs	r3, #2
 800bf2c:	e105      	b.n	800c13a <HAL_TIM_PWM_ConfigChannel+0x226>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2201      	movs	r2, #1
 800bf32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2202      	movs	r2, #2
 800bf3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b14      	cmp	r3, #20
 800bf42:	f200 80f0 	bhi.w	800c126 <HAL_TIM_PWM_ConfigChannel+0x212>
 800bf46:	a201      	add	r2, pc, #4	; (adr r2, 800bf4c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bf48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4c:	0800bfa1 	.word	0x0800bfa1
 800bf50:	0800c127 	.word	0x0800c127
 800bf54:	0800c127 	.word	0x0800c127
 800bf58:	0800c127 	.word	0x0800c127
 800bf5c:	0800bfe1 	.word	0x0800bfe1
 800bf60:	0800c127 	.word	0x0800c127
 800bf64:	0800c127 	.word	0x0800c127
 800bf68:	0800c127 	.word	0x0800c127
 800bf6c:	0800c023 	.word	0x0800c023
 800bf70:	0800c127 	.word	0x0800c127
 800bf74:	0800c127 	.word	0x0800c127
 800bf78:	0800c127 	.word	0x0800c127
 800bf7c:	0800c063 	.word	0x0800c063
 800bf80:	0800c127 	.word	0x0800c127
 800bf84:	0800c127 	.word	0x0800c127
 800bf88:	0800c127 	.word	0x0800c127
 800bf8c:	0800c0a5 	.word	0x0800c0a5
 800bf90:	0800c127 	.word	0x0800c127
 800bf94:	0800c127 	.word	0x0800c127
 800bf98:	0800c127 	.word	0x0800c127
 800bf9c:	0800c0e5 	.word	0x0800c0e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68b9      	ldr	r1, [r7, #8]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f000 fa12 	bl	800c3d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	699a      	ldr	r2, [r3, #24]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f042 0208 	orr.w	r2, r2, #8
 800bfba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	699a      	ldr	r2, [r3, #24]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f022 0204 	bic.w	r2, r2, #4
 800bfca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6999      	ldr	r1, [r3, #24]
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	691a      	ldr	r2, [r3, #16]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	619a      	str	r2, [r3, #24]
      break;
 800bfde:	e0a3      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68b9      	ldr	r1, [r7, #8]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f000 fa6e 	bl	800c4c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	699a      	ldr	r2, [r3, #24]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	699a      	ldr	r2, [r3, #24]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c00a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	6999      	ldr	r1, [r3, #24]
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	021a      	lsls	r2, r3, #8
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	430a      	orrs	r2, r1
 800c01e:	619a      	str	r2, [r3, #24]
      break;
 800c020:	e082      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68b9      	ldr	r1, [r7, #8]
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 fac7 	bl	800c5bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	69da      	ldr	r2, [r3, #28]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f042 0208 	orr.w	r2, r2, #8
 800c03c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	69da      	ldr	r2, [r3, #28]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f022 0204 	bic.w	r2, r2, #4
 800c04c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	69d9      	ldr	r1, [r3, #28]
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	691a      	ldr	r2, [r3, #16]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	430a      	orrs	r2, r1
 800c05e:	61da      	str	r2, [r3, #28]
      break;
 800c060:	e062      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68b9      	ldr	r1, [r7, #8]
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 fb1f 	bl	800c6ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	69da      	ldr	r2, [r3, #28]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c07c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	69da      	ldr	r2, [r3, #28]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c08c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	69d9      	ldr	r1, [r3, #28]
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	021a      	lsls	r2, r3, #8
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	430a      	orrs	r2, r1
 800c0a0:	61da      	str	r2, [r3, #28]
      break;
 800c0a2:	e041      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68b9      	ldr	r1, [r7, #8]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 fb5c 	bl	800c768 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f042 0208 	orr.w	r2, r2, #8
 800c0be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f022 0204 	bic.w	r2, r2, #4
 800c0ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	691a      	ldr	r2, [r3, #16]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	430a      	orrs	r2, r1
 800c0e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c0e2:	e021      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	68b9      	ldr	r1, [r7, #8]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f000 fb94 	bl	800c818 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c10e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	021a      	lsls	r2, r3, #8
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	430a      	orrs	r2, r1
 800c122:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c124:	e000      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800c126:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2201      	movs	r2, #1
 800c12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop

0800c144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c154:	2b01      	cmp	r3, #1
 800c156:	d101      	bne.n	800c15c <HAL_TIM_ConfigClockSource+0x18>
 800c158:	2302      	movs	r3, #2
 800c15a:	e0a8      	b.n	800c2ae <HAL_TIM_ConfigClockSource+0x16a>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2202      	movs	r2, #2
 800c168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c17a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c17e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c186:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b40      	cmp	r3, #64	; 0x40
 800c196:	d067      	beq.n	800c268 <HAL_TIM_ConfigClockSource+0x124>
 800c198:	2b40      	cmp	r3, #64	; 0x40
 800c19a:	d80b      	bhi.n	800c1b4 <HAL_TIM_ConfigClockSource+0x70>
 800c19c:	2b10      	cmp	r3, #16
 800c19e:	d073      	beq.n	800c288 <HAL_TIM_ConfigClockSource+0x144>
 800c1a0:	2b10      	cmp	r3, #16
 800c1a2:	d802      	bhi.n	800c1aa <HAL_TIM_ConfigClockSource+0x66>
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d06f      	beq.n	800c288 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c1a8:	e078      	b.n	800c29c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c1aa:	2b20      	cmp	r3, #32
 800c1ac:	d06c      	beq.n	800c288 <HAL_TIM_ConfigClockSource+0x144>
 800c1ae:	2b30      	cmp	r3, #48	; 0x30
 800c1b0:	d06a      	beq.n	800c288 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800c1b2:	e073      	b.n	800c29c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c1b4:	2b70      	cmp	r3, #112	; 0x70
 800c1b6:	d00d      	beq.n	800c1d4 <HAL_TIM_ConfigClockSource+0x90>
 800c1b8:	2b70      	cmp	r3, #112	; 0x70
 800c1ba:	d804      	bhi.n	800c1c6 <HAL_TIM_ConfigClockSource+0x82>
 800c1bc:	2b50      	cmp	r3, #80	; 0x50
 800c1be:	d033      	beq.n	800c228 <HAL_TIM_ConfigClockSource+0xe4>
 800c1c0:	2b60      	cmp	r3, #96	; 0x60
 800c1c2:	d041      	beq.n	800c248 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800c1c4:	e06a      	b.n	800c29c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c1c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ca:	d066      	beq.n	800c29a <HAL_TIM_ConfigClockSource+0x156>
 800c1cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1d0:	d017      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800c1d2:	e063      	b.n	800c29c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6818      	ldr	r0, [r3, #0]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	6899      	ldr	r1, [r3, #8]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	685a      	ldr	r2, [r3, #4]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	f000 fbee 	bl	800c9c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c1f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	609a      	str	r2, [r3, #8]
      break;
 800c200:	e04c      	b.n	800c29c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6818      	ldr	r0, [r3, #0]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	6899      	ldr	r1, [r3, #8]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	685a      	ldr	r2, [r3, #4]
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	f000 fbd7 	bl	800c9c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c224:	609a      	str	r2, [r3, #8]
      break;
 800c226:	e039      	b.n	800c29c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	6859      	ldr	r1, [r3, #4]
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	461a      	mov	r2, r3
 800c236:	f000 fb49 	bl	800c8cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2150      	movs	r1, #80	; 0x50
 800c240:	4618      	mov	r0, r3
 800c242:	f000 fba2 	bl	800c98a <TIM_ITRx_SetConfig>
      break;
 800c246:	e029      	b.n	800c29c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6818      	ldr	r0, [r3, #0]
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	6859      	ldr	r1, [r3, #4]
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	461a      	mov	r2, r3
 800c256:	f000 fb68 	bl	800c92a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2160      	movs	r1, #96	; 0x60
 800c260:	4618      	mov	r0, r3
 800c262:	f000 fb92 	bl	800c98a <TIM_ITRx_SetConfig>
      break;
 800c266:	e019      	b.n	800c29c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6818      	ldr	r0, [r3, #0]
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	6859      	ldr	r1, [r3, #4]
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	461a      	mov	r2, r3
 800c276:	f000 fb29 	bl	800c8cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2140      	movs	r1, #64	; 0x40
 800c280:	4618      	mov	r0, r3
 800c282:	f000 fb82 	bl	800c98a <TIM_ITRx_SetConfig>
      break;
 800c286:	e009      	b.n	800c29c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4619      	mov	r1, r3
 800c292:	4610      	mov	r0, r2
 800c294:	f000 fb79 	bl	800c98a <TIM_ITRx_SetConfig>
      break;
 800c298:	e000      	b.n	800c29c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800c29a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c2ac:	2300      	movs	r3, #0
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b083      	sub	sp, #12
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c2be:	bf00      	nop
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	b083      	sub	sp, #12
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c2d2:	bf00      	nop
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c2de:	b480      	push	{r7}
 800c2e0:	b083      	sub	sp, #12
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c2e6:	bf00      	nop
 800c2e8:	370c      	adds	r7, #12
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr

0800c2f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c2f2:	b480      	push	{r7}
 800c2f4:	b083      	sub	sp, #12
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c2fa:	bf00      	nop
 800c2fc:	370c      	adds	r7, #12
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
	...

0800c308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a2a      	ldr	r2, [pc, #168]	; (800c3c4 <TIM_Base_SetConfig+0xbc>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d003      	beq.n	800c328 <TIM_Base_SetConfig+0x20>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c326:	d108      	bne.n	800c33a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c32e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	4313      	orrs	r3, r2
 800c338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a21      	ldr	r2, [pc, #132]	; (800c3c4 <TIM_Base_SetConfig+0xbc>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d00b      	beq.n	800c35a <TIM_Base_SetConfig+0x52>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c348:	d007      	beq.n	800c35a <TIM_Base_SetConfig+0x52>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4a1e      	ldr	r2, [pc, #120]	; (800c3c8 <TIM_Base_SetConfig+0xc0>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d003      	beq.n	800c35a <TIM_Base_SetConfig+0x52>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4a1d      	ldr	r2, [pc, #116]	; (800c3cc <TIM_Base_SetConfig+0xc4>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d108      	bne.n	800c36c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	4313      	orrs	r3, r2
 800c36a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	4313      	orrs	r3, r2
 800c378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	689a      	ldr	r2, [r3, #8]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a0c      	ldr	r2, [pc, #48]	; (800c3c4 <TIM_Base_SetConfig+0xbc>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d007      	beq.n	800c3a8 <TIM_Base_SetConfig+0xa0>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a0b      	ldr	r2, [pc, #44]	; (800c3c8 <TIM_Base_SetConfig+0xc0>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d003      	beq.n	800c3a8 <TIM_Base_SetConfig+0xa0>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a0a      	ldr	r2, [pc, #40]	; (800c3cc <TIM_Base_SetConfig+0xc4>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d103      	bne.n	800c3b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	691a      	ldr	r2, [r3, #16]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	615a      	str	r2, [r3, #20]
}
 800c3b6:	bf00      	nop
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	40012c00 	.word	0x40012c00
 800c3c8:	40014400 	.word	0x40014400
 800c3cc:	40014800 	.word	0x40014800

0800c3d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b087      	sub	sp, #28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	f023 0201 	bic.w	r2, r3, #1
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6a1b      	ldr	r3, [r3, #32]
 800c3ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	699b      	ldr	r3, [r3, #24]
 800c3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f023 0303 	bic.w	r3, r3, #3
 800c40a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	4313      	orrs	r3, r2
 800c414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	f023 0302 	bic.w	r3, r3, #2
 800c41c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	697a      	ldr	r2, [r7, #20]
 800c424:	4313      	orrs	r3, r2
 800c426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a24      	ldr	r2, [pc, #144]	; (800c4bc <TIM_OC1_SetConfig+0xec>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d007      	beq.n	800c440 <TIM_OC1_SetConfig+0x70>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4a23      	ldr	r2, [pc, #140]	; (800c4c0 <TIM_OC1_SetConfig+0xf0>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d003      	beq.n	800c440 <TIM_OC1_SetConfig+0x70>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a22      	ldr	r2, [pc, #136]	; (800c4c4 <TIM_OC1_SetConfig+0xf4>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d10c      	bne.n	800c45a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	f023 0308 	bic.w	r3, r3, #8
 800c446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	697a      	ldr	r2, [r7, #20]
 800c44e:	4313      	orrs	r3, r2
 800c450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f023 0304 	bic.w	r3, r3, #4
 800c458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a17      	ldr	r2, [pc, #92]	; (800c4bc <TIM_OC1_SetConfig+0xec>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d007      	beq.n	800c472 <TIM_OC1_SetConfig+0xa2>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a17      	ldr	r2, [pc, #92]	; (800c4c4 <TIM_OC1_SetConfig+0xf4>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d003      	beq.n	800c472 <TIM_OC1_SetConfig+0xa2>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4a14      	ldr	r2, [pc, #80]	; (800c4c0 <TIM_OC1_SetConfig+0xf0>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d111      	bne.n	800c496 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	695b      	ldr	r3, [r3, #20]
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	4313      	orrs	r3, r2
 800c48a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	699b      	ldr	r3, [r3, #24]
 800c490:	693a      	ldr	r2, [r7, #16]
 800c492:	4313      	orrs	r3, r2
 800c494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	693a      	ldr	r2, [r7, #16]
 800c49a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	685a      	ldr	r2, [r3, #4]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	697a      	ldr	r2, [r7, #20]
 800c4ae:	621a      	str	r2, [r3, #32]
}
 800c4b0:	bf00      	nop
 800c4b2:	371c      	adds	r7, #28
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	40012c00 	.word	0x40012c00
 800c4c0:	40014800 	.word	0x40014800
 800c4c4:	40014400 	.word	0x40014400

0800c4c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b087      	sub	sp, #28
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a1b      	ldr	r3, [r3, #32]
 800c4d6:	f023 0210 	bic.w	r2, r3, #16
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a1b      	ldr	r3, [r3, #32]
 800c4e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	699b      	ldr	r3, [r3, #24]
 800c4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c4f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	021b      	lsls	r3, r3, #8
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	4313      	orrs	r3, r2
 800c50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	f023 0320 	bic.w	r3, r3, #32
 800c516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	011b      	lsls	r3, r3, #4
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	4313      	orrs	r3, r2
 800c522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4a22      	ldr	r2, [pc, #136]	; (800c5b0 <TIM_OC2_SetConfig+0xe8>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d10d      	bne.n	800c548 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	011b      	lsls	r3, r3, #4
 800c53a:	697a      	ldr	r2, [r7, #20]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c546:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a19      	ldr	r2, [pc, #100]	; (800c5b0 <TIM_OC2_SetConfig+0xe8>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d007      	beq.n	800c560 <TIM_OC2_SetConfig+0x98>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	4a18      	ldr	r2, [pc, #96]	; (800c5b4 <TIM_OC2_SetConfig+0xec>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d003      	beq.n	800c560 <TIM_OC2_SetConfig+0x98>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	4a17      	ldr	r2, [pc, #92]	; (800c5b8 <TIM_OC2_SetConfig+0xf0>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d113      	bne.n	800c588 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c56e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	695b      	ldr	r3, [r3, #20]
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	4313      	orrs	r3, r2
 800c57a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	693a      	ldr	r2, [r7, #16]
 800c584:	4313      	orrs	r3, r2
 800c586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	693a      	ldr	r2, [r7, #16]
 800c58c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	685a      	ldr	r2, [r3, #4]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	697a      	ldr	r2, [r7, #20]
 800c5a0:	621a      	str	r2, [r3, #32]
}
 800c5a2:	bf00      	nop
 800c5a4:	371c      	adds	r7, #28
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	40012c00 	.word	0x40012c00
 800c5b4:	40014400 	.word	0x40014400
 800c5b8:	40014800 	.word	0x40014800

0800c5bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b087      	sub	sp, #28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a1b      	ldr	r3, [r3, #32]
 800c5d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	69db      	ldr	r3, [r3, #28]
 800c5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f023 0303 	bic.w	r3, r3, #3
 800c5f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	021b      	lsls	r3, r3, #8
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	4313      	orrs	r3, r2
 800c614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4a21      	ldr	r2, [pc, #132]	; (800c6a0 <TIM_OC3_SetConfig+0xe4>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d10d      	bne.n	800c63a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	021b      	lsls	r3, r3, #8
 800c62c:	697a      	ldr	r2, [r7, #20]
 800c62e:	4313      	orrs	r3, r2
 800c630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a18      	ldr	r2, [pc, #96]	; (800c6a0 <TIM_OC3_SetConfig+0xe4>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d007      	beq.n	800c652 <TIM_OC3_SetConfig+0x96>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a17      	ldr	r2, [pc, #92]	; (800c6a4 <TIM_OC3_SetConfig+0xe8>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d003      	beq.n	800c652 <TIM_OC3_SetConfig+0x96>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a16      	ldr	r2, [pc, #88]	; (800c6a8 <TIM_OC3_SetConfig+0xec>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d113      	bne.n	800c67a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	011b      	lsls	r3, r3, #4
 800c668:	693a      	ldr	r2, [r7, #16]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	011b      	lsls	r3, r3, #4
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	4313      	orrs	r3, r2
 800c678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	693a      	ldr	r2, [r7, #16]
 800c67e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	697a      	ldr	r2, [r7, #20]
 800c692:	621a      	str	r2, [r3, #32]
}
 800c694:	bf00      	nop
 800c696:	371c      	adds	r7, #28
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	40012c00 	.word	0x40012c00
 800c6a4:	40014400 	.word	0x40014400
 800c6a8:	40014800 	.word	0x40014800

0800c6ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b087      	sub	sp, #28
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a1b      	ldr	r3, [r3, #32]
 800c6ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	69db      	ldr	r3, [r3, #28]
 800c6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	021b      	lsls	r3, r3, #8
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c6fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	031b      	lsls	r3, r3, #12
 800c702:	693a      	ldr	r2, [r7, #16]
 800c704:	4313      	orrs	r3, r2
 800c706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a14      	ldr	r2, [pc, #80]	; (800c75c <TIM_OC4_SetConfig+0xb0>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d007      	beq.n	800c720 <TIM_OC4_SetConfig+0x74>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a13      	ldr	r2, [pc, #76]	; (800c760 <TIM_OC4_SetConfig+0xb4>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d003      	beq.n	800c720 <TIM_OC4_SetConfig+0x74>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a12      	ldr	r2, [pc, #72]	; (800c764 <TIM_OC4_SetConfig+0xb8>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d109      	bne.n	800c734 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c726:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	019b      	lsls	r3, r3, #6
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	4313      	orrs	r3, r2
 800c732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	685a      	ldr	r2, [r3, #4]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	693a      	ldr	r2, [r7, #16]
 800c74c:	621a      	str	r2, [r3, #32]
}
 800c74e:	bf00      	nop
 800c750:	371c      	adds	r7, #28
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	40012c00 	.word	0x40012c00
 800c760:	40014400 	.word	0x40014400
 800c764:	40014800 	.word	0x40014800

0800c768 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c768:	b480      	push	{r7}
 800c76a:	b087      	sub	sp, #28
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a1b      	ldr	r3, [r3, #32]
 800c776:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c78e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c79a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c7ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	041b      	lsls	r3, r3, #16
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a13      	ldr	r2, [pc, #76]	; (800c80c <TIM_OC5_SetConfig+0xa4>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d007      	beq.n	800c7d2 <TIM_OC5_SetConfig+0x6a>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a12      	ldr	r2, [pc, #72]	; (800c810 <TIM_OC5_SetConfig+0xa8>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d003      	beq.n	800c7d2 <TIM_OC5_SetConfig+0x6a>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a11      	ldr	r2, [pc, #68]	; (800c814 <TIM_OC5_SetConfig+0xac>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d109      	bne.n	800c7e6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	021b      	lsls	r3, r3, #8
 800c7e0:	697a      	ldr	r2, [r7, #20]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	697a      	ldr	r2, [r7, #20]
 800c7ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	621a      	str	r2, [r3, #32]
}
 800c800:	bf00      	nop
 800c802:	371c      	adds	r7, #28
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr
 800c80c:	40012c00 	.word	0x40012c00
 800c810:	40014400 	.word	0x40014400
 800c814:	40014800 	.word	0x40014800

0800c818 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c818:	b480      	push	{r7}
 800c81a:	b087      	sub	sp, #28
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a1b      	ldr	r3, [r3, #32]
 800c826:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c84a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	021b      	lsls	r3, r3, #8
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	4313      	orrs	r3, r2
 800c856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c85e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	051b      	lsls	r3, r3, #20
 800c866:	693a      	ldr	r2, [r7, #16]
 800c868:	4313      	orrs	r3, r2
 800c86a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4a14      	ldr	r2, [pc, #80]	; (800c8c0 <TIM_OC6_SetConfig+0xa8>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d007      	beq.n	800c884 <TIM_OC6_SetConfig+0x6c>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	4a13      	ldr	r2, [pc, #76]	; (800c8c4 <TIM_OC6_SetConfig+0xac>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d003      	beq.n	800c884 <TIM_OC6_SetConfig+0x6c>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4a12      	ldr	r2, [pc, #72]	; (800c8c8 <TIM_OC6_SetConfig+0xb0>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d109      	bne.n	800c898 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c88a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	695b      	ldr	r3, [r3, #20]
 800c890:	029b      	lsls	r3, r3, #10
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	4313      	orrs	r3, r2
 800c896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	685a      	ldr	r2, [r3, #4]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	693a      	ldr	r2, [r7, #16]
 800c8b0:	621a      	str	r2, [r3, #32]
}
 800c8b2:	bf00      	nop
 800c8b4:	371c      	adds	r7, #28
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	40012c00 	.word	0x40012c00
 800c8c4:	40014400 	.word	0x40014400
 800c8c8:	40014800 	.word	0x40014800

0800c8cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6a1b      	ldr	r3, [r3, #32]
 800c8dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	6a1b      	ldr	r3, [r3, #32]
 800c8e2:	f023 0201 	bic.w	r2, r3, #1
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	699b      	ldr	r3, [r3, #24]
 800c8ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c8f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	011b      	lsls	r3, r3, #4
 800c8fc:	693a      	ldr	r2, [r7, #16]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	f023 030a 	bic.w	r3, r3, #10
 800c908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	4313      	orrs	r3, r2
 800c910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	693a      	ldr	r2, [r7, #16]
 800c916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	621a      	str	r2, [r3, #32]
}
 800c91e:	bf00      	nop
 800c920:	371c      	adds	r7, #28
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c92a:	b480      	push	{r7}
 800c92c:	b087      	sub	sp, #28
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	60b9      	str	r1, [r7, #8]
 800c934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	f023 0210 	bic.w	r2, r3, #16
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	699b      	ldr	r3, [r3, #24]
 800c946:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6a1b      	ldr	r3, [r3, #32]
 800c94c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	031b      	lsls	r3, r3, #12
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	4313      	orrs	r3, r2
 800c95e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c966:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	011b      	lsls	r3, r3, #4
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	4313      	orrs	r3, r2
 800c970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	697a      	ldr	r2, [r7, #20]
 800c976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	621a      	str	r2, [r3, #32]
}
 800c97e:	bf00      	nop
 800c980:	371c      	adds	r7, #28
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b085      	sub	sp, #20
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c9a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	f043 0307 	orr.w	r3, r3, #7
 800c9b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	609a      	str	r2, [r3, #8]
}
 800c9b8:	bf00      	nop
 800c9ba:	3714      	adds	r7, #20
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b087      	sub	sp, #28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
 800c9d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c9de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	021a      	lsls	r2, r3, #8
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	431a      	orrs	r2, r3
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	697a      	ldr	r2, [r7, #20]
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	697a      	ldr	r2, [r7, #20]
 800c9f6:	609a      	str	r2, [r3, #8]
}
 800c9f8:	bf00      	nop
 800c9fa:	371c      	adds	r7, #28
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b087      	sub	sp, #28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	f003 031f 	and.w	r3, r3, #31
 800ca16:	2201      	movs	r2, #1
 800ca18:	fa02 f303 	lsl.w	r3, r2, r3
 800ca1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6a1a      	ldr	r2, [r3, #32]
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	43db      	mvns	r3, r3
 800ca26:	401a      	ands	r2, r3
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6a1a      	ldr	r2, [r3, #32]
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	f003 031f 	and.w	r3, r3, #31
 800ca36:	6879      	ldr	r1, [r7, #4]
 800ca38:	fa01 f303 	lsl.w	r3, r1, r3
 800ca3c:	431a      	orrs	r2, r3
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	621a      	str	r2, [r3, #32]
}
 800ca42:	bf00      	nop
 800ca44:	371c      	adds	r7, #28
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
	...

0800ca50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d101      	bne.n	800ca68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca64:	2302      	movs	r3, #2
 800ca66:	e04a      	b.n	800cafe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2202      	movs	r2, #2
 800ca74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a1f      	ldr	r2, [pc, #124]	; (800cb0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d108      	bne.n	800caa4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ca98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	4313      	orrs	r3, r2
 800caa2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	4313      	orrs	r3, r2
 800cab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a12      	ldr	r2, [pc, #72]	; (800cb0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d004      	beq.n	800cad2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cad0:	d10c      	bne.n	800caec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	68ba      	ldr	r2, [r7, #8]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3714      	adds	r7, #20
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	40012c00 	.word	0x40012c00

0800cb10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb18:	bf00      	nop
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr

0800cb24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb40:	bf00      	nop
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <LL_RCC_GetUSARTClockSource>:
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800cb54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4013      	ands	r3, r2
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <LL_RCC_GetLPUARTClockSource>:
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800cb74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4013      	ands	r3, r2
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d101      	bne.n	800cb9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e042      	b.n	800cc24 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d106      	bne.n	800cbb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7f8 fd85 	bl	80056c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2224      	movs	r2, #36	; 0x24
 800cbba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f022 0201 	bic.w	r2, r2, #1
 800cbcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f98a 	bl	800cee8 <UART_SetConfig>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d101      	bne.n	800cbde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e022      	b.n	800cc24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d002      	beq.n	800cbec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f001 f9e2 	bl	800dfb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	685a      	ldr	r2, [r3, #4]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	689a      	ldr	r2, [r3, #8]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f042 0201 	orr.w	r2, r2, #1
 800cc1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f001 fa69 	bl	800e0f4 <UART_CheckIdleState>
 800cc22:	4603      	mov	r3, r0
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	4613      	mov	r3, r2
 800cc38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc40:	2b20      	cmp	r3, #32
 800cc42:	d168      	bne.n	800cd16 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d002      	beq.n	800cc50 <HAL_UART_Transmit_IT+0x24>
 800cc4a:	88fb      	ldrh	r3, [r7, #6]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d101      	bne.n	800cc54 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	e061      	b.n	800cd18 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d101      	bne.n	800cc62 <HAL_UART_Transmit_IT+0x36>
 800cc5e:	2302      	movs	r3, #2
 800cc60:	e05a      	b.n	800cd18 <HAL_UART_Transmit_IT+0xec>
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2201      	movs	r2, #1
 800cc66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	88fa      	ldrh	r2, [r7, #6]
 800cc74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	88fa      	ldrh	r2, [r7, #6]
 800cc7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2200      	movs	r2, #0
 800cc84:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2221      	movs	r2, #33	; 0x21
 800cc92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc9e:	d11c      	bne.n	800ccda <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cca8:	d107      	bne.n	800ccba <HAL_UART_Transmit_IT+0x8e>
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d103      	bne.n	800ccba <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	4a1b      	ldr	r2, [pc, #108]	; (800cd24 <HAL_UART_Transmit_IT+0xf8>)
 800ccb6:	671a      	str	r2, [r3, #112]	; 0x70
 800ccb8:	e002      	b.n	800ccc0 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	4a1a      	ldr	r2, [pc, #104]	; (800cd28 <HAL_UART_Transmit_IT+0xfc>)
 800ccbe:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	689a      	ldr	r2, [r3, #8]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ccd6:	609a      	str	r2, [r3, #8]
 800ccd8:	e01b      	b.n	800cd12 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cce2:	d107      	bne.n	800ccf4 <HAL_UART_Transmit_IT+0xc8>
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d103      	bne.n	800ccf4 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4a0f      	ldr	r2, [pc, #60]	; (800cd2c <HAL_UART_Transmit_IT+0x100>)
 800ccf0:	671a      	str	r2, [r3, #112]	; 0x70
 800ccf2:	e002      	b.n	800ccfa <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	4a0e      	ldr	r2, [pc, #56]	; (800cd30 <HAL_UART_Transmit_IT+0x104>)
 800ccf8:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd10:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	e000      	b.n	800cd18 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800cd16:	2302      	movs	r3, #2
  }
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	0800e411 	.word	0x0800e411
 800cd28:	0800e377 	.word	0x0800e377
 800cd2c:	0800e2f9 	.word	0x0800e2f9
 800cd30:	0800e285 	.word	0x0800e285

0800cd34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd48:	2b20      	cmp	r3, #32
 800cd4a:	f040 80bc 	bne.w	800cec6 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d002      	beq.n	800cd5a <HAL_UART_Receive_IT+0x26>
 800cd54:	88fb      	ldrh	r3, [r7, #6]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d101      	bne.n	800cd5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e0b4      	b.n	800cec8 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d101      	bne.n	800cd6c <HAL_UART_Receive_IT+0x38>
 800cd68:	2302      	movs	r3, #2
 800cd6a:	e0ad      	b.n	800cec8 <HAL_UART_Receive_IT+0x194>
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	68ba      	ldr	r2, [r7, #8]
 800cd78:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	88fa      	ldrh	r2, [r7, #6]
 800cd7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	88fa      	ldrh	r2, [r7, #6]
 800cd86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd98:	d10e      	bne.n	800cdb8 <HAL_UART_Receive_IT+0x84>
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	691b      	ldr	r3, [r3, #16]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d105      	bne.n	800cdae <HAL_UART_Receive_IT+0x7a>
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cda8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdac:	e02d      	b.n	800ce0a <HAL_UART_Receive_IT+0xd6>
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	22ff      	movs	r2, #255	; 0xff
 800cdb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdb6:	e028      	b.n	800ce0a <HAL_UART_Receive_IT+0xd6>
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10d      	bne.n	800cddc <HAL_UART_Receive_IT+0xa8>
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	691b      	ldr	r3, [r3, #16]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d104      	bne.n	800cdd2 <HAL_UART_Receive_IT+0x9e>
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	22ff      	movs	r2, #255	; 0xff
 800cdcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdd0:	e01b      	b.n	800ce0a <HAL_UART_Receive_IT+0xd6>
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	227f      	movs	r2, #127	; 0x7f
 800cdd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdda:	e016      	b.n	800ce0a <HAL_UART_Receive_IT+0xd6>
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cde4:	d10d      	bne.n	800ce02 <HAL_UART_Receive_IT+0xce>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d104      	bne.n	800cdf8 <HAL_UART_Receive_IT+0xc4>
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	227f      	movs	r2, #127	; 0x7f
 800cdf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdf6:	e008      	b.n	800ce0a <HAL_UART_Receive_IT+0xd6>
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	223f      	movs	r2, #63	; 0x3f
 800cdfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce00:	e003      	b.n	800ce0a <HAL_UART_Receive_IT+0xd6>
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2222      	movs	r2, #34	; 0x22
 800ce16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	689a      	ldr	r2, [r3, #8]
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f042 0201 	orr.w	r2, r2, #1
 800ce28:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce32:	d12a      	bne.n	800ce8a <HAL_UART_Receive_IT+0x156>
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce3a:	88fa      	ldrh	r2, [r7, #6]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d324      	bcc.n	800ce8a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce48:	d107      	bne.n	800ce5a <HAL_UART_Receive_IT+0x126>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	691b      	ldr	r3, [r3, #16]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d103      	bne.n	800ce5a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	4a1f      	ldr	r2, [pc, #124]	; (800ced4 <HAL_UART_Receive_IT+0x1a0>)
 800ce56:	66da      	str	r2, [r3, #108]	; 0x6c
 800ce58:	e002      	b.n	800ce60 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	4a1e      	ldr	r2, [pc, #120]	; (800ced8 <HAL_UART_Receive_IT+0x1a4>)
 800ce5e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce76:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	689a      	ldr	r2, [r3, #8]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ce86:	609a      	str	r2, [r3, #8]
 800ce88:	e01b      	b.n	800cec2 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce92:	d107      	bne.n	800cea4 <HAL_UART_Receive_IT+0x170>
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d103      	bne.n	800cea4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	4a0f      	ldr	r2, [pc, #60]	; (800cedc <HAL_UART_Receive_IT+0x1a8>)
 800cea0:	66da      	str	r2, [r3, #108]	; 0x6c
 800cea2:	e002      	b.n	800ceaa <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	4a0e      	ldr	r2, [pc, #56]	; (800cee0 <HAL_UART_Receive_IT+0x1ac>)
 800cea8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2200      	movs	r2, #0
 800ceae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800cec0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800cec2:	2300      	movs	r3, #0
 800cec4:	e000      	b.n	800cec8 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800cec6:	2302      	movs	r3, #2
  }
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3714      	adds	r7, #20
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr
 800ced4:	0800e711 	.word	0x0800e711
 800ced8:	0800e609 	.word	0x0800e609
 800cedc:	0800e55f 	.word	0x0800e55f
 800cee0:	0800e4b5 	.word	0x0800e4b5
 800cee4:	00000000 	.word	0x00000000

0800cee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cee8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ceec:	b08a      	sub	sp, #40	; 0x28
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800cef2:	2300      	movs	r3, #0
 800cef4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800cef6:	2300      	movs	r3, #0
 800cef8:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800cefa:	2300      	movs	r3, #0
 800cefc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	689a      	ldr	r2, [r3, #8]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	431a      	orrs	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	695b      	ldr	r3, [r3, #20]
 800cf0c:	431a      	orrs	r2, r3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	69db      	ldr	r3, [r3, #28]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	4ba4      	ldr	r3, [pc, #656]	; (800d1b8 <UART_SetConfig+0x2d0>)
 800cf28:	4013      	ands	r3, r2
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	6812      	ldr	r2, [r2, #0]
 800cf2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf30:	430b      	orrs	r3, r1
 800cf32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	68da      	ldr	r2, [r3, #12]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	430a      	orrs	r2, r1
 800cf48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	699b      	ldr	r3, [r3, #24]
 800cf4e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a99      	ldr	r2, [pc, #612]	; (800d1bc <UART_SetConfig+0x2d4>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d004      	beq.n	800cf64 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a1b      	ldr	r3, [r3, #32]
 800cf5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf60:	4313      	orrs	r3, r2
 800cf62:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800cf6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	6812      	ldr	r2, [r2, #0]
 800cf76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf78:	430b      	orrs	r3, r1
 800cf7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf82:	f023 010f 	bic.w	r1, r3, #15
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	430a      	orrs	r2, r1
 800cf90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a8a      	ldr	r2, [pc, #552]	; (800d1c0 <UART_SetConfig+0x2d8>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d126      	bne.n	800cfea <UART_SetConfig+0x102>
 800cf9c:	2003      	movs	r0, #3
 800cf9e:	f7ff fdd5 	bl	800cb4c <LL_RCC_GetUSARTClockSource>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b03      	cmp	r3, #3
 800cfa6:	d81b      	bhi.n	800cfe0 <UART_SetConfig+0xf8>
 800cfa8:	a201      	add	r2, pc, #4	; (adr r2, 800cfb0 <UART_SetConfig+0xc8>)
 800cfaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfae:	bf00      	nop
 800cfb0:	0800cfc1 	.word	0x0800cfc1
 800cfb4:	0800cfd1 	.word	0x0800cfd1
 800cfb8:	0800cfc9 	.word	0x0800cfc9
 800cfbc:	0800cfd9 	.word	0x0800cfd9
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cfc6:	e042      	b.n	800d04e <UART_SetConfig+0x166>
 800cfc8:	2302      	movs	r3, #2
 800cfca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cfce:	e03e      	b.n	800d04e <UART_SetConfig+0x166>
 800cfd0:	2304      	movs	r3, #4
 800cfd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cfd6:	e03a      	b.n	800d04e <UART_SetConfig+0x166>
 800cfd8:	2308      	movs	r3, #8
 800cfda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cfde:	e036      	b.n	800d04e <UART_SetConfig+0x166>
 800cfe0:	2310      	movs	r3, #16
 800cfe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cfe6:	bf00      	nop
 800cfe8:	e031      	b.n	800d04e <UART_SetConfig+0x166>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a73      	ldr	r2, [pc, #460]	; (800d1bc <UART_SetConfig+0x2d4>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d129      	bne.n	800d048 <UART_SetConfig+0x160>
 800cff4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800cff8:	f7ff fdb8 	bl	800cb6c <LL_RCC_GetLPUARTClockSource>
 800cffc:	4603      	mov	r3, r0
 800cffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d002:	d014      	beq.n	800d02e <UART_SetConfig+0x146>
 800d004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d008:	d802      	bhi.n	800d010 <UART_SetConfig+0x128>
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d007      	beq.n	800d01e <UART_SetConfig+0x136>
 800d00e:	e016      	b.n	800d03e <UART_SetConfig+0x156>
 800d010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d014:	d007      	beq.n	800d026 <UART_SetConfig+0x13e>
 800d016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d01a:	d00c      	beq.n	800d036 <UART_SetConfig+0x14e>
 800d01c:	e00f      	b.n	800d03e <UART_SetConfig+0x156>
 800d01e:	2300      	movs	r3, #0
 800d020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d024:	e013      	b.n	800d04e <UART_SetConfig+0x166>
 800d026:	2302      	movs	r3, #2
 800d028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d02c:	e00f      	b.n	800d04e <UART_SetConfig+0x166>
 800d02e:	2304      	movs	r3, #4
 800d030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d034:	e00b      	b.n	800d04e <UART_SetConfig+0x166>
 800d036:	2308      	movs	r3, #8
 800d038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d03c:	e007      	b.n	800d04e <UART_SetConfig+0x166>
 800d03e:	2310      	movs	r3, #16
 800d040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d044:	bf00      	nop
 800d046:	e002      	b.n	800d04e <UART_SetConfig+0x166>
 800d048:	2310      	movs	r3, #16
 800d04a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a5a      	ldr	r2, [pc, #360]	; (800d1bc <UART_SetConfig+0x2d4>)
 800d054:	4293      	cmp	r3, r2
 800d056:	f040 8428 	bne.w	800d8aa <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d05a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d05e:	2b08      	cmp	r3, #8
 800d060:	f200 8171 	bhi.w	800d346 <UART_SetConfig+0x45e>
 800d064:	a201      	add	r2, pc, #4	; (adr r2, 800d06c <UART_SetConfig+0x184>)
 800d066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06a:	bf00      	nop
 800d06c:	0800d091 	.word	0x0800d091
 800d070:	0800d347 	.word	0x0800d347
 800d074:	0800d133 	.word	0x0800d133
 800d078:	0800d347 	.word	0x0800d347
 800d07c:	0800d1f7 	.word	0x0800d1f7
 800d080:	0800d347 	.word	0x0800d347
 800d084:	0800d347 	.word	0x0800d347
 800d088:	0800d347 	.word	0x0800d347
 800d08c:	0800d299 	.word	0x0800d299
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d090:	f7fd fe6e 	bl	800ad70 <HAL_RCC_GetPCLK1Freq>
 800d094:	4602      	mov	r2, r0
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d044      	beq.n	800d128 <UART_SetConfig+0x240>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d03e      	beq.n	800d124 <UART_SetConfig+0x23c>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d038      	beq.n	800d120 <UART_SetConfig+0x238>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b2:	2b03      	cmp	r3, #3
 800d0b4:	d032      	beq.n	800d11c <UART_SetConfig+0x234>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ba:	2b04      	cmp	r3, #4
 800d0bc:	d02c      	beq.n	800d118 <UART_SetConfig+0x230>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c2:	2b05      	cmp	r3, #5
 800d0c4:	d026      	beq.n	800d114 <UART_SetConfig+0x22c>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ca:	2b06      	cmp	r3, #6
 800d0cc:	d020      	beq.n	800d110 <UART_SetConfig+0x228>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d2:	2b07      	cmp	r3, #7
 800d0d4:	d01a      	beq.n	800d10c <UART_SetConfig+0x224>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0da:	2b08      	cmp	r3, #8
 800d0dc:	d014      	beq.n	800d108 <UART_SetConfig+0x220>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e2:	2b09      	cmp	r3, #9
 800d0e4:	d00e      	beq.n	800d104 <UART_SetConfig+0x21c>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ea:	2b0a      	cmp	r3, #10
 800d0ec:	d008      	beq.n	800d100 <UART_SetConfig+0x218>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f2:	2b0b      	cmp	r3, #11
 800d0f4:	d102      	bne.n	800d0fc <UART_SetConfig+0x214>
 800d0f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0fa:	e016      	b.n	800d12a <UART_SetConfig+0x242>
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e014      	b.n	800d12a <UART_SetConfig+0x242>
 800d100:	2380      	movs	r3, #128	; 0x80
 800d102:	e012      	b.n	800d12a <UART_SetConfig+0x242>
 800d104:	2340      	movs	r3, #64	; 0x40
 800d106:	e010      	b.n	800d12a <UART_SetConfig+0x242>
 800d108:	2320      	movs	r3, #32
 800d10a:	e00e      	b.n	800d12a <UART_SetConfig+0x242>
 800d10c:	2310      	movs	r3, #16
 800d10e:	e00c      	b.n	800d12a <UART_SetConfig+0x242>
 800d110:	230c      	movs	r3, #12
 800d112:	e00a      	b.n	800d12a <UART_SetConfig+0x242>
 800d114:	230a      	movs	r3, #10
 800d116:	e008      	b.n	800d12a <UART_SetConfig+0x242>
 800d118:	2308      	movs	r3, #8
 800d11a:	e006      	b.n	800d12a <UART_SetConfig+0x242>
 800d11c:	2306      	movs	r3, #6
 800d11e:	e004      	b.n	800d12a <UART_SetConfig+0x242>
 800d120:	2304      	movs	r3, #4
 800d122:	e002      	b.n	800d12a <UART_SetConfig+0x242>
 800d124:	2302      	movs	r3, #2
 800d126:	e000      	b.n	800d12a <UART_SetConfig+0x242>
 800d128:	2301      	movs	r3, #1
 800d12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d12e:	617b      	str	r3, [r7, #20]
        break;
 800d130:	e10c      	b.n	800d34c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d136:	2b00      	cmp	r3, #0
 800d138:	d05a      	beq.n	800d1f0 <UART_SetConfig+0x308>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d054      	beq.n	800d1ec <UART_SetConfig+0x304>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d146:	2b02      	cmp	r3, #2
 800d148:	d04e      	beq.n	800d1e8 <UART_SetConfig+0x300>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14e:	2b03      	cmp	r3, #3
 800d150:	d048      	beq.n	800d1e4 <UART_SetConfig+0x2fc>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d156:	2b04      	cmp	r3, #4
 800d158:	d02c      	beq.n	800d1b4 <UART_SetConfig+0x2cc>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15e:	2b05      	cmp	r3, #5
 800d160:	d026      	beq.n	800d1b0 <UART_SetConfig+0x2c8>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d166:	2b06      	cmp	r3, #6
 800d168:	d020      	beq.n	800d1ac <UART_SetConfig+0x2c4>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16e:	2b07      	cmp	r3, #7
 800d170:	d01a      	beq.n	800d1a8 <UART_SetConfig+0x2c0>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d176:	2b08      	cmp	r3, #8
 800d178:	d014      	beq.n	800d1a4 <UART_SetConfig+0x2bc>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	2b09      	cmp	r3, #9
 800d180:	d00e      	beq.n	800d1a0 <UART_SetConfig+0x2b8>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d186:	2b0a      	cmp	r3, #10
 800d188:	d008      	beq.n	800d19c <UART_SetConfig+0x2b4>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18e:	2b0b      	cmp	r3, #11
 800d190:	d102      	bne.n	800d198 <UART_SetConfig+0x2b0>
 800d192:	f24f 4324 	movw	r3, #62500	; 0xf424
 800d196:	e02c      	b.n	800d1f2 <UART_SetConfig+0x30a>
 800d198:	4b0a      	ldr	r3, [pc, #40]	; (800d1c4 <UART_SetConfig+0x2dc>)
 800d19a:	e02a      	b.n	800d1f2 <UART_SetConfig+0x30a>
 800d19c:	4b0a      	ldr	r3, [pc, #40]	; (800d1c8 <UART_SetConfig+0x2e0>)
 800d19e:	e028      	b.n	800d1f2 <UART_SetConfig+0x30a>
 800d1a0:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <UART_SetConfig+0x2e4>)
 800d1a2:	e026      	b.n	800d1f2 <UART_SetConfig+0x30a>
 800d1a4:	4b0a      	ldr	r3, [pc, #40]	; (800d1d0 <UART_SetConfig+0x2e8>)
 800d1a6:	e024      	b.n	800d1f2 <UART_SetConfig+0x30a>
 800d1a8:	4b0a      	ldr	r3, [pc, #40]	; (800d1d4 <UART_SetConfig+0x2ec>)
 800d1aa:	e022      	b.n	800d1f2 <UART_SetConfig+0x30a>
 800d1ac:	4b0a      	ldr	r3, [pc, #40]	; (800d1d8 <UART_SetConfig+0x2f0>)
 800d1ae:	e020      	b.n	800d1f2 <UART_SetConfig+0x30a>
 800d1b0:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <UART_SetConfig+0x2f4>)
 800d1b2:	e01e      	b.n	800d1f2 <UART_SetConfig+0x30a>
 800d1b4:	4b0a      	ldr	r3, [pc, #40]	; (800d1e0 <UART_SetConfig+0x2f8>)
 800d1b6:	e01c      	b.n	800d1f2 <UART_SetConfig+0x30a>
 800d1b8:	cfff69f3 	.word	0xcfff69f3
 800d1bc:	40008000 	.word	0x40008000
 800d1c0:	40013800 	.word	0x40013800
 800d1c4:	00f42400 	.word	0x00f42400
 800d1c8:	0001e848 	.word	0x0001e848
 800d1cc:	0003d090 	.word	0x0003d090
 800d1d0:	0007a120 	.word	0x0007a120
 800d1d4:	000f4240 	.word	0x000f4240
 800d1d8:	00145855 	.word	0x00145855
 800d1dc:	00186a00 	.word	0x00186a00
 800d1e0:	001e8480 	.word	0x001e8480
 800d1e4:	4ba6      	ldr	r3, [pc, #664]	; (800d480 <UART_SetConfig+0x598>)
 800d1e6:	e004      	b.n	800d1f2 <UART_SetConfig+0x30a>
 800d1e8:	4ba6      	ldr	r3, [pc, #664]	; (800d484 <UART_SetConfig+0x59c>)
 800d1ea:	e002      	b.n	800d1f2 <UART_SetConfig+0x30a>
 800d1ec:	4ba6      	ldr	r3, [pc, #664]	; (800d488 <UART_SetConfig+0x5a0>)
 800d1ee:	e000      	b.n	800d1f2 <UART_SetConfig+0x30a>
 800d1f0:	4ba6      	ldr	r3, [pc, #664]	; (800d48c <UART_SetConfig+0x5a4>)
 800d1f2:	617b      	str	r3, [r7, #20]
        break;
 800d1f4:	e0aa      	b.n	800d34c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d1f6:	f7fd fd3d 	bl	800ac74 <HAL_RCC_GetSysClockFreq>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d200:	2b00      	cmp	r3, #0
 800d202:	d044      	beq.n	800d28e <UART_SetConfig+0x3a6>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d03e      	beq.n	800d28a <UART_SetConfig+0x3a2>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d210:	2b02      	cmp	r3, #2
 800d212:	d038      	beq.n	800d286 <UART_SetConfig+0x39e>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d218:	2b03      	cmp	r3, #3
 800d21a:	d032      	beq.n	800d282 <UART_SetConfig+0x39a>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d220:	2b04      	cmp	r3, #4
 800d222:	d02c      	beq.n	800d27e <UART_SetConfig+0x396>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d228:	2b05      	cmp	r3, #5
 800d22a:	d026      	beq.n	800d27a <UART_SetConfig+0x392>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d230:	2b06      	cmp	r3, #6
 800d232:	d020      	beq.n	800d276 <UART_SetConfig+0x38e>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d238:	2b07      	cmp	r3, #7
 800d23a:	d01a      	beq.n	800d272 <UART_SetConfig+0x38a>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d240:	2b08      	cmp	r3, #8
 800d242:	d014      	beq.n	800d26e <UART_SetConfig+0x386>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d248:	2b09      	cmp	r3, #9
 800d24a:	d00e      	beq.n	800d26a <UART_SetConfig+0x382>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d250:	2b0a      	cmp	r3, #10
 800d252:	d008      	beq.n	800d266 <UART_SetConfig+0x37e>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d258:	2b0b      	cmp	r3, #11
 800d25a:	d102      	bne.n	800d262 <UART_SetConfig+0x37a>
 800d25c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d260:	e016      	b.n	800d290 <UART_SetConfig+0x3a8>
 800d262:	2301      	movs	r3, #1
 800d264:	e014      	b.n	800d290 <UART_SetConfig+0x3a8>
 800d266:	2380      	movs	r3, #128	; 0x80
 800d268:	e012      	b.n	800d290 <UART_SetConfig+0x3a8>
 800d26a:	2340      	movs	r3, #64	; 0x40
 800d26c:	e010      	b.n	800d290 <UART_SetConfig+0x3a8>
 800d26e:	2320      	movs	r3, #32
 800d270:	e00e      	b.n	800d290 <UART_SetConfig+0x3a8>
 800d272:	2310      	movs	r3, #16
 800d274:	e00c      	b.n	800d290 <UART_SetConfig+0x3a8>
 800d276:	230c      	movs	r3, #12
 800d278:	e00a      	b.n	800d290 <UART_SetConfig+0x3a8>
 800d27a:	230a      	movs	r3, #10
 800d27c:	e008      	b.n	800d290 <UART_SetConfig+0x3a8>
 800d27e:	2308      	movs	r3, #8
 800d280:	e006      	b.n	800d290 <UART_SetConfig+0x3a8>
 800d282:	2306      	movs	r3, #6
 800d284:	e004      	b.n	800d290 <UART_SetConfig+0x3a8>
 800d286:	2304      	movs	r3, #4
 800d288:	e002      	b.n	800d290 <UART_SetConfig+0x3a8>
 800d28a:	2302      	movs	r3, #2
 800d28c:	e000      	b.n	800d290 <UART_SetConfig+0x3a8>
 800d28e:	2301      	movs	r3, #1
 800d290:	fbb2 f3f3 	udiv	r3, r2, r3
 800d294:	617b      	str	r3, [r7, #20]
        break;
 800d296:	e059      	b.n	800d34c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d04e      	beq.n	800d33e <UART_SetConfig+0x456>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d047      	beq.n	800d338 <UART_SetConfig+0x450>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d040      	beq.n	800d332 <UART_SetConfig+0x44a>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b4:	2b03      	cmp	r3, #3
 800d2b6:	d039      	beq.n	800d32c <UART_SetConfig+0x444>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2bc:	2b04      	cmp	r3, #4
 800d2be:	d032      	beq.n	800d326 <UART_SetConfig+0x43e>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c4:	2b05      	cmp	r3, #5
 800d2c6:	d02b      	beq.n	800d320 <UART_SetConfig+0x438>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2cc:	2b06      	cmp	r3, #6
 800d2ce:	d024      	beq.n	800d31a <UART_SetConfig+0x432>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d4:	2b07      	cmp	r3, #7
 800d2d6:	d01d      	beq.n	800d314 <UART_SetConfig+0x42c>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2dc:	2b08      	cmp	r3, #8
 800d2de:	d016      	beq.n	800d30e <UART_SetConfig+0x426>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e4:	2b09      	cmp	r3, #9
 800d2e6:	d00f      	beq.n	800d308 <UART_SetConfig+0x420>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ec:	2b0a      	cmp	r3, #10
 800d2ee:	d008      	beq.n	800d302 <UART_SetConfig+0x41a>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f4:	2b0b      	cmp	r3, #11
 800d2f6:	d101      	bne.n	800d2fc <UART_SetConfig+0x414>
 800d2f8:	2380      	movs	r3, #128	; 0x80
 800d2fa:	e022      	b.n	800d342 <UART_SetConfig+0x45a>
 800d2fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d300:	e01f      	b.n	800d342 <UART_SetConfig+0x45a>
 800d302:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d306:	e01c      	b.n	800d342 <UART_SetConfig+0x45a>
 800d308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d30c:	e019      	b.n	800d342 <UART_SetConfig+0x45a>
 800d30e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d312:	e016      	b.n	800d342 <UART_SetConfig+0x45a>
 800d314:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d318:	e013      	b.n	800d342 <UART_SetConfig+0x45a>
 800d31a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800d31e:	e010      	b.n	800d342 <UART_SetConfig+0x45a>
 800d320:	f640 43cc 	movw	r3, #3276	; 0xccc
 800d324:	e00d      	b.n	800d342 <UART_SetConfig+0x45a>
 800d326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d32a:	e00a      	b.n	800d342 <UART_SetConfig+0x45a>
 800d32c:	f241 5355 	movw	r3, #5461	; 0x1555
 800d330:	e007      	b.n	800d342 <UART_SetConfig+0x45a>
 800d332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d336:	e004      	b.n	800d342 <UART_SetConfig+0x45a>
 800d338:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d33c:	e001      	b.n	800d342 <UART_SetConfig+0x45a>
 800d33e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d342:	617b      	str	r3, [r7, #20]
        break;
 800d344:	e002      	b.n	800d34c <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	76fb      	strb	r3, [r7, #27]
        break;
 800d34a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 8604 	beq.w	800df5c <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	685a      	ldr	r2, [r3, #4]
 800d358:	4613      	mov	r3, r2
 800d35a:	005b      	lsls	r3, r3, #1
 800d35c:	4413      	add	r3, r2
 800d35e:	697a      	ldr	r2, [r7, #20]
 800d360:	429a      	cmp	r2, r3
 800d362:	d305      	bcc.n	800d370 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d36a:	697a      	ldr	r2, [r7, #20]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d903      	bls.n	800d378 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 800d370:	2301      	movs	r3, #1
 800d372:	76fb      	strb	r3, [r7, #27]
 800d374:	f000 bdf2 	b.w	800df5c <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 800d378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d37c:	2b08      	cmp	r3, #8
 800d37e:	f200 8281 	bhi.w	800d884 <UART_SetConfig+0x99c>
 800d382:	a201      	add	r2, pc, #4	; (adr r2, 800d388 <UART_SetConfig+0x4a0>)
 800d384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d388:	0800d3ad 	.word	0x0800d3ad
 800d38c:	0800d885 	.word	0x0800d885
 800d390:	0800d4fd 	.word	0x0800d4fd
 800d394:	0800d885 	.word	0x0800d885
 800d398:	0800d5f3 	.word	0x0800d5f3
 800d39c:	0800d885 	.word	0x0800d885
 800d3a0:	0800d885 	.word	0x0800d885
 800d3a4:	0800d885 	.word	0x0800d885
 800d3a8:	0800d731 	.word	0x0800d731
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800d3ac:	f7fd fce0 	bl	800ad70 <HAL_RCC_GetPCLK1Freq>
 800d3b0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f04f 0100 	mov.w	r1, #0
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d070      	beq.n	800d4a4 <UART_SetConfig+0x5bc>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d067      	beq.n	800d49a <UART_SetConfig+0x5b2>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d05e      	beq.n	800d490 <UART_SetConfig+0x5a8>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	d04c      	beq.n	800d474 <UART_SetConfig+0x58c>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3de:	2b04      	cmp	r3, #4
 800d3e0:	d043      	beq.n	800d46a <UART_SetConfig+0x582>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e6:	2b05      	cmp	r3, #5
 800d3e8:	d03a      	beq.n	800d460 <UART_SetConfig+0x578>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ee:	2b06      	cmp	r3, #6
 800d3f0:	d031      	beq.n	800d456 <UART_SetConfig+0x56e>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f6:	2b07      	cmp	r3, #7
 800d3f8:	d028      	beq.n	800d44c <UART_SetConfig+0x564>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fe:	2b08      	cmp	r3, #8
 800d400:	d01f      	beq.n	800d442 <UART_SetConfig+0x55a>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d406:	2b09      	cmp	r3, #9
 800d408:	d016      	beq.n	800d438 <UART_SetConfig+0x550>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40e:	2b0a      	cmp	r3, #10
 800d410:	d00d      	beq.n	800d42e <UART_SetConfig+0x546>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d416:	2b0b      	cmp	r3, #11
 800d418:	d104      	bne.n	800d424 <UART_SetConfig+0x53c>
 800d41a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d41e:	f04f 0400 	mov.w	r4, #0
 800d422:	e043      	b.n	800d4ac <UART_SetConfig+0x5c4>
 800d424:	f04f 0301 	mov.w	r3, #1
 800d428:	f04f 0400 	mov.w	r4, #0
 800d42c:	e03e      	b.n	800d4ac <UART_SetConfig+0x5c4>
 800d42e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d432:	f04f 0400 	mov.w	r4, #0
 800d436:	e039      	b.n	800d4ac <UART_SetConfig+0x5c4>
 800d438:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d43c:	f04f 0400 	mov.w	r4, #0
 800d440:	e034      	b.n	800d4ac <UART_SetConfig+0x5c4>
 800d442:	f04f 0320 	mov.w	r3, #32
 800d446:	f04f 0400 	mov.w	r4, #0
 800d44a:	e02f      	b.n	800d4ac <UART_SetConfig+0x5c4>
 800d44c:	f04f 0310 	mov.w	r3, #16
 800d450:	f04f 0400 	mov.w	r4, #0
 800d454:	e02a      	b.n	800d4ac <UART_SetConfig+0x5c4>
 800d456:	f04f 030c 	mov.w	r3, #12
 800d45a:	f04f 0400 	mov.w	r4, #0
 800d45e:	e025      	b.n	800d4ac <UART_SetConfig+0x5c4>
 800d460:	f04f 030a 	mov.w	r3, #10
 800d464:	f04f 0400 	mov.w	r4, #0
 800d468:	e020      	b.n	800d4ac <UART_SetConfig+0x5c4>
 800d46a:	f04f 0308 	mov.w	r3, #8
 800d46e:	f04f 0400 	mov.w	r4, #0
 800d472:	e01b      	b.n	800d4ac <UART_SetConfig+0x5c4>
 800d474:	f04f 0306 	mov.w	r3, #6
 800d478:	f04f 0400 	mov.w	r4, #0
 800d47c:	e016      	b.n	800d4ac <UART_SetConfig+0x5c4>
 800d47e:	bf00      	nop
 800d480:	0028b0aa 	.word	0x0028b0aa
 800d484:	003d0900 	.word	0x003d0900
 800d488:	007a1200 	.word	0x007a1200
 800d48c:	00f42400 	.word	0x00f42400
 800d490:	f04f 0304 	mov.w	r3, #4
 800d494:	f04f 0400 	mov.w	r4, #0
 800d498:	e008      	b.n	800d4ac <UART_SetConfig+0x5c4>
 800d49a:	f04f 0302 	mov.w	r3, #2
 800d49e:	f04f 0400 	mov.w	r4, #0
 800d4a2:	e003      	b.n	800d4ac <UART_SetConfig+0x5c4>
 800d4a4:	f04f 0301 	mov.w	r3, #1
 800d4a8:	f04f 0400 	mov.w	r4, #0
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	4623      	mov	r3, r4
 800d4b0:	f7f3 fb2c 	bl	8000b0c <__aeabi_uldivmod>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	4622      	mov	r2, r4
 800d4bc:	f04f 0300 	mov.w	r3, #0
 800d4c0:	f04f 0400 	mov.w	r4, #0
 800d4c4:	0214      	lsls	r4, r2, #8
 800d4c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d4ca:	020b      	lsls	r3, r1, #8
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	6852      	ldr	r2, [r2, #4]
 800d4d0:	0852      	lsrs	r2, r2, #1
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	f04f 0200 	mov.w	r2, #0
 800d4d8:	eb13 0b01 	adds.w	fp, r3, r1
 800d4dc:	eb44 0c02 	adc.w	ip, r4, r2
 800d4e0:	4658      	mov	r0, fp
 800d4e2:	4661      	mov	r1, ip
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	f04f 0400 	mov.w	r4, #0
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	4623      	mov	r3, r4
 800d4f0:	f7f3 fb0c 	bl	8000b0c <__aeabi_uldivmod>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	460c      	mov	r4, r1
 800d4f8:	61fb      	str	r3, [r7, #28]
            break;
 800d4fa:	e1c6      	b.n	800d88a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d500:	2b00      	cmp	r3, #0
 800d502:	d05b      	beq.n	800d5bc <UART_SetConfig+0x6d4>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d053      	beq.n	800d5b4 <UART_SetConfig+0x6cc>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d510:	2b02      	cmp	r3, #2
 800d512:	d04b      	beq.n	800d5ac <UART_SetConfig+0x6c4>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d518:	2b03      	cmp	r3, #3
 800d51a:	d043      	beq.n	800d5a4 <UART_SetConfig+0x6bc>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d520:	2b04      	cmp	r3, #4
 800d522:	d03b      	beq.n	800d59c <UART_SetConfig+0x6b4>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d528:	2b05      	cmp	r3, #5
 800d52a:	d033      	beq.n	800d594 <UART_SetConfig+0x6ac>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d530:	2b06      	cmp	r3, #6
 800d532:	d02b      	beq.n	800d58c <UART_SetConfig+0x6a4>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d538:	2b07      	cmp	r3, #7
 800d53a:	d023      	beq.n	800d584 <UART_SetConfig+0x69c>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d540:	2b08      	cmp	r3, #8
 800d542:	d01b      	beq.n	800d57c <UART_SetConfig+0x694>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d548:	2b09      	cmp	r3, #9
 800d54a:	d013      	beq.n	800d574 <UART_SetConfig+0x68c>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d550:	2b0a      	cmp	r3, #10
 800d552:	d00b      	beq.n	800d56c <UART_SetConfig+0x684>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d558:	2b0b      	cmp	r3, #11
 800d55a:	d103      	bne.n	800d564 <UART_SetConfig+0x67c>
 800d55c:	4bae      	ldr	r3, [pc, #696]	; (800d818 <UART_SetConfig+0x930>)
 800d55e:	f04f 0400 	mov.w	r4, #0
 800d562:	e02e      	b.n	800d5c2 <UART_SetConfig+0x6da>
 800d564:	4bad      	ldr	r3, [pc, #692]	; (800d81c <UART_SetConfig+0x934>)
 800d566:	f04f 0400 	mov.w	r4, #0
 800d56a:	e02a      	b.n	800d5c2 <UART_SetConfig+0x6da>
 800d56c:	4bac      	ldr	r3, [pc, #688]	; (800d820 <UART_SetConfig+0x938>)
 800d56e:	f04f 0400 	mov.w	r4, #0
 800d572:	e026      	b.n	800d5c2 <UART_SetConfig+0x6da>
 800d574:	4bab      	ldr	r3, [pc, #684]	; (800d824 <UART_SetConfig+0x93c>)
 800d576:	f04f 0400 	mov.w	r4, #0
 800d57a:	e022      	b.n	800d5c2 <UART_SetConfig+0x6da>
 800d57c:	4baa      	ldr	r3, [pc, #680]	; (800d828 <UART_SetConfig+0x940>)
 800d57e:	f04f 0400 	mov.w	r4, #0
 800d582:	e01e      	b.n	800d5c2 <UART_SetConfig+0x6da>
 800d584:	4ba9      	ldr	r3, [pc, #676]	; (800d82c <UART_SetConfig+0x944>)
 800d586:	f04f 0400 	mov.w	r4, #0
 800d58a:	e01a      	b.n	800d5c2 <UART_SetConfig+0x6da>
 800d58c:	a49e      	add	r4, pc, #632	; (adr r4, 800d808 <UART_SetConfig+0x920>)
 800d58e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d592:	e016      	b.n	800d5c2 <UART_SetConfig+0x6da>
 800d594:	4ba6      	ldr	r3, [pc, #664]	; (800d830 <UART_SetConfig+0x948>)
 800d596:	f04f 0400 	mov.w	r4, #0
 800d59a:	e012      	b.n	800d5c2 <UART_SetConfig+0x6da>
 800d59c:	4ba5      	ldr	r3, [pc, #660]	; (800d834 <UART_SetConfig+0x94c>)
 800d59e:	f04f 0400 	mov.w	r4, #0
 800d5a2:	e00e      	b.n	800d5c2 <UART_SetConfig+0x6da>
 800d5a4:	a49a      	add	r4, pc, #616	; (adr r4, 800d810 <UART_SetConfig+0x928>)
 800d5a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d5aa:	e00a      	b.n	800d5c2 <UART_SetConfig+0x6da>
 800d5ac:	4ba2      	ldr	r3, [pc, #648]	; (800d838 <UART_SetConfig+0x950>)
 800d5ae:	f04f 0400 	mov.w	r4, #0
 800d5b2:	e006      	b.n	800d5c2 <UART_SetConfig+0x6da>
 800d5b4:	4ba1      	ldr	r3, [pc, #644]	; (800d83c <UART_SetConfig+0x954>)
 800d5b6:	f04f 0400 	mov.w	r4, #0
 800d5ba:	e002      	b.n	800d5c2 <UART_SetConfig+0x6da>
 800d5bc:	4b97      	ldr	r3, [pc, #604]	; (800d81c <UART_SetConfig+0x934>)
 800d5be:	f04f 0400 	mov.w	r4, #0
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	6852      	ldr	r2, [r2, #4]
 800d5c6:	0852      	lsrs	r2, r2, #1
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	f04f 0200 	mov.w	r2, #0
 800d5ce:	eb13 0b01 	adds.w	fp, r3, r1
 800d5d2:	eb44 0c02 	adc.w	ip, r4, r2
 800d5d6:	4658      	mov	r0, fp
 800d5d8:	4661      	mov	r1, ip
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	f04f 0400 	mov.w	r4, #0
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	4623      	mov	r3, r4
 800d5e6:	f7f3 fa91 	bl	8000b0c <__aeabi_uldivmod>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	460c      	mov	r4, r1
 800d5ee:	61fb      	str	r3, [r7, #28]
            break;
 800d5f0:	e14b      	b.n	800d88a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800d5f2:	f7fd fb3f 	bl	800ac74 <HAL_RCC_GetSysClockFreq>
 800d5f6:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f04f 0100 	mov.w	r1, #0
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d604:	2b00      	cmp	r3, #0
 800d606:	d067      	beq.n	800d6d8 <UART_SetConfig+0x7f0>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d05e      	beq.n	800d6ce <UART_SetConfig+0x7e6>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d614:	2b02      	cmp	r3, #2
 800d616:	d055      	beq.n	800d6c4 <UART_SetConfig+0x7dc>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61c:	2b03      	cmp	r3, #3
 800d61e:	d04c      	beq.n	800d6ba <UART_SetConfig+0x7d2>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d624:	2b04      	cmp	r3, #4
 800d626:	d043      	beq.n	800d6b0 <UART_SetConfig+0x7c8>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d62c:	2b05      	cmp	r3, #5
 800d62e:	d03a      	beq.n	800d6a6 <UART_SetConfig+0x7be>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d634:	2b06      	cmp	r3, #6
 800d636:	d031      	beq.n	800d69c <UART_SetConfig+0x7b4>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63c:	2b07      	cmp	r3, #7
 800d63e:	d028      	beq.n	800d692 <UART_SetConfig+0x7aa>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d644:	2b08      	cmp	r3, #8
 800d646:	d01f      	beq.n	800d688 <UART_SetConfig+0x7a0>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64c:	2b09      	cmp	r3, #9
 800d64e:	d016      	beq.n	800d67e <UART_SetConfig+0x796>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d654:	2b0a      	cmp	r3, #10
 800d656:	d00d      	beq.n	800d674 <UART_SetConfig+0x78c>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65c:	2b0b      	cmp	r3, #11
 800d65e:	d104      	bne.n	800d66a <UART_SetConfig+0x782>
 800d660:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d664:	f04f 0400 	mov.w	r4, #0
 800d668:	e03a      	b.n	800d6e0 <UART_SetConfig+0x7f8>
 800d66a:	f04f 0301 	mov.w	r3, #1
 800d66e:	f04f 0400 	mov.w	r4, #0
 800d672:	e035      	b.n	800d6e0 <UART_SetConfig+0x7f8>
 800d674:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d678:	f04f 0400 	mov.w	r4, #0
 800d67c:	e030      	b.n	800d6e0 <UART_SetConfig+0x7f8>
 800d67e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d682:	f04f 0400 	mov.w	r4, #0
 800d686:	e02b      	b.n	800d6e0 <UART_SetConfig+0x7f8>
 800d688:	f04f 0320 	mov.w	r3, #32
 800d68c:	f04f 0400 	mov.w	r4, #0
 800d690:	e026      	b.n	800d6e0 <UART_SetConfig+0x7f8>
 800d692:	f04f 0310 	mov.w	r3, #16
 800d696:	f04f 0400 	mov.w	r4, #0
 800d69a:	e021      	b.n	800d6e0 <UART_SetConfig+0x7f8>
 800d69c:	f04f 030c 	mov.w	r3, #12
 800d6a0:	f04f 0400 	mov.w	r4, #0
 800d6a4:	e01c      	b.n	800d6e0 <UART_SetConfig+0x7f8>
 800d6a6:	f04f 030a 	mov.w	r3, #10
 800d6aa:	f04f 0400 	mov.w	r4, #0
 800d6ae:	e017      	b.n	800d6e0 <UART_SetConfig+0x7f8>
 800d6b0:	f04f 0308 	mov.w	r3, #8
 800d6b4:	f04f 0400 	mov.w	r4, #0
 800d6b8:	e012      	b.n	800d6e0 <UART_SetConfig+0x7f8>
 800d6ba:	f04f 0306 	mov.w	r3, #6
 800d6be:	f04f 0400 	mov.w	r4, #0
 800d6c2:	e00d      	b.n	800d6e0 <UART_SetConfig+0x7f8>
 800d6c4:	f04f 0304 	mov.w	r3, #4
 800d6c8:	f04f 0400 	mov.w	r4, #0
 800d6cc:	e008      	b.n	800d6e0 <UART_SetConfig+0x7f8>
 800d6ce:	f04f 0302 	mov.w	r3, #2
 800d6d2:	f04f 0400 	mov.w	r4, #0
 800d6d6:	e003      	b.n	800d6e0 <UART_SetConfig+0x7f8>
 800d6d8:	f04f 0301 	mov.w	r3, #1
 800d6dc:	f04f 0400 	mov.w	r4, #0
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	4623      	mov	r3, r4
 800d6e4:	f7f3 fa12 	bl	8000b0c <__aeabi_uldivmod>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	460c      	mov	r4, r1
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	4622      	mov	r2, r4
 800d6f0:	f04f 0300 	mov.w	r3, #0
 800d6f4:	f04f 0400 	mov.w	r4, #0
 800d6f8:	0214      	lsls	r4, r2, #8
 800d6fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d6fe:	020b      	lsls	r3, r1, #8
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	6852      	ldr	r2, [r2, #4]
 800d704:	0852      	lsrs	r2, r2, #1
 800d706:	4611      	mov	r1, r2
 800d708:	f04f 0200 	mov.w	r2, #0
 800d70c:	eb13 0b01 	adds.w	fp, r3, r1
 800d710:	eb44 0c02 	adc.w	ip, r4, r2
 800d714:	4658      	mov	r0, fp
 800d716:	4661      	mov	r1, ip
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	f04f 0400 	mov.w	r4, #0
 800d720:	461a      	mov	r2, r3
 800d722:	4623      	mov	r3, r4
 800d724:	f7f3 f9f2 	bl	8000b0c <__aeabi_uldivmod>
 800d728:	4603      	mov	r3, r0
 800d72a:	460c      	mov	r4, r1
 800d72c:	61fb      	str	r3, [r7, #28]
            break;
 800d72e:	e0ac      	b.n	800d88a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d734:	2b00      	cmp	r3, #0
 800d736:	f000 8089 	beq.w	800d84c <UART_SetConfig+0x964>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d05b      	beq.n	800d7fa <UART_SetConfig+0x912>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d746:	2b02      	cmp	r3, #2
 800d748:	d052      	beq.n	800d7f0 <UART_SetConfig+0x908>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74e:	2b03      	cmp	r3, #3
 800d750:	d04a      	beq.n	800d7e8 <UART_SetConfig+0x900>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d756:	2b04      	cmp	r3, #4
 800d758:	d041      	beq.n	800d7de <UART_SetConfig+0x8f6>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d75e:	2b05      	cmp	r3, #5
 800d760:	d039      	beq.n	800d7d6 <UART_SetConfig+0x8ee>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d766:	2b06      	cmp	r3, #6
 800d768:	d031      	beq.n	800d7ce <UART_SetConfig+0x8e6>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76e:	2b07      	cmp	r3, #7
 800d770:	d028      	beq.n	800d7c4 <UART_SetConfig+0x8dc>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d776:	2b08      	cmp	r3, #8
 800d778:	d01f      	beq.n	800d7ba <UART_SetConfig+0x8d2>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77e:	2b09      	cmp	r3, #9
 800d780:	d016      	beq.n	800d7b0 <UART_SetConfig+0x8c8>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d786:	2b0a      	cmp	r3, #10
 800d788:	d00d      	beq.n	800d7a6 <UART_SetConfig+0x8be>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78e:	2b0b      	cmp	r3, #11
 800d790:	d104      	bne.n	800d79c <UART_SetConfig+0x8b4>
 800d792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d796:	f04f 0400 	mov.w	r4, #0
 800d79a:	e05b      	b.n	800d854 <UART_SetConfig+0x96c>
 800d79c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d7a0:	f04f 0400 	mov.w	r4, #0
 800d7a4:	e056      	b.n	800d854 <UART_SetConfig+0x96c>
 800d7a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d7aa:	f04f 0400 	mov.w	r4, #0
 800d7ae:	e051      	b.n	800d854 <UART_SetConfig+0x96c>
 800d7b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7b4:	f04f 0400 	mov.w	r4, #0
 800d7b8:	e04c      	b.n	800d854 <UART_SetConfig+0x96c>
 800d7ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d7be:	f04f 0400 	mov.w	r4, #0
 800d7c2:	e047      	b.n	800d854 <UART_SetConfig+0x96c>
 800d7c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d7c8:	f04f 0400 	mov.w	r4, #0
 800d7cc:	e042      	b.n	800d854 <UART_SetConfig+0x96c>
 800d7ce:	4b1c      	ldr	r3, [pc, #112]	; (800d840 <UART_SetConfig+0x958>)
 800d7d0:	f04f 0400 	mov.w	r4, #0
 800d7d4:	e03e      	b.n	800d854 <UART_SetConfig+0x96c>
 800d7d6:	4b1b      	ldr	r3, [pc, #108]	; (800d844 <UART_SetConfig+0x95c>)
 800d7d8:	f04f 0400 	mov.w	r4, #0
 800d7dc:	e03a      	b.n	800d854 <UART_SetConfig+0x96c>
 800d7de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d7e2:	f04f 0400 	mov.w	r4, #0
 800d7e6:	e035      	b.n	800d854 <UART_SetConfig+0x96c>
 800d7e8:	4b17      	ldr	r3, [pc, #92]	; (800d848 <UART_SetConfig+0x960>)
 800d7ea:	f04f 0400 	mov.w	r4, #0
 800d7ee:	e031      	b.n	800d854 <UART_SetConfig+0x96c>
 800d7f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d7f4:	f04f 0400 	mov.w	r4, #0
 800d7f8:	e02c      	b.n	800d854 <UART_SetConfig+0x96c>
 800d7fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d7fe:	f04f 0400 	mov.w	r4, #0
 800d802:	e027      	b.n	800d854 <UART_SetConfig+0x96c>
 800d804:	f3af 8000 	nop.w
 800d808:	14585500 	.word	0x14585500
 800d80c:	00000000 	.word	0x00000000
 800d810:	28b0aa00 	.word	0x28b0aa00
 800d814:	00000000 	.word	0x00000000
 800d818:	00f42400 	.word	0x00f42400
 800d81c:	f4240000 	.word	0xf4240000
 800d820:	01e84800 	.word	0x01e84800
 800d824:	03d09000 	.word	0x03d09000
 800d828:	07a12000 	.word	0x07a12000
 800d82c:	0f424000 	.word	0x0f424000
 800d830:	186a0000 	.word	0x186a0000
 800d834:	1e848000 	.word	0x1e848000
 800d838:	3d090000 	.word	0x3d090000
 800d83c:	7a120000 	.word	0x7a120000
 800d840:	000aaa00 	.word	0x000aaa00
 800d844:	000ccc00 	.word	0x000ccc00
 800d848:	00155500 	.word	0x00155500
 800d84c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d850:	f04f 0400 	mov.w	r4, #0
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	6852      	ldr	r2, [r2, #4]
 800d858:	0852      	lsrs	r2, r2, #1
 800d85a:	4611      	mov	r1, r2
 800d85c:	f04f 0200 	mov.w	r2, #0
 800d860:	eb13 0b01 	adds.w	fp, r3, r1
 800d864:	eb44 0c02 	adc.w	ip, r4, r2
 800d868:	4658      	mov	r0, fp
 800d86a:	4661      	mov	r1, ip
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	f04f 0400 	mov.w	r4, #0
 800d874:	461a      	mov	r2, r3
 800d876:	4623      	mov	r3, r4
 800d878:	f7f3 f948 	bl	8000b0c <__aeabi_uldivmod>
 800d87c:	4603      	mov	r3, r0
 800d87e:	460c      	mov	r4, r1
 800d880:	61fb      	str	r3, [r7, #28]
            break;
 800d882:	e002      	b.n	800d88a <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 800d884:	2301      	movs	r3, #1
 800d886:	76fb      	strb	r3, [r7, #27]
            break;
 800d888:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d890:	d308      	bcc.n	800d8a4 <UART_SetConfig+0x9bc>
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d898:	d204      	bcs.n	800d8a4 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	69fa      	ldr	r2, [r7, #28]
 800d8a0:	60da      	str	r2, [r3, #12]
 800d8a2:	e35b      	b.n	800df5c <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	76fb      	strb	r3, [r7, #27]
 800d8a8:	e358      	b.n	800df5c <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	69db      	ldr	r3, [r3, #28]
 800d8ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8b2:	f040 81a6 	bne.w	800dc02 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800d8b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	2b07      	cmp	r3, #7
 800d8be:	f200 8180 	bhi.w	800dbc2 <UART_SetConfig+0xcda>
 800d8c2:	a201      	add	r2, pc, #4	; (adr r2, 800d8c8 <UART_SetConfig+0x9e0>)
 800d8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8c8:	0800d8e9 	.word	0x0800d8e9
 800d8cc:	0800d9a1 	.word	0x0800d9a1
 800d8d0:	0800dbc3 	.word	0x0800dbc3
 800d8d4:	0800da49 	.word	0x0800da49
 800d8d8:	0800dbc3 	.word	0x0800dbc3
 800d8dc:	0800dbc3 	.word	0x0800dbc3
 800d8e0:	0800dbc3 	.word	0x0800dbc3
 800d8e4:	0800db01 	.word	0x0800db01
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d8e8:	f7fd fa58 	bl	800ad9c <HAL_RCC_GetPCLK2Freq>
 800d8ec:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d044      	beq.n	800d980 <UART_SetConfig+0xa98>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d03e      	beq.n	800d97c <UART_SetConfig+0xa94>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d902:	2b02      	cmp	r3, #2
 800d904:	d038      	beq.n	800d978 <UART_SetConfig+0xa90>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90a:	2b03      	cmp	r3, #3
 800d90c:	d032      	beq.n	800d974 <UART_SetConfig+0xa8c>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d912:	2b04      	cmp	r3, #4
 800d914:	d02c      	beq.n	800d970 <UART_SetConfig+0xa88>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91a:	2b05      	cmp	r3, #5
 800d91c:	d026      	beq.n	800d96c <UART_SetConfig+0xa84>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d922:	2b06      	cmp	r3, #6
 800d924:	d020      	beq.n	800d968 <UART_SetConfig+0xa80>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d92a:	2b07      	cmp	r3, #7
 800d92c:	d01a      	beq.n	800d964 <UART_SetConfig+0xa7c>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d932:	2b08      	cmp	r3, #8
 800d934:	d014      	beq.n	800d960 <UART_SetConfig+0xa78>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93a:	2b09      	cmp	r3, #9
 800d93c:	d00e      	beq.n	800d95c <UART_SetConfig+0xa74>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d942:	2b0a      	cmp	r3, #10
 800d944:	d008      	beq.n	800d958 <UART_SetConfig+0xa70>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d94a:	2b0b      	cmp	r3, #11
 800d94c:	d102      	bne.n	800d954 <UART_SetConfig+0xa6c>
 800d94e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d952:	e016      	b.n	800d982 <UART_SetConfig+0xa9a>
 800d954:	2301      	movs	r3, #1
 800d956:	e014      	b.n	800d982 <UART_SetConfig+0xa9a>
 800d958:	2380      	movs	r3, #128	; 0x80
 800d95a:	e012      	b.n	800d982 <UART_SetConfig+0xa9a>
 800d95c:	2340      	movs	r3, #64	; 0x40
 800d95e:	e010      	b.n	800d982 <UART_SetConfig+0xa9a>
 800d960:	2320      	movs	r3, #32
 800d962:	e00e      	b.n	800d982 <UART_SetConfig+0xa9a>
 800d964:	2310      	movs	r3, #16
 800d966:	e00c      	b.n	800d982 <UART_SetConfig+0xa9a>
 800d968:	230c      	movs	r3, #12
 800d96a:	e00a      	b.n	800d982 <UART_SetConfig+0xa9a>
 800d96c:	230a      	movs	r3, #10
 800d96e:	e008      	b.n	800d982 <UART_SetConfig+0xa9a>
 800d970:	2308      	movs	r3, #8
 800d972:	e006      	b.n	800d982 <UART_SetConfig+0xa9a>
 800d974:	2306      	movs	r3, #6
 800d976:	e004      	b.n	800d982 <UART_SetConfig+0xa9a>
 800d978:	2304      	movs	r3, #4
 800d97a:	e002      	b.n	800d982 <UART_SetConfig+0xa9a>
 800d97c:	2302      	movs	r3, #2
 800d97e:	e000      	b.n	800d982 <UART_SetConfig+0xa9a>
 800d980:	2301      	movs	r3, #1
 800d982:	693a      	ldr	r2, [r7, #16]
 800d984:	fbb2 f3f3 	udiv	r3, r2, r3
 800d988:	005a      	lsls	r2, r3, #1
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	085b      	lsrs	r3, r3, #1
 800d990:	441a      	add	r2, r3
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	fbb2 f3f3 	udiv	r3, r2, r3
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	61fb      	str	r3, [r7, #28]
        break;
 800d99e:	e113      	b.n	800dbc8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d043      	beq.n	800da30 <UART_SetConfig+0xb48>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d03d      	beq.n	800da2c <UART_SetConfig+0xb44>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b4:	2b02      	cmp	r3, #2
 800d9b6:	d037      	beq.n	800da28 <UART_SetConfig+0xb40>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9bc:	2b03      	cmp	r3, #3
 800d9be:	d031      	beq.n	800da24 <UART_SetConfig+0xb3c>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c4:	2b04      	cmp	r3, #4
 800d9c6:	d02b      	beq.n	800da20 <UART_SetConfig+0xb38>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9cc:	2b05      	cmp	r3, #5
 800d9ce:	d025      	beq.n	800da1c <UART_SetConfig+0xb34>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d4:	2b06      	cmp	r3, #6
 800d9d6:	d01f      	beq.n	800da18 <UART_SetConfig+0xb30>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9dc:	2b07      	cmp	r3, #7
 800d9de:	d019      	beq.n	800da14 <UART_SetConfig+0xb2c>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e4:	2b08      	cmp	r3, #8
 800d9e6:	d013      	beq.n	800da10 <UART_SetConfig+0xb28>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ec:	2b09      	cmp	r3, #9
 800d9ee:	d00d      	beq.n	800da0c <UART_SetConfig+0xb24>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f4:	2b0a      	cmp	r3, #10
 800d9f6:	d007      	beq.n	800da08 <UART_SetConfig+0xb20>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fc:	2b0b      	cmp	r3, #11
 800d9fe:	d101      	bne.n	800da04 <UART_SetConfig+0xb1c>
 800da00:	4b8c      	ldr	r3, [pc, #560]	; (800dc34 <UART_SetConfig+0xd4c>)
 800da02:	e016      	b.n	800da32 <UART_SetConfig+0xb4a>
 800da04:	4b8c      	ldr	r3, [pc, #560]	; (800dc38 <UART_SetConfig+0xd50>)
 800da06:	e014      	b.n	800da32 <UART_SetConfig+0xb4a>
 800da08:	4b8c      	ldr	r3, [pc, #560]	; (800dc3c <UART_SetConfig+0xd54>)
 800da0a:	e012      	b.n	800da32 <UART_SetConfig+0xb4a>
 800da0c:	4b8c      	ldr	r3, [pc, #560]	; (800dc40 <UART_SetConfig+0xd58>)
 800da0e:	e010      	b.n	800da32 <UART_SetConfig+0xb4a>
 800da10:	4b8c      	ldr	r3, [pc, #560]	; (800dc44 <UART_SetConfig+0xd5c>)
 800da12:	e00e      	b.n	800da32 <UART_SetConfig+0xb4a>
 800da14:	4b8c      	ldr	r3, [pc, #560]	; (800dc48 <UART_SetConfig+0xd60>)
 800da16:	e00c      	b.n	800da32 <UART_SetConfig+0xb4a>
 800da18:	4b8c      	ldr	r3, [pc, #560]	; (800dc4c <UART_SetConfig+0xd64>)
 800da1a:	e00a      	b.n	800da32 <UART_SetConfig+0xb4a>
 800da1c:	4b8c      	ldr	r3, [pc, #560]	; (800dc50 <UART_SetConfig+0xd68>)
 800da1e:	e008      	b.n	800da32 <UART_SetConfig+0xb4a>
 800da20:	4b8c      	ldr	r3, [pc, #560]	; (800dc54 <UART_SetConfig+0xd6c>)
 800da22:	e006      	b.n	800da32 <UART_SetConfig+0xb4a>
 800da24:	4b8c      	ldr	r3, [pc, #560]	; (800dc58 <UART_SetConfig+0xd70>)
 800da26:	e004      	b.n	800da32 <UART_SetConfig+0xb4a>
 800da28:	4b8c      	ldr	r3, [pc, #560]	; (800dc5c <UART_SetConfig+0xd74>)
 800da2a:	e002      	b.n	800da32 <UART_SetConfig+0xb4a>
 800da2c:	4b8c      	ldr	r3, [pc, #560]	; (800dc60 <UART_SetConfig+0xd78>)
 800da2e:	e000      	b.n	800da32 <UART_SetConfig+0xb4a>
 800da30:	4b81      	ldr	r3, [pc, #516]	; (800dc38 <UART_SetConfig+0xd50>)
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	6852      	ldr	r2, [r2, #4]
 800da36:	0852      	lsrs	r2, r2, #1
 800da38:	441a      	add	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da42:	b29b      	uxth	r3, r3
 800da44:	61fb      	str	r3, [r7, #28]
        break;
 800da46:	e0bf      	b.n	800dbc8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da48:	f7fd f914 	bl	800ac74 <HAL_RCC_GetSysClockFreq>
 800da4c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da52:	2b00      	cmp	r3, #0
 800da54:	d044      	beq.n	800dae0 <UART_SetConfig+0xbf8>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d03e      	beq.n	800dadc <UART_SetConfig+0xbf4>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da62:	2b02      	cmp	r3, #2
 800da64:	d038      	beq.n	800dad8 <UART_SetConfig+0xbf0>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d032      	beq.n	800dad4 <UART_SetConfig+0xbec>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da72:	2b04      	cmp	r3, #4
 800da74:	d02c      	beq.n	800dad0 <UART_SetConfig+0xbe8>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7a:	2b05      	cmp	r3, #5
 800da7c:	d026      	beq.n	800dacc <UART_SetConfig+0xbe4>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da82:	2b06      	cmp	r3, #6
 800da84:	d020      	beq.n	800dac8 <UART_SetConfig+0xbe0>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8a:	2b07      	cmp	r3, #7
 800da8c:	d01a      	beq.n	800dac4 <UART_SetConfig+0xbdc>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da92:	2b08      	cmp	r3, #8
 800da94:	d014      	beq.n	800dac0 <UART_SetConfig+0xbd8>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9a:	2b09      	cmp	r3, #9
 800da9c:	d00e      	beq.n	800dabc <UART_SetConfig+0xbd4>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa2:	2b0a      	cmp	r3, #10
 800daa4:	d008      	beq.n	800dab8 <UART_SetConfig+0xbd0>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daaa:	2b0b      	cmp	r3, #11
 800daac:	d102      	bne.n	800dab4 <UART_SetConfig+0xbcc>
 800daae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dab2:	e016      	b.n	800dae2 <UART_SetConfig+0xbfa>
 800dab4:	2301      	movs	r3, #1
 800dab6:	e014      	b.n	800dae2 <UART_SetConfig+0xbfa>
 800dab8:	2380      	movs	r3, #128	; 0x80
 800daba:	e012      	b.n	800dae2 <UART_SetConfig+0xbfa>
 800dabc:	2340      	movs	r3, #64	; 0x40
 800dabe:	e010      	b.n	800dae2 <UART_SetConfig+0xbfa>
 800dac0:	2320      	movs	r3, #32
 800dac2:	e00e      	b.n	800dae2 <UART_SetConfig+0xbfa>
 800dac4:	2310      	movs	r3, #16
 800dac6:	e00c      	b.n	800dae2 <UART_SetConfig+0xbfa>
 800dac8:	230c      	movs	r3, #12
 800daca:	e00a      	b.n	800dae2 <UART_SetConfig+0xbfa>
 800dacc:	230a      	movs	r3, #10
 800dace:	e008      	b.n	800dae2 <UART_SetConfig+0xbfa>
 800dad0:	2308      	movs	r3, #8
 800dad2:	e006      	b.n	800dae2 <UART_SetConfig+0xbfa>
 800dad4:	2306      	movs	r3, #6
 800dad6:	e004      	b.n	800dae2 <UART_SetConfig+0xbfa>
 800dad8:	2304      	movs	r3, #4
 800dada:	e002      	b.n	800dae2 <UART_SetConfig+0xbfa>
 800dadc:	2302      	movs	r3, #2
 800dade:	e000      	b.n	800dae2 <UART_SetConfig+0xbfa>
 800dae0:	2301      	movs	r3, #1
 800dae2:	693a      	ldr	r2, [r7, #16]
 800dae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dae8:	005a      	lsls	r2, r3, #1
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	085b      	lsrs	r3, r3, #1
 800daf0:	441a      	add	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	61fb      	str	r3, [r7, #28]
        break;
 800dafe:	e063      	b.n	800dbc8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db04:	2b00      	cmp	r3, #0
 800db06:	d04f      	beq.n	800dba8 <UART_SetConfig+0xcc0>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d048      	beq.n	800dba2 <UART_SetConfig+0xcba>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db14:	2b02      	cmp	r3, #2
 800db16:	d041      	beq.n	800db9c <UART_SetConfig+0xcb4>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db1c:	2b03      	cmp	r3, #3
 800db1e:	d03a      	beq.n	800db96 <UART_SetConfig+0xcae>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db24:	2b04      	cmp	r3, #4
 800db26:	d033      	beq.n	800db90 <UART_SetConfig+0xca8>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db2c:	2b05      	cmp	r3, #5
 800db2e:	d02c      	beq.n	800db8a <UART_SetConfig+0xca2>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db34:	2b06      	cmp	r3, #6
 800db36:	d025      	beq.n	800db84 <UART_SetConfig+0xc9c>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3c:	2b07      	cmp	r3, #7
 800db3e:	d01e      	beq.n	800db7e <UART_SetConfig+0xc96>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db44:	2b08      	cmp	r3, #8
 800db46:	d017      	beq.n	800db78 <UART_SetConfig+0xc90>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db4c:	2b09      	cmp	r3, #9
 800db4e:	d010      	beq.n	800db72 <UART_SetConfig+0xc8a>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db54:	2b0a      	cmp	r3, #10
 800db56:	d009      	beq.n	800db6c <UART_SetConfig+0xc84>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5c:	2b0b      	cmp	r3, #11
 800db5e:	d102      	bne.n	800db66 <UART_SetConfig+0xc7e>
 800db60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db64:	e022      	b.n	800dbac <UART_SetConfig+0xcc4>
 800db66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800db6a:	e01f      	b.n	800dbac <UART_SetConfig+0xcc4>
 800db6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db70:	e01c      	b.n	800dbac <UART_SetConfig+0xcc4>
 800db72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db76:	e019      	b.n	800dbac <UART_SetConfig+0xcc4>
 800db78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db7c:	e016      	b.n	800dbac <UART_SetConfig+0xcc4>
 800db7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db82:	e013      	b.n	800dbac <UART_SetConfig+0xcc4>
 800db84:	f241 5354 	movw	r3, #5460	; 0x1554
 800db88:	e010      	b.n	800dbac <UART_SetConfig+0xcc4>
 800db8a:	f641 1398 	movw	r3, #6552	; 0x1998
 800db8e:	e00d      	b.n	800dbac <UART_SetConfig+0xcc4>
 800db90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800db94:	e00a      	b.n	800dbac <UART_SetConfig+0xcc4>
 800db96:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800db9a:	e007      	b.n	800dbac <UART_SetConfig+0xcc4>
 800db9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dba0:	e004      	b.n	800dbac <UART_SetConfig+0xcc4>
 800dba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dba6:	e001      	b.n	800dbac <UART_SetConfig+0xcc4>
 800dba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	6852      	ldr	r2, [r2, #4]
 800dbb0:	0852      	lsrs	r2, r2, #1
 800dbb2:	441a      	add	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	61fb      	str	r3, [r7, #28]
        break;
 800dbc0:	e002      	b.n	800dbc8 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	76fb      	strb	r3, [r7, #27]
        break;
 800dbc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	2b0f      	cmp	r3, #15
 800dbcc:	d916      	bls.n	800dbfc <UART_SetConfig+0xd14>
 800dbce:	69fb      	ldr	r3, [r7, #28]
 800dbd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbd4:	d212      	bcs.n	800dbfc <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	f023 030f 	bic.w	r3, r3, #15
 800dbde:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	085b      	lsrs	r3, r3, #1
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	f003 0307 	and.w	r3, r3, #7
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	89fb      	ldrh	r3, [r7, #14]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	89fa      	ldrh	r2, [r7, #14]
 800dbf8:	60da      	str	r2, [r3, #12]
 800dbfa:	e1af      	b.n	800df5c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	76fb      	strb	r3, [r7, #27]
 800dc00:	e1ac      	b.n	800df5c <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 800dc02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc06:	3b01      	subs	r3, #1
 800dc08:	2b07      	cmp	r3, #7
 800dc0a:	f200 8196 	bhi.w	800df3a <UART_SetConfig+0x1052>
 800dc0e:	a201      	add	r2, pc, #4	; (adr r2, 800dc14 <UART_SetConfig+0xd2c>)
 800dc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc14:	0800dc65 	.word	0x0800dc65
 800dc18:	0800dd1b 	.word	0x0800dd1b
 800dc1c:	0800df3b 	.word	0x0800df3b
 800dc20:	0800ddc5 	.word	0x0800ddc5
 800dc24:	0800df3b 	.word	0x0800df3b
 800dc28:	0800df3b 	.word	0x0800df3b
 800dc2c:	0800df3b 	.word	0x0800df3b
 800dc30:	0800de7b 	.word	0x0800de7b
 800dc34:	0001e848 	.word	0x0001e848
 800dc38:	01e84800 	.word	0x01e84800
 800dc3c:	0003d090 	.word	0x0003d090
 800dc40:	0007a120 	.word	0x0007a120
 800dc44:	000f4240 	.word	0x000f4240
 800dc48:	001e8480 	.word	0x001e8480
 800dc4c:	0028b0aa 	.word	0x0028b0aa
 800dc50:	0030d400 	.word	0x0030d400
 800dc54:	003d0900 	.word	0x003d0900
 800dc58:	00516154 	.word	0x00516154
 800dc5c:	007a1200 	.word	0x007a1200
 800dc60:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc64:	f7fd f89a 	bl	800ad9c <HAL_RCC_GetPCLK2Freq>
 800dc68:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d044      	beq.n	800dcfc <UART_SetConfig+0xe14>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d03e      	beq.n	800dcf8 <UART_SetConfig+0xe10>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7e:	2b02      	cmp	r3, #2
 800dc80:	d038      	beq.n	800dcf4 <UART_SetConfig+0xe0c>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc86:	2b03      	cmp	r3, #3
 800dc88:	d032      	beq.n	800dcf0 <UART_SetConfig+0xe08>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8e:	2b04      	cmp	r3, #4
 800dc90:	d02c      	beq.n	800dcec <UART_SetConfig+0xe04>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc96:	2b05      	cmp	r3, #5
 800dc98:	d026      	beq.n	800dce8 <UART_SetConfig+0xe00>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9e:	2b06      	cmp	r3, #6
 800dca0:	d020      	beq.n	800dce4 <UART_SetConfig+0xdfc>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca6:	2b07      	cmp	r3, #7
 800dca8:	d01a      	beq.n	800dce0 <UART_SetConfig+0xdf8>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcae:	2b08      	cmp	r3, #8
 800dcb0:	d014      	beq.n	800dcdc <UART_SetConfig+0xdf4>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb6:	2b09      	cmp	r3, #9
 800dcb8:	d00e      	beq.n	800dcd8 <UART_SetConfig+0xdf0>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcbe:	2b0a      	cmp	r3, #10
 800dcc0:	d008      	beq.n	800dcd4 <UART_SetConfig+0xdec>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc6:	2b0b      	cmp	r3, #11
 800dcc8:	d102      	bne.n	800dcd0 <UART_SetConfig+0xde8>
 800dcca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcce:	e016      	b.n	800dcfe <UART_SetConfig+0xe16>
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e014      	b.n	800dcfe <UART_SetConfig+0xe16>
 800dcd4:	2380      	movs	r3, #128	; 0x80
 800dcd6:	e012      	b.n	800dcfe <UART_SetConfig+0xe16>
 800dcd8:	2340      	movs	r3, #64	; 0x40
 800dcda:	e010      	b.n	800dcfe <UART_SetConfig+0xe16>
 800dcdc:	2320      	movs	r3, #32
 800dcde:	e00e      	b.n	800dcfe <UART_SetConfig+0xe16>
 800dce0:	2310      	movs	r3, #16
 800dce2:	e00c      	b.n	800dcfe <UART_SetConfig+0xe16>
 800dce4:	230c      	movs	r3, #12
 800dce6:	e00a      	b.n	800dcfe <UART_SetConfig+0xe16>
 800dce8:	230a      	movs	r3, #10
 800dcea:	e008      	b.n	800dcfe <UART_SetConfig+0xe16>
 800dcec:	2308      	movs	r3, #8
 800dcee:	e006      	b.n	800dcfe <UART_SetConfig+0xe16>
 800dcf0:	2306      	movs	r3, #6
 800dcf2:	e004      	b.n	800dcfe <UART_SetConfig+0xe16>
 800dcf4:	2304      	movs	r3, #4
 800dcf6:	e002      	b.n	800dcfe <UART_SetConfig+0xe16>
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	e000      	b.n	800dcfe <UART_SetConfig+0xe16>
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	693a      	ldr	r2, [r7, #16]
 800dd00:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	085b      	lsrs	r3, r3, #1
 800dd0a:	441a      	add	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	61fb      	str	r3, [r7, #28]
        break;
 800dd18:	e112      	b.n	800df40 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d044      	beq.n	800ddac <UART_SetConfig+0xec4>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d03e      	beq.n	800dda8 <UART_SetConfig+0xec0>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	d038      	beq.n	800dda4 <UART_SetConfig+0xebc>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd36:	2b03      	cmp	r3, #3
 800dd38:	d032      	beq.n	800dda0 <UART_SetConfig+0xeb8>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3e:	2b04      	cmp	r3, #4
 800dd40:	d02c      	beq.n	800dd9c <UART_SetConfig+0xeb4>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd46:	2b05      	cmp	r3, #5
 800dd48:	d026      	beq.n	800dd98 <UART_SetConfig+0xeb0>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4e:	2b06      	cmp	r3, #6
 800dd50:	d020      	beq.n	800dd94 <UART_SetConfig+0xeac>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd56:	2b07      	cmp	r3, #7
 800dd58:	d01a      	beq.n	800dd90 <UART_SetConfig+0xea8>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd5e:	2b08      	cmp	r3, #8
 800dd60:	d014      	beq.n	800dd8c <UART_SetConfig+0xea4>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd66:	2b09      	cmp	r3, #9
 800dd68:	d00e      	beq.n	800dd88 <UART_SetConfig+0xea0>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6e:	2b0a      	cmp	r3, #10
 800dd70:	d008      	beq.n	800dd84 <UART_SetConfig+0xe9c>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd76:	2b0b      	cmp	r3, #11
 800dd78:	d102      	bne.n	800dd80 <UART_SetConfig+0xe98>
 800dd7a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800dd7e:	e016      	b.n	800ddae <UART_SetConfig+0xec6>
 800dd80:	4b80      	ldr	r3, [pc, #512]	; (800df84 <UART_SetConfig+0x109c>)
 800dd82:	e014      	b.n	800ddae <UART_SetConfig+0xec6>
 800dd84:	4b80      	ldr	r3, [pc, #512]	; (800df88 <UART_SetConfig+0x10a0>)
 800dd86:	e012      	b.n	800ddae <UART_SetConfig+0xec6>
 800dd88:	4b80      	ldr	r3, [pc, #512]	; (800df8c <UART_SetConfig+0x10a4>)
 800dd8a:	e010      	b.n	800ddae <UART_SetConfig+0xec6>
 800dd8c:	4b80      	ldr	r3, [pc, #512]	; (800df90 <UART_SetConfig+0x10a8>)
 800dd8e:	e00e      	b.n	800ddae <UART_SetConfig+0xec6>
 800dd90:	4b80      	ldr	r3, [pc, #512]	; (800df94 <UART_SetConfig+0x10ac>)
 800dd92:	e00c      	b.n	800ddae <UART_SetConfig+0xec6>
 800dd94:	4b80      	ldr	r3, [pc, #512]	; (800df98 <UART_SetConfig+0x10b0>)
 800dd96:	e00a      	b.n	800ddae <UART_SetConfig+0xec6>
 800dd98:	4b80      	ldr	r3, [pc, #512]	; (800df9c <UART_SetConfig+0x10b4>)
 800dd9a:	e008      	b.n	800ddae <UART_SetConfig+0xec6>
 800dd9c:	4b80      	ldr	r3, [pc, #512]	; (800dfa0 <UART_SetConfig+0x10b8>)
 800dd9e:	e006      	b.n	800ddae <UART_SetConfig+0xec6>
 800dda0:	4b80      	ldr	r3, [pc, #512]	; (800dfa4 <UART_SetConfig+0x10bc>)
 800dda2:	e004      	b.n	800ddae <UART_SetConfig+0xec6>
 800dda4:	4b80      	ldr	r3, [pc, #512]	; (800dfa8 <UART_SetConfig+0x10c0>)
 800dda6:	e002      	b.n	800ddae <UART_SetConfig+0xec6>
 800dda8:	4b80      	ldr	r3, [pc, #512]	; (800dfac <UART_SetConfig+0x10c4>)
 800ddaa:	e000      	b.n	800ddae <UART_SetConfig+0xec6>
 800ddac:	4b75      	ldr	r3, [pc, #468]	; (800df84 <UART_SetConfig+0x109c>)
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	6852      	ldr	r2, [r2, #4]
 800ddb2:	0852      	lsrs	r2, r2, #1
 800ddb4:	441a      	add	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	61fb      	str	r3, [r7, #28]
        break;
 800ddc2:	e0bd      	b.n	800df40 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ddc4:	f7fc ff56 	bl	800ac74 <HAL_RCC_GetSysClockFreq>
 800ddc8:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d044      	beq.n	800de5c <UART_SetConfig+0xf74>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d03e      	beq.n	800de58 <UART_SetConfig+0xf70>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	d038      	beq.n	800de54 <UART_SetConfig+0xf6c>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde6:	2b03      	cmp	r3, #3
 800dde8:	d032      	beq.n	800de50 <UART_SetConfig+0xf68>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddee:	2b04      	cmp	r3, #4
 800ddf0:	d02c      	beq.n	800de4c <UART_SetConfig+0xf64>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf6:	2b05      	cmp	r3, #5
 800ddf8:	d026      	beq.n	800de48 <UART_SetConfig+0xf60>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddfe:	2b06      	cmp	r3, #6
 800de00:	d020      	beq.n	800de44 <UART_SetConfig+0xf5c>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de06:	2b07      	cmp	r3, #7
 800de08:	d01a      	beq.n	800de40 <UART_SetConfig+0xf58>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de0e:	2b08      	cmp	r3, #8
 800de10:	d014      	beq.n	800de3c <UART_SetConfig+0xf54>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de16:	2b09      	cmp	r3, #9
 800de18:	d00e      	beq.n	800de38 <UART_SetConfig+0xf50>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1e:	2b0a      	cmp	r3, #10
 800de20:	d008      	beq.n	800de34 <UART_SetConfig+0xf4c>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de26:	2b0b      	cmp	r3, #11
 800de28:	d102      	bne.n	800de30 <UART_SetConfig+0xf48>
 800de2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de2e:	e016      	b.n	800de5e <UART_SetConfig+0xf76>
 800de30:	2301      	movs	r3, #1
 800de32:	e014      	b.n	800de5e <UART_SetConfig+0xf76>
 800de34:	2380      	movs	r3, #128	; 0x80
 800de36:	e012      	b.n	800de5e <UART_SetConfig+0xf76>
 800de38:	2340      	movs	r3, #64	; 0x40
 800de3a:	e010      	b.n	800de5e <UART_SetConfig+0xf76>
 800de3c:	2320      	movs	r3, #32
 800de3e:	e00e      	b.n	800de5e <UART_SetConfig+0xf76>
 800de40:	2310      	movs	r3, #16
 800de42:	e00c      	b.n	800de5e <UART_SetConfig+0xf76>
 800de44:	230c      	movs	r3, #12
 800de46:	e00a      	b.n	800de5e <UART_SetConfig+0xf76>
 800de48:	230a      	movs	r3, #10
 800de4a:	e008      	b.n	800de5e <UART_SetConfig+0xf76>
 800de4c:	2308      	movs	r3, #8
 800de4e:	e006      	b.n	800de5e <UART_SetConfig+0xf76>
 800de50:	2306      	movs	r3, #6
 800de52:	e004      	b.n	800de5e <UART_SetConfig+0xf76>
 800de54:	2304      	movs	r3, #4
 800de56:	e002      	b.n	800de5e <UART_SetConfig+0xf76>
 800de58:	2302      	movs	r3, #2
 800de5a:	e000      	b.n	800de5e <UART_SetConfig+0xf76>
 800de5c:	2301      	movs	r3, #1
 800de5e:	693a      	ldr	r2, [r7, #16]
 800de60:	fbb2 f2f3 	udiv	r2, r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	085b      	lsrs	r3, r3, #1
 800de6a:	441a      	add	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	fbb2 f3f3 	udiv	r3, r2, r3
 800de74:	b29b      	uxth	r3, r3
 800de76:	61fb      	str	r3, [r7, #28]
        break;
 800de78:	e062      	b.n	800df40 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d04e      	beq.n	800df20 <UART_SetConfig+0x1038>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de86:	2b01      	cmp	r3, #1
 800de88:	d047      	beq.n	800df1a <UART_SetConfig+0x1032>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8e:	2b02      	cmp	r3, #2
 800de90:	d040      	beq.n	800df14 <UART_SetConfig+0x102c>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de96:	2b03      	cmp	r3, #3
 800de98:	d039      	beq.n	800df0e <UART_SetConfig+0x1026>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9e:	2b04      	cmp	r3, #4
 800dea0:	d032      	beq.n	800df08 <UART_SetConfig+0x1020>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea6:	2b05      	cmp	r3, #5
 800dea8:	d02b      	beq.n	800df02 <UART_SetConfig+0x101a>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deae:	2b06      	cmp	r3, #6
 800deb0:	d024      	beq.n	800defc <UART_SetConfig+0x1014>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb6:	2b07      	cmp	r3, #7
 800deb8:	d01d      	beq.n	800def6 <UART_SetConfig+0x100e>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800debe:	2b08      	cmp	r3, #8
 800dec0:	d016      	beq.n	800def0 <UART_SetConfig+0x1008>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec6:	2b09      	cmp	r3, #9
 800dec8:	d00f      	beq.n	800deea <UART_SetConfig+0x1002>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dece:	2b0a      	cmp	r3, #10
 800ded0:	d008      	beq.n	800dee4 <UART_SetConfig+0xffc>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded6:	2b0b      	cmp	r3, #11
 800ded8:	d101      	bne.n	800dede <UART_SetConfig+0xff6>
 800deda:	2380      	movs	r3, #128	; 0x80
 800dedc:	e022      	b.n	800df24 <UART_SetConfig+0x103c>
 800dede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dee2:	e01f      	b.n	800df24 <UART_SetConfig+0x103c>
 800dee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dee8:	e01c      	b.n	800df24 <UART_SetConfig+0x103c>
 800deea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800deee:	e019      	b.n	800df24 <UART_SetConfig+0x103c>
 800def0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800def4:	e016      	b.n	800df24 <UART_SetConfig+0x103c>
 800def6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800defa:	e013      	b.n	800df24 <UART_SetConfig+0x103c>
 800defc:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800df00:	e010      	b.n	800df24 <UART_SetConfig+0x103c>
 800df02:	f640 43cc 	movw	r3, #3276	; 0xccc
 800df06:	e00d      	b.n	800df24 <UART_SetConfig+0x103c>
 800df08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df0c:	e00a      	b.n	800df24 <UART_SetConfig+0x103c>
 800df0e:	f241 5355 	movw	r3, #5461	; 0x1555
 800df12:	e007      	b.n	800df24 <UART_SetConfig+0x103c>
 800df14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df18:	e004      	b.n	800df24 <UART_SetConfig+0x103c>
 800df1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800df1e:	e001      	b.n	800df24 <UART_SetConfig+0x103c>
 800df20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	6852      	ldr	r2, [r2, #4]
 800df28:	0852      	lsrs	r2, r2, #1
 800df2a:	441a      	add	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	fbb2 f3f3 	udiv	r3, r2, r3
 800df34:	b29b      	uxth	r3, r3
 800df36:	61fb      	str	r3, [r7, #28]
        break;
 800df38:	e002      	b.n	800df40 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	76fb      	strb	r3, [r7, #27]
        break;
 800df3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	2b0f      	cmp	r3, #15
 800df44:	d908      	bls.n	800df58 <UART_SetConfig+0x1070>
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df4c:	d204      	bcs.n	800df58 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	69fa      	ldr	r2, [r7, #28]
 800df54:	60da      	str	r2, [r3, #12]
 800df56:	e001      	b.n	800df5c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800df58:	2301      	movs	r3, #1
 800df5a:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2201      	movs	r2, #1
 800df60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2201      	movs	r2, #1
 800df68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2200      	movs	r2, #0
 800df70:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800df78:	7efb      	ldrb	r3, [r7, #27]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3728      	adds	r7, #40	; 0x28
 800df7e:	46bd      	mov	sp, r7
 800df80:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800df84:	00f42400 	.word	0x00f42400
 800df88:	0001e848 	.word	0x0001e848
 800df8c:	0003d090 	.word	0x0003d090
 800df90:	0007a120 	.word	0x0007a120
 800df94:	000f4240 	.word	0x000f4240
 800df98:	00145855 	.word	0x00145855
 800df9c:	00186a00 	.word	0x00186a00
 800dfa0:	001e8480 	.word	0x001e8480
 800dfa4:	0028b0aa 	.word	0x0028b0aa
 800dfa8:	003d0900 	.word	0x003d0900
 800dfac:	007a1200 	.word	0x007a1200

0800dfb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b083      	sub	sp, #12
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfbc:	f003 0301 	and.w	r3, r3, #1
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d00a      	beq.n	800dfda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	430a      	orrs	r2, r1
 800dfd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfde:	f003 0302 	and.w	r3, r3, #2
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00a      	beq.n	800dffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	430a      	orrs	r2, r1
 800dffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e000:	f003 0304 	and.w	r3, r3, #4
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00a      	beq.n	800e01e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	430a      	orrs	r2, r1
 800e01c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e022:	f003 0308 	and.w	r3, r3, #8
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00a      	beq.n	800e040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	430a      	orrs	r2, r1
 800e03e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e044:	f003 0310 	and.w	r3, r3, #16
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00a      	beq.n	800e062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	430a      	orrs	r2, r1
 800e060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e066:	f003 0320 	and.w	r3, r3, #32
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00a      	beq.n	800e084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	430a      	orrs	r2, r1
 800e082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d01a      	beq.n	800e0c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	430a      	orrs	r2, r1
 800e0a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0ae:	d10a      	bne.n	800e0c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	430a      	orrs	r2, r1
 800e0c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00a      	beq.n	800e0e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	430a      	orrs	r2, r1
 800e0e6:	605a      	str	r2, [r3, #4]
  }
}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af02      	add	r7, sp, #8
 800e0fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800e104:	f7f7 fb76 	bl	80057f4 <HAL_GetTick>
 800e108:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f003 0308 	and.w	r3, r3, #8
 800e114:	2b08      	cmp	r3, #8
 800e116:	d10e      	bne.n	800e136 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e11c:	9300      	str	r3, [sp, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2200      	movs	r2, #0
 800e122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 f82c 	bl	800e184 <UART_WaitOnFlagUntilTimeout>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e132:	2303      	movs	r3, #3
 800e134:	e022      	b.n	800e17c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f003 0304 	and.w	r3, r3, #4
 800e140:	2b04      	cmp	r3, #4
 800e142:	d10e      	bne.n	800e162 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 f816 	bl	800e184 <UART_WaitOnFlagUntilTimeout>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e15e:	2303      	movs	r3, #3
 800e160:	e00c      	b.n	800e17c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2220      	movs	r2, #32
 800e166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2220      	movs	r2, #32
 800e16e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3710      	adds	r7, #16
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	603b      	str	r3, [r7, #0]
 800e190:	4613      	mov	r3, r2
 800e192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e194:	e062      	b.n	800e25c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19c:	d05e      	beq.n	800e25c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e19e:	f7f7 fb29 	bl	80057f4 <HAL_GetTick>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	69ba      	ldr	r2, [r7, #24]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d302      	bcc.n	800e1b4 <UART_WaitOnFlagUntilTimeout+0x30>
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d11d      	bne.n	800e1f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e1c2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	689a      	ldr	r2, [r3, #8]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f022 0201 	bic.w	r2, r2, #1
 800e1d2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2220      	movs	r2, #32
 800e1d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2220      	movs	r2, #32
 800e1e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800e1ec:	2303      	movs	r3, #3
 800e1ee:	e045      	b.n	800e27c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f003 0304 	and.w	r3, r3, #4
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d02e      	beq.n	800e25c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	69db      	ldr	r3, [r3, #28]
 800e204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e20c:	d126      	bne.n	800e25c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e216:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e226:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	689a      	ldr	r2, [r3, #8]
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f022 0201 	bic.w	r2, r2, #1
 800e236:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2220      	movs	r2, #32
 800e23c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2220      	movs	r2, #32
 800e244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2220      	movs	r2, #32
 800e24c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2200      	movs	r2, #0
 800e254:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800e258:	2303      	movs	r3, #3
 800e25a:	e00f      	b.n	800e27c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	69da      	ldr	r2, [r3, #28]
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	4013      	ands	r3, r2
 800e266:	68ba      	ldr	r2, [r7, #8]
 800e268:	429a      	cmp	r2, r3
 800e26a:	bf0c      	ite	eq
 800e26c:	2301      	moveq	r3, #1
 800e26e:	2300      	movne	r3, #0
 800e270:	b2db      	uxtb	r3, r3
 800e272:	461a      	mov	r2, r3
 800e274:	79fb      	ldrb	r3, [r7, #7]
 800e276:	429a      	cmp	r2, r3
 800e278:	d08d      	beq.n	800e196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e27a:	2300      	movs	r3, #0
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e284:	b480      	push	{r7}
 800e286:	b083      	sub	sp, #12
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e292:	2b21      	cmp	r3, #33	; 0x21
 800e294:	d12a      	bne.n	800e2ec <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d110      	bne.n	800e2c4 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e2b0:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2c0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e2c2:	e013      	b.n	800e2ec <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2c8:	781a      	ldrb	r2, [r3, #0]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2d4:	1c5a      	adds	r2, r3, #1
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	3b01      	subs	r3, #1
 800e2e4:	b29a      	uxth	r2, r3
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e2ec:	bf00      	nop
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e306:	2b21      	cmp	r3, #33	; 0x21
 800e308:	d12f      	bne.n	800e36a <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e310:	b29b      	uxth	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d110      	bne.n	800e338 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e324:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e334:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e336:	e018      	b.n	800e36a <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e33c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	461a      	mov	r2, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e34c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e352:	1c9a      	adds	r2, r3, #2
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e35e:	b29b      	uxth	r3, r3
 800e360:	3b01      	subs	r3, #1
 800e362:	b29a      	uxth	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e36a:	bf00      	nop
 800e36c:	3714      	adds	r7, #20
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr

0800e376 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e376:	b480      	push	{r7}
 800e378:	b085      	sub	sp, #20
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e384:	2b21      	cmp	r3, #33	; 0x21
 800e386:	d13d      	bne.n	800e404 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e38e:	81fb      	strh	r3, [r7, #14]
 800e390:	e035      	b.n	800e3fe <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e398:	b29b      	uxth	r3, r3
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d111      	bne.n	800e3c2 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	689a      	ldr	r2, [r3, #8]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e3ac:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3bc:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800e3be:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800e3c0:	e020      	b.n	800e404 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	69db      	ldr	r3, [r3, #28]
 800e3c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d013      	beq.n	800e3f8 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3d4:	781a      	ldrb	r2, [r3, #0]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3e0:	1c5a      	adds	r2, r3, #1
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e3f8:	89fb      	ldrh	r3, [r7, #14]
 800e3fa:	3b01      	subs	r3, #1
 800e3fc:	81fb      	strh	r3, [r7, #14]
 800e3fe:	89fb      	ldrh	r3, [r7, #14]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1c6      	bne.n	800e392 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800e404:	bf00      	nop
 800e406:	3714      	adds	r7, #20
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e410:	b480      	push	{r7}
 800e412:	b085      	sub	sp, #20
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e41e:	2b21      	cmp	r3, #33	; 0x21
 800e420:	d142      	bne.n	800e4a8 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e428:	81fb      	strh	r3, [r7, #14]
 800e42a:	e03a      	b.n	800e4a2 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e432:	b29b      	uxth	r3, r3
 800e434:	2b00      	cmp	r3, #0
 800e436:	d111      	bne.n	800e45c <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	689a      	ldr	r2, [r3, #8]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e446:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e456:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800e458:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800e45a:	e025      	b.n	800e4a8 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	69db      	ldr	r3, [r3, #28]
 800e462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e466:	2b00      	cmp	r3, #0
 800e468:	d018      	beq.n	800e49c <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e46e:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	881b      	ldrh	r3, [r3, #0]
 800e474:	461a      	mov	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e47e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e484:	1c9a      	adds	r2, r3, #2
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e490:	b29b      	uxth	r3, r3
 800e492:	3b01      	subs	r3, #1
 800e494:	b29a      	uxth	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e49c:	89fb      	ldrh	r3, [r7, #14]
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	81fb      	strh	r3, [r7, #14]
 800e4a2:	89fb      	ldrh	r3, [r7, #14]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1c1      	bne.n	800e42c <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800e4a8:	bf00      	nop
 800e4aa:	3714      	adds	r7, #20
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr

0800e4b4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4c2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4ca:	2b22      	cmp	r3, #34	; 0x22
 800e4cc:	d13b      	bne.n	800e546 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e4d6:	89bb      	ldrh	r3, [r7, #12]
 800e4d8:	b2d9      	uxtb	r1, r3
 800e4da:	89fb      	ldrh	r3, [r7, #14]
 800e4dc:	b2da      	uxtb	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4e2:	400a      	ands	r2, r1
 800e4e4:	b2d2      	uxtb	r2, r2
 800e4e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4ec:	1c5a      	adds	r2, r3, #1
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	b29a      	uxth	r2, r3
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d122      	bne.n	800e556 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e51e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	689a      	ldr	r2, [r3, #8]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f022 0201 	bic.w	r2, r2, #1
 800e52e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2220      	movs	r2, #32
 800e534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f7f5 f982 	bl	8003848 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e544:	e007      	b.n	800e556 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	699a      	ldr	r2, [r3, #24]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f042 0208 	orr.w	r2, r2, #8
 800e554:	619a      	str	r2, [r3, #24]
}
 800e556:	bf00      	nop
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b084      	sub	sp, #16
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e56c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e574:	2b22      	cmp	r3, #34	; 0x22
 800e576:	d13b      	bne.n	800e5f0 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e584:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800e586:	89ba      	ldrh	r2, [r7, #12]
 800e588:	89fb      	ldrh	r3, [r7, #14]
 800e58a:	4013      	ands	r3, r2
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e596:	1c9a      	adds	r2, r3, #2
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	3b01      	subs	r3, #1
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d122      	bne.n	800e600 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e5c8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	689a      	ldr	r2, [r3, #8]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f022 0201 	bic.w	r2, r2, #1
 800e5d8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2220      	movs	r2, #32
 800e5de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7f5 f92d 	bl	8003848 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e5ee:	e007      	b.n	800e600 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	699a      	ldr	r2, [r3, #24]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f042 0208 	orr.w	r2, r2, #8
 800e5fe:	619a      	str	r2, [r3, #24]
}
 800e600:	bf00      	nop
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e616:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e61e:	2b22      	cmp	r3, #34	; 0x22
 800e620:	d168      	bne.n	800e6f4 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e628:	81fb      	strh	r3, [r7, #14]
 800e62a:	e03f      	b.n	800e6ac <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e632:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e634:	893b      	ldrh	r3, [r7, #8]
 800e636:	b2d9      	uxtb	r1, r3
 800e638:	89bb      	ldrh	r3, [r7, #12]
 800e63a:	b2da      	uxtb	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e640:	400a      	ands	r2, r1
 800e642:	b2d2      	uxtb	r2, r2
 800e644:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e64a:	1c5a      	adds	r2, r3, #1
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e656:	b29b      	uxth	r3, r3
 800e658:	3b01      	subs	r3, #1
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e668:	b29b      	uxth	r3, r3
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d11b      	bne.n	800e6a6 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e67c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	689b      	ldr	r3, [r3, #8]
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	6812      	ldr	r2, [r2, #0]
 800e688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e68c:	f023 0301 	bic.w	r3, r3, #1
 800e690:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2220      	movs	r2, #32
 800e696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2200      	movs	r2, #0
 800e69e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f7f5 f8d1 	bl	8003848 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e6a6:	89fb      	ldrh	r3, [r7, #14]
 800e6a8:	3b01      	subs	r3, #1
 800e6aa:	81fb      	strh	r3, [r7, #14]
 800e6ac:	89fb      	ldrh	r3, [r7, #14]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d1bc      	bne.n	800e62c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6b8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e6ba:	897b      	ldrh	r3, [r7, #10]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d021      	beq.n	800e704 <UART_RxISR_8BIT_FIFOEN+0xfc>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e6c6:	897a      	ldrh	r2, [r7, #10]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d21b      	bcs.n	800e704 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	689a      	ldr	r2, [r3, #8]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e6da:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4a0b      	ldr	r2, [pc, #44]	; (800e70c <UART_RxISR_8BIT_FIFOEN+0x104>)
 800e6e0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f042 0220 	orr.w	r2, r2, #32
 800e6f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e6f2:	e007      	b.n	800e704 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	699a      	ldr	r2, [r3, #24]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f042 0208 	orr.w	r2, r2, #8
 800e702:	619a      	str	r2, [r3, #24]
}
 800e704:	bf00      	nop
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	0800e4b5 	.word	0x0800e4b5

0800e710 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e71e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e726:	2b22      	cmp	r3, #34	; 0x22
 800e728:	d168      	bne.n	800e7fc <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e730:	82fb      	strh	r3, [r7, #22]
 800e732:	e03f      	b.n	800e7b4 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e73a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e740:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800e742:	8a3a      	ldrh	r2, [r7, #16]
 800e744:	8abb      	ldrh	r3, [r7, #20]
 800e746:	4013      	ands	r3, r2
 800e748:	b29a      	uxth	r2, r3
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e752:	1c9a      	adds	r2, r3, #2
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e75e:	b29b      	uxth	r3, r3
 800e760:	3b01      	subs	r3, #1
 800e762:	b29a      	uxth	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e770:	b29b      	uxth	r3, r3
 800e772:	2b00      	cmp	r3, #0
 800e774:	d11b      	bne.n	800e7ae <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e784:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	6812      	ldr	r2, [r2, #0]
 800e790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e794:	f023 0301 	bic.w	r3, r3, #1
 800e798:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2220      	movs	r2, #32
 800e79e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f7f5 f84d 	bl	8003848 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e7ae:	8afb      	ldrh	r3, [r7, #22]
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	82fb      	strh	r3, [r7, #22]
 800e7b4:	8afb      	ldrh	r3, [r7, #22]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d1bc      	bne.n	800e734 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7c0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e7c2:	8a7b      	ldrh	r3, [r7, #18]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d021      	beq.n	800e80c <UART_RxISR_16BIT_FIFOEN+0xfc>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e7ce:	8a7a      	ldrh	r2, [r7, #18]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d21b      	bcs.n	800e80c <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	689a      	ldr	r2, [r3, #8]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e7e2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	4a0b      	ldr	r2, [pc, #44]	; (800e814 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800e7e8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f042 0220 	orr.w	r2, r2, #32
 800e7f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e7fa:	e007      	b.n	800e80c <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	699a      	ldr	r2, [r3, #24]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f042 0208 	orr.w	r2, r2, #8
 800e80a:	619a      	str	r2, [r3, #24]
}
 800e80c:	bf00      	nop
 800e80e:	3718      	adds	r7, #24
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}
 800e814:	0800e55f 	.word	0x0800e55f

0800e818 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e826:	2b01      	cmp	r3, #1
 800e828:	d101      	bne.n	800e82e <HAL_UARTEx_DisableFifoMode+0x16>
 800e82a:	2302      	movs	r3, #2
 800e82c:	e027      	b.n	800e87e <HAL_UARTEx_DisableFifoMode+0x66>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2201      	movs	r2, #1
 800e832:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2224      	movs	r2, #36	; 0x24
 800e83a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f022 0201 	bic.w	r2, r2, #1
 800e854:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e85c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2220      	movs	r2, #32
 800e870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3714      	adds	r7, #20
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr

0800e88a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b084      	sub	sp, #16
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
 800e892:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d101      	bne.n	800e8a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e89e:	2302      	movs	r3, #2
 800e8a0:	e02d      	b.n	800e8fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2224      	movs	r2, #36	; 0x24
 800e8ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f022 0201 	bic.w	r2, r2, #1
 800e8c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	683a      	ldr	r2, [r7, #0]
 800e8da:	430a      	orrs	r2, r1
 800e8dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 f850 	bl	800e984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2220      	movs	r2, #32
 800e8f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b084      	sub	sp, #16
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
 800e90e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e916:	2b01      	cmp	r3, #1
 800e918:	d101      	bne.n	800e91e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e91a:	2302      	movs	r3, #2
 800e91c:	e02d      	b.n	800e97a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2201      	movs	r2, #1
 800e922:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2224      	movs	r2, #36	; 0x24
 800e92a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f022 0201 	bic.w	r2, r2, #1
 800e944:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	683a      	ldr	r2, [r7, #0]
 800e956:	430a      	orrs	r2, r1
 800e958:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f000 f812 	bl	800e984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2220      	movs	r2, #32
 800e96c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2200      	movs	r2, #0
 800e974:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3710      	adds	r7, #16
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}
	...

0800e984 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e984:	b480      	push	{r7}
 800e986:	b089      	sub	sp, #36	; 0x24
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800e98c:	4a2f      	ldr	r2, [pc, #188]	; (800ea4c <UARTEx_SetNbDataToProcess+0xc8>)
 800e98e:	f107 0314 	add.w	r3, r7, #20
 800e992:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e996:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800e99a:	4a2d      	ldr	r2, [pc, #180]	; (800ea50 <UARTEx_SetNbDataToProcess+0xcc>)
 800e99c:	f107 030c 	add.w	r3, r7, #12
 800e9a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9a4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d108      	bne.n	800e9c2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e9c0:	e03d      	b.n	800ea3e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e9c2:	2308      	movs	r3, #8
 800e9c4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e9c6:	2308      	movs	r3, #8
 800e9c8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	689b      	ldr	r3, [r3, #8]
 800e9d0:	0e5b      	lsrs	r3, r3, #25
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	f003 0307 	and.w	r3, r3, #7
 800e9d8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	689b      	ldr	r3, [r3, #8]
 800e9e0:	0f5b      	lsrs	r3, r3, #29
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	f003 0307 	and.w	r3, r3, #7
 800e9e8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800e9ea:	7fbb      	ldrb	r3, [r7, #30]
 800e9ec:	7f3a      	ldrb	r2, [r7, #28]
 800e9ee:	f107 0120 	add.w	r1, r7, #32
 800e9f2:	440a      	add	r2, r1
 800e9f4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e9f8:	fb02 f303 	mul.w	r3, r2, r3
 800e9fc:	7f3a      	ldrb	r2, [r7, #28]
 800e9fe:	f107 0120 	add.w	r1, r7, #32
 800ea02:	440a      	add	r2, r1
 800ea04:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ea08:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ea14:	7ffb      	ldrb	r3, [r7, #31]
 800ea16:	7f7a      	ldrb	r2, [r7, #29]
 800ea18:	f107 0120 	add.w	r1, r7, #32
 800ea1c:	440a      	add	r2, r1
 800ea1e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ea22:	fb02 f303 	mul.w	r3, r2, r3
 800ea26:	7f7a      	ldrb	r2, [r7, #29]
 800ea28:	f107 0120 	add.w	r1, r7, #32
 800ea2c:	440a      	add	r2, r1
 800ea2e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ea32:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea36:	b29a      	uxth	r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ea3e:	bf00      	nop
 800ea40:	3724      	adds	r7, #36	; 0x24
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr
 800ea4a:	bf00      	nop
 800ea4c:	08017a9c 	.word	0x08017a9c
 800ea50:	08017aa4 	.word	0x08017aa4

0800ea54 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ea54:	b480      	push	{r7}
 800ea56:	b085      	sub	sp, #20
 800ea58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea5a:	f3ef 8305 	mrs	r3, IPSR
 800ea5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d10f      	bne.n	800ea86 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea66:	f3ef 8310 	mrs	r3, PRIMASK
 800ea6a:	607b      	str	r3, [r7, #4]
  return(result);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d109      	bne.n	800ea86 <osKernelInitialize+0x32>
 800ea72:	4b11      	ldr	r3, [pc, #68]	; (800eab8 <osKernelInitialize+0x64>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2b02      	cmp	r3, #2
 800ea78:	d109      	bne.n	800ea8e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ea7a:	f3ef 8311 	mrs	r3, BASEPRI
 800ea7e:	603b      	str	r3, [r7, #0]
  return(result);
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d003      	beq.n	800ea8e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ea86:	f06f 0305 	mvn.w	r3, #5
 800ea8a:	60fb      	str	r3, [r7, #12]
 800ea8c:	e00c      	b.n	800eaa8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ea8e:	4b0a      	ldr	r3, [pc, #40]	; (800eab8 <osKernelInitialize+0x64>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d105      	bne.n	800eaa2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800ea96:	4b08      	ldr	r3, [pc, #32]	; (800eab8 <osKernelInitialize+0x64>)
 800ea98:	2201      	movs	r2, #1
 800ea9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	60fb      	str	r3, [r7, #12]
 800eaa0:	e002      	b.n	800eaa8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800eaa2:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3714      	adds	r7, #20
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr
 800eab6:	bf00      	nop
 800eab8:	20000ad8 	.word	0x20000ad8

0800eabc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eac2:	f3ef 8305 	mrs	r3, IPSR
 800eac6:	60bb      	str	r3, [r7, #8]
  return(result);
 800eac8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d10f      	bne.n	800eaee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eace:	f3ef 8310 	mrs	r3, PRIMASK
 800ead2:	607b      	str	r3, [r7, #4]
  return(result);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d109      	bne.n	800eaee <osKernelStart+0x32>
 800eada:	4b11      	ldr	r3, [pc, #68]	; (800eb20 <osKernelStart+0x64>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b02      	cmp	r3, #2
 800eae0:	d109      	bne.n	800eaf6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eae2:	f3ef 8311 	mrs	r3, BASEPRI
 800eae6:	603b      	str	r3, [r7, #0]
  return(result);
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d003      	beq.n	800eaf6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800eaee:	f06f 0305 	mvn.w	r3, #5
 800eaf2:	60fb      	str	r3, [r7, #12]
 800eaf4:	e00e      	b.n	800eb14 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800eaf6:	4b0a      	ldr	r3, [pc, #40]	; (800eb20 <osKernelStart+0x64>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d107      	bne.n	800eb0e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800eafe:	4b08      	ldr	r3, [pc, #32]	; (800eb20 <osKernelStart+0x64>)
 800eb00:	2202      	movs	r2, #2
 800eb02:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800eb04:	f002 ff4e 	bl	80119a4 <vTaskStartScheduler>
      stat = osOK;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	60fb      	str	r3, [r7, #12]
 800eb0c:	e002      	b.n	800eb14 <osKernelStart+0x58>
    } else {
      stat = osError;
 800eb0e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800eb14:	68fb      	ldr	r3, [r7, #12]
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	20000ad8 	.word	0x20000ad8

0800eb24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b092      	sub	sp, #72	; 0x48
 800eb28:	af04      	add	r7, sp, #16
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eb30:	2300      	movs	r3, #0
 800eb32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb34:	f3ef 8305 	mrs	r3, IPSR
 800eb38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800eb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f040 8095 	bne.w	800ec6c <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb42:	f3ef 8310 	mrs	r3, PRIMASK
 800eb46:	623b      	str	r3, [r7, #32]
  return(result);
 800eb48:	6a3b      	ldr	r3, [r7, #32]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	f040 808e 	bne.w	800ec6c <osThreadNew+0x148>
 800eb50:	4b49      	ldr	r3, [pc, #292]	; (800ec78 <osThreadNew+0x154>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d106      	bne.n	800eb66 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb58:	f3ef 8311 	mrs	r3, BASEPRI
 800eb5c:	61fb      	str	r3, [r7, #28]
  return(result);
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	f040 8083 	bne.w	800ec6c <osThreadNew+0x148>
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d07f      	beq.n	800ec6c <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 800eb6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb70:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800eb72:	2318      	movs	r3, #24
 800eb74:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800eb76:	2300      	movs	r3, #0
 800eb78:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800eb7a:	f107 031b 	add.w	r3, r7, #27
 800eb7e:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800eb80:	f04f 33ff 	mov.w	r3, #4294967295
 800eb84:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d045      	beq.n	800ec18 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d002      	beq.n	800eb9a <osThreadNew+0x76>
        name = attr->name;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	699b      	ldr	r3, [r3, #24]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d002      	beq.n	800eba8 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	699b      	ldr	r3, [r3, #24]
 800eba6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d008      	beq.n	800ebc0 <osThreadNew+0x9c>
 800ebae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb0:	2b38      	cmp	r3, #56	; 0x38
 800ebb2:	d805      	bhi.n	800ebc0 <osThreadNew+0x9c>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	f003 0301 	and.w	r3, r3, #1
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d001      	beq.n	800ebc4 <osThreadNew+0xa0>
        return (NULL);
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	e054      	b.n	800ec6e <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	695b      	ldr	r3, [r3, #20]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d003      	beq.n	800ebd4 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	695b      	ldr	r3, [r3, #20]
 800ebd0:	089b      	lsrs	r3, r3, #2
 800ebd2:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00e      	beq.n	800ebfa <osThreadNew+0xd6>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	68db      	ldr	r3, [r3, #12]
 800ebe0:	2b63      	cmp	r3, #99	; 0x63
 800ebe2:	d90a      	bls.n	800ebfa <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d006      	beq.n	800ebfa <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	695b      	ldr	r3, [r3, #20]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d002      	beq.n	800ebfa <osThreadNew+0xd6>
        mem = 1;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebf8:	e010      	b.n	800ec1c <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d10c      	bne.n	800ec1c <osThreadNew+0xf8>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d108      	bne.n	800ec1c <osThreadNew+0xf8>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	691b      	ldr	r3, [r3, #16]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d104      	bne.n	800ec1c <osThreadNew+0xf8>
          mem = 0;
 800ec12:	2300      	movs	r3, #0
 800ec14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec16:	e001      	b.n	800ec1c <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800ec1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d110      	bne.n	800ec44 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ec2a:	9202      	str	r2, [sp, #8]
 800ec2c:	9301      	str	r3, [sp, #4]
 800ec2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec30:	9300      	str	r3, [sp, #0]
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec38:	68f8      	ldr	r0, [r7, #12]
 800ec3a:	f002 fce5 	bl	8011608 <xTaskCreateStatic>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	617b      	str	r3, [r7, #20]
 800ec42:	e013      	b.n	800ec6c <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 800ec44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d110      	bne.n	800ec6c <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ec4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	f107 0314 	add.w	r3, r7, #20
 800ec52:	9301      	str	r3, [sp, #4]
 800ec54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec5c:	68f8      	ldr	r0, [r7, #12]
 800ec5e:	f002 fd2c 	bl	80116ba <xTaskCreate>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d001      	beq.n	800ec6c <osThreadNew+0x148>
          hTask = NULL;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ec6c:	697b      	ldr	r3, [r7, #20]
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3738      	adds	r7, #56	; 0x38
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	20000ad8 	.word	0x20000ad8

0800ec7c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b08a      	sub	sp, #40	; 0x28
 800ec80:	af02      	add	r7, sp, #8
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d002      	beq.n	800ec96 <osThreadFlagsSet+0x1a>
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	da03      	bge.n	800ec9e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ec96:	f06f 0303 	mvn.w	r3, #3
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	e046      	b.n	800ed2c <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800ec9e:	f04f 33ff 	mov.w	r3, #4294967295
 800eca2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eca4:	f3ef 8305 	mrs	r3, IPSR
 800eca8:	61bb      	str	r3, [r7, #24]
  return(result);
 800ecaa:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d10f      	bne.n	800ecd0 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecb0:	f3ef 8310 	mrs	r3, PRIMASK
 800ecb4:	617b      	str	r3, [r7, #20]
  return(result);
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d109      	bne.n	800ecd0 <osThreadFlagsSet+0x54>
 800ecbc:	4b1e      	ldr	r3, [pc, #120]	; (800ed38 <osThreadFlagsSet+0xbc>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2b02      	cmp	r3, #2
 800ecc2:	d126      	bne.n	800ed12 <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ecc4:	f3ef 8311 	mrs	r3, BASEPRI
 800ecc8:	613b      	str	r3, [r7, #16]
  return(result);
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d020      	beq.n	800ed12 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ecd4:	f107 0308 	add.w	r3, r7, #8
 800ecd8:	9300      	str	r3, [sp, #0]
 800ecda:	2300      	movs	r3, #0
 800ecdc:	2201      	movs	r2, #1
 800ecde:	6839      	ldr	r1, [r7, #0]
 800ece0:	69f8      	ldr	r0, [r7, #28]
 800ece2:	f003 fe29 	bl	8012938 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ece6:	f107 020c 	add.w	r2, r7, #12
 800ecea:	2300      	movs	r3, #0
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	69f8      	ldr	r0, [r7, #28]
 800ecf6:	f003 fe1f 	bl	8012938 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d015      	beq.n	800ed2c <osThreadFlagsSet+0xb0>
 800ed00:	4b0e      	ldr	r3, [pc, #56]	; (800ed3c <osThreadFlagsSet+0xc0>)
 800ed02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed06:	601a      	str	r2, [r3, #0]
 800ed08:	f3bf 8f4f 	dsb	sy
 800ed0c:	f3bf 8f6f 	isb	sy
 800ed10:	e00c      	b.n	800ed2c <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ed12:	2300      	movs	r3, #0
 800ed14:	2201      	movs	r2, #1
 800ed16:	6839      	ldr	r1, [r7, #0]
 800ed18:	69f8      	ldr	r0, [r7, #28]
 800ed1a:	f003 fd69 	bl	80127f0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ed1e:	f107 030c 	add.w	r3, r7, #12
 800ed22:	2200      	movs	r2, #0
 800ed24:	2100      	movs	r1, #0
 800ed26:	69f8      	ldr	r0, [r7, #28]
 800ed28:	f003 fd62 	bl	80127f0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3720      	adds	r7, #32
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	20000ad8 	.word	0x20000ad8
 800ed3c:	e000ed04 	.word	0xe000ed04

0800ed40 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b088      	sub	sp, #32
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed48:	f3ef 8305 	mrs	r3, IPSR
 800ed4c:	617b      	str	r3, [r7, #20]
  return(result);
 800ed4e:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d10f      	bne.n	800ed74 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed54:	f3ef 8310 	mrs	r3, PRIMASK
 800ed58:	613b      	str	r3, [r7, #16]
  return(result);
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d109      	bne.n	800ed74 <osThreadFlagsClear+0x34>
 800ed60:	4b1e      	ldr	r3, [pc, #120]	; (800eddc <osThreadFlagsClear+0x9c>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2b02      	cmp	r3, #2
 800ed66:	d109      	bne.n	800ed7c <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed68:	f3ef 8311 	mrs	r3, BASEPRI
 800ed6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d003      	beq.n	800ed7c <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 800ed74:	f06f 0305 	mvn.w	r3, #5
 800ed78:	61fb      	str	r3, [r7, #28]
 800ed7a:	e02a      	b.n	800edd2 <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	da03      	bge.n	800ed8a <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 800ed82:	f06f 0303 	mvn.w	r3, #3
 800ed86:	61fb      	str	r3, [r7, #28]
 800ed88:	e023      	b.n	800edd2 <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800ed8a:	f003 fb37 	bl	80123fc <xTaskGetCurrentTaskHandle>
 800ed8e:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800ed90:	f107 0308 	add.w	r3, r7, #8
 800ed94:	2200      	movs	r2, #0
 800ed96:	2100      	movs	r1, #0
 800ed98:	69b8      	ldr	r0, [r7, #24]
 800ed9a:	f003 fd29 	bl	80127f0 <xTaskGenericNotify>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d113      	bne.n	800edcc <osThreadFlagsClear+0x8c>
      rflags = cflags;
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	43da      	mvns	r2, r3
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	4013      	ands	r3, r2
 800edb0:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800edb2:	68b9      	ldr	r1, [r7, #8]
 800edb4:	2300      	movs	r3, #0
 800edb6:	2203      	movs	r2, #3
 800edb8:	69b8      	ldr	r0, [r7, #24]
 800edba:	f003 fd19 	bl	80127f0 <xTaskGenericNotify>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d006      	beq.n	800edd2 <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 800edc4:	f04f 33ff 	mov.w	r3, #4294967295
 800edc8:	61fb      	str	r3, [r7, #28]
 800edca:	e002      	b.n	800edd2 <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800edcc:	f04f 33ff 	mov.w	r3, #4294967295
 800edd0:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800edd2:	69fb      	ldr	r3, [r7, #28]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3720      	adds	r7, #32
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	20000ad8 	.word	0x20000ad8

0800ede0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b08e      	sub	sp, #56	; 0x38
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edec:	f3ef 8305 	mrs	r3, IPSR
 800edf0:	61fb      	str	r3, [r7, #28]
  return(result);
 800edf2:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d10f      	bne.n	800ee18 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edf8:	f3ef 8310 	mrs	r3, PRIMASK
 800edfc:	61bb      	str	r3, [r7, #24]
  return(result);
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d109      	bne.n	800ee18 <osThreadFlagsWait+0x38>
 800ee04:	4b3f      	ldr	r3, [pc, #252]	; (800ef04 <osThreadFlagsWait+0x124>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2b02      	cmp	r3, #2
 800ee0a:	d109      	bne.n	800ee20 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee0c:	f3ef 8311 	mrs	r3, BASEPRI
 800ee10:	617b      	str	r3, [r7, #20]
  return(result);
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d003      	beq.n	800ee20 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800ee18:	f06f 0305 	mvn.w	r3, #5
 800ee1c:	637b      	str	r3, [r7, #52]	; 0x34
 800ee1e:	e06b      	b.n	800eef8 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	da03      	bge.n	800ee2e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800ee26:	f06f 0303 	mvn.w	r3, #3
 800ee2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ee2c:	e064      	b.n	800eef8 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	f003 0302 	and.w	r3, r3, #2
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d002      	beq.n	800ee3e <osThreadFlagsWait+0x5e>
      clear = 0U;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	633b      	str	r3, [r7, #48]	; 0x30
 800ee3c:	e001      	b.n	800ee42 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800ee42:	2300      	movs	r3, #0
 800ee44:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800ee4a:	f002 fef3 	bl	8011c34 <xTaskGetTickCount>
 800ee4e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800ee50:	f107 0210 	add.w	r2, r7, #16
 800ee54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee58:	2000      	movs	r0, #0
 800ee5a:	f003 fc6f 	bl	801273c <xTaskNotifyWait>
 800ee5e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	2b01      	cmp	r3, #1
 800ee64:	d137      	bne.n	800eed6 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800ee66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	4013      	ands	r3, r2
 800ee6c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee72:	4313      	orrs	r3, r2
 800ee74:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	f003 0301 	and.w	r3, r3, #1
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00c      	beq.n	800ee9a <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee84:	4013      	ands	r3, r2
 800ee86:	68fa      	ldr	r2, [r7, #12]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d032      	beq.n	800eef2 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10f      	bne.n	800eeb2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800ee92:	f06f 0302 	mvn.w	r3, #2
 800ee96:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800ee98:	e02e      	b.n	800eef8 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee9e:	4013      	ands	r3, r2
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d128      	bne.n	800eef6 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d103      	bne.n	800eeb2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800eeaa:	f06f 0302 	mvn.w	r3, #2
 800eeae:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800eeb0:	e022      	b.n	800eef8 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800eeb2:	f002 febf 	bl	8011c34 <xTaskGetTickCount>
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeba:	1ad3      	subs	r3, r2, r3
 800eebc:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800eebe:	6a3a      	ldr	r2, [r7, #32]
 800eec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d902      	bls.n	800eecc <osThreadFlagsWait+0xec>
          tout  = 0;
 800eec6:	2300      	movs	r3, #0
 800eec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eeca:	e00e      	b.n	800eeea <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800eecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eece:	6a3b      	ldr	r3, [r7, #32]
 800eed0:	1ad3      	subs	r3, r2, r3
 800eed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eed4:	e009      	b.n	800eeea <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d103      	bne.n	800eee4 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800eedc:	f06f 0302 	mvn.w	r3, #2
 800eee0:	637b      	str	r3, [r7, #52]	; 0x34
 800eee2:	e002      	b.n	800eeea <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800eee4:	f06f 0301 	mvn.w	r3, #1
 800eee8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800eeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1af      	bne.n	800ee50 <osThreadFlagsWait+0x70>
 800eef0:	e002      	b.n	800eef8 <osThreadFlagsWait+0x118>
            break;
 800eef2:	bf00      	nop
 800eef4:	e000      	b.n	800eef8 <osThreadFlagsWait+0x118>
            break;
 800eef6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800eef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3738      	adds	r7, #56	; 0x38
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	20000ad8 	.word	0x20000ad8

0800ef08 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b086      	sub	sp, #24
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef10:	f3ef 8305 	mrs	r3, IPSR
 800ef14:	613b      	str	r3, [r7, #16]
  return(result);
 800ef16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d10f      	bne.n	800ef3c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef1c:	f3ef 8310 	mrs	r3, PRIMASK
 800ef20:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d109      	bne.n	800ef3c <osDelay+0x34>
 800ef28:	4b0d      	ldr	r3, [pc, #52]	; (800ef60 <osDelay+0x58>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2b02      	cmp	r3, #2
 800ef2e:	d109      	bne.n	800ef44 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef30:	f3ef 8311 	mrs	r3, BASEPRI
 800ef34:	60bb      	str	r3, [r7, #8]
  return(result);
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d003      	beq.n	800ef44 <osDelay+0x3c>
    stat = osErrorISR;
 800ef3c:	f06f 0305 	mvn.w	r3, #5
 800ef40:	617b      	str	r3, [r7, #20]
 800ef42:	e007      	b.n	800ef54 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ef44:	2300      	movs	r3, #0
 800ef46:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d002      	beq.n	800ef54 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f002 fcf4 	bl	801193c <vTaskDelay>
    }
  }

  return (stat);
 800ef54:	697b      	ldr	r3, [r7, #20]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3718      	adds	r7, #24
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	20000ad8 	.word	0x20000ad8

0800ef64 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f004 f9bb 	bl	80132e8 <pvTimerGetTimerID>
 800ef72:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d005      	beq.n	800ef86 <TimerCallback+0x22>
    callb->func (callb->arg);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	68fa      	ldr	r2, [r7, #12]
 800ef80:	6852      	ldr	r2, [r2, #4]
 800ef82:	4610      	mov	r0, r2
 800ef84:	4798      	blx	r3
  }
}
 800ef86:	bf00      	nop
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
	...

0800ef90 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b08e      	sub	sp, #56	; 0x38
 800ef94:	af02      	add	r7, sp, #8
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	607a      	str	r2, [r7, #4]
 800ef9a:	603b      	str	r3, [r7, #0]
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800efa0:	2300      	movs	r3, #0
 800efa2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efa4:	f3ef 8305 	mrs	r3, IPSR
 800efa8:	61bb      	str	r3, [r7, #24]
  return(result);
 800efaa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800efac:	2b00      	cmp	r3, #0
 800efae:	d16a      	bne.n	800f086 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efb0:	f3ef 8310 	mrs	r3, PRIMASK
 800efb4:	617b      	str	r3, [r7, #20]
  return(result);
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d164      	bne.n	800f086 <osTimerNew+0xf6>
 800efbc:	4b34      	ldr	r3, [pc, #208]	; (800f090 <osTimerNew+0x100>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	2b02      	cmp	r3, #2
 800efc2:	d105      	bne.n	800efd0 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800efc4:	f3ef 8311 	mrs	r3, BASEPRI
 800efc8:	613b      	str	r3, [r7, #16]
  return(result);
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d15a      	bne.n	800f086 <osTimerNew+0xf6>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d057      	beq.n	800f086 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800efd6:	2008      	movs	r0, #8
 800efd8:	f000 fd92 	bl	800fb00 <pvPortMalloc>
 800efdc:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d050      	beq.n	800f086 <osTimerNew+0xf6>
      callb->func = func;
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	68fa      	ldr	r2, [r7, #12]
 800efe8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800eff0:	7afb      	ldrb	r3, [r7, #11]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d102      	bne.n	800effc <osTimerNew+0x6c>
        reload = pdFALSE;
 800eff6:	2300      	movs	r3, #0
 800eff8:	627b      	str	r3, [r7, #36]	; 0x24
 800effa:	e001      	b.n	800f000 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800effc:	2301      	movs	r3, #1
 800effe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800f000:	f04f 33ff 	mov.w	r3, #4294967295
 800f004:	623b      	str	r3, [r7, #32]
      name = NULL;
 800f006:	2300      	movs	r3, #0
 800f008:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d01c      	beq.n	800f04a <osTimerNew+0xba>
        if (attr->name != NULL) {
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d002      	beq.n	800f01e <osTimerNew+0x8e>
          name = attr->name;
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d006      	beq.n	800f034 <osTimerNew+0xa4>
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	2b2f      	cmp	r3, #47	; 0x2f
 800f02c:	d902      	bls.n	800f034 <osTimerNew+0xa4>
          mem = 1;
 800f02e:	2301      	movs	r3, #1
 800f030:	623b      	str	r3, [r7, #32]
 800f032:	e00c      	b.n	800f04e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	689b      	ldr	r3, [r3, #8]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d108      	bne.n	800f04e <osTimerNew+0xbe>
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	68db      	ldr	r3, [r3, #12]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d104      	bne.n	800f04e <osTimerNew+0xbe>
            mem = 0;
 800f044:	2300      	movs	r3, #0
 800f046:	623b      	str	r3, [r7, #32]
 800f048:	e001      	b.n	800f04e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800f04e:	6a3b      	ldr	r3, [r7, #32]
 800f050:	2b01      	cmp	r3, #1
 800f052:	d10c      	bne.n	800f06e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	9301      	str	r3, [sp, #4]
 800f05a:	4b0e      	ldr	r3, [pc, #56]	; (800f094 <osTimerNew+0x104>)
 800f05c:	9300      	str	r3, [sp, #0]
 800f05e:	69fb      	ldr	r3, [r7, #28]
 800f060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f062:	2101      	movs	r1, #1
 800f064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f066:	f003 fdec 	bl	8012c42 <xTimerCreateStatic>
 800f06a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f06c:	e00b      	b.n	800f086 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800f06e:	6a3b      	ldr	r3, [r7, #32]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d108      	bne.n	800f086 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f074:	4b07      	ldr	r3, [pc, #28]	; (800f094 <osTimerNew+0x104>)
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f07c:	2101      	movs	r1, #1
 800f07e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f080:	f003 fdbe 	bl	8012c00 <xTimerCreate>
 800f084:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f086:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3730      	adds	r7, #48	; 0x30
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	20000ad8 	.word	0x20000ad8
 800f094:	0800ef65 	.word	0x0800ef65

0800f098 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800f098:	b580      	push	{r7, lr}
 800f09a:	b08a      	sub	sp, #40	; 0x28
 800f09c:	af02      	add	r7, sp, #8
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0a6:	f3ef 8305 	mrs	r3, IPSR
 800f0aa:	617b      	str	r3, [r7, #20]
  return(result);
 800f0ac:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d10f      	bne.n	800f0d2 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0b2:	f3ef 8310 	mrs	r3, PRIMASK
 800f0b6:	613b      	str	r3, [r7, #16]
  return(result);
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d109      	bne.n	800f0d2 <osTimerStart+0x3a>
 800f0be:	4b15      	ldr	r3, [pc, #84]	; (800f114 <osTimerStart+0x7c>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2b02      	cmp	r3, #2
 800f0c4:	d109      	bne.n	800f0da <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f0c6:	f3ef 8311 	mrs	r3, BASEPRI
 800f0ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d003      	beq.n	800f0da <osTimerStart+0x42>
    stat = osErrorISR;
 800f0d2:	f06f 0305 	mvn.w	r3, #5
 800f0d6:	61fb      	str	r3, [r7, #28]
 800f0d8:	e017      	b.n	800f10a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d103      	bne.n	800f0e8 <osTimerStart+0x50>
    stat = osErrorParameter;
 800f0e0:	f06f 0303 	mvn.w	r3, #3
 800f0e4:	61fb      	str	r3, [r7, #28]
 800f0e6:	e010      	b.n	800f10a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	9300      	str	r3, [sp, #0]
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	683a      	ldr	r2, [r7, #0]
 800f0f0:	2104      	movs	r1, #4
 800f0f2:	69b8      	ldr	r0, [r7, #24]
 800f0f4:	f003 fe12 	bl	8012d1c <xTimerGenericCommand>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d102      	bne.n	800f104 <osTimerStart+0x6c>
      stat = osOK;
 800f0fe:	2300      	movs	r3, #0
 800f100:	61fb      	str	r3, [r7, #28]
 800f102:	e002      	b.n	800f10a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800f104:	f06f 0302 	mvn.w	r3, #2
 800f108:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800f10a:	69fb      	ldr	r3, [r7, #28]
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3720      	adds	r7, #32
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	20000ad8 	.word	0x20000ad8

0800f118 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800f118:	b580      	push	{r7, lr}
 800f11a:	b08a      	sub	sp, #40	; 0x28
 800f11c:	af02      	add	r7, sp, #8
 800f11e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f124:	f3ef 8305 	mrs	r3, IPSR
 800f128:	617b      	str	r3, [r7, #20]
  return(result);
 800f12a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d10f      	bne.n	800f150 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f130:	f3ef 8310 	mrs	r3, PRIMASK
 800f134:	613b      	str	r3, [r7, #16]
  return(result);
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d109      	bne.n	800f150 <osTimerStop+0x38>
 800f13c:	4b1a      	ldr	r3, [pc, #104]	; (800f1a8 <osTimerStop+0x90>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	2b02      	cmp	r3, #2
 800f142:	d109      	bne.n	800f158 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f144:	f3ef 8311 	mrs	r3, BASEPRI
 800f148:	60fb      	str	r3, [r7, #12]
  return(result);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d003      	beq.n	800f158 <osTimerStop+0x40>
    stat = osErrorISR;
 800f150:	f06f 0305 	mvn.w	r3, #5
 800f154:	61fb      	str	r3, [r7, #28]
 800f156:	e021      	b.n	800f19c <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d103      	bne.n	800f166 <osTimerStop+0x4e>
    stat = osErrorParameter;
 800f15e:	f06f 0303 	mvn.w	r3, #3
 800f162:	61fb      	str	r3, [r7, #28]
 800f164:	e01a      	b.n	800f19c <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800f166:	69b8      	ldr	r0, [r7, #24]
 800f168:	f004 f89a 	bl	80132a0 <xTimerIsTimerActive>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d103      	bne.n	800f17a <osTimerStop+0x62>
      stat = osErrorResource;
 800f172:	f06f 0302 	mvn.w	r3, #2
 800f176:	61fb      	str	r3, [r7, #28]
 800f178:	e010      	b.n	800f19c <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800f17a:	2300      	movs	r3, #0
 800f17c:	9300      	str	r3, [sp, #0]
 800f17e:	2300      	movs	r3, #0
 800f180:	2200      	movs	r2, #0
 800f182:	2103      	movs	r1, #3
 800f184:	69b8      	ldr	r0, [r7, #24]
 800f186:	f003 fdc9 	bl	8012d1c <xTimerGenericCommand>
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d102      	bne.n	800f196 <osTimerStop+0x7e>
        stat = osOK;
 800f190:	2300      	movs	r3, #0
 800f192:	61fb      	str	r3, [r7, #28]
 800f194:	e002      	b.n	800f19c <osTimerStop+0x84>
      } else {
        stat = osError;
 800f196:	f04f 33ff 	mov.w	r3, #4294967295
 800f19a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800f19c:	69fb      	ldr	r3, [r7, #28]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3720      	adds	r7, #32
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	20000ad8 	.word	0x20000ad8

0800f1ac <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b08a      	sub	sp, #40	; 0x28
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1b8:	f3ef 8305 	mrs	r3, IPSR
 800f1bc:	613b      	str	r3, [r7, #16]
  return(result);
 800f1be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	f040 8085 	bne.w	800f2d0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1c6:	f3ef 8310 	mrs	r3, PRIMASK
 800f1ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d17e      	bne.n	800f2d0 <osMutexNew+0x124>
 800f1d2:	4b42      	ldr	r3, [pc, #264]	; (800f2dc <osMutexNew+0x130>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2b02      	cmp	r3, #2
 800f1d8:	d105      	bne.n	800f1e6 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f1da:	f3ef 8311 	mrs	r3, BASEPRI
 800f1de:	60bb      	str	r3, [r7, #8]
  return(result);
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d174      	bne.n	800f2d0 <osMutexNew+0x124>
    if (attr != NULL) {
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d003      	beq.n	800f1f4 <osMutexNew+0x48>
      type = attr->attr_bits;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	623b      	str	r3, [r7, #32]
 800f1f2:	e001      	b.n	800f1f8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f1f8:	6a3b      	ldr	r3, [r7, #32]
 800f1fa:	f003 0301 	and.w	r3, r3, #1
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d002      	beq.n	800f208 <osMutexNew+0x5c>
      rmtx = 1U;
 800f202:	2301      	movs	r3, #1
 800f204:	61fb      	str	r3, [r7, #28]
 800f206:	e001      	b.n	800f20c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800f208:	2300      	movs	r3, #0
 800f20a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	f003 0308 	and.w	r3, r3, #8
 800f212:	2b00      	cmp	r3, #0
 800f214:	d15c      	bne.n	800f2d0 <osMutexNew+0x124>
      mem = -1;
 800f216:	f04f 33ff 	mov.w	r3, #4294967295
 800f21a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d015      	beq.n	800f24e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	689b      	ldr	r3, [r3, #8]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d006      	beq.n	800f238 <osMutexNew+0x8c>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	68db      	ldr	r3, [r3, #12]
 800f22e:	2b4f      	cmp	r3, #79	; 0x4f
 800f230:	d902      	bls.n	800f238 <osMutexNew+0x8c>
          mem = 1;
 800f232:	2301      	movs	r3, #1
 800f234:	61bb      	str	r3, [r7, #24]
 800f236:	e00c      	b.n	800f252 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	689b      	ldr	r3, [r3, #8]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d108      	bne.n	800f252 <osMutexNew+0xa6>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	68db      	ldr	r3, [r3, #12]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d104      	bne.n	800f252 <osMutexNew+0xa6>
            mem = 0;
 800f248:	2300      	movs	r3, #0
 800f24a:	61bb      	str	r3, [r7, #24]
 800f24c:	e001      	b.n	800f252 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800f24e:	2300      	movs	r3, #0
 800f250:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	2b01      	cmp	r3, #1
 800f256:	d112      	bne.n	800f27e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d007      	beq.n	800f26e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	689b      	ldr	r3, [r3, #8]
 800f262:	4619      	mov	r1, r3
 800f264:	2004      	movs	r0, #4
 800f266:	f001 fa63 	bl	8010730 <xQueueCreateMutexStatic>
 800f26a:	6278      	str	r0, [r7, #36]	; 0x24
 800f26c:	e016      	b.n	800f29c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	4619      	mov	r1, r3
 800f274:	2001      	movs	r0, #1
 800f276:	f001 fa5b 	bl	8010730 <xQueueCreateMutexStatic>
 800f27a:	6278      	str	r0, [r7, #36]	; 0x24
 800f27c:	e00e      	b.n	800f29c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800f27e:	69bb      	ldr	r3, [r7, #24]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d10b      	bne.n	800f29c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d004      	beq.n	800f294 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800f28a:	2004      	movs	r0, #4
 800f28c:	f001 fa38 	bl	8010700 <xQueueCreateMutex>
 800f290:	6278      	str	r0, [r7, #36]	; 0x24
 800f292:	e003      	b.n	800f29c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800f294:	2001      	movs	r0, #1
 800f296:	f001 fa33 	bl	8010700 <xQueueCreateMutex>
 800f29a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d00c      	beq.n	800f2bc <osMutexNew+0x110>
        if (attr != NULL) {
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d003      	beq.n	800f2b0 <osMutexNew+0x104>
          name = attr->name;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	617b      	str	r3, [r7, #20]
 800f2ae:	e001      	b.n	800f2b4 <osMutexNew+0x108>
        } else {
          name = NULL;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800f2b4:	6979      	ldr	r1, [r7, #20]
 800f2b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2b8:	f002 f920 	bl	80114fc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d006      	beq.n	800f2d0 <osMutexNew+0x124>
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d003      	beq.n	800f2d0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ca:	f043 0301 	orr.w	r3, r3, #1
 800f2ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3728      	adds	r7, #40	; 0x28
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	20000ad8 	.word	0x20000ad8

0800f2e0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b088      	sub	sp, #32
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f023 0301 	bic.w	r3, r3, #1
 800f2f0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f003 0301 	and.w	r3, r3, #1
 800f2f8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2fe:	f3ef 8305 	mrs	r3, IPSR
 800f302:	613b      	str	r3, [r7, #16]
  return(result);
 800f304:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800f306:	2b00      	cmp	r3, #0
 800f308:	d10f      	bne.n	800f32a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f30a:	f3ef 8310 	mrs	r3, PRIMASK
 800f30e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d109      	bne.n	800f32a <osMutexAcquire+0x4a>
 800f316:	4b20      	ldr	r3, [pc, #128]	; (800f398 <osMutexAcquire+0xb8>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2b02      	cmp	r3, #2
 800f31c:	d109      	bne.n	800f332 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f31e:	f3ef 8311 	mrs	r3, BASEPRI
 800f322:	60bb      	str	r3, [r7, #8]
  return(result);
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d003      	beq.n	800f332 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800f32a:	f06f 0305 	mvn.w	r3, #5
 800f32e:	61fb      	str	r3, [r7, #28]
 800f330:	e02c      	b.n	800f38c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d103      	bne.n	800f340 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800f338:	f06f 0303 	mvn.w	r3, #3
 800f33c:	61fb      	str	r3, [r7, #28]
 800f33e:	e025      	b.n	800f38c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d011      	beq.n	800f36a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f346:	6839      	ldr	r1, [r7, #0]
 800f348:	69b8      	ldr	r0, [r7, #24]
 800f34a:	f001 fa3f 	bl	80107cc <xQueueTakeMutexRecursive>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b01      	cmp	r3, #1
 800f352:	d01b      	beq.n	800f38c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d003      	beq.n	800f362 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800f35a:	f06f 0301 	mvn.w	r3, #1
 800f35e:	61fb      	str	r3, [r7, #28]
 800f360:	e014      	b.n	800f38c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800f362:	f06f 0302 	mvn.w	r3, #2
 800f366:	61fb      	str	r3, [r7, #28]
 800f368:	e010      	b.n	800f38c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f36a:	6839      	ldr	r1, [r7, #0]
 800f36c:	69b8      	ldr	r0, [r7, #24]
 800f36e:	f001 fdbd 	bl	8010eec <xQueueSemaphoreTake>
 800f372:	4603      	mov	r3, r0
 800f374:	2b01      	cmp	r3, #1
 800f376:	d009      	beq.n	800f38c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d003      	beq.n	800f386 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800f37e:	f06f 0301 	mvn.w	r3, #1
 800f382:	61fb      	str	r3, [r7, #28]
 800f384:	e002      	b.n	800f38c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800f386:	f06f 0302 	mvn.w	r3, #2
 800f38a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f38c:	69fb      	ldr	r3, [r7, #28]
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3720      	adds	r7, #32
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	20000ad8 	.word	0x20000ad8

0800f39c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b088      	sub	sp, #32
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f023 0301 	bic.w	r3, r3, #1
 800f3aa:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f003 0301 	and.w	r3, r3, #1
 800f3b2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3b8:	f3ef 8305 	mrs	r3, IPSR
 800f3bc:	613b      	str	r3, [r7, #16]
  return(result);
 800f3be:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d10f      	bne.n	800f3e4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3c4:	f3ef 8310 	mrs	r3, PRIMASK
 800f3c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d109      	bne.n	800f3e4 <osMutexRelease+0x48>
 800f3d0:	4b19      	ldr	r3, [pc, #100]	; (800f438 <osMutexRelease+0x9c>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2b02      	cmp	r3, #2
 800f3d6:	d109      	bne.n	800f3ec <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f3d8:	f3ef 8311 	mrs	r3, BASEPRI
 800f3dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d003      	beq.n	800f3ec <osMutexRelease+0x50>
    stat = osErrorISR;
 800f3e4:	f06f 0305 	mvn.w	r3, #5
 800f3e8:	61fb      	str	r3, [r7, #28]
 800f3ea:	e01f      	b.n	800f42c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d103      	bne.n	800f3fa <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800f3f2:	f06f 0303 	mvn.w	r3, #3
 800f3f6:	61fb      	str	r3, [r7, #28]
 800f3f8:	e018      	b.n	800f42c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d009      	beq.n	800f414 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f400:	69b8      	ldr	r0, [r7, #24]
 800f402:	f001 f9b0 	bl	8010766 <xQueueGiveMutexRecursive>
 800f406:	4603      	mov	r3, r0
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d00f      	beq.n	800f42c <osMutexRelease+0x90>
        stat = osErrorResource;
 800f40c:	f06f 0302 	mvn.w	r3, #2
 800f410:	61fb      	str	r3, [r7, #28]
 800f412:	e00b      	b.n	800f42c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f414:	2300      	movs	r3, #0
 800f416:	2200      	movs	r2, #0
 800f418:	2100      	movs	r1, #0
 800f41a:	69b8      	ldr	r0, [r7, #24]
 800f41c:	f001 fa72 	bl	8010904 <xQueueGenericSend>
 800f420:	4603      	mov	r3, r0
 800f422:	2b01      	cmp	r3, #1
 800f424:	d002      	beq.n	800f42c <osMutexRelease+0x90>
        stat = osErrorResource;
 800f426:	f06f 0302 	mvn.w	r3, #2
 800f42a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800f42c:	69fb      	ldr	r3, [r7, #28]
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3720      	adds	r7, #32
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	20000ad8 	.word	0x20000ad8

0800f43c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b08c      	sub	sp, #48	; 0x30
 800f440:	af02      	add	r7, sp, #8
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f448:	2300      	movs	r3, #0
 800f44a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f44c:	f3ef 8305 	mrs	r3, IPSR
 800f450:	61bb      	str	r3, [r7, #24]
  return(result);
 800f452:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f454:	2b00      	cmp	r3, #0
 800f456:	f040 8088 	bne.w	800f56a <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f45a:	f3ef 8310 	mrs	r3, PRIMASK
 800f45e:	617b      	str	r3, [r7, #20]
  return(result);
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	2b00      	cmp	r3, #0
 800f464:	f040 8081 	bne.w	800f56a <osSemaphoreNew+0x12e>
 800f468:	4b42      	ldr	r3, [pc, #264]	; (800f574 <osSemaphoreNew+0x138>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	2b02      	cmp	r3, #2
 800f46e:	d105      	bne.n	800f47c <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f470:	f3ef 8311 	mrs	r3, BASEPRI
 800f474:	613b      	str	r3, [r7, #16]
  return(result);
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d176      	bne.n	800f56a <osSemaphoreNew+0x12e>
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d073      	beq.n	800f56a <osSemaphoreNew+0x12e>
 800f482:	68ba      	ldr	r2, [r7, #8]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	429a      	cmp	r2, r3
 800f488:	d86f      	bhi.n	800f56a <osSemaphoreNew+0x12e>
    mem = -1;
 800f48a:	f04f 33ff 	mov.w	r3, #4294967295
 800f48e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d015      	beq.n	800f4c2 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d006      	beq.n	800f4ac <osSemaphoreNew+0x70>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	2b4f      	cmp	r3, #79	; 0x4f
 800f4a4:	d902      	bls.n	800f4ac <osSemaphoreNew+0x70>
        mem = 1;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	623b      	str	r3, [r7, #32]
 800f4aa:	e00c      	b.n	800f4c6 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d108      	bne.n	800f4c6 <osSemaphoreNew+0x8a>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d104      	bne.n	800f4c6 <osSemaphoreNew+0x8a>
          mem = 0;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	623b      	str	r3, [r7, #32]
 800f4c0:	e001      	b.n	800f4c6 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f4c6:	6a3b      	ldr	r3, [r7, #32]
 800f4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4cc:	d04d      	beq.n	800f56a <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	d129      	bne.n	800f528 <osSemaphoreNew+0xec>
        if (mem == 1) {
 800f4d4:	6a3b      	ldr	r3, [r7, #32]
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d10b      	bne.n	800f4f2 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	689a      	ldr	r2, [r3, #8]
 800f4de:	2303      	movs	r3, #3
 800f4e0:	9300      	str	r3, [sp, #0]
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	2100      	movs	r1, #0
 800f4e8:	2001      	movs	r0, #1
 800f4ea:	f001 f81d 	bl	8010528 <xQueueGenericCreateStatic>
 800f4ee:	6278      	str	r0, [r7, #36]	; 0x24
 800f4f0:	e005      	b.n	800f4fe <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f4f2:	2203      	movs	r2, #3
 800f4f4:	2100      	movs	r1, #0
 800f4f6:	2001      	movs	r0, #1
 800f4f8:	f001 f888 	bl	801060c <xQueueGenericCreate>
 800f4fc:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f500:	2b00      	cmp	r3, #0
 800f502:	d022      	beq.n	800f54a <osSemaphoreNew+0x10e>
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d01f      	beq.n	800f54a <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f50a:	2300      	movs	r3, #0
 800f50c:	2200      	movs	r2, #0
 800f50e:	2100      	movs	r1, #0
 800f510:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f512:	f001 f9f7 	bl	8010904 <xQueueGenericSend>
 800f516:	4603      	mov	r3, r0
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d016      	beq.n	800f54a <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 800f51c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f51e:	f001 fea2 	bl	8011266 <vQueueDelete>
            hSemaphore = NULL;
 800f522:	2300      	movs	r3, #0
 800f524:	627b      	str	r3, [r7, #36]	; 0x24
 800f526:	e010      	b.n	800f54a <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 800f528:	6a3b      	ldr	r3, [r7, #32]
 800f52a:	2b01      	cmp	r3, #1
 800f52c:	d108      	bne.n	800f540 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	689b      	ldr	r3, [r3, #8]
 800f532:	461a      	mov	r2, r3
 800f534:	68b9      	ldr	r1, [r7, #8]
 800f536:	68f8      	ldr	r0, [r7, #12]
 800f538:	f001 f97d 	bl	8010836 <xQueueCreateCountingSemaphoreStatic>
 800f53c:	6278      	str	r0, [r7, #36]	; 0x24
 800f53e:	e004      	b.n	800f54a <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f540:	68b9      	ldr	r1, [r7, #8]
 800f542:	68f8      	ldr	r0, [r7, #12]
 800f544:	f001 f9ac 	bl	80108a0 <xQueueCreateCountingSemaphore>
 800f548:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d00c      	beq.n	800f56a <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d003      	beq.n	800f55e <osSemaphoreNew+0x122>
          name = attr->name;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	61fb      	str	r3, [r7, #28]
 800f55c:	e001      	b.n	800f562 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800f55e:	2300      	movs	r3, #0
 800f560:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f562:	69f9      	ldr	r1, [r7, #28]
 800f564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f566:	f001 ffc9 	bl	80114fc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3728      	adds	r7, #40	; 0x28
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	20000ad8 	.word	0x20000ad8

0800f578 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f578:	b580      	push	{r7, lr}
 800f57a:	b088      	sub	sp, #32
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f586:	2300      	movs	r3, #0
 800f588:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f58a:	69bb      	ldr	r3, [r7, #24]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d103      	bne.n	800f598 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f590:	f06f 0303 	mvn.w	r3, #3
 800f594:	61fb      	str	r3, [r7, #28]
 800f596:	e04b      	b.n	800f630 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f598:	f3ef 8305 	mrs	r3, IPSR
 800f59c:	617b      	str	r3, [r7, #20]
  return(result);
 800f59e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d10f      	bne.n	800f5c4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5a4:	f3ef 8310 	mrs	r3, PRIMASK
 800f5a8:	613b      	str	r3, [r7, #16]
  return(result);
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d109      	bne.n	800f5c4 <osSemaphoreAcquire+0x4c>
 800f5b0:	4b22      	ldr	r3, [pc, #136]	; (800f63c <osSemaphoreAcquire+0xc4>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	2b02      	cmp	r3, #2
 800f5b6:	d128      	bne.n	800f60a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f5b8:	f3ef 8311 	mrs	r3, BASEPRI
 800f5bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d022      	beq.n	800f60a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d003      	beq.n	800f5d2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f5ca:	f06f 0303 	mvn.w	r3, #3
 800f5ce:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f5d0:	e02d      	b.n	800f62e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f5d6:	f107 0308 	add.w	r3, r7, #8
 800f5da:	461a      	mov	r2, r3
 800f5dc:	2100      	movs	r1, #0
 800f5de:	69b8      	ldr	r0, [r7, #24]
 800f5e0:	f001 fd8c 	bl	80110fc <xQueueReceiveFromISR>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d003      	beq.n	800f5f2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f5ea:	f06f 0302 	mvn.w	r3, #2
 800f5ee:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f5f0:	e01d      	b.n	800f62e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d01a      	beq.n	800f62e <osSemaphoreAcquire+0xb6>
 800f5f8:	4b11      	ldr	r3, [pc, #68]	; (800f640 <osSemaphoreAcquire+0xc8>)
 800f5fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5fe:	601a      	str	r2, [r3, #0]
 800f600:	f3bf 8f4f 	dsb	sy
 800f604:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f608:	e011      	b.n	800f62e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f60a:	6839      	ldr	r1, [r7, #0]
 800f60c:	69b8      	ldr	r0, [r7, #24]
 800f60e:	f001 fc6d 	bl	8010eec <xQueueSemaphoreTake>
 800f612:	4603      	mov	r3, r0
 800f614:	2b01      	cmp	r3, #1
 800f616:	d00b      	beq.n	800f630 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d003      	beq.n	800f626 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f61e:	f06f 0301 	mvn.w	r3, #1
 800f622:	61fb      	str	r3, [r7, #28]
 800f624:	e004      	b.n	800f630 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f626:	f06f 0302 	mvn.w	r3, #2
 800f62a:	61fb      	str	r3, [r7, #28]
 800f62c:	e000      	b.n	800f630 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f62e:	bf00      	nop
      }
    }
  }

  return (stat);
 800f630:	69fb      	ldr	r3, [r7, #28]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3720      	adds	r7, #32
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	20000ad8 	.word	0x20000ad8
 800f640:	e000ed04 	.word	0xe000ed04

0800f644 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f644:	b580      	push	{r7, lr}
 800f646:	b088      	sub	sp, #32
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f650:	2300      	movs	r3, #0
 800f652:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f654:	69bb      	ldr	r3, [r7, #24]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d103      	bne.n	800f662 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f65a:	f06f 0303 	mvn.w	r3, #3
 800f65e:	61fb      	str	r3, [r7, #28]
 800f660:	e03e      	b.n	800f6e0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f662:	f3ef 8305 	mrs	r3, IPSR
 800f666:	617b      	str	r3, [r7, #20]
  return(result);
 800f668:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d10f      	bne.n	800f68e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f66e:	f3ef 8310 	mrs	r3, PRIMASK
 800f672:	613b      	str	r3, [r7, #16]
  return(result);
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d109      	bne.n	800f68e <osSemaphoreRelease+0x4a>
 800f67a:	4b1c      	ldr	r3, [pc, #112]	; (800f6ec <osSemaphoreRelease+0xa8>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	2b02      	cmp	r3, #2
 800f680:	d120      	bne.n	800f6c4 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f682:	f3ef 8311 	mrs	r3, BASEPRI
 800f686:	60fb      	str	r3, [r7, #12]
  return(result);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d01a      	beq.n	800f6c4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800f68e:	2300      	movs	r3, #0
 800f690:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f692:	f107 0308 	add.w	r3, r7, #8
 800f696:	4619      	mov	r1, r3
 800f698:	69b8      	ldr	r0, [r7, #24]
 800f69a:	f001 fac1 	bl	8010c20 <xQueueGiveFromISR>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d003      	beq.n	800f6ac <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f6a4:	f06f 0302 	mvn.w	r3, #2
 800f6a8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6aa:	e018      	b.n	800f6de <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d015      	beq.n	800f6de <osSemaphoreRelease+0x9a>
 800f6b2:	4b0f      	ldr	r3, [pc, #60]	; (800f6f0 <osSemaphoreRelease+0xac>)
 800f6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6b8:	601a      	str	r2, [r3, #0]
 800f6ba:	f3bf 8f4f 	dsb	sy
 800f6be:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6c2:	e00c      	b.n	800f6de <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	69b8      	ldr	r0, [r7, #24]
 800f6cc:	f001 f91a 	bl	8010904 <xQueueGenericSend>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d004      	beq.n	800f6e0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f6d6:	f06f 0302 	mvn.w	r3, #2
 800f6da:	61fb      	str	r3, [r7, #28]
 800f6dc:	e000      	b.n	800f6e0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6de:	bf00      	nop
    }
  }

  return (stat);
 800f6e0:	69fb      	ldr	r3, [r7, #28]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3720      	adds	r7, #32
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	20000ad8 	.word	0x20000ad8
 800f6f0:	e000ed04 	.word	0xe000ed04

0800f6f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b08c      	sub	sp, #48	; 0x30
 800f6f8:	af02      	add	r7, sp, #8
 800f6fa:	60f8      	str	r0, [r7, #12]
 800f6fc:	60b9      	str	r1, [r7, #8]
 800f6fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f700:	2300      	movs	r3, #0
 800f702:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f704:	f3ef 8305 	mrs	r3, IPSR
 800f708:	61bb      	str	r3, [r7, #24]
  return(result);
 800f70a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d170      	bne.n	800f7f2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f710:	f3ef 8310 	mrs	r3, PRIMASK
 800f714:	617b      	str	r3, [r7, #20]
  return(result);
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d16a      	bne.n	800f7f2 <osMessageQueueNew+0xfe>
 800f71c:	4b37      	ldr	r3, [pc, #220]	; (800f7fc <osMessageQueueNew+0x108>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2b02      	cmp	r3, #2
 800f722:	d105      	bne.n	800f730 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f724:	f3ef 8311 	mrs	r3, BASEPRI
 800f728:	613b      	str	r3, [r7, #16]
  return(result);
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d160      	bne.n	800f7f2 <osMessageQueueNew+0xfe>
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d05d      	beq.n	800f7f2 <osMessageQueueNew+0xfe>
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d05a      	beq.n	800f7f2 <osMessageQueueNew+0xfe>
    mem = -1;
 800f73c:	f04f 33ff 	mov.w	r3, #4294967295
 800f740:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d029      	beq.n	800f79c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d012      	beq.n	800f776 <osMessageQueueNew+0x82>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	68db      	ldr	r3, [r3, #12]
 800f754:	2b4f      	cmp	r3, #79	; 0x4f
 800f756:	d90e      	bls.n	800f776 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00a      	beq.n	800f776 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	695a      	ldr	r2, [r3, #20]
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	68b9      	ldr	r1, [r7, #8]
 800f768:	fb01 f303 	mul.w	r3, r1, r3
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d302      	bcc.n	800f776 <osMessageQueueNew+0x82>
        mem = 1;
 800f770:	2301      	movs	r3, #1
 800f772:	623b      	str	r3, [r7, #32]
 800f774:	e014      	b.n	800f7a0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d110      	bne.n	800f7a0 <osMessageQueueNew+0xac>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d10c      	bne.n	800f7a0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d108      	bne.n	800f7a0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	695b      	ldr	r3, [r3, #20]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d104      	bne.n	800f7a0 <osMessageQueueNew+0xac>
          mem = 0;
 800f796:	2300      	movs	r3, #0
 800f798:	623b      	str	r3, [r7, #32]
 800f79a:	e001      	b.n	800f7a0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800f79c:	2300      	movs	r3, #0
 800f79e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f7a0:	6a3b      	ldr	r3, [r7, #32]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d10c      	bne.n	800f7c0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	691a      	ldr	r2, [r3, #16]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6899      	ldr	r1, [r3, #8]
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	9300      	str	r3, [sp, #0]
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	68b9      	ldr	r1, [r7, #8]
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f000 feb6 	bl	8010528 <xQueueGenericCreateStatic>
 800f7bc:	6278      	str	r0, [r7, #36]	; 0x24
 800f7be:	e008      	b.n	800f7d2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800f7c0:	6a3b      	ldr	r3, [r7, #32]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d105      	bne.n	800f7d2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	68b9      	ldr	r1, [r7, #8]
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f000 ff1e 	bl	801060c <xQueueGenericCreate>
 800f7d0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d00c      	beq.n	800f7f2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d003      	beq.n	800f7e6 <osMessageQueueNew+0xf2>
        name = attr->name;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	61fb      	str	r3, [r7, #28]
 800f7e4:	e001      	b.n	800f7ea <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800f7ea:	69f9      	ldr	r1, [r7, #28]
 800f7ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7ee:	f001 fe85 	bl	80114fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3728      	adds	r7, #40	; 0x28
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}
 800f7fc:	20000ad8 	.word	0x20000ad8

0800f800 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f800:	b580      	push	{r7, lr}
 800f802:	b08a      	sub	sp, #40	; 0x28
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	603b      	str	r3, [r7, #0]
 800f80c:	4613      	mov	r3, r2
 800f80e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f814:	2300      	movs	r3, #0
 800f816:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f818:	f3ef 8305 	mrs	r3, IPSR
 800f81c:	61fb      	str	r3, [r7, #28]
  return(result);
 800f81e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f820:	2b00      	cmp	r3, #0
 800f822:	d10f      	bne.n	800f844 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f824:	f3ef 8310 	mrs	r3, PRIMASK
 800f828:	61bb      	str	r3, [r7, #24]
  return(result);
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d109      	bne.n	800f844 <osMessageQueuePut+0x44>
 800f830:	4b2b      	ldr	r3, [pc, #172]	; (800f8e0 <osMessageQueuePut+0xe0>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	2b02      	cmp	r3, #2
 800f836:	d12e      	bne.n	800f896 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f838:	f3ef 8311 	mrs	r3, BASEPRI
 800f83c:	617b      	str	r3, [r7, #20]
  return(result);
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d028      	beq.n	800f896 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f844:	6a3b      	ldr	r3, [r7, #32]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d005      	beq.n	800f856 <osMessageQueuePut+0x56>
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d002      	beq.n	800f856 <osMessageQueuePut+0x56>
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d003      	beq.n	800f85e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800f856:	f06f 0303 	mvn.w	r3, #3
 800f85a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f85c:	e039      	b.n	800f8d2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800f85e:	2300      	movs	r3, #0
 800f860:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f862:	f107 0210 	add.w	r2, r7, #16
 800f866:	2300      	movs	r3, #0
 800f868:	68b9      	ldr	r1, [r7, #8]
 800f86a:	6a38      	ldr	r0, [r7, #32]
 800f86c:	f001 f944 	bl	8010af8 <xQueueGenericSendFromISR>
 800f870:	4603      	mov	r3, r0
 800f872:	2b01      	cmp	r3, #1
 800f874:	d003      	beq.n	800f87e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800f876:	f06f 0302 	mvn.w	r3, #2
 800f87a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f87c:	e029      	b.n	800f8d2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d026      	beq.n	800f8d2 <osMessageQueuePut+0xd2>
 800f884:	4b17      	ldr	r3, [pc, #92]	; (800f8e4 <osMessageQueuePut+0xe4>)
 800f886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f88a:	601a      	str	r2, [r3, #0]
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f894:	e01d      	b.n	800f8d2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f896:	6a3b      	ldr	r3, [r7, #32]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d002      	beq.n	800f8a2 <osMessageQueuePut+0xa2>
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d103      	bne.n	800f8aa <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800f8a2:	f06f 0303 	mvn.w	r3, #3
 800f8a6:	627b      	str	r3, [r7, #36]	; 0x24
 800f8a8:	e014      	b.n	800f8d4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	683a      	ldr	r2, [r7, #0]
 800f8ae:	68b9      	ldr	r1, [r7, #8]
 800f8b0:	6a38      	ldr	r0, [r7, #32]
 800f8b2:	f001 f827 	bl	8010904 <xQueueGenericSend>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d00b      	beq.n	800f8d4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d003      	beq.n	800f8ca <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f8c2:	f06f 0301 	mvn.w	r3, #1
 800f8c6:	627b      	str	r3, [r7, #36]	; 0x24
 800f8c8:	e004      	b.n	800f8d4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f8ca:	f06f 0302 	mvn.w	r3, #2
 800f8ce:	627b      	str	r3, [r7, #36]	; 0x24
 800f8d0:	e000      	b.n	800f8d4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f8d2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3728      	adds	r7, #40	; 0x28
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	20000ad8 	.word	0x20000ad8
 800f8e4:	e000ed04 	.word	0xe000ed04

0800f8e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b08a      	sub	sp, #40	; 0x28
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	607a      	str	r2, [r7, #4]
 800f8f4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8fe:	f3ef 8305 	mrs	r3, IPSR
 800f902:	61fb      	str	r3, [r7, #28]
  return(result);
 800f904:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f906:	2b00      	cmp	r3, #0
 800f908:	d10f      	bne.n	800f92a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f90a:	f3ef 8310 	mrs	r3, PRIMASK
 800f90e:	61bb      	str	r3, [r7, #24]
  return(result);
 800f910:	69bb      	ldr	r3, [r7, #24]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d109      	bne.n	800f92a <osMessageQueueGet+0x42>
 800f916:	4b2b      	ldr	r3, [pc, #172]	; (800f9c4 <osMessageQueueGet+0xdc>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2b02      	cmp	r3, #2
 800f91c:	d12e      	bne.n	800f97c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f91e:	f3ef 8311 	mrs	r3, BASEPRI
 800f922:	617b      	str	r3, [r7, #20]
  return(result);
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d028      	beq.n	800f97c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f92a:	6a3b      	ldr	r3, [r7, #32]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d005      	beq.n	800f93c <osMessageQueueGet+0x54>
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d002      	beq.n	800f93c <osMessageQueueGet+0x54>
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d003      	beq.n	800f944 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800f93c:	f06f 0303 	mvn.w	r3, #3
 800f940:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f942:	e038      	b.n	800f9b6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800f944:	2300      	movs	r3, #0
 800f946:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f948:	f107 0310 	add.w	r3, r7, #16
 800f94c:	461a      	mov	r2, r3
 800f94e:	68b9      	ldr	r1, [r7, #8]
 800f950:	6a38      	ldr	r0, [r7, #32]
 800f952:	f001 fbd3 	bl	80110fc <xQueueReceiveFromISR>
 800f956:	4603      	mov	r3, r0
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d003      	beq.n	800f964 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800f95c:	f06f 0302 	mvn.w	r3, #2
 800f960:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f962:	e028      	b.n	800f9b6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d025      	beq.n	800f9b6 <osMessageQueueGet+0xce>
 800f96a:	4b17      	ldr	r3, [pc, #92]	; (800f9c8 <osMessageQueueGet+0xe0>)
 800f96c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f970:	601a      	str	r2, [r3, #0]
 800f972:	f3bf 8f4f 	dsb	sy
 800f976:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f97a:	e01c      	b.n	800f9b6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f97c:	6a3b      	ldr	r3, [r7, #32]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d002      	beq.n	800f988 <osMessageQueueGet+0xa0>
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d103      	bne.n	800f990 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800f988:	f06f 0303 	mvn.w	r3, #3
 800f98c:	627b      	str	r3, [r7, #36]	; 0x24
 800f98e:	e013      	b.n	800f9b8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f990:	683a      	ldr	r2, [r7, #0]
 800f992:	68b9      	ldr	r1, [r7, #8]
 800f994:	6a38      	ldr	r0, [r7, #32]
 800f996:	f001 f9cd 	bl	8010d34 <xQueueReceive>
 800f99a:	4603      	mov	r3, r0
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d00b      	beq.n	800f9b8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d003      	beq.n	800f9ae <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800f9a6:	f06f 0301 	mvn.w	r3, #1
 800f9aa:	627b      	str	r3, [r7, #36]	; 0x24
 800f9ac:	e004      	b.n	800f9b8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800f9ae:	f06f 0302 	mvn.w	r3, #2
 800f9b2:	627b      	str	r3, [r7, #36]	; 0x24
 800f9b4:	e000      	b.n	800f9b8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f9b6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3728      	adds	r7, #40	; 0x28
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	20000ad8 	.word	0x20000ad8
 800f9c8:	e000ed04 	.word	0xe000ed04

0800f9cc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b088      	sub	sp, #32
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d102      	bne.n	800f9e4 <osMessageQueueGetCount+0x18>
    count = 0U;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	61fb      	str	r3, [r7, #28]
 800f9e2:	e01e      	b.n	800fa22 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9e4:	f3ef 8305 	mrs	r3, IPSR
 800f9e8:	617b      	str	r3, [r7, #20]
  return(result);
 800f9ea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d10f      	bne.n	800fa10 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f9f0:	f3ef 8310 	mrs	r3, PRIMASK
 800f9f4:	613b      	str	r3, [r7, #16]
  return(result);
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d109      	bne.n	800fa10 <osMessageQueueGetCount+0x44>
 800f9fc:	4b0b      	ldr	r3, [pc, #44]	; (800fa2c <osMessageQueueGetCount+0x60>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	2b02      	cmp	r3, #2
 800fa02:	d10a      	bne.n	800fa1a <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fa04:	f3ef 8311 	mrs	r3, BASEPRI
 800fa08:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d004      	beq.n	800fa1a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800fa10:	69b8      	ldr	r0, [r7, #24]
 800fa12:	f001 fc0d 	bl	8011230 <uxQueueMessagesWaitingFromISR>
 800fa16:	61f8      	str	r0, [r7, #28]
 800fa18:	e003      	b.n	800fa22 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800fa1a:	69b8      	ldr	r0, [r7, #24]
 800fa1c:	f001 fbeb 	bl	80111f6 <uxQueueMessagesWaiting>
 800fa20:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800fa22:	69fb      	ldr	r3, [r7, #28]
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3720      	adds	r7, #32
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	20000ad8 	.word	0x20000ad8

0800fa30 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b088      	sub	sp, #32
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa3c:	f3ef 8305 	mrs	r3, IPSR
 800fa40:	617b      	str	r3, [r7, #20]
  return(result);
 800fa42:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d10f      	bne.n	800fa68 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa48:	f3ef 8310 	mrs	r3, PRIMASK
 800fa4c:	613b      	str	r3, [r7, #16]
  return(result);
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d109      	bne.n	800fa68 <osMessageQueueReset+0x38>
 800fa54:	4b0f      	ldr	r3, [pc, #60]	; (800fa94 <osMessageQueueReset+0x64>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2b02      	cmp	r3, #2
 800fa5a:	d109      	bne.n	800fa70 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fa5c:	f3ef 8311 	mrs	r3, BASEPRI
 800fa60:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d003      	beq.n	800fa70 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 800fa68:	f06f 0305 	mvn.w	r3, #5
 800fa6c:	61fb      	str	r3, [r7, #28]
 800fa6e:	e00c      	b.n	800fa8a <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d103      	bne.n	800fa7e <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 800fa76:	f06f 0303 	mvn.w	r3, #3
 800fa7a:	61fb      	str	r3, [r7, #28]
 800fa7c:	e005      	b.n	800fa8a <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800fa82:	2100      	movs	r1, #0
 800fa84:	69b8      	ldr	r0, [r7, #24]
 800fa86:	f000 fce7 	bl	8010458 <xQueueGenericReset>
  }

  return (stat);
 800fa8a:	69fb      	ldr	r3, [r7, #28]
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3720      	adds	r7, #32
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	20000ad8 	.word	0x20000ad8

0800fa98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fa98:	b480      	push	{r7}
 800fa9a:	b085      	sub	sp, #20
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	60f8      	str	r0, [r7, #12]
 800faa0:	60b9      	str	r1, [r7, #8]
 800faa2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	4a07      	ldr	r2, [pc, #28]	; (800fac4 <vApplicationGetIdleTaskMemory+0x2c>)
 800faa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	4a06      	ldr	r2, [pc, #24]	; (800fac8 <vApplicationGetIdleTaskMemory+0x30>)
 800faae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fab6:	601a      	str	r2, [r3, #0]
}
 800fab8:	bf00      	nop
 800faba:	3714      	adds	r7, #20
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr
 800fac4:	20000adc 	.word	0x20000adc
 800fac8:	20000b40 	.word	0x20000b40

0800facc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800facc:	b480      	push	{r7}
 800face:	b085      	sub	sp, #20
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	60f8      	str	r0, [r7, #12]
 800fad4:	60b9      	str	r1, [r7, #8]
 800fad6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	4a07      	ldr	r2, [pc, #28]	; (800faf8 <vApplicationGetTimerTaskMemory+0x2c>)
 800fadc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	4a06      	ldr	r2, [pc, #24]	; (800fafc <vApplicationGetTimerTaskMemory+0x30>)
 800fae2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800faea:	601a      	str	r2, [r3, #0]
}
 800faec:	bf00      	nop
 800faee:	3714      	adds	r7, #20
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr
 800faf8:	20001340 	.word	0x20001340
 800fafc:	200013a4 	.word	0x200013a4

0800fb00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b08a      	sub	sp, #40	; 0x28
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb0c:	f001 ffb0 	bl	8011a70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb10:	4b59      	ldr	r3, [pc, #356]	; (800fc78 <pvPortMalloc+0x178>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d101      	bne.n	800fb1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb18:	f000 f910 	bl	800fd3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb1c:	4b57      	ldr	r3, [pc, #348]	; (800fc7c <pvPortMalloc+0x17c>)
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4013      	ands	r3, r2
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	f040 808c 	bne.w	800fc42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d01c      	beq.n	800fb6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fb30:	2208      	movs	r2, #8
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4413      	add	r3, r2
 800fb36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f003 0307 	and.w	r3, r3, #7
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d013      	beq.n	800fb6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f023 0307 	bic.w	r3, r3, #7
 800fb48:	3308      	adds	r3, #8
 800fb4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f003 0307 	and.w	r3, r3, #7
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d009      	beq.n	800fb6a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5a:	f383 8811 	msr	BASEPRI, r3
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	617b      	str	r3, [r7, #20]
 800fb68:	e7fe      	b.n	800fb68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d068      	beq.n	800fc42 <pvPortMalloc+0x142>
 800fb70:	4b43      	ldr	r3, [pc, #268]	; (800fc80 <pvPortMalloc+0x180>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	687a      	ldr	r2, [r7, #4]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d863      	bhi.n	800fc42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fb7a:	4b42      	ldr	r3, [pc, #264]	; (800fc84 <pvPortMalloc+0x184>)
 800fb7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fb7e:	4b41      	ldr	r3, [pc, #260]	; (800fc84 <pvPortMalloc+0x184>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb84:	e004      	b.n	800fb90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d903      	bls.n	800fba2 <pvPortMalloc+0xa2>
 800fb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d1f1      	bne.n	800fb86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fba2:	4b35      	ldr	r3, [pc, #212]	; (800fc78 <pvPortMalloc+0x178>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d04a      	beq.n	800fc42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2208      	movs	r2, #8
 800fbb2:	4413      	add	r3, r2
 800fbb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb8:	681a      	ldr	r2, [r3, #0]
 800fbba:	6a3b      	ldr	r3, [r7, #32]
 800fbbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc0:	685a      	ldr	r2, [r3, #4]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	1ad2      	subs	r2, r2, r3
 800fbc6:	2308      	movs	r3, #8
 800fbc8:	005b      	lsls	r3, r3, #1
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d91e      	bls.n	800fc0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fbce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4413      	add	r3, r2
 800fbd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	f003 0307 	and.w	r3, r3, #7
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d009      	beq.n	800fbf4 <pvPortMalloc+0xf4>
 800fbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe4:	f383 8811 	msr	BASEPRI, r3
 800fbe8:	f3bf 8f6f 	isb	sy
 800fbec:	f3bf 8f4f 	dsb	sy
 800fbf0:	613b      	str	r3, [r7, #16]
 800fbf2:	e7fe      	b.n	800fbf2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf6:	685a      	ldr	r2, [r3, #4]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	1ad2      	subs	r2, r2, r3
 800fbfc:	69bb      	ldr	r3, [r7, #24]
 800fbfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc02:	687a      	ldr	r2, [r7, #4]
 800fc04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc06:	69b8      	ldr	r0, [r7, #24]
 800fc08:	f000 f8fc 	bl	800fe04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc0c:	4b1c      	ldr	r3, [pc, #112]	; (800fc80 <pvPortMalloc+0x180>)
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	1ad3      	subs	r3, r2, r3
 800fc16:	4a1a      	ldr	r2, [pc, #104]	; (800fc80 <pvPortMalloc+0x180>)
 800fc18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc1a:	4b19      	ldr	r3, [pc, #100]	; (800fc80 <pvPortMalloc+0x180>)
 800fc1c:	681a      	ldr	r2, [r3, #0]
 800fc1e:	4b1a      	ldr	r3, [pc, #104]	; (800fc88 <pvPortMalloc+0x188>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d203      	bcs.n	800fc2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fc26:	4b16      	ldr	r3, [pc, #88]	; (800fc80 <pvPortMalloc+0x180>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	4a17      	ldr	r2, [pc, #92]	; (800fc88 <pvPortMalloc+0x188>)
 800fc2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc30:	685a      	ldr	r2, [r3, #4]
 800fc32:	4b12      	ldr	r3, [pc, #72]	; (800fc7c <pvPortMalloc+0x17c>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	431a      	orrs	r2, r3
 800fc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3e:	2200      	movs	r2, #0
 800fc40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fc42:	f001 ff5b 	bl	8011afc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d101      	bne.n	800fc50 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800fc4c:	f7f1 fb18 	bl	8001280 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	f003 0307 	and.w	r3, r3, #7
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d009      	beq.n	800fc6e <pvPortMalloc+0x16e>
 800fc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc5e:	f383 8811 	msr	BASEPRI, r3
 800fc62:	f3bf 8f6f 	isb	sy
 800fc66:	f3bf 8f4f 	dsb	sy
 800fc6a:	60fb      	str	r3, [r7, #12]
 800fc6c:	e7fe      	b.n	800fc6c <pvPortMalloc+0x16c>
	return pvReturn;
 800fc6e:	69fb      	ldr	r3, [r7, #28]
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3728      	adds	r7, #40	; 0x28
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	20026d9c 	.word	0x20026d9c
 800fc7c:	20026da8 	.word	0x20026da8
 800fc80:	20026da0 	.word	0x20026da0
 800fc84:	20026d94 	.word	0x20026d94
 800fc88:	20026da4 	.word	0x20026da4

0800fc8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b086      	sub	sp, #24
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d046      	beq.n	800fd2c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fc9e:	2308      	movs	r3, #8
 800fca0:	425b      	negs	r3, r3
 800fca2:	697a      	ldr	r2, [r7, #20]
 800fca4:	4413      	add	r3, r2
 800fca6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	685a      	ldr	r2, [r3, #4]
 800fcb0:	4b20      	ldr	r3, [pc, #128]	; (800fd34 <vPortFree+0xa8>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4013      	ands	r3, r2
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d109      	bne.n	800fcce <vPortFree+0x42>
 800fcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcbe:	f383 8811 	msr	BASEPRI, r3
 800fcc2:	f3bf 8f6f 	isb	sy
 800fcc6:	f3bf 8f4f 	dsb	sy
 800fcca:	60fb      	str	r3, [r7, #12]
 800fccc:	e7fe      	b.n	800fccc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d009      	beq.n	800fcea <vPortFree+0x5e>
 800fcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcda:	f383 8811 	msr	BASEPRI, r3
 800fcde:	f3bf 8f6f 	isb	sy
 800fce2:	f3bf 8f4f 	dsb	sy
 800fce6:	60bb      	str	r3, [r7, #8]
 800fce8:	e7fe      	b.n	800fce8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	685a      	ldr	r2, [r3, #4]
 800fcee:	4b11      	ldr	r3, [pc, #68]	; (800fd34 <vPortFree+0xa8>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4013      	ands	r3, r2
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d019      	beq.n	800fd2c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d115      	bne.n	800fd2c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	685a      	ldr	r2, [r3, #4]
 800fd04:	4b0b      	ldr	r3, [pc, #44]	; (800fd34 <vPortFree+0xa8>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	43db      	mvns	r3, r3
 800fd0a:	401a      	ands	r2, r3
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd10:	f001 feae 	bl	8011a70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	685a      	ldr	r2, [r3, #4]
 800fd18:	4b07      	ldr	r3, [pc, #28]	; (800fd38 <vPortFree+0xac>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	4a06      	ldr	r2, [pc, #24]	; (800fd38 <vPortFree+0xac>)
 800fd20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fd22:	6938      	ldr	r0, [r7, #16]
 800fd24:	f000 f86e 	bl	800fe04 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fd28:	f001 fee8 	bl	8011afc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fd2c:	bf00      	nop
 800fd2e:	3718      	adds	r7, #24
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	20026da8 	.word	0x20026da8
 800fd38:	20026da0 	.word	0x20026da0

0800fd3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b085      	sub	sp, #20
 800fd40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fd42:	4b29      	ldr	r3, [pc, #164]	; (800fde8 <prvHeapInit+0xac>)
 800fd44:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fd46:	4b29      	ldr	r3, [pc, #164]	; (800fdec <prvHeapInit+0xb0>)
 800fd48:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f003 0307 	and.w	r3, r3, #7
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d00c      	beq.n	800fd6e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	3307      	adds	r3, #7
 800fd58:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f023 0307 	bic.w	r3, r3, #7
 800fd60:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fd62:	68ba      	ldr	r2, [r7, #8]
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	4a20      	ldr	r2, [pc, #128]	; (800fdec <prvHeapInit+0xb0>)
 800fd6a:	4413      	add	r3, r2
 800fd6c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fd72:	4a1f      	ldr	r2, [pc, #124]	; (800fdf0 <prvHeapInit+0xb4>)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fd78:	4b1d      	ldr	r3, [pc, #116]	; (800fdf0 <prvHeapInit+0xb4>)
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	4413      	add	r3, r2
 800fd84:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fd86:	2208      	movs	r2, #8
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	1a9b      	subs	r3, r3, r2
 800fd8c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f023 0307 	bic.w	r3, r3, #7
 800fd94:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	4a16      	ldr	r2, [pc, #88]	; (800fdf4 <prvHeapInit+0xb8>)
 800fd9a:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fd9c:	4b15      	ldr	r3, [pc, #84]	; (800fdf4 <prvHeapInit+0xb8>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2200      	movs	r2, #0
 800fda2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fda4:	4b13      	ldr	r3, [pc, #76]	; (800fdf4 <prvHeapInit+0xb8>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	68fa      	ldr	r2, [r7, #12]
 800fdb4:	1ad2      	subs	r2, r2, r3
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fdba:	4b0e      	ldr	r3, [pc, #56]	; (800fdf4 <prvHeapInit+0xb8>)
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	4a0c      	ldr	r2, [pc, #48]	; (800fdf8 <prvHeapInit+0xbc>)
 800fdc8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	4a0b      	ldr	r2, [pc, #44]	; (800fdfc <prvHeapInit+0xc0>)
 800fdd0:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fdd2:	4b0b      	ldr	r3, [pc, #44]	; (800fe00 <prvHeapInit+0xc4>)
 800fdd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fdd8:	601a      	str	r2, [r3, #0]
}
 800fdda:	bf00      	nop
 800fddc:	3714      	adds	r7, #20
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr
 800fde6:	bf00      	nop
 800fde8:	000249f0 	.word	0x000249f0
 800fdec:	200023a4 	.word	0x200023a4
 800fdf0:	20026d94 	.word	0x20026d94
 800fdf4:	20026d9c 	.word	0x20026d9c
 800fdf8:	20026da4 	.word	0x20026da4
 800fdfc:	20026da0 	.word	0x20026da0
 800fe00:	20026da8 	.word	0x20026da8

0800fe04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe04:	b480      	push	{r7}
 800fe06:	b085      	sub	sp, #20
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe0c:	4b28      	ldr	r3, [pc, #160]	; (800feb0 <prvInsertBlockIntoFreeList+0xac>)
 800fe0e:	60fb      	str	r3, [r7, #12]
 800fe10:	e002      	b.n	800fe18 <prvInsertBlockIntoFreeList+0x14>
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	60fb      	str	r3, [r7, #12]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d8f7      	bhi.n	800fe12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	68ba      	ldr	r2, [r7, #8]
 800fe2c:	4413      	add	r3, r2
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d108      	bne.n	800fe46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	685a      	ldr	r2, [r3, #4]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	441a      	add	r2, r3
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	68ba      	ldr	r2, [r7, #8]
 800fe50:	441a      	add	r2, r3
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d118      	bne.n	800fe8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	4b15      	ldr	r3, [pc, #84]	; (800feb4 <prvInsertBlockIntoFreeList+0xb0>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d00d      	beq.n	800fe82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	685a      	ldr	r2, [r3, #4]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	441a      	add	r2, r3
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	681a      	ldr	r2, [r3, #0]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	601a      	str	r2, [r3, #0]
 800fe80:	e008      	b.n	800fe94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fe82:	4b0c      	ldr	r3, [pc, #48]	; (800feb4 <prvInsertBlockIntoFreeList+0xb0>)
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	601a      	str	r2, [r3, #0]
 800fe8a:	e003      	b.n	800fe94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fe94:	68fa      	ldr	r2, [r7, #12]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d002      	beq.n	800fea2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fea2:	bf00      	nop
 800fea4:	3714      	adds	r7, #20
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop
 800feb0:	20026d94 	.word	0x20026d94
 800feb4:	20026d9c 	.word	0x20026d9c

0800feb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800feb8:	b480      	push	{r7}
 800feba:	b083      	sub	sp, #12
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f103 0208 	add.w	r2, r3, #8
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f04f 32ff 	mov.w	r2, #4294967295
 800fed0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f103 0208 	add.w	r2, r3, #8
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f103 0208 	add.w	r2, r3, #8
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2200      	movs	r2, #0
 800feea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800feec:	bf00      	nop
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr

0800fef8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2200      	movs	r2, #0
 800ff04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ff06:	bf00      	nop
 800ff08:	370c      	adds	r7, #12
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff10:	4770      	bx	lr

0800ff12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff12:	b480      	push	{r7}
 800ff14:	b085      	sub	sp, #20
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
 800ff1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	68fa      	ldr	r2, [r7, #12]
 800ff26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	689a      	ldr	r2, [r3, #8]
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	689b      	ldr	r3, [r3, #8]
 800ff34:	683a      	ldr	r2, [r7, #0]
 800ff36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	683a      	ldr	r2, [r7, #0]
 800ff3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	1c5a      	adds	r2, r3, #1
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	601a      	str	r2, [r3, #0]
}
 800ff4e:	bf00      	nop
 800ff50:	3714      	adds	r7, #20
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr

0800ff5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff5a:	b480      	push	{r7}
 800ff5c:	b085      	sub	sp, #20
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
 800ff62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff70:	d103      	bne.n	800ff7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	60fb      	str	r3, [r7, #12]
 800ff78:	e00c      	b.n	800ff94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	3308      	adds	r3, #8
 800ff7e:	60fb      	str	r3, [r7, #12]
 800ff80:	e002      	b.n	800ff88 <vListInsert+0x2e>
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	60fb      	str	r3, [r7, #12]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	68ba      	ldr	r2, [r7, #8]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d2f6      	bcs.n	800ff82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	685a      	ldr	r2, [r3, #4]
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	685b      	ldr	r3, [r3, #4]
 800ffa0:	683a      	ldr	r2, [r7, #0]
 800ffa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	68fa      	ldr	r2, [r7, #12]
 800ffa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	683a      	ldr	r2, [r7, #0]
 800ffae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	1c5a      	adds	r2, r3, #1
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	601a      	str	r2, [r3, #0]
}
 800ffc0:	bf00      	nop
 800ffc2:	3714      	adds	r7, #20
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b085      	sub	sp, #20
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	691b      	ldr	r3, [r3, #16]
 800ffd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	6892      	ldr	r2, [r2, #8]
 800ffe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	6852      	ldr	r2, [r2, #4]
 800ffec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d103      	bne.n	8010000 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	689a      	ldr	r2, [r3, #8]
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	1e5a      	subs	r2, r3, #1
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	681b      	ldr	r3, [r3, #0]
}
 8010014:	4618      	mov	r0, r3
 8010016:	3714      	adds	r7, #20
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010020:	b480      	push	{r7}
 8010022:	b085      	sub	sp, #20
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	3b04      	subs	r3, #4
 8010030:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010038:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	3b04      	subs	r3, #4
 801003e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	f023 0201 	bic.w	r2, r3, #1
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	3b04      	subs	r3, #4
 801004e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010050:	4a0c      	ldr	r2, [pc, #48]	; (8010084 <pxPortInitialiseStack+0x64>)
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	3b14      	subs	r3, #20
 801005a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801005c:	687a      	ldr	r2, [r7, #4]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	3b04      	subs	r3, #4
 8010066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f06f 0202 	mvn.w	r2, #2
 801006e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	3b20      	subs	r3, #32
 8010074:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010076:	68fb      	ldr	r3, [r7, #12]
}
 8010078:	4618      	mov	r0, r3
 801007a:	3714      	adds	r7, #20
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr
 8010084:	08010089 	.word	0x08010089

08010088 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010088:	b480      	push	{r7}
 801008a:	b085      	sub	sp, #20
 801008c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801008e:	2300      	movs	r3, #0
 8010090:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010092:	4b11      	ldr	r3, [pc, #68]	; (80100d8 <prvTaskExitError+0x50>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f1b3 3fff 	cmp.w	r3, #4294967295
 801009a:	d009      	beq.n	80100b0 <prvTaskExitError+0x28>
 801009c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a0:	f383 8811 	msr	BASEPRI, r3
 80100a4:	f3bf 8f6f 	isb	sy
 80100a8:	f3bf 8f4f 	dsb	sy
 80100ac:	60fb      	str	r3, [r7, #12]
 80100ae:	e7fe      	b.n	80100ae <prvTaskExitError+0x26>
 80100b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b4:	f383 8811 	msr	BASEPRI, r3
 80100b8:	f3bf 8f6f 	isb	sy
 80100bc:	f3bf 8f4f 	dsb	sy
 80100c0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80100c2:	bf00      	nop
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d0fc      	beq.n	80100c4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80100ca:	bf00      	nop
 80100cc:	3714      	adds	r7, #20
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop
 80100d8:	20000084 	.word	0x20000084
 80100dc:	00000000 	.word	0x00000000

080100e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80100e0:	4b07      	ldr	r3, [pc, #28]	; (8010100 <pxCurrentTCBConst2>)
 80100e2:	6819      	ldr	r1, [r3, #0]
 80100e4:	6808      	ldr	r0, [r1, #0]
 80100e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ea:	f380 8809 	msr	PSP, r0
 80100ee:	f3bf 8f6f 	isb	sy
 80100f2:	f04f 0000 	mov.w	r0, #0
 80100f6:	f380 8811 	msr	BASEPRI, r0
 80100fa:	4770      	bx	lr
 80100fc:	f3af 8000 	nop.w

08010100 <pxCurrentTCBConst2>:
 8010100:	20026db4 	.word	0x20026db4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010104:	bf00      	nop
 8010106:	bf00      	nop

08010108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010108:	4808      	ldr	r0, [pc, #32]	; (801012c <prvPortStartFirstTask+0x24>)
 801010a:	6800      	ldr	r0, [r0, #0]
 801010c:	6800      	ldr	r0, [r0, #0]
 801010e:	f380 8808 	msr	MSP, r0
 8010112:	f04f 0000 	mov.w	r0, #0
 8010116:	f380 8814 	msr	CONTROL, r0
 801011a:	b662      	cpsie	i
 801011c:	b661      	cpsie	f
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	f3bf 8f6f 	isb	sy
 8010126:	df00      	svc	0
 8010128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801012a:	bf00      	nop
 801012c:	e000ed08 	.word	0xe000ed08

08010130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b086      	sub	sp, #24
 8010134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010136:	4b44      	ldr	r3, [pc, #272]	; (8010248 <xPortStartScheduler+0x118>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4a44      	ldr	r2, [pc, #272]	; (801024c <xPortStartScheduler+0x11c>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d109      	bne.n	8010154 <xPortStartScheduler+0x24>
 8010140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010144:	f383 8811 	msr	BASEPRI, r3
 8010148:	f3bf 8f6f 	isb	sy
 801014c:	f3bf 8f4f 	dsb	sy
 8010150:	613b      	str	r3, [r7, #16]
 8010152:	e7fe      	b.n	8010152 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010154:	4b3c      	ldr	r3, [pc, #240]	; (8010248 <xPortStartScheduler+0x118>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4a3d      	ldr	r2, [pc, #244]	; (8010250 <xPortStartScheduler+0x120>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d109      	bne.n	8010172 <xPortStartScheduler+0x42>
 801015e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010162:	f383 8811 	msr	BASEPRI, r3
 8010166:	f3bf 8f6f 	isb	sy
 801016a:	f3bf 8f4f 	dsb	sy
 801016e:	60fb      	str	r3, [r7, #12]
 8010170:	e7fe      	b.n	8010170 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010172:	4b38      	ldr	r3, [pc, #224]	; (8010254 <xPortStartScheduler+0x124>)
 8010174:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	b2db      	uxtb	r3, r3
 801017c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	22ff      	movs	r2, #255	; 0xff
 8010182:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	b2db      	uxtb	r3, r3
 801018a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801018c:	78fb      	ldrb	r3, [r7, #3]
 801018e:	b2db      	uxtb	r3, r3
 8010190:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010194:	b2da      	uxtb	r2, r3
 8010196:	4b30      	ldr	r3, [pc, #192]	; (8010258 <xPortStartScheduler+0x128>)
 8010198:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801019a:	4b30      	ldr	r3, [pc, #192]	; (801025c <xPortStartScheduler+0x12c>)
 801019c:	2207      	movs	r2, #7
 801019e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101a0:	e009      	b.n	80101b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80101a2:	4b2e      	ldr	r3, [pc, #184]	; (801025c <xPortStartScheduler+0x12c>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	3b01      	subs	r3, #1
 80101a8:	4a2c      	ldr	r2, [pc, #176]	; (801025c <xPortStartScheduler+0x12c>)
 80101aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80101ac:	78fb      	ldrb	r3, [r7, #3]
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	005b      	lsls	r3, r3, #1
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101b6:	78fb      	ldrb	r3, [r7, #3]
 80101b8:	b2db      	uxtb	r3, r3
 80101ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101be:	2b80      	cmp	r3, #128	; 0x80
 80101c0:	d0ef      	beq.n	80101a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80101c2:	4b26      	ldr	r3, [pc, #152]	; (801025c <xPortStartScheduler+0x12c>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f1c3 0307 	rsb	r3, r3, #7
 80101ca:	2b04      	cmp	r3, #4
 80101cc:	d009      	beq.n	80101e2 <xPortStartScheduler+0xb2>
 80101ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d2:	f383 8811 	msr	BASEPRI, r3
 80101d6:	f3bf 8f6f 	isb	sy
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	60bb      	str	r3, [r7, #8]
 80101e0:	e7fe      	b.n	80101e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101e2:	4b1e      	ldr	r3, [pc, #120]	; (801025c <xPortStartScheduler+0x12c>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	021b      	lsls	r3, r3, #8
 80101e8:	4a1c      	ldr	r2, [pc, #112]	; (801025c <xPortStartScheduler+0x12c>)
 80101ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101ec:	4b1b      	ldr	r3, [pc, #108]	; (801025c <xPortStartScheduler+0x12c>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80101f4:	4a19      	ldr	r2, [pc, #100]	; (801025c <xPortStartScheduler+0x12c>)
 80101f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	b2da      	uxtb	r2, r3
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010200:	4b17      	ldr	r3, [pc, #92]	; (8010260 <xPortStartScheduler+0x130>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4a16      	ldr	r2, [pc, #88]	; (8010260 <xPortStartScheduler+0x130>)
 8010206:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801020a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801020c:	4b14      	ldr	r3, [pc, #80]	; (8010260 <xPortStartScheduler+0x130>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a13      	ldr	r2, [pc, #76]	; (8010260 <xPortStartScheduler+0x130>)
 8010212:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010216:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010218:	f7f2 f8a8 	bl	800236c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801021c:	4b11      	ldr	r3, [pc, #68]	; (8010264 <xPortStartScheduler+0x134>)
 801021e:	2200      	movs	r2, #0
 8010220:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010222:	f000 f8d1 	bl	80103c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010226:	4b10      	ldr	r3, [pc, #64]	; (8010268 <xPortStartScheduler+0x138>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	4a0f      	ldr	r2, [pc, #60]	; (8010268 <xPortStartScheduler+0x138>)
 801022c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010230:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010232:	f7ff ff69 	bl	8010108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010236:	f001 fdf9 	bl	8011e2c <vTaskSwitchContext>
	prvTaskExitError();
 801023a:	f7ff ff25 	bl	8010088 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801023e:	2300      	movs	r3, #0
}
 8010240:	4618      	mov	r0, r3
 8010242:	3718      	adds	r7, #24
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	e000ed00 	.word	0xe000ed00
 801024c:	410fc271 	.word	0x410fc271
 8010250:	410fc270 	.word	0x410fc270
 8010254:	e000e400 	.word	0xe000e400
 8010258:	20026dac 	.word	0x20026dac
 801025c:	20026db0 	.word	0x20026db0
 8010260:	e000ed20 	.word	0xe000ed20
 8010264:	20000084 	.word	0x20000084
 8010268:	e000ef34 	.word	0xe000ef34

0801026c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010276:	f383 8811 	msr	BASEPRI, r3
 801027a:	f3bf 8f6f 	isb	sy
 801027e:	f3bf 8f4f 	dsb	sy
 8010282:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010284:	4b0e      	ldr	r3, [pc, #56]	; (80102c0 <vPortEnterCritical+0x54>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	3301      	adds	r3, #1
 801028a:	4a0d      	ldr	r2, [pc, #52]	; (80102c0 <vPortEnterCritical+0x54>)
 801028c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801028e:	4b0c      	ldr	r3, [pc, #48]	; (80102c0 <vPortEnterCritical+0x54>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	2b01      	cmp	r3, #1
 8010294:	d10e      	bne.n	80102b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010296:	4b0b      	ldr	r3, [pc, #44]	; (80102c4 <vPortEnterCritical+0x58>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	b2db      	uxtb	r3, r3
 801029c:	2b00      	cmp	r3, #0
 801029e:	d009      	beq.n	80102b4 <vPortEnterCritical+0x48>
 80102a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a4:	f383 8811 	msr	BASEPRI, r3
 80102a8:	f3bf 8f6f 	isb	sy
 80102ac:	f3bf 8f4f 	dsb	sy
 80102b0:	603b      	str	r3, [r7, #0]
 80102b2:	e7fe      	b.n	80102b2 <vPortEnterCritical+0x46>
	}
}
 80102b4:	bf00      	nop
 80102b6:	370c      	adds	r7, #12
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr
 80102c0:	20000084 	.word	0x20000084
 80102c4:	e000ed04 	.word	0xe000ed04

080102c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80102c8:	b480      	push	{r7}
 80102ca:	b083      	sub	sp, #12
 80102cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102ce:	4b11      	ldr	r3, [pc, #68]	; (8010314 <vPortExitCritical+0x4c>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d109      	bne.n	80102ea <vPortExitCritical+0x22>
 80102d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102da:	f383 8811 	msr	BASEPRI, r3
 80102de:	f3bf 8f6f 	isb	sy
 80102e2:	f3bf 8f4f 	dsb	sy
 80102e6:	607b      	str	r3, [r7, #4]
 80102e8:	e7fe      	b.n	80102e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80102ea:	4b0a      	ldr	r3, [pc, #40]	; (8010314 <vPortExitCritical+0x4c>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	3b01      	subs	r3, #1
 80102f0:	4a08      	ldr	r2, [pc, #32]	; (8010314 <vPortExitCritical+0x4c>)
 80102f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102f4:	4b07      	ldr	r3, [pc, #28]	; (8010314 <vPortExitCritical+0x4c>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d104      	bne.n	8010306 <vPortExitCritical+0x3e>
 80102fc:	2300      	movs	r3, #0
 80102fe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010306:	bf00      	nop
 8010308:	370c      	adds	r7, #12
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop
 8010314:	20000084 	.word	0x20000084
	...

08010320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010320:	f3ef 8009 	mrs	r0, PSP
 8010324:	f3bf 8f6f 	isb	sy
 8010328:	4b15      	ldr	r3, [pc, #84]	; (8010380 <pxCurrentTCBConst>)
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	f01e 0f10 	tst.w	lr, #16
 8010330:	bf08      	it	eq
 8010332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801033a:	6010      	str	r0, [r2, #0]
 801033c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010344:	f380 8811 	msr	BASEPRI, r0
 8010348:	f3bf 8f4f 	dsb	sy
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f001 fd6c 	bl	8011e2c <vTaskSwitchContext>
 8010354:	f04f 0000 	mov.w	r0, #0
 8010358:	f380 8811 	msr	BASEPRI, r0
 801035c:	bc09      	pop	{r0, r3}
 801035e:	6819      	ldr	r1, [r3, #0]
 8010360:	6808      	ldr	r0, [r1, #0]
 8010362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010366:	f01e 0f10 	tst.w	lr, #16
 801036a:	bf08      	it	eq
 801036c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010370:	f380 8809 	msr	PSP, r0
 8010374:	f3bf 8f6f 	isb	sy
 8010378:	4770      	bx	lr
 801037a:	bf00      	nop
 801037c:	f3af 8000 	nop.w

08010380 <pxCurrentTCBConst>:
 8010380:	20026db4 	.word	0x20026db4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010384:	bf00      	nop
 8010386:	bf00      	nop

08010388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
	__asm volatile
 801038e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010392:	f383 8811 	msr	BASEPRI, r3
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	f3bf 8f4f 	dsb	sy
 801039e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80103a0:	f001 fc7e 	bl	8011ca0 <xTaskIncrementTick>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d003      	beq.n	80103b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80103aa:	4b06      	ldr	r3, [pc, #24]	; (80103c4 <SysTick_Handler+0x3c>)
 80103ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103b0:	601a      	str	r2, [r3, #0]
 80103b2:	2300      	movs	r3, #0
 80103b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80103bc:	bf00      	nop
 80103be:	3708      	adds	r7, #8
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}
 80103c4:	e000ed04 	.word	0xe000ed04

080103c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80103c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80103d8 <vPortEnableVFP+0x10>
 80103cc:	6801      	ldr	r1, [r0, #0]
 80103ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80103d2:	6001      	str	r1, [r0, #0]
 80103d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80103d6:	bf00      	nop
 80103d8:	e000ed88 	.word	0xe000ed88

080103dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80103dc:	b480      	push	{r7}
 80103de:	b085      	sub	sp, #20
 80103e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80103e2:	f3ef 8305 	mrs	r3, IPSR
 80103e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	2b0f      	cmp	r3, #15
 80103ec:	d913      	bls.n	8010416 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80103ee:	4a16      	ldr	r2, [pc, #88]	; (8010448 <vPortValidateInterruptPriority+0x6c>)
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	4413      	add	r3, r2
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80103f8:	4b14      	ldr	r3, [pc, #80]	; (801044c <vPortValidateInterruptPriority+0x70>)
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	7afa      	ldrb	r2, [r7, #11]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d209      	bcs.n	8010416 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8010402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010406:	f383 8811 	msr	BASEPRI, r3
 801040a:	f3bf 8f6f 	isb	sy
 801040e:	f3bf 8f4f 	dsb	sy
 8010412:	607b      	str	r3, [r7, #4]
 8010414:	e7fe      	b.n	8010414 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010416:	4b0e      	ldr	r3, [pc, #56]	; (8010450 <vPortValidateInterruptPriority+0x74>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801041e:	4b0d      	ldr	r3, [pc, #52]	; (8010454 <vPortValidateInterruptPriority+0x78>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	429a      	cmp	r2, r3
 8010424:	d909      	bls.n	801043a <vPortValidateInterruptPriority+0x5e>
 8010426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042a:	f383 8811 	msr	BASEPRI, r3
 801042e:	f3bf 8f6f 	isb	sy
 8010432:	f3bf 8f4f 	dsb	sy
 8010436:	603b      	str	r3, [r7, #0]
 8010438:	e7fe      	b.n	8010438 <vPortValidateInterruptPriority+0x5c>
	}
 801043a:	bf00      	nop
 801043c:	3714      	adds	r7, #20
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr
 8010446:	bf00      	nop
 8010448:	e000e3f0 	.word	0xe000e3f0
 801044c:	20026dac 	.word	0x20026dac
 8010450:	e000ed0c 	.word	0xe000ed0c
 8010454:	20026db0 	.word	0x20026db0

08010458 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d109      	bne.n	8010480 <xQueueGenericReset+0x28>
 801046c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010470:	f383 8811 	msr	BASEPRI, r3
 8010474:	f3bf 8f6f 	isb	sy
 8010478:	f3bf 8f4f 	dsb	sy
 801047c:	60bb      	str	r3, [r7, #8]
 801047e:	e7fe      	b.n	801047e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8010480:	f7ff fef4 	bl	801026c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801048c:	68f9      	ldr	r1, [r7, #12]
 801048e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010490:	fb01 f303 	mul.w	r3, r1, r3
 8010494:	441a      	add	r2, r3
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2200      	movs	r2, #0
 801049e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104b0:	3b01      	subs	r3, #1
 80104b2:	68f9      	ldr	r1, [r7, #12]
 80104b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80104b6:	fb01 f303 	mul.w	r3, r1, r3
 80104ba:	441a      	add	r2, r3
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	22ff      	movs	r2, #255	; 0xff
 80104c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	22ff      	movs	r2, #255	; 0xff
 80104cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d114      	bne.n	8010500 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	691b      	ldr	r3, [r3, #16]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d01a      	beq.n	8010514 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	3310      	adds	r3, #16
 80104e2:	4618      	mov	r0, r3
 80104e4:	f001 fd78 	bl	8011fd8 <xTaskRemoveFromEventList>
 80104e8:	4603      	mov	r3, r0
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d012      	beq.n	8010514 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80104ee:	4b0d      	ldr	r3, [pc, #52]	; (8010524 <xQueueGenericReset+0xcc>)
 80104f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104f4:	601a      	str	r2, [r3, #0]
 80104f6:	f3bf 8f4f 	dsb	sy
 80104fa:	f3bf 8f6f 	isb	sy
 80104fe:	e009      	b.n	8010514 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	3310      	adds	r3, #16
 8010504:	4618      	mov	r0, r3
 8010506:	f7ff fcd7 	bl	800feb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	3324      	adds	r3, #36	; 0x24
 801050e:	4618      	mov	r0, r3
 8010510:	f7ff fcd2 	bl	800feb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010514:	f7ff fed8 	bl	80102c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010518:	2301      	movs	r3, #1
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
 8010522:	bf00      	nop
 8010524:	e000ed04 	.word	0xe000ed04

08010528 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010528:	b580      	push	{r7, lr}
 801052a:	b08e      	sub	sp, #56	; 0x38
 801052c:	af02      	add	r7, sp, #8
 801052e:	60f8      	str	r0, [r7, #12]
 8010530:	60b9      	str	r1, [r7, #8]
 8010532:	607a      	str	r2, [r7, #4]
 8010534:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d109      	bne.n	8010550 <xQueueGenericCreateStatic+0x28>
 801053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010540:	f383 8811 	msr	BASEPRI, r3
 8010544:	f3bf 8f6f 	isb	sy
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	62bb      	str	r3, [r7, #40]	; 0x28
 801054e:	e7fe      	b.n	801054e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d109      	bne.n	801056a <xQueueGenericCreateStatic+0x42>
 8010556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801055a:	f383 8811 	msr	BASEPRI, r3
 801055e:	f3bf 8f6f 	isb	sy
 8010562:	f3bf 8f4f 	dsb	sy
 8010566:	627b      	str	r3, [r7, #36]	; 0x24
 8010568:	e7fe      	b.n	8010568 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d002      	beq.n	8010576 <xQueueGenericCreateStatic+0x4e>
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <xQueueGenericCreateStatic+0x52>
 8010576:	2301      	movs	r3, #1
 8010578:	e000      	b.n	801057c <xQueueGenericCreateStatic+0x54>
 801057a:	2300      	movs	r3, #0
 801057c:	2b00      	cmp	r3, #0
 801057e:	d109      	bne.n	8010594 <xQueueGenericCreateStatic+0x6c>
 8010580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010584:	f383 8811 	msr	BASEPRI, r3
 8010588:	f3bf 8f6f 	isb	sy
 801058c:	f3bf 8f4f 	dsb	sy
 8010590:	623b      	str	r3, [r7, #32]
 8010592:	e7fe      	b.n	8010592 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d102      	bne.n	80105a0 <xQueueGenericCreateStatic+0x78>
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d101      	bne.n	80105a4 <xQueueGenericCreateStatic+0x7c>
 80105a0:	2301      	movs	r3, #1
 80105a2:	e000      	b.n	80105a6 <xQueueGenericCreateStatic+0x7e>
 80105a4:	2300      	movs	r3, #0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d109      	bne.n	80105be <xQueueGenericCreateStatic+0x96>
 80105aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ae:	f383 8811 	msr	BASEPRI, r3
 80105b2:	f3bf 8f6f 	isb	sy
 80105b6:	f3bf 8f4f 	dsb	sy
 80105ba:	61fb      	str	r3, [r7, #28]
 80105bc:	e7fe      	b.n	80105bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80105be:	2350      	movs	r3, #80	; 0x50
 80105c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	2b50      	cmp	r3, #80	; 0x50
 80105c6:	d009      	beq.n	80105dc <xQueueGenericCreateStatic+0xb4>
 80105c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105cc:	f383 8811 	msr	BASEPRI, r3
 80105d0:	f3bf 8f6f 	isb	sy
 80105d4:	f3bf 8f4f 	dsb	sy
 80105d8:	61bb      	str	r3, [r7, #24]
 80105da:	e7fe      	b.n	80105da <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80105e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d00d      	beq.n	8010602 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80105e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e8:	2201      	movs	r2, #1
 80105ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80105ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80105f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f4:	9300      	str	r3, [sp, #0]
 80105f6:	4613      	mov	r3, r2
 80105f8:	687a      	ldr	r2, [r7, #4]
 80105fa:	68b9      	ldr	r1, [r7, #8]
 80105fc:	68f8      	ldr	r0, [r7, #12]
 80105fe:	f000 f842 	bl	8010686 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010604:	4618      	mov	r0, r3
 8010606:	3730      	adds	r7, #48	; 0x30
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}

0801060c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801060c:	b580      	push	{r7, lr}
 801060e:	b08a      	sub	sp, #40	; 0x28
 8010610:	af02      	add	r7, sp, #8
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	60b9      	str	r1, [r7, #8]
 8010616:	4613      	mov	r3, r2
 8010618:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d109      	bne.n	8010634 <xQueueGenericCreate+0x28>
 8010620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010624:	f383 8811 	msr	BASEPRI, r3
 8010628:	f3bf 8f6f 	isb	sy
 801062c:	f3bf 8f4f 	dsb	sy
 8010630:	613b      	str	r3, [r7, #16]
 8010632:	e7fe      	b.n	8010632 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d102      	bne.n	8010640 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801063a:	2300      	movs	r3, #0
 801063c:	61fb      	str	r3, [r7, #28]
 801063e:	e004      	b.n	801064a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	68ba      	ldr	r2, [r7, #8]
 8010644:	fb02 f303 	mul.w	r3, r2, r3
 8010648:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	3350      	adds	r3, #80	; 0x50
 801064e:	4618      	mov	r0, r3
 8010650:	f7ff fa56 	bl	800fb00 <pvPortMalloc>
 8010654:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d00f      	beq.n	801067c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 801065c:	69bb      	ldr	r3, [r7, #24]
 801065e:	3350      	adds	r3, #80	; 0x50
 8010660:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	2200      	movs	r2, #0
 8010666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801066a:	79fa      	ldrb	r2, [r7, #7]
 801066c:	69bb      	ldr	r3, [r7, #24]
 801066e:	9300      	str	r3, [sp, #0]
 8010670:	4613      	mov	r3, r2
 8010672:	697a      	ldr	r2, [r7, #20]
 8010674:	68b9      	ldr	r1, [r7, #8]
 8010676:	68f8      	ldr	r0, [r7, #12]
 8010678:	f000 f805 	bl	8010686 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801067c:	69bb      	ldr	r3, [r7, #24]
	}
 801067e:	4618      	mov	r0, r3
 8010680:	3720      	adds	r7, #32
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b084      	sub	sp, #16
 801068a:	af00      	add	r7, sp, #0
 801068c:	60f8      	str	r0, [r7, #12]
 801068e:	60b9      	str	r1, [r7, #8]
 8010690:	607a      	str	r2, [r7, #4]
 8010692:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d103      	bne.n	80106a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	69ba      	ldr	r2, [r7, #24]
 801069e:	601a      	str	r2, [r3, #0]
 80106a0:	e002      	b.n	80106a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80106a2:	69bb      	ldr	r3, [r7, #24]
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80106a8:	69bb      	ldr	r3, [r7, #24]
 80106aa:	68fa      	ldr	r2, [r7, #12]
 80106ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	68ba      	ldr	r2, [r7, #8]
 80106b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80106b4:	2101      	movs	r1, #1
 80106b6:	69b8      	ldr	r0, [r7, #24]
 80106b8:	f7ff fece 	bl	8010458 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	78fa      	ldrb	r2, [r7, #3]
 80106c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80106c4:	bf00      	nop
 80106c6:	3710      	adds	r7, #16
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00e      	beq.n	80106f8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2200      	movs	r2, #0
 80106de:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2200      	movs	r2, #0
 80106e4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2200      	movs	r2, #0
 80106ea:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80106ec:	2300      	movs	r3, #0
 80106ee:	2200      	movs	r2, #0
 80106f0:	2100      	movs	r1, #0
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f000 f906 	bl	8010904 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80106f8:	bf00      	nop
 80106fa:	3708      	adds	r7, #8
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010700:	b580      	push	{r7, lr}
 8010702:	b086      	sub	sp, #24
 8010704:	af00      	add	r7, sp, #0
 8010706:	4603      	mov	r3, r0
 8010708:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801070a:	2301      	movs	r3, #1
 801070c:	617b      	str	r3, [r7, #20]
 801070e:	2300      	movs	r3, #0
 8010710:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010712:	79fb      	ldrb	r3, [r7, #7]
 8010714:	461a      	mov	r2, r3
 8010716:	6939      	ldr	r1, [r7, #16]
 8010718:	6978      	ldr	r0, [r7, #20]
 801071a:	f7ff ff77 	bl	801060c <xQueueGenericCreate>
 801071e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8010720:	68f8      	ldr	r0, [r7, #12]
 8010722:	f7ff ffd3 	bl	80106cc <prvInitialiseMutex>

		return pxNewQueue;
 8010726:	68fb      	ldr	r3, [r7, #12]
	}
 8010728:	4618      	mov	r0, r3
 801072a:	3718      	adds	r7, #24
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010730:	b580      	push	{r7, lr}
 8010732:	b088      	sub	sp, #32
 8010734:	af02      	add	r7, sp, #8
 8010736:	4603      	mov	r3, r0
 8010738:	6039      	str	r1, [r7, #0]
 801073a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801073c:	2301      	movs	r3, #1
 801073e:	617b      	str	r3, [r7, #20]
 8010740:	2300      	movs	r3, #0
 8010742:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010744:	79fb      	ldrb	r3, [r7, #7]
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	2200      	movs	r2, #0
 801074c:	6939      	ldr	r1, [r7, #16]
 801074e:	6978      	ldr	r0, [r7, #20]
 8010750:	f7ff feea 	bl	8010528 <xQueueGenericCreateStatic>
 8010754:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f7ff ffb8 	bl	80106cc <prvInitialiseMutex>

		return pxNewQueue;
 801075c:	68fb      	ldr	r3, [r7, #12]
	}
 801075e:	4618      	mov	r0, r3
 8010760:	3718      	adds	r7, #24
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}

08010766 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8010766:	b590      	push	{r4, r7, lr}
 8010768:	b087      	sub	sp, #28
 801076a:	af00      	add	r7, sp, #0
 801076c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d109      	bne.n	801078c <xQueueGiveMutexRecursive+0x26>
 8010778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801077c:	f383 8811 	msr	BASEPRI, r3
 8010780:	f3bf 8f6f 	isb	sy
 8010784:	f3bf 8f4f 	dsb	sy
 8010788:	60fb      	str	r3, [r7, #12]
 801078a:	e7fe      	b.n	801078a <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	685c      	ldr	r4, [r3, #4]
 8010790:	f001 fe34 	bl	80123fc <xTaskGetCurrentTaskHandle>
 8010794:	4603      	mov	r3, r0
 8010796:	429c      	cmp	r4, r3
 8010798:	d111      	bne.n	80107be <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	1e5a      	subs	r2, r3, #1
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	68db      	ldr	r3, [r3, #12]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d105      	bne.n	80107b8 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80107ac:	2300      	movs	r3, #0
 80107ae:	2200      	movs	r2, #0
 80107b0:	2100      	movs	r1, #0
 80107b2:	6938      	ldr	r0, [r7, #16]
 80107b4:	f000 f8a6 	bl	8010904 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80107b8:	2301      	movs	r3, #1
 80107ba:	617b      	str	r3, [r7, #20]
 80107bc:	e001      	b.n	80107c2 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80107be:	2300      	movs	r3, #0
 80107c0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80107c2:	697b      	ldr	r3, [r7, #20]
	}
 80107c4:	4618      	mov	r0, r3
 80107c6:	371c      	adds	r7, #28
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd90      	pop	{r4, r7, pc}

080107cc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80107cc:	b590      	push	{r4, r7, lr}
 80107ce:	b087      	sub	sp, #28
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d109      	bne.n	80107f4 <xQueueTakeMutexRecursive+0x28>
 80107e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e4:	f383 8811 	msr	BASEPRI, r3
 80107e8:	f3bf 8f6f 	isb	sy
 80107ec:	f3bf 8f4f 	dsb	sy
 80107f0:	60fb      	str	r3, [r7, #12]
 80107f2:	e7fe      	b.n	80107f2 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	685c      	ldr	r4, [r3, #4]
 80107f8:	f001 fe00 	bl	80123fc <xTaskGetCurrentTaskHandle>
 80107fc:	4603      	mov	r3, r0
 80107fe:	429c      	cmp	r4, r3
 8010800:	d107      	bne.n	8010812 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	1c5a      	adds	r2, r3, #1
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801080c:	2301      	movs	r3, #1
 801080e:	617b      	str	r3, [r7, #20]
 8010810:	e00c      	b.n	801082c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010812:	6839      	ldr	r1, [r7, #0]
 8010814:	6938      	ldr	r0, [r7, #16]
 8010816:	f000 fb69 	bl	8010eec <xQueueSemaphoreTake>
 801081a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d004      	beq.n	801082c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	1c5a      	adds	r2, r3, #1
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801082c:	697b      	ldr	r3, [r7, #20]
	}
 801082e:	4618      	mov	r0, r3
 8010830:	371c      	adds	r7, #28
 8010832:	46bd      	mov	sp, r7
 8010834:	bd90      	pop	{r4, r7, pc}

08010836 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010836:	b580      	push	{r7, lr}
 8010838:	b08a      	sub	sp, #40	; 0x28
 801083a:	af02      	add	r7, sp, #8
 801083c:	60f8      	str	r0, [r7, #12]
 801083e:	60b9      	str	r1, [r7, #8]
 8010840:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d109      	bne.n	801085c <xQueueCreateCountingSemaphoreStatic+0x26>
 8010848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801084c:	f383 8811 	msr	BASEPRI, r3
 8010850:	f3bf 8f6f 	isb	sy
 8010854:	f3bf 8f4f 	dsb	sy
 8010858:	61bb      	str	r3, [r7, #24]
 801085a:	e7fe      	b.n	801085a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801085c:	68ba      	ldr	r2, [r7, #8]
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	429a      	cmp	r2, r3
 8010862:	d909      	bls.n	8010878 <xQueueCreateCountingSemaphoreStatic+0x42>
 8010864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010868:	f383 8811 	msr	BASEPRI, r3
 801086c:	f3bf 8f6f 	isb	sy
 8010870:	f3bf 8f4f 	dsb	sy
 8010874:	617b      	str	r3, [r7, #20]
 8010876:	e7fe      	b.n	8010876 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010878:	2302      	movs	r3, #2
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	2100      	movs	r1, #0
 8010882:	68f8      	ldr	r0, [r7, #12]
 8010884:	f7ff fe50 	bl	8010528 <xQueueGenericCreateStatic>
 8010888:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801088a:	69fb      	ldr	r3, [r7, #28]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d002      	beq.n	8010896 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	68ba      	ldr	r2, [r7, #8]
 8010894:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010896:	69fb      	ldr	r3, [r7, #28]
	}
 8010898:	4618      	mov	r0, r3
 801089a:	3720      	adds	r7, #32
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b086      	sub	sp, #24
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d109      	bne.n	80108c4 <xQueueCreateCountingSemaphore+0x24>
 80108b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b4:	f383 8811 	msr	BASEPRI, r3
 80108b8:	f3bf 8f6f 	isb	sy
 80108bc:	f3bf 8f4f 	dsb	sy
 80108c0:	613b      	str	r3, [r7, #16]
 80108c2:	e7fe      	b.n	80108c2 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80108c4:	683a      	ldr	r2, [r7, #0]
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d909      	bls.n	80108e0 <xQueueCreateCountingSemaphore+0x40>
 80108cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d0:	f383 8811 	msr	BASEPRI, r3
 80108d4:	f3bf 8f6f 	isb	sy
 80108d8:	f3bf 8f4f 	dsb	sy
 80108dc:	60fb      	str	r3, [r7, #12]
 80108de:	e7fe      	b.n	80108de <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80108e0:	2202      	movs	r2, #2
 80108e2:	2100      	movs	r1, #0
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7ff fe91 	bl	801060c <xQueueGenericCreate>
 80108ea:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d002      	beq.n	80108f8 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	683a      	ldr	r2, [r7, #0]
 80108f6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80108f8:	697b      	ldr	r3, [r7, #20]
	}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3718      	adds	r7, #24
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
	...

08010904 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b08e      	sub	sp, #56	; 0x38
 8010908:	af00      	add	r7, sp, #0
 801090a:	60f8      	str	r0, [r7, #12]
 801090c:	60b9      	str	r1, [r7, #8]
 801090e:	607a      	str	r2, [r7, #4]
 8010910:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010912:	2300      	movs	r3, #0
 8010914:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091c:	2b00      	cmp	r3, #0
 801091e:	d109      	bne.n	8010934 <xQueueGenericSend+0x30>
 8010920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010924:	f383 8811 	msr	BASEPRI, r3
 8010928:	f3bf 8f6f 	isb	sy
 801092c:	f3bf 8f4f 	dsb	sy
 8010930:	62bb      	str	r3, [r7, #40]	; 0x28
 8010932:	e7fe      	b.n	8010932 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d103      	bne.n	8010942 <xQueueGenericSend+0x3e>
 801093a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801093e:	2b00      	cmp	r3, #0
 8010940:	d101      	bne.n	8010946 <xQueueGenericSend+0x42>
 8010942:	2301      	movs	r3, #1
 8010944:	e000      	b.n	8010948 <xQueueGenericSend+0x44>
 8010946:	2300      	movs	r3, #0
 8010948:	2b00      	cmp	r3, #0
 801094a:	d109      	bne.n	8010960 <xQueueGenericSend+0x5c>
 801094c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010950:	f383 8811 	msr	BASEPRI, r3
 8010954:	f3bf 8f6f 	isb	sy
 8010958:	f3bf 8f4f 	dsb	sy
 801095c:	627b      	str	r3, [r7, #36]	; 0x24
 801095e:	e7fe      	b.n	801095e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	2b02      	cmp	r3, #2
 8010964:	d103      	bne.n	801096e <xQueueGenericSend+0x6a>
 8010966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801096a:	2b01      	cmp	r3, #1
 801096c:	d101      	bne.n	8010972 <xQueueGenericSend+0x6e>
 801096e:	2301      	movs	r3, #1
 8010970:	e000      	b.n	8010974 <xQueueGenericSend+0x70>
 8010972:	2300      	movs	r3, #0
 8010974:	2b00      	cmp	r3, #0
 8010976:	d109      	bne.n	801098c <xQueueGenericSend+0x88>
 8010978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097c:	f383 8811 	msr	BASEPRI, r3
 8010980:	f3bf 8f6f 	isb	sy
 8010984:	f3bf 8f4f 	dsb	sy
 8010988:	623b      	str	r3, [r7, #32]
 801098a:	e7fe      	b.n	801098a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801098c:	f001 fd46 	bl	801241c <xTaskGetSchedulerState>
 8010990:	4603      	mov	r3, r0
 8010992:	2b00      	cmp	r3, #0
 8010994:	d102      	bne.n	801099c <xQueueGenericSend+0x98>
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d101      	bne.n	80109a0 <xQueueGenericSend+0x9c>
 801099c:	2301      	movs	r3, #1
 801099e:	e000      	b.n	80109a2 <xQueueGenericSend+0x9e>
 80109a0:	2300      	movs	r3, #0
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d109      	bne.n	80109ba <xQueueGenericSend+0xb6>
 80109a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109aa:	f383 8811 	msr	BASEPRI, r3
 80109ae:	f3bf 8f6f 	isb	sy
 80109b2:	f3bf 8f4f 	dsb	sy
 80109b6:	61fb      	str	r3, [r7, #28]
 80109b8:	e7fe      	b.n	80109b8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80109ba:	f7ff fc57 	bl	801026c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80109be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d302      	bcc.n	80109d0 <xQueueGenericSend+0xcc>
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	2b02      	cmp	r3, #2
 80109ce:	d129      	bne.n	8010a24 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80109d0:	683a      	ldr	r2, [r7, #0]
 80109d2:	68b9      	ldr	r1, [r7, #8]
 80109d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109d6:	f000 fc80 	bl	80112da <prvCopyDataToQueue>
 80109da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d010      	beq.n	8010a06 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e6:	3324      	adds	r3, #36	; 0x24
 80109e8:	4618      	mov	r0, r3
 80109ea:	f001 faf5 	bl	8011fd8 <xTaskRemoveFromEventList>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d013      	beq.n	8010a1c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80109f4:	4b3f      	ldr	r3, [pc, #252]	; (8010af4 <xQueueGenericSend+0x1f0>)
 80109f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109fa:	601a      	str	r2, [r3, #0]
 80109fc:	f3bf 8f4f 	dsb	sy
 8010a00:	f3bf 8f6f 	isb	sy
 8010a04:	e00a      	b.n	8010a1c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d007      	beq.n	8010a1c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010a0c:	4b39      	ldr	r3, [pc, #228]	; (8010af4 <xQueueGenericSend+0x1f0>)
 8010a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a12:	601a      	str	r2, [r3, #0]
 8010a14:	f3bf 8f4f 	dsb	sy
 8010a18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010a1c:	f7ff fc54 	bl	80102c8 <vPortExitCritical>
				return pdPASS;
 8010a20:	2301      	movs	r3, #1
 8010a22:	e063      	b.n	8010aec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d103      	bne.n	8010a32 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010a2a:	f7ff fc4d 	bl	80102c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	e05c      	b.n	8010aec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d106      	bne.n	8010a46 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a38:	f107 0314 	add.w	r3, r7, #20
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f001 fb2f 	bl	80120a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a42:	2301      	movs	r3, #1
 8010a44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a46:	f7ff fc3f 	bl	80102c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a4a:	f001 f811 	bl	8011a70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a4e:	f7ff fc0d 	bl	801026c <vPortEnterCritical>
 8010a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a58:	b25b      	sxtb	r3, r3
 8010a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a5e:	d103      	bne.n	8010a68 <xQueueGenericSend+0x164>
 8010a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a62:	2200      	movs	r2, #0
 8010a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a6e:	b25b      	sxtb	r3, r3
 8010a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a74:	d103      	bne.n	8010a7e <xQueueGenericSend+0x17a>
 8010a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a78:	2200      	movs	r2, #0
 8010a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a7e:	f7ff fc23 	bl	80102c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a82:	1d3a      	adds	r2, r7, #4
 8010a84:	f107 0314 	add.w	r3, r7, #20
 8010a88:	4611      	mov	r1, r2
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f001 fb1e 	bl	80120cc <xTaskCheckForTimeOut>
 8010a90:	4603      	mov	r3, r0
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d124      	bne.n	8010ae0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010a96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a98:	f000 fd17 	bl	80114ca <prvIsQueueFull>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d018      	beq.n	8010ad4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa4:	3310      	adds	r3, #16
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	4611      	mov	r1, r2
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f001 fa46 	bl	8011f3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ab2:	f000 fca2 	bl	80113fa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010ab6:	f001 f821 	bl	8011afc <xTaskResumeAll>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	f47f af7c 	bne.w	80109ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010ac2:	4b0c      	ldr	r3, [pc, #48]	; (8010af4 <xQueueGenericSend+0x1f0>)
 8010ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ac8:	601a      	str	r2, [r3, #0]
 8010aca:	f3bf 8f4f 	dsb	sy
 8010ace:	f3bf 8f6f 	isb	sy
 8010ad2:	e772      	b.n	80109ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ad6:	f000 fc90 	bl	80113fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ada:	f001 f80f 	bl	8011afc <xTaskResumeAll>
 8010ade:	e76c      	b.n	80109ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ae2:	f000 fc8a 	bl	80113fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ae6:	f001 f809 	bl	8011afc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010aea:	2300      	movs	r3, #0
		}
	}
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3738      	adds	r7, #56	; 0x38
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	e000ed04 	.word	0xe000ed04

08010af8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b08e      	sub	sp, #56	; 0x38
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	607a      	str	r2, [r7, #4]
 8010b04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d109      	bne.n	8010b24 <xQueueGenericSendFromISR+0x2c>
 8010b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b14:	f383 8811 	msr	BASEPRI, r3
 8010b18:	f3bf 8f6f 	isb	sy
 8010b1c:	f3bf 8f4f 	dsb	sy
 8010b20:	627b      	str	r3, [r7, #36]	; 0x24
 8010b22:	e7fe      	b.n	8010b22 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d103      	bne.n	8010b32 <xQueueGenericSendFromISR+0x3a>
 8010b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d101      	bne.n	8010b36 <xQueueGenericSendFromISR+0x3e>
 8010b32:	2301      	movs	r3, #1
 8010b34:	e000      	b.n	8010b38 <xQueueGenericSendFromISR+0x40>
 8010b36:	2300      	movs	r3, #0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d109      	bne.n	8010b50 <xQueueGenericSendFromISR+0x58>
 8010b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b40:	f383 8811 	msr	BASEPRI, r3
 8010b44:	f3bf 8f6f 	isb	sy
 8010b48:	f3bf 8f4f 	dsb	sy
 8010b4c:	623b      	str	r3, [r7, #32]
 8010b4e:	e7fe      	b.n	8010b4e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	2b02      	cmp	r3, #2
 8010b54:	d103      	bne.n	8010b5e <xQueueGenericSendFromISR+0x66>
 8010b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b5a:	2b01      	cmp	r3, #1
 8010b5c:	d101      	bne.n	8010b62 <xQueueGenericSendFromISR+0x6a>
 8010b5e:	2301      	movs	r3, #1
 8010b60:	e000      	b.n	8010b64 <xQueueGenericSendFromISR+0x6c>
 8010b62:	2300      	movs	r3, #0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d109      	bne.n	8010b7c <xQueueGenericSendFromISR+0x84>
 8010b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b6c:	f383 8811 	msr	BASEPRI, r3
 8010b70:	f3bf 8f6f 	isb	sy
 8010b74:	f3bf 8f4f 	dsb	sy
 8010b78:	61fb      	str	r3, [r7, #28]
 8010b7a:	e7fe      	b.n	8010b7a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b7c:	f7ff fc2e 	bl	80103dc <vPortValidateInterruptPriority>
	__asm volatile
 8010b80:	f3ef 8211 	mrs	r2, BASEPRI
 8010b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b88:	f383 8811 	msr	BASEPRI, r3
 8010b8c:	f3bf 8f6f 	isb	sy
 8010b90:	f3bf 8f4f 	dsb	sy
 8010b94:	61ba      	str	r2, [r7, #24]
 8010b96:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010b98:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d302      	bcc.n	8010bae <xQueueGenericSendFromISR+0xb6>
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	2b02      	cmp	r3, #2
 8010bac:	d12c      	bne.n	8010c08 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010bb8:	683a      	ldr	r2, [r7, #0]
 8010bba:	68b9      	ldr	r1, [r7, #8]
 8010bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bbe:	f000 fb8c 	bl	80112da <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010bc2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bca:	d112      	bne.n	8010bf2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d016      	beq.n	8010c02 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd6:	3324      	adds	r3, #36	; 0x24
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f001 f9fd 	bl	8011fd8 <xTaskRemoveFromEventList>
 8010bde:	4603      	mov	r3, r0
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00e      	beq.n	8010c02 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d00b      	beq.n	8010c02 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2201      	movs	r2, #1
 8010bee:	601a      	str	r2, [r3, #0]
 8010bf0:	e007      	b.n	8010c02 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010bf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	b25a      	sxtb	r2, r3
 8010bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010c02:	2301      	movs	r3, #1
 8010c04:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010c06:	e001      	b.n	8010c0c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8010c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c0e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3738      	adds	r7, #56	; 0x38
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b08e      	sub	sp, #56	; 0x38
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d109      	bne.n	8010c48 <xQueueGiveFromISR+0x28>
	__asm volatile
 8010c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c38:	f383 8811 	msr	BASEPRI, r3
 8010c3c:	f3bf 8f6f 	isb	sy
 8010c40:	f3bf 8f4f 	dsb	sy
 8010c44:	623b      	str	r3, [r7, #32]
 8010c46:	e7fe      	b.n	8010c46 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d009      	beq.n	8010c64 <xQueueGiveFromISR+0x44>
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	61fb      	str	r3, [r7, #28]
 8010c62:	e7fe      	b.n	8010c62 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d103      	bne.n	8010c74 <xQueueGiveFromISR+0x54>
 8010c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d101      	bne.n	8010c78 <xQueueGiveFromISR+0x58>
 8010c74:	2301      	movs	r3, #1
 8010c76:	e000      	b.n	8010c7a <xQueueGiveFromISR+0x5a>
 8010c78:	2300      	movs	r3, #0
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d109      	bne.n	8010c92 <xQueueGiveFromISR+0x72>
 8010c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c82:	f383 8811 	msr	BASEPRI, r3
 8010c86:	f3bf 8f6f 	isb	sy
 8010c8a:	f3bf 8f4f 	dsb	sy
 8010c8e:	61bb      	str	r3, [r7, #24]
 8010c90:	e7fe      	b.n	8010c90 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c92:	f7ff fba3 	bl	80103dc <vPortValidateInterruptPriority>
	__asm volatile
 8010c96:	f3ef 8211 	mrs	r2, BASEPRI
 8010c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c9e:	f383 8811 	msr	BASEPRI, r3
 8010ca2:	f3bf 8f6f 	isb	sy
 8010ca6:	f3bf 8f4f 	dsb	sy
 8010caa:	617a      	str	r2, [r7, #20]
 8010cac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010cae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d22b      	bcs.n	8010d1a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cce:	1c5a      	adds	r2, r3, #1
 8010cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010cd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cdc:	d112      	bne.n	8010d04 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d016      	beq.n	8010d14 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	3324      	adds	r3, #36	; 0x24
 8010cea:	4618      	mov	r0, r3
 8010cec:	f001 f974 	bl	8011fd8 <xTaskRemoveFromEventList>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d00e      	beq.n	8010d14 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00b      	beq.n	8010d14 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	2201      	movs	r2, #1
 8010d00:	601a      	str	r2, [r3, #0]
 8010d02:	e007      	b.n	8010d14 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d08:	3301      	adds	r3, #1
 8010d0a:	b2db      	uxtb	r3, r3
 8010d0c:	b25a      	sxtb	r2, r3
 8010d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d14:	2301      	movs	r3, #1
 8010d16:	637b      	str	r3, [r7, #52]	; 0x34
 8010d18:	e001      	b.n	8010d1e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8010d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d20:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3738      	adds	r7, #56	; 0x38
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
	...

08010d34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b08c      	sub	sp, #48	; 0x30
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010d40:	2300      	movs	r3, #0
 8010d42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d109      	bne.n	8010d62 <xQueueReceive+0x2e>
	__asm volatile
 8010d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d52:	f383 8811 	msr	BASEPRI, r3
 8010d56:	f3bf 8f6f 	isb	sy
 8010d5a:	f3bf 8f4f 	dsb	sy
 8010d5e:	623b      	str	r3, [r7, #32]
 8010d60:	e7fe      	b.n	8010d60 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d103      	bne.n	8010d70 <xQueueReceive+0x3c>
 8010d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d101      	bne.n	8010d74 <xQueueReceive+0x40>
 8010d70:	2301      	movs	r3, #1
 8010d72:	e000      	b.n	8010d76 <xQueueReceive+0x42>
 8010d74:	2300      	movs	r3, #0
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d109      	bne.n	8010d8e <xQueueReceive+0x5a>
 8010d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d7e:	f383 8811 	msr	BASEPRI, r3
 8010d82:	f3bf 8f6f 	isb	sy
 8010d86:	f3bf 8f4f 	dsb	sy
 8010d8a:	61fb      	str	r3, [r7, #28]
 8010d8c:	e7fe      	b.n	8010d8c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d8e:	f001 fb45 	bl	801241c <xTaskGetSchedulerState>
 8010d92:	4603      	mov	r3, r0
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d102      	bne.n	8010d9e <xQueueReceive+0x6a>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d101      	bne.n	8010da2 <xQueueReceive+0x6e>
 8010d9e:	2301      	movs	r3, #1
 8010da0:	e000      	b.n	8010da4 <xQueueReceive+0x70>
 8010da2:	2300      	movs	r3, #0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d109      	bne.n	8010dbc <xQueueReceive+0x88>
 8010da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dac:	f383 8811 	msr	BASEPRI, r3
 8010db0:	f3bf 8f6f 	isb	sy
 8010db4:	f3bf 8f4f 	dsb	sy
 8010db8:	61bb      	str	r3, [r7, #24]
 8010dba:	e7fe      	b.n	8010dba <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010dbc:	f7ff fa56 	bl	801026c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dc4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d01f      	beq.n	8010e0c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010dcc:	68b9      	ldr	r1, [r7, #8]
 8010dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dd0:	f000 faed 	bl	80113ae <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd6:	1e5a      	subs	r2, r3, #1
 8010dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dda:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dde:	691b      	ldr	r3, [r3, #16]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d00f      	beq.n	8010e04 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de6:	3310      	adds	r3, #16
 8010de8:	4618      	mov	r0, r3
 8010dea:	f001 f8f5 	bl	8011fd8 <xTaskRemoveFromEventList>
 8010dee:	4603      	mov	r3, r0
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d007      	beq.n	8010e04 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010df4:	4b3c      	ldr	r3, [pc, #240]	; (8010ee8 <xQueueReceive+0x1b4>)
 8010df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dfa:	601a      	str	r2, [r3, #0]
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010e04:	f7ff fa60 	bl	80102c8 <vPortExitCritical>
				return pdPASS;
 8010e08:	2301      	movs	r3, #1
 8010e0a:	e069      	b.n	8010ee0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d103      	bne.n	8010e1a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010e12:	f7ff fa59 	bl	80102c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010e16:	2300      	movs	r3, #0
 8010e18:	e062      	b.n	8010ee0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d106      	bne.n	8010e2e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e20:	f107 0310 	add.w	r3, r7, #16
 8010e24:	4618      	mov	r0, r3
 8010e26:	f001 f93b 	bl	80120a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e2e:	f7ff fa4b 	bl	80102c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e32:	f000 fe1d 	bl	8011a70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e36:	f7ff fa19 	bl	801026c <vPortEnterCritical>
 8010e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e40:	b25b      	sxtb	r3, r3
 8010e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e46:	d103      	bne.n	8010e50 <xQueueReceive+0x11c>
 8010e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e56:	b25b      	sxtb	r3, r3
 8010e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e5c:	d103      	bne.n	8010e66 <xQueueReceive+0x132>
 8010e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e60:	2200      	movs	r2, #0
 8010e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e66:	f7ff fa2f 	bl	80102c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e6a:	1d3a      	adds	r2, r7, #4
 8010e6c:	f107 0310 	add.w	r3, r7, #16
 8010e70:	4611      	mov	r1, r2
 8010e72:	4618      	mov	r0, r3
 8010e74:	f001 f92a 	bl	80120cc <xTaskCheckForTimeOut>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d123      	bne.n	8010ec6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e80:	f000 fb0d 	bl	801149e <prvIsQueueEmpty>
 8010e84:	4603      	mov	r3, r0
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d017      	beq.n	8010eba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e8c:	3324      	adds	r3, #36	; 0x24
 8010e8e:	687a      	ldr	r2, [r7, #4]
 8010e90:	4611      	mov	r1, r2
 8010e92:	4618      	mov	r0, r3
 8010e94:	f001 f852 	bl	8011f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e9a:	f000 faae 	bl	80113fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e9e:	f000 fe2d 	bl	8011afc <xTaskResumeAll>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d189      	bne.n	8010dbc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010ea8:	4b0f      	ldr	r3, [pc, #60]	; (8010ee8 <xQueueReceive+0x1b4>)
 8010eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010eae:	601a      	str	r2, [r3, #0]
 8010eb0:	f3bf 8f4f 	dsb	sy
 8010eb4:	f3bf 8f6f 	isb	sy
 8010eb8:	e780      	b.n	8010dbc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ebc:	f000 fa9d 	bl	80113fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ec0:	f000 fe1c 	bl	8011afc <xTaskResumeAll>
 8010ec4:	e77a      	b.n	8010dbc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ec8:	f000 fa97 	bl	80113fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ecc:	f000 fe16 	bl	8011afc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ed2:	f000 fae4 	bl	801149e <prvIsQueueEmpty>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	f43f af6f 	beq.w	8010dbc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010ede:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3730      	adds	r7, #48	; 0x30
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	e000ed04 	.word	0xe000ed04

08010eec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b08e      	sub	sp, #56	; 0x38
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010efe:	2300      	movs	r3, #0
 8010f00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d109      	bne.n	8010f1c <xQueueSemaphoreTake+0x30>
 8010f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f0c:	f383 8811 	msr	BASEPRI, r3
 8010f10:	f3bf 8f6f 	isb	sy
 8010f14:	f3bf 8f4f 	dsb	sy
 8010f18:	623b      	str	r3, [r7, #32]
 8010f1a:	e7fe      	b.n	8010f1a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d009      	beq.n	8010f38 <xQueueSemaphoreTake+0x4c>
 8010f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f28:	f383 8811 	msr	BASEPRI, r3
 8010f2c:	f3bf 8f6f 	isb	sy
 8010f30:	f3bf 8f4f 	dsb	sy
 8010f34:	61fb      	str	r3, [r7, #28]
 8010f36:	e7fe      	b.n	8010f36 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f38:	f001 fa70 	bl	801241c <xTaskGetSchedulerState>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d102      	bne.n	8010f48 <xQueueSemaphoreTake+0x5c>
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d101      	bne.n	8010f4c <xQueueSemaphoreTake+0x60>
 8010f48:	2301      	movs	r3, #1
 8010f4a:	e000      	b.n	8010f4e <xQueueSemaphoreTake+0x62>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d109      	bne.n	8010f66 <xQueueSemaphoreTake+0x7a>
 8010f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f56:	f383 8811 	msr	BASEPRI, r3
 8010f5a:	f3bf 8f6f 	isb	sy
 8010f5e:	f3bf 8f4f 	dsb	sy
 8010f62:	61bb      	str	r3, [r7, #24]
 8010f64:	e7fe      	b.n	8010f64 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f66:	f7ff f981 	bl	801026c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f6e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d024      	beq.n	8010fc0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f78:	1e5a      	subs	r2, r3, #1
 8010f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d104      	bne.n	8010f90 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010f86:	f001 fbc5 	bl	8012714 <pvTaskIncrementMutexHeldCount>
 8010f8a:	4602      	mov	r2, r0
 8010f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f8e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f92:	691b      	ldr	r3, [r3, #16]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d00f      	beq.n	8010fb8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f9a:	3310      	adds	r3, #16
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f001 f81b 	bl	8011fd8 <xTaskRemoveFromEventList>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d007      	beq.n	8010fb8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010fa8:	4b53      	ldr	r3, [pc, #332]	; (80110f8 <xQueueSemaphoreTake+0x20c>)
 8010faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fae:	601a      	str	r2, [r3, #0]
 8010fb0:	f3bf 8f4f 	dsb	sy
 8010fb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010fb8:	f7ff f986 	bl	80102c8 <vPortExitCritical>
				return pdPASS;
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	e096      	b.n	80110ee <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d110      	bne.n	8010fe8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d009      	beq.n	8010fe0 <xQueueSemaphoreTake+0xf4>
 8010fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd0:	f383 8811 	msr	BASEPRI, r3
 8010fd4:	f3bf 8f6f 	isb	sy
 8010fd8:	f3bf 8f4f 	dsb	sy
 8010fdc:	617b      	str	r3, [r7, #20]
 8010fde:	e7fe      	b.n	8010fde <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010fe0:	f7ff f972 	bl	80102c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	e082      	b.n	80110ee <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d106      	bne.n	8010ffc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010fee:	f107 030c 	add.w	r3, r7, #12
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f001 f854 	bl	80120a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010ffc:	f7ff f964 	bl	80102c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011000:	f000 fd36 	bl	8011a70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011004:	f7ff f932 	bl	801026c <vPortEnterCritical>
 8011008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801100e:	b25b      	sxtb	r3, r3
 8011010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011014:	d103      	bne.n	801101e <xQueueSemaphoreTake+0x132>
 8011016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011018:	2200      	movs	r2, #0
 801101a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801101e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011024:	b25b      	sxtb	r3, r3
 8011026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801102a:	d103      	bne.n	8011034 <xQueueSemaphoreTake+0x148>
 801102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102e:	2200      	movs	r2, #0
 8011030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011034:	f7ff f948 	bl	80102c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011038:	463a      	mov	r2, r7
 801103a:	f107 030c 	add.w	r3, r7, #12
 801103e:	4611      	mov	r1, r2
 8011040:	4618      	mov	r0, r3
 8011042:	f001 f843 	bl	80120cc <xTaskCheckForTimeOut>
 8011046:	4603      	mov	r3, r0
 8011048:	2b00      	cmp	r3, #0
 801104a:	d132      	bne.n	80110b2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801104c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801104e:	f000 fa26 	bl	801149e <prvIsQueueEmpty>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d026      	beq.n	80110a6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d109      	bne.n	8011074 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011060:	f7ff f904 	bl	801026c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011066:	685b      	ldr	r3, [r3, #4]
 8011068:	4618      	mov	r0, r3
 801106a:	f001 f9f5 	bl	8012458 <xTaskPriorityInherit>
 801106e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011070:	f7ff f92a 	bl	80102c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011076:	3324      	adds	r3, #36	; 0x24
 8011078:	683a      	ldr	r2, [r7, #0]
 801107a:	4611      	mov	r1, r2
 801107c:	4618      	mov	r0, r3
 801107e:	f000 ff5d 	bl	8011f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011084:	f000 f9b9 	bl	80113fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011088:	f000 fd38 	bl	8011afc <xTaskResumeAll>
 801108c:	4603      	mov	r3, r0
 801108e:	2b00      	cmp	r3, #0
 8011090:	f47f af69 	bne.w	8010f66 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011094:	4b18      	ldr	r3, [pc, #96]	; (80110f8 <xQueueSemaphoreTake+0x20c>)
 8011096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801109a:	601a      	str	r2, [r3, #0]
 801109c:	f3bf 8f4f 	dsb	sy
 80110a0:	f3bf 8f6f 	isb	sy
 80110a4:	e75f      	b.n	8010f66 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80110a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110a8:	f000 f9a7 	bl	80113fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80110ac:	f000 fd26 	bl	8011afc <xTaskResumeAll>
 80110b0:	e759      	b.n	8010f66 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80110b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110b4:	f000 f9a1 	bl	80113fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80110b8:	f000 fd20 	bl	8011afc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110be:	f000 f9ee 	bl	801149e <prvIsQueueEmpty>
 80110c2:	4603      	mov	r3, r0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	f43f af4e 	beq.w	8010f66 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80110ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d00d      	beq.n	80110ec <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80110d0:	f7ff f8cc 	bl	801026c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80110d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110d6:	f000 f8e8 	bl	80112aa <prvGetDisinheritPriorityAfterTimeout>
 80110da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80110dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110e2:	4618      	mov	r0, r3
 80110e4:	f001 fa92 	bl	801260c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80110e8:	f7ff f8ee 	bl	80102c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80110ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3738      	adds	r7, #56	; 0x38
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
 80110f6:	bf00      	nop
 80110f8:	e000ed04 	.word	0xe000ed04

080110fc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b08e      	sub	sp, #56	; 0x38
 8011100:	af00      	add	r7, sp, #0
 8011102:	60f8      	str	r0, [r7, #12]
 8011104:	60b9      	str	r1, [r7, #8]
 8011106:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801110c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801110e:	2b00      	cmp	r3, #0
 8011110:	d109      	bne.n	8011126 <xQueueReceiveFromISR+0x2a>
 8011112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011116:	f383 8811 	msr	BASEPRI, r3
 801111a:	f3bf 8f6f 	isb	sy
 801111e:	f3bf 8f4f 	dsb	sy
 8011122:	623b      	str	r3, [r7, #32]
 8011124:	e7fe      	b.n	8011124 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d103      	bne.n	8011134 <xQueueReceiveFromISR+0x38>
 801112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011130:	2b00      	cmp	r3, #0
 8011132:	d101      	bne.n	8011138 <xQueueReceiveFromISR+0x3c>
 8011134:	2301      	movs	r3, #1
 8011136:	e000      	b.n	801113a <xQueueReceiveFromISR+0x3e>
 8011138:	2300      	movs	r3, #0
 801113a:	2b00      	cmp	r3, #0
 801113c:	d109      	bne.n	8011152 <xQueueReceiveFromISR+0x56>
 801113e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011142:	f383 8811 	msr	BASEPRI, r3
 8011146:	f3bf 8f6f 	isb	sy
 801114a:	f3bf 8f4f 	dsb	sy
 801114e:	61fb      	str	r3, [r7, #28]
 8011150:	e7fe      	b.n	8011150 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011152:	f7ff f943 	bl	80103dc <vPortValidateInterruptPriority>
	__asm volatile
 8011156:	f3ef 8211 	mrs	r2, BASEPRI
 801115a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801115e:	f383 8811 	msr	BASEPRI, r3
 8011162:	f3bf 8f6f 	isb	sy
 8011166:	f3bf 8f4f 	dsb	sy
 801116a:	61ba      	str	r2, [r7, #24]
 801116c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801116e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011170:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011176:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801117a:	2b00      	cmp	r3, #0
 801117c:	d02f      	beq.n	80111de <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801117e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011188:	68b9      	ldr	r1, [r7, #8]
 801118a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801118c:	f000 f90f 	bl	80113ae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011192:	1e5a      	subs	r2, r3, #1
 8011194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011196:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011198:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111a0:	d112      	bne.n	80111c8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a4:	691b      	ldr	r3, [r3, #16]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d016      	beq.n	80111d8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ac:	3310      	adds	r3, #16
 80111ae:	4618      	mov	r0, r3
 80111b0:	f000 ff12 	bl	8011fd8 <xTaskRemoveFromEventList>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d00e      	beq.n	80111d8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d00b      	beq.n	80111d8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2201      	movs	r2, #1
 80111c4:	601a      	str	r2, [r3, #0]
 80111c6:	e007      	b.n	80111d8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80111c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111cc:	3301      	adds	r3, #1
 80111ce:	b2db      	uxtb	r3, r3
 80111d0:	b25a      	sxtb	r2, r3
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80111d8:	2301      	movs	r3, #1
 80111da:	637b      	str	r3, [r7, #52]	; 0x34
 80111dc:	e001      	b.n	80111e2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80111de:	2300      	movs	r3, #0
 80111e0:	637b      	str	r3, [r7, #52]	; 0x34
 80111e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80111ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3738      	adds	r7, #56	; 0x38
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}

080111f6 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80111f6:	b580      	push	{r7, lr}
 80111f8:	b084      	sub	sp, #16
 80111fa:	af00      	add	r7, sp, #0
 80111fc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d109      	bne.n	8011218 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8011204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011208:	f383 8811 	msr	BASEPRI, r3
 801120c:	f3bf 8f6f 	isb	sy
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	60bb      	str	r3, [r7, #8]
 8011216:	e7fe      	b.n	8011216 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8011218:	f7ff f828 	bl	801026c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011220:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8011222:	f7ff f851 	bl	80102c8 <vPortExitCritical>

	return uxReturn;
 8011226:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8011228:	4618      	mov	r0, r3
 801122a:	3710      	adds	r7, #16
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}

08011230 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8011230:	b480      	push	{r7}
 8011232:	b085      	sub	sp, #20
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d109      	bne.n	8011252 <uxQueueMessagesWaitingFromISR+0x22>
 801123e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011242:	f383 8811 	msr	BASEPRI, r3
 8011246:	f3bf 8f6f 	isb	sy
 801124a:	f3bf 8f4f 	dsb	sy
 801124e:	60bb      	str	r3, [r7, #8]
 8011250:	e7fe      	b.n	8011250 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011256:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8011258:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801125a:	4618      	mov	r0, r3
 801125c:	3714      	adds	r7, #20
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr

08011266 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b084      	sub	sp, #16
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d109      	bne.n	801128c <vQueueDelete+0x26>
 8011278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127c:	f383 8811 	msr	BASEPRI, r3
 8011280:	f3bf 8f6f 	isb	sy
 8011284:	f3bf 8f4f 	dsb	sy
 8011288:	60bb      	str	r3, [r7, #8]
 801128a:	e7fe      	b.n	801128a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801128c:	68f8      	ldr	r0, [r7, #12]
 801128e:	f000 f95d 	bl	801154c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011298:	2b00      	cmp	r3, #0
 801129a:	d102      	bne.n	80112a2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 801129c:	68f8      	ldr	r0, [r7, #12]
 801129e:	f7fe fcf5 	bl	800fc8c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80112a2:	bf00      	nop
 80112a4:	3710      	adds	r7, #16
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}

080112aa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80112aa:	b480      	push	{r7}
 80112ac:	b085      	sub	sp, #20
 80112ae:	af00      	add	r7, sp, #0
 80112b0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d006      	beq.n	80112c8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80112c4:	60fb      	str	r3, [r7, #12]
 80112c6:	e001      	b.n	80112cc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80112c8:	2300      	movs	r3, #0
 80112ca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80112cc:	68fb      	ldr	r3, [r7, #12]
	}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3714      	adds	r7, #20
 80112d2:	46bd      	mov	sp, r7
 80112d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d8:	4770      	bx	lr

080112da <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80112da:	b580      	push	{r7, lr}
 80112dc:	b086      	sub	sp, #24
 80112de:	af00      	add	r7, sp, #0
 80112e0:	60f8      	str	r0, [r7, #12]
 80112e2:	60b9      	str	r1, [r7, #8]
 80112e4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80112e6:	2300      	movs	r3, #0
 80112e8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112ee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d10d      	bne.n	8011314 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d14d      	bne.n	801139c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	4618      	mov	r0, r3
 8011306:	f001 f915 	bl	8012534 <xTaskPriorityDisinherit>
 801130a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2200      	movs	r2, #0
 8011310:	605a      	str	r2, [r3, #4]
 8011312:	e043      	b.n	801139c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d119      	bne.n	801134e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	6898      	ldr	r0, [r3, #8]
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011322:	461a      	mov	r2, r3
 8011324:	68b9      	ldr	r1, [r7, #8]
 8011326:	f005 f9f9 	bl	801671c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	689a      	ldr	r2, [r3, #8]
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011332:	441a      	add	r2, r3
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	689a      	ldr	r2, [r3, #8]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	429a      	cmp	r2, r3
 8011342:	d32b      	bcc.n	801139c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681a      	ldr	r2, [r3, #0]
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	609a      	str	r2, [r3, #8]
 801134c:	e026      	b.n	801139c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	68d8      	ldr	r0, [r3, #12]
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011356:	461a      	mov	r2, r3
 8011358:	68b9      	ldr	r1, [r7, #8]
 801135a:	f005 f9df 	bl	801671c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	68da      	ldr	r2, [r3, #12]
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011366:	425b      	negs	r3, r3
 8011368:	441a      	add	r2, r3
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	68da      	ldr	r2, [r3, #12]
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	429a      	cmp	r2, r3
 8011378:	d207      	bcs.n	801138a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	685a      	ldr	r2, [r3, #4]
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011382:	425b      	negs	r3, r3
 8011384:	441a      	add	r2, r3
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2b02      	cmp	r3, #2
 801138e:	d105      	bne.n	801139c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d002      	beq.n	801139c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	3b01      	subs	r3, #1
 801139a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	1c5a      	adds	r2, r3, #1
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80113a4:	697b      	ldr	r3, [r7, #20]
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	3718      	adds	r7, #24
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}

080113ae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80113ae:	b580      	push	{r7, lr}
 80113b0:	b082      	sub	sp, #8
 80113b2:	af00      	add	r7, sp, #0
 80113b4:	6078      	str	r0, [r7, #4]
 80113b6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d018      	beq.n	80113f2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	68da      	ldr	r2, [r3, #12]
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113c8:	441a      	add	r2, r3
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	68da      	ldr	r2, [r3, #12]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d303      	bcc.n	80113e2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681a      	ldr	r2, [r3, #0]
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	68d9      	ldr	r1, [r3, #12]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ea:	461a      	mov	r2, r3
 80113ec:	6838      	ldr	r0, [r7, #0]
 80113ee:	f005 f995 	bl	801671c <memcpy>
	}
}
 80113f2:	bf00      	nop
 80113f4:	3708      	adds	r7, #8
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}

080113fa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80113fa:	b580      	push	{r7, lr}
 80113fc:	b084      	sub	sp, #16
 80113fe:	af00      	add	r7, sp, #0
 8011400:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011402:	f7fe ff33 	bl	801026c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801140c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801140e:	e011      	b.n	8011434 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011414:	2b00      	cmp	r3, #0
 8011416:	d012      	beq.n	801143e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	3324      	adds	r3, #36	; 0x24
 801141c:	4618      	mov	r0, r3
 801141e:	f000 fddb 	bl	8011fd8 <xTaskRemoveFromEventList>
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	d001      	beq.n	801142c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011428:	f000 feb0 	bl	801218c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801142c:	7bfb      	ldrb	r3, [r7, #15]
 801142e:	3b01      	subs	r3, #1
 8011430:	b2db      	uxtb	r3, r3
 8011432:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011438:	2b00      	cmp	r3, #0
 801143a:	dce9      	bgt.n	8011410 <prvUnlockQueue+0x16>
 801143c:	e000      	b.n	8011440 <prvUnlockQueue+0x46>
					break;
 801143e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	22ff      	movs	r2, #255	; 0xff
 8011444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011448:	f7fe ff3e 	bl	80102c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801144c:	f7fe ff0e 	bl	801026c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011456:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011458:	e011      	b.n	801147e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	691b      	ldr	r3, [r3, #16]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d012      	beq.n	8011488 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	3310      	adds	r3, #16
 8011466:	4618      	mov	r0, r3
 8011468:	f000 fdb6 	bl	8011fd8 <xTaskRemoveFromEventList>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	d001      	beq.n	8011476 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011472:	f000 fe8b 	bl	801218c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011476:	7bbb      	ldrb	r3, [r7, #14]
 8011478:	3b01      	subs	r3, #1
 801147a:	b2db      	uxtb	r3, r3
 801147c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801147e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011482:	2b00      	cmp	r3, #0
 8011484:	dce9      	bgt.n	801145a <prvUnlockQueue+0x60>
 8011486:	e000      	b.n	801148a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011488:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	22ff      	movs	r2, #255	; 0xff
 801148e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011492:	f7fe ff19 	bl	80102c8 <vPortExitCritical>
}
 8011496:	bf00      	nop
 8011498:	3710      	adds	r7, #16
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}

0801149e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801149e:	b580      	push	{r7, lr}
 80114a0:	b084      	sub	sp, #16
 80114a2:	af00      	add	r7, sp, #0
 80114a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80114a6:	f7fe fee1 	bl	801026c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d102      	bne.n	80114b8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80114b2:	2301      	movs	r3, #1
 80114b4:	60fb      	str	r3, [r7, #12]
 80114b6:	e001      	b.n	80114bc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80114b8:	2300      	movs	r3, #0
 80114ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80114bc:	f7fe ff04 	bl	80102c8 <vPortExitCritical>

	return xReturn;
 80114c0:	68fb      	ldr	r3, [r7, #12]
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3710      	adds	r7, #16
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b084      	sub	sp, #16
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80114d2:	f7fe fecb 	bl	801026c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114de:	429a      	cmp	r2, r3
 80114e0:	d102      	bne.n	80114e8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80114e2:	2301      	movs	r3, #1
 80114e4:	60fb      	str	r3, [r7, #12]
 80114e6:	e001      	b.n	80114ec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80114e8:	2300      	movs	r3, #0
 80114ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80114ec:	f7fe feec 	bl	80102c8 <vPortExitCritical>

	return xReturn;
 80114f0:	68fb      	ldr	r3, [r7, #12]
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3710      	adds	r7, #16
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}
	...

080114fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80114fc:	b480      	push	{r7}
 80114fe:	b085      	sub	sp, #20
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011506:	2300      	movs	r3, #0
 8011508:	60fb      	str	r3, [r7, #12]
 801150a:	e014      	b.n	8011536 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801150c:	4a0e      	ldr	r2, [pc, #56]	; (8011548 <vQueueAddToRegistry+0x4c>)
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d10b      	bne.n	8011530 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011518:	490b      	ldr	r1, [pc, #44]	; (8011548 <vQueueAddToRegistry+0x4c>)
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	683a      	ldr	r2, [r7, #0]
 801151e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011522:	4a09      	ldr	r2, [pc, #36]	; (8011548 <vQueueAddToRegistry+0x4c>)
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	00db      	lsls	r3, r3, #3
 8011528:	4413      	add	r3, r2
 801152a:	687a      	ldr	r2, [r7, #4]
 801152c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801152e:	e005      	b.n	801153c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	3301      	adds	r3, #1
 8011534:	60fb      	str	r3, [r7, #12]
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2b0b      	cmp	r3, #11
 801153a:	d9e7      	bls.n	801150c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801153c:	bf00      	nop
 801153e:	3714      	adds	r7, #20
 8011540:	46bd      	mov	sp, r7
 8011542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011546:	4770      	bx	lr
 8011548:	20028658 	.word	0x20028658

0801154c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801154c:	b480      	push	{r7}
 801154e:	b085      	sub	sp, #20
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011554:	2300      	movs	r3, #0
 8011556:	60fb      	str	r3, [r7, #12]
 8011558:	e016      	b.n	8011588 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801155a:	4a10      	ldr	r2, [pc, #64]	; (801159c <vQueueUnregisterQueue+0x50>)
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	00db      	lsls	r3, r3, #3
 8011560:	4413      	add	r3, r2
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	429a      	cmp	r2, r3
 8011568:	d10b      	bne.n	8011582 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801156a:	4a0c      	ldr	r2, [pc, #48]	; (801159c <vQueueUnregisterQueue+0x50>)
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	2100      	movs	r1, #0
 8011570:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011574:	4a09      	ldr	r2, [pc, #36]	; (801159c <vQueueUnregisterQueue+0x50>)
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	00db      	lsls	r3, r3, #3
 801157a:	4413      	add	r3, r2
 801157c:	2200      	movs	r2, #0
 801157e:	605a      	str	r2, [r3, #4]
				break;
 8011580:	e005      	b.n	801158e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	3301      	adds	r3, #1
 8011586:	60fb      	str	r3, [r7, #12]
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2b0b      	cmp	r3, #11
 801158c:	d9e5      	bls.n	801155a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801158e:	bf00      	nop
 8011590:	3714      	adds	r7, #20
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr
 801159a:	bf00      	nop
 801159c:	20028658 	.word	0x20028658

080115a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b086      	sub	sp, #24
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	60b9      	str	r1, [r7, #8]
 80115aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80115b0:	f7fe fe5c 	bl	801026c <vPortEnterCritical>
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115ba:	b25b      	sxtb	r3, r3
 80115bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115c0:	d103      	bne.n	80115ca <vQueueWaitForMessageRestricted+0x2a>
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	2200      	movs	r2, #0
 80115c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115d0:	b25b      	sxtb	r3, r3
 80115d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115d6:	d103      	bne.n	80115e0 <vQueueWaitForMessageRestricted+0x40>
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	2200      	movs	r2, #0
 80115dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115e0:	f7fe fe72 	bl	80102c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d106      	bne.n	80115fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	3324      	adds	r3, #36	; 0x24
 80115f0:	687a      	ldr	r2, [r7, #4]
 80115f2:	68b9      	ldr	r1, [r7, #8]
 80115f4:	4618      	mov	r0, r3
 80115f6:	f000 fcc5 	bl	8011f84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80115fa:	6978      	ldr	r0, [r7, #20]
 80115fc:	f7ff fefd 	bl	80113fa <prvUnlockQueue>
	}
 8011600:	bf00      	nop
 8011602:	3718      	adds	r7, #24
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011608:	b580      	push	{r7, lr}
 801160a:	b08e      	sub	sp, #56	; 0x38
 801160c:	af04      	add	r7, sp, #16
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	60b9      	str	r1, [r7, #8]
 8011612:	607a      	str	r2, [r7, #4]
 8011614:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011618:	2b00      	cmp	r3, #0
 801161a:	d109      	bne.n	8011630 <xTaskCreateStatic+0x28>
 801161c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011620:	f383 8811 	msr	BASEPRI, r3
 8011624:	f3bf 8f6f 	isb	sy
 8011628:	f3bf 8f4f 	dsb	sy
 801162c:	623b      	str	r3, [r7, #32]
 801162e:	e7fe      	b.n	801162e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011632:	2b00      	cmp	r3, #0
 8011634:	d109      	bne.n	801164a <xTaskCreateStatic+0x42>
 8011636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801163a:	f383 8811 	msr	BASEPRI, r3
 801163e:	f3bf 8f6f 	isb	sy
 8011642:	f3bf 8f4f 	dsb	sy
 8011646:	61fb      	str	r3, [r7, #28]
 8011648:	e7fe      	b.n	8011648 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801164a:	2364      	movs	r3, #100	; 0x64
 801164c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	2b64      	cmp	r3, #100	; 0x64
 8011652:	d009      	beq.n	8011668 <xTaskCreateStatic+0x60>
 8011654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011658:	f383 8811 	msr	BASEPRI, r3
 801165c:	f3bf 8f6f 	isb	sy
 8011660:	f3bf 8f4f 	dsb	sy
 8011664:	61bb      	str	r3, [r7, #24]
 8011666:	e7fe      	b.n	8011666 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166a:	2b00      	cmp	r3, #0
 801166c:	d01e      	beq.n	80116ac <xTaskCreateStatic+0xa4>
 801166e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011670:	2b00      	cmp	r3, #0
 8011672:	d01b      	beq.n	80116ac <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011676:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801167c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011680:	2202      	movs	r2, #2
 8011682:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011686:	2300      	movs	r3, #0
 8011688:	9303      	str	r3, [sp, #12]
 801168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168c:	9302      	str	r3, [sp, #8]
 801168e:	f107 0314 	add.w	r3, r7, #20
 8011692:	9301      	str	r3, [sp, #4]
 8011694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011696:	9300      	str	r3, [sp, #0]
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	68b9      	ldr	r1, [r7, #8]
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f000 f850 	bl	8011744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116a6:	f000 f8d9 	bl	801185c <prvAddNewTaskToReadyList>
 80116aa:	e001      	b.n	80116b0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80116ac:	2300      	movs	r3, #0
 80116ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80116b0:	697b      	ldr	r3, [r7, #20]
	}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3728      	adds	r7, #40	; 0x28
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}

080116ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80116ba:	b580      	push	{r7, lr}
 80116bc:	b08c      	sub	sp, #48	; 0x30
 80116be:	af04      	add	r7, sp, #16
 80116c0:	60f8      	str	r0, [r7, #12]
 80116c2:	60b9      	str	r1, [r7, #8]
 80116c4:	603b      	str	r3, [r7, #0]
 80116c6:	4613      	mov	r3, r2
 80116c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116ca:	88fb      	ldrh	r3, [r7, #6]
 80116cc:	009b      	lsls	r3, r3, #2
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7fe fa16 	bl	800fb00 <pvPortMalloc>
 80116d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d00e      	beq.n	80116fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80116dc:	2064      	movs	r0, #100	; 0x64
 80116de:	f7fe fa0f 	bl	800fb00 <pvPortMalloc>
 80116e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80116e4:	69fb      	ldr	r3, [r7, #28]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d003      	beq.n	80116f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80116ea:	69fb      	ldr	r3, [r7, #28]
 80116ec:	697a      	ldr	r2, [r7, #20]
 80116ee:	631a      	str	r2, [r3, #48]	; 0x30
 80116f0:	e005      	b.n	80116fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80116f2:	6978      	ldr	r0, [r7, #20]
 80116f4:	f7fe faca 	bl	800fc8c <vPortFree>
 80116f8:	e001      	b.n	80116fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80116fa:	2300      	movs	r3, #0
 80116fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80116fe:	69fb      	ldr	r3, [r7, #28]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d017      	beq.n	8011734 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	2200      	movs	r2, #0
 8011708:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801170c:	88fa      	ldrh	r2, [r7, #6]
 801170e:	2300      	movs	r3, #0
 8011710:	9303      	str	r3, [sp, #12]
 8011712:	69fb      	ldr	r3, [r7, #28]
 8011714:	9302      	str	r3, [sp, #8]
 8011716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011718:	9301      	str	r3, [sp, #4]
 801171a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801171c:	9300      	str	r3, [sp, #0]
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	68b9      	ldr	r1, [r7, #8]
 8011722:	68f8      	ldr	r0, [r7, #12]
 8011724:	f000 f80e 	bl	8011744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011728:	69f8      	ldr	r0, [r7, #28]
 801172a:	f000 f897 	bl	801185c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801172e:	2301      	movs	r3, #1
 8011730:	61bb      	str	r3, [r7, #24]
 8011732:	e002      	b.n	801173a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011734:	f04f 33ff 	mov.w	r3, #4294967295
 8011738:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801173a:	69bb      	ldr	r3, [r7, #24]
	}
 801173c:	4618      	mov	r0, r3
 801173e:	3720      	adds	r7, #32
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}

08011744 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b088      	sub	sp, #32
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	607a      	str	r2, [r7, #4]
 8011750:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011754:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	009b      	lsls	r3, r3, #2
 801175a:	461a      	mov	r2, r3
 801175c:	21a5      	movs	r1, #165	; 0xa5
 801175e:	f004 ffe8 	bl	8016732 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8011762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801176c:	3b01      	subs	r3, #1
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	4413      	add	r3, r2
 8011772:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011774:	69bb      	ldr	r3, [r7, #24]
 8011776:	f023 0307 	bic.w	r3, r3, #7
 801177a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801177c:	69bb      	ldr	r3, [r7, #24]
 801177e:	f003 0307 	and.w	r3, r3, #7
 8011782:	2b00      	cmp	r3, #0
 8011784:	d009      	beq.n	801179a <prvInitialiseNewTask+0x56>
 8011786:	f04f 0350 	mov.w	r3, #80	; 0x50
 801178a:	f383 8811 	msr	BASEPRI, r3
 801178e:	f3bf 8f6f 	isb	sy
 8011792:	f3bf 8f4f 	dsb	sy
 8011796:	617b      	str	r3, [r7, #20]
 8011798:	e7fe      	b.n	8011798 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 801179a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179c:	69ba      	ldr	r2, [r7, #24]
 801179e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117a0:	2300      	movs	r3, #0
 80117a2:	61fb      	str	r3, [r7, #28]
 80117a4:	e012      	b.n	80117cc <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117a6:	68ba      	ldr	r2, [r7, #8]
 80117a8:	69fb      	ldr	r3, [r7, #28]
 80117aa:	4413      	add	r3, r2
 80117ac:	7819      	ldrb	r1, [r3, #0]
 80117ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117b0:	69fb      	ldr	r3, [r7, #28]
 80117b2:	4413      	add	r3, r2
 80117b4:	3334      	adds	r3, #52	; 0x34
 80117b6:	460a      	mov	r2, r1
 80117b8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80117ba:	68ba      	ldr	r2, [r7, #8]
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	4413      	add	r3, r2
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d006      	beq.n	80117d4 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117c6:	69fb      	ldr	r3, [r7, #28]
 80117c8:	3301      	adds	r3, #1
 80117ca:	61fb      	str	r3, [r7, #28]
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	2b0f      	cmp	r3, #15
 80117d0:	d9e9      	bls.n	80117a6 <prvInitialiseNewTask+0x62>
 80117d2:	e000      	b.n	80117d6 <prvInitialiseNewTask+0x92>
		{
			break;
 80117d4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80117d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d8:	2200      	movs	r2, #0
 80117da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80117de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e0:	2b37      	cmp	r3, #55	; 0x37
 80117e2:	d901      	bls.n	80117e8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80117e4:	2337      	movs	r3, #55	; 0x37
 80117e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80117e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80117ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117f2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80117f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f6:	2200      	movs	r2, #0
 80117f8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80117fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fc:	3304      	adds	r3, #4
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fe fb7a 	bl	800fef8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011806:	3318      	adds	r3, #24
 8011808:	4618      	mov	r0, r3
 801180a:	f7fe fb75 	bl	800fef8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011812:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011816:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801181a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801181c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011822:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8011824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011826:	2200      	movs	r2, #0
 8011828:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801182a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182c:	2200      	movs	r2, #0
 801182e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011832:	2200      	movs	r2, #0
 8011834:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011838:	683a      	ldr	r2, [r7, #0]
 801183a:	68f9      	ldr	r1, [r7, #12]
 801183c:	69b8      	ldr	r0, [r7, #24]
 801183e:	f7fe fbef 	bl	8010020 <pxPortInitialiseStack>
 8011842:	4602      	mov	r2, r0
 8011844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011846:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8011848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801184a:	2b00      	cmp	r3, #0
 801184c:	d002      	beq.n	8011854 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011852:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011854:	bf00      	nop
 8011856:	3720      	adds	r7, #32
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b082      	sub	sp, #8
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011864:	f7fe fd02 	bl	801026c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011868:	4b2d      	ldr	r3, [pc, #180]	; (8011920 <prvAddNewTaskToReadyList+0xc4>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	3301      	adds	r3, #1
 801186e:	4a2c      	ldr	r2, [pc, #176]	; (8011920 <prvAddNewTaskToReadyList+0xc4>)
 8011870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011872:	4b2c      	ldr	r3, [pc, #176]	; (8011924 <prvAddNewTaskToReadyList+0xc8>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d109      	bne.n	801188e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801187a:	4a2a      	ldr	r2, [pc, #168]	; (8011924 <prvAddNewTaskToReadyList+0xc8>)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011880:	4b27      	ldr	r3, [pc, #156]	; (8011920 <prvAddNewTaskToReadyList+0xc4>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	2b01      	cmp	r3, #1
 8011886:	d110      	bne.n	80118aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011888:	f000 fcf8 	bl	801227c <prvInitialiseTaskLists>
 801188c:	e00d      	b.n	80118aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801188e:	4b26      	ldr	r3, [pc, #152]	; (8011928 <prvAddNewTaskToReadyList+0xcc>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d109      	bne.n	80118aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011896:	4b23      	ldr	r3, [pc, #140]	; (8011924 <prvAddNewTaskToReadyList+0xc8>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d802      	bhi.n	80118aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80118a4:	4a1f      	ldr	r2, [pc, #124]	; (8011924 <prvAddNewTaskToReadyList+0xc8>)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80118aa:	4b20      	ldr	r3, [pc, #128]	; (801192c <prvAddNewTaskToReadyList+0xd0>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	3301      	adds	r3, #1
 80118b0:	4a1e      	ldr	r2, [pc, #120]	; (801192c <prvAddNewTaskToReadyList+0xd0>)
 80118b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80118b4:	4b1d      	ldr	r3, [pc, #116]	; (801192c <prvAddNewTaskToReadyList+0xd0>)
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118c0:	4b1b      	ldr	r3, [pc, #108]	; (8011930 <prvAddNewTaskToReadyList+0xd4>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d903      	bls.n	80118d0 <prvAddNewTaskToReadyList+0x74>
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118cc:	4a18      	ldr	r2, [pc, #96]	; (8011930 <prvAddNewTaskToReadyList+0xd4>)
 80118ce:	6013      	str	r3, [r2, #0]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118d4:	4613      	mov	r3, r2
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	4413      	add	r3, r2
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	4a15      	ldr	r2, [pc, #84]	; (8011934 <prvAddNewTaskToReadyList+0xd8>)
 80118de:	441a      	add	r2, r3
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	3304      	adds	r3, #4
 80118e4:	4619      	mov	r1, r3
 80118e6:	4610      	mov	r0, r2
 80118e8:	f7fe fb13 	bl	800ff12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80118ec:	f7fe fcec 	bl	80102c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80118f0:	4b0d      	ldr	r3, [pc, #52]	; (8011928 <prvAddNewTaskToReadyList+0xcc>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d00e      	beq.n	8011916 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80118f8:	4b0a      	ldr	r3, [pc, #40]	; (8011924 <prvAddNewTaskToReadyList+0xc8>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011902:	429a      	cmp	r2, r3
 8011904:	d207      	bcs.n	8011916 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011906:	4b0c      	ldr	r3, [pc, #48]	; (8011938 <prvAddNewTaskToReadyList+0xdc>)
 8011908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801190c:	601a      	str	r2, [r3, #0]
 801190e:	f3bf 8f4f 	dsb	sy
 8011912:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011916:	bf00      	nop
 8011918:	3708      	adds	r7, #8
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
 801191e:	bf00      	nop
 8011920:	20027288 	.word	0x20027288
 8011924:	20026db4 	.word	0x20026db4
 8011928:	20027294 	.word	0x20027294
 801192c:	200272a4 	.word	0x200272a4
 8011930:	20027290 	.word	0x20027290
 8011934:	20026db8 	.word	0x20026db8
 8011938:	e000ed04 	.word	0xe000ed04

0801193c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801193c:	b580      	push	{r7, lr}
 801193e:	b084      	sub	sp, #16
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011944:	2300      	movs	r3, #0
 8011946:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d016      	beq.n	801197c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801194e:	4b13      	ldr	r3, [pc, #76]	; (801199c <vTaskDelay+0x60>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d009      	beq.n	801196a <vTaskDelay+0x2e>
 8011956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801195a:	f383 8811 	msr	BASEPRI, r3
 801195e:	f3bf 8f6f 	isb	sy
 8011962:	f3bf 8f4f 	dsb	sy
 8011966:	60bb      	str	r3, [r7, #8]
 8011968:	e7fe      	b.n	8011968 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801196a:	f000 f881 	bl	8011a70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801196e:	2100      	movs	r1, #0
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f001 f8a9 	bl	8012ac8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011976:	f000 f8c1 	bl	8011afc <xTaskResumeAll>
 801197a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d107      	bne.n	8011992 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8011982:	4b07      	ldr	r3, [pc, #28]	; (80119a0 <vTaskDelay+0x64>)
 8011984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011988:	601a      	str	r2, [r3, #0]
 801198a:	f3bf 8f4f 	dsb	sy
 801198e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011992:	bf00      	nop
 8011994:	3710      	adds	r7, #16
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	200272b0 	.word	0x200272b0
 80119a0:	e000ed04 	.word	0xe000ed04

080119a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b08a      	sub	sp, #40	; 0x28
 80119a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80119aa:	2300      	movs	r3, #0
 80119ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80119ae:	2300      	movs	r3, #0
 80119b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80119b2:	463a      	mov	r2, r7
 80119b4:	1d39      	adds	r1, r7, #4
 80119b6:	f107 0308 	add.w	r3, r7, #8
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7fe f86c 	bl	800fa98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80119c0:	6839      	ldr	r1, [r7, #0]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	68ba      	ldr	r2, [r7, #8]
 80119c6:	9202      	str	r2, [sp, #8]
 80119c8:	9301      	str	r3, [sp, #4]
 80119ca:	2300      	movs	r3, #0
 80119cc:	9300      	str	r3, [sp, #0]
 80119ce:	2300      	movs	r3, #0
 80119d0:	460a      	mov	r2, r1
 80119d2:	4921      	ldr	r1, [pc, #132]	; (8011a58 <vTaskStartScheduler+0xb4>)
 80119d4:	4821      	ldr	r0, [pc, #132]	; (8011a5c <vTaskStartScheduler+0xb8>)
 80119d6:	f7ff fe17 	bl	8011608 <xTaskCreateStatic>
 80119da:	4602      	mov	r2, r0
 80119dc:	4b20      	ldr	r3, [pc, #128]	; (8011a60 <vTaskStartScheduler+0xbc>)
 80119de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80119e0:	4b1f      	ldr	r3, [pc, #124]	; (8011a60 <vTaskStartScheduler+0xbc>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d002      	beq.n	80119ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80119e8:	2301      	movs	r3, #1
 80119ea:	617b      	str	r3, [r7, #20]
 80119ec:	e001      	b.n	80119f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80119ee:	2300      	movs	r3, #0
 80119f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	d102      	bne.n	80119fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80119f8:	f001 f8ba 	bl	8012b70 <xTimerCreateTimerTask>
 80119fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d117      	bne.n	8011a34 <vTaskStartScheduler+0x90>
 8011a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a08:	f383 8811 	msr	BASEPRI, r3
 8011a0c:	f3bf 8f6f 	isb	sy
 8011a10:	f3bf 8f4f 	dsb	sy
 8011a14:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011a16:	4b13      	ldr	r3, [pc, #76]	; (8011a64 <vTaskStartScheduler+0xc0>)
 8011a18:	f04f 32ff 	mov.w	r2, #4294967295
 8011a1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011a1e:	4b12      	ldr	r3, [pc, #72]	; (8011a68 <vTaskStartScheduler+0xc4>)
 8011a20:	2201      	movs	r2, #1
 8011a22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011a24:	4b11      	ldr	r3, [pc, #68]	; (8011a6c <vTaskStartScheduler+0xc8>)
 8011a26:	2200      	movs	r2, #0
 8011a28:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8011a2a:	f7ef fc00 	bl	800122e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011a2e:	f7fe fb7f 	bl	8010130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011a32:	e00d      	b.n	8011a50 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a3a:	d109      	bne.n	8011a50 <vTaskStartScheduler+0xac>
 8011a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a40:	f383 8811 	msr	BASEPRI, r3
 8011a44:	f3bf 8f6f 	isb	sy
 8011a48:	f3bf 8f4f 	dsb	sy
 8011a4c:	60fb      	str	r3, [r7, #12]
 8011a4e:	e7fe      	b.n	8011a4e <vTaskStartScheduler+0xaa>
}
 8011a50:	bf00      	nop
 8011a52:	3718      	adds	r7, #24
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}
 8011a58:	08017aac 	.word	0x08017aac
 8011a5c:	080121a5 	.word	0x080121a5
 8011a60:	200272ac 	.word	0x200272ac
 8011a64:	200272a8 	.word	0x200272a8
 8011a68:	20027294 	.word	0x20027294
 8011a6c:	2002728c 	.word	0x2002728c

08011a70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011a70:	b480      	push	{r7}
 8011a72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011a74:	4b04      	ldr	r3, [pc, #16]	; (8011a88 <vTaskSuspendAll+0x18>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	3301      	adds	r3, #1
 8011a7a:	4a03      	ldr	r2, [pc, #12]	; (8011a88 <vTaskSuspendAll+0x18>)
 8011a7c:	6013      	str	r3, [r2, #0]
}
 8011a7e:	bf00      	nop
 8011a80:	46bd      	mov	sp, r7
 8011a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a86:	4770      	bx	lr
 8011a88:	200272b0 	.word	0x200272b0

08011a8c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b083      	sub	sp, #12
 8011a90:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8011a92:	2300      	movs	r3, #0
 8011a94:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8011a96:	4b14      	ldr	r3, [pc, #80]	; (8011ae8 <prvGetExpectedIdleTime+0x5c>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d001      	beq.n	8011aa2 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8011aa2:	4b12      	ldr	r3, [pc, #72]	; (8011aec <prvGetExpectedIdleTime+0x60>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d002      	beq.n	8011ab2 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8011aac:	2300      	movs	r3, #0
 8011aae:	607b      	str	r3, [r7, #4]
 8011ab0:	e012      	b.n	8011ad8 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8011ab2:	4b0f      	ldr	r3, [pc, #60]	; (8011af0 <prvGetExpectedIdleTime+0x64>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d902      	bls.n	8011ac0 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8011aba:	2300      	movs	r3, #0
 8011abc:	607b      	str	r3, [r7, #4]
 8011abe:	e00b      	b.n	8011ad8 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d002      	beq.n	8011acc <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	607b      	str	r3, [r7, #4]
 8011aca:	e005      	b.n	8011ad8 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 8011acc:	4b09      	ldr	r3, [pc, #36]	; (8011af4 <prvGetExpectedIdleTime+0x68>)
 8011ace:	681a      	ldr	r2, [r3, #0]
 8011ad0:	4b09      	ldr	r3, [pc, #36]	; (8011af8 <prvGetExpectedIdleTime+0x6c>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	1ad3      	subs	r3, r2, r3
 8011ad6:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8011ad8:	687b      	ldr	r3, [r7, #4]
	}
 8011ada:	4618      	mov	r0, r3
 8011adc:	370c      	adds	r7, #12
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr
 8011ae6:	bf00      	nop
 8011ae8:	20027290 	.word	0x20027290
 8011aec:	20026db4 	.word	0x20026db4
 8011af0:	20026db8 	.word	0x20026db8
 8011af4:	200272a8 	.word	0x200272a8
 8011af8:	2002728c 	.word	0x2002728c

08011afc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011b02:	2300      	movs	r3, #0
 8011b04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011b06:	2300      	movs	r3, #0
 8011b08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011b0a:	4b41      	ldr	r3, [pc, #260]	; (8011c10 <xTaskResumeAll+0x114>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d109      	bne.n	8011b26 <xTaskResumeAll+0x2a>
 8011b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b16:	f383 8811 	msr	BASEPRI, r3
 8011b1a:	f3bf 8f6f 	isb	sy
 8011b1e:	f3bf 8f4f 	dsb	sy
 8011b22:	603b      	str	r3, [r7, #0]
 8011b24:	e7fe      	b.n	8011b24 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011b26:	f7fe fba1 	bl	801026c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011b2a:	4b39      	ldr	r3, [pc, #228]	; (8011c10 <xTaskResumeAll+0x114>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	3b01      	subs	r3, #1
 8011b30:	4a37      	ldr	r2, [pc, #220]	; (8011c10 <xTaskResumeAll+0x114>)
 8011b32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b34:	4b36      	ldr	r3, [pc, #216]	; (8011c10 <xTaskResumeAll+0x114>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d162      	bne.n	8011c02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011b3c:	4b35      	ldr	r3, [pc, #212]	; (8011c14 <xTaskResumeAll+0x118>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d05e      	beq.n	8011c02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b44:	e02f      	b.n	8011ba6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8011b46:	4b34      	ldr	r3, [pc, #208]	; (8011c18 <xTaskResumeAll+0x11c>)
 8011b48:	68db      	ldr	r3, [r3, #12]
 8011b4a:	68db      	ldr	r3, [r3, #12]
 8011b4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	3318      	adds	r3, #24
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7fe fa3a 	bl	800ffcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	3304      	adds	r3, #4
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f7fe fa35 	bl	800ffcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b66:	4b2d      	ldr	r3, [pc, #180]	; (8011c1c <xTaskResumeAll+0x120>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d903      	bls.n	8011b76 <xTaskResumeAll+0x7a>
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b72:	4a2a      	ldr	r2, [pc, #168]	; (8011c1c <xTaskResumeAll+0x120>)
 8011b74:	6013      	str	r3, [r2, #0]
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b7a:	4613      	mov	r3, r2
 8011b7c:	009b      	lsls	r3, r3, #2
 8011b7e:	4413      	add	r3, r2
 8011b80:	009b      	lsls	r3, r3, #2
 8011b82:	4a27      	ldr	r2, [pc, #156]	; (8011c20 <xTaskResumeAll+0x124>)
 8011b84:	441a      	add	r2, r3
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	3304      	adds	r3, #4
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	4610      	mov	r0, r2
 8011b8e:	f7fe f9c0 	bl	800ff12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b96:	4b23      	ldr	r3, [pc, #140]	; (8011c24 <xTaskResumeAll+0x128>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d302      	bcc.n	8011ba6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011ba0:	4b21      	ldr	r3, [pc, #132]	; (8011c28 <xTaskResumeAll+0x12c>)
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011ba6:	4b1c      	ldr	r3, [pc, #112]	; (8011c18 <xTaskResumeAll+0x11c>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d1cb      	bne.n	8011b46 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d001      	beq.n	8011bb8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011bb4:	f000 fbfc 	bl	80123b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011bb8:	4b1c      	ldr	r3, [pc, #112]	; (8011c2c <xTaskResumeAll+0x130>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d010      	beq.n	8011be6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011bc4:	f000 f86c 	bl	8011ca0 <xTaskIncrementTick>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d002      	beq.n	8011bd4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011bce:	4b16      	ldr	r3, [pc, #88]	; (8011c28 <xTaskResumeAll+0x12c>)
 8011bd0:	2201      	movs	r2, #1
 8011bd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	3b01      	subs	r3, #1
 8011bd8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d1f1      	bne.n	8011bc4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011be0:	4b12      	ldr	r3, [pc, #72]	; (8011c2c <xTaskResumeAll+0x130>)
 8011be2:	2200      	movs	r2, #0
 8011be4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011be6:	4b10      	ldr	r3, [pc, #64]	; (8011c28 <xTaskResumeAll+0x12c>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d009      	beq.n	8011c02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011bee:	2301      	movs	r3, #1
 8011bf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011bf2:	4b0f      	ldr	r3, [pc, #60]	; (8011c30 <xTaskResumeAll+0x134>)
 8011bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bf8:	601a      	str	r2, [r3, #0]
 8011bfa:	f3bf 8f4f 	dsb	sy
 8011bfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011c02:	f7fe fb61 	bl	80102c8 <vPortExitCritical>

	return xAlreadyYielded;
 8011c06:	68bb      	ldr	r3, [r7, #8]
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3710      	adds	r7, #16
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}
 8011c10:	200272b0 	.word	0x200272b0
 8011c14:	20027288 	.word	0x20027288
 8011c18:	20027248 	.word	0x20027248
 8011c1c:	20027290 	.word	0x20027290
 8011c20:	20026db8 	.word	0x20026db8
 8011c24:	20026db4 	.word	0x20026db4
 8011c28:	2002729c 	.word	0x2002729c
 8011c2c:	20027298 	.word	0x20027298
 8011c30:	e000ed04 	.word	0xe000ed04

08011c34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011c34:	b480      	push	{r7}
 8011c36:	b083      	sub	sp, #12
 8011c38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011c3a:	4b05      	ldr	r3, [pc, #20]	; (8011c50 <xTaskGetTickCount+0x1c>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011c40:	687b      	ldr	r3, [r7, #4]
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	370c      	adds	r7, #12
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr
 8011c4e:	bf00      	nop
 8011c50:	2002728c 	.word	0x2002728c

08011c54 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8011c54:	b480      	push	{r7}
 8011c56:	b085      	sub	sp, #20
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8011c5c:	4b0e      	ldr	r3, [pc, #56]	; (8011c98 <vTaskStepTick+0x44>)
 8011c5e:	681a      	ldr	r2, [r3, #0]
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	441a      	add	r2, r3
 8011c64:	4b0d      	ldr	r3, [pc, #52]	; (8011c9c <vTaskStepTick+0x48>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d909      	bls.n	8011c80 <vTaskStepTick+0x2c>
 8011c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c70:	f383 8811 	msr	BASEPRI, r3
 8011c74:	f3bf 8f6f 	isb	sy
 8011c78:	f3bf 8f4f 	dsb	sy
 8011c7c:	60fb      	str	r3, [r7, #12]
 8011c7e:	e7fe      	b.n	8011c7e <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 8011c80:	4b05      	ldr	r3, [pc, #20]	; (8011c98 <vTaskStepTick+0x44>)
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	4413      	add	r3, r2
 8011c88:	4a03      	ldr	r2, [pc, #12]	; (8011c98 <vTaskStepTick+0x44>)
 8011c8a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8011c8c:	bf00      	nop
 8011c8e:	3714      	adds	r7, #20
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr
 8011c98:	2002728c 	.word	0x2002728c
 8011c9c:	200272a8 	.word	0x200272a8

08011ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b086      	sub	sp, #24
 8011ca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011caa:	4b55      	ldr	r3, [pc, #340]	; (8011e00 <xTaskIncrementTick+0x160>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	f040 8093 	bne.w	8011dda <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011cb4:	4b53      	ldr	r3, [pc, #332]	; (8011e04 <xTaskIncrementTick+0x164>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	3301      	adds	r3, #1
 8011cba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011cbc:	4a51      	ldr	r2, [pc, #324]	; (8011e04 <xTaskIncrementTick+0x164>)
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d11f      	bne.n	8011d08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011cc8:	4b4f      	ldr	r3, [pc, #316]	; (8011e08 <xTaskIncrementTick+0x168>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d009      	beq.n	8011ce6 <xTaskIncrementTick+0x46>
 8011cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd6:	f383 8811 	msr	BASEPRI, r3
 8011cda:	f3bf 8f6f 	isb	sy
 8011cde:	f3bf 8f4f 	dsb	sy
 8011ce2:	603b      	str	r3, [r7, #0]
 8011ce4:	e7fe      	b.n	8011ce4 <xTaskIncrementTick+0x44>
 8011ce6:	4b48      	ldr	r3, [pc, #288]	; (8011e08 <xTaskIncrementTick+0x168>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	60fb      	str	r3, [r7, #12]
 8011cec:	4b47      	ldr	r3, [pc, #284]	; (8011e0c <xTaskIncrementTick+0x16c>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	4a45      	ldr	r2, [pc, #276]	; (8011e08 <xTaskIncrementTick+0x168>)
 8011cf2:	6013      	str	r3, [r2, #0]
 8011cf4:	4a45      	ldr	r2, [pc, #276]	; (8011e0c <xTaskIncrementTick+0x16c>)
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	6013      	str	r3, [r2, #0]
 8011cfa:	4b45      	ldr	r3, [pc, #276]	; (8011e10 <xTaskIncrementTick+0x170>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	3301      	adds	r3, #1
 8011d00:	4a43      	ldr	r2, [pc, #268]	; (8011e10 <xTaskIncrementTick+0x170>)
 8011d02:	6013      	str	r3, [r2, #0]
 8011d04:	f000 fb54 	bl	80123b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011d08:	4b42      	ldr	r3, [pc, #264]	; (8011e14 <xTaskIncrementTick+0x174>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	693a      	ldr	r2, [r7, #16]
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	d34e      	bcc.n	8011db0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d12:	4b3d      	ldr	r3, [pc, #244]	; (8011e08 <xTaskIncrementTick+0x168>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d101      	bne.n	8011d20 <xTaskIncrementTick+0x80>
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	e000      	b.n	8011d22 <xTaskIncrementTick+0x82>
 8011d20:	2300      	movs	r3, #0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d004      	beq.n	8011d30 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d26:	4b3b      	ldr	r3, [pc, #236]	; (8011e14 <xTaskIncrementTick+0x174>)
 8011d28:	f04f 32ff 	mov.w	r2, #4294967295
 8011d2c:	601a      	str	r2, [r3, #0]
					break;
 8011d2e:	e03f      	b.n	8011db0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011d30:	4b35      	ldr	r3, [pc, #212]	; (8011e08 <xTaskIncrementTick+0x168>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	685b      	ldr	r3, [r3, #4]
 8011d3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011d40:	693a      	ldr	r2, [r7, #16]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d203      	bcs.n	8011d50 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011d48:	4a32      	ldr	r2, [pc, #200]	; (8011e14 <xTaskIncrementTick+0x174>)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6013      	str	r3, [r2, #0]
						break;
 8011d4e:	e02f      	b.n	8011db0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	3304      	adds	r3, #4
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7fe f939 	bl	800ffcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d004      	beq.n	8011d6c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	3318      	adds	r3, #24
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7fe f930 	bl	800ffcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d70:	4b29      	ldr	r3, [pc, #164]	; (8011e18 <xTaskIncrementTick+0x178>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d903      	bls.n	8011d80 <xTaskIncrementTick+0xe0>
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d7c:	4a26      	ldr	r2, [pc, #152]	; (8011e18 <xTaskIncrementTick+0x178>)
 8011d7e:	6013      	str	r3, [r2, #0]
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d84:	4613      	mov	r3, r2
 8011d86:	009b      	lsls	r3, r3, #2
 8011d88:	4413      	add	r3, r2
 8011d8a:	009b      	lsls	r3, r3, #2
 8011d8c:	4a23      	ldr	r2, [pc, #140]	; (8011e1c <xTaskIncrementTick+0x17c>)
 8011d8e:	441a      	add	r2, r3
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	3304      	adds	r3, #4
 8011d94:	4619      	mov	r1, r3
 8011d96:	4610      	mov	r0, r2
 8011d98:	f7fe f8bb 	bl	800ff12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011da0:	4b1f      	ldr	r3, [pc, #124]	; (8011e20 <xTaskIncrementTick+0x180>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d3b3      	bcc.n	8011d12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011daa:	2301      	movs	r3, #1
 8011dac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dae:	e7b0      	b.n	8011d12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011db0:	4b1b      	ldr	r3, [pc, #108]	; (8011e20 <xTaskIncrementTick+0x180>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011db6:	4919      	ldr	r1, [pc, #100]	; (8011e1c <xTaskIncrementTick+0x17c>)
 8011db8:	4613      	mov	r3, r2
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	4413      	add	r3, r2
 8011dbe:	009b      	lsls	r3, r3, #2
 8011dc0:	440b      	add	r3, r1
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d901      	bls.n	8011dcc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8011dc8:	2301      	movs	r3, #1
 8011dca:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8011dcc:	4b15      	ldr	r3, [pc, #84]	; (8011e24 <xTaskIncrementTick+0x184>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d109      	bne.n	8011de8 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8011dd4:	f7ef fa39 	bl	800124a <vApplicationTickHook>
 8011dd8:	e006      	b.n	8011de8 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011dda:	4b12      	ldr	r3, [pc, #72]	; (8011e24 <xTaskIncrementTick+0x184>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	3301      	adds	r3, #1
 8011de0:	4a10      	ldr	r2, [pc, #64]	; (8011e24 <xTaskIncrementTick+0x184>)
 8011de2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8011de4:	f7ef fa31 	bl	800124a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011de8:	4b0f      	ldr	r3, [pc, #60]	; (8011e28 <xTaskIncrementTick+0x188>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d001      	beq.n	8011df4 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8011df0:	2301      	movs	r3, #1
 8011df2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011df4:	697b      	ldr	r3, [r7, #20]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3718      	adds	r7, #24
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	200272b0 	.word	0x200272b0
 8011e04:	2002728c 	.word	0x2002728c
 8011e08:	20027240 	.word	0x20027240
 8011e0c:	20027244 	.word	0x20027244
 8011e10:	200272a0 	.word	0x200272a0
 8011e14:	200272a8 	.word	0x200272a8
 8011e18:	20027290 	.word	0x20027290
 8011e1c:	20026db8 	.word	0x20026db8
 8011e20:	20026db4 	.word	0x20026db4
 8011e24:	20027298 	.word	0x20027298
 8011e28:	2002729c 	.word	0x2002729c

08011e2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b084      	sub	sp, #16
 8011e30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011e32:	4b3b      	ldr	r3, [pc, #236]	; (8011f20 <vTaskSwitchContext+0xf4>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d003      	beq.n	8011e42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011e3a:	4b3a      	ldr	r3, [pc, #232]	; (8011f24 <vTaskSwitchContext+0xf8>)
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011e40:	e06a      	b.n	8011f18 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 8011e42:	4b38      	ldr	r3, [pc, #224]	; (8011f24 <vTaskSwitchContext+0xf8>)
 8011e44:	2200      	movs	r2, #0
 8011e46:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8011e48:	f7ef f9f8 	bl	800123c <getRunTimeCounterValue>
 8011e4c:	4602      	mov	r2, r0
 8011e4e:	4b36      	ldr	r3, [pc, #216]	; (8011f28 <vTaskSwitchContext+0xfc>)
 8011e50:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8011e52:	4b35      	ldr	r3, [pc, #212]	; (8011f28 <vTaskSwitchContext+0xfc>)
 8011e54:	681a      	ldr	r2, [r3, #0]
 8011e56:	4b35      	ldr	r3, [pc, #212]	; (8011f2c <vTaskSwitchContext+0x100>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d909      	bls.n	8011e72 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8011e5e:	4b34      	ldr	r3, [pc, #208]	; (8011f30 <vTaskSwitchContext+0x104>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011e64:	4a30      	ldr	r2, [pc, #192]	; (8011f28 <vTaskSwitchContext+0xfc>)
 8011e66:	6810      	ldr	r0, [r2, #0]
 8011e68:	4a30      	ldr	r2, [pc, #192]	; (8011f2c <vTaskSwitchContext+0x100>)
 8011e6a:	6812      	ldr	r2, [r2, #0]
 8011e6c:	1a82      	subs	r2, r0, r2
 8011e6e:	440a      	add	r2, r1
 8011e70:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8011e72:	4b2d      	ldr	r3, [pc, #180]	; (8011f28 <vTaskSwitchContext+0xfc>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	4a2d      	ldr	r2, [pc, #180]	; (8011f2c <vTaskSwitchContext+0x100>)
 8011e78:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011e7a:	4b2d      	ldr	r3, [pc, #180]	; (8011f30 <vTaskSwitchContext+0x104>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	681a      	ldr	r2, [r3, #0]
 8011e80:	4b2b      	ldr	r3, [pc, #172]	; (8011f30 <vTaskSwitchContext+0x104>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d808      	bhi.n	8011e9c <vTaskSwitchContext+0x70>
 8011e8a:	4b29      	ldr	r3, [pc, #164]	; (8011f30 <vTaskSwitchContext+0x104>)
 8011e8c:	681a      	ldr	r2, [r3, #0]
 8011e8e:	4b28      	ldr	r3, [pc, #160]	; (8011f30 <vTaskSwitchContext+0x104>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	3334      	adds	r3, #52	; 0x34
 8011e94:	4619      	mov	r1, r3
 8011e96:	4610      	mov	r0, r2
 8011e98:	f7ef f9de 	bl	8001258 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011e9c:	4b25      	ldr	r3, [pc, #148]	; (8011f34 <vTaskSwitchContext+0x108>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	60fb      	str	r3, [r7, #12]
 8011ea2:	e00f      	b.n	8011ec4 <vTaskSwitchContext+0x98>
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d109      	bne.n	8011ebe <vTaskSwitchContext+0x92>
 8011eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eae:	f383 8811 	msr	BASEPRI, r3
 8011eb2:	f3bf 8f6f 	isb	sy
 8011eb6:	f3bf 8f4f 	dsb	sy
 8011eba:	607b      	str	r3, [r7, #4]
 8011ebc:	e7fe      	b.n	8011ebc <vTaskSwitchContext+0x90>
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	60fb      	str	r3, [r7, #12]
 8011ec4:	491c      	ldr	r1, [pc, #112]	; (8011f38 <vTaskSwitchContext+0x10c>)
 8011ec6:	68fa      	ldr	r2, [r7, #12]
 8011ec8:	4613      	mov	r3, r2
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	4413      	add	r3, r2
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	440b      	add	r3, r1
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d0e5      	beq.n	8011ea4 <vTaskSwitchContext+0x78>
 8011ed8:	68fa      	ldr	r2, [r7, #12]
 8011eda:	4613      	mov	r3, r2
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	4413      	add	r3, r2
 8011ee0:	009b      	lsls	r3, r3, #2
 8011ee2:	4a15      	ldr	r2, [pc, #84]	; (8011f38 <vTaskSwitchContext+0x10c>)
 8011ee4:	4413      	add	r3, r2
 8011ee6:	60bb      	str	r3, [r7, #8]
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	685a      	ldr	r2, [r3, #4]
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	605a      	str	r2, [r3, #4]
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	685a      	ldr	r2, [r3, #4]
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	3308      	adds	r3, #8
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d104      	bne.n	8011f08 <vTaskSwitchContext+0xdc>
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	685a      	ldr	r2, [r3, #4]
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	605a      	str	r2, [r3, #4]
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	685b      	ldr	r3, [r3, #4]
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	4a08      	ldr	r2, [pc, #32]	; (8011f30 <vTaskSwitchContext+0x104>)
 8011f10:	6013      	str	r3, [r2, #0]
 8011f12:	4a08      	ldr	r2, [pc, #32]	; (8011f34 <vTaskSwitchContext+0x108>)
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	6013      	str	r3, [r2, #0]
}
 8011f18:	bf00      	nop
 8011f1a:	3710      	adds	r7, #16
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	200272b0 	.word	0x200272b0
 8011f24:	2002729c 	.word	0x2002729c
 8011f28:	200272b8 	.word	0x200272b8
 8011f2c:	200272b4 	.word	0x200272b4
 8011f30:	20026db4 	.word	0x20026db4
 8011f34:	20027290 	.word	0x20027290
 8011f38:	20026db8 	.word	0x20026db8

08011f3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b084      	sub	sp, #16
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
 8011f44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d109      	bne.n	8011f60 <vTaskPlaceOnEventList+0x24>
 8011f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f50:	f383 8811 	msr	BASEPRI, r3
 8011f54:	f3bf 8f6f 	isb	sy
 8011f58:	f3bf 8f4f 	dsb	sy
 8011f5c:	60fb      	str	r3, [r7, #12]
 8011f5e:	e7fe      	b.n	8011f5e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011f60:	4b07      	ldr	r3, [pc, #28]	; (8011f80 <vTaskPlaceOnEventList+0x44>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	3318      	adds	r3, #24
 8011f66:	4619      	mov	r1, r3
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f7fd fff6 	bl	800ff5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011f6e:	2101      	movs	r1, #1
 8011f70:	6838      	ldr	r0, [r7, #0]
 8011f72:	f000 fda9 	bl	8012ac8 <prvAddCurrentTaskToDelayedList>
}
 8011f76:	bf00      	nop
 8011f78:	3710      	adds	r7, #16
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}
 8011f7e:	bf00      	nop
 8011f80:	20026db4 	.word	0x20026db4

08011f84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b086      	sub	sp, #24
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	60f8      	str	r0, [r7, #12]
 8011f8c:	60b9      	str	r1, [r7, #8]
 8011f8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d109      	bne.n	8011faa <vTaskPlaceOnEventListRestricted+0x26>
 8011f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9a:	f383 8811 	msr	BASEPRI, r3
 8011f9e:	f3bf 8f6f 	isb	sy
 8011fa2:	f3bf 8f4f 	dsb	sy
 8011fa6:	617b      	str	r3, [r7, #20]
 8011fa8:	e7fe      	b.n	8011fa8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011faa:	4b0a      	ldr	r3, [pc, #40]	; (8011fd4 <vTaskPlaceOnEventListRestricted+0x50>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	3318      	adds	r3, #24
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	68f8      	ldr	r0, [r7, #12]
 8011fb4:	f7fd ffad 	bl	800ff12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d002      	beq.n	8011fc4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8011fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8011fc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011fc4:	6879      	ldr	r1, [r7, #4]
 8011fc6:	68b8      	ldr	r0, [r7, #8]
 8011fc8:	f000 fd7e 	bl	8012ac8 <prvAddCurrentTaskToDelayedList>
	}
 8011fcc:	bf00      	nop
 8011fce:	3718      	adds	r7, #24
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}
 8011fd4:	20026db4 	.word	0x20026db4

08011fd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b086      	sub	sp, #24
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	68db      	ldr	r3, [r3, #12]
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d109      	bne.n	8012002 <xTaskRemoveFromEventList+0x2a>
 8011fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff2:	f383 8811 	msr	BASEPRI, r3
 8011ff6:	f3bf 8f6f 	isb	sy
 8011ffa:	f3bf 8f4f 	dsb	sy
 8011ffe:	60fb      	str	r3, [r7, #12]
 8012000:	e7fe      	b.n	8012000 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	3318      	adds	r3, #24
 8012006:	4618      	mov	r0, r3
 8012008:	f7fd ffe0 	bl	800ffcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801200c:	4b1e      	ldr	r3, [pc, #120]	; (8012088 <xTaskRemoveFromEventList+0xb0>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d11d      	bne.n	8012050 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	3304      	adds	r3, #4
 8012018:	4618      	mov	r0, r3
 801201a:	f7fd ffd7 	bl	800ffcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012022:	4b1a      	ldr	r3, [pc, #104]	; (801208c <xTaskRemoveFromEventList+0xb4>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	429a      	cmp	r2, r3
 8012028:	d903      	bls.n	8012032 <xTaskRemoveFromEventList+0x5a>
 801202a:	693b      	ldr	r3, [r7, #16]
 801202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801202e:	4a17      	ldr	r2, [pc, #92]	; (801208c <xTaskRemoveFromEventList+0xb4>)
 8012030:	6013      	str	r3, [r2, #0]
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012036:	4613      	mov	r3, r2
 8012038:	009b      	lsls	r3, r3, #2
 801203a:	4413      	add	r3, r2
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	4a14      	ldr	r2, [pc, #80]	; (8012090 <xTaskRemoveFromEventList+0xb8>)
 8012040:	441a      	add	r2, r3
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	3304      	adds	r3, #4
 8012046:	4619      	mov	r1, r3
 8012048:	4610      	mov	r0, r2
 801204a:	f7fd ff62 	bl	800ff12 <vListInsertEnd>
 801204e:	e005      	b.n	801205c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	3318      	adds	r3, #24
 8012054:	4619      	mov	r1, r3
 8012056:	480f      	ldr	r0, [pc, #60]	; (8012094 <xTaskRemoveFromEventList+0xbc>)
 8012058:	f7fd ff5b 	bl	800ff12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012060:	4b0d      	ldr	r3, [pc, #52]	; (8012098 <xTaskRemoveFromEventList+0xc0>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012066:	429a      	cmp	r2, r3
 8012068:	d905      	bls.n	8012076 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801206a:	2301      	movs	r3, #1
 801206c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801206e:	4b0b      	ldr	r3, [pc, #44]	; (801209c <xTaskRemoveFromEventList+0xc4>)
 8012070:	2201      	movs	r2, #1
 8012072:	601a      	str	r2, [r3, #0]
 8012074:	e001      	b.n	801207a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012076:	2300      	movs	r3, #0
 8012078:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 801207a:	f000 f999 	bl	80123b0 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 801207e:	697b      	ldr	r3, [r7, #20]
}
 8012080:	4618      	mov	r0, r3
 8012082:	3718      	adds	r7, #24
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}
 8012088:	200272b0 	.word	0x200272b0
 801208c:	20027290 	.word	0x20027290
 8012090:	20026db8 	.word	0x20026db8
 8012094:	20027248 	.word	0x20027248
 8012098:	20026db4 	.word	0x20026db4
 801209c:	2002729c 	.word	0x2002729c

080120a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80120a0:	b480      	push	{r7}
 80120a2:	b083      	sub	sp, #12
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80120a8:	4b06      	ldr	r3, [pc, #24]	; (80120c4 <vTaskInternalSetTimeOutState+0x24>)
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80120b0:	4b05      	ldr	r3, [pc, #20]	; (80120c8 <vTaskInternalSetTimeOutState+0x28>)
 80120b2:	681a      	ldr	r2, [r3, #0]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	605a      	str	r2, [r3, #4]
}
 80120b8:	bf00      	nop
 80120ba:	370c      	adds	r7, #12
 80120bc:	46bd      	mov	sp, r7
 80120be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c2:	4770      	bx	lr
 80120c4:	200272a0 	.word	0x200272a0
 80120c8:	2002728c 	.word	0x2002728c

080120cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b088      	sub	sp, #32
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d109      	bne.n	80120f0 <xTaskCheckForTimeOut+0x24>
 80120dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e0:	f383 8811 	msr	BASEPRI, r3
 80120e4:	f3bf 8f6f 	isb	sy
 80120e8:	f3bf 8f4f 	dsb	sy
 80120ec:	613b      	str	r3, [r7, #16]
 80120ee:	e7fe      	b.n	80120ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d109      	bne.n	801210a <xTaskCheckForTimeOut+0x3e>
 80120f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120fa:	f383 8811 	msr	BASEPRI, r3
 80120fe:	f3bf 8f6f 	isb	sy
 8012102:	f3bf 8f4f 	dsb	sy
 8012106:	60fb      	str	r3, [r7, #12]
 8012108:	e7fe      	b.n	8012108 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801210a:	f7fe f8af 	bl	801026c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801210e:	4b1d      	ldr	r3, [pc, #116]	; (8012184 <xTaskCheckForTimeOut+0xb8>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	69ba      	ldr	r2, [r7, #24]
 801211a:	1ad3      	subs	r3, r2, r3
 801211c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012126:	d102      	bne.n	801212e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012128:	2300      	movs	r3, #0
 801212a:	61fb      	str	r3, [r7, #28]
 801212c:	e023      	b.n	8012176 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	4b15      	ldr	r3, [pc, #84]	; (8012188 <xTaskCheckForTimeOut+0xbc>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	429a      	cmp	r2, r3
 8012138:	d007      	beq.n	801214a <xTaskCheckForTimeOut+0x7e>
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	69ba      	ldr	r2, [r7, #24]
 8012140:	429a      	cmp	r2, r3
 8012142:	d302      	bcc.n	801214a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012144:	2301      	movs	r3, #1
 8012146:	61fb      	str	r3, [r7, #28]
 8012148:	e015      	b.n	8012176 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	697a      	ldr	r2, [r7, #20]
 8012150:	429a      	cmp	r2, r3
 8012152:	d20b      	bcs.n	801216c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	681a      	ldr	r2, [r3, #0]
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	1ad2      	subs	r2, r2, r3
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ff ff9d 	bl	80120a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012166:	2300      	movs	r3, #0
 8012168:	61fb      	str	r3, [r7, #28]
 801216a:	e004      	b.n	8012176 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	2200      	movs	r2, #0
 8012170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012172:	2301      	movs	r3, #1
 8012174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012176:	f7fe f8a7 	bl	80102c8 <vPortExitCritical>

	return xReturn;
 801217a:	69fb      	ldr	r3, [r7, #28]
}
 801217c:	4618      	mov	r0, r3
 801217e:	3720      	adds	r7, #32
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	2002728c 	.word	0x2002728c
 8012188:	200272a0 	.word	0x200272a0

0801218c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801218c:	b480      	push	{r7}
 801218e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012190:	4b03      	ldr	r3, [pc, #12]	; (80121a0 <vTaskMissedYield+0x14>)
 8012192:	2201      	movs	r2, #1
 8012194:	601a      	str	r2, [r3, #0]
}
 8012196:	bf00      	nop
 8012198:	46bd      	mov	sp, r7
 801219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219e:	4770      	bx	lr
 80121a0:	2002729c 	.word	0x2002729c

080121a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b084      	sub	sp, #16
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80121ac:	f000 f8a6 	bl	80122fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80121b0:	4b17      	ldr	r3, [pc, #92]	; (8012210 <prvIdleTask+0x6c>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	2b01      	cmp	r3, #1
 80121b6:	d907      	bls.n	80121c8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80121b8:	4b16      	ldr	r3, [pc, #88]	; (8012214 <prvIdleTask+0x70>)
 80121ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121be:	601a      	str	r2, [r3, #0]
 80121c0:	f3bf 8f4f 	dsb	sy
 80121c4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80121c8:	f7ff fc60 	bl	8011a8c <prvGetExpectedIdleTime>
 80121cc:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d9eb      	bls.n	80121ac <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80121d4:	f7ff fc4c 	bl	8011a70 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80121d8:	4b0f      	ldr	r3, [pc, #60]	; (8012218 <prvIdleTask+0x74>)
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	4b0f      	ldr	r3, [pc, #60]	; (801221c <prvIdleTask+0x78>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	429a      	cmp	r2, r3
 80121e2:	d209      	bcs.n	80121f8 <prvIdleTask+0x54>
 80121e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e8:	f383 8811 	msr	BASEPRI, r3
 80121ec:	f3bf 8f6f 	isb	sy
 80121f0:	f3bf 8f4f 	dsb	sy
 80121f4:	60bb      	str	r3, [r7, #8]
 80121f6:	e7fe      	b.n	80121f6 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80121f8:	f7ff fc48 	bl	8011a8c <prvGetExpectedIdleTime>
 80121fc:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2b01      	cmp	r3, #1
 8012202:	d902      	bls.n	801220a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8012204:	68f8      	ldr	r0, [r7, #12]
 8012206:	f7f0 f867 	bl	80022d8 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801220a:	f7ff fc77 	bl	8011afc <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 801220e:	e7cd      	b.n	80121ac <prvIdleTask+0x8>
 8012210:	20026db8 	.word	0x20026db8
 8012214:	e000ed04 	.word	0xe000ed04
 8012218:	200272a8 	.word	0x200272a8
 801221c:	2002728c 	.word	0x2002728c

08012220 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8012226:	2301      	movs	r3, #1
 8012228:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 801222a:	2301      	movs	r3, #1
 801222c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 801222e:	4b0f      	ldr	r3, [pc, #60]	; (801226c <eTaskConfirmSleepModeStatus+0x4c>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d002      	beq.n	801223c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8012236:	2300      	movs	r3, #0
 8012238:	71fb      	strb	r3, [r7, #7]
 801223a:	e010      	b.n	801225e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 801223c:	4b0c      	ldr	r3, [pc, #48]	; (8012270 <eTaskConfirmSleepModeStatus+0x50>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d002      	beq.n	801224a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8012244:	2300      	movs	r3, #0
 8012246:	71fb      	strb	r3, [r7, #7]
 8012248:	e009      	b.n	801225e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 801224a:	4b0a      	ldr	r3, [pc, #40]	; (8012274 <eTaskConfirmSleepModeStatus+0x54>)
 801224c:	681a      	ldr	r2, [r3, #0]
 801224e:	4b0a      	ldr	r3, [pc, #40]	; (8012278 <eTaskConfirmSleepModeStatus+0x58>)
 8012250:	6819      	ldr	r1, [r3, #0]
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	1acb      	subs	r3, r1, r3
 8012256:	429a      	cmp	r2, r3
 8012258:	d101      	bne.n	801225e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 801225a:	2302      	movs	r3, #2
 801225c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 801225e:	79fb      	ldrb	r3, [r7, #7]
	}
 8012260:	4618      	mov	r0, r3
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr
 801226c:	20027248 	.word	0x20027248
 8012270:	2002729c 	.word	0x2002729c
 8012274:	20027274 	.word	0x20027274
 8012278:	20027288 	.word	0x20027288

0801227c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b082      	sub	sp, #8
 8012280:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012282:	2300      	movs	r3, #0
 8012284:	607b      	str	r3, [r7, #4]
 8012286:	e00c      	b.n	80122a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	4613      	mov	r3, r2
 801228c:	009b      	lsls	r3, r3, #2
 801228e:	4413      	add	r3, r2
 8012290:	009b      	lsls	r3, r3, #2
 8012292:	4a12      	ldr	r2, [pc, #72]	; (80122dc <prvInitialiseTaskLists+0x60>)
 8012294:	4413      	add	r3, r2
 8012296:	4618      	mov	r0, r3
 8012298:	f7fd fe0e 	bl	800feb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	3301      	adds	r3, #1
 80122a0:	607b      	str	r3, [r7, #4]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2b37      	cmp	r3, #55	; 0x37
 80122a6:	d9ef      	bls.n	8012288 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80122a8:	480d      	ldr	r0, [pc, #52]	; (80122e0 <prvInitialiseTaskLists+0x64>)
 80122aa:	f7fd fe05 	bl	800feb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80122ae:	480d      	ldr	r0, [pc, #52]	; (80122e4 <prvInitialiseTaskLists+0x68>)
 80122b0:	f7fd fe02 	bl	800feb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80122b4:	480c      	ldr	r0, [pc, #48]	; (80122e8 <prvInitialiseTaskLists+0x6c>)
 80122b6:	f7fd fdff 	bl	800feb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80122ba:	480c      	ldr	r0, [pc, #48]	; (80122ec <prvInitialiseTaskLists+0x70>)
 80122bc:	f7fd fdfc 	bl	800feb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80122c0:	480b      	ldr	r0, [pc, #44]	; (80122f0 <prvInitialiseTaskLists+0x74>)
 80122c2:	f7fd fdf9 	bl	800feb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80122c6:	4b0b      	ldr	r3, [pc, #44]	; (80122f4 <prvInitialiseTaskLists+0x78>)
 80122c8:	4a05      	ldr	r2, [pc, #20]	; (80122e0 <prvInitialiseTaskLists+0x64>)
 80122ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80122cc:	4b0a      	ldr	r3, [pc, #40]	; (80122f8 <prvInitialiseTaskLists+0x7c>)
 80122ce:	4a05      	ldr	r2, [pc, #20]	; (80122e4 <prvInitialiseTaskLists+0x68>)
 80122d0:	601a      	str	r2, [r3, #0]
}
 80122d2:	bf00      	nop
 80122d4:	3708      	adds	r7, #8
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	20026db8 	.word	0x20026db8
 80122e0:	20027218 	.word	0x20027218
 80122e4:	2002722c 	.word	0x2002722c
 80122e8:	20027248 	.word	0x20027248
 80122ec:	2002725c 	.word	0x2002725c
 80122f0:	20027274 	.word	0x20027274
 80122f4:	20027240 	.word	0x20027240
 80122f8:	20027244 	.word	0x20027244

080122fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b082      	sub	sp, #8
 8012300:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012302:	e019      	b.n	8012338 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012304:	f7fd ffb2 	bl	801026c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012308:	4b0f      	ldr	r3, [pc, #60]	; (8012348 <prvCheckTasksWaitingTermination+0x4c>)
 801230a:	68db      	ldr	r3, [r3, #12]
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	3304      	adds	r3, #4
 8012314:	4618      	mov	r0, r3
 8012316:	f7fd fe59 	bl	800ffcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801231a:	4b0c      	ldr	r3, [pc, #48]	; (801234c <prvCheckTasksWaitingTermination+0x50>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	3b01      	subs	r3, #1
 8012320:	4a0a      	ldr	r2, [pc, #40]	; (801234c <prvCheckTasksWaitingTermination+0x50>)
 8012322:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012324:	4b0a      	ldr	r3, [pc, #40]	; (8012350 <prvCheckTasksWaitingTermination+0x54>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	3b01      	subs	r3, #1
 801232a:	4a09      	ldr	r2, [pc, #36]	; (8012350 <prvCheckTasksWaitingTermination+0x54>)
 801232c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801232e:	f7fd ffcb 	bl	80102c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f000 f80e 	bl	8012354 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012338:	4b05      	ldr	r3, [pc, #20]	; (8012350 <prvCheckTasksWaitingTermination+0x54>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d1e1      	bne.n	8012304 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012340:	bf00      	nop
 8012342:	3708      	adds	r7, #8
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	2002725c 	.word	0x2002725c
 801234c:	20027288 	.word	0x20027288
 8012350:	20027270 	.word	0x20027270

08012354 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012354:	b580      	push	{r7, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8012362:	2b00      	cmp	r3, #0
 8012364:	d108      	bne.n	8012378 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801236a:	4618      	mov	r0, r3
 801236c:	f7fd fc8e 	bl	800fc8c <vPortFree>
				vPortFree( pxTCB );
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f7fd fc8b 	bl	800fc8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012376:	e017      	b.n	80123a8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 801237e:	2b01      	cmp	r3, #1
 8012380:	d103      	bne.n	801238a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f7fd fc82 	bl	800fc8c <vPortFree>
	}
 8012388:	e00e      	b.n	80123a8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8012390:	2b02      	cmp	r3, #2
 8012392:	d009      	beq.n	80123a8 <prvDeleteTCB+0x54>
 8012394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012398:	f383 8811 	msr	BASEPRI, r3
 801239c:	f3bf 8f6f 	isb	sy
 80123a0:	f3bf 8f4f 	dsb	sy
 80123a4:	60fb      	str	r3, [r7, #12]
 80123a6:	e7fe      	b.n	80123a6 <prvDeleteTCB+0x52>
	}
 80123a8:	bf00      	nop
 80123aa:	3710      	adds	r7, #16
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80123b0:	b480      	push	{r7}
 80123b2:	b083      	sub	sp, #12
 80123b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123b6:	4b0f      	ldr	r3, [pc, #60]	; (80123f4 <prvResetNextTaskUnblockTime+0x44>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d101      	bne.n	80123c4 <prvResetNextTaskUnblockTime+0x14>
 80123c0:	2301      	movs	r3, #1
 80123c2:	e000      	b.n	80123c6 <prvResetNextTaskUnblockTime+0x16>
 80123c4:	2300      	movs	r3, #0
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d004      	beq.n	80123d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80123ca:	4b0b      	ldr	r3, [pc, #44]	; (80123f8 <prvResetNextTaskUnblockTime+0x48>)
 80123cc:	f04f 32ff 	mov.w	r2, #4294967295
 80123d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80123d2:	e008      	b.n	80123e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80123d4:	4b07      	ldr	r3, [pc, #28]	; (80123f4 <prvResetNextTaskUnblockTime+0x44>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	68db      	ldr	r3, [r3, #12]
 80123da:	68db      	ldr	r3, [r3, #12]
 80123dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	685b      	ldr	r3, [r3, #4]
 80123e2:	4a05      	ldr	r2, [pc, #20]	; (80123f8 <prvResetNextTaskUnblockTime+0x48>)
 80123e4:	6013      	str	r3, [r2, #0]
}
 80123e6:	bf00      	nop
 80123e8:	370c      	adds	r7, #12
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr
 80123f2:	bf00      	nop
 80123f4:	20027240 	.word	0x20027240
 80123f8:	200272a8 	.word	0x200272a8

080123fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80123fc:	b480      	push	{r7}
 80123fe:	b083      	sub	sp, #12
 8012400:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8012402:	4b05      	ldr	r3, [pc, #20]	; (8012418 <xTaskGetCurrentTaskHandle+0x1c>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012408:	687b      	ldr	r3, [r7, #4]
	}
 801240a:	4618      	mov	r0, r3
 801240c:	370c      	adds	r7, #12
 801240e:	46bd      	mov	sp, r7
 8012410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012414:	4770      	bx	lr
 8012416:	bf00      	nop
 8012418:	20026db4 	.word	0x20026db4

0801241c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801241c:	b480      	push	{r7}
 801241e:	b083      	sub	sp, #12
 8012420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012422:	4b0b      	ldr	r3, [pc, #44]	; (8012450 <xTaskGetSchedulerState+0x34>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d102      	bne.n	8012430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801242a:	2301      	movs	r3, #1
 801242c:	607b      	str	r3, [r7, #4]
 801242e:	e008      	b.n	8012442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012430:	4b08      	ldr	r3, [pc, #32]	; (8012454 <xTaskGetSchedulerState+0x38>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d102      	bne.n	801243e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012438:	2302      	movs	r3, #2
 801243a:	607b      	str	r3, [r7, #4]
 801243c:	e001      	b.n	8012442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801243e:	2300      	movs	r3, #0
 8012440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012442:	687b      	ldr	r3, [r7, #4]
	}
 8012444:	4618      	mov	r0, r3
 8012446:	370c      	adds	r7, #12
 8012448:	46bd      	mov	sp, r7
 801244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244e:	4770      	bx	lr
 8012450:	20027294 	.word	0x20027294
 8012454:	200272b0 	.word	0x200272b0

08012458 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012458:	b580      	push	{r7, lr}
 801245a:	b084      	sub	sp, #16
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012464:	2300      	movs	r3, #0
 8012466:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d056      	beq.n	801251c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012472:	4b2d      	ldr	r3, [pc, #180]	; (8012528 <xTaskPriorityInherit+0xd0>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012478:	429a      	cmp	r2, r3
 801247a:	d246      	bcs.n	801250a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	699b      	ldr	r3, [r3, #24]
 8012480:	2b00      	cmp	r3, #0
 8012482:	db06      	blt.n	8012492 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012484:	4b28      	ldr	r3, [pc, #160]	; (8012528 <xTaskPriorityInherit+0xd0>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801248a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	6959      	ldr	r1, [r3, #20]
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801249a:	4613      	mov	r3, r2
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	4413      	add	r3, r2
 80124a0:	009b      	lsls	r3, r3, #2
 80124a2:	4a22      	ldr	r2, [pc, #136]	; (801252c <xTaskPriorityInherit+0xd4>)
 80124a4:	4413      	add	r3, r2
 80124a6:	4299      	cmp	r1, r3
 80124a8:	d101      	bne.n	80124ae <xTaskPriorityInherit+0x56>
 80124aa:	2301      	movs	r3, #1
 80124ac:	e000      	b.n	80124b0 <xTaskPriorityInherit+0x58>
 80124ae:	2300      	movs	r3, #0
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d022      	beq.n	80124fa <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	3304      	adds	r3, #4
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7fd fd87 	bl	800ffcc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80124be:	4b1a      	ldr	r3, [pc, #104]	; (8012528 <xTaskPriorityInherit+0xd0>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124cc:	4b18      	ldr	r3, [pc, #96]	; (8012530 <xTaskPriorityInherit+0xd8>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d903      	bls.n	80124dc <xTaskPriorityInherit+0x84>
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d8:	4a15      	ldr	r2, [pc, #84]	; (8012530 <xTaskPriorityInherit+0xd8>)
 80124da:	6013      	str	r3, [r2, #0]
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124e0:	4613      	mov	r3, r2
 80124e2:	009b      	lsls	r3, r3, #2
 80124e4:	4413      	add	r3, r2
 80124e6:	009b      	lsls	r3, r3, #2
 80124e8:	4a10      	ldr	r2, [pc, #64]	; (801252c <xTaskPriorityInherit+0xd4>)
 80124ea:	441a      	add	r2, r3
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	3304      	adds	r3, #4
 80124f0:	4619      	mov	r1, r3
 80124f2:	4610      	mov	r0, r2
 80124f4:	f7fd fd0d 	bl	800ff12 <vListInsertEnd>
 80124f8:	e004      	b.n	8012504 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80124fa:	4b0b      	ldr	r3, [pc, #44]	; (8012528 <xTaskPriorityInherit+0xd0>)
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012504:	2301      	movs	r3, #1
 8012506:	60fb      	str	r3, [r7, #12]
 8012508:	e008      	b.n	801251c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801250e:	4b06      	ldr	r3, [pc, #24]	; (8012528 <xTaskPriorityInherit+0xd0>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012514:	429a      	cmp	r2, r3
 8012516:	d201      	bcs.n	801251c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012518:	2301      	movs	r3, #1
 801251a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801251c:	68fb      	ldr	r3, [r7, #12]
	}
 801251e:	4618      	mov	r0, r3
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	20026db4 	.word	0x20026db4
 801252c:	20026db8 	.word	0x20026db8
 8012530:	20027290 	.word	0x20027290

08012534 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012534:	b580      	push	{r7, lr}
 8012536:	b086      	sub	sp, #24
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012540:	2300      	movs	r3, #0
 8012542:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d054      	beq.n	80125f4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801254a:	4b2d      	ldr	r3, [pc, #180]	; (8012600 <xTaskPriorityDisinherit+0xcc>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	693a      	ldr	r2, [r7, #16]
 8012550:	429a      	cmp	r2, r3
 8012552:	d009      	beq.n	8012568 <xTaskPriorityDisinherit+0x34>
 8012554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012558:	f383 8811 	msr	BASEPRI, r3
 801255c:	f3bf 8f6f 	isb	sy
 8012560:	f3bf 8f4f 	dsb	sy
 8012564:	60fb      	str	r3, [r7, #12]
 8012566:	e7fe      	b.n	8012566 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801256c:	2b00      	cmp	r3, #0
 801256e:	d109      	bne.n	8012584 <xTaskPriorityDisinherit+0x50>
 8012570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012574:	f383 8811 	msr	BASEPRI, r3
 8012578:	f3bf 8f6f 	isb	sy
 801257c:	f3bf 8f4f 	dsb	sy
 8012580:	60bb      	str	r3, [r7, #8]
 8012582:	e7fe      	b.n	8012582 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012588:	1e5a      	subs	r2, r3, #1
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012596:	429a      	cmp	r2, r3
 8012598:	d02c      	beq.n	80125f4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d128      	bne.n	80125f4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	3304      	adds	r3, #4
 80125a6:	4618      	mov	r0, r3
 80125a8:	f7fd fd10 	bl	800ffcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125c4:	4b0f      	ldr	r3, [pc, #60]	; (8012604 <xTaskPriorityDisinherit+0xd0>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d903      	bls.n	80125d4 <xTaskPriorityDisinherit+0xa0>
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125d0:	4a0c      	ldr	r2, [pc, #48]	; (8012604 <xTaskPriorityDisinherit+0xd0>)
 80125d2:	6013      	str	r3, [r2, #0]
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125d8:	4613      	mov	r3, r2
 80125da:	009b      	lsls	r3, r3, #2
 80125dc:	4413      	add	r3, r2
 80125de:	009b      	lsls	r3, r3, #2
 80125e0:	4a09      	ldr	r2, [pc, #36]	; (8012608 <xTaskPriorityDisinherit+0xd4>)
 80125e2:	441a      	add	r2, r3
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	3304      	adds	r3, #4
 80125e8:	4619      	mov	r1, r3
 80125ea:	4610      	mov	r0, r2
 80125ec:	f7fd fc91 	bl	800ff12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80125f0:	2301      	movs	r3, #1
 80125f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80125f4:	697b      	ldr	r3, [r7, #20]
	}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3718      	adds	r7, #24
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	20026db4 	.word	0x20026db4
 8012604:	20027290 	.word	0x20027290
 8012608:	20026db8 	.word	0x20026db8

0801260c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801260c:	b580      	push	{r7, lr}
 801260e:	b088      	sub	sp, #32
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801261a:	2301      	movs	r3, #1
 801261c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d06d      	beq.n	8012700 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012624:	69bb      	ldr	r3, [r7, #24]
 8012626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012628:	2b00      	cmp	r3, #0
 801262a:	d109      	bne.n	8012640 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012630:	f383 8811 	msr	BASEPRI, r3
 8012634:	f3bf 8f6f 	isb	sy
 8012638:	f3bf 8f4f 	dsb	sy
 801263c:	60fb      	str	r3, [r7, #12]
 801263e:	e7fe      	b.n	801263e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012640:	69bb      	ldr	r3, [r7, #24]
 8012642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012644:	683a      	ldr	r2, [r7, #0]
 8012646:	429a      	cmp	r2, r3
 8012648:	d902      	bls.n	8012650 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	61fb      	str	r3, [r7, #28]
 801264e:	e002      	b.n	8012656 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012650:	69bb      	ldr	r3, [r7, #24]
 8012652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012654:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012656:	69bb      	ldr	r3, [r7, #24]
 8012658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801265a:	69fa      	ldr	r2, [r7, #28]
 801265c:	429a      	cmp	r2, r3
 801265e:	d04f      	beq.n	8012700 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012660:	69bb      	ldr	r3, [r7, #24]
 8012662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012664:	697a      	ldr	r2, [r7, #20]
 8012666:	429a      	cmp	r2, r3
 8012668:	d14a      	bne.n	8012700 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801266a:	4b27      	ldr	r3, [pc, #156]	; (8012708 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	69ba      	ldr	r2, [r7, #24]
 8012670:	429a      	cmp	r2, r3
 8012672:	d109      	bne.n	8012688 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8012674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012678:	f383 8811 	msr	BASEPRI, r3
 801267c:	f3bf 8f6f 	isb	sy
 8012680:	f3bf 8f4f 	dsb	sy
 8012684:	60bb      	str	r3, [r7, #8]
 8012686:	e7fe      	b.n	8012686 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012688:	69bb      	ldr	r3, [r7, #24]
 801268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801268c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	69fa      	ldr	r2, [r7, #28]
 8012692:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012694:	69bb      	ldr	r3, [r7, #24]
 8012696:	699b      	ldr	r3, [r3, #24]
 8012698:	2b00      	cmp	r3, #0
 801269a:	db04      	blt.n	80126a6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801269c:	69fb      	ldr	r3, [r7, #28]
 801269e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80126a2:	69bb      	ldr	r3, [r7, #24]
 80126a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	6959      	ldr	r1, [r3, #20]
 80126aa:	693a      	ldr	r2, [r7, #16]
 80126ac:	4613      	mov	r3, r2
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	4413      	add	r3, r2
 80126b2:	009b      	lsls	r3, r3, #2
 80126b4:	4a15      	ldr	r2, [pc, #84]	; (801270c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80126b6:	4413      	add	r3, r2
 80126b8:	4299      	cmp	r1, r3
 80126ba:	d101      	bne.n	80126c0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80126bc:	2301      	movs	r3, #1
 80126be:	e000      	b.n	80126c2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80126c0:	2300      	movs	r3, #0
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d01c      	beq.n	8012700 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80126c6:	69bb      	ldr	r3, [r7, #24]
 80126c8:	3304      	adds	r3, #4
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fd fc7e 	bl	800ffcc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80126d0:	69bb      	ldr	r3, [r7, #24]
 80126d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126d4:	4b0e      	ldr	r3, [pc, #56]	; (8012710 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	429a      	cmp	r2, r3
 80126da:	d903      	bls.n	80126e4 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126e0:	4a0b      	ldr	r2, [pc, #44]	; (8012710 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80126e2:	6013      	str	r3, [r2, #0]
 80126e4:	69bb      	ldr	r3, [r7, #24]
 80126e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126e8:	4613      	mov	r3, r2
 80126ea:	009b      	lsls	r3, r3, #2
 80126ec:	4413      	add	r3, r2
 80126ee:	009b      	lsls	r3, r3, #2
 80126f0:	4a06      	ldr	r2, [pc, #24]	; (801270c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80126f2:	441a      	add	r2, r3
 80126f4:	69bb      	ldr	r3, [r7, #24]
 80126f6:	3304      	adds	r3, #4
 80126f8:	4619      	mov	r1, r3
 80126fa:	4610      	mov	r0, r2
 80126fc:	f7fd fc09 	bl	800ff12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012700:	bf00      	nop
 8012702:	3720      	adds	r7, #32
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}
 8012708:	20026db4 	.word	0x20026db4
 801270c:	20026db8 	.word	0x20026db8
 8012710:	20027290 	.word	0x20027290

08012714 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8012714:	b480      	push	{r7}
 8012716:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012718:	4b07      	ldr	r3, [pc, #28]	; (8012738 <pvTaskIncrementMutexHeldCount+0x24>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d004      	beq.n	801272a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012720:	4b05      	ldr	r3, [pc, #20]	; (8012738 <pvTaskIncrementMutexHeldCount+0x24>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012726:	3201      	adds	r2, #1
 8012728:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 801272a:	4b03      	ldr	r3, [pc, #12]	; (8012738 <pvTaskIncrementMutexHeldCount+0x24>)
 801272c:	681b      	ldr	r3, [r3, #0]
	}
 801272e:	4618      	mov	r0, r3
 8012730:	46bd      	mov	sp, r7
 8012732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012736:	4770      	bx	lr
 8012738:	20026db4 	.word	0x20026db4

0801273c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801273c:	b580      	push	{r7, lr}
 801273e:	b086      	sub	sp, #24
 8012740:	af00      	add	r7, sp, #0
 8012742:	60f8      	str	r0, [r7, #12]
 8012744:	60b9      	str	r1, [r7, #8]
 8012746:	607a      	str	r2, [r7, #4]
 8012748:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801274a:	f7fd fd8f 	bl	801026c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801274e:	4b26      	ldr	r3, [pc, #152]	; (80127e8 <xTaskNotifyWait+0xac>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8012756:	b2db      	uxtb	r3, r3
 8012758:	2b02      	cmp	r3, #2
 801275a:	d01a      	beq.n	8012792 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801275c:	4b22      	ldr	r3, [pc, #136]	; (80127e8 <xTaskNotifyWait+0xac>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012762:	68fa      	ldr	r2, [r7, #12]
 8012764:	43d2      	mvns	r2, r2
 8012766:	400a      	ands	r2, r1
 8012768:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801276a:	4b1f      	ldr	r3, [pc, #124]	; (80127e8 <xTaskNotifyWait+0xac>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	2201      	movs	r2, #1
 8012770:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d00b      	beq.n	8012792 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801277a:	2101      	movs	r1, #1
 801277c:	6838      	ldr	r0, [r7, #0]
 801277e:	f000 f9a3 	bl	8012ac8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8012782:	4b1a      	ldr	r3, [pc, #104]	; (80127ec <xTaskNotifyWait+0xb0>)
 8012784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012788:	601a      	str	r2, [r3, #0]
 801278a:	f3bf 8f4f 	dsb	sy
 801278e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012792:	f7fd fd99 	bl	80102c8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8012796:	f7fd fd69 	bl	801026c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d004      	beq.n	80127aa <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80127a0:	4b11      	ldr	r3, [pc, #68]	; (80127e8 <xTaskNotifyWait+0xac>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80127aa:	4b0f      	ldr	r3, [pc, #60]	; (80127e8 <xTaskNotifyWait+0xac>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80127b2:	b2db      	uxtb	r3, r3
 80127b4:	2b02      	cmp	r3, #2
 80127b6:	d002      	beq.n	80127be <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80127b8:	2300      	movs	r3, #0
 80127ba:	617b      	str	r3, [r7, #20]
 80127bc:	e008      	b.n	80127d0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80127be:	4b0a      	ldr	r3, [pc, #40]	; (80127e8 <xTaskNotifyWait+0xac>)
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80127c4:	68ba      	ldr	r2, [r7, #8]
 80127c6:	43d2      	mvns	r2, r2
 80127c8:	400a      	ands	r2, r1
 80127ca:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 80127cc:	2301      	movs	r3, #1
 80127ce:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80127d0:	4b05      	ldr	r3, [pc, #20]	; (80127e8 <xTaskNotifyWait+0xac>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	2200      	movs	r2, #0
 80127d6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 80127da:	f7fd fd75 	bl	80102c8 <vPortExitCritical>

		return xReturn;
 80127de:	697b      	ldr	r3, [r7, #20]
	}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3718      	adds	r7, #24
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}
 80127e8:	20026db4 	.word	0x20026db4
 80127ec:	e000ed04 	.word	0xe000ed04

080127f0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b08a      	sub	sp, #40	; 0x28
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	60b9      	str	r1, [r7, #8]
 80127fa:	603b      	str	r3, [r7, #0]
 80127fc:	4613      	mov	r3, r2
 80127fe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8012800:	2301      	movs	r3, #1
 8012802:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d109      	bne.n	801281e <xTaskGenericNotify+0x2e>
 801280a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801280e:	f383 8811 	msr	BASEPRI, r3
 8012812:	f3bf 8f6f 	isb	sy
 8012816:	f3bf 8f4f 	dsb	sy
 801281a:	61bb      	str	r3, [r7, #24]
 801281c:	e7fe      	b.n	801281c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8012822:	f7fd fd23 	bl	801026c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d003      	beq.n	8012834 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801282c:	6a3b      	ldr	r3, [r7, #32]
 801282e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012830:	683b      	ldr	r3, [r7, #0]
 8012832:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012834:	6a3b      	ldr	r3, [r7, #32]
 8012836:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801283a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801283c:	6a3b      	ldr	r3, [r7, #32]
 801283e:	2202      	movs	r2, #2
 8012840:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8012844:	79fb      	ldrb	r3, [r7, #7]
 8012846:	2b04      	cmp	r3, #4
 8012848:	d827      	bhi.n	801289a <xTaskGenericNotify+0xaa>
 801284a:	a201      	add	r2, pc, #4	; (adr r2, 8012850 <xTaskGenericNotify+0x60>)
 801284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012850:	0801289b 	.word	0x0801289b
 8012854:	08012865 	.word	0x08012865
 8012858:	08012873 	.word	0x08012873
 801285c:	0801287f 	.word	0x0801287f
 8012860:	08012887 	.word	0x08012887
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012864:	6a3b      	ldr	r3, [r7, #32]
 8012866:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	431a      	orrs	r2, r3
 801286c:	6a3b      	ldr	r3, [r7, #32]
 801286e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8012870:	e013      	b.n	801289a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012872:	6a3b      	ldr	r3, [r7, #32]
 8012874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012876:	1c5a      	adds	r2, r3, #1
 8012878:	6a3b      	ldr	r3, [r7, #32]
 801287a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 801287c:	e00d      	b.n	801289a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801287e:	6a3b      	ldr	r3, [r7, #32]
 8012880:	68ba      	ldr	r2, [r7, #8]
 8012882:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8012884:	e009      	b.n	801289a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012886:	7ffb      	ldrb	r3, [r7, #31]
 8012888:	2b02      	cmp	r3, #2
 801288a:	d003      	beq.n	8012894 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801288c:	6a3b      	ldr	r3, [r7, #32]
 801288e:	68ba      	ldr	r2, [r7, #8]
 8012890:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012892:	e001      	b.n	8012898 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8012894:	2300      	movs	r3, #0
 8012896:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012898:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801289a:	7ffb      	ldrb	r3, [r7, #31]
 801289c:	2b01      	cmp	r3, #1
 801289e:	d13b      	bne.n	8012918 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128a0:	6a3b      	ldr	r3, [r7, #32]
 80128a2:	3304      	adds	r3, #4
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7fd fb91 	bl	800ffcc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80128aa:	6a3b      	ldr	r3, [r7, #32]
 80128ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128ae:	4b1e      	ldr	r3, [pc, #120]	; (8012928 <xTaskGenericNotify+0x138>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d903      	bls.n	80128be <xTaskGenericNotify+0xce>
 80128b6:	6a3b      	ldr	r3, [r7, #32]
 80128b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ba:	4a1b      	ldr	r2, [pc, #108]	; (8012928 <xTaskGenericNotify+0x138>)
 80128bc:	6013      	str	r3, [r2, #0]
 80128be:	6a3b      	ldr	r3, [r7, #32]
 80128c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128c2:	4613      	mov	r3, r2
 80128c4:	009b      	lsls	r3, r3, #2
 80128c6:	4413      	add	r3, r2
 80128c8:	009b      	lsls	r3, r3, #2
 80128ca:	4a18      	ldr	r2, [pc, #96]	; (801292c <xTaskGenericNotify+0x13c>)
 80128cc:	441a      	add	r2, r3
 80128ce:	6a3b      	ldr	r3, [r7, #32]
 80128d0:	3304      	adds	r3, #4
 80128d2:	4619      	mov	r1, r3
 80128d4:	4610      	mov	r0, r2
 80128d6:	f7fd fb1c 	bl	800ff12 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80128da:	6a3b      	ldr	r3, [r7, #32]
 80128dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d009      	beq.n	80128f6 <xTaskGenericNotify+0x106>
 80128e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e6:	f383 8811 	msr	BASEPRI, r3
 80128ea:	f3bf 8f6f 	isb	sy
 80128ee:	f3bf 8f4f 	dsb	sy
 80128f2:	617b      	str	r3, [r7, #20]
 80128f4:	e7fe      	b.n	80128f4 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 80128f6:	f7ff fd5b 	bl	80123b0 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80128fa:	6a3b      	ldr	r3, [r7, #32]
 80128fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128fe:	4b0c      	ldr	r3, [pc, #48]	; (8012930 <xTaskGenericNotify+0x140>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012904:	429a      	cmp	r2, r3
 8012906:	d907      	bls.n	8012918 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012908:	4b0a      	ldr	r3, [pc, #40]	; (8012934 <xTaskGenericNotify+0x144>)
 801290a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801290e:	601a      	str	r2, [r3, #0]
 8012910:	f3bf 8f4f 	dsb	sy
 8012914:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012918:	f7fd fcd6 	bl	80102c8 <vPortExitCritical>

		return xReturn;
 801291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801291e:	4618      	mov	r0, r3
 8012920:	3728      	adds	r7, #40	; 0x28
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
 8012926:	bf00      	nop
 8012928:	20027290 	.word	0x20027290
 801292c:	20026db8 	.word	0x20026db8
 8012930:	20026db4 	.word	0x20026db4
 8012934:	e000ed04 	.word	0xe000ed04

08012938 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012938:	b580      	push	{r7, lr}
 801293a:	b08e      	sub	sp, #56	; 0x38
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	60b9      	str	r1, [r7, #8]
 8012942:	603b      	str	r3, [r7, #0]
 8012944:	4613      	mov	r3, r2
 8012946:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012948:	2301      	movs	r3, #1
 801294a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d109      	bne.n	8012966 <xTaskGenericNotifyFromISR+0x2e>
 8012952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012956:	f383 8811 	msr	BASEPRI, r3
 801295a:	f3bf 8f6f 	isb	sy
 801295e:	f3bf 8f4f 	dsb	sy
 8012962:	627b      	str	r3, [r7, #36]	; 0x24
 8012964:	e7fe      	b.n	8012964 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012966:	f7fd fd39 	bl	80103dc <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801296e:	f3ef 8211 	mrs	r2, BASEPRI
 8012972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012976:	f383 8811 	msr	BASEPRI, r3
 801297a:	f3bf 8f6f 	isb	sy
 801297e:	f3bf 8f4f 	dsb	sy
 8012982:	623a      	str	r2, [r7, #32]
 8012984:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8012986:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012988:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d003      	beq.n	8012998 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801299a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801299e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80129a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a4:	2202      	movs	r2, #2
 80129a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 80129aa:	79fb      	ldrb	r3, [r7, #7]
 80129ac:	2b04      	cmp	r3, #4
 80129ae:	d829      	bhi.n	8012a04 <xTaskGenericNotifyFromISR+0xcc>
 80129b0:	a201      	add	r2, pc, #4	; (adr r2, 80129b8 <xTaskGenericNotifyFromISR+0x80>)
 80129b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129b6:	bf00      	nop
 80129b8:	08012a05 	.word	0x08012a05
 80129bc:	080129cd 	.word	0x080129cd
 80129c0:	080129db 	.word	0x080129db
 80129c4:	080129e7 	.word	0x080129e7
 80129c8:	080129ef 	.word	0x080129ef
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80129cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	431a      	orrs	r2, r3
 80129d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d6:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80129d8:	e014      	b.n	8012a04 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80129da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129de:	1c5a      	adds	r2, r3, #1
 80129e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80129e4:	e00e      	b.n	8012a04 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80129e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e8:	68ba      	ldr	r2, [r7, #8]
 80129ea:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80129ec:	e00a      	b.n	8012a04 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80129ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80129f2:	2b02      	cmp	r3, #2
 80129f4:	d003      	beq.n	80129fe <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80129f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f8:	68ba      	ldr	r2, [r7, #8]
 80129fa:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80129fc:	e001      	b.n	8012a02 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 80129fe:	2300      	movs	r3, #0
 8012a00:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8012a02:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012a04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a08:	2b01      	cmp	r3, #1
 8012a0a:	d146      	bne.n	8012a9a <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d009      	beq.n	8012a28 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8012a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a18:	f383 8811 	msr	BASEPRI, r3
 8012a1c:	f3bf 8f6f 	isb	sy
 8012a20:	f3bf 8f4f 	dsb	sy
 8012a24:	61bb      	str	r3, [r7, #24]
 8012a26:	e7fe      	b.n	8012a26 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a28:	4b21      	ldr	r3, [pc, #132]	; (8012ab0 <xTaskGenericNotifyFromISR+0x178>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d11d      	bne.n	8012a6c <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a32:	3304      	adds	r3, #4
 8012a34:	4618      	mov	r0, r3
 8012a36:	f7fd fac9 	bl	800ffcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a3e:	4b1d      	ldr	r3, [pc, #116]	; (8012ab4 <xTaskGenericNotifyFromISR+0x17c>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d903      	bls.n	8012a4e <xTaskGenericNotifyFromISR+0x116>
 8012a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a4a:	4a1a      	ldr	r2, [pc, #104]	; (8012ab4 <xTaskGenericNotifyFromISR+0x17c>)
 8012a4c:	6013      	str	r3, [r2, #0]
 8012a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a52:	4613      	mov	r3, r2
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	4413      	add	r3, r2
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	4a17      	ldr	r2, [pc, #92]	; (8012ab8 <xTaskGenericNotifyFromISR+0x180>)
 8012a5c:	441a      	add	r2, r3
 8012a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a60:	3304      	adds	r3, #4
 8012a62:	4619      	mov	r1, r3
 8012a64:	4610      	mov	r0, r2
 8012a66:	f7fd fa54 	bl	800ff12 <vListInsertEnd>
 8012a6a:	e005      	b.n	8012a78 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6e:	3318      	adds	r3, #24
 8012a70:	4619      	mov	r1, r3
 8012a72:	4812      	ldr	r0, [pc, #72]	; (8012abc <xTaskGenericNotifyFromISR+0x184>)
 8012a74:	f7fd fa4d 	bl	800ff12 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a7c:	4b10      	ldr	r3, [pc, #64]	; (8012ac0 <xTaskGenericNotifyFromISR+0x188>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d909      	bls.n	8012a9a <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8012a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d003      	beq.n	8012a94 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a8e:	2201      	movs	r2, #1
 8012a90:	601a      	str	r2, [r3, #0]
 8012a92:	e002      	b.n	8012a9a <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8012a94:	4b0b      	ldr	r3, [pc, #44]	; (8012ac4 <xTaskGenericNotifyFromISR+0x18c>)
 8012a96:	2201      	movs	r2, #1
 8012a98:	601a      	str	r2, [r3, #0]
 8012a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3738      	adds	r7, #56	; 0x38
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	200272b0 	.word	0x200272b0
 8012ab4:	20027290 	.word	0x20027290
 8012ab8:	20026db8 	.word	0x20026db8
 8012abc:	20027248 	.word	0x20027248
 8012ac0:	20026db4 	.word	0x20026db4
 8012ac4:	2002729c 	.word	0x2002729c

08012ac8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012ad2:	4b21      	ldr	r3, [pc, #132]	; (8012b58 <prvAddCurrentTaskToDelayedList+0x90>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012ad8:	4b20      	ldr	r3, [pc, #128]	; (8012b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	3304      	adds	r3, #4
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7fd fa74 	bl	800ffcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012aea:	d10a      	bne.n	8012b02 <prvAddCurrentTaskToDelayedList+0x3a>
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d007      	beq.n	8012b02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012af2:	4b1a      	ldr	r3, [pc, #104]	; (8012b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	3304      	adds	r3, #4
 8012af8:	4619      	mov	r1, r3
 8012afa:	4819      	ldr	r0, [pc, #100]	; (8012b60 <prvAddCurrentTaskToDelayedList+0x98>)
 8012afc:	f7fd fa09 	bl	800ff12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012b00:	e026      	b.n	8012b50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012b02:	68fa      	ldr	r2, [r7, #12]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	4413      	add	r3, r2
 8012b08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012b0a:	4b14      	ldr	r3, [pc, #80]	; (8012b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	68ba      	ldr	r2, [r7, #8]
 8012b10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012b12:	68ba      	ldr	r2, [r7, #8]
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	429a      	cmp	r2, r3
 8012b18:	d209      	bcs.n	8012b2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b1a:	4b12      	ldr	r3, [pc, #72]	; (8012b64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012b1c:	681a      	ldr	r2, [r3, #0]
 8012b1e:	4b0f      	ldr	r3, [pc, #60]	; (8012b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	3304      	adds	r3, #4
 8012b24:	4619      	mov	r1, r3
 8012b26:	4610      	mov	r0, r2
 8012b28:	f7fd fa17 	bl	800ff5a <vListInsert>
}
 8012b2c:	e010      	b.n	8012b50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b2e:	4b0e      	ldr	r3, [pc, #56]	; (8012b68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	4b0a      	ldr	r3, [pc, #40]	; (8012b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	3304      	adds	r3, #4
 8012b38:	4619      	mov	r1, r3
 8012b3a:	4610      	mov	r0, r2
 8012b3c:	f7fd fa0d 	bl	800ff5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012b40:	4b0a      	ldr	r3, [pc, #40]	; (8012b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	68ba      	ldr	r2, [r7, #8]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d202      	bcs.n	8012b50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012b4a:	4a08      	ldr	r2, [pc, #32]	; (8012b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	6013      	str	r3, [r2, #0]
}
 8012b50:	bf00      	nop
 8012b52:	3710      	adds	r7, #16
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	2002728c 	.word	0x2002728c
 8012b5c:	20026db4 	.word	0x20026db4
 8012b60:	20027274 	.word	0x20027274
 8012b64:	20027244 	.word	0x20027244
 8012b68:	20027240 	.word	0x20027240
 8012b6c:	200272a8 	.word	0x200272a8

08012b70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b08a      	sub	sp, #40	; 0x28
 8012b74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012b76:	2300      	movs	r3, #0
 8012b78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012b7a:	f000 fb51 	bl	8013220 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012b7e:	4b1c      	ldr	r3, [pc, #112]	; (8012bf0 <xTimerCreateTimerTask+0x80>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d021      	beq.n	8012bca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012b86:	2300      	movs	r3, #0
 8012b88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012b8e:	1d3a      	adds	r2, r7, #4
 8012b90:	f107 0108 	add.w	r1, r7, #8
 8012b94:	f107 030c 	add.w	r3, r7, #12
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f7fc ff97 	bl	800facc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012b9e:	6879      	ldr	r1, [r7, #4]
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	68fa      	ldr	r2, [r7, #12]
 8012ba4:	9202      	str	r2, [sp, #8]
 8012ba6:	9301      	str	r3, [sp, #4]
 8012ba8:	2302      	movs	r3, #2
 8012baa:	9300      	str	r3, [sp, #0]
 8012bac:	2300      	movs	r3, #0
 8012bae:	460a      	mov	r2, r1
 8012bb0:	4910      	ldr	r1, [pc, #64]	; (8012bf4 <xTimerCreateTimerTask+0x84>)
 8012bb2:	4811      	ldr	r0, [pc, #68]	; (8012bf8 <xTimerCreateTimerTask+0x88>)
 8012bb4:	f7fe fd28 	bl	8011608 <xTaskCreateStatic>
 8012bb8:	4602      	mov	r2, r0
 8012bba:	4b10      	ldr	r3, [pc, #64]	; (8012bfc <xTimerCreateTimerTask+0x8c>)
 8012bbc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012bbe:	4b0f      	ldr	r3, [pc, #60]	; (8012bfc <xTimerCreateTimerTask+0x8c>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d001      	beq.n	8012bca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d109      	bne.n	8012be4 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8012bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd4:	f383 8811 	msr	BASEPRI, r3
 8012bd8:	f3bf 8f6f 	isb	sy
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	613b      	str	r3, [r7, #16]
 8012be2:	e7fe      	b.n	8012be2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012be4:	697b      	ldr	r3, [r7, #20]
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3718      	adds	r7, #24
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	200272ec 	.word	0x200272ec
 8012bf4:	08017ab4 	.word	0x08017ab4
 8012bf8:	08012e35 	.word	0x08012e35
 8012bfc:	200272f0 	.word	0x200272f0

08012c00 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b088      	sub	sp, #32
 8012c04:	af02      	add	r7, sp, #8
 8012c06:	60f8      	str	r0, [r7, #12]
 8012c08:	60b9      	str	r1, [r7, #8]
 8012c0a:	607a      	str	r2, [r7, #4]
 8012c0c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8012c0e:	2030      	movs	r0, #48	; 0x30
 8012c10:	f7fc ff76 	bl	800fb00 <pvPortMalloc>
 8012c14:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8012c16:	697b      	ldr	r3, [r7, #20]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d00d      	beq.n	8012c38 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012c1c:	697b      	ldr	r3, [r7, #20]
 8012c1e:	9301      	str	r3, [sp, #4]
 8012c20:	6a3b      	ldr	r3, [r7, #32]
 8012c22:	9300      	str	r3, [sp, #0]
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	687a      	ldr	r2, [r7, #4]
 8012c28:	68b9      	ldr	r1, [r7, #8]
 8012c2a:	68f8      	ldr	r0, [r7, #12]
 8012c2c:	f000 f844 	bl	8012cb8 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	2200      	movs	r2, #0
 8012c34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8012c38:	697b      	ldr	r3, [r7, #20]
	}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3718      	adds	r7, #24
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}

08012c42 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8012c42:	b580      	push	{r7, lr}
 8012c44:	b08a      	sub	sp, #40	; 0x28
 8012c46:	af02      	add	r7, sp, #8
 8012c48:	60f8      	str	r0, [r7, #12]
 8012c4a:	60b9      	str	r1, [r7, #8]
 8012c4c:	607a      	str	r2, [r7, #4]
 8012c4e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012c50:	2330      	movs	r3, #48	; 0x30
 8012c52:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	2b30      	cmp	r3, #48	; 0x30
 8012c58:	d009      	beq.n	8012c6e <xTimerCreateStatic+0x2c>
 8012c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c5e:	f383 8811 	msr	BASEPRI, r3
 8012c62:	f3bf 8f6f 	isb	sy
 8012c66:	f3bf 8f4f 	dsb	sy
 8012c6a:	61bb      	str	r3, [r7, #24]
 8012c6c:	e7fe      	b.n	8012c6c <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8012c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d109      	bne.n	8012c88 <xTimerCreateStatic+0x46>
 8012c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c78:	f383 8811 	msr	BASEPRI, r3
 8012c7c:	f3bf 8f6f 	isb	sy
 8012c80:	f3bf 8f4f 	dsb	sy
 8012c84:	617b      	str	r3, [r7, #20]
 8012c86:	e7fe      	b.n	8012c86 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c8a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8012c8c:	69fb      	ldr	r3, [r7, #28]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d00d      	beq.n	8012cae <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012c92:	69fb      	ldr	r3, [r7, #28]
 8012c94:	9301      	str	r3, [sp, #4]
 8012c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c98:	9300      	str	r3, [sp, #0]
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	68b9      	ldr	r1, [r7, #8]
 8012ca0:	68f8      	ldr	r0, [r7, #12]
 8012ca2:	f000 f809 	bl	8012cb8 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8012ca6:	69fb      	ldr	r3, [r7, #28]
 8012ca8:	2201      	movs	r2, #1
 8012caa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8012cae:	69fb      	ldr	r3, [r7, #28]
	}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3720      	adds	r7, #32
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}

08012cb8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b086      	sub	sp, #24
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	60f8      	str	r0, [r7, #12]
 8012cc0:	60b9      	str	r1, [r7, #8]
 8012cc2:	607a      	str	r2, [r7, #4]
 8012cc4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d109      	bne.n	8012ce0 <prvInitialiseNewTimer+0x28>
 8012ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd0:	f383 8811 	msr	BASEPRI, r3
 8012cd4:	f3bf 8f6f 	isb	sy
 8012cd8:	f3bf 8f4f 	dsb	sy
 8012cdc:	617b      	str	r3, [r7, #20]
 8012cde:	e7fe      	b.n	8012cde <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8012ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d015      	beq.n	8012d12 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8012ce6:	f000 fa9b 	bl	8013220 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8012cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cec:	68fa      	ldr	r2, [r7, #12]
 8012cee:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf2:	68ba      	ldr	r2, [r7, #8]
 8012cf4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8012cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf8:	687a      	ldr	r2, [r7, #4]
 8012cfa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8012cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfe:	683a      	ldr	r2, [r7, #0]
 8012d00:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d04:	6a3a      	ldr	r2, [r7, #32]
 8012d06:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0a:	3304      	adds	r3, #4
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7fd f8f3 	bl	800fef8 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8012d12:	bf00      	nop
 8012d14:	3718      	adds	r7, #24
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
	...

08012d1c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b08a      	sub	sp, #40	; 0x28
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	60f8      	str	r0, [r7, #12]
 8012d24:	60b9      	str	r1, [r7, #8]
 8012d26:	607a      	str	r2, [r7, #4]
 8012d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d109      	bne.n	8012d48 <xTimerGenericCommand+0x2c>
 8012d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d38:	f383 8811 	msr	BASEPRI, r3
 8012d3c:	f3bf 8f6f 	isb	sy
 8012d40:	f3bf 8f4f 	dsb	sy
 8012d44:	623b      	str	r3, [r7, #32]
 8012d46:	e7fe      	b.n	8012d46 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012d48:	4b19      	ldr	r3, [pc, #100]	; (8012db0 <xTimerGenericCommand+0x94>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d02a      	beq.n	8012da6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	2b05      	cmp	r3, #5
 8012d60:	dc18      	bgt.n	8012d94 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012d62:	f7ff fb5b 	bl	801241c <xTaskGetSchedulerState>
 8012d66:	4603      	mov	r3, r0
 8012d68:	2b02      	cmp	r3, #2
 8012d6a:	d109      	bne.n	8012d80 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012d6c:	4b10      	ldr	r3, [pc, #64]	; (8012db0 <xTimerGenericCommand+0x94>)
 8012d6e:	6818      	ldr	r0, [r3, #0]
 8012d70:	f107 0110 	add.w	r1, r7, #16
 8012d74:	2300      	movs	r3, #0
 8012d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d78:	f7fd fdc4 	bl	8010904 <xQueueGenericSend>
 8012d7c:	6278      	str	r0, [r7, #36]	; 0x24
 8012d7e:	e012      	b.n	8012da6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012d80:	4b0b      	ldr	r3, [pc, #44]	; (8012db0 <xTimerGenericCommand+0x94>)
 8012d82:	6818      	ldr	r0, [r3, #0]
 8012d84:	f107 0110 	add.w	r1, r7, #16
 8012d88:	2300      	movs	r3, #0
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	f7fd fdba 	bl	8010904 <xQueueGenericSend>
 8012d90:	6278      	str	r0, [r7, #36]	; 0x24
 8012d92:	e008      	b.n	8012da6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012d94:	4b06      	ldr	r3, [pc, #24]	; (8012db0 <xTimerGenericCommand+0x94>)
 8012d96:	6818      	ldr	r0, [r3, #0]
 8012d98:	f107 0110 	add.w	r1, r7, #16
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	683a      	ldr	r2, [r7, #0]
 8012da0:	f7fd feaa 	bl	8010af8 <xQueueGenericSendFromISR>
 8012da4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3728      	adds	r7, #40	; 0x28
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	200272ec 	.word	0x200272ec

08012db4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b088      	sub	sp, #32
 8012db8:	af02      	add	r7, sp, #8
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012dbe:	4b1c      	ldr	r3, [pc, #112]	; (8012e30 <prvProcessExpiredTimer+0x7c>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	68db      	ldr	r3, [r3, #12]
 8012dc4:	68db      	ldr	r3, [r3, #12]
 8012dc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	3304      	adds	r3, #4
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7fd f8fd 	bl	800ffcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8012dd2:	697b      	ldr	r3, [r7, #20]
 8012dd4:	69db      	ldr	r3, [r3, #28]
 8012dd6:	2b01      	cmp	r3, #1
 8012dd8:	d121      	bne.n	8012e1e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	699a      	ldr	r2, [r3, #24]
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	18d1      	adds	r1, r2, r3
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	683a      	ldr	r2, [r7, #0]
 8012de6:	6978      	ldr	r0, [r7, #20]
 8012de8:	f000 f8c8 	bl	8012f7c <prvInsertTimerInActiveList>
 8012dec:	4603      	mov	r3, r0
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d015      	beq.n	8012e1e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012df2:	2300      	movs	r3, #0
 8012df4:	9300      	str	r3, [sp, #0]
 8012df6:	2300      	movs	r3, #0
 8012df8:	687a      	ldr	r2, [r7, #4]
 8012dfa:	2100      	movs	r1, #0
 8012dfc:	6978      	ldr	r0, [r7, #20]
 8012dfe:	f7ff ff8d 	bl	8012d1c <xTimerGenericCommand>
 8012e02:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012e04:	693b      	ldr	r3, [r7, #16]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d109      	bne.n	8012e1e <prvProcessExpiredTimer+0x6a>
 8012e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e0e:	f383 8811 	msr	BASEPRI, r3
 8012e12:	f3bf 8f6f 	isb	sy
 8012e16:	f3bf 8f4f 	dsb	sy
 8012e1a:	60fb      	str	r3, [r7, #12]
 8012e1c:	e7fe      	b.n	8012e1c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e22:	6978      	ldr	r0, [r7, #20]
 8012e24:	4798      	blx	r3
}
 8012e26:	bf00      	nop
 8012e28:	3718      	adds	r7, #24
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	200272e4 	.word	0x200272e4

08012e34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b084      	sub	sp, #16
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e3c:	f107 0308 	add.w	r3, r7, #8
 8012e40:	4618      	mov	r0, r3
 8012e42:	f000 f857 	bl	8012ef4 <prvGetNextExpireTime>
 8012e46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	4619      	mov	r1, r3
 8012e4c:	68f8      	ldr	r0, [r7, #12]
 8012e4e:	f000 f803 	bl	8012e58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012e52:	f000 f8d5 	bl	8013000 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e56:	e7f1      	b.n	8012e3c <prvTimerTask+0x8>

08012e58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b084      	sub	sp, #16
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
 8012e60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012e62:	f7fe fe05 	bl	8011a70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012e66:	f107 0308 	add.w	r3, r7, #8
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f000 f866 	bl	8012f3c <prvSampleTimeNow>
 8012e70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d130      	bne.n	8012eda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d10a      	bne.n	8012e94 <prvProcessTimerOrBlockTask+0x3c>
 8012e7e:	687a      	ldr	r2, [r7, #4]
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d806      	bhi.n	8012e94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012e86:	f7fe fe39 	bl	8011afc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012e8a:	68f9      	ldr	r1, [r7, #12]
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f7ff ff91 	bl	8012db4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012e92:	e024      	b.n	8012ede <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d008      	beq.n	8012eac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012e9a:	4b13      	ldr	r3, [pc, #76]	; (8012ee8 <prvProcessTimerOrBlockTask+0x90>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	bf0c      	ite	eq
 8012ea4:	2301      	moveq	r3, #1
 8012ea6:	2300      	movne	r3, #0
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012eac:	4b0f      	ldr	r3, [pc, #60]	; (8012eec <prvProcessTimerOrBlockTask+0x94>)
 8012eae:	6818      	ldr	r0, [r3, #0]
 8012eb0:	687a      	ldr	r2, [r7, #4]
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	1ad3      	subs	r3, r2, r3
 8012eb6:	683a      	ldr	r2, [r7, #0]
 8012eb8:	4619      	mov	r1, r3
 8012eba:	f7fe fb71 	bl	80115a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012ebe:	f7fe fe1d 	bl	8011afc <xTaskResumeAll>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d10a      	bne.n	8012ede <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012ec8:	4b09      	ldr	r3, [pc, #36]	; (8012ef0 <prvProcessTimerOrBlockTask+0x98>)
 8012eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ece:	601a      	str	r2, [r3, #0]
 8012ed0:	f3bf 8f4f 	dsb	sy
 8012ed4:	f3bf 8f6f 	isb	sy
}
 8012ed8:	e001      	b.n	8012ede <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012eda:	f7fe fe0f 	bl	8011afc <xTaskResumeAll>
}
 8012ede:	bf00      	nop
 8012ee0:	3710      	adds	r7, #16
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	200272e8 	.word	0x200272e8
 8012eec:	200272ec 	.word	0x200272ec
 8012ef0:	e000ed04 	.word	0xe000ed04

08012ef4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012ef4:	b480      	push	{r7}
 8012ef6:	b085      	sub	sp, #20
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012efc:	4b0e      	ldr	r3, [pc, #56]	; (8012f38 <prvGetNextExpireTime+0x44>)
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	bf0c      	ite	eq
 8012f06:	2301      	moveq	r3, #1
 8012f08:	2300      	movne	r3, #0
 8012f0a:	b2db      	uxtb	r3, r3
 8012f0c:	461a      	mov	r2, r3
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d105      	bne.n	8012f26 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f1a:	4b07      	ldr	r3, [pc, #28]	; (8012f38 <prvGetNextExpireTime+0x44>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	68db      	ldr	r3, [r3, #12]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	60fb      	str	r3, [r7, #12]
 8012f24:	e001      	b.n	8012f2a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012f26:	2300      	movs	r3, #0
 8012f28:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	3714      	adds	r7, #20
 8012f30:	46bd      	mov	sp, r7
 8012f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f36:	4770      	bx	lr
 8012f38:	200272e4 	.word	0x200272e4

08012f3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b084      	sub	sp, #16
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012f44:	f7fe fe76 	bl	8011c34 <xTaskGetTickCount>
 8012f48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012f4a:	4b0b      	ldr	r3, [pc, #44]	; (8012f78 <prvSampleTimeNow+0x3c>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	68fa      	ldr	r2, [r7, #12]
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d205      	bcs.n	8012f60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012f54:	f000 f904 	bl	8013160 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	601a      	str	r2, [r3, #0]
 8012f5e:	e002      	b.n	8012f66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2200      	movs	r2, #0
 8012f64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012f66:	4a04      	ldr	r2, [pc, #16]	; (8012f78 <prvSampleTimeNow+0x3c>)
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3710      	adds	r7, #16
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
 8012f76:	bf00      	nop
 8012f78:	200272f4 	.word	0x200272f4

08012f7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b086      	sub	sp, #24
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	60b9      	str	r1, [r7, #8]
 8012f86:	607a      	str	r2, [r7, #4]
 8012f88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	68ba      	ldr	r2, [r7, #8]
 8012f92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	68fa      	ldr	r2, [r7, #12]
 8012f98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012f9a:	68ba      	ldr	r2, [r7, #8]
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d812      	bhi.n	8012fc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fa2:	687a      	ldr	r2, [r7, #4]
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	1ad2      	subs	r2, r2, r3
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	699b      	ldr	r3, [r3, #24]
 8012fac:	429a      	cmp	r2, r3
 8012fae:	d302      	bcc.n	8012fb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	617b      	str	r3, [r7, #20]
 8012fb4:	e01b      	b.n	8012fee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012fb6:	4b10      	ldr	r3, [pc, #64]	; (8012ff8 <prvInsertTimerInActiveList+0x7c>)
 8012fb8:	681a      	ldr	r2, [r3, #0]
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	3304      	adds	r3, #4
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	4610      	mov	r0, r2
 8012fc2:	f7fc ffca 	bl	800ff5a <vListInsert>
 8012fc6:	e012      	b.n	8012fee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012fc8:	687a      	ldr	r2, [r7, #4]
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	429a      	cmp	r2, r3
 8012fce:	d206      	bcs.n	8012fde <prvInsertTimerInActiveList+0x62>
 8012fd0:	68ba      	ldr	r2, [r7, #8]
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d302      	bcc.n	8012fde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012fd8:	2301      	movs	r3, #1
 8012fda:	617b      	str	r3, [r7, #20]
 8012fdc:	e007      	b.n	8012fee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012fde:	4b07      	ldr	r3, [pc, #28]	; (8012ffc <prvInsertTimerInActiveList+0x80>)
 8012fe0:	681a      	ldr	r2, [r3, #0]
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	3304      	adds	r3, #4
 8012fe6:	4619      	mov	r1, r3
 8012fe8:	4610      	mov	r0, r2
 8012fea:	f7fc ffb6 	bl	800ff5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012fee:	697b      	ldr	r3, [r7, #20]
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3718      	adds	r7, #24
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}
 8012ff8:	200272e8 	.word	0x200272e8
 8012ffc:	200272e4 	.word	0x200272e4

08013000 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b08e      	sub	sp, #56	; 0x38
 8013004:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013006:	e099      	b.n	801313c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2b00      	cmp	r3, #0
 801300c:	da17      	bge.n	801303e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801300e:	1d3b      	adds	r3, r7, #4
 8013010:	3304      	adds	r3, #4
 8013012:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013016:	2b00      	cmp	r3, #0
 8013018:	d109      	bne.n	801302e <prvProcessReceivedCommands+0x2e>
 801301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801301e:	f383 8811 	msr	BASEPRI, r3
 8013022:	f3bf 8f6f 	isb	sy
 8013026:	f3bf 8f4f 	dsb	sy
 801302a:	61fb      	str	r3, [r7, #28]
 801302c:	e7fe      	b.n	801302c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013034:	6850      	ldr	r0, [r2, #4]
 8013036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013038:	6892      	ldr	r2, [r2, #8]
 801303a:	4611      	mov	r1, r2
 801303c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2b00      	cmp	r3, #0
 8013042:	db7a      	blt.n	801313a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801304a:	695b      	ldr	r3, [r3, #20]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d004      	beq.n	801305a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013052:	3304      	adds	r3, #4
 8013054:	4618      	mov	r0, r3
 8013056:	f7fc ffb9 	bl	800ffcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801305a:	463b      	mov	r3, r7
 801305c:	4618      	mov	r0, r3
 801305e:	f7ff ff6d 	bl	8012f3c <prvSampleTimeNow>
 8013062:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2b09      	cmp	r3, #9
 8013068:	d868      	bhi.n	801313c <prvProcessReceivedCommands+0x13c>
 801306a:	a201      	add	r2, pc, #4	; (adr r2, 8013070 <prvProcessReceivedCommands+0x70>)
 801306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013070:	08013099 	.word	0x08013099
 8013074:	08013099 	.word	0x08013099
 8013078:	08013099 	.word	0x08013099
 801307c:	0801313d 	.word	0x0801313d
 8013080:	080130f3 	.word	0x080130f3
 8013084:	08013129 	.word	0x08013129
 8013088:	08013099 	.word	0x08013099
 801308c:	08013099 	.word	0x08013099
 8013090:	0801313d 	.word	0x0801313d
 8013094:	080130f3 	.word	0x080130f3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013098:	68ba      	ldr	r2, [r7, #8]
 801309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801309c:	699b      	ldr	r3, [r3, #24]
 801309e:	18d1      	adds	r1, r2, r3
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130a6:	f7ff ff69 	bl	8012f7c <prvInsertTimerInActiveList>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d045      	beq.n	801313c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80130b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130b6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80130b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ba:	69db      	ldr	r3, [r3, #28]
 80130bc:	2b01      	cmp	r3, #1
 80130be:	d13d      	bne.n	801313c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80130c0:	68ba      	ldr	r2, [r7, #8]
 80130c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c4:	699b      	ldr	r3, [r3, #24]
 80130c6:	441a      	add	r2, r3
 80130c8:	2300      	movs	r3, #0
 80130ca:	9300      	str	r3, [sp, #0]
 80130cc:	2300      	movs	r3, #0
 80130ce:	2100      	movs	r1, #0
 80130d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130d2:	f7ff fe23 	bl	8012d1c <xTimerGenericCommand>
 80130d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80130d8:	6a3b      	ldr	r3, [r7, #32]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d12e      	bne.n	801313c <prvProcessReceivedCommands+0x13c>
 80130de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e2:	f383 8811 	msr	BASEPRI, r3
 80130e6:	f3bf 8f6f 	isb	sy
 80130ea:	f3bf 8f4f 	dsb	sy
 80130ee:	61bb      	str	r3, [r7, #24]
 80130f0:	e7fe      	b.n	80130f0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80130f2:	68ba      	ldr	r2, [r7, #8]
 80130f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80130f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130fa:	699b      	ldr	r3, [r3, #24]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d109      	bne.n	8013114 <prvProcessReceivedCommands+0x114>
 8013100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013104:	f383 8811 	msr	BASEPRI, r3
 8013108:	f3bf 8f6f 	isb	sy
 801310c:	f3bf 8f4f 	dsb	sy
 8013110:	617b      	str	r3, [r7, #20]
 8013112:	e7fe      	b.n	8013112 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013116:	699a      	ldr	r2, [r3, #24]
 8013118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311a:	18d1      	adds	r1, r2, r3
 801311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013122:	f7ff ff2b 	bl	8012f7c <prvInsertTimerInActiveList>
					break;
 8013126:	e009      	b.n	801313c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801312e:	2b00      	cmp	r3, #0
 8013130:	d104      	bne.n	801313c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8013132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013134:	f7fc fdaa 	bl	800fc8c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013138:	e000      	b.n	801313c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801313a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801313c:	4b07      	ldr	r3, [pc, #28]	; (801315c <prvProcessReceivedCommands+0x15c>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	1d39      	adds	r1, r7, #4
 8013142:	2200      	movs	r2, #0
 8013144:	4618      	mov	r0, r3
 8013146:	f7fd fdf5 	bl	8010d34 <xQueueReceive>
 801314a:	4603      	mov	r3, r0
 801314c:	2b00      	cmp	r3, #0
 801314e:	f47f af5b 	bne.w	8013008 <prvProcessReceivedCommands+0x8>
	}
}
 8013152:	bf00      	nop
 8013154:	3730      	adds	r7, #48	; 0x30
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	200272ec 	.word	0x200272ec

08013160 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b088      	sub	sp, #32
 8013164:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013166:	e044      	b.n	80131f2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013168:	4b2b      	ldr	r3, [pc, #172]	; (8013218 <prvSwitchTimerLists+0xb8>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	68db      	ldr	r3, [r3, #12]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013172:	4b29      	ldr	r3, [pc, #164]	; (8013218 <prvSwitchTimerLists+0xb8>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	68db      	ldr	r3, [r3, #12]
 8013178:	68db      	ldr	r3, [r3, #12]
 801317a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	3304      	adds	r3, #4
 8013180:	4618      	mov	r0, r3
 8013182:	f7fc ff23 	bl	800ffcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801318a:	68f8      	ldr	r0, [r7, #12]
 801318c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	69db      	ldr	r3, [r3, #28]
 8013192:	2b01      	cmp	r3, #1
 8013194:	d12d      	bne.n	80131f2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	699b      	ldr	r3, [r3, #24]
 801319a:	693a      	ldr	r2, [r7, #16]
 801319c:	4413      	add	r3, r2
 801319e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80131a0:	68ba      	ldr	r2, [r7, #8]
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	429a      	cmp	r2, r3
 80131a6:	d90e      	bls.n	80131c6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	68ba      	ldr	r2, [r7, #8]
 80131ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	68fa      	ldr	r2, [r7, #12]
 80131b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80131b4:	4b18      	ldr	r3, [pc, #96]	; (8013218 <prvSwitchTimerLists+0xb8>)
 80131b6:	681a      	ldr	r2, [r3, #0]
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	3304      	adds	r3, #4
 80131bc:	4619      	mov	r1, r3
 80131be:	4610      	mov	r0, r2
 80131c0:	f7fc fecb 	bl	800ff5a <vListInsert>
 80131c4:	e015      	b.n	80131f2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80131c6:	2300      	movs	r3, #0
 80131c8:	9300      	str	r3, [sp, #0]
 80131ca:	2300      	movs	r3, #0
 80131cc:	693a      	ldr	r2, [r7, #16]
 80131ce:	2100      	movs	r1, #0
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	f7ff fda3 	bl	8012d1c <xTimerGenericCommand>
 80131d6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d109      	bne.n	80131f2 <prvSwitchTimerLists+0x92>
 80131de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131e2:	f383 8811 	msr	BASEPRI, r3
 80131e6:	f3bf 8f6f 	isb	sy
 80131ea:	f3bf 8f4f 	dsb	sy
 80131ee:	603b      	str	r3, [r7, #0]
 80131f0:	e7fe      	b.n	80131f0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80131f2:	4b09      	ldr	r3, [pc, #36]	; (8013218 <prvSwitchTimerLists+0xb8>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d1b5      	bne.n	8013168 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80131fc:	4b06      	ldr	r3, [pc, #24]	; (8013218 <prvSwitchTimerLists+0xb8>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013202:	4b06      	ldr	r3, [pc, #24]	; (801321c <prvSwitchTimerLists+0xbc>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	4a04      	ldr	r2, [pc, #16]	; (8013218 <prvSwitchTimerLists+0xb8>)
 8013208:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801320a:	4a04      	ldr	r2, [pc, #16]	; (801321c <prvSwitchTimerLists+0xbc>)
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	6013      	str	r3, [r2, #0]
}
 8013210:	bf00      	nop
 8013212:	3718      	adds	r7, #24
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}
 8013218:	200272e4 	.word	0x200272e4
 801321c:	200272e8 	.word	0x200272e8

08013220 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b082      	sub	sp, #8
 8013224:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013226:	f7fd f821 	bl	801026c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801322a:	4b15      	ldr	r3, [pc, #84]	; (8013280 <prvCheckForValidListAndQueue+0x60>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d120      	bne.n	8013274 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013232:	4814      	ldr	r0, [pc, #80]	; (8013284 <prvCheckForValidListAndQueue+0x64>)
 8013234:	f7fc fe40 	bl	800feb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013238:	4813      	ldr	r0, [pc, #76]	; (8013288 <prvCheckForValidListAndQueue+0x68>)
 801323a:	f7fc fe3d 	bl	800feb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801323e:	4b13      	ldr	r3, [pc, #76]	; (801328c <prvCheckForValidListAndQueue+0x6c>)
 8013240:	4a10      	ldr	r2, [pc, #64]	; (8013284 <prvCheckForValidListAndQueue+0x64>)
 8013242:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013244:	4b12      	ldr	r3, [pc, #72]	; (8013290 <prvCheckForValidListAndQueue+0x70>)
 8013246:	4a10      	ldr	r2, [pc, #64]	; (8013288 <prvCheckForValidListAndQueue+0x68>)
 8013248:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801324a:	2300      	movs	r3, #0
 801324c:	9300      	str	r3, [sp, #0]
 801324e:	4b11      	ldr	r3, [pc, #68]	; (8013294 <prvCheckForValidListAndQueue+0x74>)
 8013250:	4a11      	ldr	r2, [pc, #68]	; (8013298 <prvCheckForValidListAndQueue+0x78>)
 8013252:	2110      	movs	r1, #16
 8013254:	200a      	movs	r0, #10
 8013256:	f7fd f967 	bl	8010528 <xQueueGenericCreateStatic>
 801325a:	4602      	mov	r2, r0
 801325c:	4b08      	ldr	r3, [pc, #32]	; (8013280 <prvCheckForValidListAndQueue+0x60>)
 801325e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013260:	4b07      	ldr	r3, [pc, #28]	; (8013280 <prvCheckForValidListAndQueue+0x60>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d005      	beq.n	8013274 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013268:	4b05      	ldr	r3, [pc, #20]	; (8013280 <prvCheckForValidListAndQueue+0x60>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	490b      	ldr	r1, [pc, #44]	; (801329c <prvCheckForValidListAndQueue+0x7c>)
 801326e:	4618      	mov	r0, r3
 8013270:	f7fe f944 	bl	80114fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013274:	f7fd f828 	bl	80102c8 <vPortExitCritical>
}
 8013278:	bf00      	nop
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	200272ec 	.word	0x200272ec
 8013284:	200272bc 	.word	0x200272bc
 8013288:	200272d0 	.word	0x200272d0
 801328c:	200272e4 	.word	0x200272e4
 8013290:	200272e8 	.word	0x200272e8
 8013294:	20027398 	.word	0x20027398
 8013298:	200272f8 	.word	0x200272f8
 801329c:	08017abc 	.word	0x08017abc

080132a0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b086      	sub	sp, #24
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d109      	bne.n	80132c6 <xTimerIsTimerActive+0x26>
 80132b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b6:	f383 8811 	msr	BASEPRI, r3
 80132ba:	f3bf 8f6f 	isb	sy
 80132be:	f3bf 8f4f 	dsb	sy
 80132c2:	60fb      	str	r3, [r7, #12]
 80132c4:	e7fe      	b.n	80132c4 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80132c6:	f7fc ffd1 	bl	801026c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	695b      	ldr	r3, [r3, #20]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	bf14      	ite	ne
 80132d2:	2301      	movne	r3, #1
 80132d4:	2300      	moveq	r3, #0
 80132d6:	b2db      	uxtb	r3, r3
 80132d8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80132da:	f7fc fff5 	bl	80102c8 <vPortExitCritical>

	return xTimerIsInActiveList;
 80132de:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80132e0:	4618      	mov	r0, r3
 80132e2:	3718      	adds	r7, #24
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b086      	sub	sp, #24
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d109      	bne.n	801330e <pvTimerGetTimerID+0x26>
 80132fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132fe:	f383 8811 	msr	BASEPRI, r3
 8013302:	f3bf 8f6f 	isb	sy
 8013306:	f3bf 8f4f 	dsb	sy
 801330a:	60fb      	str	r3, [r7, #12]
 801330c:	e7fe      	b.n	801330c <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 801330e:	f7fc ffad 	bl	801026c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	6a1b      	ldr	r3, [r3, #32]
 8013316:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8013318:	f7fc ffd6 	bl	80102c8 <vPortExitCritical>

	return pvReturn;
 801331c:	693b      	ldr	r3, [r7, #16]
}
 801331e:	4618      	mov	r0, r3
 8013320:	3718      	adds	r7, #24
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}

08013326 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8013326:	b580      	push	{r7, lr}
 8013328:	b084      	sub	sp, #16
 801332a:	af00      	add	r7, sp, #0
 801332c:	6078      	str	r0, [r7, #4]
 801332e:	460b      	mov	r3, r1
 8013330:	70fb      	strb	r3, [r7, #3]
 8013332:	4613      	mov	r3, r2
 8013334:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8013336:	f002 facb 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801333a:	f002 fa67 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 801333e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	2200      	movs	r2, #0
 8013344:	f062 0260 	orn	r2, r2, #96	; 0x60
 8013348:	701a      	strb	r2, [r3, #0]
 801334a:	2200      	movs	r2, #0
 801334c:	705a      	strb	r2, [r3, #1]
 801334e:	2200      	movs	r2, #0
 8013350:	709a      	strb	r2, [r3, #2]
 8013352:	2200      	movs	r2, #0
 8013354:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	2200      	movs	r2, #0
 801335a:	f042 0203 	orr.w	r2, r2, #3
 801335e:	711a      	strb	r2, [r3, #4]
 8013360:	2200      	movs	r2, #0
 8013362:	715a      	strb	r2, [r3, #5]
 8013364:	2200      	movs	r2, #0
 8013366:	719a      	strb	r2, [r3, #6]
 8013368:	2200      	movs	r2, #0
 801336a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801336c:	687a      	ldr	r2, [r7, #4]
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 8013372:	78fa      	ldrb	r2, [r7, #3]
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8013378:	78ba      	ldrb	r2, [r7, #2]
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 801337e:	f002 fa69 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013382:	f002 fa4f 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013386:	60f8      	str	r0, [r7, #12]
}
 8013388:	bf00      	nop
 801338a:	3710      	adds	r7, #16
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}

08013390 <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b086      	sub	sp, #24
 8013394:	af00      	add	r7, sp, #0
 8013396:	60f8      	str	r0, [r7, #12]
 8013398:	60b9      	str	r1, [r7, #8]
 801339a:	4613      	mov	r3, r2
 801339c:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 801339e:	f002 fa97 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80133a2:	f002 fa33 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 80133a6:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	2200      	movs	r2, #0
 80133ac:	f062 025f 	orn	r2, r2, #95	; 0x5f
 80133b0:	701a      	strb	r2, [r3, #0]
 80133b2:	2200      	movs	r2, #0
 80133b4:	705a      	strb	r2, [r3, #1]
 80133b6:	2200      	movs	r2, #0
 80133b8:	709a      	strb	r2, [r3, #2]
 80133ba:	2200      	movs	r2, #0
 80133bc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	2200      	movs	r2, #0
 80133c2:	f042 0203 	orr.w	r2, r2, #3
 80133c6:	711a      	strb	r2, [r3, #4]
 80133c8:	2200      	movs	r2, #0
 80133ca:	715a      	strb	r2, [r3, #5]
 80133cc:	2200      	movs	r2, #0
 80133ce:	719a      	strb	r2, [r3, #6]
 80133d0:	2200      	movs	r2, #0
 80133d2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80133d4:	68fa      	ldr	r2, [r7, #12]
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 80133da:	68ba      	ldr	r2, [r7, #8]
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 80133e0:	79fa      	ldrb	r2, [r7, #7]
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 80133e6:	f002 fa35 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80133ea:	f002 fa1b 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 80133ee:	6178      	str	r0, [r7, #20]
}
 80133f0:	bf00      	nop
 80133f2:	3718      	adds	r7, #24
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}

080133f8 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b084      	sub	sp, #16
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	460b      	mov	r3, r1
 8013402:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8013404:	f002 fa64 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013408:	f002 fa00 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 801340c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	2200      	movs	r2, #0
 8013412:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8013416:	701a      	strb	r2, [r3, #0]
 8013418:	2200      	movs	r2, #0
 801341a:	705a      	strb	r2, [r3, #1]
 801341c:	2200      	movs	r2, #0
 801341e:	709a      	strb	r2, [r3, #2]
 8013420:	2200      	movs	r2, #0
 8013422:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	2200      	movs	r2, #0
 8013428:	f042 0202 	orr.w	r2, r2, #2
 801342c:	711a      	strb	r2, [r3, #4]
 801342e:	2200      	movs	r2, #0
 8013430:	715a      	strb	r2, [r3, #5]
 8013432:	2200      	movs	r2, #0
 8013434:	719a      	strb	r2, [r3, #6]
 8013436:	2200      	movs	r2, #0
 8013438:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801343a:	687a      	ldr	r2, [r7, #4]
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8013440:	78fa      	ldrb	r2, [r7, #3]
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8013446:	f002 fa05 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801344a:	f002 f9eb 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 801344e:	60f8      	str	r0, [r7, #12]
}
 8013450:	bf00      	nop
 8013452:	3710      	adds	r7, #16
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}

08013458 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b084      	sub	sp, #16
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
 8013460:	460b      	mov	r3, r1
 8013462:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8013464:	f002 fa34 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013468:	f002 f9d0 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 801346c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	2200      	movs	r2, #0
 8013472:	f062 025d 	orn	r2, r2, #93	; 0x5d
 8013476:	701a      	strb	r2, [r3, #0]
 8013478:	2200      	movs	r2, #0
 801347a:	705a      	strb	r2, [r3, #1]
 801347c:	2200      	movs	r2, #0
 801347e:	709a      	strb	r2, [r3, #2]
 8013480:	2200      	movs	r2, #0
 8013482:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	2200      	movs	r2, #0
 8013488:	f042 0202 	orr.w	r2, r2, #2
 801348c:	711a      	strb	r2, [r3, #4]
 801348e:	2200      	movs	r2, #0
 8013490:	715a      	strb	r2, [r3, #5]
 8013492:	2200      	movs	r2, #0
 8013494:	719a      	strb	r2, [r3, #6]
 8013496:	2200      	movs	r2, #0
 8013498:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801349a:	687a      	ldr	r2, [r7, #4]
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 80134a0:	78fa      	ldrb	r2, [r7, #3]
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80134a6:	f002 f9d5 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80134aa:	f002 f9bb 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 80134ae:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	689b      	ldr	r3, [r3, #8]
 80134b4:	b2db      	uxtb	r3, r3
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3710      	adds	r7, #16
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}

080134be <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 80134be:	b580      	push	{r7, lr}
 80134c0:	b084      	sub	sp, #16
 80134c2:	af00      	add	r7, sp, #0
 80134c4:	6078      	str	r0, [r7, #4]
 80134c6:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 80134c8:	f002 fa02 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80134cc:	f002 f99e 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 80134d0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2200      	movs	r2, #0
 80134d6:	f062 0250 	orn	r2, r2, #80	; 0x50
 80134da:	701a      	strb	r2, [r3, #0]
 80134dc:	2200      	movs	r2, #0
 80134de:	705a      	strb	r2, [r3, #1]
 80134e0:	2200      	movs	r2, #0
 80134e2:	709a      	strb	r2, [r3, #2]
 80134e4:	2200      	movs	r2, #0
 80134e6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	2200      	movs	r2, #0
 80134ec:	f042 0202 	orr.w	r2, r2, #2
 80134f0:	711a      	strb	r2, [r3, #4]
 80134f2:	2200      	movs	r2, #0
 80134f4:	715a      	strb	r2, [r3, #5]
 80134f6:	2200      	movs	r2, #0
 80134f8:	719a      	strb	r2, [r3, #6]
 80134fa:	2200      	movs	r2, #0
 80134fc:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8013504:	683a      	ldr	r2, [r7, #0]
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 801350a:	f002 f9a3 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801350e:	f002 f989 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013512:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	689b      	ldr	r3, [r3, #8]
 8013518:	b2db      	uxtb	r3, r3
}
 801351a:	4618      	mov	r0, r3
 801351c:	3710      	adds	r7, #16
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}

08013522 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8013522:	b580      	push	{r7, lr}
 8013524:	b084      	sub	sp, #16
 8013526:	af00      	add	r7, sp, #0
 8013528:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801352a:	f002 f9d1 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801352e:	f002 f96d 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013532:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2200      	movs	r2, #0
 8013538:	f062 024d 	orn	r2, r2, #77	; 0x4d
 801353c:	701a      	strb	r2, [r3, #0]
 801353e:	2200      	movs	r2, #0
 8013540:	705a      	strb	r2, [r3, #1]
 8013542:	2200      	movs	r2, #0
 8013544:	709a      	strb	r2, [r3, #2]
 8013546:	2200      	movs	r2, #0
 8013548:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	2200      	movs	r2, #0
 801354e:	f042 0201 	orr.w	r2, r2, #1
 8013552:	711a      	strb	r2, [r3, #4]
 8013554:	2200      	movs	r2, #0
 8013556:	715a      	strb	r2, [r3, #5]
 8013558:	2200      	movs	r2, #0
 801355a:	719a      	strb	r2, [r3, #6]
 801355c:	2200      	movs	r2, #0
 801355e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8013560:	687a      	ldr	r2, [r7, #4]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013566:	f002 f975 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801356a:	f002 f95b 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 801356e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	689b      	ldr	r3, [r3, #8]
 8013574:	b2db      	uxtb	r3, r3
}
 8013576:	4618      	mov	r0, r3
 8013578:	3710      	adds	r7, #16
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}

0801357e <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 801357e:	b580      	push	{r7, lr}
 8013580:	b084      	sub	sp, #16
 8013582:	af00      	add	r7, sp, #0
 8013584:	6078      	str	r0, [r7, #4]
 8013586:	460b      	mov	r3, r1
 8013588:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 801358a:	f002 f9a1 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801358e:	f002 f93d 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013592:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	2200      	movs	r2, #0
 8013598:	f062 0256 	orn	r2, r2, #86	; 0x56
 801359c:	701a      	strb	r2, [r3, #0]
 801359e:	2200      	movs	r2, #0
 80135a0:	705a      	strb	r2, [r3, #1]
 80135a2:	2200      	movs	r2, #0
 80135a4:	709a      	strb	r2, [r3, #2]
 80135a6:	2200      	movs	r2, #0
 80135a8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	2200      	movs	r2, #0
 80135ae:	f042 0202 	orr.w	r2, r2, #2
 80135b2:	711a      	strb	r2, [r3, #4]
 80135b4:	2200      	movs	r2, #0
 80135b6:	715a      	strb	r2, [r3, #5]
 80135b8:	2200      	movs	r2, #0
 80135ba:	719a      	strb	r2, [r3, #6]
 80135bc:	2200      	movs	r2, #0
 80135be:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80135c0:	687a      	ldr	r2, [r7, #4]
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 80135c6:	887a      	ldrh	r2, [r7, #2]
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80135cc:	f002 f942 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80135d0:	f002 f928 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 80135d4:	60f8      	str	r0, [r7, #12]
}
 80135d6:	bf00      	nop
 80135d8:	3710      	adds	r7, #16
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd80      	pop	{r7, pc}

080135de <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 80135de:	b580      	push	{r7, lr}
 80135e0:	b084      	sub	sp, #16
 80135e2:	af00      	add	r7, sp, #0
 80135e4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80135e6:	f002 f973 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80135ea:	f002 f90f 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 80135ee:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	2200      	movs	r2, #0
 80135f4:	f062 0261 	orn	r2, r2, #97	; 0x61
 80135f8:	701a      	strb	r2, [r3, #0]
 80135fa:	2200      	movs	r2, #0
 80135fc:	705a      	strb	r2, [r3, #1]
 80135fe:	2200      	movs	r2, #0
 8013600:	709a      	strb	r2, [r3, #2]
 8013602:	2200      	movs	r2, #0
 8013604:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	2200      	movs	r2, #0
 801360a:	f042 0201 	orr.w	r2, r2, #1
 801360e:	711a      	strb	r2, [r3, #4]
 8013610:	2200      	movs	r2, #0
 8013612:	715a      	strb	r2, [r3, #5]
 8013614:	2200      	movs	r2, #0
 8013616:	719a      	strb	r2, [r3, #6]
 8013618:	2200      	movs	r2, #0
 801361a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801361c:	687a      	ldr	r2, [r7, #4]
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013622:	f002 f917 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013626:	f002 f8fd 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 801362a:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	689b      	ldr	r3, [r3, #8]
 8013630:	b2db      	uxtb	r3, r3
}
 8013632:	4618      	mov	r0, r3
 8013634:	3710      	adds	r7, #16
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}

0801363a <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 801363a:	b580      	push	{r7, lr}
 801363c:	b084      	sub	sp, #16
 801363e:	af00      	add	r7, sp, #0
 8013640:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013642:	f002 f945 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013646:	f002 f8e1 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 801364a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	2200      	movs	r2, #0
 8013650:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8013654:	701a      	strb	r2, [r3, #0]
 8013656:	2200      	movs	r2, #0
 8013658:	705a      	strb	r2, [r3, #1]
 801365a:	2200      	movs	r2, #0
 801365c:	709a      	strb	r2, [r3, #2]
 801365e:	2200      	movs	r2, #0
 8013660:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	2200      	movs	r2, #0
 8013666:	f042 0201 	orr.w	r2, r2, #1
 801366a:	711a      	strb	r2, [r3, #4]
 801366c:	2200      	movs	r2, #0
 801366e:	715a      	strb	r2, [r3, #5]
 8013670:	2200      	movs	r2, #0
 8013672:	719a      	strb	r2, [r3, #6]
 8013674:	2200      	movs	r2, #0
 8013676:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8013678:	687a      	ldr	r2, [r7, #4]
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801367e:	f002 f8e9 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013682:	f002 f8cf 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013686:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	689b      	ldr	r3, [r3, #8]
 801368c:	b2db      	uxtb	r3, r3
}
 801368e:	4618      	mov	r0, r3
 8013690:	3710      	adds	r7, #16
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}

08013696 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8013696:	b580      	push	{r7, lr}
 8013698:	b084      	sub	sp, #16
 801369a:	af00      	add	r7, sp, #0
 801369c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801369e:	f002 f917 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80136a2:	f002 f8b3 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 80136a6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	2200      	movs	r2, #0
 80136ac:	f062 0255 	orn	r2, r2, #85	; 0x55
 80136b0:	701a      	strb	r2, [r3, #0]
 80136b2:	2200      	movs	r2, #0
 80136b4:	705a      	strb	r2, [r3, #1]
 80136b6:	2200      	movs	r2, #0
 80136b8:	709a      	strb	r2, [r3, #2]
 80136ba:	2200      	movs	r2, #0
 80136bc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	2200      	movs	r2, #0
 80136c2:	f042 0201 	orr.w	r2, r2, #1
 80136c6:	711a      	strb	r2, [r3, #4]
 80136c8:	2200      	movs	r2, #0
 80136ca:	715a      	strb	r2, [r3, #5]
 80136cc:	2200      	movs	r2, #0
 80136ce:	719a      	strb	r2, [r3, #6]
 80136d0:	2200      	movs	r2, #0
 80136d2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80136d4:	687a      	ldr	r2, [r7, #4]
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80136da:	f002 f8bb 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80136de:	f002 f8a1 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 80136e2:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	689b      	ldr	r3, [r3, #8]
 80136e8:	b29b      	uxth	r3, r3
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3710      	adds	r7, #16
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}

080136f2 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 80136f2:	b580      	push	{r7, lr}
 80136f4:	b084      	sub	sp, #16
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80136fa:	f002 f8e9 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80136fe:	f002 f885 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013702:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2200      	movs	r2, #0
 8013708:	f062 0254 	orn	r2, r2, #84	; 0x54
 801370c:	701a      	strb	r2, [r3, #0]
 801370e:	2200      	movs	r2, #0
 8013710:	705a      	strb	r2, [r3, #1]
 8013712:	2200      	movs	r2, #0
 8013714:	709a      	strb	r2, [r3, #2]
 8013716:	2200      	movs	r2, #0
 8013718:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	2200      	movs	r2, #0
 801371e:	f042 0201 	orr.w	r2, r2, #1
 8013722:	711a      	strb	r2, [r3, #4]
 8013724:	2200      	movs	r2, #0
 8013726:	715a      	strb	r2, [r3, #5]
 8013728:	2200      	movs	r2, #0
 801372a:	719a      	strb	r2, [r3, #6]
 801372c:	2200      	movs	r2, #0
 801372e:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013736:	f002 f88d 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801373a:	f002 f873 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 801373e:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	689b      	ldr	r3, [r3, #8]
 8013744:	b2db      	uxtb	r3, r3
}
 8013746:	4618      	mov	r0, r3
 8013748:	3710      	adds	r7, #16
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}

0801374e <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 801374e:	b580      	push	{r7, lr}
 8013750:	b084      	sub	sp, #16
 8013752:	af00      	add	r7, sp, #0
 8013754:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013756:	f002 f8bb 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801375a:	f002 f857 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 801375e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	2200      	movs	r2, #0
 8013764:	f062 0253 	orn	r2, r2, #83	; 0x53
 8013768:	701a      	strb	r2, [r3, #0]
 801376a:	2200      	movs	r2, #0
 801376c:	705a      	strb	r2, [r3, #1]
 801376e:	2200      	movs	r2, #0
 8013770:	709a      	strb	r2, [r3, #2]
 8013772:	2200      	movs	r2, #0
 8013774:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	2200      	movs	r2, #0
 801377a:	f042 0201 	orr.w	r2, r2, #1
 801377e:	711a      	strb	r2, [r3, #4]
 8013780:	2200      	movs	r2, #0
 8013782:	715a      	strb	r2, [r3, #5]
 8013784:	2200      	movs	r2, #0
 8013786:	719a      	strb	r2, [r3, #6]
 8013788:	2200      	movs	r2, #0
 801378a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801378c:	687a      	ldr	r2, [r7, #4]
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013792:	f002 f85f 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013796:	f002 f845 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 801379a:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	689b      	ldr	r3, [r3, #8]
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3710      	adds	r7, #16
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}

080137a8 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b084      	sub	sp, #16
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
 80137b0:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 80137b2:	f002 f88d 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80137b6:	f002 f829 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 80137ba:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	2200      	movs	r2, #0
 80137c0:	f062 0259 	orn	r2, r2, #89	; 0x59
 80137c4:	701a      	strb	r2, [r3, #0]
 80137c6:	2200      	movs	r2, #0
 80137c8:	705a      	strb	r2, [r3, #1]
 80137ca:	2200      	movs	r2, #0
 80137cc:	709a      	strb	r2, [r3, #2]
 80137ce:	2200      	movs	r2, #0
 80137d0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	2200      	movs	r2, #0
 80137d6:	f042 0201 	orr.w	r2, r2, #1
 80137da:	711a      	strb	r2, [r3, #4]
 80137dc:	2200      	movs	r2, #0
 80137de:	715a      	strb	r2, [r3, #5]
 80137e0:	2200      	movs	r2, #0
 80137e2:	719a      	strb	r2, [r3, #6]
 80137e4:	2200      	movs	r2, #0
 80137e6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80137e8:	683a      	ldr	r2, [r7, #0]
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80137ee:	f002 f831 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80137f2:	f002 f817 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 80137f6:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	689b      	ldr	r3, [r3, #8]

}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3710      	adds	r7, #16
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}

08013804 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b086      	sub	sp, #24
 8013808:	af00      	add	r7, sp, #0
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	607a      	str	r2, [r7, #4]
 8013810:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 8013812:	f002 f85d 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013816:	f001 fff9 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 801381a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	2200      	movs	r2, #0
 8013820:	f062 0258 	orn	r2, r2, #88	; 0x58
 8013824:	701a      	strb	r2, [r3, #0]
 8013826:	2200      	movs	r2, #0
 8013828:	705a      	strb	r2, [r3, #1]
 801382a:	2200      	movs	r2, #0
 801382c:	709a      	strb	r2, [r3, #2]
 801382e:	2200      	movs	r2, #0
 8013830:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	2200      	movs	r2, #0
 8013836:	f042 0203 	orr.w	r2, r2, #3
 801383a:	711a      	strb	r2, [r3, #4]
 801383c:	2200      	movs	r2, #0
 801383e:	715a      	strb	r2, [r3, #5]
 8013840:	2200      	movs	r2, #0
 8013842:	719a      	strb	r2, [r3, #6]
 8013844:	2200      	movs	r2, #0
 8013846:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013848:	68ba      	ldr	r2, [r7, #8]
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8013854:	683a      	ldr	r2, [r7, #0]
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 801385a:	6a3a      	ldr	r2, [r7, #32]
 801385c:	697b      	ldr	r3, [r7, #20]
 801385e:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8013860:	f001 fff8 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013864:	f001 ffde 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013868:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	689b      	ldr	r3, [r3, #8]
 801386e:	b2db      	uxtb	r3, r3
}
 8013870:	4618      	mov	r0, r3
 8013872:	3718      	adds	r7, #24
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	460b      	mov	r3, r1
 8013882:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8013884:	f002 f824 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013888:	f001 ffc0 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 801388c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2200      	movs	r2, #0
 8013892:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8013896:	701a      	strb	r2, [r3, #0]
 8013898:	2200      	movs	r2, #0
 801389a:	705a      	strb	r2, [r3, #1]
 801389c:	2200      	movs	r2, #0
 801389e:	709a      	strb	r2, [r3, #2]
 80138a0:	2200      	movs	r2, #0
 80138a2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	2200      	movs	r2, #0
 80138a8:	f042 0201 	orr.w	r2, r2, #1
 80138ac:	711a      	strb	r2, [r3, #4]
 80138ae:	2200      	movs	r2, #0
 80138b0:	715a      	strb	r2, [r3, #5]
 80138b2:	2200      	movs	r2, #0
 80138b4:	719a      	strb	r2, [r3, #6]
 80138b6:	2200      	movs	r2, #0
 80138b8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 80138ba:	887a      	ldrh	r2, [r7, #2]
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80138c0:	f001 ffc8 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80138c4:	f001 ffae 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 80138c8:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	689b      	ldr	r3, [r3, #8]
 80138ce:	b2db      	uxtb	r3, r3
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	3710      	adds	r7, #16
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}

080138d8 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b084      	sub	sp, #16
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 80138e2:	f001 fff5 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80138e6:	f001 ff91 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 80138ea:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	2200      	movs	r2, #0
 80138f0:	f062 0249 	orn	r2, r2, #73	; 0x49
 80138f4:	701a      	strb	r2, [r3, #0]
 80138f6:	2200      	movs	r2, #0
 80138f8:	705a      	strb	r2, [r3, #1]
 80138fa:	2200      	movs	r2, #0
 80138fc:	709a      	strb	r2, [r3, #2]
 80138fe:	2200      	movs	r2, #0
 8013900:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	2200      	movs	r2, #0
 8013906:	f042 0201 	orr.w	r2, r2, #1
 801390a:	711a      	strb	r2, [r3, #4]
 801390c:	2200      	movs	r2, #0
 801390e:	715a      	strb	r2, [r3, #5]
 8013910:	2200      	movs	r2, #0
 8013912:	719a      	strb	r2, [r3, #6]
 8013914:	2200      	movs	r2, #0
 8013916:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8013918:	683a      	ldr	r2, [r7, #0]
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801391e:	f001 ff99 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013922:	f001 ff7f 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013926:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	689b      	ldr	r3, [r3, #8]
 801392c:	b2db      	uxtb	r3, r3
}
 801392e:	4618      	mov	r0, r3
 8013930:	3710      	adds	r7, #16
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}

08013936 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8013936:	b580      	push	{r7, lr}
 8013938:	b086      	sub	sp, #24
 801393a:	af00      	add	r7, sp, #0
 801393c:	60f8      	str	r0, [r7, #12]
 801393e:	60b9      	str	r1, [r7, #8]
 8013940:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8013942:	f001 ffc5 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013946:	f001 ff61 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 801394a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	2200      	movs	r2, #0
 8013950:	f062 0257 	orn	r2, r2, #87	; 0x57
 8013954:	701a      	strb	r2, [r3, #0]
 8013956:	2200      	movs	r2, #0
 8013958:	705a      	strb	r2, [r3, #1]
 801395a:	2200      	movs	r2, #0
 801395c:	709a      	strb	r2, [r3, #2]
 801395e:	2200      	movs	r2, #0
 8013960:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	2200      	movs	r2, #0
 8013966:	f042 0202 	orr.w	r2, r2, #2
 801396a:	711a      	strb	r2, [r3, #4]
 801396c:	2200      	movs	r2, #0
 801396e:	715a      	strb	r2, [r3, #5]
 8013970:	2200      	movs	r2, #0
 8013972:	719a      	strb	r2, [r3, #6]
 8013974:	2200      	movs	r2, #0
 8013976:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013978:	68ba      	ldr	r2, [r7, #8]
 801397a:	697b      	ldr	r3, [r7, #20]
 801397c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8013984:	f001 ff66 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013988:	f001 ff4c 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 801398c:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	689b      	ldr	r3, [r3, #8]
 8013992:	b2db      	uxtb	r3, r3
}
 8013994:	4618      	mov	r0, r3
 8013996:	3718      	adds	r7, #24
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}

0801399c <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 80139a2:	f001 ff95 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80139a6:	f001 ff31 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 80139aa:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2200      	movs	r2, #0
 80139b0:	f062 026b 	orn	r2, r2, #107	; 0x6b
 80139b4:	701a      	strb	r2, [r3, #0]
 80139b6:	2200      	movs	r2, #0
 80139b8:	705a      	strb	r2, [r3, #1]
 80139ba:	2200      	movs	r2, #0
 80139bc:	709a      	strb	r2, [r3, #2]
 80139be:	2200      	movs	r2, #0
 80139c0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2200      	movs	r2, #0
 80139c6:	711a      	strb	r2, [r3, #4]
 80139c8:	2200      	movs	r2, #0
 80139ca:	715a      	strb	r2, [r3, #5]
 80139cc:	2200      	movs	r2, #0
 80139ce:	719a      	strb	r2, [r3, #6]
 80139d0:	2200      	movs	r2, #0
 80139d2:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 80139d4:	f001 ff3e 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80139d8:	f001 ff24 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 80139dc:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	689b      	ldr	r3, [r3, #8]
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	3708      	adds	r7, #8
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}

080139ea <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 80139ea:	b580      	push	{r7, lr}
 80139ec:	b084      	sub	sp, #16
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80139f2:	f001 ff6d 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80139f6:	f001 ff09 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 80139fa:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	2200      	movs	r2, #0
 8013a00:	f062 0269 	orn	r2, r2, #105	; 0x69
 8013a04:	701a      	strb	r2, [r3, #0]
 8013a06:	2200      	movs	r2, #0
 8013a08:	705a      	strb	r2, [r3, #1]
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	709a      	strb	r2, [r3, #2]
 8013a0e:	2200      	movs	r2, #0
 8013a10:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2200      	movs	r2, #0
 8013a16:	711a      	strb	r2, [r3, #4]
 8013a18:	2200      	movs	r2, #0
 8013a1a:	715a      	strb	r2, [r3, #5]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	719a      	strb	r2, [r3, #6]
 8013a20:	2200      	movs	r2, #0
 8013a22:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8013a24:	f001 ff16 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013a28:	f001 fefc 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013a2c:	60f8      	str	r0, [r7, #12]
}
 8013a2e:	bf00      	nop
 8013a30:	3710      	adds	r7, #16
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}
	...

08013a38 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b086      	sub	sp, #24
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	60f8      	str	r0, [r7, #12]
 8013a40:	60b9      	str	r1, [r7, #8]
 8013a42:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8013a44:	f001 ff44 	bl	80158d0 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8013a48:	4a15      	ldr	r2, [pc, #84]	; (8013aa0 <otSetStateChangedCallback+0x68>)
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013a4e:	f001 fedd 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013a52:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	2200      	movs	r2, #0
 8013a58:	f062 0268 	orn	r2, r2, #104	; 0x68
 8013a5c:	701a      	strb	r2, [r3, #0]
 8013a5e:	2200      	movs	r2, #0
 8013a60:	705a      	strb	r2, [r3, #1]
 8013a62:	2200      	movs	r2, #0
 8013a64:	709a      	strb	r2, [r3, #2]
 8013a66:	2200      	movs	r2, #0
 8013a68:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	f042 0201 	orr.w	r2, r2, #1
 8013a72:	711a      	strb	r2, [r3, #4]
 8013a74:	2200      	movs	r2, #0
 8013a76:	715a      	strb	r2, [r3, #5]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	719a      	strb	r2, [r3, #6]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 8013a80:	687a      	ldr	r2, [r7, #4]
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013a86:	f001 fee5 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013a8a:	f001 fecb 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013a8e:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	689b      	ldr	r3, [r3, #8]
 8013a94:	b2db      	uxtb	r3, r3
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3718      	adds	r7, #24
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}
 8013a9e:	bf00      	nop
 8013aa0:	200273e8 	.word	0x200273e8

08013aa4 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013aac:	f001 ff10 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013ab0:	f001 feac 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013ab4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	f062 0264 	orn	r2, r2, #100	; 0x64
 8013abe:	701a      	strb	r2, [r3, #0]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	705a      	strb	r2, [r3, #1]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	709a      	strb	r2, [r3, #2]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	711a      	strb	r2, [r3, #4]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	715a      	strb	r2, [r3, #5]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	719a      	strb	r2, [r3, #6]
 8013ada:	2200      	movs	r2, #0
 8013adc:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8013ade:	f001 feb9 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013ae2:	f001 fe9f 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013ae6:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	689b      	ldr	r3, [r3, #8]
 8013aec:	b2db      	uxtb	r3, r3
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3710      	adds	r7, #16
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}

08013af6 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8013af6:	b580      	push	{r7, lr}
 8013af8:	b084      	sub	sp, #16
 8013afa:	af00      	add	r7, sp, #0
 8013afc:	6078      	str	r0, [r7, #4]
 8013afe:	460b      	mov	r3, r1
 8013b00:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8013b02:	f001 fee5 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013b06:	f001 fe81 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013b0a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8013b14:	701a      	strb	r2, [r3, #0]
 8013b16:	2200      	movs	r2, #0
 8013b18:	705a      	strb	r2, [r3, #1]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	709a      	strb	r2, [r3, #2]
 8013b1e:	2200      	movs	r2, #0
 8013b20:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2200      	movs	r2, #0
 8013b26:	f042 0201 	orr.w	r2, r2, #1
 8013b2a:	711a      	strb	r2, [r3, #4]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	715a      	strb	r2, [r3, #5]
 8013b30:	2200      	movs	r2, #0
 8013b32:	719a      	strb	r2, [r3, #6]
 8013b34:	2200      	movs	r2, #0
 8013b36:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8013b38:	78fa      	ldrb	r2, [r7, #3]
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013b3e:	f001 fe89 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013b42:	f001 fe6f 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013b46:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	689b      	ldr	r3, [r3, #8]
 8013b4c:	b2db      	uxtb	r3, r3
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3710      	adds	r7, #16
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}

08013b56 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 8013b56:	b580      	push	{r7, lr}
 8013b58:	b084      	sub	sp, #16
 8013b5a:	af00      	add	r7, sp, #0
 8013b5c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013b5e:	f001 feb7 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013b62:	f001 fe53 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013b66:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8013b70:	701a      	strb	r2, [r3, #0]
 8013b72:	2200      	movs	r2, #0
 8013b74:	705a      	strb	r2, [r3, #1]
 8013b76:	2200      	movs	r2, #0
 8013b78:	709a      	strb	r2, [r3, #2]
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2200      	movs	r2, #0
 8013b82:	711a      	strb	r2, [r3, #4]
 8013b84:	2200      	movs	r2, #0
 8013b86:	715a      	strb	r2, [r3, #5]
 8013b88:	2200      	movs	r2, #0
 8013b8a:	719a      	strb	r2, [r3, #6]
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8013b90:	f001 fe60 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013b94:	f001 fe46 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013b98:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	689b      	ldr	r3, [r3, #8]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	bf14      	ite	ne
 8013ba2:	2301      	movne	r3, #1
 8013ba4:	2300      	moveq	r3, #0
 8013ba6:	b2db      	uxtb	r3, r3
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3710      	adds	r7, #16
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}

08013bb0 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013bb8:	f001 fe8a 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013bbc:	f001 fe26 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013bc0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8013bca:	701a      	strb	r2, [r3, #0]
 8013bcc:	2200      	movs	r2, #0
 8013bce:	705a      	strb	r2, [r3, #1]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	709a      	strb	r2, [r3, #2]
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	2200      	movs	r2, #0
 8013bdc:	711a      	strb	r2, [r3, #4]
 8013bde:	2200      	movs	r2, #0
 8013be0:	715a      	strb	r2, [r3, #5]
 8013be2:	2200      	movs	r2, #0
 8013be4:	719a      	strb	r2, [r3, #6]
 8013be6:	2200      	movs	r2, #0
 8013be8:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8013bea:	f001 fe33 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013bee:	f001 fe19 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013bf2:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	689b      	ldr	r3, [r3, #8]
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3710      	adds	r7, #16
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}

08013c00 <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
 8013c08:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013c0a:	f001 fe61 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013c0e:	f001 fdfd 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013c12:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	2200      	movs	r2, #0
 8013c18:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8013c1c:	701a      	strb	r2, [r3, #0]
 8013c1e:	2200      	movs	r2, #0
 8013c20:	705a      	strb	r2, [r3, #1]
 8013c22:	2200      	movs	r2, #0
 8013c24:	709a      	strb	r2, [r3, #2]
 8013c26:	2200      	movs	r2, #0
 8013c28:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	f042 0202 	orr.w	r2, r2, #2
 8013c32:	711a      	strb	r2, [r3, #4]
 8013c34:	2200      	movs	r2, #0
 8013c36:	715a      	strb	r2, [r3, #5]
 8013c38:	2200      	movs	r2, #0
 8013c3a:	719a      	strb	r2, [r3, #6]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 8013c40:	687a      	ldr	r2, [r7, #4]
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 8013c46:	683a      	ldr	r2, [r7, #0]
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8013c4c:	f001 fe02 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013c50:	f001 fde8 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013c54:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	689b      	ldr	r3, [r3, #8]
 8013c5a:	b2db      	uxtb	r3, r3
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3710      	adds	r7, #16
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}

08013c64 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b084      	sub	sp, #16
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	460b      	mov	r3, r1
 8013c6e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8013c70:	f001 fe2e 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013c74:	f001 fdca 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013c78:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	f042 0208 	orr.w	r2, r2, #8
 8013c82:	701a      	strb	r2, [r3, #0]
 8013c84:	2200      	movs	r2, #0
 8013c86:	705a      	strb	r2, [r3, #1]
 8013c88:	2200      	movs	r2, #0
 8013c8a:	709a      	strb	r2, [r3, #2]
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	2200      	movs	r2, #0
 8013c94:	f042 0201 	orr.w	r2, r2, #1
 8013c98:	711a      	strb	r2, [r3, #4]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	715a      	strb	r2, [r3, #5]
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	719a      	strb	r2, [r3, #6]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8013ca6:	78fa      	ldrb	r2, [r7, #3]
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013cac:	f001 fdd2 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013cb0:	f001 fdb8 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013cb4:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	689b      	ldr	r3, [r3, #8]
 8013cba:	b2db      	uxtb	r3, r3
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3710      	adds	r7, #16
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}

08013cc4 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b084      	sub	sp, #16
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	460b      	mov	r3, r1
 8013cce:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8013cd0:	f001 fdfe 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013cd4:	f001 fd9a 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013cd8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	f042 020f 	orr.w	r2, r2, #15
 8013ce2:	701a      	strb	r2, [r3, #0]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	705a      	strb	r2, [r3, #1]
 8013ce8:	2200      	movs	r2, #0
 8013cea:	709a      	strb	r2, [r3, #2]
 8013cec:	2200      	movs	r2, #0
 8013cee:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	f042 0201 	orr.w	r2, r2, #1
 8013cf8:	711a      	strb	r2, [r3, #4]
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	715a      	strb	r2, [r3, #5]
 8013cfe:	2200      	movs	r2, #0
 8013d00:	719a      	strb	r2, [r3, #6]
 8013d02:	2200      	movs	r2, #0
 8013d04:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8013d06:	887a      	ldrh	r2, [r7, #2]
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013d0c:	f001 fda2 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013d10:	f001 fd88 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013d14:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	689b      	ldr	r3, [r3, #8]
 8013d1a:	b2db      	uxtb	r3, r3
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3710      	adds	r7, #16
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}

08013d24 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b084      	sub	sp, #16
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013d2c:	f001 fdd0 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013d30:	f001 fd6c 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013d34:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	f062 0246 	orn	r2, r2, #70	; 0x46
 8013d3e:	701a      	strb	r2, [r3, #0]
 8013d40:	2200      	movs	r2, #0
 8013d42:	705a      	strb	r2, [r3, #1]
 8013d44:	2200      	movs	r2, #0
 8013d46:	709a      	strb	r2, [r3, #2]
 8013d48:	2200      	movs	r2, #0
 8013d4a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	2200      	movs	r2, #0
 8013d50:	f042 0201 	orr.w	r2, r2, #1
 8013d54:	711a      	strb	r2, [r3, #4]
 8013d56:	2200      	movs	r2, #0
 8013d58:	715a      	strb	r2, [r3, #5]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	719a      	strb	r2, [r3, #6]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013d68:	f001 fd74 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013d6c:	f001 fd5a 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013d70:	60f8      	str	r0, [r7, #12]
}
 8013d72:	bf00      	nop
 8013d74:	3710      	adds	r7, #16
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}

08013d7a <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 8013d7a:	b580      	push	{r7, lr}
 8013d7c:	b084      	sub	sp, #16
 8013d7e:	af00      	add	r7, sp, #0
 8013d80:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013d82:	f001 fda5 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013d86:	f001 fd41 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013d8a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	2200      	movs	r2, #0
 8013d90:	f062 0243 	orn	r2, r2, #67	; 0x43
 8013d94:	701a      	strb	r2, [r3, #0]
 8013d96:	2200      	movs	r2, #0
 8013d98:	705a      	strb	r2, [r3, #1]
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	709a      	strb	r2, [r3, #2]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	2200      	movs	r2, #0
 8013da6:	f042 0201 	orr.w	r2, r2, #1
 8013daa:	711a      	strb	r2, [r3, #4]
 8013dac:	2200      	movs	r2, #0
 8013dae:	715a      	strb	r2, [r3, #5]
 8013db0:	2200      	movs	r2, #0
 8013db2:	719a      	strb	r2, [r3, #6]
 8013db4:	2200      	movs	r2, #0
 8013db6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013db8:	687a      	ldr	r2, [r7, #4]
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013dbe:	f001 fd49 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013dc2:	f001 fd2f 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013dc6:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	689b      	ldr	r3, [r3, #8]
 8013dcc:	b29b      	uxth	r3, r3
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3710      	adds	r7, #16
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}

08013dd6 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8013dd6:	b580      	push	{r7, lr}
 8013dd8:	b086      	sub	sp, #24
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	60f8      	str	r0, [r7, #12]
 8013dde:	60b9      	str	r1, [r7, #8]
 8013de0:	4613      	mov	r3, r2
 8013de2:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 8013de4:	f001 fd74 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013de8:	f001 fd10 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013dec:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	2200      	movs	r2, #0
 8013df2:	f062 023e 	orn	r2, r2, #62	; 0x3e
 8013df6:	701a      	strb	r2, [r3, #0]
 8013df8:	2200      	movs	r2, #0
 8013dfa:	705a      	strb	r2, [r3, #1]
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	709a      	strb	r2, [r3, #2]
 8013e00:	2200      	movs	r2, #0
 8013e02:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	2200      	movs	r2, #0
 8013e08:	f042 0203 	orr.w	r2, r2, #3
 8013e0c:	711a      	strb	r2, [r3, #4]
 8013e0e:	2200      	movs	r2, #0
 8013e10:	715a      	strb	r2, [r3, #5]
 8013e12:	2200      	movs	r2, #0
 8013e14:	719a      	strb	r2, [r3, #6]
 8013e16:	2200      	movs	r2, #0
 8013e18:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013e1a:	68fa      	ldr	r2, [r7, #12]
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 8013e20:	68ba      	ldr	r2, [r7, #8]
 8013e22:	697b      	ldr	r3, [r7, #20]
 8013e24:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 8013e26:	88fa      	ldrh	r2, [r7, #6]
 8013e28:	697b      	ldr	r3, [r7, #20]
 8013e2a:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8013e2c:	f001 fd12 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013e30:	f001 fcf8 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013e34:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8013e36:	697b      	ldr	r3, [r7, #20]
 8013e38:	689b      	ldr	r3, [r3, #8]
 8013e3a:	b2db      	uxtb	r3, r3
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3718      	adds	r7, #24
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b086      	sub	sp, #24
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	60f8      	str	r0, [r7, #12]
 8013e4c:	607a      	str	r2, [r7, #4]
 8013e4e:	461a      	mov	r2, r3
 8013e50:	460b      	mov	r3, r1
 8013e52:	817b      	strh	r3, [r7, #10]
 8013e54:	4613      	mov	r3, r2
 8013e56:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 8013e58:	f001 fd3a 	bl	80158d0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013e5c:	f001 fcd6 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8013e60:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	2200      	movs	r2, #0
 8013e66:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8013e6a:	701a      	strb	r2, [r3, #0]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	705a      	strb	r2, [r3, #1]
 8013e70:	2200      	movs	r2, #0
 8013e72:	709a      	strb	r2, [r3, #2]
 8013e74:	2200      	movs	r2, #0
 8013e76:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	f042 0204 	orr.w	r2, r2, #4
 8013e80:	711a      	strb	r2, [r3, #4]
 8013e82:	2200      	movs	r2, #0
 8013e84:	715a      	strb	r2, [r3, #5]
 8013e86:	2200      	movs	r2, #0
 8013e88:	719a      	strb	r2, [r3, #6]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013e8e:	68fa      	ldr	r2, [r7, #12]
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8013e94:	897a      	ldrh	r2, [r7, #10]
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 8013ea0:	893a      	ldrh	r2, [r7, #8]
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8013ea6:	f001 fcd5 	bl	8015854 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013eaa:	f001 fcbb 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013eae:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 8013eb0:	697b      	ldr	r3, [r7, #20]
 8013eb2:	689b      	ldr	r3, [r3, #8]
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3718      	adds	r7, #24
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8013ebc:	b5b0      	push	{r4, r5, r7, lr}
 8013ebe:	b084      	sub	sp, #16
 8013ec0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8013ec6:	f001 fcb9 	bl	801583c <THREAD_Get_NotificationPayloadBuffer>
 8013eca:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	3b01      	subs	r3, #1
 8013ed2:	2b14      	cmp	r3, #20
 8013ed4:	f200 8172 	bhi.w	80141bc <OpenThread_CallBack_Processing+0x300>
 8013ed8:	a201      	add	r2, pc, #4	; (adr r2, 8013ee0 <OpenThread_CallBack_Processing+0x24>)
 8013eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ede:	bf00      	nop
 8013ee0:	08013f35 	.word	0x08013f35
 8013ee4:	08013f51 	.word	0x08013f51
 8013ee8:	08013f7d 	.word	0x08013f7d
 8013eec:	08013fb1 	.word	0x08013fb1
 8013ef0:	08013fbd 	.word	0x08013fbd
 8013ef4:	08013fdb 	.word	0x08013fdb
 8013ef8:	08013ff9 	.word	0x08013ff9
 8013efc:	08014017 	.word	0x08014017
 8013f00:	08014035 	.word	0x08014035
 8013f04:	08014053 	.word	0x08014053
 8013f08:	08014075 	.word	0x08014075
 8013f0c:	08014093 	.word	0x08014093
 8013f10:	080141bd 	.word	0x080141bd
 8013f14:	080140b9 	.word	0x080140b9
 8013f18:	080140ed 	.word	0x080140ed
 8013f1c:	08014115 	.word	0x08014115
 8013f20:	08014133 	.word	0x08014133
 8013f24:	08014157 	.word	0x08014157
 8013f28:	0801417f 	.word	0x0801417f
 8013f2c:	080141bd 	.word	0x080141bd
 8013f30:	0801419d 	.word	0x0801419d
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 8013f34:	4ba3      	ldr	r3, [pc, #652]	; (80141c4 <OpenThread_CallBack_Processing+0x308>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	f000 8167 	beq.w	801420c <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 8013f3e:	4ba1      	ldr	r3, [pc, #644]	; (80141c4 <OpenThread_CallBack_Processing+0x308>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	683a      	ldr	r2, [r7, #0]
 8013f44:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 8013f46:	683a      	ldr	r2, [r7, #0]
 8013f48:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 8013f4a:	4611      	mov	r1, r2
 8013f4c:	4798      	blx	r3
        }
        break;
 8013f4e:	e15d      	b.n	801420c <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	689b      	ldr	r3, [r3, #8]
 8013f54:	461a      	mov	r2, r3
 8013f56:	4b9c      	ldr	r3, [pc, #624]	; (80141c8 <OpenThread_CallBack_Processing+0x30c>)
 8013f58:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 8013f5a:	4b9b      	ldr	r3, [pc, #620]	; (80141c8 <OpenThread_CallBack_Processing+0x30c>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	f000 8156 	beq.w	8014210 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013f64:	4b98      	ldr	r3, [pc, #608]	; (80141c8 <OpenThread_CallBack_Processing+0x30c>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	683a      	ldr	r2, [r7, #0]
 8013f6a:	68d2      	ldr	r2, [r2, #12]
 8013f6c:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 8013f6e:	683a      	ldr	r2, [r7, #0]
 8013f70:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013f72:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 8013f74:	683a      	ldr	r2, [r7, #0]
 8013f76:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013f78:	4798      	blx	r3
        }
        break;
 8013f7a:	e149      	b.n	8014210 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	689b      	ldr	r3, [r3, #8]
 8013f80:	461a      	mov	r2, r3
 8013f82:	4b92      	ldr	r3, [pc, #584]	; (80141cc <OpenThread_CallBack_Processing+0x310>)
 8013f84:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 8013f86:	4b91      	ldr	r3, [pc, #580]	; (80141cc <OpenThread_CallBack_Processing+0x310>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	f000 8142 	beq.w	8014214 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013f90:	4b8e      	ldr	r3, [pc, #568]	; (80141cc <OpenThread_CallBack_Processing+0x310>)
 8013f92:	681c      	ldr	r4, [r3, #0]
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	68db      	ldr	r3, [r3, #12]
 8013f98:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013f9e:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013fa4:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 8013fa6:	683b      	ldr	r3, [r7, #0]
 8013fa8:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013faa:	b2db      	uxtb	r3, r3
 8013fac:	47a0      	blx	r4
        }
        break;
 8013fae:	e131      	b.n	8014214 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 8013fb0:	2001      	movs	r0, #1
 8013fb2:	f000 f968 	bl	8014286 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 8013fb6:	f7f3 f97c 	bl	80072b2 <HAL_NVIC_SystemReset>
        break;
 8013fba:	e14a      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 8013fbc:	4b84      	ldr	r3, [pc, #528]	; (80141d0 <OpenThread_CallBack_Processing+0x314>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	f000 8129 	beq.w	8014218 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8013fc6:	4b82      	ldr	r3, [pc, #520]	; (80141d0 <OpenThread_CallBack_Processing+0x314>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	683a      	ldr	r2, [r7, #0]
 8013fcc:	6892      	ldr	r2, [r2, #8]
 8013fce:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8013fd0:	683a      	ldr	r2, [r7, #0]
 8013fd2:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8013fd4:	4611      	mov	r1, r2
 8013fd6:	4798      	blx	r3
        }
        break;
 8013fd8:	e11e      	b.n	8014218 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 8013fda:	4b7e      	ldr	r3, [pc, #504]	; (80141d4 <OpenThread_CallBack_Processing+0x318>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	f000 811c 	beq.w	801421c <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8013fe4:	4b7b      	ldr	r3, [pc, #492]	; (80141d4 <OpenThread_CallBack_Processing+0x318>)
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	683a      	ldr	r2, [r7, #0]
 8013fea:	6892      	ldr	r2, [r2, #8]
 8013fec:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 8013fee:	683a      	ldr	r2, [r7, #0]
 8013ff0:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8013ff2:	2000      	movs	r0, #0
 8013ff4:	4798      	blx	r3
        }
        break;
 8013ff6:	e111      	b.n	801421c <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 8013ff8:	4b77      	ldr	r3, [pc, #476]	; (80141d8 <OpenThread_CallBack_Processing+0x31c>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	f000 810f 	beq.w	8014220 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8014002:	4b75      	ldr	r3, [pc, #468]	; (80141d8 <OpenThread_CallBack_Processing+0x31c>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	683a      	ldr	r2, [r7, #0]
 8014008:	6892      	ldr	r2, [r2, #8]
 801400a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 801400c:	683a      	ldr	r2, [r7, #0]
 801400e:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8014010:	4611      	mov	r1, r2
 8014012:	4798      	blx	r3
        }
        break;
 8014014:	e104      	b.n	8014220 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 8014016:	4b71      	ldr	r3, [pc, #452]	; (80141dc <OpenThread_CallBack_Processing+0x320>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	2b00      	cmp	r3, #0
 801401c:	f000 8102 	beq.w	8014224 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8014020:	4b6e      	ldr	r3, [pc, #440]	; (80141dc <OpenThread_CallBack_Processing+0x320>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	683a      	ldr	r2, [r7, #0]
 8014026:	6892      	ldr	r2, [r2, #8]
 8014028:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 801402a:	683a      	ldr	r2, [r7, #0]
 801402c:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 801402e:	4611      	mov	r1, r2
 8014030:	4798      	blx	r3
        }
        break;
 8014032:	e0f7      	b.n	8014224 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 8014034:	4b6a      	ldr	r3, [pc, #424]	; (80141e0 <OpenThread_CallBack_Processing+0x324>)
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	f000 80f5 	beq.w	8014228 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801403e:	4b68      	ldr	r3, [pc, #416]	; (80141e0 <OpenThread_CallBack_Processing+0x324>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	683a      	ldr	r2, [r7, #0]
 8014044:	6892      	ldr	r2, [r2, #8]
 8014046:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8014048:	683a      	ldr	r2, [r7, #0]
 801404a:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801404c:	4611      	mov	r1, r2
 801404e:	4798      	blx	r3
        }
        break;
 8014050:	e0ea      	b.n	8014228 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8014052:	4b64      	ldr	r3, [pc, #400]	; (80141e4 <OpenThread_CallBack_Processing+0x328>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	2b00      	cmp	r3, #0
 8014058:	f000 80e8 	beq.w	801422c <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801405c:	4b61      	ldr	r3, [pc, #388]	; (80141e4 <OpenThread_CallBack_Processing+0x328>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	683a      	ldr	r2, [r7, #0]
 8014062:	6892      	ldr	r2, [r2, #8]
 8014064:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8014066:	683a      	ldr	r2, [r7, #0]
 8014068:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801406a:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 801406c:	683a      	ldr	r2, [r7, #0]
 801406e:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8014070:	4798      	blx	r3
        }
        break;
 8014072:	e0db      	b.n	801422c <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 8014074:	4b5c      	ldr	r3, [pc, #368]	; (80141e8 <OpenThread_CallBack_Processing+0x32c>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	2b00      	cmp	r3, #0
 801407a:	f000 80d9 	beq.w	8014230 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801407e:	4b5a      	ldr	r3, [pc, #360]	; (80141e8 <OpenThread_CallBack_Processing+0x32c>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	683a      	ldr	r2, [r7, #0]
 8014084:	6892      	ldr	r2, [r2, #8]
 8014086:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8014088:	683a      	ldr	r2, [r7, #0]
 801408a:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801408c:	4611      	mov	r1, r2
 801408e:	4798      	blx	r3
        }
        break;
 8014090:	e0ce      	b.n	8014230 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 8014092:	4b56      	ldr	r3, [pc, #344]	; (80141ec <OpenThread_CallBack_Processing+0x330>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	f000 80cc 	beq.w	8014234 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 801409c:	4b53      	ldr	r3, [pc, #332]	; (80141ec <OpenThread_CallBack_Processing+0x330>)
 801409e:	681c      	ldr	r4, [r3, #0]
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80140a8:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80140ae:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80140b4:	47a0      	blx	r4
        }
        break;
 80140b6:	e0bd      	b.n	8014234 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 80140b8:	4b4d      	ldr	r3, [pc, #308]	; (80141f0 <OpenThread_CallBack_Processing+0x334>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	f000 80bb 	beq.w	8014238 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80140c2:	4b4b      	ldr	r3, [pc, #300]	; (80141f0 <OpenThread_CallBack_Processing+0x334>)
 80140c4:	681c      	ldr	r4, [r3, #0]
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	689b      	ldr	r3, [r3, #8]
 80140ca:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80140d0:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 80140d2:	683b      	ldr	r3, [r7, #0]
 80140d4:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80140d6:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80140e0:	b2db      	uxtb	r3, r3
 80140e2:	9300      	str	r3, [sp, #0]
 80140e4:	4613      	mov	r3, r2
 80140e6:	462a      	mov	r2, r5
 80140e8:	47a0      	blx	r4
        }
        break;
 80140ea:	e0a5      	b.n	8014238 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 80140ec:	4b41      	ldr	r3, [pc, #260]	; (80141f4 <OpenThread_CallBack_Processing+0x338>)
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	f000 80a3 	beq.w	801423c <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80140f6:	4b3f      	ldr	r3, [pc, #252]	; (80141f4 <OpenThread_CallBack_Processing+0x338>)
 80140f8:	681c      	ldr	r4, [r3, #0]
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	689b      	ldr	r3, [r3, #8]
 80140fe:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8014104:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 8014106:	683b      	ldr	r3, [r7, #0]
 8014108:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 801410a:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8014110:	47a0      	blx	r4
        }
        break;
 8014112:	e093      	b.n	801423c <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 8014114:	4b38      	ldr	r3, [pc, #224]	; (80141f8 <OpenThread_CallBack_Processing+0x33c>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	f000 8091 	beq.w	8014240 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 801411e:	4b36      	ldr	r3, [pc, #216]	; (80141f8 <OpenThread_CallBack_Processing+0x33c>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	683a      	ldr	r2, [r7, #0]
 8014124:	6892      	ldr	r2, [r2, #8]
 8014126:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8014128:	683a      	ldr	r2, [r7, #0]
 801412a:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 801412c:	4611      	mov	r1, r2
 801412e:	4798      	blx	r3
        }
        break;
 8014130:	e086      	b.n	8014240 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8014132:	4b32      	ldr	r3, [pc, #200]	; (80141fc <OpenThread_CallBack_Processing+0x340>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	2b00      	cmp	r3, #0
 8014138:	f000 8084 	beq.w	8014244 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801413c:	4b2f      	ldr	r3, [pc, #188]	; (80141fc <OpenThread_CallBack_Processing+0x340>)
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	683a      	ldr	r2, [r7, #0]
 8014142:	6892      	ldr	r2, [r2, #8]
 8014144:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8014146:	683a      	ldr	r2, [r7, #0]
 8014148:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801414a:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 801414c:	683a      	ldr	r2, [r7, #0]
 801414e:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8014150:	b2d2      	uxtb	r2, r2
 8014152:	4798      	blx	r3
        }
        break;
 8014154:	e076      	b.n	8014244 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8014156:	4b2a      	ldr	r3, [pc, #168]	; (8014200 <OpenThread_CallBack_Processing+0x344>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d074      	beq.n	8014248 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801415e:	4b28      	ldr	r3, [pc, #160]	; (8014200 <OpenThread_CallBack_Processing+0x344>)
 8014160:	681c      	ldr	r4, [r3, #0]
 8014162:	683b      	ldr	r3, [r7, #0]
 8014164:	689b      	ldr	r3, [r3, #8]
 8014166:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801416c:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8014172:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8014178:	b2db      	uxtb	r3, r3
 801417a:	47a0      	blx	r4
        }
        break;
 801417c:	e064      	b.n	8014248 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 801417e:	4b21      	ldr	r3, [pc, #132]	; (8014204 <OpenThread_CallBack_Processing+0x348>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d062      	beq.n	801424c <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8014186:	4b1f      	ldr	r3, [pc, #124]	; (8014204 <OpenThread_CallBack_Processing+0x348>)
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	683a      	ldr	r2, [r7, #0]
 801418c:	6892      	ldr	r2, [r2, #8]
 801418e:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8014190:	683a      	ldr	r2, [r7, #0]
 8014192:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8014194:	b252      	sxtb	r2, r2
 8014196:	4611      	mov	r1, r2
 8014198:	4798      	blx	r3
        }
        break;
 801419a:	e057      	b.n	801424c <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 801419c:	4b1a      	ldr	r3, [pc, #104]	; (8014208 <OpenThread_CallBack_Processing+0x34c>)
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d055      	beq.n	8014250 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 80141a4:	4b18      	ldr	r3, [pc, #96]	; (8014208 <OpenThread_CallBack_Processing+0x34c>)
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	683a      	ldr	r2, [r7, #0]
 80141aa:	6892      	ldr	r2, [r2, #8]
 80141ac:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 80141ae:	683a      	ldr	r2, [r7, #0]
 80141b0:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80141b2:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 80141b4:	683a      	ldr	r2, [r7, #0]
 80141b6:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80141b8:	4798      	blx	r3
        }
        break;
 80141ba:	e049      	b.n	8014250 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 80141bc:	2301      	movs	r3, #1
 80141be:	71fb      	strb	r3, [r7, #7]
        break;
 80141c0:	e047      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
 80141c2:	bf00      	nop
 80141c4:	200273e8 	.word	0x200273e8
 80141c8:	20027428 	.word	0x20027428
 80141cc:	2002742c 	.word	0x2002742c
 80141d0:	200273f0 	.word	0x200273f0
 80141d4:	200273ec 	.word	0x200273ec
 80141d8:	200273f4 	.word	0x200273f4
 80141dc:	200273f8 	.word	0x200273f8
 80141e0:	200273fc 	.word	0x200273fc
 80141e4:	20027400 	.word	0x20027400
 80141e8:	20027404 	.word	0x20027404
 80141ec:	20027408 	.word	0x20027408
 80141f0:	2002740c 	.word	0x2002740c
 80141f4:	20027410 	.word	0x20027410
 80141f8:	20027414 	.word	0x20027414
 80141fc:	20027418 	.word	0x20027418
 8014200:	2002741c 	.word	0x2002741c
 8014204:	20027420 	.word	0x20027420
 8014208:	20027424 	.word	0x20027424
        break;
 801420c:	bf00      	nop
 801420e:	e020      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014210:	bf00      	nop
 8014212:	e01e      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014214:	bf00      	nop
 8014216:	e01c      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014218:	bf00      	nop
 801421a:	e01a      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 801421c:	bf00      	nop
 801421e:	e018      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014220:	bf00      	nop
 8014222:	e016      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014224:	bf00      	nop
 8014226:	e014      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014228:	bf00      	nop
 801422a:	e012      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 801422c:	bf00      	nop
 801422e:	e010      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014230:	bf00      	nop
 8014232:	e00e      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014234:	bf00      	nop
 8014236:	e00c      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014238:	bf00      	nop
 801423a:	e00a      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 801423c:	bf00      	nop
 801423e:	e008      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014240:	bf00      	nop
 8014242:	e006      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014244:	bf00      	nop
 8014246:	e004      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014248:	bf00      	nop
 801424a:	e002      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 801424c:	bf00      	nop
 801424e:	e000      	b.n	8014252 <OpenThread_CallBack_Processing+0x396>
        break;
 8014250:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8014252:	f000 fcdf 	bl	8014c14 <TL_THREAD_SendAck>
    return status;
 8014256:	79fb      	ldrb	r3, [r7, #7]

}
 8014258:	4618      	mov	r0, r3
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bdb0      	pop	{r4, r5, r7, pc}

08014260 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b086      	sub	sp, #24
 8014264:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8014266:	1d3b      	adds	r3, r7, #4
 8014268:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	2200      	movs	r2, #0
 801426e:	2100      	movs	r1, #0
 8014270:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8014274:	f000 f914 	bl	80144a0 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	330b      	adds	r3, #11
 801427c:	78db      	ldrb	r3, [r3, #3]
}
 801427e:	4618      	mov	r0, r3
 8014280:	3718      	adds	r7, #24
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}

08014286 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8014286:	b580      	push	{r7, lr}
 8014288:	b088      	sub	sp, #32
 801428a:	af00      	add	r7, sp, #0
 801428c:	4603      	mov	r3, r0
 801428e:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8014290:	f107 030c 	add.w	r3, r7, #12
 8014294:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8014296:	79fb      	ldrb	r3, [r7, #7]
 8014298:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 801429a:	f107 020c 	add.w	r2, r7, #12
 801429e:	69fb      	ldr	r3, [r7, #28]
 80142a0:	2101      	movs	r1, #1
 80142a2:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 80142a6:	f000 f8fb 	bl	80144a0 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80142aa:	69fb      	ldr	r3, [r7, #28]
 80142ac:	330b      	adds	r3, #11
 80142ae:	78db      	ldrb	r3, [r3, #3]
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	3720      	adds	r7, #32
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}

080142b8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80142b8:	b480      	push	{r7}
 80142ba:	b089      	sub	sp, #36	; 0x24
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80142c0:	2300      	movs	r3, #0
 80142c2:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 80142c4:	2300      	movs	r3, #0
 80142c6:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 80142c8:	2300      	movs	r3, #0
 80142ca:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 80142cc:	2300      	movs	r3, #0
 80142ce:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 80142d0:	2300      	movs	r3, #0
 80142d2:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80142d4:	4b3c      	ldr	r3, [pc, #240]	; (80143c8 <SHCI_GetWirelessFwInfo+0x110>)
 80142d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80142dc:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80142de:	69fb      	ldr	r3, [r7, #28]
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80142e6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80142ea:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80142ec:	69bb      	ldr	r3, [r7, #24]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	691b      	ldr	r3, [r3, #16]
 80142f2:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	0e1b      	lsrs	r3, r3, #24
 80142f8:	b2da      	uxtb	r2, r3
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80142fe:	697b      	ldr	r3, [r7, #20]
 8014300:	0c1b      	lsrs	r3, r3, #16
 8014302:	b2da      	uxtb	r2, r3
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8014308:	697b      	ldr	r3, [r7, #20]
 801430a:	0a1b      	lsrs	r3, r3, #8
 801430c:	b2da      	uxtb	r2, r3
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	091b      	lsrs	r3, r3, #4
 8014316:	b2db      	uxtb	r3, r3
 8014318:	f003 030f 	and.w	r3, r3, #15
 801431c:	b2da      	uxtb	r2, r3
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	b2db      	uxtb	r3, r3
 8014326:	f003 030f 	and.w	r3, r3, #15
 801432a:	b2da      	uxtb	r2, r3
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8014330:	69bb      	ldr	r3, [r7, #24]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	695b      	ldr	r3, [r3, #20]
 8014336:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8014338:	693b      	ldr	r3, [r7, #16]
 801433a:	0e1b      	lsrs	r3, r3, #24
 801433c:	b2da      	uxtb	r2, r3
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	0c1b      	lsrs	r3, r3, #16
 8014346:	b2da      	uxtb	r2, r3
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 801434c:	693b      	ldr	r3, [r7, #16]
 801434e:	0a1b      	lsrs	r3, r3, #8
 8014350:	b2da      	uxtb	r2, r3
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8014356:	693b      	ldr	r3, [r7, #16]
 8014358:	b2da      	uxtb	r2, r3
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801435e:	69bb      	ldr	r3, [r7, #24]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	699b      	ldr	r3, [r3, #24]
 8014364:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	b2da      	uxtb	r2, r3
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801436e:	69bb      	ldr	r3, [r7, #24]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	685b      	ldr	r3, [r3, #4]
 8014374:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8014376:	697b      	ldr	r3, [r7, #20]
 8014378:	0e1b      	lsrs	r3, r3, #24
 801437a:	b2da      	uxtb	r2, r3
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	0c1b      	lsrs	r3, r3, #16
 8014384:	b2da      	uxtb	r2, r3
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	0a1b      	lsrs	r3, r3, #8
 801438e:	b2da      	uxtb	r2, r3
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8014394:	69bb      	ldr	r3, [r7, #24]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	689b      	ldr	r3, [r3, #8]
 801439a:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801439c:	693b      	ldr	r3, [r7, #16]
 801439e:	0e1b      	lsrs	r3, r3, #24
 80143a0:	b2da      	uxtb	r2, r3
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80143a6:	693b      	ldr	r3, [r7, #16]
 80143a8:	0c1b      	lsrs	r3, r3, #16
 80143aa:	b2da      	uxtb	r2, r3
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	b2da      	uxtb	r2, r3
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80143b8:	2300      	movs	r3, #0
}
 80143ba:	4618      	mov	r0, r3
 80143bc:	3724      	adds	r7, #36	; 0x24
 80143be:	46bd      	mov	sp, r7
 80143c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c4:	4770      	bx	lr
 80143c6:	bf00      	nop
 80143c8:	58004000 	.word	0x58004000

080143cc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b082      	sub	sp, #8
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	4a08      	ldr	r2, [pc, #32]	; (80143fc <shci_init+0x30>)
 80143dc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80143de:	4a08      	ldr	r2, [pc, #32]	; (8014400 <shci_init+0x34>)
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80143e4:	4806      	ldr	r0, [pc, #24]	; (8014400 <shci_init+0x34>)
 80143e6:	f000 f911 	bl	801460c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	4618      	mov	r0, r3
 80143f0:	f000 f894 	bl	801451c <TlInit>

  return;
 80143f4:	bf00      	nop
}
 80143f6:	3708      	adds	r7, #8
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}
 80143fc:	20027450 	.word	0x20027450
 8014400:	20027430 	.word	0x20027430

08014404 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b084      	sub	sp, #16
 8014408:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801440a:	4822      	ldr	r0, [pc, #136]	; (8014494 <shci_user_evt_proc+0x90>)
 801440c:	f000 f922 	bl	8014654 <LST_is_empty>
 8014410:	4603      	mov	r3, r0
 8014412:	2b00      	cmp	r3, #0
 8014414:	d12b      	bne.n	801446e <shci_user_evt_proc+0x6a>
 8014416:	4b20      	ldr	r3, [pc, #128]	; (8014498 <shci_user_evt_proc+0x94>)
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d027      	beq.n	801446e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801441e:	f107 030c 	add.w	r3, r7, #12
 8014422:	4619      	mov	r1, r3
 8014424:	481b      	ldr	r0, [pc, #108]	; (8014494 <shci_user_evt_proc+0x90>)
 8014426:	f000 f99c 	bl	8014762 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801442a:	4b1c      	ldr	r3, [pc, #112]	; (801449c <shci_user_evt_proc+0x98>)
 801442c:	69db      	ldr	r3, [r3, #28]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d00c      	beq.n	801444c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8014436:	2301      	movs	r3, #1
 8014438:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801443a:	4b18      	ldr	r3, [pc, #96]	; (801449c <shci_user_evt_proc+0x98>)
 801443c:	69db      	ldr	r3, [r3, #28]
 801443e:	1d3a      	adds	r2, r7, #4
 8014440:	4610      	mov	r0, r2
 8014442:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8014444:	793a      	ldrb	r2, [r7, #4]
 8014446:	4b14      	ldr	r3, [pc, #80]	; (8014498 <shci_user_evt_proc+0x94>)
 8014448:	701a      	strb	r2, [r3, #0]
 801444a:	e002      	b.n	8014452 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801444c:	4b12      	ldr	r3, [pc, #72]	; (8014498 <shci_user_evt_proc+0x94>)
 801444e:	2201      	movs	r2, #1
 8014450:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8014452:	4b11      	ldr	r3, [pc, #68]	; (8014498 <shci_user_evt_proc+0x94>)
 8014454:	781b      	ldrb	r3, [r3, #0]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d004      	beq.n	8014464 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	4618      	mov	r0, r3
 801445e:	f000 fc55 	bl	8014d0c <TL_MM_EvtDone>
 8014462:	e004      	b.n	801446e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	4619      	mov	r1, r3
 8014468:	480a      	ldr	r0, [pc, #40]	; (8014494 <shci_user_evt_proc+0x90>)
 801446a:	f000 f913 	bl	8014694 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801446e:	4809      	ldr	r0, [pc, #36]	; (8014494 <shci_user_evt_proc+0x90>)
 8014470:	f000 f8f0 	bl	8014654 <LST_is_empty>
 8014474:	4603      	mov	r3, r0
 8014476:	2b00      	cmp	r3, #0
 8014478:	d107      	bne.n	801448a <shci_user_evt_proc+0x86>
 801447a:	4b07      	ldr	r3, [pc, #28]	; (8014498 <shci_user_evt_proc+0x94>)
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d003      	beq.n	801448a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8014482:	4804      	ldr	r0, [pc, #16]	; (8014494 <shci_user_evt_proc+0x90>)
 8014484:	f7ec fe96 	bl	80011b4 <shci_notify_asynch_evt>
  }


  return;
 8014488:	bf00      	nop
 801448a:	bf00      	nop
}
 801448c:	3710      	adds	r7, #16
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	200001d4 	.word	0x200001d4
 8014498:	200001e4 	.word	0x200001e4
 801449c:	20027430 	.word	0x20027430

080144a0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	60ba      	str	r2, [r7, #8]
 80144a8:	607b      	str	r3, [r7, #4]
 80144aa:	4603      	mov	r3, r0
 80144ac:	81fb      	strh	r3, [r7, #14]
 80144ae:	460b      	mov	r3, r1
 80144b0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80144b2:	2000      	movs	r0, #0
 80144b4:	f000 f864 	bl	8014580 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80144b8:	4b16      	ldr	r3, [pc, #88]	; (8014514 <shci_send+0x74>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	89fa      	ldrh	r2, [r7, #14]
 80144be:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80144c2:	4b14      	ldr	r3, [pc, #80]	; (8014514 <shci_send+0x74>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	7b7a      	ldrb	r2, [r7, #13]
 80144c8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80144ca:	4b12      	ldr	r3, [pc, #72]	; (8014514 <shci_send+0x74>)
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	330c      	adds	r3, #12
 80144d0:	7b7a      	ldrb	r2, [r7, #13]
 80144d2:	68b9      	ldr	r1, [r7, #8]
 80144d4:	4618      	mov	r0, r3
 80144d6:	f002 f921 	bl	801671c <memcpy>

  shciContext.io.Send(0,0);
 80144da:	4b0f      	ldr	r3, [pc, #60]	; (8014518 <shci_send+0x78>)
 80144dc:	691b      	ldr	r3, [r3, #16]
 80144de:	2100      	movs	r1, #0
 80144e0:	2000      	movs	r0, #0
 80144e2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80144e4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80144e8:	f7ec fe84 	bl	80011f4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f103 0008 	add.w	r0, r3, #8
 80144f2:	4b08      	ldr	r3, [pc, #32]	; (8014514 <shci_send+0x74>)
 80144f4:	6819      	ldr	r1, [r3, #0]
 80144f6:	4b07      	ldr	r3, [pc, #28]	; (8014514 <shci_send+0x74>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	789b      	ldrb	r3, [r3, #2]
 80144fc:	3303      	adds	r3, #3
 80144fe:	461a      	mov	r2, r3
 8014500:	f002 f90c 	bl	801671c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8014504:	2001      	movs	r0, #1
 8014506:	f000 f83b 	bl	8014580 <Cmd_SetStatus>

  return;
 801450a:	bf00      	nop
}
 801450c:	3710      	adds	r7, #16
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
 8014512:	bf00      	nop
 8014514:	200001e0 	.word	0x200001e0
 8014518:	20027430 	.word	0x20027430

0801451c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b086      	sub	sp, #24
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8014524:	4a10      	ldr	r2, [pc, #64]	; (8014568 <TlInit+0x4c>)
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801452a:	4810      	ldr	r0, [pc, #64]	; (801456c <TlInit+0x50>)
 801452c:	f000 f882 	bl	8014634 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8014530:	2001      	movs	r0, #1
 8014532:	f000 f825 	bl	8014580 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8014536:	4b0e      	ldr	r3, [pc, #56]	; (8014570 <TlInit+0x54>)
 8014538:	2201      	movs	r2, #1
 801453a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 801453c:	4b0d      	ldr	r3, [pc, #52]	; (8014574 <TlInit+0x58>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d00c      	beq.n	801455e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8014548:	4b0b      	ldr	r3, [pc, #44]	; (8014578 <TlInit+0x5c>)
 801454a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 801454c:	4b0b      	ldr	r3, [pc, #44]	; (801457c <TlInit+0x60>)
 801454e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8014550:	4b08      	ldr	r3, [pc, #32]	; (8014574 <TlInit+0x58>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	f107 020c 	add.w	r2, r7, #12
 8014558:	4610      	mov	r0, r2
 801455a:	4798      	blx	r3
  }

  return;
 801455c:	bf00      	nop
 801455e:	bf00      	nop
}
 8014560:	3718      	adds	r7, #24
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}
 8014566:	bf00      	nop
 8014568:	200001e0 	.word	0x200001e0
 801456c:	200001d4 	.word	0x200001d4
 8014570:	200001e4 	.word	0x200001e4
 8014574:	20027430 	.word	0x20027430
 8014578:	080145d1 	.word	0x080145d1
 801457c:	080145e9 	.word	0x080145e9

08014580 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	4603      	mov	r3, r0
 8014588:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801458a:	79fb      	ldrb	r3, [r7, #7]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d10b      	bne.n	80145a8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8014590:	4b0d      	ldr	r3, [pc, #52]	; (80145c8 <Cmd_SetStatus+0x48>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d003      	beq.n	80145a0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8014598:	4b0b      	ldr	r3, [pc, #44]	; (80145c8 <Cmd_SetStatus+0x48>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	2000      	movs	r0, #0
 801459e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80145a0:	4b0a      	ldr	r3, [pc, #40]	; (80145cc <Cmd_SetStatus+0x4c>)
 80145a2:	2200      	movs	r2, #0
 80145a4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80145a6:	e00b      	b.n	80145c0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80145a8:	4b08      	ldr	r3, [pc, #32]	; (80145cc <Cmd_SetStatus+0x4c>)
 80145aa:	2201      	movs	r2, #1
 80145ac:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80145ae:	4b06      	ldr	r3, [pc, #24]	; (80145c8 <Cmd_SetStatus+0x48>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d004      	beq.n	80145c0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80145b6:	4b04      	ldr	r3, [pc, #16]	; (80145c8 <Cmd_SetStatus+0x48>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	2001      	movs	r0, #1
 80145bc:	4798      	blx	r3
  return;
 80145be:	bf00      	nop
 80145c0:	bf00      	nop
}
 80145c2:	3708      	adds	r7, #8
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}
 80145c8:	20027450 	.word	0x20027450
 80145cc:	200001dc 	.word	0x200001dc

080145d0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80145d8:	2000      	movs	r0, #0
 80145da:	f7ec fdfb 	bl	80011d4 <shci_cmd_resp_release>

  return;
 80145de:	bf00      	nop
}
 80145e0:	3708      	adds	r7, #8
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}
	...

080145e8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80145f0:	6879      	ldr	r1, [r7, #4]
 80145f2:	4805      	ldr	r0, [pc, #20]	; (8014608 <TlUserEvtReceived+0x20>)
 80145f4:	f000 f872 	bl	80146dc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80145f8:	4803      	ldr	r0, [pc, #12]	; (8014608 <TlUserEvtReceived+0x20>)
 80145fa:	f7ec fddb 	bl	80011b4 <shci_notify_asynch_evt>

  return;
 80145fe:	bf00      	nop
}
 8014600:	3708      	adds	r7, #8
 8014602:	46bd      	mov	sp, r7
 8014604:	bd80      	pop	{r7, pc}
 8014606:	bf00      	nop
 8014608:	200001d4 	.word	0x200001d4

0801460c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 801460c:	b480      	push	{r7}
 801460e:	b083      	sub	sp, #12
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	4a05      	ldr	r2, [pc, #20]	; (801462c <shci_register_io_bus+0x20>)
 8014618:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	4a04      	ldr	r2, [pc, #16]	; (8014630 <shci_register_io_bus+0x24>)
 801461e:	611a      	str	r2, [r3, #16]

  return;
 8014620:	bf00      	nop
}
 8014622:	370c      	adds	r7, #12
 8014624:	46bd      	mov	sp, r7
 8014626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462a:	4770      	bx	lr
 801462c:	08014ad1 	.word	0x08014ad1
 8014630:	08014b25 	.word	0x08014b25

08014634 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8014634:	b480      	push	{r7}
 8014636:	b083      	sub	sp, #12
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	687a      	ldr	r2, [r7, #4]
 8014640:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	687a      	ldr	r2, [r7, #4]
 8014646:	605a      	str	r2, [r3, #4]
}
 8014648:	bf00      	nop
 801464a:	370c      	adds	r7, #12
 801464c:	46bd      	mov	sp, r7
 801464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014652:	4770      	bx	lr

08014654 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8014654:	b480      	push	{r7}
 8014656:	b087      	sub	sp, #28
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801465c:	f3ef 8310 	mrs	r3, PRIMASK
 8014660:	60fb      	str	r3, [r7, #12]
  return(result);
 8014662:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014666:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	687a      	ldr	r2, [r7, #4]
 801466e:	429a      	cmp	r2, r3
 8014670:	d102      	bne.n	8014678 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8014672:	2301      	movs	r3, #1
 8014674:	75fb      	strb	r3, [r7, #23]
 8014676:	e001      	b.n	801467c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8014678:	2300      	movs	r3, #0
 801467a:	75fb      	strb	r3, [r7, #23]
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8014686:	7dfb      	ldrb	r3, [r7, #23]
}
 8014688:	4618      	mov	r0, r3
 801468a:	371c      	adds	r7, #28
 801468c:	46bd      	mov	sp, r7
 801468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014692:	4770      	bx	lr

08014694 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8014694:	b480      	push	{r7}
 8014696:	b087      	sub	sp, #28
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
 801469c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801469e:	f3ef 8310 	mrs	r3, PRIMASK
 80146a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80146a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80146a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80146a8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	683a      	ldr	r2, [r7, #0]
 80146bc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	683a      	ldr	r2, [r7, #0]
 80146c4:	605a      	str	r2, [r3, #4]
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80146d0:	bf00      	nop
 80146d2:	371c      	adds	r7, #28
 80146d4:	46bd      	mov	sp, r7
 80146d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146da:	4770      	bx	lr

080146dc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80146dc:	b480      	push	{r7}
 80146de:	b087      	sub	sp, #28
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80146e6:	f3ef 8310 	mrs	r3, PRIMASK
 80146ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80146ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80146ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80146f0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	687a      	ldr	r2, [r7, #4]
 80146f6:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	685a      	ldr	r2, [r3, #4]
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	683a      	ldr	r2, [r7, #0]
 8014704:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8014706:	683b      	ldr	r3, [r7, #0]
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	683a      	ldr	r2, [r7, #0]
 801470c:	601a      	str	r2, [r3, #0]
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014718:	bf00      	nop
 801471a:	371c      	adds	r7, #28
 801471c:	46bd      	mov	sp, r7
 801471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014722:	4770      	bx	lr

08014724 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8014724:	b480      	push	{r7}
 8014726:	b087      	sub	sp, #28
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801472c:	f3ef 8310 	mrs	r3, PRIMASK
 8014730:	60fb      	str	r3, [r7, #12]
  return(result);
 8014732:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014734:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014736:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	685b      	ldr	r3, [r3, #4]
 801473c:	687a      	ldr	r2, [r7, #4]
 801473e:	6812      	ldr	r2, [r2, #0]
 8014740:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	687a      	ldr	r2, [r7, #4]
 8014748:	6852      	ldr	r2, [r2, #4]
 801474a:	605a      	str	r2, [r3, #4]
 801474c:	697b      	ldr	r3, [r7, #20]
 801474e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014756:	bf00      	nop
 8014758:	371c      	adds	r7, #28
 801475a:	46bd      	mov	sp, r7
 801475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014760:	4770      	bx	lr

08014762 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8014762:	b580      	push	{r7, lr}
 8014764:	b086      	sub	sp, #24
 8014766:	af00      	add	r7, sp, #0
 8014768:	6078      	str	r0, [r7, #4]
 801476a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801476c:	f3ef 8310 	mrs	r3, PRIMASK
 8014770:	60fb      	str	r3, [r7, #12]
  return(result);
 8014772:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014774:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014776:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681a      	ldr	r2, [r3, #0]
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	4618      	mov	r0, r3
 8014786:	f7ff ffcd 	bl	8014724 <LST_remove_node>
 801478a:	697b      	ldr	r3, [r7, #20]
 801478c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801478e:	693b      	ldr	r3, [r7, #16]
 8014790:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014794:	bf00      	nop
 8014796:	3718      	adds	r7, #24
 8014798:	46bd      	mov	sp, r7
 801479a:	bd80      	pop	{r7, pc}

0801479c <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b084      	sub	sp, #16
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
 80147a4:	460b      	mov	r3, r1
 80147a6:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80147a8:	f001 f892 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80147ac:	f001 f82e 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 80147b0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	2200      	movs	r2, #0
 80147b6:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 80147ba:	701a      	strb	r2, [r3, #0]
 80147bc:	2200      	movs	r2, #0
 80147be:	705a      	strb	r2, [r3, #1]
 80147c0:	2200      	movs	r2, #0
 80147c2:	709a      	strb	r2, [r3, #2]
 80147c4:	2200      	movs	r2, #0
 80147c6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	2200      	movs	r2, #0
 80147cc:	f042 0201 	orr.w	r2, r2, #1
 80147d0:	711a      	strb	r2, [r3, #4]
 80147d2:	2200      	movs	r2, #0
 80147d4:	715a      	strb	r2, [r3, #5]
 80147d6:	2200      	movs	r2, #0
 80147d8:	719a      	strb	r2, [r3, #6]
 80147da:	2200      	movs	r2, #0
 80147dc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 80147de:	78fa      	ldrb	r2, [r7, #3]
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80147e4:	f001 f836 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80147e8:	f001 f81c 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 80147ec:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	689b      	ldr	r3, [r3, #8]
 80147f2:	b2db      	uxtb	r3, r3
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	3710      	adds	r7, #16
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}

080147fc <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b084      	sub	sp, #16
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
 8014804:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8014806:	f001 f863 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801480a:	f000 ffff 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 801480e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	2200      	movs	r2, #0
 8014814:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 8014818:	701a      	strb	r2, [r3, #0]
 801481a:	2200      	movs	r2, #0
 801481c:	705a      	strb	r2, [r3, #1]
 801481e:	2200      	movs	r2, #0
 8014820:	709a      	strb	r2, [r3, #2]
 8014822:	2200      	movs	r2, #0
 8014824:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	2200      	movs	r2, #0
 801482a:	f042 0201 	orr.w	r2, r2, #1
 801482e:	711a      	strb	r2, [r3, #4]
 8014830:	2200      	movs	r2, #0
 8014832:	715a      	strb	r2, [r3, #5]
 8014834:	2200      	movs	r2, #0
 8014836:	719a      	strb	r2, [r3, #6]
 8014838:	2200      	movs	r2, #0
 801483a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 801483c:	683a      	ldr	r2, [r7, #0]
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8014842:	f001 f807 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014846:	f000 ffed 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 801484a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	689b      	ldr	r3, [r3, #8]
 8014850:	b2db      	uxtb	r3, r3
}
 8014852:	4618      	mov	r0, r3
 8014854:	3710      	adds	r7, #16
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}

0801485a <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 801485a:	b580      	push	{r7, lr}
 801485c:	b084      	sub	sp, #16
 801485e:	af00      	add	r7, sp, #0
 8014860:	6078      	str	r0, [r7, #4]
 8014862:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8014864:	f001 f834 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014868:	f000 ffd0 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 801486c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	2200      	movs	r2, #0
 8014872:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8014876:	701a      	strb	r2, [r3, #0]
 8014878:	2200      	movs	r2, #0
 801487a:	705a      	strb	r2, [r3, #1]
 801487c:	2200      	movs	r2, #0
 801487e:	709a      	strb	r2, [r3, #2]
 8014880:	2200      	movs	r2, #0
 8014882:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	2200      	movs	r2, #0
 8014888:	f042 0201 	orr.w	r2, r2, #1
 801488c:	711a      	strb	r2, [r3, #4]
 801488e:	2200      	movs	r2, #0
 8014890:	715a      	strb	r2, [r3, #5]
 8014892:	2200      	movs	r2, #0
 8014894:	719a      	strb	r2, [r3, #6]
 8014896:	2200      	movs	r2, #0
 8014898:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 801489a:	683a      	ldr	r2, [r7, #0]
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80148a0:	f000 ffd8 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80148a4:	f000 ffbe 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 80148a8:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	689b      	ldr	r3, [r3, #8]
 80148ae:	b2db      	uxtb	r3, r3
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3710      	adds	r7, #16
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}

080148b8 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b084      	sub	sp, #16
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80148c0:	f001 f806 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80148c4:	f000 ffa2 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 80148c8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	2200      	movs	r2, #0
 80148ce:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 80148d2:	701a      	strb	r2, [r3, #0]
 80148d4:	2200      	movs	r2, #0
 80148d6:	705a      	strb	r2, [r3, #1]
 80148d8:	2200      	movs	r2, #0
 80148da:	709a      	strb	r2, [r3, #2]
 80148dc:	2200      	movs	r2, #0
 80148de:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	2200      	movs	r2, #0
 80148e4:	711a      	strb	r2, [r3, #4]
 80148e6:	2200      	movs	r2, #0
 80148e8:	715a      	strb	r2, [r3, #5]
 80148ea:	2200      	movs	r2, #0
 80148ec:	719a      	strb	r2, [r3, #6]
 80148ee:	2200      	movs	r2, #0
 80148f0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80148f2:	f000 ffaf 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80148f6:	f000 ff95 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 80148fa:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	689b      	ldr	r3, [r3, #8]
}
 8014900:	4618      	mov	r0, r3
 8014902:	3710      	adds	r7, #16
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}

08014908 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b084      	sub	sp, #16
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
 8014910:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8014912:	f000 ffdd 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014916:	f000 ff79 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 801491a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	2200      	movs	r2, #0
 8014920:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8014924:	701a      	strb	r2, [r3, #0]
 8014926:	2200      	movs	r2, #0
 8014928:	705a      	strb	r2, [r3, #1]
 801492a:	2200      	movs	r2, #0
 801492c:	709a      	strb	r2, [r3, #2]
 801492e:	2200      	movs	r2, #0
 8014930:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	2200      	movs	r2, #0
 8014936:	f042 0201 	orr.w	r2, r2, #1
 801493a:	711a      	strb	r2, [r3, #4]
 801493c:	2200      	movs	r2, #0
 801493e:	715a      	strb	r2, [r3, #5]
 8014940:	2200      	movs	r2, #0
 8014942:	719a      	strb	r2, [r3, #6]
 8014944:	2200      	movs	r2, #0
 8014946:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8014948:	683a      	ldr	r2, [r7, #0]
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801494e:	f000 ff81 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014952:	f000 ff67 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014956:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	689b      	ldr	r3, [r3, #8]
 801495c:	b2db      	uxtb	r3, r3
}
 801495e:	4618      	mov	r0, r3
 8014960:	3710      	adds	r7, #16
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}

08014966 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8014966:	b580      	push	{r7, lr}
 8014968:	b084      	sub	sp, #16
 801496a:	af00      	add	r7, sp, #0
 801496c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801496e:	f000 ffaf 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014972:	f000 ff4b 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 8014976:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	2200      	movs	r2, #0
 801497c:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8014980:	701a      	strb	r2, [r3, #0]
 8014982:	2200      	movs	r2, #0
 8014984:	705a      	strb	r2, [r3, #1]
 8014986:	2200      	movs	r2, #0
 8014988:	709a      	strb	r2, [r3, #2]
 801498a:	2200      	movs	r2, #0
 801498c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	2200      	movs	r2, #0
 8014992:	711a      	strb	r2, [r3, #4]
 8014994:	2200      	movs	r2, #0
 8014996:	715a      	strb	r2, [r3, #5]
 8014998:	2200      	movs	r2, #0
 801499a:	719a      	strb	r2, [r3, #6]
 801499c:	2200      	movs	r2, #0
 801499e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80149a0:	f000 ff58 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80149a4:	f000 ff3e 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 80149a8:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	689b      	ldr	r3, [r3, #8]
 80149ae:	b2db      	uxtb	r3, r3
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3710      	adds	r7, #16
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b084      	sub	sp, #16
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80149c0:	f000 ff86 	bl	80158d0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80149c4:	f000 ff22 	bl	801580c <THREAD_Get_OTCmdPayloadBuffer>
 80149c8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	2200      	movs	r2, #0
 80149ce:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80149d2:	701a      	strb	r2, [r3, #0]
 80149d4:	2200      	movs	r2, #0
 80149d6:	705a      	strb	r2, [r3, #1]
 80149d8:	2200      	movs	r2, #0
 80149da:	709a      	strb	r2, [r3, #2]
 80149dc:	2200      	movs	r2, #0
 80149de:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	2200      	movs	r2, #0
 80149e4:	711a      	strb	r2, [r3, #4]
 80149e6:	2200      	movs	r2, #0
 80149e8:	715a      	strb	r2, [r3, #5]
 80149ea:	2200      	movs	r2, #0
 80149ec:	719a      	strb	r2, [r3, #6]
 80149ee:	2200      	movs	r2, #0
 80149f0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80149f2:	f000 ff2f 	bl	8015854 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80149f6:	f000 ff15 	bl	8015824 <THREAD_Get_OTCmdRspPayloadBuffer>
 80149fa:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	689b      	ldr	r3, [r3, #8]
 8014a00:	b29b      	uxth	r3, r3
}
 8014a02:	4618      	mov	r0, r3
 8014a04:	3710      	adds	r7, #16
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}

08014a0a <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8014a0a:	b580      	push	{r7, lr}
 8014a0c:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8014a0e:	f001 fa35 	bl	8015e7c <HW_IPCC_Enable>

  return;
 8014a12:	bf00      	nop
}
 8014a14:	bd80      	pop	{r7, pc}
	...

08014a18 <TL_Init>:


void TL_Init( void )
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8014a1c:	4b0f      	ldr	r3, [pc, #60]	; (8014a5c <TL_Init+0x44>)
 8014a1e:	4a10      	ldr	r2, [pc, #64]	; (8014a60 <TL_Init+0x48>)
 8014a20:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8014a22:	4b0e      	ldr	r3, [pc, #56]	; (8014a5c <TL_Init+0x44>)
 8014a24:	4a0f      	ldr	r2, [pc, #60]	; (8014a64 <TL_Init+0x4c>)
 8014a26:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8014a28:	4b0c      	ldr	r3, [pc, #48]	; (8014a5c <TL_Init+0x44>)
 8014a2a:	4a0f      	ldr	r2, [pc, #60]	; (8014a68 <TL_Init+0x50>)
 8014a2c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8014a2e:	4b0b      	ldr	r3, [pc, #44]	; (8014a5c <TL_Init+0x44>)
 8014a30:	4a0e      	ldr	r2, [pc, #56]	; (8014a6c <TL_Init+0x54>)
 8014a32:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8014a34:	4b09      	ldr	r3, [pc, #36]	; (8014a5c <TL_Init+0x44>)
 8014a36:	4a0e      	ldr	r2, [pc, #56]	; (8014a70 <TL_Init+0x58>)
 8014a38:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8014a3a:	4b08      	ldr	r3, [pc, #32]	; (8014a5c <TL_Init+0x44>)
 8014a3c:	4a0d      	ldr	r2, [pc, #52]	; (8014a74 <TL_Init+0x5c>)
 8014a3e:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8014a40:	4b06      	ldr	r3, [pc, #24]	; (8014a5c <TL_Init+0x44>)
 8014a42:	4a0d      	ldr	r2, [pc, #52]	; (8014a78 <TL_Init+0x60>)
 8014a44:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8014a46:	4b05      	ldr	r3, [pc, #20]	; (8014a5c <TL_Init+0x44>)
 8014a48:	4a0c      	ldr	r2, [pc, #48]	; (8014a7c <TL_Init+0x64>)
 8014a4a:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8014a4c:	4b03      	ldr	r3, [pc, #12]	; (8014a5c <TL_Init+0x44>)
 8014a4e:	4a0c      	ldr	r2, [pc, #48]	; (8014a80 <TL_Init+0x68>)
 8014a50:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8014a52:	f001 fa23 	bl	8015e9c <HW_IPCC_Init>

  return;
 8014a56:	bf00      	nop
}
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	20030000 	.word	0x20030000
 8014a60:	20030024 	.word	0x20030024
 8014a64:	20030044 	.word	0x20030044
 8014a68:	20030054 	.word	0x20030054
 8014a6c:	20030060 	.word	0x20030060
 8014a70:	20030068 	.word	0x20030068
 8014a74:	20030070 	.word	0x20030070
 8014a78:	2003008c 	.word	0x2003008c
 8014a7c:	20030090 	.word	0x20030090
 8014a80:	2003009c 	.word	0x2003009c

08014a84 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b082      	sub	sp, #8
 8014a88:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8014a8a:	e009      	b.n	8014aa0 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8014a8c:	1d3b      	adds	r3, r7, #4
 8014a8e:	4619      	mov	r1, r3
 8014a90:	4808      	ldr	r0, [pc, #32]	; (8014ab4 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8014a92:	f7ff fe66 	bl	8014762 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8014a96:	4b08      	ldr	r3, [pc, #32]	; (8014ab8 <HW_IPCC_BLE_RxEvtNot+0x34>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	687a      	ldr	r2, [r7, #4]
 8014a9c:	4610      	mov	r0, r2
 8014a9e:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8014aa0:	4804      	ldr	r0, [pc, #16]	; (8014ab4 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8014aa2:	f7ff fdd7 	bl	8014654 <LST_is_empty>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d0ef      	beq.n	8014a8c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8014aac:	bf00      	nop
}
 8014aae:	3708      	adds	r7, #8
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}
 8014ab4:	20030828 	.word	0x20030828
 8014ab8:	2002745c 	.word	0x2002745c

08014abc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8014ac0:	4b02      	ldr	r3, [pc, #8]	; (8014acc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	4798      	blx	r3

  return;
 8014ac6:	bf00      	nop
}
 8014ac8:	bd80      	pop	{r7, pc}
 8014aca:	bf00      	nop
 8014acc:	20027460 	.word	0x20027460

08014ad0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b084      	sub	sp, #16
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8014adc:	480d      	ldr	r0, [pc, #52]	; (8014b14 <TL_SYS_Init+0x44>)
 8014ade:	f7ff fda9 	bl	8014634 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8014ae2:	4b0d      	ldr	r3, [pc, #52]	; (8014b18 <TL_SYS_Init+0x48>)
 8014ae4:	68db      	ldr	r3, [r3, #12]
 8014ae6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	689a      	ldr	r2, [r3, #8]
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	4a08      	ldr	r2, [pc, #32]	; (8014b14 <TL_SYS_Init+0x44>)
 8014af4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8014af6:	f001 f9ff 	bl	8015ef8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	4a07      	ldr	r2, [pc, #28]	; (8014b1c <TL_SYS_Init+0x4c>)
 8014b00:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	685b      	ldr	r3, [r3, #4]
 8014b06:	4a06      	ldr	r2, [pc, #24]	; (8014b20 <TL_SYS_Init+0x50>)
 8014b08:	6013      	str	r3, [r2, #0]

  return 0;
 8014b0a:	2300      	movs	r3, #0
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3710      	adds	r7, #16
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	20030830 	.word	0x20030830
 8014b18:	20030000 	.word	0x20030000
 8014b1c:	20027464 	.word	0x20027464
 8014b20:	20027468 	.word	0x20027468

08014b24 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
 8014b2c:	460b      	mov	r3, r1
 8014b2e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8014b30:	4b05      	ldr	r3, [pc, #20]	; (8014b48 <TL_SYS_SendCmd+0x24>)
 8014b32:	68db      	ldr	r3, [r3, #12]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	2210      	movs	r2, #16
 8014b38:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 8014b3a:	f001 f9e7 	bl	8015f0c <HW_IPCC_SYS_SendCmd>

  return 0;
 8014b3e:	2300      	movs	r3, #0
}
 8014b40:	4618      	mov	r0, r3
 8014b42:	3708      	adds	r7, #8
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}
 8014b48:	20030000 	.word	0x20030000

08014b4c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8014b50:	4b04      	ldr	r3, [pc, #16]	; (8014b64 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	4a04      	ldr	r2, [pc, #16]	; (8014b68 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 8014b56:	68d2      	ldr	r2, [r2, #12]
 8014b58:	6812      	ldr	r2, [r2, #0]
 8014b5a:	4610      	mov	r0, r2
 8014b5c:	4798      	blx	r3

  return;
 8014b5e:	bf00      	nop
}
 8014b60:	bd80      	pop	{r7, pc}
 8014b62:	bf00      	nop
 8014b64:	20027464 	.word	0x20027464
 8014b68:	20030000 	.word	0x20030000

08014b6c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8014b72:	e009      	b.n	8014b88 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8014b74:	1d3b      	adds	r3, r7, #4
 8014b76:	4619      	mov	r1, r3
 8014b78:	4808      	ldr	r0, [pc, #32]	; (8014b9c <HW_IPCC_SYS_EvtNot+0x30>)
 8014b7a:	f7ff fdf2 	bl	8014762 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8014b7e:	4b08      	ldr	r3, [pc, #32]	; (8014ba0 <HW_IPCC_SYS_EvtNot+0x34>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	687a      	ldr	r2, [r7, #4]
 8014b84:	4610      	mov	r0, r2
 8014b86:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8014b88:	4804      	ldr	r0, [pc, #16]	; (8014b9c <HW_IPCC_SYS_EvtNot+0x30>)
 8014b8a:	f7ff fd63 	bl	8014654 <LST_is_empty>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d0ef      	beq.n	8014b74 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8014b94:	bf00      	nop
}
 8014b96:	3708      	adds	r7, #8
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}
 8014b9c:	20030830 	.word	0x20030830
 8014ba0:	20027468 	.word	0x20027468

08014ba4 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b084      	sub	sp, #16
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8014bac:	4b0a      	ldr	r3, [pc, #40]	; (8014bd8 <TL_THREAD_Init+0x34>)
 8014bae:	689b      	ldr	r3, [r3, #8]
 8014bb0:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	685a      	ldr	r2, [r3, #4]
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	681a      	ldr	r2, [r3, #0]
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	689a      	ldr	r2, [r3, #8]
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 8014bca:	f001 f9c5 	bl	8015f58 <HW_IPCC_THREAD_Init>

  return;
 8014bce:	bf00      	nop
}
 8014bd0:	3710      	adds	r7, #16
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}
 8014bd6:	bf00      	nop
 8014bd8:	20030000 	.word	0x20030000

08014bdc <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8014be0:	4b04      	ldr	r3, [pc, #16]	; (8014bf4 <TL_OT_SendCmd+0x18>)
 8014be2:	689b      	ldr	r3, [r3, #8]
 8014be4:	689b      	ldr	r3, [r3, #8]
 8014be6:	2208      	movs	r2, #8
 8014be8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 8014bea:	f001 f9c3 	bl	8015f74 <HW_IPCC_OT_SendCmd>

  return;
 8014bee:	bf00      	nop
}
 8014bf0:	bd80      	pop	{r7, pc}
 8014bf2:	bf00      	nop
 8014bf4:	20030000 	.word	0x20030000

08014bf8 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8014bfc:	4b04      	ldr	r3, [pc, #16]	; (8014c10 <TL_CLI_SendCmd+0x18>)
 8014bfe:	689b      	ldr	r3, [r3, #8]
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	220a      	movs	r2, #10
 8014c04:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 8014c06:	f001 f9c3 	bl	8015f90 <HW_IPCC_CLI_SendCmd>

  return;
 8014c0a:	bf00      	nop
}
 8014c0c:	bd80      	pop	{r7, pc}
 8014c0e:	bf00      	nop
 8014c10:	20030000 	.word	0x20030000

08014c14 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8014c18:	4b04      	ldr	r3, [pc, #16]	; (8014c2c <TL_THREAD_SendAck+0x18>)
 8014c1a:	689b      	ldr	r3, [r3, #8]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	220d      	movs	r2, #13
 8014c20:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8014c22:	f001 f9bf 	bl	8015fa4 <HW_IPCC_THREAD_SendAck>

  return;
 8014c26:	bf00      	nop
}
 8014c28:	bd80      	pop	{r7, pc}
 8014c2a:	bf00      	nop
 8014c2c:	20030000 	.word	0x20030000

08014c30 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8014c34:	4b04      	ldr	r3, [pc, #16]	; (8014c48 <TL_THREAD_CliSendAck+0x18>)
 8014c36:	689b      	ldr	r3, [r3, #8]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	220d      	movs	r2, #13
 8014c3c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8014c3e:	f001 f9bf 	bl	8015fc0 <HW_IPCC_THREAD_CliSendAck>

  return;
 8014c42:	bf00      	nop
}
 8014c44:	bd80      	pop	{r7, pc}
 8014c46:	bf00      	nop
 8014c48:	20030000 	.word	0x20030000

08014c4c <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8014c50:	4b03      	ldr	r3, [pc, #12]	; (8014c60 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8014c52:	689b      	ldr	r3, [r3, #8]
 8014c54:	689b      	ldr	r3, [r3, #8]
 8014c56:	4618      	mov	r0, r3
 8014c58:	f000 fe20 	bl	801589c <TL_OT_CmdEvtReceived>

  return;
 8014c5c:	bf00      	nop
}
 8014c5e:	bd80      	pop	{r7, pc}
 8014c60:	20030000 	.word	0x20030000

08014c64 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8014c68:	4b03      	ldr	r3, [pc, #12]	; (8014c78 <HW_IPCC_THREAD_EvtNot+0x14>)
 8014c6a:	689b      	ldr	r3, [r3, #8]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f000 fe1e 	bl	80158b0 <TL_THREAD_NotReceived>

  return;
 8014c74:	bf00      	nop
}
 8014c76:	bd80      	pop	{r7, pc}
 8014c78:	20030000 	.word	0x20030000

08014c7c <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8014c80:	4b03      	ldr	r3, [pc, #12]	; (8014c90 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8014c82:	689b      	ldr	r3, [r3, #8]
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	4618      	mov	r0, r3
 8014c88:	f000 ff00 	bl	8015a8c <TL_THREAD_CliNotReceived>

  return;
 8014c8c:	bf00      	nop
}
 8014c8e:	bd80      	pop	{r7, pc}
 8014c90:	20030000 	.word	0x20030000

08014c94 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b082      	sub	sp, #8
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8014c9c:	4817      	ldr	r0, [pc, #92]	; (8014cfc <TL_MM_Init+0x68>)
 8014c9e:	f7ff fcc9 	bl	8014634 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8014ca2:	4817      	ldr	r0, [pc, #92]	; (8014d00 <TL_MM_Init+0x6c>)
 8014ca4:	f7ff fcc6 	bl	8014634 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8014ca8:	4b16      	ldr	r3, [pc, #88]	; (8014d04 <TL_MM_Init+0x70>)
 8014caa:	691b      	ldr	r3, [r3, #16]
 8014cac:	4a16      	ldr	r2, [pc, #88]	; (8014d08 <TL_MM_Init+0x74>)
 8014cae:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8014cb0:	4b15      	ldr	r3, [pc, #84]	; (8014d08 <TL_MM_Init+0x74>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	6892      	ldr	r2, [r2, #8]
 8014cb8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8014cba:	4b13      	ldr	r3, [pc, #76]	; (8014d08 <TL_MM_Init+0x74>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	68d2      	ldr	r2, [r2, #12]
 8014cc2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8014cc4:	4b10      	ldr	r3, [pc, #64]	; (8014d08 <TL_MM_Init+0x74>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	4a0c      	ldr	r2, [pc, #48]	; (8014cfc <TL_MM_Init+0x68>)
 8014cca:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8014ccc:	4b0e      	ldr	r3, [pc, #56]	; (8014d08 <TL_MM_Init+0x74>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	687a      	ldr	r2, [r7, #4]
 8014cd2:	6812      	ldr	r2, [r2, #0]
 8014cd4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8014cd6:	4b0c      	ldr	r3, [pc, #48]	; (8014d08 <TL_MM_Init+0x74>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	687a      	ldr	r2, [r7, #4]
 8014cdc:	6852      	ldr	r2, [r2, #4]
 8014cde:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8014ce0:	4b09      	ldr	r3, [pc, #36]	; (8014d08 <TL_MM_Init+0x74>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	687a      	ldr	r2, [r7, #4]
 8014ce6:	6912      	ldr	r2, [r2, #16]
 8014ce8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8014cea:	4b07      	ldr	r3, [pc, #28]	; (8014d08 <TL_MM_Init+0x74>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	6952      	ldr	r2, [r2, #20]
 8014cf2:	619a      	str	r2, [r3, #24]

  return;
 8014cf4:	bf00      	nop
}
 8014cf6:	3708      	adds	r7, #8
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	200300a8 	.word	0x200300a8
 8014d00:	20027454 	.word	0x20027454
 8014d04:	20030000 	.word	0x20030000
 8014d08:	2002746c 	.word	0x2002746c

08014d0c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b082      	sub	sp, #8
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8014d14:	6879      	ldr	r1, [r7, #4]
 8014d16:	4805      	ldr	r0, [pc, #20]	; (8014d2c <TL_MM_EvtDone+0x20>)
 8014d18:	f7ff fce0 	bl	80146dc <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8014d1c:	4804      	ldr	r0, [pc, #16]	; (8014d30 <TL_MM_EvtDone+0x24>)
 8014d1e:	f001 f981 	bl	8016024 <HW_IPCC_MM_SendFreeBuf>

  return;
 8014d22:	bf00      	nop
}
 8014d24:	3708      	adds	r7, #8
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	20027454 	.word	0x20027454
 8014d30:	08014d35 	.word	0x08014d35

08014d34 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b082      	sub	sp, #8
 8014d38:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8014d3a:	e00c      	b.n	8014d56 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8014d3c:	1d3b      	adds	r3, r7, #4
 8014d3e:	4619      	mov	r1, r3
 8014d40:	480a      	ldr	r0, [pc, #40]	; (8014d6c <SendFreeBuf+0x38>)
 8014d42:	f7ff fd0e 	bl	8014762 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8014d46:	4b0a      	ldr	r3, [pc, #40]	; (8014d70 <SendFreeBuf+0x3c>)
 8014d48:	691b      	ldr	r3, [r3, #16]
 8014d4a:	691b      	ldr	r3, [r3, #16]
 8014d4c:	687a      	ldr	r2, [r7, #4]
 8014d4e:	4611      	mov	r1, r2
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7ff fcc3 	bl	80146dc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8014d56:	4805      	ldr	r0, [pc, #20]	; (8014d6c <SendFreeBuf+0x38>)
 8014d58:	f7ff fc7c 	bl	8014654 <LST_is_empty>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d0ec      	beq.n	8014d3c <SendFreeBuf+0x8>
  }

  return;
 8014d62:	bf00      	nop
}
 8014d64:	3708      	adds	r7, #8
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}
 8014d6a:	bf00      	nop
 8014d6c:	20027454 	.word	0x20027454
 8014d70:	20030000 	.word	0x20030000

08014d74 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8014d78:	4805      	ldr	r0, [pc, #20]	; (8014d90 <TL_TRACES_Init+0x1c>)
 8014d7a:	f7ff fc5b 	bl	8014634 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8014d7e:	4b05      	ldr	r3, [pc, #20]	; (8014d94 <TL_TRACES_Init+0x20>)
 8014d80:	695b      	ldr	r3, [r3, #20]
 8014d82:	4a03      	ldr	r2, [pc, #12]	; (8014d90 <TL_TRACES_Init+0x1c>)
 8014d84:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8014d86:	f001 f983 	bl	8016090 <HW_IPCC_TRACES_Init>

  return;
 8014d8a:	bf00      	nop
}
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	200300b0 	.word	0x200300b0
 8014d94:	20030000 	.word	0x20030000

08014d98 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b082      	sub	sp, #8
 8014d9c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014d9e:	e008      	b.n	8014db2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8014da0:	1d3b      	adds	r3, r7, #4
 8014da2:	4619      	mov	r1, r3
 8014da4:	4808      	ldr	r0, [pc, #32]	; (8014dc8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8014da6:	f7ff fcdc 	bl	8014762 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	4618      	mov	r0, r3
 8014dae:	f7ec fa33 	bl	8001218 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014db2:	4805      	ldr	r0, [pc, #20]	; (8014dc8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8014db4:	f7ff fc4e 	bl	8014654 <LST_is_empty>
 8014db8:	4603      	mov	r3, r0
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d0f0      	beq.n	8014da0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8014dbe:	bf00      	nop
}
 8014dc0:	3708      	adds	r7, #8
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}
 8014dc6:	bf00      	nop
 8014dc8:	200300b0 	.word	0x200300b0

08014dcc <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b082      	sub	sp, #8
 8014dd0:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8014dd2:	f000 f9a3 	bl	801511c <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8014dd6:	480e      	ldr	r0, [pc, #56]	; (8014e10 <APP_THREAD_Init+0x44>)
 8014dd8:	f000 fd08 	bl	80157ec <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8014ddc:	2101      	movs	r1, #1
 8014dde:	2002      	movs	r0, #2
 8014de0:	f001 f97e 	bl	80160e0 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8014de4:	f000 fe3a 	bl	8015a5c <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8014de8:	f000 fe1a 	bl	8015a20 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8014dec:	f7ff fa38 	bl	8014260 <SHCI_C2_THREAD_Init>
 8014df0:	4603      	mov	r3, r0
 8014df2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8014df4:	4a07      	ldr	r2, [pc, #28]	; (8014e14 <APP_THREAD_Init+0x48>)
 8014df6:	2100      	movs	r1, #0
 8014df8:	4807      	ldr	r0, [pc, #28]	; (8014e18 <APP_THREAD_Init+0x4c>)
 8014dfa:	f7f9 fe93 	bl	800eb24 <osThreadNew>
 8014dfe:	4602      	mov	r2, r0
 8014e00:	4b06      	ldr	r3, [pc, #24]	; (8014e1c <APP_THREAD_Init+0x50>)
 8014e02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8014e04:	f000 f86c 	bl	8014ee0 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8014e08:	bf00      	nop
 8014e0a:	3708      	adds	r7, #8
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd80      	pop	{r7, pc}
 8014e10:	20030838 	.word	0x20030838
 8014e14:	08018118 	.word	0x08018118
 8014e18:	080151d9 	.word	0x080151d9
 8014e1c:	20027684 	.word	0x20027684

08014e20 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2b07      	cmp	r3, #7
 8014e2e:	d83b      	bhi.n	8014ea8 <APP_THREAD_Error+0x88>
 8014e30:	a201      	add	r2, pc, #4	; (adr r2, 8014e38 <APP_THREAD_Error+0x18>)
 8014e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e36:	bf00      	nop
 8014e38:	08014e59 	.word	0x08014e59
 8014e3c:	08014e63 	.word	0x08014e63
 8014e40:	08014e6d 	.word	0x08014e6d
 8014e44:	08014e77 	.word	0x08014e77
 8014e48:	08014e81 	.word	0x08014e81
 8014e4c:	08014e8b 	.word	0x08014e8b
 8014e50:	08014e95 	.word	0x08014e95
 8014e54:	08014e9f 	.word	0x08014e9f
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8014e58:	6839      	ldr	r1, [r7, #0]
 8014e5a:	4818      	ldr	r0, [pc, #96]	; (8014ebc <APP_THREAD_Error+0x9c>)
 8014e5c:	f000 f952 	bl	8015104 <APP_THREAD_TraceError>
    break;
 8014e60:	e027      	b.n	8014eb2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8014e62:	6839      	ldr	r1, [r7, #0]
 8014e64:	4816      	ldr	r0, [pc, #88]	; (8014ec0 <APP_THREAD_Error+0xa0>)
 8014e66:	f000 f94d 	bl	8015104 <APP_THREAD_TraceError>
    break;
 8014e6a:	e022      	b.n	8014eb2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8014e6c:	6839      	ldr	r1, [r7, #0]
 8014e6e:	4815      	ldr	r0, [pc, #84]	; (8014ec4 <APP_THREAD_Error+0xa4>)
 8014e70:	f000 f948 	bl	8015104 <APP_THREAD_TraceError>
    break;
 8014e74:	e01d      	b.n	8014eb2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8014e76:	6839      	ldr	r1, [r7, #0]
 8014e78:	4813      	ldr	r0, [pc, #76]	; (8014ec8 <APP_THREAD_Error+0xa8>)
 8014e7a:	f000 f943 	bl	8015104 <APP_THREAD_TraceError>
    break;
 8014e7e:	e018      	b.n	8014eb2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8014e80:	6839      	ldr	r1, [r7, #0]
 8014e82:	4812      	ldr	r0, [pc, #72]	; (8014ecc <APP_THREAD_Error+0xac>)
 8014e84:	f000 f93e 	bl	8015104 <APP_THREAD_TraceError>
    break;
 8014e88:	e013      	b.n	8014eb2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8014e8a:	6839      	ldr	r1, [r7, #0]
 8014e8c:	4810      	ldr	r0, [pc, #64]	; (8014ed0 <APP_THREAD_Error+0xb0>)
 8014e8e:	f000 f939 	bl	8015104 <APP_THREAD_TraceError>
    break;
 8014e92:	e00e      	b.n	8014eb2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8014e94:	6839      	ldr	r1, [r7, #0]
 8014e96:	480f      	ldr	r0, [pc, #60]	; (8014ed4 <APP_THREAD_Error+0xb4>)
 8014e98:	f000 f934 	bl	8015104 <APP_THREAD_TraceError>
    break;
 8014e9c:	e009      	b.n	8014eb2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8014e9e:	6839      	ldr	r1, [r7, #0]
 8014ea0:	480d      	ldr	r0, [pc, #52]	; (8014ed8 <APP_THREAD_Error+0xb8>)
 8014ea2:	f000 f92f 	bl	8015104 <APP_THREAD_TraceError>
    break;
 8014ea6:	e004      	b.n	8014eb2 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8014ea8:	2100      	movs	r1, #0
 8014eaa:	480c      	ldr	r0, [pc, #48]	; (8014edc <APP_THREAD_Error+0xbc>)
 8014eac:	f000 f92a 	bl	8015104 <APP_THREAD_TraceError>
    break;
 8014eb0:	bf00      	nop
  }
}
 8014eb2:	bf00      	nop
 8014eb4:	3708      	adds	r7, #8
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	08017b18 	.word	0x08017b18
 8014ec0:	08017b3c 	.word	0x08017b3c
 8014ec4:	08017b60 	.word	0x08017b60
 8014ec8:	08017b80 	.word	0x08017b80
 8014ecc:	08017ba0 	.word	0x08017ba0
 8014ed0:	08017bc0 	.word	0x08017bc0
 8014ed4:	08017bdc 	.word	0x08017bdc
 8014ed8:	08017c08 	.word	0x08017c08
 8014edc:	08017c2c 	.word	0x08017c2c

08014ee0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b082      	sub	sp, #8
 8014ee4:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8014ee6:	2000      	movs	r0, #0
 8014ee8:	f7fe fddc 	bl	8013aa4 <otInstanceErasePersistentInfo>
 8014eec:	4603      	mov	r3, r0
 8014eee:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014ef0:	79fb      	ldrb	r3, [r7, #7]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d004      	beq.n	8014f00 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8014ef6:	79fb      	ldrb	r3, [r7, #7]
 8014ef8:	4619      	mov	r1, r3
 8014efa:	2006      	movs	r0, #6
 8014efc:	f7ff ff90 	bl	8014e20 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8014f00:	2000      	movs	r0, #0
 8014f02:	f7fe fd72 	bl	80139ea <otInstanceFinalize>
  otInstanceInitSingle();
 8014f06:	f7fe fd49 	bl	801399c <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	4957      	ldr	r1, [pc, #348]	; (801506c <APP_THREAD_DeviceConfig+0x18c>)
 8014f0e:	2000      	movs	r0, #0
 8014f10:	f7fe fd92 	bl	8013a38 <otSetStateChangedCallback>
 8014f14:	4603      	mov	r3, r0
 8014f16:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014f18:	79fb      	ldrb	r3, [r7, #7]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d004      	beq.n	8014f28 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8014f1e:	79fb      	ldrb	r3, [r7, #7]
 8014f20:	4619      	mov	r1, r3
 8014f22:	2001      	movs	r0, #1
 8014f24:	f7ff ff7c 	bl	8014e20 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8014f28:	2117      	movs	r1, #23
 8014f2a:	2000      	movs	r0, #0
 8014f2c:	f7fe fe9a 	bl	8013c64 <otLinkSetChannel>
 8014f30:	4603      	mov	r3, r0
 8014f32:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014f34:	79fb      	ldrb	r3, [r7, #7]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d004      	beq.n	8014f44 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8014f3a:	79fb      	ldrb	r3, [r7, #7]
 8014f3c:	4619      	mov	r1, r3
 8014f3e:	2002      	movs	r0, #2
 8014f40:	f7ff ff6e 	bl	8014e20 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8014f44:	f241 2134 	movw	r1, #4660	; 0x1234
 8014f48:	2000      	movs	r0, #0
 8014f4a:	f7fe febb 	bl	8013cc4 <otLinkSetPanId>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014f52:	79fb      	ldrb	r3, [r7, #7]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d004      	beq.n	8014f62 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8014f58:	79fb      	ldrb	r3, [r7, #7]
 8014f5a:	4619      	mov	r1, r3
 8014f5c:	2003      	movs	r0, #3
 8014f5e:	f7ff ff5f 	bl	8014e20 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8014f62:	2101      	movs	r1, #1
 8014f64:	2000      	movs	r0, #0
 8014f66:	f7fe fdc6 	bl	8013af6 <otIp6SetEnabled>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014f6e:	79fb      	ldrb	r3, [r7, #7]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d004      	beq.n	8014f7e <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8014f74:	79fb      	ldrb	r3, [r7, #7]
 8014f76:	4619      	mov	r1, r3
 8014f78:	2004      	movs	r0, #4
 8014f7a:	f7ff ff51 	bl	8014e20 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8014f7e:	2101      	movs	r1, #1
 8014f80:	2000      	movs	r0, #0
 8014f82:	f7ff fc0b 	bl	801479c <otThreadSetEnabled>
 8014f86:	4603      	mov	r3, r0
 8014f88:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014f8a:	79fb      	ldrb	r3, [r7, #7]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d004      	beq.n	8014f9a <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8014f90:	79fb      	ldrb	r3, [r7, #7]
 8014f92:	4619      	mov	r1, r3
 8014f94:	2005      	movs	r0, #5
 8014f96:	f7ff ff43 	bl	8014e20 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 8014f9a:	2100      	movs	r1, #0
 8014f9c:	2000      	movs	r0, #0
 8014f9e:	f7ff fbfd 	bl	801479c <otThreadSetEnabled>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014fa6:	79fb      	ldrb	r3, [r7, #7]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d004      	beq.n	8014fb6 <APP_THREAD_DeviceConfig+0xd6>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8014fac:	79fb      	ldrb	r3, [r7, #7]
 8014fae:	4619      	mov	r1, r3
 8014fb0:	2005      	movs	r0, #5
 8014fb2:	f7ff ff35 	bl	8014e20 <APP_THREAD_Error>
  }

    error = otThreadSetMasterKey(NULL, &masterKey);
 8014fb6:	492e      	ldr	r1, [pc, #184]	; (8015070 <APP_THREAD_DeviceConfig+0x190>)
 8014fb8:	2000      	movs	r0, #0
 8014fba:	f7ff fc4e 	bl	801485a <otThreadSetMasterKey>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8014fc2:	79fb      	ldrb	r3, [r7, #7]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d004      	beq.n	8014fd2 <APP_THREAD_DeviceConfig+0xf2>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8014fc8:	79fb      	ldrb	r3, [r7, #7]
 8014fca:	4619      	mov	r1, r3
 8014fcc:	2002      	movs	r0, #2
 8014fce:	f7ff ff27 	bl	8014e20 <APP_THREAD_Error>
    }

    error = otThreadSetNetworkName(NULL, networkName);
 8014fd2:	4928      	ldr	r1, [pc, #160]	; (8015074 <APP_THREAD_DeviceConfig+0x194>)
 8014fd4:	2000      	movs	r0, #0
 8014fd6:	f7ff fc97 	bl	8014908 <otThreadSetNetworkName>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8014fde:	79fb      	ldrb	r3, [r7, #7]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d004      	beq.n	8014fee <APP_THREAD_DeviceConfig+0x10e>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8014fe4:	79fb      	ldrb	r3, [r7, #7]
 8014fe6:	4619      	mov	r1, r3
 8014fe8:	2002      	movs	r0, #2
 8014fea:	f7ff ff19 	bl	8014e20 <APP_THREAD_Error>
    }
    error = otThreadSetExtendedPanId(NULL , &extendedPanId);
 8014fee:	4922      	ldr	r1, [pc, #136]	; (8015078 <APP_THREAD_DeviceConfig+0x198>)
 8014ff0:	2000      	movs	r0, #0
 8014ff2:	f7ff fc03 	bl	80147fc <otThreadSetExtendedPanId>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8014ffa:	79fb      	ldrb	r3, [r7, #7]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d004      	beq.n	801500a <APP_THREAD_DeviceConfig+0x12a>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8015000:	79fb      	ldrb	r3, [r7, #7]
 8015002:	4619      	mov	r1, r3
 8015004:	2002      	movs	r0, #2
 8015006:	f7ff ff0b 	bl	8014e20 <APP_THREAD_Error>
    }

    error = otThreadSetEnabled(NULL, true);
 801500a:	2101      	movs	r1, #1
 801500c:	2000      	movs	r0, #0
 801500e:	f7ff fbc5 	bl	801479c <otThreadSetEnabled>
 8015012:	4603      	mov	r3, r0
 8015014:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8015016:	79fb      	ldrb	r3, [r7, #7]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d004      	beq.n	8015026 <APP_THREAD_DeviceConfig+0x146>
    {
      APP_THREAD_Error(ERR_THREAD_START,error);
 801501c:	79fb      	ldrb	r3, [r7, #7]
 801501e:	4619      	mov	r1, r3
 8015020:	2005      	movs	r0, #5
 8015022:	f7ff fefd 	bl	8014e20 <APP_THREAD_Error>
    }

    error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8015026:	f241 6133 	movw	r1, #5683	; 0x1633
 801502a:	2000      	movs	r0, #0
 801502c:	f7fe fc24 	bl	8013878 <otCoapStart>
 8015030:	4603      	mov	r3, r0
 8015032:	71fb      	strb	r3, [r7, #7]
  //  error = otCoapAddResource(NULL, &OT_Light_Ressource);
    error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8015034:	4911      	ldr	r1, [pc, #68]	; (801507c <APP_THREAD_DeviceConfig+0x19c>)
 8015036:	2000      	movs	r0, #0
 8015038:	f7fe fc4e 	bl	80138d8 <otCoapAddResource>
 801503c:	4603      	mov	r3, r0
 801503e:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 8015040:	490f      	ldr	r1, [pc, #60]	; (8015080 <APP_THREAD_DeviceConfig+0x1a0>)
 8015042:	2000      	movs	r0, #0
 8015044:	f7fe fc48 	bl	80138d8 <otCoapAddResource>
 8015048:	4603      	mov	r3, r0
 801504a:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 801504c:	490d      	ldr	r1, [pc, #52]	; (8015084 <APP_THREAD_DeviceConfig+0x1a4>)
 801504e:	2000      	movs	r0, #0
 8015050:	f7fe fc42 	bl	80138d8 <otCoapAddResource>
 8015054:	4603      	mov	r3, r0
 8015056:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 8015058:	490b      	ldr	r1, [pc, #44]	; (8015088 <APP_THREAD_DeviceConfig+0x1a8>)
 801505a:	2000      	movs	r0, #0
 801505c:	f7fe fc3c 	bl	80138d8 <otCoapAddResource>
 8015060:	4603      	mov	r3, r0
 8015062:	71fb      	strb	r3, [r7, #7]

    // start master thread
//    osThreadFlagsSet(masterTaskHandle, 0x00000008U);
//    startSensorThreads();
  /* USER CODE END DEVICECONFIG */
}
 8015064:	bf00      	nop
 8015066:	3708      	adds	r7, #8
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}
 801506c:	0801508d 	.word	0x0801508d
 8015070:	08018180 	.word	0x08018180
 8015074:	08018198 	.word	0x08018198
 8015078:	08018190 	.word	0x08018190
 801507c:	20000088 	.word	0x20000088
 8015080:	20000098 	.word	0x20000098
 8015084:	200000a8 	.word	0x200000a8
 8015088:	200000b8 	.word	0x200000b8

0801508c <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 801508c:	b590      	push	{r4, r7, lr}
 801508e:	b083      	sub	sp, #12
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	f003 0304 	and.w	r3, r3, #4
 801509c:	2b00      	cmp	r3, #0
 801509e:	d027      	beq.n	80150f0 <APP_THREAD_StateNotif+0x64>
  {
    switch (otThreadGetDeviceRole(NULL))
 80150a0:	2000      	movs	r0, #0
 80150a2:	f7ff fc60 	bl	8014966 <otThreadGetDeviceRole>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b04      	cmp	r3, #4
 80150aa:	d81e      	bhi.n	80150ea <APP_THREAD_StateNotif+0x5e>
 80150ac:	a201      	add	r2, pc, #4	; (adr r2, 80150b4 <APP_THREAD_StateNotif+0x28>)
 80150ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150b2:	bf00      	nop
 80150b4:	080150f5 	.word	0x080150f5
 80150b8:	080150c9 	.word	0x080150c9
 80150bc:	080150d9 	.word	0x080150d9
 80150c0:	080150df 	.word	0x080150df
 80150c4:	080150e5 	.word	0x080150e5

      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
    	borderRouter.epoch = 0;
 80150c8:	4a0d      	ldr	r2, [pc, #52]	; (8015100 <APP_THREAD_StateNotif+0x74>)
 80150ca:	f04f 0300 	mov.w	r3, #0
 80150ce:	f04f 0400 	mov.w	r4, #0
 80150d2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 80150d6:	e00e      	b.n	80150f6 <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_CHILD:
      /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
    	APP_THREAD_SendMyIP();
 80150d8:	f000 f8b0 	bl	801523c <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 80150dc:	e00b      	b.n	80150f6 <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_ROUTER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_ROUTER */
    	APP_THREAD_SendMyIP();
 80150de:	f000 f8ad 	bl	801523c <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 80150e2:	e008      	b.n	80150f6 <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_LEADER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_LEADER */
    	APP_THREAD_SendMyIP();
 80150e4:	f000 f8aa 	bl	801523c <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 80150e8:	e005      	b.n	80150f6 <APP_THREAD_StateNotif+0x6a>
    default:
      /* USER CODE BEGIN DEFAULT */
    	APP_THREAD_SendMyIP();
 80150ea:	f000 f8a7 	bl	801523c <APP_THREAD_SendMyIP>
      /* USER CODE END DEFAULT */
      break;
 80150ee:	e002      	b.n	80150f6 <APP_THREAD_StateNotif+0x6a>
    }
  }
 80150f0:	bf00      	nop
 80150f2:	e000      	b.n	80150f6 <APP_THREAD_StateNotif+0x6a>
      break;
 80150f4:	bf00      	nop
}
 80150f6:	bf00      	nop
 80150f8:	370c      	adds	r7, #12
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd90      	pop	{r4, r7, pc}
 80150fe:	bf00      	nop
 8015100:	20027750 	.word	0x20027750

08015104 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8015104:	b480      	push	{r7}
 8015106:	b083      	sub	sp, #12
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 801510e:	bf00      	nop
 8015110:	370c      	adds	r7, #12
 8015112:	46bd      	mov	sp, r7
 8015114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015118:	4770      	bx	lr
	...

0801511c <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b088      	sub	sp, #32
 8015120:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8015122:	1d3b      	adds	r3, r7, #4
 8015124:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8015126:	6978      	ldr	r0, [r7, #20]
 8015128:	f7ff f8c6 	bl	80142b8 <SHCI_GetWirelessFwInfo>
 801512c:	4603      	mov	r3, r0
 801512e:	2b00      	cmp	r3, #0
 8015130:	d004      	beq.n	801513c <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8015132:	2101      	movs	r1, #1
 8015134:	2007      	movs	r0, #7
 8015136:	f7ff fe73 	bl	8014e20 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 801513a:	e03d      	b.n	80151b8 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 801513c:	4a20      	ldr	r2, [pc, #128]	; (80151c0 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 801513e:	2101      	movs	r1, #1
 8015140:	2000      	movs	r0, #0
 8015142:	f7ef ffff 	bl	8005144 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8015146:	4a1f      	ldr	r2, [pc, #124]	; (80151c4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8015148:	2101      	movs	r1, #1
 801514a:	2000      	movs	r0, #0
 801514c:	f7ef fffa 	bl	8005144 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8015150:	697b      	ldr	r3, [r7, #20]
 8015152:	781b      	ldrb	r3, [r3, #0]
 8015154:	4619      	mov	r1, r3
 8015156:	697b      	ldr	r3, [r7, #20]
 8015158:	785b      	ldrb	r3, [r3, #1]
 801515a:	461a      	mov	r2, r3
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	789b      	ldrb	r3, [r3, #2]
 8015160:	9301      	str	r3, [sp, #4]
 8015162:	9200      	str	r2, [sp, #0]
 8015164:	460b      	mov	r3, r1
 8015166:	4a18      	ldr	r2, [pc, #96]	; (80151c8 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8015168:	2101      	movs	r1, #1
 801516a:	2000      	movs	r0, #0
 801516c:	f7ef ffea 	bl	8005144 <logApplication>
    switch(p_wireless_info->StackType)
 8015170:	697b      	ldr	r3, [r7, #20]
 8015172:	7a5b      	ldrb	r3, [r3, #9]
 8015174:	2b11      	cmp	r3, #17
 8015176:	d009      	beq.n	801518c <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8015178:	2b50      	cmp	r3, #80	; 0x50
 801517a:	d00d      	beq.n	8015198 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 801517c:	2b10      	cmp	r3, #16
 801517e:	d111      	bne.n	80151a4 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8015180:	4a12      	ldr	r2, [pc, #72]	; (80151cc <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8015182:	2101      	movs	r1, #1
 8015184:	2000      	movs	r0, #0
 8015186:	f7ef ffdd 	bl	8005144 <logApplication>
      break;
 801518a:	e010      	b.n	80151ae <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 801518c:	4a10      	ldr	r2, [pc, #64]	; (80151d0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 801518e:	2101      	movs	r1, #1
 8015190:	2000      	movs	r0, #0
 8015192:	f7ef ffd7 	bl	8005144 <logApplication>
      break;
 8015196:	e00a      	b.n	80151ae <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8015198:	4a0e      	ldr	r2, [pc, #56]	; (80151d4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 801519a:	2101      	movs	r1, #1
 801519c:	2000      	movs	r0, #0
 801519e:	f7ef ffd1 	bl	8005144 <logApplication>
      break;
 80151a2:	e004      	b.n	80151ae <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80151a4:	2101      	movs	r1, #1
 80151a6:	2007      	movs	r0, #7
 80151a8:	f7ff fe3a 	bl	8014e20 <APP_THREAD_Error>
      break;
 80151ac:	bf00      	nop
    APP_DBG("**********************************************************");
 80151ae:	4a04      	ldr	r2, [pc, #16]	; (80151c0 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80151b0:	2101      	movs	r1, #1
 80151b2:	2000      	movs	r0, #0
 80151b4:	f7ef ffc6 	bl	8005144 <logApplication>
}
 80151b8:	bf00      	nop
 80151ba:	3718      	adds	r7, #24
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}
 80151c0:	08017c3c 	.word	0x08017c3c
 80151c4:	08017c78 	.word	0x08017c78
 80151c8:	08017c94 	.word	0x08017c94
 80151cc:	08017cac 	.word	0x08017cac
 80151d0:	08017cc4 	.word	0x08017cc4
 80151d4:	08017cdc 	.word	0x08017cdc

080151d8 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b082      	sub	sp, #8
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80151e0:	f04f 32ff 	mov.w	r2, #4294967295
 80151e4:	2101      	movs	r1, #1
 80151e6:	2001      	movs	r0, #1
 80151e8:	f7f9 fdfa 	bl	800ede0 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 80151ec:	f000 fc7a 	bl	8015ae4 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80151f0:	e7f6      	b.n	80151e0 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

080151f2 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 80151f2:	b580      	push	{r7, lr}
 80151f4:	b082      	sub	sp, #8
 80151f6:	af00      	add	r7, sp, #0
 80151f8:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80151fa:	f04f 32ff 	mov.w	r2, #4294967295
 80151fe:	2101      	movs	r1, #1
 8015200:	2001      	movs	r0, #1
 8015202:	f7f9 fded 	bl	800ede0 <osThreadFlagsWait>
    Send_CLI_To_M0();
 8015206:	f000 fbd1 	bl	80159ac <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801520a:	e7f6      	b.n	80151fa <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

0801520c <APP_THREAD_DummyReqHandler>:
  */
static void APP_THREAD_DummyReqHandler(void            * p_context,
                                   otCoapHeader        * pHeader,
                                   otMessage           * pMessage,
                                   const otMessageInfo * pMessageInfo)
{
 801520c:	b480      	push	{r7}
 801520e:	b085      	sub	sp, #20
 8015210:	af00      	add	r7, sp, #0
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	607a      	str	r2, [r7, #4]
 8015218:	603b      	str	r3, [r7, #0]
    tempMessageInfo = pMessageInfo;
 801521a:	4a06      	ldr	r2, [pc, #24]	; (8015234 <APP_THREAD_DummyReqHandler+0x28>)
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8015220:	4a05      	ldr	r2, [pc, #20]	; (8015238 <APP_THREAD_DummyReqHandler+0x2c>)
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	6013      	str	r3, [r2, #0]
}
 8015226:	bf00      	nop
 8015228:	3714      	adds	r7, #20
 801522a:	46bd      	mov	sp, r7
 801522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015230:	4770      	bx	lr
 8015232:	bf00      	nop
 8015234:	200286b8 	.word	0x200286b8
 8015238:	200286fc 	.word	0x200286fc

0801523c <APP_THREAD_SendMyIP>:
	APP_THREAD_SendCoapUnicastRequest(NULL, NULL, MULICAST_FTD_BORDER_ROUTER, borderSyncResource);
}


char msgSendMyIP[5] = "cal";
void APP_THREAD_SendMyIP(){
 801523c:	b580      	push	{r7, lr}
 801523e:	af00      	add	r7, sp, #0
	APP_THREAD_SendCoapUnicastRequest(msgSendMyIP, sizeof(msgSendMyIP), borderRouter.ipv6, borderSyncResource);
 8015240:	4b03      	ldr	r3, [pc, #12]	; (8015250 <APP_THREAD_SendMyIP+0x14>)
 8015242:	4a04      	ldr	r2, [pc, #16]	; (8015254 <APP_THREAD_SendMyIP+0x18>)
 8015244:	2105      	movs	r1, #5
 8015246:	4804      	ldr	r0, [pc, #16]	; (8015258 <APP_THREAD_SendMyIP+0x1c>)
 8015248:	f000 f94c 	bl	80154e4 <APP_THREAD_SendCoapUnicastRequest>
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 801524c:	bf00      	nop
 801524e:	bd80      	pop	{r7, pc}
 8015250:	08018160 	.word	0x08018160
 8015254:	20027750 	.word	0x20027750
 8015258:	200000c8 	.word	0x200000c8

0801525c <APP_THREAD_SendBorderPacket>:

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket){
 801525c:	b580      	push	{r7, lr}
 801525e:	b084      	sub	sp, #16
 8015260:	af02      	add	r7, sp, #8
 8015262:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapUnicastMsg(sensorPacket, sizeof(struct LogPacket), borderRouter.ipv6  , borderPacket, 1U);
 8015264:	2301      	movs	r3, #1
 8015266:	9300      	str	r3, [sp, #0]
 8015268:	4b04      	ldr	r3, [pc, #16]	; (801527c <APP_THREAD_SendBorderPacket+0x20>)
 801526a:	4a05      	ldr	r2, [pc, #20]	; (8015280 <APP_THREAD_SendBorderPacket+0x24>)
 801526c:	21cc      	movs	r1, #204	; 0xcc
 801526e:	6878      	ldr	r0, [r7, #4]
 8015270:	f000 f9ea 	bl	8015648 <APP_THREAD_SendCoapUnicastMsg>

}
 8015274:	bf00      	nop
 8015276:	3708      	adds	r7, #8
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}
 801527c:	08018170 	.word	0x08018170
 8015280:	20027750 	.word	0x20027750

08015284 <APP_THREAD_CoapLightsSimpleRequestHandler>:
//}

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b084      	sub	sp, #16
 8015288:	af00      	add	r7, sp, #0
 801528a:	60f8      	str	r0, [r7, #12]
 801528c:	60b9      	str	r1, [r7, #8]
 801528e:	607a      	str	r2, [r7, #4]
  do
  {
	lightsSimpleMessage = 0;
 8015290:	4b21      	ldr	r3, [pc, #132]	; (8015318 <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 8015292:	2200      	movs	r2, #0
 8015294:	601a      	str	r2, [r3, #0]

	//REMOVE THIS!!!!!!!!!
//	APP_THREAD_GetBorderRouterIP(); //REMOVE THIS!!!!!!!!!
	//REMOVE THIS!!!!!!!!!

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage)) == 4U)
 8015296:	68b8      	ldr	r0, [r7, #8]
 8015298:	f7fe fd6f 	bl	8013d7a <otMessageGetOffset>
 801529c:	4603      	mov	r3, r0
 801529e:	4619      	mov	r1, r3
 80152a0:	2304      	movs	r3, #4
 80152a2:	4a1d      	ldr	r2, [pc, #116]	; (8015318 <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 80152a4:	68b8      	ldr	r0, [r7, #8]
 80152a6:	f7fe fdcd 	bl	8013e44 <otMessageRead>
 80152aa:	4603      	mov	r3, r0
 80152ac:	2b04      	cmp	r3, #4
 80152ae:	d106      	bne.n	80152be <APP_THREAD_CoapLightsSimpleRequestHandler+0x3a>
	{
//    	lightMessage = lightMessage & 0x0F; //remove first 4 bits since they are part of the message overhead (?)

    	osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 80152b0:	4b1a      	ldr	r3, [pc, #104]	; (801531c <APP_THREAD_CoapLightsSimpleRequestHandler+0x98>)
 80152b2:	6818      	ldr	r0, [r3, #0]
 80152b4:	2300      	movs	r3, #0
 80152b6:	2200      	movs	r2, #0
 80152b8:	4917      	ldr	r1, [pc, #92]	; (8015318 <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 80152ba:	f7fa faa1 	bl	800f800 <osMessageQueuePut>
    	//char ipv6_multicast[50] = "deryfd11:1111:1122:0:22e2:b871:dc02:ad96";

//    	APP_THREAD_SendCoapUnicastRequest(message, borderRouter.ipv6, borderSyncResource);

	}
    receivedMessage = (otMessageInfo *) pMessage;
 80152be:	4a18      	ldr	r2, [pc, #96]	; (8015320 <APP_THREAD_CoapLightsSimpleRequestHandler+0x9c>)
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 80152c4:	68f8      	ldr	r0, [r7, #12]
 80152c6:	f7fe f98a 	bl	80135de <otCoapHeaderGetType>
 80152ca:	4603      	mov	r3, r0
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d104      	bne.n	80152da <APP_THREAD_CoapLightsSimpleRequestHandler+0x56>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 80152d0:	6879      	ldr	r1, [r7, #4]
 80152d2:	68f8      	ldr	r0, [r7, #12]
 80152d4:	f000 fa3e 	bl	8015754 <APP_THREAD_SendDataResponse>
	  break;
 80152d8:	e019      	b.n	801530e <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 80152da:	68f8      	ldr	r0, [r7, #12]
 80152dc:	f7fe f97f 	bl	80135de <otCoapHeaderGetType>
 80152e0:	4603      	mov	r3, r0
 80152e2:	2b10      	cmp	r3, #16
 80152e4:	d110      	bne.n	8015308 <APP_THREAD_CoapLightsSimpleRequestHandler+0x84>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 80152e6:	68f8      	ldr	r0, [r7, #12]
 80152e8:	f7fe f9a7 	bl	801363a <otCoapHeaderGetCode>
 80152ec:	4603      	mov	r3, r0
 80152ee:	2b03      	cmp	r3, #3
 80152f0:	d10c      	bne.n	801530c <APP_THREAD_CoapLightsSimpleRequestHandler+0x88>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 80152f2:	68b8      	ldr	r0, [r7, #8]
 80152f4:	f7fe fd41 	bl	8013d7a <otMessageGetOffset>
 80152f8:	4603      	mov	r3, r0
 80152fa:	4619      	mov	r1, r3
 80152fc:	2301      	movs	r3, #1
 80152fe:	4a09      	ldr	r2, [pc, #36]	; (8015324 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>)
 8015300:	68b8      	ldr	r0, [r7, #8]
 8015302:	f7fe fd9f 	bl	8013e44 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8015306:	e002      	b.n	801530e <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
      break;
 8015308:	bf00      	nop
 801530a:	e000      	b.n	801530e <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
      break;
 801530c:	bf00      	nop
}
 801530e:	bf00      	nop
 8015310:	3710      	adds	r7, #16
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	20027db4 	.word	0x20027db4
 801531c:	20027970 	.word	0x20027970
 8015320:	200286fc 	.word	0x200286fc
 8015324:	2002774d 	.word	0x2002774d

08015328 <APP_THREAD_CoapToggleLoggingRequestHandler>:

static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b084      	sub	sp, #16
 801532c:	af00      	add	r7, sp, #0
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
  do
  {
    //APP_THREAD_SendCoapUnicastRequest();

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage))
 8015334:	68b8      	ldr	r0, [r7, #8]
 8015336:	f7fe fd20 	bl	8013d7a <otMessageGetOffset>
 801533a:	4603      	mov	r3, r0
 801533c:	4619      	mov	r1, r3
 801533e:	2306      	movs	r3, #6
 8015340:	4a1e      	ldr	r2, [pc, #120]	; (80153bc <APP_THREAD_CoapToggleLoggingRequestHandler+0x94>)
 8015342:	68b8      	ldr	r0, [r7, #8]
 8015344:	f7fe fd7e 	bl	8013e44 <otMessageRead>
 8015348:	4603      	mov	r3, r0
 801534a:	2b06      	cmp	r3, #6
 801534c:	d106      	bne.n	801535c <APP_THREAD_CoapToggleLoggingRequestHandler+0x34>
	{
    	osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 801534e:	4b1c      	ldr	r3, [pc, #112]	; (80153c0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x98>)
 8015350:	6818      	ldr	r0, [r3, #0]
 8015352:	2300      	movs	r3, #0
 8015354:	2200      	movs	r2, #0
 8015356:	4919      	ldr	r1, [pc, #100]	; (80153bc <APP_THREAD_CoapToggleLoggingRequestHandler+0x94>)
 8015358:	f7fa fa52 	bl	800f800 <osMessageQueuePut>
//    	{
//    		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
//		}
	}

    tempMessageInfo = pMessageInfo;
 801535c:	4a19      	ldr	r2, [pc, #100]	; (80153c4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x9c>)
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8015362:	4a19      	ldr	r2, [pc, #100]	; (80153c8 <APP_THREAD_CoapToggleLoggingRequestHandler+0xa0>)
 8015364:	68bb      	ldr	r3, [r7, #8]
 8015366:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8015368:	68f8      	ldr	r0, [r7, #12]
 801536a:	f7fe f938 	bl	80135de <otCoapHeaderGetType>
 801536e:	4603      	mov	r3, r0
 8015370:	2b00      	cmp	r3, #0
 8015372:	d104      	bne.n	801537e <APP_THREAD_CoapToggleLoggingRequestHandler+0x56>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 8015374:	6879      	ldr	r1, [r7, #4]
 8015376:	68f8      	ldr	r0, [r7, #12]
 8015378:	f000 f9ec 	bl	8015754 <APP_THREAD_SendDataResponse>
	  break;
 801537c:	e019      	b.n	80153b2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 801537e:	68f8      	ldr	r0, [r7, #12]
 8015380:	f7fe f92d 	bl	80135de <otCoapHeaderGetType>
 8015384:	4603      	mov	r3, r0
 8015386:	2b10      	cmp	r3, #16
 8015388:	d110      	bne.n	80153ac <APP_THREAD_CoapToggleLoggingRequestHandler+0x84>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 801538a:	68f8      	ldr	r0, [r7, #12]
 801538c:	f7fe f955 	bl	801363a <otCoapHeaderGetCode>
 8015390:	4603      	mov	r3, r0
 8015392:	2b03      	cmp	r3, #3
 8015394:	d10c      	bne.n	80153b0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8015396:	68b8      	ldr	r0, [r7, #8]
 8015398:	f7fe fcef 	bl	8013d7a <otMessageGetOffset>
 801539c:	4603      	mov	r3, r0
 801539e:	4619      	mov	r1, r3
 80153a0:	2301      	movs	r3, #1
 80153a2:	4a0a      	ldr	r2, [pc, #40]	; (80153cc <APP_THREAD_CoapToggleLoggingRequestHandler+0xa4>)
 80153a4:	68b8      	ldr	r0, [r7, #8]
 80153a6:	f7fe fd4d 	bl	8013e44 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 80153aa:	e002      	b.n	80153b2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
      break;
 80153ac:	bf00      	nop
 80153ae:	e000      	b.n	80153b2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
      break;
 80153b0:	bf00      	nop
}
 80153b2:	bf00      	nop
 80153b4:	3710      	adds	r7, #16
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}
 80153ba:	bf00      	nop
 80153bc:	200286d0 	.word	0x200286d0
 80153c0:	20027d9c 	.word	0x20027d9c
 80153c4:	200286b8 	.word	0x200286b8
 80153c8:	200286fc 	.word	0x200286fc
 80153cc:	2002774d 	.word	0x2002774d

080153d0 <APP_THREAD_CoapBorderTimeRequestHandler>:
volatile char temp_var[100];
volatile uint8_t temp_num = 0;
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b084      	sub	sp, #16
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	60f8      	str	r0, [r7, #12]
 80153d8:	60b9      	str	r1, [r7, #8]
 80153da:	607a      	str	r2, [r7, #4]
  do
  {

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &borderRouter, sizeof(borderRouter)) == sizeof(borderRouter))
 80153dc:	68b8      	ldr	r0, [r7, #8]
 80153de:	f7fe fccc 	bl	8013d7a <otMessageGetOffset>
 80153e2:	4603      	mov	r3, r0
 80153e4:	4619      	mov	r1, r3
 80153e6:	2340      	movs	r3, #64	; 0x40
 80153e8:	4a1a      	ldr	r2, [pc, #104]	; (8015454 <APP_THREAD_CoapBorderTimeRequestHandler+0x84>)
 80153ea:	68b8      	ldr	r0, [r7, #8]
 80153ec:	f7fe fd2a 	bl	8013e44 <otMessageRead>
 80153f0:	4603      	mov	r3, r0
 80153f2:	2b40      	cmp	r3, #64	; 0x40
 80153f4:	d101      	bne.n	80153fa <APP_THREAD_CoapBorderTimeRequestHandler+0x2a>
	{
    	APP_THREAD_SendMyIP();
 80153f6:	f7ff ff21 	bl	801523c <APP_THREAD_SendMyIP>
////			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
////			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//		}
	}

    receivedMessage = (otMessageInfo *) pMessage;
 80153fa:	4a17      	ldr	r2, [pc, #92]	; (8015458 <APP_THREAD_CoapBorderTimeRequestHandler+0x88>)
 80153fc:	68bb      	ldr	r3, [r7, #8]
 80153fe:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8015400:	68f8      	ldr	r0, [r7, #12]
 8015402:	f7fe f8ec 	bl	80135de <otCoapHeaderGetType>
 8015406:	4603      	mov	r3, r0
 8015408:	2b00      	cmp	r3, #0
 801540a:	d104      	bne.n	8015416 <APP_THREAD_CoapBorderTimeRequestHandler+0x46>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 801540c:	6879      	ldr	r1, [r7, #4]
 801540e:	68f8      	ldr	r0, [r7, #12]
 8015410:	f000 f9a0 	bl	8015754 <APP_THREAD_SendDataResponse>
	  break;
 8015414:	e019      	b.n	801544a <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8015416:	68f8      	ldr	r0, [r7, #12]
 8015418:	f7fe f8e1 	bl	80135de <otCoapHeaderGetType>
 801541c:	4603      	mov	r3, r0
 801541e:	2b10      	cmp	r3, #16
 8015420:	d110      	bne.n	8015444 <APP_THREAD_CoapBorderTimeRequestHandler+0x74>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8015422:	68f8      	ldr	r0, [r7, #12]
 8015424:	f7fe f909 	bl	801363a <otCoapHeaderGetCode>
 8015428:	4603      	mov	r3, r0
 801542a:	2b03      	cmp	r3, #3
 801542c:	d10c      	bne.n	8015448 <APP_THREAD_CoapBorderTimeRequestHandler+0x78>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 801542e:	68b8      	ldr	r0, [r7, #8]
 8015430:	f7fe fca3 	bl	8013d7a <otMessageGetOffset>
 8015434:	4603      	mov	r3, r0
 8015436:	4619      	mov	r1, r3
 8015438:	2301      	movs	r3, #1
 801543a:	4a08      	ldr	r2, [pc, #32]	; (801545c <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>)
 801543c:	68b8      	ldr	r0, [r7, #8]
 801543e:	f7fe fd01 	bl	8013e44 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8015442:	e002      	b.n	801544a <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
      break;
 8015444:	bf00      	nop
 8015446:	e000      	b.n	801544a <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
      break;
 8015448:	bf00      	nop
}
 801544a:	bf00      	nop
 801544c:	3710      	adds	r7, #16
 801544e:	46bd      	mov	sp, r7
 8015450:	bd80      	pop	{r7, pc}
 8015452:	bf00      	nop
 8015454:	20027750 	.word	0x20027750
 8015458:	200286fc 	.word	0x200286fc
 801545c:	2002774d 	.word	0x2002774d

08015460 <APP_THREAD_CoapLightsComplexRequestHandler>:
//}

static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b084      	sub	sp, #16
 8015464:	af00      	add	r7, sp, #0
 8015466:	60f8      	str	r0, [r7, #12]
 8015468:	60b9      	str	r1, [r7, #8]
 801546a:	607a      	str	r2, [r7, #4]
  do
  {
    //APP_THREAD_SendCoapUnicastRequest();

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex)) == sizeof(lightMessageComplex))
 801546c:	68b8      	ldr	r0, [r7, #8]
 801546e:	f7fe fc84 	bl	8013d7a <otMessageGetOffset>
 8015472:	4603      	mov	r3, r0
 8015474:	4619      	mov	r1, r3
 8015476:	2312      	movs	r3, #18
 8015478:	4a16      	ldr	r2, [pc, #88]	; (80154d4 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 801547a:	68b8      	ldr	r0, [r7, #8]
 801547c:	f7fe fce2 	bl	8013e44 <otMessageRead>
 8015480:	4603      	mov	r3, r0
 8015482:	2b12      	cmp	r3, #18
 8015484:	d102      	bne.n	801548c <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
	{
    	FrontLightsSet(&lightMessageComplex);
 8015486:	4813      	ldr	r0, [pc, #76]	; (80154d4 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8015488:	f7ee fdc4 	bl	8004014 <FrontLightsSet>
	}

    tempMessageInfo = pMessageInfo;
 801548c:	4a12      	ldr	r2, [pc, #72]	; (80154d8 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8015492:	4a12      	ldr	r2, [pc, #72]	; (80154dc <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8015498:	68f8      	ldr	r0, [r7, #12]
 801549a:	f7fe f8a0 	bl	80135de <otCoapHeaderGetType>
 801549e:	4603      	mov	r3, r0
 80154a0:	2b10      	cmp	r3, #16
 80154a2:	d110      	bne.n	80154c6 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 80154a4:	68f8      	ldr	r0, [r7, #12]
 80154a6:	f7fe f8c8 	bl	801363a <otCoapHeaderGetCode>
 80154aa:	4603      	mov	r3, r0
 80154ac:	2b03      	cmp	r3, #3
 80154ae:	d10c      	bne.n	80154ca <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 80154b0:	68b8      	ldr	r0, [r7, #8]
 80154b2:	f7fe fc62 	bl	8013d7a <otMessageGetOffset>
 80154b6:	4603      	mov	r3, r0
 80154b8:	4619      	mov	r1, r3
 80154ba:	2301      	movs	r3, #1
 80154bc:	4a08      	ldr	r2, [pc, #32]	; (80154e0 <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 80154be:	68b8      	ldr	r0, [r7, #8]
 80154c0:	f7fe fcc0 	bl	8013e44 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 80154c4:	e002      	b.n	80154cc <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
      break;
 80154c6:	bf00      	nop
 80154c8:	e000      	b.n	80154cc <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
      break;
 80154ca:	bf00      	nop
}
 80154cc:	bf00      	nop
 80154ce:	3710      	adds	r7, #16
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}
 80154d4:	200286e8 	.word	0x200286e8
 80154d8:	200286b8 	.word	0x200286b8
 80154dc:	200286fc 	.word	0x200286fc
 80154e0:	2002774d 	.word	0x2002774d

080154e4 <APP_THREAD_SendCoapUnicastRequest>:
volatile otNetifMulticastAddress multicastAddresses;
volatile otIp6Address  meshLocalEID;
volatile otIp6Address linkLocalIPV6;

static void APP_THREAD_SendCoapUnicastRequest(char* message, uint8_t message_length, char* ipv6_addr  , char* resource)
{
 80154e4:	b590      	push	{r4, r7, lr}
 80154e6:	b087      	sub	sp, #28
 80154e8:	af02      	add	r7, sp, #8
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	607a      	str	r2, [r7, #4]
 80154ee:	603b      	str	r3, [r7, #0]
 80154f0:	460b      	mov	r3, r1
 80154f2:	72fb      	strb	r3, [r7, #11]
  // https://openthread.io/reference/struct/ot-message-info.html#structot_message_info



	do{
			  myRloc16 = otThreadGetRloc16(NULL);
 80154f4:	2000      	movs	r0, #0
 80154f6:	f7ff fa5f 	bl	80149b8 <otThreadGetRloc16>
 80154fa:	4603      	mov	r3, r0
 80154fc:	461a      	mov	r2, r3
 80154fe:	4b49      	ldr	r3, [pc, #292]	; (8015624 <APP_THREAD_SendCoapUnicastRequest+0x140>)
 8015500:	801a      	strh	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 8015502:	2000      	movs	r0, #0
 8015504:	f7fe fb27 	bl	8013b56 <otIp6IsEnabled>
 8015508:	4603      	mov	r3, r0
 801550a:	461a      	mov	r2, r3
 801550c:	4b46      	ldr	r3, [pc, #280]	; (8015628 <APP_THREAD_SendCoapUnicastRequest+0x144>)
 801550e:	701a      	strb	r2, [r3, #0]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
			  memcpy(&meshLocalEID, otThreadGetMeshLocalEid(NULL) ,sizeof(otIp6Address));
 8015510:	2000      	movs	r0, #0
 8015512:	f7ff f9d1 	bl	80148b8 <otThreadGetMeshLocalEid>
 8015516:	4602      	mov	r2, r0
 8015518:	4b44      	ldr	r3, [pc, #272]	; (801562c <APP_THREAD_SendCoapUnicastRequest+0x148>)
 801551a:	6814      	ldr	r4, [r2, #0]
 801551c:	6850      	ldr	r0, [r2, #4]
 801551e:	6891      	ldr	r1, [r2, #8]
 8015520:	68d2      	ldr	r2, [r2, #12]
 8015522:	601c      	str	r4, [r3, #0]
 8015524:	6058      	str	r0, [r3, #4]
 8015526:	6099      	str	r1, [r3, #8]
 8015528:	60da      	str	r2, [r3, #12]

			  // clear info
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 801552a:	222c      	movs	r2, #44	; 0x2c
 801552c:	2100      	movs	r1, #0
 801552e:	4840      	ldr	r0, [pc, #256]	; (8015630 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8015530:	f001 f8ff 	bl	8016732 <memset>

			  // set border IP address
			   //error = otIp6AddressFromString("ff03::1", &OT_MessageInfo.mPeerAddr);
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 8015534:	493f      	ldr	r1, [pc, #252]	; (8015634 <APP_THREAD_SendCoapUnicastRequest+0x150>)
 8015536:	6878      	ldr	r0, [r7, #4]
 8015538:	f7fe fb62 	bl	8013c00 <otIp6AddressFromString>
 801553c:	4603      	mov	r3, r0
 801553e:	461a      	mov	r2, r3
 8015540:	4b3d      	ldr	r3, [pc, #244]	; (8015638 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8015542:	701a      	strb	r2, [r3, #0]


			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8015544:	2000      	movs	r0, #0
 8015546:	f7ff f9b7 	bl	80148b8 <otThreadGetMeshLocalEid>
 801554a:	4602      	mov	r2, r0
 801554c:	4b38      	ldr	r3, [pc, #224]	; (8015630 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 801554e:	461c      	mov	r4, r3
 8015550:	4613      	mov	r3, r2
 8015552:	6818      	ldr	r0, [r3, #0]
 8015554:	6859      	ldr	r1, [r3, #4]
 8015556:	689a      	ldr	r2, [r3, #8]
 8015558:	68db      	ldr	r3, [r3, #12]
 801555a:	c40f      	stmia	r4!, {r0, r1, r2, r3}

			   // error = otIp6AddressFromString("fd11:22::994e:6ed7:263d:6187", &OT_MessageInfo.mPeerAddr);
			  //error = otIp6AddressFromString("fdde:ad00:beef:0:0:ff:fe00:3800", &OT_MessageInfo.mPeerAddr);

			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 801555c:	4b34      	ldr	r3, [pc, #208]	; (8015630 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 801555e:	2201      	movs	r2, #1
 8015560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8015564:	4b32      	ldr	r3, [pc, #200]	; (8015630 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8015566:	f241 6233 	movw	r2, #5683	; 0x1633
 801556a:	845a      	strh	r2, [r3, #34]	; 0x22

			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 801556c:	2000      	movs	r0, #0
 801556e:	f7fe fb1f 	bl	8013bb0 <otIp6GetUnicastAddresses>
 8015572:	4602      	mov	r2, r0
 8015574:	4b31      	ldr	r3, [pc, #196]	; (801563c <APP_THREAD_SendCoapUnicastRequest+0x158>)
 8015576:	601a      	str	r2, [r3, #0]
			  OT_MessageInfo.mSockAddr = unicastAddresses->mAddress;
 8015578:	4b30      	ldr	r3, [pc, #192]	; (801563c <APP_THREAD_SendCoapUnicastRequest+0x158>)
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	4a2c      	ldr	r2, [pc, #176]	; (8015630 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 801557e:	4614      	mov	r4, r2
 8015580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  //OT_MessageInfo.mHopLimit = 20;

			  /************** CREATE NEW MESSAGE ********************ifco*/

			  // create header
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8015586:	2203      	movs	r2, #3
 8015588:	2110      	movs	r1, #16
 801558a:	482d      	ldr	r0, [pc, #180]	; (8015640 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 801558c:	f7fd fecb 	bl	8013326 <otCoapHeaderInit>
			  //otCoapHeaderSetMessageId(&OT_Header,OT_BufferIdSend); //may not need since sendRequest should set to 0
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8015590:	2102      	movs	r1, #2
 8015592:	482b      	ldr	r0, [pc, #172]	; (8015640 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8015594:	f7fd ff30 	bl	80133f8 <otCoapHeaderGenerateToken>

			  // the name of the resource
			  //error = otCoapHeaderAppendUriPathOptions(&OT_Header,C_RESSOURCE_BASIC);
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8015598:	6839      	ldr	r1, [r7, #0]
 801559a:	4829      	ldr	r0, [pc, #164]	; (8015640 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 801559c:	f7fd ff8f 	bl	80134be <otCoapHeaderAppendUriPathOptions>
 80155a0:	4603      	mov	r3, r0
 80155a2:	461a      	mov	r2, r3
 80155a4:	4b24      	ldr	r3, [pc, #144]	; (8015638 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 80155a6:	701a      	strb	r2, [r3, #0]

			  // This function adds Payload Marker indicating beginning of the payload to the CoAP header
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 80155a8:	4825      	ldr	r0, [pc, #148]	; (8015640 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 80155aa:	f7fd ffba 	bl	8013522 <otCoapHeaderSetPayloadMarker>

			  // creates new message with headers but with empty payload
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80155ae:	4924      	ldr	r1, [pc, #144]	; (8015640 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 80155b0:	2000      	movs	r0, #0
 80155b2:	f7fe f8f9 	bl	80137a8 <otCoapNewMessage>
 80155b6:	4602      	mov	r2, r0
 80155b8:	4b22      	ldr	r3, [pc, #136]	; (8015644 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 80155ba:	601a      	str	r2, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 80155bc:	4b21      	ldr	r3, [pc, #132]	; (8015644 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d100      	bne.n	80155c6 <APP_THREAD_SendCoapUnicastRequest+0xe2>
 80155c4:	e7fe      	b.n	80155c4 <APP_THREAD_SendCoapUnicastRequest+0xe0>
			  // Append bytes to a message (this is where the payload gets added)

			  //error = otMessageAppend(pOT_Message, OT_BufferSend, sizeof(OT_BufferSend));
//			  error = otMessageAppend(pOT_Message, &OT_MessageInfo, sizeof(OT_MessageInfo));
			  error = otMessageAppend(pOT_Message, message, message_length);
 80155c6:	4b1f      	ldr	r3, [pc, #124]	; (8015644 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	7afa      	ldrb	r2, [r7, #11]
 80155cc:	b292      	uxth	r2, r2
 80155ce:	68f9      	ldr	r1, [r7, #12]
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7fe fc00 	bl	8013dd6 <otMessageAppend>
 80155d6:	4603      	mov	r3, r0
 80155d8:	461a      	mov	r2, r3
 80155da:	4b17      	ldr	r3, [pc, #92]	; (8015638 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 80155dc:	701a      	strb	r2, [r3, #0]

			  if (error != OT_ERROR_NONE) while(1);
 80155de:	4b16      	ldr	r3, [pc, #88]	; (8015638 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 80155e0:	781b      	ldrb	r3, [r3, #0]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d000      	beq.n	80155e8 <APP_THREAD_SendCoapUnicastRequest+0x104>
 80155e6:	e7fe      	b.n	80155e6 <APP_THREAD_SendCoapUnicastRequest+0x102>

			  error = otCoapSendRequest(NULL,
 80155e8:	4b16      	ldr	r3, [pc, #88]	; (8015644 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 80155ea:	6819      	ldr	r1, [r3, #0]
 80155ec:	2300      	movs	r3, #0
 80155ee:	9300      	str	r3, [sp, #0]
 80155f0:	2300      	movs	r3, #0
 80155f2:	4a0f      	ldr	r2, [pc, #60]	; (8015630 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 80155f4:	2000      	movs	r0, #0
 80155f6:	f7fe f905 	bl	8013804 <otCoapSendRequest>
 80155fa:	4603      	mov	r3, r0
 80155fc:	461a      	mov	r2, r3
 80155fe:	4b0e      	ldr	r3, [pc, #56]	; (8015638 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8015600:	701a      	strb	r2, [r3, #0]
						&OT_MessageInfo,
						NULL,
						(void*) NULL);

			  // if error: free allocated message buffer if one was allocated
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 8015602:	4b0d      	ldr	r3, [pc, #52]	; (8015638 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8015604:	781b      	ldrb	r3, [r3, #0]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d008      	beq.n	801561c <APP_THREAD_SendCoapUnicastRequest+0x138>
 801560a:	4b0e      	ldr	r3, [pc, #56]	; (8015644 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d004      	beq.n	801561c <APP_THREAD_SendCoapUnicastRequest+0x138>
			  {
				otMessageFree(pOT_Message);
 8015612:	4b0c      	ldr	r3, [pc, #48]	; (8015644 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	4618      	mov	r0, r3
 8015618:	f7fe fb84 	bl	8013d24 <otMessageFree>
			  }

			  //HAL_Delay(10000);
			}while(false);

}
 801561c:	bf00      	nop
 801561e:	3714      	adds	r7, #20
 8015620:	46bd      	mov	sp, r7
 8015622:	bd90      	pop	{r4, r7, pc}
 8015624:	2002877a 	.word	0x2002877a
 8015628:	200286fa 	.word	0x200286fa
 801562c:	20028768 	.word	0x20028768
 8015630:	2002768c 	.word	0x2002768c
 8015634:	2002769c 	.word	0x2002769c
 8015638:	2002774c 	.word	0x2002774c
 801563c:	2002877c 	.word	0x2002877c
 8015640:	200276b8 	.word	0x200276b8
 8015644:	20027748 	.word	0x20027748

08015648 <APP_THREAD_SendCoapUnicastMsg>:

static void APP_THREAD_SendCoapUnicastMsg(struct LogPacket *message, uint8_t msgSize, char* ipv6_addr  , char* resource, uint8_t msgID)
{
 8015648:	b590      	push	{r4, r7, lr}
 801564a:	b087      	sub	sp, #28
 801564c:	af02      	add	r7, sp, #8
 801564e:	60f8      	str	r0, [r7, #12]
 8015650:	607a      	str	r2, [r7, #4]
 8015652:	603b      	str	r3, [r7, #0]
 8015654:	460b      	mov	r3, r1
 8015656:	72fb      	strb	r3, [r7, #11]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

			  // clear info
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8015658:	222c      	movs	r2, #44	; 0x2c
 801565a:	2100      	movs	r1, #0
 801565c:	4838      	ldr	r0, [pc, #224]	; (8015740 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 801565e:	f001 f868 	bl	8016732 <memset>

			  // set border IP address
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 8015662:	4938      	ldr	r1, [pc, #224]	; (8015744 <APP_THREAD_SendCoapUnicastMsg+0xfc>)
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f7fe facb 	bl	8013c00 <otIp6AddressFromString>
 801566a:	4603      	mov	r3, r0
 801566c:	461a      	mov	r2, r3
 801566e:	4b36      	ldr	r3, [pc, #216]	; (8015748 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8015670:	701a      	strb	r2, [r3, #0]

			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8015672:	2000      	movs	r0, #0
 8015674:	f7ff f920 	bl	80148b8 <otThreadGetMeshLocalEid>
 8015678:	4602      	mov	r2, r0
 801567a:	4b31      	ldr	r3, [pc, #196]	; (8015740 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 801567c:	461c      	mov	r4, r3
 801567e:	4613      	mov	r3, r2
 8015680:	6818      	ldr	r0, [r3, #0]
 8015682:	6859      	ldr	r1, [r3, #4]
 8015684:	689a      	ldr	r2, [r3, #8]
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	c40f      	stmia	r4!, {r0, r1, r2, r3}

			   // error = otIp6AddressFromString("fd11:22::994e:6ed7:263d:6187", &OT_MessageInfo.mPeerAddr);
			  //error = otIp6AddressFromString("fdde:ad00:beef:0:0:ff:fe00:3800", &OT_MessageInfo.mPeerAddr);

			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 801568a:	4b2d      	ldr	r3, [pc, #180]	; (8015740 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 801568c:	2201      	movs	r2, #1
 801568e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8015692:	4b2b      	ldr	r3, [pc, #172]	; (8015740 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8015694:	f241 6233 	movw	r2, #5683	; 0x1633
 8015698:	845a      	strh	r2, [r3, #34]	; 0x22
			  //OT_MessageInfo.mHopLimit = 20;

			  /************** CREATE NEW MESSAGE ********************ifco*/

			  // create header
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 801569a:	2203      	movs	r2, #3
 801569c:	2110      	movs	r1, #16
 801569e:	482b      	ldr	r0, [pc, #172]	; (801574c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80156a0:	f7fd fe41 	bl	8013326 <otCoapHeaderInit>
//			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 80156a4:	2102      	movs	r1, #2
 80156a6:	4829      	ldr	r0, [pc, #164]	; (801574c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80156a8:	f7fd fea6 	bl	80133f8 <otCoapHeaderGenerateToken>

			  // the name of the resource
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 80156ac:	6839      	ldr	r1, [r7, #0]
 80156ae:	4827      	ldr	r0, [pc, #156]	; (801574c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80156b0:	f7fd ff05 	bl	80134be <otCoapHeaderAppendUriPathOptions>
 80156b4:	4603      	mov	r3, r0
 80156b6:	461a      	mov	r2, r3
 80156b8:	4b23      	ldr	r3, [pc, #140]	; (8015748 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 80156ba:	701a      	strb	r2, [r3, #0]

			  // need this so the coap server doesnt try to parse as 'utf-8' and error out
			  otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 80156bc:	212a      	movs	r1, #42	; 0x2a
 80156be:	4823      	ldr	r0, [pc, #140]	; (801574c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80156c0:	f7fd feca 	bl	8013458 <otCoapHeaderAppendContentFormatOption>

			  // This function adds Payload Marker indicating beginning of the payload to the CoAP header
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 80156c4:	4821      	ldr	r0, [pc, #132]	; (801574c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80156c6:	f7fd ff2c 	bl	8013522 <otCoapHeaderSetPayloadMarker>

			  // creates new message with headers but with empty payload
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80156ca:	4920      	ldr	r1, [pc, #128]	; (801574c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80156cc:	2000      	movs	r0, #0
 80156ce:	f7fe f86b 	bl	80137a8 <otCoapNewMessage>
 80156d2:	4602      	mov	r2, r0
 80156d4:	4b1e      	ldr	r3, [pc, #120]	; (8015750 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 80156d6:	601a      	str	r2, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 80156d8:	4b1d      	ldr	r3, [pc, #116]	; (8015750 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d100      	bne.n	80156e2 <APP_THREAD_SendCoapUnicastMsg+0x9a>
 80156e0:	e7fe      	b.n	80156e0 <APP_THREAD_SendCoapUnicastMsg+0x98>
			  // Append bytes to a message (this is where the payload gets added)



			  //error = otMessageAppend(pOT_Message, OT_BufferSend, sizeof(OT_BufferSend));
			  error = otMessageAppend(pOT_Message, message, msgSize);
 80156e2:	4b1b      	ldr	r3, [pc, #108]	; (8015750 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	7afa      	ldrb	r2, [r7, #11]
 80156e8:	b292      	uxth	r2, r2
 80156ea:	68f9      	ldr	r1, [r7, #12]
 80156ec:	4618      	mov	r0, r3
 80156ee:	f7fe fb72 	bl	8013dd6 <otMessageAppend>
 80156f2:	4603      	mov	r3, r0
 80156f4:	461a      	mov	r2, r3
 80156f6:	4b14      	ldr	r3, [pc, #80]	; (8015748 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 80156f8:	701a      	strb	r2, [r3, #0]

			  if (error != OT_ERROR_NONE) while(1);
 80156fa:	4b13      	ldr	r3, [pc, #76]	; (8015748 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d000      	beq.n	8015704 <APP_THREAD_SendCoapUnicastMsg+0xbc>
 8015702:	e7fe      	b.n	8015702 <APP_THREAD_SendCoapUnicastMsg+0xba>

			  error = otCoapSendRequest(NULL,
 8015704:	4b12      	ldr	r3, [pc, #72]	; (8015750 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8015706:	6819      	ldr	r1, [r3, #0]
 8015708:	2300      	movs	r3, #0
 801570a:	9300      	str	r3, [sp, #0]
 801570c:	2300      	movs	r3, #0
 801570e:	4a0c      	ldr	r2, [pc, #48]	; (8015740 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8015710:	2000      	movs	r0, #0
 8015712:	f7fe f877 	bl	8013804 <otCoapSendRequest>
 8015716:	4603      	mov	r3, r0
 8015718:	461a      	mov	r2, r3
 801571a:	4b0b      	ldr	r3, [pc, #44]	; (8015748 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 801571c:	701a      	strb	r2, [r3, #0]
						&OT_MessageInfo,
						NULL,
						(void*) NULL);

			  // if error: free allocated message buffer if one was allocated
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 801571e:	4b0a      	ldr	r3, [pc, #40]	; (8015748 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d008      	beq.n	8015738 <APP_THREAD_SendCoapUnicastMsg+0xf0>
 8015726:	4b0a      	ldr	r3, [pc, #40]	; (8015750 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d004      	beq.n	8015738 <APP_THREAD_SendCoapUnicastMsg+0xf0>
			  {
				otMessageFree(pOT_Message);
 801572e:	4b08      	ldr	r3, [pc, #32]	; (8015750 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	4618      	mov	r0, r3
 8015734:	f7fe faf6 	bl	8013d24 <otMessageFree>
			  }

			  //HAL_Delay(10000);
			}while(false);

}
 8015738:	bf00      	nop
 801573a:	3714      	adds	r7, #20
 801573c:	46bd      	mov	sp, r7
 801573e:	bd90      	pop	{r4, r7, pc}
 8015740:	2002768c 	.word	0x2002768c
 8015744:	2002769c 	.word	0x2002769c
 8015748:	2002774c 	.word	0x2002774c
 801574c:	200276b8 	.word	0x200276b8
 8015750:	20027748 	.word	0x20027748

08015754 <APP_THREAD_SendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_SendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8015754:	b590      	push	{r4, r7, lr}
 8015756:	b085      	sub	sp, #20
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
 801575c:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 801575e:	2300      	movs	r3, #0
 8015760:	73fb      	strb	r3, [r7, #15]

  APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
 8015762:	4a1f      	ldr	r2, [pc, #124]	; (80157e0 <APP_THREAD_SendDataResponse+0x8c>)
 8015764:	2101      	movs	r1, #1
 8015766:	2000      	movs	r0, #0
 8015768:	f7ef fcec 	bl	8005144 <logApplication>
  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 801576c:	2244      	movs	r2, #68	; 0x44
 801576e:	2120      	movs	r1, #32
 8015770:	481c      	ldr	r0, [pc, #112]	; (80157e4 <APP_THREAD_SendDataResponse+0x90>)
 8015772:	f7fd fdd8 	bl	8013326 <otCoapHeaderInit>
  otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	f7fd ff8d 	bl	8013696 <otCoapHeaderGetMessageId>
 801577c:	4603      	mov	r3, r0
 801577e:	4619      	mov	r1, r3
 8015780:	4818      	ldr	r0, [pc, #96]	; (80157e4 <APP_THREAD_SendDataResponse+0x90>)
 8015782:	f7fd fefc 	bl	801357e <otCoapHeaderSetMessageId>
  otCoapHeaderSetToken(&OT_Header,
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f7fd ffe1 	bl	801374e <otCoapHeaderGetToken>
 801578c:	4604      	mov	r4, r0
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f7fd ffaf 	bl	80136f2 <otCoapHeaderGetTokenLength>
 8015794:	4603      	mov	r3, r0
 8015796:	461a      	mov	r2, r3
 8015798:	4621      	mov	r1, r4
 801579a:	4812      	ldr	r0, [pc, #72]	; (80157e4 <APP_THREAD_SendDataResponse+0x90>)
 801579c:	f7fd fdf8 	bl	8013390 <otCoapHeaderSetToken>
      otCoapHeaderGetToken(pRequestHeader),
      otCoapHeaderGetTokenLength(pRequestHeader));

  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80157a0:	4910      	ldr	r1, [pc, #64]	; (80157e4 <APP_THREAD_SendDataResponse+0x90>)
 80157a2:	2000      	movs	r0, #0
 80157a4:	f7fe f800 	bl	80137a8 <otCoapNewMessage>
 80157a8:	4602      	mov	r2, r0
 80157aa:	4b0f      	ldr	r3, [pc, #60]	; (80157e8 <APP_THREAD_SendDataResponse+0x94>)
 80157ac:	601a      	str	r2, [r3, #0]
  if (pOT_Message == NULL)
  {
    //APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
  }
  error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 80157ae:	4b0e      	ldr	r3, [pc, #56]	; (80157e8 <APP_THREAD_SendDataResponse+0x94>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	683a      	ldr	r2, [r7, #0]
 80157b4:	4619      	mov	r1, r3
 80157b6:	2000      	movs	r0, #0
 80157b8:	f7fe f8bd 	bl	8013936 <otCoapSendResponse>
 80157bc:	4603      	mov	r3, r0
 80157be:	73fb      	strb	r3, [r7, #15]
  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 80157c0:	7bfb      	ldrb	r3, [r7, #15]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d008      	beq.n	80157d8 <APP_THREAD_SendDataResponse+0x84>
 80157c6:	4b08      	ldr	r3, [pc, #32]	; (80157e8 <APP_THREAD_SendDataResponse+0x94>)
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d004      	beq.n	80157d8 <APP_THREAD_SendDataResponse+0x84>
  {
    otMessageFree(pOT_Message);
 80157ce:	4b06      	ldr	r3, [pc, #24]	; (80157e8 <APP_THREAD_SendDataResponse+0x94>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7fe faa6 	bl	8013d24 <otMessageFree>
    //APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
  }
}
 80157d8:	bf00      	nop
 80157da:	3714      	adds	r7, #20
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd90      	pop	{r4, r7, pc}
 80157e0:	08017d10 	.word	0x08017d10
 80157e4:	200276b8 	.word	0x200276b8
 80157e8:	20027748 	.word	0x20027748

080157ec <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80157ec:	b480      	push	{r7}
 80157ee:	b083      	sub	sp, #12
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 80157f4:	4a04      	ldr	r2, [pc, #16]	; (8015808 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6013      	str	r3, [r2, #0]
}
 80157fa:	bf00      	nop
 80157fc:	370c      	adds	r7, #12
 80157fe:	46bd      	mov	sp, r7
 8015800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015804:	4770      	bx	lr
 8015806:	bf00      	nop
 8015808:	20027674 	.word	0x20027674

0801580c <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 801580c:	b480      	push	{r7}
 801580e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8015810:	4b03      	ldr	r3, [pc, #12]	; (8015820 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	330c      	adds	r3, #12
}
 8015816:	4618      	mov	r0, r3
 8015818:	46bd      	mov	sp, r7
 801581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581e:	4770      	bx	lr
 8015820:	20027674 	.word	0x20027674

08015824 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8015824:	b480      	push	{r7}
 8015826:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8015828:	4b03      	ldr	r3, [pc, #12]	; (8015838 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	330b      	adds	r3, #11
}
 801582e:	4618      	mov	r0, r3
 8015830:	46bd      	mov	sp, r7
 8015832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015836:	4770      	bx	lr
 8015838:	20027674 	.word	0x20027674

0801583c <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 801583c:	b480      	push	{r7}
 801583e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8015840:	4b03      	ldr	r3, [pc, #12]	; (8015850 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	330b      	adds	r3, #11
}
 8015846:	4618      	mov	r0, r3
 8015848:	46bd      	mov	sp, r7
 801584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584e:	4770      	bx	lr
 8015850:	20027678 	.word	0x20027678

08015854 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b082      	sub	sp, #8
 8015858:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 801585a:	4b0f      	ldr	r3, [pc, #60]	; (8015898 <Ot_Cmd_Transfer+0x44>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	2200      	movs	r2, #0
 8015860:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015864:	725a      	strb	r2, [r3, #9]
 8015866:	2200      	movs	r2, #0
 8015868:	f042 0202 	orr.w	r2, r2, #2
 801586c:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 801586e:	4b0a      	ldr	r3, [pc, #40]	; (8015898 <Ot_Cmd_Transfer+0x44>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	330c      	adds	r3, #12
 8015874:	685b      	ldr	r3, [r3, #4]
 8015876:	3302      	adds	r3, #2
 8015878:	009b      	lsls	r3, r3, #2
 801587a:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 801587c:	4b06      	ldr	r3, [pc, #24]	; (8015898 <Ot_Cmd_Transfer+0x44>)
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	687a      	ldr	r2, [r7, #4]
 8015882:	b2d2      	uxtb	r2, r2
 8015884:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8015886:	f7ff f9a9 	bl	8014bdc <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 801588a:	f000 f829 	bl	80158e0 <Wait_Getting_Ack_From_M0>
}
 801588e:	bf00      	nop
 8015890:	3708      	adds	r7, #8
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}
 8015896:	bf00      	nop
 8015898:	20027674 	.word	0x20027674

0801589c <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b082      	sub	sp, #8
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80158a4:	f000 f82e 	bl	8015904 <Receive_Ack_From_M0>
}
 80158a8:	bf00      	nop
 80158aa:	3708      	adds	r7, #8
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}

080158b0 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b082      	sub	sp, #8
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80158b8:	4a04      	ldr	r2, [pc, #16]	; (80158cc <TL_THREAD_NotReceived+0x1c>)
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80158be:	f000 f82d 	bl	801591c <Receive_Notification_From_M0>
}
 80158c2:	bf00      	nop
 80158c4:	3708      	adds	r7, #8
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}
 80158ca:	bf00      	nop
 80158cc:	20027678 	.word	0x20027678

080158d0 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80158d0:	b480      	push	{r7}
 80158d2:	af00      	add	r7, sp, #0

}
 80158d4:	bf00      	nop
 80158d6:	46bd      	mov	sp, r7
 80158d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158dc:	4770      	bx	lr
	...

080158e0 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 80158e0:	b480      	push	{r7}
 80158e2:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 80158e4:	bf00      	nop
 80158e6:	4b06      	ldr	r3, [pc, #24]	; (8015900 <Wait_Getting_Ack_From_M0+0x20>)
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d0fb      	beq.n	80158e6 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 80158ee:	4b04      	ldr	r3, [pc, #16]	; (8015900 <Wait_Getting_Ack_From_M0+0x20>)
 80158f0:	2200      	movs	r2, #0
 80158f2:	601a      	str	r2, [r3, #0]
}
 80158f4:	bf00      	nop
 80158f6:	46bd      	mov	sp, r7
 80158f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fc:	4770      	bx	lr
 80158fe:	bf00      	nop
 8015900:	20027680 	.word	0x20027680

08015904 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8015904:	b480      	push	{r7}
 8015906:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8015908:	4b03      	ldr	r3, [pc, #12]	; (8015918 <Receive_Ack_From_M0+0x14>)
 801590a:	2201      	movs	r2, #1
 801590c:	601a      	str	r2, [r3, #0]
}
 801590e:	bf00      	nop
 8015910:	46bd      	mov	sp, r7
 8015912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015916:	4770      	bx	lr
 8015918:	20027680 	.word	0x20027680

0801591c <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8015920:	4b06      	ldr	r3, [pc, #24]	; (801593c <Receive_Notification_From_M0+0x20>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	3301      	adds	r3, #1
 8015926:	4a05      	ldr	r2, [pc, #20]	; (801593c <Receive_Notification_From_M0+0x20>)
 8015928:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 801592a:	4b05      	ldr	r3, [pc, #20]	; (8015940 <Receive_Notification_From_M0+0x24>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	2101      	movs	r1, #1
 8015930:	4618      	mov	r0, r3
 8015932:	f7f9 f9a3 	bl	800ec7c <osThreadFlagsSet>
}
 8015936:	bf00      	nop
 8015938:	bd80      	pop	{r7, pc}
 801593a:	bf00      	nop
 801593c:	2002767c 	.word	0x2002767c
 8015940:	20027684 	.word	0x20027684

08015944 <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8015948:	4b12      	ldr	r3, [pc, #72]	; (8015994 <RxCpltCallback+0x50>)
 801594a:	881b      	ldrh	r3, [r3, #0]
 801594c:	b29b      	uxth	r3, r3
 801594e:	2bff      	cmp	r3, #255	; 0xff
 8015950:	d818      	bhi.n	8015984 <RxCpltCallback+0x40>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 8015952:	4b10      	ldr	r3, [pc, #64]	; (8015994 <RxCpltCallback+0x50>)
 8015954:	881b      	ldrh	r3, [r3, #0]
 8015956:	b29b      	uxth	r3, r3
 8015958:	1c5a      	adds	r2, r3, #1
 801595a:	b291      	uxth	r1, r2
 801595c:	4a0d      	ldr	r2, [pc, #52]	; (8015994 <RxCpltCallback+0x50>)
 801595e:	8011      	strh	r1, [r2, #0]
 8015960:	461a      	mov	r2, r3
 8015962:	4b0d      	ldr	r3, [pc, #52]	; (8015998 <RxCpltCallback+0x54>)
 8015964:	7819      	ldrb	r1, [r3, #0]
 8015966:	4b0d      	ldr	r3, [pc, #52]	; (801599c <RxCpltCallback+0x58>)
 8015968:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 801596a:	4b0b      	ldr	r3, [pc, #44]	; (8015998 <RxCpltCallback+0x54>)
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	2b0d      	cmp	r3, #13
 8015970:	d108      	bne.n	8015984 <RxCpltCallback+0x40>
    {
      CptReceiveCmdFromUser = 1U;
 8015972:	4b0b      	ldr	r3, [pc, #44]	; (80159a0 <RxCpltCallback+0x5c>)
 8015974:	2201      	movs	r2, #1
 8015976:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      osThreadFlagsSet(OsTaskCliId,1);
 8015978:	4b0a      	ldr	r3, [pc, #40]	; (80159a4 <RxCpltCallback+0x60>)
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	2101      	movs	r1, #1
 801597e:	4618      	mov	r0, r3
 8015980:	f7f9 f97c 	bl	800ec7c <osThreadFlagsSet>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 8015984:	4b08      	ldr	r3, [pc, #32]	; (80159a8 <RxCpltCallback+0x64>)
 8015986:	2201      	movs	r2, #1
 8015988:	4903      	ldr	r1, [pc, #12]	; (8015998 <RxCpltCallback+0x54>)
 801598a:	2000      	movs	r0, #0
 801598c:	f7ed ff14 	bl	80037b8 <HW_UART_Receive_IT>
}
 8015990:	bf00      	nop
 8015992:	bd80      	pop	{r7, pc}
 8015994:	20027670 	.word	0x20027670
 8015998:	20027470 	.word	0x20027470
 801599c:	20027570 	.word	0x20027570
 80159a0:	20027672 	.word	0x20027672
 80159a4:	20027688 	.word	0x20027688
 80159a8:	08015945 	.word	0x08015945

080159ac <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 80159b0:	22ff      	movs	r2, #255	; 0xff
 80159b2:	2100      	movs	r1, #0
 80159b4:	4812      	ldr	r0, [pc, #72]	; (8015a00 <Send_CLI_To_M0+0x54>)
 80159b6:	f000 febc 	bl	8016732 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 80159ba:	4b12      	ldr	r3, [pc, #72]	; (8015a04 <Send_CLI_To_M0+0x58>)
 80159bc:	881b      	ldrh	r3, [r3, #0]
 80159be:	b29b      	uxth	r3, r3
 80159c0:	461a      	mov	r2, r3
 80159c2:	4911      	ldr	r1, [pc, #68]	; (8015a08 <Send_CLI_To_M0+0x5c>)
 80159c4:	480e      	ldr	r0, [pc, #56]	; (8015a00 <Send_CLI_To_M0+0x54>)
 80159c6:	f000 fea9 	bl	801671c <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 80159ca:	4b0e      	ldr	r3, [pc, #56]	; (8015a04 <Send_CLI_To_M0+0x58>)
 80159cc:	881b      	ldrh	r3, [r3, #0]
 80159ce:	b29b      	uxth	r3, r3
 80159d0:	b2da      	uxtb	r2, r3
 80159d2:	4b0e      	ldr	r3, [pc, #56]	; (8015a0c <Send_CLI_To_M0+0x60>)
 80159d4:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 80159d6:	4b0d      	ldr	r3, [pc, #52]	; (8015a0c <Send_CLI_To_M0+0x60>)
 80159d8:	2200      	movs	r2, #0
 80159da:	725a      	strb	r2, [r3, #9]
 80159dc:	2200      	movs	r2, #0
 80159de:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 80159e0:	4b0b      	ldr	r3, [pc, #44]	; (8015a10 <Send_CLI_To_M0+0x64>)
 80159e2:	2200      	movs	r2, #0
 80159e4:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 80159e6:	4b07      	ldr	r3, [pc, #28]	; (8015a04 <Send_CLI_To_M0+0x58>)
 80159e8:	2200      	movs	r2, #0
 80159ea:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 80159ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80159f0:	2100      	movs	r1, #0
 80159f2:	4805      	ldr	r0, [pc, #20]	; (8015a08 <Send_CLI_To_M0+0x5c>)
 80159f4:	f000 fe9d 	bl	8016732 <memset>

  TL_CLI_SendCmd();
 80159f8:	f7ff f8fe 	bl	8014bf8 <TL_CLI_SendCmd>
}
 80159fc:	bf00      	nop
 80159fe:	bd80      	pop	{r7, pc}
 8015a00:	20030a5c 	.word	0x20030a5c
 8015a04:	20027670 	.word	0x20027670
 8015a08:	20027570 	.word	0x20027570
 8015a0c:	20030a50 	.word	0x20030a50
 8015a10:	20027672 	.word	0x20027672

08015a14 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8015a18:	f7ff f90a 	bl	8014c30 <TL_THREAD_CliSendAck>
}
 8015a1c:	bf00      	nop
 8015a1e:	bd80      	pop	{r7, pc}

08015a20 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8015a24:	4a08      	ldr	r2, [pc, #32]	; (8015a48 <APP_THREAD_Init_UART_CLI+0x28>)
 8015a26:	2100      	movs	r1, #0
 8015a28:	4808      	ldr	r0, [pc, #32]	; (8015a4c <APP_THREAD_Init_UART_CLI+0x2c>)
 8015a2a:	f7f9 f87b 	bl	800eb24 <osThreadNew>
 8015a2e:	4602      	mov	r2, r0
 8015a30:	4b07      	ldr	r3, [pc, #28]	; (8015a50 <APP_THREAD_Init_UART_CLI+0x30>)
 8015a32:	601a      	str	r2, [r3, #0]
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_USART1_UART_Init();
 8015a34:	f7ef fdf6 	bl	8005624 <MX_USART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 8015a38:	4b06      	ldr	r3, [pc, #24]	; (8015a54 <APP_THREAD_Init_UART_CLI+0x34>)
 8015a3a:	2201      	movs	r2, #1
 8015a3c:	4906      	ldr	r1, [pc, #24]	; (8015a58 <APP_THREAD_Init_UART_CLI+0x38>)
 8015a3e:	2000      	movs	r0, #0
 8015a40:	f7ed feba 	bl	80037b8 <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8015a44:	bf00      	nop
 8015a46:	bd80      	pop	{r7, pc}
 8015a48:	0801813c 	.word	0x0801813c
 8015a4c:	080151f3 	.word	0x080151f3
 8015a50:	20027688 	.word	0x20027688
 8015a54:	08015945 	.word	0x08015945
 8015a58:	20027470 	.word	0x20027470

08015a5c <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8015a60:	4b06      	ldr	r3, [pc, #24]	; (8015a7c <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015a62:	4a07      	ldr	r2, [pc, #28]	; (8015a80 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8015a64:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8015a66:	4b05      	ldr	r3, [pc, #20]	; (8015a7c <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015a68:	4a06      	ldr	r2, [pc, #24]	; (8015a84 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8015a6a:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8015a6c:	4b03      	ldr	r3, [pc, #12]	; (8015a7c <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015a6e:	4a06      	ldr	r2, [pc, #24]	; (8015a88 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8015a70:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8015a72:	4802      	ldr	r0, [pc, #8]	; (8015a7c <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015a74:	f7ff f896 	bl	8014ba4 <TL_THREAD_Init>
}
 8015a78:	bf00      	nop
 8015a7a:	bd80      	pop	{r7, pc}
 8015a7c:	200300b8 	.word	0x200300b8
 8015a80:	20030838 	.word	0x20030838
 8015a84:	20030944 	.word	0x20030944
 8015a88:	20030a50 	.word	0x20030a50

08015a8c <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b084      	sub	sp, #16
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	7adb      	ldrb	r3, [r3, #11]
 8015a9c:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	330c      	adds	r3, #12
 8015aa2:	490b      	ldr	r1, [pc, #44]	; (8015ad0 <TL_THREAD_CliNotReceived+0x44>)
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7ea fb6b 	bl	8000180 <strcmp>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d009      	beq.n	8015ac4 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	f103 010c 	add.w	r1, r3, #12
 8015ab6:	7afb      	ldrb	r3, [r7, #11]
 8015ab8:	b29a      	uxth	r2, r3
 8015aba:	4b06      	ldr	r3, [pc, #24]	; (8015ad4 <TL_THREAD_CliNotReceived+0x48>)
 8015abc:	2000      	movs	r0, #0
 8015abe:	f7ed fe9f 	bl	8003800 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 8015ac2:	e001      	b.n	8015ac8 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 8015ac4:	f7ff ffa6 	bl	8015a14 <Send_CLI_Ack_For_OT>
}
 8015ac8:	bf00      	nop
 8015aca:	3710      	adds	r7, #16
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}
 8015ad0:	08017d3c 	.word	0x08017d3c
 8015ad4:	08015ad9 	.word	0x08015ad9

08015ad8 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 8015adc:	f7ff ff9a 	bl	8015a14 <Send_CLI_Ack_For_OT>
}
 8015ae0:	bf00      	nop
 8015ae2:	bd80      	pop	{r7, pc}

08015ae4 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8015ae8:	4b09      	ldr	r3, [pc, #36]	; (8015b10 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d00d      	beq.n	8015b0c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8015af0:	4b07      	ldr	r3, [pc, #28]	; (8015b10 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	2b01      	cmp	r3, #1
 8015af6:	d904      	bls.n	8015b02 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8015af8:	2100      	movs	r1, #0
 8015afa:	2000      	movs	r0, #0
 8015afc:	f7ff f990 	bl	8014e20 <APP_THREAD_Error>
 8015b00:	e001      	b.n	8015b06 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8015b02:	f7fe f9db 	bl	8013ebc <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8015b06:	4b02      	ldr	r3, [pc, #8]	; (8015b10 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8015b08:	2200      	movs	r2, #0
 8015b0a:	601a      	str	r2, [r3, #0]
  }
}
 8015b0c:	bf00      	nop
 8015b0e:	bd80      	pop	{r7, pc}
 8015b10:	2002767c 	.word	0x2002767c

08015b14 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8015b14:	b480      	push	{r7}
 8015b16:	b083      	sub	sp, #12
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8015b1c:	4b06      	ldr	r3, [pc, #24]	; (8015b38 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8015b1e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8015b22:	4905      	ldr	r1, [pc, #20]	; (8015b38 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	4313      	orrs	r3, r2
 8015b28:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8015b2c:	bf00      	nop
 8015b2e:	370c      	adds	r7, #12
 8015b30:	46bd      	mov	sp, r7
 8015b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b36:	4770      	bx	lr
 8015b38:	58000800 	.word	0x58000800

08015b3c <LL_EXTI_EnableRisingTrig_32_63>:
{
 8015b3c:	b480      	push	{r7}
 8015b3e:	b083      	sub	sp, #12
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8015b44:	4b05      	ldr	r3, [pc, #20]	; (8015b5c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015b46:	6a1a      	ldr	r2, [r3, #32]
 8015b48:	4904      	ldr	r1, [pc, #16]	; (8015b5c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	4313      	orrs	r3, r2
 8015b4e:	620b      	str	r3, [r1, #32]
}
 8015b50:	bf00      	nop
 8015b52:	370c      	adds	r7, #12
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr
 8015b5c:	58000800 	.word	0x58000800

08015b60 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8015b60:	b480      	push	{r7}
 8015b62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8015b64:	4b05      	ldr	r3, [pc, #20]	; (8015b7c <LL_PWR_EnableBootC2+0x1c>)
 8015b66:	68db      	ldr	r3, [r3, #12]
 8015b68:	4a04      	ldr	r2, [pc, #16]	; (8015b7c <LL_PWR_EnableBootC2+0x1c>)
 8015b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015b6e:	60d3      	str	r3, [r2, #12]
}
 8015b70:	bf00      	nop
 8015b72:	46bd      	mov	sp, r7
 8015b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b78:	4770      	bx	lr
 8015b7a:	bf00      	nop
 8015b7c:	58000400 	.word	0x58000400

08015b80 <LL_AHB3_GRP1_EnableClock>:
{
 8015b80:	b480      	push	{r7}
 8015b82:	b085      	sub	sp, #20
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8015b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	4313      	orrs	r3, r2
 8015b96:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8015b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	4013      	ands	r3, r2
 8015ba2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
}
 8015ba6:	bf00      	nop
 8015ba8:	3714      	adds	r7, #20
 8015baa:	46bd      	mov	sp, r7
 8015bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb0:	4770      	bx	lr

08015bb2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8015bb2:	b480      	push	{r7}
 8015bb4:	b083      	sub	sp, #12
 8015bb6:	af00      	add	r7, sp, #0
 8015bb8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	601a      	str	r2, [r3, #0]
}
 8015bc6:	bf00      	nop
 8015bc8:	370c      	adds	r7, #12
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd0:	4770      	bx	lr

08015bd2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8015bd2:	b480      	push	{r7}
 8015bd4:	b083      	sub	sp, #12
 8015bd6:	af00      	add	r7, sp, #0
 8015bd8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	f043 0201 	orr.w	r2, r3, #1
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	601a      	str	r2, [r3, #0]
}
 8015be6:	bf00      	nop
 8015be8:	370c      	adds	r7, #12
 8015bea:	46bd      	mov	sp, r7
 8015bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf0:	4770      	bx	lr

08015bf2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015bf2:	b480      	push	{r7}
 8015bf4:	b083      	sub	sp, #12
 8015bf6:	af00      	add	r7, sp, #0
 8015bf8:	6078      	str	r0, [r7, #4]
 8015bfa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	685a      	ldr	r2, [r3, #4]
 8015c00:	683b      	ldr	r3, [r7, #0]
 8015c02:	041b      	lsls	r3, r3, #16
 8015c04:	43db      	mvns	r3, r3
 8015c06:	401a      	ands	r2, r3
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	605a      	str	r2, [r3, #4]
}
 8015c0c:	bf00      	nop
 8015c0e:	370c      	adds	r7, #12
 8015c10:	46bd      	mov	sp, r7
 8015c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c16:	4770      	bx	lr

08015c18 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015c18:	b480      	push	{r7}
 8015c1a:	b083      	sub	sp, #12
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
 8015c20:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	685a      	ldr	r2, [r3, #4]
 8015c26:	683b      	ldr	r3, [r7, #0]
 8015c28:	041b      	lsls	r3, r3, #16
 8015c2a:	431a      	orrs	r2, r3
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	605a      	str	r2, [r3, #4]
}
 8015c30:	bf00      	nop
 8015c32:	370c      	adds	r7, #12
 8015c34:	46bd      	mov	sp, r7
 8015c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3a:	4770      	bx	lr

08015c3c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b083      	sub	sp, #12
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
 8015c44:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	685a      	ldr	r2, [r3, #4]
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	43db      	mvns	r3, r3
 8015c4e:	401a      	ands	r2, r3
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	605a      	str	r2, [r3, #4]
}
 8015c54:	bf00      	nop
 8015c56:	370c      	adds	r7, #12
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5e:	4770      	bx	lr

08015c60 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015c60:	b480      	push	{r7}
 8015c62:	b083      	sub	sp, #12
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
 8015c68:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	685a      	ldr	r2, [r3, #4]
 8015c6e:	683b      	ldr	r3, [r7, #0]
 8015c70:	431a      	orrs	r2, r3
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	605a      	str	r2, [r3, #4]
}
 8015c76:	bf00      	nop
 8015c78:	370c      	adds	r7, #12
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c80:	4770      	bx	lr

08015c82 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015c82:	b480      	push	{r7}
 8015c84:	b083      	sub	sp, #12
 8015c86:	af00      	add	r7, sp, #0
 8015c88:	6078      	str	r0, [r7, #4]
 8015c8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	683a      	ldr	r2, [r7, #0]
 8015c90:	609a      	str	r2, [r3, #8]
}
 8015c92:	bf00      	nop
 8015c94:	370c      	adds	r7, #12
 8015c96:	46bd      	mov	sp, r7
 8015c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9c:	4770      	bx	lr

08015c9e <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015c9e:	b480      	push	{r7}
 8015ca0:	b083      	sub	sp, #12
 8015ca2:	af00      	add	r7, sp, #0
 8015ca4:	6078      	str	r0, [r7, #4]
 8015ca6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	041a      	lsls	r2, r3, #16
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	609a      	str	r2, [r3, #8]
}
 8015cb0:	bf00      	nop
 8015cb2:	370c      	adds	r7, #12
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cba:	4770      	bx	lr

08015cbc <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	b083      	sub	sp, #12
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
 8015cc4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	68da      	ldr	r2, [r3, #12]
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	4013      	ands	r3, r2
 8015cce:	683a      	ldr	r2, [r7, #0]
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d101      	bne.n	8015cd8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8015cd4:	2301      	movs	r3, #1
 8015cd6:	e000      	b.n	8015cda <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8015cd8:	2300      	movs	r3, #0
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	370c      	adds	r7, #12
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce4:	4770      	bx	lr

08015ce6 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8015ce6:	b480      	push	{r7}
 8015ce8:	b083      	sub	sp, #12
 8015cea:	af00      	add	r7, sp, #0
 8015cec:	6078      	str	r0, [r7, #4]
 8015cee:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	69da      	ldr	r2, [r3, #28]
 8015cf4:	683b      	ldr	r3, [r7, #0]
 8015cf6:	4013      	ands	r3, r2
 8015cf8:	683a      	ldr	r2, [r7, #0]
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d101      	bne.n	8015d02 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8015cfe:	2301      	movs	r3, #1
 8015d00:	e000      	b.n	8015d04 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8015d02:	2300      	movs	r3, #0
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	370c      	adds	r7, #12
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0e:	4770      	bx	lr

08015d10 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8015d14:	2102      	movs	r1, #2
 8015d16:	482a      	ldr	r0, [pc, #168]	; (8015dc0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d18:	f7ff ffe5 	bl	8015ce6 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d009      	beq.n	8015d36 <HW_IPCC_Rx_Handler+0x26>
 8015d22:	4b27      	ldr	r3, [pc, #156]	; (8015dc0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	43db      	mvns	r3, r3
 8015d28:	f003 0302 	and.w	r3, r3, #2
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d002      	beq.n	8015d36 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8015d30:	f000 f906 	bl	8015f40 <HW_IPCC_SYS_EvtHandler>
 8015d34:	e041      	b.n	8015dba <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8015d36:	2104      	movs	r1, #4
 8015d38:	4821      	ldr	r0, [pc, #132]	; (8015dc0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d3a:	f7ff ffd4 	bl	8015ce6 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d009      	beq.n	8015d58 <HW_IPCC_Rx_Handler+0x48>
 8015d44:	4b1e      	ldr	r3, [pc, #120]	; (8015dc0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d46:	685b      	ldr	r3, [r3, #4]
 8015d48:	43db      	mvns	r3, r3
 8015d4a:	f003 0304 	and.w	r3, r3, #4
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d002      	beq.n	8015d58 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8015d52:	f000 f94f 	bl	8015ff4 <HW_IPCC_THREAD_NotEvtHandler>
 8015d56:	e030      	b.n	8015dba <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8015d58:	2110      	movs	r1, #16
 8015d5a:	4819      	ldr	r0, [pc, #100]	; (8015dc0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d5c:	f7ff ffc3 	bl	8015ce6 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015d60:	4603      	mov	r3, r0
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d009      	beq.n	8015d7a <HW_IPCC_Rx_Handler+0x6a>
 8015d66:	4b16      	ldr	r3, [pc, #88]	; (8015dc0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d68:	685b      	ldr	r3, [r3, #4]
 8015d6a:	43db      	mvns	r3, r3
 8015d6c:	f003 0310 	and.w	r3, r3, #16
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d002      	beq.n	8015d7a <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8015d74:	f000 f94a 	bl	801600c <HW_IPCC_THREAD_CliNotEvtHandler>
 8015d78:	e01f      	b.n	8015dba <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8015d7a:	2101      	movs	r1, #1
 8015d7c:	4810      	ldr	r0, [pc, #64]	; (8015dc0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d7e:	f7ff ffb2 	bl	8015ce6 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015d82:	4603      	mov	r3, r0
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d008      	beq.n	8015d9a <HW_IPCC_Rx_Handler+0x8a>
 8015d88:	4b0d      	ldr	r3, [pc, #52]	; (8015dc0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d8a:	685b      	ldr	r3, [r3, #4]
 8015d8c:	f003 0301 	and.w	r3, r3, #1
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d102      	bne.n	8015d9a <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8015d94:	f000 f898 	bl	8015ec8 <HW_IPCC_BLE_EvtHandler>
 8015d98:	e00f      	b.n	8015dba <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8015d9a:	2108      	movs	r1, #8
 8015d9c:	4808      	ldr	r0, [pc, #32]	; (8015dc0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d9e:	f7ff ffa2 	bl	8015ce6 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015da2:	4603      	mov	r3, r0
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d009      	beq.n	8015dbc <HW_IPCC_Rx_Handler+0xac>
 8015da8:	4b05      	ldr	r3, [pc, #20]	; (8015dc0 <HW_IPCC_Rx_Handler+0xb0>)
 8015daa:	685b      	ldr	r3, [r3, #4]
 8015dac:	43db      	mvns	r3, r3
 8015dae:	f003 0308 	and.w	r3, r3, #8
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d002      	beq.n	8015dbc <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8015db6:	f000 f975 	bl	80160a4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8015dba:	bf00      	nop
 8015dbc:	bf00      	nop
}
 8015dbe:	bd80      	pop	{r7, pc}
 8015dc0:	58000c00 	.word	0x58000c00

08015dc4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8015dc8:	2102      	movs	r1, #2
 8015dca:	482b      	ldr	r0, [pc, #172]	; (8015e78 <HW_IPCC_Tx_Handler+0xb4>)
 8015dcc:	f7ff ff76 	bl	8015cbc <LL_C1_IPCC_IsActiveFlag_CHx>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d109      	bne.n	8015dea <HW_IPCC_Tx_Handler+0x26>
 8015dd6:	4b28      	ldr	r3, [pc, #160]	; (8015e78 <HW_IPCC_Tx_Handler+0xb4>)
 8015dd8:	685b      	ldr	r3, [r3, #4]
 8015dda:	43db      	mvns	r3, r3
 8015ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d002      	beq.n	8015dea <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8015de4:	f000 f8a0 	bl	8015f28 <HW_IPCC_SYS_CmdEvtHandler>
 8015de8:	e042      	b.n	8015e70 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8015dea:	2104      	movs	r1, #4
 8015dec:	4822      	ldr	r0, [pc, #136]	; (8015e78 <HW_IPCC_Tx_Handler+0xb4>)
 8015dee:	f7ff ff65 	bl	8015cbc <LL_C1_IPCC_IsActiveFlag_CHx>
 8015df2:	4603      	mov	r3, r0
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d109      	bne.n	8015e0c <HW_IPCC_Tx_Handler+0x48>
 8015df8:	4b1f      	ldr	r3, [pc, #124]	; (8015e78 <HW_IPCC_Tx_Handler+0xb4>)
 8015dfa:	685b      	ldr	r3, [r3, #4]
 8015dfc:	43db      	mvns	r3, r3
 8015dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d002      	beq.n	8015e0c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8015e06:	f000 f8e9 	bl	8015fdc <HW_IPCC_OT_CmdEvtHandler>
 8015e0a:	e031      	b.n	8015e70 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8015e0c:	2102      	movs	r1, #2
 8015e0e:	481a      	ldr	r0, [pc, #104]	; (8015e78 <HW_IPCC_Tx_Handler+0xb4>)
 8015e10:	f7ff ff54 	bl	8015cbc <LL_C1_IPCC_IsActiveFlag_CHx>
 8015e14:	4603      	mov	r3, r0
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d109      	bne.n	8015e2e <HW_IPCC_Tx_Handler+0x6a>
 8015e1a:	4b17      	ldr	r3, [pc, #92]	; (8015e78 <HW_IPCC_Tx_Handler+0xb4>)
 8015e1c:	685b      	ldr	r3, [r3, #4]
 8015e1e:	43db      	mvns	r3, r3
 8015e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d002      	beq.n	8015e2e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8015e28:	f000 f87e 	bl	8015f28 <HW_IPCC_SYS_CmdEvtHandler>
 8015e2c:	e020      	b.n	8015e70 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8015e2e:	2108      	movs	r1, #8
 8015e30:	4811      	ldr	r0, [pc, #68]	; (8015e78 <HW_IPCC_Tx_Handler+0xb4>)
 8015e32:	f7ff ff43 	bl	8015cbc <LL_C1_IPCC_IsActiveFlag_CHx>
 8015e36:	4603      	mov	r3, r0
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d109      	bne.n	8015e50 <HW_IPCC_Tx_Handler+0x8c>
 8015e3c:	4b0e      	ldr	r3, [pc, #56]	; (8015e78 <HW_IPCC_Tx_Handler+0xb4>)
 8015e3e:	685b      	ldr	r3, [r3, #4]
 8015e40:	43db      	mvns	r3, r3
 8015e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d002      	beq.n	8015e50 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8015e4a:	f000 f90d 	bl	8016068 <HW_IPCC_MM_FreeBufHandler>
 8015e4e:	e00f      	b.n	8015e70 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8015e50:	2120      	movs	r1, #32
 8015e52:	4809      	ldr	r0, [pc, #36]	; (8015e78 <HW_IPCC_Tx_Handler+0xb4>)
 8015e54:	f7ff ff32 	bl	8015cbc <LL_C1_IPCC_IsActiveFlag_CHx>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d109      	bne.n	8015e72 <HW_IPCC_Tx_Handler+0xae>
 8015e5e:	4b06      	ldr	r3, [pc, #24]	; (8015e78 <HW_IPCC_Tx_Handler+0xb4>)
 8015e60:	685b      	ldr	r3, [r3, #4]
 8015e62:	43db      	mvns	r3, r3
 8015e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d002      	beq.n	8015e72 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8015e6c:	f000 f838 	bl	8015ee0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8015e70:	bf00      	nop
 8015e72:	bf00      	nop
}
 8015e74:	bd80      	pop	{r7, pc}
 8015e76:	bf00      	nop
 8015e78:	58000c00 	.word	0x58000c00

08015e7c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8015e80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015e84:	f7ff fe46 	bl	8015b14 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8015e88:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015e8c:	f7ff fe56 	bl	8015b3c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8015e90:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8015e92:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8015e94:	f7ff fe64 	bl	8015b60 <LL_PWR_EnableBootC2>

  return;
 8015e98:	bf00      	nop
}
 8015e9a:	bd80      	pop	{r7, pc}

08015e9c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8015ea0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8015ea4:	f7ff fe6c 	bl	8015b80 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8015ea8:	4806      	ldr	r0, [pc, #24]	; (8015ec4 <HW_IPCC_Init+0x28>)
 8015eaa:	f7ff fe92 	bl	8015bd2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8015eae:	4805      	ldr	r0, [pc, #20]	; (8015ec4 <HW_IPCC_Init+0x28>)
 8015eb0:	f7ff fe7f 	bl	8015bb2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8015eb4:	202c      	movs	r0, #44	; 0x2c
 8015eb6:	f7f1 f9e0 	bl	800727a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8015eba:	202d      	movs	r0, #45	; 0x2d
 8015ebc:	f7f1 f9dd 	bl	800727a <HAL_NVIC_EnableIRQ>

  return;
 8015ec0:	bf00      	nop
}
 8015ec2:	bd80      	pop	{r7, pc}
 8015ec4:	58000c00 	.word	0x58000c00

08015ec8 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8015ecc:	f7fe fdda 	bl	8014a84 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8015ed0:	2101      	movs	r1, #1
 8015ed2:	4802      	ldr	r0, [pc, #8]	; (8015edc <HW_IPCC_BLE_EvtHandler+0x14>)
 8015ed4:	f7ff fed5 	bl	8015c82 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015ed8:	bf00      	nop
}
 8015eda:	bd80      	pop	{r7, pc}
 8015edc:	58000c00 	.word	0x58000c00

08015ee0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8015ee4:	2120      	movs	r1, #32
 8015ee6:	4803      	ldr	r0, [pc, #12]	; (8015ef4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8015ee8:	f7ff fe96 	bl	8015c18 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8015eec:	f7fe fde6 	bl	8014abc <HW_IPCC_BLE_AclDataAckNot>

  return;
 8015ef0:	bf00      	nop
}
 8015ef2:	bd80      	pop	{r7, pc}
 8015ef4:	58000c00 	.word	0x58000c00

08015ef8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015efc:	2102      	movs	r1, #2
 8015efe:	4802      	ldr	r0, [pc, #8]	; (8015f08 <HW_IPCC_SYS_Init+0x10>)
 8015f00:	f7ff fe9c 	bl	8015c3c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015f04:	bf00      	nop
}
 8015f06:	bd80      	pop	{r7, pc}
 8015f08:	58000c00 	.word	0x58000c00

08015f0c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015f10:	2102      	movs	r1, #2
 8015f12:	4804      	ldr	r0, [pc, #16]	; (8015f24 <HW_IPCC_SYS_SendCmd+0x18>)
 8015f14:	f7ff fec3 	bl	8015c9e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015f18:	2102      	movs	r1, #2
 8015f1a:	4802      	ldr	r0, [pc, #8]	; (8015f24 <HW_IPCC_SYS_SendCmd+0x18>)
 8015f1c:	f7ff fe69 	bl	8015bf2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8015f20:	bf00      	nop
}
 8015f22:	bd80      	pop	{r7, pc}
 8015f24:	58000c00 	.word	0x58000c00

08015f28 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015f2c:	2102      	movs	r1, #2
 8015f2e:	4803      	ldr	r0, [pc, #12]	; (8015f3c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8015f30:	f7ff fe72 	bl	8015c18 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8015f34:	f7fe fe0a 	bl	8014b4c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8015f38:	bf00      	nop
}
 8015f3a:	bd80      	pop	{r7, pc}
 8015f3c:	58000c00 	.word	0x58000c00

08015f40 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8015f44:	f7fe fe12 	bl	8014b6c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015f48:	2102      	movs	r1, #2
 8015f4a:	4802      	ldr	r0, [pc, #8]	; (8015f54 <HW_IPCC_SYS_EvtHandler+0x14>)
 8015f4c:	f7ff fe99 	bl	8015c82 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015f50:	bf00      	nop
}
 8015f52:	bd80      	pop	{r7, pc}
 8015f54:	58000c00 	.word	0x58000c00

08015f58 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8015f5c:	2104      	movs	r1, #4
 8015f5e:	4804      	ldr	r0, [pc, #16]	; (8015f70 <HW_IPCC_THREAD_Init+0x18>)
 8015f60:	f7ff fe6c 	bl	8015c3c <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015f64:	2110      	movs	r1, #16
 8015f66:	4802      	ldr	r0, [pc, #8]	; (8015f70 <HW_IPCC_THREAD_Init+0x18>)
 8015f68:	f7ff fe68 	bl	8015c3c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015f6c:	bf00      	nop
}
 8015f6e:	bd80      	pop	{r7, pc}
 8015f70:	58000c00 	.word	0x58000c00

08015f74 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8015f78:	2104      	movs	r1, #4
 8015f7a:	4804      	ldr	r0, [pc, #16]	; (8015f8c <HW_IPCC_OT_SendCmd+0x18>)
 8015f7c:	f7ff fe8f 	bl	8015c9e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8015f80:	2104      	movs	r1, #4
 8015f82:	4802      	ldr	r0, [pc, #8]	; (8015f8c <HW_IPCC_OT_SendCmd+0x18>)
 8015f84:	f7ff fe35 	bl	8015bf2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8015f88:	bf00      	nop
}
 8015f8a:	bd80      	pop	{r7, pc}
 8015f8c:	58000c00 	.word	0x58000c00

08015f90 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8015f94:	2110      	movs	r1, #16
 8015f96:	4802      	ldr	r0, [pc, #8]	; (8015fa0 <HW_IPCC_CLI_SendCmd+0x10>)
 8015f98:	f7ff fe81 	bl	8015c9e <LL_C1_IPCC_SetFlag_CHx>

  return;
 8015f9c:	bf00      	nop
}
 8015f9e:	bd80      	pop	{r7, pc}
 8015fa0:	58000c00 	.word	0x58000c00

08015fa4 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8015fa8:	2104      	movs	r1, #4
 8015faa:	4804      	ldr	r0, [pc, #16]	; (8015fbc <HW_IPCC_THREAD_SendAck+0x18>)
 8015fac:	f7ff fe69 	bl	8015c82 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8015fb0:	2104      	movs	r1, #4
 8015fb2:	4802      	ldr	r0, [pc, #8]	; (8015fbc <HW_IPCC_THREAD_SendAck+0x18>)
 8015fb4:	f7ff fe42 	bl	8015c3c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015fb8:	bf00      	nop
}
 8015fba:	bd80      	pop	{r7, pc}
 8015fbc:	58000c00 	.word	0x58000c00

08015fc0 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015fc4:	2110      	movs	r1, #16
 8015fc6:	4804      	ldr	r0, [pc, #16]	; (8015fd8 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8015fc8:	f7ff fe5b 	bl	8015c82 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015fcc:	2110      	movs	r1, #16
 8015fce:	4802      	ldr	r0, [pc, #8]	; (8015fd8 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8015fd0:	f7ff fe34 	bl	8015c3c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015fd4:	bf00      	nop
}
 8015fd6:	bd80      	pop	{r7, pc}
 8015fd8:	58000c00 	.word	0x58000c00

08015fdc <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8015fe0:	2104      	movs	r1, #4
 8015fe2:	4803      	ldr	r0, [pc, #12]	; (8015ff0 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8015fe4:	f7ff fe18 	bl	8015c18 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8015fe8:	f7fe fe30 	bl	8014c4c <HW_IPCC_OT_CmdEvtNot>

  return;
 8015fec:	bf00      	nop
}
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	58000c00 	.word	0x58000c00

08015ff4 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8015ff8:	2104      	movs	r1, #4
 8015ffa:	4803      	ldr	r0, [pc, #12]	; (8016008 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8015ffc:	f7ff fe30 	bl	8015c60 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8016000:	f7fe fe30 	bl	8014c64 <HW_IPCC_THREAD_EvtNot>

  return;
 8016004:	bf00      	nop
}
 8016006:	bd80      	pop	{r7, pc}
 8016008:	58000c00 	.word	0x58000c00

0801600c <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 801600c:	b580      	push	{r7, lr}
 801600e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8016010:	2110      	movs	r1, #16
 8016012:	4803      	ldr	r0, [pc, #12]	; (8016020 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8016014:	f7ff fe24 	bl	8015c60 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8016018:	f7fe fe30 	bl	8014c7c <HW_IPCC_THREAD_CliEvtNot>

  return;
 801601c:	bf00      	nop
}
 801601e:	bd80      	pop	{r7, pc}
 8016020:	58000c00 	.word	0x58000c00

08016024 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b082      	sub	sp, #8
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 801602c:	2108      	movs	r1, #8
 801602e:	480c      	ldr	r0, [pc, #48]	; (8016060 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8016030:	f7ff fe44 	bl	8015cbc <LL_C1_IPCC_IsActiveFlag_CHx>
 8016034:	4603      	mov	r3, r0
 8016036:	2b00      	cmp	r3, #0
 8016038:	d007      	beq.n	801604a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801603a:	4a0a      	ldr	r2, [pc, #40]	; (8016064 <HW_IPCC_MM_SendFreeBuf+0x40>)
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8016040:	2108      	movs	r1, #8
 8016042:	4807      	ldr	r0, [pc, #28]	; (8016060 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8016044:	f7ff fdd5 	bl	8015bf2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8016048:	e006      	b.n	8016058 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801604e:	2108      	movs	r1, #8
 8016050:	4803      	ldr	r0, [pc, #12]	; (8016060 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8016052:	f7ff fe24 	bl	8015c9e <LL_C1_IPCC_SetFlag_CHx>
  return;
 8016056:	bf00      	nop
}
 8016058:	3708      	adds	r7, #8
 801605a:	46bd      	mov	sp, r7
 801605c:	bd80      	pop	{r7, pc}
 801605e:	bf00      	nop
 8016060:	58000c00 	.word	0x58000c00
 8016064:	20027790 	.word	0x20027790

08016068 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8016068:	b580      	push	{r7, lr}
 801606a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801606c:	2108      	movs	r1, #8
 801606e:	4806      	ldr	r0, [pc, #24]	; (8016088 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8016070:	f7ff fdd2 	bl	8015c18 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8016074:	4b05      	ldr	r3, [pc, #20]	; (801608c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801607a:	2108      	movs	r1, #8
 801607c:	4802      	ldr	r0, [pc, #8]	; (8016088 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801607e:	f7ff fe0e 	bl	8015c9e <LL_C1_IPCC_SetFlag_CHx>

  return;
 8016082:	bf00      	nop
}
 8016084:	bd80      	pop	{r7, pc}
 8016086:	bf00      	nop
 8016088:	58000c00 	.word	0x58000c00
 801608c:	20027790 	.word	0x20027790

08016090 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8016090:	b580      	push	{r7, lr}
 8016092:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8016094:	2108      	movs	r1, #8
 8016096:	4802      	ldr	r0, [pc, #8]	; (80160a0 <HW_IPCC_TRACES_Init+0x10>)
 8016098:	f7ff fdd0 	bl	8015c3c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801609c:	bf00      	nop
}
 801609e:	bd80      	pop	{r7, pc}
 80160a0:	58000c00 	.word	0x58000c00

080160a4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80160a8:	f7fe fe76 	bl	8014d98 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80160ac:	2108      	movs	r1, #8
 80160ae:	4802      	ldr	r0, [pc, #8]	; (80160b8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80160b0:	f7ff fde7 	bl	8015c82 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80160b4:	bf00      	nop
}
 80160b6:	bd80      	pop	{r7, pc}
 80160b8:	58000c00 	.word	0x58000c00

080160bc <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 80160bc:	b480      	push	{r7}
 80160be:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80160c0:	4b05      	ldr	r3, [pc, #20]	; (80160d8 <UTIL_LPM_Init+0x1c>)
 80160c2:	2200      	movs	r2, #0
 80160c4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80160c6:	4b05      	ldr	r3, [pc, #20]	; (80160dc <UTIL_LPM_Init+0x20>)
 80160c8:	2200      	movs	r2, #0
 80160ca:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80160cc:	bf00      	nop
 80160ce:	46bd      	mov	sp, r7
 80160d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d4:	4770      	bx	lr
 80160d6:	bf00      	nop
 80160d8:	20027794 	.word	0x20027794
 80160dc:	20027798 	.word	0x20027798

080160e0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80160e0:	b480      	push	{r7}
 80160e2:	b087      	sub	sp, #28
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
 80160e8:	460b      	mov	r3, r1
 80160ea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80160ec:	f3ef 8310 	mrs	r3, PRIMASK
 80160f0:	613b      	str	r3, [r7, #16]
  return(result);
 80160f2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80160f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80160f6:	b672      	cpsid	i
  
  switch(state)
 80160f8:	78fb      	ldrb	r3, [r7, #3]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d009      	beq.n	8016112 <UTIL_LPM_SetOffMode+0x32>
 80160fe:	2b01      	cmp	r3, #1
 8016100:	d000      	beq.n	8016104 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8016102:	e00e      	b.n	8016122 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8016104:	4b0c      	ldr	r3, [pc, #48]	; (8016138 <UTIL_LPM_SetOffMode+0x58>)
 8016106:	681a      	ldr	r2, [r3, #0]
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	4313      	orrs	r3, r2
 801610c:	4a0a      	ldr	r2, [pc, #40]	; (8016138 <UTIL_LPM_SetOffMode+0x58>)
 801610e:	6013      	str	r3, [r2, #0]
      break;
 8016110:	e007      	b.n	8016122 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	43da      	mvns	r2, r3
 8016116:	4b08      	ldr	r3, [pc, #32]	; (8016138 <UTIL_LPM_SetOffMode+0x58>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	4013      	ands	r3, r2
 801611c:	4a06      	ldr	r2, [pc, #24]	; (8016138 <UTIL_LPM_SetOffMode+0x58>)
 801611e:	6013      	str	r3, [r2, #0]
      break;
 8016120:	bf00      	nop
 8016122:	697b      	ldr	r3, [r7, #20]
 8016124:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801612c:	bf00      	nop
 801612e:	371c      	adds	r7, #28
 8016130:	46bd      	mov	sp, r7
 8016132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016136:	4770      	bx	lr
 8016138:	20027798 	.word	0x20027798

0801613c <arm_power_f32>:
 801613c:	b430      	push	{r4, r5}
 801613e:	088d      	lsrs	r5, r1, #2
 8016140:	eddf 5a20 	vldr	s11, [pc, #128]	; 80161c4 <arm_power_f32+0x88>
 8016144:	d020      	beq.n	8016188 <arm_power_f32+0x4c>
 8016146:	f100 0310 	add.w	r3, r0, #16
 801614a:	462c      	mov	r4, r5
 801614c:	ed53 6a04 	vldr	s13, [r3, #-16]
 8016150:	ed13 7a03 	vldr	s14, [r3, #-12]
 8016154:	ed53 7a02 	vldr	s15, [r3, #-8]
 8016158:	ed13 6a01 	vldr	s12, [r3, #-4]
 801615c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8016160:	ee27 7a07 	vmul.f32	s14, s14, s14
 8016164:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016168:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801616c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8016170:	ee26 6a06 	vmul.f32	s12, s12, s12
 8016174:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016178:	3c01      	subs	r4, #1
 801617a:	f103 0310 	add.w	r3, r3, #16
 801617e:	ee76 5a27 	vadd.f32	s11, s12, s15
 8016182:	d1e3      	bne.n	801614c <arm_power_f32+0x10>
 8016184:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8016188:	f011 0103 	ands.w	r1, r1, #3
 801618c:	d015      	beq.n	80161ba <arm_power_f32+0x7e>
 801618e:	edd0 7a00 	vldr	s15, [r0]
 8016192:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016196:	3901      	subs	r1, #1
 8016198:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801619c:	d00d      	beq.n	80161ba <arm_power_f32+0x7e>
 801619e:	edd0 7a01 	vldr	s15, [r0, #4]
 80161a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80161a6:	2901      	cmp	r1, #1
 80161a8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80161ac:	d005      	beq.n	80161ba <arm_power_f32+0x7e>
 80161ae:	edd0 7a02 	vldr	s15, [r0, #8]
 80161b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80161b6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80161ba:	edc2 5a00 	vstr	s11, [r2]
 80161be:	bc30      	pop	{r4, r5}
 80161c0:	4770      	bx	lr
 80161c2:	bf00      	nop
 80161c4:	00000000 	.word	0x00000000

080161c8 <arm_mat_mult_f32>:
 80161c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161cc:	8845      	ldrh	r5, [r0, #2]
 80161ce:	880b      	ldrh	r3, [r1, #0]
 80161d0:	8806      	ldrh	r6, [r0, #0]
 80161d2:	6847      	ldr	r7, [r0, #4]
 80161d4:	6854      	ldr	r4, [r2, #4]
 80161d6:	6848      	ldr	r0, [r1, #4]
 80161d8:	b08b      	sub	sp, #44	; 0x2c
 80161da:	42ab      	cmp	r3, r5
 80161dc:	9109      	str	r1, [sp, #36]	; 0x24
 80161de:	9604      	str	r6, [sp, #16]
 80161e0:	8849      	ldrh	r1, [r1, #2]
 80161e2:	f040 808a 	bne.w	80162fa <arm_mat_mult_f32+0x132>
 80161e6:	8815      	ldrh	r5, [r2, #0]
 80161e8:	42b5      	cmp	r5, r6
 80161ea:	f040 8086 	bne.w	80162fa <arm_mat_mult_f32+0x132>
 80161ee:	8852      	ldrh	r2, [r2, #2]
 80161f0:	428a      	cmp	r2, r1
 80161f2:	f040 8082 	bne.w	80162fa <arm_mat_mult_f32+0x132>
 80161f6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 80161fa:	1d01      	adds	r1, r0, #4
 80161fc:	0116      	lsls	r6, r2, #4
 80161fe:	9108      	str	r1, [sp, #32]
 8016200:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8016204:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8016208:	9101      	str	r1, [sp, #4]
 801620a:	fb06 f108 	mul.w	r1, r6, r8
 801620e:	0095      	lsls	r5, r2, #2
 8016210:	9103      	str	r1, [sp, #12]
 8016212:	00d2      	lsls	r2, r2, #3
 8016214:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8016218:	f003 0903 	and.w	r9, r3, #3
 801621c:	009b      	lsls	r3, r3, #2
 801621e:	f107 0b10 	add.w	fp, r7, #16
 8016222:	eb04 0a05 	add.w	sl, r4, r5
 8016226:	9107      	str	r1, [sp, #28]
 8016228:	9202      	str	r2, [sp, #8]
 801622a:	9306      	str	r3, [sp, #24]
 801622c:	f1ab 0310 	sub.w	r3, fp, #16
 8016230:	9305      	str	r3, [sp, #20]
 8016232:	9b07      	ldr	r3, [sp, #28]
 8016234:	f8dd e020 	ldr.w	lr, [sp, #32]
 8016238:	eb03 0c0a 	add.w	ip, r3, sl
 801623c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8016304 <arm_mat_mult_f32+0x13c>
 8016240:	f1b8 0f00 	cmp.w	r8, #0
 8016244:	d053      	beq.n	80162ee <arm_mat_mult_f32+0x126>
 8016246:	9b02      	ldr	r3, [sp, #8]
 8016248:	4644      	mov	r4, r8
 801624a:	18c1      	adds	r1, r0, r3
 801624c:	4602      	mov	r2, r0
 801624e:	465b      	mov	r3, fp
 8016250:	ed92 6a00 	vldr	s12, [r2]
 8016254:	ed13 7a04 	vldr	s14, [r3, #-16]
 8016258:	ed53 4a03 	vldr	s9, [r3, #-12]
 801625c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8016260:	ed91 5a00 	vldr	s10, [r1]
 8016264:	ed53 5a01 	vldr	s11, [r3, #-4]
 8016268:	1957      	adds	r7, r2, r5
 801626a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801626e:	ed97 6a00 	vldr	s12, [r7]
 8016272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016276:	ee26 6a24 	vmul.f32	s12, s12, s9
 801627a:	194f      	adds	r7, r1, r5
 801627c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8016280:	ee26 7a85 	vmul.f32	s14, s13, s10
 8016284:	edd7 7a00 	vldr	s15, [r7]
 8016288:	ee37 7a06 	vadd.f32	s14, s14, s12
 801628c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016290:	3c01      	subs	r4, #1
 8016292:	4432      	add	r2, r6
 8016294:	4431      	add	r1, r6
 8016296:	ee77 7a87 	vadd.f32	s15, s15, s14
 801629a:	f103 0310 	add.w	r3, r3, #16
 801629e:	d1d7      	bne.n	8016250 <arm_mat_mult_f32+0x88>
 80162a0:	9b03      	ldr	r3, [sp, #12]
 80162a2:	9a01      	ldr	r2, [sp, #4]
 80162a4:	4418      	add	r0, r3
 80162a6:	f1b9 0f00 	cmp.w	r9, #0
 80162aa:	d00b      	beq.n	80162c4 <arm_mat_mult_f32+0xfc>
 80162ac:	464b      	mov	r3, r9
 80162ae:	edd0 6a00 	vldr	s13, [r0]
 80162b2:	ecb2 7a01 	vldmia	r2!, {s14}
 80162b6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80162ba:	3b01      	subs	r3, #1
 80162bc:	4428      	add	r0, r5
 80162be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80162c2:	d1f4      	bne.n	80162ae <arm_mat_mult_f32+0xe6>
 80162c4:	ecec 7a01 	vstmia	ip!, {s15}
 80162c8:	45d4      	cmp	ip, sl
 80162ca:	4670      	mov	r0, lr
 80162cc:	f10e 0e04 	add.w	lr, lr, #4
 80162d0:	d1b4      	bne.n	801623c <arm_mat_mult_f32+0x74>
 80162d2:	9a01      	ldr	r2, [sp, #4]
 80162d4:	9b06      	ldr	r3, [sp, #24]
 80162d6:	4611      	mov	r1, r2
 80162d8:	4419      	add	r1, r3
 80162da:	449b      	add	fp, r3
 80162dc:	9b04      	ldr	r3, [sp, #16]
 80162de:	9101      	str	r1, [sp, #4]
 80162e0:	3b01      	subs	r3, #1
 80162e2:	44aa      	add	sl, r5
 80162e4:	9304      	str	r3, [sp, #16]
 80162e6:	d004      	beq.n	80162f2 <arm_mat_mult_f32+0x12a>
 80162e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162ea:	6858      	ldr	r0, [r3, #4]
 80162ec:	e79e      	b.n	801622c <arm_mat_mult_f32+0x64>
 80162ee:	9a05      	ldr	r2, [sp, #20]
 80162f0:	e7d9      	b.n	80162a6 <arm_mat_mult_f32+0xde>
 80162f2:	4618      	mov	r0, r3
 80162f4:	b00b      	add	sp, #44	; 0x2c
 80162f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162fa:	f06f 0002 	mvn.w	r0, #2
 80162fe:	b00b      	add	sp, #44	; 0x2c
 8016300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016304:	00000000 	.word	0x00000000

08016308 <arm_sin_f32>:
 8016308:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016388 <arm_sin_f32+0x80>
 801630c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016310:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016318:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801631c:	d504      	bpl.n	8016328 <arm_sin_f32+0x20>
 801631e:	ee17 3a90 	vmov	r3, s15
 8016322:	3b01      	subs	r3, #1
 8016324:	ee07 3a90 	vmov	s15, r3
 8016328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801632c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801638c <arm_sin_f32+0x84>
 8016330:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016334:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016338:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801633c:	ee17 3a90 	vmov	r3, s15
 8016340:	b29b      	uxth	r3, r3
 8016342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016346:	d21a      	bcs.n	801637e <arm_sin_f32+0x76>
 8016348:	ee07 3a90 	vmov	s15, r3
 801634c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016350:	1c59      	adds	r1, r3, #1
 8016352:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016356:	4a0e      	ldr	r2, [pc, #56]	; (8016390 <arm_sin_f32+0x88>)
 8016358:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801635c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016360:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016364:	ed93 7a00 	vldr	s14, [r3]
 8016368:	edd2 6a00 	vldr	s13, [r2]
 801636c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016370:	ee20 0a26 	vmul.f32	s0, s0, s13
 8016374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016378:	ee37 0a80 	vadd.f32	s0, s15, s0
 801637c:	4770      	bx	lr
 801637e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016382:	2101      	movs	r1, #1
 8016384:	2300      	movs	r3, #0
 8016386:	e7e6      	b.n	8016356 <arm_sin_f32+0x4e>
 8016388:	3e22f983 	.word	0x3e22f983
 801638c:	44000000 	.word	0x44000000
 8016390:	080181ac 	.word	0x080181ac

08016394 <arm_cos_f32>:
 8016394:	eddf 7a21 	vldr	s15, [pc, #132]	; 801641c <arm_cos_f32+0x88>
 8016398:	ee20 0a27 	vmul.f32	s0, s0, s15
 801639c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80163a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80163a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80163a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80163b0:	d504      	bpl.n	80163bc <arm_cos_f32+0x28>
 80163b2:	ee17 3a90 	vmov	r3, s15
 80163b6:	3b01      	subs	r3, #1
 80163b8:	ee07 3a90 	vmov	s15, r3
 80163bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163c0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8016420 <arm_cos_f32+0x8c>
 80163c4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80163c8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80163cc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80163d0:	ee17 3a90 	vmov	r3, s15
 80163d4:	b29b      	uxth	r3, r3
 80163d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80163da:	d21a      	bcs.n	8016412 <arm_cos_f32+0x7e>
 80163dc:	ee07 3a90 	vmov	s15, r3
 80163e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80163e4:	1c59      	adds	r1, r3, #1
 80163e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80163ea:	4a0e      	ldr	r2, [pc, #56]	; (8016424 <arm_cos_f32+0x90>)
 80163ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80163f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80163f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80163f8:	ed93 7a00 	vldr	s14, [r3]
 80163fc:	edd2 6a00 	vldr	s13, [r2]
 8016400:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016404:	ee20 0a26 	vmul.f32	s0, s0, s13
 8016408:	ee67 7a87 	vmul.f32	s15, s15, s14
 801640c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016410:	4770      	bx	lr
 8016412:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016416:	2101      	movs	r1, #1
 8016418:	2300      	movs	r3, #0
 801641a:	e7e6      	b.n	80163ea <arm_cos_f32+0x56>
 801641c:	3e22f983 	.word	0x3e22f983
 8016420:	44000000 	.word	0x44000000
 8016424:	080181ac 	.word	0x080181ac

08016428 <arm_sub_f32>:
 8016428:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801642c:	b4f0      	push	{r4, r5, r6, r7}
 801642e:	d033      	beq.n	8016498 <arm_sub_f32+0x70>
 8016430:	f100 0610 	add.w	r6, r0, #16
 8016434:	f101 0510 	add.w	r5, r1, #16
 8016438:	f102 0410 	add.w	r4, r2, #16
 801643c:	4667      	mov	r7, ip
 801643e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8016442:	ed56 7a04 	vldr	s15, [r6, #-16]
 8016446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801644a:	3f01      	subs	r7, #1
 801644c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8016450:	ed15 7a03 	vldr	s14, [r5, #-12]
 8016454:	ed56 7a03 	vldr	s15, [r6, #-12]
 8016458:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801645c:	f106 0610 	add.w	r6, r6, #16
 8016460:	ed44 7a03 	vstr	s15, [r4, #-12]
 8016464:	ed15 7a02 	vldr	s14, [r5, #-8]
 8016468:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801646c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016470:	f105 0510 	add.w	r5, r5, #16
 8016474:	ed44 7a02 	vstr	s15, [r4, #-8]
 8016478:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 801647c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8016480:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016484:	f104 0410 	add.w	r4, r4, #16
 8016488:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 801648c:	d1d7      	bne.n	801643e <arm_sub_f32+0x16>
 801648e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8016492:	4420      	add	r0, r4
 8016494:	4421      	add	r1, r4
 8016496:	4422      	add	r2, r4
 8016498:	f013 0303 	ands.w	r3, r3, #3
 801649c:	d01b      	beq.n	80164d6 <arm_sub_f32+0xae>
 801649e:	edd0 7a00 	vldr	s15, [r0]
 80164a2:	ed91 7a00 	vldr	s14, [r1]
 80164a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164aa:	3b01      	subs	r3, #1
 80164ac:	edc2 7a00 	vstr	s15, [r2]
 80164b0:	d011      	beq.n	80164d6 <arm_sub_f32+0xae>
 80164b2:	edd0 7a01 	vldr	s15, [r0, #4]
 80164b6:	ed91 7a01 	vldr	s14, [r1, #4]
 80164ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164be:	2b01      	cmp	r3, #1
 80164c0:	edc2 7a01 	vstr	s15, [r2, #4]
 80164c4:	d007      	beq.n	80164d6 <arm_sub_f32+0xae>
 80164c6:	edd0 7a02 	vldr	s15, [r0, #8]
 80164ca:	ed91 7a02 	vldr	s14, [r1, #8]
 80164ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164d2:	edc2 7a02 	vstr	s15, [r2, #8]
 80164d6:	bcf0      	pop	{r4, r5, r6, r7}
 80164d8:	4770      	bx	lr
 80164da:	bf00      	nop

080164dc <arm_scale_f32>:
 80164dc:	b470      	push	{r4, r5, r6}
 80164de:	0896      	lsrs	r6, r2, #2
 80164e0:	d025      	beq.n	801652e <arm_scale_f32+0x52>
 80164e2:	f100 0410 	add.w	r4, r0, #16
 80164e6:	f101 0310 	add.w	r3, r1, #16
 80164ea:	4635      	mov	r5, r6
 80164ec:	ed54 7a04 	vldr	s15, [r4, #-16]
 80164f0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80164f4:	3d01      	subs	r5, #1
 80164f6:	ed43 7a04 	vstr	s15, [r3, #-16]
 80164fa:	ed54 7a03 	vldr	s15, [r4, #-12]
 80164fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016502:	f104 0410 	add.w	r4, r4, #16
 8016506:	ed43 7a03 	vstr	s15, [r3, #-12]
 801650a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801650e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016512:	f103 0310 	add.w	r3, r3, #16
 8016516:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 801651a:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 801651e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016522:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8016526:	d1e1      	bne.n	80164ec <arm_scale_f32+0x10>
 8016528:	0136      	lsls	r6, r6, #4
 801652a:	4430      	add	r0, r6
 801652c:	4431      	add	r1, r6
 801652e:	f012 0203 	ands.w	r2, r2, #3
 8016532:	d015      	beq.n	8016560 <arm_scale_f32+0x84>
 8016534:	edd0 7a00 	vldr	s15, [r0]
 8016538:	ee67 7a80 	vmul.f32	s15, s15, s0
 801653c:	3a01      	subs	r2, #1
 801653e:	edc1 7a00 	vstr	s15, [r1]
 8016542:	d00d      	beq.n	8016560 <arm_scale_f32+0x84>
 8016544:	edd0 7a01 	vldr	s15, [r0, #4]
 8016548:	ee67 7a80 	vmul.f32	s15, s15, s0
 801654c:	2a01      	cmp	r2, #1
 801654e:	edc1 7a01 	vstr	s15, [r1, #4]
 8016552:	d005      	beq.n	8016560 <arm_scale_f32+0x84>
 8016554:	edd0 7a02 	vldr	s15, [r0, #8]
 8016558:	ee27 0a80 	vmul.f32	s0, s15, s0
 801655c:	ed81 0a02 	vstr	s0, [r1, #8]
 8016560:	bc70      	pop	{r4, r5, r6}
 8016562:	4770      	bx	lr

08016564 <arm_dot_prod_f32>:
 8016564:	b4f0      	push	{r4, r5, r6, r7}
 8016566:	0897      	lsrs	r7, r2, #2
 8016568:	eddf 5a29 	vldr	s11, [pc, #164]	; 8016610 <arm_dot_prod_f32+0xac>
 801656c:	d02d      	beq.n	80165ca <arm_dot_prod_f32+0x66>
 801656e:	f100 0510 	add.w	r5, r0, #16
 8016572:	f101 0410 	add.w	r4, r1, #16
 8016576:	463e      	mov	r6, r7
 8016578:	ed55 6a04 	vldr	s13, [r5, #-16]
 801657c:	ed54 3a04 	vldr	s7, [r4, #-16]
 8016580:	ed15 7a03 	vldr	s14, [r5, #-12]
 8016584:	ed14 4a03 	vldr	s8, [r4, #-12]
 8016588:	ed55 7a02 	vldr	s15, [r5, #-8]
 801658c:	ed54 4a02 	vldr	s9, [r4, #-8]
 8016590:	ed15 6a01 	vldr	s12, [r5, #-4]
 8016594:	ed14 5a01 	vldr	s10, [r4, #-4]
 8016598:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801659c:	ee27 7a04 	vmul.f32	s14, s14, s8
 80165a0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80165a4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80165a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80165ac:	ee66 6a05 	vmul.f32	s13, s12, s10
 80165b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80165b4:	3e01      	subs	r6, #1
 80165b6:	f105 0510 	add.w	r5, r5, #16
 80165ba:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80165be:	f104 0410 	add.w	r4, r4, #16
 80165c2:	d1d9      	bne.n	8016578 <arm_dot_prod_f32+0x14>
 80165c4:	013f      	lsls	r7, r7, #4
 80165c6:	4438      	add	r0, r7
 80165c8:	4439      	add	r1, r7
 80165ca:	f012 0203 	ands.w	r2, r2, #3
 80165ce:	d01b      	beq.n	8016608 <arm_dot_prod_f32+0xa4>
 80165d0:	edd1 7a00 	vldr	s15, [r1]
 80165d4:	ed90 7a00 	vldr	s14, [r0]
 80165d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80165dc:	3a01      	subs	r2, #1
 80165de:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80165e2:	d011      	beq.n	8016608 <arm_dot_prod_f32+0xa4>
 80165e4:	edd1 7a01 	vldr	s15, [r1, #4]
 80165e8:	ed90 7a01 	vldr	s14, [r0, #4]
 80165ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80165f0:	2a01      	cmp	r2, #1
 80165f2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80165f6:	d007      	beq.n	8016608 <arm_dot_prod_f32+0xa4>
 80165f8:	edd0 7a02 	vldr	s15, [r0, #8]
 80165fc:	ed91 7a02 	vldr	s14, [r1, #8]
 8016600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016604:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8016608:	edc3 5a00 	vstr	s11, [r3]
 801660c:	bcf0      	pop	{r4, r5, r6, r7}
 801660e:	4770      	bx	lr
 8016610:	00000000 	.word	0x00000000

08016614 <arm_add_f32>:
 8016614:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8016618:	b4f0      	push	{r4, r5, r6, r7}
 801661a:	d033      	beq.n	8016684 <arm_add_f32+0x70>
 801661c:	f100 0610 	add.w	r6, r0, #16
 8016620:	f101 0510 	add.w	r5, r1, #16
 8016624:	f102 0410 	add.w	r4, r2, #16
 8016628:	4667      	mov	r7, ip
 801662a:	ed15 7a04 	vldr	s14, [r5, #-16]
 801662e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8016632:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016636:	3f01      	subs	r7, #1
 8016638:	ed44 7a04 	vstr	s15, [r4, #-16]
 801663c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8016640:	ed56 7a03 	vldr	s15, [r6, #-12]
 8016644:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016648:	f106 0610 	add.w	r6, r6, #16
 801664c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8016650:	ed15 7a02 	vldr	s14, [r5, #-8]
 8016654:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8016658:	ee77 7a87 	vadd.f32	s15, s15, s14
 801665c:	f105 0510 	add.w	r5, r5, #16
 8016660:	ed44 7a02 	vstr	s15, [r4, #-8]
 8016664:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8016668:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801666c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016670:	f104 0410 	add.w	r4, r4, #16
 8016674:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8016678:	d1d7      	bne.n	801662a <arm_add_f32+0x16>
 801667a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801667e:	4420      	add	r0, r4
 8016680:	4421      	add	r1, r4
 8016682:	4422      	add	r2, r4
 8016684:	f013 0303 	ands.w	r3, r3, #3
 8016688:	d01b      	beq.n	80166c2 <arm_add_f32+0xae>
 801668a:	edd1 7a00 	vldr	s15, [r1]
 801668e:	ed90 7a00 	vldr	s14, [r0]
 8016692:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016696:	3b01      	subs	r3, #1
 8016698:	edc2 7a00 	vstr	s15, [r2]
 801669c:	d011      	beq.n	80166c2 <arm_add_f32+0xae>
 801669e:	edd0 7a01 	vldr	s15, [r0, #4]
 80166a2:	ed91 7a01 	vldr	s14, [r1, #4]
 80166a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80166aa:	2b01      	cmp	r3, #1
 80166ac:	edc2 7a01 	vstr	s15, [r2, #4]
 80166b0:	d007      	beq.n	80166c2 <arm_add_f32+0xae>
 80166b2:	edd0 7a02 	vldr	s15, [r0, #8]
 80166b6:	ed91 7a02 	vldr	s14, [r1, #8]
 80166ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80166be:	edc2 7a02 	vstr	s15, [r2, #8]
 80166c2:	bcf0      	pop	{r4, r5, r6, r7}
 80166c4:	4770      	bx	lr
 80166c6:	bf00      	nop

080166c8 <__errno>:
 80166c8:	4b01      	ldr	r3, [pc, #4]	; (80166d0 <__errno+0x8>)
 80166ca:	6818      	ldr	r0, [r3, #0]
 80166cc:	4770      	bx	lr
 80166ce:	bf00      	nop
 80166d0:	200000d0 	.word	0x200000d0

080166d4 <__libc_init_array>:
 80166d4:	b570      	push	{r4, r5, r6, lr}
 80166d6:	4e0d      	ldr	r6, [pc, #52]	; (801670c <__libc_init_array+0x38>)
 80166d8:	4c0d      	ldr	r4, [pc, #52]	; (8016710 <__libc_init_array+0x3c>)
 80166da:	1ba4      	subs	r4, r4, r6
 80166dc:	10a4      	asrs	r4, r4, #2
 80166de:	2500      	movs	r5, #0
 80166e0:	42a5      	cmp	r5, r4
 80166e2:	d109      	bne.n	80166f8 <__libc_init_array+0x24>
 80166e4:	4e0b      	ldr	r6, [pc, #44]	; (8016714 <__libc_init_array+0x40>)
 80166e6:	4c0c      	ldr	r4, [pc, #48]	; (8016718 <__libc_init_array+0x44>)
 80166e8:	f001 f8d4 	bl	8017894 <_init>
 80166ec:	1ba4      	subs	r4, r4, r6
 80166ee:	10a4      	asrs	r4, r4, #2
 80166f0:	2500      	movs	r5, #0
 80166f2:	42a5      	cmp	r5, r4
 80166f4:	d105      	bne.n	8016702 <__libc_init_array+0x2e>
 80166f6:	bd70      	pop	{r4, r5, r6, pc}
 80166f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80166fc:	4798      	blx	r3
 80166fe:	3501      	adds	r5, #1
 8016700:	e7ee      	b.n	80166e0 <__libc_init_array+0xc>
 8016702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016706:	4798      	blx	r3
 8016708:	3501      	adds	r5, #1
 801670a:	e7f2      	b.n	80166f2 <__libc_init_array+0x1e>
 801670c:	08018a68 	.word	0x08018a68
 8016710:	08018a68 	.word	0x08018a68
 8016714:	08018a68 	.word	0x08018a68
 8016718:	08018a6c 	.word	0x08018a6c

0801671c <memcpy>:
 801671c:	b510      	push	{r4, lr}
 801671e:	1e43      	subs	r3, r0, #1
 8016720:	440a      	add	r2, r1
 8016722:	4291      	cmp	r1, r2
 8016724:	d100      	bne.n	8016728 <memcpy+0xc>
 8016726:	bd10      	pop	{r4, pc}
 8016728:	f811 4b01 	ldrb.w	r4, [r1], #1
 801672c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016730:	e7f7      	b.n	8016722 <memcpy+0x6>

08016732 <memset>:
 8016732:	4402      	add	r2, r0
 8016734:	4603      	mov	r3, r0
 8016736:	4293      	cmp	r3, r2
 8016738:	d100      	bne.n	801673c <memset+0xa>
 801673a:	4770      	bx	lr
 801673c:	f803 1b01 	strb.w	r1, [r3], #1
 8016740:	e7f9      	b.n	8016736 <memset+0x4>
	...

08016744 <pow>:
 8016744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016748:	ed2d 8b04 	vpush	{d8-d9}
 801674c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8016a20 <pow+0x2dc>
 8016750:	b08d      	sub	sp, #52	; 0x34
 8016752:	ec57 6b10 	vmov	r6, r7, d0
 8016756:	ec55 4b11 	vmov	r4, r5, d1
 801675a:	f000 f9b5 	bl	8016ac8 <__ieee754_pow>
 801675e:	f999 3000 	ldrsb.w	r3, [r9]
 8016762:	9300      	str	r3, [sp, #0]
 8016764:	3301      	adds	r3, #1
 8016766:	eeb0 8a40 	vmov.f32	s16, s0
 801676a:	eef0 8a60 	vmov.f32	s17, s1
 801676e:	46c8      	mov	r8, r9
 8016770:	d05f      	beq.n	8016832 <pow+0xee>
 8016772:	4622      	mov	r2, r4
 8016774:	462b      	mov	r3, r5
 8016776:	4620      	mov	r0, r4
 8016778:	4629      	mov	r1, r5
 801677a:	f7ea f961 	bl	8000a40 <__aeabi_dcmpun>
 801677e:	4683      	mov	fp, r0
 8016780:	2800      	cmp	r0, #0
 8016782:	d156      	bne.n	8016832 <pow+0xee>
 8016784:	4632      	mov	r2, r6
 8016786:	463b      	mov	r3, r7
 8016788:	4630      	mov	r0, r6
 801678a:	4639      	mov	r1, r7
 801678c:	f7ea f958 	bl	8000a40 <__aeabi_dcmpun>
 8016790:	9001      	str	r0, [sp, #4]
 8016792:	b1e8      	cbz	r0, 80167d0 <pow+0x8c>
 8016794:	2200      	movs	r2, #0
 8016796:	2300      	movs	r3, #0
 8016798:	4620      	mov	r0, r4
 801679a:	4629      	mov	r1, r5
 801679c:	f7ea f91e 	bl	80009dc <__aeabi_dcmpeq>
 80167a0:	2800      	cmp	r0, #0
 80167a2:	d046      	beq.n	8016832 <pow+0xee>
 80167a4:	2301      	movs	r3, #1
 80167a6:	9302      	str	r3, [sp, #8]
 80167a8:	4b96      	ldr	r3, [pc, #600]	; (8016a04 <pow+0x2c0>)
 80167aa:	9303      	str	r3, [sp, #12]
 80167ac:	4b96      	ldr	r3, [pc, #600]	; (8016a08 <pow+0x2c4>)
 80167ae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80167b2:	2200      	movs	r2, #0
 80167b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80167b8:	9b00      	ldr	r3, [sp, #0]
 80167ba:	2b02      	cmp	r3, #2
 80167bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80167c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80167c4:	d033      	beq.n	801682e <pow+0xea>
 80167c6:	a802      	add	r0, sp, #8
 80167c8:	f000 ff50 	bl	801766c <matherr>
 80167cc:	bb48      	cbnz	r0, 8016822 <pow+0xde>
 80167ce:	e05d      	b.n	801688c <pow+0x148>
 80167d0:	f04f 0a00 	mov.w	sl, #0
 80167d4:	f04f 0b00 	mov.w	fp, #0
 80167d8:	4652      	mov	r2, sl
 80167da:	465b      	mov	r3, fp
 80167dc:	4630      	mov	r0, r6
 80167de:	4639      	mov	r1, r7
 80167e0:	f7ea f8fc 	bl	80009dc <__aeabi_dcmpeq>
 80167e4:	ec4b ab19 	vmov	d9, sl, fp
 80167e8:	2800      	cmp	r0, #0
 80167ea:	d054      	beq.n	8016896 <pow+0x152>
 80167ec:	4652      	mov	r2, sl
 80167ee:	465b      	mov	r3, fp
 80167f0:	4620      	mov	r0, r4
 80167f2:	4629      	mov	r1, r5
 80167f4:	f7ea f8f2 	bl	80009dc <__aeabi_dcmpeq>
 80167f8:	4680      	mov	r8, r0
 80167fa:	b318      	cbz	r0, 8016844 <pow+0x100>
 80167fc:	2301      	movs	r3, #1
 80167fe:	9302      	str	r3, [sp, #8]
 8016800:	4b80      	ldr	r3, [pc, #512]	; (8016a04 <pow+0x2c0>)
 8016802:	9303      	str	r3, [sp, #12]
 8016804:	9b01      	ldr	r3, [sp, #4]
 8016806:	930a      	str	r3, [sp, #40]	; 0x28
 8016808:	9b00      	ldr	r3, [sp, #0]
 801680a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801680e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016812:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d0d5      	beq.n	80167c6 <pow+0x82>
 801681a:	4b7b      	ldr	r3, [pc, #492]	; (8016a08 <pow+0x2c4>)
 801681c:	2200      	movs	r2, #0
 801681e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016824:	b11b      	cbz	r3, 801682e <pow+0xea>
 8016826:	f7ff ff4f 	bl	80166c8 <__errno>
 801682a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801682c:	6003      	str	r3, [r0, #0]
 801682e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8016832:	eeb0 0a48 	vmov.f32	s0, s16
 8016836:	eef0 0a68 	vmov.f32	s1, s17
 801683a:	b00d      	add	sp, #52	; 0x34
 801683c:	ecbd 8b04 	vpop	{d8-d9}
 8016840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016844:	ec45 4b10 	vmov	d0, r4, r5
 8016848:	f000 ff08 	bl	801765c <finite>
 801684c:	2800      	cmp	r0, #0
 801684e:	d0f0      	beq.n	8016832 <pow+0xee>
 8016850:	4652      	mov	r2, sl
 8016852:	465b      	mov	r3, fp
 8016854:	4620      	mov	r0, r4
 8016856:	4629      	mov	r1, r5
 8016858:	f7ea f8ca 	bl	80009f0 <__aeabi_dcmplt>
 801685c:	2800      	cmp	r0, #0
 801685e:	d0e8      	beq.n	8016832 <pow+0xee>
 8016860:	2301      	movs	r3, #1
 8016862:	9302      	str	r3, [sp, #8]
 8016864:	4b67      	ldr	r3, [pc, #412]	; (8016a04 <pow+0x2c0>)
 8016866:	9303      	str	r3, [sp, #12]
 8016868:	f999 3000 	ldrsb.w	r3, [r9]
 801686c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8016870:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016874:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016878:	b913      	cbnz	r3, 8016880 <pow+0x13c>
 801687a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801687e:	e7a2      	b.n	80167c6 <pow+0x82>
 8016880:	4962      	ldr	r1, [pc, #392]	; (8016a0c <pow+0x2c8>)
 8016882:	2000      	movs	r0, #0
 8016884:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016888:	2b02      	cmp	r3, #2
 801688a:	d19c      	bne.n	80167c6 <pow+0x82>
 801688c:	f7ff ff1c 	bl	80166c8 <__errno>
 8016890:	2321      	movs	r3, #33	; 0x21
 8016892:	6003      	str	r3, [r0, #0]
 8016894:	e7c5      	b.n	8016822 <pow+0xde>
 8016896:	eeb0 0a48 	vmov.f32	s0, s16
 801689a:	eef0 0a68 	vmov.f32	s1, s17
 801689e:	f000 fedd 	bl	801765c <finite>
 80168a2:	9000      	str	r0, [sp, #0]
 80168a4:	2800      	cmp	r0, #0
 80168a6:	f040 8081 	bne.w	80169ac <pow+0x268>
 80168aa:	ec47 6b10 	vmov	d0, r6, r7
 80168ae:	f000 fed5 	bl	801765c <finite>
 80168b2:	2800      	cmp	r0, #0
 80168b4:	d07a      	beq.n	80169ac <pow+0x268>
 80168b6:	ec45 4b10 	vmov	d0, r4, r5
 80168ba:	f000 fecf 	bl	801765c <finite>
 80168be:	2800      	cmp	r0, #0
 80168c0:	d074      	beq.n	80169ac <pow+0x268>
 80168c2:	ec53 2b18 	vmov	r2, r3, d8
 80168c6:	ee18 0a10 	vmov	r0, s16
 80168ca:	4619      	mov	r1, r3
 80168cc:	f7ea f8b8 	bl	8000a40 <__aeabi_dcmpun>
 80168d0:	f999 9000 	ldrsb.w	r9, [r9]
 80168d4:	4b4b      	ldr	r3, [pc, #300]	; (8016a04 <pow+0x2c0>)
 80168d6:	b1b0      	cbz	r0, 8016906 <pow+0x1c2>
 80168d8:	2201      	movs	r2, #1
 80168da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80168de:	9b00      	ldr	r3, [sp, #0]
 80168e0:	930a      	str	r3, [sp, #40]	; 0x28
 80168e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80168e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80168ea:	f1b9 0f00 	cmp.w	r9, #0
 80168ee:	d0c4      	beq.n	801687a <pow+0x136>
 80168f0:	4652      	mov	r2, sl
 80168f2:	465b      	mov	r3, fp
 80168f4:	4650      	mov	r0, sl
 80168f6:	4659      	mov	r1, fp
 80168f8:	f7e9 ff32 	bl	8000760 <__aeabi_ddiv>
 80168fc:	f1b9 0f02 	cmp.w	r9, #2
 8016900:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016904:	e7c1      	b.n	801688a <pow+0x146>
 8016906:	2203      	movs	r2, #3
 8016908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801690c:	900a      	str	r0, [sp, #40]	; 0x28
 801690e:	4629      	mov	r1, r5
 8016910:	4620      	mov	r0, r4
 8016912:	2200      	movs	r2, #0
 8016914:	4b3e      	ldr	r3, [pc, #248]	; (8016a10 <pow+0x2cc>)
 8016916:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801691a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801691e:	f7e9 fdf5 	bl	800050c <__aeabi_dmul>
 8016922:	4604      	mov	r4, r0
 8016924:	460d      	mov	r5, r1
 8016926:	f1b9 0f00 	cmp.w	r9, #0
 801692a:	d124      	bne.n	8016976 <pow+0x232>
 801692c:	4b39      	ldr	r3, [pc, #228]	; (8016a14 <pow+0x2d0>)
 801692e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016932:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016936:	4630      	mov	r0, r6
 8016938:	4652      	mov	r2, sl
 801693a:	465b      	mov	r3, fp
 801693c:	4639      	mov	r1, r7
 801693e:	f7ea f857 	bl	80009f0 <__aeabi_dcmplt>
 8016942:	2800      	cmp	r0, #0
 8016944:	d056      	beq.n	80169f4 <pow+0x2b0>
 8016946:	ec45 4b10 	vmov	d0, r4, r5
 801694a:	f000 fe99 	bl	8017680 <rint>
 801694e:	4622      	mov	r2, r4
 8016950:	462b      	mov	r3, r5
 8016952:	ec51 0b10 	vmov	r0, r1, d0
 8016956:	f7ea f841 	bl	80009dc <__aeabi_dcmpeq>
 801695a:	b920      	cbnz	r0, 8016966 <pow+0x222>
 801695c:	4b2e      	ldr	r3, [pc, #184]	; (8016a18 <pow+0x2d4>)
 801695e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016962:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016966:	f998 3000 	ldrsb.w	r3, [r8]
 801696a:	2b02      	cmp	r3, #2
 801696c:	d142      	bne.n	80169f4 <pow+0x2b0>
 801696e:	f7ff feab 	bl	80166c8 <__errno>
 8016972:	2322      	movs	r3, #34	; 0x22
 8016974:	e78d      	b.n	8016892 <pow+0x14e>
 8016976:	4b29      	ldr	r3, [pc, #164]	; (8016a1c <pow+0x2d8>)
 8016978:	2200      	movs	r2, #0
 801697a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801697e:	4630      	mov	r0, r6
 8016980:	4652      	mov	r2, sl
 8016982:	465b      	mov	r3, fp
 8016984:	4639      	mov	r1, r7
 8016986:	f7ea f833 	bl	80009f0 <__aeabi_dcmplt>
 801698a:	2800      	cmp	r0, #0
 801698c:	d0eb      	beq.n	8016966 <pow+0x222>
 801698e:	ec45 4b10 	vmov	d0, r4, r5
 8016992:	f000 fe75 	bl	8017680 <rint>
 8016996:	4622      	mov	r2, r4
 8016998:	462b      	mov	r3, r5
 801699a:	ec51 0b10 	vmov	r0, r1, d0
 801699e:	f7ea f81d 	bl	80009dc <__aeabi_dcmpeq>
 80169a2:	2800      	cmp	r0, #0
 80169a4:	d1df      	bne.n	8016966 <pow+0x222>
 80169a6:	2200      	movs	r2, #0
 80169a8:	4b18      	ldr	r3, [pc, #96]	; (8016a0c <pow+0x2c8>)
 80169aa:	e7da      	b.n	8016962 <pow+0x21e>
 80169ac:	2200      	movs	r2, #0
 80169ae:	2300      	movs	r3, #0
 80169b0:	ec51 0b18 	vmov	r0, r1, d8
 80169b4:	f7ea f812 	bl	80009dc <__aeabi_dcmpeq>
 80169b8:	2800      	cmp	r0, #0
 80169ba:	f43f af3a 	beq.w	8016832 <pow+0xee>
 80169be:	ec47 6b10 	vmov	d0, r6, r7
 80169c2:	f000 fe4b 	bl	801765c <finite>
 80169c6:	2800      	cmp	r0, #0
 80169c8:	f43f af33 	beq.w	8016832 <pow+0xee>
 80169cc:	ec45 4b10 	vmov	d0, r4, r5
 80169d0:	f000 fe44 	bl	801765c <finite>
 80169d4:	2800      	cmp	r0, #0
 80169d6:	f43f af2c 	beq.w	8016832 <pow+0xee>
 80169da:	2304      	movs	r3, #4
 80169dc:	9302      	str	r3, [sp, #8]
 80169de:	4b09      	ldr	r3, [pc, #36]	; (8016a04 <pow+0x2c0>)
 80169e0:	9303      	str	r3, [sp, #12]
 80169e2:	2300      	movs	r3, #0
 80169e4:	930a      	str	r3, [sp, #40]	; 0x28
 80169e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80169ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80169ee:	ed8d 9b08 	vstr	d9, [sp, #32]
 80169f2:	e7b8      	b.n	8016966 <pow+0x222>
 80169f4:	a802      	add	r0, sp, #8
 80169f6:	f000 fe39 	bl	801766c <matherr>
 80169fa:	2800      	cmp	r0, #0
 80169fc:	f47f af11 	bne.w	8016822 <pow+0xde>
 8016a00:	e7b5      	b.n	801696e <pow+0x22a>
 8016a02:	bf00      	nop
 8016a04:	08018a10 	.word	0x08018a10
 8016a08:	3ff00000 	.word	0x3ff00000
 8016a0c:	fff00000 	.word	0xfff00000
 8016a10:	3fe00000 	.word	0x3fe00000
 8016a14:	47efffff 	.word	0x47efffff
 8016a18:	c7efffff 	.word	0xc7efffff
 8016a1c:	7ff00000 	.word	0x7ff00000
 8016a20:	20000134 	.word	0x20000134

08016a24 <sqrtf>:
 8016a24:	b510      	push	{r4, lr}
 8016a26:	ed2d 8b02 	vpush	{d8}
 8016a2a:	b08a      	sub	sp, #40	; 0x28
 8016a2c:	eeb0 8a40 	vmov.f32	s16, s0
 8016a30:	f000 fe08 	bl	8017644 <__ieee754_sqrtf>
 8016a34:	4b21      	ldr	r3, [pc, #132]	; (8016abc <sqrtf+0x98>)
 8016a36:	f993 4000 	ldrsb.w	r4, [r3]
 8016a3a:	1c63      	adds	r3, r4, #1
 8016a3c:	d02c      	beq.n	8016a98 <sqrtf+0x74>
 8016a3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8016a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a46:	d627      	bvs.n	8016a98 <sqrtf+0x74>
 8016a48:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a50:	d522      	bpl.n	8016a98 <sqrtf+0x74>
 8016a52:	2301      	movs	r3, #1
 8016a54:	9300      	str	r3, [sp, #0]
 8016a56:	4b1a      	ldr	r3, [pc, #104]	; (8016ac0 <sqrtf+0x9c>)
 8016a58:	9301      	str	r3, [sp, #4]
 8016a5a:	ee18 0a10 	vmov	r0, s16
 8016a5e:	2300      	movs	r3, #0
 8016a60:	9308      	str	r3, [sp, #32]
 8016a62:	f7e9 fcfb 	bl	800045c <__aeabi_f2d>
 8016a66:	2200      	movs	r2, #0
 8016a68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a70:	2300      	movs	r3, #0
 8016a72:	b9ac      	cbnz	r4, 8016aa0 <sqrtf+0x7c>
 8016a74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016a78:	4668      	mov	r0, sp
 8016a7a:	f000 fdf7 	bl	801766c <matherr>
 8016a7e:	b1b8      	cbz	r0, 8016ab0 <sqrtf+0x8c>
 8016a80:	9b08      	ldr	r3, [sp, #32]
 8016a82:	b11b      	cbz	r3, 8016a8c <sqrtf+0x68>
 8016a84:	f7ff fe20 	bl	80166c8 <__errno>
 8016a88:	9b08      	ldr	r3, [sp, #32]
 8016a8a:	6003      	str	r3, [r0, #0]
 8016a8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016a90:	f7e9 ffec 	bl	8000a6c <__aeabi_d2f>
 8016a94:	ee00 0a10 	vmov	s0, r0
 8016a98:	b00a      	add	sp, #40	; 0x28
 8016a9a:	ecbd 8b02 	vpop	{d8}
 8016a9e:	bd10      	pop	{r4, pc}
 8016aa0:	4610      	mov	r0, r2
 8016aa2:	4619      	mov	r1, r3
 8016aa4:	f7e9 fe5c 	bl	8000760 <__aeabi_ddiv>
 8016aa8:	2c02      	cmp	r4, #2
 8016aaa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016aae:	d1e3      	bne.n	8016a78 <sqrtf+0x54>
 8016ab0:	f7ff fe0a 	bl	80166c8 <__errno>
 8016ab4:	2321      	movs	r3, #33	; 0x21
 8016ab6:	6003      	str	r3, [r0, #0]
 8016ab8:	e7e2      	b.n	8016a80 <sqrtf+0x5c>
 8016aba:	bf00      	nop
 8016abc:	20000134 	.word	0x20000134
 8016ac0:	08018a14 	.word	0x08018a14
 8016ac4:	00000000 	.word	0x00000000

08016ac8 <__ieee754_pow>:
 8016ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016acc:	b091      	sub	sp, #68	; 0x44
 8016ace:	ed8d 1b00 	vstr	d1, [sp]
 8016ad2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016ad6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016ada:	ea58 0302 	orrs.w	r3, r8, r2
 8016ade:	ec57 6b10 	vmov	r6, r7, d0
 8016ae2:	f000 84be 	beq.w	8017462 <__ieee754_pow+0x99a>
 8016ae6:	4b7a      	ldr	r3, [pc, #488]	; (8016cd0 <__ieee754_pow+0x208>)
 8016ae8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016aec:	429c      	cmp	r4, r3
 8016aee:	463d      	mov	r5, r7
 8016af0:	ee10 aa10 	vmov	sl, s0
 8016af4:	dc09      	bgt.n	8016b0a <__ieee754_pow+0x42>
 8016af6:	d103      	bne.n	8016b00 <__ieee754_pow+0x38>
 8016af8:	b93e      	cbnz	r6, 8016b0a <__ieee754_pow+0x42>
 8016afa:	45a0      	cmp	r8, r4
 8016afc:	dc0d      	bgt.n	8016b1a <__ieee754_pow+0x52>
 8016afe:	e001      	b.n	8016b04 <__ieee754_pow+0x3c>
 8016b00:	4598      	cmp	r8, r3
 8016b02:	dc02      	bgt.n	8016b0a <__ieee754_pow+0x42>
 8016b04:	4598      	cmp	r8, r3
 8016b06:	d10e      	bne.n	8016b26 <__ieee754_pow+0x5e>
 8016b08:	b16a      	cbz	r2, 8016b26 <__ieee754_pow+0x5e>
 8016b0a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016b0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016b12:	ea54 030a 	orrs.w	r3, r4, sl
 8016b16:	f000 84a4 	beq.w	8017462 <__ieee754_pow+0x99a>
 8016b1a:	486e      	ldr	r0, [pc, #440]	; (8016cd4 <__ieee754_pow+0x20c>)
 8016b1c:	b011      	add	sp, #68	; 0x44
 8016b1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b22:	f000 bda5 	b.w	8017670 <nan>
 8016b26:	2d00      	cmp	r5, #0
 8016b28:	da53      	bge.n	8016bd2 <__ieee754_pow+0x10a>
 8016b2a:	4b6b      	ldr	r3, [pc, #428]	; (8016cd8 <__ieee754_pow+0x210>)
 8016b2c:	4598      	cmp	r8, r3
 8016b2e:	dc4d      	bgt.n	8016bcc <__ieee754_pow+0x104>
 8016b30:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016b34:	4598      	cmp	r8, r3
 8016b36:	dd4c      	ble.n	8016bd2 <__ieee754_pow+0x10a>
 8016b38:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016b3c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016b40:	2b14      	cmp	r3, #20
 8016b42:	dd26      	ble.n	8016b92 <__ieee754_pow+0xca>
 8016b44:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016b48:	fa22 f103 	lsr.w	r1, r2, r3
 8016b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8016b50:	4293      	cmp	r3, r2
 8016b52:	d13e      	bne.n	8016bd2 <__ieee754_pow+0x10a>
 8016b54:	f001 0101 	and.w	r1, r1, #1
 8016b58:	f1c1 0b02 	rsb	fp, r1, #2
 8016b5c:	2a00      	cmp	r2, #0
 8016b5e:	d15b      	bne.n	8016c18 <__ieee754_pow+0x150>
 8016b60:	4b5b      	ldr	r3, [pc, #364]	; (8016cd0 <__ieee754_pow+0x208>)
 8016b62:	4598      	cmp	r8, r3
 8016b64:	d124      	bne.n	8016bb0 <__ieee754_pow+0xe8>
 8016b66:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016b6a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016b6e:	ea53 030a 	orrs.w	r3, r3, sl
 8016b72:	f000 8476 	beq.w	8017462 <__ieee754_pow+0x99a>
 8016b76:	4b59      	ldr	r3, [pc, #356]	; (8016cdc <__ieee754_pow+0x214>)
 8016b78:	429c      	cmp	r4, r3
 8016b7a:	dd2d      	ble.n	8016bd8 <__ieee754_pow+0x110>
 8016b7c:	f1b9 0f00 	cmp.w	r9, #0
 8016b80:	f280 8473 	bge.w	801746a <__ieee754_pow+0x9a2>
 8016b84:	2000      	movs	r0, #0
 8016b86:	2100      	movs	r1, #0
 8016b88:	ec41 0b10 	vmov	d0, r0, r1
 8016b8c:	b011      	add	sp, #68	; 0x44
 8016b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b92:	2a00      	cmp	r2, #0
 8016b94:	d13e      	bne.n	8016c14 <__ieee754_pow+0x14c>
 8016b96:	f1c3 0314 	rsb	r3, r3, #20
 8016b9a:	fa48 f103 	asr.w	r1, r8, r3
 8016b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8016ba2:	4543      	cmp	r3, r8
 8016ba4:	f040 8469 	bne.w	801747a <__ieee754_pow+0x9b2>
 8016ba8:	f001 0101 	and.w	r1, r1, #1
 8016bac:	f1c1 0b02 	rsb	fp, r1, #2
 8016bb0:	4b4b      	ldr	r3, [pc, #300]	; (8016ce0 <__ieee754_pow+0x218>)
 8016bb2:	4598      	cmp	r8, r3
 8016bb4:	d118      	bne.n	8016be8 <__ieee754_pow+0x120>
 8016bb6:	f1b9 0f00 	cmp.w	r9, #0
 8016bba:	f280 845a 	bge.w	8017472 <__ieee754_pow+0x9aa>
 8016bbe:	4948      	ldr	r1, [pc, #288]	; (8016ce0 <__ieee754_pow+0x218>)
 8016bc0:	4632      	mov	r2, r6
 8016bc2:	463b      	mov	r3, r7
 8016bc4:	2000      	movs	r0, #0
 8016bc6:	f7e9 fdcb 	bl	8000760 <__aeabi_ddiv>
 8016bca:	e7dd      	b.n	8016b88 <__ieee754_pow+0xc0>
 8016bcc:	f04f 0b02 	mov.w	fp, #2
 8016bd0:	e7c4      	b.n	8016b5c <__ieee754_pow+0x94>
 8016bd2:	f04f 0b00 	mov.w	fp, #0
 8016bd6:	e7c1      	b.n	8016b5c <__ieee754_pow+0x94>
 8016bd8:	f1b9 0f00 	cmp.w	r9, #0
 8016bdc:	dad2      	bge.n	8016b84 <__ieee754_pow+0xbc>
 8016bde:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016be2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016be6:	e7cf      	b.n	8016b88 <__ieee754_pow+0xc0>
 8016be8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016bec:	d106      	bne.n	8016bfc <__ieee754_pow+0x134>
 8016bee:	4632      	mov	r2, r6
 8016bf0:	463b      	mov	r3, r7
 8016bf2:	4610      	mov	r0, r2
 8016bf4:	4619      	mov	r1, r3
 8016bf6:	f7e9 fc89 	bl	800050c <__aeabi_dmul>
 8016bfa:	e7c5      	b.n	8016b88 <__ieee754_pow+0xc0>
 8016bfc:	4b39      	ldr	r3, [pc, #228]	; (8016ce4 <__ieee754_pow+0x21c>)
 8016bfe:	4599      	cmp	r9, r3
 8016c00:	d10a      	bne.n	8016c18 <__ieee754_pow+0x150>
 8016c02:	2d00      	cmp	r5, #0
 8016c04:	db08      	blt.n	8016c18 <__ieee754_pow+0x150>
 8016c06:	ec47 6b10 	vmov	d0, r6, r7
 8016c0a:	b011      	add	sp, #68	; 0x44
 8016c0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c10:	f000 bc68 	b.w	80174e4 <__ieee754_sqrt>
 8016c14:	f04f 0b00 	mov.w	fp, #0
 8016c18:	ec47 6b10 	vmov	d0, r6, r7
 8016c1c:	f000 fd15 	bl	801764a <fabs>
 8016c20:	ec51 0b10 	vmov	r0, r1, d0
 8016c24:	f1ba 0f00 	cmp.w	sl, #0
 8016c28:	d127      	bne.n	8016c7a <__ieee754_pow+0x1b2>
 8016c2a:	b124      	cbz	r4, 8016c36 <__ieee754_pow+0x16e>
 8016c2c:	4b2c      	ldr	r3, [pc, #176]	; (8016ce0 <__ieee754_pow+0x218>)
 8016c2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d121      	bne.n	8016c7a <__ieee754_pow+0x1b2>
 8016c36:	f1b9 0f00 	cmp.w	r9, #0
 8016c3a:	da05      	bge.n	8016c48 <__ieee754_pow+0x180>
 8016c3c:	4602      	mov	r2, r0
 8016c3e:	460b      	mov	r3, r1
 8016c40:	2000      	movs	r0, #0
 8016c42:	4927      	ldr	r1, [pc, #156]	; (8016ce0 <__ieee754_pow+0x218>)
 8016c44:	f7e9 fd8c 	bl	8000760 <__aeabi_ddiv>
 8016c48:	2d00      	cmp	r5, #0
 8016c4a:	da9d      	bge.n	8016b88 <__ieee754_pow+0xc0>
 8016c4c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016c50:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016c54:	ea54 030b 	orrs.w	r3, r4, fp
 8016c58:	d108      	bne.n	8016c6c <__ieee754_pow+0x1a4>
 8016c5a:	4602      	mov	r2, r0
 8016c5c:	460b      	mov	r3, r1
 8016c5e:	4610      	mov	r0, r2
 8016c60:	4619      	mov	r1, r3
 8016c62:	f7e9 fa9b 	bl	800019c <__aeabi_dsub>
 8016c66:	4602      	mov	r2, r0
 8016c68:	460b      	mov	r3, r1
 8016c6a:	e7ac      	b.n	8016bc6 <__ieee754_pow+0xfe>
 8016c6c:	f1bb 0f01 	cmp.w	fp, #1
 8016c70:	d18a      	bne.n	8016b88 <__ieee754_pow+0xc0>
 8016c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016c76:	4619      	mov	r1, r3
 8016c78:	e786      	b.n	8016b88 <__ieee754_pow+0xc0>
 8016c7a:	0fed      	lsrs	r5, r5, #31
 8016c7c:	1e6b      	subs	r3, r5, #1
 8016c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8016c80:	ea5b 0303 	orrs.w	r3, fp, r3
 8016c84:	d102      	bne.n	8016c8c <__ieee754_pow+0x1c4>
 8016c86:	4632      	mov	r2, r6
 8016c88:	463b      	mov	r3, r7
 8016c8a:	e7e8      	b.n	8016c5e <__ieee754_pow+0x196>
 8016c8c:	4b16      	ldr	r3, [pc, #88]	; (8016ce8 <__ieee754_pow+0x220>)
 8016c8e:	4598      	cmp	r8, r3
 8016c90:	f340 80fe 	ble.w	8016e90 <__ieee754_pow+0x3c8>
 8016c94:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016c98:	4598      	cmp	r8, r3
 8016c9a:	dd0a      	ble.n	8016cb2 <__ieee754_pow+0x1ea>
 8016c9c:	4b0f      	ldr	r3, [pc, #60]	; (8016cdc <__ieee754_pow+0x214>)
 8016c9e:	429c      	cmp	r4, r3
 8016ca0:	dc0d      	bgt.n	8016cbe <__ieee754_pow+0x1f6>
 8016ca2:	f1b9 0f00 	cmp.w	r9, #0
 8016ca6:	f6bf af6d 	bge.w	8016b84 <__ieee754_pow+0xbc>
 8016caa:	a307      	add	r3, pc, #28	; (adr r3, 8016cc8 <__ieee754_pow+0x200>)
 8016cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cb0:	e79f      	b.n	8016bf2 <__ieee754_pow+0x12a>
 8016cb2:	4b0e      	ldr	r3, [pc, #56]	; (8016cec <__ieee754_pow+0x224>)
 8016cb4:	429c      	cmp	r4, r3
 8016cb6:	ddf4      	ble.n	8016ca2 <__ieee754_pow+0x1da>
 8016cb8:	4b09      	ldr	r3, [pc, #36]	; (8016ce0 <__ieee754_pow+0x218>)
 8016cba:	429c      	cmp	r4, r3
 8016cbc:	dd18      	ble.n	8016cf0 <__ieee754_pow+0x228>
 8016cbe:	f1b9 0f00 	cmp.w	r9, #0
 8016cc2:	dcf2      	bgt.n	8016caa <__ieee754_pow+0x1e2>
 8016cc4:	e75e      	b.n	8016b84 <__ieee754_pow+0xbc>
 8016cc6:	bf00      	nop
 8016cc8:	8800759c 	.word	0x8800759c
 8016ccc:	7e37e43c 	.word	0x7e37e43c
 8016cd0:	7ff00000 	.word	0x7ff00000
 8016cd4:	08018a19 	.word	0x08018a19
 8016cd8:	433fffff 	.word	0x433fffff
 8016cdc:	3fefffff 	.word	0x3fefffff
 8016ce0:	3ff00000 	.word	0x3ff00000
 8016ce4:	3fe00000 	.word	0x3fe00000
 8016ce8:	41e00000 	.word	0x41e00000
 8016cec:	3feffffe 	.word	0x3feffffe
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	4b63      	ldr	r3, [pc, #396]	; (8016e80 <__ieee754_pow+0x3b8>)
 8016cf4:	f7e9 fa52 	bl	800019c <__aeabi_dsub>
 8016cf8:	a355      	add	r3, pc, #340	; (adr r3, 8016e50 <__ieee754_pow+0x388>)
 8016cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cfe:	4604      	mov	r4, r0
 8016d00:	460d      	mov	r5, r1
 8016d02:	f7e9 fc03 	bl	800050c <__aeabi_dmul>
 8016d06:	a354      	add	r3, pc, #336	; (adr r3, 8016e58 <__ieee754_pow+0x390>)
 8016d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d0c:	4606      	mov	r6, r0
 8016d0e:	460f      	mov	r7, r1
 8016d10:	4620      	mov	r0, r4
 8016d12:	4629      	mov	r1, r5
 8016d14:	f7e9 fbfa 	bl	800050c <__aeabi_dmul>
 8016d18:	2200      	movs	r2, #0
 8016d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d1e:	4b59      	ldr	r3, [pc, #356]	; (8016e84 <__ieee754_pow+0x3bc>)
 8016d20:	4620      	mov	r0, r4
 8016d22:	4629      	mov	r1, r5
 8016d24:	f7e9 fbf2 	bl	800050c <__aeabi_dmul>
 8016d28:	4602      	mov	r2, r0
 8016d2a:	460b      	mov	r3, r1
 8016d2c:	a14c      	add	r1, pc, #304	; (adr r1, 8016e60 <__ieee754_pow+0x398>)
 8016d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d32:	f7e9 fa33 	bl	800019c <__aeabi_dsub>
 8016d36:	4622      	mov	r2, r4
 8016d38:	462b      	mov	r3, r5
 8016d3a:	f7e9 fbe7 	bl	800050c <__aeabi_dmul>
 8016d3e:	4602      	mov	r2, r0
 8016d40:	460b      	mov	r3, r1
 8016d42:	2000      	movs	r0, #0
 8016d44:	4950      	ldr	r1, [pc, #320]	; (8016e88 <__ieee754_pow+0x3c0>)
 8016d46:	f7e9 fa29 	bl	800019c <__aeabi_dsub>
 8016d4a:	4622      	mov	r2, r4
 8016d4c:	462b      	mov	r3, r5
 8016d4e:	4680      	mov	r8, r0
 8016d50:	4689      	mov	r9, r1
 8016d52:	4620      	mov	r0, r4
 8016d54:	4629      	mov	r1, r5
 8016d56:	f7e9 fbd9 	bl	800050c <__aeabi_dmul>
 8016d5a:	4602      	mov	r2, r0
 8016d5c:	460b      	mov	r3, r1
 8016d5e:	4640      	mov	r0, r8
 8016d60:	4649      	mov	r1, r9
 8016d62:	f7e9 fbd3 	bl	800050c <__aeabi_dmul>
 8016d66:	a340      	add	r3, pc, #256	; (adr r3, 8016e68 <__ieee754_pow+0x3a0>)
 8016d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d6c:	f7e9 fbce 	bl	800050c <__aeabi_dmul>
 8016d70:	4602      	mov	r2, r0
 8016d72:	460b      	mov	r3, r1
 8016d74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016d78:	f7e9 fa10 	bl	800019c <__aeabi_dsub>
 8016d7c:	4602      	mov	r2, r0
 8016d7e:	460b      	mov	r3, r1
 8016d80:	4604      	mov	r4, r0
 8016d82:	460d      	mov	r5, r1
 8016d84:	4630      	mov	r0, r6
 8016d86:	4639      	mov	r1, r7
 8016d88:	f7e9 fa0a 	bl	80001a0 <__adddf3>
 8016d8c:	2000      	movs	r0, #0
 8016d8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016d92:	4632      	mov	r2, r6
 8016d94:	463b      	mov	r3, r7
 8016d96:	f7e9 fa01 	bl	800019c <__aeabi_dsub>
 8016d9a:	4602      	mov	r2, r0
 8016d9c:	460b      	mov	r3, r1
 8016d9e:	4620      	mov	r0, r4
 8016da0:	4629      	mov	r1, r5
 8016da2:	f7e9 f9fb 	bl	800019c <__aeabi_dsub>
 8016da6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016da8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016dac:	4313      	orrs	r3, r2
 8016dae:	4606      	mov	r6, r0
 8016db0:	460f      	mov	r7, r1
 8016db2:	f040 81eb 	bne.w	801718c <__ieee754_pow+0x6c4>
 8016db6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016e70 <__ieee754_pow+0x3a8>
 8016dba:	e9dd 4500 	ldrd	r4, r5, [sp]
 8016dbe:	2400      	movs	r4, #0
 8016dc0:	4622      	mov	r2, r4
 8016dc2:	462b      	mov	r3, r5
 8016dc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016dc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016dcc:	f7e9 f9e6 	bl	800019c <__aeabi_dsub>
 8016dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016dd4:	f7e9 fb9a 	bl	800050c <__aeabi_dmul>
 8016dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ddc:	4680      	mov	r8, r0
 8016dde:	4689      	mov	r9, r1
 8016de0:	4630      	mov	r0, r6
 8016de2:	4639      	mov	r1, r7
 8016de4:	f7e9 fb92 	bl	800050c <__aeabi_dmul>
 8016de8:	4602      	mov	r2, r0
 8016dea:	460b      	mov	r3, r1
 8016dec:	4640      	mov	r0, r8
 8016dee:	4649      	mov	r1, r9
 8016df0:	f7e9 f9d6 	bl	80001a0 <__adddf3>
 8016df4:	4622      	mov	r2, r4
 8016df6:	462b      	mov	r3, r5
 8016df8:	4680      	mov	r8, r0
 8016dfa:	4689      	mov	r9, r1
 8016dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016e00:	f7e9 fb84 	bl	800050c <__aeabi_dmul>
 8016e04:	460b      	mov	r3, r1
 8016e06:	4604      	mov	r4, r0
 8016e08:	460d      	mov	r5, r1
 8016e0a:	4602      	mov	r2, r0
 8016e0c:	4649      	mov	r1, r9
 8016e0e:	4640      	mov	r0, r8
 8016e10:	e9cd 4500 	strd	r4, r5, [sp]
 8016e14:	f7e9 f9c4 	bl	80001a0 <__adddf3>
 8016e18:	4b1c      	ldr	r3, [pc, #112]	; (8016e8c <__ieee754_pow+0x3c4>)
 8016e1a:	4299      	cmp	r1, r3
 8016e1c:	4606      	mov	r6, r0
 8016e1e:	460f      	mov	r7, r1
 8016e20:	468b      	mov	fp, r1
 8016e22:	f340 82f7 	ble.w	8017414 <__ieee754_pow+0x94c>
 8016e26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016e2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016e2e:	4303      	orrs	r3, r0
 8016e30:	f000 81ea 	beq.w	8017208 <__ieee754_pow+0x740>
 8016e34:	a310      	add	r3, pc, #64	; (adr r3, 8016e78 <__ieee754_pow+0x3b0>)
 8016e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016e3e:	f7e9 fb65 	bl	800050c <__aeabi_dmul>
 8016e42:	a30d      	add	r3, pc, #52	; (adr r3, 8016e78 <__ieee754_pow+0x3b0>)
 8016e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e48:	e6d5      	b.n	8016bf6 <__ieee754_pow+0x12e>
 8016e4a:	bf00      	nop
 8016e4c:	f3af 8000 	nop.w
 8016e50:	60000000 	.word	0x60000000
 8016e54:	3ff71547 	.word	0x3ff71547
 8016e58:	f85ddf44 	.word	0xf85ddf44
 8016e5c:	3e54ae0b 	.word	0x3e54ae0b
 8016e60:	55555555 	.word	0x55555555
 8016e64:	3fd55555 	.word	0x3fd55555
 8016e68:	652b82fe 	.word	0x652b82fe
 8016e6c:	3ff71547 	.word	0x3ff71547
 8016e70:	00000000 	.word	0x00000000
 8016e74:	bff00000 	.word	0xbff00000
 8016e78:	8800759c 	.word	0x8800759c
 8016e7c:	7e37e43c 	.word	0x7e37e43c
 8016e80:	3ff00000 	.word	0x3ff00000
 8016e84:	3fd00000 	.word	0x3fd00000
 8016e88:	3fe00000 	.word	0x3fe00000
 8016e8c:	408fffff 	.word	0x408fffff
 8016e90:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016e94:	f04f 0200 	mov.w	r2, #0
 8016e98:	da05      	bge.n	8016ea6 <__ieee754_pow+0x3de>
 8016e9a:	4bd3      	ldr	r3, [pc, #844]	; (80171e8 <__ieee754_pow+0x720>)
 8016e9c:	f7e9 fb36 	bl	800050c <__aeabi_dmul>
 8016ea0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016ea4:	460c      	mov	r4, r1
 8016ea6:	1523      	asrs	r3, r4, #20
 8016ea8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016eac:	4413      	add	r3, r2
 8016eae:	9309      	str	r3, [sp, #36]	; 0x24
 8016eb0:	4bce      	ldr	r3, [pc, #824]	; (80171ec <__ieee754_pow+0x724>)
 8016eb2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016eb6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016eba:	429c      	cmp	r4, r3
 8016ebc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016ec0:	dd08      	ble.n	8016ed4 <__ieee754_pow+0x40c>
 8016ec2:	4bcb      	ldr	r3, [pc, #812]	; (80171f0 <__ieee754_pow+0x728>)
 8016ec4:	429c      	cmp	r4, r3
 8016ec6:	f340 815e 	ble.w	8017186 <__ieee754_pow+0x6be>
 8016eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ecc:	3301      	adds	r3, #1
 8016ece:	9309      	str	r3, [sp, #36]	; 0x24
 8016ed0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016ed4:	f04f 0a00 	mov.w	sl, #0
 8016ed8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016edc:	930c      	str	r3, [sp, #48]	; 0x30
 8016ede:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016ee0:	4bc4      	ldr	r3, [pc, #784]	; (80171f4 <__ieee754_pow+0x72c>)
 8016ee2:	4413      	add	r3, r2
 8016ee4:	ed93 7b00 	vldr	d7, [r3]
 8016ee8:	4629      	mov	r1, r5
 8016eea:	ec53 2b17 	vmov	r2, r3, d7
 8016eee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016ef2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016ef6:	f7e9 f951 	bl	800019c <__aeabi_dsub>
 8016efa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016efe:	4606      	mov	r6, r0
 8016f00:	460f      	mov	r7, r1
 8016f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016f06:	f7e9 f94b 	bl	80001a0 <__adddf3>
 8016f0a:	4602      	mov	r2, r0
 8016f0c:	460b      	mov	r3, r1
 8016f0e:	2000      	movs	r0, #0
 8016f10:	49b9      	ldr	r1, [pc, #740]	; (80171f8 <__ieee754_pow+0x730>)
 8016f12:	f7e9 fc25 	bl	8000760 <__aeabi_ddiv>
 8016f16:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016f1a:	4602      	mov	r2, r0
 8016f1c:	460b      	mov	r3, r1
 8016f1e:	4630      	mov	r0, r6
 8016f20:	4639      	mov	r1, r7
 8016f22:	f7e9 faf3 	bl	800050c <__aeabi_dmul>
 8016f26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016f2a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016f2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8016f32:	2300      	movs	r3, #0
 8016f34:	9302      	str	r3, [sp, #8]
 8016f36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016f3a:	106d      	asrs	r5, r5, #1
 8016f3c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016f40:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016f44:	2200      	movs	r2, #0
 8016f46:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016f4a:	4640      	mov	r0, r8
 8016f4c:	4649      	mov	r1, r9
 8016f4e:	4614      	mov	r4, r2
 8016f50:	461d      	mov	r5, r3
 8016f52:	f7e9 fadb 	bl	800050c <__aeabi_dmul>
 8016f56:	4602      	mov	r2, r0
 8016f58:	460b      	mov	r3, r1
 8016f5a:	4630      	mov	r0, r6
 8016f5c:	4639      	mov	r1, r7
 8016f5e:	f7e9 f91d 	bl	800019c <__aeabi_dsub>
 8016f62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016f66:	4606      	mov	r6, r0
 8016f68:	460f      	mov	r7, r1
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	4629      	mov	r1, r5
 8016f6e:	f7e9 f915 	bl	800019c <__aeabi_dsub>
 8016f72:	4602      	mov	r2, r0
 8016f74:	460b      	mov	r3, r1
 8016f76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016f7a:	f7e9 f90f 	bl	800019c <__aeabi_dsub>
 8016f7e:	4642      	mov	r2, r8
 8016f80:	464b      	mov	r3, r9
 8016f82:	f7e9 fac3 	bl	800050c <__aeabi_dmul>
 8016f86:	4602      	mov	r2, r0
 8016f88:	460b      	mov	r3, r1
 8016f8a:	4630      	mov	r0, r6
 8016f8c:	4639      	mov	r1, r7
 8016f8e:	f7e9 f905 	bl	800019c <__aeabi_dsub>
 8016f92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016f96:	f7e9 fab9 	bl	800050c <__aeabi_dmul>
 8016f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016f9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016fa2:	4610      	mov	r0, r2
 8016fa4:	4619      	mov	r1, r3
 8016fa6:	f7e9 fab1 	bl	800050c <__aeabi_dmul>
 8016faa:	a37b      	add	r3, pc, #492	; (adr r3, 8017198 <__ieee754_pow+0x6d0>)
 8016fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fb0:	4604      	mov	r4, r0
 8016fb2:	460d      	mov	r5, r1
 8016fb4:	f7e9 faaa 	bl	800050c <__aeabi_dmul>
 8016fb8:	a379      	add	r3, pc, #484	; (adr r3, 80171a0 <__ieee754_pow+0x6d8>)
 8016fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fbe:	f7e9 f8ef 	bl	80001a0 <__adddf3>
 8016fc2:	4622      	mov	r2, r4
 8016fc4:	462b      	mov	r3, r5
 8016fc6:	f7e9 faa1 	bl	800050c <__aeabi_dmul>
 8016fca:	a377      	add	r3, pc, #476	; (adr r3, 80171a8 <__ieee754_pow+0x6e0>)
 8016fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fd0:	f7e9 f8e6 	bl	80001a0 <__adddf3>
 8016fd4:	4622      	mov	r2, r4
 8016fd6:	462b      	mov	r3, r5
 8016fd8:	f7e9 fa98 	bl	800050c <__aeabi_dmul>
 8016fdc:	a374      	add	r3, pc, #464	; (adr r3, 80171b0 <__ieee754_pow+0x6e8>)
 8016fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe2:	f7e9 f8dd 	bl	80001a0 <__adddf3>
 8016fe6:	4622      	mov	r2, r4
 8016fe8:	462b      	mov	r3, r5
 8016fea:	f7e9 fa8f 	bl	800050c <__aeabi_dmul>
 8016fee:	a372      	add	r3, pc, #456	; (adr r3, 80171b8 <__ieee754_pow+0x6f0>)
 8016ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ff4:	f7e9 f8d4 	bl	80001a0 <__adddf3>
 8016ff8:	4622      	mov	r2, r4
 8016ffa:	462b      	mov	r3, r5
 8016ffc:	f7e9 fa86 	bl	800050c <__aeabi_dmul>
 8017000:	a36f      	add	r3, pc, #444	; (adr r3, 80171c0 <__ieee754_pow+0x6f8>)
 8017002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017006:	f7e9 f8cb 	bl	80001a0 <__adddf3>
 801700a:	4622      	mov	r2, r4
 801700c:	4606      	mov	r6, r0
 801700e:	460f      	mov	r7, r1
 8017010:	462b      	mov	r3, r5
 8017012:	4620      	mov	r0, r4
 8017014:	4629      	mov	r1, r5
 8017016:	f7e9 fa79 	bl	800050c <__aeabi_dmul>
 801701a:	4602      	mov	r2, r0
 801701c:	460b      	mov	r3, r1
 801701e:	4630      	mov	r0, r6
 8017020:	4639      	mov	r1, r7
 8017022:	f7e9 fa73 	bl	800050c <__aeabi_dmul>
 8017026:	4642      	mov	r2, r8
 8017028:	4604      	mov	r4, r0
 801702a:	460d      	mov	r5, r1
 801702c:	464b      	mov	r3, r9
 801702e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017032:	f7e9 f8b5 	bl	80001a0 <__adddf3>
 8017036:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801703a:	f7e9 fa67 	bl	800050c <__aeabi_dmul>
 801703e:	4622      	mov	r2, r4
 8017040:	462b      	mov	r3, r5
 8017042:	f7e9 f8ad 	bl	80001a0 <__adddf3>
 8017046:	4642      	mov	r2, r8
 8017048:	4606      	mov	r6, r0
 801704a:	460f      	mov	r7, r1
 801704c:	464b      	mov	r3, r9
 801704e:	4640      	mov	r0, r8
 8017050:	4649      	mov	r1, r9
 8017052:	f7e9 fa5b 	bl	800050c <__aeabi_dmul>
 8017056:	2200      	movs	r2, #0
 8017058:	4b68      	ldr	r3, [pc, #416]	; (80171fc <__ieee754_pow+0x734>)
 801705a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801705e:	f7e9 f89f 	bl	80001a0 <__adddf3>
 8017062:	4632      	mov	r2, r6
 8017064:	463b      	mov	r3, r7
 8017066:	f7e9 f89b 	bl	80001a0 <__adddf3>
 801706a:	9802      	ldr	r0, [sp, #8]
 801706c:	460d      	mov	r5, r1
 801706e:	4604      	mov	r4, r0
 8017070:	4602      	mov	r2, r0
 8017072:	460b      	mov	r3, r1
 8017074:	4640      	mov	r0, r8
 8017076:	4649      	mov	r1, r9
 8017078:	f7e9 fa48 	bl	800050c <__aeabi_dmul>
 801707c:	2200      	movs	r2, #0
 801707e:	4680      	mov	r8, r0
 8017080:	4689      	mov	r9, r1
 8017082:	4b5e      	ldr	r3, [pc, #376]	; (80171fc <__ieee754_pow+0x734>)
 8017084:	4620      	mov	r0, r4
 8017086:	4629      	mov	r1, r5
 8017088:	f7e9 f888 	bl	800019c <__aeabi_dsub>
 801708c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017090:	f7e9 f884 	bl	800019c <__aeabi_dsub>
 8017094:	4602      	mov	r2, r0
 8017096:	460b      	mov	r3, r1
 8017098:	4630      	mov	r0, r6
 801709a:	4639      	mov	r1, r7
 801709c:	f7e9 f87e 	bl	800019c <__aeabi_dsub>
 80170a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80170a4:	f7e9 fa32 	bl	800050c <__aeabi_dmul>
 80170a8:	4622      	mov	r2, r4
 80170aa:	4606      	mov	r6, r0
 80170ac:	460f      	mov	r7, r1
 80170ae:	462b      	mov	r3, r5
 80170b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80170b4:	f7e9 fa2a 	bl	800050c <__aeabi_dmul>
 80170b8:	4602      	mov	r2, r0
 80170ba:	460b      	mov	r3, r1
 80170bc:	4630      	mov	r0, r6
 80170be:	4639      	mov	r1, r7
 80170c0:	f7e9 f86e 	bl	80001a0 <__adddf3>
 80170c4:	4606      	mov	r6, r0
 80170c6:	460f      	mov	r7, r1
 80170c8:	4602      	mov	r2, r0
 80170ca:	460b      	mov	r3, r1
 80170cc:	4640      	mov	r0, r8
 80170ce:	4649      	mov	r1, r9
 80170d0:	f7e9 f866 	bl	80001a0 <__adddf3>
 80170d4:	9802      	ldr	r0, [sp, #8]
 80170d6:	a33c      	add	r3, pc, #240	; (adr r3, 80171c8 <__ieee754_pow+0x700>)
 80170d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170dc:	4604      	mov	r4, r0
 80170de:	460d      	mov	r5, r1
 80170e0:	f7e9 fa14 	bl	800050c <__aeabi_dmul>
 80170e4:	4642      	mov	r2, r8
 80170e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80170ea:	464b      	mov	r3, r9
 80170ec:	4620      	mov	r0, r4
 80170ee:	4629      	mov	r1, r5
 80170f0:	f7e9 f854 	bl	800019c <__aeabi_dsub>
 80170f4:	4602      	mov	r2, r0
 80170f6:	460b      	mov	r3, r1
 80170f8:	4630      	mov	r0, r6
 80170fa:	4639      	mov	r1, r7
 80170fc:	f7e9 f84e 	bl	800019c <__aeabi_dsub>
 8017100:	a333      	add	r3, pc, #204	; (adr r3, 80171d0 <__ieee754_pow+0x708>)
 8017102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017106:	f7e9 fa01 	bl	800050c <__aeabi_dmul>
 801710a:	a333      	add	r3, pc, #204	; (adr r3, 80171d8 <__ieee754_pow+0x710>)
 801710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017110:	4606      	mov	r6, r0
 8017112:	460f      	mov	r7, r1
 8017114:	4620      	mov	r0, r4
 8017116:	4629      	mov	r1, r5
 8017118:	f7e9 f9f8 	bl	800050c <__aeabi_dmul>
 801711c:	4602      	mov	r2, r0
 801711e:	460b      	mov	r3, r1
 8017120:	4630      	mov	r0, r6
 8017122:	4639      	mov	r1, r7
 8017124:	f7e9 f83c 	bl	80001a0 <__adddf3>
 8017128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801712a:	4b35      	ldr	r3, [pc, #212]	; (8017200 <__ieee754_pow+0x738>)
 801712c:	4413      	add	r3, r2
 801712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017132:	f7e9 f835 	bl	80001a0 <__adddf3>
 8017136:	4604      	mov	r4, r0
 8017138:	9809      	ldr	r0, [sp, #36]	; 0x24
 801713a:	460d      	mov	r5, r1
 801713c:	f7e9 f97c 	bl	8000438 <__aeabi_i2d>
 8017140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017142:	4b30      	ldr	r3, [pc, #192]	; (8017204 <__ieee754_pow+0x73c>)
 8017144:	4413      	add	r3, r2
 8017146:	e9d3 8900 	ldrd	r8, r9, [r3]
 801714a:	4606      	mov	r6, r0
 801714c:	460f      	mov	r7, r1
 801714e:	4622      	mov	r2, r4
 8017150:	462b      	mov	r3, r5
 8017152:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017156:	f7e9 f823 	bl	80001a0 <__adddf3>
 801715a:	4642      	mov	r2, r8
 801715c:	464b      	mov	r3, r9
 801715e:	f7e9 f81f 	bl	80001a0 <__adddf3>
 8017162:	4632      	mov	r2, r6
 8017164:	463b      	mov	r3, r7
 8017166:	f7e9 f81b 	bl	80001a0 <__adddf3>
 801716a:	9802      	ldr	r0, [sp, #8]
 801716c:	4632      	mov	r2, r6
 801716e:	463b      	mov	r3, r7
 8017170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017174:	f7e9 f812 	bl	800019c <__aeabi_dsub>
 8017178:	4642      	mov	r2, r8
 801717a:	464b      	mov	r3, r9
 801717c:	f7e9 f80e 	bl	800019c <__aeabi_dsub>
 8017180:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017184:	e607      	b.n	8016d96 <__ieee754_pow+0x2ce>
 8017186:	f04f 0a01 	mov.w	sl, #1
 801718a:	e6a5      	b.n	8016ed8 <__ieee754_pow+0x410>
 801718c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80171e0 <__ieee754_pow+0x718>
 8017190:	e613      	b.n	8016dba <__ieee754_pow+0x2f2>
 8017192:	bf00      	nop
 8017194:	f3af 8000 	nop.w
 8017198:	4a454eef 	.word	0x4a454eef
 801719c:	3fca7e28 	.word	0x3fca7e28
 80171a0:	93c9db65 	.word	0x93c9db65
 80171a4:	3fcd864a 	.word	0x3fcd864a
 80171a8:	a91d4101 	.word	0xa91d4101
 80171ac:	3fd17460 	.word	0x3fd17460
 80171b0:	518f264d 	.word	0x518f264d
 80171b4:	3fd55555 	.word	0x3fd55555
 80171b8:	db6fabff 	.word	0xdb6fabff
 80171bc:	3fdb6db6 	.word	0x3fdb6db6
 80171c0:	33333303 	.word	0x33333303
 80171c4:	3fe33333 	.word	0x3fe33333
 80171c8:	e0000000 	.word	0xe0000000
 80171cc:	3feec709 	.word	0x3feec709
 80171d0:	dc3a03fd 	.word	0xdc3a03fd
 80171d4:	3feec709 	.word	0x3feec709
 80171d8:	145b01f5 	.word	0x145b01f5
 80171dc:	be3e2fe0 	.word	0xbe3e2fe0
 80171e0:	00000000 	.word	0x00000000
 80171e4:	3ff00000 	.word	0x3ff00000
 80171e8:	43400000 	.word	0x43400000
 80171ec:	0003988e 	.word	0x0003988e
 80171f0:	000bb679 	.word	0x000bb679
 80171f4:	08018a20 	.word	0x08018a20
 80171f8:	3ff00000 	.word	0x3ff00000
 80171fc:	40080000 	.word	0x40080000
 8017200:	08018a40 	.word	0x08018a40
 8017204:	08018a30 	.word	0x08018a30
 8017208:	a3b4      	add	r3, pc, #720	; (adr r3, 80174dc <__ieee754_pow+0xa14>)
 801720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801720e:	4640      	mov	r0, r8
 8017210:	4649      	mov	r1, r9
 8017212:	f7e8 ffc5 	bl	80001a0 <__adddf3>
 8017216:	4622      	mov	r2, r4
 8017218:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801721c:	462b      	mov	r3, r5
 801721e:	4630      	mov	r0, r6
 8017220:	4639      	mov	r1, r7
 8017222:	f7e8 ffbb 	bl	800019c <__aeabi_dsub>
 8017226:	4602      	mov	r2, r0
 8017228:	460b      	mov	r3, r1
 801722a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801722e:	f7e9 fbfd 	bl	8000a2c <__aeabi_dcmpgt>
 8017232:	2800      	cmp	r0, #0
 8017234:	f47f adfe 	bne.w	8016e34 <__ieee754_pow+0x36c>
 8017238:	4aa3      	ldr	r2, [pc, #652]	; (80174c8 <__ieee754_pow+0xa00>)
 801723a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801723e:	4293      	cmp	r3, r2
 8017240:	f340 810a 	ble.w	8017458 <__ieee754_pow+0x990>
 8017244:	151b      	asrs	r3, r3, #20
 8017246:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801724a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801724e:	fa4a f303 	asr.w	r3, sl, r3
 8017252:	445b      	add	r3, fp
 8017254:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017258:	4e9c      	ldr	r6, [pc, #624]	; (80174cc <__ieee754_pow+0xa04>)
 801725a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801725e:	4116      	asrs	r6, r2
 8017260:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8017264:	2000      	movs	r0, #0
 8017266:	ea23 0106 	bic.w	r1, r3, r6
 801726a:	f1c2 0214 	rsb	r2, r2, #20
 801726e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8017272:	fa4a fa02 	asr.w	sl, sl, r2
 8017276:	f1bb 0f00 	cmp.w	fp, #0
 801727a:	4602      	mov	r2, r0
 801727c:	460b      	mov	r3, r1
 801727e:	4620      	mov	r0, r4
 8017280:	4629      	mov	r1, r5
 8017282:	bfb8      	it	lt
 8017284:	f1ca 0a00 	rsblt	sl, sl, #0
 8017288:	f7e8 ff88 	bl	800019c <__aeabi_dsub>
 801728c:	e9cd 0100 	strd	r0, r1, [sp]
 8017290:	4642      	mov	r2, r8
 8017292:	464b      	mov	r3, r9
 8017294:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017298:	f7e8 ff82 	bl	80001a0 <__adddf3>
 801729c:	2000      	movs	r0, #0
 801729e:	a378      	add	r3, pc, #480	; (adr r3, 8017480 <__ieee754_pow+0x9b8>)
 80172a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172a4:	4604      	mov	r4, r0
 80172a6:	460d      	mov	r5, r1
 80172a8:	f7e9 f930 	bl	800050c <__aeabi_dmul>
 80172ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172b0:	4606      	mov	r6, r0
 80172b2:	460f      	mov	r7, r1
 80172b4:	4620      	mov	r0, r4
 80172b6:	4629      	mov	r1, r5
 80172b8:	f7e8 ff70 	bl	800019c <__aeabi_dsub>
 80172bc:	4602      	mov	r2, r0
 80172be:	460b      	mov	r3, r1
 80172c0:	4640      	mov	r0, r8
 80172c2:	4649      	mov	r1, r9
 80172c4:	f7e8 ff6a 	bl	800019c <__aeabi_dsub>
 80172c8:	a36f      	add	r3, pc, #444	; (adr r3, 8017488 <__ieee754_pow+0x9c0>)
 80172ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ce:	f7e9 f91d 	bl	800050c <__aeabi_dmul>
 80172d2:	a36f      	add	r3, pc, #444	; (adr r3, 8017490 <__ieee754_pow+0x9c8>)
 80172d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d8:	4680      	mov	r8, r0
 80172da:	4689      	mov	r9, r1
 80172dc:	4620      	mov	r0, r4
 80172de:	4629      	mov	r1, r5
 80172e0:	f7e9 f914 	bl	800050c <__aeabi_dmul>
 80172e4:	4602      	mov	r2, r0
 80172e6:	460b      	mov	r3, r1
 80172e8:	4640      	mov	r0, r8
 80172ea:	4649      	mov	r1, r9
 80172ec:	f7e8 ff58 	bl	80001a0 <__adddf3>
 80172f0:	4604      	mov	r4, r0
 80172f2:	460d      	mov	r5, r1
 80172f4:	4602      	mov	r2, r0
 80172f6:	460b      	mov	r3, r1
 80172f8:	4630      	mov	r0, r6
 80172fa:	4639      	mov	r1, r7
 80172fc:	f7e8 ff50 	bl	80001a0 <__adddf3>
 8017300:	4632      	mov	r2, r6
 8017302:	463b      	mov	r3, r7
 8017304:	4680      	mov	r8, r0
 8017306:	4689      	mov	r9, r1
 8017308:	f7e8 ff48 	bl	800019c <__aeabi_dsub>
 801730c:	4602      	mov	r2, r0
 801730e:	460b      	mov	r3, r1
 8017310:	4620      	mov	r0, r4
 8017312:	4629      	mov	r1, r5
 8017314:	f7e8 ff42 	bl	800019c <__aeabi_dsub>
 8017318:	4642      	mov	r2, r8
 801731a:	4606      	mov	r6, r0
 801731c:	460f      	mov	r7, r1
 801731e:	464b      	mov	r3, r9
 8017320:	4640      	mov	r0, r8
 8017322:	4649      	mov	r1, r9
 8017324:	f7e9 f8f2 	bl	800050c <__aeabi_dmul>
 8017328:	a35b      	add	r3, pc, #364	; (adr r3, 8017498 <__ieee754_pow+0x9d0>)
 801732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801732e:	4604      	mov	r4, r0
 8017330:	460d      	mov	r5, r1
 8017332:	f7e9 f8eb 	bl	800050c <__aeabi_dmul>
 8017336:	a35a      	add	r3, pc, #360	; (adr r3, 80174a0 <__ieee754_pow+0x9d8>)
 8017338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801733c:	f7e8 ff2e 	bl	800019c <__aeabi_dsub>
 8017340:	4622      	mov	r2, r4
 8017342:	462b      	mov	r3, r5
 8017344:	f7e9 f8e2 	bl	800050c <__aeabi_dmul>
 8017348:	a357      	add	r3, pc, #348	; (adr r3, 80174a8 <__ieee754_pow+0x9e0>)
 801734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801734e:	f7e8 ff27 	bl	80001a0 <__adddf3>
 8017352:	4622      	mov	r2, r4
 8017354:	462b      	mov	r3, r5
 8017356:	f7e9 f8d9 	bl	800050c <__aeabi_dmul>
 801735a:	a355      	add	r3, pc, #340	; (adr r3, 80174b0 <__ieee754_pow+0x9e8>)
 801735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017360:	f7e8 ff1c 	bl	800019c <__aeabi_dsub>
 8017364:	4622      	mov	r2, r4
 8017366:	462b      	mov	r3, r5
 8017368:	f7e9 f8d0 	bl	800050c <__aeabi_dmul>
 801736c:	a352      	add	r3, pc, #328	; (adr r3, 80174b8 <__ieee754_pow+0x9f0>)
 801736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017372:	f7e8 ff15 	bl	80001a0 <__adddf3>
 8017376:	4622      	mov	r2, r4
 8017378:	462b      	mov	r3, r5
 801737a:	f7e9 f8c7 	bl	800050c <__aeabi_dmul>
 801737e:	4602      	mov	r2, r0
 8017380:	460b      	mov	r3, r1
 8017382:	4640      	mov	r0, r8
 8017384:	4649      	mov	r1, r9
 8017386:	f7e8 ff09 	bl	800019c <__aeabi_dsub>
 801738a:	4604      	mov	r4, r0
 801738c:	460d      	mov	r5, r1
 801738e:	4602      	mov	r2, r0
 8017390:	460b      	mov	r3, r1
 8017392:	4640      	mov	r0, r8
 8017394:	4649      	mov	r1, r9
 8017396:	f7e9 f8b9 	bl	800050c <__aeabi_dmul>
 801739a:	2200      	movs	r2, #0
 801739c:	e9cd 0100 	strd	r0, r1, [sp]
 80173a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80173a4:	4620      	mov	r0, r4
 80173a6:	4629      	mov	r1, r5
 80173a8:	f7e8 fef8 	bl	800019c <__aeabi_dsub>
 80173ac:	4602      	mov	r2, r0
 80173ae:	460b      	mov	r3, r1
 80173b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173b4:	f7e9 f9d4 	bl	8000760 <__aeabi_ddiv>
 80173b8:	4632      	mov	r2, r6
 80173ba:	4604      	mov	r4, r0
 80173bc:	460d      	mov	r5, r1
 80173be:	463b      	mov	r3, r7
 80173c0:	4640      	mov	r0, r8
 80173c2:	4649      	mov	r1, r9
 80173c4:	f7e9 f8a2 	bl	800050c <__aeabi_dmul>
 80173c8:	4632      	mov	r2, r6
 80173ca:	463b      	mov	r3, r7
 80173cc:	f7e8 fee8 	bl	80001a0 <__adddf3>
 80173d0:	4602      	mov	r2, r0
 80173d2:	460b      	mov	r3, r1
 80173d4:	4620      	mov	r0, r4
 80173d6:	4629      	mov	r1, r5
 80173d8:	f7e8 fee0 	bl	800019c <__aeabi_dsub>
 80173dc:	4642      	mov	r2, r8
 80173de:	464b      	mov	r3, r9
 80173e0:	f7e8 fedc 	bl	800019c <__aeabi_dsub>
 80173e4:	4602      	mov	r2, r0
 80173e6:	460b      	mov	r3, r1
 80173e8:	2000      	movs	r0, #0
 80173ea:	4939      	ldr	r1, [pc, #228]	; (80174d0 <__ieee754_pow+0xa08>)
 80173ec:	f7e8 fed6 	bl	800019c <__aeabi_dsub>
 80173f0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80173f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80173f8:	4602      	mov	r2, r0
 80173fa:	460b      	mov	r3, r1
 80173fc:	da2f      	bge.n	801745e <__ieee754_pow+0x996>
 80173fe:	4650      	mov	r0, sl
 8017400:	ec43 2b10 	vmov	d0, r2, r3
 8017404:	f000 f9c0 	bl	8017788 <scalbn>
 8017408:	ec51 0b10 	vmov	r0, r1, d0
 801740c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017410:	f7ff bbf1 	b.w	8016bf6 <__ieee754_pow+0x12e>
 8017414:	4b2f      	ldr	r3, [pc, #188]	; (80174d4 <__ieee754_pow+0xa0c>)
 8017416:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801741a:	429e      	cmp	r6, r3
 801741c:	f77f af0c 	ble.w	8017238 <__ieee754_pow+0x770>
 8017420:	4b2d      	ldr	r3, [pc, #180]	; (80174d8 <__ieee754_pow+0xa10>)
 8017422:	440b      	add	r3, r1
 8017424:	4303      	orrs	r3, r0
 8017426:	d00b      	beq.n	8017440 <__ieee754_pow+0x978>
 8017428:	a325      	add	r3, pc, #148	; (adr r3, 80174c0 <__ieee754_pow+0x9f8>)
 801742a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801742e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017432:	f7e9 f86b 	bl	800050c <__aeabi_dmul>
 8017436:	a322      	add	r3, pc, #136	; (adr r3, 80174c0 <__ieee754_pow+0x9f8>)
 8017438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801743c:	f7ff bbdb 	b.w	8016bf6 <__ieee754_pow+0x12e>
 8017440:	4622      	mov	r2, r4
 8017442:	462b      	mov	r3, r5
 8017444:	f7e8 feaa 	bl	800019c <__aeabi_dsub>
 8017448:	4642      	mov	r2, r8
 801744a:	464b      	mov	r3, r9
 801744c:	f7e9 fae4 	bl	8000a18 <__aeabi_dcmpge>
 8017450:	2800      	cmp	r0, #0
 8017452:	f43f aef1 	beq.w	8017238 <__ieee754_pow+0x770>
 8017456:	e7e7      	b.n	8017428 <__ieee754_pow+0x960>
 8017458:	f04f 0a00 	mov.w	sl, #0
 801745c:	e718      	b.n	8017290 <__ieee754_pow+0x7c8>
 801745e:	4621      	mov	r1, r4
 8017460:	e7d4      	b.n	801740c <__ieee754_pow+0x944>
 8017462:	2000      	movs	r0, #0
 8017464:	491a      	ldr	r1, [pc, #104]	; (80174d0 <__ieee754_pow+0xa08>)
 8017466:	f7ff bb8f 	b.w	8016b88 <__ieee754_pow+0xc0>
 801746a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801746e:	f7ff bb8b 	b.w	8016b88 <__ieee754_pow+0xc0>
 8017472:	4630      	mov	r0, r6
 8017474:	4639      	mov	r1, r7
 8017476:	f7ff bb87 	b.w	8016b88 <__ieee754_pow+0xc0>
 801747a:	4693      	mov	fp, r2
 801747c:	f7ff bb98 	b.w	8016bb0 <__ieee754_pow+0xe8>
 8017480:	00000000 	.word	0x00000000
 8017484:	3fe62e43 	.word	0x3fe62e43
 8017488:	fefa39ef 	.word	0xfefa39ef
 801748c:	3fe62e42 	.word	0x3fe62e42
 8017490:	0ca86c39 	.word	0x0ca86c39
 8017494:	be205c61 	.word	0xbe205c61
 8017498:	72bea4d0 	.word	0x72bea4d0
 801749c:	3e663769 	.word	0x3e663769
 80174a0:	c5d26bf1 	.word	0xc5d26bf1
 80174a4:	3ebbbd41 	.word	0x3ebbbd41
 80174a8:	af25de2c 	.word	0xaf25de2c
 80174ac:	3f11566a 	.word	0x3f11566a
 80174b0:	16bebd93 	.word	0x16bebd93
 80174b4:	3f66c16c 	.word	0x3f66c16c
 80174b8:	5555553e 	.word	0x5555553e
 80174bc:	3fc55555 	.word	0x3fc55555
 80174c0:	c2f8f359 	.word	0xc2f8f359
 80174c4:	01a56e1f 	.word	0x01a56e1f
 80174c8:	3fe00000 	.word	0x3fe00000
 80174cc:	000fffff 	.word	0x000fffff
 80174d0:	3ff00000 	.word	0x3ff00000
 80174d4:	4090cbff 	.word	0x4090cbff
 80174d8:	3f6f3400 	.word	0x3f6f3400
 80174dc:	652b82fe 	.word	0x652b82fe
 80174e0:	3c971547 	.word	0x3c971547

080174e4 <__ieee754_sqrt>:
 80174e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174e8:	4955      	ldr	r1, [pc, #340]	; (8017640 <__ieee754_sqrt+0x15c>)
 80174ea:	ec55 4b10 	vmov	r4, r5, d0
 80174ee:	43a9      	bics	r1, r5
 80174f0:	462b      	mov	r3, r5
 80174f2:	462a      	mov	r2, r5
 80174f4:	d112      	bne.n	801751c <__ieee754_sqrt+0x38>
 80174f6:	ee10 2a10 	vmov	r2, s0
 80174fa:	ee10 0a10 	vmov	r0, s0
 80174fe:	4629      	mov	r1, r5
 8017500:	f7e9 f804 	bl	800050c <__aeabi_dmul>
 8017504:	4602      	mov	r2, r0
 8017506:	460b      	mov	r3, r1
 8017508:	4620      	mov	r0, r4
 801750a:	4629      	mov	r1, r5
 801750c:	f7e8 fe48 	bl	80001a0 <__adddf3>
 8017510:	4604      	mov	r4, r0
 8017512:	460d      	mov	r5, r1
 8017514:	ec45 4b10 	vmov	d0, r4, r5
 8017518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801751c:	2d00      	cmp	r5, #0
 801751e:	ee10 0a10 	vmov	r0, s0
 8017522:	4621      	mov	r1, r4
 8017524:	dc0f      	bgt.n	8017546 <__ieee754_sqrt+0x62>
 8017526:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801752a:	4330      	orrs	r0, r6
 801752c:	d0f2      	beq.n	8017514 <__ieee754_sqrt+0x30>
 801752e:	b155      	cbz	r5, 8017546 <__ieee754_sqrt+0x62>
 8017530:	ee10 2a10 	vmov	r2, s0
 8017534:	4620      	mov	r0, r4
 8017536:	4629      	mov	r1, r5
 8017538:	f7e8 fe30 	bl	800019c <__aeabi_dsub>
 801753c:	4602      	mov	r2, r0
 801753e:	460b      	mov	r3, r1
 8017540:	f7e9 f90e 	bl	8000760 <__aeabi_ddiv>
 8017544:	e7e4      	b.n	8017510 <__ieee754_sqrt+0x2c>
 8017546:	151b      	asrs	r3, r3, #20
 8017548:	d073      	beq.n	8017632 <__ieee754_sqrt+0x14e>
 801754a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801754e:	07dd      	lsls	r5, r3, #31
 8017550:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8017554:	bf48      	it	mi
 8017556:	0fc8      	lsrmi	r0, r1, #31
 8017558:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801755c:	bf44      	itt	mi
 801755e:	0049      	lslmi	r1, r1, #1
 8017560:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8017564:	2500      	movs	r5, #0
 8017566:	1058      	asrs	r0, r3, #1
 8017568:	0fcb      	lsrs	r3, r1, #31
 801756a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801756e:	0049      	lsls	r1, r1, #1
 8017570:	2316      	movs	r3, #22
 8017572:	462c      	mov	r4, r5
 8017574:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8017578:	19a7      	adds	r7, r4, r6
 801757a:	4297      	cmp	r7, r2
 801757c:	bfde      	ittt	le
 801757e:	19bc      	addle	r4, r7, r6
 8017580:	1bd2      	suble	r2, r2, r7
 8017582:	19ad      	addle	r5, r5, r6
 8017584:	0fcf      	lsrs	r7, r1, #31
 8017586:	3b01      	subs	r3, #1
 8017588:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801758c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017590:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017594:	d1f0      	bne.n	8017578 <__ieee754_sqrt+0x94>
 8017596:	f04f 0c20 	mov.w	ip, #32
 801759a:	469e      	mov	lr, r3
 801759c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80175a0:	42a2      	cmp	r2, r4
 80175a2:	eb06 070e 	add.w	r7, r6, lr
 80175a6:	dc02      	bgt.n	80175ae <__ieee754_sqrt+0xca>
 80175a8:	d112      	bne.n	80175d0 <__ieee754_sqrt+0xec>
 80175aa:	428f      	cmp	r7, r1
 80175ac:	d810      	bhi.n	80175d0 <__ieee754_sqrt+0xec>
 80175ae:	2f00      	cmp	r7, #0
 80175b0:	eb07 0e06 	add.w	lr, r7, r6
 80175b4:	da42      	bge.n	801763c <__ieee754_sqrt+0x158>
 80175b6:	f1be 0f00 	cmp.w	lr, #0
 80175ba:	db3f      	blt.n	801763c <__ieee754_sqrt+0x158>
 80175bc:	f104 0801 	add.w	r8, r4, #1
 80175c0:	1b12      	subs	r2, r2, r4
 80175c2:	428f      	cmp	r7, r1
 80175c4:	bf88      	it	hi
 80175c6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80175ca:	1bc9      	subs	r1, r1, r7
 80175cc:	4433      	add	r3, r6
 80175ce:	4644      	mov	r4, r8
 80175d0:	0052      	lsls	r2, r2, #1
 80175d2:	f1bc 0c01 	subs.w	ip, ip, #1
 80175d6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80175da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80175de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80175e2:	d1dd      	bne.n	80175a0 <__ieee754_sqrt+0xbc>
 80175e4:	430a      	orrs	r2, r1
 80175e6:	d006      	beq.n	80175f6 <__ieee754_sqrt+0x112>
 80175e8:	1c5c      	adds	r4, r3, #1
 80175ea:	bf13      	iteet	ne
 80175ec:	3301      	addne	r3, #1
 80175ee:	3501      	addeq	r5, #1
 80175f0:	4663      	moveq	r3, ip
 80175f2:	f023 0301 	bicne.w	r3, r3, #1
 80175f6:	106a      	asrs	r2, r5, #1
 80175f8:	085b      	lsrs	r3, r3, #1
 80175fa:	07e9      	lsls	r1, r5, #31
 80175fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8017600:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8017604:	bf48      	it	mi
 8017606:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801760a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801760e:	461c      	mov	r4, r3
 8017610:	e780      	b.n	8017514 <__ieee754_sqrt+0x30>
 8017612:	0aca      	lsrs	r2, r1, #11
 8017614:	3815      	subs	r0, #21
 8017616:	0549      	lsls	r1, r1, #21
 8017618:	2a00      	cmp	r2, #0
 801761a:	d0fa      	beq.n	8017612 <__ieee754_sqrt+0x12e>
 801761c:	02d6      	lsls	r6, r2, #11
 801761e:	d50a      	bpl.n	8017636 <__ieee754_sqrt+0x152>
 8017620:	f1c3 0420 	rsb	r4, r3, #32
 8017624:	fa21 f404 	lsr.w	r4, r1, r4
 8017628:	1e5d      	subs	r5, r3, #1
 801762a:	4099      	lsls	r1, r3
 801762c:	4322      	orrs	r2, r4
 801762e:	1b43      	subs	r3, r0, r5
 8017630:	e78b      	b.n	801754a <__ieee754_sqrt+0x66>
 8017632:	4618      	mov	r0, r3
 8017634:	e7f0      	b.n	8017618 <__ieee754_sqrt+0x134>
 8017636:	0052      	lsls	r2, r2, #1
 8017638:	3301      	adds	r3, #1
 801763a:	e7ef      	b.n	801761c <__ieee754_sqrt+0x138>
 801763c:	46a0      	mov	r8, r4
 801763e:	e7bf      	b.n	80175c0 <__ieee754_sqrt+0xdc>
 8017640:	7ff00000 	.word	0x7ff00000

08017644 <__ieee754_sqrtf>:
 8017644:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017648:	4770      	bx	lr

0801764a <fabs>:
 801764a:	ec51 0b10 	vmov	r0, r1, d0
 801764e:	ee10 2a10 	vmov	r2, s0
 8017652:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017656:	ec43 2b10 	vmov	d0, r2, r3
 801765a:	4770      	bx	lr

0801765c <finite>:
 801765c:	ee10 3a90 	vmov	r3, s1
 8017660:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8017664:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017668:	0fc0      	lsrs	r0, r0, #31
 801766a:	4770      	bx	lr

0801766c <matherr>:
 801766c:	2000      	movs	r0, #0
 801766e:	4770      	bx	lr

08017670 <nan>:
 8017670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017678 <nan+0x8>
 8017674:	4770      	bx	lr
 8017676:	bf00      	nop
 8017678:	00000000 	.word	0x00000000
 801767c:	7ff80000 	.word	0x7ff80000

08017680 <rint>:
 8017680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017682:	ec51 0b10 	vmov	r0, r1, d0
 8017686:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801768a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801768e:	2e13      	cmp	r6, #19
 8017690:	460b      	mov	r3, r1
 8017692:	ee10 4a10 	vmov	r4, s0
 8017696:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801769a:	dc56      	bgt.n	801774a <rint+0xca>
 801769c:	2e00      	cmp	r6, #0
 801769e:	da2b      	bge.n	80176f8 <rint+0x78>
 80176a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80176a4:	4302      	orrs	r2, r0
 80176a6:	d023      	beq.n	80176f0 <rint+0x70>
 80176a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80176ac:	4302      	orrs	r2, r0
 80176ae:	4254      	negs	r4, r2
 80176b0:	4314      	orrs	r4, r2
 80176b2:	0c4b      	lsrs	r3, r1, #17
 80176b4:	0b24      	lsrs	r4, r4, #12
 80176b6:	045b      	lsls	r3, r3, #17
 80176b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80176bc:	ea44 0103 	orr.w	r1, r4, r3
 80176c0:	460b      	mov	r3, r1
 80176c2:	492f      	ldr	r1, [pc, #188]	; (8017780 <rint+0x100>)
 80176c4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80176c8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80176cc:	4602      	mov	r2, r0
 80176ce:	4639      	mov	r1, r7
 80176d0:	4630      	mov	r0, r6
 80176d2:	f7e8 fd65 	bl	80001a0 <__adddf3>
 80176d6:	e9cd 0100 	strd	r0, r1, [sp]
 80176da:	463b      	mov	r3, r7
 80176dc:	4632      	mov	r2, r6
 80176de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176e2:	f7e8 fd5b 	bl	800019c <__aeabi_dsub>
 80176e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80176ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80176ee:	4639      	mov	r1, r7
 80176f0:	ec41 0b10 	vmov	d0, r0, r1
 80176f4:	b003      	add	sp, #12
 80176f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176f8:	4a22      	ldr	r2, [pc, #136]	; (8017784 <rint+0x104>)
 80176fa:	4132      	asrs	r2, r6
 80176fc:	ea01 0702 	and.w	r7, r1, r2
 8017700:	4307      	orrs	r7, r0
 8017702:	d0f5      	beq.n	80176f0 <rint+0x70>
 8017704:	0852      	lsrs	r2, r2, #1
 8017706:	4011      	ands	r1, r2
 8017708:	430c      	orrs	r4, r1
 801770a:	d00b      	beq.n	8017724 <rint+0xa4>
 801770c:	ea23 0202 	bic.w	r2, r3, r2
 8017710:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017714:	2e13      	cmp	r6, #19
 8017716:	fa43 f306 	asr.w	r3, r3, r6
 801771a:	bf0c      	ite	eq
 801771c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8017720:	2400      	movne	r4, #0
 8017722:	4313      	orrs	r3, r2
 8017724:	4916      	ldr	r1, [pc, #88]	; (8017780 <rint+0x100>)
 8017726:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801772a:	4622      	mov	r2, r4
 801772c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017730:	4620      	mov	r0, r4
 8017732:	4629      	mov	r1, r5
 8017734:	f7e8 fd34 	bl	80001a0 <__adddf3>
 8017738:	e9cd 0100 	strd	r0, r1, [sp]
 801773c:	4622      	mov	r2, r4
 801773e:	462b      	mov	r3, r5
 8017740:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017744:	f7e8 fd2a 	bl	800019c <__aeabi_dsub>
 8017748:	e7d2      	b.n	80176f0 <rint+0x70>
 801774a:	2e33      	cmp	r6, #51	; 0x33
 801774c:	dd07      	ble.n	801775e <rint+0xde>
 801774e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017752:	d1cd      	bne.n	80176f0 <rint+0x70>
 8017754:	ee10 2a10 	vmov	r2, s0
 8017758:	f7e8 fd22 	bl	80001a0 <__adddf3>
 801775c:	e7c8      	b.n	80176f0 <rint+0x70>
 801775e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8017762:	f04f 32ff 	mov.w	r2, #4294967295
 8017766:	40f2      	lsrs	r2, r6
 8017768:	4210      	tst	r0, r2
 801776a:	d0c1      	beq.n	80176f0 <rint+0x70>
 801776c:	0852      	lsrs	r2, r2, #1
 801776e:	4210      	tst	r0, r2
 8017770:	bf1f      	itttt	ne
 8017772:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8017776:	ea20 0202 	bicne.w	r2, r0, r2
 801777a:	4134      	asrne	r4, r6
 801777c:	4314      	orrne	r4, r2
 801777e:	e7d1      	b.n	8017724 <rint+0xa4>
 8017780:	08018a50 	.word	0x08018a50
 8017784:	000fffff 	.word	0x000fffff

08017788 <scalbn>:
 8017788:	b570      	push	{r4, r5, r6, lr}
 801778a:	ec55 4b10 	vmov	r4, r5, d0
 801778e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017792:	4606      	mov	r6, r0
 8017794:	462b      	mov	r3, r5
 8017796:	b9aa      	cbnz	r2, 80177c4 <scalbn+0x3c>
 8017798:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801779c:	4323      	orrs	r3, r4
 801779e:	d03b      	beq.n	8017818 <scalbn+0x90>
 80177a0:	4b31      	ldr	r3, [pc, #196]	; (8017868 <scalbn+0xe0>)
 80177a2:	4629      	mov	r1, r5
 80177a4:	2200      	movs	r2, #0
 80177a6:	ee10 0a10 	vmov	r0, s0
 80177aa:	f7e8 feaf 	bl	800050c <__aeabi_dmul>
 80177ae:	4b2f      	ldr	r3, [pc, #188]	; (801786c <scalbn+0xe4>)
 80177b0:	429e      	cmp	r6, r3
 80177b2:	4604      	mov	r4, r0
 80177b4:	460d      	mov	r5, r1
 80177b6:	da12      	bge.n	80177de <scalbn+0x56>
 80177b8:	a327      	add	r3, pc, #156	; (adr r3, 8017858 <scalbn+0xd0>)
 80177ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177be:	f7e8 fea5 	bl	800050c <__aeabi_dmul>
 80177c2:	e009      	b.n	80177d8 <scalbn+0x50>
 80177c4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80177c8:	428a      	cmp	r2, r1
 80177ca:	d10c      	bne.n	80177e6 <scalbn+0x5e>
 80177cc:	ee10 2a10 	vmov	r2, s0
 80177d0:	4620      	mov	r0, r4
 80177d2:	4629      	mov	r1, r5
 80177d4:	f7e8 fce4 	bl	80001a0 <__adddf3>
 80177d8:	4604      	mov	r4, r0
 80177da:	460d      	mov	r5, r1
 80177dc:	e01c      	b.n	8017818 <scalbn+0x90>
 80177de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80177e2:	460b      	mov	r3, r1
 80177e4:	3a36      	subs	r2, #54	; 0x36
 80177e6:	4432      	add	r2, r6
 80177e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80177ec:	428a      	cmp	r2, r1
 80177ee:	dd0b      	ble.n	8017808 <scalbn+0x80>
 80177f0:	ec45 4b11 	vmov	d1, r4, r5
 80177f4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017860 <scalbn+0xd8>
 80177f8:	f000 f83c 	bl	8017874 <copysign>
 80177fc:	a318      	add	r3, pc, #96	; (adr r3, 8017860 <scalbn+0xd8>)
 80177fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017802:	ec51 0b10 	vmov	r0, r1, d0
 8017806:	e7da      	b.n	80177be <scalbn+0x36>
 8017808:	2a00      	cmp	r2, #0
 801780a:	dd08      	ble.n	801781e <scalbn+0x96>
 801780c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017810:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017814:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017818:	ec45 4b10 	vmov	d0, r4, r5
 801781c:	bd70      	pop	{r4, r5, r6, pc}
 801781e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017822:	da0d      	bge.n	8017840 <scalbn+0xb8>
 8017824:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017828:	429e      	cmp	r6, r3
 801782a:	ec45 4b11 	vmov	d1, r4, r5
 801782e:	dce1      	bgt.n	80177f4 <scalbn+0x6c>
 8017830:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017858 <scalbn+0xd0>
 8017834:	f000 f81e 	bl	8017874 <copysign>
 8017838:	a307      	add	r3, pc, #28	; (adr r3, 8017858 <scalbn+0xd0>)
 801783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801783e:	e7e0      	b.n	8017802 <scalbn+0x7a>
 8017840:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017844:	3236      	adds	r2, #54	; 0x36
 8017846:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801784a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801784e:	4620      	mov	r0, r4
 8017850:	4629      	mov	r1, r5
 8017852:	2200      	movs	r2, #0
 8017854:	4b06      	ldr	r3, [pc, #24]	; (8017870 <scalbn+0xe8>)
 8017856:	e7b2      	b.n	80177be <scalbn+0x36>
 8017858:	c2f8f359 	.word	0xc2f8f359
 801785c:	01a56e1f 	.word	0x01a56e1f
 8017860:	8800759c 	.word	0x8800759c
 8017864:	7e37e43c 	.word	0x7e37e43c
 8017868:	43500000 	.word	0x43500000
 801786c:	ffff3cb0 	.word	0xffff3cb0
 8017870:	3c900000 	.word	0x3c900000

08017874 <copysign>:
 8017874:	ec51 0b10 	vmov	r0, r1, d0
 8017878:	ee11 0a90 	vmov	r0, s3
 801787c:	ee10 2a10 	vmov	r2, s0
 8017880:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017884:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017888:	ea41 0300 	orr.w	r3, r1, r0
 801788c:	ec43 2b10 	vmov	d0, r2, r3
 8017890:	4770      	bx	lr
	...

08017894 <_init>:
 8017894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017896:	bf00      	nop
 8017898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801789a:	bc08      	pop	{r3}
 801789c:	469e      	mov	lr, r3
 801789e:	4770      	bx	lr

080178a0 <_fini>:
 80178a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178a2:	bf00      	nop
 80178a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80178a6:	bc08      	pop	{r3}
 80178a8:	469e      	mov	lr, r3
 80178aa:	4770      	bx	lr
