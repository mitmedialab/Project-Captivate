
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ota_region   00000000  08010140  08010140  00030259  2**0
                  CONTENTS
  2 .text         00017da4  08010140  08010140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .RamFunc      00000078  08027ee4  08027ee4  00027ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000017c0  08027f60  08027f60  00027f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08029720  08029720  00029720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  08029728  08029728  00029728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802972c  0802972c  0002972c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ota_region_end 00000000  08029730  08029730  00030259  2**0
                  CONTENTS
  9 .data         000001a8  20000004  08029730  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 TIMERSERVER_CONTEXT 00000099  200001ac  080298d8  000301ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 SYSTEM_DRIVER_CONTEXT 00000011  20000248  08029971  00030248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00028770  20000260  08029982  00030260  2**3
                  ALLOC
 13 ._user_heap_stack 00000600  200289d0  08029982  000389d0  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00030259  2**0
                  CONTENTS, READONLY
 15 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 16 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 17 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 18 .debug_info   000671de  00000000  00000000  00030289  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000b8ed  00000000  00000000  00097467  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00003d90  00000000  00000000  000a2d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00003858  00000000  00000000  000a6ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0002812d  00000000  00000000  000aa340  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0001923f  00000000  00000000  000d246d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      000000f0  00000000  00000000  000eb6ac  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000fd3c  00000000  00000000  000eb79c  2**2
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_loc    0000131b  00000000  00000000  000fb4d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010140 <__do_global_dtors_aux>:
 8010140:	b510      	push	{r4, lr}
 8010142:	4c05      	ldr	r4, [pc, #20]	; (8010158 <__do_global_dtors_aux+0x18>)
 8010144:	7823      	ldrb	r3, [r4, #0]
 8010146:	b933      	cbnz	r3, 8010156 <__do_global_dtors_aux+0x16>
 8010148:	4b04      	ldr	r3, [pc, #16]	; (801015c <__do_global_dtors_aux+0x1c>)
 801014a:	b113      	cbz	r3, 8010152 <__do_global_dtors_aux+0x12>
 801014c:	4804      	ldr	r0, [pc, #16]	; (8010160 <__do_global_dtors_aux+0x20>)
 801014e:	f3af 8000 	nop.w
 8010152:	2301      	movs	r3, #1
 8010154:	7023      	strb	r3, [r4, #0]
 8010156:	bd10      	pop	{r4, pc}
 8010158:	20000260 	.word	0x20000260
 801015c:	00000000 	.word	0x00000000
 8010160:	08027ecc 	.word	0x08027ecc

08010164 <frame_dummy>:
 8010164:	b508      	push	{r3, lr}
 8010166:	4b03      	ldr	r3, [pc, #12]	; (8010174 <frame_dummy+0x10>)
 8010168:	b11b      	cbz	r3, 8010172 <frame_dummy+0xe>
 801016a:	4903      	ldr	r1, [pc, #12]	; (8010178 <frame_dummy+0x14>)
 801016c:	4803      	ldr	r0, [pc, #12]	; (801017c <frame_dummy+0x18>)
 801016e:	f3af 8000 	nop.w
 8010172:	bd08      	pop	{r3, pc}
 8010174:	00000000 	.word	0x00000000
 8010178:	20000264 	.word	0x20000264
 801017c:	08027ecc 	.word	0x08027ecc

08010180 <strcmp>:
 8010180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010188:	2a01      	cmp	r2, #1
 801018a:	bf28      	it	cs
 801018c:	429a      	cmpcs	r2, r3
 801018e:	d0f7      	beq.n	8010180 <strcmp>
 8010190:	1ad0      	subs	r0, r2, r3
 8010192:	4770      	bx	lr

08010194 <__aeabi_drsub>:
 8010194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8010198:	e002      	b.n	80101a0 <__adddf3>
 801019a:	bf00      	nop

0801019c <__aeabi_dsub>:
 801019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080101a0 <__adddf3>:
 80101a0:	b530      	push	{r4, r5, lr}
 80101a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80101a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80101aa:	ea94 0f05 	teq	r4, r5
 80101ae:	bf08      	it	eq
 80101b0:	ea90 0f02 	teqeq	r0, r2
 80101b4:	bf1f      	itttt	ne
 80101b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80101ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80101be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80101c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80101c6:	f000 80e2 	beq.w	801038e <__adddf3+0x1ee>
 80101ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80101ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80101d2:	bfb8      	it	lt
 80101d4:	426d      	neglt	r5, r5
 80101d6:	dd0c      	ble.n	80101f2 <__adddf3+0x52>
 80101d8:	442c      	add	r4, r5
 80101da:	ea80 0202 	eor.w	r2, r0, r2
 80101de:	ea81 0303 	eor.w	r3, r1, r3
 80101e2:	ea82 0000 	eor.w	r0, r2, r0
 80101e6:	ea83 0101 	eor.w	r1, r3, r1
 80101ea:	ea80 0202 	eor.w	r2, r0, r2
 80101ee:	ea81 0303 	eor.w	r3, r1, r3
 80101f2:	2d36      	cmp	r5, #54	; 0x36
 80101f4:	bf88      	it	hi
 80101f6:	bd30      	pophi	{r4, r5, pc}
 80101f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80101fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010208:	d002      	beq.n	8010210 <__adddf3+0x70>
 801020a:	4240      	negs	r0, r0
 801020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 801021c:	d002      	beq.n	8010224 <__adddf3+0x84>
 801021e:	4252      	negs	r2, r2
 8010220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010224:	ea94 0f05 	teq	r4, r5
 8010228:	f000 80a7 	beq.w	801037a <__adddf3+0x1da>
 801022c:	f1a4 0401 	sub.w	r4, r4, #1
 8010230:	f1d5 0e20 	rsbs	lr, r5, #32
 8010234:	db0d      	blt.n	8010252 <__adddf3+0xb2>
 8010236:	fa02 fc0e 	lsl.w	ip, r2, lr
 801023a:	fa22 f205 	lsr.w	r2, r2, r5
 801023e:	1880      	adds	r0, r0, r2
 8010240:	f141 0100 	adc.w	r1, r1, #0
 8010244:	fa03 f20e 	lsl.w	r2, r3, lr
 8010248:	1880      	adds	r0, r0, r2
 801024a:	fa43 f305 	asr.w	r3, r3, r5
 801024e:	4159      	adcs	r1, r3
 8010250:	e00e      	b.n	8010270 <__adddf3+0xd0>
 8010252:	f1a5 0520 	sub.w	r5, r5, #32
 8010256:	f10e 0e20 	add.w	lr, lr, #32
 801025a:	2a01      	cmp	r2, #1
 801025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8010260:	bf28      	it	cs
 8010262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010266:	fa43 f305 	asr.w	r3, r3, r5
 801026a:	18c0      	adds	r0, r0, r3
 801026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8010270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010274:	d507      	bpl.n	8010286 <__adddf3+0xe6>
 8010276:	f04f 0e00 	mov.w	lr, #0
 801027a:	f1dc 0c00 	rsbs	ip, ip, #0
 801027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8010282:	eb6e 0101 	sbc.w	r1, lr, r1
 8010286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801028a:	d31b      	bcc.n	80102c4 <__adddf3+0x124>
 801028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8010290:	d30c      	bcc.n	80102ac <__adddf3+0x10c>
 8010292:	0849      	lsrs	r1, r1, #1
 8010294:	ea5f 0030 	movs.w	r0, r0, rrx
 8010298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 801029c:	f104 0401 	add.w	r4, r4, #1
 80102a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80102a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80102a8:	f080 809a 	bcs.w	80103e0 <__adddf3+0x240>
 80102ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80102b0:	bf08      	it	eq
 80102b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80102b6:	f150 0000 	adcs.w	r0, r0, #0
 80102ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80102be:	ea41 0105 	orr.w	r1, r1, r5
 80102c2:	bd30      	pop	{r4, r5, pc}
 80102c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80102c8:	4140      	adcs	r0, r0
 80102ca:	eb41 0101 	adc.w	r1, r1, r1
 80102ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80102d2:	f1a4 0401 	sub.w	r4, r4, #1
 80102d6:	d1e9      	bne.n	80102ac <__adddf3+0x10c>
 80102d8:	f091 0f00 	teq	r1, #0
 80102dc:	bf04      	itt	eq
 80102de:	4601      	moveq	r1, r0
 80102e0:	2000      	moveq	r0, #0
 80102e2:	fab1 f381 	clz	r3, r1
 80102e6:	bf08      	it	eq
 80102e8:	3320      	addeq	r3, #32
 80102ea:	f1a3 030b 	sub.w	r3, r3, #11
 80102ee:	f1b3 0220 	subs.w	r2, r3, #32
 80102f2:	da0c      	bge.n	801030e <__adddf3+0x16e>
 80102f4:	320c      	adds	r2, #12
 80102f6:	dd08      	ble.n	801030a <__adddf3+0x16a>
 80102f8:	f102 0c14 	add.w	ip, r2, #20
 80102fc:	f1c2 020c 	rsb	r2, r2, #12
 8010300:	fa01 f00c 	lsl.w	r0, r1, ip
 8010304:	fa21 f102 	lsr.w	r1, r1, r2
 8010308:	e00c      	b.n	8010324 <__adddf3+0x184>
 801030a:	f102 0214 	add.w	r2, r2, #20
 801030e:	bfd8      	it	le
 8010310:	f1c2 0c20 	rsble	ip, r2, #32
 8010314:	fa01 f102 	lsl.w	r1, r1, r2
 8010318:	fa20 fc0c 	lsr.w	ip, r0, ip
 801031c:	bfdc      	itt	le
 801031e:	ea41 010c 	orrle.w	r1, r1, ip
 8010322:	4090      	lslle	r0, r2
 8010324:	1ae4      	subs	r4, r4, r3
 8010326:	bfa2      	ittt	ge
 8010328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 801032c:	4329      	orrge	r1, r5
 801032e:	bd30      	popge	{r4, r5, pc}
 8010330:	ea6f 0404 	mvn.w	r4, r4
 8010334:	3c1f      	subs	r4, #31
 8010336:	da1c      	bge.n	8010372 <__adddf3+0x1d2>
 8010338:	340c      	adds	r4, #12
 801033a:	dc0e      	bgt.n	801035a <__adddf3+0x1ba>
 801033c:	f104 0414 	add.w	r4, r4, #20
 8010340:	f1c4 0220 	rsb	r2, r4, #32
 8010344:	fa20 f004 	lsr.w	r0, r0, r4
 8010348:	fa01 f302 	lsl.w	r3, r1, r2
 801034c:	ea40 0003 	orr.w	r0, r0, r3
 8010350:	fa21 f304 	lsr.w	r3, r1, r4
 8010354:	ea45 0103 	orr.w	r1, r5, r3
 8010358:	bd30      	pop	{r4, r5, pc}
 801035a:	f1c4 040c 	rsb	r4, r4, #12
 801035e:	f1c4 0220 	rsb	r2, r4, #32
 8010362:	fa20 f002 	lsr.w	r0, r0, r2
 8010366:	fa01 f304 	lsl.w	r3, r1, r4
 801036a:	ea40 0003 	orr.w	r0, r0, r3
 801036e:	4629      	mov	r1, r5
 8010370:	bd30      	pop	{r4, r5, pc}
 8010372:	fa21 f004 	lsr.w	r0, r1, r4
 8010376:	4629      	mov	r1, r5
 8010378:	bd30      	pop	{r4, r5, pc}
 801037a:	f094 0f00 	teq	r4, #0
 801037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8010382:	bf06      	itte	eq
 8010384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8010388:	3401      	addeq	r4, #1
 801038a:	3d01      	subne	r5, #1
 801038c:	e74e      	b.n	801022c <__adddf3+0x8c>
 801038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010392:	bf18      	it	ne
 8010394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010398:	d029      	beq.n	80103ee <__adddf3+0x24e>
 801039a:	ea94 0f05 	teq	r4, r5
 801039e:	bf08      	it	eq
 80103a0:	ea90 0f02 	teqeq	r0, r2
 80103a4:	d005      	beq.n	80103b2 <__adddf3+0x212>
 80103a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80103aa:	bf04      	itt	eq
 80103ac:	4619      	moveq	r1, r3
 80103ae:	4610      	moveq	r0, r2
 80103b0:	bd30      	pop	{r4, r5, pc}
 80103b2:	ea91 0f03 	teq	r1, r3
 80103b6:	bf1e      	ittt	ne
 80103b8:	2100      	movne	r1, #0
 80103ba:	2000      	movne	r0, #0
 80103bc:	bd30      	popne	{r4, r5, pc}
 80103be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80103c2:	d105      	bne.n	80103d0 <__adddf3+0x230>
 80103c4:	0040      	lsls	r0, r0, #1
 80103c6:	4149      	adcs	r1, r1
 80103c8:	bf28      	it	cs
 80103ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80103ce:	bd30      	pop	{r4, r5, pc}
 80103d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80103d4:	bf3c      	itt	cc
 80103d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80103da:	bd30      	popcc	{r4, r5, pc}
 80103dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80103e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80103e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80103e8:	f04f 0000 	mov.w	r0, #0
 80103ec:	bd30      	pop	{r4, r5, pc}
 80103ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80103f2:	bf1a      	itte	ne
 80103f4:	4619      	movne	r1, r3
 80103f6:	4610      	movne	r0, r2
 80103f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80103fc:	bf1c      	itt	ne
 80103fe:	460b      	movne	r3, r1
 8010400:	4602      	movne	r2, r0
 8010402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010406:	bf06      	itte	eq
 8010408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 801040c:	ea91 0f03 	teqeq	r1, r3
 8010410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010414:	bd30      	pop	{r4, r5, pc}
 8010416:	bf00      	nop

08010418 <__aeabi_ui2d>:
 8010418:	f090 0f00 	teq	r0, #0
 801041c:	bf04      	itt	eq
 801041e:	2100      	moveq	r1, #0
 8010420:	4770      	bxeq	lr
 8010422:	b530      	push	{r4, r5, lr}
 8010424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801042c:	f04f 0500 	mov.w	r5, #0
 8010430:	f04f 0100 	mov.w	r1, #0
 8010434:	e750      	b.n	80102d8 <__adddf3+0x138>
 8010436:	bf00      	nop

08010438 <__aeabi_i2d>:
 8010438:	f090 0f00 	teq	r0, #0
 801043c:	bf04      	itt	eq
 801043e:	2100      	moveq	r1, #0
 8010440:	4770      	bxeq	lr
 8010442:	b530      	push	{r4, r5, lr}
 8010444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8010450:	bf48      	it	mi
 8010452:	4240      	negmi	r0, r0
 8010454:	f04f 0100 	mov.w	r1, #0
 8010458:	e73e      	b.n	80102d8 <__adddf3+0x138>
 801045a:	bf00      	nop

0801045c <__aeabi_f2d>:
 801045c:	0042      	lsls	r2, r0, #1
 801045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8010462:	ea4f 0131 	mov.w	r1, r1, rrx
 8010466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 801046a:	bf1f      	itttt	ne
 801046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8010470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010478:	4770      	bxne	lr
 801047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801047e:	bf08      	it	eq
 8010480:	4770      	bxeq	lr
 8010482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8010486:	bf04      	itt	eq
 8010488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 801048c:	4770      	bxeq	lr
 801048e:	b530      	push	{r4, r5, lr}
 8010490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8010494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801049c:	e71c      	b.n	80102d8 <__adddf3+0x138>
 801049e:	bf00      	nop

080104a0 <__aeabi_ul2d>:
 80104a0:	ea50 0201 	orrs.w	r2, r0, r1
 80104a4:	bf08      	it	eq
 80104a6:	4770      	bxeq	lr
 80104a8:	b530      	push	{r4, r5, lr}
 80104aa:	f04f 0500 	mov.w	r5, #0
 80104ae:	e00a      	b.n	80104c6 <__aeabi_l2d+0x16>

080104b0 <__aeabi_l2d>:
 80104b0:	ea50 0201 	orrs.w	r2, r0, r1
 80104b4:	bf08      	it	eq
 80104b6:	4770      	bxeq	lr
 80104b8:	b530      	push	{r4, r5, lr}
 80104ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80104be:	d502      	bpl.n	80104c6 <__aeabi_l2d+0x16>
 80104c0:	4240      	negs	r0, r0
 80104c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80104c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80104ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80104ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80104d2:	f43f aed8 	beq.w	8010286 <__adddf3+0xe6>
 80104d6:	f04f 0203 	mov.w	r2, #3
 80104da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80104de:	bf18      	it	ne
 80104e0:	3203      	addne	r2, #3
 80104e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80104e6:	bf18      	it	ne
 80104e8:	3203      	addne	r2, #3
 80104ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80104ee:	f1c2 0320 	rsb	r3, r2, #32
 80104f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80104f6:	fa20 f002 	lsr.w	r0, r0, r2
 80104fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80104fe:	ea40 000e 	orr.w	r0, r0, lr
 8010502:	fa21 f102 	lsr.w	r1, r1, r2
 8010506:	4414      	add	r4, r2
 8010508:	e6bd      	b.n	8010286 <__adddf3+0xe6>
 801050a:	bf00      	nop

0801050c <__aeabi_dmul>:
 801050c:	b570      	push	{r4, r5, r6, lr}
 801050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801051a:	bf1d      	ittte	ne
 801051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010520:	ea94 0f0c 	teqne	r4, ip
 8010524:	ea95 0f0c 	teqne	r5, ip
 8010528:	f000 f8de 	bleq	80106e8 <__aeabi_dmul+0x1dc>
 801052c:	442c      	add	r4, r5
 801052e:	ea81 0603 	eor.w	r6, r1, r3
 8010532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 801053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801053e:	bf18      	it	ne
 8010540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801054c:	d038      	beq.n	80105c0 <__aeabi_dmul+0xb4>
 801054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8010552:	f04f 0500 	mov.w	r5, #0
 8010556:	fbe1 e502 	umlal	lr, r5, r1, r2
 801055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8010562:	f04f 0600 	mov.w	r6, #0
 8010566:	fbe1 5603 	umlal	r5, r6, r1, r3
 801056a:	f09c 0f00 	teq	ip, #0
 801056e:	bf18      	it	ne
 8010570:	f04e 0e01 	orrne.w	lr, lr, #1
 8010574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 801057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8010580:	d204      	bcs.n	801058c <__aeabi_dmul+0x80>
 8010582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8010586:	416d      	adcs	r5, r5
 8010588:	eb46 0606 	adc.w	r6, r6, r6
 801058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8010590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8010598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 801059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80105a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80105a4:	bf88      	it	hi
 80105a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80105aa:	d81e      	bhi.n	80105ea <__aeabi_dmul+0xde>
 80105ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80105b0:	bf08      	it	eq
 80105b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80105b6:	f150 0000 	adcs.w	r0, r0, #0
 80105ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80105be:	bd70      	pop	{r4, r5, r6, pc}
 80105c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80105c4:	ea46 0101 	orr.w	r1, r6, r1
 80105c8:	ea40 0002 	orr.w	r0, r0, r2
 80105cc:	ea81 0103 	eor.w	r1, r1, r3
 80105d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80105d4:	bfc2      	ittt	gt
 80105d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80105da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80105de:	bd70      	popgt	{r4, r5, r6, pc}
 80105e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80105e4:	f04f 0e00 	mov.w	lr, #0
 80105e8:	3c01      	subs	r4, #1
 80105ea:	f300 80ab 	bgt.w	8010744 <__aeabi_dmul+0x238>
 80105ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80105f2:	bfde      	ittt	le
 80105f4:	2000      	movle	r0, #0
 80105f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80105fa:	bd70      	pople	{r4, r5, r6, pc}
 80105fc:	f1c4 0400 	rsb	r4, r4, #0
 8010600:	3c20      	subs	r4, #32
 8010602:	da35      	bge.n	8010670 <__aeabi_dmul+0x164>
 8010604:	340c      	adds	r4, #12
 8010606:	dc1b      	bgt.n	8010640 <__aeabi_dmul+0x134>
 8010608:	f104 0414 	add.w	r4, r4, #20
 801060c:	f1c4 0520 	rsb	r5, r4, #32
 8010610:	fa00 f305 	lsl.w	r3, r0, r5
 8010614:	fa20 f004 	lsr.w	r0, r0, r4
 8010618:	fa01 f205 	lsl.w	r2, r1, r5
 801061c:	ea40 0002 	orr.w	r0, r0, r2
 8010620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801062c:	fa21 f604 	lsr.w	r6, r1, r4
 8010630:	eb42 0106 	adc.w	r1, r2, r6
 8010634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010638:	bf08      	it	eq
 801063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801063e:	bd70      	pop	{r4, r5, r6, pc}
 8010640:	f1c4 040c 	rsb	r4, r4, #12
 8010644:	f1c4 0520 	rsb	r5, r4, #32
 8010648:	fa00 f304 	lsl.w	r3, r0, r4
 801064c:	fa20 f005 	lsr.w	r0, r0, r5
 8010650:	fa01 f204 	lsl.w	r2, r1, r4
 8010654:	ea40 0002 	orr.w	r0, r0, r2
 8010658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010660:	f141 0100 	adc.w	r1, r1, #0
 8010664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010668:	bf08      	it	eq
 801066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801066e:	bd70      	pop	{r4, r5, r6, pc}
 8010670:	f1c4 0520 	rsb	r5, r4, #32
 8010674:	fa00 f205 	lsl.w	r2, r0, r5
 8010678:	ea4e 0e02 	orr.w	lr, lr, r2
 801067c:	fa20 f304 	lsr.w	r3, r0, r4
 8010680:	fa01 f205 	lsl.w	r2, r1, r5
 8010684:	ea43 0302 	orr.w	r3, r3, r2
 8010688:	fa21 f004 	lsr.w	r0, r1, r4
 801068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010690:	fa21 f204 	lsr.w	r2, r1, r4
 8010694:	ea20 0002 	bic.w	r0, r0, r2
 8010698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 801069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80106a0:	bf08      	it	eq
 80106a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80106a6:	bd70      	pop	{r4, r5, r6, pc}
 80106a8:	f094 0f00 	teq	r4, #0
 80106ac:	d10f      	bne.n	80106ce <__aeabi_dmul+0x1c2>
 80106ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80106b2:	0040      	lsls	r0, r0, #1
 80106b4:	eb41 0101 	adc.w	r1, r1, r1
 80106b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80106bc:	bf08      	it	eq
 80106be:	3c01      	subeq	r4, #1
 80106c0:	d0f7      	beq.n	80106b2 <__aeabi_dmul+0x1a6>
 80106c2:	ea41 0106 	orr.w	r1, r1, r6
 80106c6:	f095 0f00 	teq	r5, #0
 80106ca:	bf18      	it	ne
 80106cc:	4770      	bxne	lr
 80106ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80106d2:	0052      	lsls	r2, r2, #1
 80106d4:	eb43 0303 	adc.w	r3, r3, r3
 80106d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80106dc:	bf08      	it	eq
 80106de:	3d01      	subeq	r5, #1
 80106e0:	d0f7      	beq.n	80106d2 <__aeabi_dmul+0x1c6>
 80106e2:	ea43 0306 	orr.w	r3, r3, r6
 80106e6:	4770      	bx	lr
 80106e8:	ea94 0f0c 	teq	r4, ip
 80106ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80106f0:	bf18      	it	ne
 80106f2:	ea95 0f0c 	teqne	r5, ip
 80106f6:	d00c      	beq.n	8010712 <__aeabi_dmul+0x206>
 80106f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80106fc:	bf18      	it	ne
 80106fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010702:	d1d1      	bne.n	80106a8 <__aeabi_dmul+0x19c>
 8010704:	ea81 0103 	eor.w	r1, r1, r3
 8010708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801070c:	f04f 0000 	mov.w	r0, #0
 8010710:	bd70      	pop	{r4, r5, r6, pc}
 8010712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010716:	bf06      	itte	eq
 8010718:	4610      	moveq	r0, r2
 801071a:	4619      	moveq	r1, r3
 801071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010720:	d019      	beq.n	8010756 <__aeabi_dmul+0x24a>
 8010722:	ea94 0f0c 	teq	r4, ip
 8010726:	d102      	bne.n	801072e <__aeabi_dmul+0x222>
 8010728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 801072c:	d113      	bne.n	8010756 <__aeabi_dmul+0x24a>
 801072e:	ea95 0f0c 	teq	r5, ip
 8010732:	d105      	bne.n	8010740 <__aeabi_dmul+0x234>
 8010734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010738:	bf1c      	itt	ne
 801073a:	4610      	movne	r0, r2
 801073c:	4619      	movne	r1, r3
 801073e:	d10a      	bne.n	8010756 <__aeabi_dmul+0x24a>
 8010740:	ea81 0103 	eor.w	r1, r1, r3
 8010744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010750:	f04f 0000 	mov.w	r0, #0
 8010754:	bd70      	pop	{r4, r5, r6, pc}
 8010756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801075e:	bd70      	pop	{r4, r5, r6, pc}

08010760 <__aeabi_ddiv>:
 8010760:	b570      	push	{r4, r5, r6, lr}
 8010762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801076e:	bf1d      	ittte	ne
 8010770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010774:	ea94 0f0c 	teqne	r4, ip
 8010778:	ea95 0f0c 	teqne	r5, ip
 801077c:	f000 f8a7 	bleq	80108ce <__aeabi_ddiv+0x16e>
 8010780:	eba4 0405 	sub.w	r4, r4, r5
 8010784:	ea81 0e03 	eor.w	lr, r1, r3
 8010788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 801078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010790:	f000 8088 	beq.w	80108a4 <__aeabi_ddiv+0x144>
 8010794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 801079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80107a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80107a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80107a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80107ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80107b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80107b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80107b8:	429d      	cmp	r5, r3
 80107ba:	bf08      	it	eq
 80107bc:	4296      	cmpeq	r6, r2
 80107be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80107c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80107c6:	d202      	bcs.n	80107ce <__aeabi_ddiv+0x6e>
 80107c8:	085b      	lsrs	r3, r3, #1
 80107ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80107ce:	1ab6      	subs	r6, r6, r2
 80107d0:	eb65 0503 	sbc.w	r5, r5, r3
 80107d4:	085b      	lsrs	r3, r3, #1
 80107d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80107da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80107de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80107e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80107e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80107ea:	bf22      	ittt	cs
 80107ec:	1ab6      	subcs	r6, r6, r2
 80107ee:	4675      	movcs	r5, lr
 80107f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80107f4:	085b      	lsrs	r3, r3, #1
 80107f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80107fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80107fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010802:	bf22      	ittt	cs
 8010804:	1ab6      	subcs	r6, r6, r2
 8010806:	4675      	movcs	r5, lr
 8010808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 801080c:	085b      	lsrs	r3, r3, #1
 801080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8010812:	ebb6 0e02 	subs.w	lr, r6, r2
 8010816:	eb75 0e03 	sbcs.w	lr, r5, r3
 801081a:	bf22      	ittt	cs
 801081c:	1ab6      	subcs	r6, r6, r2
 801081e:	4675      	movcs	r5, lr
 8010820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010824:	085b      	lsrs	r3, r3, #1
 8010826:	ea4f 0232 	mov.w	r2, r2, rrx
 801082a:	ebb6 0e02 	subs.w	lr, r6, r2
 801082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010832:	bf22      	ittt	cs
 8010834:	1ab6      	subcs	r6, r6, r2
 8010836:	4675      	movcs	r5, lr
 8010838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 801083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8010840:	d018      	beq.n	8010874 <__aeabi_ddiv+0x114>
 8010842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 801084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801085e:	d1c0      	bne.n	80107e2 <__aeabi_ddiv+0x82>
 8010860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010864:	d10b      	bne.n	801087e <__aeabi_ddiv+0x11e>
 8010866:	ea41 0100 	orr.w	r1, r1, r0
 801086a:	f04f 0000 	mov.w	r0, #0
 801086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8010872:	e7b6      	b.n	80107e2 <__aeabi_ddiv+0x82>
 8010874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010878:	bf04      	itt	eq
 801087a:	4301      	orreq	r1, r0
 801087c:	2000      	moveq	r0, #0
 801087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010882:	bf88      	it	hi
 8010884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010888:	f63f aeaf 	bhi.w	80105ea <__aeabi_dmul+0xde>
 801088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8010890:	bf04      	itt	eq
 8010892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8010896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801089a:	f150 0000 	adcs.w	r0, r0, #0
 801089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80108a2:	bd70      	pop	{r4, r5, r6, pc}
 80108a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80108a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80108ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80108b0:	bfc2      	ittt	gt
 80108b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80108b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80108ba:	bd70      	popgt	{r4, r5, r6, pc}
 80108bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80108c0:	f04f 0e00 	mov.w	lr, #0
 80108c4:	3c01      	subs	r4, #1
 80108c6:	e690      	b.n	80105ea <__aeabi_dmul+0xde>
 80108c8:	ea45 0e06 	orr.w	lr, r5, r6
 80108cc:	e68d      	b.n	80105ea <__aeabi_dmul+0xde>
 80108ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80108d2:	ea94 0f0c 	teq	r4, ip
 80108d6:	bf08      	it	eq
 80108d8:	ea95 0f0c 	teqeq	r5, ip
 80108dc:	f43f af3b 	beq.w	8010756 <__aeabi_dmul+0x24a>
 80108e0:	ea94 0f0c 	teq	r4, ip
 80108e4:	d10a      	bne.n	80108fc <__aeabi_ddiv+0x19c>
 80108e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80108ea:	f47f af34 	bne.w	8010756 <__aeabi_dmul+0x24a>
 80108ee:	ea95 0f0c 	teq	r5, ip
 80108f2:	f47f af25 	bne.w	8010740 <__aeabi_dmul+0x234>
 80108f6:	4610      	mov	r0, r2
 80108f8:	4619      	mov	r1, r3
 80108fa:	e72c      	b.n	8010756 <__aeabi_dmul+0x24a>
 80108fc:	ea95 0f0c 	teq	r5, ip
 8010900:	d106      	bne.n	8010910 <__aeabi_ddiv+0x1b0>
 8010902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010906:	f43f aefd 	beq.w	8010704 <__aeabi_dmul+0x1f8>
 801090a:	4610      	mov	r0, r2
 801090c:	4619      	mov	r1, r3
 801090e:	e722      	b.n	8010756 <__aeabi_dmul+0x24a>
 8010910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010914:	bf18      	it	ne
 8010916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801091a:	f47f aec5 	bne.w	80106a8 <__aeabi_dmul+0x19c>
 801091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010922:	f47f af0d 	bne.w	8010740 <__aeabi_dmul+0x234>
 8010926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 801092a:	f47f aeeb 	bne.w	8010704 <__aeabi_dmul+0x1f8>
 801092e:	e712      	b.n	8010756 <__aeabi_dmul+0x24a>

08010930 <__gedf2>:
 8010930:	f04f 3cff 	mov.w	ip, #4294967295
 8010934:	e006      	b.n	8010944 <__cmpdf2+0x4>
 8010936:	bf00      	nop

08010938 <__ledf2>:
 8010938:	f04f 0c01 	mov.w	ip, #1
 801093c:	e002      	b.n	8010944 <__cmpdf2+0x4>
 801093e:	bf00      	nop

08010940 <__cmpdf2>:
 8010940:	f04f 0c01 	mov.w	ip, #1
 8010944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010954:	bf18      	it	ne
 8010956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 801095a:	d01b      	beq.n	8010994 <__cmpdf2+0x54>
 801095c:	b001      	add	sp, #4
 801095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010962:	bf0c      	ite	eq
 8010964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010968:	ea91 0f03 	teqne	r1, r3
 801096c:	bf02      	ittt	eq
 801096e:	ea90 0f02 	teqeq	r0, r2
 8010972:	2000      	moveq	r0, #0
 8010974:	4770      	bxeq	lr
 8010976:	f110 0f00 	cmn.w	r0, #0
 801097a:	ea91 0f03 	teq	r1, r3
 801097e:	bf58      	it	pl
 8010980:	4299      	cmppl	r1, r3
 8010982:	bf08      	it	eq
 8010984:	4290      	cmpeq	r0, r2
 8010986:	bf2c      	ite	cs
 8010988:	17d8      	asrcs	r0, r3, #31
 801098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801098e:	f040 0001 	orr.w	r0, r0, #1
 8010992:	4770      	bx	lr
 8010994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801099c:	d102      	bne.n	80109a4 <__cmpdf2+0x64>
 801099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80109a2:	d107      	bne.n	80109b4 <__cmpdf2+0x74>
 80109a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80109a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80109ac:	d1d6      	bne.n	801095c <__cmpdf2+0x1c>
 80109ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80109b2:	d0d3      	beq.n	801095c <__cmpdf2+0x1c>
 80109b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop

080109bc <__aeabi_cdrcmple>:
 80109bc:	4684      	mov	ip, r0
 80109be:	4610      	mov	r0, r2
 80109c0:	4662      	mov	r2, ip
 80109c2:	468c      	mov	ip, r1
 80109c4:	4619      	mov	r1, r3
 80109c6:	4663      	mov	r3, ip
 80109c8:	e000      	b.n	80109cc <__aeabi_cdcmpeq>
 80109ca:	bf00      	nop

080109cc <__aeabi_cdcmpeq>:
 80109cc:	b501      	push	{r0, lr}
 80109ce:	f7ff ffb7 	bl	8010940 <__cmpdf2>
 80109d2:	2800      	cmp	r0, #0
 80109d4:	bf48      	it	mi
 80109d6:	f110 0f00 	cmnmi.w	r0, #0
 80109da:	bd01      	pop	{r0, pc}

080109dc <__aeabi_dcmpeq>:
 80109dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80109e0:	f7ff fff4 	bl	80109cc <__aeabi_cdcmpeq>
 80109e4:	bf0c      	ite	eq
 80109e6:	2001      	moveq	r0, #1
 80109e8:	2000      	movne	r0, #0
 80109ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80109ee:	bf00      	nop

080109f0 <__aeabi_dcmplt>:
 80109f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80109f4:	f7ff ffea 	bl	80109cc <__aeabi_cdcmpeq>
 80109f8:	bf34      	ite	cc
 80109fa:	2001      	movcc	r0, #1
 80109fc:	2000      	movcs	r0, #0
 80109fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a02:	bf00      	nop

08010a04 <__aeabi_dcmple>:
 8010a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a08:	f7ff ffe0 	bl	80109cc <__aeabi_cdcmpeq>
 8010a0c:	bf94      	ite	ls
 8010a0e:	2001      	movls	r0, #1
 8010a10:	2000      	movhi	r0, #0
 8010a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a16:	bf00      	nop

08010a18 <__aeabi_dcmpge>:
 8010a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a1c:	f7ff ffce 	bl	80109bc <__aeabi_cdrcmple>
 8010a20:	bf94      	ite	ls
 8010a22:	2001      	movls	r0, #1
 8010a24:	2000      	movhi	r0, #0
 8010a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a2a:	bf00      	nop

08010a2c <__aeabi_dcmpgt>:
 8010a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a30:	f7ff ffc4 	bl	80109bc <__aeabi_cdrcmple>
 8010a34:	bf34      	ite	cc
 8010a36:	2001      	movcc	r0, #1
 8010a38:	2000      	movcs	r0, #0
 8010a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a3e:	bf00      	nop

08010a40 <__aeabi_dcmpun>:
 8010a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a48:	d102      	bne.n	8010a50 <__aeabi_dcmpun+0x10>
 8010a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010a4e:	d10a      	bne.n	8010a66 <__aeabi_dcmpun+0x26>
 8010a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a58:	d102      	bne.n	8010a60 <__aeabi_dcmpun+0x20>
 8010a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010a5e:	d102      	bne.n	8010a66 <__aeabi_dcmpun+0x26>
 8010a60:	f04f 0000 	mov.w	r0, #0
 8010a64:	4770      	bx	lr
 8010a66:	f04f 0001 	mov.w	r0, #1
 8010a6a:	4770      	bx	lr

08010a6c <__aeabi_d2f>:
 8010a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010a74:	bf24      	itt	cs
 8010a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010a7e:	d90d      	bls.n	8010a9c <__aeabi_d2f+0x30>
 8010a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010a94:	bf08      	it	eq
 8010a96:	f020 0001 	biceq.w	r0, r0, #1
 8010a9a:	4770      	bx	lr
 8010a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010aa0:	d121      	bne.n	8010ae6 <__aeabi_d2f+0x7a>
 8010aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010aa6:	bfbc      	itt	lt
 8010aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010aac:	4770      	bxlt	lr
 8010aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010ab6:	f1c2 0218 	rsb	r2, r2, #24
 8010aba:	f1c2 0c20 	rsb	ip, r2, #32
 8010abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8010ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8010ac6:	bf18      	it	ne
 8010ac8:	f040 0001 	orrne.w	r0, r0, #1
 8010acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010ad8:	ea40 000c 	orr.w	r0, r0, ip
 8010adc:	fa23 f302 	lsr.w	r3, r3, r2
 8010ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010ae4:	e7cc      	b.n	8010a80 <__aeabi_d2f+0x14>
 8010ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010aea:	d107      	bne.n	8010afc <__aeabi_d2f+0x90>
 8010aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010af0:	bf1e      	ittt	ne
 8010af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010afa:	4770      	bxne	lr
 8010afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop

08010b0c <__aeabi_uldivmod>:
 8010b0c:	b953      	cbnz	r3, 8010b24 <__aeabi_uldivmod+0x18>
 8010b0e:	b94a      	cbnz	r2, 8010b24 <__aeabi_uldivmod+0x18>
 8010b10:	2900      	cmp	r1, #0
 8010b12:	bf08      	it	eq
 8010b14:	2800      	cmpeq	r0, #0
 8010b16:	bf1c      	itt	ne
 8010b18:	f04f 31ff 	movne.w	r1, #4294967295
 8010b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8010b20:	f000 b972 	b.w	8010e08 <__aeabi_idiv0>
 8010b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8010b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010b2c:	f000 f806 	bl	8010b3c <__udivmoddi4>
 8010b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b38:	b004      	add	sp, #16
 8010b3a:	4770      	bx	lr

08010b3c <__udivmoddi4>:
 8010b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b40:	9e08      	ldr	r6, [sp, #32]
 8010b42:	4604      	mov	r4, r0
 8010b44:	4688      	mov	r8, r1
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d14b      	bne.n	8010be2 <__udivmoddi4+0xa6>
 8010b4a:	428a      	cmp	r2, r1
 8010b4c:	4615      	mov	r5, r2
 8010b4e:	d967      	bls.n	8010c20 <__udivmoddi4+0xe4>
 8010b50:	fab2 f282 	clz	r2, r2
 8010b54:	b14a      	cbz	r2, 8010b6a <__udivmoddi4+0x2e>
 8010b56:	f1c2 0720 	rsb	r7, r2, #32
 8010b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8010b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8010b62:	4095      	lsls	r5, r2
 8010b64:	ea47 0803 	orr.w	r8, r7, r3
 8010b68:	4094      	lsls	r4, r2
 8010b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010b6e:	0c23      	lsrs	r3, r4, #16
 8010b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8010b74:	fa1f fc85 	uxth.w	ip, r5
 8010b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8010b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010b80:	fb07 f10c 	mul.w	r1, r7, ip
 8010b84:	4299      	cmp	r1, r3
 8010b86:	d909      	bls.n	8010b9c <__udivmoddi4+0x60>
 8010b88:	18eb      	adds	r3, r5, r3
 8010b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8010b8e:	f080 811b 	bcs.w	8010dc8 <__udivmoddi4+0x28c>
 8010b92:	4299      	cmp	r1, r3
 8010b94:	f240 8118 	bls.w	8010dc8 <__udivmoddi4+0x28c>
 8010b98:	3f02      	subs	r7, #2
 8010b9a:	442b      	add	r3, r5
 8010b9c:	1a5b      	subs	r3, r3, r1
 8010b9e:	b2a4      	uxth	r4, r4
 8010ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8010ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8010ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8010bb0:	45a4      	cmp	ip, r4
 8010bb2:	d909      	bls.n	8010bc8 <__udivmoddi4+0x8c>
 8010bb4:	192c      	adds	r4, r5, r4
 8010bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8010bba:	f080 8107 	bcs.w	8010dcc <__udivmoddi4+0x290>
 8010bbe:	45a4      	cmp	ip, r4
 8010bc0:	f240 8104 	bls.w	8010dcc <__udivmoddi4+0x290>
 8010bc4:	3802      	subs	r0, #2
 8010bc6:	442c      	add	r4, r5
 8010bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8010bcc:	eba4 040c 	sub.w	r4, r4, ip
 8010bd0:	2700      	movs	r7, #0
 8010bd2:	b11e      	cbz	r6, 8010bdc <__udivmoddi4+0xa0>
 8010bd4:	40d4      	lsrs	r4, r2
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8010bdc:	4639      	mov	r1, r7
 8010bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010be2:	428b      	cmp	r3, r1
 8010be4:	d909      	bls.n	8010bfa <__udivmoddi4+0xbe>
 8010be6:	2e00      	cmp	r6, #0
 8010be8:	f000 80eb 	beq.w	8010dc2 <__udivmoddi4+0x286>
 8010bec:	2700      	movs	r7, #0
 8010bee:	e9c6 0100 	strd	r0, r1, [r6]
 8010bf2:	4638      	mov	r0, r7
 8010bf4:	4639      	mov	r1, r7
 8010bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bfa:	fab3 f783 	clz	r7, r3
 8010bfe:	2f00      	cmp	r7, #0
 8010c00:	d147      	bne.n	8010c92 <__udivmoddi4+0x156>
 8010c02:	428b      	cmp	r3, r1
 8010c04:	d302      	bcc.n	8010c0c <__udivmoddi4+0xd0>
 8010c06:	4282      	cmp	r2, r0
 8010c08:	f200 80fa 	bhi.w	8010e00 <__udivmoddi4+0x2c4>
 8010c0c:	1a84      	subs	r4, r0, r2
 8010c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8010c12:	2001      	movs	r0, #1
 8010c14:	4698      	mov	r8, r3
 8010c16:	2e00      	cmp	r6, #0
 8010c18:	d0e0      	beq.n	8010bdc <__udivmoddi4+0xa0>
 8010c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8010c1e:	e7dd      	b.n	8010bdc <__udivmoddi4+0xa0>
 8010c20:	b902      	cbnz	r2, 8010c24 <__udivmoddi4+0xe8>
 8010c22:	deff      	udf	#255	; 0xff
 8010c24:	fab2 f282 	clz	r2, r2
 8010c28:	2a00      	cmp	r2, #0
 8010c2a:	f040 808f 	bne.w	8010d4c <__udivmoddi4+0x210>
 8010c2e:	1b49      	subs	r1, r1, r5
 8010c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010c34:	fa1f f885 	uxth.w	r8, r5
 8010c38:	2701      	movs	r7, #1
 8010c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8010c3e:	0c23      	lsrs	r3, r4, #16
 8010c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8010c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010c48:	fb08 f10c 	mul.w	r1, r8, ip
 8010c4c:	4299      	cmp	r1, r3
 8010c4e:	d907      	bls.n	8010c60 <__udivmoddi4+0x124>
 8010c50:	18eb      	adds	r3, r5, r3
 8010c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8010c56:	d202      	bcs.n	8010c5e <__udivmoddi4+0x122>
 8010c58:	4299      	cmp	r1, r3
 8010c5a:	f200 80cd 	bhi.w	8010df8 <__udivmoddi4+0x2bc>
 8010c5e:	4684      	mov	ip, r0
 8010c60:	1a59      	subs	r1, r3, r1
 8010c62:	b2a3      	uxth	r3, r4
 8010c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8010c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8010c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8010c70:	fb08 f800 	mul.w	r8, r8, r0
 8010c74:	45a0      	cmp	r8, r4
 8010c76:	d907      	bls.n	8010c88 <__udivmoddi4+0x14c>
 8010c78:	192c      	adds	r4, r5, r4
 8010c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c7e:	d202      	bcs.n	8010c86 <__udivmoddi4+0x14a>
 8010c80:	45a0      	cmp	r8, r4
 8010c82:	f200 80b6 	bhi.w	8010df2 <__udivmoddi4+0x2b6>
 8010c86:	4618      	mov	r0, r3
 8010c88:	eba4 0408 	sub.w	r4, r4, r8
 8010c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8010c90:	e79f      	b.n	8010bd2 <__udivmoddi4+0x96>
 8010c92:	f1c7 0c20 	rsb	ip, r7, #32
 8010c96:	40bb      	lsls	r3, r7
 8010c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8010c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8010ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8010ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8010ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8010cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8010cb0:	4325      	orrs	r5, r4
 8010cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8010cb6:	0c2c      	lsrs	r4, r5, #16
 8010cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8010cbc:	fa1f fa8e 	uxth.w	sl, lr
 8010cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8010cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8010cc8:	429c      	cmp	r4, r3
 8010cca:	fa02 f207 	lsl.w	r2, r2, r7
 8010cce:	fa00 f107 	lsl.w	r1, r0, r7
 8010cd2:	d90b      	bls.n	8010cec <__udivmoddi4+0x1b0>
 8010cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8010cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8010cdc:	f080 8087 	bcs.w	8010dee <__udivmoddi4+0x2b2>
 8010ce0:	429c      	cmp	r4, r3
 8010ce2:	f240 8084 	bls.w	8010dee <__udivmoddi4+0x2b2>
 8010ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8010cea:	4473      	add	r3, lr
 8010cec:	1b1b      	subs	r3, r3, r4
 8010cee:	b2ad      	uxth	r5, r5
 8010cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8010cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8010cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8010cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8010d00:	45a2      	cmp	sl, r4
 8010d02:	d908      	bls.n	8010d16 <__udivmoddi4+0x1da>
 8010d04:	eb1e 0404 	adds.w	r4, lr, r4
 8010d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d0c:	d26b      	bcs.n	8010de6 <__udivmoddi4+0x2aa>
 8010d0e:	45a2      	cmp	sl, r4
 8010d10:	d969      	bls.n	8010de6 <__udivmoddi4+0x2aa>
 8010d12:	3802      	subs	r0, #2
 8010d14:	4474      	add	r4, lr
 8010d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8010d1e:	eba4 040a 	sub.w	r4, r4, sl
 8010d22:	454c      	cmp	r4, r9
 8010d24:	46c2      	mov	sl, r8
 8010d26:	464b      	mov	r3, r9
 8010d28:	d354      	bcc.n	8010dd4 <__udivmoddi4+0x298>
 8010d2a:	d051      	beq.n	8010dd0 <__udivmoddi4+0x294>
 8010d2c:	2e00      	cmp	r6, #0
 8010d2e:	d069      	beq.n	8010e04 <__udivmoddi4+0x2c8>
 8010d30:	ebb1 050a 	subs.w	r5, r1, sl
 8010d34:	eb64 0403 	sbc.w	r4, r4, r3
 8010d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8010d3c:	40fd      	lsrs	r5, r7
 8010d3e:	40fc      	lsrs	r4, r7
 8010d40:	ea4c 0505 	orr.w	r5, ip, r5
 8010d44:	e9c6 5400 	strd	r5, r4, [r6]
 8010d48:	2700      	movs	r7, #0
 8010d4a:	e747      	b.n	8010bdc <__udivmoddi4+0xa0>
 8010d4c:	f1c2 0320 	rsb	r3, r2, #32
 8010d50:	fa20 f703 	lsr.w	r7, r0, r3
 8010d54:	4095      	lsls	r5, r2
 8010d56:	fa01 f002 	lsl.w	r0, r1, r2
 8010d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8010d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010d62:	4338      	orrs	r0, r7
 8010d64:	0c01      	lsrs	r1, r0, #16
 8010d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8010d6a:	fa1f f885 	uxth.w	r8, r5
 8010d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8010d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010d76:	fb07 f308 	mul.w	r3, r7, r8
 8010d7a:	428b      	cmp	r3, r1
 8010d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8010d80:	d907      	bls.n	8010d92 <__udivmoddi4+0x256>
 8010d82:	1869      	adds	r1, r5, r1
 8010d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8010d88:	d22f      	bcs.n	8010dea <__udivmoddi4+0x2ae>
 8010d8a:	428b      	cmp	r3, r1
 8010d8c:	d92d      	bls.n	8010dea <__udivmoddi4+0x2ae>
 8010d8e:	3f02      	subs	r7, #2
 8010d90:	4429      	add	r1, r5
 8010d92:	1acb      	subs	r3, r1, r3
 8010d94:	b281      	uxth	r1, r0
 8010d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8010d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8010d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010da2:	fb00 f308 	mul.w	r3, r0, r8
 8010da6:	428b      	cmp	r3, r1
 8010da8:	d907      	bls.n	8010dba <__udivmoddi4+0x27e>
 8010daa:	1869      	adds	r1, r5, r1
 8010dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8010db0:	d217      	bcs.n	8010de2 <__udivmoddi4+0x2a6>
 8010db2:	428b      	cmp	r3, r1
 8010db4:	d915      	bls.n	8010de2 <__udivmoddi4+0x2a6>
 8010db6:	3802      	subs	r0, #2
 8010db8:	4429      	add	r1, r5
 8010dba:	1ac9      	subs	r1, r1, r3
 8010dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8010dc0:	e73b      	b.n	8010c3a <__udivmoddi4+0xfe>
 8010dc2:	4637      	mov	r7, r6
 8010dc4:	4630      	mov	r0, r6
 8010dc6:	e709      	b.n	8010bdc <__udivmoddi4+0xa0>
 8010dc8:	4607      	mov	r7, r0
 8010dca:	e6e7      	b.n	8010b9c <__udivmoddi4+0x60>
 8010dcc:	4618      	mov	r0, r3
 8010dce:	e6fb      	b.n	8010bc8 <__udivmoddi4+0x8c>
 8010dd0:	4541      	cmp	r1, r8
 8010dd2:	d2ab      	bcs.n	8010d2c <__udivmoddi4+0x1f0>
 8010dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8010dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8010ddc:	3801      	subs	r0, #1
 8010dde:	4613      	mov	r3, r2
 8010de0:	e7a4      	b.n	8010d2c <__udivmoddi4+0x1f0>
 8010de2:	4660      	mov	r0, ip
 8010de4:	e7e9      	b.n	8010dba <__udivmoddi4+0x27e>
 8010de6:	4618      	mov	r0, r3
 8010de8:	e795      	b.n	8010d16 <__udivmoddi4+0x1da>
 8010dea:	4667      	mov	r7, ip
 8010dec:	e7d1      	b.n	8010d92 <__udivmoddi4+0x256>
 8010dee:	4681      	mov	r9, r0
 8010df0:	e77c      	b.n	8010cec <__udivmoddi4+0x1b0>
 8010df2:	3802      	subs	r0, #2
 8010df4:	442c      	add	r4, r5
 8010df6:	e747      	b.n	8010c88 <__udivmoddi4+0x14c>
 8010df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8010dfc:	442b      	add	r3, r5
 8010dfe:	e72f      	b.n	8010c60 <__udivmoddi4+0x124>
 8010e00:	4638      	mov	r0, r7
 8010e02:	e708      	b.n	8010c16 <__udivmoddi4+0xda>
 8010e04:	4637      	mov	r7, r6
 8010e06:	e6e9      	b.n	8010bdc <__udivmoddi4+0xa0>

08010e08 <__aeabi_idiv0>:
 8010e08:	4770      	bx	lr
 8010e0a:	bf00      	nop

08010e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b085      	sub	sp, #20
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8010e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	4313      	orrs	r3, r2
 8010e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4013      	ands	r3, r2
 8010e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010e30:	68fb      	ldr	r3, [r7, #12]
}
 8010e32:	bf00      	nop
 8010e34:	3714      	adds	r7, #20
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr
	...

08010e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b086      	sub	sp, #24
 8010e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8010e46:	463b      	mov	r3, r7
 8010e48:	2200      	movs	r2, #0
 8010e4a:	601a      	str	r2, [r3, #0]
 8010e4c:	605a      	str	r2, [r3, #4]
 8010e4e:	609a      	str	r2, [r3, #8]
 8010e50:	60da      	str	r2, [r3, #12]
 8010e52:	611a      	str	r2, [r3, #16]
 8010e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8010e56:	4b2b      	ldr	r3, [pc, #172]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e58:	4a2b      	ldr	r2, [pc, #172]	; (8010f08 <MX_ADC1_Init+0xc8>)
 8010e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8010e5c:	4b29      	ldr	r3, [pc, #164]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8010e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8010e64:	4b27      	ldr	r3, [pc, #156]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e66:	2210      	movs	r2, #16
 8010e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8010e6a:	4b26      	ldr	r3, [pc, #152]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8010e70:	4b24      	ldr	r3, [pc, #144]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e72:	2200      	movs	r2, #0
 8010e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8010e76:	4b23      	ldr	r3, [pc, #140]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e78:	2204      	movs	r2, #4
 8010e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8010e7c:	4b21      	ldr	r3, [pc, #132]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e7e:	2200      	movs	r2, #0
 8010e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8010e82:	4b20      	ldr	r3, [pc, #128]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e84:	2201      	movs	r2, #1
 8010e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8010e88:	4b1e      	ldr	r3, [pc, #120]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e8a:	2201      	movs	r2, #1
 8010e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8010e8e:	4b1d      	ldr	r3, [pc, #116]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e90:	2200      	movs	r2, #0
 8010e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8010e96:	4b1b      	ldr	r3, [pc, #108]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e98:	2201      	movs	r2, #1
 8010e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010e9c:	4b19      	ldr	r3, [pc, #100]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010ea2:	4b18      	ldr	r3, [pc, #96]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8010ea8:	4b16      	ldr	r3, [pc, #88]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010eaa:	2201      	movs	r2, #1
 8010eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8010eb0:	4b14      	ldr	r3, [pc, #80]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8010eb6:	4b13      	ldr	r3, [pc, #76]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010eb8:	2200      	movs	r2, #0
 8010eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8010ebe:	4811      	ldr	r0, [pc, #68]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010ec0:	f005 fc0e 	bl	80166e0 <HAL_ADC_Init>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d001      	beq.n	8010ece <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8010eca:	f003 fa3b 	bl	8014344 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8010ece:	4b0f      	ldr	r3, [pc, #60]	; (8010f0c <MX_ADC1_Init+0xcc>)
 8010ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8010ed2:	2306      	movs	r3, #6
 8010ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8010ed6:	2306      	movs	r3, #6
 8010ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8010eda:	237f      	movs	r3, #127	; 0x7f
 8010edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8010ede:	2304      	movs	r3, #4
 8010ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010ee6:	463b      	mov	r3, r7
 8010ee8:	4619      	mov	r1, r3
 8010eea:	4806      	ldr	r0, [pc, #24]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010eec:	f005 fe2e 	bl	8016b4c <HAL_ADC_ConfigChannel>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d001      	beq.n	8010efa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8010ef6:	f003 fa25 	bl	8014344 <Error_Handler>
  }

}
 8010efa:	bf00      	nop
 8010efc:	3718      	adds	r7, #24
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	200279f8 	.word	0x200279f8
 8010f08:	50040000 	.word	0x50040000
 8010f0c:	14f00020 	.word	0x14f00020

08010f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b088      	sub	sp, #32
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f18:	f107 030c 	add.w	r3, r7, #12
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	601a      	str	r2, [r3, #0]
 8010f20:	605a      	str	r2, [r3, #4]
 8010f22:	609a      	str	r2, [r3, #8]
 8010f24:	60da      	str	r2, [r3, #12]
 8010f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4a21      	ldr	r2, [pc, #132]	; (8010fb4 <HAL_ADC_MspInit+0xa4>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d13c      	bne.n	8010fac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8010f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010f36:	f7ff ff69 	bl	8010e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010f3a:	2001      	movs	r0, #1
 8010f3c:	f7ff ff66 	bl	8010e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8010f40:	2301      	movs	r3, #1
 8010f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010f44:	2303      	movs	r3, #3
 8010f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f4c:	f107 030c 	add.w	r3, r7, #12
 8010f50:	4619      	mov	r1, r3
 8010f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010f56:	f007 fc27 	bl	80187a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8010f5a:	4b17      	ldr	r3, [pc, #92]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f5c:	4a17      	ldr	r2, [pc, #92]	; (8010fbc <HAL_ADC_MspInit+0xac>)
 8010f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8010f60:	4b15      	ldr	r3, [pc, #84]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f62:	2205      	movs	r2, #5
 8010f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010f66:	4b14      	ldr	r3, [pc, #80]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f68:	2200      	movs	r2, #0
 8010f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8010f6c:	4b12      	ldr	r3, [pc, #72]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f6e:	2200      	movs	r2, #0
 8010f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8010f72:	4b11      	ldr	r3, [pc, #68]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f74:	2280      	movs	r2, #128	; 0x80
 8010f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010f78:	4b0f      	ldr	r3, [pc, #60]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010f7e:	4b0e      	ldr	r3, [pc, #56]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f80:	2200      	movs	r2, #0
 8010f82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8010f84:	4b0c      	ldr	r3, [pc, #48]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f86:	2220      	movs	r2, #32
 8010f88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8010f8a:	4b0b      	ldr	r3, [pc, #44]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8010f90:	4809      	ldr	r0, [pc, #36]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f92:	f006 fef5 	bl	8017d80 <HAL_DMA_Init>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d001      	beq.n	8010fa0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8010f9c:	f003 f9d2 	bl	8014344 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	4a05      	ldr	r2, [pc, #20]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8010fa6:	4a04      	ldr	r2, [pc, #16]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8010fac:	bf00      	nop
 8010fae:	3720      	adds	r7, #32
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	50040000 	.word	0x50040000
 8010fb8:	20027a5c 	.word	0x20027a5c
 8010fbc:	40020008 	.word	0x40020008

08010fc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8010fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8010fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	608b      	str	r3, [r1, #8]
}
 8010fdc:	bf00      	nop
 8010fde:	370c      	adds	r7, #12
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr

08010fe8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8010fec:	f000 f80a 	bl	8011004 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8010ff0:	4903      	ldr	r1, [pc, #12]	; (8011000 <APPE_Init+0x18>)
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	f002 f920 	bl	8013238 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8010ff8:	f000 f80e 	bl	8011018 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8010ffc:	bf00      	nop
}
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	20028734 	.word	0x20028734

08011004 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8011004:	b580      	push	{r7, lr}
 8011006:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8011008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801100c:	f7ff ffd8 	bl	8010fc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8011010:	f015 fb70 	bl	80266f4 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8011014:	bf00      	nop
}
 8011016:	bd80      	pop	{r7, pc}

08011018 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b088      	sub	sp, #32
 801101c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 801101e:	f013 f9d9 	bl	80243d4 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8011022:	2000      	movs	r0, #0
 8011024:	f00d fda6 	bl	801eb74 <osMutexNew>
 8011028:	4602      	mov	r2, r0
 801102a:	4b17      	ldr	r3, [pc, #92]	; (8011088 <appe_Tl_Init+0x70>)
 801102c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 801102e:	2200      	movs	r2, #0
 8011030:	2100      	movs	r1, #0
 8011032:	2001      	movs	r0, #1
 8011034:	f00d fee6 	bl	801ee04 <osSemaphoreNew>
 8011038:	4602      	mov	r2, r0
 801103a:	4b14      	ldr	r3, [pc, #80]	; (801108c <appe_Tl_Init+0x74>)
 801103c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 801103e:	4a14      	ldr	r2, [pc, #80]	; (8011090 <appe_Tl_Init+0x78>)
 8011040:	2100      	movs	r1, #0
 8011042:	4814      	ldr	r0, [pc, #80]	; (8011094 <appe_Tl_Init+0x7c>)
 8011044:	f00d fa52 	bl	801e4ec <osThreadNew>
 8011048:	4602      	mov	r2, r0
 801104a:	4b13      	ldr	r3, [pc, #76]	; (8011098 <appe_Tl_Init+0x80>)
 801104c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 801104e:	4b13      	ldr	r3, [pc, #76]	; (801109c <appe_Tl_Init+0x84>)
 8011050:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8011052:	4b13      	ldr	r3, [pc, #76]	; (80110a0 <appe_Tl_Init+0x88>)
 8011054:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8011056:	463b      	mov	r3, r7
 8011058:	4619      	mov	r1, r3
 801105a:	4812      	ldr	r0, [pc, #72]	; (80110a4 <appe_Tl_Init+0x8c>)
 801105c:	f012 febe 	bl	8023ddc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8011060:	2300      	movs	r3, #0
 8011062:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8011064:	4b10      	ldr	r3, [pc, #64]	; (80110a8 <appe_Tl_Init+0x90>)
 8011066:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8011068:	4b10      	ldr	r3, [pc, #64]	; (80110ac <appe_Tl_Init+0x94>)
 801106a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 801106c:	f240 533c 	movw	r3, #1340	; 0x53c
 8011070:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8011072:	f107 0308 	add.w	r3, r7, #8
 8011076:	4618      	mov	r0, r3
 8011078:	f013 faea 	bl	8024650 <TL_MM_Init>

  TL_Enable();
 801107c:	f013 f9a4 	bl	80243c8 <TL_Enable>

  return;
 8011080:	bf00      	nop
}
 8011082:	3720      	adds	r7, #32
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	20027abc 	.word	0x20027abc
 801108c:	20027ad4 	.word	0x20027ad4
 8011090:	080289e8 	.word	0x080289e8
 8011094:	08011199 	.word	0x08011199
 8011098:	20027ac0 	.word	0x20027ac0
 801109c:	20030600 	.word	0x20030600
 80110a0:	080110b1 	.word	0x080110b1
 80110a4:	080110f1 	.word	0x080110f1
 80110a8:	2003070c 	.word	0x2003070c
 80110ac:	200300c4 	.word	0x200300c4

080110b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	4603      	mov	r3, r0
 80110b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80110ba:	79fb      	ldrb	r3, [r7, #7]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d002      	beq.n	80110c6 <APPE_SysStatusNot+0x16>
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d008      	beq.n	80110d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80110c4:	e00d      	b.n	80110e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80110c6:	4b09      	ldr	r3, [pc, #36]	; (80110ec <APPE_SysStatusNot+0x3c>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f04f 31ff 	mov.w	r1, #4294967295
 80110ce:	4618      	mov	r0, r3
 80110d0:	f00d fdea 	bl	801eca8 <osMutexAcquire>
      break;
 80110d4:	e005      	b.n	80110e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80110d6:	4b05      	ldr	r3, [pc, #20]	; (80110ec <APPE_SysStatusNot+0x3c>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4618      	mov	r0, r3
 80110dc:	f00d fe42 	bl	801ed64 <osMutexRelease>
      break;
 80110e0:	bf00      	nop
  }
  return;
 80110e2:	bf00      	nop
}
 80110e4:	3708      	adds	r7, #8
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	20027abc 	.word	0x20027abc

080110f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	330b      	adds	r3, #11
 80110fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	881b      	ldrh	r3, [r3, #0]
 8011104:	b29b      	uxth	r3, r3
 8011106:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 801110a:	d004      	beq.n	8011116 <APPE_SysUserEvtRx+0x26>
 801110c:	f249 2201 	movw	r2, #37377	; 0x9201
 8011110:	4293      	cmp	r3, r2
 8011112:	d003      	beq.n	801111c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8011114:	e008      	b.n	8011128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8011116:	f000 f833 	bl	8011180 <APPE_SysEvtReadyProcessing>
         break;
 801111a:	e005      	b.n	8011128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	789b      	ldrb	r3, [r3, #2]
 8011120:	4618      	mov	r0, r3
 8011122:	f000 f805 	bl	8011130 <APPE_SysEvtError>
         break;
 8011126:	bf00      	nop
  }
  return;
 8011128:	bf00      	nop
}
 801112a:	3710      	adds	r7, #16
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	4603      	mov	r3, r0
 8011138:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 801113a:	79fb      	ldrb	r3, [r7, #7]
 801113c:	2b7d      	cmp	r3, #125	; 0x7d
 801113e:	d002      	beq.n	8011146 <APPE_SysEvtError+0x16>
 8011140:	2b7e      	cmp	r3, #126	; 0x7e
 8011142:	d006      	beq.n	8011152 <APPE_SysEvtError+0x22>
 8011144:	e00b      	b.n	801115e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8011146:	4a0b      	ldr	r2, [pc, #44]	; (8011174 <APPE_SysEvtError+0x44>)
 8011148:	2101      	movs	r1, #1
 801114a:	2000      	movs	r0, #0
 801114c:	f004 f9b2 	bl	80154b4 <logApplication>
       break;
 8011150:	e00c      	b.n	801116c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8011152:	4a09      	ldr	r2, [pc, #36]	; (8011178 <APPE_SysEvtError+0x48>)
 8011154:	2101      	movs	r1, #1
 8011156:	2000      	movs	r0, #0
 8011158:	f004 f9ac 	bl	80154b4 <logApplication>
       break;
 801115c:	e006      	b.n	801116c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 801115e:	79fb      	ldrb	r3, [r7, #7]
 8011160:	4a06      	ldr	r2, [pc, #24]	; (801117c <APPE_SysEvtError+0x4c>)
 8011162:	2101      	movs	r1, #1
 8011164:	2000      	movs	r0, #0
 8011166:	f004 f9a5 	bl	80154b4 <logApplication>
       break;
 801116a:	bf00      	nop
  }
  return;
 801116c:	bf00      	nop
}
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	08027f78 	.word	0x08027f78
 8011178:	08027f9c 	.word	0x08027f9c
 801117c:	08027fbc 	.word	0x08027fbc

08011180 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8011180:	b580      	push	{r7, lr}
 8011182:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8011184:	f013 fad4 	bl	8024730 <TL_TRACES_Init>

  APP_THREAD_Init();
 8011188:	f013 fb52 	bl	8024830 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 801118c:	2100      	movs	r1, #0
 801118e:	2001      	movs	r0, #1
 8011190:	f015 fac2 	bl	8026718 <UTIL_LPM_SetOffMode>
  return;
 8011194:	bf00      	nop
}
 8011196:	bd80      	pop	{r7, pc}

08011198 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80111a0:	f04f 32ff 	mov.w	r2, #4294967295
 80111a4:	2100      	movs	r1, #0
 80111a6:	2001      	movs	r0, #1
 80111a8:	f00d fafe 	bl	801e7a8 <osThreadFlagsWait>
     shci_user_evt_proc();
 80111ac:	f012 fe32 	bl	8023e14 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80111b0:	e7f6      	b.n	80111a0 <ShciUserEvtProcess+0x8>
	...

080111b4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80111bc:	4b04      	ldr	r3, [pc, #16]	; (80111d0 <shci_notify_asynch_evt+0x1c>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	2101      	movs	r1, #1
 80111c2:	4618      	mov	r0, r3
 80111c4:	f00d fa3e 	bl	801e644 <osThreadFlagsSet>
  return;
 80111c8:	bf00      	nop
}
 80111ca:	3708      	adds	r7, #8
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}
 80111d0:	20027ac0 	.word	0x20027ac0

080111d4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80111dc:	4b04      	ldr	r3, [pc, #16]	; (80111f0 <shci_cmd_resp_release+0x1c>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f00d ff13 	bl	801f00c <osSemaphoreRelease>
  return;
 80111e6:	bf00      	nop
}
 80111e8:	3708      	adds	r7, #8
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	20027ad4 	.word	0x20027ad4

080111f4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80111fc:	4b05      	ldr	r3, [pc, #20]	; (8011214 <shci_cmd_resp_wait+0x20>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	f04f 31ff 	mov.w	r1, #4294967295
 8011204:	4618      	mov	r0, r3
 8011206:	f00d fe9b 	bl	801ef40 <osSemaphoreAcquire>
  return;
 801120a:	bf00      	nop
}
 801120c:	3708      	adds	r7, #8
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	20027ad4 	.word	0x20027ad4

08011218 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f013 fa51 	bl	80246c8 <TL_MM_EvtDone>
}
 8011226:	bf00      	nop
 8011228:	3708      	adds	r7, #8
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 801122e:	b480      	push	{r7}
 8011230:	af00      	add	r7, sp, #0

}
 8011232:	bf00      	nop
 8011234:	46bd      	mov	sp, r7
 8011236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123a:	4770      	bx	lr

0801123c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8011240:	f005 f814 	bl	801626c <HAL_GetTick>
 8011244:	4603      	mov	r3, r0
}
 8011246:	4618      	mov	r0, r3
 8011248:	bd80      	pop	{r7, pc}

0801124a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 801124a:	b480      	push	{r7}
 801124c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 801124e:	bf00      	nop
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr

08011258 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8011258:	b480      	push	{r7}
 801125a:	b083      	sub	sp, #12
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8011262:	4b06      	ldr	r3, [pc, #24]	; (801127c <vApplicationStackOverflowHook+0x24>)
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	b2db      	uxtb	r3, r3
 8011268:	3301      	adds	r3, #1
 801126a:	b2da      	uxtb	r2, r3
 801126c:	4b03      	ldr	r3, [pc, #12]	; (801127c <vApplicationStackOverflowHook+0x24>)
 801126e:	701a      	strb	r2, [r3, #0]
}
 8011270:	bf00      	nop
 8011272:	370c      	adds	r7, #12
 8011274:	46bd      	mov	sp, r7
 8011276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127a:	4770      	bx	lr
 801127c:	2000027c 	.word	0x2000027c

08011280 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8011280:	b480      	push	{r7}
 8011282:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8011284:	4b05      	ldr	r3, [pc, #20]	; (801129c <vApplicationMallocFailedHook+0x1c>)
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	b2db      	uxtb	r3, r3
 801128a:	3301      	adds	r3, #1
 801128c:	b2da      	uxtb	r2, r3
 801128e:	4b03      	ldr	r3, [pc, #12]	; (801129c <vApplicationMallocFailedHook+0x1c>)
 8011290:	701a      	strb	r2, [r3, #0]

}
 8011292:	bf00      	nop
 8011294:	46bd      	mov	sp, r7
 8011296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129a:	4770      	bx	lr
 801129c:	2000027c 	.word	0x2000027c

080112a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80112a0:	b580      	push	{r7, lr}
 80112a2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80112a4:	4a64      	ldr	r2, [pc, #400]	; (8011438 <MX_FREERTOS_Init+0x198>)
 80112a6:	2101      	movs	r1, #1
 80112a8:	2001      	movs	r0, #1
 80112aa:	f00d fdab 	bl	801ee04 <osSemaphoreNew>
 80112ae:	4602      	mov	r2, r0
 80112b0:	4b62      	ldr	r3, [pc, #392]	; (801143c <MX_FREERTOS_Init+0x19c>)
 80112b2:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80112b4:	4a62      	ldr	r2, [pc, #392]	; (8011440 <MX_FREERTOS_Init+0x1a0>)
 80112b6:	2101      	movs	r1, #1
 80112b8:	2001      	movs	r0, #1
 80112ba:	f00d fda3 	bl	801ee04 <osSemaphoreNew>
 80112be:	4602      	mov	r2, r0
 80112c0:	4b60      	ldr	r3, [pc, #384]	; (8011444 <MX_FREERTOS_Init+0x1a4>)
 80112c2:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80112c4:	4a60      	ldr	r2, [pc, #384]	; (8011448 <MX_FREERTOS_Init+0x1a8>)
 80112c6:	2101      	movs	r1, #1
 80112c8:	2001      	movs	r0, #1
 80112ca:	f00d fd9b 	bl	801ee04 <osSemaphoreNew>
 80112ce:	4602      	mov	r2, r0
 80112d0:	4b5e      	ldr	r3, [pc, #376]	; (801144c <MX_FREERTOS_Init+0x1ac>)
 80112d2:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, NULL, &viveTimer_attributes);
 80112d4:	4b5e      	ldr	r3, [pc, #376]	; (8011450 <MX_FREERTOS_Init+0x1b0>)
 80112d6:	2200      	movs	r2, #0
 80112d8:	2101      	movs	r1, #1
 80112da:	485e      	ldr	r0, [pc, #376]	; (8011454 <MX_FREERTOS_Init+0x1b4>)
 80112dc:	f00d fb3c 	bl	801e958 <osTimerNew>
 80112e0:	4602      	mov	r2, r0
 80112e2:	4b5d      	ldr	r3, [pc, #372]	; (8011458 <MX_FREERTOS_Init+0x1b8>)
 80112e4:	601a      	str	r2, [r3, #0]

  /* creation of watchDogTimer */
  watchDogTimerHandle = osTimerNew(watchDogReset, osTimerPeriodic, NULL, &watchDogTimer_attributes);
 80112e6:	4b5d      	ldr	r3, [pc, #372]	; (801145c <MX_FREERTOS_Init+0x1bc>)
 80112e8:	2200      	movs	r2, #0
 80112ea:	2101      	movs	r1, #1
 80112ec:	485c      	ldr	r0, [pc, #368]	; (8011460 <MX_FREERTOS_Init+0x1c0>)
 80112ee:	f00d fb33 	bl	801e958 <osTimerNew>
 80112f2:	4602      	mov	r2, r0
 80112f4:	4b5b      	ldr	r3, [pc, #364]	; (8011464 <MX_FREERTOS_Init+0x1c4>)
 80112f6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
//  /* start timers, add new ones, ... */
  osTimerStart(watchDogTimerHandle, WATCHDOG_PERIOD);
 80112f8:	4b5a      	ldr	r3, [pc, #360]	; (8011464 <MX_FREERTOS_Init+0x1c4>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f241 3188 	movw	r1, #5000	; 0x1388
 8011300:	4618      	mov	r0, r3
 8011302:	f00d fbad 	bl	801ea60 <osTimerStart>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 8011306:	4a58      	ldr	r2, [pc, #352]	; (8011468 <MX_FREERTOS_Init+0x1c8>)
 8011308:	216c      	movs	r1, #108	; 0x6c
 801130a:	200a      	movs	r0, #10
 801130c:	f00d fed6 	bl	801f0bc <osMessageQueueNew>
 8011310:	4602      	mov	r2, r0
 8011312:	4b56      	ldr	r3, [pc, #344]	; (801146c <MX_FREERTOS_Init+0x1cc>)
 8011314:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 8011316:	4a56      	ldr	r2, [pc, #344]	; (8011470 <MX_FREERTOS_Init+0x1d0>)
 8011318:	2104      	movs	r1, #4
 801131a:	2003      	movs	r0, #3
 801131c:	f00d fece 	bl	801f0bc <osMessageQueueNew>
 8011320:	4602      	mov	r2, r0
 8011322:	4b54      	ldr	r3, [pc, #336]	; (8011474 <MX_FREERTOS_Init+0x1d4>)
 8011324:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 8011326:	4a54      	ldr	r2, [pc, #336]	; (8011478 <MX_FREERTOS_Init+0x1d8>)
 8011328:	2106      	movs	r1, #6
 801132a:	2004      	movs	r0, #4
 801132c:	f00d fec6 	bl	801f0bc <osMessageQueueNew>
 8011330:	4602      	mov	r2, r0
 8011332:	4b52      	ldr	r3, [pc, #328]	; (801147c <MX_FREERTOS_Init+0x1dc>)
 8011334:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 8011336:	4a52      	ldr	r2, [pc, #328]	; (8011480 <MX_FREERTOS_Init+0x1e0>)
 8011338:	2118      	movs	r1, #24
 801133a:	200a      	movs	r0, #10
 801133c:	f00d febe 	bl	801f0bc <osMessageQueueNew>
 8011340:	4602      	mov	r2, r0
 8011342:	4b50      	ldr	r3, [pc, #320]	; (8011484 <MX_FREERTOS_Init+0x1e4>)
 8011344:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 8011346:	4a50      	ldr	r2, [pc, #320]	; (8011488 <MX_FREERTOS_Init+0x1e8>)
 8011348:	2128      	movs	r1, #40	; 0x28
 801134a:	200a      	movs	r0, #10
 801134c:	f00d feb6 	bl	801f0bc <osMessageQueueNew>
 8011350:	4602      	mov	r2, r0
 8011352:	4b4e      	ldr	r3, [pc, #312]	; (801148c <MX_FREERTOS_Init+0x1ec>)
 8011354:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8011356:	4a4e      	ldr	r2, [pc, #312]	; (8011490 <MX_FREERTOS_Init+0x1f0>)
 8011358:	2110      	movs	r1, #16
 801135a:	200a      	movs	r0, #10
 801135c:	f00d feae 	bl	801f0bc <osMessageQueueNew>
 8011360:	4602      	mov	r2, r0
 8011362:	4b4c      	ldr	r3, [pc, #304]	; (8011494 <MX_FREERTOS_Init+0x1f4>)
 8011364:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 8011366:	4a4c      	ldr	r2, [pc, #304]	; (8011498 <MX_FREERTOS_Init+0x1f8>)
 8011368:	2118      	movs	r1, #24
 801136a:	2003      	movs	r0, #3
 801136c:	f00d fea6 	bl	801f0bc <osMessageQueueNew>
 8011370:	4602      	mov	r2, r0
 8011372:	4b4a      	ldr	r3, [pc, #296]	; (801149c <MX_FREERTOS_Init+0x1fc>)
 8011374:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 8011376:	4a4a      	ldr	r2, [pc, #296]	; (80114a0 <MX_FREERTOS_Init+0x200>)
 8011378:	2106      	movs	r1, #6
 801137a:	200a      	movs	r0, #10
 801137c:	f00d fe9e 	bl	801f0bc <osMessageQueueNew>
 8011380:	4602      	mov	r2, r0
 8011382:	4b48      	ldr	r3, [pc, #288]	; (80114a4 <MX_FREERTOS_Init+0x204>)
 8011384:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 8011386:	4a48      	ldr	r2, [pc, #288]	; (80114a8 <MX_FREERTOS_Init+0x208>)
 8011388:	2118      	movs	r1, #24
 801138a:	200a      	movs	r0, #10
 801138c:	f00d fe96 	bl	801f0bc <osMessageQueueNew>
 8011390:	4602      	mov	r2, r0
 8011392:	4b46      	ldr	r3, [pc, #280]	; (80114ac <MX_FREERTOS_Init+0x20c>)
 8011394:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 8011396:	4a46      	ldr	r2, [pc, #280]	; (80114b0 <MX_FREERTOS_Init+0x210>)
 8011398:	2104      	movs	r1, #4
 801139a:	2001      	movs	r0, #1
 801139c:	f00d fe8e 	bl	801f0bc <osMessageQueueNew>
 80113a0:	4602      	mov	r2, r0
 80113a2:	4b44      	ldr	r3, [pc, #272]	; (80114b4 <MX_FREERTOS_Init+0x214>)
 80113a4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 80113a6:	4a44      	ldr	r2, [pc, #272]	; (80114b8 <MX_FREERTOS_Init+0x218>)
 80113a8:	2100      	movs	r1, #0
 80113aa:	4844      	ldr	r0, [pc, #272]	; (80114bc <MX_FREERTOS_Init+0x21c>)
 80113ac:	f00d f89e 	bl	801e4ec <osThreadNew>
 80113b0:	4602      	mov	r2, r0
 80113b2:	4b43      	ldr	r3, [pc, #268]	; (80114c0 <MX_FREERTOS_Init+0x220>)
 80113b4:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 80113b6:	4a43      	ldr	r2, [pc, #268]	; (80114c4 <MX_FREERTOS_Init+0x224>)
 80113b8:	2100      	movs	r1, #0
 80113ba:	4843      	ldr	r0, [pc, #268]	; (80114c8 <MX_FREERTOS_Init+0x228>)
 80113bc:	f00d f896 	bl	801e4ec <osThreadNew>
 80113c0:	4602      	mov	r2, r0
 80113c2:	4b42      	ldr	r3, [pc, #264]	; (80114cc <MX_FREERTOS_Init+0x22c>)
 80113c4:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80113c6:	4a42      	ldr	r2, [pc, #264]	; (80114d0 <MX_FREERTOS_Init+0x230>)
 80113c8:	2100      	movs	r1, #0
 80113ca:	4842      	ldr	r0, [pc, #264]	; (80114d4 <MX_FREERTOS_Init+0x234>)
 80113cc:	f00d f88e 	bl	801e4ec <osThreadNew>
 80113d0:	4602      	mov	r2, r0
 80113d2:	4b41      	ldr	r3, [pc, #260]	; (80114d8 <MX_FREERTOS_Init+0x238>)
 80113d4:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80113d6:	4a41      	ldr	r2, [pc, #260]	; (80114dc <MX_FREERTOS_Init+0x23c>)
 80113d8:	2100      	movs	r1, #0
 80113da:	4841      	ldr	r0, [pc, #260]	; (80114e0 <MX_FREERTOS_Init+0x240>)
 80113dc:	f00d f886 	bl	801e4ec <osThreadNew>
 80113e0:	4602      	mov	r2, r0
 80113e2:	4b40      	ldr	r3, [pc, #256]	; (80114e4 <MX_FREERTOS_Init+0x244>)
 80113e4:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 80113e6:	4a40      	ldr	r2, [pc, #256]	; (80114e8 <MX_FREERTOS_Init+0x248>)
 80113e8:	2100      	movs	r1, #0
 80113ea:	4840      	ldr	r0, [pc, #256]	; (80114ec <MX_FREERTOS_Init+0x24c>)
 80113ec:	f00d f87e 	bl	801e4ec <osThreadNew>
 80113f0:	4602      	mov	r2, r0
 80113f2:	4b3f      	ldr	r3, [pc, #252]	; (80114f0 <MX_FREERTOS_Init+0x250>)
 80113f4:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 80113f6:	4a3f      	ldr	r2, [pc, #252]	; (80114f4 <MX_FREERTOS_Init+0x254>)
 80113f8:	2100      	movs	r1, #0
 80113fa:	483f      	ldr	r0, [pc, #252]	; (80114f8 <MX_FREERTOS_Init+0x258>)
 80113fc:	f00d f876 	bl	801e4ec <osThreadNew>
 8011400:	4602      	mov	r2, r0
 8011402:	4b3e      	ldr	r3, [pc, #248]	; (80114fc <MX_FREERTOS_Init+0x25c>)
 8011404:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 8011406:	4a3e      	ldr	r2, [pc, #248]	; (8011500 <MX_FREERTOS_Init+0x260>)
 8011408:	2100      	movs	r1, #0
 801140a:	483e      	ldr	r0, [pc, #248]	; (8011504 <MX_FREERTOS_Init+0x264>)
 801140c:	f00d f86e 	bl	801e4ec <osThreadNew>
 8011410:	4602      	mov	r2, r0
 8011412:	4b3d      	ldr	r3, [pc, #244]	; (8011508 <MX_FREERTOS_Init+0x268>)
 8011414:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 8011416:	4b0b      	ldr	r3, [pc, #44]	; (8011444 <MX_FREERTOS_Init+0x1a4>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	2100      	movs	r1, #0
 801141c:	4618      	mov	r0, r3
 801141e:	f00d fd8f 	bl	801ef40 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8011422:	4b0a      	ldr	r3, [pc, #40]	; (801144c <MX_FREERTOS_Init+0x1ac>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2100      	movs	r1, #0
 8011428:	4618      	mov	r0, r3
 801142a:	f00d fd89 	bl	801ef40 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 801142e:	f7ff fddb 	bl	8010fe8 <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8011432:	bf00      	nop
 8011434:	bd80      	pop	{r7, pc}
 8011436:	bf00      	nop
 8011438:	08028c18 	.word	0x08028c18
 801143c:	20027bc4 	.word	0x20027bc4
 8011440:	08028c28 	.word	0x08028c28
 8011444:	20028008 	.word	0x20028008
 8011448:	08028c38 	.word	0x08028c38
 801144c:	20028000 	.word	0x20028000
 8011450:	08028bf8 	.word	0x08028bf8
 8011454:	08013ab9 	.word	0x08013ab9
 8011458:	20027bb4 	.word	0x20027bb4
 801145c:	08028c08 	.word	0x08028c08
 8011460:	0801151d 	.word	0x0801151d
 8011464:	20028018 	.word	0x20028018
 8011468:	08028b08 	.word	0x08028b08
 801146c:	20028014 	.word	0x20028014
 8011470:	08028b20 	.word	0x08028b20
 8011474:	20027bcc 	.word	0x20027bcc
 8011478:	08028b38 	.word	0x08028b38
 801147c:	20027ff8 	.word	0x20027ff8
 8011480:	08028b50 	.word	0x08028b50
 8011484:	20027bd0 	.word	0x20027bd0
 8011488:	08028b68 	.word	0x08028b68
 801148c:	20027bc8 	.word	0x20027bc8
 8011490:	08028b80 	.word	0x08028b80
 8011494:	20027bbc 	.word	0x20027bbc
 8011498:	08028b98 	.word	0x08028b98
 801149c:	20027bd8 	.word	0x20027bd8
 80114a0:	08028bb0 	.word	0x08028bb0
 80114a4:	20027ac4 	.word	0x20027ac4
 80114a8:	08028bc8 	.word	0x08028bc8
 80114ac:	20027ac8 	.word	0x20027ac8
 80114b0:	08028be0 	.word	0x08028be0
 80114b4:	20027bd4 	.word	0x20027bd4
 80114b8:	08028a0c 	.word	0x08028a0c
 80114bc:	0801150d 	.word	0x0801150d
 80114c0:	20027bac 	.word	0x20027bac
 80114c4:	08028a30 	.word	0x08028a30
 80114c8:	08013f41 	.word	0x08013f41
 80114cc:	20027bb8 	.word	0x20027bb8
 80114d0:	08028a54 	.word	0x08028a54
 80114d4:	08014355 	.word	0x08014355
 80114d8:	20027ffc 	.word	0x20027ffc
 80114dc:	08028a78 	.word	0x08028a78
 80114e0:	080138bd 	.word	0x080138bd
 80114e4:	2002801c 	.word	0x2002801c
 80114e8:	08028a9c 	.word	0x08028a9c
 80114ec:	08013a29 	.word	0x08013a29
 80114f0:	2002800c 	.word	0x2002800c
 80114f4:	08028ac0 	.word	0x08028ac0
 80114f8:	08013be1 	.word	0x08013be1
 80114fc:	20028004 	.word	0x20028004
 8011500:	08028ae4 	.word	0x08028ae4
 8011504:	08011539 	.word	0x08011539
 8011508:	20027bb0 	.word	0x20027bb0

0801150c <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8011514:	2001      	movs	r0, #1
 8011516:	f00d f9db 	bl	801e8d0 <osDelay>
 801151a:	e7fb      	b.n	8011514 <DefaultTask+0x8>

0801151c <watchDogReset>:
  /* USER CODE END DefaultTask */
}

/* watchDogReset function */
void watchDogReset(void *argument)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchDogReset */
	 HAL_IWDG_Refresh(&hiwdg);
 8011524:	4803      	ldr	r0, [pc, #12]	; (8011534 <watchDogReset+0x18>)
 8011526:	f009 faef 	bl	801ab08 <HAL_IWDG_Refresh>
  /* USER CODE END watchDogReset */
}
 801152a:	bf00      	nop
 801152c:	3708      	adds	r7, #8
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop
 8011534:	20028648 	.word	0x20028648

08011538 <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 8011538:	b580      	push	{r7, lr}
 801153a:	b084      	sub	sp, #16
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8011540:	f04f 32ff 	mov.w	r2, #4294967295
 8011544:	2100      	movs	r1, #0
 8011546:	2001      	movs	r0, #1
 8011548:	f00d f92e 	bl	801e7a8 <osThreadFlagsWait>
 801154c:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	f003 0301 	and.w	r3, r3, #1
 8011554:	2b00      	cmp	r3, #0
 8011556:	d0f3      	beq.n	8011540 <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8011558:	4b62      	ldr	r3, [pc, #392]	; (80116e4 <BlinkTask+0x1ac>)
 801155a:	6818      	ldr	r0, [r3, #0]
 801155c:	f04f 33ff 	mov.w	r3, #4294967295
 8011560:	2200      	movs	r2, #0
 8011562:	4961      	ldr	r1, [pc, #388]	; (80116e8 <BlinkTask+0x1b0>)
 8011564:	f00d fea4 	bl	801f2b0 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 8011568:	4b5f      	ldr	r3, [pc, #380]	; (80116e8 <BlinkTask+0x1b0>)
 801156a:	2201      	movs	r2, #1
 801156c:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 801156e:	4b5d      	ldr	r3, [pc, #372]	; (80116e4 <BlinkTask+0x1ac>)
 8011570:	6818      	ldr	r0, [r3, #0]
 8011572:	2300      	movs	r3, #0
 8011574:	2200      	movs	r2, #0
 8011576:	495c      	ldr	r1, [pc, #368]	; (80116e8 <BlinkTask+0x1b0>)
 8011578:	f00d fe26 	bl	801f1c8 <osMessageQueuePut>

			// start timer and PWM channel for blink LED
			HAL_TIM_Base_Start(&htim2);
 801157c:	485b      	ldr	r0, [pc, #364]	; (80116ec <BlinkTask+0x1b4>)
 801157e:	f00b fcd1 	bl	801cf24 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8011582:	2104      	movs	r1, #4
 8011584:	4859      	ldr	r0, [pc, #356]	; (80116ec <BlinkTask+0x1b4>)
 8011586:	f00b fd83 	bl	801d090 <HAL_TIM_PWM_Start>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 801158a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801158e:	4958      	ldr	r1, [pc, #352]	; (80116f0 <BlinkTask+0x1b8>)
 8011590:	4858      	ldr	r0, [pc, #352]	; (80116f4 <BlinkTask+0x1bc>)
 8011592:	f005 f9eb 	bl	801696c <HAL_ADC_Start_DMA>
			// message passing until told to stop
			//      note: DMA triggers callback where buffers are switched and the full one
			//      is passed by reference via queue to masterThread for packetization
			while (1) {
				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 8011596:	f04f 32ff 	mov.w	r2, #4294967295
 801159a:	2100      	movs	r1, #0
 801159c:	2006      	movs	r0, #6
 801159e:	f00d f903 	bl	801e7a8 <osThreadFlagsWait>
 80115a2:	60f8      	str	r0, [r7, #12]

				if ((evt & 0x00000004U) == 0x00000004U) {
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	f003 0304 	and.w	r3, r3, #4
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d064      	beq.n	8011678 <BlinkTask+0x140>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 80115ae:	4b52      	ldr	r3, [pc, #328]	; (80116f8 <BlinkTask+0x1c0>)
 80115b0:	edd3 7a00 	vldr	s15, [r3]
 80115b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80115b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115bc:	d108      	bne.n	80115d0 <BlinkTask+0x98>
						previousTick_ms = HAL_GetTick();
 80115be:	f004 fe55 	bl	801626c <HAL_GetTick>
 80115c2:	ee07 0a90 	vmov	s15, r0
 80115c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115ca:	4b4b      	ldr	r3, [pc, #300]	; (80116f8 <BlinkTask+0x1c0>)
 80115cc:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 80115d0:	f004 fe4c 	bl	801626c <HAL_GetTick>
 80115d4:	ee07 0a90 	vmov	s15, r0
 80115d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80115dc:	4b46      	ldr	r3, [pc, #280]	; (80116f8 <BlinkTask+0x1c0>)
 80115de:	edd3 7a00 	vldr	s15, [r3]
 80115e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80115e6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80115ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80115ee:	4b43      	ldr	r3, [pc, #268]	; (80116fc <BlinkTask+0x1c4>)
 80115f0:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 80115f4:	4b42      	ldr	r3, [pc, #264]	; (8011700 <BlinkTask+0x1c8>)
 80115f6:	2200      	movs	r2, #0
 80115f8:	601a      	str	r2, [r3, #0]
 80115fa:	e039      	b.n	8011670 <BlinkTask+0x138>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80115fc:	4b40      	ldr	r3, [pc, #256]	; (8011700 <BlinkTask+0x1c8>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2264      	movs	r2, #100	; 0x64
 8011602:	fb02 f303 	mul.w	r3, r2, r3
 8011606:	4a3a      	ldr	r2, [pc, #232]	; (80116f0 <BlinkTask+0x1b8>)
 8011608:	4413      	add	r3, r2
 801160a:	4a3e      	ldr	r2, [pc, #248]	; (8011704 <BlinkTask+0x1cc>)
 801160c:	4610      	mov	r0, r2
 801160e:	4619      	mov	r1, r3
 8011610:	2364      	movs	r3, #100	; 0x64
 8011612:	461a      	mov	r2, r3
 8011614:	f015 fb9e 	bl	8026d54 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 8011618:	4b37      	ldr	r3, [pc, #220]	; (80116f8 <BlinkTask+0x1c0>)
 801161a:	ed93 7a00 	vldr	s14, [r3]
 801161e:	4b37      	ldr	r3, [pc, #220]	; (80116fc <BlinkTask+0x1c4>)
 8011620:	edd3 7a00 	vldr	s15, [r3]
 8011624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801162c:	ee17 2a90 	vmov	r2, s15
 8011630:	4b34      	ldr	r3, [pc, #208]	; (8011704 <BlinkTask+0x1cc>)
 8011632:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 8011634:	4b34      	ldr	r3, [pc, #208]	; (8011708 <BlinkTask+0x1d0>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	4a32      	ldr	r2, [pc, #200]	; (8011704 <BlinkTask+0x1cc>)
 801163a:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 801163c:	4b31      	ldr	r3, [pc, #196]	; (8011704 <BlinkTask+0x1cc>)
 801163e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011640:	ee07 3a90 	vmov	s15, r3
 8011644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011648:	4b2b      	ldr	r3, [pc, #172]	; (80116f8 <BlinkTask+0x1c0>)
 801164a:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 801164e:	4b2e      	ldr	r3, [pc, #184]	; (8011708 <BlinkTask+0x1d0>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	3301      	adds	r3, #1
 8011654:	4a2c      	ldr	r2, [pc, #176]	; (8011708 <BlinkTask+0x1d0>)
 8011656:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 8011658:	4b2c      	ldr	r3, [pc, #176]	; (801170c <BlinkTask+0x1d4>)
 801165a:	6818      	ldr	r0, [r3, #0]
 801165c:	2300      	movs	r3, #0
 801165e:	2200      	movs	r2, #0
 8011660:	4928      	ldr	r1, [pc, #160]	; (8011704 <BlinkTask+0x1cc>)
 8011662:	f00d fdb1 	bl	801f1c8 <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 8011666:	4b26      	ldr	r3, [pc, #152]	; (8011700 <BlinkTask+0x1c8>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	3301      	adds	r3, #1
 801166c:	4a24      	ldr	r2, [pc, #144]	; (8011700 <BlinkTask+0x1c8>)
 801166e:	6013      	str	r3, [r2, #0]
 8011670:	4b23      	ldr	r3, [pc, #140]	; (8011700 <BlinkTask+0x1c8>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	2b09      	cmp	r3, #9
 8011676:	d9c1      	bls.n	80115fc <BlinkTask+0xc4>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	f003 0302 	and.w	r3, r3, #2
 801167e:	2b00      	cmp	r3, #0
 8011680:	d089      	beq.n	8011596 <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 8011682:	481c      	ldr	r0, [pc, #112]	; (80116f4 <BlinkTask+0x1bc>)
 8011684:	f005 f9f6 	bl	8016a74 <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8011688:	2104      	movs	r1, #4
 801168a:	4818      	ldr	r0, [pc, #96]	; (80116ec <BlinkTask+0x1b4>)
 801168c:	f00b fd4a 	bl	801d124 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8011690:	4816      	ldr	r0, [pc, #88]	; (80116ec <BlinkTask+0x1b4>)
 8011692:	f00b fc71 	bl	801cf78 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 8011696:	4b18      	ldr	r3, [pc, #96]	; (80116f8 <BlinkTask+0x1c0>)
 8011698:	f04f 0200 	mov.w	r2, #0
 801169c:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 801169e:	4b11      	ldr	r3, [pc, #68]	; (80116e4 <BlinkTask+0x1ac>)
 80116a0:	6818      	ldr	r0, [r3, #0]
 80116a2:	f04f 33ff 	mov.w	r3, #4294967295
 80116a6:	2200      	movs	r2, #0
 80116a8:	490f      	ldr	r1, [pc, #60]	; (80116e8 <BlinkTask+0x1b0>)
 80116aa:	f00d fe01 	bl	801f2b0 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 80116ae:	4b0e      	ldr	r3, [pc, #56]	; (80116e8 <BlinkTask+0x1b0>)
 80116b0:	2200      	movs	r2, #0
 80116b2:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 80116b4:	4b0c      	ldr	r3, [pc, #48]	; (80116e8 <BlinkTask+0x1b0>)
 80116b6:	795b      	ldrb	r3, [r3, #5]
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	d104      	bne.n	80116c6 <BlinkTask+0x18e>
						osSemaphoreRelease(locNotifyHandle);
 80116bc:	4b14      	ldr	r3, [pc, #80]	; (8011710 <BlinkTask+0x1d8>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	4618      	mov	r0, r3
 80116c2:	f00d fca3 	bl	801f00c <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 80116c6:	4b07      	ldr	r3, [pc, #28]	; (80116e4 <BlinkTask+0x1ac>)
 80116c8:	6818      	ldr	r0, [r3, #0]
 80116ca:	2300      	movs	r3, #0
 80116cc:	2200      	movs	r2, #0
 80116ce:	4906      	ldr	r1, [pc, #24]	; (80116e8 <BlinkTask+0x1b0>)
 80116d0:	f00d fd7a 	bl	801f1c8 <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 80116d4:	4b0d      	ldr	r3, [pc, #52]	; (801170c <BlinkTask+0x1d4>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	4618      	mov	r0, r3
 80116da:	f00d fe5b 	bl	801f394 <osMessageQueueReset>

					break;
 80116de:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80116e0:	e72e      	b.n	8011540 <BlinkTask+0x8>
 80116e2:	bf00      	nop
 80116e4:	20027bd4 	.word	0x20027bd4
 80116e8:	20028024 	.word	0x20028024
 80116ec:	20028798 	.word	0x20028798
 80116f0:	200002ec 	.word	0x200002ec
 80116f4:	200279f8 	.word	0x200279f8
 80116f8:	20000ac4 	.word	0x20000ac4
 80116fc:	20000ac8 	.word	0x20000ac8
 8011700:	20000ac0 	.word	0x20000ac0
 8011704:	20000280 	.word	0x20000280
 8011708:	20000abc 	.word	0x20000abc
 801170c:	20028014 	.word	0x20028014
 8011710:	20028008 	.word	0x20028008

08011714 <HAL_ADC_ConvCpltCallback>:
//volatile uint8_t i = 0;
//void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
//	i++;
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 801171c:	4b06      	ldr	r3, [pc, #24]	; (8011738 <HAL_ADC_ConvCpltCallback+0x24>)
 801171e:	4a07      	ldr	r2, [pc, #28]	; (801173c <HAL_ADC_ConvCpltCallback+0x28>)
 8011720:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8011722:	4b07      	ldr	r3, [pc, #28]	; (8011740 <HAL_ADC_ConvCpltCallback+0x2c>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	2104      	movs	r1, #4
 8011728:	4618      	mov	r0, r3
 801172a:	f00c ff8b 	bl	801e644 <osThreadFlagsSet>

}
 801172e:	bf00      	nop
 8011730:	3708      	adds	r7, #8
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop
 8011738:	20028020 	.word	0x20028020
 801173c:	200006d4 	.word	0x200006d4
 8011740:	20027bb0 	.word	0x20027bb0

08011744 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8011744:	b580      	push	{r7, lr}
 8011746:	b082      	sub	sp, #8
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 801174c:	4b06      	ldr	r3, [pc, #24]	; (8011768 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 801174e:	4a07      	ldr	r2, [pc, #28]	; (801176c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8011750:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8011752:	4b07      	ldr	r3, [pc, #28]	; (8011770 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	2104      	movs	r1, #4
 8011758:	4618      	mov	r0, r3
 801175a:	f00c ff73 	bl	801e644 <osThreadFlagsSet>

}
 801175e:	bf00      	nop
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	20028020 	.word	0x20028020
 801176c:	200002ec 	.word	0x200002ec
 8011770:	20027bb0 	.word	0x20027bb0

08011774 <LL_AHB2_GRP1_EnableClock>:
{
 8011774:	b480      	push	{r7}
 8011776:	b085      	sub	sp, #20
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801177c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011780:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	4313      	orrs	r3, r2
 801178a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801178c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	4013      	ands	r3, r2
 8011796:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011798:	68fb      	ldr	r3, [r7, #12]
}
 801179a:	bf00      	nop
 801179c:	3714      	adds	r7, #20
 801179e:	46bd      	mov	sp, r7
 80117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a4:	4770      	bx	lr
	...

080117a8 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80117ac:	4b12      	ldr	r3, [pc, #72]	; (80117f8 <MX_COMP1_Init+0x50>)
 80117ae:	4a13      	ldr	r2, [pc, #76]	; (80117fc <MX_COMP1_Init+0x54>)
 80117b0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 80117b2:	4b11      	ldr	r3, [pc, #68]	; (80117f8 <MX_COMP1_Init+0x50>)
 80117b4:	4a12      	ldr	r2, [pc, #72]	; (8011800 <MX_COMP1_Init+0x58>)
 80117b6:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 80117b8:	4b0f      	ldr	r3, [pc, #60]	; (80117f8 <MX_COMP1_Init+0x50>)
 80117ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80117be:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80117c0:	4b0d      	ldr	r3, [pc, #52]	; (80117f8 <MX_COMP1_Init+0x50>)
 80117c2:	2200      	movs	r2, #0
 80117c4:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80117c6:	4b0c      	ldr	r3, [pc, #48]	; (80117f8 <MX_COMP1_Init+0x50>)
 80117c8:	2200      	movs	r2, #0
 80117ca:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80117cc:	4b0a      	ldr	r3, [pc, #40]	; (80117f8 <MX_COMP1_Init+0x50>)
 80117ce:	2200      	movs	r2, #0
 80117d0:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80117d2:	4b09      	ldr	r3, [pc, #36]	; (80117f8 <MX_COMP1_Init+0x50>)
 80117d4:	2200      	movs	r2, #0
 80117d6:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80117d8:	4b07      	ldr	r3, [pc, #28]	; (80117f8 <MX_COMP1_Init+0x50>)
 80117da:	2200      	movs	r2, #0
 80117dc:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80117de:	4b06      	ldr	r3, [pc, #24]	; (80117f8 <MX_COMP1_Init+0x50>)
 80117e0:	2231      	movs	r2, #49	; 0x31
 80117e2:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80117e4:	4804      	ldr	r0, [pc, #16]	; (80117f8 <MX_COMP1_Init+0x50>)
 80117e6:	f005 ffab 	bl	8017740 <HAL_COMP_Init>
 80117ea:	4603      	mov	r3, r0
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d001      	beq.n	80117f4 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80117f0:	f002 fda8 	bl	8014344 <Error_Handler>
  }

}
 80117f4:	bf00      	nop
 80117f6:	bd80      	pop	{r7, pc}
 80117f8:	2002802c 	.word	0x2002802c
 80117fc:	40010200 	.word	0x40010200
 8011800:	00c00010 	.word	0x00c00010

08011804 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b088      	sub	sp, #32
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801180c:	f107 030c 	add.w	r3, r7, #12
 8011810:	2200      	movs	r2, #0
 8011812:	601a      	str	r2, [r3, #0]
 8011814:	605a      	str	r2, [r3, #4]
 8011816:	609a      	str	r2, [r3, #8]
 8011818:	60da      	str	r2, [r3, #12]
 801181a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	4a0f      	ldr	r2, [pc, #60]	; (8011860 <HAL_COMP_MspInit+0x5c>)
 8011822:	4293      	cmp	r3, r2
 8011824:	d117      	bne.n	8011856 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011826:	2001      	movs	r0, #1
 8011828:	f7ff ffa4 	bl	8011774 <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 801182c:	2302      	movs	r3, #2
 801182e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011830:	2303      	movs	r3, #3
 8011832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011834:	2300      	movs	r3, #0
 8011836:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8011838:	f107 030c 	add.w	r3, r7, #12
 801183c:	4619      	mov	r1, r3
 801183e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011842:	f006 ffb1 	bl	80187a8 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8011846:	2200      	movs	r2, #0
 8011848:	2105      	movs	r1, #5
 801184a:	2016      	movs	r0, #22
 801184c:	f006 fa41 	bl	8017cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8011850:	2016      	movs	r0, #22
 8011852:	f006 fa58 	bl	8017d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8011856:	bf00      	nop
 8011858:	3720      	adds	r7, #32
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	40010200 	.word	0x40010200

08011864 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 8011864:	b480      	push	{r7}
 8011866:	b089      	sub	sp, #36	; 0x24
 8011868:	af00      	add	r7, sp, #0
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 8011870:	f04f 33ff 	mov.w	r3, #4294967295
 8011874:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	881b      	ldrh	r3, [r3, #0]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d02a      	beq.n	80118d4 <process_pulse_lengths+0x70>
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	3302      	adds	r3, #2
 8011882:	881b      	ldrh	r3, [r3, #0]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d025      	beq.n	80118d4 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	881a      	ldrh	r2, [r3, #0]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	3302      	adds	r3, #2
 8011890:	881b      	ldrh	r3, [r3, #0]
 8011892:	429a      	cmp	r2, r3
 8011894:	bf8c      	ite	hi
 8011896:	2301      	movhi	r3, #1
 8011898:	2300      	movls	r3, #0
 801189a:	b2db      	uxtb	r3, r3
 801189c:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	3301      	adds	r3, #1
 80118a4:	68ba      	ldr	r2, [r7, #8]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d10e      	bne.n	80118c8 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	005a      	lsls	r2, r3, #1
 80118b0:	7efb      	ldrb	r3, [r7, #27]
 80118b2:	431a      	orrs	r2, r3
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	f003 0303 	and.w	r3, r3, #3
 80118c0:	4a1c      	ldr	r2, [pc, #112]	; (8011934 <process_pulse_lengths+0xd0>)
 80118c2:	5cd3      	ldrb	r3, [r2, r3]
 80118c4:	61fb      	str	r3, [r7, #28]
 80118c6:	e002      	b.n	80118ce <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 80118c8:	7efa      	ldrb	r2, [r7, #27]
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	68ba      	ldr	r2, [r7, #8]
 80118d2:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	db26      	blt.n	8011928 <process_pulse_lengths+0xc4>
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	689b      	ldr	r3, [r3, #8]
 80118de:	2b0f      	cmp	r3, #15
 80118e0:	dc22      	bgt.n	8011928 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	689b      	ldr	r3, [r3, #8]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d10a      	bne.n	8011900 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2201      	movs	r2, #1
 80118ee:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 80118f0:	69fa      	ldr	r2, [r7, #28]
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	1ad3      	subs	r3, r2, r3
 80118f6:	f003 0203 	and.w	r2, r3, #3
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 80118fe:	e013      	b.n	8011928 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	68da      	ldr	r2, [r3, #12]
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	4413      	add	r3, r2
 8011908:	f003 0303 	and.w	r3, r3, #3
 801190c:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	689b      	ldr	r3, [r3, #8]
 8011912:	69f9      	ldr	r1, [r7, #28]
 8011914:	697a      	ldr	r2, [r7, #20]
 8011916:	4291      	cmp	r1, r2
 8011918:	d101      	bne.n	801191e <process_pulse_lengths+0xba>
 801191a:	2201      	movs	r2, #1
 801191c:	e001      	b.n	8011922 <process_pulse_lengths+0xbe>
 801191e:	f04f 32ff 	mov.w	r2, #4294967295
 8011922:	441a      	add	r2, r3
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	609a      	str	r2, [r3, #8]
}
 8011928:	bf00      	nop
 801192a:	3724      	adds	r7, #36	; 0x24
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr
 8011934:	08028c48 	.word	0x08028c48

08011938 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 8011938:	b480      	push	{r7}
 801193a:	b083      	sub	sp, #12
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	689b      	ldr	r3, [r3, #8]
 8011946:	2b03      	cmp	r3, #3
 8011948:	dd06      	ble.n	8011958 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	68da      	ldr	r2, [r3, #12]
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	4413      	add	r3, r2
 8011952:	f003 0303 	and.w	r3, r3, #3
 8011956:	e001      	b.n	801195c <get_phase+0x24>
    } else {
        return -1;
 8011958:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801195c:	4618      	mov	r0, r3
 801195e:	370c      	adds	r7, #12
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr

08011968 <reset>:

void reset(CyclePhaseClassifier * self) {
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2200      	movs	r2, #0
 8011974:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f04f 32ff 	mov.w	r2, #4294967295
 801197c:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	4a05      	ldr	r2, [pc, #20]	; (8011998 <reset+0x30>)
 8011982:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	605a      	str	r2, [r3, #4]
}
 801198a:	bf00      	nop
 801198c:	370c      	adds	r7, #12
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr
 8011996:	bf00      	nop
 8011998:	427a0000 	.word	0x427a0000

0801199c <LL_AHB1_GRP1_EnableClock>:
{
 801199c:	b480      	push	{r7}
 801199e:	b085      	sub	sp, #20
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80119a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80119a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80119aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	4313      	orrs	r3, r2
 80119b2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80119b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80119b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	4013      	ands	r3, r2
 80119be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80119c0:	68fb      	ldr	r3, [r7, #12]
}
 80119c2:	bf00      	nop
 80119c4:	3714      	adds	r7, #20
 80119c6:	46bd      	mov	sp, r7
 80119c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119cc:	4770      	bx	lr

080119ce <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80119ce:	b580      	push	{r7, lr}
 80119d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80119d2:	2004      	movs	r0, #4
 80119d4:	f7ff ffe2 	bl	801199c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80119d8:	2001      	movs	r0, #1
 80119da:	f7ff ffdf 	bl	801199c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80119de:	2200      	movs	r2, #0
 80119e0:	2105      	movs	r1, #5
 80119e2:	200b      	movs	r0, #11
 80119e4:	f006 f975 	bl	8017cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80119e8:	200b      	movs	r0, #11
 80119ea:	f006 f98c 	bl	8017d06 <HAL_NVIC_EnableIRQ>

}
 80119ee:	bf00      	nop
 80119f0:	bd80      	pop	{r7, pc}
	...

080119f4 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 80119f8:	4b17      	ldr	r3, [pc, #92]	; (8011a58 <IMU_dataAvailable+0x64>)
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	2bff      	cmp	r3, #255	; 0xff
 80119fe:	d00d      	beq.n	8011a1c <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8011a00:	4b16      	ldr	r3, [pc, #88]	; (8011a5c <IMU_dataAvailable+0x68>)
 8011a02:	681a      	ldr	r2, [r3, #0]
 8011a04:	4b14      	ldr	r3, [pc, #80]	; (8011a58 <IMU_dataAvailable+0x64>)
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	b29b      	uxth	r3, r3
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	4610      	mov	r0, r2
 8011a0e:	f007 f83b 	bl	8018a88 <HAL_GPIO_ReadPin>
 8011a12:	4603      	mov	r3, r0
 8011a14:	2b01      	cmp	r3, #1
 8011a16:	d101      	bne.n	8011a1c <IMU_dataAvailable+0x28>
			return (false);
 8011a18:	2300      	movs	r3, #0
 8011a1a:	e01b      	b.n	8011a54 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8011a1c:	f000 fb3c 	bl	8012098 <IMU_receivePacket>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d015      	beq.n	8011a52 <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8011a26:	4b0e      	ldr	r3, [pc, #56]	; (8011a60 <IMU_dataAvailable+0x6c>)
 8011a28:	789b      	ldrb	r3, [r3, #2]
 8011a2a:	2203      	movs	r2, #3
 8011a2c:	4293      	cmp	r3, r2
 8011a2e:	d107      	bne.n	8011a40 <IMU_dataAvailable+0x4c>
 8011a30:	4b0c      	ldr	r3, [pc, #48]	; (8011a64 <IMU_dataAvailable+0x70>)
 8011a32:	781b      	ldrb	r3, [r3, #0]
 8011a34:	2bfb      	cmp	r3, #251	; 0xfb
 8011a36:	d103      	bne.n	8011a40 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8011a38:	f000 f832 	bl	8011aa0 <IMU_parseInputReport>
			return (true);
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	e009      	b.n	8011a54 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8011a40:	4b07      	ldr	r3, [pc, #28]	; (8011a60 <IMU_dataAvailable+0x6c>)
 8011a42:	789b      	ldrb	r3, [r3, #2]
 8011a44:	2202      	movs	r2, #2
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d103      	bne.n	8011a52 <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8011a4a:	f000 f80d 	bl	8011a68 <IMU_parseCommandReport>
			return (true);
 8011a4e:	2301      	movs	r3, #1
 8011a50:	e000      	b.n	8011a54 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8011a52:	2300      	movs	r3, #0
}
 8011a54:	4618      	mov	r0, r3
 8011a56:	bd80      	pop	{r7, pc}
 8011a58:	200280ae 	.word	0x200280ae
 8011a5c:	20028174 	.word	0x20028174
 8011a60:	2002805c 	.word	0x2002805c
 8011a64:	200280ec 	.word	0x200280ec

08011a68 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b083      	sub	sp, #12
 8011a6c:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8011a6e:	4b0a      	ldr	r3, [pc, #40]	; (8011a98 <IMU_parseCommandReport+0x30>)
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	2bf1      	cmp	r3, #241	; 0xf1
 8011a74:	d109      	bne.n	8011a8a <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8011a76:	4b08      	ldr	r3, [pc, #32]	; (8011a98 <IMU_parseCommandReport+0x30>)
 8011a78:	789b      	ldrb	r3, [r3, #2]
 8011a7a:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8011a7c:	79fb      	ldrb	r3, [r7, #7]
 8011a7e:	2b07      	cmp	r3, #7
 8011a80:	d103      	bne.n	8011a8a <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8011a82:	4b05      	ldr	r3, [pc, #20]	; (8011a98 <IMU_parseCommandReport+0x30>)
 8011a84:	795a      	ldrb	r2, [r3, #5]
 8011a86:	4b05      	ldr	r3, [pc, #20]	; (8011a9c <IMU_parseCommandReport+0x34>)
 8011a88:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8011a8a:	bf00      	nop
 8011a8c:	370c      	adds	r7, #12
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr
 8011a96:	bf00      	nop
 8011a98:	200280ec 	.word	0x200280ec
 8011a9c:	2002819f 	.word	0x2002819f

08011aa0 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b086      	sub	sp, #24
 8011aa4:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8011aa6:	4b96      	ldr	r3, [pc, #600]	; (8011d00 <IMU_parseInputReport+0x260>)
 8011aa8:	785b      	ldrb	r3, [r3, #1]
 8011aaa:	021b      	lsls	r3, r3, #8
 8011aac:	b21a      	sxth	r2, r3
 8011aae:	4b94      	ldr	r3, [pc, #592]	; (8011d00 <IMU_parseInputReport+0x260>)
 8011ab0:	781b      	ldrb	r3, [r3, #0]
 8011ab2:	b21b      	sxth	r3, r3
 8011ab4:	4313      	orrs	r3, r2
 8011ab6:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8011ab8:	8a3b      	ldrh	r3, [r7, #16]
 8011aba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011abe:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8011ac0:	8a3b      	ldrh	r3, [r7, #16]
 8011ac2:	3b04      	subs	r3, #4
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8011ac8:	4b8e      	ldr	r3, [pc, #568]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011aca:	791b      	ldrb	r3, [r3, #4]
 8011acc:	061a      	lsls	r2, r3, #24
 8011ace:	4b8d      	ldr	r3, [pc, #564]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011ad0:	78db      	ldrb	r3, [r3, #3]
 8011ad2:	041b      	lsls	r3, r3, #16
 8011ad4:	431a      	orrs	r2, r3
 8011ad6:	4b8b      	ldr	r3, [pc, #556]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011ad8:	789b      	ldrb	r3, [r3, #2]
 8011ada:	021b      	lsls	r3, r3, #8
 8011adc:	4313      	orrs	r3, r2
 8011ade:	4a89      	ldr	r2, [pc, #548]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011ae0:	7852      	ldrb	r2, [r2, #1]
 8011ae2:	4313      	orrs	r3, r2
 8011ae4:	4a88      	ldr	r2, [pc, #544]	; (8011d08 <IMU_parseInputReport+0x268>)
 8011ae6:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8011ae8:	4b86      	ldr	r3, [pc, #536]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011aea:	79db      	ldrb	r3, [r3, #7]
 8011aec:	f003 0303 	and.w	r3, r3, #3
 8011af0:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8011af2:	4b84      	ldr	r3, [pc, #528]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011af4:	7a9b      	ldrb	r3, [r3, #10]
 8011af6:	021b      	lsls	r3, r3, #8
 8011af8:	b21a      	sxth	r2, r3
 8011afa:	4b82      	ldr	r3, [pc, #520]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011afc:	7a5b      	ldrb	r3, [r3, #9]
 8011afe:	b21b      	sxth	r3, r3
 8011b00:	4313      	orrs	r3, r2
 8011b02:	b21b      	sxth	r3, r3
 8011b04:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8011b06:	4b7f      	ldr	r3, [pc, #508]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011b08:	7b1b      	ldrb	r3, [r3, #12]
 8011b0a:	021b      	lsls	r3, r3, #8
 8011b0c:	b21a      	sxth	r2, r3
 8011b0e:	4b7d      	ldr	r3, [pc, #500]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011b10:	7adb      	ldrb	r3, [r3, #11]
 8011b12:	b21b      	sxth	r3, r3
 8011b14:	4313      	orrs	r3, r2
 8011b16:	b21b      	sxth	r3, r3
 8011b18:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8011b1a:	4b7a      	ldr	r3, [pc, #488]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011b1c:	7b9b      	ldrb	r3, [r3, #14]
 8011b1e:	021b      	lsls	r3, r3, #8
 8011b20:	b21a      	sxth	r2, r3
 8011b22:	4b78      	ldr	r3, [pc, #480]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011b24:	7b5b      	ldrb	r3, [r3, #13]
 8011b26:	b21b      	sxth	r3, r3
 8011b28:	4313      	orrs	r3, r2
 8011b2a:	b21b      	sxth	r3, r3
 8011b2c:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8011b32:	2300      	movs	r3, #0
 8011b34:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8011b36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011b3a:	3b05      	subs	r3, #5
 8011b3c:	2b09      	cmp	r3, #9
 8011b3e:	dd09      	ble.n	8011b54 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8011b40:	4b70      	ldr	r3, [pc, #448]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011b42:	7c1b      	ldrb	r3, [r3, #16]
 8011b44:	021b      	lsls	r3, r3, #8
 8011b46:	b21a      	sxth	r2, r3
 8011b48:	4b6e      	ldr	r3, [pc, #440]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011b4a:	7bdb      	ldrb	r3, [r3, #15]
 8011b4c:	b21b      	sxth	r3, r3
 8011b4e:	4313      	orrs	r3, r2
 8011b50:	b21b      	sxth	r3, r3
 8011b52:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8011b54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011b58:	3b05      	subs	r3, #5
 8011b5a:	2b0b      	cmp	r3, #11
 8011b5c:	dd09      	ble.n	8011b72 <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8011b5e:	4b69      	ldr	r3, [pc, #420]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011b60:	7c9b      	ldrb	r3, [r3, #18]
 8011b62:	021b      	lsls	r3, r3, #8
 8011b64:	b21a      	sxth	r2, r3
 8011b66:	4b67      	ldr	r3, [pc, #412]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011b68:	7c5b      	ldrb	r3, [r3, #17]
 8011b6a:	b21b      	sxth	r3, r3
 8011b6c:	4313      	orrs	r3, r2
 8011b6e:	b21b      	sxth	r3, r3
 8011b70:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8011b72:	4b64      	ldr	r3, [pc, #400]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011b74:	795b      	ldrb	r3, [r3, #5]
 8011b76:	2b01      	cmp	r3, #1
 8011b78:	d10d      	bne.n	8011b96 <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8011b7a:	7bfb      	ldrb	r3, [r7, #15]
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	4b63      	ldr	r3, [pc, #396]	; (8011d0c <IMU_parseInputReport+0x26c>)
 8011b80:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8011b82:	4a63      	ldr	r2, [pc, #396]	; (8011d10 <IMU_parseInputReport+0x270>)
 8011b84:	89bb      	ldrh	r3, [r7, #12]
 8011b86:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8011b88:	4a62      	ldr	r2, [pc, #392]	; (8011d14 <IMU_parseInputReport+0x274>)
 8011b8a:	897b      	ldrh	r3, [r7, #10]
 8011b8c:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8011b8e:	4a62      	ldr	r2, [pc, #392]	; (8011d18 <IMU_parseInputReport+0x278>)
 8011b90:	893b      	ldrh	r3, [r7, #8]
 8011b92:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8011b94:	e16a      	b.n	8011e6c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8011b96:	4b5b      	ldr	r3, [pc, #364]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011b98:	795b      	ldrb	r3, [r3, #5]
 8011b9a:	2b04      	cmp	r3, #4
 8011b9c:	d10d      	bne.n	8011bba <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8011b9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ba0:	b29a      	uxth	r2, r3
 8011ba2:	4b5e      	ldr	r3, [pc, #376]	; (8011d1c <IMU_parseInputReport+0x27c>)
 8011ba4:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8011ba6:	4a5e      	ldr	r2, [pc, #376]	; (8011d20 <IMU_parseInputReport+0x280>)
 8011ba8:	89bb      	ldrh	r3, [r7, #12]
 8011baa:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8011bac:	4a5d      	ldr	r2, [pc, #372]	; (8011d24 <IMU_parseInputReport+0x284>)
 8011bae:	897b      	ldrh	r3, [r7, #10]
 8011bb0:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8011bb2:	4a5d      	ldr	r2, [pc, #372]	; (8011d28 <IMU_parseInputReport+0x288>)
 8011bb4:	893b      	ldrh	r3, [r7, #8]
 8011bb6:	8013      	strh	r3, [r2, #0]
}
 8011bb8:	e158      	b.n	8011e6c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8011bba:	4b52      	ldr	r3, [pc, #328]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011bbc:	795b      	ldrb	r3, [r3, #5]
 8011bbe:	2b02      	cmp	r3, #2
 8011bc0:	d10d      	bne.n	8011bde <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8011bc2:	7bfb      	ldrb	r3, [r7, #15]
 8011bc4:	b29a      	uxth	r2, r3
 8011bc6:	4b59      	ldr	r3, [pc, #356]	; (8011d2c <IMU_parseInputReport+0x28c>)
 8011bc8:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8011bca:	4a59      	ldr	r2, [pc, #356]	; (8011d30 <IMU_parseInputReport+0x290>)
 8011bcc:	89bb      	ldrh	r3, [r7, #12]
 8011bce:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8011bd0:	4a58      	ldr	r2, [pc, #352]	; (8011d34 <IMU_parseInputReport+0x294>)
 8011bd2:	897b      	ldrh	r3, [r7, #10]
 8011bd4:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8011bd6:	4a58      	ldr	r2, [pc, #352]	; (8011d38 <IMU_parseInputReport+0x298>)
 8011bd8:	893b      	ldrh	r3, [r7, #8]
 8011bda:	8013      	strh	r3, [r2, #0]
}
 8011bdc:	e146      	b.n	8011e6c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8011bde:	4b49      	ldr	r3, [pc, #292]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011be0:	795b      	ldrb	r3, [r3, #5]
 8011be2:	2b03      	cmp	r3, #3
 8011be4:	d10d      	bne.n	8011c02 <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8011be6:	7bfb      	ldrb	r3, [r7, #15]
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	4b54      	ldr	r3, [pc, #336]	; (8011d3c <IMU_parseInputReport+0x29c>)
 8011bec:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8011bee:	4a54      	ldr	r2, [pc, #336]	; (8011d40 <IMU_parseInputReport+0x2a0>)
 8011bf0:	89bb      	ldrh	r3, [r7, #12]
 8011bf2:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8011bf4:	4a53      	ldr	r2, [pc, #332]	; (8011d44 <IMU_parseInputReport+0x2a4>)
 8011bf6:	897b      	ldrh	r3, [r7, #10]
 8011bf8:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8011bfa:	4a53      	ldr	r2, [pc, #332]	; (8011d48 <IMU_parseInputReport+0x2a8>)
 8011bfc:	893b      	ldrh	r3, [r7, #8]
 8011bfe:	8013      	strh	r3, [r2, #0]
}
 8011c00:	e134      	b.n	8011e6c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8011c02:	4b40      	ldr	r3, [pc, #256]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011c04:	795b      	ldrb	r3, [r3, #5]
 8011c06:	2b05      	cmp	r3, #5
 8011c08:	d003      	beq.n	8011c12 <IMU_parseInputReport+0x172>
 8011c0a:	4b3e      	ldr	r3, [pc, #248]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011c0c:	795b      	ldrb	r3, [r3, #5]
 8011c0e:	2b08      	cmp	r3, #8
 8011c10:	d166      	bne.n	8011ce0 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8011c12:	f004 fb2b 	bl	801626c <HAL_GetTick>
 8011c16:	4602      	mov	r2, r0
 8011c18:	4b4c      	ldr	r3, [pc, #304]	; (8011d4c <IMU_parseInputReport+0x2ac>)
 8011c1a:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8011c1c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011c20:	4b4b      	ldr	r3, [pc, #300]	; (8011d50 <IMU_parseInputReport+0x2b0>)
 8011c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c26:	b2db      	uxtb	r3, r3
 8011c28:	4619      	mov	r1, r3
 8011c2a:	4610      	mov	r0, r2
 8011c2c:	f000 f964 	bl	8011ef8 <IMU_qToFloat>
 8011c30:	eef0 7a40 	vmov.f32	s15, s0
 8011c34:	4b45      	ldr	r3, [pc, #276]	; (8011d4c <IMU_parseInputReport+0x2ac>)
 8011c36:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8011c3a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011c3e:	4b44      	ldr	r3, [pc, #272]	; (8011d50 <IMU_parseInputReport+0x2b0>)
 8011c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c44:	b2db      	uxtb	r3, r3
 8011c46:	4619      	mov	r1, r3
 8011c48:	4610      	mov	r0, r2
 8011c4a:	f000 f955 	bl	8011ef8 <IMU_qToFloat>
 8011c4e:	eef0 7a40 	vmov.f32	s15, s0
 8011c52:	4b3e      	ldr	r3, [pc, #248]	; (8011d4c <IMU_parseInputReport+0x2ac>)
 8011c54:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8011c58:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011c5c:	4b3c      	ldr	r3, [pc, #240]	; (8011d50 <IMU_parseInputReport+0x2b0>)
 8011c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c62:	b2db      	uxtb	r3, r3
 8011c64:	4619      	mov	r1, r3
 8011c66:	4610      	mov	r0, r2
 8011c68:	f000 f946 	bl	8011ef8 <IMU_qToFloat>
 8011c6c:	eef0 7a40 	vmov.f32	s15, s0
 8011c70:	4b36      	ldr	r3, [pc, #216]	; (8011d4c <IMU_parseInputReport+0x2ac>)
 8011c72:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8011c76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c7a:	4b35      	ldr	r3, [pc, #212]	; (8011d50 <IMU_parseInputReport+0x2b0>)
 8011c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	4619      	mov	r1, r3
 8011c84:	4610      	mov	r0, r2
 8011c86:	f000 f937 	bl	8011ef8 <IMU_qToFloat>
 8011c8a:	eef0 7a40 	vmov.f32	s15, s0
 8011c8e:	4b2f      	ldr	r3, [pc, #188]	; (8011d4c <IMU_parseInputReport+0x2ac>)
 8011c90:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8011c94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011c98:	210c      	movs	r1, #12
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f000 f92c 	bl	8011ef8 <IMU_qToFloat>
 8011ca0:	eef0 7a40 	vmov.f32	s15, s0
 8011ca4:	4b29      	ldr	r3, [pc, #164]	; (8011d4c <IMU_parseInputReport+0x2ac>)
 8011ca6:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8011caa:	4b2a      	ldr	r3, [pc, #168]	; (8011d54 <IMU_parseInputReport+0x2b4>)
 8011cac:	6818      	ldr	r0, [r3, #0]
 8011cae:	2300      	movs	r3, #0
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	4926      	ldr	r1, [pc, #152]	; (8011d4c <IMU_parseInputReport+0x2ac>)
 8011cb4:	f00d fa88 	bl	801f1c8 <osMessageQueuePut>
		quatAccuracy = status;
 8011cb8:	7bfb      	ldrb	r3, [r7, #15]
 8011cba:	b29a      	uxth	r2, r3
 8011cbc:	4b26      	ldr	r3, [pc, #152]	; (8011d58 <IMU_parseInputReport+0x2b8>)
 8011cbe:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8011cc0:	4a26      	ldr	r2, [pc, #152]	; (8011d5c <IMU_parseInputReport+0x2bc>)
 8011cc2:	89bb      	ldrh	r3, [r7, #12]
 8011cc4:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8011cc6:	4a26      	ldr	r2, [pc, #152]	; (8011d60 <IMU_parseInputReport+0x2c0>)
 8011cc8:	897b      	ldrh	r3, [r7, #10]
 8011cca:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8011ccc:	4a25      	ldr	r2, [pc, #148]	; (8011d64 <IMU_parseInputReport+0x2c4>)
 8011cce:	893b      	ldrh	r3, [r7, #8]
 8011cd0:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8011cd2:	4a25      	ldr	r2, [pc, #148]	; (8011d68 <IMU_parseInputReport+0x2c8>)
 8011cd4:	8afb      	ldrh	r3, [r7, #22]
 8011cd6:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8011cd8:	4a24      	ldr	r2, [pc, #144]	; (8011d6c <IMU_parseInputReport+0x2cc>)
 8011cda:	8abb      	ldrh	r3, [r7, #20]
 8011cdc:	8013      	strh	r3, [r2, #0]
}
 8011cde:	e0c5      	b.n	8011e6c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8011ce0:	4b08      	ldr	r3, [pc, #32]	; (8011d04 <IMU_parseInputReport+0x264>)
 8011ce2:	795b      	ldrb	r3, [r3, #5]
 8011ce4:	2b11      	cmp	r3, #17
 8011ce6:	d147      	bne.n	8011d78 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8011ce8:	f004 fac0 	bl	801626c <HAL_GetTick>
 8011cec:	4602      	mov	r2, r0
 8011cee:	4b20      	ldr	r3, [pc, #128]	; (8011d70 <IMU_parseInputReport+0x2d0>)
 8011cf0:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8011cf2:	4a1f      	ldr	r2, [pc, #124]	; (8011d70 <IMU_parseInputReport+0x2d0>)
 8011cf4:	893b      	ldrh	r3, [r7, #8]
 8011cf6:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8011cf8:	4a1e      	ldr	r2, [pc, #120]	; (8011d74 <IMU_parseInputReport+0x2d4>)
 8011cfa:	893b      	ldrh	r3, [r7, #8]
 8011cfc:	8013      	strh	r3, [r2, #0]
}
 8011cfe:	e0b5      	b.n	8011e6c <IMU_parseInputReport+0x3cc>
 8011d00:	2002805c 	.word	0x2002805c
 8011d04:	200280ec 	.word	0x200280ec
 8011d08:	20028078 	.word	0x20028078
 8011d0c:	200281b4 	.word	0x200281b4
 8011d10:	2002819c 	.word	0x2002819c
 8011d14:	200281b8 	.word	0x200281b8
 8011d18:	200280b4 	.word	0x200280b4
 8011d1c:	200280b0 	.word	0x200280b0
 8011d20:	20028082 	.word	0x20028082
 8011d24:	200281a0 	.word	0x200281a0
 8011d28:	200280de 	.word	0x200280de
 8011d2c:	200280e0 	.word	0x200280e0
 8011d30:	200280e2 	.word	0x200280e2
 8011d34:	200280aa 	.word	0x200280aa
 8011d38:	200280a8 	.word	0x200280a8
 8011d3c:	20028060 	.word	0x20028060
 8011d40:	200280ac 	.word	0x200280ac
 8011d44:	200281a2 	.word	0x200281a2
 8011d48:	200280b2 	.word	0x200280b2
 8011d4c:	200280c4 	.word	0x200280c4
 8011d50:	20000004 	.word	0x20000004
 8011d54:	20027bd8 	.word	0x20027bd8
 8011d58:	2002807e 	.word	0x2002807e
 8011d5c:	200281b6 	.word	0x200281b6
 8011d60:	200280dc 	.word	0x200280dc
 8011d64:	20028058 	.word	0x20028058
 8011d68:	20028074 	.word	0x20028074
 8011d6c:	200280b6 	.word	0x200280b6
 8011d70:	20028064 	.word	0x20028064
 8011d74:	200281ba 	.word	0x200281ba
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8011d78:	4b3e      	ldr	r3, [pc, #248]	; (8011e74 <IMU_parseInputReport+0x3d4>)
 8011d7a:	795b      	ldrb	r3, [r3, #5]
 8011d7c:	2b13      	cmp	r3, #19
 8011d7e:	d10d      	bne.n	8011d9c <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8011d80:	f004 fa74 	bl	801626c <HAL_GetTick>
 8011d84:	4602      	mov	r2, r0
 8011d86:	4b3c      	ldr	r3, [pc, #240]	; (8011e78 <IMU_parseInputReport+0x3d8>)
 8011d88:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8011d8a:	4b3a      	ldr	r3, [pc, #232]	; (8011e74 <IMU_parseInputReport+0x3d4>)
 8011d8c:	7a5a      	ldrb	r2, [r3, #9]
 8011d8e:	4b3a      	ldr	r3, [pc, #232]	; (8011e78 <IMU_parseInputReport+0x3d8>)
 8011d90:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8011d92:	4b38      	ldr	r3, [pc, #224]	; (8011e74 <IMU_parseInputReport+0x3d4>)
 8011d94:	7a5a      	ldrb	r2, [r3, #9]
 8011d96:	4b39      	ldr	r3, [pc, #228]	; (8011e7c <IMU_parseInputReport+0x3dc>)
 8011d98:	701a      	strb	r2, [r3, #0]
}
 8011d9a:	e067      	b.n	8011e6c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8011d9c:	4b35      	ldr	r3, [pc, #212]	; (8011e74 <IMU_parseInputReport+0x3d4>)
 8011d9e:	795b      	ldrb	r3, [r3, #5]
 8011da0:	2b1e      	cmp	r3, #30
 8011da2:	d12b      	bne.n	8011dfc <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8011da4:	f004 fa62 	bl	801626c <HAL_GetTick>
 8011da8:	4602      	mov	r2, r0
 8011daa:	4b35      	ldr	r3, [pc, #212]	; (8011e80 <IMU_parseInputReport+0x3e0>)
 8011dac:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8011dae:	2300      	movs	r3, #0
 8011db0:	74fb      	strb	r3, [r7, #19]
 8011db2:	e00c      	b.n	8011dce <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8011db4:	7cfb      	ldrb	r3, [r7, #19]
 8011db6:	f103 020b 	add.w	r2, r3, #11
 8011dba:	4b32      	ldr	r3, [pc, #200]	; (8011e84 <IMU_parseInputReport+0x3e4>)
 8011dbc:	6819      	ldr	r1, [r3, #0]
 8011dbe:	7cfb      	ldrb	r3, [r7, #19]
 8011dc0:	440b      	add	r3, r1
 8011dc2:	492c      	ldr	r1, [pc, #176]	; (8011e74 <IMU_parseInputReport+0x3d4>)
 8011dc4:	5c8a      	ldrb	r2, [r1, r2]
 8011dc6:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8011dc8:	7cfb      	ldrb	r3, [r7, #19]
 8011dca:	3301      	adds	r3, #1
 8011dcc:	74fb      	strb	r3, [r7, #19]
 8011dce:	7cfb      	ldrb	r3, [r7, #19]
 8011dd0:	2b08      	cmp	r3, #8
 8011dd2:	d9ef      	bls.n	8011db4 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8011dd4:	4b27      	ldr	r3, [pc, #156]	; (8011e74 <IMU_parseInputReport+0x3d4>)
 8011dd6:	7a9a      	ldrb	r2, [r3, #10]
 8011dd8:	4b2b      	ldr	r3, [pc, #172]	; (8011e88 <IMU_parseInputReport+0x3e8>)
 8011dda:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8011ddc:	4b29      	ldr	r3, [pc, #164]	; (8011e84 <IMU_parseInputReport+0x3e4>)
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	4b27      	ldr	r3, [pc, #156]	; (8011e80 <IMU_parseInputReport+0x3e0>)
 8011de2:	6810      	ldr	r0, [r2, #0]
 8011de4:	6851      	ldr	r1, [r2, #4]
 8011de6:	c303      	stmia	r3!, {r0, r1}
 8011de8:	7a12      	ldrb	r2, [r2, #8]
 8011dea:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8011dec:	4b27      	ldr	r3, [pc, #156]	; (8011e8c <IMU_parseInputReport+0x3ec>)
 8011dee:	6818      	ldr	r0, [r3, #0]
 8011df0:	2300      	movs	r3, #0
 8011df2:	2200      	movs	r2, #0
 8011df4:	4922      	ldr	r1, [pc, #136]	; (8011e80 <IMU_parseInputReport+0x3e0>)
 8011df6:	f00d f9e7 	bl	801f1c8 <osMessageQueuePut>
}
 8011dfa:	e037      	b.n	8011e6c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8011dfc:	4b1d      	ldr	r3, [pc, #116]	; (8011e74 <IMU_parseInputReport+0x3d4>)
 8011dfe:	795b      	ldrb	r3, [r3, #5]
 8011e00:	2b14      	cmp	r3, #20
 8011e02:	d109      	bne.n	8011e18 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8011e04:	4a22      	ldr	r2, [pc, #136]	; (8011e90 <IMU_parseInputReport+0x3f0>)
 8011e06:	89bb      	ldrh	r3, [r7, #12]
 8011e08:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8011e0a:	4a22      	ldr	r2, [pc, #136]	; (8011e94 <IMU_parseInputReport+0x3f4>)
 8011e0c:	897b      	ldrh	r3, [r7, #10]
 8011e0e:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8011e10:	4a21      	ldr	r2, [pc, #132]	; (8011e98 <IMU_parseInputReport+0x3f8>)
 8011e12:	893b      	ldrh	r3, [r7, #8]
 8011e14:	8013      	strh	r3, [r2, #0]
}
 8011e16:	e029      	b.n	8011e6c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8011e18:	4b16      	ldr	r3, [pc, #88]	; (8011e74 <IMU_parseInputReport+0x3d4>)
 8011e1a:	795b      	ldrb	r3, [r3, #5]
 8011e1c:	2b15      	cmp	r3, #21
 8011e1e:	d109      	bne.n	8011e34 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8011e20:	4a1e      	ldr	r2, [pc, #120]	; (8011e9c <IMU_parseInputReport+0x3fc>)
 8011e22:	89bb      	ldrh	r3, [r7, #12]
 8011e24:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8011e26:	4a1e      	ldr	r2, [pc, #120]	; (8011ea0 <IMU_parseInputReport+0x400>)
 8011e28:	897b      	ldrh	r3, [r7, #10]
 8011e2a:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8011e2c:	4a1d      	ldr	r2, [pc, #116]	; (8011ea4 <IMU_parseInputReport+0x404>)
 8011e2e:	893b      	ldrh	r3, [r7, #8]
 8011e30:	8013      	strh	r3, [r2, #0]
}
 8011e32:	e01b      	b.n	8011e6c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8011e34:	4b0f      	ldr	r3, [pc, #60]	; (8011e74 <IMU_parseInputReport+0x3d4>)
 8011e36:	795b      	ldrb	r3, [r3, #5]
 8011e38:	2b16      	cmp	r3, #22
 8011e3a:	d109      	bne.n	8011e50 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8011e3c:	4a1a      	ldr	r2, [pc, #104]	; (8011ea8 <IMU_parseInputReport+0x408>)
 8011e3e:	89bb      	ldrh	r3, [r7, #12]
 8011e40:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8011e42:	4a1a      	ldr	r2, [pc, #104]	; (8011eac <IMU_parseInputReport+0x40c>)
 8011e44:	897b      	ldrh	r3, [r7, #10]
 8011e46:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8011e48:	4a19      	ldr	r2, [pc, #100]	; (8011eb0 <IMU_parseInputReport+0x410>)
 8011e4a:	893b      	ldrh	r3, [r7, #8]
 8011e4c:	8013      	strh	r3, [r2, #0]
}
 8011e4e:	e00d      	b.n	8011e6c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8011e50:	4b08      	ldr	r3, [pc, #32]	; (8011e74 <IMU_parseInputReport+0x3d4>)
 8011e52:	795b      	ldrb	r3, [r3, #5]
 8011e54:	2bf1      	cmp	r3, #241	; 0xf1
 8011e56:	d109      	bne.n	8011e6c <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8011e58:	4b06      	ldr	r3, [pc, #24]	; (8011e74 <IMU_parseInputReport+0x3d4>)
 8011e5a:	79db      	ldrb	r3, [r3, #7]
 8011e5c:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8011e5e:	79fb      	ldrb	r3, [r7, #7]
 8011e60:	2b07      	cmp	r3, #7
 8011e62:	d103      	bne.n	8011e6c <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8011e64:	4b03      	ldr	r3, [pc, #12]	; (8011e74 <IMU_parseInputReport+0x3d4>)
 8011e66:	7a9a      	ldrb	r2, [r3, #10]
 8011e68:	4b12      	ldr	r3, [pc, #72]	; (8011eb4 <IMU_parseInputReport+0x414>)
 8011e6a:	701a      	strb	r2, [r3, #0]
}
 8011e6c:	bf00      	nop
 8011e6e:	3718      	adds	r7, #24
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	200280ec 	.word	0x200280ec
 8011e78:	2002806c 	.word	0x2002806c
 8011e7c:	200280e6 	.word	0x200280e6
 8011e80:	200281a4 	.word	0x200281a4
 8011e84:	200280c0 	.word	0x200280c0
 8011e88:	2002819e 	.word	0x2002819e
 8011e8c:	20027bbc 	.word	0x20027bbc
 8011e90:	200280e4 	.word	0x200280e4
 8011e94:	200280be 	.word	0x200280be
 8011e98:	2002816e 	.word	0x2002816e
 8011e9c:	20028062 	.word	0x20028062
 8011ea0:	200280e8 	.word	0x200280e8
 8011ea4:	200280b8 	.word	0x200280b8
 8011ea8:	200280bc 	.word	0x200280bc
 8011eac:	200280ba 	.word	0x200280ba
 8011eb0:	20028080 	.word	0x20028080
 8011eb4:	2002819f 	.word	0x2002819f

08011eb8 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8011ebc:	4b0d      	ldr	r3, [pc, #52]	; (8011ef4 <IMU_softReset+0x3c>)
 8011ebe:	2201      	movs	r2, #1
 8011ec0:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	2101      	movs	r1, #1
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f000 f98e 	bl	80121e8 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8011ecc:	20c8      	movs	r0, #200	; 0xc8
 8011ece:	f004 f9e5 	bl	801629c <HAL_Delay>
	while (IMU_receivePacket() == true)
 8011ed2:	bf00      	nop
 8011ed4:	f000 f8e0 	bl	8012098 <IMU_receivePacket>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d1fa      	bne.n	8011ed4 <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 8011ede:	20c8      	movs	r0, #200	; 0xc8
 8011ee0:	f004 f9dc 	bl	801629c <HAL_Delay>
	while (IMU_receivePacket() == true)
 8011ee4:	bf00      	nop
 8011ee6:	f000 f8d7 	bl	8012098 <IMU_receivePacket>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d1fa      	bne.n	8011ee6 <IMU_softReset+0x2e>
		;
}
 8011ef0:	bf00      	nop
 8011ef2:	bd80      	pop	{r7, pc}
 8011ef4:	200280ec 	.word	0x200280ec

08011ef8 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8011ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011efa:	b085      	sub	sp, #20
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	4603      	mov	r3, r0
 8011f00:	460a      	mov	r2, r1
 8011f02:	80fb      	strh	r3, [r7, #6]
 8011f04:	4613      	mov	r3, r2
 8011f06:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8011f08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f0c:	ee07 3a90 	vmov	s15, r3
 8011f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f14:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8011f18:	797b      	ldrb	r3, [r7, #5]
 8011f1a:	425b      	negs	r3, r3
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7fe fa8b 	bl	8010438 <__aeabi_i2d>
 8011f22:	4603      	mov	r3, r0
 8011f24:	460c      	mov	r4, r1
 8011f26:	ec44 3b11 	vmov	d1, r3, r4
 8011f2a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8011f70 <IMU_qToFloat+0x78>
 8011f2e:	f014 ff25 	bl	8026d7c <pow>
 8011f32:	ec56 5b10 	vmov	r5, r6, d0
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	f7fe fa90 	bl	801045c <__aeabi_f2d>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	460c      	mov	r4, r1
 8011f40:	461a      	mov	r2, r3
 8011f42:	4623      	mov	r3, r4
 8011f44:	4628      	mov	r0, r5
 8011f46:	4631      	mov	r1, r6
 8011f48:	f7fe fae0 	bl	801050c <__aeabi_dmul>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	460c      	mov	r4, r1
 8011f50:	4618      	mov	r0, r3
 8011f52:	4621      	mov	r1, r4
 8011f54:	f7fe fd8a 	bl	8010a6c <__aeabi_d2f>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	ee07 3a90 	vmov	s15, r3
}
 8011f62:	eeb0 0a67 	vmov.f32	s0, s15
 8011f66:	3714      	adds	r7, #20
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f6c:	f3af 8000 	nop.w
 8011f70:	00000000 	.word	0x00000000
 8011f74:	40000000 	.word	0x40000000

08011f78 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	4603      	mov	r3, r0
 8011f80:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 8011f82:	88fb      	ldrh	r3, [r7, #6]
 8011f84:	4619      	mov	r1, r3
 8011f86:	2005      	movs	r0, #5
 8011f88:	f000 f81a 	bl	8011fc0 <IMU_setFeatureCommand_2>
}
 8011f8c:	bf00      	nop
 8011f8e:	3708      	adds	r7, #8
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b084      	sub	sp, #16
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	60b9      	str	r1, [r7, #8]
 8011f9e:	607a      	str	r2, [r7, #4]
 8011fa0:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 8011fa2:	4a06      	ldr	r2, [pc, #24]	; (8011fbc <IMU_enableActivityClassifier+0x28>)
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8011fa8:	89fb      	ldrh	r3, [r7, #14]
 8011faa:	68ba      	ldr	r2, [r7, #8]
 8011fac:	4619      	mov	r1, r3
 8011fae:	201e      	movs	r0, #30
 8011fb0:	f000 f818 	bl	8011fe4 <IMU_setFeatureCommand_3>
}
 8011fb4:	bf00      	nop
 8011fb6:	3710      	adds	r7, #16
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}
 8011fbc:	200280c0 	.word	0x200280c0

08011fc0 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b082      	sub	sp, #8
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	460a      	mov	r2, r1
 8011fca:	71fb      	strb	r3, [r7, #7]
 8011fcc:	4613      	mov	r3, r2
 8011fce:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8011fd0:	88b9      	ldrh	r1, [r7, #4]
 8011fd2:	79fb      	ldrb	r3, [r7, #7]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f000 f804 	bl	8011fe4 <IMU_setFeatureCommand_3>
}
 8011fdc:	bf00      	nop
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b084      	sub	sp, #16
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	4603      	mov	r3, r0
 8011fec:	603a      	str	r2, [r7, #0]
 8011fee:	71fb      	strb	r3, [r7, #7]
 8011ff0:	460b      	mov	r3, r1
 8011ff2:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 8011ff4:	88bb      	ldrh	r3, [r7, #4]
 8011ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011ffa:	fb02 f303 	mul.w	r3, r2, r3
 8011ffe:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8012000:	4b24      	ldr	r3, [pc, #144]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 8012002:	22fd      	movs	r2, #253	; 0xfd
 8012004:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8012006:	4a23      	ldr	r2, [pc, #140]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 8012008:	79fb      	ldrb	r3, [r7, #7]
 801200a:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 801200c:	4b21      	ldr	r3, [pc, #132]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 801200e:	2200      	movs	r2, #0
 8012010:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 8012012:	4b20      	ldr	r3, [pc, #128]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 8012014:	2200      	movs	r2, #0
 8012016:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8012018:	4b1e      	ldr	r3, [pc, #120]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 801201a:	2200      	movs	r2, #0
 801201c:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	b2da      	uxtb	r2, r3
 8012022:	4b1c      	ldr	r3, [pc, #112]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 8012024:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	121b      	asrs	r3, r3, #8
 801202a:	b2da      	uxtb	r2, r3
 801202c:	4b19      	ldr	r3, [pc, #100]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 801202e:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	141b      	asrs	r3, r3, #16
 8012034:	b2da      	uxtb	r2, r3
 8012036:	4b17      	ldr	r3, [pc, #92]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 8012038:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	0e1b      	lsrs	r3, r3, #24
 801203e:	b2da      	uxtb	r2, r3
 8012040:	4b14      	ldr	r3, [pc, #80]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 8012042:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 8012044:	4b13      	ldr	r3, [pc, #76]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 8012046:	2200      	movs	r2, #0
 8012048:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 801204a:	4b12      	ldr	r3, [pc, #72]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 801204c:	2200      	movs	r2, #0
 801204e:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 8012050:	4b10      	ldr	r3, [pc, #64]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 8012052:	2200      	movs	r2, #0
 8012054:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 8012056:	4b0f      	ldr	r3, [pc, #60]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 8012058:	2200      	movs	r2, #0
 801205a:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	b2da      	uxtb	r2, r3
 8012060:	4b0c      	ldr	r3, [pc, #48]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 8012062:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	0a1b      	lsrs	r3, r3, #8
 8012068:	b2da      	uxtb	r2, r3
 801206a:	4b0a      	ldr	r3, [pc, #40]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 801206c:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	0c1b      	lsrs	r3, r3, #16
 8012072:	b2da      	uxtb	r2, r3
 8012074:	4b07      	ldr	r3, [pc, #28]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 8012076:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	0e1b      	lsrs	r3, r3, #24
 801207c:	b2da      	uxtb	r2, r3
 801207e:	4b05      	ldr	r3, [pc, #20]	; (8012094 <IMU_setFeatureCommand_3+0xb0>)
 8012080:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 8012082:	2302      	movs	r3, #2
 8012084:	2111      	movs	r1, #17
 8012086:	4618      	mov	r0, r3
 8012088:	f000 f8ae 	bl	80121e8 <IMU_sendPacket>
}
 801208c:	bf00      	nop
 801208e:	3710      	adds	r7, #16
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}
 8012094:	200280ec 	.word	0x200280ec

08012098 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b084      	sub	sp, #16
 801209c:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 801209e:	4b22      	ldr	r3, [pc, #136]	; (8012128 <IMU_receivePacket+0x90>)
 80120a0:	681a      	ldr	r2, [r3, #0]
 80120a2:	4b22      	ldr	r3, [pc, #136]	; (801212c <IMU_receivePacket+0x94>)
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	4619      	mov	r1, r3
 80120aa:	4610      	mov	r0, r2
 80120ac:	f006 fcec 	bl	8018a88 <HAL_GPIO_ReadPin>
 80120b0:	4603      	mov	r3, r0
 80120b2:	2b01      	cmp	r3, #1
 80120b4:	d101      	bne.n	80120ba <IMU_receivePacket+0x22>
		return (false);
 80120b6:	2300      	movs	r3, #0
 80120b8:	e031      	b.n	801211e <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80120ba:	4b1d      	ldr	r3, [pc, #116]	; (8012130 <IMU_receivePacket+0x98>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	f04f 31ff 	mov.w	r1, #4294967295
 80120c2:	4618      	mov	r0, r3
 80120c4:	f00c ff3c 	bl	801ef40 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 80120c8:	4b1a      	ldr	r3, [pc, #104]	; (8012134 <IMU_receivePacket+0x9c>)
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	b299      	uxth	r1, r3
 80120ce:	2364      	movs	r3, #100	; 0x64
 80120d0:	9300      	str	r3, [sp, #0]
 80120d2:	2304      	movs	r3, #4
 80120d4:	4a18      	ldr	r2, [pc, #96]	; (8012138 <IMU_receivePacket+0xa0>)
 80120d6:	4819      	ldr	r0, [pc, #100]	; (801213c <IMU_receivePacket+0xa4>)
 80120d8:	f006 febc 	bl	8018e54 <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 80120dc:	4b14      	ldr	r3, [pc, #80]	; (8012130 <IMU_receivePacket+0x98>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	4618      	mov	r0, r3
 80120e2:	f00c ff93 	bl	801f00c <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 80120e6:	4b14      	ldr	r3, [pc, #80]	; (8012138 <IMU_receivePacket+0xa0>)
 80120e8:	785b      	ldrb	r3, [r3, #1]
 80120ea:	021b      	lsls	r3, r3, #8
 80120ec:	b21a      	sxth	r2, r3
 80120ee:	4b12      	ldr	r3, [pc, #72]	; (8012138 <IMU_receivePacket+0xa0>)
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	b21b      	sxth	r3, r3
 80120f4:	4313      	orrs	r3, r2
 80120f6:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 80120f8:	88fb      	ldrh	r3, [r7, #6]
 80120fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80120fe:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8012100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d101      	bne.n	801210c <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8012108:	2300      	movs	r3, #0
 801210a:	e008      	b.n	801211e <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 801210c:	88fb      	ldrh	r3, [r7, #6]
 801210e:	3b04      	subs	r3, #4
 8012110:	b29b      	uxth	r3, r3
 8012112:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 8012114:	88fb      	ldrh	r3, [r7, #6]
 8012116:	4618      	mov	r0, r3
 8012118:	f000 f812 	bl	8012140 <IMU_getData>


	return (true); //We're done!
 801211c:	2301      	movs	r3, #1
}
 801211e:	4618      	mov	r0, r3
 8012120:	3708      	adds	r7, #8
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	20028174 	.word	0x20028174
 801212c:	200280ae 	.word	0x200280ae
 8012130:	20027bc4 	.word	0x20027bc4
 8012134:	20000006 	.word	0x20000006
 8012138:	2002805c 	.word	0x2002805c
 801213c:	200281bc 	.word	0x200281bc

08012140 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b086      	sub	sp, #24
 8012144:	af02      	add	r7, sp, #8
 8012146:	4603      	mov	r3, r0
 8012148:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 801214a:	2300      	movs	r3, #0
 801214c:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 801214e:	e036      	b.n	80121be <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 8012150:	88fb      	ldrh	r3, [r7, #6]
 8012152:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 8012154:	89bb      	ldrh	r3, [r7, #12]
 8012156:	2b1c      	cmp	r3, #28
 8012158:	d901      	bls.n	801215e <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 801215a:	231c      	movs	r3, #28
 801215c:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 801215e:	4b1c      	ldr	r3, [pc, #112]	; (80121d0 <IMU_getData+0x90>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	f04f 31ff 	mov.w	r1, #4294967295
 8012166:	4618      	mov	r0, r3
 8012168:	f00c feea 	bl	801ef40 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 801216c:	4b19      	ldr	r3, [pc, #100]	; (80121d4 <IMU_getData+0x94>)
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	b299      	uxth	r1, r3
 8012172:	89bb      	ldrh	r3, [r7, #12]
 8012174:	b2db      	uxtb	r3, r3
 8012176:	3304      	adds	r3, #4
 8012178:	b2db      	uxtb	r3, r3
 801217a:	b29a      	uxth	r2, r3
 801217c:	2364      	movs	r3, #100	; 0x64
 801217e:	9300      	str	r3, [sp, #0]
 8012180:	4613      	mov	r3, r2
 8012182:	4a15      	ldr	r2, [pc, #84]	; (80121d8 <IMU_getData+0x98>)
 8012184:	4815      	ldr	r0, [pc, #84]	; (80121dc <IMU_getData+0x9c>)
 8012186:	f006 fe65 	bl	8018e54 <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 801218a:	4b11      	ldr	r3, [pc, #68]	; (80121d0 <IMU_getData+0x90>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	4618      	mov	r0, r3
 8012190:	f00c ff3c 	bl	801f00c <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 8012194:	89fa      	ldrh	r2, [r7, #14]
 8012196:	89bb      	ldrh	r3, [r7, #12]
 8012198:	4413      	add	r3, r2
 801219a:	2b7f      	cmp	r3, #127	; 0x7f
 801219c:	dc07      	bgt.n	80121ae <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 801219e:	89fb      	ldrh	r3, [r7, #14]
 80121a0:	4a0f      	ldr	r2, [pc, #60]	; (80121e0 <IMU_getData+0xa0>)
 80121a2:	4413      	add	r3, r2
 80121a4:	89ba      	ldrh	r2, [r7, #12]
 80121a6:	490f      	ldr	r1, [pc, #60]	; (80121e4 <IMU_getData+0xa4>)
 80121a8:	4618      	mov	r0, r3
 80121aa:	f014 fdd3 	bl	8026d54 <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 80121ae:	89fa      	ldrh	r2, [r7, #14]
 80121b0:	89bb      	ldrh	r3, [r7, #12]
 80121b2:	4413      	add	r3, r2
 80121b4:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 80121b6:	88fa      	ldrh	r2, [r7, #6]
 80121b8:	89bb      	ldrh	r3, [r7, #12]
 80121ba:	1ad3      	subs	r3, r2, r3
 80121bc:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 80121be:	88fb      	ldrh	r3, [r7, #6]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d1c5      	bne.n	8012150 <IMU_getData+0x10>
	}
	return (true); //Done!
 80121c4:	2301      	movs	r3, #1
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	3710      	adds	r7, #16
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	20027bc4 	.word	0x20027bc4
 80121d4:	20000006 	.word	0x20000006
 80121d8:	20000ad4 	.word	0x20000ad4
 80121dc:	200281bc 	.word	0x200281bc
 80121e0:	200280ec 	.word	0x200280ec
 80121e4:	20000ad8 	.word	0x20000ad8

080121e8 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b086      	sub	sp, #24
 80121ec:	af02      	add	r7, sp, #8
 80121ee:	4603      	mov	r3, r0
 80121f0:	460a      	mov	r2, r1
 80121f2:	71fb      	strb	r3, [r7, #7]
 80121f4:	4613      	mov	r3, r2
 80121f6:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80121f8:	79bb      	ldrb	r3, [r7, #6]
 80121fa:	3304      	adds	r3, #4
 80121fc:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 80121fe:	4a1b      	ldr	r2, [pc, #108]	; (801226c <IMU_sendPacket+0x84>)
 8012200:	7bfb      	ldrb	r3, [r7, #15]
 8012202:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 8012204:	7bfb      	ldrb	r3, [r7, #15]
 8012206:	121b      	asrs	r3, r3, #8
 8012208:	b2da      	uxtb	r2, r3
 801220a:	4b18      	ldr	r3, [pc, #96]	; (801226c <IMU_sendPacket+0x84>)
 801220c:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 801220e:	4a17      	ldr	r2, [pc, #92]	; (801226c <IMU_sendPacket+0x84>)
 8012210:	79fb      	ldrb	r3, [r7, #7]
 8012212:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 8012214:	79fb      	ldrb	r3, [r7, #7]
 8012216:	4a16      	ldr	r2, [pc, #88]	; (8012270 <IMU_sendPacket+0x88>)
 8012218:	5cd2      	ldrb	r2, [r2, r3]
 801221a:	1c51      	adds	r1, r2, #1
 801221c:	b2c8      	uxtb	r0, r1
 801221e:	4914      	ldr	r1, [pc, #80]	; (8012270 <IMU_sendPacket+0x88>)
 8012220:	54c8      	strb	r0, [r1, r3]
 8012222:	4b12      	ldr	r3, [pc, #72]	; (801226c <IMU_sendPacket+0x84>)
 8012224:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 8012226:	79bb      	ldrb	r3, [r7, #6]
 8012228:	461a      	mov	r2, r3
 801222a:	4912      	ldr	r1, [pc, #72]	; (8012274 <IMU_sendPacket+0x8c>)
 801222c:	4812      	ldr	r0, [pc, #72]	; (8012278 <IMU_sendPacket+0x90>)
 801222e:	f014 fd91 	bl	8026d54 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8012232:	4b12      	ldr	r3, [pc, #72]	; (801227c <IMU_sendPacket+0x94>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	f04f 31ff 	mov.w	r1, #4294967295
 801223a:	4618      	mov	r0, r3
 801223c:	f00c fe80 	bl	801ef40 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 8012240:	4b0f      	ldr	r3, [pc, #60]	; (8012280 <IMU_sendPacket+0x98>)
 8012242:	781b      	ldrb	r3, [r3, #0]
 8012244:	b299      	uxth	r1, r3
 8012246:	7bfb      	ldrb	r3, [r7, #15]
 8012248:	b29a      	uxth	r2, r3
 801224a:	2364      	movs	r3, #100	; 0x64
 801224c:	9300      	str	r3, [sp, #0]
 801224e:	4613      	mov	r3, r2
 8012250:	4a06      	ldr	r2, [pc, #24]	; (801226c <IMU_sendPacket+0x84>)
 8012252:	480c      	ldr	r0, [pc, #48]	; (8012284 <IMU_sendPacket+0x9c>)
 8012254:	f006 fd0a 	bl	8018c6c <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8012258:	4b08      	ldr	r3, [pc, #32]	; (801227c <IMU_sendPacket+0x94>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	4618      	mov	r0, r3
 801225e:	f00c fed5 	bl	801f00c <osSemaphoreRelease>

	return (true);
 8012262:	2301      	movs	r3, #1
}
 8012264:	4618      	mov	r0, r3
 8012266:	3710      	adds	r7, #16
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}
 801226c:	20028178 	.word	0x20028178
 8012270:	20000acc 	.word	0x20000acc
 8012274:	200280ec 	.word	0x200280ec
 8012278:	2002817c 	.word	0x2002817c
 801227c:	20027bc4 	.word	0x20027bc4
 8012280:	20000006 	.word	0x20000006
 8012284:	200281bc 	.word	0x200281bc

08012288 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8012290:	4b1e      	ldr	r3, [pc, #120]	; (801230c <vPortSuppressTicksAndSleep+0x84>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	4a1d      	ldr	r2, [pc, #116]	; (801230c <vPortSuppressTicksAndSleep+0x84>)
 8012296:	f023 0301 	bic.w	r3, r3, #1
 801229a:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801229c:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801229e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80122a2:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80122a6:	f00f fc33 	bl	8021b10 <eTaskConfirmSleepModeStatus>
 80122aa:	4603      	mov	r3, r0
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d107      	bne.n	80122c0 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80122b0:	4b16      	ldr	r3, [pc, #88]	; (801230c <vPortSuppressTicksAndSleep+0x84>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4a15      	ldr	r2, [pc, #84]	; (801230c <vPortSuppressTicksAndSleep+0x84>)
 80122b6:	f043 0301 	orr.w	r3, r3, #1
 80122ba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80122bc:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 80122be:	e021      	b.n	8012304 <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122c6:	d002      	beq.n	80122ce <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f000 f869 	bl	80123a0 <LpTimerStart>
    LpEnter( );
 80122ce:	f000 f8cb 	bl	8012468 <LpEnter>
    if (xExpectedIdleTime != (~0))
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122d8:	d005      	beq.n	80122e6 <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 80122da:	f000 f8cd 	bl	8012478 <LpGetElapsedTime>
 80122de:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	f00f f92f 	bl	8021544 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80122e6:	4b0a      	ldr	r3, [pc, #40]	; (8012310 <vPortSuppressTicksAndSleep+0x88>)
 80122e8:	2200      	movs	r2, #0
 80122ea:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80122ec:	4b07      	ldr	r3, [pc, #28]	; (801230c <vPortSuppressTicksAndSleep+0x84>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	4a06      	ldr	r2, [pc, #24]	; (801230c <vPortSuppressTicksAndSleep+0x84>)
 80122f2:	f043 0301 	orr.w	r3, r3, #1
 80122f6:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80122f8:	4b06      	ldr	r3, [pc, #24]	; (8012314 <vPortSuppressTicksAndSleep+0x8c>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	4a06      	ldr	r2, [pc, #24]	; (8012318 <vPortSuppressTicksAndSleep+0x90>)
 80122fe:	3b01      	subs	r3, #1
 8012300:	6013      	str	r3, [r2, #0]
 8012302:	b662      	cpsie	i
}
 8012304:	bf00      	nop
 8012306:	3710      	adds	r7, #16
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	e000e010 	.word	0xe000e010
 8012310:	e000e018 	.word	0xe000e018
 8012314:	20000af4 	.word	0x20000af4
 8012318:	e000e014 	.word	0xe000e014

0801231c <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 801231c:	b580      	push	{r7, lr}
 801231e:	af00      	add	r7, sp, #0
  LpTimerInit( );
 8012320:	f000 f828 	bl	8012374 <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8012324:	4b0d      	ldr	r3, [pc, #52]	; (801235c <vPortSetupTimerInterrupt+0x40>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	4a0d      	ldr	r2, [pc, #52]	; (8012360 <vPortSetupTimerInterrupt+0x44>)
 801232a:	fba2 2303 	umull	r2, r3, r2, r3
 801232e:	099b      	lsrs	r3, r3, #6
 8012330:	4a0c      	ldr	r2, [pc, #48]	; (8012364 <vPortSetupTimerInterrupt+0x48>)
 8012332:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012334:	4b0c      	ldr	r3, [pc, #48]	; (8012368 <vPortSetupTimerInterrupt+0x4c>)
 8012336:	2200      	movs	r2, #0
 8012338:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801233a:	4b0c      	ldr	r3, [pc, #48]	; (801236c <vPortSetupTimerInterrupt+0x50>)
 801233c:	2200      	movs	r2, #0
 801233e:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012340:	4b06      	ldr	r3, [pc, #24]	; (801235c <vPortSetupTimerInterrupt+0x40>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	4a06      	ldr	r2, [pc, #24]	; (8012360 <vPortSetupTimerInterrupt+0x44>)
 8012346:	fba2 2303 	umull	r2, r3, r2, r3
 801234a:	099b      	lsrs	r3, r3, #6
 801234c:	4a08      	ldr	r2, [pc, #32]	; (8012370 <vPortSetupTimerInterrupt+0x54>)
 801234e:	3b01      	subs	r3, #1
 8012350:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012352:	4b05      	ldr	r3, [pc, #20]	; (8012368 <vPortSetupTimerInterrupt+0x4c>)
 8012354:	2207      	movs	r2, #7
 8012356:	601a      	str	r2, [r3, #0]
}
 8012358:	bf00      	nop
 801235a:	bd80      	pop	{r7, pc}
 801235c:	20000078 	.word	0x20000078
 8012360:	10624dd3 	.word	0x10624dd3
 8012364:	20000af4 	.word	0x20000af4
 8012368:	e000e010 	.word	0xe000e010
 801236c:	e000e018 	.word	0xe000e018
 8012370:	e000e014 	.word	0xe000e014

08012374 <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 8012374:	b580      	push	{r7, lr}
 8012376:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 8012378:	4b03      	ldr	r3, [pc, #12]	; (8012388 <LpTimerInit+0x14>)
 801237a:	2200      	movs	r2, #0
 801237c:	4903      	ldr	r1, [pc, #12]	; (801238c <LpTimerInit+0x18>)
 801237e:	2000      	movs	r0, #0
 8012380:	f001 f83a 	bl	80133f8 <HW_TS_Create>

  return;
 8012384:	bf00      	nop
}
 8012386:	bd80      	pop	{r7, pc}
 8012388:	08012391 	.word	0x08012391
 801238c:	20000afc 	.word	0x20000afc

08012390 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 8012390:	b480      	push	{r7}
 8012392:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 8012394:	bf00      	nop
}
 8012396:	46bd      	mov	sp, r7
 8012398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239c:	4770      	bx	lr
	...

080123a0 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f241 02c6 	movw	r2, #4294	; 0x10c6
 80123ae:	4293      	cmp	r3, r2
 80123b0:	d80c      	bhi.n	80123cc <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	4a28      	ldr	r2, [pc, #160]	; (8012458 <LpTimerStart+0xb8>)
 80123b6:	fb02 f303 	mul.w	r3, r2, r3
 80123ba:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	099b      	lsrs	r3, r3, #6
 80123c0:	4a26      	ldr	r2, [pc, #152]	; (801245c <LpTimerStart+0xbc>)
 80123c2:	fba2 2303 	umull	r2, r3, r2, r3
 80123c6:	095b      	lsrs	r3, r3, #5
 80123c8:	607b      	str	r3, [r7, #4]
 80123ca:	e034      	b.n	8012436 <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	4a24      	ldr	r2, [pc, #144]	; (8012460 <LpTimerStart+0xc0>)
 80123d0:	4293      	cmp	r3, r2
 80123d2:	d81b      	bhi.n	801240c <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80123da:	fb02 f303 	mul.w	r3, r2, r3
 80123de:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	099b      	lsrs	r3, r3, #6
 80123e4:	4a1d      	ldr	r2, [pc, #116]	; (801245c <LpTimerStart+0xbc>)
 80123e6:	fba2 2303 	umull	r2, r3, r2, r3
 80123ea:	095b      	lsrs	r3, r3, #5
 80123ec:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	4a1b      	ldr	r2, [pc, #108]	; (8012460 <LpTimerStart+0xc0>)
 80123f2:	4293      	cmp	r3, r2
 80123f4:	d806      	bhi.n	8012404 <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80123fc:	fb02 f303 	mul.w	r3, r2, r3
 8012400:	607b      	str	r3, [r7, #4]
 8012402:	e018      	b.n	8012436 <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 8012404:	f04f 33ff 	mov.w	r3, #4294967295
 8012408:	607b      	str	r3, [r7, #4]
 801240a:	e014      	b.n	8012436 <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	099b      	lsrs	r3, r3, #6
 8012410:	4a12      	ldr	r2, [pc, #72]	; (801245c <LpTimerStart+0xbc>)
 8012412:	fba2 2303 	umull	r2, r3, r2, r3
 8012416:	095b      	lsrs	r3, r3, #5
 8012418:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8012420:	4293      	cmp	r3, r2
 8012422:	d805      	bhi.n	8012430 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	4a0c      	ldr	r2, [pc, #48]	; (8012458 <LpTimerStart+0xb8>)
 8012428:	fb02 f303 	mul.w	r3, r2, r3
 801242c:	607b      	str	r3, [r7, #4]
 801242e:	e002      	b.n	8012436 <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 8012430:	f04f 33ff 	mov.w	r3, #4294967295
 8012434:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 8012436:	4b0b      	ldr	r3, [pc, #44]	; (8012464 <LpTimerStart+0xc4>)
 8012438:	791b      	ldrb	r3, [r3, #4]
 801243a:	6879      	ldr	r1, [r7, #4]
 801243c:	4618      	mov	r0, r3
 801243e:	f001 f8db 	bl	80135f8 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 8012442:	f001 f95f 	bl	8013704 <HW_TS_RTC_ReadLeftTicksToCount>
 8012446:	4603      	mov	r3, r0
 8012448:	461a      	mov	r2, r3
 801244a:	4b06      	ldr	r3, [pc, #24]	; (8012464 <LpTimerStart+0xc4>)
 801244c:	601a      	str	r2, [r3, #0]

  return;
 801244e:	bf00      	nop
}
 8012450:	3708      	adds	r7, #8
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}
 8012456:	bf00      	nop
 8012458:	000f4240 	.word	0x000f4240
 801245c:	0113094d 	.word	0x0113094d
 8012460:	00418937 	.word	0x00418937
 8012464:	20000af8 	.word	0x20000af8

08012468 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 8012468:	b480      	push	{r7}
 801246a:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 801246c:	bf00      	nop
}
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr
	...

08012478 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 8012478:	b590      	push	{r4, r7, lr}
 801247a:	b083      	sub	sp, #12
 801247c:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 801247e:	4b16      	ldr	r3, [pc, #88]	; (80124d8 <LpGetElapsedTime+0x60>)
 8012480:	681c      	ldr	r4, [r3, #0]
 8012482:	f001 f93f 	bl	8013704 <HW_TS_RTC_ReadLeftTicksToCount>
 8012486:	4603      	mov	r3, r0
 8012488:	1ae3      	subs	r3, r4, r3
 801248a:	f04f 0400 	mov.w	r4, #0
 801248e:	4a13      	ldr	r2, [pc, #76]	; (80124dc <LpGetElapsedTime+0x64>)
 8012490:	fb02 f104 	mul.w	r1, r2, r4
 8012494:	2200      	movs	r2, #0
 8012496:	fb02 f203 	mul.w	r2, r2, r3
 801249a:	440a      	add	r2, r1
 801249c:	490f      	ldr	r1, [pc, #60]	; (80124dc <LpGetElapsedTime+0x64>)
 801249e:	fba3 3401 	umull	r3, r4, r3, r1
 80124a2:	4422      	add	r2, r4
 80124a4:	4614      	mov	r4, r2
 80124a6:	e9c7 3400 	strd	r3, r4, [r7]
 80124aa:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 80124ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80124b2:	4a0b      	ldr	r2, [pc, #44]	; (80124e0 <LpGetElapsedTime+0x68>)
 80124b4:	f04f 0300 	mov.w	r3, #0
 80124b8:	f7fe fb28 	bl	8010b0c <__aeabi_uldivmod>
 80124bc:	4603      	mov	r3, r0
 80124be:	460c      	mov	r4, r1
 80124c0:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 80124c4:	4b04      	ldr	r3, [pc, #16]	; (80124d8 <LpGetElapsedTime+0x60>)
 80124c6:	791b      	ldrb	r3, [r3, #4]
 80124c8:	4618      	mov	r0, r3
 80124ca:	f001 f80b 	bl	80134e4 <HW_TS_Stop>

  return (uint32_t)return_value;
 80124ce:	683b      	ldr	r3, [r7, #0]
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	370c      	adds	r7, #12
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd90      	pop	{r4, r7, pc}
 80124d8:	20000af8 	.word	0x20000af8
 80124dc:	00077240 	.word	0x00077240
 80124e0:	000f4240 	.word	0x000f4240

080124e4 <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 80124e4:	b4b0      	push	{r4, r5, r7}
 80124e6:	b083      	sub	sp, #12
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	4a12      	ldr	r2, [pc, #72]	; (8012538 <_GeometryBuilder+0x54>)
 80124f0:	461c      	mov	r4, r3
 80124f2:	4615      	mov	r5, r2
 80124f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	4a0d      	ldr	r2, [pc, #52]	; (801253c <_GeometryBuilder+0x58>)
 8012508:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801250c:	4615      	mov	r5, r2
 801250e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012516:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801251a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	4a07      	ldr	r2, [pc, #28]	; (8012540 <_GeometryBuilder+0x5c>)
 8012522:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8012526:	4613      	mov	r3, r2
 8012528:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801252a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801252e:	bf00      	nop
 8012530:	370c      	adds	r7, #12
 8012532:	46bd      	mov	sp, r7
 8012534:	bcb0      	pop	{r4, r5, r7}
 8012536:	4770      	bx	lr
 8012538:	20000008 	.word	0x20000008
 801253c:	20000038 	.word	0x20000038
 8012540:	20000b00 	.word	0x20000b00

08012544 <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 8012544:	b5b0      	push	{r4, r5, r7, lr}
 8012546:	b096      	sub	sp, #88	; 0x58
 8012548:	af02      	add	r7, sp, #8
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	2bc7      	cmp	r3, #199	; 0xc7
 8012554:	f340 8093 	ble.w	801267e <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	3360      	adds	r3, #96	; 0x60
 801255c:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 801255e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	015b      	lsls	r3, r3, #5
 8012564:	3310      	adds	r3, #16
 8012566:	683a      	ldr	r2, [r7, #0]
 8012568:	4413      	add	r3, r2
 801256a:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 801256c:	2300      	movs	r3, #0
 801256e:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8012570:	2300      	movs	r3, #0
 8012572:	64bb      	str	r3, [r7, #72]	; 0x48
 8012574:	e011      	b.n	801259a <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	689a      	ldr	r2, [r3, #8]
 801257a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801257c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801257e:	3104      	adds	r1, #4
 8012580:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012584:	1ad3      	subs	r3, r2, r3
 8012586:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 8012588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801258a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801258c:	4293      	cmp	r3, r2
 801258e:	bf38      	it	cc
 8012590:	4613      	movcc	r3, r2
 8012592:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8012594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012596:	3301      	adds	r3, #1
 8012598:	64bb      	str	r3, [r7, #72]	; 0x48
 801259a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801259c:	2b03      	cmp	r3, #3
 801259e:	ddea      	ble.n	8012576 <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 80125a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125a2:	2b0b      	cmp	r3, #11
 80125a4:	d86b      	bhi.n	801267e <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125aa:	edd3 7a00 	vldr	s15, [r3]
 80125ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80125b4:	f107 0214 	add.w	r2, r7, #20
 80125b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80125bc:	4619      	mov	r1, r3
 80125be:	eef0 0a47 	vmov.f32	s1, s14
 80125c2:	eeb0 0a67 	vmov.f32	s0, s15
 80125c6:	f000 f8e5 	bl	8012794 <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80125d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80125d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80125dc:	f107 0208 	add.w	r2, r7, #8
 80125e0:	f107 0320 	add.w	r3, r7, #32
 80125e4:	4619      	mov	r1, r3
 80125e6:	eef0 0a47 	vmov.f32	s1, s14
 80125ea:	eeb0 0a67 	vmov.f32	s0, s15
 80125ee:	f000 f8d1 	bl	8012794 <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	3370      	adds	r3, #112	; 0x70
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	327c      	adds	r2, #124	; 0x7c
 80125fa:	f107 0520 	add.w	r5, r7, #32
 80125fe:	f107 0408 	add.w	r4, r7, #8
 8012602:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012606:	f107 0014 	add.w	r0, r7, #20
 801260a:	9201      	str	r2, [sp, #4]
 801260c:	9300      	str	r3, [sp, #0]
 801260e:	462b      	mov	r3, r5
 8012610:	4622      	mov	r2, r4
 8012612:	f000 f945 	bl	80128a0 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 8012616:	2300      	movs	r3, #0
 8012618:	647b      	str	r3, [r7, #68]	; 0x44
 801261a:	e019      	b.n	8012650 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012620:	331c      	adds	r3, #28
 8012622:	009b      	lsls	r3, r3, #2
 8012624:	4413      	add	r3, r2
 8012626:	ed93 7a00 	vldr	s14, [r3]
 801262a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801262c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	4413      	add	r3, r2
 8012632:	3304      	adds	r3, #4
 8012634:	edd3 7a00 	vldr	s15, [r3]
 8012638:	ee77 7a67 	vsub.f32	s15, s14, s15
 801263c:	687a      	ldr	r2, [r7, #4]
 801263e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012640:	331c      	adds	r3, #28
 8012642:	009b      	lsls	r3, r3, #2
 8012644:	4413      	add	r3, r2
 8012646:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 801264a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801264c:	3301      	adds	r3, #1
 801264e:	647b      	str	r3, [r7, #68]	; 0x44
 8012650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012652:	2b02      	cmp	r3, #2
 8012654:	dde2      	ble.n	801261c <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 8012656:	f003 fe09 	bl	801626c <HAL_GetTick>
 801265a:	4602      	mov	r2, r0
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 8012662:	4b09      	ldr	r3, [pc, #36]	; (8012688 <consume_angles+0x144>)
 8012664:	6818      	ldr	r0, [r3, #0]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f103 0170 	add.w	r1, r3, #112	; 0x70
 801266c:	2300      	movs	r3, #0
 801266e:	2200      	movs	r2, #0
 8012670:	f00c fdaa 	bl	801f1c8 <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 8012674:	4b05      	ldr	r3, [pc, #20]	; (801268c <consume_angles+0x148>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	4618      	mov	r0, r3
 801267a:	f00c fcc7 	bl	801f00c <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 801267e:	bf00      	nop
 8012680:	3750      	adds	r7, #80	; 0x50
 8012682:	46bd      	mov	sp, r7
 8012684:	bdb0      	pop	{r4, r5, r7, pc}
 8012686:	bf00      	nop
 8012688:	20027ac8 	.word	0x20027ac8
 801268c:	20028000 	.word	0x20028000

08012690 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 8012690:	b480      	push	{r7}
 8012692:	b085      	sub	sp, #20
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	3304      	adds	r3, #4
 80126a0:	ed93 7a00 	vldr	s14, [r3]
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	3308      	adds	r3, #8
 80126a8:	edd3 7a00 	vldr	s15, [r3]
 80126ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	3308      	adds	r3, #8
 80126b4:	edd3 6a00 	vldr	s13, [r3]
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	3304      	adds	r3, #4
 80126bc:	edd3 7a00 	vldr	s15, [r3]
 80126c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	3308      	adds	r3, #8
 80126d2:	ed93 7a00 	vldr	s14, [r3]
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	edd3 7a00 	vldr	s15, [r3]
 80126dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	edd3 6a00 	vldr	s13, [r3]
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	3308      	adds	r3, #8
 80126ea:	edd3 7a00 	vldr	s15, [r3]
 80126ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	3304      	adds	r3, #4
 80126f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126fa:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	ed93 7a00 	vldr	s14, [r3]
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	3304      	adds	r3, #4
 8012708:	edd3 7a00 	vldr	s15, [r3]
 801270c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	3304      	adds	r3, #4
 8012714:	edd3 6a00 	vldr	s13, [r3]
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	edd3 7a00 	vldr	s15, [r3]
 801271e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	3308      	adds	r3, #8
 8012726:	ee77 7a67 	vsub.f32	s15, s14, s15
 801272a:	edc3 7a00 	vstr	s15, [r3]
}
 801272e:	bf00      	nop
 8012730:	3714      	adds	r7, #20
 8012732:	46bd      	mov	sp, r7
 8012734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012738:	4770      	bx	lr

0801273a <vec_length>:

float vec_length(float *vec) {
 801273a:	b580      	push	{r7, lr}
 801273c:	b086      	sub	sp, #24
 801273e:	af00      	add	r7, sp, #0
 8012740:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 8012742:	f107 030c 	add.w	r3, r7, #12
 8012746:	461a      	mov	r2, r3
 8012748:	2103      	movs	r1, #3
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f014 f812 	bl	8026774 <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	617b      	str	r3, [r7, #20]
 8012754:	f107 0308 	add.w	r3, r7, #8
 8012758:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 801275a:	edd7 7a05 	vldr	s15, [r7, #20]
 801275e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012766:	db09      	blt.n	801277c <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8012768:	ed97 0a05 	vldr	s0, [r7, #20]
 801276c:	f014 fc76 	bl	802705c <sqrtf>
 8012770:	eef0 7a40 	vmov.f32	s15, s0
 8012774:	693b      	ldr	r3, [r7, #16]
 8012776:	edc3 7a00 	vstr	s15, [r3]
 801277a:	e003      	b.n	8012784 <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 801277c:	693b      	ldr	r3, [r7, #16]
 801277e:	f04f 0200 	mov.w	r2, #0
 8012782:	601a      	str	r2, [r3, #0]

    return res;
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	ee07 3a90 	vmov	s15, r3
}
 801278a:	eeb0 0a67 	vmov.f32	s0, s15
 801278e:	3718      	adds	r7, #24
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 8012794:	b580      	push	{r7, lr}
 8012796:	b09a      	sub	sp, #104	; 0x68
 8012798:	af00      	add	r7, sp, #0
 801279a:	6178      	str	r0, [r7, #20]
 801279c:	ed87 0a04 	vstr	s0, [r7, #16]
 80127a0:	edc7 0a03 	vstr	s1, [r7, #12]
 80127a4:	60b9      	str	r1, [r7, #8]
 80127a6:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 80127a8:	ed97 0a04 	vldr	s0, [r7, #16]
 80127ac:	f014 f90e 	bl	80269cc <arm_cos_f32>
 80127b0:	eef0 7a40 	vmov.f32	s15, s0
 80127b4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 80127b8:	f04f 0300 	mov.w	r3, #0
 80127bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80127be:	ed97 0a04 	vldr	s0, [r7, #16]
 80127c2:	f014 f8bd 	bl	8026940 <arm_sin_f32>
 80127c6:	eef0 7a40 	vmov.f32	s15, s0
 80127ca:	eef1 7a67 	vneg.f32	s15, s15
 80127ce:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 80127d2:	f04f 0300 	mov.w	r3, #0
 80127d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80127d8:	ed97 0a03 	vldr	s0, [r7, #12]
 80127dc:	f014 f8f6 	bl	80269cc <arm_cos_f32>
 80127e0:	eef0 7a40 	vmov.f32	s15, s0
 80127e4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 80127e8:	ed97 0a03 	vldr	s0, [r7, #12]
 80127ec:	f014 f8a8 	bl	8026940 <arm_sin_f32>
 80127f0:	eef0 7a40 	vmov.f32	s15, s0
 80127f4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 80127f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80127fc:	2200      	movs	r2, #0
 80127fe:	601a      	str	r2, [r3, #0]
 8012800:	605a      	str	r2, [r3, #4]
 8012802:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 8012804:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012808:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801280c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012810:	4618      	mov	r0, r3
 8012812:	f7ff ff3d 	bl	8012690 <vec_cross_product>
    float len = vec_length(ray);
 8012816:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801281a:	4618      	mov	r0, r3
 801281c:	f7ff ff8d 	bl	801273a <vec_length>
 8012820:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 8012824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012828:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801282c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012830:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8012834:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012838:	2203      	movs	r2, #3
 801283a:	eeb0 0a66 	vmov.f32	s0, s13
 801283e:	4618      	mov	r0, r3
 8012840:	f014 f968 	bl	8026b14 <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 8012844:	2303      	movs	r3, #3
 8012846:	873b      	strh	r3, [r7, #56]	; 0x38
 8012848:	2303      	movs	r3, #3
 801284a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	330c      	adds	r3, #12
 8012850:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 8012852:	2303      	movs	r3, #3
 8012854:	863b      	strh	r3, [r7, #48]	; 0x30
 8012856:	2301      	movs	r3, #1
 8012858:	867b      	strh	r3, [r7, #50]	; 0x32
 801285a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801285e:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 8012860:	2303      	movs	r3, #3
 8012862:	853b      	strh	r3, [r7, #40]	; 0x28
 8012864:	2301      	movs	r3, #1
 8012866:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 801286c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012870:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012874:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012878:	4618      	mov	r0, r3
 801287a:	f013 ffc1 	bl	8026800 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 801287e:	f107 031c 	add.w	r3, r7, #28
 8012882:	2200      	movs	r2, #0
 8012884:	601a      	str	r2, [r3, #0]
 8012886:	605a      	str	r2, [r3, #4]
 8012888:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 801288a:	6978      	ldr	r0, [r7, #20]
 801288c:	f107 011c 	add.w	r1, r7, #28
 8012890:	2303      	movs	r3, #3
 8012892:	687a      	ldr	r2, [r7, #4]
 8012894:	f014 f9da 	bl	8026c4c <arm_add_f32>
}
 8012898:	bf00      	nop
 801289a:	3768      	adds	r7, #104	; 0x68
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b098      	sub	sp, #96	; 0x60
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	60f8      	str	r0, [r7, #12]
 80128a8:	60b9      	str	r1, [r7, #8]
 80128aa:	607a      	str	r2, [r7, #4]
 80128ac:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 80128ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80128b2:	2200      	movs	r2, #0
 80128b4:	601a      	str	r2, [r3, #0]
 80128b6:	605a      	str	r2, [r3, #4]
 80128b8:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 80128ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80128be:	2303      	movs	r3, #3
 80128c0:	6879      	ldr	r1, [r7, #4]
 80128c2:	68f8      	ldr	r0, [r7, #12]
 80128c4:	f014 f8cc 	bl	8026a60 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 80128c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80128cc:	2203      	movs	r2, #3
 80128ce:	68b9      	ldr	r1, [r7, #8]
 80128d0:	68b8      	ldr	r0, [r7, #8]
 80128d2:	f014 f963 	bl	8026b9c <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 80128d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80128da:	2203      	movs	r2, #3
 80128dc:	6839      	ldr	r1, [r7, #0]
 80128de:	68b8      	ldr	r0, [r7, #8]
 80128e0:	f014 f95c 	bl	8026b9c <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 80128e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80128e8:	2203      	movs	r2, #3
 80128ea:	6839      	ldr	r1, [r7, #0]
 80128ec:	6838      	ldr	r0, [r7, #0]
 80128ee:	f014 f955 	bl	8026b9c <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 80128f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80128f6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80128fa:	2203      	movs	r2, #3
 80128fc:	68b8      	ldr	r0, [r7, #8]
 80128fe:	f014 f94d 	bl	8026b9c <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 8012902:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012906:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801290a:	2203      	movs	r2, #3
 801290c:	6838      	ldr	r0, [r7, #0]
 801290e:	f014 f945 	bl	8026b9c <arm_dot_prod_f32>

    float denom = a * c - b * b;
 8012912:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8012916:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801291a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801291e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8012922:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8012926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801292a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801292e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 8012932:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8012936:	eef0 7ae7 	vabs.f32	s15, s15
 801293a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8012a58 <intersect_lines+0x1b8>
 801293e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012946:	d501      	bpl.n	801294c <intersect_lines+0xac>
        return 0;
 8012948:	2300      	movs	r3, #0
 801294a:	e081      	b.n	8012a50 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 801294c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8012950:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012958:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 801295c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012964:	ee77 6a67 	vsub.f32	s13, s14, s15
 8012968:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801296c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012970:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 8012974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012978:	2200      	movs	r2, #0
 801297a:	601a      	str	r2, [r3, #0]
 801297c:	605a      	str	r2, [r3, #4]
 801297e:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 8012980:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012984:	2203      	movs	r2, #3
 8012986:	4619      	mov	r1, r3
 8012988:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 801298c:	68b8      	ldr	r0, [r7, #8]
 801298e:	f014 f8c1 	bl	8026b14 <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 8012992:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012996:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801299a:	2303      	movs	r3, #3
 801299c:	68f9      	ldr	r1, [r7, #12]
 801299e:	f014 f955 	bl	8026c4c <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 80129a2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80129a6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80129aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80129ae:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80129b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80129b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80129ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80129be:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80129c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80129c6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 80129ca:	f107 031c 	add.w	r3, r7, #28
 80129ce:	2200      	movs	r2, #0
 80129d0:	601a      	str	r2, [r3, #0]
 80129d2:	605a      	str	r2, [r3, #4]
 80129d4:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 80129d6:	f107 031c 	add.w	r3, r7, #28
 80129da:	2203      	movs	r2, #3
 80129dc:	4619      	mov	r1, r3
 80129de:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 80129e2:	6838      	ldr	r0, [r7, #0]
 80129e4:	f014 f896 	bl	8026b14 <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 80129e8:	f107 021c 	add.w	r2, r7, #28
 80129ec:	f107 001c 	add.w	r0, r7, #28
 80129f0:	2303      	movs	r3, #3
 80129f2:	6879      	ldr	r1, [r7, #4]
 80129f4:	f014 f92a 	bl	8026c4c <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 80129f8:	f107 0310 	add.w	r3, r7, #16
 80129fc:	2200      	movs	r2, #0
 80129fe:	601a      	str	r2, [r3, #0]
 8012a00:	605a      	str	r2, [r3, #4]
 8012a02:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8012a04:	f107 0210 	add.w	r2, r7, #16
 8012a08:	f107 011c 	add.w	r1, r7, #28
 8012a0c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8012a10:	2303      	movs	r3, #3
 8012a12:	f014 f91b 	bl	8026c4c <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8012a16:	f107 0310 	add.w	r3, r7, #16
 8012a1a:	2203      	movs	r2, #3
 8012a1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012a1e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012a22:	4618      	mov	r0, r3
 8012a24:	f014 f876 	bl	8026b14 <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8012a28:	f107 0210 	add.w	r2, r7, #16
 8012a2c:	f107 011c 	add.w	r1, r7, #28
 8012a30:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8012a34:	2303      	movs	r3, #3
 8012a36:	f014 f813 	bl	8026a60 <arm_sub_f32>
    *dist = vec_length(tmp);
 8012a3a:	f107 0310 	add.w	r3, r7, #16
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7ff fe7b 	bl	801273a <vec_length>
 8012a44:	eef0 7a40 	vmov.f32	s15, s0
 8012a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a4a:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8012a4e:	2301      	movs	r3, #1
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	3760      	adds	r7, #96	; 0x60
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}
 8012a58:	3727c5ac 	.word	0x3727c5ac

08012a5c <LL_AHB2_GRP1_EnableClock>:
{
 8012a5c:	b480      	push	{r7}
 8012a5e:	b085      	sub	sp, #20
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8012a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	4313      	orrs	r3, r2
 8012a72:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8012a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	4013      	ands	r3, r2
 8012a7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012a80:	68fb      	ldr	r3, [r7, #12]
}
 8012a82:	bf00      	nop
 8012a84:	3714      	adds	r7, #20
 8012a86:	46bd      	mov	sp, r7
 8012a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8c:	4770      	bx	lr
	...

08012a90 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b086      	sub	sp, #24
 8012a94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a96:	1d3b      	adds	r3, r7, #4
 8012a98:	2200      	movs	r2, #0
 8012a9a:	601a      	str	r2, [r3, #0]
 8012a9c:	605a      	str	r2, [r3, #4]
 8012a9e:	609a      	str	r2, [r3, #8]
 8012aa0:	60da      	str	r2, [r3, #12]
 8012aa2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012aa4:	2004      	movs	r0, #4
 8012aa6:	f7ff ffd9 	bl	8012a5c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012aaa:	2080      	movs	r0, #128	; 0x80
 8012aac:	f7ff ffd6 	bl	8012a5c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012ab0:	2002      	movs	r0, #2
 8012ab2:	f7ff ffd3 	bl	8012a5c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012ab6:	2001      	movs	r0, #1
 8012ab8:	f7ff ffd0 	bl	8012a5c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012abc:	2010      	movs	r0, #16
 8012abe:	f7ff ffcd 	bl	8012a5c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8012ac2:	2308      	movs	r3, #8
 8012ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012ac6:	2303      	movs	r3, #3
 8012ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012aca:	2300      	movs	r3, #0
 8012acc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8012ace:	1d3b      	adds	r3, r7, #4
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	4829      	ldr	r0, [pc, #164]	; (8012b78 <MX_GPIO_Init+0xe8>)
 8012ad4:	f005 fe68 	bl	80187a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8012ad8:	f240 33f3 	movw	r3, #1011	; 0x3f3
 8012adc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012ade:	2303      	movs	r3, #3
 8012ae0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012ae6:	1d3b      	adds	r3, r7, #4
 8012ae8:	4619      	mov	r1, r3
 8012aea:	4824      	ldr	r0, [pc, #144]	; (8012b7c <MX_GPIO_Init+0xec>)
 8012aec:	f005 fe5c 	bl	80187a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8012af0:	f649 13dc 	movw	r3, #39388	; 0x99dc
 8012af4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012af6:	2303      	movs	r3, #3
 8012af8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012afa:	2300      	movs	r3, #0
 8012afc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012afe:	1d3b      	adds	r3, r7, #4
 8012b00:	4619      	mov	r1, r3
 8012b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012b06:	f005 fe4f 	bl	80187a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8012b0a:	2320      	movs	r3, #32
 8012b0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8012b0e:	4b1c      	ldr	r3, [pc, #112]	; (8012b80 <MX_GPIO_Init+0xf0>)
 8012b10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012b12:	2301      	movs	r3, #1
 8012b14:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8012b16:	1d3b      	adds	r3, r7, #4
 8012b18:	4619      	mov	r1, r3
 8012b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012b1e:	f005 fe43 	bl	80187a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8012b22:	2304      	movs	r3, #4
 8012b24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8012b26:	4b17      	ldr	r3, [pc, #92]	; (8012b84 <MX_GPIO_Init+0xf4>)
 8012b28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8012b2e:	1d3b      	adds	r3, r7, #4
 8012b30:	4619      	mov	r1, r3
 8012b32:	4812      	ldr	r0, [pc, #72]	; (8012b7c <MX_GPIO_Init+0xec>)
 8012b34:	f005 fe38 	bl	80187a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8012b38:	2310      	movs	r3, #16
 8012b3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012b3c:	2303      	movs	r3, #3
 8012b3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b40:	2300      	movs	r3, #0
 8012b42:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012b44:	1d3b      	adds	r3, r7, #4
 8012b46:	4619      	mov	r1, r3
 8012b48:	480f      	ldr	r0, [pc, #60]	; (8012b88 <MX_GPIO_Init+0xf8>)
 8012b4a:	f005 fe2d 	bl	80187a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8012b4e:	2200      	movs	r2, #0
 8012b50:	2105      	movs	r1, #5
 8012b52:	2008      	movs	r0, #8
 8012b54:	f005 f8bd 	bl	8017cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8012b58:	2008      	movs	r0, #8
 8012b5a:	f005 f8d4 	bl	8017d06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8012b5e:	2200      	movs	r2, #0
 8012b60:	2105      	movs	r1, #5
 8012b62:	2017      	movs	r0, #23
 8012b64:	f005 f8b5 	bl	8017cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8012b68:	2017      	movs	r0, #23
 8012b6a:	f005 f8cc 	bl	8017d06 <HAL_NVIC_EnableIRQ>

}
 8012b6e:	bf00      	nop
 8012b70:	3718      	adds	r7, #24
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}
 8012b76:	bf00      	nop
 8012b78:	48001c00 	.word	0x48001c00
 8012b7c:	48000400 	.word	0x48000400
 8012b80:	10210000 	.word	0x10210000
 8012b84:	10110000 	.word	0x10110000
 8012b88:	48001000 	.word	0x48001000

08012b8c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8012b94:	4b06      	ldr	r3, [pc, #24]	; (8012bb0 <LL_EXTI_EnableIT_0_31+0x24>)
 8012b96:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8012b9a:	4905      	ldr	r1, [pc, #20]	; (8012bb0 <LL_EXTI_EnableIT_0_31+0x24>)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	4313      	orrs	r3, r2
 8012ba0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8012ba4:	bf00      	nop
 8012ba6:	370c      	adds	r7, #12
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bae:	4770      	bx	lr
 8012bb0:	58000800 	.word	0x58000800

08012bb4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8012bb4:	b480      	push	{r7}
 8012bb6:	b083      	sub	sp, #12
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8012bbc:	4b05      	ldr	r3, [pc, #20]	; (8012bd4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8012bbe:	681a      	ldr	r2, [r3, #0]
 8012bc0:	4904      	ldr	r1, [pc, #16]	; (8012bd4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	4313      	orrs	r3, r2
 8012bc6:	600b      	str	r3, [r1, #0]

}
 8012bc8:	bf00      	nop
 8012bca:	370c      	adds	r7, #12
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd2:	4770      	bx	lr
 8012bd4:	58000800 	.word	0x58000800

08012bd8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8012bd8:	b480      	push	{r7}
 8012bda:	b083      	sub	sp, #12
 8012bdc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8012bde:	4b0d      	ldr	r3, [pc, #52]	; (8012c14 <ReadRtcSsrValue+0x3c>)
 8012be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012be2:	b29b      	uxth	r3, r3
 8012be4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8012be6:	4b0b      	ldr	r3, [pc, #44]	; (8012c14 <ReadRtcSsrValue+0x3c>)
 8012be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8012bee:	e005      	b.n	8012bfc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8012bf4:	4b07      	ldr	r3, [pc, #28]	; (8012c14 <ReadRtcSsrValue+0x3c>)
 8012bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bf8:	b29b      	uxth	r3, r3
 8012bfa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d1f5      	bne.n	8012bf0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8012c04:	683b      	ldr	r3, [r7, #0]
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	370c      	adds	r7, #12
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop
 8012c14:	40002800 	.word	0x40002800

08012c18 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b085      	sub	sp, #20
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	4603      	mov	r3, r0
 8012c20:	460a      	mov	r2, r1
 8012c22:	71fb      	strb	r3, [r7, #7]
 8012c24:	4613      	mov	r3, r2
 8012c26:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8012c28:	79ba      	ldrb	r2, [r7, #6]
 8012c2a:	491d      	ldr	r1, [pc, #116]	; (8012ca0 <LinkTimerAfter+0x88>)
 8012c2c:	4613      	mov	r3, r2
 8012c2e:	005b      	lsls	r3, r3, #1
 8012c30:	4413      	add	r3, r2
 8012c32:	00db      	lsls	r3, r3, #3
 8012c34:	440b      	add	r3, r1
 8012c36:	3315      	adds	r3, #21
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8012c3c:	7bfb      	ldrb	r3, [r7, #15]
 8012c3e:	2b06      	cmp	r3, #6
 8012c40:	d009      	beq.n	8012c56 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8012c42:	7bfa      	ldrb	r2, [r7, #15]
 8012c44:	4916      	ldr	r1, [pc, #88]	; (8012ca0 <LinkTimerAfter+0x88>)
 8012c46:	4613      	mov	r3, r2
 8012c48:	005b      	lsls	r3, r3, #1
 8012c4a:	4413      	add	r3, r2
 8012c4c:	00db      	lsls	r3, r3, #3
 8012c4e:	440b      	add	r3, r1
 8012c50:	3314      	adds	r3, #20
 8012c52:	79fa      	ldrb	r2, [r7, #7]
 8012c54:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8012c56:	79fa      	ldrb	r2, [r7, #7]
 8012c58:	4911      	ldr	r1, [pc, #68]	; (8012ca0 <LinkTimerAfter+0x88>)
 8012c5a:	4613      	mov	r3, r2
 8012c5c:	005b      	lsls	r3, r3, #1
 8012c5e:	4413      	add	r3, r2
 8012c60:	00db      	lsls	r3, r3, #3
 8012c62:	440b      	add	r3, r1
 8012c64:	3315      	adds	r3, #21
 8012c66:	7bfa      	ldrb	r2, [r7, #15]
 8012c68:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8012c6a:	79fa      	ldrb	r2, [r7, #7]
 8012c6c:	490c      	ldr	r1, [pc, #48]	; (8012ca0 <LinkTimerAfter+0x88>)
 8012c6e:	4613      	mov	r3, r2
 8012c70:	005b      	lsls	r3, r3, #1
 8012c72:	4413      	add	r3, r2
 8012c74:	00db      	lsls	r3, r3, #3
 8012c76:	440b      	add	r3, r1
 8012c78:	3314      	adds	r3, #20
 8012c7a:	79ba      	ldrb	r2, [r7, #6]
 8012c7c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8012c7e:	79ba      	ldrb	r2, [r7, #6]
 8012c80:	4907      	ldr	r1, [pc, #28]	; (8012ca0 <LinkTimerAfter+0x88>)
 8012c82:	4613      	mov	r3, r2
 8012c84:	005b      	lsls	r3, r3, #1
 8012c86:	4413      	add	r3, r2
 8012c88:	00db      	lsls	r3, r3, #3
 8012c8a:	440b      	add	r3, r1
 8012c8c:	3315      	adds	r3, #21
 8012c8e:	79fa      	ldrb	r2, [r7, #7]
 8012c90:	701a      	strb	r2, [r3, #0]

  return;
 8012c92:	bf00      	nop
}
 8012c94:	3714      	adds	r7, #20
 8012c96:	46bd      	mov	sp, r7
 8012c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9c:	4770      	bx	lr
 8012c9e:	bf00      	nop
 8012ca0:	200001ac 	.word	0x200001ac

08012ca4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b085      	sub	sp, #20
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	4603      	mov	r3, r0
 8012cac:	460a      	mov	r2, r1
 8012cae:	71fb      	strb	r3, [r7, #7]
 8012cb0:	4613      	mov	r3, r2
 8012cb2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8012cb4:	4b29      	ldr	r3, [pc, #164]	; (8012d5c <LinkTimerBefore+0xb8>)
 8012cb6:	781b      	ldrb	r3, [r3, #0]
 8012cb8:	b2db      	uxtb	r3, r3
 8012cba:	79ba      	ldrb	r2, [r7, #6]
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d032      	beq.n	8012d26 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8012cc0:	79ba      	ldrb	r2, [r7, #6]
 8012cc2:	4927      	ldr	r1, [pc, #156]	; (8012d60 <LinkTimerBefore+0xbc>)
 8012cc4:	4613      	mov	r3, r2
 8012cc6:	005b      	lsls	r3, r3, #1
 8012cc8:	4413      	add	r3, r2
 8012cca:	00db      	lsls	r3, r3, #3
 8012ccc:	440b      	add	r3, r1
 8012cce:	3314      	adds	r3, #20
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8012cd4:	7bfa      	ldrb	r2, [r7, #15]
 8012cd6:	4922      	ldr	r1, [pc, #136]	; (8012d60 <LinkTimerBefore+0xbc>)
 8012cd8:	4613      	mov	r3, r2
 8012cda:	005b      	lsls	r3, r3, #1
 8012cdc:	4413      	add	r3, r2
 8012cde:	00db      	lsls	r3, r3, #3
 8012ce0:	440b      	add	r3, r1
 8012ce2:	3315      	adds	r3, #21
 8012ce4:	79fa      	ldrb	r2, [r7, #7]
 8012ce6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8012ce8:	79fa      	ldrb	r2, [r7, #7]
 8012cea:	491d      	ldr	r1, [pc, #116]	; (8012d60 <LinkTimerBefore+0xbc>)
 8012cec:	4613      	mov	r3, r2
 8012cee:	005b      	lsls	r3, r3, #1
 8012cf0:	4413      	add	r3, r2
 8012cf2:	00db      	lsls	r3, r3, #3
 8012cf4:	440b      	add	r3, r1
 8012cf6:	3315      	adds	r3, #21
 8012cf8:	79ba      	ldrb	r2, [r7, #6]
 8012cfa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8012cfc:	79fa      	ldrb	r2, [r7, #7]
 8012cfe:	4918      	ldr	r1, [pc, #96]	; (8012d60 <LinkTimerBefore+0xbc>)
 8012d00:	4613      	mov	r3, r2
 8012d02:	005b      	lsls	r3, r3, #1
 8012d04:	4413      	add	r3, r2
 8012d06:	00db      	lsls	r3, r3, #3
 8012d08:	440b      	add	r3, r1
 8012d0a:	3314      	adds	r3, #20
 8012d0c:	7bfa      	ldrb	r2, [r7, #15]
 8012d0e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8012d10:	79ba      	ldrb	r2, [r7, #6]
 8012d12:	4913      	ldr	r1, [pc, #76]	; (8012d60 <LinkTimerBefore+0xbc>)
 8012d14:	4613      	mov	r3, r2
 8012d16:	005b      	lsls	r3, r3, #1
 8012d18:	4413      	add	r3, r2
 8012d1a:	00db      	lsls	r3, r3, #3
 8012d1c:	440b      	add	r3, r1
 8012d1e:	3314      	adds	r3, #20
 8012d20:	79fa      	ldrb	r2, [r7, #7]
 8012d22:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8012d24:	e014      	b.n	8012d50 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8012d26:	79fa      	ldrb	r2, [r7, #7]
 8012d28:	490d      	ldr	r1, [pc, #52]	; (8012d60 <LinkTimerBefore+0xbc>)
 8012d2a:	4613      	mov	r3, r2
 8012d2c:	005b      	lsls	r3, r3, #1
 8012d2e:	4413      	add	r3, r2
 8012d30:	00db      	lsls	r3, r3, #3
 8012d32:	440b      	add	r3, r1
 8012d34:	3315      	adds	r3, #21
 8012d36:	79ba      	ldrb	r2, [r7, #6]
 8012d38:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8012d3a:	79ba      	ldrb	r2, [r7, #6]
 8012d3c:	4908      	ldr	r1, [pc, #32]	; (8012d60 <LinkTimerBefore+0xbc>)
 8012d3e:	4613      	mov	r3, r2
 8012d40:	005b      	lsls	r3, r3, #1
 8012d42:	4413      	add	r3, r2
 8012d44:	00db      	lsls	r3, r3, #3
 8012d46:	440b      	add	r3, r1
 8012d48:	3314      	adds	r3, #20
 8012d4a:	79fa      	ldrb	r2, [r7, #7]
 8012d4c:	701a      	strb	r2, [r3, #0]
  return;
 8012d4e:	bf00      	nop
}
 8012d50:	3714      	adds	r7, #20
 8012d52:	46bd      	mov	sp, r7
 8012d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d58:	4770      	bx	lr
 8012d5a:	bf00      	nop
 8012d5c:	2000023c 	.word	0x2000023c
 8012d60:	200001ac 	.word	0x200001ac

08012d64 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8012d6e:	4b4e      	ldr	r3, [pc, #312]	; (8012ea8 <linkTimer+0x144>)
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	2b06      	cmp	r3, #6
 8012d76:	d118      	bne.n	8012daa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8012d78:	4b4b      	ldr	r3, [pc, #300]	; (8012ea8 <linkTimer+0x144>)
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	b2da      	uxtb	r2, r3
 8012d7e:	4b4b      	ldr	r3, [pc, #300]	; (8012eac <linkTimer+0x148>)
 8012d80:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8012d82:	4a49      	ldr	r2, [pc, #292]	; (8012ea8 <linkTimer+0x144>)
 8012d84:	79fb      	ldrb	r3, [r7, #7]
 8012d86:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8012d88:	79fa      	ldrb	r2, [r7, #7]
 8012d8a:	4949      	ldr	r1, [pc, #292]	; (8012eb0 <linkTimer+0x14c>)
 8012d8c:	4613      	mov	r3, r2
 8012d8e:	005b      	lsls	r3, r3, #1
 8012d90:	4413      	add	r3, r2
 8012d92:	00db      	lsls	r3, r3, #3
 8012d94:	440b      	add	r3, r1
 8012d96:	3315      	adds	r3, #21
 8012d98:	2206      	movs	r2, #6
 8012d9a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8012d9c:	4b45      	ldr	r3, [pc, #276]	; (8012eb4 <linkTimer+0x150>)
 8012d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8012da2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8012da4:	2300      	movs	r3, #0
 8012da6:	81fb      	strh	r3, [r7, #14]
 8012da8:	e078      	b.n	8012e9c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8012daa:	f000 f909 	bl	8012fc0 <ReturnTimeElapsed>
 8012dae:	4603      	mov	r3, r0
 8012db0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8012db2:	79fa      	ldrb	r2, [r7, #7]
 8012db4:	493e      	ldr	r1, [pc, #248]	; (8012eb0 <linkTimer+0x14c>)
 8012db6:	4613      	mov	r3, r2
 8012db8:	005b      	lsls	r3, r3, #1
 8012dba:	4413      	add	r3, r2
 8012dbc:	00db      	lsls	r3, r3, #3
 8012dbe:	440b      	add	r3, r1
 8012dc0:	3308      	adds	r3, #8
 8012dc2:	6819      	ldr	r1, [r3, #0]
 8012dc4:	89fb      	ldrh	r3, [r7, #14]
 8012dc6:	79fa      	ldrb	r2, [r7, #7]
 8012dc8:	4419      	add	r1, r3
 8012dca:	4839      	ldr	r0, [pc, #228]	; (8012eb0 <linkTimer+0x14c>)
 8012dcc:	4613      	mov	r3, r2
 8012dce:	005b      	lsls	r3, r3, #1
 8012dd0:	4413      	add	r3, r2
 8012dd2:	00db      	lsls	r3, r3, #3
 8012dd4:	4403      	add	r3, r0
 8012dd6:	3308      	adds	r3, #8
 8012dd8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8012dda:	79fa      	ldrb	r2, [r7, #7]
 8012ddc:	4934      	ldr	r1, [pc, #208]	; (8012eb0 <linkTimer+0x14c>)
 8012dde:	4613      	mov	r3, r2
 8012de0:	005b      	lsls	r3, r3, #1
 8012de2:	4413      	add	r3, r2
 8012de4:	00db      	lsls	r3, r3, #3
 8012de6:	440b      	add	r3, r1
 8012de8:	3308      	adds	r3, #8
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8012dee:	4b2e      	ldr	r3, [pc, #184]	; (8012ea8 <linkTimer+0x144>)
 8012df0:	781b      	ldrb	r3, [r3, #0]
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	4619      	mov	r1, r3
 8012df6:	4a2e      	ldr	r2, [pc, #184]	; (8012eb0 <linkTimer+0x14c>)
 8012df8:	460b      	mov	r3, r1
 8012dfa:	005b      	lsls	r3, r3, #1
 8012dfc:	440b      	add	r3, r1
 8012dfe:	00db      	lsls	r3, r3, #3
 8012e00:	4413      	add	r3, r2
 8012e02:	3308      	adds	r3, #8
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	68ba      	ldr	r2, [r7, #8]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d337      	bcc.n	8012e7c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8012e0c:	4b26      	ldr	r3, [pc, #152]	; (8012ea8 <linkTimer+0x144>)
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8012e12:	7b7a      	ldrb	r2, [r7, #13]
 8012e14:	4926      	ldr	r1, [pc, #152]	; (8012eb0 <linkTimer+0x14c>)
 8012e16:	4613      	mov	r3, r2
 8012e18:	005b      	lsls	r3, r3, #1
 8012e1a:	4413      	add	r3, r2
 8012e1c:	00db      	lsls	r3, r3, #3
 8012e1e:	440b      	add	r3, r1
 8012e20:	3315      	adds	r3, #21
 8012e22:	781b      	ldrb	r3, [r3, #0]
 8012e24:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8012e26:	e013      	b.n	8012e50 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8012e28:	7b7a      	ldrb	r2, [r7, #13]
 8012e2a:	4921      	ldr	r1, [pc, #132]	; (8012eb0 <linkTimer+0x14c>)
 8012e2c:	4613      	mov	r3, r2
 8012e2e:	005b      	lsls	r3, r3, #1
 8012e30:	4413      	add	r3, r2
 8012e32:	00db      	lsls	r3, r3, #3
 8012e34:	440b      	add	r3, r1
 8012e36:	3315      	adds	r3, #21
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8012e3c:	7b7a      	ldrb	r2, [r7, #13]
 8012e3e:	491c      	ldr	r1, [pc, #112]	; (8012eb0 <linkTimer+0x14c>)
 8012e40:	4613      	mov	r3, r2
 8012e42:	005b      	lsls	r3, r3, #1
 8012e44:	4413      	add	r3, r2
 8012e46:	00db      	lsls	r3, r3, #3
 8012e48:	440b      	add	r3, r1
 8012e4a:	3315      	adds	r3, #21
 8012e4c:	781b      	ldrb	r3, [r3, #0]
 8012e4e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8012e50:	7b3b      	ldrb	r3, [r7, #12]
 8012e52:	2b06      	cmp	r3, #6
 8012e54:	d00b      	beq.n	8012e6e <linkTimer+0x10a>
 8012e56:	7b3a      	ldrb	r2, [r7, #12]
 8012e58:	4915      	ldr	r1, [pc, #84]	; (8012eb0 <linkTimer+0x14c>)
 8012e5a:	4613      	mov	r3, r2
 8012e5c:	005b      	lsls	r3, r3, #1
 8012e5e:	4413      	add	r3, r2
 8012e60:	00db      	lsls	r3, r3, #3
 8012e62:	440b      	add	r3, r1
 8012e64:	3308      	adds	r3, #8
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	68ba      	ldr	r2, [r7, #8]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d2dc      	bcs.n	8012e28 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8012e6e:	7b7a      	ldrb	r2, [r7, #13]
 8012e70:	79fb      	ldrb	r3, [r7, #7]
 8012e72:	4611      	mov	r1, r2
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7ff fecf 	bl	8012c18 <LinkTimerAfter>
 8012e7a:	e00f      	b.n	8012e9c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8012e7c:	4b0a      	ldr	r3, [pc, #40]	; (8012ea8 <linkTimer+0x144>)
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	b2da      	uxtb	r2, r3
 8012e82:	79fb      	ldrb	r3, [r7, #7]
 8012e84:	4611      	mov	r1, r2
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7ff ff0c 	bl	8012ca4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8012e8c:	4b06      	ldr	r3, [pc, #24]	; (8012ea8 <linkTimer+0x144>)
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	b2da      	uxtb	r2, r3
 8012e92:	4b06      	ldr	r3, [pc, #24]	; (8012eac <linkTimer+0x148>)
 8012e94:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8012e96:	4a04      	ldr	r2, [pc, #16]	; (8012ea8 <linkTimer+0x144>)
 8012e98:	79fb      	ldrb	r3, [r7, #7]
 8012e9a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8012e9c:	89fb      	ldrh	r3, [r7, #14]
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3710      	adds	r7, #16
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	2000023c 	.word	0x2000023c
 8012eac:	2000023d 	.word	0x2000023d
 8012eb0:	200001ac 	.word	0x200001ac
 8012eb4:	20000240 	.word	0x20000240

08012eb8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8012eb8:	b480      	push	{r7}
 8012eba:	b085      	sub	sp, #20
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	460a      	mov	r2, r1
 8012ec2:	71fb      	strb	r3, [r7, #7]
 8012ec4:	4613      	mov	r3, r2
 8012ec6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8012ec8:	4b39      	ldr	r3, [pc, #228]	; (8012fb0 <UnlinkTimer+0xf8>)
 8012eca:	781b      	ldrb	r3, [r3, #0]
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	79fa      	ldrb	r2, [r7, #7]
 8012ed0:	429a      	cmp	r2, r3
 8012ed2:	d111      	bne.n	8012ef8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8012ed4:	4b36      	ldr	r3, [pc, #216]	; (8012fb0 <UnlinkTimer+0xf8>)
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	b2da      	uxtb	r2, r3
 8012eda:	4b36      	ldr	r3, [pc, #216]	; (8012fb4 <UnlinkTimer+0xfc>)
 8012edc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8012ede:	79fa      	ldrb	r2, [r7, #7]
 8012ee0:	4935      	ldr	r1, [pc, #212]	; (8012fb8 <UnlinkTimer+0x100>)
 8012ee2:	4613      	mov	r3, r2
 8012ee4:	005b      	lsls	r3, r3, #1
 8012ee6:	4413      	add	r3, r2
 8012ee8:	00db      	lsls	r3, r3, #3
 8012eea:	440b      	add	r3, r1
 8012eec:	3315      	adds	r3, #21
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	b2da      	uxtb	r2, r3
 8012ef2:	4b2f      	ldr	r3, [pc, #188]	; (8012fb0 <UnlinkTimer+0xf8>)
 8012ef4:	701a      	strb	r2, [r3, #0]
 8012ef6:	e03e      	b.n	8012f76 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8012ef8:	79fa      	ldrb	r2, [r7, #7]
 8012efa:	492f      	ldr	r1, [pc, #188]	; (8012fb8 <UnlinkTimer+0x100>)
 8012efc:	4613      	mov	r3, r2
 8012efe:	005b      	lsls	r3, r3, #1
 8012f00:	4413      	add	r3, r2
 8012f02:	00db      	lsls	r3, r3, #3
 8012f04:	440b      	add	r3, r1
 8012f06:	3314      	adds	r3, #20
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8012f0c:	79fa      	ldrb	r2, [r7, #7]
 8012f0e:	492a      	ldr	r1, [pc, #168]	; (8012fb8 <UnlinkTimer+0x100>)
 8012f10:	4613      	mov	r3, r2
 8012f12:	005b      	lsls	r3, r3, #1
 8012f14:	4413      	add	r3, r2
 8012f16:	00db      	lsls	r3, r3, #3
 8012f18:	440b      	add	r3, r1
 8012f1a:	3315      	adds	r3, #21
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8012f20:	79f9      	ldrb	r1, [r7, #7]
 8012f22:	7bfa      	ldrb	r2, [r7, #15]
 8012f24:	4824      	ldr	r0, [pc, #144]	; (8012fb8 <UnlinkTimer+0x100>)
 8012f26:	460b      	mov	r3, r1
 8012f28:	005b      	lsls	r3, r3, #1
 8012f2a:	440b      	add	r3, r1
 8012f2c:	00db      	lsls	r3, r3, #3
 8012f2e:	4403      	add	r3, r0
 8012f30:	3315      	adds	r3, #21
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	b2d8      	uxtb	r0, r3
 8012f36:	4920      	ldr	r1, [pc, #128]	; (8012fb8 <UnlinkTimer+0x100>)
 8012f38:	4613      	mov	r3, r2
 8012f3a:	005b      	lsls	r3, r3, #1
 8012f3c:	4413      	add	r3, r2
 8012f3e:	00db      	lsls	r3, r3, #3
 8012f40:	440b      	add	r3, r1
 8012f42:	3315      	adds	r3, #21
 8012f44:	4602      	mov	r2, r0
 8012f46:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8012f48:	7bbb      	ldrb	r3, [r7, #14]
 8012f4a:	2b06      	cmp	r3, #6
 8012f4c:	d013      	beq.n	8012f76 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8012f4e:	79f9      	ldrb	r1, [r7, #7]
 8012f50:	7bba      	ldrb	r2, [r7, #14]
 8012f52:	4819      	ldr	r0, [pc, #100]	; (8012fb8 <UnlinkTimer+0x100>)
 8012f54:	460b      	mov	r3, r1
 8012f56:	005b      	lsls	r3, r3, #1
 8012f58:	440b      	add	r3, r1
 8012f5a:	00db      	lsls	r3, r3, #3
 8012f5c:	4403      	add	r3, r0
 8012f5e:	3314      	adds	r3, #20
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	b2d8      	uxtb	r0, r3
 8012f64:	4914      	ldr	r1, [pc, #80]	; (8012fb8 <UnlinkTimer+0x100>)
 8012f66:	4613      	mov	r3, r2
 8012f68:	005b      	lsls	r3, r3, #1
 8012f6a:	4413      	add	r3, r2
 8012f6c:	00db      	lsls	r3, r3, #3
 8012f6e:	440b      	add	r3, r1
 8012f70:	3314      	adds	r3, #20
 8012f72:	4602      	mov	r2, r0
 8012f74:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8012f76:	79fa      	ldrb	r2, [r7, #7]
 8012f78:	490f      	ldr	r1, [pc, #60]	; (8012fb8 <UnlinkTimer+0x100>)
 8012f7a:	4613      	mov	r3, r2
 8012f7c:	005b      	lsls	r3, r3, #1
 8012f7e:	4413      	add	r3, r2
 8012f80:	00db      	lsls	r3, r3, #3
 8012f82:	440b      	add	r3, r1
 8012f84:	330c      	adds	r3, #12
 8012f86:	2201      	movs	r2, #1
 8012f88:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8012f8a:	4b09      	ldr	r3, [pc, #36]	; (8012fb0 <UnlinkTimer+0xf8>)
 8012f8c:	781b      	ldrb	r3, [r3, #0]
 8012f8e:	b2db      	uxtb	r3, r3
 8012f90:	2b06      	cmp	r3, #6
 8012f92:	d107      	bne.n	8012fa4 <UnlinkTimer+0xec>
 8012f94:	79bb      	ldrb	r3, [r7, #6]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d104      	bne.n	8012fa4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8012f9a:	4b08      	ldr	r3, [pc, #32]	; (8012fbc <UnlinkTimer+0x104>)
 8012f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8012fa0:	601a      	str	r2, [r3, #0]
  }

  return;
 8012fa2:	bf00      	nop
 8012fa4:	bf00      	nop
}
 8012fa6:	3714      	adds	r7, #20
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fae:	4770      	bx	lr
 8012fb0:	2000023c 	.word	0x2000023c
 8012fb4:	2000023d 	.word	0x2000023d
 8012fb8:	200001ac 	.word	0x200001ac
 8012fbc:	20000240 	.word	0x20000240

08012fc0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8012fc6:	4b1a      	ldr	r3, [pc, #104]	; (8013030 <ReturnTimeElapsed+0x70>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fce:	d026      	beq.n	801301e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8012fd0:	f7ff fe02 	bl	8012bd8 <ReadRtcSsrValue>
 8012fd4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8012fd6:	4b16      	ldr	r3, [pc, #88]	; (8013030 <ReturnTimeElapsed+0x70>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	687a      	ldr	r2, [r7, #4]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d805      	bhi.n	8012fec <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8012fe0:	4b13      	ldr	r3, [pc, #76]	; (8013030 <ReturnTimeElapsed+0x70>)
 8012fe2:	681a      	ldr	r2, [r3, #0]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	1ad3      	subs	r3, r2, r3
 8012fe8:	607b      	str	r3, [r7, #4]
 8012fea:	e00a      	b.n	8013002 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8012fec:	4b11      	ldr	r3, [pc, #68]	; (8013034 <ReturnTimeElapsed+0x74>)
 8012fee:	881b      	ldrh	r3, [r3, #0]
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	1ad3      	subs	r3, r2, r3
 8012ff6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8012ff8:	4b0d      	ldr	r3, [pc, #52]	; (8013030 <ReturnTimeElapsed+0x70>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	683a      	ldr	r2, [r7, #0]
 8012ffe:	4413      	add	r3, r2
 8013000:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8013002:	4b0d      	ldr	r3, [pc, #52]	; (8013038 <ReturnTimeElapsed+0x78>)
 8013004:	781b      	ldrb	r3, [r3, #0]
 8013006:	461a      	mov	r2, r3
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	fb02 f303 	mul.w	r3, r2, r3
 801300e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8013010:	4b0a      	ldr	r3, [pc, #40]	; (801303c <ReturnTimeElapsed+0x7c>)
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	461a      	mov	r2, r3
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	40d3      	lsrs	r3, r2
 801301a:	607b      	str	r3, [r7, #4]
 801301c:	e001      	b.n	8013022 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 801301e:	2300      	movs	r3, #0
 8013020:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	b29b      	uxth	r3, r3
}
 8013026:	4618      	mov	r0, r3
 8013028:	3708      	adds	r7, #8
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	20000240 	.word	0x20000240
 8013034:	20000b16 	.word	0x20000b16
 8013038:	20000b15 	.word	0x20000b15
 801303c:	20000b14 	.word	0x20000b14

08013040 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b082      	sub	sp, #8
 8013044:	af00      	add	r7, sp, #0
 8013046:	4603      	mov	r3, r0
 8013048:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 801304a:	88fb      	ldrh	r3, [r7, #6]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d108      	bne.n	8013062 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8013050:	f7ff fdc2 	bl	8012bd8 <ReadRtcSsrValue>
 8013054:	4602      	mov	r2, r0
 8013056:	4b24      	ldr	r3, [pc, #144]	; (80130e8 <RestartWakeupCounter+0xa8>)
 8013058:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 801305a:	2003      	movs	r0, #3
 801305c:	f004 fe73 	bl	8017d46 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8013060:	e03e      	b.n	80130e0 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8013062:	88fb      	ldrh	r3, [r7, #6]
 8013064:	2b01      	cmp	r3, #1
 8013066:	d803      	bhi.n	8013070 <RestartWakeupCounter+0x30>
 8013068:	4b20      	ldr	r3, [pc, #128]	; (80130ec <RestartWakeupCounter+0xac>)
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	2b01      	cmp	r3, #1
 801306e:	d002      	beq.n	8013076 <RestartWakeupCounter+0x36>
      Value -= 1;
 8013070:	88fb      	ldrh	r3, [r7, #6]
 8013072:	3b01      	subs	r3, #1
 8013074:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8013076:	bf00      	nop
 8013078:	4b1d      	ldr	r3, [pc, #116]	; (80130f0 <RestartWakeupCounter+0xb0>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	68db      	ldr	r3, [r3, #12]
 8013080:	f003 0304 	and.w	r3, r3, #4
 8013084:	2b00      	cmp	r3, #0
 8013086:	d0f7      	beq.n	8013078 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8013088:	4b19      	ldr	r3, [pc, #100]	; (80130f0 <RestartWakeupCounter+0xb0>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	68db      	ldr	r3, [r3, #12]
 8013090:	b2da      	uxtb	r2, r3
 8013092:	4b17      	ldr	r3, [pc, #92]	; (80130f0 <RestartWakeupCounter+0xb0>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	f462 6290 	orn	r2, r2, #1152	; 0x480
 801309c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 801309e:	4b15      	ldr	r3, [pc, #84]	; (80130f4 <RestartWakeupCounter+0xb4>)
 80130a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80130a4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80130a6:	2003      	movs	r0, #3
 80130a8:	f004 fe5b 	bl	8017d62 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80130ac:	4b12      	ldr	r3, [pc, #72]	; (80130f8 <RestartWakeupCounter+0xb8>)
 80130ae:	695b      	ldr	r3, [r3, #20]
 80130b0:	0c1b      	lsrs	r3, r3, #16
 80130b2:	041b      	lsls	r3, r3, #16
 80130b4:	88fa      	ldrh	r2, [r7, #6]
 80130b6:	4910      	ldr	r1, [pc, #64]	; (80130f8 <RestartWakeupCounter+0xb8>)
 80130b8:	4313      	orrs	r3, r2
 80130ba:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80130bc:	f7ff fd8c 	bl	8012bd8 <ReadRtcSsrValue>
 80130c0:	4602      	mov	r2, r0
 80130c2:	4b09      	ldr	r3, [pc, #36]	; (80130e8 <RestartWakeupCounter+0xa8>)
 80130c4:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80130c6:	4b0a      	ldr	r3, [pc, #40]	; (80130f0 <RestartWakeupCounter+0xb0>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	689a      	ldr	r2, [r3, #8]
 80130ce:	4b08      	ldr	r3, [pc, #32]	; (80130f0 <RestartWakeupCounter+0xb0>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80130d8:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80130da:	f3af 8000 	nop.w
  return ;
 80130de:	bf00      	nop
}
 80130e0:	3708      	adds	r7, #8
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}
 80130e6:	bf00      	nop
 80130e8:	20000240 	.word	0x20000240
 80130ec:	20000b14 	.word	0x20000b14
 80130f0:	20000b10 	.word	0x20000b10
 80130f4:	58000800 	.word	0x58000800
 80130f8:	40002800 	.word	0x40002800

080130fc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b084      	sub	sp, #16
 8013100:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8013102:	4b47      	ldr	r3, [pc, #284]	; (8013220 <RescheduleTimerList+0x124>)
 8013104:	689b      	ldr	r3, [r3, #8]
 8013106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801310a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801310e:	d108      	bne.n	8013122 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8013110:	bf00      	nop
 8013112:	4b44      	ldr	r3, [pc, #272]	; (8013224 <RescheduleTimerList+0x128>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	f003 0304 	and.w	r3, r3, #4
 801311e:	2b00      	cmp	r3, #0
 8013120:	d1f7      	bne.n	8013112 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8013122:	4b40      	ldr	r3, [pc, #256]	; (8013224 <RescheduleTimerList+0x128>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	689a      	ldr	r2, [r3, #8]
 801312a:	4b3e      	ldr	r3, [pc, #248]	; (8013224 <RescheduleTimerList+0x128>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013134:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8013136:	4b3c      	ldr	r3, [pc, #240]	; (8013228 <RescheduleTimerList+0x12c>)
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 801313c:	7bfa      	ldrb	r2, [r7, #15]
 801313e:	493b      	ldr	r1, [pc, #236]	; (801322c <RescheduleTimerList+0x130>)
 8013140:	4613      	mov	r3, r2
 8013142:	005b      	lsls	r3, r3, #1
 8013144:	4413      	add	r3, r2
 8013146:	00db      	lsls	r3, r3, #3
 8013148:	440b      	add	r3, r1
 801314a:	3308      	adds	r3, #8
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8013150:	f7ff ff36 	bl	8012fc0 <ReturnTimeElapsed>
 8013154:	4603      	mov	r3, r0
 8013156:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8013158:	88fb      	ldrh	r3, [r7, #6]
 801315a:	68ba      	ldr	r2, [r7, #8]
 801315c:	429a      	cmp	r2, r3
 801315e:	d205      	bcs.n	801316c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8013160:	2300      	movs	r3, #0
 8013162:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8013164:	4b32      	ldr	r3, [pc, #200]	; (8013230 <RescheduleTimerList+0x134>)
 8013166:	2201      	movs	r2, #1
 8013168:	701a      	strb	r2, [r3, #0]
 801316a:	e04d      	b.n	8013208 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 801316c:	88fb      	ldrh	r3, [r7, #6]
 801316e:	4a31      	ldr	r2, [pc, #196]	; (8013234 <RescheduleTimerList+0x138>)
 8013170:	8812      	ldrh	r2, [r2, #0]
 8013172:	b292      	uxth	r2, r2
 8013174:	4413      	add	r3, r2
 8013176:	461a      	mov	r2, r3
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	4293      	cmp	r3, r2
 801317c:	d906      	bls.n	801318c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 801317e:	4b2d      	ldr	r3, [pc, #180]	; (8013234 <RescheduleTimerList+0x138>)
 8013180:	881b      	ldrh	r3, [r3, #0]
 8013182:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8013184:	4b2a      	ldr	r3, [pc, #168]	; (8013230 <RescheduleTimerList+0x134>)
 8013186:	2200      	movs	r2, #0
 8013188:	701a      	strb	r2, [r3, #0]
 801318a:	e03d      	b.n	8013208 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	b29a      	uxth	r2, r3
 8013190:	88fb      	ldrh	r3, [r7, #6]
 8013192:	1ad3      	subs	r3, r2, r3
 8013194:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8013196:	4b26      	ldr	r3, [pc, #152]	; (8013230 <RescheduleTimerList+0x134>)
 8013198:	2201      	movs	r2, #1
 801319a:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 801319c:	e034      	b.n	8013208 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 801319e:	7bfa      	ldrb	r2, [r7, #15]
 80131a0:	4922      	ldr	r1, [pc, #136]	; (801322c <RescheduleTimerList+0x130>)
 80131a2:	4613      	mov	r3, r2
 80131a4:	005b      	lsls	r3, r3, #1
 80131a6:	4413      	add	r3, r2
 80131a8:	00db      	lsls	r3, r3, #3
 80131aa:	440b      	add	r3, r1
 80131ac:	3308      	adds	r3, #8
 80131ae:	681a      	ldr	r2, [r3, #0]
 80131b0:	88fb      	ldrh	r3, [r7, #6]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d20a      	bcs.n	80131cc <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80131b6:	7bfa      	ldrb	r2, [r7, #15]
 80131b8:	491c      	ldr	r1, [pc, #112]	; (801322c <RescheduleTimerList+0x130>)
 80131ba:	4613      	mov	r3, r2
 80131bc:	005b      	lsls	r3, r3, #1
 80131be:	4413      	add	r3, r2
 80131c0:	00db      	lsls	r3, r3, #3
 80131c2:	440b      	add	r3, r1
 80131c4:	3308      	adds	r3, #8
 80131c6:	2200      	movs	r2, #0
 80131c8:	601a      	str	r2, [r3, #0]
 80131ca:	e013      	b.n	80131f4 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80131cc:	7bfa      	ldrb	r2, [r7, #15]
 80131ce:	4917      	ldr	r1, [pc, #92]	; (801322c <RescheduleTimerList+0x130>)
 80131d0:	4613      	mov	r3, r2
 80131d2:	005b      	lsls	r3, r3, #1
 80131d4:	4413      	add	r3, r2
 80131d6:	00db      	lsls	r3, r3, #3
 80131d8:	440b      	add	r3, r1
 80131da:	3308      	adds	r3, #8
 80131dc:	6819      	ldr	r1, [r3, #0]
 80131de:	88fb      	ldrh	r3, [r7, #6]
 80131e0:	7bfa      	ldrb	r2, [r7, #15]
 80131e2:	1ac9      	subs	r1, r1, r3
 80131e4:	4811      	ldr	r0, [pc, #68]	; (801322c <RescheduleTimerList+0x130>)
 80131e6:	4613      	mov	r3, r2
 80131e8:	005b      	lsls	r3, r3, #1
 80131ea:	4413      	add	r3, r2
 80131ec:	00db      	lsls	r3, r3, #3
 80131ee:	4403      	add	r3, r0
 80131f0:	3308      	adds	r3, #8
 80131f2:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80131f4:	7bfa      	ldrb	r2, [r7, #15]
 80131f6:	490d      	ldr	r1, [pc, #52]	; (801322c <RescheduleTimerList+0x130>)
 80131f8:	4613      	mov	r3, r2
 80131fa:	005b      	lsls	r3, r3, #1
 80131fc:	4413      	add	r3, r2
 80131fe:	00db      	lsls	r3, r3, #3
 8013200:	440b      	add	r3, r1
 8013202:	3315      	adds	r3, #21
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8013208:	7bfb      	ldrb	r3, [r7, #15]
 801320a:	2b06      	cmp	r3, #6
 801320c:	d1c7      	bne.n	801319e <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 801320e:	89bb      	ldrh	r3, [r7, #12]
 8013210:	4618      	mov	r0, r3
 8013212:	f7ff ff15 	bl	8013040 <RestartWakeupCounter>

  return ;
 8013216:	bf00      	nop
}
 8013218:	3710      	adds	r7, #16
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}
 801321e:	bf00      	nop
 8013220:	40002800 	.word	0x40002800
 8013224:	20000b10 	.word	0x20000b10
 8013228:	2000023c 	.word	0x2000023c
 801322c:	200001ac 	.word	0x200001ac
 8013230:	20000244 	.word	0x20000244
 8013234:	20000b18 	.word	0x20000b18

08013238 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b086      	sub	sp, #24
 801323c:	af00      	add	r7, sp, #0
 801323e:	4603      	mov	r3, r0
 8013240:	6039      	str	r1, [r7, #0]
 8013242:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8013244:	4a61      	ldr	r2, [pc, #388]	; (80133cc <HW_TS_Init+0x194>)
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 801324a:	4b60      	ldr	r3, [pc, #384]	; (80133cc <HW_TS_Init+0x194>)
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	22ca      	movs	r2, #202	; 0xca
 8013252:	625a      	str	r2, [r3, #36]	; 0x24
 8013254:	4b5d      	ldr	r3, [pc, #372]	; (80133cc <HW_TS_Init+0x194>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	2253      	movs	r2, #83	; 0x53
 801325c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801325e:	4b5c      	ldr	r3, [pc, #368]	; (80133d0 <HW_TS_Init+0x198>)
 8013260:	689b      	ldr	r3, [r3, #8]
 8013262:	4a5b      	ldr	r2, [pc, #364]	; (80133d0 <HW_TS_Init+0x198>)
 8013264:	f043 0320 	orr.w	r3, r3, #32
 8013268:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 801326a:	4b59      	ldr	r3, [pc, #356]	; (80133d0 <HW_TS_Init+0x198>)
 801326c:	689b      	ldr	r3, [r3, #8]
 801326e:	b2db      	uxtb	r3, r3
 8013270:	f003 0307 	and.w	r3, r3, #7
 8013274:	b2db      	uxtb	r3, r3
 8013276:	f1c3 0304 	rsb	r3, r3, #4
 801327a:	b2da      	uxtb	r2, r3
 801327c:	4b55      	ldr	r3, [pc, #340]	; (80133d4 <HW_TS_Init+0x19c>)
 801327e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8013280:	4b53      	ldr	r3, [pc, #332]	; (80133d0 <HW_TS_Init+0x198>)
 8013282:	691b      	ldr	r3, [r3, #16]
 8013284:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8013288:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 801328c:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801328e:	68fa      	ldr	r2, [r7, #12]
 8013290:	fa92 f2a2 	rbit	r2, r2
 8013294:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8013296:	68ba      	ldr	r2, [r7, #8]
 8013298:	fab2 f282 	clz	r2, r2
 801329c:	b2d2      	uxtb	r2, r2
 801329e:	40d3      	lsrs	r3, r2
 80132a0:	b2db      	uxtb	r3, r3
 80132a2:	3301      	adds	r3, #1
 80132a4:	b2da      	uxtb	r2, r3
 80132a6:	4b4c      	ldr	r3, [pc, #304]	; (80133d8 <HW_TS_Init+0x1a0>)
 80132a8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80132aa:	4b49      	ldr	r3, [pc, #292]	; (80133d0 <HW_TS_Init+0x198>)
 80132ac:	691b      	ldr	r3, [r3, #16]
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	3301      	adds	r3, #1
 80132b8:	b29a      	uxth	r2, r3
 80132ba:	4b48      	ldr	r3, [pc, #288]	; (80133dc <HW_TS_Init+0x1a4>)
 80132bc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80132be:	4b47      	ldr	r3, [pc, #284]	; (80133dc <HW_TS_Init+0x1a4>)
 80132c0:	881b      	ldrh	r3, [r3, #0]
 80132c2:	3b01      	subs	r3, #1
 80132c4:	4a44      	ldr	r2, [pc, #272]	; (80133d8 <HW_TS_Init+0x1a0>)
 80132c6:	7812      	ldrb	r2, [r2, #0]
 80132c8:	fb02 f303 	mul.w	r3, r2, r3
 80132cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80132d0:	4a40      	ldr	r2, [pc, #256]	; (80133d4 <HW_TS_Init+0x19c>)
 80132d2:	7812      	ldrb	r2, [r2, #0]
 80132d4:	40d3      	lsrs	r3, r2
 80132d6:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80132de:	4293      	cmp	r3, r2
 80132e0:	d904      	bls.n	80132ec <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80132e2:	4b3f      	ldr	r3, [pc, #252]	; (80133e0 <HW_TS_Init+0x1a8>)
 80132e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132e8:	801a      	strh	r2, [r3, #0]
 80132ea:	e003      	b.n	80132f4 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	b29a      	uxth	r2, r3
 80132f0:	4b3b      	ldr	r3, [pc, #236]	; (80133e0 <HW_TS_Init+0x1a8>)
 80132f2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80132f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80132f8:	f7ff fc5c 	bl	8012bb4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80132fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8013300:	f7ff fc44 	bl	8012b8c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8013304:	79fb      	ldrb	r3, [r7, #7]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d143      	bne.n	8013392 <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 801330a:	4b36      	ldr	r3, [pc, #216]	; (80133e4 <HW_TS_Init+0x1ac>)
 801330c:	2201      	movs	r2, #1
 801330e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8013310:	4b35      	ldr	r3, [pc, #212]	; (80133e8 <HW_TS_Init+0x1b0>)
 8013312:	f04f 32ff 	mov.w	r2, #4294967295
 8013316:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8013318:	2300      	movs	r3, #0
 801331a:	75fb      	strb	r3, [r7, #23]
 801331c:	e00c      	b.n	8013338 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 801331e:	7dfa      	ldrb	r2, [r7, #23]
 8013320:	4932      	ldr	r1, [pc, #200]	; (80133ec <HW_TS_Init+0x1b4>)
 8013322:	4613      	mov	r3, r2
 8013324:	005b      	lsls	r3, r3, #1
 8013326:	4413      	add	r3, r2
 8013328:	00db      	lsls	r3, r3, #3
 801332a:	440b      	add	r3, r1
 801332c:	330c      	adds	r3, #12
 801332e:	2200      	movs	r2, #0
 8013330:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8013332:	7dfb      	ldrb	r3, [r7, #23]
 8013334:	3301      	adds	r3, #1
 8013336:	75fb      	strb	r3, [r7, #23]
 8013338:	7dfb      	ldrb	r3, [r7, #23]
 801333a:	2b05      	cmp	r3, #5
 801333c:	d9ef      	bls.n	801331e <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 801333e:	4b2c      	ldr	r3, [pc, #176]	; (80133f0 <HW_TS_Init+0x1b8>)
 8013340:	2206      	movs	r2, #6
 8013342:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8013344:	4b21      	ldr	r3, [pc, #132]	; (80133cc <HW_TS_Init+0x194>)
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	689a      	ldr	r2, [r3, #8]
 801334c:	4b1f      	ldr	r3, [pc, #124]	; (80133cc <HW_TS_Init+0x194>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013356:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8013358:	4b1c      	ldr	r3, [pc, #112]	; (80133cc <HW_TS_Init+0x194>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	68db      	ldr	r3, [r3, #12]
 8013360:	b2da      	uxtb	r2, r3
 8013362:	4b1a      	ldr	r3, [pc, #104]	; (80133cc <HW_TS_Init+0x194>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	f462 6290 	orn	r2, r2, #1152	; 0x480
 801336c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 801336e:	4b21      	ldr	r3, [pc, #132]	; (80133f4 <HW_TS_Init+0x1bc>)
 8013370:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013374:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8013376:	2003      	movs	r0, #3
 8013378:	f004 fcf3 	bl	8017d62 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 801337c:	4b13      	ldr	r3, [pc, #76]	; (80133cc <HW_TS_Init+0x194>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	689a      	ldr	r2, [r3, #8]
 8013384:	4b11      	ldr	r3, [pc, #68]	; (80133cc <HW_TS_Init+0x194>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801338e:	609a      	str	r2, [r3, #8]
 8013390:	e00a      	b.n	80133a8 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8013392:	4b0e      	ldr	r3, [pc, #56]	; (80133cc <HW_TS_Init+0x194>)
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	68db      	ldr	r3, [r3, #12]
 801339a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d002      	beq.n	80133a8 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80133a2:	2003      	movs	r0, #3
 80133a4:	f004 fccf 	bl	8017d46 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80133a8:	4b08      	ldr	r3, [pc, #32]	; (80133cc <HW_TS_Init+0x194>)
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	22ff      	movs	r2, #255	; 0xff
 80133b0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80133b2:	2200      	movs	r2, #0
 80133b4:	2106      	movs	r1, #6
 80133b6:	2003      	movs	r0, #3
 80133b8:	f004 fc8b 	bl	8017cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80133bc:	2003      	movs	r0, #3
 80133be:	f004 fca2 	bl	8017d06 <HAL_NVIC_EnableIRQ>

  return;
 80133c2:	bf00      	nop
}
 80133c4:	3718      	adds	r7, #24
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
 80133ca:	bf00      	nop
 80133cc:	20000b10 	.word	0x20000b10
 80133d0:	40002800 	.word	0x40002800
 80133d4:	20000b14 	.word	0x20000b14
 80133d8:	20000b15 	.word	0x20000b15
 80133dc:	20000b16 	.word	0x20000b16
 80133e0:	20000b18 	.word	0x20000b18
 80133e4:	20000244 	.word	0x20000244
 80133e8:	20000240 	.word	0x20000240
 80133ec:	200001ac 	.word	0x200001ac
 80133f0:	2000023c 	.word	0x2000023c
 80133f4:	58000800 	.word	0x58000800

080133f8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80133f8:	b480      	push	{r7}
 80133fa:	b08b      	sub	sp, #44	; 0x2c
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	60f8      	str	r0, [r7, #12]
 8013400:	60b9      	str	r1, [r7, #8]
 8013402:	603b      	str	r3, [r7, #0]
 8013404:	4613      	mov	r3, r2
 8013406:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8013408:	2300      	movs	r3, #0
 801340a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801340e:	f3ef 8310 	mrs	r3, PRIMASK
 8013412:	61fb      	str	r3, [r7, #28]
  return(result);
 8013414:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013416:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8013418:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 801341a:	e004      	b.n	8013426 <HW_TS_Create+0x2e>
  {
    loop++;
 801341c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013420:	3301      	adds	r3, #1
 8013422:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8013426:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801342a:	2b05      	cmp	r3, #5
 801342c:	d80c      	bhi.n	8013448 <HW_TS_Create+0x50>
 801342e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8013432:	492b      	ldr	r1, [pc, #172]	; (80134e0 <HW_TS_Create+0xe8>)
 8013434:	4613      	mov	r3, r2
 8013436:	005b      	lsls	r3, r3, #1
 8013438:	4413      	add	r3, r2
 801343a:	00db      	lsls	r3, r3, #3
 801343c:	440b      	add	r3, r1
 801343e:	330c      	adds	r3, #12
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	b2db      	uxtb	r3, r3
 8013444:	2b00      	cmp	r3, #0
 8013446:	d1e9      	bne.n	801341c <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8013448:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801344c:	2b06      	cmp	r3, #6
 801344e:	d037      	beq.n	80134c0 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8013450:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8013454:	4922      	ldr	r1, [pc, #136]	; (80134e0 <HW_TS_Create+0xe8>)
 8013456:	4613      	mov	r3, r2
 8013458:	005b      	lsls	r3, r3, #1
 801345a:	4413      	add	r3, r2
 801345c:	00db      	lsls	r3, r3, #3
 801345e:	440b      	add	r3, r1
 8013460:	330c      	adds	r3, #12
 8013462:	2201      	movs	r2, #1
 8013464:	701a      	strb	r2, [r3, #0]
 8013466:	6a3b      	ldr	r3, [r7, #32]
 8013468:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8013470:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8013474:	491a      	ldr	r1, [pc, #104]	; (80134e0 <HW_TS_Create+0xe8>)
 8013476:	4613      	mov	r3, r2
 8013478:	005b      	lsls	r3, r3, #1
 801347a:	4413      	add	r3, r2
 801347c:	00db      	lsls	r3, r3, #3
 801347e:	440b      	add	r3, r1
 8013480:	3310      	adds	r3, #16
 8013482:	68fa      	ldr	r2, [r7, #12]
 8013484:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8013486:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801348a:	4915      	ldr	r1, [pc, #84]	; (80134e0 <HW_TS_Create+0xe8>)
 801348c:	4613      	mov	r3, r2
 801348e:	005b      	lsls	r3, r3, #1
 8013490:	4413      	add	r3, r2
 8013492:	00db      	lsls	r3, r3, #3
 8013494:	440b      	add	r3, r1
 8013496:	330d      	adds	r3, #13
 8013498:	79fa      	ldrb	r2, [r7, #7]
 801349a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 801349c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80134a0:	490f      	ldr	r1, [pc, #60]	; (80134e0 <HW_TS_Create+0xe8>)
 80134a2:	4613      	mov	r3, r2
 80134a4:	005b      	lsls	r3, r3, #1
 80134a6:	4413      	add	r3, r2
 80134a8:	00db      	lsls	r3, r3, #3
 80134aa:	440b      	add	r3, r1
 80134ac:	683a      	ldr	r2, [r7, #0]
 80134ae:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80134b6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80134b8:	2300      	movs	r3, #0
 80134ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80134be:	e007      	b.n	80134d0 <HW_TS_Create+0xd8>
 80134c0:	6a3b      	ldr	r3, [r7, #32]
 80134c2:	617b      	str	r3, [r7, #20]
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80134ca:	2301      	movs	r3, #1
 80134cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80134d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	372c      	adds	r7, #44	; 0x2c
 80134d8:	46bd      	mov	sp, r7
 80134da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134de:	4770      	bx	lr
 80134e0:	200001ac 	.word	0x200001ac

080134e4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b086      	sub	sp, #24
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	4603      	mov	r3, r0
 80134ec:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80134ee:	f3ef 8310 	mrs	r3, PRIMASK
 80134f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80134f4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80134f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80134f8:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80134fa:	2003      	movs	r0, #3
 80134fc:	f004 fc11 	bl	8017d22 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8013500:	4b37      	ldr	r3, [pc, #220]	; (80135e0 <HW_TS_Stop+0xfc>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	22ca      	movs	r2, #202	; 0xca
 8013508:	625a      	str	r2, [r3, #36]	; 0x24
 801350a:	4b35      	ldr	r3, [pc, #212]	; (80135e0 <HW_TS_Stop+0xfc>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	2253      	movs	r2, #83	; 0x53
 8013512:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8013514:	79fa      	ldrb	r2, [r7, #7]
 8013516:	4933      	ldr	r1, [pc, #204]	; (80135e4 <HW_TS_Stop+0x100>)
 8013518:	4613      	mov	r3, r2
 801351a:	005b      	lsls	r3, r3, #1
 801351c:	4413      	add	r3, r2
 801351e:	00db      	lsls	r3, r3, #3
 8013520:	440b      	add	r3, r1
 8013522:	330c      	adds	r3, #12
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	b2db      	uxtb	r3, r3
 8013528:	2b02      	cmp	r3, #2
 801352a:	d148      	bne.n	80135be <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 801352c:	79fb      	ldrb	r3, [r7, #7]
 801352e:	2100      	movs	r1, #0
 8013530:	4618      	mov	r0, r3
 8013532:	f7ff fcc1 	bl	8012eb8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8013536:	4b2c      	ldr	r3, [pc, #176]	; (80135e8 <HW_TS_Stop+0x104>)
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 801353c:	7cfb      	ldrb	r3, [r7, #19]
 801353e:	2b06      	cmp	r3, #6
 8013540:	d135      	bne.n	80135ae <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8013542:	4b2a      	ldr	r3, [pc, #168]	; (80135ec <HW_TS_Stop+0x108>)
 8013544:	689b      	ldr	r3, [r3, #8]
 8013546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801354a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801354e:	d108      	bne.n	8013562 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8013550:	bf00      	nop
 8013552:	4b23      	ldr	r3, [pc, #140]	; (80135e0 <HW_TS_Stop+0xfc>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	68db      	ldr	r3, [r3, #12]
 801355a:	f003 0304 	and.w	r3, r3, #4
 801355e:	2b00      	cmp	r3, #0
 8013560:	d1f7      	bne.n	8013552 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8013562:	4b1f      	ldr	r3, [pc, #124]	; (80135e0 <HW_TS_Stop+0xfc>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	689a      	ldr	r2, [r3, #8]
 801356a:	4b1d      	ldr	r3, [pc, #116]	; (80135e0 <HW_TS_Stop+0xfc>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013574:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8013576:	bf00      	nop
 8013578:	4b19      	ldr	r3, [pc, #100]	; (80135e0 <HW_TS_Stop+0xfc>)
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	68db      	ldr	r3, [r3, #12]
 8013580:	f003 0304 	and.w	r3, r3, #4
 8013584:	2b00      	cmp	r3, #0
 8013586:	d0f7      	beq.n	8013578 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8013588:	4b15      	ldr	r3, [pc, #84]	; (80135e0 <HW_TS_Stop+0xfc>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	68db      	ldr	r3, [r3, #12]
 8013590:	b2da      	uxtb	r2, r3
 8013592:	4b13      	ldr	r3, [pc, #76]	; (80135e0 <HW_TS_Stop+0xfc>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	f462 6290 	orn	r2, r2, #1152	; 0x480
 801359c:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 801359e:	4b14      	ldr	r3, [pc, #80]	; (80135f0 <HW_TS_Stop+0x10c>)
 80135a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80135a4:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80135a6:	2003      	movs	r0, #3
 80135a8:	f004 fbdb 	bl	8017d62 <HAL_NVIC_ClearPendingIRQ>
 80135ac:	e007      	b.n	80135be <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80135ae:	4b11      	ldr	r3, [pc, #68]	; (80135f4 <HW_TS_Stop+0x110>)
 80135b0:	781b      	ldrb	r3, [r3, #0]
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	7cfa      	ldrb	r2, [r7, #19]
 80135b6:	429a      	cmp	r2, r3
 80135b8:	d001      	beq.n	80135be <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80135ba:	f7ff fd9f 	bl	80130fc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80135be:	4b08      	ldr	r3, [pc, #32]	; (80135e0 <HW_TS_Stop+0xfc>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	22ff      	movs	r2, #255	; 0xff
 80135c6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80135c8:	2003      	movs	r0, #3
 80135ca:	f004 fb9c 	bl	8017d06 <HAL_NVIC_EnableIRQ>
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80135d8:	bf00      	nop
}
 80135da:	3718      	adds	r7, #24
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}
 80135e0:	20000b10 	.word	0x20000b10
 80135e4:	200001ac 	.word	0x200001ac
 80135e8:	2000023c 	.word	0x2000023c
 80135ec:	40002800 	.word	0x40002800
 80135f0:	58000800 	.word	0x58000800
 80135f4:	2000023d 	.word	0x2000023d

080135f8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b086      	sub	sp, #24
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	4603      	mov	r3, r0
 8013600:	6039      	str	r1, [r7, #0]
 8013602:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8013604:	79fa      	ldrb	r2, [r7, #7]
 8013606:	493b      	ldr	r1, [pc, #236]	; (80136f4 <HW_TS_Start+0xfc>)
 8013608:	4613      	mov	r3, r2
 801360a:	005b      	lsls	r3, r3, #1
 801360c:	4413      	add	r3, r2
 801360e:	00db      	lsls	r3, r3, #3
 8013610:	440b      	add	r3, r1
 8013612:	330c      	adds	r3, #12
 8013614:	781b      	ldrb	r3, [r3, #0]
 8013616:	b2db      	uxtb	r3, r3
 8013618:	2b02      	cmp	r3, #2
 801361a:	d103      	bne.n	8013624 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 801361c:	79fb      	ldrb	r3, [r7, #7]
 801361e:	4618      	mov	r0, r3
 8013620:	f7ff ff60 	bl	80134e4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013624:	f3ef 8310 	mrs	r3, PRIMASK
 8013628:	60fb      	str	r3, [r7, #12]
  return(result);
 801362a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801362c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801362e:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8013630:	2003      	movs	r0, #3
 8013632:	f004 fb76 	bl	8017d22 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8013636:	4b30      	ldr	r3, [pc, #192]	; (80136f8 <HW_TS_Start+0x100>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	22ca      	movs	r2, #202	; 0xca
 801363e:	625a      	str	r2, [r3, #36]	; 0x24
 8013640:	4b2d      	ldr	r3, [pc, #180]	; (80136f8 <HW_TS_Start+0x100>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	2253      	movs	r2, #83	; 0x53
 8013648:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 801364a:	79fa      	ldrb	r2, [r7, #7]
 801364c:	4929      	ldr	r1, [pc, #164]	; (80136f4 <HW_TS_Start+0xfc>)
 801364e:	4613      	mov	r3, r2
 8013650:	005b      	lsls	r3, r3, #1
 8013652:	4413      	add	r3, r2
 8013654:	00db      	lsls	r3, r3, #3
 8013656:	440b      	add	r3, r1
 8013658:	330c      	adds	r3, #12
 801365a:	2202      	movs	r2, #2
 801365c:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 801365e:	79fa      	ldrb	r2, [r7, #7]
 8013660:	4924      	ldr	r1, [pc, #144]	; (80136f4 <HW_TS_Start+0xfc>)
 8013662:	4613      	mov	r3, r2
 8013664:	005b      	lsls	r3, r3, #1
 8013666:	4413      	add	r3, r2
 8013668:	00db      	lsls	r3, r3, #3
 801366a:	440b      	add	r3, r1
 801366c:	3308      	adds	r3, #8
 801366e:	683a      	ldr	r2, [r7, #0]
 8013670:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8013672:	79fa      	ldrb	r2, [r7, #7]
 8013674:	491f      	ldr	r1, [pc, #124]	; (80136f4 <HW_TS_Start+0xfc>)
 8013676:	4613      	mov	r3, r2
 8013678:	005b      	lsls	r3, r3, #1
 801367a:	4413      	add	r3, r2
 801367c:	00db      	lsls	r3, r3, #3
 801367e:	440b      	add	r3, r1
 8013680:	3304      	adds	r3, #4
 8013682:	683a      	ldr	r2, [r7, #0]
 8013684:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8013686:	79fb      	ldrb	r3, [r7, #7]
 8013688:	4618      	mov	r0, r3
 801368a:	f7ff fb6b 	bl	8012d64 <linkTimer>
 801368e:	4603      	mov	r3, r0
 8013690:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8013692:	4b1a      	ldr	r3, [pc, #104]	; (80136fc <HW_TS_Start+0x104>)
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8013698:	4b19      	ldr	r3, [pc, #100]	; (8013700 <HW_TS_Start+0x108>)
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	b2db      	uxtb	r3, r3
 801369e:	7c7a      	ldrb	r2, [r7, #17]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d002      	beq.n	80136aa <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80136a4:	f7ff fd2a 	bl	80130fc <RescheduleTimerList>
 80136a8:	e013      	b.n	80136d2 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80136aa:	79fa      	ldrb	r2, [r7, #7]
 80136ac:	4911      	ldr	r1, [pc, #68]	; (80136f4 <HW_TS_Start+0xfc>)
 80136ae:	4613      	mov	r3, r2
 80136b0:	005b      	lsls	r3, r3, #1
 80136b2:	4413      	add	r3, r2
 80136b4:	00db      	lsls	r3, r3, #3
 80136b6:	440b      	add	r3, r1
 80136b8:	3308      	adds	r3, #8
 80136ba:	6819      	ldr	r1, [r3, #0]
 80136bc:	8a7b      	ldrh	r3, [r7, #18]
 80136be:	79fa      	ldrb	r2, [r7, #7]
 80136c0:	1ac9      	subs	r1, r1, r3
 80136c2:	480c      	ldr	r0, [pc, #48]	; (80136f4 <HW_TS_Start+0xfc>)
 80136c4:	4613      	mov	r3, r2
 80136c6:	005b      	lsls	r3, r3, #1
 80136c8:	4413      	add	r3, r2
 80136ca:	00db      	lsls	r3, r3, #3
 80136cc:	4403      	add	r3, r0
 80136ce:	3308      	adds	r3, #8
 80136d0:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80136d2:	4b09      	ldr	r3, [pc, #36]	; (80136f8 <HW_TS_Start+0x100>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	22ff      	movs	r2, #255	; 0xff
 80136da:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80136dc:	2003      	movs	r0, #3
 80136de:	f004 fb12 	bl	8017d06 <HAL_NVIC_EnableIRQ>
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80136ec:	bf00      	nop
}
 80136ee:	3718      	adds	r7, #24
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	200001ac 	.word	0x200001ac
 80136f8:	20000b10 	.word	0x20000b10
 80136fc:	2000023c 	.word	0x2000023c
 8013700:	2000023d 	.word	0x2000023d

08013704 <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b086      	sub	sp, #24
 8013708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801370a:	f3ef 8310 	mrs	r3, PRIMASK
 801370e:	60bb      	str	r3, [r7, #8]
  return(result);
 8013710:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013714:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8013716:	4b13      	ldr	r3, [pc, #76]	; (8013764 <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8013718:	689b      	ldr	r3, [r3, #8]
 801371a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801371e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013722:	d112      	bne.n	801374a <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 8013724:	4b0f      	ldr	r3, [pc, #60]	; (8013764 <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8013726:	695b      	ldr	r3, [r3, #20]
 8013728:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 801372a:	f7ff fc49 	bl	8012fc0 <ReturnTimeElapsed>
 801372e:	4603      	mov	r3, r0
 8013730:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 8013732:	89fa      	ldrh	r2, [r7, #14]
 8013734:	89bb      	ldrh	r3, [r7, #12]
 8013736:	429a      	cmp	r2, r3
 8013738:	d904      	bls.n	8013744 <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 801373a:	89fa      	ldrh	r2, [r7, #14]
 801373c:	89bb      	ldrh	r3, [r7, #12]
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	82fb      	strh	r3, [r7, #22]
 8013742:	e005      	b.n	8013750 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 8013744:	2300      	movs	r3, #0
 8013746:	82fb      	strh	r3, [r7, #22]
 8013748:	e002      	b.n	8013750 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 801374a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801374e:	82fb      	strh	r3, [r7, #22]
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 801375a:	8afb      	ldrh	r3, [r7, #22]
}
 801375c:	4618      	mov	r0, r3
 801375e:	3718      	adds	r7, #24
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}
 8013764:	40002800 	.word	0x40002800

08013768 <LL_AHB2_GRP1_EnableClock>:
{
 8013768:	b480      	push	{r7}
 801376a:	b085      	sub	sp, #20
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8013770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4313      	orrs	r3, r2
 801377e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8013780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013784:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	4013      	ands	r3, r2
 801378a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801378c:	68fb      	ldr	r3, [r7, #12]
}
 801378e:	bf00      	nop
 8013790:	3714      	adds	r7, #20
 8013792:	46bd      	mov	sp, r7
 8013794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013798:	4770      	bx	lr

0801379a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 801379a:	b480      	push	{r7}
 801379c:	b085      	sub	sp, #20
 801379e:	af00      	add	r7, sp, #0
 80137a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80137a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80137a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80137a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	4313      	orrs	r3, r2
 80137b0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80137b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80137b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	4013      	ands	r3, r2
 80137bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80137be:	68fb      	ldr	r3, [r7, #12]
}
 80137c0:	bf00      	nop
 80137c2:	3714      	adds	r7, #20
 80137c4:	46bd      	mov	sp, r7
 80137c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ca:	4770      	bx	lr

080137cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80137d0:	4b1b      	ldr	r3, [pc, #108]	; (8013840 <MX_I2C1_Init+0x74>)
 80137d2:	4a1c      	ldr	r2, [pc, #112]	; (8013844 <MX_I2C1_Init+0x78>)
 80137d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 80137d6:	4b1a      	ldr	r3, [pc, #104]	; (8013840 <MX_I2C1_Init+0x74>)
 80137d8:	4a1b      	ldr	r2, [pc, #108]	; (8013848 <MX_I2C1_Init+0x7c>)
 80137da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80137dc:	4b18      	ldr	r3, [pc, #96]	; (8013840 <MX_I2C1_Init+0x74>)
 80137de:	2200      	movs	r2, #0
 80137e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80137e2:	4b17      	ldr	r3, [pc, #92]	; (8013840 <MX_I2C1_Init+0x74>)
 80137e4:	2201      	movs	r2, #1
 80137e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80137e8:	4b15      	ldr	r3, [pc, #84]	; (8013840 <MX_I2C1_Init+0x74>)
 80137ea:	2200      	movs	r2, #0
 80137ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80137ee:	4b14      	ldr	r3, [pc, #80]	; (8013840 <MX_I2C1_Init+0x74>)
 80137f0:	2200      	movs	r2, #0
 80137f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80137f4:	4b12      	ldr	r3, [pc, #72]	; (8013840 <MX_I2C1_Init+0x74>)
 80137f6:	2200      	movs	r2, #0
 80137f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80137fa:	4b11      	ldr	r3, [pc, #68]	; (8013840 <MX_I2C1_Init+0x74>)
 80137fc:	2200      	movs	r2, #0
 80137fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013800:	4b0f      	ldr	r3, [pc, #60]	; (8013840 <MX_I2C1_Init+0x74>)
 8013802:	2200      	movs	r2, #0
 8013804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8013806:	480e      	ldr	r0, [pc, #56]	; (8013840 <MX_I2C1_Init+0x74>)
 8013808:	f005 f9a0 	bl	8018b4c <HAL_I2C_Init>
 801380c:	4603      	mov	r3, r0
 801380e:	2b00      	cmp	r3, #0
 8013810:	d001      	beq.n	8013816 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8013812:	f000 fd97 	bl	8014344 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8013816:	2100      	movs	r1, #0
 8013818:	4809      	ldr	r0, [pc, #36]	; (8013840 <MX_I2C1_Init+0x74>)
 801381a:	f007 f898 	bl	801a94e <HAL_I2CEx_ConfigAnalogFilter>
 801381e:	4603      	mov	r3, r0
 8013820:	2b00      	cmp	r3, #0
 8013822:	d001      	beq.n	8013828 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8013824:	f000 fd8e 	bl	8014344 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8013828:	2100      	movs	r1, #0
 801382a:	4805      	ldr	r0, [pc, #20]	; (8013840 <MX_I2C1_Init+0x74>)
 801382c:	f007 f8da 	bl	801a9e4 <HAL_I2CEx_ConfigDigitalFilter>
 8013830:	4603      	mov	r3, r0
 8013832:	2b00      	cmp	r3, #0
 8013834:	d001      	beq.n	801383a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8013836:	f000 fd85 	bl	8014344 <Error_Handler>
  }

}
 801383a:	bf00      	nop
 801383c:	bd80      	pop	{r7, pc}
 801383e:	bf00      	nop
 8013840:	200281bc 	.word	0x200281bc
 8013844:	40005400 	.word	0x40005400
 8013848:	00e27cae 	.word	0x00e27cae

0801384c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b088      	sub	sp, #32
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013854:	f107 030c 	add.w	r3, r7, #12
 8013858:	2200      	movs	r2, #0
 801385a:	601a      	str	r2, [r3, #0]
 801385c:	605a      	str	r2, [r3, #4]
 801385e:	609a      	str	r2, [r3, #8]
 8013860:	60da      	str	r2, [r3, #12]
 8013862:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	4a13      	ldr	r2, [pc, #76]	; (80138b8 <HAL_I2C_MspInit+0x6c>)
 801386a:	4293      	cmp	r3, r2
 801386c:	d120      	bne.n	80138b0 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801386e:	2001      	movs	r0, #1
 8013870:	f7ff ff7a 	bl	8013768 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013874:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8013878:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801387a:	2312      	movs	r3, #18
 801387c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801387e:	2300      	movs	r3, #0
 8013880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013882:	2300      	movs	r3, #0
 8013884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8013886:	2304      	movs	r3, #4
 8013888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801388a:	f107 030c 	add.w	r3, r7, #12
 801388e:	4619      	mov	r1, r3
 8013890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013894:	f004 ff88 	bl	80187a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8013898:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 801389c:	f7ff ff7d 	bl	801379a <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80138a0:	2200      	movs	r2, #0
 80138a2:	2105      	movs	r1, #5
 80138a4:	201e      	movs	r0, #30
 80138a6:	f004 fa14 	bl	8017cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80138aa:	201e      	movs	r0, #30
 80138ac:	f004 fa2b 	bl	8017d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80138b0:	bf00      	nop
 80138b2:	3720      	adds	r7, #32
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}
 80138b8:	40005400 	.word	0x40005400

080138bc <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 80138bc:	b580      	push	{r7, lr}
 80138be:	b084      	sub	sp, #16
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 80138c4:	4b35      	ldr	r3, [pc, #212]	; (801399c <InertialSensingTask+0xe0>)
 80138c6:	2201      	movs	r2, #1
 80138c8:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
#endif

	uint32_t evt = 0;
 80138ca:	2300      	movs	r3, #0
 80138cc:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80138ce:	f04f 32ff 	mov.w	r2, #4294967295
 80138d2:	2100      	movs	r1, #0
 80138d4:	2001      	movs	r0, #1
 80138d6:	f00a ff67 	bl	801e7a8 <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 80138da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80138de:	f00a fff7 	bl	801e8d0 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 80138e2:	2064      	movs	r0, #100	; 0x64
 80138e4:	f7fe fb48 	bl	8011f78 <IMU_enableRotationVector>
		osDelay(100);
 80138e8:	2064      	movs	r0, #100	; 0x64
 80138ea:	f00a fff1 	bl	801e8d0 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 80138ee:	4b2c      	ldr	r3, [pc, #176]	; (80139a0 <InertialSensingTask+0xe4>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	4a2c      	ldr	r2, [pc, #176]	; (80139a4 <InertialSensingTask+0xe8>)
 80138f4:	4619      	mov	r1, r3
 80138f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80138fa:	f7fe fb4b 	bl	8011f94 <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 80138fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8013902:	f00a ffe5 	bl	801e8d0 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 8013906:	2064      	movs	r0, #100	; 0x64
 8013908:	f00a ffe2 	bl	801e8d0 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 801390c:	4b26      	ldr	r3, [pc, #152]	; (80139a8 <InertialSensingTask+0xec>)
 801390e:	6818      	ldr	r0, [r3, #0]
 8013910:	2364      	movs	r3, #100	; 0x64
 8013912:	2200      	movs	r2, #0
 8013914:	4925      	ldr	r1, [pc, #148]	; (80139ac <InertialSensingTask+0xf0>)
 8013916:	f00b fccb 	bl	801f2b0 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 801391a:	4b25      	ldr	r3, [pc, #148]	; (80139b0 <InertialSensingTask+0xf4>)
 801391c:	6818      	ldr	r0, [r3, #0]
 801391e:	2300      	movs	r3, #0
 8013920:	2200      	movs	r2, #0
 8013922:	4924      	ldr	r1, [pc, #144]	; (80139b4 <InertialSensingTask+0xf8>)
 8013924:	f00b fcc4 	bl	801f2b0 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 8013928:	4b23      	ldr	r3, [pc, #140]	; (80139b8 <InertialSensingTask+0xfc>)
 801392a:	6818      	ldr	r0, [r3, #0]
 801392c:	2300      	movs	r3, #0
 801392e:	2200      	movs	r2, #0
 8013930:	491e      	ldr	r1, [pc, #120]	; (80139ac <InertialSensingTask+0xf0>)
 8013932:	f00b fc49 	bl	801f1c8 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 8013936:	2120      	movs	r1, #32
 8013938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801393c:	f005 f8a4 	bl	8018a88 <HAL_GPIO_ReadPin>
 8013940:	4603      	mov	r3, r0
 8013942:	2b00      	cmp	r3, #0
 8013944:	d101      	bne.n	801394a <InertialSensingTask+0x8e>
 8013946:	f7fe f855 	bl	80119f4 <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 801394a:	2200      	movs	r2, #0
 801394c:	2100      	movs	r1, #0
 801394e:	2002      	movs	r0, #2
 8013950:	f00a ff2a 	bl	801e7a8 <osThreadFlagsWait>
 8013954:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	f003 0302 	and.w	r3, r3, #2
 801395c:	2b00      	cmp	r3, #0
 801395e:	d0d2      	beq.n	8013906 <InertialSensingTask+0x4a>

				// reset IMU
				IMU_softReset();
 8013960:	f7fe faaa 	bl	8011eb8 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 8013964:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8013968:	f00a ffb2 	bl	801e8d0 <osDelay>

				inertialEnabled = 0;
 801396c:	4b0b      	ldr	r3, [pc, #44]	; (801399c <InertialSensingTask+0xe0>)
 801396e:	2200      	movs	r2, #0
 8013970:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 8013972:	4b11      	ldr	r3, [pc, #68]	; (80139b8 <InertialSensingTask+0xfc>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	4618      	mov	r0, r3
 8013978:	f00b fd0c 	bl	801f394 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 801397c:	4b0c      	ldr	r3, [pc, #48]	; (80139b0 <InertialSensingTask+0xf4>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4618      	mov	r0, r3
 8013982:	f00b fd07 	bl	801f394 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 8013986:	4b08      	ldr	r3, [pc, #32]	; (80139a8 <InertialSensingTask+0xec>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	4618      	mov	r0, r3
 801398c:	f00b fd02 	bl	801f394 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8013990:	200e      	movs	r0, #14
 8013992:	f00a feb9 	bl	801e708 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 8013996:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8013998:	e799      	b.n	80138ce <InertialSensingTask+0x12>
 801399a:	bf00      	nop
 801399c:	20000b1a 	.word	0x20000b1a
 80139a0:	20000068 	.word	0x20000068
 80139a4:	2002824c 	.word	0x2002824c
 80139a8:	20027bd8 	.word	0x20027bd8
 80139ac:	20028210 	.word	0x20028210
 80139b0:	20027bbc 	.word	0x20027bbc
 80139b4:	20028228 	.word	0x20028228
 80139b8:	20027bc8 	.word	0x20027bc8

080139bc <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b082      	sub	sp, #8
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	4603      	mov	r3, r0
 80139c4:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 80139c6:	88fb      	ldrh	r3, [r7, #6]
 80139c8:	2b20      	cmp	r3, #32
 80139ca:	d105      	bne.n	80139d8 <HAL_GPIO_EXTI_Callback+0x1c>
 80139cc:	4b04      	ldr	r3, [pc, #16]	; (80139e0 <HAL_GPIO_EXTI_Callback+0x24>)
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	d101      	bne.n	80139d8 <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 80139d4:	f7fe f80e 	bl	80119f4 <IMU_dataAvailable>
	}
}
 80139d8:	bf00      	nop
 80139da:	3708      	adds	r7, #8
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}
 80139e0:	20000b1a 	.word	0x20000b1a

080139e4 <_Input>:
#include "captivate_config.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	460b      	mov	r3, r1
 80139ee:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 80139f0:	480b      	ldr	r0, [pc, #44]	; (8013a20 <_Input+0x3c>)
 80139f2:	f7fe fd77 	bl	80124e4 <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 80139f6:	2101      	movs	r1, #1
 80139f8:	480a      	ldr	r0, [pc, #40]	; (8013a24 <_Input+0x40>)
 80139fa:	f000 fef9 	bl	80147f0 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 80139fe:	4b09      	ldr	r3, [pc, #36]	; (8013a24 <_Input+0x40>)
 8013a00:	4a07      	ldr	r2, [pc, #28]	; (8013a20 <_Input+0x3c>)
 8013a02:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	4a06      	ldr	r2, [pc, #24]	; (8013a24 <_Input+0x40>)
 8013a0a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	78fa      	ldrb	r2, [r7, #3]
 8013a12:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8013a16:	bf00      	nop
 8013a18:	3708      	adds	r7, #8
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	20028278 	.word	0x20028278
 8013a24:	20028300 	.word	0x20028300

08013a28 <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b084      	sub	sp, #16
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8013a30:	2300      	movs	r3, #0
 8013a32:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8013a34:	f04f 32ff 	mov.w	r2, #4294967295
 8013a38:	2100      	movs	r1, #0
 8013a3a:	2001      	movs	r0, #1
 8013a3c:	f00a feb4 	bl	801e7a8 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8013a40:	4818      	ldr	r0, [pc, #96]	; (8013aa4 <PulseHandlerTask+0x7c>)
 8013a42:	f009 fa6f 	bl	801cf24 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8013a46:	4818      	ldr	r0, [pc, #96]	; (8013aa8 <PulseHandlerTask+0x80>)
 8013a48:	f003 ff5c 	bl	8017904 <HAL_COMP_Start>
		_Input(&input0, 0);
 8013a4c:	2100      	movs	r1, #0
 8013a4e:	4817      	ldr	r0, [pc, #92]	; (8013aac <PulseHandlerTask+0x84>)
 8013a50:	f7ff ffc8 	bl	80139e4 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8013a54:	4b16      	ldr	r3, [pc, #88]	; (8013ab0 <PulseHandlerTask+0x88>)
 8013a56:	6818      	ldr	r0, [r3, #0]
 8013a58:	f04f 33ff 	mov.w	r3, #4294967295
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	4915      	ldr	r1, [pc, #84]	; (8013ab4 <PulseHandlerTask+0x8c>)
 8013a60:	f00b fc26 	bl	801f2b0 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8013a64:	4b11      	ldr	r3, [pc, #68]	; (8013aac <PulseHandlerTask+0x84>)
 8013a66:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013a6a:	4912      	ldr	r1, [pc, #72]	; (8013ab4 <PulseHandlerTask+0x8c>)
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f000 fef3 	bl	8014858 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8013a72:	2200      	movs	r2, #0
 8013a74:	2100      	movs	r1, #0
 8013a76:	2002      	movs	r0, #2
 8013a78:	f00a fe96 	bl	801e7a8 <osThreadFlagsWait>
 8013a7c:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	f003 0302 	and.w	r3, r3, #2
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d0e5      	beq.n	8013a54 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8013a88:	4807      	ldr	r0, [pc, #28]	; (8013aa8 <PulseHandlerTask+0x80>)
 8013a8a:	f003 ff85 	bl	8017998 <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8013a8e:	4805      	ldr	r0, [pc, #20]	; (8013aa4 <PulseHandlerTask+0x7c>)
 8013a90:	f009 fa72 	bl	801cf78 <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8013a94:	4b06      	ldr	r3, [pc, #24]	; (8013ab0 <PulseHandlerTask+0x88>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f00b fc7b 	bl	801f394 <osMessageQueueReset>
				break;
 8013a9e:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8013aa0:	e7c8      	b.n	8013a34 <PulseHandlerTask+0xc>
 8013aa2:	bf00      	nop
 8013aa4:	200287d8 	.word	0x200287d8
 8013aa8:	2002802c 	.word	0x2002802c
 8013aac:	20027bdc 	.word	0x20027bdc
 8013ab0:	20027ac4 	.word	0x20027ac4
 8013ab4:	20028258 	.word	0x20028258

08013ab8 <get3D_location>:
}

VIVEVars vive_vars;
struct LogMessage statusMessage;

void get3D_location(void *arguments){
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b084      	sub	sp, #16
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	73fb      	strb	r3, [r7, #15]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8013ac4:	4b30      	ldr	r3, [pc, #192]	; (8013b88 <get3D_location+0xd0>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	2100      	movs	r1, #0
 8013aca:	4618      	mov	r0, r3
 8013acc:	f00b fa38 	bl	801ef40 <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 8013ad0:	4b2e      	ldr	r3, [pc, #184]	; (8013b8c <get3D_location+0xd4>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	2100      	movs	r1, #0
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f00b fa32 	bl	801ef40 <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8013adc:	4b2c      	ldr	r3, [pc, #176]	; (8013b90 <get3D_location+0xd8>)
 8013ade:	6818      	ldr	r0, [r3, #0]
 8013ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	492b      	ldr	r1, [pc, #172]	; (8013b94 <get3D_location+0xdc>)
 8013ae8:	f00b fbe2 	bl	801f2b0 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8013aec:	4b29      	ldr	r3, [pc, #164]	; (8013b94 <get3D_location+0xdc>)
 8013aee:	789b      	ldrb	r3, [r3, #2]
 8013af0:	2b01      	cmp	r3, #1
 8013af2:	d116      	bne.n	8013b22 <get3D_location+0x6a>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8013af4:	4b26      	ldr	r3, [pc, #152]	; (8013b90 <get3D_location+0xd8>)
 8013af6:	6818      	ldr	r0, [r3, #0]
 8013af8:	2300      	movs	r3, #0
 8013afa:	2200      	movs	r2, #0
 8013afc:	4925      	ldr	r1, [pc, #148]	; (8013b94 <get3D_location+0xdc>)
 8013afe:	f00b fb63 	bl	801f1c8 <osMessageQueuePut>

		blinkActive = 1;
 8013b02:	2301      	movs	r3, #1
 8013b04:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8013b06:	4b24      	ldr	r3, [pc, #144]	; (8013b98 <get3D_location+0xe0>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	2102      	movs	r1, #2
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f00a fd99 	bl	801e644 <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8013b12:	4b1e      	ldr	r3, [pc, #120]	; (8013b8c <get3D_location+0xd4>)
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	f04f 31ff 	mov.w	r1, #4294967295
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f00b fa10 	bl	801ef40 <osSemaphoreAcquire>
 8013b20:	e006      	b.n	8013b30 <get3D_location+0x78>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8013b22:	4b1b      	ldr	r3, [pc, #108]	; (8013b90 <get3D_location+0xd8>)
 8013b24:	6818      	ldr	r0, [r3, #0]
 8013b26:	2300      	movs	r3, #0
 8013b28:	2200      	movs	r2, #0
 8013b2a:	491a      	ldr	r1, [pc, #104]	; (8013b94 <get3D_location+0xdc>)
 8013b2c:	f00b fb4c 	bl	801f1c8 <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013b30:	4b1a      	ldr	r3, [pc, #104]	; (8013b9c <get3D_location+0xe4>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	f04f 31ff 	mov.w	r1, #4294967295
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f00b fa01 	bl	801ef40 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8013b3e:	4b18      	ldr	r3, [pc, #96]	; (8013ba0 <get3D_location+0xe8>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	2101      	movs	r1, #1
 8013b44:	4618      	mov	r0, r3
 8013b46:	f00a fd7d 	bl	801e644 <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8013b4a:	4b0f      	ldr	r3, [pc, #60]	; (8013b88 <get3D_location+0xd0>)
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8013b52:	4618      	mov	r0, r3
 8013b54:	f00b f9f4 	bl	801ef40 <osSemaphoreAcquire>
#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8013b58:	4b10      	ldr	r3, [pc, #64]	; (8013b9c <get3D_location+0xe4>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f00b fa55 	bl	801f00c <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8013b62:	4b0f      	ldr	r3, [pc, #60]	; (8013ba0 <get3D_location+0xe8>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	2102      	movs	r1, #2
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f00a fd6b 	bl	801e644 <osThreadFlagsSet>

	if(blinkActive){
 8013b6e:	7bfb      	ldrb	r3, [r7, #15]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d005      	beq.n	8013b80 <get3D_location+0xc8>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8013b74:	4b08      	ldr	r3, [pc, #32]	; (8013b98 <get3D_location+0xe0>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	2101      	movs	r1, #1
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f00a fd62 	bl	801e644 <osThreadFlagsSet>
	}

}
 8013b80:	bf00      	nop
 8013b82:	3710      	adds	r7, #16
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}
 8013b88:	20028000 	.word	0x20028000
 8013b8c:	20028008 	.word	0x20028008
 8013b90:	20027bd4 	.word	0x20027bd4
 8013b94:	20028024 	.word	0x20028024
 8013b98:	20027bb0 	.word	0x20027bb0
 8013b9c:	20027bc4 	.word	0x20027bc4
 8013ba0:	2002800c 	.word	0x2002800c

08013ba4 <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b084      	sub	sp, #16
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	460b      	mov	r3, r1
 8013bae:	807b      	strh	r3, [r7, #2]
 8013bb0:	4613      	mov	r3, r2
 8013bb2:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8013bba:	723b      	strb	r3, [r7, #8]
 8013bbc:	887b      	ldrh	r3, [r7, #2]
 8013bbe:	817b      	strh	r3, [r7, #10]
 8013bc0:	883b      	ldrh	r3, [r7, #0]
 8013bc2:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8013bc4:	4b05      	ldr	r3, [pc, #20]	; (8013bdc <enqueue_pulse+0x38>)
 8013bc6:	6818      	ldr	r0, [r3, #0]
 8013bc8:	f107 0108 	add.w	r1, r7, #8
 8013bcc:	2300      	movs	r3, #0
 8013bce:	2200      	movs	r2, #0
 8013bd0:	f00b fafa 	bl	801f1c8 <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 8013bd4:	bf00      	nop
 8013bd6:	3710      	adds	r7, #16
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	20027ac4 	.word	0x20027ac4

08013be0 <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b086      	sub	sp, #24
 8013be4:	af02      	add	r7, sp, #8
 8013be6:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8013be8:	2300      	movs	r3, #0
 8013bea:	60fb      	str	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
	osSemaphoreRelease(messageI2C_LockHandle);
#endif
	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8013bec:	f04f 32ff 	mov.w	r2, #4294967295
 8013bf0:	2100      	movs	r1, #0
 8013bf2:	2001      	movs	r0, #1
 8013bf4:	f00a fdd8 	bl	801e7a8 <osThreadFlagsWait>
 8013bf8:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	f003 0301 	and.w	r3, r3, #1
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d0f3      	beq.n	8013bec <InterProcessorTask+0xc>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8013c04:	4b66      	ldr	r3, [pc, #408]	; (8013da0 <InterProcessorTask+0x1c0>)
 8013c06:	4a67      	ldr	r2, [pc, #412]	; (8013da4 <InterProcessorTask+0x1c4>)
 8013c08:	6811      	ldr	r1, [r2, #0]
 8013c0a:	6019      	str	r1, [r3, #0]
 8013c0c:	8892      	ldrh	r2, [r2, #4]
 8013c0e:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013c10:	4b65      	ldr	r3, [pc, #404]	; (8013da8 <InterProcessorTask+0x1c8>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	f04f 31ff 	mov.w	r1, #4294967295
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f00b f991 	bl	801ef40 <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8013c1e:	bf00      	nop
 8013c20:	2364      	movs	r3, #100	; 0x64
 8013c22:	9300      	str	r3, [sp, #0]
 8013c24:	2306      	movs	r3, #6
 8013c26:	4a5e      	ldr	r2, [pc, #376]	; (8013da0 <InterProcessorTask+0x1c0>)
 8013c28:	21e6      	movs	r1, #230	; 0xe6
 8013c2a:	4860      	ldr	r0, [pc, #384]	; (8013dac <InterProcessorTask+0x1cc>)
 8013c2c:	f005 f81e 	bl	8018c6c <HAL_I2C_Master_Transmit>
 8013c30:	4603      	mov	r3, r0
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d1f4      	bne.n	8013c20 <InterProcessorTask+0x40>
			osDelay(100);
 8013c36:	2064      	movs	r0, #100	; 0x64
 8013c38:	f00a fe4a 	bl	801e8d0 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8013c3c:	4b5a      	ldr	r3, [pc, #360]	; (8013da8 <InterProcessorTask+0x1c8>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	4618      	mov	r0, r3
 8013c42:	f00b f9e3 	bl	801f00c <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8013c46:	f04f 32ff 	mov.w	r2, #4294967295
 8013c4a:	2100      	movs	r1, #0
 8013c4c:	2006      	movs	r0, #6
 8013c4e:	f00a fdab 	bl	801e7a8 <osThreadFlagsWait>
 8013c52:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	f003 0304 	and.w	r3, r3, #4
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d079      	beq.n	8013d52 <InterProcessorTask+0x172>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013c5e:	4b52      	ldr	r3, [pc, #328]	; (8013da8 <InterProcessorTask+0x1c8>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	f04f 31ff 	mov.w	r1, #4294967295
 8013c66:	4618      	mov	r0, r3
 8013c68:	f00b f96a 	bl	801ef40 <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8013c6c:	e00e      	b.n	8013c8c <InterProcessorTask+0xac>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8013c6e:	4b4e      	ldr	r3, [pc, #312]	; (8013da8 <InterProcessorTask+0x1c8>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	4618      	mov	r0, r3
 8013c74:	f00b f9ca 	bl	801f00c <osSemaphoreRelease>
 						osDelay(100);
 8013c78:	2064      	movs	r0, #100	; 0x64
 8013c7a:	f00a fe29 	bl	801e8d0 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013c7e:	4b4a      	ldr	r3, [pc, #296]	; (8013da8 <InterProcessorTask+0x1c8>)
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	f04f 31ff 	mov.w	r1, #4294967295
 8013c86:	4618      	mov	r0, r3
 8013c88:	f00b f95a 	bl	801ef40 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8013c8c:	2364      	movs	r3, #100	; 0x64
 8013c8e:	9300      	str	r3, [sp, #0]
 8013c90:	2306      	movs	r3, #6
 8013c92:	4a43      	ldr	r2, [pc, #268]	; (8013da0 <InterProcessorTask+0x1c0>)
 8013c94:	21e6      	movs	r1, #230	; 0xe6
 8013c96:	4845      	ldr	r0, [pc, #276]	; (8013dac <InterProcessorTask+0x1cc>)
 8013c98:	f004 ffe8 	bl	8018c6c <HAL_I2C_Master_Transmit>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d1e5      	bne.n	8013c6e <InterProcessorTask+0x8e>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8013ca2:	2008      	movs	r0, #8
 8013ca4:	f00a fd30 	bl	801e708 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8013ca8:	e00e      	b.n	8013cc8 <InterProcessorTask+0xe8>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8013caa:	4b3f      	ldr	r3, [pc, #252]	; (8013da8 <InterProcessorTask+0x1c8>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f00b f9ac 	bl	801f00c <osSemaphoreRelease>
 						osDelay(100);
 8013cb4:	2064      	movs	r0, #100	; 0x64
 8013cb6:	f00a fe0b 	bl	801e8d0 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013cba:	4b3b      	ldr	r3, [pc, #236]	; (8013da8 <InterProcessorTask+0x1c8>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f00b f93c 	bl	801ef40 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8013cc8:	2358      	movs	r3, #88	; 0x58
 8013cca:	4a39      	ldr	r2, [pc, #228]	; (8013db0 <InterProcessorTask+0x1d0>)
 8013ccc:	21e6      	movs	r1, #230	; 0xe6
 8013cce:	4837      	ldr	r0, [pc, #220]	; (8013dac <InterProcessorTask+0x1cc>)
 8013cd0:	f005 f9b6 	bl	8019040 <HAL_I2C_Master_Receive_IT>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d1e7      	bne.n	8013caa <InterProcessorTask+0xca>
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8013cda:	f04f 32ff 	mov.w	r2, #4294967295
 8013cde:	2100      	movs	r1, #0
 8013ce0:	200a      	movs	r0, #10
 8013ce2:	f00a fd61 	bl	801e7a8 <osThreadFlagsWait>
 8013ce6:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8013ce8:	4b2f      	ldr	r3, [pc, #188]	; (8013da8 <InterProcessorTask+0x1c8>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	4618      	mov	r0, r3
 8013cee:	f00b f98d 	bl	801f00c <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	f003 0302 	and.w	r3, r3, #2
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d14e      	bne.n	8013d9a <InterProcessorTask+0x1ba>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8013cfc:	4b2c      	ldr	r3, [pc, #176]	; (8013db0 <InterProcessorTask+0x1d0>)
 8013cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d00:	4a2c      	ldr	r2, [pc, #176]	; (8013db4 <InterProcessorTask+0x1d4>)
 8013d02:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8013d04:	4b2a      	ldr	r3, [pc, #168]	; (8013db0 <InterProcessorTask+0x1d0>)
 8013d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d08:	4a2a      	ldr	r2, [pc, #168]	; (8013db4 <InterProcessorTask+0x1d4>)
 8013d0a:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	60bb      	str	r3, [r7, #8]
 8013d10:	e01c      	b.n	8013d4c <InterProcessorTask+0x16c>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	00db      	lsls	r3, r3, #3
 8013d16:	4a26      	ldr	r2, [pc, #152]	; (8013db0 <InterProcessorTask+0x1d0>)
 8013d18:	4413      	add	r3, r2
 8013d1a:	2208      	movs	r2, #8
 8013d1c:	4619      	mov	r1, r3
 8013d1e:	4825      	ldr	r0, [pc, #148]	; (8013db4 <InterProcessorTask+0x1d4>)
 8013d20:	f013 f818 	bl	8026d54 <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	3305      	adds	r3, #5
 8013d28:	00db      	lsls	r3, r3, #3
 8013d2a:	4a21      	ldr	r2, [pc, #132]	; (8013db0 <InterProcessorTask+0x1d0>)
 8013d2c:	4413      	add	r3, r2
 8013d2e:	2208      	movs	r2, #8
 8013d30:	4619      	mov	r1, r3
 8013d32:	4821      	ldr	r0, [pc, #132]	; (8013db8 <InterProcessorTask+0x1d8>)
 8013d34:	f013 f80e 	bl	8026d54 <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8013d38:	4b20      	ldr	r3, [pc, #128]	; (8013dbc <InterProcessorTask+0x1dc>)
 8013d3a:	6818      	ldr	r0, [r3, #0]
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	2200      	movs	r2, #0
 8013d40:	491c      	ldr	r1, [pc, #112]	; (8013db4 <InterProcessorTask+0x1d4>)
 8013d42:	f00b fa41 	bl	801f1c8 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	3301      	adds	r3, #1
 8013d4a:	60bb      	str	r3, [r7, #8]
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	2b04      	cmp	r3, #4
 8013d50:	dddf      	ble.n	8013d12 <InterProcessorTask+0x132>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	f003 0302 	and.w	r3, r3, #2
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	f43f af74 	beq.w	8013c46 <InterProcessorTask+0x66>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013d5e:	4b12      	ldr	r3, [pc, #72]	; (8013da8 <InterProcessorTask+0x1c8>)
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	f04f 31ff 	mov.w	r1, #4294967295
 8013d66:	4618      	mov	r0, r3
 8013d68:	f00b f8ea 	bl	801ef40 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8013d6c:	bf00      	nop
 8013d6e:	2364      	movs	r3, #100	; 0x64
 8013d70:	9300      	str	r3, [sp, #0]
 8013d72:	2306      	movs	r3, #6
 8013d74:	4a12      	ldr	r2, [pc, #72]	; (8013dc0 <InterProcessorTask+0x1e0>)
 8013d76:	21e6      	movs	r1, #230	; 0xe6
 8013d78:	480c      	ldr	r0, [pc, #48]	; (8013dac <InterProcessorTask+0x1cc>)
 8013d7a:	f004 ff77 	bl	8018c6c <HAL_I2C_Master_Transmit>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d1f4      	bne.n	8013d6e <InterProcessorTask+0x18e>
					osSemaphoreRelease(messageI2C_LockHandle);
 8013d84:	4b08      	ldr	r3, [pc, #32]	; (8013da8 <InterProcessorTask+0x1c8>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f00b f93f 	bl	801f00c <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8013d8e:	4b0b      	ldr	r3, [pc, #44]	; (8013dbc <InterProcessorTask+0x1dc>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	4618      	mov	r0, r3
 8013d94:	f00b fafe 	bl	801f394 <osMessageQueueReset>

					break;
 8013d98:	e000      	b.n	8013d9c <InterProcessorTask+0x1bc>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8013d9a:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8013d9c:	e726      	b.n	8013bec <InterProcessorTask+0xc>
 8013d9e:	bf00      	nop
 8013da0:	20028628 	.word	0x20028628
 8013da4:	20027acc 	.word	0x20027acc
 8013da8:	20027bc4 	.word	0x20027bc4
 8013dac:	200281bc 	.word	0x200281bc
 8013db0:	200285d0 	.word	0x200285d0
 8013db4:	20028630 	.word	0x20028630
 8013db8:	20028638 	.word	0x20028638
 8013dbc:	20027bd0 	.word	0x20027bd0
 8013dc0:	08028c4c 	.word	0x08028c4c

08013dc4 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b082      	sub	sp, #8
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8013dcc:	4b06      	ldr	r3, [pc, #24]	; (8013de8 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	2110      	movs	r1, #16
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f00a fc36 	bl	801e644 <osThreadFlagsSet>
	test_1 = 1;
 8013dd8:	4b04      	ldr	r3, [pc, #16]	; (8013dec <HAL_I2C_MasterTxCpltCallback+0x28>)
 8013dda:	2201      	movs	r2, #1
 8013ddc:	701a      	strb	r2, [r3, #0]
}
 8013dde:	bf00      	nop
 8013de0:	3708      	adds	r7, #8
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
 8013de6:	bf00      	nop
 8013de8:	20028004 	.word	0x20028004
 8013dec:	20000b1b 	.word	0x20000b1b

08013df0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b082      	sub	sp, #8
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8013df8:	4b04      	ldr	r3, [pc, #16]	; (8013e0c <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	2108      	movs	r1, #8
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f00a fc20 	bl	801e644 <osThreadFlagsSet>
}
 8013e04:	bf00      	nop
 8013e06:	3708      	adds	r7, #8
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	20028004 	.word	0x20028004

08013e10 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8013e14:	4b0b      	ldr	r3, [pc, #44]	; (8013e44 <MX_IWDG_Init+0x34>)
 8013e16:	4a0c      	ldr	r2, [pc, #48]	; (8013e48 <MX_IWDG_Init+0x38>)
 8013e18:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8013e1a:	4b0a      	ldr	r3, [pc, #40]	; (8013e44 <MX_IWDG_Init+0x34>)
 8013e1c:	2206      	movs	r2, #6
 8013e1e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8013e20:	4b08      	ldr	r3, [pc, #32]	; (8013e44 <MX_IWDG_Init+0x34>)
 8013e22:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013e26:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8013e28:	4b06      	ldr	r3, [pc, #24]	; (8013e44 <MX_IWDG_Init+0x34>)
 8013e2a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013e2e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8013e30:	4804      	ldr	r0, [pc, #16]	; (8013e44 <MX_IWDG_Init+0x34>)
 8013e32:	f006 fe23 	bl	801aa7c <HAL_IWDG_Init>
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d001      	beq.n	8013e40 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8013e3c:	f000 fa82 	bl	8014344 <Error_Handler>
  }

}
 8013e40:	bf00      	nop
 8013e42:	bd80      	pop	{r7, pc}
 8013e44:	20028648 	.word	0x20028648
 8013e48:	40003000 	.word	0x40003000

08013e4c <LL_AHB2_GRP1_EnableClock>:
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	b085      	sub	sp, #20
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8013e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013e58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	4313      	orrs	r3, r2
 8013e62:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8013e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013e68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	4013      	ands	r3, r2
 8013e6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8013e70:	68fb      	ldr	r3, [r7, #12]
}
 8013e72:	bf00      	nop
 8013e74:	3714      	adds	r7, #20
 8013e76:	46bd      	mov	sp, r7
 8013e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7c:	4770      	bx	lr

08013e7e <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8013e7e:	b580      	push	{r7, lr}
 8013e80:	b082      	sub	sp, #8
 8013e82:	af00      	add	r7, sp, #0
 8013e84:	4603      	mov	r3, r0
 8013e86:	71fb      	strb	r3, [r7, #7]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);

	osSemaphoreRelease(messageI2C_LockHandle);
#else
	BSP_LED_Init(LED_BLUE);
 8013e88:	2000      	movs	r0, #0
 8013e8a:	f000 f8d1 	bl	8014030 <BSP_LED_Init>
	BSP_LED_Init(LED_GREEN);
 8013e8e:	2001      	movs	r0, #1
 8013e90:	f000 f8ce 	bl	8014030 <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
 8013e94:	2002      	movs	r0, #2
 8013e96:	f000 f8cb 	bl	8014030 <BSP_LED_Init>
#endif
}
 8013e9a:	bf00      	nop
 8013e9c:	3708      	adds	r7, #8
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}
	...

08013ea4 <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b082      	sub	sp, #8
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]

	memcpy(led_left_PWM, setColors, 9);
 8013eac:	4b21      	ldr	r3, [pc, #132]	; (8013f34 <FrontLightsSet+0x90>)
 8013eae:	687a      	ldr	r2, [r7, #4]
 8013eb0:	6810      	ldr	r0, [r2, #0]
 8013eb2:	6851      	ldr	r1, [r2, #4]
 8013eb4:	c303      	stmia	r3!, {r0, r1}
 8013eb6:	7a12      	ldrb	r2, [r2, #8]
 8013eb8:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f103 0209 	add.w	r2, r3, #9
 8013ec0:	4b1d      	ldr	r3, [pc, #116]	; (8013f38 <FrontLightsSet+0x94>)
 8013ec2:	6810      	ldr	r0, [r2, #0]
 8013ec4:	6851      	ldr	r1, [r2, #4]
 8013ec6:	c303      	stmia	r3!, {r0, r1}
 8013ec8:	7a12      	ldrb	r2, [r2, #8]
 8013eca:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
	osSemaphoreRelease(messageI2C_LockHandle);
#endif

#ifdef DONGLE_CODE
	    	if(led_left_PWM[LED_LEFT_TOP_R] > 0)
 8013ecc:	4b19      	ldr	r3, [pc, #100]	; (8013f34 <FrontLightsSet+0x90>)
 8013ece:	79db      	ldrb	r3, [r3, #7]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d005      	beq.n	8013ee0 <FrontLightsSet+0x3c>
	    	{
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8013ed4:	2201      	movs	r2, #1
 8013ed6:	2102      	movs	r1, #2
 8013ed8:	4818      	ldr	r0, [pc, #96]	; (8013f3c <FrontLightsSet+0x98>)
 8013eda:	f004 fded 	bl	8018ab8 <HAL_GPIO_WritePin>
 8013ede:	e004      	b.n	8013eea <FrontLightsSet+0x46>

	    	}
	    	else
			{
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	2102      	movs	r1, #2
 8013ee4:	4815      	ldr	r0, [pc, #84]	; (8013f3c <FrontLightsSet+0x98>)
 8013ee6:	f004 fde7 	bl	8018ab8 <HAL_GPIO_WritePin>
			}

	    	// if 1
	    	if (led_left_PWM[LED_LEFT_TOP_B] > 0)
 8013eea:	4b12      	ldr	r3, [pc, #72]	; (8013f34 <FrontLightsSet+0x90>)
 8013eec:	789b      	ldrb	r3, [r3, #2]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d006      	beq.n	8013f00 <FrontLightsSet+0x5c>
	    	{
	    		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	2110      	movs	r1, #16
 8013ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013efa:	f004 fddd 	bl	8018ab8 <HAL_GPIO_WritePin>
 8013efe:	e005      	b.n	8013f0c <FrontLightsSet+0x68>
			}
	    	else
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8013f00:	2200      	movs	r2, #0
 8013f02:	2110      	movs	r1, #16
 8013f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013f08:	f004 fdd6 	bl	8018ab8 <HAL_GPIO_WritePin>
			}

	    	//if 2
	    	if (led_left_PWM[LED_LEFT_TOP_G] > 0)
 8013f0c:	4b09      	ldr	r3, [pc, #36]	; (8013f34 <FrontLightsSet+0x90>)
 8013f0e:	78db      	ldrb	r3, [r3, #3]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d005      	beq.n	8013f20 <FrontLightsSet+0x7c>
	    	{
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8013f14:	2201      	movs	r2, #1
 8013f16:	2101      	movs	r1, #1
 8013f18:	4808      	ldr	r0, [pc, #32]	; (8013f3c <FrontLightsSet+0x98>)
 8013f1a:	f004 fdcd 	bl	8018ab8 <HAL_GPIO_WritePin>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 8013f1e:	e004      	b.n	8013f2a <FrontLightsSet+0x86>
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8013f20:	2200      	movs	r2, #0
 8013f22:	2102      	movs	r1, #2
 8013f24:	4805      	ldr	r0, [pc, #20]	; (8013f3c <FrontLightsSet+0x98>)
 8013f26:	f004 fdc7 	bl	8018ab8 <HAL_GPIO_WritePin>
}
 8013f2a:	bf00      	nop
 8013f2c:	3708      	adds	r7, #8
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bd80      	pop	{r7, pc}
 8013f32:	bf00      	nop
 8013f34:	20000b1c 	.word	0x20000b1c
 8013f38:	20000b28 	.word	0x20000b28
 8013f3c:	48000400 	.word	0x48000400

08013f40 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b08a      	sub	sp, #40	; 0x28
 8013f44:	af04      	add	r7, sp, #16
 8013f46:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8013f48:	2034      	movs	r0, #52	; 0x34
 8013f4a:	f7ff ff98 	bl	8013e7e <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8013f4e:	2035      	movs	r0, #53	; 0x35
 8013f50:	f7ff ff95 	bl	8013e7e <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 8013f54:	2300      	movs	r3, #0
 8013f56:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 8013f58:	2001      	movs	r0, #1
 8013f5a:	f00a fcb9 	bl	801e8d0 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 8013f5e:	4b2f      	ldr	r3, [pc, #188]	; (801401c <ThreadFrontLightsTask+0xdc>)
 8013f60:	6818      	ldr	r0, [r3, #0]
 8013f62:	f107 010c 	add.w	r1, r7, #12
 8013f66:	f04f 33ff 	mov.w	r3, #4294967295
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	f00b f9a0 	bl	801f2b0 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 8013f70:	2300      	movs	r3, #0
 8013f72:	617b      	str	r3, [r7, #20]
 8013f74:	e011      	b.n	8013f9a <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	b2db      	uxtb	r3, r3
 8013f7a:	f003 0301 	and.w	r3, r3, #1
 8013f7e:	b2db      	uxtb	r3, r3
 8013f80:	425b      	negs	r3, r3
 8013f82:	b2d9      	uxtb	r1, r3
 8013f84:	4a26      	ldr	r2, [pc, #152]	; (8014020 <ThreadFrontLightsTask+0xe0>)
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	4413      	add	r3, r2
 8013f8a:	460a      	mov	r2, r1
 8013f8c:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	085b      	lsrs	r3, r3, #1
 8013f92:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8013f94:	697b      	ldr	r3, [r7, #20]
 8013f96:	3301      	adds	r3, #1
 8013f98:	617b      	str	r3, [r7, #20]
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	2b08      	cmp	r3, #8
 8013f9e:	ddea      	ble.n	8013f76 <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	613b      	str	r3, [r7, #16]
 8013fa4:	e011      	b.n	8013fca <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	b2db      	uxtb	r3, r3
 8013faa:	f003 0301 	and.w	r3, r3, #1
 8013fae:	b2db      	uxtb	r3, r3
 8013fb0:	425b      	negs	r3, r3
 8013fb2:	b2d9      	uxtb	r1, r3
 8013fb4:	4a1b      	ldr	r2, [pc, #108]	; (8014024 <ThreadFrontLightsTask+0xe4>)
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	4413      	add	r3, r2
 8013fba:	460a      	mov	r2, r1
 8013fbc:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	085b      	lsrs	r3, r3, #1
 8013fc2:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	3301      	adds	r3, #1
 8013fc8:	613b      	str	r3, [r7, #16]
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	2b08      	cmp	r3, #8
 8013fce:	ddea      	ble.n	8013fa6 <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013fd0:	4b15      	ldr	r3, [pc, #84]	; (8014028 <ThreadFrontLightsTask+0xe8>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f00a ffb1 	bl	801ef40 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8013fde:	2364      	movs	r3, #100	; 0x64
 8013fe0:	9302      	str	r3, [sp, #8]
 8013fe2:	2309      	movs	r3, #9
 8013fe4:	9301      	str	r3, [sp, #4]
 8013fe6:	4b0e      	ldr	r3, [pc, #56]	; (8014020 <ThreadFrontLightsTask+0xe0>)
 8013fe8:	9300      	str	r3, [sp, #0]
 8013fea:	2301      	movs	r3, #1
 8013fec:	2216      	movs	r2, #22
 8013fee:	2168      	movs	r1, #104	; 0x68
 8013ff0:	480e      	ldr	r0, [pc, #56]	; (801402c <ThreadFrontLightsTask+0xec>)
 8013ff2:	f005 f895 	bl	8019120 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8013ff6:	2364      	movs	r3, #100	; 0x64
 8013ff8:	9302      	str	r3, [sp, #8]
 8013ffa:	2309      	movs	r3, #9
 8013ffc:	9301      	str	r3, [sp, #4]
 8013ffe:	4b09      	ldr	r3, [pc, #36]	; (8014024 <ThreadFrontLightsTask+0xe4>)
 8014000:	9300      	str	r3, [sp, #0]
 8014002:	2301      	movs	r3, #1
 8014004:	2216      	movs	r2, #22
 8014006:	216a      	movs	r1, #106	; 0x6a
 8014008:	4808      	ldr	r0, [pc, #32]	; (801402c <ThreadFrontLightsTask+0xec>)
 801400a:	f005 f889 	bl	8019120 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 801400e:	4b06      	ldr	r3, [pc, #24]	; (8014028 <ThreadFrontLightsTask+0xe8>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	4618      	mov	r0, r3
 8014014:	f00a fffa 	bl	801f00c <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 8014018:	e79c      	b.n	8013f54 <ThreadFrontLightsTask+0x14>
 801401a:	bf00      	nop
 801401c:	20027bcc 	.word	0x20027bcc
 8014020:	20000b1c 	.word	0x20000b1c
 8014024:	20000b28 	.word	0x20000b28
 8014028:	20027bc4 	.word	0x20027bc4
 801402c:	200281bc 	.word	0x200281bc

08014030 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b088      	sub	sp, #32
 8014034:	af00      	add	r7, sp, #0
 8014036:	4603      	mov	r3, r0
 8014038:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 801403a:	f107 030c 	add.w	r3, r7, #12
 801403e:	2200      	movs	r2, #0
 8014040:	601a      	str	r2, [r3, #0]
 8014042:	605a      	str	r2, [r3, #4]
 8014044:	609a      	str	r2, [r3, #8]
 8014046:	60da      	str	r2, [r3, #12]
 8014048:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 801404a:	79fb      	ldrb	r3, [r7, #7]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d103      	bne.n	8014058 <BSP_LED_Init+0x28>
 8014050:	2001      	movs	r0, #1
 8014052:	f7ff fefb 	bl	8013e4c <LL_AHB2_GRP1_EnableClock>
 8014056:	e00c      	b.n	8014072 <BSP_LED_Init+0x42>
 8014058:	79fb      	ldrb	r3, [r7, #7]
 801405a:	2b01      	cmp	r3, #1
 801405c:	d103      	bne.n	8014066 <BSP_LED_Init+0x36>
 801405e:	2002      	movs	r0, #2
 8014060:	f7ff fef4 	bl	8013e4c <LL_AHB2_GRP1_EnableClock>
 8014064:	e005      	b.n	8014072 <BSP_LED_Init+0x42>
 8014066:	79fb      	ldrb	r3, [r7, #7]
 8014068:	2b02      	cmp	r3, #2
 801406a:	d102      	bne.n	8014072 <BSP_LED_Init+0x42>
 801406c:	2002      	movs	r0, #2
 801406e:	f7ff feed 	bl	8013e4c <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN_DONGLE[Led];
 8014072:	79fb      	ldrb	r3, [r7, #7]
 8014074:	4a11      	ldr	r2, [pc, #68]	; (80140bc <BSP_LED_Init+0x8c>)
 8014076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801407a:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 801407c:	2301      	movs	r3, #1
 801407e:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8014080:	2300      	movs	r3, #0
 8014082:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8014084:	2302      	movs	r3, #2
 8014086:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT_DONGLE[Led], &gpioinitstruct);
 8014088:	79fb      	ldrb	r3, [r7, #7]
 801408a:	4a0d      	ldr	r2, [pc, #52]	; (80140c0 <BSP_LED_Init+0x90>)
 801408c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014090:	f107 020c 	add.w	r2, r7, #12
 8014094:	4611      	mov	r1, r2
 8014096:	4618      	mov	r0, r3
 8014098:	f004 fb86 	bl	80187a8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led], GPIO_PIN_RESET);
 801409c:	79fb      	ldrb	r3, [r7, #7]
 801409e:	4a08      	ldr	r2, [pc, #32]	; (80140c0 <BSP_LED_Init+0x90>)
 80140a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80140a4:	79fb      	ldrb	r3, [r7, #7]
 80140a6:	4a05      	ldr	r2, [pc, #20]	; (80140bc <BSP_LED_Init+0x8c>)
 80140a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140ac:	2200      	movs	r2, #0
 80140ae:	4619      	mov	r1, r3
 80140b0:	f004 fd02 	bl	8018ab8 <HAL_GPIO_WritePin>
}
 80140b4:	bf00      	nop
 80140b6:	3720      	adds	r7, #32
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}
 80140bc:	08028c54 	.word	0x08028c54
 80140c0:	2000006c 	.word	0x2000006c

080140c4 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	4603      	mov	r3, r0
 80140cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led], GPIO_PIN_SET);
 80140ce:	79fb      	ldrb	r3, [r7, #7]
 80140d0:	4a07      	ldr	r2, [pc, #28]	; (80140f0 <BSP_LED_On+0x2c>)
 80140d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80140d6:	79fb      	ldrb	r3, [r7, #7]
 80140d8:	4a06      	ldr	r2, [pc, #24]	; (80140f4 <BSP_LED_On+0x30>)
 80140da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140de:	2201      	movs	r2, #1
 80140e0:	4619      	mov	r1, r3
 80140e2:	f004 fce9 	bl	8018ab8 <HAL_GPIO_WritePin>
}
 80140e6:	bf00      	nop
 80140e8:	3708      	adds	r7, #8
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}
 80140ee:	bf00      	nop
 80140f0:	2000006c 	.word	0x2000006c
 80140f4:	08028c54 	.word	0x08028c54

080140f8 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	4603      	mov	r3, r0
 8014100:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led], GPIO_PIN_RESET);
 8014102:	79fb      	ldrb	r3, [r7, #7]
 8014104:	4a07      	ldr	r2, [pc, #28]	; (8014124 <BSP_LED_Off+0x2c>)
 8014106:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801410a:	79fb      	ldrb	r3, [r7, #7]
 801410c:	4a06      	ldr	r2, [pc, #24]	; (8014128 <BSP_LED_Off+0x30>)
 801410e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014112:	2200      	movs	r2, #0
 8014114:	4619      	mov	r1, r3
 8014116:	f004 fccf 	bl	8018ab8 <HAL_GPIO_WritePin>
}
 801411a:	bf00      	nop
 801411c:	3708      	adds	r7, #8
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}
 8014122:	bf00      	nop
 8014124:	2000006c 	.word	0x2000006c
 8014128:	08028c54 	.word	0x08028c54

0801412c <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	4603      	mov	r3, r0
 8014134:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led]);
 8014136:	79fb      	ldrb	r3, [r7, #7]
 8014138:	4a06      	ldr	r2, [pc, #24]	; (8014154 <BSP_LED_Toggle+0x28>)
 801413a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801413e:	79fb      	ldrb	r3, [r7, #7]
 8014140:	4a05      	ldr	r2, [pc, #20]	; (8014158 <BSP_LED_Toggle+0x2c>)
 8014142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014146:	4619      	mov	r1, r3
 8014148:	f004 fcce 	bl	8018ae8 <HAL_GPIO_TogglePin>
}
 801414c:	bf00      	nop
 801414e:	3708      	adds	r7, #8
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}
 8014154:	2000006c 	.word	0x2000006c
 8014158:	08028c54 	.word	0x08028c54

0801415c <LL_RCC_LSE_SetDriveCapability>:
{
 801415c:	b480      	push	{r7}
 801415e:	b083      	sub	sp, #12
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8014164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801416c:	f023 0218 	bic.w	r2, r3, #24
 8014170:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	4313      	orrs	r3, r2
 8014178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 801417c:	bf00      	nop
 801417e:	370c      	adds	r7, #12
 8014180:	46bd      	mov	sp, r7
 8014182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014186:	4770      	bx	lr

08014188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801418c:	f002 f83c 	bl	8016208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8014190:	f000 f822 	bl	80141d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8014194:	f7fe fc7c 	bl	8012a90 <MX_GPIO_Init>
  MX_DMA_Init();
 8014198:	f7fd fc19 	bl	80119ce <MX_DMA_Init>
  MX_ADC1_Init();
 801419c:	f7fc fe50 	bl	8010e40 <MX_ADC1_Init>
  MX_RTC_Init();
 80141a0:	f000 fe7c 	bl	8014e9c <MX_RTC_Init>
  MX_TIM2_Init();
 80141a4:	f001 fada 	bl	801575c <MX_TIM2_Init>
  MX_RF_Init();
 80141a8:	f000 fe60 	bl	8014e6c <MX_RF_Init>
  MX_I2C1_Init();
 80141ac:	f7ff fb0e 	bl	80137cc <MX_I2C1_Init>
  MX_COMP1_Init();
 80141b0:	f7fd fafa 	bl	80117a8 <MX_COMP1_Init>
  MX_TIM16_Init();
 80141b4:	f001 fb48 	bl	8015848 <MX_TIM16_Init>
  MX_IWDG_Init();
 80141b8:	f7ff fe2a 	bl	8013e10 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 80141bc:	f001 ff62 	bl	8016084 <MX_TSC_Init>

  HAL_IWDG_Refresh(&hiwdg);
 80141c0:	4804      	ldr	r0, [pc, #16]	; (80141d4 <main+0x4c>)
 80141c2:	f006 fca1 	bl	801ab08 <HAL_IWDG_Refresh>

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80141c6:	f00a f929 	bl	801e41c <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80141ca:	f7fd f869 	bl	80112a0 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 80141ce:	f00a f959 	bl	801e484 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80141d2:	e7fe      	b.n	80141d2 <main+0x4a>
 80141d4:	20028648 	.word	0x20028648

080141d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b0ae      	sub	sp, #184	; 0xb8
 80141dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80141de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80141e2:	2248      	movs	r2, #72	; 0x48
 80141e4:	2100      	movs	r1, #0
 80141e6:	4618      	mov	r0, r3
 80141e8:	f012 fdbf 	bl	8026d6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80141ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80141f0:	2200      	movs	r2, #0
 80141f2:	601a      	str	r2, [r3, #0]
 80141f4:	605a      	str	r2, [r3, #4]
 80141f6:	609a      	str	r2, [r3, #8]
 80141f8:	60da      	str	r2, [r3, #12]
 80141fa:	611a      	str	r2, [r3, #16]
 80141fc:	615a      	str	r2, [r3, #20]
 80141fe:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014200:	1d3b      	adds	r3, r7, #4
 8014202:	2250      	movs	r2, #80	; 0x50
 8014204:	2100      	movs	r1, #0
 8014206:	4618      	mov	r0, r3
 8014208:	f012 fdaf 	bl	8026d6a <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 801420c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014210:	68db      	ldr	r3, [r3, #12]
 8014212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801421a:	f043 0310 	orr.w	r3, r3, #16
 801421e:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8014220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014224:	68db      	ldr	r3, [r3, #12]
 8014226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801422a:	f043 0303 	orr.w	r3, r3, #3
 801422e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8014230:	2000      	movs	r0, #0
 8014232:	f7ff ff93 	bl	801415c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8014236:	4b39      	ldr	r3, [pc, #228]	; (801431c <SystemClock_Config+0x144>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801423e:	4a37      	ldr	r2, [pc, #220]	; (801431c <SystemClock_Config+0x144>)
 8014240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014244:	6013      	str	r3, [r2, #0]
 8014246:	4b35      	ldr	r3, [pc, #212]	; (801431c <SystemClock_Config+0x144>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801424e:	603b      	str	r3, [r7, #0]
 8014250:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8014252:	230f      	movs	r3, #15
 8014254:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8014256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801425a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801425c:	2301      	movs	r3, #1
 801425e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8014260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014264:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8014266:	2340      	movs	r3, #64	; 0x40
 8014268:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801426c:	2305      	movs	r3, #5
 801426e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8014272:	2300      	movs	r3, #0
 8014274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8014278:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801427c:	4618      	mov	r0, r3
 801427e:	f007 f88d 	bl	801b39c <HAL_RCC_OscConfig>
 8014282:	4603      	mov	r3, r0
 8014284:	2b00      	cmp	r3, #0
 8014286:	d001      	beq.n	801428c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8014288:	f000 f85c 	bl	8014344 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 801428c:	236f      	movs	r3, #111	; 0x6f
 801428e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8014290:	2302      	movs	r3, #2
 8014292:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8014294:	2300      	movs	r3, #0
 8014296:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8014298:	2300      	movs	r3, #0
 801429a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801429c:	2300      	movs	r3, #0
 801429e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80142a0:	2300      	movs	r3, #0
 80142a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80142a4:	2300      	movs	r3, #0
 80142a6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80142a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80142ac:	2101      	movs	r1, #1
 80142ae:	4618      	mov	r0, r3
 80142b0:	f007 fbd2 	bl	801ba58 <HAL_RCC_ClockConfig>
 80142b4:	4603      	mov	r3, r0
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d001      	beq.n	80142be <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80142ba:	f000 f843 	bl	8014344 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80142be:	f643 4304 	movw	r3, #15364	; 0x3c04
 80142c2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80142c4:	2306      	movs	r3, #6
 80142c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80142c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80142cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80142ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80142d2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80142d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80142d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80142da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80142de:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80142e0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80142e4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80142e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80142ea:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80142ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80142f0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 80142f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80142f6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80142f8:	2302      	movs	r3, #2
 80142fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80142fc:	2300      	movs	r3, #0
 80142fe:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014300:	1d3b      	adds	r3, r7, #4
 8014302:	4618      	mov	r0, r3
 8014304:	f007 ffff 	bl	801c306 <HAL_RCCEx_PeriphCLKConfig>
 8014308:	4603      	mov	r3, r0
 801430a:	2b00      	cmp	r3, #0
 801430c:	d001      	beq.n	8014312 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 801430e:	f000 f819 	bl	8014344 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8014312:	bf00      	nop
 8014314:	37b8      	adds	r7, #184	; 0xb8
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}
 801431a:	bf00      	nop
 801431c:	58000400 	.word	0x58000400

08014320 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b082      	sub	sp, #8
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	4a04      	ldr	r2, [pc, #16]	; (8014340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801432e:	4293      	cmp	r3, r2
 8014330:	d101      	bne.n	8014336 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8014332:	f001 ff89 	bl	8016248 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8014336:	bf00      	nop
 8014338:	3708      	adds	r7, #8
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}
 801433e:	bf00      	nop
 8014340:	40012c00 	.word	0x40012c00

08014344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8014344:	b480      	push	{r7}
 8014346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8014348:	bf00      	nop
 801434a:	46bd      	mov	sp, r7
 801434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014350:	4770      	bx	lr
	...

08014354 <MasterThreadTask>:

uint8_t logEnabled = 0;
//struct SystemStatus systemStatus = { 0 };
uint32_t startTime = 0;

void MasterThreadTask(void *argument) {
 8014354:	b590      	push	{r4, r7, lr}
 8014356:	b085      	sub	sp, #20
 8014358:	af02      	add	r7, sp, #8
 801435a:	6078      	str	r0, [r7, #4]
#endif

	while (1) {
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 801435c:	4b31      	ldr	r3, [pc, #196]	; (8014424 <MasterThreadTask+0xd0>)
 801435e:	6818      	ldr	r0, [r3, #0]
 8014360:	f04f 33ff 	mov.w	r3, #4294967295
 8014364:	2200      	movs	r2, #0
 8014366:	4930      	ldr	r1, [pc, #192]	; (8014428 <MasterThreadTask+0xd4>)
 8014368:	f00a ffa2 	bl	801f2b0 <osMessageQueueGet>
#endif



		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 801436c:	4b2f      	ldr	r3, [pc, #188]	; (801442c <MasterThreadTask+0xd8>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	4618      	mov	r0, r3
 8014372:	f00b f80f 	bl	801f394 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
 8014376:	4b2d      	ldr	r3, [pc, #180]	; (801442c <MasterThreadTask+0xd8>)
 8014378:	6818      	ldr	r0, [r3, #0]
 801437a:	2300      	movs	r3, #0
 801437c:	2200      	movs	r2, #0
 801437e:	492c      	ldr	r1, [pc, #176]	; (8014430 <MasterThreadTask+0xdc>)
 8014380:	f00a ff22 	bl	801f1c8 <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (togLogMessageReceived.logStatus == ENABLE_LOG) {
 8014384:	4b28      	ldr	r3, [pc, #160]	; (8014428 <MasterThreadTask+0xd4>)
 8014386:	785b      	ldrb	r3, [r3, #1]
 8014388:	2b01      	cmp	r3, #1
 801438a:	d13c      	bne.n	8014406 <MasterThreadTask+0xb2>
			logEnabled = 1;
 801438c:	4b29      	ldr	r3, [pc, #164]	; (8014434 <MasterThreadTask+0xe0>)
 801438e:	2201      	movs	r2, #1
 8014390:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8014392:	4b29      	ldr	r3, [pc, #164]	; (8014438 <MasterThreadTask+0xe4>)
 8014394:	4a24      	ldr	r2, [pc, #144]	; (8014428 <MasterThreadTask+0xd4>)
 8014396:	6811      	ldr	r1, [r2, #0]
 8014398:	6019      	str	r1, [r3, #0]
 801439a:	8892      	ldrh	r2, [r2, #4]
 801439c:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 801439e:	f000 f8d7 	bl	8014550 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 80143a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80143a6:	f00a fa93 	bl	801e8d0 <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 80143aa:	f001 ff5f 	bl	801626c <HAL_GetTick>
 80143ae:	4602      	mov	r2, r0
 80143b0:	4b22      	ldr	r3, [pc, #136]	; (801443c <MasterThreadTask+0xe8>)
 80143b2:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 80143b4:	f000 f84e 	bl	8014454 <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 80143b8:	4b21      	ldr	r3, [pc, #132]	; (8014440 <MasterThreadTask+0xec>)
 80143ba:	9300      	str	r3, [sp, #0]
 80143bc:	4b21      	ldr	r3, [pc, #132]	; (8014444 <MasterThreadTask+0xf0>)
 80143be:	4a22      	ldr	r2, [pc, #136]	; (8014448 <MasterThreadTask+0xf4>)
 80143c0:	4922      	ldr	r1, [pc, #136]	; (801444c <MasterThreadTask+0xf8>)
 80143c2:	4823      	ldr	r0, [pc, #140]	; (8014450 <MasterThreadTask+0xfc>)
 80143c4:	f000 f94a 	bl	801465c <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 80143c8:	4821      	ldr	r0, [pc, #132]	; (8014450 <MasterThreadTask+0xfc>)
 80143ca:	f011 f9eb 	bl	80257a4 <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 80143ce:	4b15      	ldr	r3, [pc, #84]	; (8014424 <MasterThreadTask+0xd0>)
 80143d0:	6818      	ldr	r0, [r3, #0]
 80143d2:	2300      	movs	r3, #0
 80143d4:	2200      	movs	r2, #0
 80143d6:	4914      	ldr	r1, [pc, #80]	; (8014428 <MasterThreadTask+0xd4>)
 80143d8:	f00a ff6a 	bl	801f2b0 <osMessageQueueGet>
 80143dc:	4603      	mov	r3, r0
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d106      	bne.n	80143f0 <MasterThreadTask+0x9c>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 80143e2:	4b11      	ldr	r3, [pc, #68]	; (8014428 <MasterThreadTask+0xd4>)
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d102      	bne.n	80143f0 <MasterThreadTask+0x9c>

						masterExitRoutine();
 80143ea:	f000 f901 	bl	80145f0 <masterExitRoutine>

						// break out of first while loop and wait until told to start logging again
						break;
 80143ee:	e017      	b.n	8014420 <MasterThreadTask+0xcc>
					}
				}

				// add delay to wait for next transmission period
				osDelay(PACKET_SEND_PERIOD - (HAL_GetTick() - startTime));
 80143f0:	4b12      	ldr	r3, [pc, #72]	; (801443c <MasterThreadTask+0xe8>)
 80143f2:	681c      	ldr	r4, [r3, #0]
 80143f4:	f001 ff3a 	bl	801626c <HAL_GetTick>
 80143f8:	4603      	mov	r3, r0
 80143fa:	1ae3      	subs	r3, r4, r3
 80143fc:	3364      	adds	r3, #100	; 0x64
 80143fe:	4618      	mov	r0, r3
 8014400:	f00a fa66 	bl	801e8d0 <osDelay>
				startTime = HAL_GetTick();
 8014404:	e7d1      	b.n	80143aa <MasterThreadTask+0x56>

			}
		} else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 8014406:	4b0b      	ldr	r3, [pc, #44]	; (8014434 <MasterThreadTask+0xe0>)
 8014408:	781b      	ldrb	r3, [r3, #0]
 801440a:	2b01      	cmp	r3, #1
 801440c:	d1a6      	bne.n	801435c <MasterThreadTask+0x8>
 801440e:	4b06      	ldr	r3, [pc, #24]	; (8014428 <MasterThreadTask+0xd4>)
 8014410:	785b      	ldrb	r3, [r3, #1]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d1a2      	bne.n	801435c <MasterThreadTask+0x8>
			logEnabled = 0;
 8014416:	4b07      	ldr	r3, [pc, #28]	; (8014434 <MasterThreadTask+0xe0>)
 8014418:	2200      	movs	r2, #0
 801441a:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 801441c:	f000 f8e8 	bl	80145f0 <masterExitRoutine>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8014420:	e79c      	b.n	801435c <MasterThreadTask+0x8>
 8014422:	bf00      	nop
 8014424:	20027ff8 	.word	0x20027ff8
 8014428:	20027acc 	.word	0x20027acc
 801442c:	20027bd4 	.word	0x20027bd4
 8014430:	08028c5c 	.word	0x08028c5c
 8014434:	20000b31 	.word	0x20000b31
 8014438:	20027ba4 	.word	0x20027ba4
 801443c:	20000b34 	.word	0x20000b34
 8014440:	200286c4 	.word	0x200286c4
 8014444:	200286dc 	.word	0x200286dc
 8014448:	20028718 	.word	0x20028718
 801444c:	20028658 	.word	0x20028658
 8014450:	20027ad8 	.word	0x20027ad8

08014454 <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 8014454:	b5b0      	push	{r4, r5, r7, lr}
 8014456:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8014458:	4b30      	ldr	r3, [pc, #192]	; (801451c <grabSensorData+0xc8>)
 801445a:	789b      	ldrb	r3, [r3, #2]
 801445c:	2b01      	cmp	r3, #1
 801445e:	d111      	bne.n	8014484 <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 8014460:	4b2f      	ldr	r3, [pc, #188]	; (8014520 <grabSensorData+0xcc>)
 8014462:	6818      	ldr	r0, [r3, #0]
 8014464:	2300      	movs	r3, #0
 8014466:	2200      	movs	r2, #0
 8014468:	492e      	ldr	r1, [pc, #184]	; (8014524 <grabSensorData+0xd0>)
 801446a:	f00a ff21 	bl	801f2b0 <osMessageQueueGet>
 801446e:	4603      	mov	r3, r0
 8014470:	2b00      	cmp	r3, #0
 8014472:	d007      	beq.n	8014484 <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 8014474:	4a2b      	ldr	r2, [pc, #172]	; (8014524 <grabSensorData+0xd0>)
 8014476:	4b2c      	ldr	r3, [pc, #176]	; (8014528 <grabSensorData+0xd4>)
 8014478:	4610      	mov	r0, r2
 801447a:	4619      	mov	r1, r3
 801447c:	236c      	movs	r3, #108	; 0x6c
 801447e:	461a      	mov	r2, r3
 8014480:	f012 fc68 	bl	8026d54 <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8014484:	4b25      	ldr	r3, [pc, #148]	; (801451c <grabSensorData+0xc8>)
 8014486:	78db      	ldrb	r3, [r3, #3]
 8014488:	2b01      	cmp	r3, #1
 801448a:	d113      	bne.n	80144b4 <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 801448c:	4b27      	ldr	r3, [pc, #156]	; (801452c <grabSensorData+0xd8>)
 801448e:	6818      	ldr	r0, [r3, #0]
 8014490:	2300      	movs	r3, #0
 8014492:	2200      	movs	r2, #0
 8014494:	4926      	ldr	r1, [pc, #152]	; (8014530 <grabSensorData+0xdc>)
 8014496:	f00a ff0b 	bl	801f2b0 <osMessageQueueGet>
 801449a:	4603      	mov	r3, r0
 801449c:	2b00      	cmp	r3, #0
 801449e:	d009      	beq.n	80144b4 <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 80144a0:	4a23      	ldr	r2, [pc, #140]	; (8014530 <grabSensorData+0xdc>)
 80144a2:	4b24      	ldr	r3, [pc, #144]	; (8014534 <grabSensorData+0xe0>)
 80144a4:	4614      	mov	r4, r2
 80144a6:	461d      	mov	r5, r3
 80144a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80144ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80144b0:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 80144b4:	4b19      	ldr	r3, [pc, #100]	; (801451c <grabSensorData+0xc8>)
 80144b6:	795b      	ldrb	r3, [r3, #5]
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	d113      	bne.n	80144e4 <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 80144bc:	4b1e      	ldr	r3, [pc, #120]	; (8014538 <grabSensorData+0xe4>)
 80144be:	6818      	ldr	r0, [r3, #0]
 80144c0:	2300      	movs	r3, #0
 80144c2:	2200      	movs	r2, #0
 80144c4:	491d      	ldr	r1, [pc, #116]	; (801453c <grabSensorData+0xe8>)
 80144c6:	f00a fef3 	bl	801f2b0 <osMessageQueueGet>
 80144ca:	4603      	mov	r3, r0
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d009      	beq.n	80144e4 <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 80144d0:	4a1a      	ldr	r2, [pc, #104]	; (801453c <grabSensorData+0xe8>)
 80144d2:	4b1b      	ldr	r3, [pc, #108]	; (8014540 <grabSensorData+0xec>)
 80144d4:	4614      	mov	r4, r2
 80144d6:	461d      	mov	r5, r3
 80144d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80144dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80144e0:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80144e4:	4b0d      	ldr	r3, [pc, #52]	; (801451c <grabSensorData+0xc8>)
 80144e6:	791b      	ldrb	r3, [r3, #4]
 80144e8:	2b01      	cmp	r3, #1
 80144ea:	d115      	bne.n	8014518 <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 80144ec:	4b15      	ldr	r3, [pc, #84]	; (8014544 <grabSensorData+0xf0>)
 80144ee:	6818      	ldr	r0, [r3, #0]
 80144f0:	2300      	movs	r3, #0
 80144f2:	2200      	movs	r2, #0
 80144f4:	4914      	ldr	r1, [pc, #80]	; (8014548 <grabSensorData+0xf4>)
 80144f6:	f00a fedb 	bl	801f2b0 <osMessageQueueGet>
 80144fa:	4603      	mov	r3, r0
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d00b      	beq.n	8014518 <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 8014500:	4a11      	ldr	r2, [pc, #68]	; (8014548 <grabSensorData+0xf4>)
 8014502:	4b12      	ldr	r3, [pc, #72]	; (801454c <grabSensorData+0xf8>)
 8014504:	4614      	mov	r4, r2
 8014506:	461d      	mov	r5, r3
 8014508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801450a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801450c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801450e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014510:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014514:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 8014518:	bf00      	nop
 801451a:	bdb0      	pop	{r4, r5, r7, pc}
 801451c:	20027ba4 	.word	0x20027ba4
 8014520:	20028014 	.word	0x20028014
 8014524:	20028658 	.word	0x20028658
 8014528:	08028c64 	.word	0x08028c64
 801452c:	20027bd0 	.word	0x20027bd0
 8014530:	20028718 	.word	0x20028718
 8014534:	08028cd0 	.word	0x08028cd0
 8014538:	20027ac8 	.word	0x20027ac8
 801453c:	200286c4 	.word	0x200286c4
 8014540:	08028d10 	.word	0x08028d10
 8014544:	20027bc8 	.word	0x20027bc8
 8014548:	200286dc 	.word	0x200286dc
 801454c:	08028ce8 	.word	0x08028ce8

08014550 <masterEnterRoutine>:

void masterEnterRoutine(void) {
 8014550:	b580      	push	{r7, lr}
 8014552:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8014554:	4b1e      	ldr	r3, [pc, #120]	; (80145d0 <masterEnterRoutine+0x80>)
 8014556:	789b      	ldrb	r3, [r3, #2]
 8014558:	2b01      	cmp	r3, #1
 801455a:	d105      	bne.n	8014568 <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 801455c:	4b1d      	ldr	r3, [pc, #116]	; (80145d4 <masterEnterRoutine+0x84>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	2101      	movs	r1, #1
 8014562:	4618      	mov	r0, r3
 8014564:	f00a f86e 	bl	801e644 <osThreadFlagsSet>
	}

	if (togLogMessageReceived.positionEnabled == SENSOR_ENABLE) {
 8014568:	4b1b      	ldr	r3, [pc, #108]	; (80145d8 <masterEnterRoutine+0x88>)
 801456a:	795b      	ldrb	r3, [r3, #5]
 801456c:	2b01      	cmp	r3, #1
 801456e:	d118      	bne.n	80145a2 <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8014570:	4b1a      	ldr	r3, [pc, #104]	; (80145dc <masterEnterRoutine+0x8c>)
 8014572:	6818      	ldr	r0, [r3, #0]
 8014574:	f04f 33ff 	mov.w	r3, #4294967295
 8014578:	2200      	movs	r2, #0
 801457a:	4919      	ldr	r1, [pc, #100]	; (80145e0 <masterEnterRoutine+0x90>)
 801457c:	f00a fe98 	bl	801f2b0 <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 8014580:	4b17      	ldr	r3, [pc, #92]	; (80145e0 <masterEnterRoutine+0x90>)
 8014582:	2201      	movs	r2, #1
 8014584:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8014586:	4b15      	ldr	r3, [pc, #84]	; (80145dc <masterEnterRoutine+0x8c>)
 8014588:	6818      	ldr	r0, [r3, #0]
 801458a:	2300      	movs	r3, #0
 801458c:	2200      	movs	r2, #0
 801458e:	4914      	ldr	r1, [pc, #80]	; (80145e0 <masterEnterRoutine+0x90>)
 8014590:	f00a fe1a 	bl	801f1c8 <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 8014594:	4b13      	ldr	r3, [pc, #76]	; (80145e4 <masterEnterRoutine+0x94>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 801459c:	4618      	mov	r0, r3
 801459e:	f00a fa5f 	bl	801ea60 <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 80145a2:	4b0b      	ldr	r3, [pc, #44]	; (80145d0 <masterEnterRoutine+0x80>)
 80145a4:	78db      	ldrb	r3, [r3, #3]
 80145a6:	2b01      	cmp	r3, #1
 80145a8:	d105      	bne.n	80145b6 <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 80145aa:	4b0f      	ldr	r3, [pc, #60]	; (80145e8 <masterEnterRoutine+0x98>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	2101      	movs	r1, #1
 80145b0:	4618      	mov	r0, r3
 80145b2:	f00a f847 	bl	801e644 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80145b6:	4b06      	ldr	r3, [pc, #24]	; (80145d0 <masterEnterRoutine+0x80>)
 80145b8:	791b      	ldrb	r3, [r3, #4]
 80145ba:	2b01      	cmp	r3, #1
 80145bc:	d105      	bne.n	80145ca <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 80145be:	4b0b      	ldr	r3, [pc, #44]	; (80145ec <masterEnterRoutine+0x9c>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	2101      	movs	r1, #1
 80145c4:	4618      	mov	r0, r3
 80145c6:	f00a f83d 	bl	801e644 <osThreadFlagsSet>
	}
}
 80145ca:	bf00      	nop
 80145cc:	bd80      	pop	{r7, pc}
 80145ce:	bf00      	nop
 80145d0:	20027ba4 	.word	0x20027ba4
 80145d4:	20027bb0 	.word	0x20027bb0
 80145d8:	20027acc 	.word	0x20027acc
 80145dc:	20027bd4 	.word	0x20027bd4
 80145e0:	20028024 	.word	0x20028024
 80145e4:	20027bb4 	.word	0x20027bb4
 80145e8:	20028004 	.word	0x20028004
 80145ec:	2002801c 	.word	0x2002801c

080145f0 <masterExitRoutine>:

void masterExitRoutine(void) {
 80145f0:	b580      	push	{r7, lr}
 80145f2:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80145f4:	4b14      	ldr	r3, [pc, #80]	; (8014648 <masterExitRoutine+0x58>)
 80145f6:	789b      	ldrb	r3, [r3, #2]
 80145f8:	2b01      	cmp	r3, #1
 80145fa:	d105      	bne.n	8014608 <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 80145fc:	4b13      	ldr	r3, [pc, #76]	; (801464c <masterExitRoutine+0x5c>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	2102      	movs	r1, #2
 8014602:	4618      	mov	r0, r3
 8014604:	f00a f81e 	bl	801e644 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8014608:	4b0f      	ldr	r3, [pc, #60]	; (8014648 <masterExitRoutine+0x58>)
 801460a:	795b      	ldrb	r3, [r3, #5]
 801460c:	2b01      	cmp	r3, #1
 801460e:	d104      	bne.n	801461a <masterExitRoutine+0x2a>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 8014610:	4b0f      	ldr	r3, [pc, #60]	; (8014650 <masterExitRoutine+0x60>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	4618      	mov	r0, r3
 8014616:	f00a fa63 	bl	801eae0 <osTimerStop>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 801461a:	4b0b      	ldr	r3, [pc, #44]	; (8014648 <masterExitRoutine+0x58>)
 801461c:	78db      	ldrb	r3, [r3, #3]
 801461e:	2b01      	cmp	r3, #1
 8014620:	d105      	bne.n	801462e <masterExitRoutine+0x3e>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 8014622:	4b0c      	ldr	r3, [pc, #48]	; (8014654 <masterExitRoutine+0x64>)
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	2102      	movs	r1, #2
 8014628:	4618      	mov	r0, r3
 801462a:	f00a f80b 	bl	801e644 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 801462e:	4b06      	ldr	r3, [pc, #24]	; (8014648 <masterExitRoutine+0x58>)
 8014630:	791b      	ldrb	r3, [r3, #4]
 8014632:	2b01      	cmp	r3, #1
 8014634:	d105      	bne.n	8014642 <masterExitRoutine+0x52>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 8014636:	4b08      	ldr	r3, [pc, #32]	; (8014658 <masterExitRoutine+0x68>)
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	2102      	movs	r1, #2
 801463c:	4618      	mov	r0, r3
 801463e:	f00a f801 	bl	801e644 <osThreadFlagsSet>
	}

}
 8014642:	bf00      	nop
 8014644:	bd80      	pop	{r7, pc}
 8014646:	bf00      	nop
 8014648:	20027ba4 	.word	0x20027ba4
 801464c:	20027bb0 	.word	0x20027bb0
 8014650:	20027bb4 	.word	0x20027bb4
 8014654:	20028004 	.word	0x20028004
 8014658:	2002801c 	.word	0x2002801c

0801465c <packetizeData>:



void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 801465c:	b580      	push	{r7, lr}
 801465e:	b084      	sub	sp, #16
 8014660:	af00      	add	r7, sp, #0
 8014662:	60f8      	str	r0, [r7, #12]
 8014664:	60b9      	str	r1, [r7, #8]
 8014666:	607a      	str	r2, [r7, #4]
 8014668:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 801466a:	f001 fdff 	bl	801626c <HAL_GetTick>
 801466e:	4602      	mov	r2, r0
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// get epoch time from RTC
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 8014676:	2200      	movs	r2, #0
 8014678:	4917      	ldr	r1, [pc, #92]	; (80146d8 <packetizeData+0x7c>)
 801467a:	4818      	ldr	r0, [pc, #96]	; (80146dc <packetizeData+0x80>)
 801467c:	f008 fa2b 	bl	801cad6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 8014680:	2200      	movs	r2, #0
 8014682:	4917      	ldr	r1, [pc, #92]	; (80146e0 <packetizeData+0x84>)
 8014684:	4815      	ldr	r0, [pc, #84]	; (80146dc <packetizeData+0x80>)
 8014686:	f008 fb30 	bl	801ccea <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 801468a:	4915      	ldr	r1, [pc, #84]	; (80146e0 <packetizeData+0x84>)
 801468c:	4812      	ldr	r0, [pc, #72]	; (80146d8 <packetizeData+0x7c>)
 801468e:	f000 fc35 	bl	8014efc <RTC_ToEpoch>
 8014692:	4602      	mov	r2, r0
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	226c      	movs	r2, #108	; 0x6c
 801469e:	68b9      	ldr	r1, [r7, #8]
 80146a0:	4618      	mov	r0, r3
 80146a2:	f012 fb57 	bl	8026d54 <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	336c      	adds	r3, #108	; 0x6c
 80146aa:	2218      	movs	r2, #24
 80146ac:	6879      	ldr	r1, [r7, #4]
 80146ae:	4618      	mov	r0, r3
 80146b0:	f012 fb50 	bl	8026d54 <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	3384      	adds	r3, #132	; 0x84
 80146b8:	2228      	movs	r2, #40	; 0x28
 80146ba:	6839      	ldr	r1, [r7, #0]
 80146bc:	4618      	mov	r0, r3
 80146be:	f012 fb49 	bl	8026d54 <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	33ac      	adds	r3, #172	; 0xac
 80146c6:	2218      	movs	r2, #24
 80146c8:	69b9      	ldr	r1, [r7, #24]
 80146ca:	4618      	mov	r0, r3
 80146cc:	f012 fb42 	bl	8026d54 <memcpy>
}
 80146d0:	bf00      	nop
 80146d2:	3710      	adds	r7, #16
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}
 80146d8:	20028704 	.word	0x20028704
 80146dc:	20028734 	.word	0x20028734
 80146e0:	20028730 	.word	0x20028730

080146e4 <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 80146e4:	b480      	push	{r7}
 80146e6:	b083      	sub	sp, #12
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
 80146ec:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80146f2:	2b0f      	cmp	r3, #15
 80146f4:	d80f      	bhi.n	8014716 <vector_push+0x32>
    	self->items[self->count++] = *item;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80146fa:	1c51      	adds	r1, r2, #1
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	6619      	str	r1, [r3, #96]	; 0x60
 8014700:	6879      	ldr	r1, [r7, #4]
 8014702:	4613      	mov	r3, r2
 8014704:	005b      	lsls	r3, r3, #1
 8014706:	4413      	add	r3, r2
 8014708:	005b      	lsls	r3, r3, #1
 801470a:	440b      	add	r3, r1
 801470c:	683a      	ldr	r2, [r7, #0]
 801470e:	6811      	ldr	r1, [r2, #0]
 8014710:	6019      	str	r1, [r3, #0]
 8014712:	8892      	ldrh	r2, [r2, #4]
 8014714:	809a      	strh	r2, [r3, #4]
    }
}
 8014716:	bf00      	nop
 8014718:	370c      	adds	r7, #12
 801471a:	46bd      	mov	sp, r7
 801471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014720:	4770      	bx	lr

08014722 <vector_pop>:

Pulse vector_pop(vector *self){
 8014722:	b480      	push	{r7}
 8014724:	b085      	sub	sp, #20
 8014726:	af00      	add	r7, sp, #0
 8014728:	6078      	str	r0, [r7, #4]
 801472a:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014730:	2b00      	cmp	r3, #0
 8014732:	d01c      	beq.n	801476e <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014738:	1e5a      	subs	r2, r3, #1
 801473a:	6839      	ldr	r1, [r7, #0]
 801473c:	4613      	mov	r3, r2
 801473e:	005b      	lsls	r3, r3, #1
 8014740:	4413      	add	r3, r2
 8014742:	005b      	lsls	r3, r3, #1
 8014744:	18ca      	adds	r2, r1, r3
 8014746:	f107 0308 	add.w	r3, r7, #8
 801474a:	6810      	ldr	r0, [r2, #0]
 801474c:	6018      	str	r0, [r3, #0]
 801474e:	8892      	ldrh	r2, [r2, #4]
 8014750:	809a      	strh	r2, [r3, #4]
		self->count--;
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014756:	1e5a      	subs	r2, r3, #1
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	461a      	mov	r2, r3
 8014760:	f107 0308 	add.w	r3, r7, #8
 8014764:	6818      	ldr	r0, [r3, #0]
 8014766:	6010      	str	r0, [r2, #0]
 8014768:	889b      	ldrh	r3, [r3, #4]
 801476a:	8093      	strh	r3, [r2, #4]
 801476c:	e005      	b.n	801477a <vector_pop+0x58>
	}
	return self->items[0];
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	683a      	ldr	r2, [r7, #0]
 8014772:	6810      	ldr	r0, [r2, #0]
 8014774:	6018      	str	r0, [r3, #0]
 8014776:	8892      	ldrh	r2, [r2, #4]
 8014778:	809a      	strh	r2, [r3, #4]
}
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	3714      	adds	r7, #20
 801477e:	46bd      	mov	sp, r7
 8014780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014784:	4770      	bx	lr

08014786 <vector_get>:

Pulse vector_get(vector *self, int index)
{
 8014786:	b480      	push	{r7}
 8014788:	b085      	sub	sp, #20
 801478a:	af00      	add	r7, sp, #0
 801478c:	60f8      	str	r0, [r7, #12]
 801478e:	60b9      	str	r1, [r7, #8]
 8014790:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2b00      	cmp	r3, #0
 8014796:	db12      	blt.n	80147be <vector_get+0x38>
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	429a      	cmp	r2, r3
 80147a0:	d90d      	bls.n	80147be <vector_get+0x38>
    	return self->items[index];
 80147a2:	68f8      	ldr	r0, [r7, #12]
 80147a4:	68b9      	ldr	r1, [r7, #8]
 80147a6:	687a      	ldr	r2, [r7, #4]
 80147a8:	4613      	mov	r3, r2
 80147aa:	005b      	lsls	r3, r3, #1
 80147ac:	4413      	add	r3, r2
 80147ae:	005b      	lsls	r3, r3, #1
 80147b0:	18ca      	adds	r2, r1, r3
 80147b2:	4603      	mov	r3, r0
 80147b4:	6811      	ldr	r1, [r2, #0]
 80147b6:	6019      	str	r1, [r3, #0]
 80147b8:	8892      	ldrh	r2, [r2, #4]
 80147ba:	809a      	strh	r2, [r3, #4]
 80147bc:	e005      	b.n	80147ca <vector_get+0x44>
    }
    return self->items[0];
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	68ba      	ldr	r2, [r7, #8]
 80147c2:	6810      	ldr	r0, [r2, #0]
 80147c4:	6018      	str	r0, [r3, #0]
 80147c6:	8892      	ldrh	r2, [r2, #4]
 80147c8:	809a      	strh	r2, [r3, #4]
}
 80147ca:	68f8      	ldr	r0, [r7, #12]
 80147cc:	3714      	adds	r7, #20
 80147ce:	46bd      	mov	sp, r7
 80147d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d4:	4770      	bx	lr

080147d6 <vector_clear>:

void vector_clear(vector *self){
 80147d6:	b480      	push	{r7}
 80147d8:	b083      	sub	sp, #12
 80147da:	af00      	add	r7, sp, #0
 80147dc:	6078      	str	r0, [r7, #4]
	self->count = 0;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2200      	movs	r2, #0
 80147e2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80147e4:	bf00      	nop
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ee:	4770      	bx	lr

080147f0 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b084      	sub	sp, #16
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	683a      	ldr	r2, [r7, #0]
 80147fe:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2200      	movs	r2, #0
 8014804:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2200      	movs	r2, #0
 801480a:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 801480c:	2300      	movs	r3, #0
 801480e:	60fb      	str	r3, [r7, #12]
 8014810:	e00c      	b.n	801482c <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	2264      	movs	r2, #100	; 0x64
 8014816:	fb02 f303 	mul.w	r3, r2, r3
 801481a:	3310      	adds	r3, #16
 801481c:	687a      	ldr	r2, [r7, #4]
 801481e:	4413      	add	r3, r2
 8014820:	4618      	mov	r0, r3
 8014822:	f7ff ffd8 	bl	80147d6 <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	3301      	adds	r3, #1
 801482a:	60fb      	str	r3, [r7, #12]
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	2b01      	cmp	r3, #1
 8014830:	ddef      	ble.n	8014812 <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	33d8      	adds	r3, #216	; 0xd8
 8014836:	4618      	mov	r0, r3
 8014838:	f7ff ffcd 	bl	80147d6 <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8014842:	4618      	mov	r0, r3
 8014844:	f7ff ffc7 	bl	80147d6 <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	2200      	movs	r2, #0
 801484c:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 8014850:	bf00      	nop
 8014852:	3710      	adds	r7, #16
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 8014858:	b580      	push	{r7, lr}
 801485a:	b082      	sub	sp, #8
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	889b      	ldrh	r3, [r3, #4]
 8014866:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801486a:	d303      	bcc.n	8014874 <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 801486c:	4b0f      	ldr	r3, [pc, #60]	; (80148ac <consume_pulse+0x54>)
 801486e:	2200      	movs	r2, #0
 8014870:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 8014872:	e016      	b.n	80148a2 <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	889b      	ldrh	r3, [r3, #4]
 8014878:	2b27      	cmp	r3, #39	; 0x27
 801487a:	d907      	bls.n	801488c <consume_pulse+0x34>
		prev_pulse_short = 0;
 801487c:	4b0b      	ldr	r3, [pc, #44]	; (80148ac <consume_pulse+0x54>)
 801487e:	2200      	movs	r2, #0
 8014880:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 8014882:	6839      	ldr	r1, [r7, #0]
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f000 f813 	bl	80148b0 <process_long_pulse>
}
 801488a:	e00a      	b.n	80148a2 <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 801488c:	4b07      	ldr	r3, [pc, #28]	; (80148ac <consume_pulse+0x54>)
 801488e:	781b      	ldrb	r3, [r3, #0]
 8014890:	2b01      	cmp	r3, #1
 8014892:	d006      	beq.n	80148a2 <consume_pulse+0x4a>
			process_short_pulse(self, p);
 8014894:	6839      	ldr	r1, [r7, #0]
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 f89c 	bl	80149d4 <process_short_pulse>
			prev_pulse_short = 1;
 801489c:	4b03      	ldr	r3, [pc, #12]	; (80148ac <consume_pulse+0x54>)
 801489e:	2201      	movs	r2, #1
 80148a0:	701a      	strb	r2, [r3, #0]
}
 80148a2:	bf00      	nop
 80148a4:	3708      	adds	r7, #8
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	20000b38 	.word	0x20000b38

080148b0 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b088      	sub	sp, #32
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d144      	bne.n	801494c <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d03f      	beq.n	801494c <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 80148d2:	f107 0308 	add.w	r3, r7, #8
 80148d6:	4611      	mov	r1, r2
 80148d8:	4618      	mov	r0, r3
 80148da:	f7ff ff22 	bl	8014722 <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	885a      	ldrh	r2, [r3, #2]
 80148e2:	897b      	ldrh	r3, [r7, #10]
 80148e4:	1ad3      	subs	r3, r2, r3
 80148e6:	b29a      	uxth	r2, r3
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 80148f4:	461a      	mov	r2, r3
 80148f6:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80148fa:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 80148fe:	330d      	adds	r3, #13
 8014900:	1ad3      	subs	r3, r2, r3
 8014902:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 8014904:	697b      	ldr	r3, [r7, #20]
 8014906:	f113 0f1e 	cmn.w	r3, #30
 801490a:	db1c      	blt.n	8014946 <process_long_pulse+0x96>
 801490c:	697b      	ldr	r3, [r7, #20]
 801490e:	2b1d      	cmp	r3, #29
 8014910:	dc19      	bgt.n	8014946 <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	2201      	movs	r2, #1
 8014916:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	885a      	ldrh	r2, [r3, #2]
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2200      	movs	r2, #0
 8014924:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801492c:	4618      	mov	r0, r3
 801492e:	f7fd f81b 	bl	8011968 <reset>

                reset_cycle_long_pulses(self);
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f000 fa64 	bl	8014e00 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f000 fa7c 	bl	8014e36 <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 801493e:	6878      	ldr	r0, [r7, #4]
 8014940:	f000 fa87 	bl	8014e52 <reset_cycle_short_pulses>
 8014944:	e002      	b.n	801494c <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 8014946:	6878      	ldr	r0, [r7, #4]
 8014948:	f000 fa75 	bl	8014e36 <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 801494c:	2300      	movs	r3, #0
 801494e:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	685b      	ldr	r3, [r3, #4]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d02d      	beq.n	80149b4 <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 8014958:	683b      	ldr	r3, [r7, #0]
 801495a:	885a      	ldrh	r2, [r3, #2]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	891b      	ldrh	r3, [r3, #8]
 8014960:	1ad3      	subs	r3, r2, r3
 8014962:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8014964:	2300      	movs	r3, #0
 8014966:	61bb      	str	r3, [r7, #24]
 8014968:	e021      	b.n	80149ae <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 801496a:	4a19      	ldr	r2, [pc, #100]	; (80149d0 <process_long_pulse+0x120>)
 801496c:	69bb      	ldr	r3, [r7, #24]
 801496e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014972:	8a7a      	ldrh	r2, [r7, #18]
 8014974:	1ad3      	subs	r3, r2, r3
 8014976:	b29b      	uxth	r3, r3
 8014978:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 801497a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801497e:	f113 0f1e 	cmn.w	r3, #30
 8014982:	db11      	blt.n	80149a8 <process_long_pulse+0xf8>
 8014984:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8014988:	2b1d      	cmp	r3, #29
 801498a:	dc0d      	bgt.n	80149a8 <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 801498c:	69bb      	ldr	r3, [r7, #24]
 801498e:	2264      	movs	r2, #100	; 0x64
 8014990:	fb02 f303 	mul.w	r3, r2, r3
 8014994:	3310      	adds	r3, #16
 8014996:	687a      	ldr	r2, [r7, #4]
 8014998:	4413      	add	r3, r2
 801499a:	6839      	ldr	r1, [r7, #0]
 801499c:	4618      	mov	r0, r3
 801499e:	f7ff fea1 	bl	80146e4 <vector_push>
                pulse_classified = 1;
 80149a2:	2301      	movs	r3, #1
 80149a4:	77fb      	strb	r3, [r7, #31]
                break;
 80149a6:	e005      	b.n	80149b4 <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 80149a8:	69bb      	ldr	r3, [r7, #24]
 80149aa:	3301      	adds	r3, #1
 80149ac:	61bb      	str	r3, [r7, #24]
 80149ae:	69bb      	ldr	r3, [r7, #24]
 80149b0:	2b01      	cmp	r3, #1
 80149b2:	ddda      	ble.n	801496a <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 80149b4:	7ffb      	ldrb	r3, [r7, #31]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d106      	bne.n	80149c8 <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80149c0:	6839      	ldr	r1, [r7, #0]
 80149c2:	4618      	mov	r0, r3
 80149c4:	f7ff fe8e 	bl	80146e4 <vector_push>
    }
}
 80149c8:	bf00      	nop
 80149ca:	3720      	adds	r7, #32
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}
 80149d0:	08028d28 	.word	0x08028d28

080149d4 <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b082      	sub	sp, #8
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
 80149dc:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d00f      	beq.n	8014a06 <process_short_pulse+0x32>
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	461a      	mov	r2, r3
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	429a      	cmp	r2, r3
 80149f2:	d208      	bcs.n	8014a06 <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	33d8      	adds	r3, #216	; 0xd8
 80149f8:	6839      	ldr	r1, [r7, #0]
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7ff fe72 	bl	80146e4 <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f000 f805 	bl	8014a10 <process_cycle_fix>
	}
}
 8014a06:	bf00      	nop
 8014a08:	3708      	adds	r7, #8
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}
	...

08014a10 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b0a2      	sub	sp, #136	; 0x88
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8014a18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	601a      	str	r2, [r3, #0]
 8014a20:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8014a22:	2300      	movs	r3, #0
 8014a24:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d105      	bne.n	8014a3a <process_cycle_fix+0x2a>
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	f000 80b7 	beq.w	8014ba8 <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	685b      	ldr	r3, [r3, #4]
 8014a3e:	2b09      	cmp	r3, #9
 8014a40:	d80d      	bhi.n	8014a5e <process_cycle_fix+0x4e>
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d009      	beq.n	8014a5e <process_cycle_fix+0x4e>
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d004      	beq.n	8014a5e <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	685b      	ldr	r3, [r3, #4]
 8014a58:	1c5a      	adds	r2, r3, #1
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8014a5e:	2300      	movs	r3, #0
 8014a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014a64:	e090      	b.n	8014b88 <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8014a66:	687a      	ldr	r2, [r7, #4]
 8014a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a6c:	2164      	movs	r1, #100	; 0x64
 8014a6e:	fb01 f303 	mul.w	r3, r1, r3
 8014a72:	4413      	add	r3, r2
 8014a74:	3370      	adds	r3, #112	; 0x70
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 8014a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d07e      	beq.n	8014b7e <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	891a      	ldrh	r2, [r3, #8]
 8014a84:	49c0      	ldr	r1, [pc, #768]	; (8014d88 <process_cycle_fix+0x378>)
 8014a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014a8e:	4413      	add	r3, r2
 8014a90:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8014a94:	2300      	movs	r3, #0
 8014a96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014a9a:	e03e      	b.n	8014b1a <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8014a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014aa0:	2264      	movs	r2, #100	; 0x64
 8014aa2:	fb02 f303 	mul.w	r3, r2, r3
 8014aa6:	3310      	adds	r3, #16
 8014aa8:	687a      	ldr	r2, [r7, #4]
 8014aaa:	18d1      	adds	r1, r2, r3
 8014aac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014ab0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7ff fe66 	bl	8014786 <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 8014aba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014abe:	009b      	lsls	r3, r3, #2
 8014ac0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014ac4:	4413      	add	r3, r2
 8014ac6:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8014aca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014ace:	4619      	mov	r1, r3
 8014ad0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8014ad4:	1acb      	subs	r3, r1, r3
 8014ad6:	441a      	add	r2, r3
 8014ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8014ae2:	440b      	add	r3, r1
 8014ae4:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 8014ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014aec:	005b      	lsls	r3, r3, #1
 8014aee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014af2:	4413      	add	r3, r2
 8014af4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8014af8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8014afc:	4413      	add	r3, r2
 8014afe:	b29a      	uxth	r2, r3
 8014b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014b04:	005b      	lsls	r3, r3, #1
 8014b06:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8014b0a:	440b      	add	r3, r1
 8014b0c:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8014b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014b14:	3301      	adds	r3, #1
 8014b16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014b1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b20:	429a      	cmp	r2, r3
 8014b22:	d3bb      	bcc.n	8014a9c <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8014b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d929      	bls.n	8014b7e <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8014b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014b2e:	009b      	lsls	r3, r3, #2
 8014b30:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014b34:	4413      	add	r3, r2
 8014b36:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8014b3a:	461a      	mov	r2, r3
 8014b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b42:	461a      	mov	r2, r3
 8014b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014b48:	009b      	lsls	r3, r3, #2
 8014b4a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8014b4e:	440b      	add	r3, r1
 8014b50:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8014b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014b58:	005b      	lsls	r3, r3, #1
 8014b5a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014b5e:	4413      	add	r3, r2
 8014b60:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8014b64:	461a      	mov	r2, r3
 8014b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b6c:	b29a      	uxth	r2, r3
 8014b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014b72:	005b      	lsls	r3, r3, #1
 8014b74:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8014b78:	440b      	add	r3, r1
 8014b7a:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8014b7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014b82:	3301      	adds	r3, #1
 8014b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014b8c:	2b01      	cmp	r3, #1
 8014b8e:	f77f af6a 	ble.w	8014a66 <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	68db      	ldr	r3, [r3, #12]
 8014b9c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8014ba0:	4619      	mov	r1, r3
 8014ba2:	f7fc fe5f 	bl	8011864 <process_pulse_lengths>
 8014ba6:	e008      	b.n	8014bba <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	685b      	ldr	r3, [r3, #4]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d004      	beq.n	8014bba <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	1e5a      	subs	r2, r3, #1
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	68db      	ldr	r3, [r3, #12]
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	4610      	mov	r0, r2
 8014bc8:	f7fc feb6 	bl	8011938 <get_phase>
 8014bcc:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8014bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	f2c0 80b5 	blt.w	8014d40 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8014bd6:	f107 030c 	add.w	r3, r7, #12
 8014bda:	2220      	movs	r2, #32
 8014bdc:	2100      	movs	r1, #0
 8014bde:	4618      	mov	r0, r3
 8014be0:	f012 f8c3 	bl	8026d6a <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8014be4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014be8:	2200      	movs	r2, #0
 8014bea:	601a      	str	r2, [r3, #0]
 8014bec:	605a      	str	r2, [r3, #4]
 8014bee:	609a      	str	r2, [r3, #8]
 8014bf0:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8014bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bf4:	105b      	asrs	r3, r3, #1
 8014bf6:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	891a      	ldrh	r2, [r3, #8]
 8014bfc:	4962      	ldr	r1, [pc, #392]	; (8014d88 <process_cycle_fix+0x378>)
 8014bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014c00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c04:	4413      	add	r3, r2
 8014c06:	b29a      	uxth	r2, r3
 8014c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014c0a:	009b      	lsls	r3, r3, #2
 8014c0c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8014c10:	440b      	add	r3, r1
 8014c12:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8014c16:	b29b      	uxth	r3, r3
 8014c18:	4413      	add	r3, r2
 8014c1a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8014c1e:	2300      	movs	r3, #0
 8014c20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014c22:	e04a      	b.n	8014cba <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8014c2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c30:	4618      	mov	r0, r3
 8014c32:	f7ff fda8 	bl	8014786 <vector_get>
            uint32_t input_idx = p.input_idx;
 8014c36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014c3a:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8014c3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014c3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014c40:	085b      	lsrs	r3, r3, #1
 8014c42:	b29b      	uxth	r3, r3
 8014c44:	4413      	add	r3, r2
 8014c46:	b29a      	uxth	r2, r3
 8014c48:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8014c4c:	1ad3      	subs	r3, r2, r3
 8014c4e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8014c52:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8014c56:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8014c5a:	d32b      	bcc.n	8014cb4 <process_cycle_fix+0x2a4>
 8014c5c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8014c60:	f641 2278 	movw	r2, #6776	; 0x1a78
 8014c64:	4293      	cmp	r3, r2
 8014c66:	d825      	bhi.n	8014cb4 <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8014c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c6a:	009b      	lsls	r3, r3, #2
 8014c6c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014c70:	4413      	add	r3, r2
 8014c72:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d00a      	beq.n	8014c90 <process_cycle_fix+0x280>
 8014c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c7c:	009b      	lsls	r3, r3, #2
 8014c7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014c82:	4413      	add	r3, r2
 8014c84:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8014c88:	889a      	ldrh	r2, [r3, #4]
 8014c8a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d211      	bcs.n	8014cb4 <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8014c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c92:	009b      	lsls	r3, r3, #2
 8014c94:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014c98:	4413      	add	r3, r2
 8014c9a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014c9e:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8014ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014ca4:	005b      	lsls	r3, r3, #1
 8014ca6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014caa:	4413      	add	r3, r2
 8014cac:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8014cb0:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8014cb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014cb6:	3301      	adds	r3, #1
 8014cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8014cc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d3ae      	bcc.n	8014c24 <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8014cca:	e034      	b.n	8014d36 <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8014ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014cce:	009b      	lsls	r3, r3, #2
 8014cd0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014cd4:	4413      	add	r3, r2
 8014cd6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d028      	beq.n	8014d30 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8014cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014ce0:	015b      	lsls	r3, r3, #5
 8014ce2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014ce6:	687a      	ldr	r2, [r7, #4]
 8014ce8:	4413      	add	r3, r2
 8014cea:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8014cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014cee:	005b      	lsls	r3, r3, #1
 8014cf0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014cf4:	4413      	add	r3, r2
 8014cf6:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8014cfa:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8014cfe:	ee07 3a90 	vmov	s15, r3
 8014d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d06:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8014d8c <process_cycle_fix+0x37c>
 8014d0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014d0e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8014d90 <process_cycle_fix+0x380>
 8014d12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014d16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d1a:	009b      	lsls	r3, r3, #2
 8014d1c:	4413      	add	r3, r2
 8014d1e:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	68d9      	ldr	r1, [r3, #12]
 8014d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014d2a:	3204      	adds	r2, #4
 8014d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8014d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d32:	3301      	adds	r3, #1
 8014d34:	67bb      	str	r3, [r7, #120]	; 0x78
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014d3c:	429a      	cmp	r2, r3
 8014d3e:	d3c5      	bcc.n	8014ccc <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8014d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	db06      	blt.n	8014d54 <process_cycle_fix+0x344>
 8014d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d48:	2b03      	cmp	r3, #3
 8014d4a:	bf0c      	ite	eq
 8014d4c:	2301      	moveq	r3, #1
 8014d4e:	2300      	movne	r3, #0
 8014d50:	b2db      	uxtb	r3, r3
 8014d52:	e008      	b.n	8014d66 <process_cycle_fix+0x356>
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	68db      	ldr	r3, [r3, #12]
 8014d58:	f003 0303 	and.w	r3, r3, #3
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	bf0c      	ite	eq
 8014d60:	2301      	moveq	r3, #1
 8014d62:	2300      	movne	r3, #0
 8014d64:	b2db      	uxtb	r3, r3
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d02b      	beq.n	8014dc2 <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	891a      	ldrh	r2, [r3, #8]
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8014d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	db0c      	blt.n	8014d94 <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	2b04      	cmp	r3, #4
 8014d80:	d908      	bls.n	8014d94 <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8014d82:	22c8      	movs	r2, #200	; 0xc8
 8014d84:	e007      	b.n	8014d96 <process_cycle_fix+0x386>
 8014d86:	bf00      	nop
 8014d88:	08028d28 	.word	0x08028d28
 8014d8c:	40490fdb 	.word	0x40490fdb
 8014d90:	46023400 	.word	0x46023400
 8014d94:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	68da      	ldr	r2, [r3, #12]
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014daa:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014dba:	4619      	mov	r1, r3
 8014dbc:	4610      	mov	r0, r2
 8014dbe:	f7fd fbc1 	bl	8012544 <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f000 f81c 	bl	8014e00 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8014dc8:	6878      	ldr	r0, [r7, #4]
 8014dca:	f000 f834 	bl	8014e36 <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f000 f83f 	bl	8014e52 <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	891a      	ldrh	r2, [r3, #8]
 8014dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014dda:	b29b      	uxth	r3, r3
 8014ddc:	4413      	add	r3, r2
 8014dde:	b29b      	uxth	r3, r3
 8014de0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8014de4:	330d      	adds	r3, #13
 8014de6:	b29a      	uxth	r2, r3
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	68db      	ldr	r3, [r3, #12]
 8014df0:	1c5a      	adds	r2, r3, #1
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	60da      	str	r2, [r3, #12]
}
 8014df6:	bf00      	nop
 8014df8:	3788      	adds	r7, #136	; 0x88
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	bf00      	nop

08014e00 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b084      	sub	sp, #16
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8014e08:	2300      	movs	r3, #0
 8014e0a:	60fb      	str	r3, [r7, #12]
 8014e0c:	e00c      	b.n	8014e28 <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	2264      	movs	r2, #100	; 0x64
 8014e12:	fb02 f303 	mul.w	r3, r2, r3
 8014e16:	3310      	adds	r3, #16
 8014e18:	687a      	ldr	r2, [r7, #4]
 8014e1a:	4413      	add	r3, r2
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7ff fcda 	bl	80147d6 <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	3301      	adds	r3, #1
 8014e26:	60fb      	str	r3, [r7, #12]
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	2b01      	cmp	r3, #1
 8014e2c:	ddef      	ble.n	8014e0e <reset_cycle_long_pulses+0xe>
	}
}
 8014e2e:	bf00      	nop
 8014e30:	3710      	adds	r7, #16
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bd80      	pop	{r7, pc}

08014e36 <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 8014e36:	b580      	push	{r7, lr}
 8014e38:	b082      	sub	sp, #8
 8014e3a:	af00      	add	r7, sp, #0
 8014e3c:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8014e44:	4618      	mov	r0, r3
 8014e46:	f7ff fcc6 	bl	80147d6 <vector_clear>
}
 8014e4a:	bf00      	nop
 8014e4c:	3708      	adds	r7, #8
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	bd80      	pop	{r7, pc}

08014e52 <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8014e52:	b580      	push	{r7, lr}
 8014e54:	b082      	sub	sp, #8
 8014e56:	af00      	add	r7, sp, #0
 8014e58:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	33d8      	adds	r3, #216	; 0xd8
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f7ff fcb9 	bl	80147d6 <vector_clear>
}
 8014e64:	bf00      	nop
 8014e66:	3708      	adds	r7, #8
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}

08014e6c <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	af00      	add	r7, sp, #0

}
 8014e70:	bf00      	nop
 8014e72:	46bd      	mov	sp, r7
 8014e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e78:	4770      	bx	lr

08014e7a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8014e7a:	b480      	push	{r7}
 8014e7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8014e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8014e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8014e92:	bf00      	nop
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr

08014e9c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8014ea0:	4b0b      	ldr	r3, [pc, #44]	; (8014ed0 <MX_RTC_Init+0x34>)
 8014ea2:	4a0c      	ldr	r2, [pc, #48]	; (8014ed4 <MX_RTC_Init+0x38>)
 8014ea4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8014ea6:	4b0a      	ldr	r3, [pc, #40]	; (8014ed0 <MX_RTC_Init+0x34>)
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8014eac:	4b08      	ldr	r3, [pc, #32]	; (8014ed0 <MX_RTC_Init+0x34>)
 8014eae:	220f      	movs	r2, #15
 8014eb0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8014eb2:	4b07      	ldr	r3, [pc, #28]	; (8014ed0 <MX_RTC_Init+0x34>)
 8014eb4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014eb8:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8014eba:	4805      	ldr	r0, [pc, #20]	; (8014ed0 <MX_RTC_Init+0x34>)
 8014ebc:	f007 fca9 	bl	801c812 <HAL_RTC_Init>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d001      	beq.n	8014eca <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8014ec6:	f7ff fa3d 	bl	8014344 <Error_Handler>
  }

}
 8014eca:	bf00      	nop
 8014ecc:	bd80      	pop	{r7, pc}
 8014ece:	bf00      	nop
 8014ed0:	20028734 	.word	0x20028734
 8014ed4:	40002800 	.word	0x40002800

08014ed8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b082      	sub	sp, #8
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	4a04      	ldr	r2, [pc, #16]	; (8014ef8 <HAL_RTC_MspInit+0x20>)
 8014ee6:	4293      	cmp	r3, r2
 8014ee8:	d101      	bne.n	8014eee <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8014eea:	f7ff ffc6 	bl	8014e7a <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8014eee:	bf00      	nop
 8014ef0:	3708      	adds	r7, #8
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd80      	pop	{r7, pc}
 8014ef6:	bf00      	nop
 8014ef8:	40002800 	.word	0x40002800

08014efc <RTC_ToEpoch>:
  }
} 

/* USER CODE BEGIN 1 */
// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8014efc:	b480      	push	{r7}
 8014efe:	b087      	sub	sp, #28
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
 8014f04:	6039      	str	r1, [r7, #0]
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	785b      	ldrb	r3, [r3, #1]
 8014f0a:	f1c3 030e 	rsb	r3, r3, #14
 8014f0e:	4a44      	ldr	r2, [pc, #272]	; (8015020 <RTC_ToEpoch+0x124>)
 8014f10:	fb82 1203 	smull	r1, r2, r2, r3
 8014f14:	1052      	asrs	r2, r2, #1
 8014f16:	17db      	asrs	r3, r3, #31
 8014f18:	1ad3      	subs	r3, r2, r3
 8014f1a:	75fb      	strb	r3, [r7, #23]
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	78db      	ldrb	r3, [r3, #3]
 8014f20:	b29a      	uxth	r2, r3
 8014f22:	7dfb      	ldrb	r3, [r7, #23]
 8014f24:	b29b      	uxth	r3, r3
 8014f26:	1ad3      	subs	r3, r2, r3
 8014f28:	b29b      	uxth	r3, r3
 8014f2a:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8014f2e:	3310      	adds	r3, #16
 8014f30:	82bb      	strh	r3, [r7, #20]
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	785a      	ldrb	r2, [r3, #1]
 8014f36:	7dfb      	ldrb	r3, [r7, #23]
 8014f38:	4619      	mov	r1, r3
 8014f3a:	0049      	lsls	r1, r1, #1
 8014f3c:	440b      	add	r3, r1
 8014f3e:	009b      	lsls	r3, r3, #2
 8014f40:	b2db      	uxtb	r3, r3
 8014f42:	4413      	add	r3, r2
 8014f44:	b2db      	uxtb	r3, r3
 8014f46:	3b03      	subs	r3, #3
 8014f48:	74fb      	strb	r3, [r7, #19]

	// Gregorian calendar date compute
	JDN = date->Date;
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	789b      	ldrb	r3, [r3, #2]
 8014f4e:	60fb      	str	r3, [r7, #12]
	JDN += (153 * m + 2) / 5;
 8014f50:	7cfa      	ldrb	r2, [r7, #19]
 8014f52:	4613      	mov	r3, r2
 8014f54:	00db      	lsls	r3, r3, #3
 8014f56:	4413      	add	r3, r2
 8014f58:	011a      	lsls	r2, r3, #4
 8014f5a:	4413      	add	r3, r2
 8014f5c:	3302      	adds	r3, #2
 8014f5e:	4a31      	ldr	r2, [pc, #196]	; (8015024 <RTC_ToEpoch+0x128>)
 8014f60:	fb82 1203 	smull	r1, r2, r2, r3
 8014f64:	1052      	asrs	r2, r2, #1
 8014f66:	17db      	asrs	r3, r3, #31
 8014f68:	1ad3      	subs	r3, r2, r3
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	4413      	add	r3, r2
 8014f70:	60fb      	str	r3, [r7, #12]
	JDN += 365 * y;
 8014f72:	8abb      	ldrh	r3, [r7, #20]
 8014f74:	f240 126d 	movw	r2, #365	; 0x16d
 8014f78:	fb02 f303 	mul.w	r3, r2, r3
 8014f7c:	461a      	mov	r2, r3
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	4413      	add	r3, r2
 8014f82:	60fb      	str	r3, [r7, #12]
	JDN += y / 4;
 8014f84:	8abb      	ldrh	r3, [r7, #20]
 8014f86:	089b      	lsrs	r3, r3, #2
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	461a      	mov	r2, r3
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	4413      	add	r3, r2
 8014f90:	60fb      	str	r3, [r7, #12]
	JDN += -y / 100;
 8014f92:	8abb      	ldrh	r3, [r7, #20]
 8014f94:	425b      	negs	r3, r3
 8014f96:	4a24      	ldr	r2, [pc, #144]	; (8015028 <RTC_ToEpoch+0x12c>)
 8014f98:	fb82 1203 	smull	r1, r2, r2, r3
 8014f9c:	1152      	asrs	r2, r2, #5
 8014f9e:	17db      	asrs	r3, r3, #31
 8014fa0:	1ad3      	subs	r3, r2, r3
 8014fa2:	461a      	mov	r2, r3
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	4413      	add	r3, r2
 8014fa8:	60fb      	str	r3, [r7, #12]
	JDN += y / 400;
 8014faa:	8abb      	ldrh	r3, [r7, #20]
 8014fac:	4a1e      	ldr	r2, [pc, #120]	; (8015028 <RTC_ToEpoch+0x12c>)
 8014fae:	fba2 2303 	umull	r2, r3, r2, r3
 8014fb2:	09db      	lsrs	r3, r3, #7
 8014fb4:	b29b      	uxth	r3, r3
 8014fb6:	461a      	mov	r2, r3
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	4413      	add	r3, r2
 8014fbc:	60fb      	str	r3, [r7, #12]
	JDN = JDN - 32045;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 8014fc4:	3b2d      	subs	r3, #45	; 0x2d
 8014fc6:	60fb      	str	r3, [r7, #12]
	JDN = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 8014fc8:	68fa      	ldr	r2, [r7, #12]
 8014fca:	4b18      	ldr	r3, [pc, #96]	; (801502c <RTC_ToEpoch+0x130>)
 8014fcc:	4413      	add	r3, r2
 8014fce:	60fb      	str	r3, [r7, #12]
	JDN *= 86400;                     // Days to seconds
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	4a17      	ldr	r2, [pc, #92]	; (8015030 <RTC_ToEpoch+0x134>)
 8014fd4:	fb02 f303 	mul.w	r3, r2, r3
 8014fd8:	60fb      	str	r3, [r7, #12]
	JDN += time->Hours * 3600;    // ... and today seconds
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	781b      	ldrb	r3, [r3, #0]
 8014fde:	461a      	mov	r2, r3
 8014fe0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014fe4:	fb03 f302 	mul.w	r3, r3, r2
 8014fe8:	461a      	mov	r2, r3
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	4413      	add	r3, r2
 8014fee:	60fb      	str	r3, [r7, #12]
	JDN += time->Minutes * 60;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	785b      	ldrb	r3, [r3, #1]
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	4613      	mov	r3, r2
 8014ff8:	011b      	lsls	r3, r3, #4
 8014ffa:	1a9b      	subs	r3, r3, r2
 8014ffc:	009b      	lsls	r3, r3, #2
 8014ffe:	461a      	mov	r2, r3
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	4413      	add	r3, r2
 8015004:	60fb      	str	r3, [r7, #12]
	JDN += time->Seconds;
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	789b      	ldrb	r3, [r3, #2]
 801500a:	461a      	mov	r2, r3
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	4413      	add	r3, r2
 8015010:	60fb      	str	r3, [r7, #12]

	return JDN;
 8015012:	68fb      	ldr	r3, [r7, #12]
}
 8015014:	4618      	mov	r0, r3
 8015016:	371c      	adds	r7, #28
 8015018:	46bd      	mov	sp, r7
 801501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501e:	4770      	bx	lr
 8015020:	2aaaaaab 	.word	0x2aaaaaab
 8015024:	66666667 	.word	0x66666667
 8015028:	51eb851f 	.word	0x51eb851f
 801502c:	ffdac274 	.word	0xffdac274
 8015030:	00015180 	.word	0x00015180

08015034 <RTC_FromEpoch>:

//
//// Convert epoch time to Date/Time structures
void RTC_FromEpoch(uint32_t epoch, RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8015034:	b590      	push	{r4, r7, lr}
 8015036:	b095      	sub	sp, #84	; 0x54
 8015038:	af00      	add	r7, sp, #0
 801503a:	60f8      	str	r0, [r7, #12]
 801503c:	60b9      	str	r1, [r7, #8]
 801503e:	607a      	str	r2, [r7, #4]
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;
	uint32_t m;
	int16_t  year  = 0;
 8015040:	2300      	movs	r3, #0
 8015042:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t  month = 0;
 8015046:	2300      	movs	r3, #0
 8015048:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t  dow   = 0;
 801504c:	2300      	movs	r3, #0
 801504e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t  mday  = 0;
 8015052:	2300      	movs	r3, #0
 8015054:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t  hour  = 0;
 8015058:	2300      	movs	r3, #0
 801505a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  min   = 0;
 801505e:	2300      	movs	r3, #0
 8015060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t  sec   = 0;
 8015064:	2300      	movs	r3, #0
 8015066:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint64_t JD    = 0;
 801506a:	f04f 0300 	mov.w	r3, #0
 801506e:	f04f 0400 	mov.w	r4, #0
 8015072:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	uint64_t JDN   = 0;
 8015076:	f04f 0300 	mov.w	r3, #0
 801507a:	f04f 0400 	mov.w	r4, #0
 801507e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	JD  = ((epoch + 43200) / (86400 >>1 )) + (2440587 << 1) + 1;
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8015088:	33c0      	adds	r3, #192	; 0xc0
 801508a:	4a7c      	ldr	r2, [pc, #496]	; (801527c <RTC_FromEpoch+0x248>)
 801508c:	fba2 2303 	umull	r2, r3, r2, r3
 8015090:	0bda      	lsrs	r2, r3, #15
 8015092:	4b7b      	ldr	r3, [pc, #492]	; (8015280 <RTC_FromEpoch+0x24c>)
 8015094:	4413      	add	r3, r2
 8015096:	f04f 0400 	mov.w	r4, #0
 801509a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	JDN = JD >> 1;
 801509e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80150a2:	0864      	lsrs	r4, r4, #1
 80150a4:	ea4f 0333 	mov.w	r3, r3, rrx
 80150a8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    tm = epoch; t1 = tm / 60; sec  = tm - (t1 * 60);
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80150b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150b2:	4a74      	ldr	r2, [pc, #464]	; (8015284 <RTC_FromEpoch+0x250>)
 80150b4:	fba2 2303 	umull	r2, r3, r2, r3
 80150b8:	095b      	lsrs	r3, r3, #5
 80150ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80150bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150be:	b29a      	uxth	r2, r3
 80150c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150c2:	b29b      	uxth	r3, r3
 80150c4:	4619      	mov	r1, r3
 80150c6:	0109      	lsls	r1, r1, #4
 80150c8:	1acb      	subs	r3, r1, r3
 80150ca:	009b      	lsls	r3, r3, #2
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	1ad3      	subs	r3, r2, r3
 80150d0:	b29b      	uxth	r3, r3
 80150d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    tm = t1;    t1 = tm / 60; min  = tm - (t1 * 60);
 80150d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80150da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150dc:	4a69      	ldr	r2, [pc, #420]	; (8015284 <RTC_FromEpoch+0x250>)
 80150de:	fba2 2303 	umull	r2, r3, r2, r3
 80150e2:	095b      	lsrs	r3, r3, #5
 80150e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80150e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	4619      	mov	r1, r3
 80150f0:	0109      	lsls	r1, r1, #4
 80150f2:	1acb      	subs	r3, r1, r3
 80150f4:	009b      	lsls	r3, r3, #2
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	1ad3      	subs	r3, r2, r3
 80150fa:	b29b      	uxth	r3, r3
 80150fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    tm = t1;    t1 = tm / 24; hour = tm - (t1 * 24);
 8015100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015106:	4a60      	ldr	r2, [pc, #384]	; (8015288 <RTC_FromEpoch+0x254>)
 8015108:	fba2 2303 	umull	r2, r3, r2, r3
 801510c:	091b      	lsrs	r3, r3, #4
 801510e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015112:	b29a      	uxth	r2, r3
 8015114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015116:	b29b      	uxth	r3, r3
 8015118:	4619      	mov	r1, r3
 801511a:	0049      	lsls	r1, r1, #1
 801511c:	440b      	add	r3, r1
 801511e:	00db      	lsls	r3, r3, #3
 8015120:	b29b      	uxth	r3, r3
 8015122:	1ad3      	subs	r3, r2, r3
 8015124:	b29b      	uxth	r3, r3
 8015126:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    dow   = JDN % 7;
 801512a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801512e:	f04f 0207 	mov.w	r2, #7
 8015132:	f04f 0300 	mov.w	r3, #0
 8015136:	f7fb fce9 	bl	8010b0c <__aeabi_uldivmod>
 801513a:	461c      	mov	r4, r3
 801513c:	4613      	mov	r3, r2
 801513e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    a     = JDN + 32044;
 8015142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015144:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8015148:	332c      	adds	r3, #44	; 0x2c
 801514a:	627b      	str	r3, [r7, #36]	; 0x24
    b     = ((4 * a) + 3) / 146097;
 801514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801514e:	009b      	lsls	r3, r3, #2
 8015150:	3303      	adds	r3, #3
 8015152:	4a4e      	ldr	r2, [pc, #312]	; (801528c <RTC_FromEpoch+0x258>)
 8015154:	fba2 2303 	umull	r2, r3, r2, r3
 8015158:	0bdb      	lsrs	r3, r3, #15
 801515a:	623b      	str	r3, [r7, #32]
    c     = a - ((146097 * b) / 4);
 801515c:	6a3b      	ldr	r3, [r7, #32]
 801515e:	4a4c      	ldr	r2, [pc, #304]	; (8015290 <RTC_FromEpoch+0x25c>)
 8015160:	fb02 f303 	mul.w	r3, r2, r3
 8015164:	089b      	lsrs	r3, r3, #2
 8015166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015168:	1ad3      	subs	r3, r2, r3
 801516a:	61fb      	str	r3, [r7, #28]
    d     = ((4 * c) + 3) / 1461;
 801516c:	69fb      	ldr	r3, [r7, #28]
 801516e:	009b      	lsls	r3, r3, #2
 8015170:	3303      	adds	r3, #3
 8015172:	4a48      	ldr	r2, [pc, #288]	; (8015294 <RTC_FromEpoch+0x260>)
 8015174:	fba2 2303 	umull	r2, r3, r2, r3
 8015178:	09db      	lsrs	r3, r3, #7
 801517a:	61bb      	str	r3, [r7, #24]
    e     = c - ((1461 * d) / 4);
 801517c:	69bb      	ldr	r3, [r7, #24]
 801517e:	f240 52b5 	movw	r2, #1461	; 0x5b5
 8015182:	fb02 f303 	mul.w	r3, r2, r3
 8015186:	089b      	lsrs	r3, r3, #2
 8015188:	69fa      	ldr	r2, [r7, #28]
 801518a:	1ad3      	subs	r3, r2, r3
 801518c:	617b      	str	r3, [r7, #20]
    m     = ((5 * e) + 2) / 153;
 801518e:	697a      	ldr	r2, [r7, #20]
 8015190:	4613      	mov	r3, r2
 8015192:	009b      	lsls	r3, r3, #2
 8015194:	4413      	add	r3, r2
 8015196:	3302      	adds	r3, #2
 8015198:	4a3f      	ldr	r2, [pc, #252]	; (8015298 <RTC_FromEpoch+0x264>)
 801519a:	fba2 2303 	umull	r2, r3, r2, r3
 801519e:	09db      	lsrs	r3, r3, #7
 80151a0:	613b      	str	r3, [r7, #16]
    mday  = e - (((153 * m) + 2) / 5) + 1;
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	b299      	uxth	r1, r3
 80151a6:	693a      	ldr	r2, [r7, #16]
 80151a8:	4613      	mov	r3, r2
 80151aa:	00db      	lsls	r3, r3, #3
 80151ac:	4413      	add	r3, r2
 80151ae:	011a      	lsls	r2, r3, #4
 80151b0:	4413      	add	r3, r2
 80151b2:	3302      	adds	r3, #2
 80151b4:	4a39      	ldr	r2, [pc, #228]	; (801529c <RTC_FromEpoch+0x268>)
 80151b6:	fba2 2303 	umull	r2, r3, r2, r3
 80151ba:	089b      	lsrs	r3, r3, #2
 80151bc:	b29b      	uxth	r3, r3
 80151be:	1acb      	subs	r3, r1, r3
 80151c0:	b29b      	uxth	r3, r3
 80151c2:	3301      	adds	r3, #1
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    month = m + 3 - (12 * (m / 10));
 80151ca:	693b      	ldr	r3, [r7, #16]
 80151cc:	b29a      	uxth	r2, r3
 80151ce:	693b      	ldr	r3, [r7, #16]
 80151d0:	4932      	ldr	r1, [pc, #200]	; (801529c <RTC_FromEpoch+0x268>)
 80151d2:	fba1 1303 	umull	r1, r3, r1, r3
 80151d6:	08db      	lsrs	r3, r3, #3
 80151d8:	b29b      	uxth	r3, r3
 80151da:	4619      	mov	r1, r3
 80151dc:	0049      	lsls	r1, r1, #1
 80151de:	440b      	add	r3, r1
 80151e0:	009b      	lsls	r3, r3, #2
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	1ad3      	subs	r3, r2, r3
 80151e6:	b29b      	uxth	r3, r3
 80151e8:	3303      	adds	r3, #3
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    year  = (100 * b) + d - 4800 + (m / 10);
 80151f0:	6a3b      	ldr	r3, [r7, #32]
 80151f2:	b29b      	uxth	r3, r3
 80151f4:	461a      	mov	r2, r3
 80151f6:	0092      	lsls	r2, r2, #2
 80151f8:	4413      	add	r3, r2
 80151fa:	461a      	mov	r2, r3
 80151fc:	0091      	lsls	r1, r2, #2
 80151fe:	461a      	mov	r2, r3
 8015200:	460b      	mov	r3, r1
 8015202:	4413      	add	r3, r2
 8015204:	009b      	lsls	r3, r3, #2
 8015206:	b29a      	uxth	r2, r3
 8015208:	69bb      	ldr	r3, [r7, #24]
 801520a:	b29b      	uxth	r3, r3
 801520c:	4413      	add	r3, r2
 801520e:	b29a      	uxth	r2, r3
 8015210:	693b      	ldr	r3, [r7, #16]
 8015212:	4922      	ldr	r1, [pc, #136]	; (801529c <RTC_FromEpoch+0x268>)
 8015214:	fba1 1303 	umull	r1, r3, r1, r3
 8015218:	08db      	lsrs	r3, r3, #3
 801521a:	b29b      	uxth	r3, r3
 801521c:	4413      	add	r3, r2
 801521e:	b29b      	uxth	r3, r3
 8015220:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8015224:	b29b      	uxth	r3, r3
 8015226:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    date->Year    = year - 2000;
 801522a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801522e:	b2db      	uxtb	r3, r3
 8015230:	3330      	adds	r3, #48	; 0x30
 8015232:	b2da      	uxtb	r2, r3
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	70da      	strb	r2, [r3, #3]
    date->Month   = month;
 8015238:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801523c:	b2da      	uxtb	r2, r3
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	705a      	strb	r2, [r3, #1]
    date->Date    = mday;
 8015242:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015246:	b2da      	uxtb	r2, r3
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	709a      	strb	r2, [r3, #2]
    date->WeekDay = dow;
 801524c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8015250:	b2da      	uxtb	r2, r3
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	701a      	strb	r2, [r3, #0]
    time->Hours   = hour;
 8015256:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801525a:	b2da      	uxtb	r2, r3
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	701a      	strb	r2, [r3, #0]
    time->Minutes = min;
 8015260:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015264:	b2da      	uxtb	r2, r3
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	705a      	strb	r2, [r3, #1]
    time->Seconds = sec;
 801526a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801526e:	b2da      	uxtb	r2, r3
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	709a      	strb	r2, [r3, #2]
}
 8015274:	bf00      	nop
 8015276:	3754      	adds	r7, #84	; 0x54
 8015278:	46bd      	mov	sp, r7
 801527a:	bd90      	pop	{r4, r7, pc}
 801527c:	c22e4507 	.word	0xc22e4507
 8015280:	004a7b17 	.word	0x004a7b17
 8015284:	88888889 	.word	0x88888889
 8015288:	aaaaaaab 	.word	0xaaaaaaab
 801528c:	396b06bd 	.word	0x396b06bd
 8015290:	00023ab1 	.word	0x00023ab1
 8015294:	166db073 	.word	0x166db073
 8015298:	d62b80d7 	.word	0xd62b80d7
 801529c:	cccccccd 	.word	0xcccccccd

080152a0 <LL_AHB3_GRP1_EnableClock>:
{
 80152a0:	b480      	push	{r7}
 80152a2:	b085      	sub	sp, #20
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80152a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80152ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80152ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	4313      	orrs	r3, r2
 80152b6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80152b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80152bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	4013      	ands	r3, r2
 80152c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80152c4:	68fb      	ldr	r3, [r7, #12]
}
 80152c6:	bf00      	nop
 80152c8:	3714      	adds	r7, #20
 80152ca:	46bd      	mov	sp, r7
 80152cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d0:	4770      	bx	lr

080152d2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80152d2:	b580      	push	{r7, lr}
 80152d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80152d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80152da:	f7ff ffe1 	bl	80152a0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80152de:	2200      	movs	r2, #0
 80152e0:	210f      	movs	r1, #15
 80152e2:	f06f 0001 	mvn.w	r0, #1
 80152e6:	f002 fcf4 	bl	8017cd2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80152ea:	2200      	movs	r2, #0
 80152ec:	210f      	movs	r1, #15
 80152ee:	202c      	movs	r0, #44	; 0x2c
 80152f0:	f002 fcef 	bl	8017cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 80152f4:	2200      	movs	r2, #0
 80152f6:	210f      	movs	r1, #15
 80152f8:	202d      	movs	r0, #45	; 0x2d
 80152fa:	f002 fcea 	bl	8017cd2 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80152fe:	bf00      	nop
 8015300:	bd80      	pop	{r7, pc}

08015302 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8015302:	b480      	push	{r7}
 8015304:	b085      	sub	sp, #20
 8015306:	af00      	add	r7, sp, #0
 8015308:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 801530a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801530e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	4313      	orrs	r3, r2
 8015318:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801531a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801531e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	4013      	ands	r3, r2
 8015324:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015326:	68fb      	ldr	r3, [r7, #12]
}
 8015328:	bf00      	nop
 801532a:	3714      	adds	r7, #20
 801532c:	46bd      	mov	sp, r7
 801532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015332:	4770      	bx	lr

08015334 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b08c      	sub	sp, #48	; 0x30
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 801533c:	2300      	movs	r3, #0
 801533e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8015340:	2300      	movs	r3, #0
 8015342:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8015344:	2200      	movs	r2, #0
 8015346:	6879      	ldr	r1, [r7, #4]
 8015348:	2019      	movs	r0, #25
 801534a:	f002 fcc2 	bl	8017cd2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 801534e:	2019      	movs	r0, #25
 8015350:	f002 fcd9 	bl	8017d06 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8015354:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015358:	f7ff ffd3 	bl	8015302 <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801535c:	f107 0208 	add.w	r2, r7, #8
 8015360:	f107 030c 	add.w	r3, r7, #12
 8015364:	4611      	mov	r1, r2
 8015366:	4618      	mov	r0, r3
 8015368:	f006 fd46 	bl	801bdf8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 801536c:	f006 fd2e 	bl	801bdcc <HAL_RCC_GetPCLK2Freq>
 8015370:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8015372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015374:	4a12      	ldr	r2, [pc, #72]	; (80153c0 <HAL_InitTick+0x8c>)
 8015376:	fba2 2303 	umull	r2, r3, r2, r3
 801537a:	0c9b      	lsrs	r3, r3, #18
 801537c:	3b01      	subs	r3, #1
 801537e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8015380:	4b10      	ldr	r3, [pc, #64]	; (80153c4 <HAL_InitTick+0x90>)
 8015382:	4a11      	ldr	r2, [pc, #68]	; (80153c8 <HAL_InitTick+0x94>)
 8015384:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8015386:	4b0f      	ldr	r3, [pc, #60]	; (80153c4 <HAL_InitTick+0x90>)
 8015388:	f240 32e7 	movw	r2, #999	; 0x3e7
 801538c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801538e:	4a0d      	ldr	r2, [pc, #52]	; (80153c4 <HAL_InitTick+0x90>)
 8015390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015392:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8015394:	4b0b      	ldr	r3, [pc, #44]	; (80153c4 <HAL_InitTick+0x90>)
 8015396:	2200      	movs	r2, #0
 8015398:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801539a:	4b0a      	ldr	r3, [pc, #40]	; (80153c4 <HAL_InitTick+0x90>)
 801539c:	2200      	movs	r2, #0
 801539e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80153a0:	4808      	ldr	r0, [pc, #32]	; (80153c4 <HAL_InitTick+0x90>)
 80153a2:	f007 fd93 	bl	801cecc <HAL_TIM_Base_Init>
 80153a6:	4603      	mov	r3, r0
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d104      	bne.n	80153b6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80153ac:	4805      	ldr	r0, [pc, #20]	; (80153c4 <HAL_InitTick+0x90>)
 80153ae:	f007 fe0f 	bl	801cfd0 <HAL_TIM_Base_Start_IT>
 80153b2:	4603      	mov	r3, r0
 80153b4:	e000      	b.n	80153b8 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80153b6:	2301      	movs	r3, #1
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3730      	adds	r7, #48	; 0x30
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}
 80153c0:	431bde83 	.word	0x431bde83
 80153c4:	20028758 	.word	0x20028758
 80153c8:	40012c00 	.word	0x40012c00

080153cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80153cc:	b480      	push	{r7}
 80153ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80153d0:	bf00      	nop
 80153d2:	46bd      	mov	sp, r7
 80153d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d8:	4770      	bx	lr

080153da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80153da:	b480      	push	{r7}
 80153dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80153de:	e7fe      	b.n	80153de <HardFault_Handler+0x4>

080153e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80153e0:	b480      	push	{r7}
 80153e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80153e4:	e7fe      	b.n	80153e4 <MemManage_Handler+0x4>

080153e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80153e6:	b480      	push	{r7}
 80153e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80153ea:	e7fe      	b.n	80153ea <BusFault_Handler+0x4>

080153ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80153ec:	b480      	push	{r7}
 80153ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80153f0:	e7fe      	b.n	80153f0 <UsageFault_Handler+0x4>

080153f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80153f2:	b480      	push	{r7}
 80153f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80153f6:	bf00      	nop
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr

08015400 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8015404:	2004      	movs	r0, #4
 8015406:	f003 fb89 	bl	8018b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 801540a:	4b04      	ldr	r3, [pc, #16]	; (801541c <EXTI2_IRQHandler+0x1c>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	2104      	movs	r1, #4
 8015410:	4618      	mov	r0, r3
 8015412:	f009 f917 	bl	801e644 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8015416:	bf00      	nop
 8015418:	bd80      	pop	{r7, pc}
 801541a:	bf00      	nop
 801541c:	20028004 	.word	0x20028004

08015420 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8015424:	4802      	ldr	r0, [pc, #8]	; (8015430 <DMA1_Channel1_IRQHandler+0x10>)
 8015426:	f002 fe8c 	bl	8018142 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 801542a:	bf00      	nop
 801542c:	bd80      	pop	{r7, pc}
 801542e:	bf00      	nop
 8015430:	20027a5c 	.word	0x20027a5c

08015434 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8015438:	4802      	ldr	r0, [pc, #8]	; (8015444 <COMP_IRQHandler+0x10>)
 801543a:	f002 fae1 	bl	8017a00 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 801543e:	bf00      	nop
 8015440:	bd80      	pop	{r7, pc}
 8015442:	bf00      	nop
 8015444:	2002802c 	.word	0x2002802c

08015448 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 801544c:	2020      	movs	r0, #32
 801544e:	f003 fb65 	bl	8018b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8015452:	bf00      	nop
 8015454:	bd80      	pop	{r7, pc}
	...

08015458 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 801545c:	4803      	ldr	r0, [pc, #12]	; (801546c <TIM1_UP_TIM16_IRQHandler+0x14>)
 801545e:	f007 fec1 	bl	801d1e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8015462:	4803      	ldr	r0, [pc, #12]	; (8015470 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8015464:	f007 febe 	bl	801d1e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8015468:	bf00      	nop
 801546a:	bd80      	pop	{r7, pc}
 801546c:	20028758 	.word	0x20028758
 8015470:	200287d8 	.word	0x200287d8

08015474 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8015478:	4802      	ldr	r0, [pc, #8]	; (8015484 <I2C1_EV_IRQHandler+0x10>)
 801547a:	f003 ff65 	bl	8019348 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 801547e:	bf00      	nop
 8015480:	bd80      	pop	{r7, pc}
 8015482:	bf00      	nop
 8015484:	200281bc 	.word	0x200281bc

08015488 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 801548c:	f010 ffb6 	bl	80263fc <HW_IPCC_Tx_Handler>

  return;
 8015490:	bf00      	nop
}
 8015492:	bd80      	pop	{r7, pc}

08015494 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8015498:	f010 ff56 	bl	8026348 <HW_IPCC_Rx_Handler>
  return;
 801549c:	bf00      	nop
}
 801549e:	bd80      	pop	{r7, pc}

080154a0 <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 80154a4:	4802      	ldr	r0, [pc, #8]	; (80154b0 <TSC_IRQHandler+0x10>)
 80154a6:	f008 ff5d 	bl	801e364 <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 80154aa:	bf00      	nop
 80154ac:	bd80      	pop	{r7, pc}
 80154ae:	bf00      	nop
 80154b0:	2002884c 	.word	0x2002884c

080154b4 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 80154b4:	b40c      	push	{r2, r3}
 80154b6:	b480      	push	{r7}
 80154b8:	b083      	sub	sp, #12
 80154ba:	af00      	add	r7, sp, #0
 80154bc:	4603      	mov	r3, r0
 80154be:	460a      	mov	r2, r1
 80154c0:	71fb      	strb	r3, [r7, #7]
 80154c2:	4613      	mov	r3, r2
 80154c4:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80154c6:	bf00      	nop
 80154c8:	370c      	adds	r7, #12
 80154ca:	46bd      	mov	sp, r7
 80154cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d0:	b002      	add	sp, #8
 80154d2:	4770      	bx	lr

080154d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80154d4:	b480      	push	{r7}
 80154d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80154d8:	4b26      	ldr	r3, [pc, #152]	; (8015574 <SystemInit+0xa0>)
 80154da:	2200      	movs	r2, #0
 80154dc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80154de:	4b25      	ldr	r3, [pc, #148]	; (8015574 <SystemInit+0xa0>)
 80154e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80154e4:	4a23      	ldr	r2, [pc, #140]	; (8015574 <SystemInit+0xa0>)
 80154e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80154ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80154ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80154f8:	f043 0301 	orr.w	r3, r3, #1
 80154fc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80154fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015502:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8015506:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8015508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801550c:	681a      	ldr	r2, [r3, #0]
 801550e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015512:	4b19      	ldr	r3, [pc, #100]	; (8015578 <SystemInit+0xa4>)
 8015514:	4013      	ands	r3, r2
 8015516:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8015518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801551c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8015524:	f023 0305 	bic.w	r3, r3, #5
 8015528:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 801552c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8015538:	f023 0301 	bic.w	r3, r3, #1
 801553c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8015540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015544:	4a0d      	ldr	r2, [pc, #52]	; (801557c <SystemInit+0xa8>)
 8015546:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8015548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801554c:	4a0b      	ldr	r2, [pc, #44]	; (801557c <SystemInit+0xa8>)
 801554e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8015550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801555a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801555e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8015560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015564:	2200      	movs	r2, #0
 8015566:	619a      	str	r2, [r3, #24]
}
 8015568:	bf00      	nop
 801556a:	46bd      	mov	sp, r7
 801556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015570:	4770      	bx	lr
 8015572:	bf00      	nop
 8015574:	e000ed00 	.word	0xe000ed00
 8015578:	faf6fefb 	.word	0xfaf6fefb
 801557c:	22041000 	.word	0x22041000

08015580 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8015580:	b480      	push	{r7}
 8015582:	b087      	sub	sp, #28
 8015584:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8015586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	091b      	lsrs	r3, r3, #4
 801558e:	f003 030f 	and.w	r3, r3, #15
 8015592:	4a47      	ldr	r2, [pc, #284]	; (80156b0 <SystemCoreClockUpdate+0x130>)
 8015594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015598:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801559a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801559e:	689b      	ldr	r3, [r3, #8]
 80155a0:	f003 030c 	and.w	r3, r3, #12
 80155a4:	2b0c      	cmp	r3, #12
 80155a6:	d867      	bhi.n	8015678 <SystemCoreClockUpdate+0xf8>
 80155a8:	a201      	add	r2, pc, #4	; (adr r2, 80155b0 <SystemCoreClockUpdate+0x30>)
 80155aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155ae:	bf00      	nop
 80155b0:	080155e5 	.word	0x080155e5
 80155b4:	08015679 	.word	0x08015679
 80155b8:	08015679 	.word	0x08015679
 80155bc:	08015679 	.word	0x08015679
 80155c0:	080155ed 	.word	0x080155ed
 80155c4:	08015679 	.word	0x08015679
 80155c8:	08015679 	.word	0x08015679
 80155cc:	08015679 	.word	0x08015679
 80155d0:	080155f5 	.word	0x080155f5
 80155d4:	08015679 	.word	0x08015679
 80155d8:	08015679 	.word	0x08015679
 80155dc:	08015679 	.word	0x08015679
 80155e0:	080155fd 	.word	0x080155fd
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80155e4:	4a33      	ldr	r2, [pc, #204]	; (80156b4 <SystemCoreClockUpdate+0x134>)
 80155e6:	693b      	ldr	r3, [r7, #16]
 80155e8:	6013      	str	r3, [r2, #0]
      break;
 80155ea:	e049      	b.n	8015680 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80155ec:	4b31      	ldr	r3, [pc, #196]	; (80156b4 <SystemCoreClockUpdate+0x134>)
 80155ee:	4a32      	ldr	r2, [pc, #200]	; (80156b8 <SystemCoreClockUpdate+0x138>)
 80155f0:	601a      	str	r2, [r3, #0]
      break;
 80155f2:	e045      	b.n	8015680 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80155f4:	4b2f      	ldr	r3, [pc, #188]	; (80156b4 <SystemCoreClockUpdate+0x134>)
 80155f6:	4a31      	ldr	r2, [pc, #196]	; (80156bc <SystemCoreClockUpdate+0x13c>)
 80155f8:	601a      	str	r2, [r3, #0]
      break;
 80155fa:	e041      	b.n	8015680 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80155fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015600:	68db      	ldr	r3, [r3, #12]
 8015602:	f003 0303 	and.w	r3, r3, #3
 8015606:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8015608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801560c:	68db      	ldr	r3, [r3, #12]
 801560e:	091b      	lsrs	r3, r3, #4
 8015610:	f003 0307 	and.w	r3, r3, #7
 8015614:	3301      	adds	r3, #1
 8015616:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	2b02      	cmp	r3, #2
 801561c:	d105      	bne.n	801562a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 801561e:	4a26      	ldr	r2, [pc, #152]	; (80156b8 <SystemCoreClockUpdate+0x138>)
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	fbb2 f3f3 	udiv	r3, r2, r3
 8015626:	617b      	str	r3, [r7, #20]
 8015628:	e00d      	b.n	8015646 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	2b03      	cmp	r3, #3
 801562e:	d105      	bne.n	801563c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8015630:	4a22      	ldr	r2, [pc, #136]	; (80156bc <SystemCoreClockUpdate+0x13c>)
 8015632:	68bb      	ldr	r3, [r7, #8]
 8015634:	fbb2 f3f3 	udiv	r3, r2, r3
 8015638:	617b      	str	r3, [r7, #20]
 801563a:	e004      	b.n	8015646 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 801563c:	693a      	ldr	r2, [r7, #16]
 801563e:	68bb      	ldr	r3, [r7, #8]
 8015640:	fbb2 f3f3 	udiv	r3, r2, r3
 8015644:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8015646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801564a:	68db      	ldr	r3, [r3, #12]
 801564c:	0a1b      	lsrs	r3, r3, #8
 801564e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	fb02 f303 	mul.w	r3, r2, r3
 8015658:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 801565a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	0f5b      	lsrs	r3, r3, #29
 8015662:	f003 0307 	and.w	r3, r3, #7
 8015666:	3301      	adds	r3, #1
 8015668:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 801566a:	697a      	ldr	r2, [r7, #20]
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015672:	4a10      	ldr	r2, [pc, #64]	; (80156b4 <SystemCoreClockUpdate+0x134>)
 8015674:	6013      	str	r3, [r2, #0]
      break;
 8015676:	e003      	b.n	8015680 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8015678:	4a0e      	ldr	r2, [pc, #56]	; (80156b4 <SystemCoreClockUpdate+0x134>)
 801567a:	693b      	ldr	r3, [r7, #16]
 801567c:	6013      	str	r3, [r2, #0]
      break;
 801567e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8015680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015684:	689b      	ldr	r3, [r3, #8]
 8015686:	091b      	lsrs	r3, r3, #4
 8015688:	f003 030f 	and.w	r3, r3, #15
 801568c:	4a0c      	ldr	r2, [pc, #48]	; (80156c0 <SystemCoreClockUpdate+0x140>)
 801568e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015692:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8015694:	4b07      	ldr	r3, [pc, #28]	; (80156b4 <SystemCoreClockUpdate+0x134>)
 8015696:	681a      	ldr	r2, [r3, #0]
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	fbb2 f3f3 	udiv	r3, r2, r3
 801569e:	4a05      	ldr	r2, [pc, #20]	; (80156b4 <SystemCoreClockUpdate+0x134>)
 80156a0:	6013      	str	r3, [r2, #0]

}
 80156a2:	bf00      	nop
 80156a4:	371c      	adds	r7, #28
 80156a6:	46bd      	mov	sp, r7
 80156a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ac:	4770      	bx	lr
 80156ae:	bf00      	nop
 80156b0:	08028d8c 	.word	0x08028d8c
 80156b4:	20000078 	.word	0x20000078
 80156b8:	00f42400 	.word	0x00f42400
 80156bc:	01e84800 	.word	0x01e84800
 80156c0:	08028d2c 	.word	0x08028d2c

080156c4 <LL_AHB2_GRP1_EnableClock>:
{
 80156c4:	b480      	push	{r7}
 80156c6:	b085      	sub	sp, #20
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80156cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80156d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80156d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	4313      	orrs	r3, r2
 80156da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80156dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80156e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	4013      	ands	r3, r2
 80156e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80156e8:	68fb      	ldr	r3, [r7, #12]
}
 80156ea:	bf00      	nop
 80156ec:	3714      	adds	r7, #20
 80156ee:	46bd      	mov	sp, r7
 80156f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f4:	4770      	bx	lr

080156f6 <LL_APB1_GRP1_EnableClock>:
{
 80156f6:	b480      	push	{r7}
 80156f8:	b085      	sub	sp, #20
 80156fa:	af00      	add	r7, sp, #0
 80156fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80156fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015702:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	4313      	orrs	r3, r2
 801570c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801570e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015712:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	4013      	ands	r3, r2
 8015718:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801571a:	68fb      	ldr	r3, [r7, #12]
}
 801571c:	bf00      	nop
 801571e:	3714      	adds	r7, #20
 8015720:	46bd      	mov	sp, r7
 8015722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015726:	4770      	bx	lr

08015728 <LL_APB2_GRP1_EnableClock>:
{
 8015728:	b480      	push	{r7}
 801572a:	b085      	sub	sp, #20
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8015730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015734:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	4313      	orrs	r3, r2
 801573e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8015740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015744:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	4013      	ands	r3, r2
 801574a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801574c:	68fb      	ldr	r3, [r7, #12]
}
 801574e:	bf00      	nop
 8015750:	3714      	adds	r7, #20
 8015752:	46bd      	mov	sp, r7
 8015754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015758:	4770      	bx	lr
	...

0801575c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b08e      	sub	sp, #56	; 0x38
 8015760:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8015762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015766:	2200      	movs	r2, #0
 8015768:	601a      	str	r2, [r3, #0]
 801576a:	605a      	str	r2, [r3, #4]
 801576c:	609a      	str	r2, [r3, #8]
 801576e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015770:	f107 031c 	add.w	r3, r7, #28
 8015774:	2200      	movs	r2, #0
 8015776:	601a      	str	r2, [r3, #0]
 8015778:	605a      	str	r2, [r3, #4]
 801577a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801577c:	463b      	mov	r3, r7
 801577e:	2200      	movs	r2, #0
 8015780:	601a      	str	r2, [r3, #0]
 8015782:	605a      	str	r2, [r3, #4]
 8015784:	609a      	str	r2, [r3, #8]
 8015786:	60da      	str	r2, [r3, #12]
 8015788:	611a      	str	r2, [r3, #16]
 801578a:	615a      	str	r2, [r3, #20]
 801578c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 801578e:	4b2d      	ldr	r3, [pc, #180]	; (8015844 <MX_TIM2_Init+0xe8>)
 8015790:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015794:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8015796:	4b2b      	ldr	r3, [pc, #172]	; (8015844 <MX_TIM2_Init+0xe8>)
 8015798:	f240 227f 	movw	r2, #639	; 0x27f
 801579c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801579e:	4b29      	ldr	r3, [pc, #164]	; (8015844 <MX_TIM2_Init+0xe8>)
 80157a0:	2200      	movs	r2, #0
 80157a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80157a4:	4b27      	ldr	r3, [pc, #156]	; (8015844 <MX_TIM2_Init+0xe8>)
 80157a6:	2209      	movs	r2, #9
 80157a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80157aa:	4b26      	ldr	r3, [pc, #152]	; (8015844 <MX_TIM2_Init+0xe8>)
 80157ac:	2200      	movs	r2, #0
 80157ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80157b0:	4b24      	ldr	r3, [pc, #144]	; (8015844 <MX_TIM2_Init+0xe8>)
 80157b2:	2200      	movs	r2, #0
 80157b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80157b6:	4823      	ldr	r0, [pc, #140]	; (8015844 <MX_TIM2_Init+0xe8>)
 80157b8:	f007 fb88 	bl	801cecc <HAL_TIM_Base_Init>
 80157bc:	4603      	mov	r3, r0
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d001      	beq.n	80157c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80157c2:	f7fe fdbf 	bl	8014344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80157c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80157ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80157cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80157d0:	4619      	mov	r1, r3
 80157d2:	481c      	ldr	r0, [pc, #112]	; (8015844 <MX_TIM2_Init+0xe8>)
 80157d4:	f007 ff3e 	bl	801d654 <HAL_TIM_ConfigClockSource>
 80157d8:	4603      	mov	r3, r0
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d001      	beq.n	80157e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80157de:	f7fe fdb1 	bl	8014344 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80157e2:	4818      	ldr	r0, [pc, #96]	; (8015844 <MX_TIM2_Init+0xe8>)
 80157e4:	f007 fc1e 	bl	801d024 <HAL_TIM_PWM_Init>
 80157e8:	4603      	mov	r3, r0
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d001      	beq.n	80157f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80157ee:	f7fe fda9 	bl	8014344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80157f2:	2320      	movs	r3, #32
 80157f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80157f6:	2300      	movs	r3, #0
 80157f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80157fa:	f107 031c 	add.w	r3, r7, #28
 80157fe:	4619      	mov	r1, r3
 8015800:	4810      	ldr	r0, [pc, #64]	; (8015844 <MX_TIM2_Init+0xe8>)
 8015802:	f008 fbad 	bl	801df60 <HAL_TIMEx_MasterConfigSynchronization>
 8015806:	4603      	mov	r3, r0
 8015808:	2b00      	cmp	r3, #0
 801580a:	d001      	beq.n	8015810 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 801580c:	f7fe fd9a 	bl	8014344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8015810:	2360      	movs	r3, #96	; 0x60
 8015812:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 8015814:	2309      	movs	r3, #9
 8015816:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8015818:	2300      	movs	r3, #0
 801581a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801581c:	2300      	movs	r3, #0
 801581e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8015820:	463b      	mov	r3, r7
 8015822:	2204      	movs	r2, #4
 8015824:	4619      	mov	r1, r3
 8015826:	4807      	ldr	r0, [pc, #28]	; (8015844 <MX_TIM2_Init+0xe8>)
 8015828:	f007 fdfc 	bl	801d424 <HAL_TIM_PWM_ConfigChannel>
 801582c:	4603      	mov	r3, r0
 801582e:	2b00      	cmp	r3, #0
 8015830:	d001      	beq.n	8015836 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8015832:	f7fe fd87 	bl	8014344 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8015836:	4803      	ldr	r0, [pc, #12]	; (8015844 <MX_TIM2_Init+0xe8>)
 8015838:	f000 f850 	bl	80158dc <HAL_TIM_MspPostInit>

}
 801583c:	bf00      	nop
 801583e:	3738      	adds	r7, #56	; 0x38
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}
 8015844:	20028798 	.word	0x20028798

08015848 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 801584c:	4b0f      	ldr	r3, [pc, #60]	; (801588c <MX_TIM16_Init+0x44>)
 801584e:	4a10      	ldr	r2, [pc, #64]	; (8015890 <MX_TIM16_Init+0x48>)
 8015850:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8015852:	4b0e      	ldr	r3, [pc, #56]	; (801588c <MX_TIM16_Init+0x44>)
 8015854:	221f      	movs	r2, #31
 8015856:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015858:	4b0c      	ldr	r3, [pc, #48]	; (801588c <MX_TIM16_Init+0x44>)
 801585a:	2200      	movs	r2, #0
 801585c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 801585e:	4b0b      	ldr	r3, [pc, #44]	; (801588c <MX_TIM16_Init+0x44>)
 8015860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015864:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015866:	4b09      	ldr	r3, [pc, #36]	; (801588c <MX_TIM16_Init+0x44>)
 8015868:	2200      	movs	r2, #0
 801586a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 801586c:	4b07      	ldr	r3, [pc, #28]	; (801588c <MX_TIM16_Init+0x44>)
 801586e:	2200      	movs	r2, #0
 8015870:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015872:	4b06      	ldr	r3, [pc, #24]	; (801588c <MX_TIM16_Init+0x44>)
 8015874:	2200      	movs	r2, #0
 8015876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8015878:	4804      	ldr	r0, [pc, #16]	; (801588c <MX_TIM16_Init+0x44>)
 801587a:	f007 fb27 	bl	801cecc <HAL_TIM_Base_Init>
 801587e:	4603      	mov	r3, r0
 8015880:	2b00      	cmp	r3, #0
 8015882:	d001      	beq.n	8015888 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8015884:	f7fe fd5e 	bl	8014344 <Error_Handler>
  }

}
 8015888:	bf00      	nop
 801588a:	bd80      	pop	{r7, pc}
 801588c:	200287d8 	.word	0x200287d8
 8015890:	40014400 	.word	0x40014400

08015894 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b082      	sub	sp, #8
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80158a4:	d103      	bne.n	80158ae <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80158a6:	2001      	movs	r0, #1
 80158a8:	f7ff ff25 	bl	80156f6 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80158ac:	e010      	b.n	80158d0 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	4a09      	ldr	r2, [pc, #36]	; (80158d8 <HAL_TIM_Base_MspInit+0x44>)
 80158b4:	4293      	cmp	r3, r2
 80158b6:	d10b      	bne.n	80158d0 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80158b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80158bc:	f7ff ff34 	bl	8015728 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80158c0:	2200      	movs	r2, #0
 80158c2:	2100      	movs	r1, #0
 80158c4:	2019      	movs	r0, #25
 80158c6:	f002 fa04 	bl	8017cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80158ca:	2019      	movs	r0, #25
 80158cc:	f002 fa1b 	bl	8017d06 <HAL_NVIC_EnableIRQ>
}
 80158d0:	bf00      	nop
 80158d2:	3708      	adds	r7, #8
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}
 80158d8:	40014400 	.word	0x40014400

080158dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b088      	sub	sp, #32
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80158e4:	f107 030c 	add.w	r3, r7, #12
 80158e8:	2200      	movs	r2, #0
 80158ea:	601a      	str	r2, [r3, #0]
 80158ec:	605a      	str	r2, [r3, #4]
 80158ee:	609a      	str	r2, [r3, #8]
 80158f0:	60da      	str	r2, [r3, #12]
 80158f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80158fc:	d112      	bne.n	8015924 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80158fe:	2002      	movs	r0, #2
 8015900:	f7ff fee0 	bl	80156c4 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8015904:	2308      	movs	r3, #8
 8015906:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015908:	2302      	movs	r3, #2
 801590a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801590c:	2300      	movs	r3, #0
 801590e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015910:	2300      	movs	r3, #0
 8015912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8015914:	2301      	movs	r3, #1
 8015916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015918:	f107 030c 	add.w	r3, r7, #12
 801591c:	4619      	mov	r1, r3
 801591e:	4803      	ldr	r0, [pc, #12]	; (801592c <HAL_TIM_MspPostInit+0x50>)
 8015920:	f002 ff42 	bl	80187a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8015924:	bf00      	nop
 8015926:	3720      	adds	r7, #32
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}
 801592c:	48000400 	.word	0x48000400

08015930 <HAL_COMP_TriggerCallback>:
uint16_t calibration_1 = 0;
union ColorComplex lightMessageComplexTouch = {0};
uint32_t lightsSimpleMessageReceivedTouch;
uint32_t prev_msg = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8015930:	b580      	push	{r7, lr}
 8015932:	b084      	sub	sp, #16
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 8015938:	4b1a      	ldr	r3, [pc, #104]	; (80159a4 <HAL_COMP_TriggerCallback+0x74>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801593e:	b29a      	uxth	r2, r3
 8015940:	4b19      	ldr	r3, [pc, #100]	; (80159a8 <HAL_COMP_TriggerCallback+0x78>)
 8015942:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 8015944:	6878      	ldr	r0, [r7, #4]
 8015946:	f002 f889 	bl	8017a5c <HAL_COMP_GetOutputLevel>
 801594a:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	2b01      	cmp	r3, #1
 8015950:	d109      	bne.n	8015966 <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 8015952:	4b15      	ldr	r3, [pc, #84]	; (80159a8 <HAL_COMP_TriggerCallback+0x78>)
 8015954:	881a      	ldrh	r2, [r3, #0]
 8015956:	4b15      	ldr	r3, [pc, #84]	; (80159ac <HAL_COMP_TriggerCallback+0x7c>)
 8015958:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 801595c:	4b13      	ldr	r3, [pc, #76]	; (80159ac <HAL_COMP_TriggerCallback+0x7c>)
 801595e:	2201      	movs	r2, #1
 8015960:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8015964:	e019      	b.n	801599a <HAL_COMP_TriggerCallback+0x6a>
	} else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 8015966:	4b11      	ldr	r3, [pc, #68]	; (80159ac <HAL_COMP_TriggerCallback+0x7c>)
 8015968:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 801596c:	2b00      	cmp	r3, #0
 801596e:	d014      	beq.n	801599a <HAL_COMP_TriggerCallback+0x6a>
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d111      	bne.n	801599a <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 8015976:	4b0d      	ldr	r3, [pc, #52]	; (80159ac <HAL_COMP_TriggerCallback+0x7c>)
 8015978:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 801597c:	4b0a      	ldr	r3, [pc, #40]	; (80159a8 <HAL_COMP_TriggerCallback+0x78>)
 801597e:	881a      	ldrh	r2, [r3, #0]
 8015980:	4b0a      	ldr	r3, [pc, #40]	; (80159ac <HAL_COMP_TriggerCallback+0x7c>)
 8015982:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8015986:	1ad3      	subs	r3, r2, r3
 8015988:	b29b      	uxth	r3, r3
 801598a:	461a      	mov	r2, r3
 801598c:	4807      	ldr	r0, [pc, #28]	; (80159ac <HAL_COMP_TriggerCallback+0x7c>)
 801598e:	f7fe f909 	bl	8013ba4 <enqueue_pulse>
		input0.rise_valid_ = 0;
 8015992:	4b06      	ldr	r3, [pc, #24]	; (80159ac <HAL_COMP_TriggerCallback+0x7c>)
 8015994:	2200      	movs	r2, #0
 8015996:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 801599a:	bf00      	nop
 801599c:	3710      	adds	r7, #16
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}
 80159a2:	bf00      	nop
 80159a4:	200287d8 	.word	0x200287d8
 80159a8:	20000b3a 	.word	0x20000b3a
 80159ac:	20027bdc 	.word	0x20027bdc

080159b0 <HAL_TSC_ConvCpltCallback>:


uint32_t temp = 0x01;
// TODO: make threshold update if "touch" is active for too long
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc) {
 80159b0:	b5b0      	push	{r4, r5, r7, lr}
 80159b2:	b086      	sub	sp, #24
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
	/*##-5- Discharge the touch-sensing IOs ####################################*/
	HAL_TSC_IODischarge(htsc, ENABLE);
 80159b8:	2101      	movs	r1, #1
 80159ba:	6878      	ldr	r0, [r7, #4]
 80159bc:	f008 fca2 	bl	801e304 <HAL_TSC_IODischarge>
	/* Note: a delay can be added here */

	uint32_t uhTSCAcquisitionValue;
	TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 80159c0:	2101      	movs	r1, #1
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	f008 fc27 	bl	801e216 <HAL_TSC_GroupGetStatus>
 80159c8:	4603      	mov	r3, r0
 80159ca:	75bb      	strb	r3, [r7, #22]
	uint32_t cur_time;
	/*##-6- Check if the acquisition is correct (no max count) #################*/
	if (status == TSC_GROUP_COMPLETED) {
 80159cc:	7dbb      	ldrb	r3, [r7, #22]
 80159ce:	2b01      	cmp	r3, #1
 80159d0:	f040 8115 	bne.w	8015bfe <HAL_TSC_ConvCpltCallback+0x24e>
		/*##-7- Read the acquisition value #######################################*/
		uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 80159d4:	2101      	movs	r1, #1
 80159d6:	6878      	ldr	r0, [r7, #4]
 80159d8:	f008 fc3f 	bl	801e25a <HAL_TSC_GroupGetValue>
 80159dc:	6138      	str	r0, [r7, #16]
		uint8_t touch;
		if (cap_sensor == 0) {
 80159de:	4ba0      	ldr	r3, [pc, #640]	; (8015c60 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80159e0:	781b      	ldrb	r3, [r3, #0]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d17d      	bne.n	8015ae2 <HAL_TSC_ConvCpltCallback+0x132>
			if(calibration_0 <= CALIBRATION_SAMPLES){
 80159e6:	4b9f      	ldr	r3, [pc, #636]	; (8015c64 <HAL_TSC_ConvCpltCallback+0x2b4>)
 80159e8:	881b      	ldrh	r3, [r3, #0]
 80159ea:	2b64      	cmp	r3, #100	; 0x64
 80159ec:	d83a      	bhi.n	8015a64 <HAL_TSC_ConvCpltCallback+0xb4>
				touch = 0;
 80159ee:	2300      	movs	r3, #0
 80159f0:	75fb      	strb	r3, [r7, #23]
				if(calibration_0 == 0){
 80159f2:	4b9c      	ldr	r3, [pc, #624]	; (8015c64 <HAL_TSC_ConvCpltCallback+0x2b4>)
 80159f4:	881b      	ldrh	r3, [r3, #0]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d108      	bne.n	8015a0c <HAL_TSC_ConvCpltCallback+0x5c>
					ts1_threshold = uhTSCAcquisitionValue;
 80159fa:	693b      	ldr	r3, [r7, #16]
 80159fc:	ee07 3a90 	vmov	s15, r3
 8015a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a04:	4b98      	ldr	r3, [pc, #608]	; (8015c68 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8015a06:	edc3 7a00 	vstr	s15, [r3]
 8015a0a:	e024      	b.n	8015a56 <HAL_TSC_ConvCpltCallback+0xa6>
				}else{
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8015a0c:	6938      	ldr	r0, [r7, #16]
 8015a0e:	f7fa fd03 	bl	8010418 <__aeabi_ui2d>
 8015a12:	a38f      	add	r3, pc, #572	; (adr r3, 8015c50 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8015a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a18:	f7fa fd78 	bl	801050c <__aeabi_dmul>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	460c      	mov	r4, r1
 8015a20:	4625      	mov	r5, r4
 8015a22:	461c      	mov	r4, r3
 8015a24:	4b90      	ldr	r3, [pc, #576]	; (8015c68 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f7fa fd17 	bl	801045c <__aeabi_f2d>
 8015a2e:	a38a      	add	r3, pc, #552	; (adr r3, 8015c58 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8015a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a34:	f7fa fd6a 	bl	801050c <__aeabi_dmul>
 8015a38:	4602      	mov	r2, r0
 8015a3a:	460b      	mov	r3, r1
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	4629      	mov	r1, r5
 8015a40:	f7fa fbae 	bl	80101a0 <__adddf3>
 8015a44:	4603      	mov	r3, r0
 8015a46:	460c      	mov	r4, r1
 8015a48:	4618      	mov	r0, r3
 8015a4a:	4621      	mov	r1, r4
 8015a4c:	f7fb f80e 	bl	8010a6c <__aeabi_d2f>
 8015a50:	4602      	mov	r2, r0
 8015a52:	4b85      	ldr	r3, [pc, #532]	; (8015c68 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8015a54:	601a      	str	r2, [r3, #0]
				}
				calibration_0 += 1;
 8015a56:	4b83      	ldr	r3, [pc, #524]	; (8015c64 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8015a58:	881b      	ldrh	r3, [r3, #0]
 8015a5a:	3301      	adds	r3, #1
 8015a5c:	b29a      	uxth	r2, r3
 8015a5e:	4b81      	ldr	r3, [pc, #516]	; (8015c64 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8015a60:	801a      	strh	r2, [r3, #0]
 8015a62:	e0ba      	b.n	8015bda <HAL_TSC_ConvCpltCallback+0x22a>
			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts1_threshold - THRESHOLD_TOLERANCE));
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	ee07 3a90 	vmov	s15, r3
 8015a6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015a6e:	4b7e      	ldr	r3, [pc, #504]	; (8015c68 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8015a70:	edd3 7a00 	vldr	s15, [r3]
 8015a74:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8015c6c <HAL_TSC_ConvCpltCallback+0x2bc>
 8015a78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a84:	bf94      	ite	ls
 8015a86:	2301      	movls	r3, #1
 8015a88:	2300      	movhi	r3, #0
 8015a8a:	b2db      	uxtb	r3, r3
 8015a8c:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 8015a8e:	7dfb      	ldrb	r3, [r7, #23]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	f040 80a2 	bne.w	8015bda <HAL_TSC_ConvCpltCallback+0x22a>
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8015a96:	6938      	ldr	r0, [r7, #16]
 8015a98:	f7fa fcbe 	bl	8010418 <__aeabi_ui2d>
 8015a9c:	a36c      	add	r3, pc, #432	; (adr r3, 8015c50 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8015a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa2:	f7fa fd33 	bl	801050c <__aeabi_dmul>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	460c      	mov	r4, r1
 8015aaa:	4625      	mov	r5, r4
 8015aac:	461c      	mov	r4, r3
 8015aae:	4b6e      	ldr	r3, [pc, #440]	; (8015c68 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f7fa fcd2 	bl	801045c <__aeabi_f2d>
 8015ab8:	a367      	add	r3, pc, #412	; (adr r3, 8015c58 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8015aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015abe:	f7fa fd25 	bl	801050c <__aeabi_dmul>
 8015ac2:	4602      	mov	r2, r0
 8015ac4:	460b      	mov	r3, r1
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	4629      	mov	r1, r5
 8015aca:	f7fa fb69 	bl	80101a0 <__adddf3>
 8015ace:	4603      	mov	r3, r0
 8015ad0:	460c      	mov	r4, r1
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	4621      	mov	r1, r4
 8015ad6:	f7fa ffc9 	bl	8010a6c <__aeabi_d2f>
 8015ada:	4602      	mov	r2, r0
 8015adc:	4b62      	ldr	r3, [pc, #392]	; (8015c68 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8015ade:	601a      	str	r2, [r3, #0]
 8015ae0:	e07b      	b.n	8015bda <HAL_TSC_ConvCpltCallback+0x22a>
				}
			}
		} else {
			if(calibration_1 <= CALIBRATION_SAMPLES){
 8015ae2:	4b63      	ldr	r3, [pc, #396]	; (8015c70 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8015ae4:	881b      	ldrh	r3, [r3, #0]
 8015ae6:	2b64      	cmp	r3, #100	; 0x64
 8015ae8:	d83a      	bhi.n	8015b60 <HAL_TSC_ConvCpltCallback+0x1b0>
				touch = 0;
 8015aea:	2300      	movs	r3, #0
 8015aec:	75fb      	strb	r3, [r7, #23]
				if(calibration_1 == 0){
 8015aee:	4b60      	ldr	r3, [pc, #384]	; (8015c70 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8015af0:	881b      	ldrh	r3, [r3, #0]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d108      	bne.n	8015b08 <HAL_TSC_ConvCpltCallback+0x158>
					ts2_threshold = uhTSCAcquisitionValue;
 8015af6:	693b      	ldr	r3, [r7, #16]
 8015af8:	ee07 3a90 	vmov	s15, r3
 8015afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b00:	4b5c      	ldr	r3, [pc, #368]	; (8015c74 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8015b02:	edc3 7a00 	vstr	s15, [r3]
 8015b06:	e024      	b.n	8015b52 <HAL_TSC_ConvCpltCallback+0x1a2>
				}else{
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8015b08:	6938      	ldr	r0, [r7, #16]
 8015b0a:	f7fa fc85 	bl	8010418 <__aeabi_ui2d>
 8015b0e:	a350      	add	r3, pc, #320	; (adr r3, 8015c50 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8015b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b14:	f7fa fcfa 	bl	801050c <__aeabi_dmul>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	460c      	mov	r4, r1
 8015b1c:	4625      	mov	r5, r4
 8015b1e:	461c      	mov	r4, r3
 8015b20:	4b54      	ldr	r3, [pc, #336]	; (8015c74 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	4618      	mov	r0, r3
 8015b26:	f7fa fc99 	bl	801045c <__aeabi_f2d>
 8015b2a:	a34b      	add	r3, pc, #300	; (adr r3, 8015c58 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8015b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b30:	f7fa fcec 	bl	801050c <__aeabi_dmul>
 8015b34:	4602      	mov	r2, r0
 8015b36:	460b      	mov	r3, r1
 8015b38:	4620      	mov	r0, r4
 8015b3a:	4629      	mov	r1, r5
 8015b3c:	f7fa fb30 	bl	80101a0 <__adddf3>
 8015b40:	4603      	mov	r3, r0
 8015b42:	460c      	mov	r4, r1
 8015b44:	4618      	mov	r0, r3
 8015b46:	4621      	mov	r1, r4
 8015b48:	f7fa ff90 	bl	8010a6c <__aeabi_d2f>
 8015b4c:	4602      	mov	r2, r0
 8015b4e:	4b49      	ldr	r3, [pc, #292]	; (8015c74 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8015b50:	601a      	str	r2, [r3, #0]
				}
				calibration_1 += 1;
 8015b52:	4b47      	ldr	r3, [pc, #284]	; (8015c70 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8015b54:	881b      	ldrh	r3, [r3, #0]
 8015b56:	3301      	adds	r3, #1
 8015b58:	b29a      	uxth	r2, r3
 8015b5a:	4b45      	ldr	r3, [pc, #276]	; (8015c70 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8015b5c:	801a      	strh	r2, [r3, #0]
 8015b5e:	e03c      	b.n	8015bda <HAL_TSC_ConvCpltCallback+0x22a>

			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts2_threshold - THRESHOLD_TOLERANCE));
 8015b60:	693b      	ldr	r3, [r7, #16]
 8015b62:	ee07 3a90 	vmov	s15, r3
 8015b66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015b6a:	4b42      	ldr	r3, [pc, #264]	; (8015c74 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8015b6c:	edd3 7a00 	vldr	s15, [r3]
 8015b70:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8015c6c <HAL_TSC_ConvCpltCallback+0x2bc>
 8015b74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b80:	bf94      	ite	ls
 8015b82:	2301      	movls	r3, #1
 8015b84:	2300      	movhi	r3, #0
 8015b86:	b2db      	uxtb	r3, r3
 8015b88:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 8015b8a:	7dfb      	ldrb	r3, [r7, #23]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d124      	bne.n	8015bda <HAL_TSC_ConvCpltCallback+0x22a>
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8015b90:	6938      	ldr	r0, [r7, #16]
 8015b92:	f7fa fc41 	bl	8010418 <__aeabi_ui2d>
 8015b96:	a32e      	add	r3, pc, #184	; (adr r3, 8015c50 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8015b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b9c:	f7fa fcb6 	bl	801050c <__aeabi_dmul>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	460c      	mov	r4, r1
 8015ba4:	4625      	mov	r5, r4
 8015ba6:	461c      	mov	r4, r3
 8015ba8:	4b32      	ldr	r3, [pc, #200]	; (8015c74 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	4618      	mov	r0, r3
 8015bae:	f7fa fc55 	bl	801045c <__aeabi_f2d>
 8015bb2:	a329      	add	r3, pc, #164	; (adr r3, 8015c58 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8015bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb8:	f7fa fca8 	bl	801050c <__aeabi_dmul>
 8015bbc:	4602      	mov	r2, r0
 8015bbe:	460b      	mov	r3, r1
 8015bc0:	4620      	mov	r0, r4
 8015bc2:	4629      	mov	r1, r5
 8015bc4:	f7fa faec 	bl	80101a0 <__adddf3>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	460c      	mov	r4, r1
 8015bcc:	4618      	mov	r0, r3
 8015bce:	4621      	mov	r1, r4
 8015bd0:	f7fa ff4c 	bl	8010a6c <__aeabi_d2f>
 8015bd4:	4602      	mov	r2, r0
 8015bd6:	4b27      	ldr	r3, [pc, #156]	; (8015c74 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8015bd8:	601a      	str	r2, [r3, #0]
				}
			}
		}

		cur_time = HAL_GetTick();
 8015bda:	f000 fb47 	bl	801626c <HAL_GetTick>
 8015bde:	60f8      	str	r0, [r7, #12]
		debounce(&dbs[cap_sensor], touch, cur_time);
 8015be0:	4b1f      	ldr	r3, [pc, #124]	; (8015c60 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	00db      	lsls	r3, r3, #3
 8015be6:	4a24      	ldr	r2, [pc, #144]	; (8015c78 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8015be8:	4413      	add	r3, r2
 8015bea:	7df9      	ldrb	r1, [r7, #23]
 8015bec:	68fa      	ldr	r2, [r7, #12]
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f000 f9f2 	bl	8015fd8 <debounce>
		process_touches(&touch_detector, dbs, cur_time);
 8015bf4:	68fa      	ldr	r2, [r7, #12]
 8015bf6:	4920      	ldr	r1, [pc, #128]	; (8015c78 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8015bf8:	4820      	ldr	r0, [pc, #128]	; (8015c7c <HAL_TSC_ConvCpltCallback+0x2cc>)
 8015bfa:	f000 f843 	bl	8015c84 <process_touches>
	}

	//Switches between the two channels to be acquired
	if (cap_sensor == 0) {
 8015bfe:	4b18      	ldr	r3, [pc, #96]	; (8015c60 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8015c00:	781b      	ldrb	r3, [r3, #0]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d106      	bne.n	8015c14 <HAL_TSC_ConvCpltCallback+0x264>
		IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 8015c06:	4b1e      	ldr	r3, [pc, #120]	; (8015c80 <HAL_TSC_ConvCpltCallback+0x2d0>)
 8015c08:	2280      	movs	r2, #128	; 0x80
 8015c0a:	601a      	str	r2, [r3, #0]
		cap_sensor = 1;
 8015c0c:	4b14      	ldr	r3, [pc, #80]	; (8015c60 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8015c0e:	2201      	movs	r2, #1
 8015c10:	701a      	strb	r2, [r3, #0]
 8015c12:	e005      	b.n	8015c20 <HAL_TSC_ConvCpltCallback+0x270>
	} else {
		IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 8015c14:	4b1a      	ldr	r3, [pc, #104]	; (8015c80 <HAL_TSC_ConvCpltCallback+0x2d0>)
 8015c16:	2240      	movs	r2, #64	; 0x40
 8015c18:	601a      	str	r2, [r3, #0]
		cap_sensor = 0;
 8015c1a:	4b11      	ldr	r3, [pc, #68]	; (8015c60 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK) {
 8015c20:	4917      	ldr	r1, [pc, #92]	; (8015c80 <HAL_TSC_ConvCpltCallback+0x2d0>)
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f008 fb2b 	bl	801e27e <HAL_TSC_IOConfig>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d001      	beq.n	8015c32 <HAL_TSC_ConvCpltCallback+0x282>
		/* Initialization Error */
		Error_Handler();
 8015c2e:	f7fe fb89 	bl	8014344 <Error_Handler>
	}

	/*##-9- Re-start the acquisition process ###################################*/
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 8015c32:	6878      	ldr	r0, [r7, #4]
 8015c34:	f008 fa92 	bl	801e15c <HAL_TSC_Start_IT>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d001      	beq.n	8015c42 <HAL_TSC_ConvCpltCallback+0x292>
		/* Acquisition Error */
		Error_Handler();
 8015c3e:	f7fe fb81 	bl	8014344 <Error_Handler>
	}

}
 8015c42:	bf00      	nop
 8015c44:	3718      	adds	r7, #24
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bdb0      	pop	{r4, r5, r7, pc}
 8015c4a:	bf00      	nop
 8015c4c:	f3af 8000 	nop.w
 8015c50:	47ae147b 	.word	0x47ae147b
 8015c54:	3f847ae1 	.word	0x3f847ae1
 8015c58:	7ae147ae 	.word	0x7ae147ae
 8015c5c:	3fefae14 	.word	0x3fefae14
 8015c60:	20000b3c 	.word	0x20000b3c
 8015c64:	20000b50 	.word	0x20000b50
 8015c68:	20028824 	.word	0x20028824
 8015c6c:	42700000 	.word	0x42700000
 8015c70:	20000b52 	.word	0x20000b52
 8015c74:	20028848 	.word	0x20028848
 8015c78:	20000b40 	.word	0x20000b40
 8015c7c:	2002882c 	.word	0x2002882c
 8015c80:	20028818 	.word	0x20028818

08015c84 <process_touches>:
}

uint8_t temp_flag = 1;
enum TouchType action = None;

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time) {
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b08c      	sub	sp, #48	; 0x30
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	60b9      	str	r1, [r7, #8]
 8015c8e:	607a      	str	r2, [r7, #4]

//	action = None;

	if (self->touch_state == Idle) {
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	7e1b      	ldrb	r3, [r3, #24]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d123      	bne.n	8015ce0 <process_touches+0x5c>
		if (dbs[0].clean_out) {
 8015c98:	68bb      	ldr	r3, [r7, #8]
 8015c9a:	795b      	ldrb	r3, [r3, #5]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d00c      	beq.n	8015cba <process_touches+0x36>
			// front button is held

			self->touch_state = OnePressed;
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	2201      	movs	r2, #1
 8015ca4:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 0;
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	2200      	movs	r2, #0
 8015caa:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	687a      	ldr	r2, [r7, #4]
 8015cb0:	605a      	str	r2, [r3, #4]
			action = FrontHold;
 8015cb2:	4b99      	ldr	r3, [pc, #612]	; (8015f18 <process_touches+0x294>)
 8015cb4:	2205      	movs	r2, #5
 8015cb6:	701a      	strb	r2, [r3, #0]
 8015cb8:	e126      	b.n	8015f08 <process_touches+0x284>

		} else if (dbs[1].clean_out) {
 8015cba:	68bb      	ldr	r3, [r7, #8]
 8015cbc:	3308      	adds	r3, #8
 8015cbe:	795b      	ldrb	r3, [r3, #5]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	f000 8121 	beq.w	8015f08 <process_touches+0x284>
			// back button is held

			self->touch_state = OnePressed;
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	2201      	movs	r2, #1
 8015cca:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 1;
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	2201      	movs	r2, #1
 8015cd0:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	687a      	ldr	r2, [r7, #4]
 8015cd6:	605a      	str	r2, [r3, #4]
			action = BackHold;
 8015cd8:	4b8f      	ldr	r3, [pc, #572]	; (8015f18 <process_touches+0x294>)
 8015cda:	2206      	movs	r2, #6
 8015cdc:	701a      	strb	r2, [r3, #0]
 8015cde:	e113      	b.n	8015f08 <process_touches+0x284>
		}
	} else if (self->touch_state == OnePressed) {
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	7e1b      	ldrb	r3, [r3, #24]
 8015ce4:	2b01      	cmp	r3, #1
 8015ce6:	d12d      	bne.n	8015d44 <process_touches+0xc0>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	f1c3 0301 	rsb	r3, r3, #1
 8015cf0:	00db      	lsls	r3, r3, #3
 8015cf2:	68ba      	ldr	r2, [r7, #8]
 8015cf4:	4413      	add	r3, r2
 8015cf6:	795b      	ldrb	r3, [r3, #5]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d010      	beq.n	8015d1e <process_touches+0x9a>
			self->touch_state = TwoPressed;
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2202      	movs	r2, #2
 8015d00:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	781b      	ldrb	r3, [r3, #0]
 8015d06:	f1c3 0301 	rsb	r3, r3, #1
 8015d0a:	b2da      	uxtb	r2, r3
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	687a      	ldr	r2, [r7, #4]
 8015d14:	611a      	str	r2, [r3, #16]
			action = BothHold;
 8015d16:	4b80      	ldr	r3, [pc, #512]	; (8015f18 <process_touches+0x294>)
 8015d18:	2207      	movs	r2, #7
 8015d1a:	701a      	strb	r2, [r3, #0]
 8015d1c:	e0f4      	b.n	8015f08 <process_touches+0x284>

		} else if (!dbs[self->touches[0].cap_idx].clean_out) {
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	781b      	ldrb	r3, [r3, #0]
 8015d22:	00db      	lsls	r3, r3, #3
 8015d24:	68ba      	ldr	r2, [r7, #8]
 8015d26:	4413      	add	r3, r2
 8015d28:	795b      	ldrb	r3, [r3, #5]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	f040 80ec 	bne.w	8015f08 <process_touches+0x284>
			self->touch_state = OneReleasedNoPressed;
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	2203      	movs	r2, #3
 8015d34:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	687a      	ldr	r2, [r7, #4]
 8015d3a:	609a      	str	r2, [r3, #8]
			action = BothRelease;
 8015d3c:	4b76      	ldr	r3, [pc, #472]	; (8015f18 <process_touches+0x294>)
 8015d3e:	2208      	movs	r2, #8
 8015d40:	701a      	strb	r2, [r3, #0]
 8015d42:	e0e1      	b.n	8015f08 <process_touches+0x284>

		}
	} else if (self->touch_state == TwoPressed) {
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	7e1b      	ldrb	r3, [r3, #24]
 8015d48:	2b02      	cmp	r3, #2
 8015d4a:	d11e      	bne.n	8015d8a <process_touches+0x106>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	781b      	ldrb	r3, [r3, #0]
 8015d50:	00db      	lsls	r3, r3, #3
 8015d52:	68ba      	ldr	r2, [r7, #8]
 8015d54:	4413      	add	r3, r2
 8015d56:	795b      	ldrb	r3, [r3, #5]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d106      	bne.n	8015d6a <process_touches+0xe6>
			self->touch_state = FirstReleasedSecondPressed;
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	2204      	movs	r2, #4
 8015d60:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	687a      	ldr	r2, [r7, #4]
 8015d66:	609a      	str	r2, [r3, #8]
 8015d68:	e0ce      	b.n	8015f08 <process_touches+0x284>
		} else if (!dbs[self->touches[1].cap_idx].clean_out) {
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	7b1b      	ldrb	r3, [r3, #12]
 8015d6e:	00db      	lsls	r3, r3, #3
 8015d70:	68ba      	ldr	r2, [r7, #8]
 8015d72:	4413      	add	r3, r2
 8015d74:	795b      	ldrb	r3, [r3, #5]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	f040 80c6 	bne.w	8015f08 <process_touches+0x284>
			self->touch_state = SecondReleasedFirstPressed;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	2205      	movs	r2, #5
 8015d80:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	615a      	str	r2, [r3, #20]
 8015d88:	e0be      	b.n	8015f08 <process_touches+0x284>
		}
	} else if (self->touch_state == OneReleasedNoPressed) {
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	7e1b      	ldrb	r3, [r3, #24]
 8015d8e:	2b03      	cmp	r3, #3
 8015d90:	d134      	bne.n	8015dfc <process_touches+0x178>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	f1c3 0301 	rsb	r3, r3, #1
 8015d9a:	00db      	lsls	r3, r3, #3
 8015d9c:	68ba      	ldr	r2, [r7, #8]
 8015d9e:	4413      	add	r3, r2
 8015da0:	795b      	ldrb	r3, [r3, #5]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d00d      	beq.n	8015dc2 <process_touches+0x13e>
			self->touch_state = FirstReleasedSecondPressed;
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	2204      	movs	r2, #4
 8015daa:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	781b      	ldrb	r3, [r3, #0]
 8015db0:	f1c3 0301 	rsb	r3, r3, #1
 8015db4:	b2da      	uxtb	r2, r3
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	687a      	ldr	r2, [r7, #4]
 8015dbe:	611a      	str	r2, [r3, #16]
 8015dc0:	e0a2      	b.n	8015f08 <process_touches+0x284>
		} else if (cur_time - self->touches[0].end_t > MIN_SWIPE_GAP) {
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	689b      	ldr	r3, [r3, #8]
 8015dc6:	687a      	ldr	r2, [r7, #4]
 8015dc8:	1ad3      	subs	r3, r2, r3
 8015dca:	2b0a      	cmp	r3, #10
 8015dcc:	f240 809c 	bls.w	8015f08 <process_touches+0x284>
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	689a      	ldr	r2, [r3, #8]
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	685b      	ldr	r3, [r3, #4]
 8015dd8:	1ad3      	subs	r3, r2, r3
 8015dda:	617b      	str	r3, [r7, #20]
			if (TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD) {
 8015ddc:	697b      	ldr	r3, [r7, #20]
 8015dde:	2b28      	cmp	r3, #40	; 0x28
 8015de0:	d905      	bls.n	8015dee <process_touches+0x16a>
 8015de2:	697b      	ldr	r3, [r7, #20]
 8015de4:	2bc7      	cmp	r3, #199	; 0xc7
 8015de6:	d802      	bhi.n	8015dee <process_touches+0x16a>
				//Register a tap
				action = BothRelease;
 8015de8:	4b4b      	ldr	r3, [pc, #300]	; (8015f18 <process_touches+0x294>)
 8015dea:	2208      	movs	r2, #8
 8015dec:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8015dee:	4b4b      	ldr	r3, [pc, #300]	; (8015f1c <process_touches+0x298>)
 8015df0:	2200      	movs	r2, #0
 8015df2:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	2200      	movs	r2, #0
 8015df8:	761a      	strb	r2, [r3, #24]
 8015dfa:	e085      	b.n	8015f08 <process_touches+0x284>
		}
	} else if (self->touch_state == FirstReleasedSecondPressed) {
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	7e1b      	ldrb	r3, [r3, #24]
 8015e00:	2b04      	cmp	r3, #4
 8015e02:	d148      	bne.n	8015e96 <process_touches+0x212>
		if (!dbs[self->touches[1].cap_idx].clean_out) {
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	7b1b      	ldrb	r3, [r3, #12]
 8015e08:	00db      	lsls	r3, r3, #3
 8015e0a:	68ba      	ldr	r2, [r7, #8]
 8015e0c:	4413      	add	r3, r2
 8015e0e:	795b      	ldrb	r3, [r3, #5]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d179      	bne.n	8015f08 <process_touches+0x284>
			self->touch_state = Idle;
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	2200      	movs	r2, #0
 8015e18:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	687a      	ldr	r2, [r7, #4]
 8015e1e:	615a      	str	r2, [r3, #20]
			action = None;
 8015e20:	4b3d      	ldr	r3, [pc, #244]	; (8015f18 <process_touches+0x294>)
 8015e22:	2200      	movs	r2, #0
 8015e24:	701a      	strb	r2, [r3, #0]
			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	691a      	ldr	r2, [r3, #16]
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	685b      	ldr	r3, [r3, #4]
 8015e2e:	1ad3      	subs	r3, r2, r3
 8015e30:	623b      	str	r3, [r7, #32]
			uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	695a      	ldr	r2, [r3, #20]
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	689b      	ldr	r3, [r3, #8]
 8015e3a:	1ad3      	subs	r3, r2, r3
 8015e3c:	61fb      	str	r3, [r7, #28]
			uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	695a      	ldr	r2, [r3, #20]
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	685b      	ldr	r3, [r3, #4]
 8015e46:	1ad3      	subs	r3, r2, r3
 8015e48:	61bb      	str	r3, [r7, #24]

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8015e4a:	6a3b      	ldr	r3, [r7, #32]
 8015e4c:	2b28      	cmp	r3, #40	; 0x28
 8015e4e:	d80c      	bhi.n	8015e6a <process_touches+0x1e6>
 8015e50:	69fb      	ldr	r3, [r7, #28]
 8015e52:	2b28      	cmp	r3, #40	; 0x28
 8015e54:	d809      	bhi.n	8015e6a <process_touches+0x1e6>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8015e56:	69bb      	ldr	r3, [r7, #24]
 8015e58:	2b28      	cmp	r3, #40	; 0x28
 8015e5a:	d906      	bls.n	8015e6a <process_touches+0x1e6>
 8015e5c:	69bb      	ldr	r3, [r7, #24]
 8015e5e:	2bc7      	cmp	r3, #199	; 0xc7
 8015e60:	d803      	bhi.n	8015e6a <process_touches+0x1e6>
				//Register a tap
				action = BothRelease;
 8015e62:	4b2d      	ldr	r3, [pc, #180]	; (8015f18 <process_touches+0x294>)
 8015e64:	2208      	movs	r2, #8
 8015e66:	701a      	strb	r2, [r3, #0]
 8015e68:	e011      	b.n	8015e8e <process_touches+0x20a>
			}
			//Otherwise, it was a swipe. Might have to adjust these thresholds to allow swipe detection
			else if (touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD) {
 8015e6a:	6a3b      	ldr	r3, [r7, #32]
 8015e6c:	2b28      	cmp	r3, #40	; 0x28
 8015e6e:	d90e      	bls.n	8015e8e <process_touches+0x20a>
 8015e70:	69fb      	ldr	r3, [r7, #28]
 8015e72:	2b28      	cmp	r3, #40	; 0x28
 8015e74:	d90b      	bls.n	8015e8e <process_touches+0x20a>
				//Register a swipe
				action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	781b      	ldrb	r3, [r3, #0]
 8015e7a:	005b      	lsls	r3, r3, #1
 8015e7c:	b25a      	sxtb	r2, r3
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	7b1b      	ldrb	r3, [r3, #12]
 8015e82:	b25b      	sxtb	r3, r3
 8015e84:	4313      	orrs	r3, r2
 8015e86:	b25b      	sxtb	r3, r3
 8015e88:	b2da      	uxtb	r2, r3
 8015e8a:	4b23      	ldr	r3, [pc, #140]	; (8015f18 <process_touches+0x294>)
 8015e8c:	701a      	strb	r2, [r3, #0]
			}

			self->touch_state = Idle;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	2200      	movs	r2, #0
 8015e92:	761a      	strb	r2, [r3, #24]
 8015e94:	e038      	b.n	8015f08 <process_touches+0x284>
		}
	} else if (self->touch_state == SecondReleasedFirstPressed) {
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	7e1b      	ldrb	r3, [r3, #24]
 8015e9a:	2b05      	cmp	r3, #5
 8015e9c:	d134      	bne.n	8015f08 <process_touches+0x284>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	00db      	lsls	r3, r3, #3
 8015ea4:	68ba      	ldr	r2, [r7, #8]
 8015ea6:	4413      	add	r3, r2
 8015ea8:	795b      	ldrb	r3, [r3, #5]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d12c      	bne.n	8015f08 <process_touches+0x284>
			self->touch_state = Idle;
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	687a      	ldr	r2, [r7, #4]
 8015eb8:	609a      	str	r2, [r3, #8]

			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	691a      	ldr	r2, [r3, #16]
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	685b      	ldr	r3, [r3, #4]
 8015ec2:	1ad3      	subs	r3, r2, r3
 8015ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	689a      	ldr	r2, [r3, #8]
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	695b      	ldr	r3, [r3, #20]
 8015ece:	1ad3      	subs	r3, r2, r3
 8015ed0:	62bb      	str	r3, [r7, #40]	; 0x28
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	689a      	ldr	r2, [r3, #8]
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	685b      	ldr	r3, [r3, #4]
 8015eda:	1ad3      	subs	r3, r2, r3
 8015edc:	627b      	str	r3, [r7, #36]	; 0x24

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8015ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee0:	2b28      	cmp	r3, #40	; 0x28
 8015ee2:	d80b      	bhi.n	8015efc <process_touches+0x278>
 8015ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee6:	2b28      	cmp	r3, #40	; 0x28
 8015ee8:	d808      	bhi.n	8015efc <process_touches+0x278>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8015eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eec:	2b28      	cmp	r3, #40	; 0x28
 8015eee:	d905      	bls.n	8015efc <process_touches+0x278>
 8015ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef2:	2bc7      	cmp	r3, #199	; 0xc7
 8015ef4:	d802      	bhi.n	8015efc <process_touches+0x278>
				//Register a tap
				action = BothRelease;
 8015ef6:	4b08      	ldr	r3, [pc, #32]	; (8015f18 <process_touches+0x294>)
 8015ef8:	2208      	movs	r2, #8
 8015efa:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8015efc:	4b07      	ldr	r3, [pc, #28]	; (8015f1c <process_touches+0x298>)
 8015efe:	2200      	movs	r2, #0
 8015f00:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2200      	movs	r2, #0
 8015f06:	761a      	strb	r2, [r3, #24]
		}
	}

	if( action == None){
 8015f08:	4b03      	ldr	r3, [pc, #12]	; (8015f18 <process_touches+0x294>)
 8015f0a:	781b      	ldrb	r3, [r3, #0]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d107      	bne.n	8015f20 <process_touches+0x29c>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8015f10:	4b02      	ldr	r3, [pc, #8]	; (8015f1c <process_touches+0x298>)
 8015f12:	2200      	movs	r2, #0
 8015f14:	601a      	str	r2, [r3, #0]
 8015f16:	e042      	b.n	8015f9e <process_touches+0x31a>
 8015f18:	20000b58 	.word	0x20000b58
 8015f1c:	20028828 	.word	0x20028828

	}else if(action == SwipeForward){
 8015f20:	4b29      	ldr	r3, [pc, #164]	; (8015fc8 <process_touches+0x344>)
 8015f22:	781b      	ldrb	r3, [r3, #0]
 8015f24:	2b01      	cmp	r3, #1
 8015f26:	d103      	bne.n	8015f30 <process_touches+0x2ac>
		lightsSimpleMessageReceivedTouch = 0x03; // cyan (green + blue)
 8015f28:	4b28      	ldr	r3, [pc, #160]	; (8015fcc <process_touches+0x348>)
 8015f2a:	2203      	movs	r2, #3
 8015f2c:	601a      	str	r2, [r3, #0]
 8015f2e:	e036      	b.n	8015f9e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x03 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x03 << 4;
	}else if(action == SwipeBackward){
 8015f30:	4b25      	ldr	r3, [pc, #148]	; (8015fc8 <process_touches+0x344>)
 8015f32:	781b      	ldrb	r3, [r3, #0]
 8015f34:	2b02      	cmp	r3, #2
 8015f36:	d103      	bne.n	8015f40 <process_touches+0x2bc>
		lightsSimpleMessageReceivedTouch = (0x01 << 6) | 0x01; // orange (green + red)
 8015f38:	4b24      	ldr	r3, [pc, #144]	; (8015fcc <process_touches+0x348>)
 8015f3a:	2241      	movs	r2, #65	; 0x41
 8015f3c:	601a      	str	r2, [r3, #0]
 8015f3e:	e02e      	b.n	8015f9e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == FrontRelease){
 8015f40:	4b21      	ldr	r3, [pc, #132]	; (8015fc8 <process_touches+0x344>)
 8015f42:	781b      	ldrb	r3, [r3, #0]
 8015f44:	2b03      	cmp	r3, #3
 8015f46:	d103      	bne.n	8015f50 <process_touches+0x2cc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8015f48:	4b20      	ldr	r3, [pc, #128]	; (8015fcc <process_touches+0x348>)
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	601a      	str	r2, [r3, #0]
 8015f4e:	e026      	b.n	8015f9e <process_touches+0x31a>
	}else if(action == BackRelease){
 8015f50:	4b1d      	ldr	r3, [pc, #116]	; (8015fc8 <process_touches+0x344>)
 8015f52:	781b      	ldrb	r3, [r3, #0]
 8015f54:	2b04      	cmp	r3, #4
 8015f56:	d103      	bne.n	8015f60 <process_touches+0x2dc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8015f58:	4b1c      	ldr	r3, [pc, #112]	; (8015fcc <process_touches+0x348>)
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	601a      	str	r2, [r3, #0]
 8015f5e:	e01e      	b.n	8015f9e <process_touches+0x31a>
	}else if(action == FrontHold){
 8015f60:	4b19      	ldr	r3, [pc, #100]	; (8015fc8 <process_touches+0x344>)
 8015f62:	781b      	ldrb	r3, [r3, #0]
 8015f64:	2b05      	cmp	r3, #5
 8015f66:	d103      	bne.n	8015f70 <process_touches+0x2ec>
		lightsSimpleMessageReceivedTouch = 0x01; // green
 8015f68:	4b18      	ldr	r3, [pc, #96]	; (8015fcc <process_touches+0x348>)
 8015f6a:	2201      	movs	r2, #1
 8015f6c:	601a      	str	r2, [r3, #0]
 8015f6e:	e016      	b.n	8015f9e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x01 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x01 << 4;
	}else if(action == BackHold){
 8015f70:	4b15      	ldr	r3, [pc, #84]	; (8015fc8 <process_touches+0x344>)
 8015f72:	781b      	ldrb	r3, [r3, #0]
 8015f74:	2b06      	cmp	r3, #6
 8015f76:	d103      	bne.n	8015f80 <process_touches+0x2fc>
		lightsSimpleMessageReceivedTouch = 0x02; // blue
 8015f78:	4b14      	ldr	r3, [pc, #80]	; (8015fcc <process_touches+0x348>)
 8015f7a:	2202      	movs	r2, #2
 8015f7c:	601a      	str	r2, [r3, #0]
 8015f7e:	e00e      	b.n	8015f9e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x02 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x02 << 4;
	}else if(action == BothHold){
 8015f80:	4b11      	ldr	r3, [pc, #68]	; (8015fc8 <process_touches+0x344>)
 8015f82:	781b      	ldrb	r3, [r3, #0]
 8015f84:	2b07      	cmp	r3, #7
 8015f86:	d103      	bne.n	8015f90 <process_touches+0x30c>
		lightsSimpleMessageReceivedTouch = 0x01 << 6; // red
 8015f88:	4b10      	ldr	r3, [pc, #64]	; (8015fcc <process_touches+0x348>)
 8015f8a:	2240      	movs	r2, #64	; 0x40
 8015f8c:	601a      	str	r2, [r3, #0]
 8015f8e:	e006      	b.n	8015f9e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == BothRelease){
 8015f90:	4b0d      	ldr	r3, [pc, #52]	; (8015fc8 <process_touches+0x344>)
 8015f92:	781b      	ldrb	r3, [r3, #0]
 8015f94:	2b08      	cmp	r3, #8
 8015f96:	d102      	bne.n	8015f9e <process_touches+0x31a>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8015f98:	4b0c      	ldr	r3, [pc, #48]	; (8015fcc <process_touches+0x348>)
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	601a      	str	r2, [r3, #0]
	}

	if(prev_msg != lightsSimpleMessageReceivedTouch ){
 8015f9e:	4b0c      	ldr	r3, [pc, #48]	; (8015fd0 <process_touches+0x34c>)
 8015fa0:	681a      	ldr	r2, [r3, #0]
 8015fa2:	4b0a      	ldr	r3, [pc, #40]	; (8015fcc <process_touches+0x348>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	429a      	cmp	r2, r3
 8015fa8:	d00a      	beq.n	8015fc0 <process_touches+0x33c>
		prev_msg = lightsSimpleMessageReceivedTouch;
 8015faa:	4b08      	ldr	r3, [pc, #32]	; (8015fcc <process_touches+0x348>)
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	4a08      	ldr	r2, [pc, #32]	; (8015fd0 <process_touches+0x34c>)
 8015fb0:	6013      	str	r3, [r2, #0]

		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageReceivedTouch, 0U, 0);
 8015fb2:	4b08      	ldr	r3, [pc, #32]	; (8015fd4 <process_touches+0x350>)
 8015fb4:	6818      	ldr	r0, [r3, #0]
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	2200      	movs	r2, #0
 8015fba:	4904      	ldr	r1, [pc, #16]	; (8015fcc <process_touches+0x348>)
 8015fbc:	f009 f904 	bl	801f1c8 <osMessageQueuePut>

	}

}
 8015fc0:	bf00      	nop
 8015fc2:	3730      	adds	r7, #48	; 0x30
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd80      	pop	{r7, pc}
 8015fc8:	20000b58 	.word	0x20000b58
 8015fcc:	20028828 	.word	0x20028828
 8015fd0:	20000b54 	.word	0x20000b54
 8015fd4:	20027bcc 	.word	0x20027bcc

08015fd8 <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time) {
 8015fd8:	b480      	push	{r7}
 8015fda:	b085      	sub	sp, #20
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	60f8      	str	r0, [r7, #12]
 8015fe0:	460b      	mov	r3, r1
 8015fe2:	607a      	str	r2, [r7, #4]
 8015fe4:	72fb      	strb	r3, [r7, #11]
	if (noisy_in != self->input) {
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	791b      	ldrb	r3, [r3, #4]
 8015fea:	7afa      	ldrb	r2, [r7, #11]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	d006      	beq.n	8015ffe <debounce+0x26>
		self->input = noisy_in;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	7afa      	ldrb	r2, [r7, #11]
 8015ff4:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	687a      	ldr	r2, [r7, #4]
 8015ffa:	601a      	str	r2, [r3, #0]
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
		self->clean_out = self->input;
	}
}
 8015ffc:	e009      	b.n	8016012 <debounce+0x3a>
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	687a      	ldr	r2, [r7, #4]
 8016004:	1ad3      	subs	r3, r2, r3
 8016006:	2b1e      	cmp	r3, #30
 8016008:	d903      	bls.n	8016012 <debounce+0x3a>
		self->clean_out = self->input;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	791a      	ldrb	r2, [r3, #4]
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	715a      	strb	r2, [r3, #5]
}
 8016012:	bf00      	nop
 8016014:	3714      	adds	r7, #20
 8016016:	46bd      	mov	sp, r7
 8016018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601c:	4770      	bx	lr

0801601e <LL_AHB1_GRP1_EnableClock>:
{
 801601e:	b480      	push	{r7}
 8016020:	b085      	sub	sp, #20
 8016022:	af00      	add	r7, sp, #0
 8016024:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8016026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801602a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801602c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	4313      	orrs	r3, r2
 8016034:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8016036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801603a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	4013      	ands	r3, r2
 8016040:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016042:	68fb      	ldr	r3, [r7, #12]
}
 8016044:	bf00      	nop
 8016046:	3714      	adds	r7, #20
 8016048:	46bd      	mov	sp, r7
 801604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604e:	4770      	bx	lr

08016050 <LL_AHB2_GRP1_EnableClock>:
{
 8016050:	b480      	push	{r7}
 8016052:	b085      	sub	sp, #20
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8016058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801605c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801605e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	4313      	orrs	r3, r2
 8016066:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8016068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801606c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	4013      	ands	r3, r2
 8016072:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016074:	68fb      	ldr	r3, [r7, #12]
}
 8016076:	bf00      	nop
 8016078:	3714      	adds	r7, #20
 801607a:	46bd      	mov	sp, r7
 801607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016080:	4770      	bx	lr
	...

08016084 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 8016088:	4b1d      	ldr	r3, [pc, #116]	; (8016100 <MX_TSC_Init+0x7c>)
 801608a:	4a1e      	ldr	r2, [pc, #120]	; (8016104 <MX_TSC_Init+0x80>)
 801608c:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 801608e:	4b1c      	ldr	r3, [pc, #112]	; (8016100 <MX_TSC_Init+0x7c>)
 8016090:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8016094:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 8016096:	4b1a      	ldr	r3, [pc, #104]	; (8016100 <MX_TSC_Init+0x7c>)
 8016098:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 801609c:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 801609e:	4b18      	ldr	r3, [pc, #96]	; (8016100 <MX_TSC_Init+0x7c>)
 80160a0:	2200      	movs	r2, #0
 80160a2:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 80160a4:	4b16      	ldr	r3, [pc, #88]	; (8016100 <MX_TSC_Init+0x7c>)
 80160a6:	2201      	movs	r2, #1
 80160a8:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80160aa:	4b15      	ldr	r3, [pc, #84]	; (8016100 <MX_TSC_Init+0x7c>)
 80160ac:	2200      	movs	r2, #0
 80160ae:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80160b0:	4b13      	ldr	r3, [pc, #76]	; (8016100 <MX_TSC_Init+0x7c>)
 80160b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80160b6:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 80160b8:	4b11      	ldr	r3, [pc, #68]	; (8016100 <MX_TSC_Init+0x7c>)
 80160ba:	22c0      	movs	r2, #192	; 0xc0
 80160bc:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80160be:	4b10      	ldr	r3, [pc, #64]	; (8016100 <MX_TSC_Init+0x7c>)
 80160c0:	2200      	movs	r2, #0
 80160c2:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80160c4:	4b0e      	ldr	r3, [pc, #56]	; (8016100 <MX_TSC_Init+0x7c>)
 80160c6:	2200      	movs	r2, #0
 80160c8:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80160ca:	4b0d      	ldr	r3, [pc, #52]	; (8016100 <MX_TSC_Init+0x7c>)
 80160cc:	2200      	movs	r2, #0
 80160ce:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 80160d0:	4b0b      	ldr	r3, [pc, #44]	; (8016100 <MX_TSC_Init+0x7c>)
 80160d2:	2200      	movs	r2, #0
 80160d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 80160d8:	4b09      	ldr	r3, [pc, #36]	; (8016100 <MX_TSC_Init+0x7c>)
 80160da:	22c0      	movs	r2, #192	; 0xc0
 80160dc:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 80160de:	4b08      	ldr	r3, [pc, #32]	; (8016100 <MX_TSC_Init+0x7c>)
 80160e0:	2200      	movs	r2, #0
 80160e2:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 80160e4:	4b06      	ldr	r3, [pc, #24]	; (8016100 <MX_TSC_Init+0x7c>)
 80160e6:	2210      	movs	r2, #16
 80160e8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80160ea:	4805      	ldr	r0, [pc, #20]	; (8016100 <MX_TSC_Init+0x7c>)
 80160ec:	f007 ffb6 	bl	801e05c <HAL_TSC_Init>
 80160f0:	4603      	mov	r3, r0
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d001      	beq.n	80160fa <MX_TSC_Init+0x76>
  {
    Error_Handler();
 80160f6:	f7fe f925 	bl	8014344 <Error_Handler>
  }

}
 80160fa:	bf00      	nop
 80160fc:	bd80      	pop	{r7, pc}
 80160fe:	bf00      	nop
 8016100:	2002884c 	.word	0x2002884c
 8016104:	40024000 	.word	0x40024000

08016108 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b088      	sub	sp, #32
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016110:	f107 030c 	add.w	r3, r7, #12
 8016114:	2200      	movs	r2, #0
 8016116:	601a      	str	r2, [r3, #0]
 8016118:	605a      	str	r2, [r3, #4]
 801611a:	609a      	str	r2, [r3, #8]
 801611c:	60da      	str	r2, [r3, #12]
 801611e:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	4a1a      	ldr	r2, [pc, #104]	; (8016190 <HAL_TSC_MspInit+0x88>)
 8016126:	4293      	cmp	r3, r2
 8016128:	d12e      	bne.n	8016188 <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 801612a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801612e:	f7ff ff76 	bl	801601e <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016132:	2002      	movs	r0, #2
 8016134:	f7ff ff8c 	bl	8016050 <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8016138:	2310      	movs	r3, #16
 801613a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801613c:	2312      	movs	r3, #18
 801613e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016140:	2300      	movs	r3, #0
 8016142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016144:	2300      	movs	r3, #0
 8016146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8016148:	2309      	movs	r3, #9
 801614a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801614c:	f107 030c 	add.w	r3, r7, #12
 8016150:	4619      	mov	r1, r3
 8016152:	4810      	ldr	r0, [pc, #64]	; (8016194 <HAL_TSC_MspInit+0x8c>)
 8016154:	f002 fb28 	bl	80187a8 <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8016158:	23c0      	movs	r3, #192	; 0xc0
 801615a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801615c:	2302      	movs	r3, #2
 801615e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016160:	2300      	movs	r3, #0
 8016162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016164:	2300      	movs	r3, #0
 8016166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8016168:	2309      	movs	r3, #9
 801616a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801616c:	f107 030c 	add.w	r3, r7, #12
 8016170:	4619      	mov	r1, r3
 8016172:	4808      	ldr	r0, [pc, #32]	; (8016194 <HAL_TSC_MspInit+0x8c>)
 8016174:	f002 fb18 	bl	80187a8 <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 8016178:	2200      	movs	r2, #0
 801617a:	2105      	movs	r1, #5
 801617c:	2027      	movs	r0, #39	; 0x27
 801617e:	f001 fda8 	bl	8017cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 8016182:	2027      	movs	r0, #39	; 0x27
 8016184:	f001 fdbf 	bl	8017d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8016188:	bf00      	nop
 801618a:	3720      	adds	r7, #32
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}
 8016190:	40024000 	.word	0x40024000
 8016194:	48000400 	.word	0x48000400

08016198 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8016198:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801619a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801619c:	3304      	adds	r3, #4

0801619e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801619e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80161a0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80161a2:	d3f9      	bcc.n	8016198 <CopyDataInit>
  bx lr
 80161a4:	4770      	bx	lr

080161a6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80161a6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80161a8:	3004      	adds	r0, #4

080161aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80161aa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80161ac:	d3fb      	bcc.n	80161a6 <FillZerobss>
  bx lr
 80161ae:	4770      	bx	lr

080161b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80161b0:	480c      	ldr	r0, [pc, #48]	; (80161e4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80161b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80161b4:	480c      	ldr	r0, [pc, #48]	; (80161e8 <LoopForever+0x8>)
 80161b6:	490d      	ldr	r1, [pc, #52]	; (80161ec <LoopForever+0xc>)
 80161b8:	4a0d      	ldr	r2, [pc, #52]	; (80161f0 <LoopForever+0x10>)
 80161ba:	2300      	movs	r3, #0
 80161bc:	f7ff ffef 	bl	801619e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80161c0:	480c      	ldr	r0, [pc, #48]	; (80161f4 <LoopForever+0x14>)
 80161c2:	490d      	ldr	r1, [pc, #52]	; (80161f8 <LoopForever+0x18>)
 80161c4:	2300      	movs	r3, #0
 80161c6:	f7ff fff0 	bl	80161aa <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80161ca:	480c      	ldr	r0, [pc, #48]	; (80161fc <LoopForever+0x1c>)
 80161cc:	490c      	ldr	r1, [pc, #48]	; (8016200 <LoopForever+0x20>)
 80161ce:	2300      	movs	r3, #0
 80161d0:	f7ff ffeb 	bl	80161aa <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80161d4:	f7ff f97e 	bl	80154d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80161d8:	f010 fd98 	bl	8026d0c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80161dc:	f7fd ffd4 	bl	8014188 <main>

080161e0 <LoopForever>:

LoopForever:
  b LoopForever
 80161e0:	e7fe      	b.n	80161e0 <LoopForever>
 80161e2:	0000      	.short	0x0000
Reset_Handler:  ldr   r0, =_estack
 80161e4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80161e8:	20000004 	.word	0x20000004
 80161ec:	200001ac 	.word	0x200001ac
 80161f0:	08029730 	.word	0x08029730
  INIT_BSS _sbss, _ebss
 80161f4:	20000260 	.word	0x20000260
 80161f8:	200289d0 	.word	0x200289d0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80161fc:	200300c4 	.word	0x200300c4
 8016200:	20030b5b 	.word	0x20030b5b

08016204 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8016204:	e7fe      	b.n	8016204 <ADC1_IRQHandler>
	...

08016208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b082      	sub	sp, #8
 801620c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801620e:	2300      	movs	r3, #0
 8016210:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016212:	4b0c      	ldr	r3, [pc, #48]	; (8016244 <HAL_Init+0x3c>)
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	4a0b      	ldr	r2, [pc, #44]	; (8016244 <HAL_Init+0x3c>)
 8016218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801621c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801621e:	2003      	movs	r0, #3
 8016220:	f001 fd4c 	bl	8017cbc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8016224:	2000      	movs	r0, #0
 8016226:	f7ff f885 	bl	8015334 <HAL_InitTick>
 801622a:	4603      	mov	r3, r0
 801622c:	2b00      	cmp	r3, #0
 801622e:	d002      	beq.n	8016236 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8016230:	2301      	movs	r3, #1
 8016232:	71fb      	strb	r3, [r7, #7]
 8016234:	e001      	b.n	801623a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8016236:	f7ff f84c 	bl	80152d2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801623a:	79fb      	ldrb	r3, [r7, #7]
}
 801623c:	4618      	mov	r0, r3
 801623e:	3708      	adds	r7, #8
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}
 8016244:	58004000 	.word	0x58004000

08016248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016248:	b480      	push	{r7}
 801624a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801624c:	4b05      	ldr	r3, [pc, #20]	; (8016264 <HAL_IncTick+0x1c>)
 801624e:	681a      	ldr	r2, [r3, #0]
 8016250:	4b05      	ldr	r3, [pc, #20]	; (8016268 <HAL_IncTick+0x20>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	4413      	add	r3, r2
 8016256:	4a03      	ldr	r2, [pc, #12]	; (8016264 <HAL_IncTick+0x1c>)
 8016258:	6013      	str	r3, [r2, #0]
}
 801625a:	bf00      	nop
 801625c:	46bd      	mov	sp, r7
 801625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016262:	4770      	bx	lr
 8016264:	20028890 	.word	0x20028890
 8016268:	20000080 	.word	0x20000080

0801626c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801626c:	b480      	push	{r7}
 801626e:	af00      	add	r7, sp, #0
  return uwTick;
 8016270:	4b03      	ldr	r3, [pc, #12]	; (8016280 <HAL_GetTick+0x14>)
 8016272:	681b      	ldr	r3, [r3, #0]
}
 8016274:	4618      	mov	r0, r3
 8016276:	46bd      	mov	sp, r7
 8016278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627c:	4770      	bx	lr
 801627e:	bf00      	nop
 8016280:	20028890 	.word	0x20028890

08016284 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8016284:	b480      	push	{r7}
 8016286:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8016288:	4b03      	ldr	r3, [pc, #12]	; (8016298 <HAL_GetTickPrio+0x14>)
 801628a:	681b      	ldr	r3, [r3, #0]
}
 801628c:	4618      	mov	r0, r3
 801628e:	46bd      	mov	sp, r7
 8016290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016294:	4770      	bx	lr
 8016296:	bf00      	nop
 8016298:	2000007c 	.word	0x2000007c

0801629c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 801629c:	b580      	push	{r7, lr}
 801629e:	b084      	sub	sp, #16
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80162a4:	f7ff ffe2 	bl	801626c <HAL_GetTick>
 80162a8:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162b4:	d004      	beq.n	80162c0 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 80162b6:	4b09      	ldr	r3, [pc, #36]	; (80162dc <HAL_Delay+0x40>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	68fa      	ldr	r2, [r7, #12]
 80162bc:	4413      	add	r3, r2
 80162be:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80162c0:	bf00      	nop
 80162c2:	f7ff ffd3 	bl	801626c <HAL_GetTick>
 80162c6:	4602      	mov	r2, r0
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	1ad3      	subs	r3, r2, r3
 80162cc:	68fa      	ldr	r2, [r7, #12]
 80162ce:	429a      	cmp	r2, r3
 80162d0:	d8f7      	bhi.n	80162c2 <HAL_Delay+0x26>
    {
    }
  }
 80162d2:	bf00      	nop
 80162d4:	3710      	adds	r7, #16
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}
 80162da:	bf00      	nop
 80162dc:	20000080 	.word	0x20000080

080162e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80162e0:	b480      	push	{r7}
 80162e2:	b083      	sub	sp, #12
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
 80162e8:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 80162ea:	bf00      	nop
 80162ec:	370c      	adds	r7, #12
 80162ee:	46bd      	mov	sp, r7
 80162f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f4:	4770      	bx	lr

080162f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80162f6:	b480      	push	{r7}
 80162f8:	b083      	sub	sp, #12
 80162fa:	af00      	add	r7, sp, #0
 80162fc:	6078      	str	r0, [r7, #4]
 80162fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	689b      	ldr	r3, [r3, #8]
 8016304:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8016308:	683b      	ldr	r3, [r7, #0]
 801630a:	431a      	orrs	r2, r3
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	609a      	str	r2, [r3, #8]
}
 8016310:	bf00      	nop
 8016312:	370c      	adds	r7, #12
 8016314:	46bd      	mov	sp, r7
 8016316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631a:	4770      	bx	lr

0801631c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801631c:	b480      	push	{r7}
 801631e:	b083      	sub	sp, #12
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	689b      	ldr	r3, [r3, #8]
 8016328:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 801632c:	4618      	mov	r0, r3
 801632e:	370c      	adds	r7, #12
 8016330:	46bd      	mov	sp, r7
 8016332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016336:	4770      	bx	lr

08016338 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8016338:	b490      	push	{r4, r7}
 801633a:	b084      	sub	sp, #16
 801633c:	af00      	add	r7, sp, #0
 801633e:	60f8      	str	r0, [r7, #12]
 8016340:	60b9      	str	r1, [r7, #8]
 8016342:	607a      	str	r2, [r7, #4]
 8016344:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	3360      	adds	r3, #96	; 0x60
 801634a:	461a      	mov	r2, r3
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	009b      	lsls	r3, r3, #2
 8016350:	4413      	add	r3, r2
 8016352:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8016354:	6822      	ldr	r2, [r4, #0]
 8016356:	4b08      	ldr	r3, [pc, #32]	; (8016378 <LL_ADC_SetOffset+0x40>)
 8016358:	4013      	ands	r3, r2
 801635a:	687a      	ldr	r2, [r7, #4]
 801635c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8016360:	683a      	ldr	r2, [r7, #0]
 8016362:	430a      	orrs	r2, r1
 8016364:	4313      	orrs	r3, r2
 8016366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801636a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 801636c:	bf00      	nop
 801636e:	3710      	adds	r7, #16
 8016370:	46bd      	mov	sp, r7
 8016372:	bc90      	pop	{r4, r7}
 8016374:	4770      	bx	lr
 8016376:	bf00      	nop
 8016378:	03fff000 	.word	0x03fff000

0801637c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 801637c:	b490      	push	{r4, r7}
 801637e:	b082      	sub	sp, #8
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
 8016384:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	3360      	adds	r3, #96	; 0x60
 801638a:	461a      	mov	r2, r3
 801638c:	683b      	ldr	r3, [r7, #0]
 801638e:	009b      	lsls	r3, r3, #2
 8016390:	4413      	add	r3, r2
 8016392:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8016394:	6823      	ldr	r3, [r4, #0]
 8016396:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 801639a:	4618      	mov	r0, r3
 801639c:	3708      	adds	r7, #8
 801639e:	46bd      	mov	sp, r7
 80163a0:	bc90      	pop	{r4, r7}
 80163a2:	4770      	bx	lr

080163a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80163a4:	b490      	push	{r4, r7}
 80163a6:	b084      	sub	sp, #16
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	60f8      	str	r0, [r7, #12]
 80163ac:	60b9      	str	r1, [r7, #8]
 80163ae:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	3360      	adds	r3, #96	; 0x60
 80163b4:	461a      	mov	r2, r3
 80163b6:	68bb      	ldr	r3, [r7, #8]
 80163b8:	009b      	lsls	r3, r3, #2
 80163ba:	4413      	add	r3, r2
 80163bc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80163be:	6823      	ldr	r3, [r4, #0]
 80163c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	4313      	orrs	r3, r2
 80163c8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80163ca:	bf00      	nop
 80163cc:	3710      	adds	r7, #16
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bc90      	pop	{r4, r7}
 80163d2:	4770      	bx	lr

080163d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80163d4:	b480      	push	{r7}
 80163d6:	b083      	sub	sp, #12
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	68db      	ldr	r3, [r3, #12]
 80163e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d101      	bne.n	80163ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80163e8:	2301      	movs	r3, #1
 80163ea:	e000      	b.n	80163ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80163ec:	2300      	movs	r3, #0
}
 80163ee:	4618      	mov	r0, r3
 80163f0:	370c      	adds	r7, #12
 80163f2:	46bd      	mov	sp, r7
 80163f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f8:	4770      	bx	lr

080163fa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80163fa:	b490      	push	{r4, r7}
 80163fc:	b084      	sub	sp, #16
 80163fe:	af00      	add	r7, sp, #0
 8016400:	60f8      	str	r0, [r7, #12]
 8016402:	60b9      	str	r1, [r7, #8]
 8016404:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	3330      	adds	r3, #48	; 0x30
 801640a:	461a      	mov	r2, r3
 801640c:	68bb      	ldr	r3, [r7, #8]
 801640e:	0a1b      	lsrs	r3, r3, #8
 8016410:	009b      	lsls	r3, r3, #2
 8016412:	f003 030c 	and.w	r3, r3, #12
 8016416:	4413      	add	r3, r2
 8016418:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 801641a:	6822      	ldr	r2, [r4, #0]
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	f003 031f 	and.w	r3, r3, #31
 8016422:	211f      	movs	r1, #31
 8016424:	fa01 f303 	lsl.w	r3, r1, r3
 8016428:	43db      	mvns	r3, r3
 801642a:	401a      	ands	r2, r3
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	0e9b      	lsrs	r3, r3, #26
 8016430:	f003 011f 	and.w	r1, r3, #31
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	f003 031f 	and.w	r3, r3, #31
 801643a:	fa01 f303 	lsl.w	r3, r1, r3
 801643e:	4313      	orrs	r3, r2
 8016440:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8016442:	bf00      	nop
 8016444:	3710      	adds	r7, #16
 8016446:	46bd      	mov	sp, r7
 8016448:	bc90      	pop	{r4, r7}
 801644a:	4770      	bx	lr

0801644c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 801644c:	b490      	push	{r4, r7}
 801644e:	b084      	sub	sp, #16
 8016450:	af00      	add	r7, sp, #0
 8016452:	60f8      	str	r0, [r7, #12]
 8016454:	60b9      	str	r1, [r7, #8]
 8016456:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	3314      	adds	r3, #20
 801645c:	461a      	mov	r2, r3
 801645e:	68bb      	ldr	r3, [r7, #8]
 8016460:	0e5b      	lsrs	r3, r3, #25
 8016462:	009b      	lsls	r3, r3, #2
 8016464:	f003 0304 	and.w	r3, r3, #4
 8016468:	4413      	add	r3, r2
 801646a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 801646c:	6822      	ldr	r2, [r4, #0]
 801646e:	68bb      	ldr	r3, [r7, #8]
 8016470:	0d1b      	lsrs	r3, r3, #20
 8016472:	f003 031f 	and.w	r3, r3, #31
 8016476:	2107      	movs	r1, #7
 8016478:	fa01 f303 	lsl.w	r3, r1, r3
 801647c:	43db      	mvns	r3, r3
 801647e:	401a      	ands	r2, r3
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	0d1b      	lsrs	r3, r3, #20
 8016484:	f003 031f 	and.w	r3, r3, #31
 8016488:	6879      	ldr	r1, [r7, #4]
 801648a:	fa01 f303 	lsl.w	r3, r1, r3
 801648e:	4313      	orrs	r3, r2
 8016490:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8016492:	bf00      	nop
 8016494:	3710      	adds	r7, #16
 8016496:	46bd      	mov	sp, r7
 8016498:	bc90      	pop	{r4, r7}
 801649a:	4770      	bx	lr

0801649c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 801649c:	b480      	push	{r7}
 801649e:	b085      	sub	sp, #20
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	60f8      	str	r0, [r7, #12]
 80164a4:	60b9      	str	r1, [r7, #8]
 80164a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80164ae:	68bb      	ldr	r3, [r7, #8]
 80164b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80164b4:	43db      	mvns	r3, r3
 80164b6:	401a      	ands	r2, r3
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f003 0318 	and.w	r3, r3, #24
 80164be:	4908      	ldr	r1, [pc, #32]	; (80164e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80164c0:	40d9      	lsrs	r1, r3
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	400b      	ands	r3, r1
 80164c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80164ca:	431a      	orrs	r2, r3
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80164d2:	bf00      	nop
 80164d4:	3714      	adds	r7, #20
 80164d6:	46bd      	mov	sp, r7
 80164d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164dc:	4770      	bx	lr
 80164de:	bf00      	nop
 80164e0:	0007ffff 	.word	0x0007ffff

080164e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80164e4:	b480      	push	{r7}
 80164e6:	b083      	sub	sp, #12
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	689b      	ldr	r3, [r3, #8]
 80164f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80164f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80164f8:	687a      	ldr	r2, [r7, #4]
 80164fa:	6093      	str	r3, [r2, #8]
}
 80164fc:	bf00      	nop
 80164fe:	370c      	adds	r7, #12
 8016500:	46bd      	mov	sp, r7
 8016502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016506:	4770      	bx	lr

08016508 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8016508:	b480      	push	{r7}
 801650a:	b083      	sub	sp, #12
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	689b      	ldr	r3, [r3, #8]
 8016514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801651c:	d101      	bne.n	8016522 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801651e:	2301      	movs	r3, #1
 8016520:	e000      	b.n	8016524 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8016522:	2300      	movs	r3, #0
}
 8016524:	4618      	mov	r0, r3
 8016526:	370c      	adds	r7, #12
 8016528:	46bd      	mov	sp, r7
 801652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652e:	4770      	bx	lr

08016530 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8016530:	b480      	push	{r7}
 8016532:	b083      	sub	sp, #12
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	689b      	ldr	r3, [r3, #8]
 801653c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8016540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8016544:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 801654c:	bf00      	nop
 801654e:	370c      	adds	r7, #12
 8016550:	46bd      	mov	sp, r7
 8016552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016556:	4770      	bx	lr

08016558 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8016558:	b480      	push	{r7}
 801655a:	b083      	sub	sp, #12
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	689b      	ldr	r3, [r3, #8]
 8016564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801656c:	d101      	bne.n	8016572 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801656e:	2301      	movs	r3, #1
 8016570:	e000      	b.n	8016574 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8016572:	2300      	movs	r3, #0
}
 8016574:	4618      	mov	r0, r3
 8016576:	370c      	adds	r7, #12
 8016578:	46bd      	mov	sp, r7
 801657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657e:	4770      	bx	lr

08016580 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8016580:	b480      	push	{r7}
 8016582:	b083      	sub	sp, #12
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	689b      	ldr	r3, [r3, #8]
 801658c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016590:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8016594:	f043 0201 	orr.w	r2, r3, #1
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 801659c:	bf00      	nop
 801659e:	370c      	adds	r7, #12
 80165a0:	46bd      	mov	sp, r7
 80165a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a6:	4770      	bx	lr

080165a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80165a8:	b480      	push	{r7}
 80165aa:	b083      	sub	sp, #12
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	689b      	ldr	r3, [r3, #8]
 80165b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80165b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80165bc:	f043 0202 	orr.w	r2, r3, #2
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80165c4:	bf00      	nop
 80165c6:	370c      	adds	r7, #12
 80165c8:	46bd      	mov	sp, r7
 80165ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ce:	4770      	bx	lr

080165d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80165d0:	b480      	push	{r7}
 80165d2:	b083      	sub	sp, #12
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	689b      	ldr	r3, [r3, #8]
 80165dc:	f003 0301 	and.w	r3, r3, #1
 80165e0:	2b01      	cmp	r3, #1
 80165e2:	d101      	bne.n	80165e8 <LL_ADC_IsEnabled+0x18>
 80165e4:	2301      	movs	r3, #1
 80165e6:	e000      	b.n	80165ea <LL_ADC_IsEnabled+0x1a>
 80165e8:	2300      	movs	r3, #0
}
 80165ea:	4618      	mov	r0, r3
 80165ec:	370c      	adds	r7, #12
 80165ee:	46bd      	mov	sp, r7
 80165f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f4:	4770      	bx	lr

080165f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80165f6:	b480      	push	{r7}
 80165f8:	b083      	sub	sp, #12
 80165fa:	af00      	add	r7, sp, #0
 80165fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	689b      	ldr	r3, [r3, #8]
 8016602:	f003 0302 	and.w	r3, r3, #2
 8016606:	2b02      	cmp	r3, #2
 8016608:	d101      	bne.n	801660e <LL_ADC_IsDisableOngoing+0x18>
 801660a:	2301      	movs	r3, #1
 801660c:	e000      	b.n	8016610 <LL_ADC_IsDisableOngoing+0x1a>
 801660e:	2300      	movs	r3, #0
}
 8016610:	4618      	mov	r0, r3
 8016612:	370c      	adds	r7, #12
 8016614:	46bd      	mov	sp, r7
 8016616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801661a:	4770      	bx	lr

0801661c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 801661c:	b480      	push	{r7}
 801661e:	b083      	sub	sp, #12
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	689b      	ldr	r3, [r3, #8]
 8016628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801662c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8016630:	f043 0204 	orr.w	r2, r3, #4
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8016638:	bf00      	nop
 801663a:	370c      	adds	r7, #12
 801663c:	46bd      	mov	sp, r7
 801663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016642:	4770      	bx	lr

08016644 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8016644:	b480      	push	{r7}
 8016646:	b083      	sub	sp, #12
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	689b      	ldr	r3, [r3, #8]
 8016650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016654:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8016658:	f043 0210 	orr.w	r2, r3, #16
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8016660:	bf00      	nop
 8016662:	370c      	adds	r7, #12
 8016664:	46bd      	mov	sp, r7
 8016666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666a:	4770      	bx	lr

0801666c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801666c:	b480      	push	{r7}
 801666e:	b083      	sub	sp, #12
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	689b      	ldr	r3, [r3, #8]
 8016678:	f003 0304 	and.w	r3, r3, #4
 801667c:	2b04      	cmp	r3, #4
 801667e:	d101      	bne.n	8016684 <LL_ADC_REG_IsConversionOngoing+0x18>
 8016680:	2301      	movs	r3, #1
 8016682:	e000      	b.n	8016686 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8016684:	2300      	movs	r3, #0
}
 8016686:	4618      	mov	r0, r3
 8016688:	370c      	adds	r7, #12
 801668a:	46bd      	mov	sp, r7
 801668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016690:	4770      	bx	lr

08016692 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8016692:	b480      	push	{r7}
 8016694:	b083      	sub	sp, #12
 8016696:	af00      	add	r7, sp, #0
 8016698:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	689b      	ldr	r3, [r3, #8]
 801669e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80166a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80166a6:	f043 0220 	orr.w	r2, r3, #32
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80166ae:	bf00      	nop
 80166b0:	370c      	adds	r7, #12
 80166b2:	46bd      	mov	sp, r7
 80166b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b8:	4770      	bx	lr

080166ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80166ba:	b480      	push	{r7}
 80166bc:	b083      	sub	sp, #12
 80166be:	af00      	add	r7, sp, #0
 80166c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	689b      	ldr	r3, [r3, #8]
 80166c6:	f003 0308 	and.w	r3, r3, #8
 80166ca:	2b08      	cmp	r3, #8
 80166cc:	d101      	bne.n	80166d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80166ce:	2301      	movs	r3, #1
 80166d0:	e000      	b.n	80166d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80166d2:	2300      	movs	r3, #0
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	370c      	adds	r7, #12
 80166d8:	46bd      	mov	sp, r7
 80166da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166de:	4770      	bx	lr

080166e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b088      	sub	sp, #32
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80166e8:	2300      	movs	r3, #0
 80166ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80166ec:	2300      	movs	r3, #0
 80166ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d101      	bne.n	80166fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80166f6:	2301      	movs	r3, #1
 80166f8:	e12a      	b.n	8016950 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	691b      	ldr	r3, [r3, #16]
 80166fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016704:	2b00      	cmp	r3, #0
 8016706:	d109      	bne.n	801671c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8016708:	6878      	ldr	r0, [r7, #4]
 801670a:	f7fa fc01 	bl	8010f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	2200      	movs	r2, #0
 8016712:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	2200      	movs	r2, #0
 8016718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	4618      	mov	r0, r3
 8016722:	f7ff fef1 	bl	8016508 <LL_ADC_IsDeepPowerDownEnabled>
 8016726:	4603      	mov	r3, r0
 8016728:	2b00      	cmp	r3, #0
 801672a:	d004      	beq.n	8016736 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	4618      	mov	r0, r3
 8016732:	f7ff fed7 	bl	80164e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	4618      	mov	r0, r3
 801673c:	f7ff ff0c 	bl	8016558 <LL_ADC_IsInternalRegulatorEnabled>
 8016740:	4603      	mov	r3, r0
 8016742:	2b00      	cmp	r3, #0
 8016744:	d113      	bne.n	801676e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	4618      	mov	r0, r3
 801674c:	f7ff fef0 	bl	8016530 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8016750:	4b81      	ldr	r3, [pc, #516]	; (8016958 <HAL_ADC_Init+0x278>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	099b      	lsrs	r3, r3, #6
 8016756:	4a81      	ldr	r2, [pc, #516]	; (801695c <HAL_ADC_Init+0x27c>)
 8016758:	fba2 2303 	umull	r2, r3, r2, r3
 801675c:	099b      	lsrs	r3, r3, #6
 801675e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8016760:	e002      	b.n	8016768 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8016762:	68bb      	ldr	r3, [r7, #8]
 8016764:	3b01      	subs	r3, #1
 8016766:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8016768:	68bb      	ldr	r3, [r7, #8]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d1f9      	bne.n	8016762 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	4618      	mov	r0, r3
 8016774:	f7ff fef0 	bl	8016558 <LL_ADC_IsInternalRegulatorEnabled>
 8016778:	4603      	mov	r3, r0
 801677a:	2b00      	cmp	r3, #0
 801677c:	d10d      	bne.n	801679a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016782:	f043 0210 	orr.w	r2, r3, #16
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801678e:	f043 0201 	orr.w	r2, r3, #1
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8016796:	2301      	movs	r3, #1
 8016798:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	4618      	mov	r0, r3
 80167a0:	f7ff ff64 	bl	801666c <LL_ADC_REG_IsConversionOngoing>
 80167a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80167aa:	f003 0310 	and.w	r3, r3, #16
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	f040 80c5 	bne.w	801693e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80167b4:	697b      	ldr	r3, [r7, #20]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	f040 80c1 	bne.w	801693e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80167c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80167c4:	f043 0202 	orr.w	r2, r3, #2
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	4618      	mov	r0, r3
 80167d2:	f7ff fefd 	bl	80165d0 <LL_ADC_IsEnabled>
 80167d6:	4603      	mov	r3, r0
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d10b      	bne.n	80167f4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80167dc:	4860      	ldr	r0, [pc, #384]	; (8016960 <HAL_ADC_Init+0x280>)
 80167de:	f7ff fef7 	bl	80165d0 <LL_ADC_IsEnabled>
 80167e2:	4603      	mov	r3, r0
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d105      	bne.n	80167f4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	685b      	ldr	r3, [r3, #4]
 80167ec:	4619      	mov	r1, r3
 80167ee:	485d      	ldr	r0, [pc, #372]	; (8016964 <HAL_ADC_Init+0x284>)
 80167f0:	f7ff fd76 	bl	80162e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	7e5b      	ldrb	r3, [r3, #25]
 80167f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80167fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8016804:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 801680a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016812:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8016814:	4313      	orrs	r3, r2
 8016816:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801681e:	2b01      	cmp	r3, #1
 8016820:	d106      	bne.n	8016830 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016826:	3b01      	subs	r3, #1
 8016828:	045b      	lsls	r3, r3, #17
 801682a:	69ba      	ldr	r2, [r7, #24]
 801682c:	4313      	orrs	r3, r2
 801682e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016834:	2b00      	cmp	r3, #0
 8016836:	d009      	beq.n	801684c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801683c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016844:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8016846:	69ba      	ldr	r2, [r7, #24]
 8016848:	4313      	orrs	r3, r2
 801684a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	68da      	ldr	r2, [r3, #12]
 8016852:	4b45      	ldr	r3, [pc, #276]	; (8016968 <HAL_ADC_Init+0x288>)
 8016854:	4013      	ands	r3, r2
 8016856:	687a      	ldr	r2, [r7, #4]
 8016858:	6812      	ldr	r2, [r2, #0]
 801685a:	69b9      	ldr	r1, [r7, #24]
 801685c:	430b      	orrs	r3, r1
 801685e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	4618      	mov	r0, r3
 8016866:	f7ff ff01 	bl	801666c <LL_ADC_REG_IsConversionOngoing>
 801686a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	4618      	mov	r0, r3
 8016872:	f7ff ff22 	bl	80166ba <LL_ADC_INJ_IsConversionOngoing>
 8016876:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8016878:	693b      	ldr	r3, [r7, #16]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d13d      	bne.n	80168fa <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d13a      	bne.n	80168fa <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8016888:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016890:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8016892:	4313      	orrs	r3, r2
 8016894:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	68db      	ldr	r3, [r3, #12]
 801689c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80168a0:	f023 0302 	bic.w	r3, r3, #2
 80168a4:	687a      	ldr	r2, [r7, #4]
 80168a6:	6812      	ldr	r2, [r2, #0]
 80168a8:	69b9      	ldr	r1, [r7, #24]
 80168aa:	430b      	orrs	r3, r1
 80168ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80168b4:	2b01      	cmp	r3, #1
 80168b6:	d118      	bne.n	80168ea <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	691b      	ldr	r3, [r3, #16]
 80168be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80168c2:	f023 0304 	bic.w	r3, r3, #4
 80168c6:	687a      	ldr	r2, [r7, #4]
 80168c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80168ca:	687a      	ldr	r2, [r7, #4]
 80168cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80168ce:	4311      	orrs	r1, r2
 80168d0:	687a      	ldr	r2, [r7, #4]
 80168d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80168d4:	4311      	orrs	r1, r2
 80168d6:	687a      	ldr	r2, [r7, #4]
 80168d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80168da:	430a      	orrs	r2, r1
 80168dc:	431a      	orrs	r2, r3
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	f042 0201 	orr.w	r2, r2, #1
 80168e6:	611a      	str	r2, [r3, #16]
 80168e8:	e007      	b.n	80168fa <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	691a      	ldr	r2, [r3, #16]
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	f022 0201 	bic.w	r2, r2, #1
 80168f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	691b      	ldr	r3, [r3, #16]
 80168fe:	2b01      	cmp	r3, #1
 8016900:	d10c      	bne.n	801691c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016908:	f023 010f 	bic.w	r1, r3, #15
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	69db      	ldr	r3, [r3, #28]
 8016910:	1e5a      	subs	r2, r3, #1
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	430a      	orrs	r2, r1
 8016918:	631a      	str	r2, [r3, #48]	; 0x30
 801691a:	e007      	b.n	801692c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	f022 020f 	bic.w	r2, r2, #15
 801692a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016930:	f023 0303 	bic.w	r3, r3, #3
 8016934:	f043 0201 	orr.w	r2, r3, #1
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	655a      	str	r2, [r3, #84]	; 0x54
 801693c:	e007      	b.n	801694e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016942:	f043 0210 	orr.w	r2, r3, #16
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 801694a:	2301      	movs	r3, #1
 801694c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 801694e:	7ffb      	ldrb	r3, [r7, #31]
}
 8016950:	4618      	mov	r0, r3
 8016952:	3720      	adds	r7, #32
 8016954:	46bd      	mov	sp, r7
 8016956:	bd80      	pop	{r7, pc}
 8016958:	20000078 	.word	0x20000078
 801695c:	053e2d63 	.word	0x053e2d63
 8016960:	50040000 	.word	0x50040000
 8016964:	50040300 	.word	0x50040300
 8016968:	fff0c007 	.word	0xfff0c007

0801696c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b086      	sub	sp, #24
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	4618      	mov	r0, r3
 801697e:	f7ff fe75 	bl	801666c <LL_ADC_REG_IsConversionOngoing>
 8016982:	4603      	mov	r3, r0
 8016984:	2b00      	cmp	r3, #0
 8016986:	d167      	bne.n	8016a58 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801698e:	2b01      	cmp	r3, #1
 8016990:	d101      	bne.n	8016996 <HAL_ADC_Start_DMA+0x2a>
 8016992:	2302      	movs	r3, #2
 8016994:	e063      	b.n	8016a5e <HAL_ADC_Start_DMA+0xf2>
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	2201      	movs	r2, #1
 801699a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 801699e:	68f8      	ldr	r0, [r7, #12]
 80169a0:	f000 fcc2 	bl	8017328 <ADC_Enable>
 80169a4:	4603      	mov	r3, r0
 80169a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80169a8:	7dfb      	ldrb	r3, [r7, #23]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d14f      	bne.n	8016a4e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80169b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80169b6:	f023 0301 	bic.w	r3, r3, #1
 80169ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80169c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d006      	beq.n	80169dc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169d2:	f023 0206 	bic.w	r2, r3, #6
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	659a      	str	r2, [r3, #88]	; 0x58
 80169da:	e002      	b.n	80169e2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	2200      	movs	r2, #0
 80169e0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80169e6:	4a20      	ldr	r2, [pc, #128]	; (8016a68 <HAL_ADC_Start_DMA+0xfc>)
 80169e8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80169ee:	4a1f      	ldr	r2, [pc, #124]	; (8016a6c <HAL_ADC_Start_DMA+0x100>)
 80169f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80169f6:	4a1e      	ldr	r2, [pc, #120]	; (8016a70 <HAL_ADC_Start_DMA+0x104>)
 80169f8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	221c      	movs	r2, #28
 8016a00:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	2200      	movs	r2, #0
 8016a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	685a      	ldr	r2, [r3, #4]
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	f042 0210 	orr.w	r2, r2, #16
 8016a18:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	68da      	ldr	r2, [r3, #12]
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	f042 0201 	orr.w	r2, r2, #1
 8016a28:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	3340      	adds	r3, #64	; 0x40
 8016a34:	4619      	mov	r1, r3
 8016a36:	68ba      	ldr	r2, [r7, #8]
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	f001 fa49 	bl	8017ed0 <HAL_DMA_Start_IT>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	4618      	mov	r0, r3
 8016a48:	f7ff fde8 	bl	801661c <LL_ADC_REG_StartConversion>
 8016a4c:	e006      	b.n	8016a5c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	2200      	movs	r2, #0
 8016a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8016a56:	e001      	b.n	8016a5c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8016a58:	2302      	movs	r3, #2
 8016a5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8016a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3718      	adds	r7, #24
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}
 8016a66:	bf00      	nop
 8016a68:	0801748d 	.word	0x0801748d
 8016a6c:	08017565 	.word	0x08017565
 8016a70:	08017581 	.word	0x08017581

08016a74 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b084      	sub	sp, #16
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016a82:	2b01      	cmp	r3, #1
 8016a84:	d101      	bne.n	8016a8a <HAL_ADC_Stop_DMA+0x16>
 8016a86:	2302      	movs	r3, #2
 8016a88:	e051      	b.n	8016b2e <HAL_ADC_Stop_DMA+0xba>
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	2201      	movs	r2, #1
 8016a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8016a92:	2103      	movs	r1, #3
 8016a94:	6878      	ldr	r0, [r7, #4]
 8016a96:	f000 fb93 	bl	80171c0 <ADC_ConversionStop>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8016a9e:	7bfb      	ldrb	r3, [r7, #15]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d13f      	bne.n	8016b24 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	68da      	ldr	r2, [r3, #12]
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	f022 0201 	bic.w	r2, r2, #1
 8016ab2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016ab8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8016abc:	b2db      	uxtb	r3, r3
 8016abe:	2b02      	cmp	r3, #2
 8016ac0:	d10f      	bne.n	8016ae2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	f001 fa7d 	bl	8017fc6 <HAL_DMA_Abort>
 8016acc:	4603      	mov	r3, r0
 8016ace:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8016ad0:	7bfb      	ldrb	r3, [r7, #15]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d005      	beq.n	8016ae2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016ada:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	685a      	ldr	r2, [r3, #4]
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	f022 0210 	bic.w	r2, r2, #16
 8016af0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8016af2:	7bfb      	ldrb	r3, [r7, #15]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d105      	bne.n	8016b04 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8016af8:	6878      	ldr	r0, [r7, #4]
 8016afa:	f000 fc6f 	bl	80173dc <ADC_Disable>
 8016afe:	4603      	mov	r3, r0
 8016b00:	73fb      	strb	r3, [r7, #15]
 8016b02:	e002      	b.n	8016b0a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8016b04:	6878      	ldr	r0, [r7, #4]
 8016b06:	f000 fc69 	bl	80173dc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8016b0a:	7bfb      	ldrb	r3, [r7, #15]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d109      	bne.n	8016b24 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8016b18:	f023 0301 	bic.w	r3, r3, #1
 8016b1c:	f043 0201 	orr.w	r2, r3, #1
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2200      	movs	r2, #0
 8016b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8016b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b2e:	4618      	mov	r0, r3
 8016b30:	3710      	adds	r7, #16
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bd80      	pop	{r7, pc}

08016b36 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8016b36:	b480      	push	{r7}
 8016b38:	b083      	sub	sp, #12
 8016b3a:	af00      	add	r7, sp, #0
 8016b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8016b3e:	bf00      	nop
 8016b40:	370c      	adds	r7, #12
 8016b42:	46bd      	mov	sp, r7
 8016b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b48:	4770      	bx	lr
	...

08016b4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b0a6      	sub	sp, #152	; 0x98
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
 8016b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8016b56:	2300      	movs	r3, #0
 8016b58:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016b66:	2b01      	cmp	r3, #1
 8016b68:	d101      	bne.n	8016b6e <HAL_ADC_ConfigChannel+0x22>
 8016b6a:	2302      	movs	r3, #2
 8016b6c:	e31e      	b.n	80171ac <HAL_ADC_ConfigChannel+0x660>
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	2201      	movs	r2, #1
 8016b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f7ff fd76 	bl	801666c <LL_ADC_REG_IsConversionOngoing>
 8016b80:	4603      	mov	r3, r0
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	f040 8303 	bne.w	801718e <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	6818      	ldr	r0, [r3, #0]
 8016b8c:	683b      	ldr	r3, [r7, #0]
 8016b8e:	6859      	ldr	r1, [r3, #4]
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	461a      	mov	r2, r3
 8016b96:	f7ff fc30 	bl	80163fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7ff fd64 	bl	801666c <LL_ADC_REG_IsConversionOngoing>
 8016ba4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	4618      	mov	r0, r3
 8016bae:	f7ff fd84 	bl	80166ba <LL_ADC_INJ_IsConversionOngoing>
 8016bb2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8016bb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	f040 8148 	bne.w	8016e50 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8016bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	f040 8143 	bne.w	8016e50 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	6818      	ldr	r0, [r3, #0]
 8016bce:	683b      	ldr	r3, [r7, #0]
 8016bd0:	6819      	ldr	r1, [r3, #0]
 8016bd2:	683b      	ldr	r3, [r7, #0]
 8016bd4:	689b      	ldr	r3, [r3, #8]
 8016bd6:	461a      	mov	r2, r3
 8016bd8:	f7ff fc38 	bl	801644c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	695a      	ldr	r2, [r3, #20]
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	68db      	ldr	r3, [r3, #12]
 8016be6:	08db      	lsrs	r3, r3, #3
 8016be8:	f003 0303 	and.w	r3, r3, #3
 8016bec:	005b      	lsls	r3, r3, #1
 8016bee:	fa02 f303 	lsl.w	r3, r2, r3
 8016bf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	691b      	ldr	r3, [r3, #16]
 8016bfa:	2b04      	cmp	r3, #4
 8016bfc:	d00a      	beq.n	8016c14 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	6818      	ldr	r0, [r3, #0]
 8016c02:	683b      	ldr	r3, [r7, #0]
 8016c04:	6919      	ldr	r1, [r3, #16]
 8016c06:	683b      	ldr	r3, [r7, #0]
 8016c08:	681a      	ldr	r2, [r3, #0]
 8016c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016c0e:	f7ff fb93 	bl	8016338 <LL_ADC_SetOffset>
 8016c12:	e11d      	b.n	8016e50 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	2100      	movs	r1, #0
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7ff fbae 	bl	801637c <LL_ADC_GetOffsetChannel>
 8016c20:	4603      	mov	r3, r0
 8016c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d10a      	bne.n	8016c40 <HAL_ADC_ConfigChannel+0xf4>
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	2100      	movs	r1, #0
 8016c30:	4618      	mov	r0, r3
 8016c32:	f7ff fba3 	bl	801637c <LL_ADC_GetOffsetChannel>
 8016c36:	4603      	mov	r3, r0
 8016c38:	0e9b      	lsrs	r3, r3, #26
 8016c3a:	f003 021f 	and.w	r2, r3, #31
 8016c3e:	e012      	b.n	8016c66 <HAL_ADC_ConfigChannel+0x11a>
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	2100      	movs	r1, #0
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7ff fb98 	bl	801637c <LL_ADC_GetOffsetChannel>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016c56:	fa93 f3a3 	rbit	r3, r3
 8016c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8016c5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016c5e:	fab3 f383 	clz	r3, r3
 8016c62:	b2db      	uxtb	r3, r3
 8016c64:	461a      	mov	r2, r3
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d105      	bne.n	8016c7e <HAL_ADC_ConfigChannel+0x132>
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	0e9b      	lsrs	r3, r3, #26
 8016c78:	f003 031f 	and.w	r3, r3, #31
 8016c7c:	e00a      	b.n	8016c94 <HAL_ADC_ConfigChannel+0x148>
 8016c7e:	683b      	ldr	r3, [r7, #0]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016c86:	fa93 f3a3 	rbit	r3, r3
 8016c8a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8016c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016c8e:	fab3 f383 	clz	r3, r3
 8016c92:	b2db      	uxtb	r3, r3
 8016c94:	429a      	cmp	r2, r3
 8016c96:	d106      	bne.n	8016ca6 <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	2100      	movs	r1, #0
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f7ff fb7f 	bl	80163a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	2101      	movs	r1, #1
 8016cac:	4618      	mov	r0, r3
 8016cae:	f7ff fb65 	bl	801637c <LL_ADC_GetOffsetChannel>
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d10a      	bne.n	8016cd2 <HAL_ADC_ConfigChannel+0x186>
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	2101      	movs	r1, #1
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f7ff fb5a 	bl	801637c <LL_ADC_GetOffsetChannel>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	0e9b      	lsrs	r3, r3, #26
 8016ccc:	f003 021f 	and.w	r2, r3, #31
 8016cd0:	e010      	b.n	8016cf4 <HAL_ADC_ConfigChannel+0x1a8>
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	2101      	movs	r1, #1
 8016cd8:	4618      	mov	r0, r3
 8016cda:	f7ff fb4f 	bl	801637c <LL_ADC_GetOffsetChannel>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016ce4:	fa93 f3a3 	rbit	r3, r3
 8016ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8016cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016cec:	fab3 f383 	clz	r3, r3
 8016cf0:	b2db      	uxtb	r3, r3
 8016cf2:	461a      	mov	r2, r3
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d105      	bne.n	8016d0c <HAL_ADC_ConfigChannel+0x1c0>
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	0e9b      	lsrs	r3, r3, #26
 8016d06:	f003 031f 	and.w	r3, r3, #31
 8016d0a:	e00a      	b.n	8016d22 <HAL_ADC_ConfigChannel+0x1d6>
 8016d0c:	683b      	ldr	r3, [r7, #0]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016d14:	fa93 f3a3 	rbit	r3, r3
 8016d18:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8016d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016d1c:	fab3 f383 	clz	r3, r3
 8016d20:	b2db      	uxtb	r3, r3
 8016d22:	429a      	cmp	r2, r3
 8016d24:	d106      	bne.n	8016d34 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	2101      	movs	r1, #1
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7ff fb38 	bl	80163a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	2102      	movs	r1, #2
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7ff fb1e 	bl	801637c <LL_ADC_GetOffsetChannel>
 8016d40:	4603      	mov	r3, r0
 8016d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d10a      	bne.n	8016d60 <HAL_ADC_ConfigChannel+0x214>
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	2102      	movs	r1, #2
 8016d50:	4618      	mov	r0, r3
 8016d52:	f7ff fb13 	bl	801637c <LL_ADC_GetOffsetChannel>
 8016d56:	4603      	mov	r3, r0
 8016d58:	0e9b      	lsrs	r3, r3, #26
 8016d5a:	f003 021f 	and.w	r2, r3, #31
 8016d5e:	e010      	b.n	8016d82 <HAL_ADC_ConfigChannel+0x236>
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	2102      	movs	r1, #2
 8016d66:	4618      	mov	r0, r3
 8016d68:	f7ff fb08 	bl	801637c <LL_ADC_GetOffsetChannel>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016d72:	fa93 f3a3 	rbit	r3, r3
 8016d76:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8016d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d7a:	fab3 f383 	clz	r3, r3
 8016d7e:	b2db      	uxtb	r3, r3
 8016d80:	461a      	mov	r2, r3
 8016d82:	683b      	ldr	r3, [r7, #0]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d105      	bne.n	8016d9a <HAL_ADC_ConfigChannel+0x24e>
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	0e9b      	lsrs	r3, r3, #26
 8016d94:	f003 031f 	and.w	r3, r3, #31
 8016d98:	e00a      	b.n	8016db0 <HAL_ADC_ConfigChannel+0x264>
 8016d9a:	683b      	ldr	r3, [r7, #0]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016da2:	fa93 f3a3 	rbit	r3, r3
 8016da6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8016da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016daa:	fab3 f383 	clz	r3, r3
 8016dae:	b2db      	uxtb	r3, r3
 8016db0:	429a      	cmp	r2, r3
 8016db2:	d106      	bne.n	8016dc2 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	2200      	movs	r2, #0
 8016dba:	2102      	movs	r1, #2
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f7ff faf1 	bl	80163a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	2103      	movs	r1, #3
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7ff fad7 	bl	801637c <LL_ADC_GetOffsetChannel>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d10a      	bne.n	8016dee <HAL_ADC_ConfigChannel+0x2a2>
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	2103      	movs	r1, #3
 8016dde:	4618      	mov	r0, r3
 8016de0:	f7ff facc 	bl	801637c <LL_ADC_GetOffsetChannel>
 8016de4:	4603      	mov	r3, r0
 8016de6:	0e9b      	lsrs	r3, r3, #26
 8016de8:	f003 021f 	and.w	r2, r3, #31
 8016dec:	e010      	b.n	8016e10 <HAL_ADC_ConfigChannel+0x2c4>
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	2103      	movs	r1, #3
 8016df4:	4618      	mov	r0, r3
 8016df6:	f7ff fac1 	bl	801637c <LL_ADC_GetOffsetChannel>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e00:	fa93 f3a3 	rbit	r3, r3
 8016e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8016e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e08:	fab3 f383 	clz	r3, r3
 8016e0c:	b2db      	uxtb	r3, r3
 8016e0e:	461a      	mov	r2, r3
 8016e10:	683b      	ldr	r3, [r7, #0]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d105      	bne.n	8016e28 <HAL_ADC_ConfigChannel+0x2dc>
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	0e9b      	lsrs	r3, r3, #26
 8016e22:	f003 031f 	and.w	r3, r3, #31
 8016e26:	e00a      	b.n	8016e3e <HAL_ADC_ConfigChannel+0x2f2>
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e30:	fa93 f3a3 	rbit	r3, r3
 8016e34:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8016e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e38:	fab3 f383 	clz	r3, r3
 8016e3c:	b2db      	uxtb	r3, r3
 8016e3e:	429a      	cmp	r2, r3
 8016e40:	d106      	bne.n	8016e50 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	2200      	movs	r2, #0
 8016e48:	2103      	movs	r1, #3
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f7ff faaa 	bl	80163a4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	4618      	mov	r0, r3
 8016e56:	f7ff fbbb 	bl	80165d0 <LL_ADC_IsEnabled>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	f040 819f 	bne.w	80171a0 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	6818      	ldr	r0, [r3, #0]
 8016e66:	683b      	ldr	r3, [r7, #0]
 8016e68:	6819      	ldr	r1, [r3, #0]
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	68db      	ldr	r3, [r3, #12]
 8016e6e:	461a      	mov	r2, r3
 8016e70:	f7ff fb14 	bl	801649c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8016e74:	683b      	ldr	r3, [r7, #0]
 8016e76:	68db      	ldr	r3, [r3, #12]
 8016e78:	4aab      	ldr	r2, [pc, #684]	; (8017128 <HAL_ADC_ConfigChannel+0x5dc>)
 8016e7a:	4293      	cmp	r3, r2
 8016e7c:	f040 80fd 	bne.w	801707a <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016e84:	683b      	ldr	r3, [r7, #0]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d10b      	bne.n	8016ea8 <HAL_ADC_ConfigChannel+0x35c>
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	0e9b      	lsrs	r3, r3, #26
 8016e96:	3301      	adds	r3, #1
 8016e98:	f003 031f 	and.w	r3, r3, #31
 8016e9c:	2b09      	cmp	r3, #9
 8016e9e:	bf94      	ite	ls
 8016ea0:	2301      	movls	r3, #1
 8016ea2:	2300      	movhi	r3, #0
 8016ea4:	b2db      	uxtb	r3, r3
 8016ea6:	e012      	b.n	8016ece <HAL_ADC_ConfigChannel+0x382>
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016eb0:	fa93 f3a3 	rbit	r3, r3
 8016eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8016eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016eb8:	fab3 f383 	clz	r3, r3
 8016ebc:	b2db      	uxtb	r3, r3
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	f003 031f 	and.w	r3, r3, #31
 8016ec4:	2b09      	cmp	r3, #9
 8016ec6:	bf94      	ite	ls
 8016ec8:	2301      	movls	r3, #1
 8016eca:	2300      	movhi	r3, #0
 8016ecc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d064      	beq.n	8016f9c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016ed2:	683b      	ldr	r3, [r7, #0]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d107      	bne.n	8016eee <HAL_ADC_ConfigChannel+0x3a2>
 8016ede:	683b      	ldr	r3, [r7, #0]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	0e9b      	lsrs	r3, r3, #26
 8016ee4:	3301      	adds	r3, #1
 8016ee6:	069b      	lsls	r3, r3, #26
 8016ee8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016eec:	e00e      	b.n	8016f0c <HAL_ADC_ConfigChannel+0x3c0>
 8016eee:	683b      	ldr	r3, [r7, #0]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef6:	fa93 f3a3 	rbit	r3, r3
 8016efa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8016efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016efe:	fab3 f383 	clz	r3, r3
 8016f02:	b2db      	uxtb	r3, r3
 8016f04:	3301      	adds	r3, #1
 8016f06:	069b      	lsls	r3, r3, #26
 8016f08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016f0c:	683b      	ldr	r3, [r7, #0]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d109      	bne.n	8016f2c <HAL_ADC_ConfigChannel+0x3e0>
 8016f18:	683b      	ldr	r3, [r7, #0]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	0e9b      	lsrs	r3, r3, #26
 8016f1e:	3301      	adds	r3, #1
 8016f20:	f003 031f 	and.w	r3, r3, #31
 8016f24:	2101      	movs	r1, #1
 8016f26:	fa01 f303 	lsl.w	r3, r1, r3
 8016f2a:	e010      	b.n	8016f4e <HAL_ADC_ConfigChannel+0x402>
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f34:	fa93 f3a3 	rbit	r3, r3
 8016f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8016f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f3c:	fab3 f383 	clz	r3, r3
 8016f40:	b2db      	uxtb	r3, r3
 8016f42:	3301      	adds	r3, #1
 8016f44:	f003 031f 	and.w	r3, r3, #31
 8016f48:	2101      	movs	r1, #1
 8016f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8016f4e:	ea42 0103 	orr.w	r1, r2, r3
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d10a      	bne.n	8016f74 <HAL_ADC_ConfigChannel+0x428>
 8016f5e:	683b      	ldr	r3, [r7, #0]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	0e9b      	lsrs	r3, r3, #26
 8016f64:	3301      	adds	r3, #1
 8016f66:	f003 021f 	and.w	r2, r3, #31
 8016f6a:	4613      	mov	r3, r2
 8016f6c:	005b      	lsls	r3, r3, #1
 8016f6e:	4413      	add	r3, r2
 8016f70:	051b      	lsls	r3, r3, #20
 8016f72:	e011      	b.n	8016f98 <HAL_ADC_ConfigChannel+0x44c>
 8016f74:	683b      	ldr	r3, [r7, #0]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f7c:	fa93 f3a3 	rbit	r3, r3
 8016f80:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8016f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f84:	fab3 f383 	clz	r3, r3
 8016f88:	b2db      	uxtb	r3, r3
 8016f8a:	3301      	adds	r3, #1
 8016f8c:	f003 021f 	and.w	r2, r3, #31
 8016f90:	4613      	mov	r3, r2
 8016f92:	005b      	lsls	r3, r3, #1
 8016f94:	4413      	add	r3, r2
 8016f96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016f98:	430b      	orrs	r3, r1
 8016f9a:	e069      	b.n	8017070 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016f9c:	683b      	ldr	r3, [r7, #0]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d107      	bne.n	8016fb8 <HAL_ADC_ConfigChannel+0x46c>
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	0e9b      	lsrs	r3, r3, #26
 8016fae:	3301      	adds	r3, #1
 8016fb0:	069b      	lsls	r3, r3, #26
 8016fb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016fb6:	e00e      	b.n	8016fd6 <HAL_ADC_ConfigChannel+0x48a>
 8016fb8:	683b      	ldr	r3, [r7, #0]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016fbe:	6a3b      	ldr	r3, [r7, #32]
 8016fc0:	fa93 f3a3 	rbit	r3, r3
 8016fc4:	61fb      	str	r3, [r7, #28]
  return result;
 8016fc6:	69fb      	ldr	r3, [r7, #28]
 8016fc8:	fab3 f383 	clz	r3, r3
 8016fcc:	b2db      	uxtb	r3, r3
 8016fce:	3301      	adds	r3, #1
 8016fd0:	069b      	lsls	r3, r3, #26
 8016fd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016fd6:	683b      	ldr	r3, [r7, #0]
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d109      	bne.n	8016ff6 <HAL_ADC_ConfigChannel+0x4aa>
 8016fe2:	683b      	ldr	r3, [r7, #0]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	0e9b      	lsrs	r3, r3, #26
 8016fe8:	3301      	adds	r3, #1
 8016fea:	f003 031f 	and.w	r3, r3, #31
 8016fee:	2101      	movs	r1, #1
 8016ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8016ff4:	e010      	b.n	8017018 <HAL_ADC_ConfigChannel+0x4cc>
 8016ff6:	683b      	ldr	r3, [r7, #0]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016ffc:	69bb      	ldr	r3, [r7, #24]
 8016ffe:	fa93 f3a3 	rbit	r3, r3
 8017002:	617b      	str	r3, [r7, #20]
  return result;
 8017004:	697b      	ldr	r3, [r7, #20]
 8017006:	fab3 f383 	clz	r3, r3
 801700a:	b2db      	uxtb	r3, r3
 801700c:	3301      	adds	r3, #1
 801700e:	f003 031f 	and.w	r3, r3, #31
 8017012:	2101      	movs	r1, #1
 8017014:	fa01 f303 	lsl.w	r3, r1, r3
 8017018:	ea42 0103 	orr.w	r1, r2, r3
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017024:	2b00      	cmp	r3, #0
 8017026:	d10d      	bne.n	8017044 <HAL_ADC_ConfigChannel+0x4f8>
 8017028:	683b      	ldr	r3, [r7, #0]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	0e9b      	lsrs	r3, r3, #26
 801702e:	3301      	adds	r3, #1
 8017030:	f003 021f 	and.w	r2, r3, #31
 8017034:	4613      	mov	r3, r2
 8017036:	005b      	lsls	r3, r3, #1
 8017038:	4413      	add	r3, r2
 801703a:	3b1e      	subs	r3, #30
 801703c:	051b      	lsls	r3, r3, #20
 801703e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017042:	e014      	b.n	801706e <HAL_ADC_ConfigChannel+0x522>
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801704a:	693b      	ldr	r3, [r7, #16]
 801704c:	fa93 f3a3 	rbit	r3, r3
 8017050:	60fb      	str	r3, [r7, #12]
  return result;
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	fab3 f383 	clz	r3, r3
 8017058:	b2db      	uxtb	r3, r3
 801705a:	3301      	adds	r3, #1
 801705c:	f003 021f 	and.w	r2, r3, #31
 8017060:	4613      	mov	r3, r2
 8017062:	005b      	lsls	r3, r3, #1
 8017064:	4413      	add	r3, r2
 8017066:	3b1e      	subs	r3, #30
 8017068:	051b      	lsls	r3, r3, #20
 801706a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801706e:	430b      	orrs	r3, r1
 8017070:	683a      	ldr	r2, [r7, #0]
 8017072:	6892      	ldr	r2, [r2, #8]
 8017074:	4619      	mov	r1, r3
 8017076:	f7ff f9e9 	bl	801644c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801707a:	683b      	ldr	r3, [r7, #0]
 801707c:	681a      	ldr	r2, [r3, #0]
 801707e:	4b2b      	ldr	r3, [pc, #172]	; (801712c <HAL_ADC_ConfigChannel+0x5e0>)
 8017080:	4013      	ands	r3, r2
 8017082:	2b00      	cmp	r3, #0
 8017084:	f000 808c 	beq.w	80171a0 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8017088:	4829      	ldr	r0, [pc, #164]	; (8017130 <HAL_ADC_ConfigChannel+0x5e4>)
 801708a:	f7ff f947 	bl	801631c <LL_ADC_GetCommonPathInternalCh>
 801708e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8017092:	4828      	ldr	r0, [pc, #160]	; (8017134 <HAL_ADC_ConfigChannel+0x5e8>)
 8017094:	f7ff fa9c 	bl	80165d0 <LL_ADC_IsEnabled>
 8017098:	4603      	mov	r3, r0
 801709a:	2b00      	cmp	r3, #0
 801709c:	d16d      	bne.n	801717a <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801709e:	683b      	ldr	r3, [r7, #0]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	4a25      	ldr	r2, [pc, #148]	; (8017138 <HAL_ADC_ConfigChannel+0x5ec>)
 80170a4:	4293      	cmp	r3, r2
 80170a6:	d126      	bne.n	80170f6 <HAL_ADC_ConfigChannel+0x5aa>
 80170a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80170ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d120      	bne.n	80170f6 <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	4a1e      	ldr	r2, [pc, #120]	; (8017134 <HAL_ADC_ConfigChannel+0x5e8>)
 80170ba:	4293      	cmp	r3, r2
 80170bc:	d170      	bne.n	80171a0 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80170be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80170c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80170c6:	4619      	mov	r1, r3
 80170c8:	4819      	ldr	r0, [pc, #100]	; (8017130 <HAL_ADC_ConfigChannel+0x5e4>)
 80170ca:	f7ff f914 	bl	80162f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80170ce:	4b1b      	ldr	r3, [pc, #108]	; (801713c <HAL_ADC_ConfigChannel+0x5f0>)
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	099b      	lsrs	r3, r3, #6
 80170d4:	4a1a      	ldr	r2, [pc, #104]	; (8017140 <HAL_ADC_ConfigChannel+0x5f4>)
 80170d6:	fba2 2303 	umull	r2, r3, r2, r3
 80170da:	099a      	lsrs	r2, r3, #6
 80170dc:	4613      	mov	r3, r2
 80170de:	005b      	lsls	r3, r3, #1
 80170e0:	4413      	add	r3, r2
 80170e2:	009b      	lsls	r3, r3, #2
 80170e4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80170e6:	e002      	b.n	80170ee <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 80170e8:	68bb      	ldr	r3, [r7, #8]
 80170ea:	3b01      	subs	r3, #1
 80170ec:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d1f9      	bne.n	80170e8 <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80170f4:	e054      	b.n	80171a0 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	4a12      	ldr	r2, [pc, #72]	; (8017144 <HAL_ADC_ConfigChannel+0x5f8>)
 80170fc:	4293      	cmp	r3, r2
 80170fe:	d123      	bne.n	8017148 <HAL_ADC_ConfigChannel+0x5fc>
 8017100:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017108:	2b00      	cmp	r3, #0
 801710a:	d11d      	bne.n	8017148 <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	4a08      	ldr	r2, [pc, #32]	; (8017134 <HAL_ADC_ConfigChannel+0x5e8>)
 8017112:	4293      	cmp	r3, r2
 8017114:	d144      	bne.n	80171a0 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8017116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801711a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801711e:	4619      	mov	r1, r3
 8017120:	4803      	ldr	r0, [pc, #12]	; (8017130 <HAL_ADC_ConfigChannel+0x5e4>)
 8017122:	f7ff f8e8 	bl	80162f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8017126:	e03b      	b.n	80171a0 <HAL_ADC_ConfigChannel+0x654>
 8017128:	407f0000 	.word	0x407f0000
 801712c:	80080000 	.word	0x80080000
 8017130:	50040300 	.word	0x50040300
 8017134:	50040000 	.word	0x50040000
 8017138:	c7520000 	.word	0xc7520000
 801713c:	20000078 	.word	0x20000078
 8017140:	053e2d63 	.word	0x053e2d63
 8017144:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	4a19      	ldr	r2, [pc, #100]	; (80171b4 <HAL_ADC_ConfigChannel+0x668>)
 801714e:	4293      	cmp	r3, r2
 8017150:	d126      	bne.n	80171a0 <HAL_ADC_ConfigChannel+0x654>
 8017152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801715a:	2b00      	cmp	r3, #0
 801715c:	d120      	bne.n	80171a0 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	4a15      	ldr	r2, [pc, #84]	; (80171b8 <HAL_ADC_ConfigChannel+0x66c>)
 8017164:	4293      	cmp	r3, r2
 8017166:	d11b      	bne.n	80171a0 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8017168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801716c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017170:	4619      	mov	r1, r3
 8017172:	4812      	ldr	r0, [pc, #72]	; (80171bc <HAL_ADC_ConfigChannel+0x670>)
 8017174:	f7ff f8bf 	bl	80162f6 <LL_ADC_SetCommonPathInternalCh>
 8017178:	e012      	b.n	80171a0 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801717e:	f043 0220 	orr.w	r2, r3, #32
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8017186:	2301      	movs	r3, #1
 8017188:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801718c:	e008      	b.n	80171a0 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017192:	f043 0220 	orr.w	r2, r3, #32
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 801719a:	2301      	movs	r3, #1
 801719c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	2200      	movs	r2, #0
 80171a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80171a8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80171ac:	4618      	mov	r0, r3
 80171ae:	3798      	adds	r7, #152	; 0x98
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bd80      	pop	{r7, pc}
 80171b4:	80000001 	.word	0x80000001
 80171b8:	50040000 	.word	0x50040000
 80171bc:	50040300 	.word	0x50040300

080171c0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b088      	sub	sp, #32
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80171ca:	2300      	movs	r3, #0
 80171cc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	4618      	mov	r0, r3
 80171d8:	f7ff fa48 	bl	801666c <LL_ADC_REG_IsConversionOngoing>
 80171dc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	4618      	mov	r0, r3
 80171e4:	f7ff fa69 	bl	80166ba <LL_ADC_INJ_IsConversionOngoing>
 80171e8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80171ea:	693b      	ldr	r3, [r7, #16]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d103      	bne.n	80171f8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	f000 8090 	beq.w	8017318 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	68db      	ldr	r3, [r3, #12]
 80171fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017202:	2b00      	cmp	r3, #0
 8017204:	d02a      	beq.n	801725c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	7e5b      	ldrb	r3, [r3, #25]
 801720a:	2b01      	cmp	r3, #1
 801720c:	d126      	bne.n	801725c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	7e1b      	ldrb	r3, [r3, #24]
 8017212:	2b01      	cmp	r3, #1
 8017214:	d122      	bne.n	801725c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8017216:	2301      	movs	r3, #1
 8017218:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801721a:	e014      	b.n	8017246 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801721c:	69fb      	ldr	r3, [r7, #28]
 801721e:	4a41      	ldr	r2, [pc, #260]	; (8017324 <ADC_ConversionStop+0x164>)
 8017220:	4293      	cmp	r3, r2
 8017222:	d90d      	bls.n	8017240 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017228:	f043 0210 	orr.w	r2, r3, #16
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017234:	f043 0201 	orr.w	r2, r3, #1
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 801723c:	2301      	movs	r3, #1
 801723e:	e06c      	b.n	801731a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8017240:	69fb      	ldr	r3, [r7, #28]
 8017242:	3301      	adds	r3, #1
 8017244:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017250:	2b40      	cmp	r3, #64	; 0x40
 8017252:	d1e3      	bne.n	801721c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	2240      	movs	r2, #64	; 0x40
 801725a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801725c:	69bb      	ldr	r3, [r7, #24]
 801725e:	2b02      	cmp	r3, #2
 8017260:	d014      	beq.n	801728c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	4618      	mov	r0, r3
 8017268:	f7ff fa00 	bl	801666c <LL_ADC_REG_IsConversionOngoing>
 801726c:	4603      	mov	r3, r0
 801726e:	2b00      	cmp	r3, #0
 8017270:	d00c      	beq.n	801728c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	4618      	mov	r0, r3
 8017278:	f7ff f9bd 	bl	80165f6 <LL_ADC_IsDisableOngoing>
 801727c:	4603      	mov	r3, r0
 801727e:	2b00      	cmp	r3, #0
 8017280:	d104      	bne.n	801728c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	4618      	mov	r0, r3
 8017288:	f7ff f9dc 	bl	8016644 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801728c:	69bb      	ldr	r3, [r7, #24]
 801728e:	2b01      	cmp	r3, #1
 8017290:	d014      	beq.n	80172bc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	4618      	mov	r0, r3
 8017298:	f7ff fa0f 	bl	80166ba <LL_ADC_INJ_IsConversionOngoing>
 801729c:	4603      	mov	r3, r0
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d00c      	beq.n	80172bc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	4618      	mov	r0, r3
 80172a8:	f7ff f9a5 	bl	80165f6 <LL_ADC_IsDisableOngoing>
 80172ac:	4603      	mov	r3, r0
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d104      	bne.n	80172bc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	4618      	mov	r0, r3
 80172b8:	f7ff f9eb 	bl	8016692 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80172bc:	69bb      	ldr	r3, [r7, #24]
 80172be:	2b02      	cmp	r3, #2
 80172c0:	d004      	beq.n	80172cc <ADC_ConversionStop+0x10c>
 80172c2:	2b03      	cmp	r3, #3
 80172c4:	d105      	bne.n	80172d2 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80172c6:	230c      	movs	r3, #12
 80172c8:	617b      	str	r3, [r7, #20]
        break;
 80172ca:	e005      	b.n	80172d8 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80172cc:	2308      	movs	r3, #8
 80172ce:	617b      	str	r3, [r7, #20]
        break;
 80172d0:	e002      	b.n	80172d8 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80172d2:	2304      	movs	r3, #4
 80172d4:	617b      	str	r3, [r7, #20]
        break;
 80172d6:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80172d8:	f7fe ffc8 	bl	801626c <HAL_GetTick>
 80172dc:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80172de:	e014      	b.n	801730a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80172e0:	f7fe ffc4 	bl	801626c <HAL_GetTick>
 80172e4:	4602      	mov	r2, r0
 80172e6:	68bb      	ldr	r3, [r7, #8]
 80172e8:	1ad3      	subs	r3, r2, r3
 80172ea:	2b05      	cmp	r3, #5
 80172ec:	d90d      	bls.n	801730a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80172f2:	f043 0210 	orr.w	r2, r3, #16
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80172fe:	f043 0201 	orr.w	r2, r3, #1
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8017306:	2301      	movs	r3, #1
 8017308:	e007      	b.n	801731a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	689a      	ldr	r2, [r3, #8]
 8017310:	697b      	ldr	r3, [r7, #20]
 8017312:	4013      	ands	r3, r2
 8017314:	2b00      	cmp	r3, #0
 8017316:	d1e3      	bne.n	80172e0 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8017318:	2300      	movs	r3, #0
}
 801731a:	4618      	mov	r0, r3
 801731c:	3720      	adds	r7, #32
 801731e:	46bd      	mov	sp, r7
 8017320:	bd80      	pop	{r7, pc}
 8017322:	bf00      	nop
 8017324:	a33fffff 	.word	0xa33fffff

08017328 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b084      	sub	sp, #16
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	4618      	mov	r0, r3
 8017336:	f7ff f94b 	bl	80165d0 <LL_ADC_IsEnabled>
 801733a:	4603      	mov	r3, r0
 801733c:	2b00      	cmp	r3, #0
 801733e:	d146      	bne.n	80173ce <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	689a      	ldr	r2, [r3, #8]
 8017346:	4b24      	ldr	r3, [pc, #144]	; (80173d8 <ADC_Enable+0xb0>)
 8017348:	4013      	ands	r3, r2
 801734a:	2b00      	cmp	r3, #0
 801734c:	d00d      	beq.n	801736a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017352:	f043 0210 	orr.w	r2, r3, #16
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801735e:	f043 0201 	orr.w	r2, r3, #1
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8017366:	2301      	movs	r3, #1
 8017368:	e032      	b.n	80173d0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	4618      	mov	r0, r3
 8017370:	f7ff f906 	bl	8016580 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8017374:	f7fe ff7a 	bl	801626c <HAL_GetTick>
 8017378:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801737a:	e021      	b.n	80173c0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	4618      	mov	r0, r3
 8017382:	f7ff f925 	bl	80165d0 <LL_ADC_IsEnabled>
 8017386:	4603      	mov	r3, r0
 8017388:	2b00      	cmp	r3, #0
 801738a:	d104      	bne.n	8017396 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	4618      	mov	r0, r3
 8017392:	f7ff f8f5 	bl	8016580 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8017396:	f7fe ff69 	bl	801626c <HAL_GetTick>
 801739a:	4602      	mov	r2, r0
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	1ad3      	subs	r3, r2, r3
 80173a0:	2b02      	cmp	r3, #2
 80173a2:	d90d      	bls.n	80173c0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173a8:	f043 0210 	orr.w	r2, r3, #16
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80173b4:	f043 0201 	orr.w	r2, r3, #1
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80173bc:	2301      	movs	r3, #1
 80173be:	e007      	b.n	80173d0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	f003 0301 	and.w	r3, r3, #1
 80173ca:	2b01      	cmp	r3, #1
 80173cc:	d1d6      	bne.n	801737c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80173ce:	2300      	movs	r3, #0
}
 80173d0:	4618      	mov	r0, r3
 80173d2:	3710      	adds	r7, #16
 80173d4:	46bd      	mov	sp, r7
 80173d6:	bd80      	pop	{r7, pc}
 80173d8:	8000003f 	.word	0x8000003f

080173dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b084      	sub	sp, #16
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	4618      	mov	r0, r3
 80173ea:	f7ff f904 	bl	80165f6 <LL_ADC_IsDisableOngoing>
 80173ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	4618      	mov	r0, r3
 80173f6:	f7ff f8eb 	bl	80165d0 <LL_ADC_IsEnabled>
 80173fa:	4603      	mov	r3, r0
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d040      	beq.n	8017482 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d13d      	bne.n	8017482 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	689b      	ldr	r3, [r3, #8]
 801740c:	f003 030d 	and.w	r3, r3, #13
 8017410:	2b01      	cmp	r3, #1
 8017412:	d10c      	bne.n	801742e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	4618      	mov	r0, r3
 801741a:	f7ff f8c5 	bl	80165a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	2203      	movs	r2, #3
 8017424:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8017426:	f7fe ff21 	bl	801626c <HAL_GetTick>
 801742a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801742c:	e022      	b.n	8017474 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017432:	f043 0210 	orr.w	r2, r3, #16
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801743e:	f043 0201 	orr.w	r2, r3, #1
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8017446:	2301      	movs	r3, #1
 8017448:	e01c      	b.n	8017484 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801744a:	f7fe ff0f 	bl	801626c <HAL_GetTick>
 801744e:	4602      	mov	r2, r0
 8017450:	68bb      	ldr	r3, [r7, #8]
 8017452:	1ad3      	subs	r3, r2, r3
 8017454:	2b02      	cmp	r3, #2
 8017456:	d90d      	bls.n	8017474 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801745c:	f043 0210 	orr.w	r2, r3, #16
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017468:	f043 0201 	orr.w	r2, r3, #1
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8017470:	2301      	movs	r3, #1
 8017472:	e007      	b.n	8017484 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	689b      	ldr	r3, [r3, #8]
 801747a:	f003 0301 	and.w	r3, r3, #1
 801747e:	2b00      	cmp	r3, #0
 8017480:	d1e3      	bne.n	801744a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8017482:	2300      	movs	r3, #0
}
 8017484:	4618      	mov	r0, r3
 8017486:	3710      	adds	r7, #16
 8017488:	46bd      	mov	sp, r7
 801748a:	bd80      	pop	{r7, pc}

0801748c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b084      	sub	sp, #16
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017498:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801749e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d14b      	bne.n	801753e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80174aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	f003 0308 	and.w	r3, r3, #8
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d021      	beq.n	8017504 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	4618      	mov	r0, r3
 80174c6:	f7fe ff85 	bl	80163d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80174ca:	4603      	mov	r3, r0
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d032      	beq.n	8017536 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	68db      	ldr	r3, [r3, #12]
 80174d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d12b      	bne.n	8017536 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80174e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80174ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d11f      	bne.n	8017536 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80174fa:	f043 0201 	orr.w	r2, r3, #1
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	655a      	str	r2, [r3, #84]	; 0x54
 8017502:	e018      	b.n	8017536 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	68db      	ldr	r3, [r3, #12]
 801750a:	f003 0302 	and.w	r3, r3, #2
 801750e:	2b00      	cmp	r3, #0
 8017510:	d111      	bne.n	8017536 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017526:	2b00      	cmp	r3, #0
 8017528:	d105      	bne.n	8017536 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801752e:	f043 0201 	orr.w	r2, r3, #1
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8017536:	68f8      	ldr	r0, [r7, #12]
 8017538:	f7fa f8ec 	bl	8011714 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801753c:	e00e      	b.n	801755c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017542:	f003 0310 	and.w	r3, r3, #16
 8017546:	2b00      	cmp	r3, #0
 8017548:	d003      	beq.n	8017552 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801754a:	68f8      	ldr	r0, [r7, #12]
 801754c:	f7ff faf3 	bl	8016b36 <HAL_ADC_ErrorCallback>
}
 8017550:	e004      	b.n	801755c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017558:	6878      	ldr	r0, [r7, #4]
 801755a:	4798      	blx	r3
}
 801755c:	bf00      	nop
 801755e:	3710      	adds	r7, #16
 8017560:	46bd      	mov	sp, r7
 8017562:	bd80      	pop	{r7, pc}

08017564 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b084      	sub	sp, #16
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017570:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8017572:	68f8      	ldr	r0, [r7, #12]
 8017574:	f7fa f8e6 	bl	8011744 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8017578:	bf00      	nop
 801757a:	3710      	adds	r7, #16
 801757c:	46bd      	mov	sp, r7
 801757e:	bd80      	pop	{r7, pc}

08017580 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b084      	sub	sp, #16
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801758c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017592:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801759e:	f043 0204 	orr.w	r2, r3, #4
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80175a6:	68f8      	ldr	r0, [r7, #12]
 80175a8:	f7ff fac5 	bl	8016b36 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80175ac:	bf00      	nop
 80175ae:	3710      	adds	r7, #16
 80175b0:	46bd      	mov	sp, r7
 80175b2:	bd80      	pop	{r7, pc}

080175b4 <LL_EXTI_EnableIT_0_31>:
{
 80175b4:	b480      	push	{r7}
 80175b6:	b083      	sub	sp, #12
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80175bc:	4b06      	ldr	r3, [pc, #24]	; (80175d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80175be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80175c2:	4905      	ldr	r1, [pc, #20]	; (80175d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	4313      	orrs	r3, r2
 80175c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80175cc:	bf00      	nop
 80175ce:	370c      	adds	r7, #12
 80175d0:	46bd      	mov	sp, r7
 80175d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d6:	4770      	bx	lr
 80175d8:	58000800 	.word	0x58000800

080175dc <LL_EXTI_DisableIT_0_31>:
{
 80175dc:	b480      	push	{r7}
 80175de:	b083      	sub	sp, #12
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80175e4:	4b07      	ldr	r3, [pc, #28]	; (8017604 <LL_EXTI_DisableIT_0_31+0x28>)
 80175e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	43db      	mvns	r3, r3
 80175ee:	4905      	ldr	r1, [pc, #20]	; (8017604 <LL_EXTI_DisableIT_0_31+0x28>)
 80175f0:	4013      	ands	r3, r2
 80175f2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80175f6:	bf00      	nop
 80175f8:	370c      	adds	r7, #12
 80175fa:	46bd      	mov	sp, r7
 80175fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017600:	4770      	bx	lr
 8017602:	bf00      	nop
 8017604:	58000800 	.word	0x58000800

08017608 <LL_EXTI_EnableEvent_0_31>:
{
 8017608:	b480      	push	{r7}
 801760a:	b083      	sub	sp, #12
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8017610:	4b06      	ldr	r3, [pc, #24]	; (801762c <LL_EXTI_EnableEvent_0_31+0x24>)
 8017612:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8017616:	4905      	ldr	r1, [pc, #20]	; (801762c <LL_EXTI_EnableEvent_0_31+0x24>)
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	4313      	orrs	r3, r2
 801761c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8017620:	bf00      	nop
 8017622:	370c      	adds	r7, #12
 8017624:	46bd      	mov	sp, r7
 8017626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762a:	4770      	bx	lr
 801762c:	58000800 	.word	0x58000800

08017630 <LL_EXTI_DisableEvent_0_31>:
{
 8017630:	b480      	push	{r7}
 8017632:	b083      	sub	sp, #12
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8017638:	4b07      	ldr	r3, [pc, #28]	; (8017658 <LL_EXTI_DisableEvent_0_31+0x28>)
 801763a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	43db      	mvns	r3, r3
 8017642:	4905      	ldr	r1, [pc, #20]	; (8017658 <LL_EXTI_DisableEvent_0_31+0x28>)
 8017644:	4013      	ands	r3, r2
 8017646:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 801764a:	bf00      	nop
 801764c:	370c      	adds	r7, #12
 801764e:	46bd      	mov	sp, r7
 8017650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017654:	4770      	bx	lr
 8017656:	bf00      	nop
 8017658:	58000800 	.word	0x58000800

0801765c <LL_EXTI_EnableRisingTrig_0_31>:
{
 801765c:	b480      	push	{r7}
 801765e:	b083      	sub	sp, #12
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8017664:	4b05      	ldr	r3, [pc, #20]	; (801767c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8017666:	681a      	ldr	r2, [r3, #0]
 8017668:	4904      	ldr	r1, [pc, #16]	; (801767c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	4313      	orrs	r3, r2
 801766e:	600b      	str	r3, [r1, #0]
}
 8017670:	bf00      	nop
 8017672:	370c      	adds	r7, #12
 8017674:	46bd      	mov	sp, r7
 8017676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767a:	4770      	bx	lr
 801767c:	58000800 	.word	0x58000800

08017680 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8017680:	b480      	push	{r7}
 8017682:	b083      	sub	sp, #12
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8017688:	4b06      	ldr	r3, [pc, #24]	; (80176a4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 801768a:	681a      	ldr	r2, [r3, #0]
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	43db      	mvns	r3, r3
 8017690:	4904      	ldr	r1, [pc, #16]	; (80176a4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8017692:	4013      	ands	r3, r2
 8017694:	600b      	str	r3, [r1, #0]

}
 8017696:	bf00      	nop
 8017698:	370c      	adds	r7, #12
 801769a:	46bd      	mov	sp, r7
 801769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a0:	4770      	bx	lr
 80176a2:	bf00      	nop
 80176a4:	58000800 	.word	0x58000800

080176a8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80176a8:	b480      	push	{r7}
 80176aa:	b083      	sub	sp, #12
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80176b0:	4b05      	ldr	r3, [pc, #20]	; (80176c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80176b2:	685a      	ldr	r2, [r3, #4]
 80176b4:	4904      	ldr	r1, [pc, #16]	; (80176c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	4313      	orrs	r3, r2
 80176ba:	604b      	str	r3, [r1, #4]
}
 80176bc:	bf00      	nop
 80176be:	370c      	adds	r7, #12
 80176c0:	46bd      	mov	sp, r7
 80176c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c6:	4770      	bx	lr
 80176c8:	58000800 	.word	0x58000800

080176cc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80176cc:	b480      	push	{r7}
 80176ce:	b083      	sub	sp, #12
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80176d4:	4b06      	ldr	r3, [pc, #24]	; (80176f0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80176d6:	685a      	ldr	r2, [r3, #4]
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	43db      	mvns	r3, r3
 80176dc:	4904      	ldr	r1, [pc, #16]	; (80176f0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80176de:	4013      	ands	r3, r2
 80176e0:	604b      	str	r3, [r1, #4]
}
 80176e2:	bf00      	nop
 80176e4:	370c      	adds	r7, #12
 80176e6:	46bd      	mov	sp, r7
 80176e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ec:	4770      	bx	lr
 80176ee:	bf00      	nop
 80176f0:	58000800 	.word	0x58000800

080176f4 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80176f4:	b480      	push	{r7}
 80176f6:	b083      	sub	sp, #12
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80176fc:	4b07      	ldr	r3, [pc, #28]	; (801771c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80176fe:	68da      	ldr	r2, [r3, #12]
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	4013      	ands	r3, r2
 8017704:	687a      	ldr	r2, [r7, #4]
 8017706:	429a      	cmp	r2, r3
 8017708:	d101      	bne.n	801770e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 801770a:	2301      	movs	r3, #1
 801770c:	e000      	b.n	8017710 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 801770e:	2300      	movs	r3, #0
}
 8017710:	4618      	mov	r0, r3
 8017712:	370c      	adds	r7, #12
 8017714:	46bd      	mov	sp, r7
 8017716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771a:	4770      	bx	lr
 801771c:	58000800 	.word	0x58000800

08017720 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8017720:	b480      	push	{r7}
 8017722:	b083      	sub	sp, #12
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8017728:	4a04      	ldr	r2, [pc, #16]	; (801773c <LL_EXTI_ClearFlag_0_31+0x1c>)
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	60d3      	str	r3, [r2, #12]
}
 801772e:	bf00      	nop
 8017730:	370c      	adds	r7, #12
 8017732:	46bd      	mov	sp, r7
 8017734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017738:	4770      	bx	lr
 801773a:	bf00      	nop
 801773c:	58000800 	.word	0x58000800

08017740 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b088      	sub	sp, #32
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8017748:	2300      	movs	r3, #0
 801774a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 801774c:	2300      	movs	r3, #0
 801774e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d102      	bne.n	801775c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8017756:	2301      	movs	r3, #1
 8017758:	77fb      	strb	r3, [r7, #31]
 801775a:	e0c4      	b.n	80178e6 <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801776a:	d102      	bne.n	8017772 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 801776c:	2301      	movs	r3, #1
 801776e:	77fb      	strb	r3, [r7, #31]
 8017770:	e0b9      	b.n	80178e6 <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8017778:	b2db      	uxtb	r3, r3
 801777a:	2b00      	cmp	r3, #0
 801777c:	d109      	bne.n	8017792 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	2200      	movs	r2, #0
 8017782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	2200      	movs	r2, #0
 801778a:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 801778c:	6878      	ldr	r0, [r7, #4]
 801778e:	f7fa f839 	bl	8011804 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801779c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	68db      	ldr	r3, [r3, #12]
 80177a6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	69db      	ldr	r3, [r3, #28]
 80177ac:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	695b      	ldr	r3, [r3, #20]
 80177b2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	699b      	ldr	r3, [r3, #24]
 80177b8:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 80177be:	4313      	orrs	r3, r2
 80177c0:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	681a      	ldr	r2, [r3, #0]
 80177c8:	4b49      	ldr	r3, [pc, #292]	; (80178f0 <HAL_COMP_Init+0x1b0>)
 80177ca:	4013      	ands	r3, r2
 80177cc:	687a      	ldr	r2, [r7, #4]
 80177ce:	6812      	ldr	r2, [r2, #0]
 80177d0:	6979      	ldr	r1, [r7, #20]
 80177d2:	430b      	orrs	r3, r1
 80177d4:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	685b      	ldr	r3, [r3, #4]
 80177da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80177de:	d106      	bne.n	80177ee <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80177e0:	4b44      	ldr	r3, [pc, #272]	; (80178f4 <HAL_COMP_Init+0x1b4>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	4a43      	ldr	r2, [pc, #268]	; (80178f4 <HAL_COMP_Init+0x1b4>)
 80177e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80177ea:	6013      	str	r3, [r2, #0]
 80177ec:	e005      	b.n	80177fa <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80177ee:	4b41      	ldr	r3, [pc, #260]	; (80178f4 <HAL_COMP_Init+0x1b4>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	4a40      	ldr	r2, [pc, #256]	; (80178f4 <HAL_COMP_Init+0x1b4>)
 80177f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80177f8:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017804:	2b00      	cmp	r3, #0
 8017806:	d015      	beq.n	8017834 <HAL_COMP_Init+0xf4>
 8017808:	69bb      	ldr	r3, [r7, #24]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d112      	bne.n	8017834 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 801780e:	4b3a      	ldr	r3, [pc, #232]	; (80178f8 <HAL_COMP_Init+0x1b8>)
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	099b      	lsrs	r3, r3, #6
 8017814:	4a39      	ldr	r2, [pc, #228]	; (80178fc <HAL_COMP_Init+0x1bc>)
 8017816:	fba2 2303 	umull	r2, r3, r2, r3
 801781a:	099a      	lsrs	r2, r3, #6
 801781c:	4613      	mov	r3, r2
 801781e:	009b      	lsls	r3, r3, #2
 8017820:	4413      	add	r3, r2
 8017822:	009b      	lsls	r3, r3, #2
 8017824:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8017826:	e002      	b.n	801782e <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	3b01      	subs	r3, #1
 801782c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d1f9      	bne.n	8017828 <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	4a31      	ldr	r2, [pc, #196]	; (8017900 <HAL_COMP_Init+0x1c0>)
 801783a:	4293      	cmp	r3, r2
 801783c:	d102      	bne.n	8017844 <HAL_COMP_Init+0x104>
 801783e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8017842:	e001      	b.n	8017848 <HAL_COMP_Init+0x108>
 8017844:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017848:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	6a1b      	ldr	r3, [r3, #32]
 801784e:	f003 0303 	and.w	r3, r3, #3
 8017852:	2b00      	cmp	r3, #0
 8017854:	d037      	beq.n	80178c6 <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	6a1b      	ldr	r3, [r3, #32]
 801785a:	f003 0310 	and.w	r3, r3, #16
 801785e:	2b00      	cmp	r3, #0
 8017860:	d003      	beq.n	801786a <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8017862:	6938      	ldr	r0, [r7, #16]
 8017864:	f7ff fefa 	bl	801765c <LL_EXTI_EnableRisingTrig_0_31>
 8017868:	e002      	b.n	8017870 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 801786a:	6938      	ldr	r0, [r7, #16]
 801786c:	f7ff ff08 	bl	8017680 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6a1b      	ldr	r3, [r3, #32]
 8017874:	f003 0320 	and.w	r3, r3, #32
 8017878:	2b00      	cmp	r3, #0
 801787a:	d003      	beq.n	8017884 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 801787c:	6938      	ldr	r0, [r7, #16]
 801787e:	f7ff ff13 	bl	80176a8 <LL_EXTI_EnableFallingTrig_0_31>
 8017882:	e002      	b.n	801788a <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8017884:	6938      	ldr	r0, [r7, #16]
 8017886:	f7ff ff21 	bl	80176cc <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 801788a:	6938      	ldr	r0, [r7, #16]
 801788c:	f7ff ff48 	bl	8017720 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	6a1b      	ldr	r3, [r3, #32]
 8017894:	f003 0302 	and.w	r3, r3, #2
 8017898:	2b00      	cmp	r3, #0
 801789a:	d003      	beq.n	80178a4 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 801789c:	6938      	ldr	r0, [r7, #16]
 801789e:	f7ff feb3 	bl	8017608 <LL_EXTI_EnableEvent_0_31>
 80178a2:	e002      	b.n	80178aa <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80178a4:	6938      	ldr	r0, [r7, #16]
 80178a6:	f7ff fec3 	bl	8017630 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	6a1b      	ldr	r3, [r3, #32]
 80178ae:	f003 0301 	and.w	r3, r3, #1
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d003      	beq.n	80178be <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80178b6:	6938      	ldr	r0, [r7, #16]
 80178b8:	f7ff fe7c 	bl	80175b4 <LL_EXTI_EnableIT_0_31>
 80178bc:	e009      	b.n	80178d2 <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80178be:	6938      	ldr	r0, [r7, #16]
 80178c0:	f7ff fe8c 	bl	80175dc <LL_EXTI_DisableIT_0_31>
 80178c4:	e005      	b.n	80178d2 <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80178c6:	6938      	ldr	r0, [r7, #16]
 80178c8:	f7ff feb2 	bl	8017630 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80178cc:	6938      	ldr	r0, [r7, #16]
 80178ce:	f7ff fe85 	bl	80175dc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80178d8:	b2db      	uxtb	r3, r3
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d103      	bne.n	80178e6 <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	2201      	movs	r2, #1
 80178e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80178e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80178e8:	4618      	mov	r0, r3
 80178ea:	3720      	adds	r7, #32
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}
 80178f0:	f9207c03 	.word	0xf9207c03
 80178f4:	40010204 	.word	0x40010204
 80178f8:	20000078 	.word	0x20000078
 80178fc:	053e2d63 	.word	0x053e2d63
 8017900:	40010200 	.word	0x40010200

08017904 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8017904:	b480      	push	{r7}
 8017906:	b085      	sub	sp, #20
 8017908:	af00      	add	r7, sp, #0
 801790a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 801790c:	2300      	movs	r3, #0
 801790e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8017910:	2300      	movs	r3, #0
 8017912:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d102      	bne.n	8017920 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 801791a:	2301      	movs	r3, #1
 801791c:	73fb      	strb	r3, [r7, #15]
 801791e:	e02f      	b.n	8017980 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801792a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801792e:	d102      	bne.n	8017936 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8017930:	2301      	movs	r3, #1
 8017932:	73fb      	strb	r3, [r7, #15]
 8017934:	e024      	b.n	8017980 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801793c:	b2db      	uxtb	r3, r3
 801793e:	2b01      	cmp	r3, #1
 8017940:	d11c      	bne.n	801797c <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	681a      	ldr	r2, [r3, #0]
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	f042 0201 	orr.w	r2, r2, #1
 8017950:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	2202      	movs	r2, #2
 8017956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 801795a:	4b0d      	ldr	r3, [pc, #52]	; (8017990 <HAL_COMP_Start+0x8c>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	099b      	lsrs	r3, r3, #6
 8017960:	4a0c      	ldr	r2, [pc, #48]	; (8017994 <HAL_COMP_Start+0x90>)
 8017962:	fba2 2303 	umull	r2, r3, r2, r3
 8017966:	099b      	lsrs	r3, r3, #6
 8017968:	00db      	lsls	r3, r3, #3
 801796a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 801796c:	e002      	b.n	8017974 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 801796e:	68bb      	ldr	r3, [r7, #8]
 8017970:	3b01      	subs	r3, #1
 8017972:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8017974:	68bb      	ldr	r3, [r7, #8]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d1f9      	bne.n	801796e <HAL_COMP_Start+0x6a>
 801797a:	e001      	b.n	8017980 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 801797c:	2301      	movs	r3, #1
 801797e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8017980:	7bfb      	ldrb	r3, [r7, #15]
}
 8017982:	4618      	mov	r0, r3
 8017984:	3714      	adds	r7, #20
 8017986:	46bd      	mov	sp, r7
 8017988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801798c:	4770      	bx	lr
 801798e:	bf00      	nop
 8017990:	20000078 	.word	0x20000078
 8017994:	053e2d63 	.word	0x053e2d63

08017998 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8017998:	b480      	push	{r7}
 801799a:	b085      	sub	sp, #20
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80179a0:	2300      	movs	r3, #0
 80179a2:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d102      	bne.n	80179b0 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 80179aa:	2301      	movs	r3, #1
 80179ac:	73fb      	strb	r3, [r7, #15]
 80179ae:	e01f      	b.n	80179f0 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80179ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80179be:	d102      	bne.n	80179c6 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 80179c0:	2301      	movs	r3, #1
 80179c2:	73fb      	strb	r3, [r7, #15]
 80179c4:	e014      	b.n	80179f0 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80179cc:	b2db      	uxtb	r3, r3
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d00c      	beq.n	80179ec <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	681a      	ldr	r2, [r3, #0]
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	f022 0201 	bic.w	r2, r2, #1
 80179e0:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	2201      	movs	r2, #1
 80179e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80179ea:	e001      	b.n	80179f0 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 80179ec:	2301      	movs	r3, #1
 80179ee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80179f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80179f2:	4618      	mov	r0, r3
 80179f4:	3714      	adds	r7, #20
 80179f6:	46bd      	mov	sp, r7
 80179f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fc:	4770      	bx	lr
	...

08017a00 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b084      	sub	sp, #16
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	4a11      	ldr	r2, [pc, #68]	; (8017a54 <HAL_COMP_IRQHandler+0x54>)
 8017a0e:	4293      	cmp	r3, r2
 8017a10:	d102      	bne.n	8017a18 <HAL_COMP_IRQHandler+0x18>
 8017a12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8017a16:	e001      	b.n	8017a1c <HAL_COMP_IRQHandler+0x1c>
 8017a18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017a1c:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8017a1e:	68f8      	ldr	r0, [r7, #12]
 8017a20:	f7ff fe68 	bl	80176f4 <LL_EXTI_IsActiveFlag_0_31>
 8017a24:	4603      	mov	r3, r0
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d010      	beq.n	8017a4c <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8017a2a:	4b0b      	ldr	r3, [pc, #44]	; (8017a58 <HAL_COMP_IRQHandler+0x58>)
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d004      	beq.n	8017a40 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8017a36:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8017a3a:	f7ff fe71 	bl	8017720 <LL_EXTI_ClearFlag_0_31>
 8017a3e:	e002      	b.n	8017a46 <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8017a40:	68f8      	ldr	r0, [r7, #12]
 8017a42:	f7ff fe6d 	bl	8017720 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8017a46:	6878      	ldr	r0, [r7, #4]
 8017a48:	f7fd ff72 	bl	8015930 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8017a4c:	bf00      	nop
 8017a4e:	3710      	adds	r7, #16
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bd80      	pop	{r7, pc}
 8017a54:	40010200 	.word	0x40010200
 8017a58:	40010204 	.word	0x40010204

08017a5c <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8017a5c:	b480      	push	{r7}
 8017a5e:	b083      	sub	sp, #12
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	0f9b      	lsrs	r3, r3, #30
 8017a6c:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8017a70:	4618      	mov	r0, r3
 8017a72:	370c      	adds	r7, #12
 8017a74:	46bd      	mov	sp, r7
 8017a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a7a:	4770      	bx	lr

08017a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017a7c:	b480      	push	{r7}
 8017a7e:	b085      	sub	sp, #20
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	f003 0307 	and.w	r3, r3, #7
 8017a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8017a8c:	4b0c      	ldr	r3, [pc, #48]	; (8017ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8017a8e:	68db      	ldr	r3, [r3, #12]
 8017a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017a92:	68ba      	ldr	r2, [r7, #8]
 8017a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8017a98:	4013      	ands	r3, r2
 8017a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017aa0:	68bb      	ldr	r3, [r7, #8]
 8017aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8017aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8017aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8017aae:	4a04      	ldr	r2, [pc, #16]	; (8017ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8017ab0:	68bb      	ldr	r3, [r7, #8]
 8017ab2:	60d3      	str	r3, [r2, #12]
}
 8017ab4:	bf00      	nop
 8017ab6:	3714      	adds	r7, #20
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017abe:	4770      	bx	lr
 8017ac0:	e000ed00 	.word	0xe000ed00

08017ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8017ac4:	b480      	push	{r7}
 8017ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017ac8:	4b04      	ldr	r3, [pc, #16]	; (8017adc <__NVIC_GetPriorityGrouping+0x18>)
 8017aca:	68db      	ldr	r3, [r3, #12]
 8017acc:	0a1b      	lsrs	r3, r3, #8
 8017ace:	f003 0307 	and.w	r3, r3, #7
}
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ada:	4770      	bx	lr
 8017adc:	e000ed00 	.word	0xe000ed00

08017ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017ae0:	b480      	push	{r7}
 8017ae2:	b083      	sub	sp, #12
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	db0b      	blt.n	8017b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017af2:	79fb      	ldrb	r3, [r7, #7]
 8017af4:	f003 021f 	and.w	r2, r3, #31
 8017af8:	4907      	ldr	r1, [pc, #28]	; (8017b18 <__NVIC_EnableIRQ+0x38>)
 8017afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017afe:	095b      	lsrs	r3, r3, #5
 8017b00:	2001      	movs	r0, #1
 8017b02:	fa00 f202 	lsl.w	r2, r0, r2
 8017b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8017b0a:	bf00      	nop
 8017b0c:	370c      	adds	r7, #12
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b14:	4770      	bx	lr
 8017b16:	bf00      	nop
 8017b18:	e000e100 	.word	0xe000e100

08017b1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8017b1c:	b480      	push	{r7}
 8017b1e:	b083      	sub	sp, #12
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	4603      	mov	r3, r0
 8017b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	db10      	blt.n	8017b50 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017b2e:	79fb      	ldrb	r3, [r7, #7]
 8017b30:	f003 021f 	and.w	r2, r3, #31
 8017b34:	4909      	ldr	r1, [pc, #36]	; (8017b5c <__NVIC_DisableIRQ+0x40>)
 8017b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b3a:	095b      	lsrs	r3, r3, #5
 8017b3c:	2001      	movs	r0, #1
 8017b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8017b42:	3320      	adds	r3, #32
 8017b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017b48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017b4c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8017b50:	bf00      	nop
 8017b52:	370c      	adds	r7, #12
 8017b54:	46bd      	mov	sp, r7
 8017b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5a:	4770      	bx	lr
 8017b5c:	e000e100 	.word	0xe000e100

08017b60 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8017b60:	b480      	push	{r7}
 8017b62:	b083      	sub	sp, #12
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	4603      	mov	r3, r0
 8017b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	db0c      	blt.n	8017b8c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017b72:	79fb      	ldrb	r3, [r7, #7]
 8017b74:	f003 021f 	and.w	r2, r3, #31
 8017b78:	4907      	ldr	r1, [pc, #28]	; (8017b98 <__NVIC_SetPendingIRQ+0x38>)
 8017b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b7e:	095b      	lsrs	r3, r3, #5
 8017b80:	2001      	movs	r0, #1
 8017b82:	fa00 f202 	lsl.w	r2, r0, r2
 8017b86:	3340      	adds	r3, #64	; 0x40
 8017b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8017b8c:	bf00      	nop
 8017b8e:	370c      	adds	r7, #12
 8017b90:	46bd      	mov	sp, r7
 8017b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b96:	4770      	bx	lr
 8017b98:	e000e100 	.word	0xe000e100

08017b9c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8017b9c:	b480      	push	{r7}
 8017b9e:	b083      	sub	sp, #12
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	db0c      	blt.n	8017bc8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017bae:	79fb      	ldrb	r3, [r7, #7]
 8017bb0:	f003 021f 	and.w	r2, r3, #31
 8017bb4:	4907      	ldr	r1, [pc, #28]	; (8017bd4 <__NVIC_ClearPendingIRQ+0x38>)
 8017bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017bba:	095b      	lsrs	r3, r3, #5
 8017bbc:	2001      	movs	r0, #1
 8017bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8017bc2:	3360      	adds	r3, #96	; 0x60
 8017bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8017bc8:	bf00      	nop
 8017bca:	370c      	adds	r7, #12
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd2:	4770      	bx	lr
 8017bd4:	e000e100 	.word	0xe000e100

08017bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8017bd8:	b480      	push	{r7}
 8017bda:	b083      	sub	sp, #12
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	4603      	mov	r3, r0
 8017be0:	6039      	str	r1, [r7, #0]
 8017be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	db0a      	blt.n	8017c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017bec:	683b      	ldr	r3, [r7, #0]
 8017bee:	b2da      	uxtb	r2, r3
 8017bf0:	490c      	ldr	r1, [pc, #48]	; (8017c24 <__NVIC_SetPriority+0x4c>)
 8017bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017bf6:	0112      	lsls	r2, r2, #4
 8017bf8:	b2d2      	uxtb	r2, r2
 8017bfa:	440b      	add	r3, r1
 8017bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8017c00:	e00a      	b.n	8017c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017c02:	683b      	ldr	r3, [r7, #0]
 8017c04:	b2da      	uxtb	r2, r3
 8017c06:	4908      	ldr	r1, [pc, #32]	; (8017c28 <__NVIC_SetPriority+0x50>)
 8017c08:	79fb      	ldrb	r3, [r7, #7]
 8017c0a:	f003 030f 	and.w	r3, r3, #15
 8017c0e:	3b04      	subs	r3, #4
 8017c10:	0112      	lsls	r2, r2, #4
 8017c12:	b2d2      	uxtb	r2, r2
 8017c14:	440b      	add	r3, r1
 8017c16:	761a      	strb	r2, [r3, #24]
}
 8017c18:	bf00      	nop
 8017c1a:	370c      	adds	r7, #12
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c22:	4770      	bx	lr
 8017c24:	e000e100 	.word	0xe000e100
 8017c28:	e000ed00 	.word	0xe000ed00

08017c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8017c2c:	b480      	push	{r7}
 8017c2e:	b089      	sub	sp, #36	; 0x24
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	60f8      	str	r0, [r7, #12]
 8017c34:	60b9      	str	r1, [r7, #8]
 8017c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	f003 0307 	and.w	r3, r3, #7
 8017c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8017c40:	69fb      	ldr	r3, [r7, #28]
 8017c42:	f1c3 0307 	rsb	r3, r3, #7
 8017c46:	2b04      	cmp	r3, #4
 8017c48:	bf28      	it	cs
 8017c4a:	2304      	movcs	r3, #4
 8017c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017c4e:	69fb      	ldr	r3, [r7, #28]
 8017c50:	3304      	adds	r3, #4
 8017c52:	2b06      	cmp	r3, #6
 8017c54:	d902      	bls.n	8017c5c <NVIC_EncodePriority+0x30>
 8017c56:	69fb      	ldr	r3, [r7, #28]
 8017c58:	3b03      	subs	r3, #3
 8017c5a:	e000      	b.n	8017c5e <NVIC_EncodePriority+0x32>
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017c60:	f04f 32ff 	mov.w	r2, #4294967295
 8017c64:	69bb      	ldr	r3, [r7, #24]
 8017c66:	fa02 f303 	lsl.w	r3, r2, r3
 8017c6a:	43da      	mvns	r2, r3
 8017c6c:	68bb      	ldr	r3, [r7, #8]
 8017c6e:	401a      	ands	r2, r3
 8017c70:	697b      	ldr	r3, [r7, #20]
 8017c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8017c74:	f04f 31ff 	mov.w	r1, #4294967295
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8017c7e:	43d9      	mvns	r1, r3
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017c84:	4313      	orrs	r3, r2
         );
}
 8017c86:	4618      	mov	r0, r3
 8017c88:	3724      	adds	r7, #36	; 0x24
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c90:	4770      	bx	lr
	...

08017c94 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8017c94:	b480      	push	{r7}
 8017c96:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8017c98:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8017c9c:	4b05      	ldr	r3, [pc, #20]	; (8017cb4 <__NVIC_SystemReset+0x20>)
 8017c9e:	68db      	ldr	r3, [r3, #12]
 8017ca0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8017ca4:	4903      	ldr	r1, [pc, #12]	; (8017cb4 <__NVIC_SystemReset+0x20>)
 8017ca6:	4b04      	ldr	r3, [pc, #16]	; (8017cb8 <__NVIC_SystemReset+0x24>)
 8017ca8:	4313      	orrs	r3, r2
 8017caa:	60cb      	str	r3, [r1, #12]
 8017cac:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8017cb0:	bf00      	nop
 8017cb2:	e7fd      	b.n	8017cb0 <__NVIC_SystemReset+0x1c>
 8017cb4:	e000ed00 	.word	0xe000ed00
 8017cb8:	05fa0004 	.word	0x05fa0004

08017cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b082      	sub	sp, #8
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8017cc4:	6878      	ldr	r0, [r7, #4]
 8017cc6:	f7ff fed9 	bl	8017a7c <__NVIC_SetPriorityGrouping>
}
 8017cca:	bf00      	nop
 8017ccc:	3708      	adds	r7, #8
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	bd80      	pop	{r7, pc}

08017cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8017cd2:	b580      	push	{r7, lr}
 8017cd4:	b086      	sub	sp, #24
 8017cd6:	af00      	add	r7, sp, #0
 8017cd8:	4603      	mov	r3, r0
 8017cda:	60b9      	str	r1, [r7, #8]
 8017cdc:	607a      	str	r2, [r7, #4]
 8017cde:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8017ce0:	f7ff fef0 	bl	8017ac4 <__NVIC_GetPriorityGrouping>
 8017ce4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8017ce6:	687a      	ldr	r2, [r7, #4]
 8017ce8:	68b9      	ldr	r1, [r7, #8]
 8017cea:	6978      	ldr	r0, [r7, #20]
 8017cec:	f7ff ff9e 	bl	8017c2c <NVIC_EncodePriority>
 8017cf0:	4602      	mov	r2, r0
 8017cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017cf6:	4611      	mov	r1, r2
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	f7ff ff6d 	bl	8017bd8 <__NVIC_SetPriority>
}
 8017cfe:	bf00      	nop
 8017d00:	3718      	adds	r7, #24
 8017d02:	46bd      	mov	sp, r7
 8017d04:	bd80      	pop	{r7, pc}

08017d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017d06:	b580      	push	{r7, lr}
 8017d08:	b082      	sub	sp, #8
 8017d0a:	af00      	add	r7, sp, #0
 8017d0c:	4603      	mov	r3, r0
 8017d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8017d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d14:	4618      	mov	r0, r3
 8017d16:	f7ff fee3 	bl	8017ae0 <__NVIC_EnableIRQ>
}
 8017d1a:	bf00      	nop
 8017d1c:	3708      	adds	r7, #8
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bd80      	pop	{r7, pc}

08017d22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8017d22:	b580      	push	{r7, lr}
 8017d24:	b082      	sub	sp, #8
 8017d26:	af00      	add	r7, sp, #0
 8017d28:	4603      	mov	r3, r0
 8017d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8017d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7ff fef3 	bl	8017b1c <__NVIC_DisableIRQ>
}
 8017d36:	bf00      	nop
 8017d38:	3708      	adds	r7, #8
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	bd80      	pop	{r7, pc}

08017d3e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8017d3e:	b580      	push	{r7, lr}
 8017d40:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8017d42:	f7ff ffa7 	bl	8017c94 <__NVIC_SystemReset>

08017d46 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8017d46:	b580      	push	{r7, lr}
 8017d48:	b082      	sub	sp, #8
 8017d4a:	af00      	add	r7, sp, #0
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8017d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d54:	4618      	mov	r0, r3
 8017d56:	f7ff ff03 	bl	8017b60 <__NVIC_SetPendingIRQ>
}
 8017d5a:	bf00      	nop
 8017d5c:	3708      	adds	r7, #8
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	bd80      	pop	{r7, pc}

08017d62 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8017d62:	b580      	push	{r7, lr}
 8017d64:	b082      	sub	sp, #8
 8017d66:	af00      	add	r7, sp, #0
 8017d68:	4603      	mov	r3, r0
 8017d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8017d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d70:	4618      	mov	r0, r3
 8017d72:	f7ff ff13 	bl	8017b9c <__NVIC_ClearPendingIRQ>
}
 8017d76:	bf00      	nop
 8017d78:	3708      	adds	r7, #8
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	bd80      	pop	{r7, pc}
	...

08017d80 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b084      	sub	sp, #16
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d101      	bne.n	8017d92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8017d8e:	2301      	movs	r3, #1
 8017d90:	e08d      	b.n	8017eae <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	461a      	mov	r2, r3
 8017d98:	4b47      	ldr	r3, [pc, #284]	; (8017eb8 <HAL_DMA_Init+0x138>)
 8017d9a:	429a      	cmp	r2, r3
 8017d9c:	d80f      	bhi.n	8017dbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	461a      	mov	r2, r3
 8017da4:	4b45      	ldr	r3, [pc, #276]	; (8017ebc <HAL_DMA_Init+0x13c>)
 8017da6:	4413      	add	r3, r2
 8017da8:	4a45      	ldr	r2, [pc, #276]	; (8017ec0 <HAL_DMA_Init+0x140>)
 8017daa:	fba2 2303 	umull	r2, r3, r2, r3
 8017dae:	091b      	lsrs	r3, r3, #4
 8017db0:	009a      	lsls	r2, r3, #2
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	4a42      	ldr	r2, [pc, #264]	; (8017ec4 <HAL_DMA_Init+0x144>)
 8017dba:	641a      	str	r2, [r3, #64]	; 0x40
 8017dbc:	e00e      	b.n	8017ddc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	461a      	mov	r2, r3
 8017dc4:	4b40      	ldr	r3, [pc, #256]	; (8017ec8 <HAL_DMA_Init+0x148>)
 8017dc6:	4413      	add	r3, r2
 8017dc8:	4a3d      	ldr	r2, [pc, #244]	; (8017ec0 <HAL_DMA_Init+0x140>)
 8017dca:	fba2 2303 	umull	r2, r3, r2, r3
 8017dce:	091b      	lsrs	r3, r3, #4
 8017dd0:	009a      	lsls	r2, r3, #2
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	4a3c      	ldr	r2, [pc, #240]	; (8017ecc <HAL_DMA_Init+0x14c>)
 8017dda:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	2202      	movs	r2, #2
 8017de0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8017df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017df6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8017e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	691b      	ldr	r3, [r3, #16]
 8017e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	699b      	ldr	r3, [r3, #24]
 8017e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	6a1b      	ldr	r3, [r3, #32]
 8017e1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8017e20:	68fa      	ldr	r2, [r7, #12]
 8017e22:	4313      	orrs	r3, r2
 8017e24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	68fa      	ldr	r2, [r7, #12]
 8017e2c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8017e2e:	6878      	ldr	r0, [r7, #4]
 8017e30:	f000 fa74 	bl	801831c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	689b      	ldr	r3, [r3, #8]
 8017e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017e3c:	d102      	bne.n	8017e44 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	2200      	movs	r2, #0
 8017e42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	685a      	ldr	r2, [r3, #4]
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017e4c:	b2d2      	uxtb	r2, r2
 8017e4e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e54:	687a      	ldr	r2, [r7, #4]
 8017e56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8017e58:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	685b      	ldr	r3, [r3, #4]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d010      	beq.n	8017e84 <HAL_DMA_Init+0x104>
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	685b      	ldr	r3, [r3, #4]
 8017e66:	2b04      	cmp	r3, #4
 8017e68:	d80c      	bhi.n	8017e84 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8017e6a:	6878      	ldr	r0, [r7, #4]
 8017e6c:	f000 fa94 	bl	8018398 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e74:	2200      	movs	r2, #0
 8017e76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e7c:	687a      	ldr	r2, [r7, #4]
 8017e7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8017e80:	605a      	str	r2, [r3, #4]
 8017e82:	e008      	b.n	8017e96 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	2200      	movs	r2, #0
 8017e88:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	2200      	movs	r2, #0
 8017e94:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	2200      	movs	r2, #0
 8017e9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2201      	movs	r2, #1
 8017ea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8017eac:	2300      	movs	r3, #0
}
 8017eae:	4618      	mov	r0, r3
 8017eb0:	3710      	adds	r7, #16
 8017eb2:	46bd      	mov	sp, r7
 8017eb4:	bd80      	pop	{r7, pc}
 8017eb6:	bf00      	nop
 8017eb8:	40020407 	.word	0x40020407
 8017ebc:	bffdfff8 	.word	0xbffdfff8
 8017ec0:	cccccccd 	.word	0xcccccccd
 8017ec4:	40020000 	.word	0x40020000
 8017ec8:	bffdfbf8 	.word	0xbffdfbf8
 8017ecc:	40020400 	.word	0x40020400

08017ed0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b086      	sub	sp, #24
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	60f8      	str	r0, [r7, #12]
 8017ed8:	60b9      	str	r1, [r7, #8]
 8017eda:	607a      	str	r2, [r7, #4]
 8017edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017ede:	2300      	movs	r3, #0
 8017ee0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017ee8:	2b01      	cmp	r3, #1
 8017eea:	d101      	bne.n	8017ef0 <HAL_DMA_Start_IT+0x20>
 8017eec:	2302      	movs	r3, #2
 8017eee:	e066      	b.n	8017fbe <HAL_DMA_Start_IT+0xee>
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	2201      	movs	r2, #1
 8017ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8017efe:	b2db      	uxtb	r3, r3
 8017f00:	2b01      	cmp	r3, #1
 8017f02:	d155      	bne.n	8017fb0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	2202      	movs	r2, #2
 8017f08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	2200      	movs	r2, #0
 8017f10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	681a      	ldr	r2, [r3, #0]
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	f022 0201 	bic.w	r2, r2, #1
 8017f20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8017f22:	683b      	ldr	r3, [r7, #0]
 8017f24:	687a      	ldr	r2, [r7, #4]
 8017f26:	68b9      	ldr	r1, [r7, #8]
 8017f28:	68f8      	ldr	r0, [r7, #12]
 8017f2a:	f000 f9b9 	bl	80182a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d008      	beq.n	8017f48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	681a      	ldr	r2, [r3, #0]
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	f042 020e 	orr.w	r2, r2, #14
 8017f44:	601a      	str	r2, [r3, #0]
 8017f46:	e00f      	b.n	8017f68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	681a      	ldr	r2, [r3, #0]
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	f022 0204 	bic.w	r2, r2, #4
 8017f56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	681a      	ldr	r2, [r3, #0]
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	f042 020a 	orr.w	r2, r2, #10
 8017f66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d007      	beq.n	8017f86 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017f7a:	681a      	ldr	r2, [r3, #0]
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f84:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d007      	beq.n	8017f9e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f92:	681a      	ldr	r2, [r3, #0]
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	681a      	ldr	r2, [r3, #0]
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	f042 0201 	orr.w	r2, r2, #1
 8017fac:	601a      	str	r2, [r3, #0]
 8017fae:	e005      	b.n	8017fbc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8017fb8:	2302      	movs	r3, #2
 8017fba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8017fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	3718      	adds	r7, #24
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	bd80      	pop	{r7, pc}

08017fc6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8017fc6:	b480      	push	{r7}
 8017fc8:	b083      	sub	sp, #12
 8017fca:	af00      	add	r7, sp, #0
 8017fcc:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d101      	bne.n	8017fd8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	e04f      	b.n	8018078 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8017fde:	b2db      	uxtb	r3, r3
 8017fe0:	2b02      	cmp	r3, #2
 8017fe2:	d008      	beq.n	8017ff6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	2204      	movs	r2, #4
 8017fe8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	2200      	movs	r2, #0
 8017fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8017ff2:	2301      	movs	r3, #1
 8017ff4:	e040      	b.n	8018078 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	681a      	ldr	r2, [r3, #0]
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	f022 020e 	bic.w	r2, r2, #14
 8018004:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801800a:	681a      	ldr	r2, [r3, #0]
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018014:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	681a      	ldr	r2, [r3, #0]
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	f022 0201 	bic.w	r2, r2, #1
 8018024:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801802a:	f003 021c 	and.w	r2, r3, #28
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018032:	2101      	movs	r1, #1
 8018034:	fa01 f202 	lsl.w	r2, r1, r2
 8018038:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801803e:	687a      	ldr	r2, [r7, #4]
 8018040:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8018042:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018048:	2b00      	cmp	r3, #0
 801804a:	d00c      	beq.n	8018066 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018050:	681a      	ldr	r2, [r3, #0]
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801805a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018060:	687a      	ldr	r2, [r7, #4]
 8018062:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8018064:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	2201      	movs	r2, #1
 801806a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	2200      	movs	r2, #0
 8018072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8018076:	2300      	movs	r3, #0
}
 8018078:	4618      	mov	r0, r3
 801807a:	370c      	adds	r7, #12
 801807c:	46bd      	mov	sp, r7
 801807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018082:	4770      	bx	lr

08018084 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b084      	sub	sp, #16
 8018088:	af00      	add	r7, sp, #0
 801808a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801808c:	2300      	movs	r3, #0
 801808e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8018096:	b2db      	uxtb	r3, r3
 8018098:	2b02      	cmp	r3, #2
 801809a:	d005      	beq.n	80180a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	2204      	movs	r2, #4
 80180a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80180a2:	2301      	movs	r3, #1
 80180a4:	73fb      	strb	r3, [r7, #15]
 80180a6:	e047      	b.n	8018138 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	681a      	ldr	r2, [r3, #0]
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	f022 020e 	bic.w	r2, r2, #14
 80180b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	681a      	ldr	r2, [r3, #0]
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	f022 0201 	bic.w	r2, r2, #1
 80180c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180cc:	681a      	ldr	r2, [r3, #0]
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80180d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180dc:	f003 021c 	and.w	r2, r3, #28
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180e4:	2101      	movs	r1, #1
 80180e6:	fa01 f202 	lsl.w	r2, r1, r2
 80180ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80180f0:	687a      	ldr	r2, [r7, #4]
 80180f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80180f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d00c      	beq.n	8018118 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018102:	681a      	ldr	r2, [r3, #0]
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801810c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018112:	687a      	ldr	r2, [r7, #4]
 8018114:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8018116:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	2201      	movs	r2, #1
 801811c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	2200      	movs	r2, #0
 8018124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801812c:	2b00      	cmp	r3, #0
 801812e:	d003      	beq.n	8018138 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018134:	6878      	ldr	r0, [r7, #4]
 8018136:	4798      	blx	r3
    }
  }
  return status;
 8018138:	7bfb      	ldrb	r3, [r7, #15]
}
 801813a:	4618      	mov	r0, r3
 801813c:	3710      	adds	r7, #16
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}

08018142 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018142:	b580      	push	{r7, lr}
 8018144:	b084      	sub	sp, #16
 8018146:	af00      	add	r7, sp, #0
 8018148:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801815e:	f003 031c 	and.w	r3, r3, #28
 8018162:	2204      	movs	r2, #4
 8018164:	409a      	lsls	r2, r3
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	4013      	ands	r3, r2
 801816a:	2b00      	cmp	r3, #0
 801816c:	d026      	beq.n	80181bc <HAL_DMA_IRQHandler+0x7a>
 801816e:	68bb      	ldr	r3, [r7, #8]
 8018170:	f003 0304 	and.w	r3, r3, #4
 8018174:	2b00      	cmp	r3, #0
 8018176:	d021      	beq.n	80181bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	f003 0320 	and.w	r3, r3, #32
 8018182:	2b00      	cmp	r3, #0
 8018184:	d107      	bne.n	8018196 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	681a      	ldr	r2, [r3, #0]
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	f022 0204 	bic.w	r2, r2, #4
 8018194:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801819a:	f003 021c 	and.w	r2, r3, #28
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181a2:	2104      	movs	r1, #4
 80181a4:	fa01 f202 	lsl.w	r2, r1, r2
 80181a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d071      	beq.n	8018296 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181b6:	6878      	ldr	r0, [r7, #4]
 80181b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80181ba:	e06c      	b.n	8018296 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181c0:	f003 031c 	and.w	r3, r3, #28
 80181c4:	2202      	movs	r2, #2
 80181c6:	409a      	lsls	r2, r3
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	4013      	ands	r3, r2
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d02e      	beq.n	801822e <HAL_DMA_IRQHandler+0xec>
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	f003 0302 	and.w	r3, r3, #2
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d029      	beq.n	801822e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	f003 0320 	and.w	r3, r3, #32
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d10b      	bne.n	8018200 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	681a      	ldr	r2, [r3, #0]
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	f022 020a 	bic.w	r2, r2, #10
 80181f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	2201      	movs	r2, #1
 80181fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018204:	f003 021c 	and.w	r2, r3, #28
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801820c:	2102      	movs	r1, #2
 801820e:	fa01 f202 	lsl.w	r2, r1, r2
 8018212:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	2200      	movs	r2, #0
 8018218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018220:	2b00      	cmp	r3, #0
 8018222:	d038      	beq.n	8018296 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018228:	6878      	ldr	r0, [r7, #4]
 801822a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801822c:	e033      	b.n	8018296 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018232:	f003 031c 	and.w	r3, r3, #28
 8018236:	2208      	movs	r2, #8
 8018238:	409a      	lsls	r2, r3
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	4013      	ands	r3, r2
 801823e:	2b00      	cmp	r3, #0
 8018240:	d02a      	beq.n	8018298 <HAL_DMA_IRQHandler+0x156>
 8018242:	68bb      	ldr	r3, [r7, #8]
 8018244:	f003 0308 	and.w	r3, r3, #8
 8018248:	2b00      	cmp	r3, #0
 801824a:	d025      	beq.n	8018298 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	681a      	ldr	r2, [r3, #0]
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	f022 020e 	bic.w	r2, r2, #14
 801825a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018260:	f003 021c 	and.w	r2, r3, #28
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018268:	2101      	movs	r1, #1
 801826a:	fa01 f202 	lsl.w	r2, r1, r2
 801826e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	2201      	movs	r2, #1
 8018274:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2201      	movs	r2, #1
 801827a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	2200      	movs	r2, #0
 8018282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801828a:	2b00      	cmp	r3, #0
 801828c:	d004      	beq.n	8018298 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018292:	6878      	ldr	r0, [r7, #4]
 8018294:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8018296:	bf00      	nop
 8018298:	bf00      	nop
}
 801829a:	3710      	adds	r7, #16
 801829c:	46bd      	mov	sp, r7
 801829e:	bd80      	pop	{r7, pc}

080182a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80182a0:	b480      	push	{r7}
 80182a2:	b085      	sub	sp, #20
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	60f8      	str	r0, [r7, #12]
 80182a8:	60b9      	str	r1, [r7, #8]
 80182aa:	607a      	str	r2, [r7, #4]
 80182ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182b2:	68fa      	ldr	r2, [r7, #12]
 80182b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80182b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d004      	beq.n	80182ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80182c4:	68fa      	ldr	r2, [r7, #12]
 80182c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80182c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182ce:	f003 021c 	and.w	r2, r3, #28
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182d6:	2101      	movs	r1, #1
 80182d8:	fa01 f202 	lsl.w	r2, r1, r2
 80182dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	683a      	ldr	r2, [r7, #0]
 80182e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	689b      	ldr	r3, [r3, #8]
 80182ea:	2b10      	cmp	r3, #16
 80182ec:	d108      	bne.n	8018300 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	687a      	ldr	r2, [r7, #4]
 80182f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	68ba      	ldr	r2, [r7, #8]
 80182fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80182fe:	e007      	b.n	8018310 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	68ba      	ldr	r2, [r7, #8]
 8018306:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	687a      	ldr	r2, [r7, #4]
 801830e:	60da      	str	r2, [r3, #12]
}
 8018310:	bf00      	nop
 8018312:	3714      	adds	r7, #20
 8018314:	46bd      	mov	sp, r7
 8018316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801831a:	4770      	bx	lr

0801831c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801831c:	b480      	push	{r7}
 801831e:	b085      	sub	sp, #20
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	461a      	mov	r2, r3
 801832a:	4b17      	ldr	r3, [pc, #92]	; (8018388 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801832c:	429a      	cmp	r2, r3
 801832e:	d80a      	bhi.n	8018346 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018334:	089b      	lsrs	r3, r3, #2
 8018336:	009b      	lsls	r3, r3, #2
 8018338:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801833c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8018340:	687a      	ldr	r2, [r7, #4]
 8018342:	6493      	str	r3, [r2, #72]	; 0x48
 8018344:	e007      	b.n	8018356 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801834a:	089b      	lsrs	r3, r3, #2
 801834c:	009a      	lsls	r2, r3, #2
 801834e:	4b0f      	ldr	r3, [pc, #60]	; (801838c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8018350:	4413      	add	r3, r2
 8018352:	687a      	ldr	r2, [r7, #4]
 8018354:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	b2db      	uxtb	r3, r3
 801835c:	3b08      	subs	r3, #8
 801835e:	4a0c      	ldr	r2, [pc, #48]	; (8018390 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8018360:	fba2 2303 	umull	r2, r3, r2, r3
 8018364:	091b      	lsrs	r3, r3, #4
 8018366:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	4a0a      	ldr	r2, [pc, #40]	; (8018394 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801836c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	f003 031c 	and.w	r3, r3, #28
 8018374:	2201      	movs	r2, #1
 8018376:	409a      	lsls	r2, r3
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	651a      	str	r2, [r3, #80]	; 0x50
}
 801837c:	bf00      	nop
 801837e:	3714      	adds	r7, #20
 8018380:	46bd      	mov	sp, r7
 8018382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018386:	4770      	bx	lr
 8018388:	40020407 	.word	0x40020407
 801838c:	4002081c 	.word	0x4002081c
 8018390:	cccccccd 	.word	0xcccccccd
 8018394:	40020880 	.word	0x40020880

08018398 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8018398:	b480      	push	{r7}
 801839a:	b085      	sub	sp, #20
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	685b      	ldr	r3, [r3, #4]
 80183a4:	b2db      	uxtb	r3, r3
 80183a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80183a8:	68fa      	ldr	r2, [r7, #12]
 80183aa:	4b0b      	ldr	r3, [pc, #44]	; (80183d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80183ac:	4413      	add	r3, r2
 80183ae:	009b      	lsls	r3, r3, #2
 80183b0:	461a      	mov	r2, r3
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	4a08      	ldr	r2, [pc, #32]	; (80183dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80183ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	3b01      	subs	r3, #1
 80183c0:	f003 0303 	and.w	r3, r3, #3
 80183c4:	2201      	movs	r2, #1
 80183c6:	409a      	lsls	r2, r3
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80183cc:	bf00      	nop
 80183ce:	3714      	adds	r7, #20
 80183d0:	46bd      	mov	sp, r7
 80183d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d6:	4770      	bx	lr
 80183d8:	1000823f 	.word	0x1000823f
 80183dc:	40020940 	.word	0x40020940

080183e0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b086      	sub	sp, #24
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	60f8      	str	r0, [r7, #12]
 80183e8:	60b9      	str	r1, [r7, #8]
 80183ea:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80183ee:	4b1c      	ldr	r3, [pc, #112]	; (8018460 <HAL_FLASH_Program+0x80>)
 80183f0:	781b      	ldrb	r3, [r3, #0]
 80183f2:	2b01      	cmp	r3, #1
 80183f4:	d101      	bne.n	80183fa <HAL_FLASH_Program+0x1a>
 80183f6:	2302      	movs	r3, #2
 80183f8:	e02d      	b.n	8018456 <HAL_FLASH_Program+0x76>
 80183fa:	4b19      	ldr	r3, [pc, #100]	; (8018460 <HAL_FLASH_Program+0x80>)
 80183fc:	2201      	movs	r2, #1
 80183fe:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8018400:	4b17      	ldr	r3, [pc, #92]	; (8018460 <HAL_FLASH_Program+0x80>)
 8018402:	2200      	movs	r2, #0
 8018404:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8018406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801840a:	f000 f869 	bl	80184e0 <FLASH_WaitForLastOperation>
 801840e:	4603      	mov	r3, r0
 8018410:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8018412:	7dfb      	ldrb	r3, [r7, #23]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d11a      	bne.n	801844e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	2b01      	cmp	r3, #1
 801841c:	d105      	bne.n	801842a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801841e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018422:	68b8      	ldr	r0, [r7, #8]
 8018424:	f000 f8be 	bl	80185a4 <FLASH_Program_DoubleWord>
 8018428:	e004      	b.n	8018434 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801842a:	683b      	ldr	r3, [r7, #0]
 801842c:	4619      	mov	r1, r3
 801842e:	68b8      	ldr	r0, [r7, #8]
 8018430:	f00f fd58 	bl	8027ee4 <_etext>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8018434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018438:	f000 f852 	bl	80184e0 <FLASH_WaitForLastOperation>
 801843c:	4603      	mov	r3, r0
 801843e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8018440:	4b08      	ldr	r3, [pc, #32]	; (8018464 <HAL_FLASH_Program+0x84>)
 8018442:	695a      	ldr	r2, [r3, #20]
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	43db      	mvns	r3, r3
 8018448:	4906      	ldr	r1, [pc, #24]	; (8018464 <HAL_FLASH_Program+0x84>)
 801844a:	4013      	ands	r3, r2
 801844c:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801844e:	4b04      	ldr	r3, [pc, #16]	; (8018460 <HAL_FLASH_Program+0x80>)
 8018450:	2200      	movs	r2, #0
 8018452:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8018454:	7dfb      	ldrb	r3, [r7, #23]
}
 8018456:	4618      	mov	r0, r3
 8018458:	3718      	adds	r7, #24
 801845a:	46bd      	mov	sp, r7
 801845c:	bd80      	pop	{r7, pc}
 801845e:	bf00      	nop
 8018460:	20000b5c 	.word	0x20000b5c
 8018464:	58004000 	.word	0x58004000

08018468 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8018468:	b480      	push	{r7}
 801846a:	b083      	sub	sp, #12
 801846c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801846e:	2300      	movs	r3, #0
 8018470:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8018472:	4b0b      	ldr	r3, [pc, #44]	; (80184a0 <HAL_FLASH_Unlock+0x38>)
 8018474:	695b      	ldr	r3, [r3, #20]
 8018476:	2b00      	cmp	r3, #0
 8018478:	da0b      	bge.n	8018492 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801847a:	4b09      	ldr	r3, [pc, #36]	; (80184a0 <HAL_FLASH_Unlock+0x38>)
 801847c:	4a09      	ldr	r2, [pc, #36]	; (80184a4 <HAL_FLASH_Unlock+0x3c>)
 801847e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8018480:	4b07      	ldr	r3, [pc, #28]	; (80184a0 <HAL_FLASH_Unlock+0x38>)
 8018482:	4a09      	ldr	r2, [pc, #36]	; (80184a8 <HAL_FLASH_Unlock+0x40>)
 8018484:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8018486:	4b06      	ldr	r3, [pc, #24]	; (80184a0 <HAL_FLASH_Unlock+0x38>)
 8018488:	695b      	ldr	r3, [r3, #20]
 801848a:	2b00      	cmp	r3, #0
 801848c:	da01      	bge.n	8018492 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801848e:	2301      	movs	r3, #1
 8018490:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8018492:	79fb      	ldrb	r3, [r7, #7]
}
 8018494:	4618      	mov	r0, r3
 8018496:	370c      	adds	r7, #12
 8018498:	46bd      	mov	sp, r7
 801849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801849e:	4770      	bx	lr
 80184a0:	58004000 	.word	0x58004000
 80184a4:	45670123 	.word	0x45670123
 80184a8:	cdef89ab 	.word	0xcdef89ab

080184ac <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80184ac:	b480      	push	{r7}
 80184ae:	b083      	sub	sp, #12
 80184b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80184b2:	2300      	movs	r3, #0
 80184b4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80184b6:	4b09      	ldr	r3, [pc, #36]	; (80184dc <HAL_FLASH_Lock+0x30>)
 80184b8:	695b      	ldr	r3, [r3, #20]
 80184ba:	4a08      	ldr	r2, [pc, #32]	; (80184dc <HAL_FLASH_Lock+0x30>)
 80184bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80184c0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80184c2:	4b06      	ldr	r3, [pc, #24]	; (80184dc <HAL_FLASH_Lock+0x30>)
 80184c4:	695b      	ldr	r3, [r3, #20]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	db01      	blt.n	80184ce <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80184ca:	2301      	movs	r3, #1
 80184cc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80184ce:	79fb      	ldrb	r3, [r7, #7]
}
 80184d0:	4618      	mov	r0, r3
 80184d2:	370c      	adds	r7, #12
 80184d4:	46bd      	mov	sp, r7
 80184d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184da:	4770      	bx	lr
 80184dc:	58004000 	.word	0x58004000

080184e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b084      	sub	sp, #16
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80184e8:	f7fd fec0 	bl	801626c <HAL_GetTick>
 80184ec:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80184ee:	e009      	b.n	8018504 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80184f0:	f7fd febc 	bl	801626c <HAL_GetTick>
 80184f4:	4602      	mov	r2, r0
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	1ad3      	subs	r3, r2, r3
 80184fa:	687a      	ldr	r2, [r7, #4]
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d801      	bhi.n	8018504 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8018500:	2303      	movs	r3, #3
 8018502:	e047      	b.n	8018594 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8018504:	4b25      	ldr	r3, [pc, #148]	; (801859c <FLASH_WaitForLastOperation+0xbc>)
 8018506:	691b      	ldr	r3, [r3, #16]
 8018508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801850c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018510:	d0ee      	beq.n	80184f0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8018512:	4b22      	ldr	r3, [pc, #136]	; (801859c <FLASH_WaitForLastOperation+0xbc>)
 8018514:	691b      	ldr	r3, [r3, #16]
 8018516:	60bb      	str	r3, [r7, #8]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8018518:	68bb      	ldr	r3, [r7, #8]
 801851a:	f003 0301 	and.w	r3, r3, #1
 801851e:	2b00      	cmp	r3, #0
 8018520:	d002      	beq.n	8018528 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8018522:	4b1e      	ldr	r3, [pc, #120]	; (801859c <FLASH_WaitForLastOperation+0xbc>)
 8018524:	2201      	movs	r2, #1
 8018526:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8018528:	68ba      	ldr	r2, [r7, #8]
 801852a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801852e:	4013      	ands	r3, r2
 8018530:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8018532:	68bb      	ldr	r3, [r7, #8]
 8018534:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8018538:	2b00      	cmp	r3, #0
 801853a:	d007      	beq.n	801854c <FLASH_WaitForLastOperation+0x6c>
 801853c:	4b17      	ldr	r3, [pc, #92]	; (801859c <FLASH_WaitForLastOperation+0xbc>)
 801853e:	699a      	ldr	r2, [r3, #24]
 8018540:	68bb      	ldr	r3, [r7, #8]
 8018542:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8018546:	4915      	ldr	r1, [pc, #84]	; (801859c <FLASH_WaitForLastOperation+0xbc>)
 8018548:	4313      	orrs	r3, r2
 801854a:	618b      	str	r3, [r1, #24]
 801854c:	68bb      	ldr	r3, [r7, #8]
 801854e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8018552:	2b00      	cmp	r3, #0
 8018554:	d004      	beq.n	8018560 <FLASH_WaitForLastOperation+0x80>
 8018556:	4a11      	ldr	r2, [pc, #68]	; (801859c <FLASH_WaitForLastOperation+0xbc>)
 8018558:	68bb      	ldr	r3, [r7, #8]
 801855a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801855e:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8018560:	68bb      	ldr	r3, [r7, #8]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d00e      	beq.n	8018584 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8018566:	4a0e      	ldr	r2, [pc, #56]	; (80185a0 <FLASH_WaitForLastOperation+0xc0>)
 8018568:	68bb      	ldr	r3, [r7, #8]
 801856a:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 801856c:	2301      	movs	r3, #1
 801856e:	e011      	b.n	8018594 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8018570:	f7fd fe7c 	bl	801626c <HAL_GetTick>
 8018574:	4602      	mov	r2, r0
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	1ad3      	subs	r3, r2, r3
 801857a:	687a      	ldr	r2, [r7, #4]
 801857c:	429a      	cmp	r2, r3
 801857e:	d801      	bhi.n	8018584 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8018580:	2303      	movs	r3, #3
 8018582:	e007      	b.n	8018594 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8018584:	4b05      	ldr	r3, [pc, #20]	; (801859c <FLASH_WaitForLastOperation+0xbc>)
 8018586:	691b      	ldr	r3, [r3, #16]
 8018588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801858c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8018590:	d0ee      	beq.n	8018570 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8018592:	2300      	movs	r3, #0
}
 8018594:	4618      	mov	r0, r3
 8018596:	3710      	adds	r7, #16
 8018598:	46bd      	mov	sp, r7
 801859a:	bd80      	pop	{r7, pc}
 801859c:	58004000 	.word	0x58004000
 80185a0:	20000b5c 	.word	0x20000b5c

080185a4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80185a4:	b490      	push	{r4, r7}
 80185a6:	b084      	sub	sp, #16
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	60f8      	str	r0, [r7, #12]
 80185ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80185b0:	4b0d      	ldr	r3, [pc, #52]	; (80185e8 <FLASH_Program_DoubleWord+0x44>)
 80185b2:	695b      	ldr	r3, [r3, #20]
 80185b4:	4a0c      	ldr	r2, [pc, #48]	; (80185e8 <FLASH_Program_DoubleWord+0x44>)
 80185b6:	f043 0301 	orr.w	r3, r3, #1
 80185ba:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	683a      	ldr	r2, [r7, #0]
 80185c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80185c2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80185c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80185ca:	f04f 0300 	mov.w	r3, #0
 80185ce:	f04f 0400 	mov.w	r4, #0
 80185d2:	0013      	movs	r3, r2
 80185d4:	2400      	movs	r4, #0
 80185d6:	68fa      	ldr	r2, [r7, #12]
 80185d8:	3204      	adds	r2, #4
 80185da:	6013      	str	r3, [r2, #0]
}
 80185dc:	bf00      	nop
 80185de:	3710      	adds	r7, #16
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bc90      	pop	{r4, r7}
 80185e4:	4770      	bx	lr
 80185e6:	bf00      	nop
 80185e8:	58004000 	.word	0x58004000

080185ec <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b084      	sub	sp, #16
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
 80185f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80185f6:	4b28      	ldr	r3, [pc, #160]	; (8018698 <HAL_FLASHEx_Erase+0xac>)
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	2b01      	cmp	r3, #1
 80185fc:	d101      	bne.n	8018602 <HAL_FLASHEx_Erase+0x16>
 80185fe:	2302      	movs	r3, #2
 8018600:	e046      	b.n	8018690 <HAL_FLASHEx_Erase+0xa4>
 8018602:	4b25      	ldr	r3, [pc, #148]	; (8018698 <HAL_FLASHEx_Erase+0xac>)
 8018604:	2201      	movs	r2, #1
 8018606:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8018608:	4b23      	ldr	r3, [pc, #140]	; (8018698 <HAL_FLASHEx_Erase+0xac>)
 801860a:	2200      	movs	r2, #0
 801860c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801860e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018612:	f7ff ff65 	bl	80184e0 <FLASH_WaitForLastOperation>
 8018616:	4603      	mov	r3, r0
 8018618:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801861a:	7bfb      	ldrb	r3, [r7, #15]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d133      	bne.n	8018688 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	2b04      	cmp	r3, #4
 8018626:	d108      	bne.n	801863a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8018628:	f000 f838 	bl	801869c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801862c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018630:	f7ff ff56 	bl	80184e0 <FLASH_WaitForLastOperation>
 8018634:	4603      	mov	r3, r0
 8018636:	73fb      	strb	r3, [r7, #15]
 8018638:	e024      	b.n	8018684 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801863a:	683b      	ldr	r3, [r7, #0]
 801863c:	f04f 32ff 	mov.w	r2, #4294967295
 8018640:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	685b      	ldr	r3, [r3, #4]
 8018646:	60bb      	str	r3, [r7, #8]
 8018648:	e012      	b.n	8018670 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 801864a:	68b8      	ldr	r0, [r7, #8]
 801864c:	f000 f838 	bl	80186c0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8018650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018654:	f7ff ff44 	bl	80184e0 <FLASH_WaitForLastOperation>
 8018658:	4603      	mov	r3, r0
 801865a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 801865c:	7bfb      	ldrb	r3, [r7, #15]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d003      	beq.n	801866a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8018662:	683b      	ldr	r3, [r7, #0]
 8018664:	68ba      	ldr	r2, [r7, #8]
 8018666:	601a      	str	r2, [r3, #0]
          break;
 8018668:	e00a      	b.n	8018680 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 801866a:	68bb      	ldr	r3, [r7, #8]
 801866c:	3301      	adds	r3, #1
 801866e:	60bb      	str	r3, [r7, #8]
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	685a      	ldr	r2, [r3, #4]
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	689b      	ldr	r3, [r3, #8]
 8018678:	4413      	add	r3, r2
 801867a:	68ba      	ldr	r2, [r7, #8]
 801867c:	429a      	cmp	r2, r3
 801867e:	d3e4      	bcc.n	801864a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8018680:	f000 f880 	bl	8018784 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8018684:	f000 f836 	bl	80186f4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8018688:	4b03      	ldr	r3, [pc, #12]	; (8018698 <HAL_FLASHEx_Erase+0xac>)
 801868a:	2200      	movs	r2, #0
 801868c:	701a      	strb	r2, [r3, #0]

  return status;
 801868e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018690:	4618      	mov	r0, r3
 8018692:	3710      	adds	r7, #16
 8018694:	46bd      	mov	sp, r7
 8018696:	bd80      	pop	{r7, pc}
 8018698:	20000b5c 	.word	0x20000b5c

0801869c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 801869c:	b480      	push	{r7}
 801869e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80186a0:	4b06      	ldr	r3, [pc, #24]	; (80186bc <FLASH_MassErase+0x20>)
 80186a2:	695b      	ldr	r3, [r3, #20]
 80186a4:	4a05      	ldr	r2, [pc, #20]	; (80186bc <FLASH_MassErase+0x20>)
 80186a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80186aa:	f043 0304 	orr.w	r3, r3, #4
 80186ae:	6153      	str	r3, [r2, #20]
}
 80186b0:	bf00      	nop
 80186b2:	46bd      	mov	sp, r7
 80186b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b8:	4770      	bx	lr
 80186ba:	bf00      	nop
 80186bc:	58004000 	.word	0x58004000

080186c0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80186c0:	b480      	push	{r7}
 80186c2:	b083      	sub	sp, #12
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80186c8:	4b09      	ldr	r3, [pc, #36]	; (80186f0 <FLASH_PageErase+0x30>)
 80186ca:	695b      	ldr	r3, [r3, #20]
 80186cc:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	00db      	lsls	r3, r3, #3
 80186d4:	4313      	orrs	r3, r2
 80186d6:	4a06      	ldr	r2, [pc, #24]	; (80186f0 <FLASH_PageErase+0x30>)
 80186d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80186dc:	f043 0302 	orr.w	r3, r3, #2
 80186e0:	6153      	str	r3, [r2, #20]
}
 80186e2:	bf00      	nop
 80186e4:	370c      	adds	r7, #12
 80186e6:	46bd      	mov	sp, r7
 80186e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ec:	4770      	bx	lr
 80186ee:	bf00      	nop
 80186f0:	58004000 	.word	0x58004000

080186f4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 80186f4:	b480      	push	{r7}
 80186f6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 80186f8:	4b21      	ldr	r3, [pc, #132]	; (8018780 <FLASH_FlushCaches+0x8c>)
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018704:	d117      	bne.n	8018736 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8018706:	4b1e      	ldr	r3, [pc, #120]	; (8018780 <FLASH_FlushCaches+0x8c>)
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	4a1d      	ldr	r2, [pc, #116]	; (8018780 <FLASH_FlushCaches+0x8c>)
 801870c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8018710:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8018712:	4b1b      	ldr	r3, [pc, #108]	; (8018780 <FLASH_FlushCaches+0x8c>)
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	4a1a      	ldr	r2, [pc, #104]	; (8018780 <FLASH_FlushCaches+0x8c>)
 8018718:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801871c:	6013      	str	r3, [r2, #0]
 801871e:	4b18      	ldr	r3, [pc, #96]	; (8018780 <FLASH_FlushCaches+0x8c>)
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	4a17      	ldr	r2, [pc, #92]	; (8018780 <FLASH_FlushCaches+0x8c>)
 8018724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018728:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801872a:	4b15      	ldr	r3, [pc, #84]	; (8018780 <FLASH_FlushCaches+0x8c>)
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	4a14      	ldr	r2, [pc, #80]	; (8018780 <FLASH_FlushCaches+0x8c>)
 8018730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018734:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8018736:	4b12      	ldr	r3, [pc, #72]	; (8018780 <FLASH_FlushCaches+0x8c>)
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801873e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018742:	d117      	bne.n	8018774 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8018744:	4b0e      	ldr	r3, [pc, #56]	; (8018780 <FLASH_FlushCaches+0x8c>)
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	4a0d      	ldr	r2, [pc, #52]	; (8018780 <FLASH_FlushCaches+0x8c>)
 801874a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801874e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8018750:	4b0b      	ldr	r3, [pc, #44]	; (8018780 <FLASH_FlushCaches+0x8c>)
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	4a0a      	ldr	r2, [pc, #40]	; (8018780 <FLASH_FlushCaches+0x8c>)
 8018756:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801875a:	6013      	str	r3, [r2, #0]
 801875c:	4b08      	ldr	r3, [pc, #32]	; (8018780 <FLASH_FlushCaches+0x8c>)
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	4a07      	ldr	r2, [pc, #28]	; (8018780 <FLASH_FlushCaches+0x8c>)
 8018762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018766:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8018768:	4b05      	ldr	r3, [pc, #20]	; (8018780 <FLASH_FlushCaches+0x8c>)
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	4a04      	ldr	r2, [pc, #16]	; (8018780 <FLASH_FlushCaches+0x8c>)
 801876e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018772:	6013      	str	r3, [r2, #0]
  }
}
 8018774:	bf00      	nop
 8018776:	46bd      	mov	sp, r7
 8018778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801877c:	4770      	bx	lr
 801877e:	bf00      	nop
 8018780:	58004000 	.word	0x58004000

08018784 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8018784:	b480      	push	{r7}
 8018786:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8018788:	4b06      	ldr	r3, [pc, #24]	; (80187a4 <FLASH_AcknowledgePageErase+0x20>)
 801878a:	695b      	ldr	r3, [r3, #20]
 801878c:	4a05      	ldr	r2, [pc, #20]	; (80187a4 <FLASH_AcknowledgePageErase+0x20>)
 801878e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8018792:	f023 0302 	bic.w	r3, r3, #2
 8018796:	6153      	str	r3, [r2, #20]
}
 8018798:	bf00      	nop
 801879a:	46bd      	mov	sp, r7
 801879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187a0:	4770      	bx	lr
 80187a2:	bf00      	nop
 80187a4:	58004000 	.word	0x58004000

080187a8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80187a8:	b480      	push	{r7}
 80187aa:	b087      	sub	sp, #28
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	6078      	str	r0, [r7, #4]
 80187b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80187b2:	2300      	movs	r3, #0
 80187b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80187b6:	e14c      	b.n	8018a52 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80187b8:	683b      	ldr	r3, [r7, #0]
 80187ba:	681a      	ldr	r2, [r3, #0]
 80187bc:	2101      	movs	r1, #1
 80187be:	697b      	ldr	r3, [r7, #20]
 80187c0:	fa01 f303 	lsl.w	r3, r1, r3
 80187c4:	4013      	ands	r3, r2
 80187c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	f000 813e 	beq.w	8018a4c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80187d0:	683b      	ldr	r3, [r7, #0]
 80187d2:	685b      	ldr	r3, [r3, #4]
 80187d4:	2b02      	cmp	r3, #2
 80187d6:	d003      	beq.n	80187e0 <HAL_GPIO_Init+0x38>
 80187d8:	683b      	ldr	r3, [r7, #0]
 80187da:	685b      	ldr	r3, [r3, #4]
 80187dc:	2b12      	cmp	r3, #18
 80187de:	d123      	bne.n	8018828 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80187e0:	697b      	ldr	r3, [r7, #20]
 80187e2:	08da      	lsrs	r2, r3, #3
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	3208      	adds	r2, #8
 80187e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80187ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80187ee:	697b      	ldr	r3, [r7, #20]
 80187f0:	f003 0307 	and.w	r3, r3, #7
 80187f4:	009b      	lsls	r3, r3, #2
 80187f6:	220f      	movs	r2, #15
 80187f8:	fa02 f303 	lsl.w	r3, r2, r3
 80187fc:	43db      	mvns	r3, r3
 80187fe:	693a      	ldr	r2, [r7, #16]
 8018800:	4013      	ands	r3, r2
 8018802:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8018804:	683b      	ldr	r3, [r7, #0]
 8018806:	691a      	ldr	r2, [r3, #16]
 8018808:	697b      	ldr	r3, [r7, #20]
 801880a:	f003 0307 	and.w	r3, r3, #7
 801880e:	009b      	lsls	r3, r3, #2
 8018810:	fa02 f303 	lsl.w	r3, r2, r3
 8018814:	693a      	ldr	r2, [r7, #16]
 8018816:	4313      	orrs	r3, r2
 8018818:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801881a:	697b      	ldr	r3, [r7, #20]
 801881c:	08da      	lsrs	r2, r3, #3
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	3208      	adds	r2, #8
 8018822:	6939      	ldr	r1, [r7, #16]
 8018824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801882e:	697b      	ldr	r3, [r7, #20]
 8018830:	005b      	lsls	r3, r3, #1
 8018832:	2203      	movs	r2, #3
 8018834:	fa02 f303 	lsl.w	r3, r2, r3
 8018838:	43db      	mvns	r3, r3
 801883a:	693a      	ldr	r2, [r7, #16]
 801883c:	4013      	ands	r3, r2
 801883e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8018840:	683b      	ldr	r3, [r7, #0]
 8018842:	685b      	ldr	r3, [r3, #4]
 8018844:	f003 0203 	and.w	r2, r3, #3
 8018848:	697b      	ldr	r3, [r7, #20]
 801884a:	005b      	lsls	r3, r3, #1
 801884c:	fa02 f303 	lsl.w	r3, r2, r3
 8018850:	693a      	ldr	r2, [r7, #16]
 8018852:	4313      	orrs	r3, r2
 8018854:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	693a      	ldr	r2, [r7, #16]
 801885a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801885c:	683b      	ldr	r3, [r7, #0]
 801885e:	685b      	ldr	r3, [r3, #4]
 8018860:	2b01      	cmp	r3, #1
 8018862:	d00b      	beq.n	801887c <HAL_GPIO_Init+0xd4>
 8018864:	683b      	ldr	r3, [r7, #0]
 8018866:	685b      	ldr	r3, [r3, #4]
 8018868:	2b02      	cmp	r3, #2
 801886a:	d007      	beq.n	801887c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801886c:	683b      	ldr	r3, [r7, #0]
 801886e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8018870:	2b11      	cmp	r3, #17
 8018872:	d003      	beq.n	801887c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8018874:	683b      	ldr	r3, [r7, #0]
 8018876:	685b      	ldr	r3, [r3, #4]
 8018878:	2b12      	cmp	r3, #18
 801887a:	d130      	bne.n	80188de <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	689b      	ldr	r3, [r3, #8]
 8018880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8018882:	697b      	ldr	r3, [r7, #20]
 8018884:	005b      	lsls	r3, r3, #1
 8018886:	2203      	movs	r2, #3
 8018888:	fa02 f303 	lsl.w	r3, r2, r3
 801888c:	43db      	mvns	r3, r3
 801888e:	693a      	ldr	r2, [r7, #16]
 8018890:	4013      	ands	r3, r2
 8018892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8018894:	683b      	ldr	r3, [r7, #0]
 8018896:	68da      	ldr	r2, [r3, #12]
 8018898:	697b      	ldr	r3, [r7, #20]
 801889a:	005b      	lsls	r3, r3, #1
 801889c:	fa02 f303 	lsl.w	r3, r2, r3
 80188a0:	693a      	ldr	r2, [r7, #16]
 80188a2:	4313      	orrs	r3, r2
 80188a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	693a      	ldr	r2, [r7, #16]
 80188aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	685b      	ldr	r3, [r3, #4]
 80188b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80188b2:	2201      	movs	r2, #1
 80188b4:	697b      	ldr	r3, [r7, #20]
 80188b6:	fa02 f303 	lsl.w	r3, r2, r3
 80188ba:	43db      	mvns	r3, r3
 80188bc:	693a      	ldr	r2, [r7, #16]
 80188be:	4013      	ands	r3, r2
 80188c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80188c2:	683b      	ldr	r3, [r7, #0]
 80188c4:	685b      	ldr	r3, [r3, #4]
 80188c6:	091b      	lsrs	r3, r3, #4
 80188c8:	f003 0201 	and.w	r2, r3, #1
 80188cc:	697b      	ldr	r3, [r7, #20]
 80188ce:	fa02 f303 	lsl.w	r3, r2, r3
 80188d2:	693a      	ldr	r2, [r7, #16]
 80188d4:	4313      	orrs	r3, r2
 80188d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	693a      	ldr	r2, [r7, #16]
 80188dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	68db      	ldr	r3, [r3, #12]
 80188e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80188e4:	697b      	ldr	r3, [r7, #20]
 80188e6:	005b      	lsls	r3, r3, #1
 80188e8:	2203      	movs	r2, #3
 80188ea:	fa02 f303 	lsl.w	r3, r2, r3
 80188ee:	43db      	mvns	r3, r3
 80188f0:	693a      	ldr	r2, [r7, #16]
 80188f2:	4013      	ands	r3, r2
 80188f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80188f6:	683b      	ldr	r3, [r7, #0]
 80188f8:	689a      	ldr	r2, [r3, #8]
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	005b      	lsls	r3, r3, #1
 80188fe:	fa02 f303 	lsl.w	r3, r2, r3
 8018902:	693a      	ldr	r2, [r7, #16]
 8018904:	4313      	orrs	r3, r2
 8018906:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	693a      	ldr	r2, [r7, #16]
 801890c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801890e:	683b      	ldr	r3, [r7, #0]
 8018910:	685b      	ldr	r3, [r3, #4]
 8018912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018916:	2b00      	cmp	r3, #0
 8018918:	f000 8098 	beq.w	8018a4c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 801891c:	4a54      	ldr	r2, [pc, #336]	; (8018a70 <HAL_GPIO_Init+0x2c8>)
 801891e:	697b      	ldr	r3, [r7, #20]
 8018920:	089b      	lsrs	r3, r3, #2
 8018922:	3302      	adds	r3, #2
 8018924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801892a:	697b      	ldr	r3, [r7, #20]
 801892c:	f003 0303 	and.w	r3, r3, #3
 8018930:	009b      	lsls	r3, r3, #2
 8018932:	220f      	movs	r2, #15
 8018934:	fa02 f303 	lsl.w	r3, r2, r3
 8018938:	43db      	mvns	r3, r3
 801893a:	693a      	ldr	r2, [r7, #16]
 801893c:	4013      	ands	r3, r2
 801893e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8018946:	d019      	beq.n	801897c <HAL_GPIO_Init+0x1d4>
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	4a4a      	ldr	r2, [pc, #296]	; (8018a74 <HAL_GPIO_Init+0x2cc>)
 801894c:	4293      	cmp	r3, r2
 801894e:	d013      	beq.n	8018978 <HAL_GPIO_Init+0x1d0>
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	4a49      	ldr	r2, [pc, #292]	; (8018a78 <HAL_GPIO_Init+0x2d0>)
 8018954:	4293      	cmp	r3, r2
 8018956:	d00d      	beq.n	8018974 <HAL_GPIO_Init+0x1cc>
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	4a48      	ldr	r2, [pc, #288]	; (8018a7c <HAL_GPIO_Init+0x2d4>)
 801895c:	4293      	cmp	r3, r2
 801895e:	d007      	beq.n	8018970 <HAL_GPIO_Init+0x1c8>
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	4a47      	ldr	r2, [pc, #284]	; (8018a80 <HAL_GPIO_Init+0x2d8>)
 8018964:	4293      	cmp	r3, r2
 8018966:	d101      	bne.n	801896c <HAL_GPIO_Init+0x1c4>
 8018968:	2304      	movs	r3, #4
 801896a:	e008      	b.n	801897e <HAL_GPIO_Init+0x1d6>
 801896c:	2307      	movs	r3, #7
 801896e:	e006      	b.n	801897e <HAL_GPIO_Init+0x1d6>
 8018970:	2303      	movs	r3, #3
 8018972:	e004      	b.n	801897e <HAL_GPIO_Init+0x1d6>
 8018974:	2302      	movs	r3, #2
 8018976:	e002      	b.n	801897e <HAL_GPIO_Init+0x1d6>
 8018978:	2301      	movs	r3, #1
 801897a:	e000      	b.n	801897e <HAL_GPIO_Init+0x1d6>
 801897c:	2300      	movs	r3, #0
 801897e:	697a      	ldr	r2, [r7, #20]
 8018980:	f002 0203 	and.w	r2, r2, #3
 8018984:	0092      	lsls	r2, r2, #2
 8018986:	4093      	lsls	r3, r2
 8018988:	693a      	ldr	r2, [r7, #16]
 801898a:	4313      	orrs	r3, r2
 801898c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801898e:	4938      	ldr	r1, [pc, #224]	; (8018a70 <HAL_GPIO_Init+0x2c8>)
 8018990:	697b      	ldr	r3, [r7, #20]
 8018992:	089b      	lsrs	r3, r3, #2
 8018994:	3302      	adds	r3, #2
 8018996:	693a      	ldr	r2, [r7, #16]
 8018998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801899c:	4b39      	ldr	r3, [pc, #228]	; (8018a84 <HAL_GPIO_Init+0x2dc>)
 801899e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80189a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	43db      	mvns	r3, r3
 80189a8:	693a      	ldr	r2, [r7, #16]
 80189aa:	4013      	ands	r3, r2
 80189ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80189ae:	683b      	ldr	r3, [r7, #0]
 80189b0:	685b      	ldr	r3, [r3, #4]
 80189b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d003      	beq.n	80189c2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80189ba:	693a      	ldr	r2, [r7, #16]
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	4313      	orrs	r3, r2
 80189c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80189c2:	4a30      	ldr	r2, [pc, #192]	; (8018a84 <HAL_GPIO_Init+0x2dc>)
 80189c4:	693b      	ldr	r3, [r7, #16]
 80189c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80189ca:	4b2e      	ldr	r3, [pc, #184]	; (8018a84 <HAL_GPIO_Init+0x2dc>)
 80189cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80189d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	43db      	mvns	r3, r3
 80189d6:	693a      	ldr	r2, [r7, #16]
 80189d8:	4013      	ands	r3, r2
 80189da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80189dc:	683b      	ldr	r3, [r7, #0]
 80189de:	685b      	ldr	r3, [r3, #4]
 80189e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d003      	beq.n	80189f0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80189e8:	693a      	ldr	r2, [r7, #16]
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	4313      	orrs	r3, r2
 80189ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80189f0:	4a24      	ldr	r2, [pc, #144]	; (8018a84 <HAL_GPIO_Init+0x2dc>)
 80189f2:	693b      	ldr	r3, [r7, #16]
 80189f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80189f8:	4b22      	ldr	r3, [pc, #136]	; (8018a84 <HAL_GPIO_Init+0x2dc>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	43db      	mvns	r3, r3
 8018a02:	693a      	ldr	r2, [r7, #16]
 8018a04:	4013      	ands	r3, r2
 8018a06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8018a08:	683b      	ldr	r3, [r7, #0]
 8018a0a:	685b      	ldr	r3, [r3, #4]
 8018a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d003      	beq.n	8018a1c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8018a14:	693a      	ldr	r2, [r7, #16]
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	4313      	orrs	r3, r2
 8018a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8018a1c:	4a19      	ldr	r2, [pc, #100]	; (8018a84 <HAL_GPIO_Init+0x2dc>)
 8018a1e:	693b      	ldr	r3, [r7, #16]
 8018a20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8018a22:	4b18      	ldr	r3, [pc, #96]	; (8018a84 <HAL_GPIO_Init+0x2dc>)
 8018a24:	685b      	ldr	r3, [r3, #4]
 8018a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	43db      	mvns	r3, r3
 8018a2c:	693a      	ldr	r2, [r7, #16]
 8018a2e:	4013      	ands	r3, r2
 8018a30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8018a32:	683b      	ldr	r3, [r7, #0]
 8018a34:	685b      	ldr	r3, [r3, #4]
 8018a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d003      	beq.n	8018a46 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8018a3e:	693a      	ldr	r2, [r7, #16]
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	4313      	orrs	r3, r2
 8018a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8018a46:	4a0f      	ldr	r2, [pc, #60]	; (8018a84 <HAL_GPIO_Init+0x2dc>)
 8018a48:	693b      	ldr	r3, [r7, #16]
 8018a4a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8018a4c:	697b      	ldr	r3, [r7, #20]
 8018a4e:	3301      	adds	r3, #1
 8018a50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8018a52:	683b      	ldr	r3, [r7, #0]
 8018a54:	681a      	ldr	r2, [r3, #0]
 8018a56:	697b      	ldr	r3, [r7, #20]
 8018a58:	fa22 f303 	lsr.w	r3, r2, r3
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	f47f aeab 	bne.w	80187b8 <HAL_GPIO_Init+0x10>
  }
}
 8018a62:	bf00      	nop
 8018a64:	371c      	adds	r7, #28
 8018a66:	46bd      	mov	sp, r7
 8018a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6c:	4770      	bx	lr
 8018a6e:	bf00      	nop
 8018a70:	40010000 	.word	0x40010000
 8018a74:	48000400 	.word	0x48000400
 8018a78:	48000800 	.word	0x48000800
 8018a7c:	48000c00 	.word	0x48000c00
 8018a80:	48001000 	.word	0x48001000
 8018a84:	58000800 	.word	0x58000800

08018a88 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8018a88:	b480      	push	{r7}
 8018a8a:	b085      	sub	sp, #20
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
 8018a90:	460b      	mov	r3, r1
 8018a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	691a      	ldr	r2, [r3, #16]
 8018a98:	887b      	ldrh	r3, [r7, #2]
 8018a9a:	4013      	ands	r3, r2
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d002      	beq.n	8018aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8018aa0:	2301      	movs	r3, #1
 8018aa2:	73fb      	strb	r3, [r7, #15]
 8018aa4:	e001      	b.n	8018aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8018aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8018aac:	4618      	mov	r0, r3
 8018aae:	3714      	adds	r7, #20
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab6:	4770      	bx	lr

08018ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8018ab8:	b480      	push	{r7}
 8018aba:	b083      	sub	sp, #12
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
 8018ac0:	460b      	mov	r3, r1
 8018ac2:	807b      	strh	r3, [r7, #2]
 8018ac4:	4613      	mov	r3, r2
 8018ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8018ac8:	787b      	ldrb	r3, [r7, #1]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d003      	beq.n	8018ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8018ace:	887a      	ldrh	r2, [r7, #2]
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8018ad4:	e002      	b.n	8018adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8018ad6:	887a      	ldrh	r2, [r7, #2]
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	629a      	str	r2, [r3, #40]	; 0x28
}
 8018adc:	bf00      	nop
 8018ade:	370c      	adds	r7, #12
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae6:	4770      	bx	lr

08018ae8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8018ae8:	b480      	push	{r7}
 8018aea:	b083      	sub	sp, #12
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
 8018af0:	460b      	mov	r3, r1
 8018af2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	695a      	ldr	r2, [r3, #20]
 8018af8:	887b      	ldrh	r3, [r7, #2]
 8018afa:	4013      	ands	r3, r2
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d003      	beq.n	8018b08 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8018b00:	887a      	ldrh	r2, [r7, #2]
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8018b06:	e002      	b.n	8018b0e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8018b08:	887a      	ldrh	r2, [r7, #2]
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	619a      	str	r2, [r3, #24]
}
 8018b0e:	bf00      	nop
 8018b10:	370c      	adds	r7, #12
 8018b12:	46bd      	mov	sp, r7
 8018b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b18:	4770      	bx	lr
	...

08018b1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b082      	sub	sp, #8
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	4603      	mov	r3, r0
 8018b24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8018b26:	4b08      	ldr	r3, [pc, #32]	; (8018b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018b28:	68da      	ldr	r2, [r3, #12]
 8018b2a:	88fb      	ldrh	r3, [r7, #6]
 8018b2c:	4013      	ands	r3, r2
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d006      	beq.n	8018b40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8018b32:	4a05      	ldr	r2, [pc, #20]	; (8018b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018b34:	88fb      	ldrh	r3, [r7, #6]
 8018b36:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8018b38:	88fb      	ldrh	r3, [r7, #6]
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	f7fa ff3e 	bl	80139bc <HAL_GPIO_EXTI_Callback>
  }
}
 8018b40:	bf00      	nop
 8018b42:	3708      	adds	r7, #8
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd80      	pop	{r7, pc}
 8018b48:	58000800 	.word	0x58000800

08018b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b082      	sub	sp, #8
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d101      	bne.n	8018b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8018b5a:	2301      	movs	r3, #1
 8018b5c:	e081      	b.n	8018c62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018b64:	b2db      	uxtb	r3, r3
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d106      	bne.n	8018b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	2200      	movs	r2, #0
 8018b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8018b72:	6878      	ldr	r0, [r7, #4]
 8018b74:	f7fa fe6a 	bl	801384c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	2224      	movs	r2, #36	; 0x24
 8018b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	681a      	ldr	r2, [r3, #0]
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	f022 0201 	bic.w	r2, r2, #1
 8018b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	685a      	ldr	r2, [r3, #4]
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018b9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	689a      	ldr	r2, [r3, #8]
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018bac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	68db      	ldr	r3, [r3, #12]
 8018bb2:	2b01      	cmp	r3, #1
 8018bb4:	d107      	bne.n	8018bc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	689a      	ldr	r2, [r3, #8]
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8018bc2:	609a      	str	r2, [r3, #8]
 8018bc4:	e006      	b.n	8018bd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	689a      	ldr	r2, [r3, #8]
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8018bd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	68db      	ldr	r3, [r3, #12]
 8018bd8:	2b02      	cmp	r3, #2
 8018bda:	d104      	bne.n	8018be6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018be4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	685b      	ldr	r3, [r3, #4]
 8018bec:	687a      	ldr	r2, [r7, #4]
 8018bee:	6812      	ldr	r2, [r2, #0]
 8018bf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8018bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018bf8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	68da      	ldr	r2, [r3, #12]
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018c08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	691a      	ldr	r2, [r3, #16]
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	695b      	ldr	r3, [r3, #20]
 8018c12:	ea42 0103 	orr.w	r1, r2, r3
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	699b      	ldr	r3, [r3, #24]
 8018c1a:	021a      	lsls	r2, r3, #8
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	430a      	orrs	r2, r1
 8018c22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	69d9      	ldr	r1, [r3, #28]
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	6a1a      	ldr	r2, [r3, #32]
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	430a      	orrs	r2, r1
 8018c32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	681a      	ldr	r2, [r3, #0]
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	f042 0201 	orr.w	r2, r2, #1
 8018c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	2200      	movs	r2, #0
 8018c48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	2220      	movs	r2, #32
 8018c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	2200      	movs	r2, #0
 8018c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8018c60:	2300      	movs	r3, #0
}
 8018c62:	4618      	mov	r0, r3
 8018c64:	3708      	adds	r7, #8
 8018c66:	46bd      	mov	sp, r7
 8018c68:	bd80      	pop	{r7, pc}
	...

08018c6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b088      	sub	sp, #32
 8018c70:	af02      	add	r7, sp, #8
 8018c72:	60f8      	str	r0, [r7, #12]
 8018c74:	607a      	str	r2, [r7, #4]
 8018c76:	461a      	mov	r2, r3
 8018c78:	460b      	mov	r3, r1
 8018c7a:	817b      	strh	r3, [r7, #10]
 8018c7c:	4613      	mov	r3, r2
 8018c7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018c86:	b2db      	uxtb	r3, r3
 8018c88:	2b20      	cmp	r3, #32
 8018c8a:	f040 80da 	bne.w	8018e42 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018c94:	2b01      	cmp	r3, #1
 8018c96:	d101      	bne.n	8018c9c <HAL_I2C_Master_Transmit+0x30>
 8018c98:	2302      	movs	r3, #2
 8018c9a:	e0d3      	b.n	8018e44 <HAL_I2C_Master_Transmit+0x1d8>
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	2201      	movs	r2, #1
 8018ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018ca4:	f7fd fae2 	bl	801626c <HAL_GetTick>
 8018ca8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018caa:	697b      	ldr	r3, [r7, #20]
 8018cac:	9300      	str	r3, [sp, #0]
 8018cae:	2319      	movs	r3, #25
 8018cb0:	2201      	movs	r2, #1
 8018cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018cb6:	68f8      	ldr	r0, [r7, #12]
 8018cb8:	f001 fbba 	bl	801a430 <I2C_WaitOnFlagUntilTimeout>
 8018cbc:	4603      	mov	r3, r0
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d001      	beq.n	8018cc6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8018cc2:	2301      	movs	r3, #1
 8018cc4:	e0be      	b.n	8018e44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	2221      	movs	r2, #33	; 0x21
 8018cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	2210      	movs	r2, #16
 8018cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	2200      	movs	r2, #0
 8018cda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	687a      	ldr	r2, [r7, #4]
 8018ce0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	893a      	ldrh	r2, [r7, #8]
 8018ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	2200      	movs	r2, #0
 8018cec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cf2:	b29b      	uxth	r3, r3
 8018cf4:	2bff      	cmp	r3, #255	; 0xff
 8018cf6:	d90e      	bls.n	8018d16 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	22ff      	movs	r2, #255	; 0xff
 8018cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d02:	b2da      	uxtb	r2, r3
 8018d04:	8979      	ldrh	r1, [r7, #10]
 8018d06:	4b51      	ldr	r3, [pc, #324]	; (8018e4c <HAL_I2C_Master_Transmit+0x1e0>)
 8018d08:	9300      	str	r3, [sp, #0]
 8018d0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018d0e:	68f8      	ldr	r0, [r7, #12]
 8018d10:	f001 fd1c 	bl	801a74c <I2C_TransferConfig>
 8018d14:	e06c      	b.n	8018df0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d1a:	b29a      	uxth	r2, r3
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d24:	b2da      	uxtb	r2, r3
 8018d26:	8979      	ldrh	r1, [r7, #10]
 8018d28:	4b48      	ldr	r3, [pc, #288]	; (8018e4c <HAL_I2C_Master_Transmit+0x1e0>)
 8018d2a:	9300      	str	r3, [sp, #0]
 8018d2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018d30:	68f8      	ldr	r0, [r7, #12]
 8018d32:	f001 fd0b 	bl	801a74c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8018d36:	e05b      	b.n	8018df0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018d38:	697a      	ldr	r2, [r7, #20]
 8018d3a:	6a39      	ldr	r1, [r7, #32]
 8018d3c:	68f8      	ldr	r0, [r7, #12]
 8018d3e:	f001 fbb7 	bl	801a4b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8018d42:	4603      	mov	r3, r0
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d001      	beq.n	8018d4c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8018d48:	2301      	movs	r3, #1
 8018d4a:	e07b      	b.n	8018e44 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d50:	781a      	ldrb	r2, [r3, #0]
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d5c:	1c5a      	adds	r2, r3, #1
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d66:	b29b      	uxth	r3, r3
 8018d68:	3b01      	subs	r3, #1
 8018d6a:	b29a      	uxth	r2, r3
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d74:	3b01      	subs	r3, #1
 8018d76:	b29a      	uxth	r2, r3
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d80:	b29b      	uxth	r3, r3
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d034      	beq.n	8018df0 <HAL_I2C_Master_Transmit+0x184>
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d130      	bne.n	8018df0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8018d8e:	697b      	ldr	r3, [r7, #20]
 8018d90:	9300      	str	r3, [sp, #0]
 8018d92:	6a3b      	ldr	r3, [r7, #32]
 8018d94:	2200      	movs	r2, #0
 8018d96:	2180      	movs	r1, #128	; 0x80
 8018d98:	68f8      	ldr	r0, [r7, #12]
 8018d9a:	f001 fb49 	bl	801a430 <I2C_WaitOnFlagUntilTimeout>
 8018d9e:	4603      	mov	r3, r0
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d001      	beq.n	8018da8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8018da4:	2301      	movs	r3, #1
 8018da6:	e04d      	b.n	8018e44 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dac:	b29b      	uxth	r3, r3
 8018dae:	2bff      	cmp	r3, #255	; 0xff
 8018db0:	d90e      	bls.n	8018dd0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	22ff      	movs	r2, #255	; 0xff
 8018db6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018dbc:	b2da      	uxtb	r2, r3
 8018dbe:	8979      	ldrh	r1, [r7, #10]
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	9300      	str	r3, [sp, #0]
 8018dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018dc8:	68f8      	ldr	r0, [r7, #12]
 8018dca:	f001 fcbf 	bl	801a74c <I2C_TransferConfig>
 8018dce:	e00f      	b.n	8018df0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dd4:	b29a      	uxth	r2, r3
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018dde:	b2da      	uxtb	r2, r3
 8018de0:	8979      	ldrh	r1, [r7, #10]
 8018de2:	2300      	movs	r3, #0
 8018de4:	9300      	str	r3, [sp, #0]
 8018de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018dea:	68f8      	ldr	r0, [r7, #12]
 8018dec:	f001 fcae 	bl	801a74c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018df4:	b29b      	uxth	r3, r3
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d19e      	bne.n	8018d38 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018dfa:	697a      	ldr	r2, [r7, #20]
 8018dfc:	6a39      	ldr	r1, [r7, #32]
 8018dfe:	68f8      	ldr	r0, [r7, #12]
 8018e00:	f001 fb96 	bl	801a530 <I2C_WaitOnSTOPFlagUntilTimeout>
 8018e04:	4603      	mov	r3, r0
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d001      	beq.n	8018e0e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8018e0a:	2301      	movs	r3, #1
 8018e0c:	e01a      	b.n	8018e44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	2220      	movs	r2, #32
 8018e14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	6859      	ldr	r1, [r3, #4]
 8018e1c:	68fb      	ldr	r3, [r7, #12]
 8018e1e:	681a      	ldr	r2, [r3, #0]
 8018e20:	4b0b      	ldr	r3, [pc, #44]	; (8018e50 <HAL_I2C_Master_Transmit+0x1e4>)
 8018e22:	400b      	ands	r3, r1
 8018e24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	2220      	movs	r2, #32
 8018e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	2200      	movs	r2, #0
 8018e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	2200      	movs	r2, #0
 8018e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018e3e:	2300      	movs	r3, #0
 8018e40:	e000      	b.n	8018e44 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8018e42:	2302      	movs	r3, #2
  }
}
 8018e44:	4618      	mov	r0, r3
 8018e46:	3718      	adds	r7, #24
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd80      	pop	{r7, pc}
 8018e4c:	80002000 	.word	0x80002000
 8018e50:	fe00e800 	.word	0xfe00e800

08018e54 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b088      	sub	sp, #32
 8018e58:	af02      	add	r7, sp, #8
 8018e5a:	60f8      	str	r0, [r7, #12]
 8018e5c:	607a      	str	r2, [r7, #4]
 8018e5e:	461a      	mov	r2, r3
 8018e60:	460b      	mov	r3, r1
 8018e62:	817b      	strh	r3, [r7, #10]
 8018e64:	4613      	mov	r3, r2
 8018e66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018e6e:	b2db      	uxtb	r3, r3
 8018e70:	2b20      	cmp	r3, #32
 8018e72:	f040 80db 	bne.w	801902c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018e7c:	2b01      	cmp	r3, #1
 8018e7e:	d101      	bne.n	8018e84 <HAL_I2C_Master_Receive+0x30>
 8018e80:	2302      	movs	r3, #2
 8018e82:	e0d4      	b.n	801902e <HAL_I2C_Master_Receive+0x1da>
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	2201      	movs	r2, #1
 8018e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018e8c:	f7fd f9ee 	bl	801626c <HAL_GetTick>
 8018e90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	9300      	str	r3, [sp, #0]
 8018e96:	2319      	movs	r3, #25
 8018e98:	2201      	movs	r2, #1
 8018e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018e9e:	68f8      	ldr	r0, [r7, #12]
 8018ea0:	f001 fac6 	bl	801a430 <I2C_WaitOnFlagUntilTimeout>
 8018ea4:	4603      	mov	r3, r0
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d001      	beq.n	8018eae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8018eaa:	2301      	movs	r3, #1
 8018eac:	e0bf      	b.n	801902e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	2222      	movs	r2, #34	; 0x22
 8018eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	2210      	movs	r2, #16
 8018eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	2200      	movs	r2, #0
 8018ec2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	687a      	ldr	r2, [r7, #4]
 8018ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	893a      	ldrh	r2, [r7, #8]
 8018ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	2200      	movs	r2, #0
 8018ed4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018eda:	b29b      	uxth	r3, r3
 8018edc:	2bff      	cmp	r3, #255	; 0xff
 8018ede:	d90e      	bls.n	8018efe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	22ff      	movs	r2, #255	; 0xff
 8018ee4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018eea:	b2da      	uxtb	r2, r3
 8018eec:	8979      	ldrh	r1, [r7, #10]
 8018eee:	4b52      	ldr	r3, [pc, #328]	; (8019038 <HAL_I2C_Master_Receive+0x1e4>)
 8018ef0:	9300      	str	r3, [sp, #0]
 8018ef2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018ef6:	68f8      	ldr	r0, [r7, #12]
 8018ef8:	f001 fc28 	bl	801a74c <I2C_TransferConfig>
 8018efc:	e06d      	b.n	8018fda <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f02:	b29a      	uxth	r2, r3
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018f0c:	b2da      	uxtb	r2, r3
 8018f0e:	8979      	ldrh	r1, [r7, #10]
 8018f10:	4b49      	ldr	r3, [pc, #292]	; (8019038 <HAL_I2C_Master_Receive+0x1e4>)
 8018f12:	9300      	str	r3, [sp, #0]
 8018f14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018f18:	68f8      	ldr	r0, [r7, #12]
 8018f1a:	f001 fc17 	bl	801a74c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8018f1e:	e05c      	b.n	8018fda <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018f20:	697a      	ldr	r2, [r7, #20]
 8018f22:	6a39      	ldr	r1, [r7, #32]
 8018f24:	68f8      	ldr	r0, [r7, #12]
 8018f26:	f001 fb3f 	bl	801a5a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d001      	beq.n	8018f34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8018f30:	2301      	movs	r3, #1
 8018f32:	e07c      	b.n	801902e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f3e:	b2d2      	uxtb	r2, r2
 8018f40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f46:	1c5a      	adds	r2, r3, #1
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018f50:	3b01      	subs	r3, #1
 8018f52:	b29a      	uxth	r2, r3
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f5c:	b29b      	uxth	r3, r3
 8018f5e:	3b01      	subs	r3, #1
 8018f60:	b29a      	uxth	r2, r3
 8018f62:	68fb      	ldr	r3, [r7, #12]
 8018f64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f6a:	b29b      	uxth	r3, r3
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d034      	beq.n	8018fda <HAL_I2C_Master_Receive+0x186>
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d130      	bne.n	8018fda <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8018f78:	697b      	ldr	r3, [r7, #20]
 8018f7a:	9300      	str	r3, [sp, #0]
 8018f7c:	6a3b      	ldr	r3, [r7, #32]
 8018f7e:	2200      	movs	r2, #0
 8018f80:	2180      	movs	r1, #128	; 0x80
 8018f82:	68f8      	ldr	r0, [r7, #12]
 8018f84:	f001 fa54 	bl	801a430 <I2C_WaitOnFlagUntilTimeout>
 8018f88:	4603      	mov	r3, r0
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d001      	beq.n	8018f92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8018f8e:	2301      	movs	r3, #1
 8018f90:	e04d      	b.n	801902e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f96:	b29b      	uxth	r3, r3
 8018f98:	2bff      	cmp	r3, #255	; 0xff
 8018f9a:	d90e      	bls.n	8018fba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	22ff      	movs	r2, #255	; 0xff
 8018fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018fa6:	b2da      	uxtb	r2, r3
 8018fa8:	8979      	ldrh	r1, [r7, #10]
 8018faa:	2300      	movs	r3, #0
 8018fac:	9300      	str	r3, [sp, #0]
 8018fae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018fb2:	68f8      	ldr	r0, [r7, #12]
 8018fb4:	f001 fbca 	bl	801a74c <I2C_TransferConfig>
 8018fb8:	e00f      	b.n	8018fda <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018fbe:	b29a      	uxth	r2, r3
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018fc8:	b2da      	uxtb	r2, r3
 8018fca:	8979      	ldrh	r1, [r7, #10]
 8018fcc:	2300      	movs	r3, #0
 8018fce:	9300      	str	r3, [sp, #0]
 8018fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018fd4:	68f8      	ldr	r0, [r7, #12]
 8018fd6:	f001 fbb9 	bl	801a74c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018fde:	b29b      	uxth	r3, r3
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d19d      	bne.n	8018f20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018fe4:	697a      	ldr	r2, [r7, #20]
 8018fe6:	6a39      	ldr	r1, [r7, #32]
 8018fe8:	68f8      	ldr	r0, [r7, #12]
 8018fea:	f001 faa1 	bl	801a530 <I2C_WaitOnSTOPFlagUntilTimeout>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d001      	beq.n	8018ff8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8018ff4:	2301      	movs	r3, #1
 8018ff6:	e01a      	b.n	801902e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	2220      	movs	r2, #32
 8018ffe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	6859      	ldr	r1, [r3, #4]
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	681a      	ldr	r2, [r3, #0]
 801900a:	4b0c      	ldr	r3, [pc, #48]	; (801903c <HAL_I2C_Master_Receive+0x1e8>)
 801900c:	400b      	ands	r3, r1
 801900e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	2220      	movs	r2, #32
 8019014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	2200      	movs	r2, #0
 801901c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	2200      	movs	r2, #0
 8019024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019028:	2300      	movs	r3, #0
 801902a:	e000      	b.n	801902e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 801902c:	2302      	movs	r3, #2
  }
}
 801902e:	4618      	mov	r0, r3
 8019030:	3718      	adds	r7, #24
 8019032:	46bd      	mov	sp, r7
 8019034:	bd80      	pop	{r7, pc}
 8019036:	bf00      	nop
 8019038:	80002400 	.word	0x80002400
 801903c:	fe00e800 	.word	0xfe00e800

08019040 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8019040:	b580      	push	{r7, lr}
 8019042:	b088      	sub	sp, #32
 8019044:	af02      	add	r7, sp, #8
 8019046:	60f8      	str	r0, [r7, #12]
 8019048:	607a      	str	r2, [r7, #4]
 801904a:	461a      	mov	r2, r3
 801904c:	460b      	mov	r3, r1
 801904e:	817b      	strh	r3, [r7, #10]
 8019050:	4613      	mov	r3, r2
 8019052:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801905a:	b2db      	uxtb	r3, r3
 801905c:	2b20      	cmp	r3, #32
 801905e:	d153      	bne.n	8019108 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	699b      	ldr	r3, [r3, #24]
 8019066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801906a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801906e:	d101      	bne.n	8019074 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8019070:	2302      	movs	r3, #2
 8019072:	e04a      	b.n	801910a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019074:	68fb      	ldr	r3, [r7, #12]
 8019076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801907a:	2b01      	cmp	r3, #1
 801907c:	d101      	bne.n	8019082 <HAL_I2C_Master_Receive_IT+0x42>
 801907e:	2302      	movs	r3, #2
 8019080:	e043      	b.n	801910a <HAL_I2C_Master_Receive_IT+0xca>
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	2201      	movs	r2, #1
 8019086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	2222      	movs	r2, #34	; 0x22
 801908e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	2210      	movs	r2, #16
 8019096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	2200      	movs	r2, #0
 801909e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	687a      	ldr	r2, [r7, #4]
 80190a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	893a      	ldrh	r2, [r7, #8]
 80190aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	4a19      	ldr	r2, [pc, #100]	; (8019114 <HAL_I2C_Master_Receive_IT+0xd4>)
 80190b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	4a18      	ldr	r2, [pc, #96]	; (8019118 <HAL_I2C_Master_Receive_IT+0xd8>)
 80190b6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80190bc:	b29b      	uxth	r3, r3
 80190be:	2bff      	cmp	r3, #255	; 0xff
 80190c0:	d906      	bls.n	80190d0 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	22ff      	movs	r2, #255	; 0xff
 80190c6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80190c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80190cc:	617b      	str	r3, [r7, #20]
 80190ce:	e007      	b.n	80190e0 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80190d4:	b29a      	uxth	r2, r3
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80190da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80190de:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80190e4:	b2da      	uxtb	r2, r3
 80190e6:	8979      	ldrh	r1, [r7, #10]
 80190e8:	4b0c      	ldr	r3, [pc, #48]	; (801911c <HAL_I2C_Master_Receive_IT+0xdc>)
 80190ea:	9300      	str	r3, [sp, #0]
 80190ec:	697b      	ldr	r3, [r7, #20]
 80190ee:	68f8      	ldr	r0, [r7, #12]
 80190f0:	f001 fb2c 	bl	801a74c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	2200      	movs	r2, #0
 80190f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80190fc:	2102      	movs	r1, #2
 80190fe:	68f8      	ldr	r0, [r7, #12]
 8019100:	f001 fb52 	bl	801a7a8 <I2C_Enable_IRQ>

    return HAL_OK;
 8019104:	2300      	movs	r3, #0
 8019106:	e000      	b.n	801910a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8019108:	2302      	movs	r3, #2
  }
}
 801910a:	4618      	mov	r0, r3
 801910c:	3718      	adds	r7, #24
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}
 8019112:	bf00      	nop
 8019114:	ffff0000 	.word	0xffff0000
 8019118:	08019425 	.word	0x08019425
 801911c:	80002400 	.word	0x80002400

08019120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019120:	b580      	push	{r7, lr}
 8019122:	b088      	sub	sp, #32
 8019124:	af02      	add	r7, sp, #8
 8019126:	60f8      	str	r0, [r7, #12]
 8019128:	4608      	mov	r0, r1
 801912a:	4611      	mov	r1, r2
 801912c:	461a      	mov	r2, r3
 801912e:	4603      	mov	r3, r0
 8019130:	817b      	strh	r3, [r7, #10]
 8019132:	460b      	mov	r3, r1
 8019134:	813b      	strh	r3, [r7, #8]
 8019136:	4613      	mov	r3, r2
 8019138:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019140:	b2db      	uxtb	r3, r3
 8019142:	2b20      	cmp	r3, #32
 8019144:	f040 80f9 	bne.w	801933a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8019148:	6a3b      	ldr	r3, [r7, #32]
 801914a:	2b00      	cmp	r3, #0
 801914c:	d002      	beq.n	8019154 <HAL_I2C_Mem_Write+0x34>
 801914e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019150:	2b00      	cmp	r3, #0
 8019152:	d105      	bne.n	8019160 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	f44f 7200 	mov.w	r2, #512	; 0x200
 801915a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801915c:	2301      	movs	r3, #1
 801915e:	e0ed      	b.n	801933c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019166:	2b01      	cmp	r3, #1
 8019168:	d101      	bne.n	801916e <HAL_I2C_Mem_Write+0x4e>
 801916a:	2302      	movs	r3, #2
 801916c:	e0e6      	b.n	801933c <HAL_I2C_Mem_Write+0x21c>
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	2201      	movs	r2, #1
 8019172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8019176:	f7fd f879 	bl	801626c <HAL_GetTick>
 801917a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801917c:	697b      	ldr	r3, [r7, #20]
 801917e:	9300      	str	r3, [sp, #0]
 8019180:	2319      	movs	r3, #25
 8019182:	2201      	movs	r2, #1
 8019184:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8019188:	68f8      	ldr	r0, [r7, #12]
 801918a:	f001 f951 	bl	801a430 <I2C_WaitOnFlagUntilTimeout>
 801918e:	4603      	mov	r3, r0
 8019190:	2b00      	cmp	r3, #0
 8019192:	d001      	beq.n	8019198 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8019194:	2301      	movs	r3, #1
 8019196:	e0d1      	b.n	801933c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	2221      	movs	r2, #33	; 0x21
 801919c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	2240      	movs	r2, #64	; 0x40
 80191a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	2200      	movs	r2, #0
 80191ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	6a3a      	ldr	r2, [r7, #32]
 80191b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80191b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	2200      	movs	r2, #0
 80191be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80191c0:	88f8      	ldrh	r0, [r7, #6]
 80191c2:	893a      	ldrh	r2, [r7, #8]
 80191c4:	8979      	ldrh	r1, [r7, #10]
 80191c6:	697b      	ldr	r3, [r7, #20]
 80191c8:	9301      	str	r3, [sp, #4]
 80191ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191cc:	9300      	str	r3, [sp, #0]
 80191ce:	4603      	mov	r3, r0
 80191d0:	68f8      	ldr	r0, [r7, #12]
 80191d2:	f000 fd0f 	bl	8019bf4 <I2C_RequestMemoryWrite>
 80191d6:	4603      	mov	r3, r0
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d005      	beq.n	80191e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	2200      	movs	r2, #0
 80191e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80191e4:	2301      	movs	r3, #1
 80191e6:	e0a9      	b.n	801933c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191ec:	b29b      	uxth	r3, r3
 80191ee:	2bff      	cmp	r3, #255	; 0xff
 80191f0:	d90e      	bls.n	8019210 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	22ff      	movs	r2, #255	; 0xff
 80191f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80191fc:	b2da      	uxtb	r2, r3
 80191fe:	8979      	ldrh	r1, [r7, #10]
 8019200:	2300      	movs	r3, #0
 8019202:	9300      	str	r3, [sp, #0]
 8019204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019208:	68f8      	ldr	r0, [r7, #12]
 801920a:	f001 fa9f 	bl	801a74c <I2C_TransferConfig>
 801920e:	e00f      	b.n	8019230 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019214:	b29a      	uxth	r2, r3
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801921e:	b2da      	uxtb	r2, r3
 8019220:	8979      	ldrh	r1, [r7, #10]
 8019222:	2300      	movs	r3, #0
 8019224:	9300      	str	r3, [sp, #0]
 8019226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801922a:	68f8      	ldr	r0, [r7, #12]
 801922c:	f001 fa8e 	bl	801a74c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8019230:	697a      	ldr	r2, [r7, #20]
 8019232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019234:	68f8      	ldr	r0, [r7, #12]
 8019236:	f001 f93b 	bl	801a4b0 <I2C_WaitOnTXISFlagUntilTimeout>
 801923a:	4603      	mov	r3, r0
 801923c:	2b00      	cmp	r3, #0
 801923e:	d001      	beq.n	8019244 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8019240:	2301      	movs	r3, #1
 8019242:	e07b      	b.n	801933c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019248:	781a      	ldrb	r2, [r3, #0]
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019254:	1c5a      	adds	r2, r3, #1
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801925e:	b29b      	uxth	r3, r3
 8019260:	3b01      	subs	r3, #1
 8019262:	b29a      	uxth	r2, r3
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801926c:	3b01      	subs	r3, #1
 801926e:	b29a      	uxth	r2, r3
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019278:	b29b      	uxth	r3, r3
 801927a:	2b00      	cmp	r3, #0
 801927c:	d034      	beq.n	80192e8 <HAL_I2C_Mem_Write+0x1c8>
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019282:	2b00      	cmp	r3, #0
 8019284:	d130      	bne.n	80192e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8019286:	697b      	ldr	r3, [r7, #20]
 8019288:	9300      	str	r3, [sp, #0]
 801928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801928c:	2200      	movs	r2, #0
 801928e:	2180      	movs	r1, #128	; 0x80
 8019290:	68f8      	ldr	r0, [r7, #12]
 8019292:	f001 f8cd 	bl	801a430 <I2C_WaitOnFlagUntilTimeout>
 8019296:	4603      	mov	r3, r0
 8019298:	2b00      	cmp	r3, #0
 801929a:	d001      	beq.n	80192a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 801929c:	2301      	movs	r3, #1
 801929e:	e04d      	b.n	801933c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192a4:	b29b      	uxth	r3, r3
 80192a6:	2bff      	cmp	r3, #255	; 0xff
 80192a8:	d90e      	bls.n	80192c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	22ff      	movs	r2, #255	; 0xff
 80192ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80192b4:	b2da      	uxtb	r2, r3
 80192b6:	8979      	ldrh	r1, [r7, #10]
 80192b8:	2300      	movs	r3, #0
 80192ba:	9300      	str	r3, [sp, #0]
 80192bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80192c0:	68f8      	ldr	r0, [r7, #12]
 80192c2:	f001 fa43 	bl	801a74c <I2C_TransferConfig>
 80192c6:	e00f      	b.n	80192e8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192cc:	b29a      	uxth	r2, r3
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80192d2:	68fb      	ldr	r3, [r7, #12]
 80192d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80192d6:	b2da      	uxtb	r2, r3
 80192d8:	8979      	ldrh	r1, [r7, #10]
 80192da:	2300      	movs	r3, #0
 80192dc:	9300      	str	r3, [sp, #0]
 80192de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80192e2:	68f8      	ldr	r0, [r7, #12]
 80192e4:	f001 fa32 	bl	801a74c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192ec:	b29b      	uxth	r3, r3
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d19e      	bne.n	8019230 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80192f2:	697a      	ldr	r2, [r7, #20]
 80192f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80192f6:	68f8      	ldr	r0, [r7, #12]
 80192f8:	f001 f91a 	bl	801a530 <I2C_WaitOnSTOPFlagUntilTimeout>
 80192fc:	4603      	mov	r3, r0
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d001      	beq.n	8019306 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8019302:	2301      	movs	r3, #1
 8019304:	e01a      	b.n	801933c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	2220      	movs	r2, #32
 801930c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	6859      	ldr	r1, [r3, #4]
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	681a      	ldr	r2, [r3, #0]
 8019318:	4b0a      	ldr	r3, [pc, #40]	; (8019344 <HAL_I2C_Mem_Write+0x224>)
 801931a:	400b      	ands	r3, r1
 801931c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	2220      	movs	r2, #32
 8019322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	2200      	movs	r2, #0
 801932a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	2200      	movs	r2, #0
 8019332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019336:	2300      	movs	r3, #0
 8019338:	e000      	b.n	801933c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801933a:	2302      	movs	r3, #2
  }
}
 801933c:	4618      	mov	r0, r3
 801933e:	3718      	adds	r7, #24
 8019340:	46bd      	mov	sp, r7
 8019342:	bd80      	pop	{r7, pc}
 8019344:	fe00e800 	.word	0xfe00e800

08019348 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b084      	sub	sp, #16
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	699b      	ldr	r3, [r3, #24]
 8019356:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019364:	2b00      	cmp	r3, #0
 8019366:	d005      	beq.n	8019374 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801936c:	68ba      	ldr	r2, [r7, #8]
 801936e:	68f9      	ldr	r1, [r7, #12]
 8019370:	6878      	ldr	r0, [r7, #4]
 8019372:	4798      	blx	r3
  }
}
 8019374:	bf00      	nop
 8019376:	3710      	adds	r7, #16
 8019378:	46bd      	mov	sp, r7
 801937a:	bd80      	pop	{r7, pc}

0801937c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801937c:	b480      	push	{r7}
 801937e:	b083      	sub	sp, #12
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8019384:	bf00      	nop
 8019386:	370c      	adds	r7, #12
 8019388:	46bd      	mov	sp, r7
 801938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938e:	4770      	bx	lr

08019390 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8019390:	b480      	push	{r7}
 8019392:	b083      	sub	sp, #12
 8019394:	af00      	add	r7, sp, #0
 8019396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8019398:	bf00      	nop
 801939a:	370c      	adds	r7, #12
 801939c:	46bd      	mov	sp, r7
 801939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a2:	4770      	bx	lr

080193a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80193a4:	b480      	push	{r7}
 80193a6:	b083      	sub	sp, #12
 80193a8:	af00      	add	r7, sp, #0
 80193aa:	6078      	str	r0, [r7, #4]
 80193ac:	460b      	mov	r3, r1
 80193ae:	70fb      	strb	r3, [r7, #3]
 80193b0:	4613      	mov	r3, r2
 80193b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80193b4:	bf00      	nop
 80193b6:	370c      	adds	r7, #12
 80193b8:	46bd      	mov	sp, r7
 80193ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193be:	4770      	bx	lr

080193c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80193c0:	b480      	push	{r7}
 80193c2:	b083      	sub	sp, #12
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80193c8:	bf00      	nop
 80193ca:	370c      	adds	r7, #12
 80193cc:	46bd      	mov	sp, r7
 80193ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d2:	4770      	bx	lr

080193d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80193d4:	b480      	push	{r7}
 80193d6:	b083      	sub	sp, #12
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80193dc:	bf00      	nop
 80193de:	370c      	adds	r7, #12
 80193e0:	46bd      	mov	sp, r7
 80193e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e6:	4770      	bx	lr

080193e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80193e8:	b480      	push	{r7}
 80193ea:	b083      	sub	sp, #12
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80193f0:	bf00      	nop
 80193f2:	370c      	adds	r7, #12
 80193f4:	46bd      	mov	sp, r7
 80193f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193fa:	4770      	bx	lr

080193fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80193fc:	b480      	push	{r7}
 80193fe:	b083      	sub	sp, #12
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8019404:	bf00      	nop
 8019406:	370c      	adds	r7, #12
 8019408:	46bd      	mov	sp, r7
 801940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801940e:	4770      	bx	lr

08019410 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8019410:	b480      	push	{r7}
 8019412:	b083      	sub	sp, #12
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8019418:	bf00      	nop
 801941a:	370c      	adds	r7, #12
 801941c:	46bd      	mov	sp, r7
 801941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019422:	4770      	bx	lr

08019424 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b088      	sub	sp, #32
 8019428:	af02      	add	r7, sp, #8
 801942a:	60f8      	str	r0, [r7, #12]
 801942c:	60b9      	str	r1, [r7, #8]
 801942e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8019430:	68bb      	ldr	r3, [r7, #8]
 8019432:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801943a:	2b01      	cmp	r3, #1
 801943c:	d101      	bne.n	8019442 <I2C_Master_ISR_IT+0x1e>
 801943e:	2302      	movs	r3, #2
 8019440:	e115      	b.n	801966e <I2C_Master_ISR_IT+0x24a>
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	2201      	movs	r2, #1
 8019446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801944a:	697b      	ldr	r3, [r7, #20]
 801944c:	091b      	lsrs	r3, r3, #4
 801944e:	f003 0301 	and.w	r3, r3, #1
 8019452:	2b00      	cmp	r3, #0
 8019454:	d013      	beq.n	801947e <I2C_Master_ISR_IT+0x5a>
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	091b      	lsrs	r3, r3, #4
 801945a:	f003 0301 	and.w	r3, r3, #1
 801945e:	2b00      	cmp	r3, #0
 8019460:	d00d      	beq.n	801947e <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	2210      	movs	r2, #16
 8019468:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801946e:	f043 0204 	orr.w	r2, r3, #4
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8019476:	68f8      	ldr	r0, [r7, #12]
 8019478:	f000 ff92 	bl	801a3a0 <I2C_Flush_TXDR>
 801947c:	e0e2      	b.n	8019644 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801947e:	697b      	ldr	r3, [r7, #20]
 8019480:	089b      	lsrs	r3, r3, #2
 8019482:	f003 0301 	and.w	r3, r3, #1
 8019486:	2b00      	cmp	r3, #0
 8019488:	d023      	beq.n	80194d2 <I2C_Master_ISR_IT+0xae>
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	089b      	lsrs	r3, r3, #2
 801948e:	f003 0301 	and.w	r3, r3, #1
 8019492:	2b00      	cmp	r3, #0
 8019494:	d01d      	beq.n	80194d2 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8019496:	697b      	ldr	r3, [r7, #20]
 8019498:	f023 0304 	bic.w	r3, r3, #4
 801949c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194a8:	b2d2      	uxtb	r2, r2
 80194aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194b0:	1c5a      	adds	r2, r3, #1
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80194ba:	3b01      	subs	r3, #1
 80194bc:	b29a      	uxth	r2, r3
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194c6:	b29b      	uxth	r3, r3
 80194c8:	3b01      	subs	r3, #1
 80194ca:	b29a      	uxth	r2, r3
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80194d0:	e0b8      	b.n	8019644 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80194d2:	697b      	ldr	r3, [r7, #20]
 80194d4:	085b      	lsrs	r3, r3, #1
 80194d6:	f003 0301 	and.w	r3, r3, #1
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d01e      	beq.n	801951c <I2C_Master_ISR_IT+0xf8>
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	085b      	lsrs	r3, r3, #1
 80194e2:	f003 0301 	and.w	r3, r3, #1
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d018      	beq.n	801951c <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194ee:	781a      	ldrb	r2, [r3, #0]
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194fa:	1c5a      	adds	r2, r3, #1
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019504:	3b01      	subs	r3, #1
 8019506:	b29a      	uxth	r2, r3
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019510:	b29b      	uxth	r3, r3
 8019512:	3b01      	subs	r3, #1
 8019514:	b29a      	uxth	r2, r3
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	855a      	strh	r2, [r3, #42]	; 0x2a
 801951a:	e093      	b.n	8019644 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801951c:	697b      	ldr	r3, [r7, #20]
 801951e:	09db      	lsrs	r3, r3, #7
 8019520:	f003 0301 	and.w	r3, r3, #1
 8019524:	2b00      	cmp	r3, #0
 8019526:	d05e      	beq.n	80195e6 <I2C_Master_ISR_IT+0x1c2>
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	099b      	lsrs	r3, r3, #6
 801952c:	f003 0301 	and.w	r3, r3, #1
 8019530:	2b00      	cmp	r3, #0
 8019532:	d058      	beq.n	80195e6 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019538:	b29b      	uxth	r3, r3
 801953a:	2b00      	cmp	r3, #0
 801953c:	d041      	beq.n	80195c2 <I2C_Master_ISR_IT+0x19e>
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019542:	2b00      	cmp	r3, #0
 8019544:	d13d      	bne.n	80195c2 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	685b      	ldr	r3, [r3, #4]
 801954c:	b29b      	uxth	r3, r3
 801954e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019552:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019558:	b29b      	uxth	r3, r3
 801955a:	2bff      	cmp	r3, #255	; 0xff
 801955c:	d90e      	bls.n	801957c <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	22ff      	movs	r2, #255	; 0xff
 8019562:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019568:	b2da      	uxtb	r2, r3
 801956a:	8a79      	ldrh	r1, [r7, #18]
 801956c:	2300      	movs	r3, #0
 801956e:	9300      	str	r3, [sp, #0]
 8019570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019574:	68f8      	ldr	r0, [r7, #12]
 8019576:	f001 f8e9 	bl	801a74c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801957a:	e033      	b.n	80195e4 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019580:	b29a      	uxth	r2, r3
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801958a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801958e:	d00c      	beq.n	80195aa <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019594:	b2da      	uxtb	r2, r3
 8019596:	68fb      	ldr	r3, [r7, #12]
 8019598:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801959a:	8a79      	ldrh	r1, [r7, #18]
 801959c:	2300      	movs	r3, #0
 801959e:	9300      	str	r3, [sp, #0]
 80195a0:	4603      	mov	r3, r0
 80195a2:	68f8      	ldr	r0, [r7, #12]
 80195a4:	f001 f8d2 	bl	801a74c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80195a8:	e01c      	b.n	80195e4 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80195ae:	b2da      	uxtb	r2, r3
 80195b0:	8a79      	ldrh	r1, [r7, #18]
 80195b2:	2300      	movs	r3, #0
 80195b4:	9300      	str	r3, [sp, #0]
 80195b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80195ba:	68f8      	ldr	r0, [r7, #12]
 80195bc:	f001 f8c6 	bl	801a74c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80195c0:	e010      	b.n	80195e4 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	685b      	ldr	r3, [r3, #4]
 80195c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80195cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80195d0:	d003      	beq.n	80195da <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80195d2:	68f8      	ldr	r0, [r7, #12]
 80195d4:	f000 fbe4 	bl	8019da0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80195d8:	e034      	b.n	8019644 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80195da:	2140      	movs	r1, #64	; 0x40
 80195dc:	68f8      	ldr	r0, [r7, #12]
 80195de:	f000 fe1f 	bl	801a220 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80195e2:	e02f      	b.n	8019644 <I2C_Master_ISR_IT+0x220>
 80195e4:	e02e      	b.n	8019644 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80195e6:	697b      	ldr	r3, [r7, #20]
 80195e8:	099b      	lsrs	r3, r3, #6
 80195ea:	f003 0301 	and.w	r3, r3, #1
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d028      	beq.n	8019644 <I2C_Master_ISR_IT+0x220>
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	099b      	lsrs	r3, r3, #6
 80195f6:	f003 0301 	and.w	r3, r3, #1
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d022      	beq.n	8019644 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019602:	b29b      	uxth	r3, r3
 8019604:	2b00      	cmp	r3, #0
 8019606:	d119      	bne.n	801963c <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	685b      	ldr	r3, [r3, #4]
 801960e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019616:	d015      	beq.n	8019644 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801961c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019620:	d108      	bne.n	8019634 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	685a      	ldr	r2, [r3, #4]
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019630:	605a      	str	r2, [r3, #4]
 8019632:	e007      	b.n	8019644 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8019634:	68f8      	ldr	r0, [r7, #12]
 8019636:	f000 fbb3 	bl	8019da0 <I2C_ITMasterSeqCplt>
 801963a:	e003      	b.n	8019644 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801963c:	2140      	movs	r1, #64	; 0x40
 801963e:	68f8      	ldr	r0, [r7, #12]
 8019640:	f000 fdee 	bl	801a220 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8019644:	697b      	ldr	r3, [r7, #20]
 8019646:	095b      	lsrs	r3, r3, #5
 8019648:	f003 0301 	and.w	r3, r3, #1
 801964c:	2b00      	cmp	r3, #0
 801964e:	d009      	beq.n	8019664 <I2C_Master_ISR_IT+0x240>
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	095b      	lsrs	r3, r3, #5
 8019654:	f003 0301 	and.w	r3, r3, #1
 8019658:	2b00      	cmp	r3, #0
 801965a:	d003      	beq.n	8019664 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 801965c:	6979      	ldr	r1, [r7, #20]
 801965e:	68f8      	ldr	r0, [r7, #12]
 8019660:	f000 fc18 	bl	8019e94 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	2200      	movs	r2, #0
 8019668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801966c:	2300      	movs	r3, #0
}
 801966e:	4618      	mov	r0, r3
 8019670:	3718      	adds	r7, #24
 8019672:	46bd      	mov	sp, r7
 8019674:	bd80      	pop	{r7, pc}

08019676 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8019676:	b580      	push	{r7, lr}
 8019678:	b086      	sub	sp, #24
 801967a:	af00      	add	r7, sp, #0
 801967c:	60f8      	str	r0, [r7, #12]
 801967e:	60b9      	str	r1, [r7, #8]
 8019680:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019686:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8019688:	68bb      	ldr	r3, [r7, #8]
 801968a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019692:	2b01      	cmp	r3, #1
 8019694:	d101      	bne.n	801969a <I2C_Slave_ISR_IT+0x24>
 8019696:	2302      	movs	r3, #2
 8019698:	e0ec      	b.n	8019874 <I2C_Slave_ISR_IT+0x1fe>
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	2201      	movs	r2, #1
 801969e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80196a2:	693b      	ldr	r3, [r7, #16]
 80196a4:	095b      	lsrs	r3, r3, #5
 80196a6:	f003 0301 	and.w	r3, r3, #1
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d009      	beq.n	80196c2 <I2C_Slave_ISR_IT+0x4c>
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	095b      	lsrs	r3, r3, #5
 80196b2:	f003 0301 	and.w	r3, r3, #1
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d003      	beq.n	80196c2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80196ba:	6939      	ldr	r1, [r7, #16]
 80196bc:	68f8      	ldr	r0, [r7, #12]
 80196be:	f000 fc85 	bl	8019fcc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80196c2:	693b      	ldr	r3, [r7, #16]
 80196c4:	091b      	lsrs	r3, r3, #4
 80196c6:	f003 0301 	and.w	r3, r3, #1
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d04d      	beq.n	801976a <I2C_Slave_ISR_IT+0xf4>
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	091b      	lsrs	r3, r3, #4
 80196d2:	f003 0301 	and.w	r3, r3, #1
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d047      	beq.n	801976a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80196de:	b29b      	uxth	r3, r3
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d128      	bne.n	8019736 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80196ea:	b2db      	uxtb	r3, r3
 80196ec:	2b28      	cmp	r3, #40	; 0x28
 80196ee:	d108      	bne.n	8019702 <I2C_Slave_ISR_IT+0x8c>
 80196f0:	697b      	ldr	r3, [r7, #20]
 80196f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80196f6:	d104      	bne.n	8019702 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80196f8:	6939      	ldr	r1, [r7, #16]
 80196fa:	68f8      	ldr	r0, [r7, #12]
 80196fc:	f000 fd3c 	bl	801a178 <I2C_ITListenCplt>
 8019700:	e032      	b.n	8019768 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019708:	b2db      	uxtb	r3, r3
 801970a:	2b29      	cmp	r3, #41	; 0x29
 801970c:	d10e      	bne.n	801972c <I2C_Slave_ISR_IT+0xb6>
 801970e:	697b      	ldr	r3, [r7, #20]
 8019710:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019714:	d00a      	beq.n	801972c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	2210      	movs	r2, #16
 801971c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801971e:	68f8      	ldr	r0, [r7, #12]
 8019720:	f000 fe3e 	bl	801a3a0 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8019724:	68f8      	ldr	r0, [r7, #12]
 8019726:	f000 fb78 	bl	8019e1a <I2C_ITSlaveSeqCplt>
 801972a:	e01d      	b.n	8019768 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	2210      	movs	r2, #16
 8019732:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8019734:	e096      	b.n	8019864 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	2210      	movs	r2, #16
 801973c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019742:	f043 0204 	orr.w	r2, r3, #4
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801974a:	697b      	ldr	r3, [r7, #20]
 801974c:	2b00      	cmp	r3, #0
 801974e:	d004      	beq.n	801975a <I2C_Slave_ISR_IT+0xe4>
 8019750:	697b      	ldr	r3, [r7, #20]
 8019752:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019756:	f040 8085 	bne.w	8019864 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801975e:	4619      	mov	r1, r3
 8019760:	68f8      	ldr	r0, [r7, #12]
 8019762:	f000 fd5d 	bl	801a220 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8019766:	e07d      	b.n	8019864 <I2C_Slave_ISR_IT+0x1ee>
 8019768:	e07c      	b.n	8019864 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801976a:	693b      	ldr	r3, [r7, #16]
 801976c:	089b      	lsrs	r3, r3, #2
 801976e:	f003 0301 	and.w	r3, r3, #1
 8019772:	2b00      	cmp	r3, #0
 8019774:	d030      	beq.n	80197d8 <I2C_Slave_ISR_IT+0x162>
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	089b      	lsrs	r3, r3, #2
 801977a:	f003 0301 	and.w	r3, r3, #1
 801977e:	2b00      	cmp	r3, #0
 8019780:	d02a      	beq.n	80197d8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019786:	b29b      	uxth	r3, r3
 8019788:	2b00      	cmp	r3, #0
 801978a:	d018      	beq.n	80197be <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019796:	b2d2      	uxtb	r2, r2
 8019798:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801979e:	1c5a      	adds	r2, r3, #1
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80197a8:	3b01      	subs	r3, #1
 80197aa:	b29a      	uxth	r2, r3
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80197b4:	b29b      	uxth	r3, r3
 80197b6:	3b01      	subs	r3, #1
 80197b8:	b29a      	uxth	r2, r3
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80197c2:	b29b      	uxth	r3, r3
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d14f      	bne.n	8019868 <I2C_Slave_ISR_IT+0x1f2>
 80197c8:	697b      	ldr	r3, [r7, #20]
 80197ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80197ce:	d04b      	beq.n	8019868 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80197d0:	68f8      	ldr	r0, [r7, #12]
 80197d2:	f000 fb22 	bl	8019e1a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80197d6:	e047      	b.n	8019868 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80197d8:	693b      	ldr	r3, [r7, #16]
 80197da:	08db      	lsrs	r3, r3, #3
 80197dc:	f003 0301 	and.w	r3, r3, #1
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d00a      	beq.n	80197fa <I2C_Slave_ISR_IT+0x184>
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	08db      	lsrs	r3, r3, #3
 80197e8:	f003 0301 	and.w	r3, r3, #1
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d004      	beq.n	80197fa <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80197f0:	6939      	ldr	r1, [r7, #16]
 80197f2:	68f8      	ldr	r0, [r7, #12]
 80197f4:	f000 fa52 	bl	8019c9c <I2C_ITAddrCplt>
 80197f8:	e037      	b.n	801986a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80197fa:	693b      	ldr	r3, [r7, #16]
 80197fc:	085b      	lsrs	r3, r3, #1
 80197fe:	f003 0301 	and.w	r3, r3, #1
 8019802:	2b00      	cmp	r3, #0
 8019804:	d031      	beq.n	801986a <I2C_Slave_ISR_IT+0x1f4>
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	085b      	lsrs	r3, r3, #1
 801980a:	f003 0301 	and.w	r3, r3, #1
 801980e:	2b00      	cmp	r3, #0
 8019810:	d02b      	beq.n	801986a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019816:	b29b      	uxth	r3, r3
 8019818:	2b00      	cmp	r3, #0
 801981a:	d018      	beq.n	801984e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019820:	781a      	ldrb	r2, [r3, #0]
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801982c:	1c5a      	adds	r2, r3, #1
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019836:	b29b      	uxth	r3, r3
 8019838:	3b01      	subs	r3, #1
 801983a:	b29a      	uxth	r2, r3
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019844:	3b01      	subs	r3, #1
 8019846:	b29a      	uxth	r2, r3
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	851a      	strh	r2, [r3, #40]	; 0x28
 801984c:	e00d      	b.n	801986a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801984e:	697b      	ldr	r3, [r7, #20]
 8019850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019854:	d002      	beq.n	801985c <I2C_Slave_ISR_IT+0x1e6>
 8019856:	697b      	ldr	r3, [r7, #20]
 8019858:	2b00      	cmp	r3, #0
 801985a:	d106      	bne.n	801986a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801985c:	68f8      	ldr	r0, [r7, #12]
 801985e:	f000 fadc 	bl	8019e1a <I2C_ITSlaveSeqCplt>
 8019862:	e002      	b.n	801986a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8019864:	bf00      	nop
 8019866:	e000      	b.n	801986a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8019868:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	2200      	movs	r2, #0
 801986e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8019872:	2300      	movs	r3, #0
}
 8019874:	4618      	mov	r0, r3
 8019876:	3718      	adds	r7, #24
 8019878:	46bd      	mov	sp, r7
 801987a:	bd80      	pop	{r7, pc}

0801987c <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b088      	sub	sp, #32
 8019880:	af02      	add	r7, sp, #8
 8019882:	60f8      	str	r0, [r7, #12]
 8019884:	60b9      	str	r1, [r7, #8]
 8019886:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801988e:	2b01      	cmp	r3, #1
 8019890:	d101      	bne.n	8019896 <I2C_Master_ISR_DMA+0x1a>
 8019892:	2302      	movs	r3, #2
 8019894:	e0e1      	b.n	8019a5a <I2C_Master_ISR_DMA+0x1de>
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	2201      	movs	r2, #1
 801989a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801989e:	68bb      	ldr	r3, [r7, #8]
 80198a0:	091b      	lsrs	r3, r3, #4
 80198a2:	f003 0301 	and.w	r3, r3, #1
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d017      	beq.n	80198da <I2C_Master_ISR_DMA+0x5e>
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	091b      	lsrs	r3, r3, #4
 80198ae:	f003 0301 	and.w	r3, r3, #1
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d011      	beq.n	80198da <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	2210      	movs	r2, #16
 80198bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198c2:	f043 0204 	orr.w	r2, r3, #4
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80198ca:	2112      	movs	r1, #18
 80198cc:	68f8      	ldr	r0, [r7, #12]
 80198ce:	f000 ff6b 	bl	801a7a8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80198d2:	68f8      	ldr	r0, [r7, #12]
 80198d4:	f000 fd64 	bl	801a3a0 <I2C_Flush_TXDR>
 80198d8:	e0ba      	b.n	8019a50 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80198da:	68bb      	ldr	r3, [r7, #8]
 80198dc:	09db      	lsrs	r3, r3, #7
 80198de:	f003 0301 	and.w	r3, r3, #1
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d072      	beq.n	80199cc <I2C_Master_ISR_DMA+0x150>
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	099b      	lsrs	r3, r3, #6
 80198ea:	f003 0301 	and.w	r3, r3, #1
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d06c      	beq.n	80199cc <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	681a      	ldr	r2, [r3, #0]
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019900:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019906:	b29b      	uxth	r3, r3
 8019908:	2b00      	cmp	r3, #0
 801990a:	d04e      	beq.n	80199aa <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	685b      	ldr	r3, [r3, #4]
 8019912:	b29b      	uxth	r3, r3
 8019914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019918:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801991e:	b29b      	uxth	r3, r3
 8019920:	2bff      	cmp	r3, #255	; 0xff
 8019922:	d906      	bls.n	8019932 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	22ff      	movs	r2, #255	; 0xff
 8019928:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 801992a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801992e:	617b      	str	r3, [r7, #20]
 8019930:	e010      	b.n	8019954 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019936:	b29a      	uxth	r2, r3
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019944:	d003      	beq.n	801994e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801994a:	617b      	str	r3, [r7, #20]
 801994c:	e002      	b.n	8019954 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801994e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019952:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019958:	b2da      	uxtb	r2, r3
 801995a:	8a79      	ldrh	r1, [r7, #18]
 801995c:	2300      	movs	r3, #0
 801995e:	9300      	str	r3, [sp, #0]
 8019960:	697b      	ldr	r3, [r7, #20]
 8019962:	68f8      	ldr	r0, [r7, #12]
 8019964:	f000 fef2 	bl	801a74c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801996c:	b29a      	uxth	r2, r3
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019972:	1ad3      	subs	r3, r2, r3
 8019974:	b29a      	uxth	r2, r3
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019980:	b2db      	uxtb	r3, r3
 8019982:	2b22      	cmp	r3, #34	; 0x22
 8019984:	d108      	bne.n	8019998 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	681a      	ldr	r2, [r3, #0]
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019994:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8019996:	e05b      	b.n	8019a50 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	681a      	ldr	r2, [r3, #0]
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80199a6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80199a8:	e052      	b.n	8019a50 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	685b      	ldr	r3, [r3, #4]
 80199b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80199b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80199b8:	d003      	beq.n	80199c2 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80199ba:	68f8      	ldr	r0, [r7, #12]
 80199bc:	f000 f9f0 	bl	8019da0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80199c0:	e046      	b.n	8019a50 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80199c2:	2140      	movs	r1, #64	; 0x40
 80199c4:	68f8      	ldr	r0, [r7, #12]
 80199c6:	f000 fc2b 	bl	801a220 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80199ca:	e041      	b.n	8019a50 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80199cc:	68bb      	ldr	r3, [r7, #8]
 80199ce:	099b      	lsrs	r3, r3, #6
 80199d0:	f003 0301 	and.w	r3, r3, #1
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d029      	beq.n	8019a2c <I2C_Master_ISR_DMA+0x1b0>
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	099b      	lsrs	r3, r3, #6
 80199dc:	f003 0301 	and.w	r3, r3, #1
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d023      	beq.n	8019a2c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80199e8:	b29b      	uxth	r3, r3
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d119      	bne.n	8019a22 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	685b      	ldr	r3, [r3, #4]
 80199f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80199f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80199fc:	d027      	beq.n	8019a4e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019a06:	d108      	bne.n	8019a1a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	685a      	ldr	r2, [r3, #4]
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019a16:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8019a18:	e019      	b.n	8019a4e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8019a1a:	68f8      	ldr	r0, [r7, #12]
 8019a1c:	f000 f9c0 	bl	8019da0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8019a20:	e015      	b.n	8019a4e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8019a22:	2140      	movs	r1, #64	; 0x40
 8019a24:	68f8      	ldr	r0, [r7, #12]
 8019a26:	f000 fbfb 	bl	801a220 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8019a2a:	e010      	b.n	8019a4e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	095b      	lsrs	r3, r3, #5
 8019a30:	f003 0301 	and.w	r3, r3, #1
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d00b      	beq.n	8019a50 <I2C_Master_ISR_DMA+0x1d4>
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	095b      	lsrs	r3, r3, #5
 8019a3c:	f003 0301 	and.w	r3, r3, #1
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d005      	beq.n	8019a50 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8019a44:	68b9      	ldr	r1, [r7, #8]
 8019a46:	68f8      	ldr	r0, [r7, #12]
 8019a48:	f000 fa24 	bl	8019e94 <I2C_ITMasterCplt>
 8019a4c:	e000      	b.n	8019a50 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8019a4e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	2200      	movs	r2, #0
 8019a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8019a58:	2300      	movs	r3, #0
}
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	3718      	adds	r7, #24
 8019a5e:	46bd      	mov	sp, r7
 8019a60:	bd80      	pop	{r7, pc}

08019a62 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8019a62:	b580      	push	{r7, lr}
 8019a64:	b086      	sub	sp, #24
 8019a66:	af00      	add	r7, sp, #0
 8019a68:	60f8      	str	r0, [r7, #12]
 8019a6a:	60b9      	str	r1, [r7, #8]
 8019a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a72:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8019a74:	2300      	movs	r3, #0
 8019a76:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019a7e:	2b01      	cmp	r3, #1
 8019a80:	d101      	bne.n	8019a86 <I2C_Slave_ISR_DMA+0x24>
 8019a82:	2302      	movs	r3, #2
 8019a84:	e0b1      	b.n	8019bea <I2C_Slave_ISR_DMA+0x188>
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	2201      	movs	r2, #1
 8019a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8019a8e:	68bb      	ldr	r3, [r7, #8]
 8019a90:	095b      	lsrs	r3, r3, #5
 8019a92:	f003 0301 	and.w	r3, r3, #1
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d009      	beq.n	8019aae <I2C_Slave_ISR_DMA+0x4c>
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	095b      	lsrs	r3, r3, #5
 8019a9e:	f003 0301 	and.w	r3, r3, #1
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d003      	beq.n	8019aae <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8019aa6:	68b9      	ldr	r1, [r7, #8]
 8019aa8:	68f8      	ldr	r0, [r7, #12]
 8019aaa:	f000 fa8f 	bl	8019fcc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8019aae:	68bb      	ldr	r3, [r7, #8]
 8019ab0:	091b      	lsrs	r3, r3, #4
 8019ab2:	f003 0301 	and.w	r3, r3, #1
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	f000 8082 	beq.w	8019bc0 <I2C_Slave_ISR_DMA+0x15e>
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	091b      	lsrs	r3, r3, #4
 8019ac0:	f003 0301 	and.w	r3, r3, #1
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d07b      	beq.n	8019bc0 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	0b9b      	lsrs	r3, r3, #14
 8019acc:	f003 0301 	and.w	r3, r3, #1
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d105      	bne.n	8019ae0 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	0bdb      	lsrs	r3, r3, #15
 8019ad8:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d068      	beq.n	8019bb2 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d00d      	beq.n	8019b04 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	0bdb      	lsrs	r3, r3, #15
 8019aec:	f003 0301 	and.w	r3, r3, #1
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d007      	beq.n	8019b04 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	685b      	ldr	r3, [r3, #4]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d101      	bne.n	8019b04 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8019b00:	2301      	movs	r3, #1
 8019b02:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d00d      	beq.n	8019b28 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	0b9b      	lsrs	r3, r3, #14
 8019b10:	f003 0301 	and.w	r3, r3, #1
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d007      	beq.n	8019b28 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	685b      	ldr	r3, [r3, #4]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d101      	bne.n	8019b28 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8019b24:	2301      	movs	r3, #1
 8019b26:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8019b28:	697b      	ldr	r3, [r7, #20]
 8019b2a:	2b01      	cmp	r3, #1
 8019b2c:	d128      	bne.n	8019b80 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019b34:	b2db      	uxtb	r3, r3
 8019b36:	2b28      	cmp	r3, #40	; 0x28
 8019b38:	d108      	bne.n	8019b4c <I2C_Slave_ISR_DMA+0xea>
 8019b3a:	693b      	ldr	r3, [r7, #16]
 8019b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019b40:	d104      	bne.n	8019b4c <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8019b42:	68b9      	ldr	r1, [r7, #8]
 8019b44:	68f8      	ldr	r0, [r7, #12]
 8019b46:	f000 fb17 	bl	801a178 <I2C_ITListenCplt>
 8019b4a:	e031      	b.n	8019bb0 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019b52:	b2db      	uxtb	r3, r3
 8019b54:	2b29      	cmp	r3, #41	; 0x29
 8019b56:	d10e      	bne.n	8019b76 <I2C_Slave_ISR_DMA+0x114>
 8019b58:	693b      	ldr	r3, [r7, #16]
 8019b5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019b5e:	d00a      	beq.n	8019b76 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	2210      	movs	r2, #16
 8019b66:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8019b68:	68f8      	ldr	r0, [r7, #12]
 8019b6a:	f000 fc19 	bl	801a3a0 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8019b6e:	68f8      	ldr	r0, [r7, #12]
 8019b70:	f000 f953 	bl	8019e1a <I2C_ITSlaveSeqCplt>
 8019b74:	e01c      	b.n	8019bb0 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	2210      	movs	r2, #16
 8019b7c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8019b7e:	e01d      	b.n	8019bbc <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	2210      	movs	r2, #16
 8019b86:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b8c:	f043 0204 	orr.w	r2, r3, #4
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8019b94:	693b      	ldr	r3, [r7, #16]
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d003      	beq.n	8019ba2 <I2C_Slave_ISR_DMA+0x140>
 8019b9a:	693b      	ldr	r3, [r7, #16]
 8019b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019ba0:	d10c      	bne.n	8019bbc <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ba6:	4619      	mov	r1, r3
 8019ba8:	68f8      	ldr	r0, [r7, #12]
 8019baa:	f000 fb39 	bl	801a220 <I2C_ITError>
      if (treatdmanack == 1U)
 8019bae:	e005      	b.n	8019bbc <I2C_Slave_ISR_DMA+0x15a>
 8019bb0:	e004      	b.n	8019bbc <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	2210      	movs	r2, #16
 8019bb8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8019bba:	e011      	b.n	8019be0 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8019bbc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8019bbe:	e00f      	b.n	8019be0 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8019bc0:	68bb      	ldr	r3, [r7, #8]
 8019bc2:	08db      	lsrs	r3, r3, #3
 8019bc4:	f003 0301 	and.w	r3, r3, #1
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d009      	beq.n	8019be0 <I2C_Slave_ISR_DMA+0x17e>
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	08db      	lsrs	r3, r3, #3
 8019bd0:	f003 0301 	and.w	r3, r3, #1
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d003      	beq.n	8019be0 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8019bd8:	68b9      	ldr	r1, [r7, #8]
 8019bda:	68f8      	ldr	r0, [r7, #12]
 8019bdc:	f000 f85e 	bl	8019c9c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	2200      	movs	r2, #0
 8019be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8019be8:	2300      	movs	r3, #0
}
 8019bea:	4618      	mov	r0, r3
 8019bec:	3718      	adds	r7, #24
 8019bee:	46bd      	mov	sp, r7
 8019bf0:	bd80      	pop	{r7, pc}
	...

08019bf4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b086      	sub	sp, #24
 8019bf8:	af02      	add	r7, sp, #8
 8019bfa:	60f8      	str	r0, [r7, #12]
 8019bfc:	4608      	mov	r0, r1
 8019bfe:	4611      	mov	r1, r2
 8019c00:	461a      	mov	r2, r3
 8019c02:	4603      	mov	r3, r0
 8019c04:	817b      	strh	r3, [r7, #10]
 8019c06:	460b      	mov	r3, r1
 8019c08:	813b      	strh	r3, [r7, #8]
 8019c0a:	4613      	mov	r3, r2
 8019c0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8019c0e:	88fb      	ldrh	r3, [r7, #6]
 8019c10:	b2da      	uxtb	r2, r3
 8019c12:	8979      	ldrh	r1, [r7, #10]
 8019c14:	4b20      	ldr	r3, [pc, #128]	; (8019c98 <I2C_RequestMemoryWrite+0xa4>)
 8019c16:	9300      	str	r3, [sp, #0]
 8019c18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019c1c:	68f8      	ldr	r0, [r7, #12]
 8019c1e:	f000 fd95 	bl	801a74c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019c22:	69fa      	ldr	r2, [r7, #28]
 8019c24:	69b9      	ldr	r1, [r7, #24]
 8019c26:	68f8      	ldr	r0, [r7, #12]
 8019c28:	f000 fc42 	bl	801a4b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8019c2c:	4603      	mov	r3, r0
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d001      	beq.n	8019c36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8019c32:	2301      	movs	r3, #1
 8019c34:	e02c      	b.n	8019c90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019c36:	88fb      	ldrh	r3, [r7, #6]
 8019c38:	2b01      	cmp	r3, #1
 8019c3a:	d105      	bne.n	8019c48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8019c3c:	893b      	ldrh	r3, [r7, #8]
 8019c3e:	b2da      	uxtb	r2, r3
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	629a      	str	r2, [r3, #40]	; 0x28
 8019c46:	e015      	b.n	8019c74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8019c48:	893b      	ldrh	r3, [r7, #8]
 8019c4a:	0a1b      	lsrs	r3, r3, #8
 8019c4c:	b29b      	uxth	r3, r3
 8019c4e:	b2da      	uxtb	r2, r3
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019c56:	69fa      	ldr	r2, [r7, #28]
 8019c58:	69b9      	ldr	r1, [r7, #24]
 8019c5a:	68f8      	ldr	r0, [r7, #12]
 8019c5c:	f000 fc28 	bl	801a4b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8019c60:	4603      	mov	r3, r0
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d001      	beq.n	8019c6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8019c66:	2301      	movs	r3, #1
 8019c68:	e012      	b.n	8019c90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8019c6a:	893b      	ldrh	r3, [r7, #8]
 8019c6c:	b2da      	uxtb	r2, r3
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8019c74:	69fb      	ldr	r3, [r7, #28]
 8019c76:	9300      	str	r3, [sp, #0]
 8019c78:	69bb      	ldr	r3, [r7, #24]
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	2180      	movs	r1, #128	; 0x80
 8019c7e:	68f8      	ldr	r0, [r7, #12]
 8019c80:	f000 fbd6 	bl	801a430 <I2C_WaitOnFlagUntilTimeout>
 8019c84:	4603      	mov	r3, r0
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d001      	beq.n	8019c8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8019c8a:	2301      	movs	r3, #1
 8019c8c:	e000      	b.n	8019c90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8019c8e:	2300      	movs	r3, #0
}
 8019c90:	4618      	mov	r0, r3
 8019c92:	3710      	adds	r7, #16
 8019c94:	46bd      	mov	sp, r7
 8019c96:	bd80      	pop	{r7, pc}
 8019c98:	80002000 	.word	0x80002000

08019c9c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	b084      	sub	sp, #16
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	6078      	str	r0, [r7, #4]
 8019ca4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019cac:	b2db      	uxtb	r3, r3
 8019cae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019cb2:	2b28      	cmp	r3, #40	; 0x28
 8019cb4:	d168      	bne.n	8019d88 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	699b      	ldr	r3, [r3, #24]
 8019cbc:	0c1b      	lsrs	r3, r3, #16
 8019cbe:	b2db      	uxtb	r3, r3
 8019cc0:	f003 0301 	and.w	r3, r3, #1
 8019cc4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	699b      	ldr	r3, [r3, #24]
 8019ccc:	0c1b      	lsrs	r3, r3, #16
 8019cce:	b29b      	uxth	r3, r3
 8019cd0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019cd4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	689b      	ldr	r3, [r3, #8]
 8019cdc:	b29b      	uxth	r3, r3
 8019cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019ce2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	68db      	ldr	r3, [r3, #12]
 8019cea:	b29b      	uxth	r3, r3
 8019cec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019cf0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	68db      	ldr	r3, [r3, #12]
 8019cf6:	2b02      	cmp	r3, #2
 8019cf8:	d137      	bne.n	8019d6a <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8019cfa:	897b      	ldrh	r3, [r7, #10]
 8019cfc:	09db      	lsrs	r3, r3, #7
 8019cfe:	b29a      	uxth	r2, r3
 8019d00:	89bb      	ldrh	r3, [r7, #12]
 8019d02:	4053      	eors	r3, r2
 8019d04:	b29b      	uxth	r3, r3
 8019d06:	f003 0306 	and.w	r3, r3, #6
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d11c      	bne.n	8019d48 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8019d0e:	897b      	ldrh	r3, [r7, #10]
 8019d10:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019d16:	1c5a      	adds	r2, r3, #1
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019d20:	2b02      	cmp	r3, #2
 8019d22:	d139      	bne.n	8019d98 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	2200      	movs	r2, #0
 8019d28:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	2208      	movs	r2, #8
 8019d30:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	2200      	movs	r2, #0
 8019d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8019d3a:	89ba      	ldrh	r2, [r7, #12]
 8019d3c:	7bfb      	ldrb	r3, [r7, #15]
 8019d3e:	4619      	mov	r1, r3
 8019d40:	6878      	ldr	r0, [r7, #4]
 8019d42:	f7ff fb2f 	bl	80193a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8019d46:	e027      	b.n	8019d98 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8019d48:	893b      	ldrh	r3, [r7, #8]
 8019d4a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8019d4c:	2104      	movs	r1, #4
 8019d4e:	6878      	ldr	r0, [r7, #4]
 8019d50:	f000 fd98 	bl	801a884 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	2200      	movs	r2, #0
 8019d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8019d5c:	89ba      	ldrh	r2, [r7, #12]
 8019d5e:	7bfb      	ldrb	r3, [r7, #15]
 8019d60:	4619      	mov	r1, r3
 8019d62:	6878      	ldr	r0, [r7, #4]
 8019d64:	f7ff fb1e 	bl	80193a4 <HAL_I2C_AddrCallback>
}
 8019d68:	e016      	b.n	8019d98 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8019d6a:	2104      	movs	r1, #4
 8019d6c:	6878      	ldr	r0, [r7, #4]
 8019d6e:	f000 fd89 	bl	801a884 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	2200      	movs	r2, #0
 8019d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8019d7a:	89ba      	ldrh	r2, [r7, #12]
 8019d7c:	7bfb      	ldrb	r3, [r7, #15]
 8019d7e:	4619      	mov	r1, r3
 8019d80:	6878      	ldr	r0, [r7, #4]
 8019d82:	f7ff fb0f 	bl	80193a4 <HAL_I2C_AddrCallback>
}
 8019d86:	e007      	b.n	8019d98 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	2208      	movs	r2, #8
 8019d8e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	2200      	movs	r2, #0
 8019d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8019d98:	bf00      	nop
 8019d9a:	3710      	adds	r7, #16
 8019d9c:	46bd      	mov	sp, r7
 8019d9e:	bd80      	pop	{r7, pc}

08019da0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b082      	sub	sp, #8
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2200      	movs	r2, #0
 8019dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019db6:	b2db      	uxtb	r3, r3
 8019db8:	2b21      	cmp	r3, #33	; 0x21
 8019dba:	d115      	bne.n	8019de8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	2220      	movs	r2, #32
 8019dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	2211      	movs	r2, #17
 8019dc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	2200      	movs	r2, #0
 8019dce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8019dd0:	2101      	movs	r1, #1
 8019dd2:	6878      	ldr	r0, [r7, #4]
 8019dd4:	f000 fd56 	bl	801a884 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	2200      	movs	r2, #0
 8019ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8019de0:	6878      	ldr	r0, [r7, #4]
 8019de2:	f7f9 ffef 	bl	8013dc4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019de6:	e014      	b.n	8019e12 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	2220      	movs	r2, #32
 8019dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	2212      	movs	r2, #18
 8019df4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	2200      	movs	r2, #0
 8019dfa:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8019dfc:	2102      	movs	r1, #2
 8019dfe:	6878      	ldr	r0, [r7, #4]
 8019e00:	f000 fd40 	bl	801a884 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	2200      	movs	r2, #0
 8019e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8019e0c:	6878      	ldr	r0, [r7, #4]
 8019e0e:	f7f9 ffef 	bl	8013df0 <HAL_I2C_MasterRxCpltCallback>
}
 8019e12:	bf00      	nop
 8019e14:	3708      	adds	r7, #8
 8019e16:	46bd      	mov	sp, r7
 8019e18:	bd80      	pop	{r7, pc}

08019e1a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8019e1a:	b580      	push	{r7, lr}
 8019e1c:	b082      	sub	sp, #8
 8019e1e:	af00      	add	r7, sp, #0
 8019e20:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	2200      	movs	r2, #0
 8019e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019e30:	b2db      	uxtb	r3, r3
 8019e32:	2b29      	cmp	r3, #41	; 0x29
 8019e34:	d112      	bne.n	8019e5c <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	2228      	movs	r2, #40	; 0x28
 8019e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	2221      	movs	r2, #33	; 0x21
 8019e42:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8019e44:	2101      	movs	r1, #1
 8019e46:	6878      	ldr	r0, [r7, #4]
 8019e48:	f000 fd1c 	bl	801a884 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	2200      	movs	r2, #0
 8019e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8019e54:	6878      	ldr	r0, [r7, #4]
 8019e56:	f7ff fa91 	bl	801937c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8019e5a:	e017      	b.n	8019e8c <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019e62:	b2db      	uxtb	r3, r3
 8019e64:	2b2a      	cmp	r3, #42	; 0x2a
 8019e66:	d111      	bne.n	8019e8c <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	2228      	movs	r2, #40	; 0x28
 8019e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	2222      	movs	r2, #34	; 0x22
 8019e74:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8019e76:	2102      	movs	r1, #2
 8019e78:	6878      	ldr	r0, [r7, #4]
 8019e7a:	f000 fd03 	bl	801a884 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	2200      	movs	r2, #0
 8019e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019e86:	6878      	ldr	r0, [r7, #4]
 8019e88:	f7ff fa82 	bl	8019390 <HAL_I2C_SlaveRxCpltCallback>
}
 8019e8c:	bf00      	nop
 8019e8e:	3708      	adds	r7, #8
 8019e90:	46bd      	mov	sp, r7
 8019e92:	bd80      	pop	{r7, pc}

08019e94 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b084      	sub	sp, #16
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	6078      	str	r0, [r7, #4]
 8019e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	2220      	movs	r2, #32
 8019ea4:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	6859      	ldr	r1, [r3, #4]
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	681a      	ldr	r2, [r3, #0]
 8019eb0:	4b44      	ldr	r3, [pc, #272]	; (8019fc4 <I2C_ITMasterCplt+0x130>)
 8019eb2:	400b      	ands	r3, r1
 8019eb4:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	2200      	movs	r2, #0
 8019eba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	2200      	movs	r2, #0
 8019ec0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	4a40      	ldr	r2, [pc, #256]	; (8019fc8 <I2C_ITMasterCplt+0x134>)
 8019ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8019ec8:	683b      	ldr	r3, [r7, #0]
 8019eca:	091b      	lsrs	r3, r3, #4
 8019ecc:	f003 0301 	and.w	r3, r3, #1
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d009      	beq.n	8019ee8 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	2210      	movs	r2, #16
 8019eda:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ee0:	f043 0204 	orr.w	r2, r3, #4
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8019ee8:	6878      	ldr	r0, [r7, #4]
 8019eea:	f000 fa59 	bl	801a3a0 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8019eee:	2103      	movs	r1, #3
 8019ef0:	6878      	ldr	r0, [r7, #4]
 8019ef2:	f000 fcc7 	bl	801a884 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019efa:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019f02:	b2db      	uxtb	r3, r3
 8019f04:	2b60      	cmp	r3, #96	; 0x60
 8019f06:	d002      	beq.n	8019f0e <I2C_ITMasterCplt+0x7a>
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d006      	beq.n	8019f1c <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f12:	4619      	mov	r1, r3
 8019f14:	6878      	ldr	r0, [r7, #4]
 8019f16:	f000 f983 	bl	801a220 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8019f1a:	e04e      	b.n	8019fba <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019f22:	b2db      	uxtb	r3, r3
 8019f24:	2b21      	cmp	r3, #33	; 0x21
 8019f26:	d121      	bne.n	8019f6c <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	2220      	movs	r2, #32
 8019f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019f36:	b2db      	uxtb	r3, r3
 8019f38:	2b40      	cmp	r3, #64	; 0x40
 8019f3a:	d10b      	bne.n	8019f54 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	2200      	movs	r2, #0
 8019f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	2200      	movs	r2, #0
 8019f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8019f4c:	6878      	ldr	r0, [r7, #4]
 8019f4e:	f7ff fa41 	bl	80193d4 <HAL_I2C_MemTxCpltCallback>
}
 8019f52:	e032      	b.n	8019fba <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	2200      	movs	r2, #0
 8019f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	2200      	movs	r2, #0
 8019f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8019f64:	6878      	ldr	r0, [r7, #4]
 8019f66:	f7f9 ff2d 	bl	8013dc4 <HAL_I2C_MasterTxCpltCallback>
}
 8019f6a:	e026      	b.n	8019fba <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019f72:	b2db      	uxtb	r3, r3
 8019f74:	2b22      	cmp	r3, #34	; 0x22
 8019f76:	d120      	bne.n	8019fba <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	2220      	movs	r2, #32
 8019f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019f86:	b2db      	uxtb	r3, r3
 8019f88:	2b40      	cmp	r3, #64	; 0x40
 8019f8a:	d10b      	bne.n	8019fa4 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	2200      	movs	r2, #0
 8019f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	2200      	movs	r2, #0
 8019f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8019f9c:	6878      	ldr	r0, [r7, #4]
 8019f9e:	f7ff fa23 	bl	80193e8 <HAL_I2C_MemRxCpltCallback>
}
 8019fa2:	e00a      	b.n	8019fba <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	2200      	movs	r2, #0
 8019fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	2200      	movs	r2, #0
 8019fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8019fb4:	6878      	ldr	r0, [r7, #4]
 8019fb6:	f7f9 ff1b 	bl	8013df0 <HAL_I2C_MasterRxCpltCallback>
}
 8019fba:	bf00      	nop
 8019fbc:	3710      	adds	r7, #16
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bd80      	pop	{r7, pc}
 8019fc2:	bf00      	nop
 8019fc4:	fe00e800 	.word	0xfe00e800
 8019fc8:	ffff0000 	.word	0xffff0000

08019fcc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b084      	sub	sp, #16
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
 8019fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8019fde:	683b      	ldr	r3, [r7, #0]
 8019fe0:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	2220      	movs	r2, #32
 8019fe8:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8019fea:	2107      	movs	r1, #7
 8019fec:	6878      	ldr	r0, [r7, #4]
 8019fee:	f000 fc49 	bl	801a884 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	685a      	ldr	r2, [r3, #4]
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a000:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	6859      	ldr	r1, [r3, #4]
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	681a      	ldr	r2, [r3, #0]
 801a00c:	4b58      	ldr	r3, [pc, #352]	; (801a170 <I2C_ITSlaveCplt+0x1a4>)
 801a00e:	400b      	ands	r3, r1
 801a010:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801a012:	6878      	ldr	r0, [r7, #4]
 801a014:	f000 f9c4 	bl	801a3a0 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801a018:	68bb      	ldr	r3, [r7, #8]
 801a01a:	0b9b      	lsrs	r3, r3, #14
 801a01c:	f003 0301 	and.w	r3, r3, #1
 801a020:	2b00      	cmp	r3, #0
 801a022:	d00b      	beq.n	801a03c <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d018      	beq.n	801a05e <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	685b      	ldr	r3, [r3, #4]
 801a034:	b29a      	uxth	r2, r3
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a03a:	e010      	b.n	801a05e <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801a03c:	68bb      	ldr	r3, [r7, #8]
 801a03e:	0bdb      	lsrs	r3, r3, #15
 801a040:	f003 0301 	and.w	r3, r3, #1
 801a044:	2b00      	cmp	r3, #0
 801a046:	d00a      	beq.n	801a05e <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d006      	beq.n	801a05e <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	685b      	ldr	r3, [r3, #4]
 801a058:	b29a      	uxth	r2, r3
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	089b      	lsrs	r3, r3, #2
 801a062:	f003 0301 	and.w	r3, r3, #1
 801a066:	2b00      	cmp	r3, #0
 801a068:	d020      	beq.n	801a0ac <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801a06a:	68fb      	ldr	r3, [r7, #12]
 801a06c:	f023 0304 	bic.w	r3, r3, #4
 801a070:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a07c:	b2d2      	uxtb	r2, r2
 801a07e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a084:	1c5a      	adds	r2, r3, #1
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d00c      	beq.n	801a0ac <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a096:	3b01      	subs	r3, #1
 801a098:	b29a      	uxth	r2, r3
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a0a2:	b29b      	uxth	r3, r3
 801a0a4:	3b01      	subs	r3, #1
 801a0a6:	b29a      	uxth	r2, r3
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a0b0:	b29b      	uxth	r3, r3
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d005      	beq.n	801a0c2 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0ba:	f043 0204 	orr.w	r2, r3, #4
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	2200      	movs	r2, #0
 801a0c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	2200      	movs	r2, #0
 801a0d4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d010      	beq.n	801a100 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0e2:	4619      	mov	r1, r3
 801a0e4:	6878      	ldr	r0, [r7, #4]
 801a0e6:	f000 f89b 	bl	801a220 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a0f0:	b2db      	uxtb	r3, r3
 801a0f2:	2b28      	cmp	r3, #40	; 0x28
 801a0f4:	d138      	bne.n	801a168 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801a0f6:	68f9      	ldr	r1, [r7, #12]
 801a0f8:	6878      	ldr	r0, [r7, #4]
 801a0fa:	f000 f83d 	bl	801a178 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801a0fe:	e033      	b.n	801a168 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a104:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801a108:	d011      	beq.n	801a12e <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 801a10a:	6878      	ldr	r0, [r7, #4]
 801a10c:	f7ff fe85 	bl	8019e1a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	4a18      	ldr	r2, [pc, #96]	; (801a174 <I2C_ITSlaveCplt+0x1a8>)
 801a114:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	2220      	movs	r2, #32
 801a11a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2200      	movs	r2, #0
 801a122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801a126:	6878      	ldr	r0, [r7, #4]
 801a128:	f7ff f94a 	bl	80193c0 <HAL_I2C_ListenCpltCallback>
}
 801a12c:	e01c      	b.n	801a168 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a134:	b2db      	uxtb	r3, r3
 801a136:	2b22      	cmp	r3, #34	; 0x22
 801a138:	d10b      	bne.n	801a152 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	2220      	movs	r2, #32
 801a13e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	2200      	movs	r2, #0
 801a146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801a14a:	6878      	ldr	r0, [r7, #4]
 801a14c:	f7ff f920 	bl	8019390 <HAL_I2C_SlaveRxCpltCallback>
}
 801a150:	e00a      	b.n	801a168 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	2220      	movs	r2, #32
 801a156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	2200      	movs	r2, #0
 801a15e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801a162:	6878      	ldr	r0, [r7, #4]
 801a164:	f7ff f90a 	bl	801937c <HAL_I2C_SlaveTxCpltCallback>
}
 801a168:	bf00      	nop
 801a16a:	3710      	adds	r7, #16
 801a16c:	46bd      	mov	sp, r7
 801a16e:	bd80      	pop	{r7, pc}
 801a170:	fe00e800 	.word	0xfe00e800
 801a174:	ffff0000 	.word	0xffff0000

0801a178 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801a178:	b580      	push	{r7, lr}
 801a17a:	b082      	sub	sp, #8
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	6078      	str	r0, [r7, #4]
 801a180:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	4a25      	ldr	r2, [pc, #148]	; (801a21c <I2C_ITListenCplt+0xa4>)
 801a186:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	2200      	movs	r2, #0
 801a18c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	2220      	movs	r2, #32
 801a192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	2200      	movs	r2, #0
 801a19a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	2200      	movs	r2, #0
 801a1a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801a1a4:	683b      	ldr	r3, [r7, #0]
 801a1a6:	089b      	lsrs	r3, r3, #2
 801a1a8:	f003 0301 	and.w	r3, r3, #1
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d022      	beq.n	801a1f6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1ba:	b2d2      	uxtb	r2, r2
 801a1bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1c2:	1c5a      	adds	r2, r3, #1
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d012      	beq.n	801a1f6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a1d4:	3b01      	subs	r3, #1
 801a1d6:	b29a      	uxth	r2, r3
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	3b01      	subs	r3, #1
 801a1e4:	b29a      	uxth	r2, r3
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a1ee:	f043 0204 	orr.w	r2, r3, #4
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801a1f6:	2107      	movs	r1, #7
 801a1f8:	6878      	ldr	r0, [r7, #4]
 801a1fa:	f000 fb43 	bl	801a884 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	2210      	movs	r2, #16
 801a204:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	2200      	movs	r2, #0
 801a20a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801a20e:	6878      	ldr	r0, [r7, #4]
 801a210:	f7ff f8d6 	bl	80193c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801a214:	bf00      	nop
 801a216:	3708      	adds	r7, #8
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}
 801a21c:	ffff0000 	.word	0xffff0000

0801a220 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801a220:	b580      	push	{r7, lr}
 801a222:	b084      	sub	sp, #16
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]
 801a228:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a230:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	2200      	movs	r2, #0
 801a236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	4a55      	ldr	r2, [pc, #340]	; (801a394 <I2C_ITError+0x174>)
 801a23e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	2200      	movs	r2, #0
 801a244:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a24a:	683b      	ldr	r3, [r7, #0]
 801a24c:	431a      	orrs	r2, r3
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801a252:	7bfb      	ldrb	r3, [r7, #15]
 801a254:	2b28      	cmp	r3, #40	; 0x28
 801a256:	d005      	beq.n	801a264 <I2C_ITError+0x44>
 801a258:	7bfb      	ldrb	r3, [r7, #15]
 801a25a:	2b29      	cmp	r3, #41	; 0x29
 801a25c:	d002      	beq.n	801a264 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801a25e:	7bfb      	ldrb	r3, [r7, #15]
 801a260:	2b2a      	cmp	r3, #42	; 0x2a
 801a262:	d10e      	bne.n	801a282 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801a264:	2103      	movs	r1, #3
 801a266:	6878      	ldr	r0, [r7, #4]
 801a268:	f000 fb0c 	bl	801a884 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	2228      	movs	r2, #40	; 0x28
 801a270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	2200      	movs	r2, #0
 801a278:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	4a46      	ldr	r2, [pc, #280]	; (801a398 <I2C_ITError+0x178>)
 801a27e:	635a      	str	r2, [r3, #52]	; 0x34
 801a280:	e013      	b.n	801a2aa <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801a282:	2107      	movs	r1, #7
 801a284:	6878      	ldr	r0, [r7, #4]
 801a286:	f000 fafd 	bl	801a884 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a290:	b2db      	uxtb	r3, r3
 801a292:	2b60      	cmp	r3, #96	; 0x60
 801a294:	d003      	beq.n	801a29e <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	2220      	movs	r2, #32
 801a29a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	2200      	movs	r2, #0
 801a2a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	2200      	movs	r2, #0
 801a2a8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a2b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a2b8:	d123      	bne.n	801a302 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	681a      	ldr	r2, [r3, #0]
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a2c8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d05c      	beq.n	801a38c <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2d6:	4a31      	ldr	r2, [pc, #196]	; (801a39c <I2C_ITError+0x17c>)
 801a2d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	2200      	movs	r2, #0
 801a2de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2e6:	4618      	mov	r0, r3
 801a2e8:	f7fd fecc 	bl	8018084 <HAL_DMA_Abort_IT>
 801a2ec:	4603      	mov	r3, r0
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d04c      	beq.n	801a38c <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2f8:	687a      	ldr	r2, [r7, #4]
 801a2fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801a2fc:	4610      	mov	r0, r2
 801a2fe:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801a300:	e044      	b.n	801a38c <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a30c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a310:	d123      	bne.n	801a35a <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	681a      	ldr	r2, [r3, #0]
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a320:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a326:	2b00      	cmp	r3, #0
 801a328:	d030      	beq.n	801a38c <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a32e:	4a1b      	ldr	r2, [pc, #108]	; (801a39c <I2C_ITError+0x17c>)
 801a330:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	2200      	movs	r2, #0
 801a336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a33e:	4618      	mov	r0, r3
 801a340:	f7fd fea0 	bl	8018084 <HAL_DMA_Abort_IT>
 801a344:	4603      	mov	r3, r0
 801a346:	2b00      	cmp	r3, #0
 801a348:	d020      	beq.n	801a38c <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a350:	687a      	ldr	r2, [r7, #4]
 801a352:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801a354:	4610      	mov	r0, r2
 801a356:	4798      	blx	r3
}
 801a358:	e018      	b.n	801a38c <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a360:	b2db      	uxtb	r3, r3
 801a362:	2b60      	cmp	r3, #96	; 0x60
 801a364:	d10b      	bne.n	801a37e <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	2220      	movs	r2, #32
 801a36a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	2200      	movs	r2, #0
 801a372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 801a376:	6878      	ldr	r0, [r7, #4]
 801a378:	f7ff f84a 	bl	8019410 <HAL_I2C_AbortCpltCallback>
}
 801a37c:	e006      	b.n	801a38c <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	2200      	movs	r2, #0
 801a382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 801a386:	6878      	ldr	r0, [r7, #4]
 801a388:	f7ff f838 	bl	80193fc <HAL_I2C_ErrorCallback>
}
 801a38c:	bf00      	nop
 801a38e:	3710      	adds	r7, #16
 801a390:	46bd      	mov	sp, r7
 801a392:	bd80      	pop	{r7, pc}
 801a394:	ffff0000 	.word	0xffff0000
 801a398:	08019677 	.word	0x08019677
 801a39c:	0801a3e9 	.word	0x0801a3e9

0801a3a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801a3a0:	b480      	push	{r7}
 801a3a2:	b083      	sub	sp, #12
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	699b      	ldr	r3, [r3, #24]
 801a3ae:	f003 0302 	and.w	r3, r3, #2
 801a3b2:	2b02      	cmp	r3, #2
 801a3b4:	d103      	bne.n	801a3be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	2200      	movs	r2, #0
 801a3bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	699b      	ldr	r3, [r3, #24]
 801a3c4:	f003 0301 	and.w	r3, r3, #1
 801a3c8:	2b01      	cmp	r3, #1
 801a3ca:	d007      	beq.n	801a3dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	699a      	ldr	r2, [r3, #24]
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	f042 0201 	orr.w	r2, r2, #1
 801a3da:	619a      	str	r2, [r3, #24]
  }
}
 801a3dc:	bf00      	nop
 801a3de:	370c      	adds	r7, #12
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e6:	4770      	bx	lr

0801a3e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801a3e8:	b580      	push	{r7, lr}
 801a3ea:	b084      	sub	sp, #16
 801a3ec:	af00      	add	r7, sp, #0
 801a3ee:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3f4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3fa:	2200      	movs	r2, #0
 801a3fc:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a402:	2200      	movs	r2, #0
 801a404:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a40c:	b2db      	uxtb	r3, r3
 801a40e:	2b60      	cmp	r3, #96	; 0x60
 801a410:	d107      	bne.n	801a422 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	2220      	movs	r2, #32
 801a416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801a41a:	68f8      	ldr	r0, [r7, #12]
 801a41c:	f7fe fff8 	bl	8019410 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801a420:	e002      	b.n	801a428 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 801a422:	68f8      	ldr	r0, [r7, #12]
 801a424:	f7fe ffea 	bl	80193fc <HAL_I2C_ErrorCallback>
}
 801a428:	bf00      	nop
 801a42a:	3710      	adds	r7, #16
 801a42c:	46bd      	mov	sp, r7
 801a42e:	bd80      	pop	{r7, pc}

0801a430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b084      	sub	sp, #16
 801a434:	af00      	add	r7, sp, #0
 801a436:	60f8      	str	r0, [r7, #12]
 801a438:	60b9      	str	r1, [r7, #8]
 801a43a:	603b      	str	r3, [r7, #0]
 801a43c:	4613      	mov	r3, r2
 801a43e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a440:	e022      	b.n	801a488 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a442:	683b      	ldr	r3, [r7, #0]
 801a444:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a448:	d01e      	beq.n	801a488 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a44a:	f7fb ff0f 	bl	801626c <HAL_GetTick>
 801a44e:	4602      	mov	r2, r0
 801a450:	69bb      	ldr	r3, [r7, #24]
 801a452:	1ad3      	subs	r3, r2, r3
 801a454:	683a      	ldr	r2, [r7, #0]
 801a456:	429a      	cmp	r2, r3
 801a458:	d302      	bcc.n	801a460 <I2C_WaitOnFlagUntilTimeout+0x30>
 801a45a:	683b      	ldr	r3, [r7, #0]
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d113      	bne.n	801a488 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a464:	f043 0220 	orr.w	r2, r3, #32
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	2220      	movs	r2, #32
 801a470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	2200      	movs	r2, #0
 801a478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	2200      	movs	r2, #0
 801a480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801a484:	2301      	movs	r3, #1
 801a486:	e00f      	b.n	801a4a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	699a      	ldr	r2, [r3, #24]
 801a48e:	68bb      	ldr	r3, [r7, #8]
 801a490:	4013      	ands	r3, r2
 801a492:	68ba      	ldr	r2, [r7, #8]
 801a494:	429a      	cmp	r2, r3
 801a496:	bf0c      	ite	eq
 801a498:	2301      	moveq	r3, #1
 801a49a:	2300      	movne	r3, #0
 801a49c:	b2db      	uxtb	r3, r3
 801a49e:	461a      	mov	r2, r3
 801a4a0:	79fb      	ldrb	r3, [r7, #7]
 801a4a2:	429a      	cmp	r2, r3
 801a4a4:	d0cd      	beq.n	801a442 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801a4a6:	2300      	movs	r3, #0
}
 801a4a8:	4618      	mov	r0, r3
 801a4aa:	3710      	adds	r7, #16
 801a4ac:	46bd      	mov	sp, r7
 801a4ae:	bd80      	pop	{r7, pc}

0801a4b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	b084      	sub	sp, #16
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	60f8      	str	r0, [r7, #12]
 801a4b8:	60b9      	str	r1, [r7, #8]
 801a4ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801a4bc:	e02c      	b.n	801a518 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801a4be:	687a      	ldr	r2, [r7, #4]
 801a4c0:	68b9      	ldr	r1, [r7, #8]
 801a4c2:	68f8      	ldr	r0, [r7, #12]
 801a4c4:	f000 f8dc 	bl	801a680 <I2C_IsAcknowledgeFailed>
 801a4c8:	4603      	mov	r3, r0
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d001      	beq.n	801a4d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801a4ce:	2301      	movs	r3, #1
 801a4d0:	e02a      	b.n	801a528 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a4d2:	68bb      	ldr	r3, [r7, #8]
 801a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4d8:	d01e      	beq.n	801a518 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a4da:	f7fb fec7 	bl	801626c <HAL_GetTick>
 801a4de:	4602      	mov	r2, r0
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	1ad3      	subs	r3, r2, r3
 801a4e4:	68ba      	ldr	r2, [r7, #8]
 801a4e6:	429a      	cmp	r2, r3
 801a4e8:	d302      	bcc.n	801a4f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801a4ea:	68bb      	ldr	r3, [r7, #8]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d113      	bne.n	801a518 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4f4:	f043 0220 	orr.w	r2, r3, #32
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a4fc:	68fb      	ldr	r3, [r7, #12]
 801a4fe:	2220      	movs	r2, #32
 801a500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801a504:	68fb      	ldr	r3, [r7, #12]
 801a506:	2200      	movs	r2, #0
 801a508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	2200      	movs	r2, #0
 801a510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801a514:	2301      	movs	r3, #1
 801a516:	e007      	b.n	801a528 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	699b      	ldr	r3, [r3, #24]
 801a51e:	f003 0302 	and.w	r3, r3, #2
 801a522:	2b02      	cmp	r3, #2
 801a524:	d1cb      	bne.n	801a4be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a526:	2300      	movs	r3, #0
}
 801a528:	4618      	mov	r0, r3
 801a52a:	3710      	adds	r7, #16
 801a52c:	46bd      	mov	sp, r7
 801a52e:	bd80      	pop	{r7, pc}

0801a530 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a530:	b580      	push	{r7, lr}
 801a532:	b084      	sub	sp, #16
 801a534:	af00      	add	r7, sp, #0
 801a536:	60f8      	str	r0, [r7, #12]
 801a538:	60b9      	str	r1, [r7, #8]
 801a53a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a53c:	e028      	b.n	801a590 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801a53e:	687a      	ldr	r2, [r7, #4]
 801a540:	68b9      	ldr	r1, [r7, #8]
 801a542:	68f8      	ldr	r0, [r7, #12]
 801a544:	f000 f89c 	bl	801a680 <I2C_IsAcknowledgeFailed>
 801a548:	4603      	mov	r3, r0
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d001      	beq.n	801a552 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801a54e:	2301      	movs	r3, #1
 801a550:	e026      	b.n	801a5a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a552:	f7fb fe8b 	bl	801626c <HAL_GetTick>
 801a556:	4602      	mov	r2, r0
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	1ad3      	subs	r3, r2, r3
 801a55c:	68ba      	ldr	r2, [r7, #8]
 801a55e:	429a      	cmp	r2, r3
 801a560:	d302      	bcc.n	801a568 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801a562:	68bb      	ldr	r3, [r7, #8]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d113      	bne.n	801a590 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a56c:	f043 0220 	orr.w	r2, r3, #32
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801a574:	68fb      	ldr	r3, [r7, #12]
 801a576:	2220      	movs	r2, #32
 801a578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	2200      	movs	r2, #0
 801a580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	2200      	movs	r2, #0
 801a588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801a58c:	2301      	movs	r3, #1
 801a58e:	e007      	b.n	801a5a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	699b      	ldr	r3, [r3, #24]
 801a596:	f003 0320 	and.w	r3, r3, #32
 801a59a:	2b20      	cmp	r3, #32
 801a59c:	d1cf      	bne.n	801a53e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801a59e:	2300      	movs	r3, #0
}
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	3710      	adds	r7, #16
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	bd80      	pop	{r7, pc}

0801a5a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a5a8:	b580      	push	{r7, lr}
 801a5aa:	b084      	sub	sp, #16
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	60f8      	str	r0, [r7, #12]
 801a5b0:	60b9      	str	r1, [r7, #8]
 801a5b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a5b4:	e055      	b.n	801a662 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801a5b6:	687a      	ldr	r2, [r7, #4]
 801a5b8:	68b9      	ldr	r1, [r7, #8]
 801a5ba:	68f8      	ldr	r0, [r7, #12]
 801a5bc:	f000 f860 	bl	801a680 <I2C_IsAcknowledgeFailed>
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d001      	beq.n	801a5ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801a5c6:	2301      	movs	r3, #1
 801a5c8:	e053      	b.n	801a672 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	699b      	ldr	r3, [r3, #24]
 801a5d0:	f003 0320 	and.w	r3, r3, #32
 801a5d4:	2b20      	cmp	r3, #32
 801a5d6:	d129      	bne.n	801a62c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	699b      	ldr	r3, [r3, #24]
 801a5de:	f003 0304 	and.w	r3, r3, #4
 801a5e2:	2b04      	cmp	r3, #4
 801a5e4:	d105      	bne.n	801a5f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801a5e6:	68fb      	ldr	r3, [r7, #12]
 801a5e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d001      	beq.n	801a5f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	e03f      	b.n	801a672 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	2220      	movs	r2, #32
 801a5f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	6859      	ldr	r1, [r3, #4]
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	681a      	ldr	r2, [r3, #0]
 801a604:	4b1d      	ldr	r3, [pc, #116]	; (801a67c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 801a606:	400b      	ands	r3, r1
 801a608:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	2200      	movs	r2, #0
 801a60e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	2220      	movs	r2, #32
 801a614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	2200      	movs	r2, #0
 801a61c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	2200      	movs	r2, #0
 801a624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801a628:	2301      	movs	r3, #1
 801a62a:	e022      	b.n	801a672 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a62c:	f7fb fe1e 	bl	801626c <HAL_GetTick>
 801a630:	4602      	mov	r2, r0
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	1ad3      	subs	r3, r2, r3
 801a636:	68ba      	ldr	r2, [r7, #8]
 801a638:	429a      	cmp	r2, r3
 801a63a:	d302      	bcc.n	801a642 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 801a63c:	68bb      	ldr	r3, [r7, #8]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d10f      	bne.n	801a662 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a642:	68fb      	ldr	r3, [r7, #12]
 801a644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a646:	f043 0220 	orr.w	r2, r3, #32
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	2220      	movs	r2, #32
 801a652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	2200      	movs	r2, #0
 801a65a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801a65e:	2301      	movs	r3, #1
 801a660:	e007      	b.n	801a672 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	699b      	ldr	r3, [r3, #24]
 801a668:	f003 0304 	and.w	r3, r3, #4
 801a66c:	2b04      	cmp	r3, #4
 801a66e:	d1a2      	bne.n	801a5b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801a670:	2300      	movs	r3, #0
}
 801a672:	4618      	mov	r0, r3
 801a674:	3710      	adds	r7, #16
 801a676:	46bd      	mov	sp, r7
 801a678:	bd80      	pop	{r7, pc}
 801a67a:	bf00      	nop
 801a67c:	fe00e800 	.word	0xfe00e800

0801a680 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a680:	b580      	push	{r7, lr}
 801a682:	b084      	sub	sp, #16
 801a684:	af00      	add	r7, sp, #0
 801a686:	60f8      	str	r0, [r7, #12]
 801a688:	60b9      	str	r1, [r7, #8]
 801a68a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801a68c:	68fb      	ldr	r3, [r7, #12]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	699b      	ldr	r3, [r3, #24]
 801a692:	f003 0310 	and.w	r3, r3, #16
 801a696:	2b10      	cmp	r3, #16
 801a698:	d151      	bne.n	801a73e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a69a:	e022      	b.n	801a6e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801a69c:	68bb      	ldr	r3, [r7, #8]
 801a69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6a2:	d01e      	beq.n	801a6e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a6a4:	f7fb fde2 	bl	801626c <HAL_GetTick>
 801a6a8:	4602      	mov	r2, r0
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	1ad3      	subs	r3, r2, r3
 801a6ae:	68ba      	ldr	r2, [r7, #8]
 801a6b0:	429a      	cmp	r2, r3
 801a6b2:	d302      	bcc.n	801a6ba <I2C_IsAcknowledgeFailed+0x3a>
 801a6b4:	68bb      	ldr	r3, [r7, #8]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d113      	bne.n	801a6e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6be:	f043 0220 	orr.w	r2, r3, #32
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	2220      	movs	r2, #32
 801a6ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	2200      	movs	r2, #0
 801a6da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 801a6de:	2301      	movs	r3, #1
 801a6e0:	e02e      	b.n	801a740 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	699b      	ldr	r3, [r3, #24]
 801a6e8:	f003 0320 	and.w	r3, r3, #32
 801a6ec:	2b20      	cmp	r3, #32
 801a6ee:	d1d5      	bne.n	801a69c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	2210      	movs	r2, #16
 801a6f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a6f8:	68fb      	ldr	r3, [r7, #12]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	2220      	movs	r2, #32
 801a6fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801a700:	68f8      	ldr	r0, [r7, #12]
 801a702:	f7ff fe4d 	bl	801a3a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	6859      	ldr	r1, [r3, #4]
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	681a      	ldr	r2, [r3, #0]
 801a710:	4b0d      	ldr	r3, [pc, #52]	; (801a748 <I2C_IsAcknowledgeFailed+0xc8>)
 801a712:	400b      	ands	r3, r1
 801a714:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a71a:	f043 0204 	orr.w	r2, r3, #4
 801a71e:	68fb      	ldr	r3, [r7, #12]
 801a720:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	2220      	movs	r2, #32
 801a726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	2200      	movs	r2, #0
 801a72e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	2200      	movs	r2, #0
 801a736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801a73a:	2301      	movs	r3, #1
 801a73c:	e000      	b.n	801a740 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 801a73e:	2300      	movs	r3, #0
}
 801a740:	4618      	mov	r0, r3
 801a742:	3710      	adds	r7, #16
 801a744:	46bd      	mov	sp, r7
 801a746:	bd80      	pop	{r7, pc}
 801a748:	fe00e800 	.word	0xfe00e800

0801a74c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 801a74c:	b480      	push	{r7}
 801a74e:	b085      	sub	sp, #20
 801a750:	af00      	add	r7, sp, #0
 801a752:	60f8      	str	r0, [r7, #12]
 801a754:	607b      	str	r3, [r7, #4]
 801a756:	460b      	mov	r3, r1
 801a758:	817b      	strh	r3, [r7, #10]
 801a75a:	4613      	mov	r3, r2
 801a75c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	685a      	ldr	r2, [r3, #4]
 801a764:	69bb      	ldr	r3, [r7, #24]
 801a766:	0d5b      	lsrs	r3, r3, #21
 801a768:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801a76c:	4b0d      	ldr	r3, [pc, #52]	; (801a7a4 <I2C_TransferConfig+0x58>)
 801a76e:	430b      	orrs	r3, r1
 801a770:	43db      	mvns	r3, r3
 801a772:	ea02 0103 	and.w	r1, r2, r3
 801a776:	897b      	ldrh	r3, [r7, #10]
 801a778:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801a77c:	7a7b      	ldrb	r3, [r7, #9]
 801a77e:	041b      	lsls	r3, r3, #16
 801a780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801a784:	431a      	orrs	r2, r3
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	431a      	orrs	r2, r3
 801a78a:	69bb      	ldr	r3, [r7, #24]
 801a78c:	431a      	orrs	r2, r3
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	430a      	orrs	r2, r1
 801a794:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 801a796:	bf00      	nop
 801a798:	3714      	adds	r7, #20
 801a79a:	46bd      	mov	sp, r7
 801a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a0:	4770      	bx	lr
 801a7a2:	bf00      	nop
 801a7a4:	03ff63ff 	.word	0x03ff63ff

0801a7a8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801a7a8:	b480      	push	{r7}
 801a7aa:	b085      	sub	sp, #20
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	6078      	str	r0, [r7, #4]
 801a7b0:	460b      	mov	r3, r1
 801a7b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801a7b4:	2300      	movs	r3, #0
 801a7b6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a7bc:	4a2f      	ldr	r2, [pc, #188]	; (801a87c <I2C_Enable_IRQ+0xd4>)
 801a7be:	4293      	cmp	r3, r2
 801a7c0:	d004      	beq.n	801a7cc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 801a7c6:	4a2e      	ldr	r2, [pc, #184]	; (801a880 <I2C_Enable_IRQ+0xd8>)
 801a7c8:	4293      	cmp	r3, r2
 801a7ca:	d124      	bne.n	801a816 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801a7cc:	887b      	ldrh	r3, [r7, #2]
 801a7ce:	f003 0304 	and.w	r3, r3, #4
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d003      	beq.n	801a7de <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a7d6:	68fb      	ldr	r3, [r7, #12]
 801a7d8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801a7dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 801a7de:	887b      	ldrh	r3, [r7, #2]
 801a7e0:	f003 0311 	and.w	r3, r3, #17
 801a7e4:	2b11      	cmp	r3, #17
 801a7e6:	d103      	bne.n	801a7f0 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801a7e8:	68fb      	ldr	r3, [r7, #12]
 801a7ea:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801a7ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 801a7f0:	887b      	ldrh	r3, [r7, #2]
 801a7f2:	f003 0312 	and.w	r3, r3, #18
 801a7f6:	2b12      	cmp	r3, #18
 801a7f8:	d103      	bne.n	801a802 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	f043 0320 	orr.w	r3, r3, #32
 801a800:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 801a802:	887b      	ldrh	r3, [r7, #2]
 801a804:	f003 0312 	and.w	r3, r3, #18
 801a808:	2b12      	cmp	r3, #18
 801a80a:	d128      	bne.n	801a85e <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a812:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 801a814:	e023      	b.n	801a85e <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801a816:	887b      	ldrh	r3, [r7, #2]
 801a818:	f003 0304 	and.w	r3, r3, #4
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d003      	beq.n	801a828 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801a826:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801a828:	887b      	ldrh	r3, [r7, #2]
 801a82a:	f003 0301 	and.w	r3, r3, #1
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d003      	beq.n	801a83a <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 801a838:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801a83a:	887b      	ldrh	r3, [r7, #2]
 801a83c:	f003 0302 	and.w	r3, r3, #2
 801a840:	2b00      	cmp	r3, #0
 801a842:	d003      	beq.n	801a84c <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 801a84a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 801a84c:	887b      	ldrh	r3, [r7, #2]
 801a84e:	f003 0312 	and.w	r3, r3, #18
 801a852:	2b12      	cmp	r3, #18
 801a854:	d103      	bne.n	801a85e <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	f043 0320 	orr.w	r3, r3, #32
 801a85c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	6819      	ldr	r1, [r3, #0]
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	68fa      	ldr	r2, [r7, #12]
 801a86a:	430a      	orrs	r2, r1
 801a86c:	601a      	str	r2, [r3, #0]
}
 801a86e:	bf00      	nop
 801a870:	3714      	adds	r7, #20
 801a872:	46bd      	mov	sp, r7
 801a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a878:	4770      	bx	lr
 801a87a:	bf00      	nop
 801a87c:	0801987d 	.word	0x0801987d
 801a880:	08019a63 	.word	0x08019a63

0801a884 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801a884:	b480      	push	{r7}
 801a886:	b085      	sub	sp, #20
 801a888:	af00      	add	r7, sp, #0
 801a88a:	6078      	str	r0, [r7, #4]
 801a88c:	460b      	mov	r3, r1
 801a88e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801a890:	2300      	movs	r3, #0
 801a892:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801a894:	887b      	ldrh	r3, [r7, #2]
 801a896:	f003 0301 	and.w	r3, r3, #1
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d00f      	beq.n	801a8be <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 801a8a4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a8ac:	b2db      	uxtb	r3, r3
 801a8ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801a8b2:	2b28      	cmp	r3, #40	; 0x28
 801a8b4:	d003      	beq.n	801a8be <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801a8bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801a8be:	887b      	ldrh	r3, [r7, #2]
 801a8c0:	f003 0302 	and.w	r3, r3, #2
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d00f      	beq.n	801a8e8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 801a8ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a8d6:	b2db      	uxtb	r3, r3
 801a8d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801a8dc:	2b28      	cmp	r3, #40	; 0x28
 801a8de:	d003      	beq.n	801a8e8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801a8e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801a8e8:	887b      	ldrh	r3, [r7, #2]
 801a8ea:	f003 0304 	and.w	r3, r3, #4
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d003      	beq.n	801a8fa <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801a8f8:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 801a8fa:	887b      	ldrh	r3, [r7, #2]
 801a8fc:	f003 0311 	and.w	r3, r3, #17
 801a900:	2b11      	cmp	r3, #17
 801a902:	d103      	bne.n	801a90c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801a90a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 801a90c:	887b      	ldrh	r3, [r7, #2]
 801a90e:	f003 0312 	and.w	r3, r3, #18
 801a912:	2b12      	cmp	r3, #18
 801a914:	d103      	bne.n	801a91e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	f043 0320 	orr.w	r3, r3, #32
 801a91c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 801a91e:	887b      	ldrh	r3, [r7, #2]
 801a920:	f003 0312 	and.w	r3, r3, #18
 801a924:	2b12      	cmp	r3, #18
 801a926:	d103      	bne.n	801a930 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801a928:	68fb      	ldr	r3, [r7, #12]
 801a92a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a92e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	6819      	ldr	r1, [r3, #0]
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	43da      	mvns	r2, r3
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	400a      	ands	r2, r1
 801a940:	601a      	str	r2, [r3, #0]
}
 801a942:	bf00      	nop
 801a944:	3714      	adds	r7, #20
 801a946:	46bd      	mov	sp, r7
 801a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a94c:	4770      	bx	lr

0801a94e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801a94e:	b480      	push	{r7}
 801a950:	b083      	sub	sp, #12
 801a952:	af00      	add	r7, sp, #0
 801a954:	6078      	str	r0, [r7, #4]
 801a956:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a95e:	b2db      	uxtb	r3, r3
 801a960:	2b20      	cmp	r3, #32
 801a962:	d138      	bne.n	801a9d6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a96a:	2b01      	cmp	r3, #1
 801a96c:	d101      	bne.n	801a972 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801a96e:	2302      	movs	r3, #2
 801a970:	e032      	b.n	801a9d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	2201      	movs	r2, #1
 801a976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	2224      	movs	r2, #36	; 0x24
 801a97e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	681a      	ldr	r2, [r3, #0]
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	f022 0201 	bic.w	r2, r2, #1
 801a990:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	681a      	ldr	r2, [r3, #0]
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a9a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	6819      	ldr	r1, [r3, #0]
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	683a      	ldr	r2, [r7, #0]
 801a9ae:	430a      	orrs	r2, r1
 801a9b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	681a      	ldr	r2, [r3, #0]
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	f042 0201 	orr.w	r2, r2, #1
 801a9c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	2220      	movs	r2, #32
 801a9c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	2200      	movs	r2, #0
 801a9ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	e000      	b.n	801a9d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801a9d6:	2302      	movs	r3, #2
  }
}
 801a9d8:	4618      	mov	r0, r3
 801a9da:	370c      	adds	r7, #12
 801a9dc:	46bd      	mov	sp, r7
 801a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9e2:	4770      	bx	lr

0801a9e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801a9e4:	b480      	push	{r7}
 801a9e6:	b085      	sub	sp, #20
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	6078      	str	r0, [r7, #4]
 801a9ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a9f4:	b2db      	uxtb	r3, r3
 801a9f6:	2b20      	cmp	r3, #32
 801a9f8:	d139      	bne.n	801aa6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801aa00:	2b01      	cmp	r3, #1
 801aa02:	d101      	bne.n	801aa08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801aa04:	2302      	movs	r3, #2
 801aa06:	e033      	b.n	801aa70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	2201      	movs	r2, #1
 801aa0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	2224      	movs	r2, #36	; 0x24
 801aa14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	681a      	ldr	r2, [r3, #0]
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	f022 0201 	bic.w	r2, r2, #1
 801aa26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801aa36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801aa38:	683b      	ldr	r3, [r7, #0]
 801aa3a:	021b      	lsls	r3, r3, #8
 801aa3c:	68fa      	ldr	r2, [r7, #12]
 801aa3e:	4313      	orrs	r3, r2
 801aa40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	68fa      	ldr	r2, [r7, #12]
 801aa48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	681a      	ldr	r2, [r3, #0]
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	f042 0201 	orr.w	r2, r2, #1
 801aa58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	2220      	movs	r2, #32
 801aa5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	2200      	movs	r2, #0
 801aa66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	e000      	b.n	801aa70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801aa6e:	2302      	movs	r3, #2
  }
}
 801aa70:	4618      	mov	r0, r3
 801aa72:	3714      	adds	r7, #20
 801aa74:	46bd      	mov	sp, r7
 801aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa7a:	4770      	bx	lr

0801aa7c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b084      	sub	sp, #16
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d101      	bne.n	801aa8e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 801aa8a:	2301      	movs	r3, #1
 801aa8c:	e038      	b.n	801ab00 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 801aa96:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	f245 5255 	movw	r2, #21845	; 0x5555
 801aaa0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	687a      	ldr	r2, [r7, #4]
 801aaa8:	6852      	ldr	r2, [r2, #4]
 801aaaa:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	687a      	ldr	r2, [r7, #4]
 801aab2:	6892      	ldr	r2, [r2, #8]
 801aab4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801aab6:	f7fb fbd9 	bl	801626c <HAL_GetTick>
 801aaba:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 801aabc:	e008      	b.n	801aad0 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801aabe:	f7fb fbd5 	bl	801626c <HAL_GetTick>
 801aac2:	4602      	mov	r2, r0
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	1ad3      	subs	r3, r2, r3
 801aac8:	2b30      	cmp	r3, #48	; 0x30
 801aaca:	d901      	bls.n	801aad0 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 801aacc:	2303      	movs	r3, #3
 801aace:	e017      	b.n	801ab00 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	68db      	ldr	r3, [r3, #12]
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d1f1      	bne.n	801aabe <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	691a      	ldr	r2, [r3, #16]
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	68db      	ldr	r3, [r3, #12]
 801aae4:	429a      	cmp	r2, r3
 801aae6:	d005      	beq.n	801aaf4 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	687a      	ldr	r2, [r7, #4]
 801aaee:	68d2      	ldr	r2, [r2, #12]
 801aaf0:	611a      	str	r2, [r3, #16]
 801aaf2:	e004      	b.n	801aafe <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801aafc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801aafe:	2300      	movs	r3, #0
}
 801ab00:	4618      	mov	r0, r3
 801ab02:	3710      	adds	r7, #16
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}

0801ab08 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801ab08:	b480      	push	{r7}
 801ab0a:	b083      	sub	sp, #12
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801ab18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801ab1a:	2300      	movs	r3, #0
}
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	370c      	adds	r7, #12
 801ab20:	46bd      	mov	sp, r7
 801ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab26:	4770      	bx	lr

0801ab28 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801ab28:	b480      	push	{r7}
 801ab2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801ab2c:	4b05      	ldr	r3, [pc, #20]	; (801ab44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	4a04      	ldr	r2, [pc, #16]	; (801ab44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801ab32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ab36:	6013      	str	r3, [r2, #0]
}
 801ab38:	bf00      	nop
 801ab3a:	46bd      	mov	sp, r7
 801ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab40:	4770      	bx	lr
 801ab42:	bf00      	nop
 801ab44:	58000400 	.word	0x58000400

0801ab48 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as 
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 801ab48:	b580      	push	{r7, lr}
 801ab4a:	b082      	sub	sp, #8
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	6078      	str	r0, [r7, #4]
 801ab50:	460b      	mov	r3, r1
 801ab52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d10c      	bne.n	801ab74 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 801ab5a:	4b13      	ldr	r3, [pc, #76]	; (801aba8 <HAL_PWR_EnterSLEEPMode+0x60>)
 801ab5c:	695b      	ldr	r3, [r3, #20]
 801ab5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ab62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ab66:	d10e      	bne.n	801ab86 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 801ab68:	f000 f840 	bl	801abec <HAL_PWREx_DisableLowPowerRunMode>
 801ab6c:	4603      	mov	r3, r0
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d009      	beq.n	801ab86 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 801ab72:	e016      	b.n	801aba2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 801ab74:	4b0c      	ldr	r3, [pc, #48]	; (801aba8 <HAL_PWR_EnterSLEEPMode+0x60>)
 801ab76:	695b      	ldr	r3, [r3, #20]
 801ab78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ab7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ab80:	d001      	beq.n	801ab86 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();  
 801ab82:	f000 f823 	bl	801abcc <HAL_PWREx_EnableLowPowerRunMode>
    } 
  } 
    
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 801ab86:	4b09      	ldr	r3, [pc, #36]	; (801abac <HAL_PWR_EnterSLEEPMode+0x64>)
 801ab88:	691b      	ldr	r3, [r3, #16]
 801ab8a:	4a08      	ldr	r2, [pc, #32]	; (801abac <HAL_PWR_EnterSLEEPMode+0x64>)
 801ab8c:	f023 0304 	bic.w	r3, r3, #4
 801ab90:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 801ab92:	78fb      	ldrb	r3, [r7, #3]
 801ab94:	2b01      	cmp	r3, #1
 801ab96:	d101      	bne.n	801ab9c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801ab98:	bf30      	wfi
 801ab9a:	e002      	b.n	801aba2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801ab9c:	bf40      	sev
    __WFE();
 801ab9e:	bf20      	wfe
    __WFE();
 801aba0:	bf20      	wfe
  }
}
 801aba2:	3708      	adds	r7, #8
 801aba4:	46bd      	mov	sp, r7
 801aba6:	bd80      	pop	{r7, pc}
 801aba8:	58000400 	.word	0x58000400
 801abac:	e000ed00 	.word	0xe000ed00

0801abb0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801abb0:	b480      	push	{r7}
 801abb2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 801abb4:	4b04      	ldr	r3, [pc, #16]	; (801abc8 <HAL_PWREx_GetVoltageRange+0x18>)
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 801abbc:	4618      	mov	r0, r3
 801abbe:	46bd      	mov	sp, r7
 801abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abc4:	4770      	bx	lr
 801abc6:	bf00      	nop
 801abc8:	58000400 	.word	0x58000400

0801abcc <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must 
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.     
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 801abcc:	b480      	push	{r7}
 801abce:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR); 
 801abd0:	4b05      	ldr	r3, [pc, #20]	; (801abe8 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	4a04      	ldr	r2, [pc, #16]	; (801abe8 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 801abd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801abda:	6013      	str	r3, [r2, #0]
}
 801abdc:	bf00      	nop
 801abde:	46bd      	mov	sp, r7
 801abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abe4:	4770      	bx	lr
 801abe6:	bf00      	nop
 801abe8:	58000400 	.word	0x58000400

0801abec <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.   
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 801abec:	b480      	push	{r7}
 801abee:	b083      	sub	sp, #12
 801abf0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;
  
  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR); 
 801abf2:	4b17      	ldr	r3, [pc, #92]	; (801ac50 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	4a16      	ldr	r2, [pc, #88]	; (801ac50 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 801abf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801abfc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000U));
 801abfe:	4b15      	ldr	r3, [pc, #84]	; (801ac54 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	4a15      	ldr	r2, [pc, #84]	; (801ac58 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 801ac04:	fba2 2303 	umull	r2, r3, r2, r3
 801ac08:	0c9b      	lsrs	r3, r3, #18
 801ac0a:	2232      	movs	r2, #50	; 0x32
 801ac0c:	fb02 f303 	mul.w	r3, r2, r3
 801ac10:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 801ac12:	e002      	b.n	801ac1a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	3b01      	subs	r3, #1
 801ac18:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 801ac1a:	4b0d      	ldr	r3, [pc, #52]	; (801ac50 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 801ac1c:	695b      	ldr	r3, [r3, #20]
 801ac1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ac22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ac26:	d102      	bne.n	801ac2e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d1f2      	bne.n	801ac14 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 801ac2e:	4b08      	ldr	r3, [pc, #32]	; (801ac50 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 801ac30:	695b      	ldr	r3, [r3, #20]
 801ac32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ac36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ac3a:	d101      	bne.n	801ac40 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 801ac3c:	2303      	movs	r3, #3
 801ac3e:	e000      	b.n	801ac42 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }
  
  return HAL_OK;
 801ac40:	2300      	movs	r3, #0
}
 801ac42:	4618      	mov	r0, r3
 801ac44:	370c      	adds	r7, #12
 801ac46:	46bd      	mov	sp, r7
 801ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac4c:	4770      	bx	lr
 801ac4e:	bf00      	nop
 801ac50:	58000400 	.word	0x58000400
 801ac54:	20000078 	.word	0x20000078
 801ac58:	431bde83 	.word	0x431bde83

0801ac5c <LL_RCC_HSE_IsEnabledDiv2>:
{
 801ac5c:	b480      	push	{r7}
 801ac5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 801ac60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ac6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ac6e:	d101      	bne.n	801ac74 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 801ac70:	2301      	movs	r3, #1
 801ac72:	e000      	b.n	801ac76 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 801ac74:	2300      	movs	r3, #0
}
 801ac76:	4618      	mov	r0, r3
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac7e:	4770      	bx	lr

0801ac80 <LL_RCC_HSE_EnableBypass>:
{
 801ac80:	b480      	push	{r7}
 801ac82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 801ac84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ac8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801ac92:	6013      	str	r3, [r2, #0]
}
 801ac94:	bf00      	nop
 801ac96:	46bd      	mov	sp, r7
 801ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac9c:	4770      	bx	lr

0801ac9e <LL_RCC_HSE_DisableBypass>:
{
 801ac9e:	b480      	push	{r7}
 801aca0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 801aca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801acac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801acb0:	6013      	str	r3, [r2, #0]
}
 801acb2:	bf00      	nop
 801acb4:	46bd      	mov	sp, r7
 801acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acba:	4770      	bx	lr

0801acbc <LL_RCC_HSE_Enable>:
{
 801acbc:	b480      	push	{r7}
 801acbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 801acc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801acca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801acce:	6013      	str	r3, [r2, #0]
}
 801acd0:	bf00      	nop
 801acd2:	46bd      	mov	sp, r7
 801acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd8:	4770      	bx	lr

0801acda <LL_RCC_HSE_Disable>:
{
 801acda:	b480      	push	{r7}
 801acdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801acde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ace8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801acec:	6013      	str	r3, [r2, #0]
}
 801acee:	bf00      	nop
 801acf0:	46bd      	mov	sp, r7
 801acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acf6:	4770      	bx	lr

0801acf8 <LL_RCC_HSE_IsReady>:
{
 801acf8:	b480      	push	{r7}
 801acfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801acfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ad06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801ad0a:	d101      	bne.n	801ad10 <LL_RCC_HSE_IsReady+0x18>
 801ad0c:	2301      	movs	r3, #1
 801ad0e:	e000      	b.n	801ad12 <LL_RCC_HSE_IsReady+0x1a>
 801ad10:	2300      	movs	r3, #0
}
 801ad12:	4618      	mov	r0, r3
 801ad14:	46bd      	mov	sp, r7
 801ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad1a:	4770      	bx	lr

0801ad1c <LL_RCC_HSI_Enable>:
{
 801ad1c:	b480      	push	{r7}
 801ad1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801ad20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ad2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ad2e:	6013      	str	r3, [r2, #0]
}
 801ad30:	bf00      	nop
 801ad32:	46bd      	mov	sp, r7
 801ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad38:	4770      	bx	lr

0801ad3a <LL_RCC_HSI_Disable>:
{
 801ad3a:	b480      	push	{r7}
 801ad3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801ad3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ad48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ad4c:	6013      	str	r3, [r2, #0]
}
 801ad4e:	bf00      	nop
 801ad50:	46bd      	mov	sp, r7
 801ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad56:	4770      	bx	lr

0801ad58 <LL_RCC_HSI_IsReady>:
{
 801ad58:	b480      	push	{r7}
 801ad5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801ad5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad60:	681b      	ldr	r3, [r3, #0]
 801ad62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ad66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ad6a:	d101      	bne.n	801ad70 <LL_RCC_HSI_IsReady+0x18>
 801ad6c:	2301      	movs	r3, #1
 801ad6e:	e000      	b.n	801ad72 <LL_RCC_HSI_IsReady+0x1a>
 801ad70:	2300      	movs	r3, #0
}
 801ad72:	4618      	mov	r0, r3
 801ad74:	46bd      	mov	sp, r7
 801ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad7a:	4770      	bx	lr

0801ad7c <LL_RCC_HSI_SetCalibTrimming>:
{
 801ad7c:	b480      	push	{r7}
 801ad7e:	b083      	sub	sp, #12
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 801ad84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad88:	685b      	ldr	r3, [r3, #4]
 801ad8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	061b      	lsls	r3, r3, #24
 801ad92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ad96:	4313      	orrs	r3, r2
 801ad98:	604b      	str	r3, [r1, #4]
}
 801ad9a:	bf00      	nop
 801ad9c:	370c      	adds	r7, #12
 801ad9e:	46bd      	mov	sp, r7
 801ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ada4:	4770      	bx	lr

0801ada6 <LL_RCC_HSI48_Enable>:
{
 801ada6:	b480      	push	{r7}
 801ada8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801adaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801adae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801adb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801adb6:	f043 0301 	orr.w	r3, r3, #1
 801adba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801adbe:	bf00      	nop
 801adc0:	46bd      	mov	sp, r7
 801adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc6:	4770      	bx	lr

0801adc8 <LL_RCC_HSI48_Disable>:
{
 801adc8:	b480      	push	{r7}
 801adca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801adcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801add0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801add4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801add8:	f023 0301 	bic.w	r3, r3, #1
 801addc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801ade0:	bf00      	nop
 801ade2:	46bd      	mov	sp, r7
 801ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade8:	4770      	bx	lr

0801adea <LL_RCC_HSI48_IsReady>:
{
 801adea:	b480      	push	{r7}
 801adec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 801adee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801adf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801adf6:	f003 0302 	and.w	r3, r3, #2
 801adfa:	2b02      	cmp	r3, #2
 801adfc:	d101      	bne.n	801ae02 <LL_RCC_HSI48_IsReady+0x18>
 801adfe:	2301      	movs	r3, #1
 801ae00:	e000      	b.n	801ae04 <LL_RCC_HSI48_IsReady+0x1a>
 801ae02:	2300      	movs	r3, #0
}
 801ae04:	4618      	mov	r0, r3
 801ae06:	46bd      	mov	sp, r7
 801ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0c:	4770      	bx	lr

0801ae0e <LL_RCC_LSE_Enable>:
{
 801ae0e:	b480      	push	{r7}
 801ae10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801ae12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ae1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ae1e:	f043 0301 	orr.w	r3, r3, #1
 801ae22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801ae26:	bf00      	nop
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae2e:	4770      	bx	lr

0801ae30 <LL_RCC_LSE_Disable>:
{
 801ae30:	b480      	push	{r7}
 801ae32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801ae34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ae3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ae40:	f023 0301 	bic.w	r3, r3, #1
 801ae44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801ae48:	bf00      	nop
 801ae4a:	46bd      	mov	sp, r7
 801ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae50:	4770      	bx	lr

0801ae52 <LL_RCC_LSE_EnableBypass>:
{
 801ae52:	b480      	push	{r7}
 801ae54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801ae56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ae5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ae62:	f043 0304 	orr.w	r3, r3, #4
 801ae66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801ae6a:	bf00      	nop
 801ae6c:	46bd      	mov	sp, r7
 801ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae72:	4770      	bx	lr

0801ae74 <LL_RCC_LSE_DisableBypass>:
{
 801ae74:	b480      	push	{r7}
 801ae76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801ae78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ae80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ae84:	f023 0304 	bic.w	r3, r3, #4
 801ae88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801ae8c:	bf00      	nop
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae94:	4770      	bx	lr

0801ae96 <LL_RCC_LSE_IsReady>:
{
 801ae96:	b480      	push	{r7}
 801ae98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801ae9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801aea2:	f003 0302 	and.w	r3, r3, #2
 801aea6:	2b02      	cmp	r3, #2
 801aea8:	d101      	bne.n	801aeae <LL_RCC_LSE_IsReady+0x18>
 801aeaa:	2301      	movs	r3, #1
 801aeac:	e000      	b.n	801aeb0 <LL_RCC_LSE_IsReady+0x1a>
 801aeae:	2300      	movs	r3, #0
}
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	46bd      	mov	sp, r7
 801aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeb8:	4770      	bx	lr

0801aeba <LL_RCC_LSI1_Enable>:
{
 801aeba:	b480      	push	{r7}
 801aebc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801aebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801aec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801aeca:	f043 0301 	orr.w	r3, r3, #1
 801aece:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801aed2:	bf00      	nop
 801aed4:	46bd      	mov	sp, r7
 801aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeda:	4770      	bx	lr

0801aedc <LL_RCC_LSI1_Disable>:
{
 801aedc:	b480      	push	{r7}
 801aede:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801aee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801aee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801aeec:	f023 0301 	bic.w	r3, r3, #1
 801aef0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801aef4:	bf00      	nop
 801aef6:	46bd      	mov	sp, r7
 801aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aefc:	4770      	bx	lr

0801aefe <LL_RCC_LSI1_IsReady>:
{
 801aefe:	b480      	push	{r7}
 801af00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 801af02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801af0a:	f003 0302 	and.w	r3, r3, #2
 801af0e:	2b02      	cmp	r3, #2
 801af10:	d101      	bne.n	801af16 <LL_RCC_LSI1_IsReady+0x18>
 801af12:	2301      	movs	r3, #1
 801af14:	e000      	b.n	801af18 <LL_RCC_LSI1_IsReady+0x1a>
 801af16:	2300      	movs	r3, #0
}
 801af18:	4618      	mov	r0, r3
 801af1a:	46bd      	mov	sp, r7
 801af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af20:	4770      	bx	lr

0801af22 <LL_RCC_LSI2_Enable>:
{
 801af22:	b480      	push	{r7}
 801af24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801af26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801af2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801af32:	f043 0304 	orr.w	r3, r3, #4
 801af36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801af3a:	bf00      	nop
 801af3c:	46bd      	mov	sp, r7
 801af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af42:	4770      	bx	lr

0801af44 <LL_RCC_LSI2_Disable>:
{
 801af44:	b480      	push	{r7}
 801af46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801af48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801af50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801af54:	f023 0304 	bic.w	r3, r3, #4
 801af58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801af5c:	bf00      	nop
 801af5e:	46bd      	mov	sp, r7
 801af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af64:	4770      	bx	lr

0801af66 <LL_RCC_LSI2_IsReady>:
{
 801af66:	b480      	push	{r7}
 801af68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801af6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801af72:	f003 0308 	and.w	r3, r3, #8
 801af76:	2b08      	cmp	r3, #8
 801af78:	d101      	bne.n	801af7e <LL_RCC_LSI2_IsReady+0x18>
 801af7a:	2301      	movs	r3, #1
 801af7c:	e000      	b.n	801af80 <LL_RCC_LSI2_IsReady+0x1a>
 801af7e:	2300      	movs	r3, #0
}
 801af80:	4618      	mov	r0, r3
 801af82:	46bd      	mov	sp, r7
 801af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af88:	4770      	bx	lr

0801af8a <LL_RCC_LSI2_SetTrimming>:
{
 801af8a:	b480      	push	{r7}
 801af8c:	b083      	sub	sp, #12
 801af8e:	af00      	add	r7, sp, #0
 801af90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 801af92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801af9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	021b      	lsls	r3, r3, #8
 801afa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801afa6:	4313      	orrs	r3, r2
 801afa8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 801afac:	bf00      	nop
 801afae:	370c      	adds	r7, #12
 801afb0:	46bd      	mov	sp, r7
 801afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb6:	4770      	bx	lr

0801afb8 <LL_RCC_MSI_Enable>:
{
 801afb8:	b480      	push	{r7}
 801afba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 801afbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801afc6:	f043 0301 	orr.w	r3, r3, #1
 801afca:	6013      	str	r3, [r2, #0]
}
 801afcc:	bf00      	nop
 801afce:	46bd      	mov	sp, r7
 801afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd4:	4770      	bx	lr

0801afd6 <LL_RCC_MSI_Disable>:
{
 801afd6:	b480      	push	{r7}
 801afd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 801afda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801afe4:	f023 0301 	bic.w	r3, r3, #1
 801afe8:	6013      	str	r3, [r2, #0]
}
 801afea:	bf00      	nop
 801afec:	46bd      	mov	sp, r7
 801afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aff2:	4770      	bx	lr

0801aff4 <LL_RCC_MSI_IsReady>:
{
 801aff4:	b480      	push	{r7}
 801aff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 801aff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	f003 0302 	and.w	r3, r3, #2
 801b002:	2b02      	cmp	r3, #2
 801b004:	d101      	bne.n	801b00a <LL_RCC_MSI_IsReady+0x16>
 801b006:	2301      	movs	r3, #1
 801b008:	e000      	b.n	801b00c <LL_RCC_MSI_IsReady+0x18>
 801b00a:	2300      	movs	r3, #0
}
 801b00c:	4618      	mov	r0, r3
 801b00e:	46bd      	mov	sp, r7
 801b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b014:	4770      	bx	lr

0801b016 <LL_RCC_MSI_SetRange>:
{
 801b016:	b480      	push	{r7}
 801b018:	b083      	sub	sp, #12
 801b01a:	af00      	add	r7, sp, #0
 801b01c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801b01e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	4313      	orrs	r3, r2
 801b030:	600b      	str	r3, [r1, #0]
}
 801b032:	bf00      	nop
 801b034:	370c      	adds	r7, #12
 801b036:	46bd      	mov	sp, r7
 801b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b03c:	4770      	bx	lr

0801b03e <LL_RCC_MSI_GetRange>:
{
 801b03e:	b480      	push	{r7}
 801b040:	b083      	sub	sp, #12
 801b042:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 801b044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b04e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	2bb0      	cmp	r3, #176	; 0xb0
 801b054:	d901      	bls.n	801b05a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 801b056:	23b0      	movs	r3, #176	; 0xb0
 801b058:	607b      	str	r3, [r7, #4]
  return msiRange;
 801b05a:	687b      	ldr	r3, [r7, #4]
}
 801b05c:	4618      	mov	r0, r3
 801b05e:	370c      	adds	r7, #12
 801b060:	46bd      	mov	sp, r7
 801b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b066:	4770      	bx	lr

0801b068 <LL_RCC_MSI_SetCalibTrimming>:
{
 801b068:	b480      	push	{r7}
 801b06a:	b083      	sub	sp, #12
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 801b070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b074:	685b      	ldr	r3, [r3, #4]
 801b076:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	021b      	lsls	r3, r3, #8
 801b07e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b082:	4313      	orrs	r3, r2
 801b084:	604b      	str	r3, [r1, #4]
}
 801b086:	bf00      	nop
 801b088:	370c      	adds	r7, #12
 801b08a:	46bd      	mov	sp, r7
 801b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b090:	4770      	bx	lr

0801b092 <LL_RCC_SetSysClkSource>:
{
 801b092:	b480      	push	{r7}
 801b094:	b083      	sub	sp, #12
 801b096:	af00      	add	r7, sp, #0
 801b098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 801b09a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b09e:	689b      	ldr	r3, [r3, #8]
 801b0a0:	f023 0203 	bic.w	r2, r3, #3
 801b0a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	4313      	orrs	r3, r2
 801b0ac:	608b      	str	r3, [r1, #8]
}
 801b0ae:	bf00      	nop
 801b0b0:	370c      	adds	r7, #12
 801b0b2:	46bd      	mov	sp, r7
 801b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0b8:	4770      	bx	lr

0801b0ba <LL_RCC_GetSysClkSource>:
{
 801b0ba:	b480      	push	{r7}
 801b0bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801b0be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b0c2:	689b      	ldr	r3, [r3, #8]
 801b0c4:	f003 030c 	and.w	r3, r3, #12
}
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	46bd      	mov	sp, r7
 801b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0d0:	4770      	bx	lr

0801b0d2 <LL_RCC_SetAHBPrescaler>:
{
 801b0d2:	b480      	push	{r7}
 801b0d4:	b083      	sub	sp, #12
 801b0d6:	af00      	add	r7, sp, #0
 801b0d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 801b0da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b0de:	689b      	ldr	r3, [r3, #8]
 801b0e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b0e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	4313      	orrs	r3, r2
 801b0ec:	608b      	str	r3, [r1, #8]
}
 801b0ee:	bf00      	nop
 801b0f0:	370c      	adds	r7, #12
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0f8:	4770      	bx	lr

0801b0fa <LL_C2_RCC_SetAHBPrescaler>:
{
 801b0fa:	b480      	push	{r7}
 801b0fc:	b083      	sub	sp, #12
 801b0fe:	af00      	add	r7, sp, #0
 801b100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 801b102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b106:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801b10a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b10e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	4313      	orrs	r3, r2
 801b116:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 801b11a:	bf00      	nop
 801b11c:	370c      	adds	r7, #12
 801b11e:	46bd      	mov	sp, r7
 801b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b124:	4770      	bx	lr

0801b126 <LL_RCC_SetAHB4Prescaler>:
{
 801b126:	b480      	push	{r7}
 801b128:	b083      	sub	sp, #12
 801b12a:	af00      	add	r7, sp, #0
 801b12c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801b12e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b132:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801b136:	f023 020f 	bic.w	r2, r3, #15
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	091b      	lsrs	r3, r3, #4
 801b13e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b142:	4313      	orrs	r3, r2
 801b144:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 801b148:	bf00      	nop
 801b14a:	370c      	adds	r7, #12
 801b14c:	46bd      	mov	sp, r7
 801b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b152:	4770      	bx	lr

0801b154 <LL_RCC_SetAPB1Prescaler>:
{
 801b154:	b480      	push	{r7}
 801b156:	b083      	sub	sp, #12
 801b158:	af00      	add	r7, sp, #0
 801b15a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 801b15c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b160:	689b      	ldr	r3, [r3, #8]
 801b162:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	4313      	orrs	r3, r2
 801b16e:	608b      	str	r3, [r1, #8]
}
 801b170:	bf00      	nop
 801b172:	370c      	adds	r7, #12
 801b174:	46bd      	mov	sp, r7
 801b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b17a:	4770      	bx	lr

0801b17c <LL_RCC_SetAPB2Prescaler>:
{
 801b17c:	b480      	push	{r7}
 801b17e:	b083      	sub	sp, #12
 801b180:	af00      	add	r7, sp, #0
 801b182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 801b184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b188:	689b      	ldr	r3, [r3, #8]
 801b18a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801b18e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	4313      	orrs	r3, r2
 801b196:	608b      	str	r3, [r1, #8]
}
 801b198:	bf00      	nop
 801b19a:	370c      	adds	r7, #12
 801b19c:	46bd      	mov	sp, r7
 801b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1a2:	4770      	bx	lr

0801b1a4 <LL_RCC_GetAHBPrescaler>:
{
 801b1a4:	b480      	push	{r7}
 801b1a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 801b1a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b1ac:	689b      	ldr	r3, [r3, #8]
 801b1ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ba:	4770      	bx	lr

0801b1bc <LL_C2_RCC_GetAHBPrescaler>:
{
 801b1bc:	b480      	push	{r7}
 801b1be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 801b1c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b1c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801b1c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	46bd      	mov	sp, r7
 801b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d4:	4770      	bx	lr

0801b1d6 <LL_RCC_GetAHB4Prescaler>:
{
 801b1d6:	b480      	push	{r7}
 801b1d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 801b1da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b1de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801b1e2:	011b      	lsls	r3, r3, #4
 801b1e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	46bd      	mov	sp, r7
 801b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1f0:	4770      	bx	lr

0801b1f2 <LL_RCC_GetAPB1Prescaler>:
{
 801b1f2:	b480      	push	{r7}
 801b1f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 801b1f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b1fa:	689b      	ldr	r3, [r3, #8]
 801b1fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 801b200:	4618      	mov	r0, r3
 801b202:	46bd      	mov	sp, r7
 801b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b208:	4770      	bx	lr

0801b20a <LL_RCC_GetAPB2Prescaler>:
{
 801b20a:	b480      	push	{r7}
 801b20c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 801b20e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b212:	689b      	ldr	r3, [r3, #8]
 801b214:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 801b218:	4618      	mov	r0, r3
 801b21a:	46bd      	mov	sp, r7
 801b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b220:	4770      	bx	lr

0801b222 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 801b222:	b480      	push	{r7}
 801b224:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 801b226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b230:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b234:	6013      	str	r3, [r2, #0]
}
 801b236:	bf00      	nop
 801b238:	46bd      	mov	sp, r7
 801b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b23e:	4770      	bx	lr

0801b240 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 801b240:	b480      	push	{r7}
 801b242:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801b244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b24e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b252:	6013      	str	r3, [r2, #0]
}
 801b254:	bf00      	nop
 801b256:	46bd      	mov	sp, r7
 801b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b25c:	4770      	bx	lr

0801b25e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 801b25e:	b480      	push	{r7}
 801b260:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 801b262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b26c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801b270:	d101      	bne.n	801b276 <LL_RCC_PLL_IsReady+0x18>
 801b272:	2301      	movs	r3, #1
 801b274:	e000      	b.n	801b278 <LL_RCC_PLL_IsReady+0x1a>
 801b276:	2300      	movs	r3, #0
}
 801b278:	4618      	mov	r0, r3
 801b27a:	46bd      	mov	sp, r7
 801b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b280:	4770      	bx	lr

0801b282 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 801b282:	b480      	push	{r7}
 801b284:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801b286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b28a:	68db      	ldr	r3, [r3, #12]
 801b28c:	0a1b      	lsrs	r3, r3, #8
 801b28e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 801b292:	4618      	mov	r0, r3
 801b294:	46bd      	mov	sp, r7
 801b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b29a:	4770      	bx	lr

0801b29c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 801b29c:	b480      	push	{r7}
 801b29e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 801b2a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b2a4:	68db      	ldr	r3, [r3, #12]
 801b2a6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 801b2aa:	4618      	mov	r0, r3
 801b2ac:	46bd      	mov	sp, r7
 801b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2b2:	4770      	bx	lr

0801b2b4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 801b2b4:	b480      	push	{r7}
 801b2b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 801b2b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b2bc:	68db      	ldr	r3, [r3, #12]
 801b2be:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 801b2c2:	4618      	mov	r0, r3
 801b2c4:	46bd      	mov	sp, r7
 801b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ca:	4770      	bx	lr

0801b2cc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 801b2cc:	b480      	push	{r7}
 801b2ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801b2d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b2d4:	68db      	ldr	r3, [r3, #12]
 801b2d6:	f003 0303 	and.w	r3, r3, #3
}
 801b2da:	4618      	mov	r0, r3
 801b2dc:	46bd      	mov	sp, r7
 801b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2e2:	4770      	bx	lr

0801b2e4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 801b2e4:	b480      	push	{r7}
 801b2e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 801b2e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b2ec:	689b      	ldr	r3, [r3, #8]
 801b2ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b2f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b2f6:	d101      	bne.n	801b2fc <LL_RCC_IsActiveFlag_HPRE+0x18>
 801b2f8:	2301      	movs	r3, #1
 801b2fa:	e000      	b.n	801b2fe <LL_RCC_IsActiveFlag_HPRE+0x1a>
 801b2fc:	2300      	movs	r3, #0
}
 801b2fe:	4618      	mov	r0, r3
 801b300:	46bd      	mov	sp, r7
 801b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b306:	4770      	bx	lr

0801b308 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 801b308:	b480      	push	{r7}
 801b30a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 801b30c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b310:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801b314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b31c:	d101      	bne.n	801b322 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 801b31e:	2301      	movs	r3, #1
 801b320:	e000      	b.n	801b324 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 801b322:	2300      	movs	r3, #0
}
 801b324:	4618      	mov	r0, r3
 801b326:	46bd      	mov	sp, r7
 801b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b32c:	4770      	bx	lr

0801b32e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 801b32e:	b480      	push	{r7}
 801b330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 801b332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b336:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801b33a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b342:	d101      	bne.n	801b348 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 801b344:	2301      	movs	r3, #1
 801b346:	e000      	b.n	801b34a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 801b348:	2300      	movs	r3, #0
}
 801b34a:	4618      	mov	r0, r3
 801b34c:	46bd      	mov	sp, r7
 801b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b352:	4770      	bx	lr

0801b354 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 801b354:	b480      	push	{r7}
 801b356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 801b358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b35c:	689b      	ldr	r3, [r3, #8]
 801b35e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b362:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b366:	d101      	bne.n	801b36c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 801b368:	2301      	movs	r3, #1
 801b36a:	e000      	b.n	801b36e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 801b36c:	2300      	movs	r3, #0
}
 801b36e:	4618      	mov	r0, r3
 801b370:	46bd      	mov	sp, r7
 801b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b376:	4770      	bx	lr

0801b378 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 801b378:	b480      	push	{r7}
 801b37a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 801b37c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b380:	689b      	ldr	r3, [r3, #8]
 801b382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801b386:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801b38a:	d101      	bne.n	801b390 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 801b38c:	2301      	movs	r3, #1
 801b38e:	e000      	b.n	801b392 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 801b390:	2300      	movs	r3, #0
}
 801b392:	4618      	mov	r0, r3
 801b394:	46bd      	mov	sp, r7
 801b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b39a:	4770      	bx	lr

0801b39c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b39c:	b590      	push	{r4, r7, lr}
 801b39e:	b08b      	sub	sp, #44	; 0x2c
 801b3a0:	af00      	add	r7, sp, #0
 801b3a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d101      	bne.n	801b3ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801b3aa:	2301      	movs	r3, #1
 801b3ac:	e34b      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	f003 0320 	and.w	r3, r3, #32
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	f000 808f 	beq.w	801b4da <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b3bc:	f7ff fe7d 	bl	801b0ba <LL_RCC_GetSysClkSource>
 801b3c0:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b3c2:	f7ff ff83 	bl	801b2cc <LL_RCC_PLL_GetMainSource>
 801b3c6:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d005      	beq.n	801b3da <HAL_RCC_OscConfig+0x3e>
 801b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3d0:	2b0c      	cmp	r3, #12
 801b3d2:	d149      	bne.n	801b468 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 801b3d4:	6a3b      	ldr	r3, [r7, #32]
 801b3d6:	2b01      	cmp	r3, #1
 801b3d8:	d146      	bne.n	801b468 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b3da:	f7ff fe0b 	bl	801aff4 <LL_RCC_MSI_IsReady>
 801b3de:	4603      	mov	r3, r0
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d005      	beq.n	801b3f0 <HAL_RCC_OscConfig+0x54>
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	69db      	ldr	r3, [r3, #28]
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d101      	bne.n	801b3f0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 801b3ec:	2301      	movs	r3, #1
 801b3ee:	e32a      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801b3f4:	f7ff fe23 	bl	801b03e <LL_RCC_MSI_GetRange>
 801b3f8:	4603      	mov	r3, r0
 801b3fa:	429c      	cmp	r4, r3
 801b3fc:	d914      	bls.n	801b428 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b402:	4618      	mov	r0, r3
 801b404:	f000 fd2a 	bl	801be5c <RCC_SetFlashLatencyFromMSIRange>
 801b408:	4603      	mov	r3, r0
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d001      	beq.n	801b412 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 801b40e:	2301      	movs	r3, #1
 801b410:	e319      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b416:	4618      	mov	r0, r3
 801b418:	f7ff fdfd 	bl	801b016 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	6a1b      	ldr	r3, [r3, #32]
 801b420:	4618      	mov	r0, r3
 801b422:	f7ff fe21 	bl	801b068 <LL_RCC_MSI_SetCalibTrimming>
 801b426:	e013      	b.n	801b450 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b42c:	4618      	mov	r0, r3
 801b42e:	f7ff fdf2 	bl	801b016 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	6a1b      	ldr	r3, [r3, #32]
 801b436:	4618      	mov	r0, r3
 801b438:	f7ff fe16 	bl	801b068 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b440:	4618      	mov	r0, r3
 801b442:	f000 fd0b 	bl	801be5c <RCC_SetFlashLatencyFromMSIRange>
 801b446:	4603      	mov	r3, r0
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d001      	beq.n	801b450 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 801b44c:	2301      	movs	r3, #1
 801b44e:	e2fa      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 801b450:	f7fa f896 	bl	8015580 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801b454:	4bb4      	ldr	r3, [pc, #720]	; (801b728 <HAL_RCC_OscConfig+0x38c>)
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	4618      	mov	r0, r3
 801b45a:	f7f9 ff6b 	bl	8015334 <HAL_InitTick>
 801b45e:	4603      	mov	r3, r0
 801b460:	2b00      	cmp	r3, #0
 801b462:	d039      	beq.n	801b4d8 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 801b464:	2301      	movs	r3, #1
 801b466:	e2ee      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	69db      	ldr	r3, [r3, #28]
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d01e      	beq.n	801b4ae <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b470:	f7ff fda2 	bl	801afb8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801b474:	f7fa fefa 	bl	801626c <HAL_GetTick>
 801b478:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 801b47a:	e008      	b.n	801b48e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b47c:	f7fa fef6 	bl	801626c <HAL_GetTick>
 801b480:	4602      	mov	r2, r0
 801b482:	69fb      	ldr	r3, [r7, #28]
 801b484:	1ad3      	subs	r3, r2, r3
 801b486:	2b02      	cmp	r3, #2
 801b488:	d901      	bls.n	801b48e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 801b48a:	2303      	movs	r3, #3
 801b48c:	e2db      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 801b48e:	f7ff fdb1 	bl	801aff4 <LL_RCC_MSI_IsReady>
 801b492:	4603      	mov	r3, r0
 801b494:	2b00      	cmp	r3, #0
 801b496:	d0f1      	beq.n	801b47c <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b49c:	4618      	mov	r0, r3
 801b49e:	f7ff fdba 	bl	801b016 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	6a1b      	ldr	r3, [r3, #32]
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	f7ff fdde 	bl	801b068 <LL_RCC_MSI_SetCalibTrimming>
 801b4ac:	e015      	b.n	801b4da <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b4ae:	f7ff fd92 	bl	801afd6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801b4b2:	f7fa fedb 	bl	801626c <HAL_GetTick>
 801b4b6:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 801b4b8:	e008      	b.n	801b4cc <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b4ba:	f7fa fed7 	bl	801626c <HAL_GetTick>
 801b4be:	4602      	mov	r2, r0
 801b4c0:	69fb      	ldr	r3, [r7, #28]
 801b4c2:	1ad3      	subs	r3, r2, r3
 801b4c4:	2b02      	cmp	r3, #2
 801b4c6:	d901      	bls.n	801b4cc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 801b4c8:	2303      	movs	r3, #3
 801b4ca:	e2bc      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 801b4cc:	f7ff fd92 	bl	801aff4 <LL_RCC_MSI_IsReady>
 801b4d0:	4603      	mov	r3, r0
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d1f1      	bne.n	801b4ba <HAL_RCC_OscConfig+0x11e>
 801b4d6:	e000      	b.n	801b4da <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b4d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	f003 0301 	and.w	r3, r3, #1
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d05a      	beq.n	801b59c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b4e6:	f7ff fde8 	bl	801b0ba <LL_RCC_GetSysClkSource>
 801b4ea:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b4ec:	f7ff feee 	bl	801b2cc <LL_RCC_PLL_GetMainSource>
 801b4f0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801b4f2:	69bb      	ldr	r3, [r7, #24]
 801b4f4:	2b08      	cmp	r3, #8
 801b4f6:	d005      	beq.n	801b504 <HAL_RCC_OscConfig+0x168>
 801b4f8:	69bb      	ldr	r3, [r7, #24]
 801b4fa:	2b0c      	cmp	r3, #12
 801b4fc:	d10d      	bne.n	801b51a <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 801b4fe:	697b      	ldr	r3, [r7, #20]
 801b500:	2b03      	cmp	r3, #3
 801b502:	d10a      	bne.n	801b51a <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b504:	f7ff fbf8 	bl	801acf8 <LL_RCC_HSE_IsReady>
 801b508:	4603      	mov	r3, r0
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d045      	beq.n	801b59a <HAL_RCC_OscConfig+0x1fe>
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	685b      	ldr	r3, [r3, #4]
 801b512:	2b00      	cmp	r3, #0
 801b514:	d141      	bne.n	801b59a <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 801b516:	2301      	movs	r3, #1
 801b518:	e295      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	685b      	ldr	r3, [r3, #4]
 801b51e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b522:	d102      	bne.n	801b52a <HAL_RCC_OscConfig+0x18e>
 801b524:	f7ff fbca 	bl	801acbc <LL_RCC_HSE_Enable>
 801b528:	e00d      	b.n	801b546 <HAL_RCC_OscConfig+0x1aa>
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	685b      	ldr	r3, [r3, #4]
 801b52e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801b532:	d104      	bne.n	801b53e <HAL_RCC_OscConfig+0x1a2>
 801b534:	f7ff fba4 	bl	801ac80 <LL_RCC_HSE_EnableBypass>
 801b538:	f7ff fbc0 	bl	801acbc <LL_RCC_HSE_Enable>
 801b53c:	e003      	b.n	801b546 <HAL_RCC_OscConfig+0x1aa>
 801b53e:	f7ff fbcc 	bl	801acda <LL_RCC_HSE_Disable>
 801b542:	f7ff fbac 	bl	801ac9e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	685b      	ldr	r3, [r3, #4]
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d012      	beq.n	801b574 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b54e:	f7fa fe8d 	bl	801626c <HAL_GetTick>
 801b552:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 801b554:	e008      	b.n	801b568 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b556:	f7fa fe89 	bl	801626c <HAL_GetTick>
 801b55a:	4602      	mov	r2, r0
 801b55c:	69fb      	ldr	r3, [r7, #28]
 801b55e:	1ad3      	subs	r3, r2, r3
 801b560:	2b64      	cmp	r3, #100	; 0x64
 801b562:	d901      	bls.n	801b568 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 801b564:	2303      	movs	r3, #3
 801b566:	e26e      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 801b568:	f7ff fbc6 	bl	801acf8 <LL_RCC_HSE_IsReady>
 801b56c:	4603      	mov	r3, r0
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d0f1      	beq.n	801b556 <HAL_RCC_OscConfig+0x1ba>
 801b572:	e013      	b.n	801b59c <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b574:	f7fa fe7a 	bl	801626c <HAL_GetTick>
 801b578:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 801b57a:	e008      	b.n	801b58e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b57c:	f7fa fe76 	bl	801626c <HAL_GetTick>
 801b580:	4602      	mov	r2, r0
 801b582:	69fb      	ldr	r3, [r7, #28]
 801b584:	1ad3      	subs	r3, r2, r3
 801b586:	2b64      	cmp	r3, #100	; 0x64
 801b588:	d901      	bls.n	801b58e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801b58a:	2303      	movs	r3, #3
 801b58c:	e25b      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 801b58e:	f7ff fbb3 	bl	801acf8 <LL_RCC_HSE_IsReady>
 801b592:	4603      	mov	r3, r0
 801b594:	2b00      	cmp	r3, #0
 801b596:	d1f1      	bne.n	801b57c <HAL_RCC_OscConfig+0x1e0>
 801b598:	e000      	b.n	801b59c <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b59a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	f003 0302 	and.w	r3, r3, #2
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d051      	beq.n	801b64c <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b5a8:	f7ff fd87 	bl	801b0ba <LL_RCC_GetSysClkSource>
 801b5ac:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b5ae:	f7ff fe8d 	bl	801b2cc <LL_RCC_PLL_GetMainSource>
 801b5b2:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801b5b4:	693b      	ldr	r3, [r7, #16]
 801b5b6:	2b04      	cmp	r3, #4
 801b5b8:	d005      	beq.n	801b5c6 <HAL_RCC_OscConfig+0x22a>
 801b5ba:	693b      	ldr	r3, [r7, #16]
 801b5bc:	2b0c      	cmp	r3, #12
 801b5be:	d113      	bne.n	801b5e8 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 801b5c0:	68fb      	ldr	r3, [r7, #12]
 801b5c2:	2b02      	cmp	r3, #2
 801b5c4:	d110      	bne.n	801b5e8 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b5c6:	f7ff fbc7 	bl	801ad58 <LL_RCC_HSI_IsReady>
 801b5ca:	4603      	mov	r3, r0
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d005      	beq.n	801b5dc <HAL_RCC_OscConfig+0x240>
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	68db      	ldr	r3, [r3, #12]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d101      	bne.n	801b5dc <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 801b5d8:	2301      	movs	r3, #1
 801b5da:	e234      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	691b      	ldr	r3, [r3, #16]
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	f7ff fbcb 	bl	801ad7c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b5e6:	e031      	b.n	801b64c <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	68db      	ldr	r3, [r3, #12]
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d019      	beq.n	801b624 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801b5f0:	f7ff fb94 	bl	801ad1c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b5f4:	f7fa fe3a 	bl	801626c <HAL_GetTick>
 801b5f8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801b5fa:	e008      	b.n	801b60e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b5fc:	f7fa fe36 	bl	801626c <HAL_GetTick>
 801b600:	4602      	mov	r2, r0
 801b602:	69fb      	ldr	r3, [r7, #28]
 801b604:	1ad3      	subs	r3, r2, r3
 801b606:	2b02      	cmp	r3, #2
 801b608:	d901      	bls.n	801b60e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 801b60a:	2303      	movs	r3, #3
 801b60c:	e21b      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 801b60e:	f7ff fba3 	bl	801ad58 <LL_RCC_HSI_IsReady>
 801b612:	4603      	mov	r3, r0
 801b614:	2b00      	cmp	r3, #0
 801b616:	d0f1      	beq.n	801b5fc <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	691b      	ldr	r3, [r3, #16]
 801b61c:	4618      	mov	r0, r3
 801b61e:	f7ff fbad 	bl	801ad7c <LL_RCC_HSI_SetCalibTrimming>
 801b622:	e013      	b.n	801b64c <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b624:	f7ff fb89 	bl	801ad3a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b628:	f7fa fe20 	bl	801626c <HAL_GetTick>
 801b62c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 801b62e:	e008      	b.n	801b642 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b630:	f7fa fe1c 	bl	801626c <HAL_GetTick>
 801b634:	4602      	mov	r2, r0
 801b636:	69fb      	ldr	r3, [r7, #28]
 801b638:	1ad3      	subs	r3, r2, r3
 801b63a:	2b02      	cmp	r3, #2
 801b63c:	d901      	bls.n	801b642 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 801b63e:	2303      	movs	r3, #3
 801b640:	e201      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 801b642:	f7ff fb89 	bl	801ad58 <LL_RCC_HSI_IsReady>
 801b646:	4603      	mov	r3, r0
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d1f1      	bne.n	801b630 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	f003 0308 	and.w	r3, r3, #8
 801b654:	2b00      	cmp	r3, #0
 801b656:	d106      	bne.n	801b666 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801b660:	2b00      	cmp	r3, #0
 801b662:	f000 80a2 	beq.w	801b7aa <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	695b      	ldr	r3, [r3, #20]
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d075      	beq.n	801b75a <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	f003 0310 	and.w	r3, r3, #16
 801b676:	2b00      	cmp	r3, #0
 801b678:	d046      	beq.n	801b708 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 801b67a:	f7ff fc40 	bl	801aefe <LL_RCC_LSI1_IsReady>
 801b67e:	4603      	mov	r3, r0
 801b680:	2b00      	cmp	r3, #0
 801b682:	d113      	bne.n	801b6ac <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 801b684:	f7ff fc19 	bl	801aeba <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801b688:	f7fa fdf0 	bl	801626c <HAL_GetTick>
 801b68c:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 801b68e:	e008      	b.n	801b6a2 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801b690:	f7fa fdec 	bl	801626c <HAL_GetTick>
 801b694:	4602      	mov	r2, r0
 801b696:	69fb      	ldr	r3, [r7, #28]
 801b698:	1ad3      	subs	r3, r2, r3
 801b69a:	2b02      	cmp	r3, #2
 801b69c:	d901      	bls.n	801b6a2 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 801b69e:	2303      	movs	r3, #3
 801b6a0:	e1d1      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801b6a2:	f7ff fc2c 	bl	801aefe <LL_RCC_LSI1_IsReady>
 801b6a6:	4603      	mov	r3, r0
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d0f1      	beq.n	801b690 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 801b6ac:	f7ff fc39 	bl	801af22 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b6b0:	f7fa fddc 	bl	801626c <HAL_GetTick>
 801b6b4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 801b6b6:	e008      	b.n	801b6ca <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801b6b8:	f7fa fdd8 	bl	801626c <HAL_GetTick>
 801b6bc:	4602      	mov	r2, r0
 801b6be:	69fb      	ldr	r3, [r7, #28]
 801b6c0:	1ad3      	subs	r3, r2, r3
 801b6c2:	2b03      	cmp	r3, #3
 801b6c4:	d901      	bls.n	801b6ca <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 801b6c6:	2303      	movs	r3, #3
 801b6c8:	e1bd      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 801b6ca:	f7ff fc4c 	bl	801af66 <LL_RCC_LSI2_IsReady>
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d0f1      	beq.n	801b6b8 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	699b      	ldr	r3, [r3, #24]
 801b6d8:	4618      	mov	r0, r3
 801b6da:	f7ff fc56 	bl	801af8a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 801b6de:	f7ff fbfd 	bl	801aedc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b6e2:	f7fa fdc3 	bl	801626c <HAL_GetTick>
 801b6e6:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 801b6e8:	e008      	b.n	801b6fc <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801b6ea:	f7fa fdbf 	bl	801626c <HAL_GetTick>
 801b6ee:	4602      	mov	r2, r0
 801b6f0:	69fb      	ldr	r3, [r7, #28]
 801b6f2:	1ad3      	subs	r3, r2, r3
 801b6f4:	2b02      	cmp	r3, #2
 801b6f6:	d901      	bls.n	801b6fc <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 801b6f8:	2303      	movs	r3, #3
 801b6fa:	e1a4      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 801b6fc:	f7ff fbff 	bl	801aefe <LL_RCC_LSI1_IsReady>
 801b700:	4603      	mov	r3, r0
 801b702:	2b00      	cmp	r3, #0
 801b704:	d1f1      	bne.n	801b6ea <HAL_RCC_OscConfig+0x34e>
 801b706:	e050      	b.n	801b7aa <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 801b708:	f7ff fbd7 	bl	801aeba <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b70c:	f7fa fdae 	bl	801626c <HAL_GetTick>
 801b710:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801b712:	e00b      	b.n	801b72c <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801b714:	f7fa fdaa 	bl	801626c <HAL_GetTick>
 801b718:	4602      	mov	r2, r0
 801b71a:	69fb      	ldr	r3, [r7, #28]
 801b71c:	1ad3      	subs	r3, r2, r3
 801b71e:	2b02      	cmp	r3, #2
 801b720:	d904      	bls.n	801b72c <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 801b722:	2303      	movs	r3, #3
 801b724:	e18f      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
 801b726:	bf00      	nop
 801b728:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 801b72c:	f7ff fbe7 	bl	801aefe <LL_RCC_LSI1_IsReady>
 801b730:	4603      	mov	r3, r0
 801b732:	2b00      	cmp	r3, #0
 801b734:	d0ee      	beq.n	801b714 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 801b736:	f7ff fc05 	bl	801af44 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 801b73a:	e008      	b.n	801b74e <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801b73c:	f7fa fd96 	bl	801626c <HAL_GetTick>
 801b740:	4602      	mov	r2, r0
 801b742:	69fb      	ldr	r3, [r7, #28]
 801b744:	1ad3      	subs	r3, r2, r3
 801b746:	2b03      	cmp	r3, #3
 801b748:	d901      	bls.n	801b74e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 801b74a:	2303      	movs	r3, #3
 801b74c:	e17b      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 801b74e:	f7ff fc0a 	bl	801af66 <LL_RCC_LSI2_IsReady>
 801b752:	4603      	mov	r3, r0
 801b754:	2b00      	cmp	r3, #0
 801b756:	d1f1      	bne.n	801b73c <HAL_RCC_OscConfig+0x3a0>
 801b758:	e027      	b.n	801b7aa <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 801b75a:	f7ff fbf3 	bl	801af44 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b75e:	f7fa fd85 	bl	801626c <HAL_GetTick>
 801b762:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801b764:	e008      	b.n	801b778 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801b766:	f7fa fd81 	bl	801626c <HAL_GetTick>
 801b76a:	4602      	mov	r2, r0
 801b76c:	69fb      	ldr	r3, [r7, #28]
 801b76e:	1ad3      	subs	r3, r2, r3
 801b770:	2b03      	cmp	r3, #3
 801b772:	d901      	bls.n	801b778 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 801b774:	2303      	movs	r3, #3
 801b776:	e166      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 801b778:	f7ff fbf5 	bl	801af66 <LL_RCC_LSI2_IsReady>
 801b77c:	4603      	mov	r3, r0
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d1f1      	bne.n	801b766 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 801b782:	f7ff fbab 	bl	801aedc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b786:	f7fa fd71 	bl	801626c <HAL_GetTick>
 801b78a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 801b78c:	e008      	b.n	801b7a0 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801b78e:	f7fa fd6d 	bl	801626c <HAL_GetTick>
 801b792:	4602      	mov	r2, r0
 801b794:	69fb      	ldr	r3, [r7, #28]
 801b796:	1ad3      	subs	r3, r2, r3
 801b798:	2b02      	cmp	r3, #2
 801b79a:	d901      	bls.n	801b7a0 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 801b79c:	2303      	movs	r3, #3
 801b79e:	e152      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801b7a0:	f7ff fbad 	bl	801aefe <LL_RCC_LSI1_IsReady>
 801b7a4:	4603      	mov	r3, r0
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d1f1      	bne.n	801b78e <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	f003 0304 	and.w	r3, r3, #4
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d05b      	beq.n	801b86e <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b7b6:	4ba6      	ldr	r3, [pc, #664]	; (801ba50 <HAL_RCC_OscConfig+0x6b4>)
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d114      	bne.n	801b7ec <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801b7c2:	f7ff f9b1 	bl	801ab28 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b7c6:	f7fa fd51 	bl	801626c <HAL_GetTick>
 801b7ca:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b7cc:	e008      	b.n	801b7e0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b7ce:	f7fa fd4d 	bl	801626c <HAL_GetTick>
 801b7d2:	4602      	mov	r2, r0
 801b7d4:	69fb      	ldr	r3, [r7, #28]
 801b7d6:	1ad3      	subs	r3, r2, r3
 801b7d8:	2b02      	cmp	r3, #2
 801b7da:	d901      	bls.n	801b7e0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 801b7dc:	2303      	movs	r3, #3
 801b7de:	e132      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b7e0:	4b9b      	ldr	r3, [pc, #620]	; (801ba50 <HAL_RCC_OscConfig+0x6b4>)
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d0f0      	beq.n	801b7ce <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	689b      	ldr	r3, [r3, #8]
 801b7f0:	2b01      	cmp	r3, #1
 801b7f2:	d102      	bne.n	801b7fa <HAL_RCC_OscConfig+0x45e>
 801b7f4:	f7ff fb0b 	bl	801ae0e <LL_RCC_LSE_Enable>
 801b7f8:	e00c      	b.n	801b814 <HAL_RCC_OscConfig+0x478>
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	689b      	ldr	r3, [r3, #8]
 801b7fe:	2b05      	cmp	r3, #5
 801b800:	d104      	bne.n	801b80c <HAL_RCC_OscConfig+0x470>
 801b802:	f7ff fb26 	bl	801ae52 <LL_RCC_LSE_EnableBypass>
 801b806:	f7ff fb02 	bl	801ae0e <LL_RCC_LSE_Enable>
 801b80a:	e003      	b.n	801b814 <HAL_RCC_OscConfig+0x478>
 801b80c:	f7ff fb10 	bl	801ae30 <LL_RCC_LSE_Disable>
 801b810:	f7ff fb30 	bl	801ae74 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	689b      	ldr	r3, [r3, #8]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d014      	beq.n	801b846 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b81c:	f7fa fd26 	bl	801626c <HAL_GetTick>
 801b820:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 801b822:	e00a      	b.n	801b83a <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b824:	f7fa fd22 	bl	801626c <HAL_GetTick>
 801b828:	4602      	mov	r2, r0
 801b82a:	69fb      	ldr	r3, [r7, #28]
 801b82c:	1ad3      	subs	r3, r2, r3
 801b82e:	f241 3288 	movw	r2, #5000	; 0x1388
 801b832:	4293      	cmp	r3, r2
 801b834:	d901      	bls.n	801b83a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 801b836:	2303      	movs	r3, #3
 801b838:	e105      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 801b83a:	f7ff fb2c 	bl	801ae96 <LL_RCC_LSE_IsReady>
 801b83e:	4603      	mov	r3, r0
 801b840:	2b00      	cmp	r3, #0
 801b842:	d0ef      	beq.n	801b824 <HAL_RCC_OscConfig+0x488>
 801b844:	e013      	b.n	801b86e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b846:	f7fa fd11 	bl	801626c <HAL_GetTick>
 801b84a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 801b84c:	e00a      	b.n	801b864 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b84e:	f7fa fd0d 	bl	801626c <HAL_GetTick>
 801b852:	4602      	mov	r2, r0
 801b854:	69fb      	ldr	r3, [r7, #28]
 801b856:	1ad3      	subs	r3, r2, r3
 801b858:	f241 3288 	movw	r2, #5000	; 0x1388
 801b85c:	4293      	cmp	r3, r2
 801b85e:	d901      	bls.n	801b864 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 801b860:	2303      	movs	r3, #3
 801b862:	e0f0      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 801b864:	f7ff fb17 	bl	801ae96 <LL_RCC_LSE_IsReady>
 801b868:	4603      	mov	r3, r0
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d1ef      	bne.n	801b84e <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b876:	2b00      	cmp	r3, #0
 801b878:	d02c      	beq.n	801b8d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d014      	beq.n	801b8ac <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b882:	f7ff fa90 	bl	801ada6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b886:	f7fa fcf1 	bl	801626c <HAL_GetTick>
 801b88a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 801b88c:	e008      	b.n	801b8a0 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b88e:	f7fa fced 	bl	801626c <HAL_GetTick>
 801b892:	4602      	mov	r2, r0
 801b894:	69fb      	ldr	r3, [r7, #28]
 801b896:	1ad3      	subs	r3, r2, r3
 801b898:	2b02      	cmp	r3, #2
 801b89a:	d901      	bls.n	801b8a0 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 801b89c:	2303      	movs	r3, #3
 801b89e:	e0d2      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801b8a0:	f7ff faa3 	bl	801adea <LL_RCC_HSI48_IsReady>
 801b8a4:	4603      	mov	r3, r0
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d0f1      	beq.n	801b88e <HAL_RCC_OscConfig+0x4f2>
 801b8aa:	e013      	b.n	801b8d4 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b8ac:	f7ff fa8c 	bl	801adc8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b8b0:	f7fa fcdc 	bl	801626c <HAL_GetTick>
 801b8b4:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 801b8b6:	e008      	b.n	801b8ca <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b8b8:	f7fa fcd8 	bl	801626c <HAL_GetTick>
 801b8bc:	4602      	mov	r2, r0
 801b8be:	69fb      	ldr	r3, [r7, #28]
 801b8c0:	1ad3      	subs	r3, r2, r3
 801b8c2:	2b02      	cmp	r3, #2
 801b8c4:	d901      	bls.n	801b8ca <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 801b8c6:	2303      	movs	r3, #3
 801b8c8:	e0bd      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 801b8ca:	f7ff fa8e 	bl	801adea <LL_RCC_HSI48_IsReady>
 801b8ce:	4603      	mov	r3, r0
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d1f1      	bne.n	801b8b8 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	f000 80b3 	beq.w	801ba44 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b8de:	f7ff fbec 	bl	801b0ba <LL_RCC_GetSysClkSource>
 801b8e2:	4603      	mov	r3, r0
 801b8e4:	2b0c      	cmp	r3, #12
 801b8e6:	d076      	beq.n	801b9d6 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b8ec:	2b02      	cmp	r3, #2
 801b8ee:	d14b      	bne.n	801b988 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b8f0:	f7ff fca6 	bl	801b240 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b8f4:	f7fa fcba 	bl	801626c <HAL_GetTick>
 801b8f8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 801b8fa:	e008      	b.n	801b90e <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b8fc:	f7fa fcb6 	bl	801626c <HAL_GetTick>
 801b900:	4602      	mov	r2, r0
 801b902:	69fb      	ldr	r3, [r7, #28]
 801b904:	1ad3      	subs	r3, r2, r3
 801b906:	2b02      	cmp	r3, #2
 801b908:	d901      	bls.n	801b90e <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 801b90a:	2303      	movs	r3, #3
 801b90c:	e09b      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 801b90e:	f7ff fca6 	bl	801b25e <LL_RCC_PLL_IsReady>
 801b912:	4603      	mov	r3, r0
 801b914:	2b00      	cmp	r3, #0
 801b916:	d1f1      	bne.n	801b8fc <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b91c:	68da      	ldr	r2, [r3, #12]
 801b91e:	4b4d      	ldr	r3, [pc, #308]	; (801ba54 <HAL_RCC_OscConfig+0x6b8>)
 801b920:	4013      	ands	r3, r2
 801b922:	687a      	ldr	r2, [r7, #4]
 801b924:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801b926:	687a      	ldr	r2, [r7, #4]
 801b928:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801b92a:	4311      	orrs	r1, r2
 801b92c:	687a      	ldr	r2, [r7, #4]
 801b92e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801b930:	0212      	lsls	r2, r2, #8
 801b932:	4311      	orrs	r1, r2
 801b934:	687a      	ldr	r2, [r7, #4]
 801b936:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801b938:	4311      	orrs	r1, r2
 801b93a:	687a      	ldr	r2, [r7, #4]
 801b93c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801b93e:	4311      	orrs	r1, r2
 801b940:	687a      	ldr	r2, [r7, #4]
 801b942:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801b944:	430a      	orrs	r2, r1
 801b946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b94a:	4313      	orrs	r3, r2
 801b94c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b94e:	f7ff fc68 	bl	801b222 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801b952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b956:	68db      	ldr	r3, [r3, #12]
 801b958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b95c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b960:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b962:	f7fa fc83 	bl	801626c <HAL_GetTick>
 801b966:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 801b968:	e008      	b.n	801b97c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b96a:	f7fa fc7f 	bl	801626c <HAL_GetTick>
 801b96e:	4602      	mov	r2, r0
 801b970:	69fb      	ldr	r3, [r7, #28]
 801b972:	1ad3      	subs	r3, r2, r3
 801b974:	2b02      	cmp	r3, #2
 801b976:	d901      	bls.n	801b97c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 801b978:	2303      	movs	r3, #3
 801b97a:	e064      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 801b97c:	f7ff fc6f 	bl	801b25e <LL_RCC_PLL_IsReady>
 801b980:	4603      	mov	r3, r0
 801b982:	2b00      	cmp	r3, #0
 801b984:	d0f1      	beq.n	801b96a <HAL_RCC_OscConfig+0x5ce>
 801b986:	e05d      	b.n	801ba44 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b988:	f7ff fc5a 	bl	801b240 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 801b98c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b990:	68db      	ldr	r3, [r3, #12]
 801b992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b996:	f023 0303 	bic.w	r3, r3, #3
 801b99a:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 801b99c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b9a0:	68db      	ldr	r3, [r3, #12]
 801b9a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b9a6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 801b9aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b9ae:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b9b0:	f7fa fc5c 	bl	801626c <HAL_GetTick>
 801b9b4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 801b9b6:	e008      	b.n	801b9ca <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b9b8:	f7fa fc58 	bl	801626c <HAL_GetTick>
 801b9bc:	4602      	mov	r2, r0
 801b9be:	69fb      	ldr	r3, [r7, #28]
 801b9c0:	1ad3      	subs	r3, r2, r3
 801b9c2:	2b02      	cmp	r3, #2
 801b9c4:	d901      	bls.n	801b9ca <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 801b9c6:	2303      	movs	r3, #3
 801b9c8:	e03d      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 801b9ca:	f7ff fc48 	bl	801b25e <LL_RCC_PLL_IsReady>
 801b9ce:	4603      	mov	r3, r0
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	d1f1      	bne.n	801b9b8 <HAL_RCC_OscConfig+0x61c>
 801b9d4:	e036      	b.n	801ba44 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9da:	2b01      	cmp	r3, #1
 801b9dc:	d101      	bne.n	801b9e2 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 801b9de:	2301      	movs	r3, #1
 801b9e0:	e031      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 801b9e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b9e6:	68db      	ldr	r3, [r3, #12]
 801b9e8:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b9ea:	68bb      	ldr	r3, [r7, #8]
 801b9ec:	f003 0203 	and.w	r2, r3, #3
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9f4:	429a      	cmp	r2, r3
 801b9f6:	d123      	bne.n	801ba40 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801b9f8:	68bb      	ldr	r3, [r7, #8]
 801b9fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ba02:	429a      	cmp	r2, r3
 801ba04:	d11c      	bne.n	801ba40 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801ba06:	68bb      	ldr	r3, [r7, #8]
 801ba08:	0a1b      	lsrs	r3, r3, #8
 801ba0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801ba12:	429a      	cmp	r2, r3
 801ba14:	d114      	bne.n	801ba40 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801ba16:	68bb      	ldr	r3, [r7, #8]
 801ba18:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801ba20:	429a      	cmp	r2, r3
 801ba22:	d10d      	bne.n	801ba40 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801ba24:	68bb      	ldr	r3, [r7, #8]
 801ba26:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801ba2e:	429a      	cmp	r2, r3
 801ba30:	d106      	bne.n	801ba40 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 801ba32:	68bb      	ldr	r3, [r7, #8]
 801ba34:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801ba3c:	429a      	cmp	r2, r3
 801ba3e:	d001      	beq.n	801ba44 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 801ba40:	2301      	movs	r3, #1
 801ba42:	e000      	b.n	801ba46 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 801ba44:	2300      	movs	r3, #0
}
 801ba46:	4618      	mov	r0, r3
 801ba48:	372c      	adds	r7, #44	; 0x2c
 801ba4a:	46bd      	mov	sp, r7
 801ba4c:	bd90      	pop	{r4, r7, pc}
 801ba4e:	bf00      	nop
 801ba50:	58000400 	.word	0x58000400
 801ba54:	11c1808c 	.word	0x11c1808c

0801ba58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ba58:	b580      	push	{r7, lr}
 801ba5a:	b084      	sub	sp, #16
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	6078      	str	r0, [r7, #4]
 801ba60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d101      	bne.n	801ba6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ba68:	2301      	movs	r3, #1
 801ba6a:	e12a      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801ba6c:	4b97      	ldr	r3, [pc, #604]	; (801bccc <HAL_RCC_ClockConfig+0x274>)
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	f003 0307 	and.w	r3, r3, #7
 801ba74:	683a      	ldr	r2, [r7, #0]
 801ba76:	429a      	cmp	r2, r3
 801ba78:	d91b      	bls.n	801bab2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ba7a:	4b94      	ldr	r3, [pc, #592]	; (801bccc <HAL_RCC_ClockConfig+0x274>)
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	f023 0207 	bic.w	r2, r3, #7
 801ba82:	4992      	ldr	r1, [pc, #584]	; (801bccc <HAL_RCC_ClockConfig+0x274>)
 801ba84:	683b      	ldr	r3, [r7, #0]
 801ba86:	4313      	orrs	r3, r2
 801ba88:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ba8a:	f7fa fbef 	bl	801626c <HAL_GetTick>
 801ba8e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ba90:	e008      	b.n	801baa4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801ba92:	f7fa fbeb 	bl	801626c <HAL_GetTick>
 801ba96:	4602      	mov	r2, r0
 801ba98:	68fb      	ldr	r3, [r7, #12]
 801ba9a:	1ad3      	subs	r3, r2, r3
 801ba9c:	2b02      	cmp	r3, #2
 801ba9e:	d901      	bls.n	801baa4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 801baa0:	2303      	movs	r3, #3
 801baa2:	e10e      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801baa4:	4b89      	ldr	r3, [pc, #548]	; (801bccc <HAL_RCC_ClockConfig+0x274>)
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	f003 0307 	and.w	r3, r3, #7
 801baac:	683a      	ldr	r2, [r7, #0]
 801baae:	429a      	cmp	r2, r3
 801bab0:	d1ef      	bne.n	801ba92 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	f003 0302 	and.w	r3, r3, #2
 801baba:	2b00      	cmp	r3, #0
 801babc:	d016      	beq.n	801baec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	689b      	ldr	r3, [r3, #8]
 801bac2:	4618      	mov	r0, r3
 801bac4:	f7ff fb05 	bl	801b0d2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801bac8:	f7fa fbd0 	bl	801626c <HAL_GetTick>
 801bacc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801bace:	e008      	b.n	801bae2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801bad0:	f7fa fbcc 	bl	801626c <HAL_GetTick>
 801bad4:	4602      	mov	r2, r0
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	1ad3      	subs	r3, r2, r3
 801bada:	2b02      	cmp	r3, #2
 801badc:	d901      	bls.n	801bae2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 801bade:	2303      	movs	r3, #3
 801bae0:	e0ef      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801bae2:	f7ff fbff 	bl	801b2e4 <LL_RCC_IsActiveFlag_HPRE>
 801bae6:	4603      	mov	r3, r0
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d0f1      	beq.n	801bad0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	f003 0320 	and.w	r3, r3, #32
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d016      	beq.n	801bb26 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	695b      	ldr	r3, [r3, #20]
 801bafc:	4618      	mov	r0, r3
 801bafe:	f7ff fafc 	bl	801b0fa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801bb02:	f7fa fbb3 	bl	801626c <HAL_GetTick>
 801bb06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801bb08:	e008      	b.n	801bb1c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801bb0a:	f7fa fbaf 	bl	801626c <HAL_GetTick>
 801bb0e:	4602      	mov	r2, r0
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	1ad3      	subs	r3, r2, r3
 801bb14:	2b02      	cmp	r3, #2
 801bb16:	d901      	bls.n	801bb1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 801bb18:	2303      	movs	r3, #3
 801bb1a:	e0d2      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801bb1c:	f7ff fbf4 	bl	801b308 <LL_RCC_IsActiveFlag_C2HPRE>
 801bb20:	4603      	mov	r3, r0
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d0f1      	beq.n	801bb0a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	681b      	ldr	r3, [r3, #0]
 801bb2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d016      	beq.n	801bb60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	699b      	ldr	r3, [r3, #24]
 801bb36:	4618      	mov	r0, r3
 801bb38:	f7ff faf5 	bl	801b126 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801bb3c:	f7fa fb96 	bl	801626c <HAL_GetTick>
 801bb40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801bb42:	e008      	b.n	801bb56 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801bb44:	f7fa fb92 	bl	801626c <HAL_GetTick>
 801bb48:	4602      	mov	r2, r0
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	1ad3      	subs	r3, r2, r3
 801bb4e:	2b02      	cmp	r3, #2
 801bb50:	d901      	bls.n	801bb56 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801bb52:	2303      	movs	r3, #3
 801bb54:	e0b5      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801bb56:	f7ff fbea 	bl	801b32e <LL_RCC_IsActiveFlag_SHDHPRE>
 801bb5a:	4603      	mov	r3, r0
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d0f1      	beq.n	801bb44 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	f003 0304 	and.w	r3, r3, #4
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d016      	beq.n	801bb9a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	68db      	ldr	r3, [r3, #12]
 801bb70:	4618      	mov	r0, r3
 801bb72:	f7ff faef 	bl	801b154 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801bb76:	f7fa fb79 	bl	801626c <HAL_GetTick>
 801bb7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801bb7c:	e008      	b.n	801bb90 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801bb7e:	f7fa fb75 	bl	801626c <HAL_GetTick>
 801bb82:	4602      	mov	r2, r0
 801bb84:	68fb      	ldr	r3, [r7, #12]
 801bb86:	1ad3      	subs	r3, r2, r3
 801bb88:	2b02      	cmp	r3, #2
 801bb8a:	d901      	bls.n	801bb90 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 801bb8c:	2303      	movs	r3, #3
 801bb8e:	e098      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801bb90:	f7ff fbe0 	bl	801b354 <LL_RCC_IsActiveFlag_PPRE1>
 801bb94:	4603      	mov	r3, r0
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d0f1      	beq.n	801bb7e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	f003 0308 	and.w	r3, r3, #8
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d017      	beq.n	801bbd6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	691b      	ldr	r3, [r3, #16]
 801bbaa:	00db      	lsls	r3, r3, #3
 801bbac:	4618      	mov	r0, r3
 801bbae:	f7ff fae5 	bl	801b17c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801bbb2:	f7fa fb5b 	bl	801626c <HAL_GetTick>
 801bbb6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801bbb8:	e008      	b.n	801bbcc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801bbba:	f7fa fb57 	bl	801626c <HAL_GetTick>
 801bbbe:	4602      	mov	r2, r0
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	1ad3      	subs	r3, r2, r3
 801bbc4:	2b02      	cmp	r3, #2
 801bbc6:	d901      	bls.n	801bbcc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 801bbc8:	2303      	movs	r3, #3
 801bbca:	e07a      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801bbcc:	f7ff fbd4 	bl	801b378 <LL_RCC_IsActiveFlag_PPRE2>
 801bbd0:	4603      	mov	r3, r0
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d0f1      	beq.n	801bbba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	681b      	ldr	r3, [r3, #0]
 801bbda:	f003 0301 	and.w	r3, r3, #1
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d043      	beq.n	801bc6a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	685b      	ldr	r3, [r3, #4]
 801bbe6:	2b02      	cmp	r3, #2
 801bbe8:	d106      	bne.n	801bbf8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 801bbea:	f7ff f885 	bl	801acf8 <LL_RCC_HSE_IsReady>
 801bbee:	4603      	mov	r3, r0
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	d11e      	bne.n	801bc32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801bbf4:	2301      	movs	r3, #1
 801bbf6:	e064      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	685b      	ldr	r3, [r3, #4]
 801bbfc:	2b03      	cmp	r3, #3
 801bbfe:	d106      	bne.n	801bc0e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 801bc00:	f7ff fb2d 	bl	801b25e <LL_RCC_PLL_IsReady>
 801bc04:	4603      	mov	r3, r0
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d113      	bne.n	801bc32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801bc0a:	2301      	movs	r3, #1
 801bc0c:	e059      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	685b      	ldr	r3, [r3, #4]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d106      	bne.n	801bc24 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801bc16:	f7ff f9ed 	bl	801aff4 <LL_RCC_MSI_IsReady>
 801bc1a:	4603      	mov	r3, r0
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d108      	bne.n	801bc32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801bc20:	2301      	movs	r3, #1
 801bc22:	e04e      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 801bc24:	f7ff f898 	bl	801ad58 <LL_RCC_HSI_IsReady>
 801bc28:	4603      	mov	r3, r0
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d101      	bne.n	801bc32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801bc2e:	2301      	movs	r3, #1
 801bc30:	e047      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	685b      	ldr	r3, [r3, #4]
 801bc36:	4618      	mov	r0, r3
 801bc38:	f7ff fa2b 	bl	801b092 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801bc3c:	f7fa fb16 	bl	801626c <HAL_GetTick>
 801bc40:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bc42:	e00a      	b.n	801bc5a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bc44:	f7fa fb12 	bl	801626c <HAL_GetTick>
 801bc48:	4602      	mov	r2, r0
 801bc4a:	68fb      	ldr	r3, [r7, #12]
 801bc4c:	1ad3      	subs	r3, r2, r3
 801bc4e:	f241 3288 	movw	r2, #5000	; 0x1388
 801bc52:	4293      	cmp	r3, r2
 801bc54:	d901      	bls.n	801bc5a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801bc56:	2303      	movs	r3, #3
 801bc58:	e033      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bc5a:	f7ff fa2e 	bl	801b0ba <LL_RCC_GetSysClkSource>
 801bc5e:	4602      	mov	r2, r0
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	685b      	ldr	r3, [r3, #4]
 801bc64:	009b      	lsls	r3, r3, #2
 801bc66:	429a      	cmp	r2, r3
 801bc68:	d1ec      	bne.n	801bc44 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801bc6a:	4b18      	ldr	r3, [pc, #96]	; (801bccc <HAL_RCC_ClockConfig+0x274>)
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	f003 0307 	and.w	r3, r3, #7
 801bc72:	683a      	ldr	r2, [r7, #0]
 801bc74:	429a      	cmp	r2, r3
 801bc76:	d21b      	bcs.n	801bcb0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bc78:	4b14      	ldr	r3, [pc, #80]	; (801bccc <HAL_RCC_ClockConfig+0x274>)
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	f023 0207 	bic.w	r2, r3, #7
 801bc80:	4912      	ldr	r1, [pc, #72]	; (801bccc <HAL_RCC_ClockConfig+0x274>)
 801bc82:	683b      	ldr	r3, [r7, #0]
 801bc84:	4313      	orrs	r3, r2
 801bc86:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801bc88:	f7fa faf0 	bl	801626c <HAL_GetTick>
 801bc8c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bc8e:	e008      	b.n	801bca2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801bc90:	f7fa faec 	bl	801626c <HAL_GetTick>
 801bc94:	4602      	mov	r2, r0
 801bc96:	68fb      	ldr	r3, [r7, #12]
 801bc98:	1ad3      	subs	r3, r2, r3
 801bc9a:	2b02      	cmp	r3, #2
 801bc9c:	d901      	bls.n	801bca2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 801bc9e:	2303      	movs	r3, #3
 801bca0:	e00f      	b.n	801bcc2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bca2:	4b0a      	ldr	r3, [pc, #40]	; (801bccc <HAL_RCC_ClockConfig+0x274>)
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	f003 0307 	and.w	r3, r3, #7
 801bcaa:	683a      	ldr	r2, [r7, #0]
 801bcac:	429a      	cmp	r2, r3
 801bcae:	d1ef      	bne.n	801bc90 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 801bcb0:	f7f9 fc66 	bl	8015580 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 801bcb4:	f7fa fae6 	bl	8016284 <HAL_GetTickPrio>
 801bcb8:	4603      	mov	r3, r0
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f7f9 fb3a 	bl	8015334 <HAL_InitTick>
 801bcc0:	4603      	mov	r3, r0
}
 801bcc2:	4618      	mov	r0, r3
 801bcc4:	3710      	adds	r7, #16
 801bcc6:	46bd      	mov	sp, r7
 801bcc8:	bd80      	pop	{r7, pc}
 801bcca:	bf00      	nop
 801bccc:	58004000 	.word	0x58004000

0801bcd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bcd0:	b590      	push	{r4, r7, lr}
 801bcd2:	b085      	sub	sp, #20
 801bcd4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bcd6:	f7ff f9f0 	bl	801b0ba <LL_RCC_GetSysClkSource>
 801bcda:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d10a      	bne.n	801bcf8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801bce2:	f7ff f9ac 	bl	801b03e <LL_RCC_MSI_GetRange>
 801bce6:	4603      	mov	r3, r0
 801bce8:	091b      	lsrs	r3, r3, #4
 801bcea:	f003 030f 	and.w	r3, r3, #15
 801bcee:	4a2a      	ldr	r2, [pc, #168]	; (801bd98 <HAL_RCC_GetSysClockFreq+0xc8>)
 801bcf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bcf4:	60fb      	str	r3, [r7, #12]
 801bcf6:	e04a      	b.n	801bd8e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	2b04      	cmp	r3, #4
 801bcfc:	d102      	bne.n	801bd04 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801bcfe:	4b27      	ldr	r3, [pc, #156]	; (801bd9c <HAL_RCC_GetSysClockFreq+0xcc>)
 801bd00:	60fb      	str	r3, [r7, #12]
 801bd02:	e044      	b.n	801bd8e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	2b08      	cmp	r3, #8
 801bd08:	d10a      	bne.n	801bd20 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801bd0a:	f7fe ffa7 	bl	801ac5c <LL_RCC_HSE_IsEnabledDiv2>
 801bd0e:	4603      	mov	r3, r0
 801bd10:	2b01      	cmp	r3, #1
 801bd12:	d102      	bne.n	801bd1a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 801bd14:	4b21      	ldr	r3, [pc, #132]	; (801bd9c <HAL_RCC_GetSysClockFreq+0xcc>)
 801bd16:	60fb      	str	r3, [r7, #12]
 801bd18:	e039      	b.n	801bd8e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801bd1a:	4b21      	ldr	r3, [pc, #132]	; (801bda0 <HAL_RCC_GetSysClockFreq+0xd0>)
 801bd1c:	60fb      	str	r3, [r7, #12]
 801bd1e:	e036      	b.n	801bd8e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 801bd20:	f7ff fad4 	bl	801b2cc <LL_RCC_PLL_GetMainSource>
 801bd24:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 801bd26:	683b      	ldr	r3, [r7, #0]
 801bd28:	2b02      	cmp	r3, #2
 801bd2a:	d002      	beq.n	801bd32 <HAL_RCC_GetSysClockFreq+0x62>
 801bd2c:	2b03      	cmp	r3, #3
 801bd2e:	d003      	beq.n	801bd38 <HAL_RCC_GetSysClockFreq+0x68>
 801bd30:	e00d      	b.n	801bd4e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 801bd32:	4b1a      	ldr	r3, [pc, #104]	; (801bd9c <HAL_RCC_GetSysClockFreq+0xcc>)
 801bd34:	60bb      	str	r3, [r7, #8]
        break;
 801bd36:	e015      	b.n	801bd64 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801bd38:	f7fe ff90 	bl	801ac5c <LL_RCC_HSE_IsEnabledDiv2>
 801bd3c:	4603      	mov	r3, r0
 801bd3e:	2b01      	cmp	r3, #1
 801bd40:	d102      	bne.n	801bd48 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 801bd42:	4b16      	ldr	r3, [pc, #88]	; (801bd9c <HAL_RCC_GetSysClockFreq+0xcc>)
 801bd44:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 801bd46:	e00d      	b.n	801bd64 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 801bd48:	4b15      	ldr	r3, [pc, #84]	; (801bda0 <HAL_RCC_GetSysClockFreq+0xd0>)
 801bd4a:	60bb      	str	r3, [r7, #8]
        break;
 801bd4c:	e00a      	b.n	801bd64 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801bd4e:	f7ff f976 	bl	801b03e <LL_RCC_MSI_GetRange>
 801bd52:	4603      	mov	r3, r0
 801bd54:	091b      	lsrs	r3, r3, #4
 801bd56:	f003 030f 	and.w	r3, r3, #15
 801bd5a:	4a0f      	ldr	r2, [pc, #60]	; (801bd98 <HAL_RCC_GetSysClockFreq+0xc8>)
 801bd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bd60:	60bb      	str	r3, [r7, #8]
        break;
 801bd62:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 801bd64:	f7ff fa8d 	bl	801b282 <LL_RCC_PLL_GetN>
 801bd68:	4602      	mov	r2, r0
 801bd6a:	68bb      	ldr	r3, [r7, #8]
 801bd6c:	fb03 f402 	mul.w	r4, r3, r2
 801bd70:	f7ff faa0 	bl	801b2b4 <LL_RCC_PLL_GetDivider>
 801bd74:	4603      	mov	r3, r0
 801bd76:	091b      	lsrs	r3, r3, #4
 801bd78:	3301      	adds	r3, #1
 801bd7a:	fbb4 f4f3 	udiv	r4, r4, r3
 801bd7e:	f7ff fa8d 	bl	801b29c <LL_RCC_PLL_GetR>
 801bd82:	4603      	mov	r3, r0
 801bd84:	0f5b      	lsrs	r3, r3, #29
 801bd86:	3301      	adds	r3, #1
 801bd88:	fbb4 f3f3 	udiv	r3, r4, r3
 801bd8c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 801bd8e:	68fb      	ldr	r3, [r7, #12]
}
 801bd90:	4618      	mov	r0, r3
 801bd92:	3714      	adds	r7, #20
 801bd94:	46bd      	mov	sp, r7
 801bd96:	bd90      	pop	{r4, r7, pc}
 801bd98:	08028d8c 	.word	0x08028d8c
 801bd9c:	00f42400 	.word	0x00f42400
 801bda0:	01e84800 	.word	0x01e84800

0801bda4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bda4:	b598      	push	{r3, r4, r7, lr}
 801bda6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 801bda8:	f7ff ff92 	bl	801bcd0 <HAL_RCC_GetSysClockFreq>
 801bdac:	4604      	mov	r4, r0
 801bdae:	f7ff f9f9 	bl	801b1a4 <LL_RCC_GetAHBPrescaler>
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	091b      	lsrs	r3, r3, #4
 801bdb6:	f003 030f 	and.w	r3, r3, #15
 801bdba:	4a03      	ldr	r2, [pc, #12]	; (801bdc8 <HAL_RCC_GetHCLKFreq+0x24>)
 801bdbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bdc0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 801bdc4:	4618      	mov	r0, r3
 801bdc6:	bd98      	pop	{r3, r4, r7, pc}
 801bdc8:	08028d2c 	.word	0x08028d2c

0801bdcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801bdcc:	b598      	push	{r3, r4, r7, lr}
 801bdce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 801bdd0:	f7ff ffe8 	bl	801bda4 <HAL_RCC_GetHCLKFreq>
 801bdd4:	4604      	mov	r4, r0
 801bdd6:	f7ff fa18 	bl	801b20a <LL_RCC_GetAPB2Prescaler>
 801bdda:	4603      	mov	r3, r0
 801bddc:	0adb      	lsrs	r3, r3, #11
 801bdde:	f003 0307 	and.w	r3, r3, #7
 801bde2:	4a04      	ldr	r2, [pc, #16]	; (801bdf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 801bde4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bde8:	f003 031f 	and.w	r3, r3, #31
 801bdec:	fa24 f303 	lsr.w	r3, r4, r3
}
 801bdf0:	4618      	mov	r0, r3
 801bdf2:	bd98      	pop	{r3, r4, r7, pc}
 801bdf4:	08028d6c 	.word	0x08028d6c

0801bdf8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801bdf8:	b580      	push	{r7, lr}
 801bdfa:	b082      	sub	sp, #8
 801bdfc:	af00      	add	r7, sp, #0
 801bdfe:	6078      	str	r0, [r7, #4]
 801be00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	226f      	movs	r2, #111	; 0x6f
 801be06:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 801be08:	f7ff f957 	bl	801b0ba <LL_RCC_GetSysClkSource>
 801be0c:	4602      	mov	r2, r0
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 801be12:	f7ff f9c7 	bl	801b1a4 <LL_RCC_GetAHBPrescaler>
 801be16:	4602      	mov	r2, r0
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 801be1c:	f7ff f9e9 	bl	801b1f2 <LL_RCC_GetAPB1Prescaler>
 801be20:	4602      	mov	r2, r0
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 801be26:	f7ff f9f0 	bl	801b20a <LL_RCC_GetAPB2Prescaler>
 801be2a:	4602      	mov	r2, r0
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 801be30:	f7ff f9c4 	bl	801b1bc <LL_C2_RCC_GetAHBPrescaler>
 801be34:	4602      	mov	r2, r0
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 801be3a:	f7ff f9cc 	bl	801b1d6 <LL_RCC_GetAHB4Prescaler>
 801be3e:	4602      	mov	r2, r0
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 801be44:	4b04      	ldr	r3, [pc, #16]	; (801be58 <HAL_RCC_GetClockConfig+0x60>)
 801be46:	681b      	ldr	r3, [r3, #0]
 801be48:	f003 0207 	and.w	r2, r3, #7
 801be4c:	683b      	ldr	r3, [r7, #0]
 801be4e:	601a      	str	r2, [r3, #0]
}
 801be50:	bf00      	nop
 801be52:	3708      	adds	r7, #8
 801be54:	46bd      	mov	sp, r7
 801be56:	bd80      	pop	{r7, pc}
 801be58:	58004000 	.word	0x58004000

0801be5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 801be5c:	b590      	push	{r4, r7, lr}
 801be5e:	b085      	sub	sp, #20
 801be60:	af00      	add	r7, sp, #0
 801be62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	2bb0      	cmp	r3, #176	; 0xb0
 801be68:	d903      	bls.n	801be72 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 801be6a:	4b15      	ldr	r3, [pc, #84]	; (801bec0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801be6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be6e:	60fb      	str	r3, [r7, #12]
 801be70:	e007      	b.n	801be82 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	091b      	lsrs	r3, r3, #4
 801be76:	f003 030f 	and.w	r3, r3, #15
 801be7a:	4a11      	ldr	r2, [pc, #68]	; (801bec0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801be7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801be80:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801be82:	f7ff f9a8 	bl	801b1d6 <LL_RCC_GetAHB4Prescaler>
 801be86:	4603      	mov	r3, r0
 801be88:	091b      	lsrs	r3, r3, #4
 801be8a:	f003 030f 	and.w	r3, r3, #15
 801be8e:	4a0d      	ldr	r2, [pc, #52]	; (801bec4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 801be90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801be94:	68fa      	ldr	r2, [r7, #12]
 801be96:	fbb2 f3f3 	udiv	r3, r2, r3
 801be9a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 801be9c:	68bb      	ldr	r3, [r7, #8]
 801be9e:	4a0a      	ldr	r2, [pc, #40]	; (801bec8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 801bea0:	fba2 2303 	umull	r2, r3, r2, r3
 801bea4:	0c9c      	lsrs	r4, r3, #18
 801bea6:	f7fe fe83 	bl	801abb0 <HAL_PWREx_GetVoltageRange>
 801beaa:	4603      	mov	r3, r0
 801beac:	4619      	mov	r1, r3
 801beae:	4620      	mov	r0, r4
 801beb0:	f000 f80c 	bl	801becc <RCC_SetFlashLatency>
 801beb4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 801beb6:	4618      	mov	r0, r3
 801beb8:	3714      	adds	r7, #20
 801beba:	46bd      	mov	sp, r7
 801bebc:	bd90      	pop	{r4, r7, pc}
 801bebe:	bf00      	nop
 801bec0:	08028d8c 	.word	0x08028d8c
 801bec4:	08028d2c 	.word	0x08028d2c
 801bec8:	431bde83 	.word	0x431bde83

0801becc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 801becc:	b590      	push	{r4, r7, lr}
 801bece:	b093      	sub	sp, #76	; 0x4c
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	6078      	str	r0, [r7, #4]
 801bed4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801bed6:	4b39      	ldr	r3, [pc, #228]	; (801bfbc <RCC_SetFlashLatency+0xf0>)
 801bed8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 801bedc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bede:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 801bee2:	4a37      	ldr	r2, [pc, #220]	; (801bfc0 <RCC_SetFlashLatency+0xf4>)
 801bee4:	f107 031c 	add.w	r3, r7, #28
 801bee8:	ca07      	ldmia	r2, {r0, r1, r2}
 801beea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801beee:	4b35      	ldr	r3, [pc, #212]	; (801bfc4 <RCC_SetFlashLatency+0xf8>)
 801bef0:	f107 040c 	add.w	r4, r7, #12
 801bef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 801befa:	2300      	movs	r3, #0
 801befc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801befe:	683b      	ldr	r3, [r7, #0]
 801bf00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf04:	d11c      	bne.n	801bf40 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801bf06:	2300      	movs	r3, #0
 801bf08:	643b      	str	r3, [r7, #64]	; 0x40
 801bf0a:	e015      	b.n	801bf38 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 801bf0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf0e:	009b      	lsls	r3, r3, #2
 801bf10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801bf14:	4413      	add	r3, r2
 801bf16:	f853 3c20 	ldr.w	r3, [r3, #-32]
 801bf1a:	687a      	ldr	r2, [r7, #4]
 801bf1c:	429a      	cmp	r2, r3
 801bf1e:	d808      	bhi.n	801bf32 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801bf20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf22:	009b      	lsls	r3, r3, #2
 801bf24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801bf28:	4413      	add	r3, r2
 801bf2a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801bf2e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801bf30:	e022      	b.n	801bf78 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801bf32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf34:	3301      	adds	r3, #1
 801bf36:	643b      	str	r3, [r7, #64]	; 0x40
 801bf38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf3a:	2b03      	cmp	r3, #3
 801bf3c:	d9e6      	bls.n	801bf0c <RCC_SetFlashLatency+0x40>
 801bf3e:	e01b      	b.n	801bf78 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801bf40:	2300      	movs	r3, #0
 801bf42:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bf44:	e015      	b.n	801bf72 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801bf46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf48:	009b      	lsls	r3, r3, #2
 801bf4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801bf4e:	4413      	add	r3, r2
 801bf50:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801bf54:	687a      	ldr	r2, [r7, #4]
 801bf56:	429a      	cmp	r2, r3
 801bf58:	d808      	bhi.n	801bf6c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801bf5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf5c:	009b      	lsls	r3, r3, #2
 801bf5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801bf62:	4413      	add	r3, r2
 801bf64:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801bf68:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801bf6a:	e005      	b.n	801bf78 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801bf6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf6e:	3301      	adds	r3, #1
 801bf70:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bf72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf74:	2b02      	cmp	r3, #2
 801bf76:	d9e6      	bls.n	801bf46 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 801bf78:	4b13      	ldr	r3, [pc, #76]	; (801bfc8 <RCC_SetFlashLatency+0xfc>)
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	f023 0207 	bic.w	r2, r3, #7
 801bf80:	4911      	ldr	r1, [pc, #68]	; (801bfc8 <RCC_SetFlashLatency+0xfc>)
 801bf82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bf84:	4313      	orrs	r3, r2
 801bf86:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801bf88:	f7fa f970 	bl	801626c <HAL_GetTick>
 801bf8c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801bf8e:	e008      	b.n	801bfa2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801bf90:	f7fa f96c 	bl	801626c <HAL_GetTick>
 801bf94:	4602      	mov	r2, r0
 801bf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf98:	1ad3      	subs	r3, r2, r3
 801bf9a:	2b02      	cmp	r3, #2
 801bf9c:	d901      	bls.n	801bfa2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 801bf9e:	2303      	movs	r3, #3
 801bfa0:	e007      	b.n	801bfb2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801bfa2:	4b09      	ldr	r3, [pc, #36]	; (801bfc8 <RCC_SetFlashLatency+0xfc>)
 801bfa4:	681b      	ldr	r3, [r3, #0]
 801bfa6:	f003 0307 	and.w	r3, r3, #7
 801bfaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bfac:	429a      	cmp	r2, r3
 801bfae:	d1ef      	bne.n	801bf90 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 801bfb0:	2300      	movs	r3, #0
}
 801bfb2:	4618      	mov	r0, r3
 801bfb4:	374c      	adds	r7, #76	; 0x4c
 801bfb6:	46bd      	mov	sp, r7
 801bfb8:	bd90      	pop	{r4, r7, pc}
 801bfba:	bf00      	nop
 801bfbc:	08028130 	.word	0x08028130
 801bfc0:	08028140 	.word	0x08028140
 801bfc4:	0802814c 	.word	0x0802814c
 801bfc8:	58004000 	.word	0x58004000

0801bfcc <LL_RCC_LSE_IsEnabled>:
{
 801bfcc:	b480      	push	{r7}
 801bfce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 801bfd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bfd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bfd8:	f003 0301 	and.w	r3, r3, #1
 801bfdc:	2b01      	cmp	r3, #1
 801bfde:	d101      	bne.n	801bfe4 <LL_RCC_LSE_IsEnabled+0x18>
 801bfe0:	2301      	movs	r3, #1
 801bfe2:	e000      	b.n	801bfe6 <LL_RCC_LSE_IsEnabled+0x1a>
 801bfe4:	2300      	movs	r3, #0
}
 801bfe6:	4618      	mov	r0, r3
 801bfe8:	46bd      	mov	sp, r7
 801bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfee:	4770      	bx	lr

0801bff0 <LL_RCC_LSE_IsReady>:
{
 801bff0:	b480      	push	{r7}
 801bff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801bff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bffc:	f003 0302 	and.w	r3, r3, #2
 801c000:	2b02      	cmp	r3, #2
 801c002:	d101      	bne.n	801c008 <LL_RCC_LSE_IsReady+0x18>
 801c004:	2301      	movs	r3, #1
 801c006:	e000      	b.n	801c00a <LL_RCC_LSE_IsReady+0x1a>
 801c008:	2300      	movs	r3, #0
}
 801c00a:	4618      	mov	r0, r3
 801c00c:	46bd      	mov	sp, r7
 801c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c012:	4770      	bx	lr

0801c014 <LL_RCC_SetRFWKPClockSource>:
{
 801c014:	b480      	push	{r7}
 801c016:	b083      	sub	sp, #12
 801c018:	af00      	add	r7, sp, #0
 801c01a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 801c01c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c024:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801c028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	4313      	orrs	r3, r2
 801c030:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 801c034:	bf00      	nop
 801c036:	370c      	adds	r7, #12
 801c038:	46bd      	mov	sp, r7
 801c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c03e:	4770      	bx	lr

0801c040 <LL_RCC_SetSMPSClockSource>:
{
 801c040:	b480      	push	{r7}
 801c042:	b083      	sub	sp, #12
 801c044:	af00      	add	r7, sp, #0
 801c046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 801c048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c04e:	f023 0203 	bic.w	r2, r3, #3
 801c052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	4313      	orrs	r3, r2
 801c05a:	624b      	str	r3, [r1, #36]	; 0x24
}
 801c05c:	bf00      	nop
 801c05e:	370c      	adds	r7, #12
 801c060:	46bd      	mov	sp, r7
 801c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c066:	4770      	bx	lr

0801c068 <LL_RCC_SetSMPSPrescaler>:
{
 801c068:	b480      	push	{r7}
 801c06a:	b083      	sub	sp, #12
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 801c070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c076:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801c07a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	4313      	orrs	r3, r2
 801c082:	624b      	str	r3, [r1, #36]	; 0x24
}
 801c084:	bf00      	nop
 801c086:	370c      	adds	r7, #12
 801c088:	46bd      	mov	sp, r7
 801c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c08e:	4770      	bx	lr

0801c090 <LL_RCC_SetUSARTClockSource>:
{
 801c090:	b480      	push	{r7}
 801c092:	b083      	sub	sp, #12
 801c094:	af00      	add	r7, sp, #0
 801c096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 801c098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c0a0:	f023 0203 	bic.w	r2, r3, #3
 801c0a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	4313      	orrs	r3, r2
 801c0ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c0b0:	bf00      	nop
 801c0b2:	370c      	adds	r7, #12
 801c0b4:	46bd      	mov	sp, r7
 801c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ba:	4770      	bx	lr

0801c0bc <LL_RCC_SetLPUARTClockSource>:
{
 801c0bc:	b480      	push	{r7}
 801c0be:	b083      	sub	sp, #12
 801c0c0:	af00      	add	r7, sp, #0
 801c0c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801c0c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c0c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c0cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801c0d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	4313      	orrs	r3, r2
 801c0d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c0dc:	bf00      	nop
 801c0de:	370c      	adds	r7, #12
 801c0e0:	46bd      	mov	sp, r7
 801c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0e6:	4770      	bx	lr

0801c0e8 <LL_RCC_SetI2CClockSource>:
{
 801c0e8:	b480      	push	{r7}
 801c0ea:	b083      	sub	sp, #12
 801c0ec:	af00      	add	r7, sp, #0
 801c0ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801c0f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c0f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	091b      	lsrs	r3, r3, #4
 801c0fc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801c100:	43db      	mvns	r3, r3
 801c102:	401a      	ands	r2, r3
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	011b      	lsls	r3, r3, #4
 801c108:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801c10c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c110:	4313      	orrs	r3, r2
 801c112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c116:	bf00      	nop
 801c118:	370c      	adds	r7, #12
 801c11a:	46bd      	mov	sp, r7
 801c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c120:	4770      	bx	lr

0801c122 <LL_RCC_SetLPTIMClockSource>:
{
 801c122:	b480      	push	{r7}
 801c124:	b083      	sub	sp, #12
 801c126:	af00      	add	r7, sp, #0
 801c128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801c12a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c12e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	0c1b      	lsrs	r3, r3, #16
 801c136:	041b      	lsls	r3, r3, #16
 801c138:	43db      	mvns	r3, r3
 801c13a:	401a      	ands	r2, r3
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	041b      	lsls	r3, r3, #16
 801c140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c144:	4313      	orrs	r3, r2
 801c146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c14a:	bf00      	nop
 801c14c:	370c      	adds	r7, #12
 801c14e:	46bd      	mov	sp, r7
 801c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c154:	4770      	bx	lr

0801c156 <LL_RCC_SetSAIClockSource>:
{
 801c156:	b480      	push	{r7}
 801c158:	b083      	sub	sp, #12
 801c15a:	af00      	add	r7, sp, #0
 801c15c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 801c15e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c166:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801c16a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	4313      	orrs	r3, r2
 801c172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c176:	bf00      	nop
 801c178:	370c      	adds	r7, #12
 801c17a:	46bd      	mov	sp, r7
 801c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c180:	4770      	bx	lr

0801c182 <LL_RCC_SetRNGClockSource>:
{
 801c182:	b480      	push	{r7}
 801c184:	b083      	sub	sp, #12
 801c186:	af00      	add	r7, sp, #0
 801c188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801c18a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c192:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801c196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	4313      	orrs	r3, r2
 801c19e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c1a2:	bf00      	nop
 801c1a4:	370c      	adds	r7, #12
 801c1a6:	46bd      	mov	sp, r7
 801c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ac:	4770      	bx	lr

0801c1ae <LL_RCC_SetCLK48ClockSource>:
{
 801c1ae:	b480      	push	{r7}
 801c1b0:	b083      	sub	sp, #12
 801c1b2:	af00      	add	r7, sp, #0
 801c1b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801c1b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c1be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801c1c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	4313      	orrs	r3, r2
 801c1ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c1ce:	bf00      	nop
 801c1d0:	370c      	adds	r7, #12
 801c1d2:	46bd      	mov	sp, r7
 801c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1d8:	4770      	bx	lr

0801c1da <LL_RCC_SetUSBClockSource>:
{
 801c1da:	b580      	push	{r7, lr}
 801c1dc:	b082      	sub	sp, #8
 801c1de:	af00      	add	r7, sp, #0
 801c1e0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 801c1e2:	6878      	ldr	r0, [r7, #4]
 801c1e4:	f7ff ffe3 	bl	801c1ae <LL_RCC_SetCLK48ClockSource>
}
 801c1e8:	bf00      	nop
 801c1ea:	3708      	adds	r7, #8
 801c1ec:	46bd      	mov	sp, r7
 801c1ee:	bd80      	pop	{r7, pc}

0801c1f0 <LL_RCC_SetADCClockSource>:
{
 801c1f0:	b480      	push	{r7}
 801c1f2:	b083      	sub	sp, #12
 801c1f4:	af00      	add	r7, sp, #0
 801c1f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 801c1f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c1fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c200:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801c204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	4313      	orrs	r3, r2
 801c20c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c210:	bf00      	nop
 801c212:	370c      	adds	r7, #12
 801c214:	46bd      	mov	sp, r7
 801c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c21a:	4770      	bx	lr

0801c21c <LL_RCC_SetRTCClockSource>:
{
 801c21c:	b480      	push	{r7}
 801c21e:	b083      	sub	sp, #12
 801c220:	af00      	add	r7, sp, #0
 801c222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 801c224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c22c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801c230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	4313      	orrs	r3, r2
 801c238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 801c23c:	bf00      	nop
 801c23e:	370c      	adds	r7, #12
 801c240:	46bd      	mov	sp, r7
 801c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c246:	4770      	bx	lr

0801c248 <LL_RCC_GetRTCClockSource>:
{
 801c248:	b480      	push	{r7}
 801c24a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801c24c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c254:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 801c258:	4618      	mov	r0, r3
 801c25a:	46bd      	mov	sp, r7
 801c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c260:	4770      	bx	lr

0801c262 <LL_RCC_ForceBackupDomainReset>:
{
 801c262:	b480      	push	{r7}
 801c264:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801c266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c26e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801c27a:	bf00      	nop
 801c27c:	46bd      	mov	sp, r7
 801c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c282:	4770      	bx	lr

0801c284 <LL_RCC_ReleaseBackupDomainReset>:
{
 801c284:	b480      	push	{r7}
 801c286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801c288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801c29c:	bf00      	nop
 801c29e:	46bd      	mov	sp, r7
 801c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2a4:	4770      	bx	lr

0801c2a6 <LL_RCC_PLLSAI1_Enable>:
{
 801c2a6:	b480      	push	{r7}
 801c2a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801c2aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c2b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801c2b8:	6013      	str	r3, [r2, #0]
}
 801c2ba:	bf00      	nop
 801c2bc:	46bd      	mov	sp, r7
 801c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2c2:	4770      	bx	lr

0801c2c4 <LL_RCC_PLLSAI1_Disable>:
{
 801c2c4:	b480      	push	{r7}
 801c2c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801c2c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c2cc:	681b      	ldr	r3, [r3, #0]
 801c2ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c2d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801c2d6:	6013      	str	r3, [r2, #0]
}
 801c2d8:	bf00      	nop
 801c2da:	46bd      	mov	sp, r7
 801c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e0:	4770      	bx	lr

0801c2e2 <LL_RCC_PLLSAI1_IsReady>:
{
 801c2e2:	b480      	push	{r7}
 801c2e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 801c2e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c2f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801c2f4:	d101      	bne.n	801c2fa <LL_RCC_PLLSAI1_IsReady+0x18>
 801c2f6:	2301      	movs	r3, #1
 801c2f8:	e000      	b.n	801c2fc <LL_RCC_PLLSAI1_IsReady+0x1a>
 801c2fa:	2300      	movs	r3, #0
}
 801c2fc:	4618      	mov	r0, r3
 801c2fe:	46bd      	mov	sp, r7
 801c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c304:	4770      	bx	lr

0801c306 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c306:	b580      	push	{r7, lr}
 801c308:	b088      	sub	sp, #32
 801c30a:	af00      	add	r7, sp, #0
 801c30c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 801c30e:	2300      	movs	r3, #0
 801c310:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 801c312:	2300      	movs	r3, #0
 801c314:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d033      	beq.n	801c38a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c32a:	d00c      	beq.n	801c346 <HAL_RCCEx_PeriphCLKConfig+0x40>
 801c32c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c330:	d802      	bhi.n	801c338 <HAL_RCCEx_PeriphCLKConfig+0x32>
 801c332:	2b00      	cmp	r3, #0
 801c334:	d010      	beq.n	801c358 <HAL_RCCEx_PeriphCLKConfig+0x52>
 801c336:	e017      	b.n	801c368 <HAL_RCCEx_PeriphCLKConfig+0x62>
 801c338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c33c:	d017      	beq.n	801c36e <HAL_RCCEx_PeriphCLKConfig+0x68>
 801c33e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801c342:	d016      	beq.n	801c372 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 801c344:	e010      	b.n	801c368 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801c346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c34a:	68db      	ldr	r3, [r3, #12]
 801c34c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c354:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801c356:	e00d      	b.n	801c374 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	3304      	adds	r3, #4
 801c35c:	4618      	mov	r0, r3
 801c35e:	f000 f947 	bl	801c5f0 <RCCEx_PLLSAI1_ConfigNP>
 801c362:	4603      	mov	r3, r0
 801c364:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801c366:	e005      	b.n	801c374 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801c368:	2301      	movs	r3, #1
 801c36a:	77fb      	strb	r3, [r7, #31]
        break;
 801c36c:	e002      	b.n	801c374 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 801c36e:	bf00      	nop
 801c370:	e000      	b.n	801c374 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 801c372:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c374:	7ffb      	ldrb	r3, [r7, #31]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d105      	bne.n	801c386 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c37e:	4618      	mov	r0, r3
 801c380:	f7ff fee9 	bl	801c156 <LL_RCC_SetSAIClockSource>
 801c384:	e001      	b.n	801c38a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c386:	7ffb      	ldrb	r3, [r7, #31]
 801c388:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c392:	2b00      	cmp	r3, #0
 801c394:	d046      	beq.n	801c424 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801c396:	f7ff ff57 	bl	801c248 <LL_RCC_GetRTCClockSource>
 801c39a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3a0:	69ba      	ldr	r2, [r7, #24]
 801c3a2:	429a      	cmp	r2, r3
 801c3a4:	d03c      	beq.n	801c420 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801c3a6:	f7fe fbbf 	bl	801ab28 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 801c3aa:	69bb      	ldr	r3, [r7, #24]
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d105      	bne.n	801c3bc <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3b4:	4618      	mov	r0, r3
 801c3b6:	f7ff ff31 	bl	801c21c <LL_RCC_SetRTCClockSource>
 801c3ba:	e02e      	b.n	801c41a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 801c3bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c3c4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801c3c6:	f7ff ff4c 	bl	801c262 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 801c3ca:	f7ff ff5b 	bl	801c284 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 801c3ce:	697b      	ldr	r3, [r7, #20]
 801c3d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3d8:	4313      	orrs	r3, r2
 801c3da:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 801c3dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c3e0:	697b      	ldr	r3, [r7, #20]
 801c3e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801c3e6:	f7ff fdf1 	bl	801bfcc <LL_RCC_LSE_IsEnabled>
 801c3ea:	4603      	mov	r3, r0
 801c3ec:	2b01      	cmp	r3, #1
 801c3ee:	d114      	bne.n	801c41a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801c3f0:	f7f9 ff3c 	bl	801626c <HAL_GetTick>
 801c3f4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801c3f6:	e00b      	b.n	801c410 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c3f8:	f7f9 ff38 	bl	801626c <HAL_GetTick>
 801c3fc:	4602      	mov	r2, r0
 801c3fe:	693b      	ldr	r3, [r7, #16]
 801c400:	1ad3      	subs	r3, r2, r3
 801c402:	f241 3288 	movw	r2, #5000	; 0x1388
 801c406:	4293      	cmp	r3, r2
 801c408:	d902      	bls.n	801c410 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 801c40a:	2303      	movs	r3, #3
 801c40c:	77fb      	strb	r3, [r7, #31]
              break;
 801c40e:	e004      	b.n	801c41a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 801c410:	f7ff fdee 	bl	801bff0 <LL_RCC_LSE_IsReady>
 801c414:	4603      	mov	r3, r0
 801c416:	2b01      	cmp	r3, #1
 801c418:	d1ee      	bne.n	801c3f8 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 801c41a:	7ffb      	ldrb	r3, [r7, #31]
 801c41c:	77bb      	strb	r3, [r7, #30]
 801c41e:	e001      	b.n	801c424 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c420:	7ffb      	ldrb	r3, [r7, #31]
 801c422:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	f003 0301 	and.w	r3, r3, #1
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d004      	beq.n	801c43a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	699b      	ldr	r3, [r3, #24]
 801c434:	4618      	mov	r0, r3
 801c436:	f7ff fe2b 	bl	801c090 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	f003 0302 	and.w	r3, r3, #2
 801c442:	2b00      	cmp	r3, #0
 801c444:	d004      	beq.n	801c450 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	69db      	ldr	r3, [r3, #28]
 801c44a:	4618      	mov	r0, r3
 801c44c:	f7ff fe36 	bl	801c0bc <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	f003 0310 	and.w	r3, r3, #16
 801c458:	2b00      	cmp	r3, #0
 801c45a:	d004      	beq.n	801c466 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c460:	4618      	mov	r0, r3
 801c462:	f7ff fe5e 	bl	801c122 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	f003 0320 	and.w	r3, r3, #32
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d004      	beq.n	801c47c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c476:	4618      	mov	r0, r3
 801c478:	f7ff fe53 	bl	801c122 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	f003 0304 	and.w	r3, r3, #4
 801c484:	2b00      	cmp	r3, #0
 801c486:	d004      	beq.n	801c492 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	6a1b      	ldr	r3, [r3, #32]
 801c48c:	4618      	mov	r0, r3
 801c48e:	f7ff fe2b 	bl	801c0e8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	f003 0308 	and.w	r3, r3, #8
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d004      	beq.n	801c4a8 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c4a2:	4618      	mov	r0, r3
 801c4a4:	f7ff fe20 	bl	801c0e8 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c4b0:	2b00      	cmp	r3, #0
 801c4b2:	d022      	beq.n	801c4fa <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c4b8:	4618      	mov	r0, r3
 801c4ba:	f7ff fe8e 	bl	801c1da <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c4c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801c4c6:	d107      	bne.n	801c4d8 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 801c4c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c4cc:	68db      	ldr	r3, [r3, #12]
 801c4ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c4d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c4d6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c4dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801c4e0:	d10b      	bne.n	801c4fa <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	3304      	adds	r3, #4
 801c4e6:	4618      	mov	r0, r3
 801c4e8:	f000 f8dd 	bl	801c6a6 <RCCEx_PLLSAI1_ConfigNQ>
 801c4ec:	4603      	mov	r3, r0
 801c4ee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801c4f0:	7ffb      	ldrb	r3, [r7, #31]
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d001      	beq.n	801c4fa <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 801c4f6:	7ffb      	ldrb	r3, [r7, #31]
 801c4f8:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c502:	2b00      	cmp	r3, #0
 801c504:	d02b      	beq.n	801c55e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c50a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c50e:	d008      	beq.n	801c522 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c518:	d003      	beq.n	801c522 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d105      	bne.n	801c52e <HAL_RCCEx_PeriphCLKConfig+0x228>
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c526:	4618      	mov	r0, r3
 801c528:	f7ff fe2b 	bl	801c182 <LL_RCC_SetRNGClockSource>
 801c52c:	e00a      	b.n	801c544 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c536:	60fb      	str	r3, [r7, #12]
 801c538:	2000      	movs	r0, #0
 801c53a:	f7ff fe22 	bl	801c182 <LL_RCC_SetRNGClockSource>
 801c53e:	68f8      	ldr	r0, [r7, #12]
 801c540:	f7ff fe35 	bl	801c1ae <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c548:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 801c54c:	d107      	bne.n	801c55e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 801c54e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c552:	68db      	ldr	r3, [r3, #12]
 801c554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c55c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c566:	2b00      	cmp	r3, #0
 801c568:	d022      	beq.n	801c5b0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c56e:	4618      	mov	r0, r3
 801c570:	f7ff fe3e 	bl	801c1f0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c57c:	d107      	bne.n	801c58e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801c57e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c582:	68db      	ldr	r3, [r3, #12]
 801c584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c58c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c596:	d10b      	bne.n	801c5b0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	3304      	adds	r3, #4
 801c59c:	4618      	mov	r0, r3
 801c59e:	f000 f8dd 	bl	801c75c <RCCEx_PLLSAI1_ConfigNR>
 801c5a2:	4603      	mov	r3, r0
 801c5a4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801c5a6:	7ffb      	ldrb	r3, [r7, #31]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d001      	beq.n	801c5b0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 801c5ac:	7ffb      	ldrb	r3, [r7, #31]
 801c5ae:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d004      	beq.n	801c5c6 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c5c0:	4618      	mov	r0, r3
 801c5c2:	f7ff fd27 	bl	801c014 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	d009      	beq.n	801c5e6 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c5d6:	4618      	mov	r0, r3
 801c5d8:	f7ff fd46 	bl	801c068 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c5e0:	4618      	mov	r0, r3
 801c5e2:	f7ff fd2d 	bl	801c040 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 801c5e6:	7fbb      	ldrb	r3, [r7, #30]
}
 801c5e8:	4618      	mov	r0, r3
 801c5ea:	3720      	adds	r7, #32
 801c5ec:	46bd      	mov	sp, r7
 801c5ee:	bd80      	pop	{r7, pc}

0801c5f0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801c5f0:	b580      	push	{r7, lr}
 801c5f2:	b084      	sub	sp, #16
 801c5f4:	af00      	add	r7, sp, #0
 801c5f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801c5f8:	2300      	movs	r3, #0
 801c5fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801c5fc:	f7ff fe62 	bl	801c2c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801c600:	f7f9 fe34 	bl	801626c <HAL_GetTick>
 801c604:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c606:	e009      	b.n	801c61c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c608:	f7f9 fe30 	bl	801626c <HAL_GetTick>
 801c60c:	4602      	mov	r2, r0
 801c60e:	68bb      	ldr	r3, [r7, #8]
 801c610:	1ad3      	subs	r3, r2, r3
 801c612:	2b02      	cmp	r3, #2
 801c614:	d902      	bls.n	801c61c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 801c616:	2303      	movs	r3, #3
 801c618:	73fb      	strb	r3, [r7, #15]
      break;
 801c61a:	e004      	b.n	801c626 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c61c:	f7ff fe61 	bl	801c2e2 <LL_RCC_PLLSAI1_IsReady>
 801c620:	4603      	mov	r3, r0
 801c622:	2b00      	cmp	r3, #0
 801c624:	d1f0      	bne.n	801c608 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801c626:	7bfb      	ldrb	r3, [r7, #15]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d137      	bne.n	801c69c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801c62c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c630:	691b      	ldr	r3, [r3, #16]
 801c632:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	021b      	lsls	r3, r3, #8
 801c63c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c640:	4313      	orrs	r3, r2
 801c642:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 801c644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c648:	691b      	ldr	r3, [r3, #16]
 801c64a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	685b      	ldr	r3, [r3, #4]
 801c652:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c656:	4313      	orrs	r3, r2
 801c658:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801c65a:	f7ff fe24 	bl	801c2a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c65e:	f7f9 fe05 	bl	801626c <HAL_GetTick>
 801c662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c664:	e009      	b.n	801c67a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c666:	f7f9 fe01 	bl	801626c <HAL_GetTick>
 801c66a:	4602      	mov	r2, r0
 801c66c:	68bb      	ldr	r3, [r7, #8]
 801c66e:	1ad3      	subs	r3, r2, r3
 801c670:	2b02      	cmp	r3, #2
 801c672:	d902      	bls.n	801c67a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 801c674:	2303      	movs	r3, #3
 801c676:	73fb      	strb	r3, [r7, #15]
        break;
 801c678:	e004      	b.n	801c684 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c67a:	f7ff fe32 	bl	801c2e2 <LL_RCC_PLLSAI1_IsReady>
 801c67e:	4603      	mov	r3, r0
 801c680:	2b01      	cmp	r3, #1
 801c682:	d1f0      	bne.n	801c666 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 801c684:	7bfb      	ldrb	r3, [r7, #15]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d108      	bne.n	801c69c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801c68a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c68e:	691a      	ldr	r2, [r3, #16]
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	691b      	ldr	r3, [r3, #16]
 801c694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c698:	4313      	orrs	r3, r2
 801c69a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801c69c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c69e:	4618      	mov	r0, r3
 801c6a0:	3710      	adds	r7, #16
 801c6a2:	46bd      	mov	sp, r7
 801c6a4:	bd80      	pop	{r7, pc}

0801c6a6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801c6a6:	b580      	push	{r7, lr}
 801c6a8:	b084      	sub	sp, #16
 801c6aa:	af00      	add	r7, sp, #0
 801c6ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801c6ae:	2300      	movs	r3, #0
 801c6b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801c6b2:	f7ff fe07 	bl	801c2c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801c6b6:	f7f9 fdd9 	bl	801626c <HAL_GetTick>
 801c6ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c6bc:	e009      	b.n	801c6d2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c6be:	f7f9 fdd5 	bl	801626c <HAL_GetTick>
 801c6c2:	4602      	mov	r2, r0
 801c6c4:	68bb      	ldr	r3, [r7, #8]
 801c6c6:	1ad3      	subs	r3, r2, r3
 801c6c8:	2b02      	cmp	r3, #2
 801c6ca:	d902      	bls.n	801c6d2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 801c6cc:	2303      	movs	r3, #3
 801c6ce:	73fb      	strb	r3, [r7, #15]
      break;
 801c6d0:	e004      	b.n	801c6dc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c6d2:	f7ff fe06 	bl	801c2e2 <LL_RCC_PLLSAI1_IsReady>
 801c6d6:	4603      	mov	r3, r0
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d1f0      	bne.n	801c6be <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 801c6dc:	7bfb      	ldrb	r3, [r7, #15]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d137      	bne.n	801c752 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801c6e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c6e6:	691b      	ldr	r3, [r3, #16]
 801c6e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	021b      	lsls	r3, r3, #8
 801c6f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c6f6:	4313      	orrs	r3, r2
 801c6f8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801c6fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c6fe:	691b      	ldr	r3, [r3, #16]
 801c700:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	689b      	ldr	r3, [r3, #8]
 801c708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c70c:	4313      	orrs	r3, r2
 801c70e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801c710:	f7ff fdc9 	bl	801c2a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c714:	f7f9 fdaa 	bl	801626c <HAL_GetTick>
 801c718:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c71a:	e009      	b.n	801c730 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c71c:	f7f9 fda6 	bl	801626c <HAL_GetTick>
 801c720:	4602      	mov	r2, r0
 801c722:	68bb      	ldr	r3, [r7, #8]
 801c724:	1ad3      	subs	r3, r2, r3
 801c726:	2b02      	cmp	r3, #2
 801c728:	d902      	bls.n	801c730 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 801c72a:	2303      	movs	r3, #3
 801c72c:	73fb      	strb	r3, [r7, #15]
        break;
 801c72e:	e004      	b.n	801c73a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c730:	f7ff fdd7 	bl	801c2e2 <LL_RCC_PLLSAI1_IsReady>
 801c734:	4603      	mov	r3, r0
 801c736:	2b01      	cmp	r3, #1
 801c738:	d1f0      	bne.n	801c71c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 801c73a:	7bfb      	ldrb	r3, [r7, #15]
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d108      	bne.n	801c752 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801c740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c744:	691a      	ldr	r2, [r3, #16]
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	691b      	ldr	r3, [r3, #16]
 801c74a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c74e:	4313      	orrs	r3, r2
 801c750:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801c752:	7bfb      	ldrb	r3, [r7, #15]
}
 801c754:	4618      	mov	r0, r3
 801c756:	3710      	adds	r7, #16
 801c758:	46bd      	mov	sp, r7
 801c75a:	bd80      	pop	{r7, pc}

0801c75c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801c75c:	b580      	push	{r7, lr}
 801c75e:	b084      	sub	sp, #16
 801c760:	af00      	add	r7, sp, #0
 801c762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801c764:	2300      	movs	r3, #0
 801c766:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801c768:	f7ff fdac 	bl	801c2c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801c76c:	f7f9 fd7e 	bl	801626c <HAL_GetTick>
 801c770:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c772:	e009      	b.n	801c788 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c774:	f7f9 fd7a 	bl	801626c <HAL_GetTick>
 801c778:	4602      	mov	r2, r0
 801c77a:	68bb      	ldr	r3, [r7, #8]
 801c77c:	1ad3      	subs	r3, r2, r3
 801c77e:	2b02      	cmp	r3, #2
 801c780:	d902      	bls.n	801c788 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 801c782:	2303      	movs	r3, #3
 801c784:	73fb      	strb	r3, [r7, #15]
      break;
 801c786:	e004      	b.n	801c792 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c788:	f7ff fdab 	bl	801c2e2 <LL_RCC_PLLSAI1_IsReady>
 801c78c:	4603      	mov	r3, r0
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d1f0      	bne.n	801c774 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 801c792:	7bfb      	ldrb	r3, [r7, #15]
 801c794:	2b00      	cmp	r3, #0
 801c796:	d137      	bne.n	801c808 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801c798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c79c:	691b      	ldr	r3, [r3, #16]
 801c79e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	021b      	lsls	r3, r3, #8
 801c7a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c7ac:	4313      	orrs	r3, r2
 801c7ae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 801c7b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c7b4:	691b      	ldr	r3, [r3, #16]
 801c7b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	68db      	ldr	r3, [r3, #12]
 801c7be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c7c2:	4313      	orrs	r3, r2
 801c7c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801c7c6:	f7ff fd6e 	bl	801c2a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c7ca:	f7f9 fd4f 	bl	801626c <HAL_GetTick>
 801c7ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c7d0:	e009      	b.n	801c7e6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c7d2:	f7f9 fd4b 	bl	801626c <HAL_GetTick>
 801c7d6:	4602      	mov	r2, r0
 801c7d8:	68bb      	ldr	r3, [r7, #8]
 801c7da:	1ad3      	subs	r3, r2, r3
 801c7dc:	2b02      	cmp	r3, #2
 801c7de:	d902      	bls.n	801c7e6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 801c7e0:	2303      	movs	r3, #3
 801c7e2:	73fb      	strb	r3, [r7, #15]
        break;
 801c7e4:	e004      	b.n	801c7f0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c7e6:	f7ff fd7c 	bl	801c2e2 <LL_RCC_PLLSAI1_IsReady>
 801c7ea:	4603      	mov	r3, r0
 801c7ec:	2b01      	cmp	r3, #1
 801c7ee:	d1f0      	bne.n	801c7d2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 801c7f0:	7bfb      	ldrb	r3, [r7, #15]
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d108      	bne.n	801c808 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801c7f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c7fa:	691a      	ldr	r2, [r3, #16]
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	691b      	ldr	r3, [r3, #16]
 801c800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c804:	4313      	orrs	r3, r2
 801c806:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801c808:	7bfb      	ldrb	r3, [r7, #15]
}
 801c80a:	4618      	mov	r0, r3
 801c80c:	3710      	adds	r7, #16
 801c80e:	46bd      	mov	sp, r7
 801c810:	bd80      	pop	{r7, pc}

0801c812 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801c812:	b580      	push	{r7, lr}
 801c814:	b082      	sub	sp, #8
 801c816:	af00      	add	r7, sp, #0
 801c818:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d101      	bne.n	801c824 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 801c820:	2301      	movs	r3, #1
 801c822:	e090      	b.n	801c946 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801c82a:	b2db      	uxtb	r3, r3
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d106      	bne.n	801c83e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	2200      	movs	r2, #0
 801c834:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801c838:	6878      	ldr	r0, [r7, #4]
 801c83a:	f7f8 fb4d 	bl	8014ed8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	2202      	movs	r2, #2
 801c842:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	22ca      	movs	r2, #202	; 0xca
 801c84c:	625a      	str	r2, [r3, #36]	; 0x24
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	2253      	movs	r2, #83	; 0x53
 801c854:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801c856:	6878      	ldr	r0, [r7, #4]
 801c858:	f000 faba 	bl	801cdd0 <RTC_EnterInitMode>
 801c85c:	4603      	mov	r3, r0
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d009      	beq.n	801c876 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	22ff      	movs	r2, #255	; 0xff
 801c868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	2204      	movs	r2, #4
 801c86e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 801c872:	2301      	movs	r3, #1
 801c874:	e067      	b.n	801c946 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	689b      	ldr	r3, [r3, #8]
 801c87c:	687a      	ldr	r2, [r7, #4]
 801c87e:	6812      	ldr	r2, [r2, #0]
 801c880:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c888:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	681b      	ldr	r3, [r3, #0]
 801c88e:	6899      	ldr	r1, [r3, #8]
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	685a      	ldr	r2, [r3, #4]
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	691b      	ldr	r3, [r3, #16]
 801c898:	431a      	orrs	r2, r3
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	699b      	ldr	r3, [r3, #24]
 801c89e:	431a      	orrs	r2, r3
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	430a      	orrs	r2, r1
 801c8a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	687a      	ldr	r2, [r7, #4]
 801c8ae:	68d2      	ldr	r2, [r2, #12]
 801c8b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	6919      	ldr	r1, [r3, #16]
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	689b      	ldr	r3, [r3, #8]
 801c8bc:	041a      	lsls	r2, r3, #16
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	430a      	orrs	r2, r1
 801c8c4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	681b      	ldr	r3, [r3, #0]
 801c8ca:	68da      	ldr	r2, [r3, #12]
 801c8cc:	687b      	ldr	r3, [r7, #4]
 801c8ce:	681b      	ldr	r3, [r3, #0]
 801c8d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c8d4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	681b      	ldr	r3, [r3, #0]
 801c8da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	f022 0203 	bic.w	r2, r2, #3
 801c8e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	69da      	ldr	r2, [r3, #28]
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	695b      	ldr	r3, [r3, #20]
 801c8f4:	431a      	orrs	r2, r3
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	681b      	ldr	r3, [r3, #0]
 801c8fa:	430a      	orrs	r2, r1
 801c8fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	681b      	ldr	r3, [r3, #0]
 801c902:	689b      	ldr	r3, [r3, #8]
 801c904:	f003 0320 	and.w	r3, r3, #32
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d113      	bne.n	801c934 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c90c:	6878      	ldr	r0, [r7, #4]
 801c90e:	f000 fa39 	bl	801cd84 <HAL_RTC_WaitForSynchro>
 801c912:	4603      	mov	r3, r0
 801c914:	2b00      	cmp	r3, #0
 801c916:	d00d      	beq.n	801c934 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	681b      	ldr	r3, [r3, #0]
 801c91c:	22ff      	movs	r2, #255	; 0xff
 801c91e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	2204      	movs	r2, #4
 801c924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	2200      	movs	r2, #0
 801c92c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801c930:	2301      	movs	r3, #1
 801c932:	e008      	b.n	801c946 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	22ff      	movs	r2, #255	; 0xff
 801c93a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	2201      	movs	r2, #1
 801c940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 801c944:	2300      	movs	r3, #0
  }
}
 801c946:	4618      	mov	r0, r3
 801c948:	3708      	adds	r7, #8
 801c94a:	46bd      	mov	sp, r7
 801c94c:	bd80      	pop	{r7, pc}

0801c94e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c94e:	b590      	push	{r4, r7, lr}
 801c950:	b087      	sub	sp, #28
 801c952:	af00      	add	r7, sp, #0
 801c954:	60f8      	str	r0, [r7, #12]
 801c956:	60b9      	str	r1, [r7, #8]
 801c958:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	f893 3020 	ldrb.w	r3, [r3, #32]
 801c960:	2b01      	cmp	r3, #1
 801c962:	d101      	bne.n	801c968 <HAL_RTC_SetTime+0x1a>
 801c964:	2302      	movs	r3, #2
 801c966:	e0b2      	b.n	801cace <HAL_RTC_SetTime+0x180>
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	2201      	movs	r2, #1
 801c96c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	2202      	movs	r2, #2
 801c974:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d126      	bne.n	801c9cc <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	689b      	ldr	r3, [r3, #8]
 801c984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c988:	2b00      	cmp	r3, #0
 801c98a:	d102      	bne.n	801c992 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c98c:	68bb      	ldr	r3, [r7, #8]
 801c98e:	2200      	movs	r2, #0
 801c990:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801c992:	68bb      	ldr	r3, [r7, #8]
 801c994:	781b      	ldrb	r3, [r3, #0]
 801c996:	4618      	mov	r0, r3
 801c998:	f000 fa44 	bl	801ce24 <RTC_ByteToBcd2>
 801c99c:	4603      	mov	r3, r0
 801c99e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 801c9a0:	68bb      	ldr	r3, [r7, #8]
 801c9a2:	785b      	ldrb	r3, [r3, #1]
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	f000 fa3d 	bl	801ce24 <RTC_ByteToBcd2>
 801c9aa:	4603      	mov	r3, r0
 801c9ac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801c9ae:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 801c9b0:	68bb      	ldr	r3, [r7, #8]
 801c9b2:	789b      	ldrb	r3, [r3, #2]
 801c9b4:	4618      	mov	r0, r3
 801c9b6:	f000 fa35 	bl	801ce24 <RTC_ByteToBcd2>
 801c9ba:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 801c9bc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 801c9c0:	68bb      	ldr	r3, [r7, #8]
 801c9c2:	78db      	ldrb	r3, [r3, #3]
 801c9c4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801c9c6:	4313      	orrs	r3, r2
 801c9c8:	617b      	str	r3, [r7, #20]
 801c9ca:	e018      	b.n	801c9fe <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	681b      	ldr	r3, [r3, #0]
 801c9d0:	689b      	ldr	r3, [r3, #8]
 801c9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d102      	bne.n	801c9e0 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c9da:	68bb      	ldr	r3, [r7, #8]
 801c9dc:	2200      	movs	r2, #0
 801c9de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801c9e0:	68bb      	ldr	r3, [r7, #8]
 801c9e2:	781b      	ldrb	r3, [r3, #0]
 801c9e4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 801c9e6:	68bb      	ldr	r3, [r7, #8]
 801c9e8:	785b      	ldrb	r3, [r3, #1]
 801c9ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801c9ec:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 801c9ee:	68ba      	ldr	r2, [r7, #8]
 801c9f0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 801c9f2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 801c9f4:	68bb      	ldr	r3, [r7, #8]
 801c9f6:	78db      	ldrb	r3, [r3, #3]
 801c9f8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801c9fa:	4313      	orrs	r3, r2
 801c9fc:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	22ca      	movs	r2, #202	; 0xca
 801ca04:	625a      	str	r2, [r3, #36]	; 0x24
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	681b      	ldr	r3, [r3, #0]
 801ca0a:	2253      	movs	r2, #83	; 0x53
 801ca0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801ca0e:	68f8      	ldr	r0, [r7, #12]
 801ca10:	f000 f9de 	bl	801cdd0 <RTC_EnterInitMode>
 801ca14:	4603      	mov	r3, r0
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d00d      	beq.n	801ca36 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	681b      	ldr	r3, [r3, #0]
 801ca1e:	22ff      	movs	r2, #255	; 0xff
 801ca20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	2204      	movs	r2, #4
 801ca26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	2200      	movs	r2, #0
 801ca2e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 801ca32:	2301      	movs	r3, #1
 801ca34:	e04b      	b.n	801cace <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	681a      	ldr	r2, [r3, #0]
 801ca3a:	697b      	ldr	r3, [r7, #20]
 801ca3c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801ca40:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801ca44:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 801ca46:	68fb      	ldr	r3, [r7, #12]
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	689a      	ldr	r2, [r3, #8]
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801ca54:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	6899      	ldr	r1, [r3, #8]
 801ca5c:	68bb      	ldr	r3, [r7, #8]
 801ca5e:	68da      	ldr	r2, [r3, #12]
 801ca60:	68bb      	ldr	r3, [r7, #8]
 801ca62:	691b      	ldr	r3, [r3, #16]
 801ca64:	431a      	orrs	r2, r3
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	681b      	ldr	r3, [r3, #0]
 801ca6a:	430a      	orrs	r2, r1
 801ca6c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	68da      	ldr	r2, [r3, #12]
 801ca74:	68fb      	ldr	r3, [r7, #12]
 801ca76:	681b      	ldr	r3, [r3, #0]
 801ca78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ca7c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	681b      	ldr	r3, [r3, #0]
 801ca82:	689b      	ldr	r3, [r3, #8]
 801ca84:	f003 0320 	and.w	r3, r3, #32
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d113      	bne.n	801cab4 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801ca8c:	68f8      	ldr	r0, [r7, #12]
 801ca8e:	f000 f979 	bl	801cd84 <HAL_RTC_WaitForSynchro>
 801ca92:	4603      	mov	r3, r0
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	d00d      	beq.n	801cab4 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ca98:	68fb      	ldr	r3, [r7, #12]
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	22ff      	movs	r2, #255	; 0xff
 801ca9e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	2204      	movs	r2, #4
 801caa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	2200      	movs	r2, #0
 801caac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801cab0:	2301      	movs	r3, #1
 801cab2:	e00c      	b.n	801cace <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	22ff      	movs	r2, #255	; 0xff
 801caba:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 801cabc:	68fb      	ldr	r3, [r7, #12]
 801cabe:	2201      	movs	r2, #1
 801cac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	2200      	movs	r2, #0
 801cac8:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 801cacc:	2300      	movs	r3, #0
  }
}
 801cace:	4618      	mov	r0, r3
 801cad0:	371c      	adds	r7, #28
 801cad2:	46bd      	mov	sp, r7
 801cad4:	bd90      	pop	{r4, r7, pc}

0801cad6 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801cad6:	b580      	push	{r7, lr}
 801cad8:	b086      	sub	sp, #24
 801cada:	af00      	add	r7, sp, #0
 801cadc:	60f8      	str	r0, [r7, #12]
 801cade:	60b9      	str	r1, [r7, #8]
 801cae0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801cae2:	68fb      	ldr	r3, [r7, #12]
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801cae8:	68bb      	ldr	r3, [r7, #8]
 801caea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	691b      	ldr	r3, [r3, #16]
 801caf2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801caf6:	68bb      	ldr	r3, [r7, #8]
 801caf8:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801cafa:	68fb      	ldr	r3, [r7, #12]
 801cafc:	681b      	ldr	r3, [r3, #0]
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801cb04:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801cb08:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 801cb0a:	697b      	ldr	r3, [r7, #20]
 801cb0c:	0c1b      	lsrs	r3, r3, #16
 801cb0e:	b2db      	uxtb	r3, r3
 801cb10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801cb14:	b2da      	uxtb	r2, r3
 801cb16:	68bb      	ldr	r3, [r7, #8]
 801cb18:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 801cb1a:	697b      	ldr	r3, [r7, #20]
 801cb1c:	0a1b      	lsrs	r3, r3, #8
 801cb1e:	b2db      	uxtb	r3, r3
 801cb20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cb24:	b2da      	uxtb	r2, r3
 801cb26:	68bb      	ldr	r3, [r7, #8]
 801cb28:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801cb2a:	697b      	ldr	r3, [r7, #20]
 801cb2c:	b2db      	uxtb	r3, r3
 801cb2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cb32:	b2da      	uxtb	r2, r3
 801cb34:	68bb      	ldr	r3, [r7, #8]
 801cb36:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 801cb38:	697b      	ldr	r3, [r7, #20]
 801cb3a:	0c1b      	lsrs	r3, r3, #16
 801cb3c:	b2db      	uxtb	r3, r3
 801cb3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cb42:	b2da      	uxtb	r2, r3
 801cb44:	68bb      	ldr	r3, [r7, #8]
 801cb46:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d11a      	bne.n	801cb84 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801cb4e:	68bb      	ldr	r3, [r7, #8]
 801cb50:	781b      	ldrb	r3, [r3, #0]
 801cb52:	4618      	mov	r0, r3
 801cb54:	f000 f986 	bl	801ce64 <RTC_Bcd2ToByte>
 801cb58:	4603      	mov	r3, r0
 801cb5a:	461a      	mov	r2, r3
 801cb5c:	68bb      	ldr	r3, [r7, #8]
 801cb5e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801cb60:	68bb      	ldr	r3, [r7, #8]
 801cb62:	785b      	ldrb	r3, [r3, #1]
 801cb64:	4618      	mov	r0, r3
 801cb66:	f000 f97d 	bl	801ce64 <RTC_Bcd2ToByte>
 801cb6a:	4603      	mov	r3, r0
 801cb6c:	461a      	mov	r2, r3
 801cb6e:	68bb      	ldr	r3, [r7, #8]
 801cb70:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801cb72:	68bb      	ldr	r3, [r7, #8]
 801cb74:	789b      	ldrb	r3, [r3, #2]
 801cb76:	4618      	mov	r0, r3
 801cb78:	f000 f974 	bl	801ce64 <RTC_Bcd2ToByte>
 801cb7c:	4603      	mov	r3, r0
 801cb7e:	461a      	mov	r2, r3
 801cb80:	68bb      	ldr	r3, [r7, #8]
 801cb82:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801cb84:	2300      	movs	r3, #0
}
 801cb86:	4618      	mov	r0, r3
 801cb88:	3718      	adds	r7, #24
 801cb8a:	46bd      	mov	sp, r7
 801cb8c:	bd80      	pop	{r7, pc}

0801cb8e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801cb8e:	b590      	push	{r4, r7, lr}
 801cb90:	b087      	sub	sp, #28
 801cb92:	af00      	add	r7, sp, #0
 801cb94:	60f8      	str	r0, [r7, #12]
 801cb96:	60b9      	str	r1, [r7, #8]
 801cb98:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 801cb9a:	68fb      	ldr	r3, [r7, #12]
 801cb9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 801cba0:	2b01      	cmp	r3, #1
 801cba2:	d101      	bne.n	801cba8 <HAL_RTC_SetDate+0x1a>
 801cba4:	2302      	movs	r3, #2
 801cba6:	e09c      	b.n	801cce2 <HAL_RTC_SetDate+0x154>
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	2201      	movs	r2, #1
 801cbac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801cbb0:	68fb      	ldr	r3, [r7, #12]
 801cbb2:	2202      	movs	r2, #2
 801cbb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d10e      	bne.n	801cbdc <HAL_RTC_SetDate+0x4e>
 801cbbe:	68bb      	ldr	r3, [r7, #8]
 801cbc0:	785b      	ldrb	r3, [r3, #1]
 801cbc2:	f003 0310 	and.w	r3, r3, #16
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d008      	beq.n	801cbdc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801cbca:	68bb      	ldr	r3, [r7, #8]
 801cbcc:	785b      	ldrb	r3, [r3, #1]
 801cbce:	f023 0310 	bic.w	r3, r3, #16
 801cbd2:	b2db      	uxtb	r3, r3
 801cbd4:	330a      	adds	r3, #10
 801cbd6:	b2da      	uxtb	r2, r3
 801cbd8:	68bb      	ldr	r3, [r7, #8]
 801cbda:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d11c      	bne.n	801cc1c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801cbe2:	68bb      	ldr	r3, [r7, #8]
 801cbe4:	78db      	ldrb	r3, [r3, #3]
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	f000 f91c 	bl	801ce24 <RTC_ByteToBcd2>
 801cbec:	4603      	mov	r3, r0
 801cbee:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 801cbf0:	68bb      	ldr	r3, [r7, #8]
 801cbf2:	785b      	ldrb	r3, [r3, #1]
 801cbf4:	4618      	mov	r0, r3
 801cbf6:	f000 f915 	bl	801ce24 <RTC_ByteToBcd2>
 801cbfa:	4603      	mov	r3, r0
 801cbfc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801cbfe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801cc00:	68bb      	ldr	r3, [r7, #8]
 801cc02:	789b      	ldrb	r3, [r3, #2]
 801cc04:	4618      	mov	r0, r3
 801cc06:	f000 f90d 	bl	801ce24 <RTC_ByteToBcd2>
 801cc0a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 801cc0c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 801cc10:	68bb      	ldr	r3, [r7, #8]
 801cc12:	781b      	ldrb	r3, [r3, #0]
 801cc14:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801cc16:	4313      	orrs	r3, r2
 801cc18:	617b      	str	r3, [r7, #20]
 801cc1a:	e00e      	b.n	801cc3a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801cc1c:	68bb      	ldr	r3, [r7, #8]
 801cc1e:	78db      	ldrb	r3, [r3, #3]
 801cc20:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 801cc22:	68bb      	ldr	r3, [r7, #8]
 801cc24:	785b      	ldrb	r3, [r3, #1]
 801cc26:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801cc28:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 801cc2a:	68ba      	ldr	r2, [r7, #8]
 801cc2c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 801cc2e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 801cc30:	68bb      	ldr	r3, [r7, #8]
 801cc32:	781b      	ldrb	r3, [r3, #0]
 801cc34:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801cc36:	4313      	orrs	r3, r2
 801cc38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801cc3a:	68fb      	ldr	r3, [r7, #12]
 801cc3c:	681b      	ldr	r3, [r3, #0]
 801cc3e:	22ca      	movs	r2, #202	; 0xca
 801cc40:	625a      	str	r2, [r3, #36]	; 0x24
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	681b      	ldr	r3, [r3, #0]
 801cc46:	2253      	movs	r2, #83	; 0x53
 801cc48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801cc4a:	68f8      	ldr	r0, [r7, #12]
 801cc4c:	f000 f8c0 	bl	801cdd0 <RTC_EnterInitMode>
 801cc50:	4603      	mov	r3, r0
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d00d      	beq.n	801cc72 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cc56:	68fb      	ldr	r3, [r7, #12]
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	22ff      	movs	r2, #255	; 0xff
 801cc5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 801cc5e:	68fb      	ldr	r3, [r7, #12]
 801cc60:	2204      	movs	r2, #4
 801cc62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	2200      	movs	r2, #0
 801cc6a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 801cc6e:	2301      	movs	r3, #1
 801cc70:	e037      	b.n	801cce2 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	681a      	ldr	r2, [r3, #0]
 801cc76:	697b      	ldr	r3, [r7, #20]
 801cc78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801cc7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801cc80:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801cc82:	68fb      	ldr	r3, [r7, #12]
 801cc84:	681b      	ldr	r3, [r3, #0]
 801cc86:	68da      	ldr	r2, [r3, #12]
 801cc88:	68fb      	ldr	r3, [r7, #12]
 801cc8a:	681b      	ldr	r3, [r3, #0]
 801cc8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801cc90:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801cc92:	68fb      	ldr	r3, [r7, #12]
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	689b      	ldr	r3, [r3, #8]
 801cc98:	f003 0320 	and.w	r3, r3, #32
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d113      	bne.n	801ccc8 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801cca0:	68f8      	ldr	r0, [r7, #12]
 801cca2:	f000 f86f 	bl	801cd84 <HAL_RTC_WaitForSynchro>
 801cca6:	4603      	mov	r3, r0
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d00d      	beq.n	801ccc8 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801ccac:	68fb      	ldr	r3, [r7, #12]
 801ccae:	681b      	ldr	r3, [r3, #0]
 801ccb0:	22ff      	movs	r2, #255	; 0xff
 801ccb2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801ccb4:	68fb      	ldr	r3, [r7, #12]
 801ccb6:	2204      	movs	r2, #4
 801ccb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 801ccbc:	68fb      	ldr	r3, [r7, #12]
 801ccbe:	2200      	movs	r2, #0
 801ccc0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801ccc4:	2301      	movs	r3, #1
 801ccc6:	e00c      	b.n	801cce2 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ccc8:	68fb      	ldr	r3, [r7, #12]
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	22ff      	movs	r2, #255	; 0xff
 801ccce:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 801ccd0:	68fb      	ldr	r3, [r7, #12]
 801ccd2:	2201      	movs	r2, #1
 801ccd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 801ccd8:	68fb      	ldr	r3, [r7, #12]
 801ccda:	2200      	movs	r2, #0
 801ccdc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 801cce0:	2300      	movs	r3, #0
  }
}
 801cce2:	4618      	mov	r0, r3
 801cce4:	371c      	adds	r7, #28
 801cce6:	46bd      	mov	sp, r7
 801cce8:	bd90      	pop	{r4, r7, pc}

0801ccea <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801ccea:	b580      	push	{r7, lr}
 801ccec:	b086      	sub	sp, #24
 801ccee:	af00      	add	r7, sp, #0
 801ccf0:	60f8      	str	r0, [r7, #12]
 801ccf2:	60b9      	str	r1, [r7, #8]
 801ccf4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801ccf6:	68fb      	ldr	r3, [r7, #12]
 801ccf8:	681b      	ldr	r3, [r3, #0]
 801ccfa:	685b      	ldr	r3, [r3, #4]
 801ccfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801cd00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801cd04:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 801cd06:	697b      	ldr	r3, [r7, #20]
 801cd08:	0c1b      	lsrs	r3, r3, #16
 801cd0a:	b2da      	uxtb	r2, r3
 801cd0c:	68bb      	ldr	r3, [r7, #8]
 801cd0e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 801cd10:	697b      	ldr	r3, [r7, #20]
 801cd12:	0a1b      	lsrs	r3, r3, #8
 801cd14:	b2db      	uxtb	r3, r3
 801cd16:	f003 031f 	and.w	r3, r3, #31
 801cd1a:	b2da      	uxtb	r2, r3
 801cd1c:	68bb      	ldr	r3, [r7, #8]
 801cd1e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801cd20:	697b      	ldr	r3, [r7, #20]
 801cd22:	b2db      	uxtb	r3, r3
 801cd24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801cd28:	b2da      	uxtb	r2, r3
 801cd2a:	68bb      	ldr	r3, [r7, #8]
 801cd2c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 801cd2e:	697b      	ldr	r3, [r7, #20]
 801cd30:	0b5b      	lsrs	r3, r3, #13
 801cd32:	b2db      	uxtb	r3, r3
 801cd34:	f003 0307 	and.w	r3, r3, #7
 801cd38:	b2da      	uxtb	r2, r3
 801cd3a:	68bb      	ldr	r3, [r7, #8]
 801cd3c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	d11a      	bne.n	801cd7a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801cd44:	68bb      	ldr	r3, [r7, #8]
 801cd46:	78db      	ldrb	r3, [r3, #3]
 801cd48:	4618      	mov	r0, r3
 801cd4a:	f000 f88b 	bl	801ce64 <RTC_Bcd2ToByte>
 801cd4e:	4603      	mov	r3, r0
 801cd50:	461a      	mov	r2, r3
 801cd52:	68bb      	ldr	r3, [r7, #8]
 801cd54:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801cd56:	68bb      	ldr	r3, [r7, #8]
 801cd58:	785b      	ldrb	r3, [r3, #1]
 801cd5a:	4618      	mov	r0, r3
 801cd5c:	f000 f882 	bl	801ce64 <RTC_Bcd2ToByte>
 801cd60:	4603      	mov	r3, r0
 801cd62:	461a      	mov	r2, r3
 801cd64:	68bb      	ldr	r3, [r7, #8]
 801cd66:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801cd68:	68bb      	ldr	r3, [r7, #8]
 801cd6a:	789b      	ldrb	r3, [r3, #2]
 801cd6c:	4618      	mov	r0, r3
 801cd6e:	f000 f879 	bl	801ce64 <RTC_Bcd2ToByte>
 801cd72:	4603      	mov	r3, r0
 801cd74:	461a      	mov	r2, r3
 801cd76:	68bb      	ldr	r3, [r7, #8]
 801cd78:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801cd7a:	2300      	movs	r3, #0
}
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	3718      	adds	r7, #24
 801cd80:	46bd      	mov	sp, r7
 801cd82:	bd80      	pop	{r7, pc}

0801cd84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 801cd84:	b580      	push	{r7, lr}
 801cd86:	b084      	sub	sp, #16
 801cd88:	af00      	add	r7, sp, #0
 801cd8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	681b      	ldr	r3, [r3, #0]
 801cd90:	68da      	ldr	r2, [r3, #12]
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801cd9a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 801cd9c:	f7f9 fa66 	bl	801626c <HAL_GetTick>
 801cda0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801cda2:	e009      	b.n	801cdb8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 801cda4:	f7f9 fa62 	bl	801626c <HAL_GetTick>
 801cda8:	4602      	mov	r2, r0
 801cdaa:	68fb      	ldr	r3, [r7, #12]
 801cdac:	1ad3      	subs	r3, r2, r3
 801cdae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801cdb2:	d901      	bls.n	801cdb8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801cdb4:	2303      	movs	r3, #3
 801cdb6:	e007      	b.n	801cdc8 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	681b      	ldr	r3, [r3, #0]
 801cdbc:	68db      	ldr	r3, [r3, #12]
 801cdbe:	f003 0320 	and.w	r3, r3, #32
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d0ee      	beq.n	801cda4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 801cdc6:	2300      	movs	r3, #0
}
 801cdc8:	4618      	mov	r0, r3
 801cdca:	3710      	adds	r7, #16
 801cdcc:	46bd      	mov	sp, r7
 801cdce:	bd80      	pop	{r7, pc}

0801cdd0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 801cdd0:	b580      	push	{r7, lr}
 801cdd2:	b084      	sub	sp, #16
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	68db      	ldr	r3, [r3, #12]
 801cdde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d119      	bne.n	801ce1a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	f04f 32ff 	mov.w	r2, #4294967295
 801cdee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801cdf0:	f7f9 fa3c 	bl	801626c <HAL_GetTick>
 801cdf4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801cdf6:	e009      	b.n	801ce0c <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 801cdf8:	f7f9 fa38 	bl	801626c <HAL_GetTick>
 801cdfc:	4602      	mov	r2, r0
 801cdfe:	68fb      	ldr	r3, [r7, #12]
 801ce00:	1ad3      	subs	r3, r2, r3
 801ce02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ce06:	d901      	bls.n	801ce0c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 801ce08:	2303      	movs	r3, #3
 801ce0a:	e007      	b.n	801ce1c <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	681b      	ldr	r3, [r3, #0]
 801ce10:	68db      	ldr	r3, [r3, #12]
 801ce12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d0ee      	beq.n	801cdf8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 801ce1a:	2300      	movs	r3, #0
}
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	3710      	adds	r7, #16
 801ce20:	46bd      	mov	sp, r7
 801ce22:	bd80      	pop	{r7, pc}

0801ce24 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 801ce24:	b480      	push	{r7}
 801ce26:	b085      	sub	sp, #20
 801ce28:	af00      	add	r7, sp, #0
 801ce2a:	4603      	mov	r3, r0
 801ce2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801ce2e:	2300      	movs	r3, #0
 801ce30:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 801ce32:	79fb      	ldrb	r3, [r7, #7]
 801ce34:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 801ce36:	e005      	b.n	801ce44 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	3301      	adds	r3, #1
 801ce3c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 801ce3e:	7afb      	ldrb	r3, [r7, #11]
 801ce40:	3b0a      	subs	r3, #10
 801ce42:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 801ce44:	7afb      	ldrb	r3, [r7, #11]
 801ce46:	2b09      	cmp	r3, #9
 801ce48:	d8f6      	bhi.n	801ce38 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 801ce4a:	68fb      	ldr	r3, [r7, #12]
 801ce4c:	b2db      	uxtb	r3, r3
 801ce4e:	011b      	lsls	r3, r3, #4
 801ce50:	b2da      	uxtb	r2, r3
 801ce52:	7afb      	ldrb	r3, [r7, #11]
 801ce54:	4313      	orrs	r3, r2
 801ce56:	b2db      	uxtb	r3, r3
}
 801ce58:	4618      	mov	r0, r3
 801ce5a:	3714      	adds	r7, #20
 801ce5c:	46bd      	mov	sp, r7
 801ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce62:	4770      	bx	lr

0801ce64 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 801ce64:	b480      	push	{r7}
 801ce66:	b085      	sub	sp, #20
 801ce68:	af00      	add	r7, sp, #0
 801ce6a:	4603      	mov	r3, r0
 801ce6c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 801ce6e:	79fb      	ldrb	r3, [r7, #7]
 801ce70:	091b      	lsrs	r3, r3, #4
 801ce72:	b2db      	uxtb	r3, r3
 801ce74:	461a      	mov	r2, r3
 801ce76:	4613      	mov	r3, r2
 801ce78:	009b      	lsls	r3, r3, #2
 801ce7a:	4413      	add	r3, r2
 801ce7c:	005b      	lsls	r3, r3, #1
 801ce7e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	b2da      	uxtb	r2, r3
 801ce84:	79fb      	ldrb	r3, [r7, #7]
 801ce86:	f003 030f 	and.w	r3, r3, #15
 801ce8a:	b2db      	uxtb	r3, r3
 801ce8c:	4413      	add	r3, r2
 801ce8e:	b2db      	uxtb	r3, r3
}
 801ce90:	4618      	mov	r0, r3
 801ce92:	3714      	adds	r7, #20
 801ce94:	46bd      	mov	sp, r7
 801ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce9a:	4770      	bx	lr

0801ce9c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801ce9c:	b480      	push	{r7}
 801ce9e:	b087      	sub	sp, #28
 801cea0:	af00      	add	r7, sp, #0
 801cea2:	60f8      	str	r0, [r7, #12]
 801cea4:	60b9      	str	r1, [r7, #8]
 801cea6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801cea8:	68fb      	ldr	r3, [r7, #12]
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	3350      	adds	r3, #80	; 0x50
 801ceae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801ceb0:	68bb      	ldr	r3, [r7, #8]
 801ceb2:	009b      	lsls	r3, r3, #2
 801ceb4:	697a      	ldr	r2, [r7, #20]
 801ceb6:	4413      	add	r3, r2
 801ceb8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801ceba:	697b      	ldr	r3, [r7, #20]
 801cebc:	687a      	ldr	r2, [r7, #4]
 801cebe:	601a      	str	r2, [r3, #0]
}
 801cec0:	bf00      	nop
 801cec2:	371c      	adds	r7, #28
 801cec4:	46bd      	mov	sp, r7
 801cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceca:	4770      	bx	lr

0801cecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cecc:	b580      	push	{r7, lr}
 801cece:	b082      	sub	sp, #8
 801ced0:	af00      	add	r7, sp, #0
 801ced2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d101      	bne.n	801cede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ceda:	2301      	movs	r3, #1
 801cedc:	e01d      	b.n	801cf1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cee4:	b2db      	uxtb	r3, r3
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	d106      	bne.n	801cef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	2200      	movs	r2, #0
 801ceee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cef2:	6878      	ldr	r0, [r7, #4]
 801cef4:	f7f8 fcce 	bl	8015894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	2202      	movs	r2, #2
 801cefc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	681a      	ldr	r2, [r3, #0]
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	3304      	adds	r3, #4
 801cf08:	4619      	mov	r1, r3
 801cf0a:	4610      	mov	r0, r2
 801cf0c:	f000 fc84 	bl	801d818 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	2201      	movs	r2, #1
 801cf14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cf18:	2300      	movs	r3, #0
}
 801cf1a:	4618      	mov	r0, r3
 801cf1c:	3708      	adds	r7, #8
 801cf1e:	46bd      	mov	sp, r7
 801cf20:	bd80      	pop	{r7, pc}
	...

0801cf24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801cf24:	b480      	push	{r7}
 801cf26:	b085      	sub	sp, #20
 801cf28:	af00      	add	r7, sp, #0
 801cf2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	2202      	movs	r2, #2
 801cf30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	689a      	ldr	r2, [r3, #8]
 801cf3a:	4b0e      	ldr	r3, [pc, #56]	; (801cf74 <HAL_TIM_Base_Start+0x50>)
 801cf3c:	4013      	ands	r3, r2
 801cf3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	2b06      	cmp	r3, #6
 801cf44:	d00b      	beq.n	801cf5e <HAL_TIM_Base_Start+0x3a>
 801cf46:	68fb      	ldr	r3, [r7, #12]
 801cf48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cf4c:	d007      	beq.n	801cf5e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	681a      	ldr	r2, [r3, #0]
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	f042 0201 	orr.w	r2, r2, #1
 801cf5c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	2201      	movs	r2, #1
 801cf62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801cf66:	2300      	movs	r3, #0
}
 801cf68:	4618      	mov	r0, r3
 801cf6a:	3714      	adds	r7, #20
 801cf6c:	46bd      	mov	sp, r7
 801cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf72:	4770      	bx	lr
 801cf74:	00010007 	.word	0x00010007

0801cf78 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801cf78:	b480      	push	{r7}
 801cf7a:	b083      	sub	sp, #12
 801cf7c:	af00      	add	r7, sp, #0
 801cf7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	2202      	movs	r2, #2
 801cf84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	681b      	ldr	r3, [r3, #0]
 801cf8c:	6a1a      	ldr	r2, [r3, #32]
 801cf8e:	f241 1311 	movw	r3, #4369	; 0x1111
 801cf92:	4013      	ands	r3, r2
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d10f      	bne.n	801cfb8 <HAL_TIM_Base_Stop+0x40>
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	6a1a      	ldr	r2, [r3, #32]
 801cf9e:	f240 4344 	movw	r3, #1092	; 0x444
 801cfa2:	4013      	ands	r3, r2
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d107      	bne.n	801cfb8 <HAL_TIM_Base_Stop+0x40>
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	681a      	ldr	r2, [r3, #0]
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	f022 0201 	bic.w	r2, r2, #1
 801cfb6:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	2201      	movs	r2, #1
 801cfbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801cfc0:	2300      	movs	r3, #0
}
 801cfc2:	4618      	mov	r0, r3
 801cfc4:	370c      	adds	r7, #12
 801cfc6:	46bd      	mov	sp, r7
 801cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfcc:	4770      	bx	lr
	...

0801cfd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801cfd0:	b480      	push	{r7}
 801cfd2:	b085      	sub	sp, #20
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	68da      	ldr	r2, [r3, #12]
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	f042 0201 	orr.w	r2, r2, #1
 801cfe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	689a      	ldr	r2, [r3, #8]
 801cfee:	4b0c      	ldr	r3, [pc, #48]	; (801d020 <HAL_TIM_Base_Start_IT+0x50>)
 801cff0:	4013      	ands	r3, r2
 801cff2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	2b06      	cmp	r3, #6
 801cff8:	d00b      	beq.n	801d012 <HAL_TIM_Base_Start_IT+0x42>
 801cffa:	68fb      	ldr	r3, [r7, #12]
 801cffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d000:	d007      	beq.n	801d012 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	681b      	ldr	r3, [r3, #0]
 801d006:	681a      	ldr	r2, [r3, #0]
 801d008:	687b      	ldr	r3, [r7, #4]
 801d00a:	681b      	ldr	r3, [r3, #0]
 801d00c:	f042 0201 	orr.w	r2, r2, #1
 801d010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801d012:	2300      	movs	r3, #0
}
 801d014:	4618      	mov	r0, r3
 801d016:	3714      	adds	r7, #20
 801d018:	46bd      	mov	sp, r7
 801d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d01e:	4770      	bx	lr
 801d020:	00010007 	.word	0x00010007

0801d024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801d024:	b580      	push	{r7, lr}
 801d026:	b082      	sub	sp, #8
 801d028:	af00      	add	r7, sp, #0
 801d02a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d101      	bne.n	801d036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801d032:	2301      	movs	r3, #1
 801d034:	e01d      	b.n	801d072 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d03c:	b2db      	uxtb	r3, r3
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d106      	bne.n	801d050 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	2200      	movs	r2, #0
 801d046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801d04a:	6878      	ldr	r0, [r7, #4]
 801d04c:	f000 f815 	bl	801d07a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	2202      	movs	r2, #2
 801d054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	681a      	ldr	r2, [r3, #0]
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	3304      	adds	r3, #4
 801d060:	4619      	mov	r1, r3
 801d062:	4610      	mov	r0, r2
 801d064:	f000 fbd8 	bl	801d818 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	2201      	movs	r2, #1
 801d06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801d070:	2300      	movs	r3, #0
}
 801d072:	4618      	mov	r0, r3
 801d074:	3708      	adds	r7, #8
 801d076:	46bd      	mov	sp, r7
 801d078:	bd80      	pop	{r7, pc}

0801d07a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801d07a:	b480      	push	{r7}
 801d07c:	b083      	sub	sp, #12
 801d07e:	af00      	add	r7, sp, #0
 801d080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801d082:	bf00      	nop
 801d084:	370c      	adds	r7, #12
 801d086:	46bd      	mov	sp, r7
 801d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d08c:	4770      	bx	lr
	...

0801d090 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b084      	sub	sp, #16
 801d094:	af00      	add	r7, sp, #0
 801d096:	6078      	str	r0, [r7, #4]
 801d098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	2201      	movs	r2, #1
 801d0a0:	6839      	ldr	r1, [r7, #0]
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	f000 ff36 	bl	801df14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	4a19      	ldr	r2, [pc, #100]	; (801d114 <HAL_TIM_PWM_Start+0x84>)
 801d0ae:	4293      	cmp	r3, r2
 801d0b0:	d009      	beq.n	801d0c6 <HAL_TIM_PWM_Start+0x36>
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	681b      	ldr	r3, [r3, #0]
 801d0b6:	4a18      	ldr	r2, [pc, #96]	; (801d118 <HAL_TIM_PWM_Start+0x88>)
 801d0b8:	4293      	cmp	r3, r2
 801d0ba:	d004      	beq.n	801d0c6 <HAL_TIM_PWM_Start+0x36>
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	4a16      	ldr	r2, [pc, #88]	; (801d11c <HAL_TIM_PWM_Start+0x8c>)
 801d0c2:	4293      	cmp	r3, r2
 801d0c4:	d101      	bne.n	801d0ca <HAL_TIM_PWM_Start+0x3a>
 801d0c6:	2301      	movs	r3, #1
 801d0c8:	e000      	b.n	801d0cc <HAL_TIM_PWM_Start+0x3c>
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d007      	beq.n	801d0e0 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801d0de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	689a      	ldr	r2, [r3, #8]
 801d0e6:	4b0e      	ldr	r3, [pc, #56]	; (801d120 <HAL_TIM_PWM_Start+0x90>)
 801d0e8:	4013      	ands	r3, r2
 801d0ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d0ec:	68fb      	ldr	r3, [r7, #12]
 801d0ee:	2b06      	cmp	r3, #6
 801d0f0:	d00b      	beq.n	801d10a <HAL_TIM_PWM_Start+0x7a>
 801d0f2:	68fb      	ldr	r3, [r7, #12]
 801d0f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d0f8:	d007      	beq.n	801d10a <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	681b      	ldr	r3, [r3, #0]
 801d0fe:	681a      	ldr	r2, [r3, #0]
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	681b      	ldr	r3, [r3, #0]
 801d104:	f042 0201 	orr.w	r2, r2, #1
 801d108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801d10a:	2300      	movs	r3, #0
}
 801d10c:	4618      	mov	r0, r3
 801d10e:	3710      	adds	r7, #16
 801d110:	46bd      	mov	sp, r7
 801d112:	bd80      	pop	{r7, pc}
 801d114:	40012c00 	.word	0x40012c00
 801d118:	40014400 	.word	0x40014400
 801d11c:	40014800 	.word	0x40014800
 801d120:	00010007 	.word	0x00010007

0801d124 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801d124:	b580      	push	{r7, lr}
 801d126:	b082      	sub	sp, #8
 801d128:	af00      	add	r7, sp, #0
 801d12a:	6078      	str	r0, [r7, #4]
 801d12c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801d12e:	687b      	ldr	r3, [r7, #4]
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	2200      	movs	r2, #0
 801d134:	6839      	ldr	r1, [r7, #0]
 801d136:	4618      	mov	r0, r3
 801d138:	f000 feec 	bl	801df14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	4a25      	ldr	r2, [pc, #148]	; (801d1d8 <HAL_TIM_PWM_Stop+0xb4>)
 801d142:	4293      	cmp	r3, r2
 801d144:	d009      	beq.n	801d15a <HAL_TIM_PWM_Stop+0x36>
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	4a24      	ldr	r2, [pc, #144]	; (801d1dc <HAL_TIM_PWM_Stop+0xb8>)
 801d14c:	4293      	cmp	r3, r2
 801d14e:	d004      	beq.n	801d15a <HAL_TIM_PWM_Stop+0x36>
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	4a22      	ldr	r2, [pc, #136]	; (801d1e0 <HAL_TIM_PWM_Stop+0xbc>)
 801d156:	4293      	cmp	r3, r2
 801d158:	d101      	bne.n	801d15e <HAL_TIM_PWM_Stop+0x3a>
 801d15a:	2301      	movs	r3, #1
 801d15c:	e000      	b.n	801d160 <HAL_TIM_PWM_Stop+0x3c>
 801d15e:	2300      	movs	r3, #0
 801d160:	2b00      	cmp	r3, #0
 801d162:	d017      	beq.n	801d194 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	6a1a      	ldr	r2, [r3, #32]
 801d16a:	f241 1311 	movw	r3, #4369	; 0x1111
 801d16e:	4013      	ands	r3, r2
 801d170:	2b00      	cmp	r3, #0
 801d172:	d10f      	bne.n	801d194 <HAL_TIM_PWM_Stop+0x70>
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	681b      	ldr	r3, [r3, #0]
 801d178:	6a1a      	ldr	r2, [r3, #32]
 801d17a:	f240 4344 	movw	r3, #1092	; 0x444
 801d17e:	4013      	ands	r3, r2
 801d180:	2b00      	cmp	r3, #0
 801d182:	d107      	bne.n	801d194 <HAL_TIM_PWM_Stop+0x70>
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	681b      	ldr	r3, [r3, #0]
 801d188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801d192:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	681b      	ldr	r3, [r3, #0]
 801d198:	6a1a      	ldr	r2, [r3, #32]
 801d19a:	f241 1311 	movw	r3, #4369	; 0x1111
 801d19e:	4013      	ands	r3, r2
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	d10f      	bne.n	801d1c4 <HAL_TIM_PWM_Stop+0xa0>
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	6a1a      	ldr	r2, [r3, #32]
 801d1aa:	f240 4344 	movw	r3, #1092	; 0x444
 801d1ae:	4013      	ands	r3, r2
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d107      	bne.n	801d1c4 <HAL_TIM_PWM_Stop+0xa0>
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	681a      	ldr	r2, [r3, #0]
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	f022 0201 	bic.w	r2, r2, #1
 801d1c2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	2201      	movs	r2, #1
 801d1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801d1cc:	2300      	movs	r3, #0
}
 801d1ce:	4618      	mov	r0, r3
 801d1d0:	3708      	adds	r7, #8
 801d1d2:	46bd      	mov	sp, r7
 801d1d4:	bd80      	pop	{r7, pc}
 801d1d6:	bf00      	nop
 801d1d8:	40012c00 	.word	0x40012c00
 801d1dc:	40014400 	.word	0x40014400
 801d1e0:	40014800 	.word	0x40014800

0801d1e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d1e4:	b580      	push	{r7, lr}
 801d1e6:	b082      	sub	sp, #8
 801d1e8:	af00      	add	r7, sp, #0
 801d1ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	681b      	ldr	r3, [r3, #0]
 801d1f0:	691b      	ldr	r3, [r3, #16]
 801d1f2:	f003 0302 	and.w	r3, r3, #2
 801d1f6:	2b02      	cmp	r3, #2
 801d1f8:	d122      	bne.n	801d240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	68db      	ldr	r3, [r3, #12]
 801d200:	f003 0302 	and.w	r3, r3, #2
 801d204:	2b02      	cmp	r3, #2
 801d206:	d11b      	bne.n	801d240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	f06f 0202 	mvn.w	r2, #2
 801d210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	2201      	movs	r2, #1
 801d216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	699b      	ldr	r3, [r3, #24]
 801d21e:	f003 0303 	and.w	r3, r3, #3
 801d222:	2b00      	cmp	r3, #0
 801d224:	d003      	beq.n	801d22e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d226:	6878      	ldr	r0, [r7, #4]
 801d228:	f000 fad7 	bl	801d7da <HAL_TIM_IC_CaptureCallback>
 801d22c:	e005      	b.n	801d23a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d22e:	6878      	ldr	r0, [r7, #4]
 801d230:	f000 fac9 	bl	801d7c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d234:	6878      	ldr	r0, [r7, #4]
 801d236:	f000 fada 	bl	801d7ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	2200      	movs	r2, #0
 801d23e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	681b      	ldr	r3, [r3, #0]
 801d244:	691b      	ldr	r3, [r3, #16]
 801d246:	f003 0304 	and.w	r3, r3, #4
 801d24a:	2b04      	cmp	r3, #4
 801d24c:	d122      	bne.n	801d294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	68db      	ldr	r3, [r3, #12]
 801d254:	f003 0304 	and.w	r3, r3, #4
 801d258:	2b04      	cmp	r3, #4
 801d25a:	d11b      	bne.n	801d294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	f06f 0204 	mvn.w	r2, #4
 801d264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	2202      	movs	r2, #2
 801d26a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	681b      	ldr	r3, [r3, #0]
 801d270:	699b      	ldr	r3, [r3, #24]
 801d272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d276:	2b00      	cmp	r3, #0
 801d278:	d003      	beq.n	801d282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d27a:	6878      	ldr	r0, [r7, #4]
 801d27c:	f000 faad 	bl	801d7da <HAL_TIM_IC_CaptureCallback>
 801d280:	e005      	b.n	801d28e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d282:	6878      	ldr	r0, [r7, #4]
 801d284:	f000 fa9f 	bl	801d7c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d288:	6878      	ldr	r0, [r7, #4]
 801d28a:	f000 fab0 	bl	801d7ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	2200      	movs	r2, #0
 801d292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	681b      	ldr	r3, [r3, #0]
 801d298:	691b      	ldr	r3, [r3, #16]
 801d29a:	f003 0308 	and.w	r3, r3, #8
 801d29e:	2b08      	cmp	r3, #8
 801d2a0:	d122      	bne.n	801d2e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	68db      	ldr	r3, [r3, #12]
 801d2a8:	f003 0308 	and.w	r3, r3, #8
 801d2ac:	2b08      	cmp	r3, #8
 801d2ae:	d11b      	bne.n	801d2e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	f06f 0208 	mvn.w	r2, #8
 801d2b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	2204      	movs	r2, #4
 801d2be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	681b      	ldr	r3, [r3, #0]
 801d2c4:	69db      	ldr	r3, [r3, #28]
 801d2c6:	f003 0303 	and.w	r3, r3, #3
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d003      	beq.n	801d2d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d2ce:	6878      	ldr	r0, [r7, #4]
 801d2d0:	f000 fa83 	bl	801d7da <HAL_TIM_IC_CaptureCallback>
 801d2d4:	e005      	b.n	801d2e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d2d6:	6878      	ldr	r0, [r7, #4]
 801d2d8:	f000 fa75 	bl	801d7c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d2dc:	6878      	ldr	r0, [r7, #4]
 801d2de:	f000 fa86 	bl	801d7ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	2200      	movs	r2, #0
 801d2e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	691b      	ldr	r3, [r3, #16]
 801d2ee:	f003 0310 	and.w	r3, r3, #16
 801d2f2:	2b10      	cmp	r3, #16
 801d2f4:	d122      	bne.n	801d33c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	681b      	ldr	r3, [r3, #0]
 801d2fa:	68db      	ldr	r3, [r3, #12]
 801d2fc:	f003 0310 	and.w	r3, r3, #16
 801d300:	2b10      	cmp	r3, #16
 801d302:	d11b      	bne.n	801d33c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	681b      	ldr	r3, [r3, #0]
 801d308:	f06f 0210 	mvn.w	r2, #16
 801d30c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	2208      	movs	r2, #8
 801d312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	69db      	ldr	r3, [r3, #28]
 801d31a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d003      	beq.n	801d32a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d322:	6878      	ldr	r0, [r7, #4]
 801d324:	f000 fa59 	bl	801d7da <HAL_TIM_IC_CaptureCallback>
 801d328:	e005      	b.n	801d336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d32a:	6878      	ldr	r0, [r7, #4]
 801d32c:	f000 fa4b 	bl	801d7c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d330:	6878      	ldr	r0, [r7, #4]
 801d332:	f000 fa5c 	bl	801d7ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	2200      	movs	r2, #0
 801d33a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	691b      	ldr	r3, [r3, #16]
 801d342:	f003 0301 	and.w	r3, r3, #1
 801d346:	2b01      	cmp	r3, #1
 801d348:	d10e      	bne.n	801d368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	681b      	ldr	r3, [r3, #0]
 801d34e:	68db      	ldr	r3, [r3, #12]
 801d350:	f003 0301 	and.w	r3, r3, #1
 801d354:	2b01      	cmp	r3, #1
 801d356:	d107      	bne.n	801d368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	f06f 0201 	mvn.w	r2, #1
 801d360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d362:	6878      	ldr	r0, [r7, #4]
 801d364:	f7f6 ffdc 	bl	8014320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	691b      	ldr	r3, [r3, #16]
 801d36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d372:	2b80      	cmp	r3, #128	; 0x80
 801d374:	d10e      	bne.n	801d394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	68db      	ldr	r3, [r3, #12]
 801d37c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d380:	2b80      	cmp	r3, #128	; 0x80
 801d382:	d107      	bne.n	801d394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d38e:	6878      	ldr	r0, [r7, #4]
 801d390:	f000 fe50 	bl	801e034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	691b      	ldr	r3, [r3, #16]
 801d39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d3a2:	d10e      	bne.n	801d3c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	68db      	ldr	r3, [r3, #12]
 801d3aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d3ae:	2b80      	cmp	r3, #128	; 0x80
 801d3b0:	d107      	bne.n	801d3c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801d3ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801d3bc:	6878      	ldr	r0, [r7, #4]
 801d3be:	f000 fe43 	bl	801e048 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	691b      	ldr	r3, [r3, #16]
 801d3c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3cc:	2b40      	cmp	r3, #64	; 0x40
 801d3ce:	d10e      	bne.n	801d3ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	68db      	ldr	r3, [r3, #12]
 801d3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3da:	2b40      	cmp	r3, #64	; 0x40
 801d3dc:	d107      	bne.n	801d3ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d3e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d3e8:	6878      	ldr	r0, [r7, #4]
 801d3ea:	f000 fa0a 	bl	801d802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	691b      	ldr	r3, [r3, #16]
 801d3f4:	f003 0320 	and.w	r3, r3, #32
 801d3f8:	2b20      	cmp	r3, #32
 801d3fa:	d10e      	bne.n	801d41a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	68db      	ldr	r3, [r3, #12]
 801d402:	f003 0320 	and.w	r3, r3, #32
 801d406:	2b20      	cmp	r3, #32
 801d408:	d107      	bne.n	801d41a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	681b      	ldr	r3, [r3, #0]
 801d40e:	f06f 0220 	mvn.w	r2, #32
 801d412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d414:	6878      	ldr	r0, [r7, #4]
 801d416:	f000 fe03 	bl	801e020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d41a:	bf00      	nop
 801d41c:	3708      	adds	r7, #8
 801d41e:	46bd      	mov	sp, r7
 801d420:	bd80      	pop	{r7, pc}
	...

0801d424 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801d424:	b580      	push	{r7, lr}
 801d426:	b084      	sub	sp, #16
 801d428:	af00      	add	r7, sp, #0
 801d42a:	60f8      	str	r0, [r7, #12]
 801d42c:	60b9      	str	r1, [r7, #8]
 801d42e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d430:	68fb      	ldr	r3, [r7, #12]
 801d432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d436:	2b01      	cmp	r3, #1
 801d438:	d101      	bne.n	801d43e <HAL_TIM_PWM_ConfigChannel+0x1a>
 801d43a:	2302      	movs	r3, #2
 801d43c:	e105      	b.n	801d64a <HAL_TIM_PWM_ConfigChannel+0x226>
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	2201      	movs	r2, #1
 801d442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d446:	68fb      	ldr	r3, [r7, #12]
 801d448:	2202      	movs	r2, #2
 801d44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	2b14      	cmp	r3, #20
 801d452:	f200 80f0 	bhi.w	801d636 <HAL_TIM_PWM_ConfigChannel+0x212>
 801d456:	a201      	add	r2, pc, #4	; (adr r2, 801d45c <HAL_TIM_PWM_ConfigChannel+0x38>)
 801d458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d45c:	0801d4b1 	.word	0x0801d4b1
 801d460:	0801d637 	.word	0x0801d637
 801d464:	0801d637 	.word	0x0801d637
 801d468:	0801d637 	.word	0x0801d637
 801d46c:	0801d4f1 	.word	0x0801d4f1
 801d470:	0801d637 	.word	0x0801d637
 801d474:	0801d637 	.word	0x0801d637
 801d478:	0801d637 	.word	0x0801d637
 801d47c:	0801d533 	.word	0x0801d533
 801d480:	0801d637 	.word	0x0801d637
 801d484:	0801d637 	.word	0x0801d637
 801d488:	0801d637 	.word	0x0801d637
 801d48c:	0801d573 	.word	0x0801d573
 801d490:	0801d637 	.word	0x0801d637
 801d494:	0801d637 	.word	0x0801d637
 801d498:	0801d637 	.word	0x0801d637
 801d49c:	0801d5b5 	.word	0x0801d5b5
 801d4a0:	0801d637 	.word	0x0801d637
 801d4a4:	0801d637 	.word	0x0801d637
 801d4a8:	0801d637 	.word	0x0801d637
 801d4ac:	0801d5f5 	.word	0x0801d5f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	68b9      	ldr	r1, [r7, #8]
 801d4b6:	4618      	mov	r0, r3
 801d4b8:	f000 fa12 	bl	801d8e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801d4bc:	68fb      	ldr	r3, [r7, #12]
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	699a      	ldr	r2, [r3, #24]
 801d4c2:	68fb      	ldr	r3, [r7, #12]
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	f042 0208 	orr.w	r2, r2, #8
 801d4ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801d4cc:	68fb      	ldr	r3, [r7, #12]
 801d4ce:	681b      	ldr	r3, [r3, #0]
 801d4d0:	699a      	ldr	r2, [r3, #24]
 801d4d2:	68fb      	ldr	r3, [r7, #12]
 801d4d4:	681b      	ldr	r3, [r3, #0]
 801d4d6:	f022 0204 	bic.w	r2, r2, #4
 801d4da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d4dc:	68fb      	ldr	r3, [r7, #12]
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	6999      	ldr	r1, [r3, #24]
 801d4e2:	68bb      	ldr	r3, [r7, #8]
 801d4e4:	691a      	ldr	r2, [r3, #16]
 801d4e6:	68fb      	ldr	r3, [r7, #12]
 801d4e8:	681b      	ldr	r3, [r3, #0]
 801d4ea:	430a      	orrs	r2, r1
 801d4ec:	619a      	str	r2, [r3, #24]
      break;
 801d4ee:	e0a3      	b.n	801d638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d4f0:	68fb      	ldr	r3, [r7, #12]
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	68b9      	ldr	r1, [r7, #8]
 801d4f6:	4618      	mov	r0, r3
 801d4f8:	f000 fa6e 	bl	801d9d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d4fc:	68fb      	ldr	r3, [r7, #12]
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	699a      	ldr	r2, [r3, #24]
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	681b      	ldr	r3, [r3, #0]
 801d506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d50a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801d50c:	68fb      	ldr	r3, [r7, #12]
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	699a      	ldr	r2, [r3, #24]
 801d512:	68fb      	ldr	r3, [r7, #12]
 801d514:	681b      	ldr	r3, [r3, #0]
 801d516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d51a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	681b      	ldr	r3, [r3, #0]
 801d520:	6999      	ldr	r1, [r3, #24]
 801d522:	68bb      	ldr	r3, [r7, #8]
 801d524:	691b      	ldr	r3, [r3, #16]
 801d526:	021a      	lsls	r2, r3, #8
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	681b      	ldr	r3, [r3, #0]
 801d52c:	430a      	orrs	r2, r1
 801d52e:	619a      	str	r2, [r3, #24]
      break;
 801d530:	e082      	b.n	801d638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d532:	68fb      	ldr	r3, [r7, #12]
 801d534:	681b      	ldr	r3, [r3, #0]
 801d536:	68b9      	ldr	r1, [r7, #8]
 801d538:	4618      	mov	r0, r3
 801d53a:	f000 fac7 	bl	801dacc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	69da      	ldr	r2, [r3, #28]
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	681b      	ldr	r3, [r3, #0]
 801d548:	f042 0208 	orr.w	r2, r2, #8
 801d54c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	681b      	ldr	r3, [r3, #0]
 801d552:	69da      	ldr	r2, [r3, #28]
 801d554:	68fb      	ldr	r3, [r7, #12]
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	f022 0204 	bic.w	r2, r2, #4
 801d55c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	681b      	ldr	r3, [r3, #0]
 801d562:	69d9      	ldr	r1, [r3, #28]
 801d564:	68bb      	ldr	r3, [r7, #8]
 801d566:	691a      	ldr	r2, [r3, #16]
 801d568:	68fb      	ldr	r3, [r7, #12]
 801d56a:	681b      	ldr	r3, [r3, #0]
 801d56c:	430a      	orrs	r2, r1
 801d56e:	61da      	str	r2, [r3, #28]
      break;
 801d570:	e062      	b.n	801d638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d572:	68fb      	ldr	r3, [r7, #12]
 801d574:	681b      	ldr	r3, [r3, #0]
 801d576:	68b9      	ldr	r1, [r7, #8]
 801d578:	4618      	mov	r0, r3
 801d57a:	f000 fb1f 	bl	801dbbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	681b      	ldr	r3, [r3, #0]
 801d582:	69da      	ldr	r2, [r3, #28]
 801d584:	68fb      	ldr	r3, [r7, #12]
 801d586:	681b      	ldr	r3, [r3, #0]
 801d588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d58c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	681b      	ldr	r3, [r3, #0]
 801d592:	69da      	ldr	r2, [r3, #28]
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	681b      	ldr	r3, [r3, #0]
 801d598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d59c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d59e:	68fb      	ldr	r3, [r7, #12]
 801d5a0:	681b      	ldr	r3, [r3, #0]
 801d5a2:	69d9      	ldr	r1, [r3, #28]
 801d5a4:	68bb      	ldr	r3, [r7, #8]
 801d5a6:	691b      	ldr	r3, [r3, #16]
 801d5a8:	021a      	lsls	r2, r3, #8
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	430a      	orrs	r2, r1
 801d5b0:	61da      	str	r2, [r3, #28]
      break;
 801d5b2:	e041      	b.n	801d638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	681b      	ldr	r3, [r3, #0]
 801d5b8:	68b9      	ldr	r1, [r7, #8]
 801d5ba:	4618      	mov	r0, r3
 801d5bc:	f000 fb5c 	bl	801dc78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	f042 0208 	orr.w	r2, r2, #8
 801d5ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	681b      	ldr	r3, [r3, #0]
 801d5da:	f022 0204 	bic.w	r2, r2, #4
 801d5de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801d5e0:	68fb      	ldr	r3, [r7, #12]
 801d5e2:	681b      	ldr	r3, [r3, #0]
 801d5e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801d5e6:	68bb      	ldr	r3, [r7, #8]
 801d5e8:	691a      	ldr	r2, [r3, #16]
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	681b      	ldr	r3, [r3, #0]
 801d5ee:	430a      	orrs	r2, r1
 801d5f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801d5f2:	e021      	b.n	801d638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	681b      	ldr	r3, [r3, #0]
 801d5f8:	68b9      	ldr	r1, [r7, #8]
 801d5fa:	4618      	mov	r0, r3
 801d5fc:	f000 fb94 	bl	801dd28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	681b      	ldr	r3, [r3, #0]
 801d604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d60e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801d610:	68fb      	ldr	r3, [r7, #12]
 801d612:	681b      	ldr	r3, [r3, #0]
 801d614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d61e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801d620:	68fb      	ldr	r3, [r7, #12]
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801d626:	68bb      	ldr	r3, [r7, #8]
 801d628:	691b      	ldr	r3, [r3, #16]
 801d62a:	021a      	lsls	r2, r3, #8
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	430a      	orrs	r2, r1
 801d632:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801d634:	e000      	b.n	801d638 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 801d636:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	2201      	movs	r2, #1
 801d63c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	2200      	movs	r2, #0
 801d644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801d648:	2300      	movs	r3, #0
}
 801d64a:	4618      	mov	r0, r3
 801d64c:	3710      	adds	r7, #16
 801d64e:	46bd      	mov	sp, r7
 801d650:	bd80      	pop	{r7, pc}
 801d652:	bf00      	nop

0801d654 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d654:	b580      	push	{r7, lr}
 801d656:	b084      	sub	sp, #16
 801d658:	af00      	add	r7, sp, #0
 801d65a:	6078      	str	r0, [r7, #4]
 801d65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d664:	2b01      	cmp	r3, #1
 801d666:	d101      	bne.n	801d66c <HAL_TIM_ConfigClockSource+0x18>
 801d668:	2302      	movs	r3, #2
 801d66a:	e0a8      	b.n	801d7be <HAL_TIM_ConfigClockSource+0x16a>
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	2201      	movs	r2, #1
 801d670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	2202      	movs	r2, #2
 801d678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	681b      	ldr	r3, [r3, #0]
 801d680:	689b      	ldr	r3, [r3, #8]
 801d682:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 801d68a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d68e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d690:	68fb      	ldr	r3, [r7, #12]
 801d692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d696:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	68fa      	ldr	r2, [r7, #12]
 801d69e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d6a0:	683b      	ldr	r3, [r7, #0]
 801d6a2:	681b      	ldr	r3, [r3, #0]
 801d6a4:	2b40      	cmp	r3, #64	; 0x40
 801d6a6:	d067      	beq.n	801d778 <HAL_TIM_ConfigClockSource+0x124>
 801d6a8:	2b40      	cmp	r3, #64	; 0x40
 801d6aa:	d80b      	bhi.n	801d6c4 <HAL_TIM_ConfigClockSource+0x70>
 801d6ac:	2b10      	cmp	r3, #16
 801d6ae:	d073      	beq.n	801d798 <HAL_TIM_ConfigClockSource+0x144>
 801d6b0:	2b10      	cmp	r3, #16
 801d6b2:	d802      	bhi.n	801d6ba <HAL_TIM_ConfigClockSource+0x66>
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	d06f      	beq.n	801d798 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801d6b8:	e078      	b.n	801d7ac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 801d6ba:	2b20      	cmp	r3, #32
 801d6bc:	d06c      	beq.n	801d798 <HAL_TIM_ConfigClockSource+0x144>
 801d6be:	2b30      	cmp	r3, #48	; 0x30
 801d6c0:	d06a      	beq.n	801d798 <HAL_TIM_ConfigClockSource+0x144>
      break;
 801d6c2:	e073      	b.n	801d7ac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 801d6c4:	2b70      	cmp	r3, #112	; 0x70
 801d6c6:	d00d      	beq.n	801d6e4 <HAL_TIM_ConfigClockSource+0x90>
 801d6c8:	2b70      	cmp	r3, #112	; 0x70
 801d6ca:	d804      	bhi.n	801d6d6 <HAL_TIM_ConfigClockSource+0x82>
 801d6cc:	2b50      	cmp	r3, #80	; 0x50
 801d6ce:	d033      	beq.n	801d738 <HAL_TIM_ConfigClockSource+0xe4>
 801d6d0:	2b60      	cmp	r3, #96	; 0x60
 801d6d2:	d041      	beq.n	801d758 <HAL_TIM_ConfigClockSource+0x104>
      break;
 801d6d4:	e06a      	b.n	801d7ac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 801d6d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d6da:	d066      	beq.n	801d7aa <HAL_TIM_ConfigClockSource+0x156>
 801d6dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d6e0:	d017      	beq.n	801d712 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 801d6e2:	e063      	b.n	801d7ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	6818      	ldr	r0, [r3, #0]
 801d6e8:	683b      	ldr	r3, [r7, #0]
 801d6ea:	6899      	ldr	r1, [r3, #8]
 801d6ec:	683b      	ldr	r3, [r7, #0]
 801d6ee:	685a      	ldr	r2, [r3, #4]
 801d6f0:	683b      	ldr	r3, [r7, #0]
 801d6f2:	68db      	ldr	r3, [r3, #12]
 801d6f4:	f000 fbee 	bl	801ded4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	681b      	ldr	r3, [r3, #0]
 801d6fc:	689b      	ldr	r3, [r3, #8]
 801d6fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d706:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801d708:	687b      	ldr	r3, [r7, #4]
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	68fa      	ldr	r2, [r7, #12]
 801d70e:	609a      	str	r2, [r3, #8]
      break;
 801d710:	e04c      	b.n	801d7ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	6818      	ldr	r0, [r3, #0]
 801d716:	683b      	ldr	r3, [r7, #0]
 801d718:	6899      	ldr	r1, [r3, #8]
 801d71a:	683b      	ldr	r3, [r7, #0]
 801d71c:	685a      	ldr	r2, [r3, #4]
 801d71e:	683b      	ldr	r3, [r7, #0]
 801d720:	68db      	ldr	r3, [r3, #12]
 801d722:	f000 fbd7 	bl	801ded4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	681b      	ldr	r3, [r3, #0]
 801d72a:	689a      	ldr	r2, [r3, #8]
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	681b      	ldr	r3, [r3, #0]
 801d730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d734:	609a      	str	r2, [r3, #8]
      break;
 801d736:	e039      	b.n	801d7ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	6818      	ldr	r0, [r3, #0]
 801d73c:	683b      	ldr	r3, [r7, #0]
 801d73e:	6859      	ldr	r1, [r3, #4]
 801d740:	683b      	ldr	r3, [r7, #0]
 801d742:	68db      	ldr	r3, [r3, #12]
 801d744:	461a      	mov	r2, r3
 801d746:	f000 fb49 	bl	801dddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	2150      	movs	r1, #80	; 0x50
 801d750:	4618      	mov	r0, r3
 801d752:	f000 fba2 	bl	801de9a <TIM_ITRx_SetConfig>
      break;
 801d756:	e029      	b.n	801d7ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	6818      	ldr	r0, [r3, #0]
 801d75c:	683b      	ldr	r3, [r7, #0]
 801d75e:	6859      	ldr	r1, [r3, #4]
 801d760:	683b      	ldr	r3, [r7, #0]
 801d762:	68db      	ldr	r3, [r3, #12]
 801d764:	461a      	mov	r2, r3
 801d766:	f000 fb68 	bl	801de3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	681b      	ldr	r3, [r3, #0]
 801d76e:	2160      	movs	r1, #96	; 0x60
 801d770:	4618      	mov	r0, r3
 801d772:	f000 fb92 	bl	801de9a <TIM_ITRx_SetConfig>
      break;
 801d776:	e019      	b.n	801d7ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	6818      	ldr	r0, [r3, #0]
 801d77c:	683b      	ldr	r3, [r7, #0]
 801d77e:	6859      	ldr	r1, [r3, #4]
 801d780:	683b      	ldr	r3, [r7, #0]
 801d782:	68db      	ldr	r3, [r3, #12]
 801d784:	461a      	mov	r2, r3
 801d786:	f000 fb29 	bl	801dddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	681b      	ldr	r3, [r3, #0]
 801d78e:	2140      	movs	r1, #64	; 0x40
 801d790:	4618      	mov	r0, r3
 801d792:	f000 fb82 	bl	801de9a <TIM_ITRx_SetConfig>
      break;
 801d796:	e009      	b.n	801d7ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d798:	687b      	ldr	r3, [r7, #4]
 801d79a:	681a      	ldr	r2, [r3, #0]
 801d79c:	683b      	ldr	r3, [r7, #0]
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	4619      	mov	r1, r3
 801d7a2:	4610      	mov	r0, r2
 801d7a4:	f000 fb79 	bl	801de9a <TIM_ITRx_SetConfig>
      break;
 801d7a8:	e000      	b.n	801d7ac <HAL_TIM_ConfigClockSource+0x158>
      break;
 801d7aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	2201      	movs	r2, #1
 801d7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	2200      	movs	r2, #0
 801d7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801d7bc:	2300      	movs	r3, #0
}
 801d7be:	4618      	mov	r0, r3
 801d7c0:	3710      	adds	r7, #16
 801d7c2:	46bd      	mov	sp, r7
 801d7c4:	bd80      	pop	{r7, pc}

0801d7c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d7c6:	b480      	push	{r7}
 801d7c8:	b083      	sub	sp, #12
 801d7ca:	af00      	add	r7, sp, #0
 801d7cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d7ce:	bf00      	nop
 801d7d0:	370c      	adds	r7, #12
 801d7d2:	46bd      	mov	sp, r7
 801d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7d8:	4770      	bx	lr

0801d7da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d7da:	b480      	push	{r7}
 801d7dc:	b083      	sub	sp, #12
 801d7de:	af00      	add	r7, sp, #0
 801d7e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d7e2:	bf00      	nop
 801d7e4:	370c      	adds	r7, #12
 801d7e6:	46bd      	mov	sp, r7
 801d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7ec:	4770      	bx	lr

0801d7ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d7ee:	b480      	push	{r7}
 801d7f0:	b083      	sub	sp, #12
 801d7f2:	af00      	add	r7, sp, #0
 801d7f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d7f6:	bf00      	nop
 801d7f8:	370c      	adds	r7, #12
 801d7fa:	46bd      	mov	sp, r7
 801d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d800:	4770      	bx	lr

0801d802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d802:	b480      	push	{r7}
 801d804:	b083      	sub	sp, #12
 801d806:	af00      	add	r7, sp, #0
 801d808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d80a:	bf00      	nop
 801d80c:	370c      	adds	r7, #12
 801d80e:	46bd      	mov	sp, r7
 801d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d814:	4770      	bx	lr
	...

0801d818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d818:	b480      	push	{r7}
 801d81a:	b085      	sub	sp, #20
 801d81c:	af00      	add	r7, sp, #0
 801d81e:	6078      	str	r0, [r7, #4]
 801d820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	681b      	ldr	r3, [r3, #0]
 801d826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	4a2a      	ldr	r2, [pc, #168]	; (801d8d4 <TIM_Base_SetConfig+0xbc>)
 801d82c:	4293      	cmp	r3, r2
 801d82e:	d003      	beq.n	801d838 <TIM_Base_SetConfig+0x20>
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d836:	d108      	bne.n	801d84a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d83e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d840:	683b      	ldr	r3, [r7, #0]
 801d842:	685b      	ldr	r3, [r3, #4]
 801d844:	68fa      	ldr	r2, [r7, #12]
 801d846:	4313      	orrs	r3, r2
 801d848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	4a21      	ldr	r2, [pc, #132]	; (801d8d4 <TIM_Base_SetConfig+0xbc>)
 801d84e:	4293      	cmp	r3, r2
 801d850:	d00b      	beq.n	801d86a <TIM_Base_SetConfig+0x52>
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d858:	d007      	beq.n	801d86a <TIM_Base_SetConfig+0x52>
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	4a1e      	ldr	r2, [pc, #120]	; (801d8d8 <TIM_Base_SetConfig+0xc0>)
 801d85e:	4293      	cmp	r3, r2
 801d860:	d003      	beq.n	801d86a <TIM_Base_SetConfig+0x52>
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	4a1d      	ldr	r2, [pc, #116]	; (801d8dc <TIM_Base_SetConfig+0xc4>)
 801d866:	4293      	cmp	r3, r2
 801d868:	d108      	bne.n	801d87c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d86a:	68fb      	ldr	r3, [r7, #12]
 801d86c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d872:	683b      	ldr	r3, [r7, #0]
 801d874:	68db      	ldr	r3, [r3, #12]
 801d876:	68fa      	ldr	r2, [r7, #12]
 801d878:	4313      	orrs	r3, r2
 801d87a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d882:	683b      	ldr	r3, [r7, #0]
 801d884:	695b      	ldr	r3, [r3, #20]
 801d886:	4313      	orrs	r3, r2
 801d888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d88a:	687b      	ldr	r3, [r7, #4]
 801d88c:	68fa      	ldr	r2, [r7, #12]
 801d88e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d890:	683b      	ldr	r3, [r7, #0]
 801d892:	689a      	ldr	r2, [r3, #8]
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d898:	683b      	ldr	r3, [r7, #0]
 801d89a:	681a      	ldr	r2, [r3, #0]
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	4a0c      	ldr	r2, [pc, #48]	; (801d8d4 <TIM_Base_SetConfig+0xbc>)
 801d8a4:	4293      	cmp	r3, r2
 801d8a6:	d007      	beq.n	801d8b8 <TIM_Base_SetConfig+0xa0>
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	4a0b      	ldr	r2, [pc, #44]	; (801d8d8 <TIM_Base_SetConfig+0xc0>)
 801d8ac:	4293      	cmp	r3, r2
 801d8ae:	d003      	beq.n	801d8b8 <TIM_Base_SetConfig+0xa0>
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	4a0a      	ldr	r2, [pc, #40]	; (801d8dc <TIM_Base_SetConfig+0xc4>)
 801d8b4:	4293      	cmp	r3, r2
 801d8b6:	d103      	bne.n	801d8c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d8b8:	683b      	ldr	r3, [r7, #0]
 801d8ba:	691a      	ldr	r2, [r3, #16]
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	2201      	movs	r2, #1
 801d8c4:	615a      	str	r2, [r3, #20]
}
 801d8c6:	bf00      	nop
 801d8c8:	3714      	adds	r7, #20
 801d8ca:	46bd      	mov	sp, r7
 801d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8d0:	4770      	bx	lr
 801d8d2:	bf00      	nop
 801d8d4:	40012c00 	.word	0x40012c00
 801d8d8:	40014400 	.word	0x40014400
 801d8dc:	40014800 	.word	0x40014800

0801d8e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d8e0:	b480      	push	{r7}
 801d8e2:	b087      	sub	sp, #28
 801d8e4:	af00      	add	r7, sp, #0
 801d8e6:	6078      	str	r0, [r7, #4]
 801d8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	6a1b      	ldr	r3, [r3, #32]
 801d8ee:	f023 0201 	bic.w	r2, r3, #1
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	6a1b      	ldr	r3, [r3, #32]
 801d8fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	685b      	ldr	r3, [r3, #4]
 801d900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	699b      	ldr	r3, [r3, #24]
 801d906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d908:	68fb      	ldr	r3, [r7, #12]
 801d90a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d90e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d914:	68fb      	ldr	r3, [r7, #12]
 801d916:	f023 0303 	bic.w	r3, r3, #3
 801d91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d91c:	683b      	ldr	r3, [r7, #0]
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	68fa      	ldr	r2, [r7, #12]
 801d922:	4313      	orrs	r3, r2
 801d924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d926:	697b      	ldr	r3, [r7, #20]
 801d928:	f023 0302 	bic.w	r3, r3, #2
 801d92c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d92e:	683b      	ldr	r3, [r7, #0]
 801d930:	689b      	ldr	r3, [r3, #8]
 801d932:	697a      	ldr	r2, [r7, #20]
 801d934:	4313      	orrs	r3, r2
 801d936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	4a24      	ldr	r2, [pc, #144]	; (801d9cc <TIM_OC1_SetConfig+0xec>)
 801d93c:	4293      	cmp	r3, r2
 801d93e:	d007      	beq.n	801d950 <TIM_OC1_SetConfig+0x70>
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	4a23      	ldr	r2, [pc, #140]	; (801d9d0 <TIM_OC1_SetConfig+0xf0>)
 801d944:	4293      	cmp	r3, r2
 801d946:	d003      	beq.n	801d950 <TIM_OC1_SetConfig+0x70>
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	4a22      	ldr	r2, [pc, #136]	; (801d9d4 <TIM_OC1_SetConfig+0xf4>)
 801d94c:	4293      	cmp	r3, r2
 801d94e:	d10c      	bne.n	801d96a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d950:	697b      	ldr	r3, [r7, #20]
 801d952:	f023 0308 	bic.w	r3, r3, #8
 801d956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d958:	683b      	ldr	r3, [r7, #0]
 801d95a:	68db      	ldr	r3, [r3, #12]
 801d95c:	697a      	ldr	r2, [r7, #20]
 801d95e:	4313      	orrs	r3, r2
 801d960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d962:	697b      	ldr	r3, [r7, #20]
 801d964:	f023 0304 	bic.w	r3, r3, #4
 801d968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d96a:	687b      	ldr	r3, [r7, #4]
 801d96c:	4a17      	ldr	r2, [pc, #92]	; (801d9cc <TIM_OC1_SetConfig+0xec>)
 801d96e:	4293      	cmp	r3, r2
 801d970:	d007      	beq.n	801d982 <TIM_OC1_SetConfig+0xa2>
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	4a17      	ldr	r2, [pc, #92]	; (801d9d4 <TIM_OC1_SetConfig+0xf4>)
 801d976:	4293      	cmp	r3, r2
 801d978:	d003      	beq.n	801d982 <TIM_OC1_SetConfig+0xa2>
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	4a14      	ldr	r2, [pc, #80]	; (801d9d0 <TIM_OC1_SetConfig+0xf0>)
 801d97e:	4293      	cmp	r3, r2
 801d980:	d111      	bne.n	801d9a6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d982:	693b      	ldr	r3, [r7, #16]
 801d984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d98a:	693b      	ldr	r3, [r7, #16]
 801d98c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d992:	683b      	ldr	r3, [r7, #0]
 801d994:	695b      	ldr	r3, [r3, #20]
 801d996:	693a      	ldr	r2, [r7, #16]
 801d998:	4313      	orrs	r3, r2
 801d99a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d99c:	683b      	ldr	r3, [r7, #0]
 801d99e:	699b      	ldr	r3, [r3, #24]
 801d9a0:	693a      	ldr	r2, [r7, #16]
 801d9a2:	4313      	orrs	r3, r2
 801d9a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	693a      	ldr	r2, [r7, #16]
 801d9aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	68fa      	ldr	r2, [r7, #12]
 801d9b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d9b2:	683b      	ldr	r3, [r7, #0]
 801d9b4:	685a      	ldr	r2, [r3, #4]
 801d9b6:	687b      	ldr	r3, [r7, #4]
 801d9b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	697a      	ldr	r2, [r7, #20]
 801d9be:	621a      	str	r2, [r3, #32]
}
 801d9c0:	bf00      	nop
 801d9c2:	371c      	adds	r7, #28
 801d9c4:	46bd      	mov	sp, r7
 801d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9ca:	4770      	bx	lr
 801d9cc:	40012c00 	.word	0x40012c00
 801d9d0:	40014800 	.word	0x40014800
 801d9d4:	40014400 	.word	0x40014400

0801d9d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d9d8:	b480      	push	{r7}
 801d9da:	b087      	sub	sp, #28
 801d9dc:	af00      	add	r7, sp, #0
 801d9de:	6078      	str	r0, [r7, #4]
 801d9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	6a1b      	ldr	r3, [r3, #32]
 801d9e6:	f023 0210 	bic.w	r2, r3, #16
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	6a1b      	ldr	r3, [r3, #32]
 801d9f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	685b      	ldr	r3, [r3, #4]
 801d9f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	699b      	ldr	r3, [r3, #24]
 801d9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801da00:	68fb      	ldr	r3, [r7, #12]
 801da02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801da06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801da0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801da12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801da14:	683b      	ldr	r3, [r7, #0]
 801da16:	681b      	ldr	r3, [r3, #0]
 801da18:	021b      	lsls	r3, r3, #8
 801da1a:	68fa      	ldr	r2, [r7, #12]
 801da1c:	4313      	orrs	r3, r2
 801da1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801da20:	697b      	ldr	r3, [r7, #20]
 801da22:	f023 0320 	bic.w	r3, r3, #32
 801da26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801da28:	683b      	ldr	r3, [r7, #0]
 801da2a:	689b      	ldr	r3, [r3, #8]
 801da2c:	011b      	lsls	r3, r3, #4
 801da2e:	697a      	ldr	r2, [r7, #20]
 801da30:	4313      	orrs	r3, r2
 801da32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	4a22      	ldr	r2, [pc, #136]	; (801dac0 <TIM_OC2_SetConfig+0xe8>)
 801da38:	4293      	cmp	r3, r2
 801da3a:	d10d      	bne.n	801da58 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801da3c:	697b      	ldr	r3, [r7, #20]
 801da3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801da42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801da44:	683b      	ldr	r3, [r7, #0]
 801da46:	68db      	ldr	r3, [r3, #12]
 801da48:	011b      	lsls	r3, r3, #4
 801da4a:	697a      	ldr	r2, [r7, #20]
 801da4c:	4313      	orrs	r3, r2
 801da4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801da50:	697b      	ldr	r3, [r7, #20]
 801da52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801da56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	4a19      	ldr	r2, [pc, #100]	; (801dac0 <TIM_OC2_SetConfig+0xe8>)
 801da5c:	4293      	cmp	r3, r2
 801da5e:	d007      	beq.n	801da70 <TIM_OC2_SetConfig+0x98>
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	4a18      	ldr	r2, [pc, #96]	; (801dac4 <TIM_OC2_SetConfig+0xec>)
 801da64:	4293      	cmp	r3, r2
 801da66:	d003      	beq.n	801da70 <TIM_OC2_SetConfig+0x98>
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	4a17      	ldr	r2, [pc, #92]	; (801dac8 <TIM_OC2_SetConfig+0xf0>)
 801da6c:	4293      	cmp	r3, r2
 801da6e:	d113      	bne.n	801da98 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801da70:	693b      	ldr	r3, [r7, #16]
 801da72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801da76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801da78:	693b      	ldr	r3, [r7, #16]
 801da7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801da7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801da80:	683b      	ldr	r3, [r7, #0]
 801da82:	695b      	ldr	r3, [r3, #20]
 801da84:	009b      	lsls	r3, r3, #2
 801da86:	693a      	ldr	r2, [r7, #16]
 801da88:	4313      	orrs	r3, r2
 801da8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801da8c:	683b      	ldr	r3, [r7, #0]
 801da8e:	699b      	ldr	r3, [r3, #24]
 801da90:	009b      	lsls	r3, r3, #2
 801da92:	693a      	ldr	r2, [r7, #16]
 801da94:	4313      	orrs	r3, r2
 801da96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	693a      	ldr	r2, [r7, #16]
 801da9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	68fa      	ldr	r2, [r7, #12]
 801daa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801daa4:	683b      	ldr	r3, [r7, #0]
 801daa6:	685a      	ldr	r2, [r3, #4]
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	697a      	ldr	r2, [r7, #20]
 801dab0:	621a      	str	r2, [r3, #32]
}
 801dab2:	bf00      	nop
 801dab4:	371c      	adds	r7, #28
 801dab6:	46bd      	mov	sp, r7
 801dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dabc:	4770      	bx	lr
 801dabe:	bf00      	nop
 801dac0:	40012c00 	.word	0x40012c00
 801dac4:	40014400 	.word	0x40014400
 801dac8:	40014800 	.word	0x40014800

0801dacc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801dacc:	b480      	push	{r7}
 801dace:	b087      	sub	sp, #28
 801dad0:	af00      	add	r7, sp, #0
 801dad2:	6078      	str	r0, [r7, #4]
 801dad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	6a1b      	ldr	r3, [r3, #32]
 801dada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dae2:	687b      	ldr	r3, [r7, #4]
 801dae4:	6a1b      	ldr	r3, [r3, #32]
 801dae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	685b      	ldr	r3, [r3, #4]
 801daec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	69db      	ldr	r3, [r3, #28]
 801daf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801daf4:	68fb      	ldr	r3, [r7, #12]
 801daf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dafa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dafe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801db00:	68fb      	ldr	r3, [r7, #12]
 801db02:	f023 0303 	bic.w	r3, r3, #3
 801db06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801db08:	683b      	ldr	r3, [r7, #0]
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	68fa      	ldr	r2, [r7, #12]
 801db0e:	4313      	orrs	r3, r2
 801db10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801db12:	697b      	ldr	r3, [r7, #20]
 801db14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801db18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801db1a:	683b      	ldr	r3, [r7, #0]
 801db1c:	689b      	ldr	r3, [r3, #8]
 801db1e:	021b      	lsls	r3, r3, #8
 801db20:	697a      	ldr	r2, [r7, #20]
 801db22:	4313      	orrs	r3, r2
 801db24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	4a21      	ldr	r2, [pc, #132]	; (801dbb0 <TIM_OC3_SetConfig+0xe4>)
 801db2a:	4293      	cmp	r3, r2
 801db2c:	d10d      	bne.n	801db4a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801db2e:	697b      	ldr	r3, [r7, #20]
 801db30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801db34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801db36:	683b      	ldr	r3, [r7, #0]
 801db38:	68db      	ldr	r3, [r3, #12]
 801db3a:	021b      	lsls	r3, r3, #8
 801db3c:	697a      	ldr	r2, [r7, #20]
 801db3e:	4313      	orrs	r3, r2
 801db40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801db42:	697b      	ldr	r3, [r7, #20]
 801db44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801db48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	4a18      	ldr	r2, [pc, #96]	; (801dbb0 <TIM_OC3_SetConfig+0xe4>)
 801db4e:	4293      	cmp	r3, r2
 801db50:	d007      	beq.n	801db62 <TIM_OC3_SetConfig+0x96>
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	4a17      	ldr	r2, [pc, #92]	; (801dbb4 <TIM_OC3_SetConfig+0xe8>)
 801db56:	4293      	cmp	r3, r2
 801db58:	d003      	beq.n	801db62 <TIM_OC3_SetConfig+0x96>
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	4a16      	ldr	r2, [pc, #88]	; (801dbb8 <TIM_OC3_SetConfig+0xec>)
 801db5e:	4293      	cmp	r3, r2
 801db60:	d113      	bne.n	801db8a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801db62:	693b      	ldr	r3, [r7, #16]
 801db64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801db68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801db6a:	693b      	ldr	r3, [r7, #16]
 801db6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801db70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801db72:	683b      	ldr	r3, [r7, #0]
 801db74:	695b      	ldr	r3, [r3, #20]
 801db76:	011b      	lsls	r3, r3, #4
 801db78:	693a      	ldr	r2, [r7, #16]
 801db7a:	4313      	orrs	r3, r2
 801db7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801db7e:	683b      	ldr	r3, [r7, #0]
 801db80:	699b      	ldr	r3, [r3, #24]
 801db82:	011b      	lsls	r3, r3, #4
 801db84:	693a      	ldr	r2, [r7, #16]
 801db86:	4313      	orrs	r3, r2
 801db88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	693a      	ldr	r2, [r7, #16]
 801db8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	68fa      	ldr	r2, [r7, #12]
 801db94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801db96:	683b      	ldr	r3, [r7, #0]
 801db98:	685a      	ldr	r2, [r3, #4]
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	697a      	ldr	r2, [r7, #20]
 801dba2:	621a      	str	r2, [r3, #32]
}
 801dba4:	bf00      	nop
 801dba6:	371c      	adds	r7, #28
 801dba8:	46bd      	mov	sp, r7
 801dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbae:	4770      	bx	lr
 801dbb0:	40012c00 	.word	0x40012c00
 801dbb4:	40014400 	.word	0x40014400
 801dbb8:	40014800 	.word	0x40014800

0801dbbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801dbbc:	b480      	push	{r7}
 801dbbe:	b087      	sub	sp, #28
 801dbc0:	af00      	add	r7, sp, #0
 801dbc2:	6078      	str	r0, [r7, #4]
 801dbc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801dbc6:	687b      	ldr	r3, [r7, #4]
 801dbc8:	6a1b      	ldr	r3, [r3, #32]
 801dbca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dbd2:	687b      	ldr	r3, [r7, #4]
 801dbd4:	6a1b      	ldr	r3, [r3, #32]
 801dbd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dbd8:	687b      	ldr	r3, [r7, #4]
 801dbda:	685b      	ldr	r3, [r3, #4]
 801dbdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801dbde:	687b      	ldr	r3, [r7, #4]
 801dbe0:	69db      	ldr	r3, [r3, #28]
 801dbe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801dbe4:	68fb      	ldr	r3, [r7, #12]
 801dbe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801dbea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dbee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801dbf0:	68fb      	ldr	r3, [r7, #12]
 801dbf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801dbf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dbf8:	683b      	ldr	r3, [r7, #0]
 801dbfa:	681b      	ldr	r3, [r3, #0]
 801dbfc:	021b      	lsls	r3, r3, #8
 801dbfe:	68fa      	ldr	r2, [r7, #12]
 801dc00:	4313      	orrs	r3, r2
 801dc02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801dc04:	693b      	ldr	r3, [r7, #16]
 801dc06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dc0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801dc0c:	683b      	ldr	r3, [r7, #0]
 801dc0e:	689b      	ldr	r3, [r3, #8]
 801dc10:	031b      	lsls	r3, r3, #12
 801dc12:	693a      	ldr	r2, [r7, #16]
 801dc14:	4313      	orrs	r3, r2
 801dc16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	4a14      	ldr	r2, [pc, #80]	; (801dc6c <TIM_OC4_SetConfig+0xb0>)
 801dc1c:	4293      	cmp	r3, r2
 801dc1e:	d007      	beq.n	801dc30 <TIM_OC4_SetConfig+0x74>
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	4a13      	ldr	r2, [pc, #76]	; (801dc70 <TIM_OC4_SetConfig+0xb4>)
 801dc24:	4293      	cmp	r3, r2
 801dc26:	d003      	beq.n	801dc30 <TIM_OC4_SetConfig+0x74>
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	4a12      	ldr	r2, [pc, #72]	; (801dc74 <TIM_OC4_SetConfig+0xb8>)
 801dc2c:	4293      	cmp	r3, r2
 801dc2e:	d109      	bne.n	801dc44 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801dc30:	697b      	ldr	r3, [r7, #20]
 801dc32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801dc36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801dc38:	683b      	ldr	r3, [r7, #0]
 801dc3a:	695b      	ldr	r3, [r3, #20]
 801dc3c:	019b      	lsls	r3, r3, #6
 801dc3e:	697a      	ldr	r2, [r7, #20]
 801dc40:	4313      	orrs	r3, r2
 801dc42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	697a      	ldr	r2, [r7, #20]
 801dc48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	68fa      	ldr	r2, [r7, #12]
 801dc4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801dc50:	683b      	ldr	r3, [r7, #0]
 801dc52:	685a      	ldr	r2, [r3, #4]
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	693a      	ldr	r2, [r7, #16]
 801dc5c:	621a      	str	r2, [r3, #32]
}
 801dc5e:	bf00      	nop
 801dc60:	371c      	adds	r7, #28
 801dc62:	46bd      	mov	sp, r7
 801dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc68:	4770      	bx	lr
 801dc6a:	bf00      	nop
 801dc6c:	40012c00 	.word	0x40012c00
 801dc70:	40014400 	.word	0x40014400
 801dc74:	40014800 	.word	0x40014800

0801dc78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801dc78:	b480      	push	{r7}
 801dc7a:	b087      	sub	sp, #28
 801dc7c:	af00      	add	r7, sp, #0
 801dc7e:	6078      	str	r0, [r7, #4]
 801dc80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801dc82:	687b      	ldr	r3, [r7, #4]
 801dc84:	6a1b      	ldr	r3, [r3, #32]
 801dc86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	6a1b      	ldr	r3, [r3, #32]
 801dc92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	685b      	ldr	r3, [r3, #4]
 801dc98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801dc9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801dca0:	68fb      	ldr	r3, [r7, #12]
 801dca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dcaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801dcac:	683b      	ldr	r3, [r7, #0]
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	68fa      	ldr	r2, [r7, #12]
 801dcb2:	4313      	orrs	r3, r2
 801dcb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801dcb6:	693b      	ldr	r3, [r7, #16]
 801dcb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801dcbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801dcbe:	683b      	ldr	r3, [r7, #0]
 801dcc0:	689b      	ldr	r3, [r3, #8]
 801dcc2:	041b      	lsls	r3, r3, #16
 801dcc4:	693a      	ldr	r2, [r7, #16]
 801dcc6:	4313      	orrs	r3, r2
 801dcc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dcca:	687b      	ldr	r3, [r7, #4]
 801dccc:	4a13      	ldr	r2, [pc, #76]	; (801dd1c <TIM_OC5_SetConfig+0xa4>)
 801dcce:	4293      	cmp	r3, r2
 801dcd0:	d007      	beq.n	801dce2 <TIM_OC5_SetConfig+0x6a>
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	4a12      	ldr	r2, [pc, #72]	; (801dd20 <TIM_OC5_SetConfig+0xa8>)
 801dcd6:	4293      	cmp	r3, r2
 801dcd8:	d003      	beq.n	801dce2 <TIM_OC5_SetConfig+0x6a>
 801dcda:	687b      	ldr	r3, [r7, #4]
 801dcdc:	4a11      	ldr	r2, [pc, #68]	; (801dd24 <TIM_OC5_SetConfig+0xac>)
 801dcde:	4293      	cmp	r3, r2
 801dce0:	d109      	bne.n	801dcf6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801dce2:	697b      	ldr	r3, [r7, #20]
 801dce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dce8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801dcea:	683b      	ldr	r3, [r7, #0]
 801dcec:	695b      	ldr	r3, [r3, #20]
 801dcee:	021b      	lsls	r3, r3, #8
 801dcf0:	697a      	ldr	r2, [r7, #20]
 801dcf2:	4313      	orrs	r3, r2
 801dcf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	697a      	ldr	r2, [r7, #20]
 801dcfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	68fa      	ldr	r2, [r7, #12]
 801dd00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801dd02:	683b      	ldr	r3, [r7, #0]
 801dd04:	685a      	ldr	r2, [r3, #4]
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	693a      	ldr	r2, [r7, #16]
 801dd0e:	621a      	str	r2, [r3, #32]
}
 801dd10:	bf00      	nop
 801dd12:	371c      	adds	r7, #28
 801dd14:	46bd      	mov	sp, r7
 801dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd1a:	4770      	bx	lr
 801dd1c:	40012c00 	.word	0x40012c00
 801dd20:	40014400 	.word	0x40014400
 801dd24:	40014800 	.word	0x40014800

0801dd28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801dd28:	b480      	push	{r7}
 801dd2a:	b087      	sub	sp, #28
 801dd2c:	af00      	add	r7, sp, #0
 801dd2e:	6078      	str	r0, [r7, #4]
 801dd30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	6a1b      	ldr	r3, [r3, #32]
 801dd36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	6a1b      	ldr	r3, [r3, #32]
 801dd42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dd44:	687b      	ldr	r3, [r7, #4]
 801dd46:	685b      	ldr	r3, [r3, #4]
 801dd48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801dd4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801dd50:	68fb      	ldr	r3, [r7, #12]
 801dd52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801dd56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dd5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dd5c:	683b      	ldr	r3, [r7, #0]
 801dd5e:	681b      	ldr	r3, [r3, #0]
 801dd60:	021b      	lsls	r3, r3, #8
 801dd62:	68fa      	ldr	r2, [r7, #12]
 801dd64:	4313      	orrs	r3, r2
 801dd66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801dd68:	693b      	ldr	r3, [r7, #16]
 801dd6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801dd6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801dd70:	683b      	ldr	r3, [r7, #0]
 801dd72:	689b      	ldr	r3, [r3, #8]
 801dd74:	051b      	lsls	r3, r3, #20
 801dd76:	693a      	ldr	r2, [r7, #16]
 801dd78:	4313      	orrs	r3, r2
 801dd7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	4a14      	ldr	r2, [pc, #80]	; (801ddd0 <TIM_OC6_SetConfig+0xa8>)
 801dd80:	4293      	cmp	r3, r2
 801dd82:	d007      	beq.n	801dd94 <TIM_OC6_SetConfig+0x6c>
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	4a13      	ldr	r2, [pc, #76]	; (801ddd4 <TIM_OC6_SetConfig+0xac>)
 801dd88:	4293      	cmp	r3, r2
 801dd8a:	d003      	beq.n	801dd94 <TIM_OC6_SetConfig+0x6c>
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	4a12      	ldr	r2, [pc, #72]	; (801ddd8 <TIM_OC6_SetConfig+0xb0>)
 801dd90:	4293      	cmp	r3, r2
 801dd92:	d109      	bne.n	801dda8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801dd94:	697b      	ldr	r3, [r7, #20]
 801dd96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801dd9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801dd9c:	683b      	ldr	r3, [r7, #0]
 801dd9e:	695b      	ldr	r3, [r3, #20]
 801dda0:	029b      	lsls	r3, r3, #10
 801dda2:	697a      	ldr	r2, [r7, #20]
 801dda4:	4313      	orrs	r3, r2
 801dda6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	697a      	ldr	r2, [r7, #20]
 801ddac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	68fa      	ldr	r2, [r7, #12]
 801ddb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801ddb4:	683b      	ldr	r3, [r7, #0]
 801ddb6:	685a      	ldr	r2, [r3, #4]
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ddbc:	687b      	ldr	r3, [r7, #4]
 801ddbe:	693a      	ldr	r2, [r7, #16]
 801ddc0:	621a      	str	r2, [r3, #32]
}
 801ddc2:	bf00      	nop
 801ddc4:	371c      	adds	r7, #28
 801ddc6:	46bd      	mov	sp, r7
 801ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddcc:	4770      	bx	lr
 801ddce:	bf00      	nop
 801ddd0:	40012c00 	.word	0x40012c00
 801ddd4:	40014400 	.word	0x40014400
 801ddd8:	40014800 	.word	0x40014800

0801dddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801dddc:	b480      	push	{r7}
 801ddde:	b087      	sub	sp, #28
 801dde0:	af00      	add	r7, sp, #0
 801dde2:	60f8      	str	r0, [r7, #12]
 801dde4:	60b9      	str	r1, [r7, #8]
 801dde6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801dde8:	68fb      	ldr	r3, [r7, #12]
 801ddea:	6a1b      	ldr	r3, [r3, #32]
 801ddec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ddee:	68fb      	ldr	r3, [r7, #12]
 801ddf0:	6a1b      	ldr	r3, [r3, #32]
 801ddf2:	f023 0201 	bic.w	r2, r3, #1
 801ddf6:	68fb      	ldr	r3, [r7, #12]
 801ddf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ddfa:	68fb      	ldr	r3, [r7, #12]
 801ddfc:	699b      	ldr	r3, [r3, #24]
 801ddfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801de00:	693b      	ldr	r3, [r7, #16]
 801de02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801de06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	011b      	lsls	r3, r3, #4
 801de0c:	693a      	ldr	r2, [r7, #16]
 801de0e:	4313      	orrs	r3, r2
 801de10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801de12:	697b      	ldr	r3, [r7, #20]
 801de14:	f023 030a 	bic.w	r3, r3, #10
 801de18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801de1a:	697a      	ldr	r2, [r7, #20]
 801de1c:	68bb      	ldr	r3, [r7, #8]
 801de1e:	4313      	orrs	r3, r2
 801de20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801de22:	68fb      	ldr	r3, [r7, #12]
 801de24:	693a      	ldr	r2, [r7, #16]
 801de26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801de28:	68fb      	ldr	r3, [r7, #12]
 801de2a:	697a      	ldr	r2, [r7, #20]
 801de2c:	621a      	str	r2, [r3, #32]
}
 801de2e:	bf00      	nop
 801de30:	371c      	adds	r7, #28
 801de32:	46bd      	mov	sp, r7
 801de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de38:	4770      	bx	lr

0801de3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801de3a:	b480      	push	{r7}
 801de3c:	b087      	sub	sp, #28
 801de3e:	af00      	add	r7, sp, #0
 801de40:	60f8      	str	r0, [r7, #12]
 801de42:	60b9      	str	r1, [r7, #8]
 801de44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801de46:	68fb      	ldr	r3, [r7, #12]
 801de48:	6a1b      	ldr	r3, [r3, #32]
 801de4a:	f023 0210 	bic.w	r2, r3, #16
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801de52:	68fb      	ldr	r3, [r7, #12]
 801de54:	699b      	ldr	r3, [r3, #24]
 801de56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801de58:	68fb      	ldr	r3, [r7, #12]
 801de5a:	6a1b      	ldr	r3, [r3, #32]
 801de5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801de5e:	697b      	ldr	r3, [r7, #20]
 801de60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801de64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	031b      	lsls	r3, r3, #12
 801de6a:	697a      	ldr	r2, [r7, #20]
 801de6c:	4313      	orrs	r3, r2
 801de6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801de70:	693b      	ldr	r3, [r7, #16]
 801de72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801de76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801de78:	68bb      	ldr	r3, [r7, #8]
 801de7a:	011b      	lsls	r3, r3, #4
 801de7c:	693a      	ldr	r2, [r7, #16]
 801de7e:	4313      	orrs	r3, r2
 801de80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801de82:	68fb      	ldr	r3, [r7, #12]
 801de84:	697a      	ldr	r2, [r7, #20]
 801de86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801de88:	68fb      	ldr	r3, [r7, #12]
 801de8a:	693a      	ldr	r2, [r7, #16]
 801de8c:	621a      	str	r2, [r3, #32]
}
 801de8e:	bf00      	nop
 801de90:	371c      	adds	r7, #28
 801de92:	46bd      	mov	sp, r7
 801de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de98:	4770      	bx	lr

0801de9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801de9a:	b480      	push	{r7}
 801de9c:	b085      	sub	sp, #20
 801de9e:	af00      	add	r7, sp, #0
 801dea0:	6078      	str	r0, [r7, #4]
 801dea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801dea4:	687b      	ldr	r3, [r7, #4]
 801dea6:	689b      	ldr	r3, [r3, #8]
 801dea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801deaa:	68fb      	ldr	r3, [r7, #12]
 801deac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801deb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801deb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801deb6:	683a      	ldr	r2, [r7, #0]
 801deb8:	68fb      	ldr	r3, [r7, #12]
 801deba:	4313      	orrs	r3, r2
 801debc:	f043 0307 	orr.w	r3, r3, #7
 801dec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	68fa      	ldr	r2, [r7, #12]
 801dec6:	609a      	str	r2, [r3, #8]
}
 801dec8:	bf00      	nop
 801deca:	3714      	adds	r7, #20
 801decc:	46bd      	mov	sp, r7
 801dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ded2:	4770      	bx	lr

0801ded4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801ded4:	b480      	push	{r7}
 801ded6:	b087      	sub	sp, #28
 801ded8:	af00      	add	r7, sp, #0
 801deda:	60f8      	str	r0, [r7, #12]
 801dedc:	60b9      	str	r1, [r7, #8]
 801dede:	607a      	str	r2, [r7, #4]
 801dee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	689b      	ldr	r3, [r3, #8]
 801dee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801dee8:	697b      	ldr	r3, [r7, #20]
 801deea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801deee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801def0:	683b      	ldr	r3, [r7, #0]
 801def2:	021a      	lsls	r2, r3, #8
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	431a      	orrs	r2, r3
 801def8:	68bb      	ldr	r3, [r7, #8]
 801defa:	4313      	orrs	r3, r2
 801defc:	697a      	ldr	r2, [r7, #20]
 801defe:	4313      	orrs	r3, r2
 801df00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	697a      	ldr	r2, [r7, #20]
 801df06:	609a      	str	r2, [r3, #8]
}
 801df08:	bf00      	nop
 801df0a:	371c      	adds	r7, #28
 801df0c:	46bd      	mov	sp, r7
 801df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df12:	4770      	bx	lr

0801df14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801df14:	b480      	push	{r7}
 801df16:	b087      	sub	sp, #28
 801df18:	af00      	add	r7, sp, #0
 801df1a:	60f8      	str	r0, [r7, #12]
 801df1c:	60b9      	str	r1, [r7, #8]
 801df1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801df20:	68bb      	ldr	r3, [r7, #8]
 801df22:	f003 031f 	and.w	r3, r3, #31
 801df26:	2201      	movs	r2, #1
 801df28:	fa02 f303 	lsl.w	r3, r2, r3
 801df2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801df2e:	68fb      	ldr	r3, [r7, #12]
 801df30:	6a1a      	ldr	r2, [r3, #32]
 801df32:	697b      	ldr	r3, [r7, #20]
 801df34:	43db      	mvns	r3, r3
 801df36:	401a      	ands	r2, r3
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801df3c:	68fb      	ldr	r3, [r7, #12]
 801df3e:	6a1a      	ldr	r2, [r3, #32]
 801df40:	68bb      	ldr	r3, [r7, #8]
 801df42:	f003 031f 	and.w	r3, r3, #31
 801df46:	6879      	ldr	r1, [r7, #4]
 801df48:	fa01 f303 	lsl.w	r3, r1, r3
 801df4c:	431a      	orrs	r2, r3
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	621a      	str	r2, [r3, #32]
}
 801df52:	bf00      	nop
 801df54:	371c      	adds	r7, #28
 801df56:	46bd      	mov	sp, r7
 801df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df5c:	4770      	bx	lr
	...

0801df60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801df60:	b480      	push	{r7}
 801df62:	b085      	sub	sp, #20
 801df64:	af00      	add	r7, sp, #0
 801df66:	6078      	str	r0, [r7, #4]
 801df68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801df70:	2b01      	cmp	r3, #1
 801df72:	d101      	bne.n	801df78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801df74:	2302      	movs	r3, #2
 801df76:	e04a      	b.n	801e00e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 801df78:	687b      	ldr	r3, [r7, #4]
 801df7a:	2201      	movs	r2, #1
 801df7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	2202      	movs	r2, #2
 801df84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	681b      	ldr	r3, [r3, #0]
 801df8c:	685b      	ldr	r3, [r3, #4]
 801df8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	681b      	ldr	r3, [r3, #0]
 801df94:	689b      	ldr	r3, [r3, #8]
 801df96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	681b      	ldr	r3, [r3, #0]
 801df9c:	4a1f      	ldr	r2, [pc, #124]	; (801e01c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 801df9e:	4293      	cmp	r3, r2
 801dfa0:	d108      	bne.n	801dfb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801dfa2:	68fb      	ldr	r3, [r7, #12]
 801dfa4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801dfa8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801dfaa:	683b      	ldr	r3, [r7, #0]
 801dfac:	685b      	ldr	r3, [r3, #4]
 801dfae:	68fa      	ldr	r2, [r7, #12]
 801dfb0:	4313      	orrs	r3, r2
 801dfb2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801dfb4:	68fb      	ldr	r3, [r7, #12]
 801dfb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dfba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801dfbc:	683b      	ldr	r3, [r7, #0]
 801dfbe:	681b      	ldr	r3, [r3, #0]
 801dfc0:	68fa      	ldr	r2, [r7, #12]
 801dfc2:	4313      	orrs	r3, r2
 801dfc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801dfc6:	687b      	ldr	r3, [r7, #4]
 801dfc8:	681b      	ldr	r3, [r3, #0]
 801dfca:	68fa      	ldr	r2, [r7, #12]
 801dfcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	4a12      	ldr	r2, [pc, #72]	; (801e01c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 801dfd4:	4293      	cmp	r3, r2
 801dfd6:	d004      	beq.n	801dfe2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801dfe0:	d10c      	bne.n	801dffc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801dfe2:	68bb      	ldr	r3, [r7, #8]
 801dfe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801dfe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801dfea:	683b      	ldr	r3, [r7, #0]
 801dfec:	689b      	ldr	r3, [r3, #8]
 801dfee:	68ba      	ldr	r2, [r7, #8]
 801dff0:	4313      	orrs	r3, r2
 801dff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	681b      	ldr	r3, [r3, #0]
 801dff8:	68ba      	ldr	r2, [r7, #8]
 801dffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	2201      	movs	r2, #1
 801e000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	2200      	movs	r2, #0
 801e008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801e00c:	2300      	movs	r3, #0
}
 801e00e:	4618      	mov	r0, r3
 801e010:	3714      	adds	r7, #20
 801e012:	46bd      	mov	sp, r7
 801e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e018:	4770      	bx	lr
 801e01a:	bf00      	nop
 801e01c:	40012c00 	.word	0x40012c00

0801e020 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801e020:	b480      	push	{r7}
 801e022:	b083      	sub	sp, #12
 801e024:	af00      	add	r7, sp, #0
 801e026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801e028:	bf00      	nop
 801e02a:	370c      	adds	r7, #12
 801e02c:	46bd      	mov	sp, r7
 801e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e032:	4770      	bx	lr

0801e034 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801e034:	b480      	push	{r7}
 801e036:	b083      	sub	sp, #12
 801e038:	af00      	add	r7, sp, #0
 801e03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801e03c:	bf00      	nop
 801e03e:	370c      	adds	r7, #12
 801e040:	46bd      	mov	sp, r7
 801e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e046:	4770      	bx	lr

0801e048 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801e048:	b480      	push	{r7}
 801e04a:	b083      	sub	sp, #12
 801e04c:	af00      	add	r7, sp, #0
 801e04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801e050:	bf00      	nop
 801e052:	370c      	adds	r7, #12
 801e054:	46bd      	mov	sp, r7
 801e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e05a:	4770      	bx	lr

0801e05c <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 801e05c:	b590      	push	{r4, r7, lr}
 801e05e:	b083      	sub	sp, #12
 801e060:	af00      	add	r7, sp, #0
 801e062:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	2b00      	cmp	r3, #0
 801e068:	d101      	bne.n	801e06e <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 801e06a:	2301      	movs	r3, #1
 801e06c:	e072      	b.n	801e154 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e074:	b2db      	uxtb	r3, r3
 801e076:	2b00      	cmp	r3, #0
 801e078:	d106      	bne.n	801e088 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	2200      	movs	r2, #0
 801e07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 801e082:	6878      	ldr	r0, [r7, #4]
 801e084:	f7f8 f840 	bl	8016108 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	2202      	movs	r2, #2
 801e08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	681b      	ldr	r3, [r3, #0]
 801e094:	2201      	movs	r2, #1
 801e096:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	681b      	ldr	r3, [r3, #0]
 801e09c:	6819      	ldr	r1, [r3, #0]
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 801e0a2:	687b      	ldr	r3, [r7, #4]
 801e0a4:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 801e0a6:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	691b      	ldr	r3, [r3, #16]
 801e0ac:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 801e0ae:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 801e0b4:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 801e0b6:	687b      	ldr	r3, [r7, #4]
 801e0b8:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 801e0ba:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 801e0c0:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 801e0c6:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 801e0cc:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	430a      	orrs	r2, r1
 801e0d4:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	7b1b      	ldrb	r3, [r3, #12]
 801e0da:	2b01      	cmp	r3, #1
 801e0dc:	d107      	bne.n	801e0ee <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 801e0de:	687b      	ldr	r3, [r7, #4]
 801e0e0:	681b      	ldr	r3, [r3, #0]
 801e0e2:	681a      	ldr	r2, [r3, #0]
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	681b      	ldr	r3, [r3, #0]
 801e0e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801e0ec:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e0f6:	431a      	orrs	r2, r3
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e0fc:	431a      	orrs	r2, r3
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	43d2      	mvns	r2, r2
 801e104:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	681b      	ldr	r3, [r3, #0]
 801e112:	430a      	orrs	r2, r1
 801e114:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	687a      	ldr	r2, [r7, #4]
 801e11c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801e11e:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	681c      	ldr	r4, [r3, #0]
 801e128:	4610      	mov	r0, r2
 801e12a:	f000 f952 	bl	801e3d2 <TSC_extract_groups>
 801e12e:	4603      	mov	r3, r0
 801e130:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	681b      	ldr	r3, [r3, #0]
 801e136:	685a      	ldr	r2, [r3, #4]
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	f022 0203 	bic.w	r2, r2, #3
 801e140:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	681b      	ldr	r3, [r3, #0]
 801e146:	2203      	movs	r2, #3
 801e148:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 801e14a:	687b      	ldr	r3, [r7, #4]
 801e14c:	2201      	movs	r2, #1
 801e14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 801e152:	2300      	movs	r3, #0
}
 801e154:	4618      	mov	r0, r3
 801e156:	370c      	adds	r7, #12
 801e158:	46bd      	mov	sp, r7
 801e15a:	bd90      	pop	{r4, r7, pc}

0801e15c <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 801e15c:	b480      	push	{r7}
 801e15e:	b083      	sub	sp, #12
 801e160:	af00      	add	r7, sp, #0
 801e162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e16a:	2b01      	cmp	r3, #1
 801e16c:	d101      	bne.n	801e172 <HAL_TSC_Start_IT+0x16>
 801e16e:	2302      	movs	r3, #2
 801e170:	e04b      	b.n	801e20a <HAL_TSC_Start_IT+0xae>
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	2201      	movs	r2, #1
 801e176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	2202      	movs	r2, #2
 801e17e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	685a      	ldr	r2, [r3, #4]
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	681b      	ldr	r3, [r3, #0]
 801e18c:	f042 0201 	orr.w	r2, r2, #1
 801e190:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801e198:	2b01      	cmp	r3, #1
 801e19a:	d108      	bne.n	801e1ae <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	685a      	ldr	r2, [r3, #4]
 801e1a2:	687b      	ldr	r3, [r7, #4]
 801e1a4:	681b      	ldr	r3, [r3, #0]
 801e1a6:	f042 0202 	orr.w	r2, r2, #2
 801e1aa:	605a      	str	r2, [r3, #4]
 801e1ac:	e007      	b.n	801e1be <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 801e1ae:	687b      	ldr	r3, [r7, #4]
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	685a      	ldr	r2, [r3, #4]
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	681b      	ldr	r3, [r3, #0]
 801e1b8:	f022 0202 	bic.w	r2, r2, #2
 801e1bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	681b      	ldr	r3, [r3, #0]
 801e1c2:	2203      	movs	r2, #3
 801e1c4:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 801e1c6:	687b      	ldr	r3, [r7, #4]
 801e1c8:	6a1b      	ldr	r3, [r3, #32]
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d108      	bne.n	801e1e0 <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 801e1ce:	687b      	ldr	r3, [r7, #4]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	681a      	ldr	r2, [r3, #0]
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	681b      	ldr	r3, [r3, #0]
 801e1d8:	f022 0210 	bic.w	r2, r2, #16
 801e1dc:	601a      	str	r2, [r3, #0]
 801e1de:	e007      	b.n	801e1f0 <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	681a      	ldr	r2, [r3, #0]
 801e1e6:	687b      	ldr	r3, [r7, #4]
 801e1e8:	681b      	ldr	r3, [r3, #0]
 801e1ea:	f042 0210 	orr.w	r2, r2, #16
 801e1ee:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	681a      	ldr	r2, [r3, #0]
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	f042 0202 	orr.w	r2, r2, #2
 801e1fe:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	2200      	movs	r2, #0
 801e204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801e208:	2300      	movs	r3, #0
}
 801e20a:	4618      	mov	r0, r3
 801e20c:	370c      	adds	r7, #12
 801e20e:	46bd      	mov	sp, r7
 801e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e214:	4770      	bx	lr

0801e216 <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 801e216:	b480      	push	{r7}
 801e218:	b083      	sub	sp, #12
 801e21a:	af00      	add	r7, sp, #0
 801e21c:	6078      	str	r0, [r7, #4]
 801e21e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	681b      	ldr	r3, [r3, #0]
 801e224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e226:	683b      	ldr	r3, [r7, #0]
 801e228:	f003 030f 	and.w	r3, r3, #15
 801e22c:	3310      	adds	r3, #16
 801e22e:	2101      	movs	r1, #1
 801e230:	fa01 f303 	lsl.w	r3, r1, r3
 801e234:	401a      	ands	r2, r3
 801e236:	683b      	ldr	r3, [r7, #0]
 801e238:	f003 030f 	and.w	r3, r3, #15
 801e23c:	3310      	adds	r3, #16
 801e23e:	2101      	movs	r1, #1
 801e240:	fa01 f303 	lsl.w	r3, r1, r3
 801e244:	429a      	cmp	r2, r3
 801e246:	bf0c      	ite	eq
 801e248:	2301      	moveq	r3, #1
 801e24a:	2300      	movne	r3, #0
 801e24c:	b2db      	uxtb	r3, r3
}
 801e24e:	4618      	mov	r0, r3
 801e250:	370c      	adds	r7, #12
 801e252:	46bd      	mov	sp, r7
 801e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e258:	4770      	bx	lr

0801e25a <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 801e25a:	b480      	push	{r7}
 801e25c:	b083      	sub	sp, #12
 801e25e:	af00      	add	r7, sp, #0
 801e260:	6078      	str	r0, [r7, #4]
 801e262:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	681a      	ldr	r2, [r3, #0]
 801e268:	683b      	ldr	r3, [r7, #0]
 801e26a:	330c      	adds	r3, #12
 801e26c:	009b      	lsls	r3, r3, #2
 801e26e:	4413      	add	r3, r2
 801e270:	685b      	ldr	r3, [r3, #4]
}
 801e272:	4618      	mov	r0, r3
 801e274:	370c      	adds	r7, #12
 801e276:	46bd      	mov	sp, r7
 801e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e27c:	4770      	bx	lr

0801e27e <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 801e27e:	b590      	push	{r4, r7, lr}
 801e280:	b083      	sub	sp, #12
 801e282:	af00      	add	r7, sp, #0
 801e284:	6078      	str	r0, [r7, #4]
 801e286:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e28e:	2b01      	cmp	r3, #1
 801e290:	d101      	bne.n	801e296 <HAL_TSC_IOConfig+0x18>
 801e292:	2302      	movs	r3, #2
 801e294:	e032      	b.n	801e2fc <HAL_TSC_IOConfig+0x7e>
 801e296:	687b      	ldr	r3, [r7, #4]
 801e298:	2201      	movs	r2, #1
 801e29a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 801e29e:	687b      	ldr	r3, [r7, #4]
 801e2a0:	681b      	ldr	r3, [r3, #0]
 801e2a2:	681a      	ldr	r2, [r3, #0]
 801e2a4:	687b      	ldr	r3, [r7, #4]
 801e2a6:	681b      	ldr	r3, [r3, #0]
 801e2a8:	f022 0202 	bic.w	r2, r2, #2
 801e2ac:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 801e2ae:	683b      	ldr	r3, [r7, #0]
 801e2b0:	681a      	ldr	r2, [r3, #0]
 801e2b2:	683b      	ldr	r3, [r7, #0]
 801e2b4:	685b      	ldr	r3, [r3, #4]
 801e2b6:	431a      	orrs	r2, r3
 801e2b8:	683b      	ldr	r3, [r7, #0]
 801e2ba:	689b      	ldr	r3, [r3, #8]
 801e2bc:	431a      	orrs	r2, r3
 801e2be:	687b      	ldr	r3, [r7, #4]
 801e2c0:	681b      	ldr	r3, [r3, #0]
 801e2c2:	43d2      	mvns	r2, r2
 801e2c4:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 801e2c6:	683b      	ldr	r3, [r7, #0]
 801e2c8:	6819      	ldr	r1, [r3, #0]
 801e2ca:	683b      	ldr	r3, [r7, #0]
 801e2cc:	685a      	ldr	r2, [r3, #4]
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	681b      	ldr	r3, [r3, #0]
 801e2d2:	430a      	orrs	r2, r1
 801e2d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	681b      	ldr	r3, [r3, #0]
 801e2da:	683a      	ldr	r2, [r7, #0]
 801e2dc:	6892      	ldr	r2, [r2, #8]
 801e2de:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 801e2e0:	683b      	ldr	r3, [r7, #0]
 801e2e2:	681a      	ldr	r2, [r3, #0]
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	681c      	ldr	r4, [r3, #0]
 801e2e8:	4610      	mov	r0, r2
 801e2ea:	f000 f872 	bl	801e3d2 <TSC_extract_groups>
 801e2ee:	4603      	mov	r3, r0
 801e2f0:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	2200      	movs	r2, #0
 801e2f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801e2fa:	2300      	movs	r3, #0
}
 801e2fc:	4618      	mov	r0, r3
 801e2fe:	370c      	adds	r7, #12
 801e300:	46bd      	mov	sp, r7
 801e302:	bd90      	pop	{r4, r7, pc}

0801e304 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 801e304:	b480      	push	{r7}
 801e306:	b083      	sub	sp, #12
 801e308:	af00      	add	r7, sp, #0
 801e30a:	6078      	str	r0, [r7, #4]
 801e30c:	460b      	mov	r3, r1
 801e30e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e316:	2b01      	cmp	r3, #1
 801e318:	d101      	bne.n	801e31e <HAL_TSC_IODischarge+0x1a>
 801e31a:	2302      	movs	r3, #2
 801e31c:	e01c      	b.n	801e358 <HAL_TSC_IODischarge+0x54>
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	2201      	movs	r2, #1
 801e322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 801e326:	78fb      	ldrb	r3, [r7, #3]
 801e328:	2b01      	cmp	r3, #1
 801e32a:	d108      	bne.n	801e33e <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	681a      	ldr	r2, [r3, #0]
 801e332:	687b      	ldr	r3, [r7, #4]
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	f022 0210 	bic.w	r2, r2, #16
 801e33a:	601a      	str	r2, [r3, #0]
 801e33c:	e007      	b.n	801e34e <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	681b      	ldr	r3, [r3, #0]
 801e342:	681a      	ldr	r2, [r3, #0]
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	f042 0210 	orr.w	r2, r2, #16
 801e34c:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	2200      	movs	r2, #0
 801e352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 801e356:	2300      	movs	r3, #0
}
 801e358:	4618      	mov	r0, r3
 801e35a:	370c      	adds	r7, #12
 801e35c:	46bd      	mov	sp, r7
 801e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e362:	4770      	bx	lr

0801e364 <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 801e364:	b580      	push	{r7, lr}
 801e366:	b082      	sub	sp, #8
 801e368:	af00      	add	r7, sp, #0
 801e36a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	681b      	ldr	r3, [r3, #0]
 801e370:	68db      	ldr	r3, [r3, #12]
 801e372:	f003 0301 	and.w	r3, r3, #1
 801e376:	2b01      	cmp	r3, #1
 801e378:	d103      	bne.n	801e382 <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	681b      	ldr	r3, [r3, #0]
 801e37e:	2201      	movs	r2, #1
 801e380:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	681b      	ldr	r3, [r3, #0]
 801e386:	68db      	ldr	r3, [r3, #12]
 801e388:	f003 0302 	and.w	r3, r3, #2
 801e38c:	2b02      	cmp	r3, #2
 801e38e:	d10b      	bne.n	801e3a8 <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	681b      	ldr	r3, [r3, #0]
 801e394:	2202      	movs	r2, #2
 801e396:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 801e398:	687b      	ldr	r3, [r7, #4]
 801e39a:	2203      	movs	r2, #3
 801e39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 801e3a0:	6878      	ldr	r0, [r7, #4]
 801e3a2:	f000 f80c 	bl	801e3be <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 801e3a6:	e006      	b.n	801e3b6 <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 801e3a8:	687b      	ldr	r3, [r7, #4]
 801e3aa:	2201      	movs	r2, #1
 801e3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 801e3b0:	6878      	ldr	r0, [r7, #4]
 801e3b2:	f7f7 fafd 	bl	80159b0 <HAL_TSC_ConvCpltCallback>
}
 801e3b6:	bf00      	nop
 801e3b8:	3708      	adds	r7, #8
 801e3ba:	46bd      	mov	sp, r7
 801e3bc:	bd80      	pop	{r7, pc}

0801e3be <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 801e3be:	b480      	push	{r7}
 801e3c0:	b083      	sub	sp, #12
 801e3c2:	af00      	add	r7, sp, #0
 801e3c4:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 801e3c6:	bf00      	nop
 801e3c8:	370c      	adds	r7, #12
 801e3ca:	46bd      	mov	sp, r7
 801e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3d0:	4770      	bx	lr

0801e3d2 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 801e3d2:	b480      	push	{r7}
 801e3d4:	b085      	sub	sp, #20
 801e3d6:	af00      	add	r7, sp, #0
 801e3d8:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 801e3da:	2300      	movs	r3, #0
 801e3dc:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 801e3de:	2300      	movs	r3, #0
 801e3e0:	60bb      	str	r3, [r7, #8]
 801e3e2:	e011      	b.n	801e408 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 801e3e4:	68bb      	ldr	r3, [r7, #8]
 801e3e6:	009b      	lsls	r3, r3, #2
 801e3e8:	220f      	movs	r2, #15
 801e3ea:	409a      	lsls	r2, r3
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	4013      	ands	r3, r2
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d006      	beq.n	801e402 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 801e3f4:	2201      	movs	r2, #1
 801e3f6:	68bb      	ldr	r3, [r7, #8]
 801e3f8:	fa02 f303 	lsl.w	r3, r2, r3
 801e3fc:	68fa      	ldr	r2, [r7, #12]
 801e3fe:	4313      	orrs	r3, r2
 801e400:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 801e402:	68bb      	ldr	r3, [r7, #8]
 801e404:	3301      	adds	r3, #1
 801e406:	60bb      	str	r3, [r7, #8]
 801e408:	68bb      	ldr	r3, [r7, #8]
 801e40a:	2b06      	cmp	r3, #6
 801e40c:	d9ea      	bls.n	801e3e4 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 801e40e:	68fb      	ldr	r3, [r7, #12]
}
 801e410:	4618      	mov	r0, r3
 801e412:	3714      	adds	r7, #20
 801e414:	46bd      	mov	sp, r7
 801e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e41a:	4770      	bx	lr

0801e41c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801e41c:	b480      	push	{r7}
 801e41e:	b085      	sub	sp, #20
 801e420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e422:	f3ef 8305 	mrs	r3, IPSR
 801e426:	60bb      	str	r3, [r7, #8]
  return(result);
 801e428:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	d10f      	bne.n	801e44e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e42e:	f3ef 8310 	mrs	r3, PRIMASK
 801e432:	607b      	str	r3, [r7, #4]
  return(result);
 801e434:	687b      	ldr	r3, [r7, #4]
 801e436:	2b00      	cmp	r3, #0
 801e438:	d109      	bne.n	801e44e <osKernelInitialize+0x32>
 801e43a:	4b11      	ldr	r3, [pc, #68]	; (801e480 <osKernelInitialize+0x64>)
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	2b02      	cmp	r3, #2
 801e440:	d109      	bne.n	801e456 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e442:	f3ef 8311 	mrs	r3, BASEPRI
 801e446:	603b      	str	r3, [r7, #0]
  return(result);
 801e448:	683b      	ldr	r3, [r7, #0]
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	d003      	beq.n	801e456 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801e44e:	f06f 0305 	mvn.w	r3, #5
 801e452:	60fb      	str	r3, [r7, #12]
 801e454:	e00c      	b.n	801e470 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801e456:	4b0a      	ldr	r3, [pc, #40]	; (801e480 <osKernelInitialize+0x64>)
 801e458:	681b      	ldr	r3, [r3, #0]
 801e45a:	2b00      	cmp	r3, #0
 801e45c:	d105      	bne.n	801e46a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 801e45e:	4b08      	ldr	r3, [pc, #32]	; (801e480 <osKernelInitialize+0x64>)
 801e460:	2201      	movs	r2, #1
 801e462:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801e464:	2300      	movs	r3, #0
 801e466:	60fb      	str	r3, [r7, #12]
 801e468:	e002      	b.n	801e470 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801e46a:	f04f 33ff 	mov.w	r3, #4294967295
 801e46e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801e470:	68fb      	ldr	r3, [r7, #12]
}
 801e472:	4618      	mov	r0, r3
 801e474:	3714      	adds	r7, #20
 801e476:	46bd      	mov	sp, r7
 801e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e47c:	4770      	bx	lr
 801e47e:	bf00      	nop
 801e480:	20000b74 	.word	0x20000b74

0801e484 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801e484:	b580      	push	{r7, lr}
 801e486:	b084      	sub	sp, #16
 801e488:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e48a:	f3ef 8305 	mrs	r3, IPSR
 801e48e:	60bb      	str	r3, [r7, #8]
  return(result);
 801e490:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e492:	2b00      	cmp	r3, #0
 801e494:	d10f      	bne.n	801e4b6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e496:	f3ef 8310 	mrs	r3, PRIMASK
 801e49a:	607b      	str	r3, [r7, #4]
  return(result);
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	d109      	bne.n	801e4b6 <osKernelStart+0x32>
 801e4a2:	4b11      	ldr	r3, [pc, #68]	; (801e4e8 <osKernelStart+0x64>)
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	2b02      	cmp	r3, #2
 801e4a8:	d109      	bne.n	801e4be <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e4aa:	f3ef 8311 	mrs	r3, BASEPRI
 801e4ae:	603b      	str	r3, [r7, #0]
  return(result);
 801e4b0:	683b      	ldr	r3, [r7, #0]
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d003      	beq.n	801e4be <osKernelStart+0x3a>
    stat = osErrorISR;
 801e4b6:	f06f 0305 	mvn.w	r3, #5
 801e4ba:	60fb      	str	r3, [r7, #12]
 801e4bc:	e00e      	b.n	801e4dc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 801e4be:	4b0a      	ldr	r3, [pc, #40]	; (801e4e8 <osKernelStart+0x64>)
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	2b01      	cmp	r3, #1
 801e4c4:	d107      	bne.n	801e4d6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 801e4c6:	4b08      	ldr	r3, [pc, #32]	; (801e4e8 <osKernelStart+0x64>)
 801e4c8:	2202      	movs	r2, #2
 801e4ca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 801e4cc:	f002 fee2 	bl	8021294 <vTaskStartScheduler>
      stat = osOK;
 801e4d0:	2300      	movs	r3, #0
 801e4d2:	60fb      	str	r3, [r7, #12]
 801e4d4:	e002      	b.n	801e4dc <osKernelStart+0x58>
    } else {
      stat = osError;
 801e4d6:	f04f 33ff 	mov.w	r3, #4294967295
 801e4da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801e4dc:	68fb      	ldr	r3, [r7, #12]
}
 801e4de:	4618      	mov	r0, r3
 801e4e0:	3710      	adds	r7, #16
 801e4e2:	46bd      	mov	sp, r7
 801e4e4:	bd80      	pop	{r7, pc}
 801e4e6:	bf00      	nop
 801e4e8:	20000b74 	.word	0x20000b74

0801e4ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801e4ec:	b580      	push	{r7, lr}
 801e4ee:	b092      	sub	sp, #72	; 0x48
 801e4f0:	af04      	add	r7, sp, #16
 801e4f2:	60f8      	str	r0, [r7, #12]
 801e4f4:	60b9      	str	r1, [r7, #8]
 801e4f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801e4f8:	2300      	movs	r3, #0
 801e4fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e4fc:	f3ef 8305 	mrs	r3, IPSR
 801e500:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 801e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 801e504:	2b00      	cmp	r3, #0
 801e506:	f040 8095 	bne.w	801e634 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e50a:	f3ef 8310 	mrs	r3, PRIMASK
 801e50e:	623b      	str	r3, [r7, #32]
  return(result);
 801e510:	6a3b      	ldr	r3, [r7, #32]
 801e512:	2b00      	cmp	r3, #0
 801e514:	f040 808e 	bne.w	801e634 <osThreadNew+0x148>
 801e518:	4b49      	ldr	r3, [pc, #292]	; (801e640 <osThreadNew+0x154>)
 801e51a:	681b      	ldr	r3, [r3, #0]
 801e51c:	2b02      	cmp	r3, #2
 801e51e:	d106      	bne.n	801e52e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e520:	f3ef 8311 	mrs	r3, BASEPRI
 801e524:	61fb      	str	r3, [r7, #28]
  return(result);
 801e526:	69fb      	ldr	r3, [r7, #28]
 801e528:	2b00      	cmp	r3, #0
 801e52a:	f040 8083 	bne.w	801e634 <osThreadNew+0x148>
 801e52e:	68fb      	ldr	r3, [r7, #12]
 801e530:	2b00      	cmp	r3, #0
 801e532:	d07f      	beq.n	801e634 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 801e534:	f44f 7300 	mov.w	r3, #512	; 0x200
 801e538:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 801e53a:	2318      	movs	r3, #24
 801e53c:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 801e53e:	2300      	movs	r3, #0
 801e540:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 801e542:	f107 031b 	add.w	r3, r7, #27
 801e546:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 801e548:	f04f 33ff 	mov.w	r3, #4294967295
 801e54c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	2b00      	cmp	r3, #0
 801e552:	d045      	beq.n	801e5e0 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 801e554:	687b      	ldr	r3, [r7, #4]
 801e556:	681b      	ldr	r3, [r3, #0]
 801e558:	2b00      	cmp	r3, #0
 801e55a:	d002      	beq.n	801e562 <osThreadNew+0x76>
        name = attr->name;
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	681b      	ldr	r3, [r3, #0]
 801e560:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	699b      	ldr	r3, [r3, #24]
 801e566:	2b00      	cmp	r3, #0
 801e568:	d002      	beq.n	801e570 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	699b      	ldr	r3, [r3, #24]
 801e56e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e572:	2b00      	cmp	r3, #0
 801e574:	d008      	beq.n	801e588 <osThreadNew+0x9c>
 801e576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e578:	2b38      	cmp	r3, #56	; 0x38
 801e57a:	d805      	bhi.n	801e588 <osThreadNew+0x9c>
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	685b      	ldr	r3, [r3, #4]
 801e580:	f003 0301 	and.w	r3, r3, #1
 801e584:	2b00      	cmp	r3, #0
 801e586:	d001      	beq.n	801e58c <osThreadNew+0xa0>
        return (NULL);
 801e588:	2300      	movs	r3, #0
 801e58a:	e054      	b.n	801e636 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	695b      	ldr	r3, [r3, #20]
 801e590:	2b00      	cmp	r3, #0
 801e592:	d003      	beq.n	801e59c <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	695b      	ldr	r3, [r3, #20]
 801e598:	089b      	lsrs	r3, r3, #2
 801e59a:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801e59c:	687b      	ldr	r3, [r7, #4]
 801e59e:	689b      	ldr	r3, [r3, #8]
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	d00e      	beq.n	801e5c2 <osThreadNew+0xd6>
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	68db      	ldr	r3, [r3, #12]
 801e5a8:	2b63      	cmp	r3, #99	; 0x63
 801e5aa:	d90a      	bls.n	801e5c2 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801e5b0:	2b00      	cmp	r3, #0
 801e5b2:	d006      	beq.n	801e5c2 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801e5b4:	687b      	ldr	r3, [r7, #4]
 801e5b6:	695b      	ldr	r3, [r3, #20]
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	d002      	beq.n	801e5c2 <osThreadNew+0xd6>
        mem = 1;
 801e5bc:	2301      	movs	r3, #1
 801e5be:	62bb      	str	r3, [r7, #40]	; 0x28
 801e5c0:	e010      	b.n	801e5e4 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801e5c2:	687b      	ldr	r3, [r7, #4]
 801e5c4:	689b      	ldr	r3, [r3, #8]
 801e5c6:	2b00      	cmp	r3, #0
 801e5c8:	d10c      	bne.n	801e5e4 <osThreadNew+0xf8>
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	68db      	ldr	r3, [r3, #12]
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d108      	bne.n	801e5e4 <osThreadNew+0xf8>
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	691b      	ldr	r3, [r3, #16]
 801e5d6:	2b00      	cmp	r3, #0
 801e5d8:	d104      	bne.n	801e5e4 <osThreadNew+0xf8>
          mem = 0;
 801e5da:	2300      	movs	r3, #0
 801e5dc:	62bb      	str	r3, [r7, #40]	; 0x28
 801e5de:	e001      	b.n	801e5e4 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 801e5e0:	2300      	movs	r3, #0
 801e5e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 801e5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5e6:	2b01      	cmp	r3, #1
 801e5e8:	d110      	bne.n	801e60c <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801e5ee:	687a      	ldr	r2, [r7, #4]
 801e5f0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801e5f2:	9202      	str	r2, [sp, #8]
 801e5f4:	9301      	str	r3, [sp, #4]
 801e5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5f8:	9300      	str	r3, [sp, #0]
 801e5fa:	68bb      	ldr	r3, [r7, #8]
 801e5fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e5fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e600:	68f8      	ldr	r0, [r7, #12]
 801e602:	f002 fc79 	bl	8020ef8 <xTaskCreateStatic>
 801e606:	4603      	mov	r3, r0
 801e608:	617b      	str	r3, [r7, #20]
 801e60a:	e013      	b.n	801e634 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 801e60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d110      	bne.n	801e634 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801e612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e614:	b29a      	uxth	r2, r3
 801e616:	f107 0314 	add.w	r3, r7, #20
 801e61a:	9301      	str	r3, [sp, #4]
 801e61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e61e:	9300      	str	r3, [sp, #0]
 801e620:	68bb      	ldr	r3, [r7, #8]
 801e622:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e624:	68f8      	ldr	r0, [r7, #12]
 801e626:	f002 fcc0 	bl	8020faa <xTaskCreate>
 801e62a:	4603      	mov	r3, r0
 801e62c:	2b01      	cmp	r3, #1
 801e62e:	d001      	beq.n	801e634 <osThreadNew+0x148>
          hTask = NULL;
 801e630:	2300      	movs	r3, #0
 801e632:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801e634:	697b      	ldr	r3, [r7, #20]
}
 801e636:	4618      	mov	r0, r3
 801e638:	3738      	adds	r7, #56	; 0x38
 801e63a:	46bd      	mov	sp, r7
 801e63c:	bd80      	pop	{r7, pc}
 801e63e:	bf00      	nop
 801e640:	20000b74 	.word	0x20000b74

0801e644 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 801e644:	b580      	push	{r7, lr}
 801e646:	b08a      	sub	sp, #40	; 0x28
 801e648:	af02      	add	r7, sp, #8
 801e64a:	6078      	str	r0, [r7, #4]
 801e64c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801e64e:	687b      	ldr	r3, [r7, #4]
 801e650:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 801e652:	69fb      	ldr	r3, [r7, #28]
 801e654:	2b00      	cmp	r3, #0
 801e656:	d002      	beq.n	801e65e <osThreadFlagsSet+0x1a>
 801e658:	683b      	ldr	r3, [r7, #0]
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	da03      	bge.n	801e666 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 801e65e:	f06f 0303 	mvn.w	r3, #3
 801e662:	60fb      	str	r3, [r7, #12]
 801e664:	e046      	b.n	801e6f4 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 801e666:	f04f 33ff 	mov.w	r3, #4294967295
 801e66a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e66c:	f3ef 8305 	mrs	r3, IPSR
 801e670:	61bb      	str	r3, [r7, #24]
  return(result);
 801e672:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 801e674:	2b00      	cmp	r3, #0
 801e676:	d10f      	bne.n	801e698 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e678:	f3ef 8310 	mrs	r3, PRIMASK
 801e67c:	617b      	str	r3, [r7, #20]
  return(result);
 801e67e:	697b      	ldr	r3, [r7, #20]
 801e680:	2b00      	cmp	r3, #0
 801e682:	d109      	bne.n	801e698 <osThreadFlagsSet+0x54>
 801e684:	4b1e      	ldr	r3, [pc, #120]	; (801e700 <osThreadFlagsSet+0xbc>)
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	2b02      	cmp	r3, #2
 801e68a:	d126      	bne.n	801e6da <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e68c:	f3ef 8311 	mrs	r3, BASEPRI
 801e690:	613b      	str	r3, [r7, #16]
  return(result);
 801e692:	693b      	ldr	r3, [r7, #16]
 801e694:	2b00      	cmp	r3, #0
 801e696:	d020      	beq.n	801e6da <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 801e698:	2300      	movs	r3, #0
 801e69a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 801e69c:	f107 0308 	add.w	r3, r7, #8
 801e6a0:	9300      	str	r3, [sp, #0]
 801e6a2:	2300      	movs	r3, #0
 801e6a4:	2201      	movs	r2, #1
 801e6a6:	6839      	ldr	r1, [r7, #0]
 801e6a8:	69f8      	ldr	r0, [r7, #28]
 801e6aa:	f003 fdbd 	bl	8022228 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 801e6ae:	f107 020c 	add.w	r2, r7, #12
 801e6b2:	2300      	movs	r3, #0
 801e6b4:	9300      	str	r3, [sp, #0]
 801e6b6:	4613      	mov	r3, r2
 801e6b8:	2200      	movs	r2, #0
 801e6ba:	2100      	movs	r1, #0
 801e6bc:	69f8      	ldr	r0, [r7, #28]
 801e6be:	f003 fdb3 	bl	8022228 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 801e6c2:	68bb      	ldr	r3, [r7, #8]
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	d015      	beq.n	801e6f4 <osThreadFlagsSet+0xb0>
 801e6c8:	4b0e      	ldr	r3, [pc, #56]	; (801e704 <osThreadFlagsSet+0xc0>)
 801e6ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e6ce:	601a      	str	r2, [r3, #0]
 801e6d0:	f3bf 8f4f 	dsb	sy
 801e6d4:	f3bf 8f6f 	isb	sy
 801e6d8:	e00c      	b.n	801e6f4 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 801e6da:	2300      	movs	r3, #0
 801e6dc:	2201      	movs	r2, #1
 801e6de:	6839      	ldr	r1, [r7, #0]
 801e6e0:	69f8      	ldr	r0, [r7, #28]
 801e6e2:	f003 fcfd 	bl	80220e0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 801e6e6:	f107 030c 	add.w	r3, r7, #12
 801e6ea:	2200      	movs	r2, #0
 801e6ec:	2100      	movs	r1, #0
 801e6ee:	69f8      	ldr	r0, [r7, #28]
 801e6f0:	f003 fcf6 	bl	80220e0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 801e6f4:	68fb      	ldr	r3, [r7, #12]
}
 801e6f6:	4618      	mov	r0, r3
 801e6f8:	3720      	adds	r7, #32
 801e6fa:	46bd      	mov	sp, r7
 801e6fc:	bd80      	pop	{r7, pc}
 801e6fe:	bf00      	nop
 801e700:	20000b74 	.word	0x20000b74
 801e704:	e000ed04 	.word	0xe000ed04

0801e708 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 801e708:	b580      	push	{r7, lr}
 801e70a:	b088      	sub	sp, #32
 801e70c:	af00      	add	r7, sp, #0
 801e70e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e710:	f3ef 8305 	mrs	r3, IPSR
 801e714:	617b      	str	r3, [r7, #20]
  return(result);
 801e716:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 801e718:	2b00      	cmp	r3, #0
 801e71a:	d10f      	bne.n	801e73c <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e71c:	f3ef 8310 	mrs	r3, PRIMASK
 801e720:	613b      	str	r3, [r7, #16]
  return(result);
 801e722:	693b      	ldr	r3, [r7, #16]
 801e724:	2b00      	cmp	r3, #0
 801e726:	d109      	bne.n	801e73c <osThreadFlagsClear+0x34>
 801e728:	4b1e      	ldr	r3, [pc, #120]	; (801e7a4 <osThreadFlagsClear+0x9c>)
 801e72a:	681b      	ldr	r3, [r3, #0]
 801e72c:	2b02      	cmp	r3, #2
 801e72e:	d109      	bne.n	801e744 <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e730:	f3ef 8311 	mrs	r3, BASEPRI
 801e734:	60fb      	str	r3, [r7, #12]
  return(result);
 801e736:	68fb      	ldr	r3, [r7, #12]
 801e738:	2b00      	cmp	r3, #0
 801e73a:	d003      	beq.n	801e744 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 801e73c:	f06f 0305 	mvn.w	r3, #5
 801e740:	61fb      	str	r3, [r7, #28]
 801e742:	e02a      	b.n	801e79a <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	2b00      	cmp	r3, #0
 801e748:	da03      	bge.n	801e752 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 801e74a:	f06f 0303 	mvn.w	r3, #3
 801e74e:	61fb      	str	r3, [r7, #28]
 801e750:	e023      	b.n	801e79a <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 801e752:	f003 facb 	bl	8021cec <xTaskGetCurrentTaskHandle>
 801e756:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 801e758:	f107 0308 	add.w	r3, r7, #8
 801e75c:	2200      	movs	r2, #0
 801e75e:	2100      	movs	r1, #0
 801e760:	69b8      	ldr	r0, [r7, #24]
 801e762:	f003 fcbd 	bl	80220e0 <xTaskGenericNotify>
 801e766:	4603      	mov	r3, r0
 801e768:	2b01      	cmp	r3, #1
 801e76a:	d113      	bne.n	801e794 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 801e76c:	68bb      	ldr	r3, [r7, #8]
 801e76e:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	43da      	mvns	r2, r3
 801e774:	68bb      	ldr	r3, [r7, #8]
 801e776:	4013      	ands	r3, r2
 801e778:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 801e77a:	68b9      	ldr	r1, [r7, #8]
 801e77c:	2300      	movs	r3, #0
 801e77e:	2203      	movs	r2, #3
 801e780:	69b8      	ldr	r0, [r7, #24]
 801e782:	f003 fcad 	bl	80220e0 <xTaskGenericNotify>
 801e786:	4603      	mov	r3, r0
 801e788:	2b01      	cmp	r3, #1
 801e78a:	d006      	beq.n	801e79a <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 801e78c:	f04f 33ff 	mov.w	r3, #4294967295
 801e790:	61fb      	str	r3, [r7, #28]
 801e792:	e002      	b.n	801e79a <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 801e794:	f04f 33ff 	mov.w	r3, #4294967295
 801e798:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 801e79a:	69fb      	ldr	r3, [r7, #28]
}
 801e79c:	4618      	mov	r0, r3
 801e79e:	3720      	adds	r7, #32
 801e7a0:	46bd      	mov	sp, r7
 801e7a2:	bd80      	pop	{r7, pc}
 801e7a4:	20000b74 	.word	0x20000b74

0801e7a8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 801e7a8:	b580      	push	{r7, lr}
 801e7aa:	b08e      	sub	sp, #56	; 0x38
 801e7ac:	af00      	add	r7, sp, #0
 801e7ae:	60f8      	str	r0, [r7, #12]
 801e7b0:	60b9      	str	r1, [r7, #8]
 801e7b2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e7b4:	f3ef 8305 	mrs	r3, IPSR
 801e7b8:	61fb      	str	r3, [r7, #28]
  return(result);
 801e7ba:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d10f      	bne.n	801e7e0 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7c0:	f3ef 8310 	mrs	r3, PRIMASK
 801e7c4:	61bb      	str	r3, [r7, #24]
  return(result);
 801e7c6:	69bb      	ldr	r3, [r7, #24]
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	d109      	bne.n	801e7e0 <osThreadFlagsWait+0x38>
 801e7cc:	4b3f      	ldr	r3, [pc, #252]	; (801e8cc <osThreadFlagsWait+0x124>)
 801e7ce:	681b      	ldr	r3, [r3, #0]
 801e7d0:	2b02      	cmp	r3, #2
 801e7d2:	d109      	bne.n	801e7e8 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e7d4:	f3ef 8311 	mrs	r3, BASEPRI
 801e7d8:	617b      	str	r3, [r7, #20]
  return(result);
 801e7da:	697b      	ldr	r3, [r7, #20]
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d003      	beq.n	801e7e8 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 801e7e0:	f06f 0305 	mvn.w	r3, #5
 801e7e4:	637b      	str	r3, [r7, #52]	; 0x34
 801e7e6:	e06b      	b.n	801e8c0 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 801e7e8:	68fb      	ldr	r3, [r7, #12]
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	da03      	bge.n	801e7f6 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 801e7ee:	f06f 0303 	mvn.w	r3, #3
 801e7f2:	637b      	str	r3, [r7, #52]	; 0x34
 801e7f4:	e064      	b.n	801e8c0 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 801e7f6:	68bb      	ldr	r3, [r7, #8]
 801e7f8:	f003 0302 	and.w	r3, r3, #2
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	d002      	beq.n	801e806 <osThreadFlagsWait+0x5e>
      clear = 0U;
 801e800:	2300      	movs	r3, #0
 801e802:	633b      	str	r3, [r7, #48]	; 0x30
 801e804:	e001      	b.n	801e80a <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 801e806:	68fb      	ldr	r3, [r7, #12]
 801e808:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 801e80a:	2300      	movs	r3, #0
 801e80c:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 801e812:	f002 fe87 	bl	8021524 <xTaskGetTickCount>
 801e816:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 801e818:	f107 0210 	add.w	r2, r7, #16
 801e81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e81e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e820:	2000      	movs	r0, #0
 801e822:	f003 fc03 	bl	802202c <xTaskNotifyWait>
 801e826:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 801e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e82a:	2b01      	cmp	r3, #1
 801e82c:	d137      	bne.n	801e89e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 801e82e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	4013      	ands	r3, r2
 801e834:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 801e836:	693b      	ldr	r3, [r7, #16]
 801e838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e83a:	4313      	orrs	r3, r2
 801e83c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 801e83e:	68bb      	ldr	r3, [r7, #8]
 801e840:	f003 0301 	and.w	r3, r3, #1
 801e844:	2b00      	cmp	r3, #0
 801e846:	d00c      	beq.n	801e862 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 801e848:	68fa      	ldr	r2, [r7, #12]
 801e84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e84c:	4013      	ands	r3, r2
 801e84e:	68fa      	ldr	r2, [r7, #12]
 801e850:	429a      	cmp	r2, r3
 801e852:	d032      	beq.n	801e8ba <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 801e854:	687b      	ldr	r3, [r7, #4]
 801e856:	2b00      	cmp	r3, #0
 801e858:	d10f      	bne.n	801e87a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 801e85a:	f06f 0302 	mvn.w	r3, #2
 801e85e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 801e860:	e02e      	b.n	801e8c0 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 801e862:	68fa      	ldr	r2, [r7, #12]
 801e864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e866:	4013      	ands	r3, r2
 801e868:	2b00      	cmp	r3, #0
 801e86a:	d128      	bne.n	801e8be <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	2b00      	cmp	r3, #0
 801e870:	d103      	bne.n	801e87a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 801e872:	f06f 0302 	mvn.w	r3, #2
 801e876:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 801e878:	e022      	b.n	801e8c0 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 801e87a:	f002 fe53 	bl	8021524 <xTaskGetTickCount>
 801e87e:	4602      	mov	r2, r0
 801e880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e882:	1ad3      	subs	r3, r2, r3
 801e884:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 801e886:	6a3a      	ldr	r2, [r7, #32]
 801e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e88a:	429a      	cmp	r2, r3
 801e88c:	d902      	bls.n	801e894 <osThreadFlagsWait+0xec>
          tout  = 0;
 801e88e:	2300      	movs	r3, #0
 801e890:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e892:	e00e      	b.n	801e8b2 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 801e894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e896:	6a3b      	ldr	r3, [r7, #32]
 801e898:	1ad3      	subs	r3, r2, r3
 801e89a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e89c:	e009      	b.n	801e8b2 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 801e89e:	687b      	ldr	r3, [r7, #4]
 801e8a0:	2b00      	cmp	r3, #0
 801e8a2:	d103      	bne.n	801e8ac <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 801e8a4:	f06f 0302 	mvn.w	r3, #2
 801e8a8:	637b      	str	r3, [r7, #52]	; 0x34
 801e8aa:	e002      	b.n	801e8b2 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 801e8ac:	f06f 0301 	mvn.w	r3, #1
 801e8b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 801e8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	d1af      	bne.n	801e818 <osThreadFlagsWait+0x70>
 801e8b8:	e002      	b.n	801e8c0 <osThreadFlagsWait+0x118>
            break;
 801e8ba:	bf00      	nop
 801e8bc:	e000      	b.n	801e8c0 <osThreadFlagsWait+0x118>
            break;
 801e8be:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 801e8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801e8c2:	4618      	mov	r0, r3
 801e8c4:	3738      	adds	r7, #56	; 0x38
 801e8c6:	46bd      	mov	sp, r7
 801e8c8:	bd80      	pop	{r7, pc}
 801e8ca:	bf00      	nop
 801e8cc:	20000b74 	.word	0x20000b74

0801e8d0 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 801e8d0:	b580      	push	{r7, lr}
 801e8d2:	b086      	sub	sp, #24
 801e8d4:	af00      	add	r7, sp, #0
 801e8d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e8d8:	f3ef 8305 	mrs	r3, IPSR
 801e8dc:	613b      	str	r3, [r7, #16]
  return(result);
 801e8de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d10f      	bne.n	801e904 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8e4:	f3ef 8310 	mrs	r3, PRIMASK
 801e8e8:	60fb      	str	r3, [r7, #12]
  return(result);
 801e8ea:	68fb      	ldr	r3, [r7, #12]
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	d109      	bne.n	801e904 <osDelay+0x34>
 801e8f0:	4b0d      	ldr	r3, [pc, #52]	; (801e928 <osDelay+0x58>)
 801e8f2:	681b      	ldr	r3, [r3, #0]
 801e8f4:	2b02      	cmp	r3, #2
 801e8f6:	d109      	bne.n	801e90c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e8f8:	f3ef 8311 	mrs	r3, BASEPRI
 801e8fc:	60bb      	str	r3, [r7, #8]
  return(result);
 801e8fe:	68bb      	ldr	r3, [r7, #8]
 801e900:	2b00      	cmp	r3, #0
 801e902:	d003      	beq.n	801e90c <osDelay+0x3c>
    stat = osErrorISR;
 801e904:	f06f 0305 	mvn.w	r3, #5
 801e908:	617b      	str	r3, [r7, #20]
 801e90a:	e007      	b.n	801e91c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801e90c:	2300      	movs	r3, #0
 801e90e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	2b00      	cmp	r3, #0
 801e914:	d002      	beq.n	801e91c <osDelay+0x4c>
      vTaskDelay(ticks);
 801e916:	6878      	ldr	r0, [r7, #4]
 801e918:	f002 fc88 	bl	802122c <vTaskDelay>
    }
  }

  return (stat);
 801e91c:	697b      	ldr	r3, [r7, #20]
}
 801e91e:	4618      	mov	r0, r3
 801e920:	3718      	adds	r7, #24
 801e922:	46bd      	mov	sp, r7
 801e924:	bd80      	pop	{r7, pc}
 801e926:	bf00      	nop
 801e928:	20000b74 	.word	0x20000b74

0801e92c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 801e92c:	b580      	push	{r7, lr}
 801e92e:	b084      	sub	sp, #16
 801e930:	af00      	add	r7, sp, #0
 801e932:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 801e934:	6878      	ldr	r0, [r7, #4]
 801e936:	f004 f94f 	bl	8022bd8 <pvTimerGetTimerID>
 801e93a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 801e93c:	68fb      	ldr	r3, [r7, #12]
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d005      	beq.n	801e94e <TimerCallback+0x22>
    callb->func (callb->arg);
 801e942:	68fb      	ldr	r3, [r7, #12]
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	68fa      	ldr	r2, [r7, #12]
 801e948:	6852      	ldr	r2, [r2, #4]
 801e94a:	4610      	mov	r0, r2
 801e94c:	4798      	blx	r3
  }
}
 801e94e:	bf00      	nop
 801e950:	3710      	adds	r7, #16
 801e952:	46bd      	mov	sp, r7
 801e954:	bd80      	pop	{r7, pc}
	...

0801e958 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 801e958:	b580      	push	{r7, lr}
 801e95a:	b08e      	sub	sp, #56	; 0x38
 801e95c:	af02      	add	r7, sp, #8
 801e95e:	60f8      	str	r0, [r7, #12]
 801e960:	607a      	str	r2, [r7, #4]
 801e962:	603b      	str	r3, [r7, #0]
 801e964:	460b      	mov	r3, r1
 801e966:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 801e968:	2300      	movs	r3, #0
 801e96a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e96c:	f3ef 8305 	mrs	r3, IPSR
 801e970:	61bb      	str	r3, [r7, #24]
  return(result);
 801e972:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 801e974:	2b00      	cmp	r3, #0
 801e976:	d16a      	bne.n	801ea4e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e978:	f3ef 8310 	mrs	r3, PRIMASK
 801e97c:	617b      	str	r3, [r7, #20]
  return(result);
 801e97e:	697b      	ldr	r3, [r7, #20]
 801e980:	2b00      	cmp	r3, #0
 801e982:	d164      	bne.n	801ea4e <osTimerNew+0xf6>
 801e984:	4b34      	ldr	r3, [pc, #208]	; (801ea58 <osTimerNew+0x100>)
 801e986:	681b      	ldr	r3, [r3, #0]
 801e988:	2b02      	cmp	r3, #2
 801e98a:	d105      	bne.n	801e998 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e98c:	f3ef 8311 	mrs	r3, BASEPRI
 801e990:	613b      	str	r3, [r7, #16]
  return(result);
 801e992:	693b      	ldr	r3, [r7, #16]
 801e994:	2b00      	cmp	r3, #0
 801e996:	d15a      	bne.n	801ea4e <osTimerNew+0xf6>
 801e998:	68fb      	ldr	r3, [r7, #12]
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d057      	beq.n	801ea4e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 801e99e:	2008      	movs	r0, #8
 801e9a0:	f000 fd60 	bl	801f464 <pvPortMalloc>
 801e9a4:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 801e9a6:	69fb      	ldr	r3, [r7, #28]
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	d050      	beq.n	801ea4e <osTimerNew+0xf6>
      callb->func = func;
 801e9ac:	69fb      	ldr	r3, [r7, #28]
 801e9ae:	68fa      	ldr	r2, [r7, #12]
 801e9b0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 801e9b2:	69fb      	ldr	r3, [r7, #28]
 801e9b4:	687a      	ldr	r2, [r7, #4]
 801e9b6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 801e9b8:	7afb      	ldrb	r3, [r7, #11]
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d102      	bne.n	801e9c4 <osTimerNew+0x6c>
        reload = pdFALSE;
 801e9be:	2300      	movs	r3, #0
 801e9c0:	627b      	str	r3, [r7, #36]	; 0x24
 801e9c2:	e001      	b.n	801e9c8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 801e9c4:	2301      	movs	r3, #1
 801e9c6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 801e9c8:	f04f 33ff 	mov.w	r3, #4294967295
 801e9cc:	623b      	str	r3, [r7, #32]
      name = NULL;
 801e9ce:	2300      	movs	r3, #0
 801e9d0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 801e9d2:	683b      	ldr	r3, [r7, #0]
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	d01c      	beq.n	801ea12 <osTimerNew+0xba>
        if (attr->name != NULL) {
 801e9d8:	683b      	ldr	r3, [r7, #0]
 801e9da:	681b      	ldr	r3, [r3, #0]
 801e9dc:	2b00      	cmp	r3, #0
 801e9de:	d002      	beq.n	801e9e6 <osTimerNew+0x8e>
          name = attr->name;
 801e9e0:	683b      	ldr	r3, [r7, #0]
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 801e9e6:	683b      	ldr	r3, [r7, #0]
 801e9e8:	689b      	ldr	r3, [r3, #8]
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	d006      	beq.n	801e9fc <osTimerNew+0xa4>
 801e9ee:	683b      	ldr	r3, [r7, #0]
 801e9f0:	68db      	ldr	r3, [r3, #12]
 801e9f2:	2b2f      	cmp	r3, #47	; 0x2f
 801e9f4:	d902      	bls.n	801e9fc <osTimerNew+0xa4>
          mem = 1;
 801e9f6:	2301      	movs	r3, #1
 801e9f8:	623b      	str	r3, [r7, #32]
 801e9fa:	e00c      	b.n	801ea16 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801e9fc:	683b      	ldr	r3, [r7, #0]
 801e9fe:	689b      	ldr	r3, [r3, #8]
 801ea00:	2b00      	cmp	r3, #0
 801ea02:	d108      	bne.n	801ea16 <osTimerNew+0xbe>
 801ea04:	683b      	ldr	r3, [r7, #0]
 801ea06:	68db      	ldr	r3, [r3, #12]
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	d104      	bne.n	801ea16 <osTimerNew+0xbe>
            mem = 0;
 801ea0c:	2300      	movs	r3, #0
 801ea0e:	623b      	str	r3, [r7, #32]
 801ea10:	e001      	b.n	801ea16 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 801ea12:	2300      	movs	r3, #0
 801ea14:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 801ea16:	6a3b      	ldr	r3, [r7, #32]
 801ea18:	2b01      	cmp	r3, #1
 801ea1a:	d10c      	bne.n	801ea36 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 801ea1c:	683b      	ldr	r3, [r7, #0]
 801ea1e:	689b      	ldr	r3, [r3, #8]
 801ea20:	9301      	str	r3, [sp, #4]
 801ea22:	4b0e      	ldr	r3, [pc, #56]	; (801ea5c <osTimerNew+0x104>)
 801ea24:	9300      	str	r3, [sp, #0]
 801ea26:	69fb      	ldr	r3, [r7, #28]
 801ea28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ea2a:	2101      	movs	r1, #1
 801ea2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ea2e:	f003 fd80 	bl	8022532 <xTimerCreateStatic>
 801ea32:	62b8      	str	r0, [r7, #40]	; 0x28
 801ea34:	e00b      	b.n	801ea4e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 801ea36:	6a3b      	ldr	r3, [r7, #32]
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	d108      	bne.n	801ea4e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 801ea3c:	4b07      	ldr	r3, [pc, #28]	; (801ea5c <osTimerNew+0x104>)
 801ea3e:	9300      	str	r3, [sp, #0]
 801ea40:	69fb      	ldr	r3, [r7, #28]
 801ea42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ea44:	2101      	movs	r1, #1
 801ea46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ea48:	f003 fd52 	bl	80224f0 <xTimerCreate>
 801ea4c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 801ea4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801ea50:	4618      	mov	r0, r3
 801ea52:	3730      	adds	r7, #48	; 0x30
 801ea54:	46bd      	mov	sp, r7
 801ea56:	bd80      	pop	{r7, pc}
 801ea58:	20000b74 	.word	0x20000b74
 801ea5c:	0801e92d 	.word	0x0801e92d

0801ea60 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 801ea60:	b580      	push	{r7, lr}
 801ea62:	b08a      	sub	sp, #40	; 0x28
 801ea64:	af02      	add	r7, sp, #8
 801ea66:	6078      	str	r0, [r7, #4]
 801ea68:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ea6e:	f3ef 8305 	mrs	r3, IPSR
 801ea72:	617b      	str	r3, [r7, #20]
  return(result);
 801ea74:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 801ea76:	2b00      	cmp	r3, #0
 801ea78:	d10f      	bne.n	801ea9a <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea7a:	f3ef 8310 	mrs	r3, PRIMASK
 801ea7e:	613b      	str	r3, [r7, #16]
  return(result);
 801ea80:	693b      	ldr	r3, [r7, #16]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d109      	bne.n	801ea9a <osTimerStart+0x3a>
 801ea86:	4b15      	ldr	r3, [pc, #84]	; (801eadc <osTimerStart+0x7c>)
 801ea88:	681b      	ldr	r3, [r3, #0]
 801ea8a:	2b02      	cmp	r3, #2
 801ea8c:	d109      	bne.n	801eaa2 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ea8e:	f3ef 8311 	mrs	r3, BASEPRI
 801ea92:	60fb      	str	r3, [r7, #12]
  return(result);
 801ea94:	68fb      	ldr	r3, [r7, #12]
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	d003      	beq.n	801eaa2 <osTimerStart+0x42>
    stat = osErrorISR;
 801ea9a:	f06f 0305 	mvn.w	r3, #5
 801ea9e:	61fb      	str	r3, [r7, #28]
 801eaa0:	e017      	b.n	801ead2 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 801eaa2:	69bb      	ldr	r3, [r7, #24]
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	d103      	bne.n	801eab0 <osTimerStart+0x50>
    stat = osErrorParameter;
 801eaa8:	f06f 0303 	mvn.w	r3, #3
 801eaac:	61fb      	str	r3, [r7, #28]
 801eaae:	e010      	b.n	801ead2 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 801eab0:	2300      	movs	r3, #0
 801eab2:	9300      	str	r3, [sp, #0]
 801eab4:	2300      	movs	r3, #0
 801eab6:	683a      	ldr	r2, [r7, #0]
 801eab8:	2104      	movs	r1, #4
 801eaba:	69b8      	ldr	r0, [r7, #24]
 801eabc:	f003 fda6 	bl	802260c <xTimerGenericCommand>
 801eac0:	4603      	mov	r3, r0
 801eac2:	2b01      	cmp	r3, #1
 801eac4:	d102      	bne.n	801eacc <osTimerStart+0x6c>
      stat = osOK;
 801eac6:	2300      	movs	r3, #0
 801eac8:	61fb      	str	r3, [r7, #28]
 801eaca:	e002      	b.n	801ead2 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 801eacc:	f06f 0302 	mvn.w	r3, #2
 801ead0:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 801ead2:	69fb      	ldr	r3, [r7, #28]
}
 801ead4:	4618      	mov	r0, r3
 801ead6:	3720      	adds	r7, #32
 801ead8:	46bd      	mov	sp, r7
 801eada:	bd80      	pop	{r7, pc}
 801eadc:	20000b74 	.word	0x20000b74

0801eae0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 801eae0:	b580      	push	{r7, lr}
 801eae2:	b08a      	sub	sp, #40	; 0x28
 801eae4:	af02      	add	r7, sp, #8
 801eae6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 801eae8:	687b      	ldr	r3, [r7, #4]
 801eaea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801eaec:	f3ef 8305 	mrs	r3, IPSR
 801eaf0:	617b      	str	r3, [r7, #20]
  return(result);
 801eaf2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	d10f      	bne.n	801eb18 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eaf8:	f3ef 8310 	mrs	r3, PRIMASK
 801eafc:	613b      	str	r3, [r7, #16]
  return(result);
 801eafe:	693b      	ldr	r3, [r7, #16]
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	d109      	bne.n	801eb18 <osTimerStop+0x38>
 801eb04:	4b1a      	ldr	r3, [pc, #104]	; (801eb70 <osTimerStop+0x90>)
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	2b02      	cmp	r3, #2
 801eb0a:	d109      	bne.n	801eb20 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801eb0c:	f3ef 8311 	mrs	r3, BASEPRI
 801eb10:	60fb      	str	r3, [r7, #12]
  return(result);
 801eb12:	68fb      	ldr	r3, [r7, #12]
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	d003      	beq.n	801eb20 <osTimerStop+0x40>
    stat = osErrorISR;
 801eb18:	f06f 0305 	mvn.w	r3, #5
 801eb1c:	61fb      	str	r3, [r7, #28]
 801eb1e:	e021      	b.n	801eb64 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 801eb20:	69bb      	ldr	r3, [r7, #24]
 801eb22:	2b00      	cmp	r3, #0
 801eb24:	d103      	bne.n	801eb2e <osTimerStop+0x4e>
    stat = osErrorParameter;
 801eb26:	f06f 0303 	mvn.w	r3, #3
 801eb2a:	61fb      	str	r3, [r7, #28]
 801eb2c:	e01a      	b.n	801eb64 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 801eb2e:	69b8      	ldr	r0, [r7, #24]
 801eb30:	f004 f82e 	bl	8022b90 <xTimerIsTimerActive>
 801eb34:	4603      	mov	r3, r0
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d103      	bne.n	801eb42 <osTimerStop+0x62>
      stat = osErrorResource;
 801eb3a:	f06f 0302 	mvn.w	r3, #2
 801eb3e:	61fb      	str	r3, [r7, #28]
 801eb40:	e010      	b.n	801eb64 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 801eb42:	2300      	movs	r3, #0
 801eb44:	9300      	str	r3, [sp, #0]
 801eb46:	2300      	movs	r3, #0
 801eb48:	2200      	movs	r2, #0
 801eb4a:	2103      	movs	r1, #3
 801eb4c:	69b8      	ldr	r0, [r7, #24]
 801eb4e:	f003 fd5d 	bl	802260c <xTimerGenericCommand>
 801eb52:	4603      	mov	r3, r0
 801eb54:	2b01      	cmp	r3, #1
 801eb56:	d102      	bne.n	801eb5e <osTimerStop+0x7e>
        stat = osOK;
 801eb58:	2300      	movs	r3, #0
 801eb5a:	61fb      	str	r3, [r7, #28]
 801eb5c:	e002      	b.n	801eb64 <osTimerStop+0x84>
      } else {
        stat = osError;
 801eb5e:	f04f 33ff 	mov.w	r3, #4294967295
 801eb62:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 801eb64:	69fb      	ldr	r3, [r7, #28]
}
 801eb66:	4618      	mov	r0, r3
 801eb68:	3720      	adds	r7, #32
 801eb6a:	46bd      	mov	sp, r7
 801eb6c:	bd80      	pop	{r7, pc}
 801eb6e:	bf00      	nop
 801eb70:	20000b74 	.word	0x20000b74

0801eb74 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801eb74:	b580      	push	{r7, lr}
 801eb76:	b08a      	sub	sp, #40	; 0x28
 801eb78:	af00      	add	r7, sp, #0
 801eb7a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801eb7c:	2300      	movs	r3, #0
 801eb7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801eb80:	f3ef 8305 	mrs	r3, IPSR
 801eb84:	613b      	str	r3, [r7, #16]
  return(result);
 801eb86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 801eb88:	2b00      	cmp	r3, #0
 801eb8a:	f040 8085 	bne.w	801ec98 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb8e:	f3ef 8310 	mrs	r3, PRIMASK
 801eb92:	60fb      	str	r3, [r7, #12]
  return(result);
 801eb94:	68fb      	ldr	r3, [r7, #12]
 801eb96:	2b00      	cmp	r3, #0
 801eb98:	d17e      	bne.n	801ec98 <osMutexNew+0x124>
 801eb9a:	4b42      	ldr	r3, [pc, #264]	; (801eca4 <osMutexNew+0x130>)
 801eb9c:	681b      	ldr	r3, [r3, #0]
 801eb9e:	2b02      	cmp	r3, #2
 801eba0:	d105      	bne.n	801ebae <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801eba2:	f3ef 8311 	mrs	r3, BASEPRI
 801eba6:	60bb      	str	r3, [r7, #8]
  return(result);
 801eba8:	68bb      	ldr	r3, [r7, #8]
 801ebaa:	2b00      	cmp	r3, #0
 801ebac:	d174      	bne.n	801ec98 <osMutexNew+0x124>
    if (attr != NULL) {
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	d003      	beq.n	801ebbc <osMutexNew+0x48>
      type = attr->attr_bits;
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	685b      	ldr	r3, [r3, #4]
 801ebb8:	623b      	str	r3, [r7, #32]
 801ebba:	e001      	b.n	801ebc0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 801ebbc:	2300      	movs	r3, #0
 801ebbe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801ebc0:	6a3b      	ldr	r3, [r7, #32]
 801ebc2:	f003 0301 	and.w	r3, r3, #1
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	d002      	beq.n	801ebd0 <osMutexNew+0x5c>
      rmtx = 1U;
 801ebca:	2301      	movs	r3, #1
 801ebcc:	61fb      	str	r3, [r7, #28]
 801ebce:	e001      	b.n	801ebd4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 801ebd0:	2300      	movs	r3, #0
 801ebd2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801ebd4:	6a3b      	ldr	r3, [r7, #32]
 801ebd6:	f003 0308 	and.w	r3, r3, #8
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	d15c      	bne.n	801ec98 <osMutexNew+0x124>
      mem = -1;
 801ebde:	f04f 33ff 	mov.w	r3, #4294967295
 801ebe2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	d015      	beq.n	801ec16 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801ebea:	687b      	ldr	r3, [r7, #4]
 801ebec:	689b      	ldr	r3, [r3, #8]
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	d006      	beq.n	801ec00 <osMutexNew+0x8c>
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	68db      	ldr	r3, [r3, #12]
 801ebf6:	2b4f      	cmp	r3, #79	; 0x4f
 801ebf8:	d902      	bls.n	801ec00 <osMutexNew+0x8c>
          mem = 1;
 801ebfa:	2301      	movs	r3, #1
 801ebfc:	61bb      	str	r3, [r7, #24]
 801ebfe:	e00c      	b.n	801ec1a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	689b      	ldr	r3, [r3, #8]
 801ec04:	2b00      	cmp	r3, #0
 801ec06:	d108      	bne.n	801ec1a <osMutexNew+0xa6>
 801ec08:	687b      	ldr	r3, [r7, #4]
 801ec0a:	68db      	ldr	r3, [r3, #12]
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	d104      	bne.n	801ec1a <osMutexNew+0xa6>
            mem = 0;
 801ec10:	2300      	movs	r3, #0
 801ec12:	61bb      	str	r3, [r7, #24]
 801ec14:	e001      	b.n	801ec1a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 801ec16:	2300      	movs	r3, #0
 801ec18:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 801ec1a:	69bb      	ldr	r3, [r7, #24]
 801ec1c:	2b01      	cmp	r3, #1
 801ec1e:	d112      	bne.n	801ec46 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 801ec20:	69fb      	ldr	r3, [r7, #28]
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	d007      	beq.n	801ec36 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	689b      	ldr	r3, [r3, #8]
 801ec2a:	4619      	mov	r1, r3
 801ec2c:	2004      	movs	r0, #4
 801ec2e:	f001 fa2f 	bl	8020090 <xQueueCreateMutexStatic>
 801ec32:	6278      	str	r0, [r7, #36]	; 0x24
 801ec34:	e016      	b.n	801ec64 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801ec36:	687b      	ldr	r3, [r7, #4]
 801ec38:	689b      	ldr	r3, [r3, #8]
 801ec3a:	4619      	mov	r1, r3
 801ec3c:	2001      	movs	r0, #1
 801ec3e:	f001 fa27 	bl	8020090 <xQueueCreateMutexStatic>
 801ec42:	6278      	str	r0, [r7, #36]	; 0x24
 801ec44:	e00e      	b.n	801ec64 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 801ec46:	69bb      	ldr	r3, [r7, #24]
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	d10b      	bne.n	801ec64 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 801ec4c:	69fb      	ldr	r3, [r7, #28]
 801ec4e:	2b00      	cmp	r3, #0
 801ec50:	d004      	beq.n	801ec5c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 801ec52:	2004      	movs	r0, #4
 801ec54:	f001 fa04 	bl	8020060 <xQueueCreateMutex>
 801ec58:	6278      	str	r0, [r7, #36]	; 0x24
 801ec5a:	e003      	b.n	801ec64 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 801ec5c:	2001      	movs	r0, #1
 801ec5e:	f001 f9ff 	bl	8020060 <xQueueCreateMutex>
 801ec62:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801ec64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d00c      	beq.n	801ec84 <osMutexNew+0x110>
        if (attr != NULL) {
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	d003      	beq.n	801ec78 <osMutexNew+0x104>
          name = attr->name;
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	681b      	ldr	r3, [r3, #0]
 801ec74:	617b      	str	r3, [r7, #20]
 801ec76:	e001      	b.n	801ec7c <osMutexNew+0x108>
        } else {
          name = NULL;
 801ec78:	2300      	movs	r3, #0
 801ec7a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 801ec7c:	6979      	ldr	r1, [r7, #20]
 801ec7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec80:	f002 f8b4 	bl	8020dec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801ec84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	d006      	beq.n	801ec98 <osMutexNew+0x124>
 801ec8a:	69fb      	ldr	r3, [r7, #28]
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d003      	beq.n	801ec98 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801ec90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec92:	f043 0301 	orr.w	r3, r3, #1
 801ec96:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ec9a:	4618      	mov	r0, r3
 801ec9c:	3728      	adds	r7, #40	; 0x28
 801ec9e:	46bd      	mov	sp, r7
 801eca0:	bd80      	pop	{r7, pc}
 801eca2:	bf00      	nop
 801eca4:	20000b74 	.word	0x20000b74

0801eca8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801eca8:	b580      	push	{r7, lr}
 801ecaa:	b088      	sub	sp, #32
 801ecac:	af00      	add	r7, sp, #0
 801ecae:	6078      	str	r0, [r7, #4]
 801ecb0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	f023 0301 	bic.w	r3, r3, #1
 801ecb8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	f003 0301 	and.w	r3, r3, #1
 801ecc0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 801ecc2:	2300      	movs	r3, #0
 801ecc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ecc6:	f3ef 8305 	mrs	r3, IPSR
 801ecca:	613b      	str	r3, [r7, #16]
  return(result);
 801eccc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801ecce:	2b00      	cmp	r3, #0
 801ecd0:	d10f      	bne.n	801ecf2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecd2:	f3ef 8310 	mrs	r3, PRIMASK
 801ecd6:	60fb      	str	r3, [r7, #12]
  return(result);
 801ecd8:	68fb      	ldr	r3, [r7, #12]
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	d109      	bne.n	801ecf2 <osMutexAcquire+0x4a>
 801ecde:	4b20      	ldr	r3, [pc, #128]	; (801ed60 <osMutexAcquire+0xb8>)
 801ece0:	681b      	ldr	r3, [r3, #0]
 801ece2:	2b02      	cmp	r3, #2
 801ece4:	d109      	bne.n	801ecfa <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ece6:	f3ef 8311 	mrs	r3, BASEPRI
 801ecea:	60bb      	str	r3, [r7, #8]
  return(result);
 801ecec:	68bb      	ldr	r3, [r7, #8]
 801ecee:	2b00      	cmp	r3, #0
 801ecf0:	d003      	beq.n	801ecfa <osMutexAcquire+0x52>
    stat = osErrorISR;
 801ecf2:	f06f 0305 	mvn.w	r3, #5
 801ecf6:	61fb      	str	r3, [r7, #28]
 801ecf8:	e02c      	b.n	801ed54 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 801ecfa:	69bb      	ldr	r3, [r7, #24]
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	d103      	bne.n	801ed08 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 801ed00:	f06f 0303 	mvn.w	r3, #3
 801ed04:	61fb      	str	r3, [r7, #28]
 801ed06:	e025      	b.n	801ed54 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 801ed08:	697b      	ldr	r3, [r7, #20]
 801ed0a:	2b00      	cmp	r3, #0
 801ed0c:	d011      	beq.n	801ed32 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801ed0e:	6839      	ldr	r1, [r7, #0]
 801ed10:	69b8      	ldr	r0, [r7, #24]
 801ed12:	f001 fa0b 	bl	802012c <xQueueTakeMutexRecursive>
 801ed16:	4603      	mov	r3, r0
 801ed18:	2b01      	cmp	r3, #1
 801ed1a:	d01b      	beq.n	801ed54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801ed1c:	683b      	ldr	r3, [r7, #0]
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d003      	beq.n	801ed2a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 801ed22:	f06f 0301 	mvn.w	r3, #1
 801ed26:	61fb      	str	r3, [r7, #28]
 801ed28:	e014      	b.n	801ed54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801ed2a:	f06f 0302 	mvn.w	r3, #2
 801ed2e:	61fb      	str	r3, [r7, #28]
 801ed30:	e010      	b.n	801ed54 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801ed32:	6839      	ldr	r1, [r7, #0]
 801ed34:	69b8      	ldr	r0, [r7, #24]
 801ed36:	f001 fd89 	bl	802084c <xQueueSemaphoreTake>
 801ed3a:	4603      	mov	r3, r0
 801ed3c:	2b01      	cmp	r3, #1
 801ed3e:	d009      	beq.n	801ed54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801ed40:	683b      	ldr	r3, [r7, #0]
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	d003      	beq.n	801ed4e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 801ed46:	f06f 0301 	mvn.w	r3, #1
 801ed4a:	61fb      	str	r3, [r7, #28]
 801ed4c:	e002      	b.n	801ed54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801ed4e:	f06f 0302 	mvn.w	r3, #2
 801ed52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801ed54:	69fb      	ldr	r3, [r7, #28]
}
 801ed56:	4618      	mov	r0, r3
 801ed58:	3720      	adds	r7, #32
 801ed5a:	46bd      	mov	sp, r7
 801ed5c:	bd80      	pop	{r7, pc}
 801ed5e:	bf00      	nop
 801ed60:	20000b74 	.word	0x20000b74

0801ed64 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 801ed64:	b580      	push	{r7, lr}
 801ed66:	b088      	sub	sp, #32
 801ed68:	af00      	add	r7, sp, #0
 801ed6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	f023 0301 	bic.w	r3, r3, #1
 801ed72:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801ed74:	687b      	ldr	r3, [r7, #4]
 801ed76:	f003 0301 	and.w	r3, r3, #1
 801ed7a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 801ed7c:	2300      	movs	r3, #0
 801ed7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ed80:	f3ef 8305 	mrs	r3, IPSR
 801ed84:	613b      	str	r3, [r7, #16]
  return(result);
 801ed86:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	d10f      	bne.n	801edac <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed8c:	f3ef 8310 	mrs	r3, PRIMASK
 801ed90:	60fb      	str	r3, [r7, #12]
  return(result);
 801ed92:	68fb      	ldr	r3, [r7, #12]
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	d109      	bne.n	801edac <osMutexRelease+0x48>
 801ed98:	4b19      	ldr	r3, [pc, #100]	; (801ee00 <osMutexRelease+0x9c>)
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	2b02      	cmp	r3, #2
 801ed9e:	d109      	bne.n	801edb4 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801eda0:	f3ef 8311 	mrs	r3, BASEPRI
 801eda4:	60bb      	str	r3, [r7, #8]
  return(result);
 801eda6:	68bb      	ldr	r3, [r7, #8]
 801eda8:	2b00      	cmp	r3, #0
 801edaa:	d003      	beq.n	801edb4 <osMutexRelease+0x50>
    stat = osErrorISR;
 801edac:	f06f 0305 	mvn.w	r3, #5
 801edb0:	61fb      	str	r3, [r7, #28]
 801edb2:	e01f      	b.n	801edf4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 801edb4:	69bb      	ldr	r3, [r7, #24]
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	d103      	bne.n	801edc2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801edba:	f06f 0303 	mvn.w	r3, #3
 801edbe:	61fb      	str	r3, [r7, #28]
 801edc0:	e018      	b.n	801edf4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 801edc2:	697b      	ldr	r3, [r7, #20]
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	d009      	beq.n	801eddc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801edc8:	69b8      	ldr	r0, [r7, #24]
 801edca:	f001 f97c 	bl	80200c6 <xQueueGiveMutexRecursive>
 801edce:	4603      	mov	r3, r0
 801edd0:	2b01      	cmp	r3, #1
 801edd2:	d00f      	beq.n	801edf4 <osMutexRelease+0x90>
        stat = osErrorResource;
 801edd4:	f06f 0302 	mvn.w	r3, #2
 801edd8:	61fb      	str	r3, [r7, #28]
 801edda:	e00b      	b.n	801edf4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801eddc:	2300      	movs	r3, #0
 801edde:	2200      	movs	r2, #0
 801ede0:	2100      	movs	r1, #0
 801ede2:	69b8      	ldr	r0, [r7, #24]
 801ede4:	f001 fa3e 	bl	8020264 <xQueueGenericSend>
 801ede8:	4603      	mov	r3, r0
 801edea:	2b01      	cmp	r3, #1
 801edec:	d002      	beq.n	801edf4 <osMutexRelease+0x90>
        stat = osErrorResource;
 801edee:	f06f 0302 	mvn.w	r3, #2
 801edf2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 801edf4:	69fb      	ldr	r3, [r7, #28]
}
 801edf6:	4618      	mov	r0, r3
 801edf8:	3720      	adds	r7, #32
 801edfa:	46bd      	mov	sp, r7
 801edfc:	bd80      	pop	{r7, pc}
 801edfe:	bf00      	nop
 801ee00:	20000b74 	.word	0x20000b74

0801ee04 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801ee04:	b580      	push	{r7, lr}
 801ee06:	b08c      	sub	sp, #48	; 0x30
 801ee08:	af02      	add	r7, sp, #8
 801ee0a:	60f8      	str	r0, [r7, #12]
 801ee0c:	60b9      	str	r1, [r7, #8]
 801ee0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801ee10:	2300      	movs	r3, #0
 801ee12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ee14:	f3ef 8305 	mrs	r3, IPSR
 801ee18:	61bb      	str	r3, [r7, #24]
  return(result);
 801ee1a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801ee1c:	2b00      	cmp	r3, #0
 801ee1e:	f040 8088 	bne.w	801ef32 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee22:	f3ef 8310 	mrs	r3, PRIMASK
 801ee26:	617b      	str	r3, [r7, #20]
  return(result);
 801ee28:	697b      	ldr	r3, [r7, #20]
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	f040 8081 	bne.w	801ef32 <osSemaphoreNew+0x12e>
 801ee30:	4b42      	ldr	r3, [pc, #264]	; (801ef3c <osSemaphoreNew+0x138>)
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	2b02      	cmp	r3, #2
 801ee36:	d105      	bne.n	801ee44 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ee38:	f3ef 8311 	mrs	r3, BASEPRI
 801ee3c:	613b      	str	r3, [r7, #16]
  return(result);
 801ee3e:	693b      	ldr	r3, [r7, #16]
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	d176      	bne.n	801ef32 <osSemaphoreNew+0x12e>
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	d073      	beq.n	801ef32 <osSemaphoreNew+0x12e>
 801ee4a:	68ba      	ldr	r2, [r7, #8]
 801ee4c:	68fb      	ldr	r3, [r7, #12]
 801ee4e:	429a      	cmp	r2, r3
 801ee50:	d86f      	bhi.n	801ef32 <osSemaphoreNew+0x12e>
    mem = -1;
 801ee52:	f04f 33ff 	mov.w	r3, #4294967295
 801ee56:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	2b00      	cmp	r3, #0
 801ee5c:	d015      	beq.n	801ee8a <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801ee5e:	687b      	ldr	r3, [r7, #4]
 801ee60:	689b      	ldr	r3, [r3, #8]
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d006      	beq.n	801ee74 <osSemaphoreNew+0x70>
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	68db      	ldr	r3, [r3, #12]
 801ee6a:	2b4f      	cmp	r3, #79	; 0x4f
 801ee6c:	d902      	bls.n	801ee74 <osSemaphoreNew+0x70>
        mem = 1;
 801ee6e:	2301      	movs	r3, #1
 801ee70:	623b      	str	r3, [r7, #32]
 801ee72:	e00c      	b.n	801ee8e <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	689b      	ldr	r3, [r3, #8]
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	d108      	bne.n	801ee8e <osSemaphoreNew+0x8a>
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	68db      	ldr	r3, [r3, #12]
 801ee80:	2b00      	cmp	r3, #0
 801ee82:	d104      	bne.n	801ee8e <osSemaphoreNew+0x8a>
          mem = 0;
 801ee84:	2300      	movs	r3, #0
 801ee86:	623b      	str	r3, [r7, #32]
 801ee88:	e001      	b.n	801ee8e <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 801ee8a:	2300      	movs	r3, #0
 801ee8c:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 801ee8e:	6a3b      	ldr	r3, [r7, #32]
 801ee90:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee94:	d04d      	beq.n	801ef32 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 801ee96:	68fb      	ldr	r3, [r7, #12]
 801ee98:	2b01      	cmp	r3, #1
 801ee9a:	d129      	bne.n	801eef0 <osSemaphoreNew+0xec>
        if (mem == 1) {
 801ee9c:	6a3b      	ldr	r3, [r7, #32]
 801ee9e:	2b01      	cmp	r3, #1
 801eea0:	d10b      	bne.n	801eeba <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801eea2:	687b      	ldr	r3, [r7, #4]
 801eea4:	689a      	ldr	r2, [r3, #8]
 801eea6:	2303      	movs	r3, #3
 801eea8:	9300      	str	r3, [sp, #0]
 801eeaa:	4613      	mov	r3, r2
 801eeac:	2200      	movs	r2, #0
 801eeae:	2100      	movs	r1, #0
 801eeb0:	2001      	movs	r0, #1
 801eeb2:	f000 ffe9 	bl	801fe88 <xQueueGenericCreateStatic>
 801eeb6:	6278      	str	r0, [r7, #36]	; 0x24
 801eeb8:	e005      	b.n	801eec6 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801eeba:	2203      	movs	r2, #3
 801eebc:	2100      	movs	r1, #0
 801eebe:	2001      	movs	r0, #1
 801eec0:	f001 f854 	bl	801ff6c <xQueueGenericCreate>
 801eec4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801eec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	d022      	beq.n	801ef12 <osSemaphoreNew+0x10e>
 801eecc:	68bb      	ldr	r3, [r7, #8]
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d01f      	beq.n	801ef12 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801eed2:	2300      	movs	r3, #0
 801eed4:	2200      	movs	r2, #0
 801eed6:	2100      	movs	r1, #0
 801eed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eeda:	f001 f9c3 	bl	8020264 <xQueueGenericSend>
 801eede:	4603      	mov	r3, r0
 801eee0:	2b01      	cmp	r3, #1
 801eee2:	d016      	beq.n	801ef12 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 801eee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eee6:	f001 fe36 	bl	8020b56 <vQueueDelete>
            hSemaphore = NULL;
 801eeea:	2300      	movs	r3, #0
 801eeec:	627b      	str	r3, [r7, #36]	; 0x24
 801eeee:	e010      	b.n	801ef12 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 801eef0:	6a3b      	ldr	r3, [r7, #32]
 801eef2:	2b01      	cmp	r3, #1
 801eef4:	d108      	bne.n	801ef08 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	689b      	ldr	r3, [r3, #8]
 801eefa:	461a      	mov	r2, r3
 801eefc:	68b9      	ldr	r1, [r7, #8]
 801eefe:	68f8      	ldr	r0, [r7, #12]
 801ef00:	f001 f949 	bl	8020196 <xQueueCreateCountingSemaphoreStatic>
 801ef04:	6278      	str	r0, [r7, #36]	; 0x24
 801ef06:	e004      	b.n	801ef12 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801ef08:	68b9      	ldr	r1, [r7, #8]
 801ef0a:	68f8      	ldr	r0, [r7, #12]
 801ef0c:	f001 f978 	bl	8020200 <xQueueCreateCountingSemaphore>
 801ef10:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801ef12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	d00c      	beq.n	801ef32 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 801ef18:	687b      	ldr	r3, [r7, #4]
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d003      	beq.n	801ef26 <osSemaphoreNew+0x122>
          name = attr->name;
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	61fb      	str	r3, [r7, #28]
 801ef24:	e001      	b.n	801ef2a <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 801ef26:	2300      	movs	r3, #0
 801ef28:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801ef2a:	69f9      	ldr	r1, [r7, #28]
 801ef2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ef2e:	f001 ff5d 	bl	8020dec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801ef32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ef34:	4618      	mov	r0, r3
 801ef36:	3728      	adds	r7, #40	; 0x28
 801ef38:	46bd      	mov	sp, r7
 801ef3a:	bd80      	pop	{r7, pc}
 801ef3c:	20000b74 	.word	0x20000b74

0801ef40 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801ef40:	b580      	push	{r7, lr}
 801ef42:	b088      	sub	sp, #32
 801ef44:	af00      	add	r7, sp, #0
 801ef46:	6078      	str	r0, [r7, #4]
 801ef48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801ef4e:	2300      	movs	r3, #0
 801ef50:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801ef52:	69bb      	ldr	r3, [r7, #24]
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	d103      	bne.n	801ef60 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801ef58:	f06f 0303 	mvn.w	r3, #3
 801ef5c:	61fb      	str	r3, [r7, #28]
 801ef5e:	e04b      	b.n	801eff8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ef60:	f3ef 8305 	mrs	r3, IPSR
 801ef64:	617b      	str	r3, [r7, #20]
  return(result);
 801ef66:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801ef68:	2b00      	cmp	r3, #0
 801ef6a:	d10f      	bne.n	801ef8c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef6c:	f3ef 8310 	mrs	r3, PRIMASK
 801ef70:	613b      	str	r3, [r7, #16]
  return(result);
 801ef72:	693b      	ldr	r3, [r7, #16]
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	d109      	bne.n	801ef8c <osSemaphoreAcquire+0x4c>
 801ef78:	4b22      	ldr	r3, [pc, #136]	; (801f004 <osSemaphoreAcquire+0xc4>)
 801ef7a:	681b      	ldr	r3, [r3, #0]
 801ef7c:	2b02      	cmp	r3, #2
 801ef7e:	d128      	bne.n	801efd2 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ef80:	f3ef 8311 	mrs	r3, BASEPRI
 801ef84:	60fb      	str	r3, [r7, #12]
  return(result);
 801ef86:	68fb      	ldr	r3, [r7, #12]
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d022      	beq.n	801efd2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 801ef8c:	683b      	ldr	r3, [r7, #0]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d003      	beq.n	801ef9a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801ef92:	f06f 0303 	mvn.w	r3, #3
 801ef96:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801ef98:	e02d      	b.n	801eff6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801ef9a:	2300      	movs	r3, #0
 801ef9c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801ef9e:	f107 0308 	add.w	r3, r7, #8
 801efa2:	461a      	mov	r2, r3
 801efa4:	2100      	movs	r1, #0
 801efa6:	69b8      	ldr	r0, [r7, #24]
 801efa8:	f001 fd58 	bl	8020a5c <xQueueReceiveFromISR>
 801efac:	4603      	mov	r3, r0
 801efae:	2b01      	cmp	r3, #1
 801efb0:	d003      	beq.n	801efba <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801efb2:	f06f 0302 	mvn.w	r3, #2
 801efb6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801efb8:	e01d      	b.n	801eff6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801efba:	68bb      	ldr	r3, [r7, #8]
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d01a      	beq.n	801eff6 <osSemaphoreAcquire+0xb6>
 801efc0:	4b11      	ldr	r3, [pc, #68]	; (801f008 <osSemaphoreAcquire+0xc8>)
 801efc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801efc6:	601a      	str	r2, [r3, #0]
 801efc8:	f3bf 8f4f 	dsb	sy
 801efcc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 801efd0:	e011      	b.n	801eff6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801efd2:	6839      	ldr	r1, [r7, #0]
 801efd4:	69b8      	ldr	r0, [r7, #24]
 801efd6:	f001 fc39 	bl	802084c <xQueueSemaphoreTake>
 801efda:	4603      	mov	r3, r0
 801efdc:	2b01      	cmp	r3, #1
 801efde:	d00b      	beq.n	801eff8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 801efe0:	683b      	ldr	r3, [r7, #0]
 801efe2:	2b00      	cmp	r3, #0
 801efe4:	d003      	beq.n	801efee <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801efe6:	f06f 0301 	mvn.w	r3, #1
 801efea:	61fb      	str	r3, [r7, #28]
 801efec:	e004      	b.n	801eff8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801efee:	f06f 0302 	mvn.w	r3, #2
 801eff2:	61fb      	str	r3, [r7, #28]
 801eff4:	e000      	b.n	801eff8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801eff6:	bf00      	nop
      }
    }
  }

  return (stat);
 801eff8:	69fb      	ldr	r3, [r7, #28]
}
 801effa:	4618      	mov	r0, r3
 801effc:	3720      	adds	r7, #32
 801effe:	46bd      	mov	sp, r7
 801f000:	bd80      	pop	{r7, pc}
 801f002:	bf00      	nop
 801f004:	20000b74 	.word	0x20000b74
 801f008:	e000ed04 	.word	0xe000ed04

0801f00c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801f00c:	b580      	push	{r7, lr}
 801f00e:	b088      	sub	sp, #32
 801f010:	af00      	add	r7, sp, #0
 801f012:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801f018:	2300      	movs	r3, #0
 801f01a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801f01c:	69bb      	ldr	r3, [r7, #24]
 801f01e:	2b00      	cmp	r3, #0
 801f020:	d103      	bne.n	801f02a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801f022:	f06f 0303 	mvn.w	r3, #3
 801f026:	61fb      	str	r3, [r7, #28]
 801f028:	e03e      	b.n	801f0a8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801f02a:	f3ef 8305 	mrs	r3, IPSR
 801f02e:	617b      	str	r3, [r7, #20]
  return(result);
 801f030:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801f032:	2b00      	cmp	r3, #0
 801f034:	d10f      	bne.n	801f056 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f036:	f3ef 8310 	mrs	r3, PRIMASK
 801f03a:	613b      	str	r3, [r7, #16]
  return(result);
 801f03c:	693b      	ldr	r3, [r7, #16]
 801f03e:	2b00      	cmp	r3, #0
 801f040:	d109      	bne.n	801f056 <osSemaphoreRelease+0x4a>
 801f042:	4b1c      	ldr	r3, [pc, #112]	; (801f0b4 <osSemaphoreRelease+0xa8>)
 801f044:	681b      	ldr	r3, [r3, #0]
 801f046:	2b02      	cmp	r3, #2
 801f048:	d120      	bne.n	801f08c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801f04a:	f3ef 8311 	mrs	r3, BASEPRI
 801f04e:	60fb      	str	r3, [r7, #12]
  return(result);
 801f050:	68fb      	ldr	r3, [r7, #12]
 801f052:	2b00      	cmp	r3, #0
 801f054:	d01a      	beq.n	801f08c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801f056:	2300      	movs	r3, #0
 801f058:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801f05a:	f107 0308 	add.w	r3, r7, #8
 801f05e:	4619      	mov	r1, r3
 801f060:	69b8      	ldr	r0, [r7, #24]
 801f062:	f001 fa8d 	bl	8020580 <xQueueGiveFromISR>
 801f066:	4603      	mov	r3, r0
 801f068:	2b01      	cmp	r3, #1
 801f06a:	d003      	beq.n	801f074 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 801f06c:	f06f 0302 	mvn.w	r3, #2
 801f070:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801f072:	e018      	b.n	801f0a6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 801f074:	68bb      	ldr	r3, [r7, #8]
 801f076:	2b00      	cmp	r3, #0
 801f078:	d015      	beq.n	801f0a6 <osSemaphoreRelease+0x9a>
 801f07a:	4b0f      	ldr	r3, [pc, #60]	; (801f0b8 <osSemaphoreRelease+0xac>)
 801f07c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f080:	601a      	str	r2, [r3, #0]
 801f082:	f3bf 8f4f 	dsb	sy
 801f086:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801f08a:	e00c      	b.n	801f0a6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801f08c:	2300      	movs	r3, #0
 801f08e:	2200      	movs	r2, #0
 801f090:	2100      	movs	r1, #0
 801f092:	69b8      	ldr	r0, [r7, #24]
 801f094:	f001 f8e6 	bl	8020264 <xQueueGenericSend>
 801f098:	4603      	mov	r3, r0
 801f09a:	2b01      	cmp	r3, #1
 801f09c:	d004      	beq.n	801f0a8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801f09e:	f06f 0302 	mvn.w	r3, #2
 801f0a2:	61fb      	str	r3, [r7, #28]
 801f0a4:	e000      	b.n	801f0a8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801f0a6:	bf00      	nop
    }
  }

  return (stat);
 801f0a8:	69fb      	ldr	r3, [r7, #28]
}
 801f0aa:	4618      	mov	r0, r3
 801f0ac:	3720      	adds	r7, #32
 801f0ae:	46bd      	mov	sp, r7
 801f0b0:	bd80      	pop	{r7, pc}
 801f0b2:	bf00      	nop
 801f0b4:	20000b74 	.word	0x20000b74
 801f0b8:	e000ed04 	.word	0xe000ed04

0801f0bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801f0bc:	b580      	push	{r7, lr}
 801f0be:	b08c      	sub	sp, #48	; 0x30
 801f0c0:	af02      	add	r7, sp, #8
 801f0c2:	60f8      	str	r0, [r7, #12]
 801f0c4:	60b9      	str	r1, [r7, #8]
 801f0c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801f0c8:	2300      	movs	r3, #0
 801f0ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801f0cc:	f3ef 8305 	mrs	r3, IPSR
 801f0d0:	61bb      	str	r3, [r7, #24]
  return(result);
 801f0d2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801f0d4:	2b00      	cmp	r3, #0
 801f0d6:	d170      	bne.n	801f1ba <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f0d8:	f3ef 8310 	mrs	r3, PRIMASK
 801f0dc:	617b      	str	r3, [r7, #20]
  return(result);
 801f0de:	697b      	ldr	r3, [r7, #20]
 801f0e0:	2b00      	cmp	r3, #0
 801f0e2:	d16a      	bne.n	801f1ba <osMessageQueueNew+0xfe>
 801f0e4:	4b37      	ldr	r3, [pc, #220]	; (801f1c4 <osMessageQueueNew+0x108>)
 801f0e6:	681b      	ldr	r3, [r3, #0]
 801f0e8:	2b02      	cmp	r3, #2
 801f0ea:	d105      	bne.n	801f0f8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801f0ec:	f3ef 8311 	mrs	r3, BASEPRI
 801f0f0:	613b      	str	r3, [r7, #16]
  return(result);
 801f0f2:	693b      	ldr	r3, [r7, #16]
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	d160      	bne.n	801f1ba <osMessageQueueNew+0xfe>
 801f0f8:	68fb      	ldr	r3, [r7, #12]
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	d05d      	beq.n	801f1ba <osMessageQueueNew+0xfe>
 801f0fe:	68bb      	ldr	r3, [r7, #8]
 801f100:	2b00      	cmp	r3, #0
 801f102:	d05a      	beq.n	801f1ba <osMessageQueueNew+0xfe>
    mem = -1;
 801f104:	f04f 33ff 	mov.w	r3, #4294967295
 801f108:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	d029      	beq.n	801f164 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	689b      	ldr	r3, [r3, #8]
 801f114:	2b00      	cmp	r3, #0
 801f116:	d012      	beq.n	801f13e <osMessageQueueNew+0x82>
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	68db      	ldr	r3, [r3, #12]
 801f11c:	2b4f      	cmp	r3, #79	; 0x4f
 801f11e:	d90e      	bls.n	801f13e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801f124:	2b00      	cmp	r3, #0
 801f126:	d00a      	beq.n	801f13e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	695a      	ldr	r2, [r3, #20]
 801f12c:	68fb      	ldr	r3, [r7, #12]
 801f12e:	68b9      	ldr	r1, [r7, #8]
 801f130:	fb01 f303 	mul.w	r3, r1, r3
 801f134:	429a      	cmp	r2, r3
 801f136:	d302      	bcc.n	801f13e <osMessageQueueNew+0x82>
        mem = 1;
 801f138:	2301      	movs	r3, #1
 801f13a:	623b      	str	r3, [r7, #32]
 801f13c:	e014      	b.n	801f168 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801f13e:	687b      	ldr	r3, [r7, #4]
 801f140:	689b      	ldr	r3, [r3, #8]
 801f142:	2b00      	cmp	r3, #0
 801f144:	d110      	bne.n	801f168 <osMessageQueueNew+0xac>
 801f146:	687b      	ldr	r3, [r7, #4]
 801f148:	68db      	ldr	r3, [r3, #12]
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d10c      	bne.n	801f168 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801f14e:	687b      	ldr	r3, [r7, #4]
 801f150:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801f152:	2b00      	cmp	r3, #0
 801f154:	d108      	bne.n	801f168 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	695b      	ldr	r3, [r3, #20]
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d104      	bne.n	801f168 <osMessageQueueNew+0xac>
          mem = 0;
 801f15e:	2300      	movs	r3, #0
 801f160:	623b      	str	r3, [r7, #32]
 801f162:	e001      	b.n	801f168 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 801f164:	2300      	movs	r3, #0
 801f166:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801f168:	6a3b      	ldr	r3, [r7, #32]
 801f16a:	2b01      	cmp	r3, #1
 801f16c:	d10c      	bne.n	801f188 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	691a      	ldr	r2, [r3, #16]
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	6899      	ldr	r1, [r3, #8]
 801f176:	2300      	movs	r3, #0
 801f178:	9300      	str	r3, [sp, #0]
 801f17a:	460b      	mov	r3, r1
 801f17c:	68b9      	ldr	r1, [r7, #8]
 801f17e:	68f8      	ldr	r0, [r7, #12]
 801f180:	f000 fe82 	bl	801fe88 <xQueueGenericCreateStatic>
 801f184:	6278      	str	r0, [r7, #36]	; 0x24
 801f186:	e008      	b.n	801f19a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 801f188:	6a3b      	ldr	r3, [r7, #32]
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	d105      	bne.n	801f19a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801f18e:	2200      	movs	r2, #0
 801f190:	68b9      	ldr	r1, [r7, #8]
 801f192:	68f8      	ldr	r0, [r7, #12]
 801f194:	f000 feea 	bl	801ff6c <xQueueGenericCreate>
 801f198:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801f19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f19c:	2b00      	cmp	r3, #0
 801f19e:	d00c      	beq.n	801f1ba <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	d003      	beq.n	801f1ae <osMessageQueueNew+0xf2>
        name = attr->name;
 801f1a6:	687b      	ldr	r3, [r7, #4]
 801f1a8:	681b      	ldr	r3, [r3, #0]
 801f1aa:	61fb      	str	r3, [r7, #28]
 801f1ac:	e001      	b.n	801f1b2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801f1ae:	2300      	movs	r3, #0
 801f1b0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801f1b2:	69f9      	ldr	r1, [r7, #28]
 801f1b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f1b6:	f001 fe19 	bl	8020dec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801f1bc:	4618      	mov	r0, r3
 801f1be:	3728      	adds	r7, #40	; 0x28
 801f1c0:	46bd      	mov	sp, r7
 801f1c2:	bd80      	pop	{r7, pc}
 801f1c4:	20000b74 	.word	0x20000b74

0801f1c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801f1c8:	b580      	push	{r7, lr}
 801f1ca:	b08a      	sub	sp, #40	; 0x28
 801f1cc:	af00      	add	r7, sp, #0
 801f1ce:	60f8      	str	r0, [r7, #12]
 801f1d0:	60b9      	str	r1, [r7, #8]
 801f1d2:	603b      	str	r3, [r7, #0]
 801f1d4:	4613      	mov	r3, r2
 801f1d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801f1d8:	68fb      	ldr	r3, [r7, #12]
 801f1da:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801f1dc:	2300      	movs	r3, #0
 801f1de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801f1e0:	f3ef 8305 	mrs	r3, IPSR
 801f1e4:	61fb      	str	r3, [r7, #28]
  return(result);
 801f1e6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801f1e8:	2b00      	cmp	r3, #0
 801f1ea:	d10f      	bne.n	801f20c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f1ec:	f3ef 8310 	mrs	r3, PRIMASK
 801f1f0:	61bb      	str	r3, [r7, #24]
  return(result);
 801f1f2:	69bb      	ldr	r3, [r7, #24]
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	d109      	bne.n	801f20c <osMessageQueuePut+0x44>
 801f1f8:	4b2b      	ldr	r3, [pc, #172]	; (801f2a8 <osMessageQueuePut+0xe0>)
 801f1fa:	681b      	ldr	r3, [r3, #0]
 801f1fc:	2b02      	cmp	r3, #2
 801f1fe:	d12e      	bne.n	801f25e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801f200:	f3ef 8311 	mrs	r3, BASEPRI
 801f204:	617b      	str	r3, [r7, #20]
  return(result);
 801f206:	697b      	ldr	r3, [r7, #20]
 801f208:	2b00      	cmp	r3, #0
 801f20a:	d028      	beq.n	801f25e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f20c:	6a3b      	ldr	r3, [r7, #32]
 801f20e:	2b00      	cmp	r3, #0
 801f210:	d005      	beq.n	801f21e <osMessageQueuePut+0x56>
 801f212:	68bb      	ldr	r3, [r7, #8]
 801f214:	2b00      	cmp	r3, #0
 801f216:	d002      	beq.n	801f21e <osMessageQueuePut+0x56>
 801f218:	683b      	ldr	r3, [r7, #0]
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	d003      	beq.n	801f226 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801f21e:	f06f 0303 	mvn.w	r3, #3
 801f222:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f224:	e039      	b.n	801f29a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 801f226:	2300      	movs	r3, #0
 801f228:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801f22a:	f107 0210 	add.w	r2, r7, #16
 801f22e:	2300      	movs	r3, #0
 801f230:	68b9      	ldr	r1, [r7, #8]
 801f232:	6a38      	ldr	r0, [r7, #32]
 801f234:	f001 f910 	bl	8020458 <xQueueGenericSendFromISR>
 801f238:	4603      	mov	r3, r0
 801f23a:	2b01      	cmp	r3, #1
 801f23c:	d003      	beq.n	801f246 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801f23e:	f06f 0302 	mvn.w	r3, #2
 801f242:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f244:	e029      	b.n	801f29a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801f246:	693b      	ldr	r3, [r7, #16]
 801f248:	2b00      	cmp	r3, #0
 801f24a:	d026      	beq.n	801f29a <osMessageQueuePut+0xd2>
 801f24c:	4b17      	ldr	r3, [pc, #92]	; (801f2ac <osMessageQueuePut+0xe4>)
 801f24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f252:	601a      	str	r2, [r3, #0]
 801f254:	f3bf 8f4f 	dsb	sy
 801f258:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f25c:	e01d      	b.n	801f29a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801f25e:	6a3b      	ldr	r3, [r7, #32]
 801f260:	2b00      	cmp	r3, #0
 801f262:	d002      	beq.n	801f26a <osMessageQueuePut+0xa2>
 801f264:	68bb      	ldr	r3, [r7, #8]
 801f266:	2b00      	cmp	r3, #0
 801f268:	d103      	bne.n	801f272 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801f26a:	f06f 0303 	mvn.w	r3, #3
 801f26e:	627b      	str	r3, [r7, #36]	; 0x24
 801f270:	e014      	b.n	801f29c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801f272:	2300      	movs	r3, #0
 801f274:	683a      	ldr	r2, [r7, #0]
 801f276:	68b9      	ldr	r1, [r7, #8]
 801f278:	6a38      	ldr	r0, [r7, #32]
 801f27a:	f000 fff3 	bl	8020264 <xQueueGenericSend>
 801f27e:	4603      	mov	r3, r0
 801f280:	2b01      	cmp	r3, #1
 801f282:	d00b      	beq.n	801f29c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 801f284:	683b      	ldr	r3, [r7, #0]
 801f286:	2b00      	cmp	r3, #0
 801f288:	d003      	beq.n	801f292 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801f28a:	f06f 0301 	mvn.w	r3, #1
 801f28e:	627b      	str	r3, [r7, #36]	; 0x24
 801f290:	e004      	b.n	801f29c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801f292:	f06f 0302 	mvn.w	r3, #2
 801f296:	627b      	str	r3, [r7, #36]	; 0x24
 801f298:	e000      	b.n	801f29c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f29a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801f29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801f29e:	4618      	mov	r0, r3
 801f2a0:	3728      	adds	r7, #40	; 0x28
 801f2a2:	46bd      	mov	sp, r7
 801f2a4:	bd80      	pop	{r7, pc}
 801f2a6:	bf00      	nop
 801f2a8:	20000b74 	.word	0x20000b74
 801f2ac:	e000ed04 	.word	0xe000ed04

0801f2b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801f2b0:	b580      	push	{r7, lr}
 801f2b2:	b08a      	sub	sp, #40	; 0x28
 801f2b4:	af00      	add	r7, sp, #0
 801f2b6:	60f8      	str	r0, [r7, #12]
 801f2b8:	60b9      	str	r1, [r7, #8]
 801f2ba:	607a      	str	r2, [r7, #4]
 801f2bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801f2be:	68fb      	ldr	r3, [r7, #12]
 801f2c0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801f2c2:	2300      	movs	r3, #0
 801f2c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801f2c6:	f3ef 8305 	mrs	r3, IPSR
 801f2ca:	61fb      	str	r3, [r7, #28]
  return(result);
 801f2cc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	d10f      	bne.n	801f2f2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f2d2:	f3ef 8310 	mrs	r3, PRIMASK
 801f2d6:	61bb      	str	r3, [r7, #24]
  return(result);
 801f2d8:	69bb      	ldr	r3, [r7, #24]
 801f2da:	2b00      	cmp	r3, #0
 801f2dc:	d109      	bne.n	801f2f2 <osMessageQueueGet+0x42>
 801f2de:	4b2b      	ldr	r3, [pc, #172]	; (801f38c <osMessageQueueGet+0xdc>)
 801f2e0:	681b      	ldr	r3, [r3, #0]
 801f2e2:	2b02      	cmp	r3, #2
 801f2e4:	d12e      	bne.n	801f344 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801f2e6:	f3ef 8311 	mrs	r3, BASEPRI
 801f2ea:	617b      	str	r3, [r7, #20]
  return(result);
 801f2ec:	697b      	ldr	r3, [r7, #20]
 801f2ee:	2b00      	cmp	r3, #0
 801f2f0:	d028      	beq.n	801f344 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f2f2:	6a3b      	ldr	r3, [r7, #32]
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d005      	beq.n	801f304 <osMessageQueueGet+0x54>
 801f2f8:	68bb      	ldr	r3, [r7, #8]
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	d002      	beq.n	801f304 <osMessageQueueGet+0x54>
 801f2fe:	683b      	ldr	r3, [r7, #0]
 801f300:	2b00      	cmp	r3, #0
 801f302:	d003      	beq.n	801f30c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 801f304:	f06f 0303 	mvn.w	r3, #3
 801f308:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f30a:	e038      	b.n	801f37e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801f30c:	2300      	movs	r3, #0
 801f30e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801f310:	f107 0310 	add.w	r3, r7, #16
 801f314:	461a      	mov	r2, r3
 801f316:	68b9      	ldr	r1, [r7, #8]
 801f318:	6a38      	ldr	r0, [r7, #32]
 801f31a:	f001 fb9f 	bl	8020a5c <xQueueReceiveFromISR>
 801f31e:	4603      	mov	r3, r0
 801f320:	2b01      	cmp	r3, #1
 801f322:	d003      	beq.n	801f32c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 801f324:	f06f 0302 	mvn.w	r3, #2
 801f328:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f32a:	e028      	b.n	801f37e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801f32c:	693b      	ldr	r3, [r7, #16]
 801f32e:	2b00      	cmp	r3, #0
 801f330:	d025      	beq.n	801f37e <osMessageQueueGet+0xce>
 801f332:	4b17      	ldr	r3, [pc, #92]	; (801f390 <osMessageQueueGet+0xe0>)
 801f334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f338:	601a      	str	r2, [r3, #0]
 801f33a:	f3bf 8f4f 	dsb	sy
 801f33e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f342:	e01c      	b.n	801f37e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801f344:	6a3b      	ldr	r3, [r7, #32]
 801f346:	2b00      	cmp	r3, #0
 801f348:	d002      	beq.n	801f350 <osMessageQueueGet+0xa0>
 801f34a:	68bb      	ldr	r3, [r7, #8]
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d103      	bne.n	801f358 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801f350:	f06f 0303 	mvn.w	r3, #3
 801f354:	627b      	str	r3, [r7, #36]	; 0x24
 801f356:	e013      	b.n	801f380 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801f358:	683a      	ldr	r2, [r7, #0]
 801f35a:	68b9      	ldr	r1, [r7, #8]
 801f35c:	6a38      	ldr	r0, [r7, #32]
 801f35e:	f001 f999 	bl	8020694 <xQueueReceive>
 801f362:	4603      	mov	r3, r0
 801f364:	2b01      	cmp	r3, #1
 801f366:	d00b      	beq.n	801f380 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 801f368:	683b      	ldr	r3, [r7, #0]
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	d003      	beq.n	801f376 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801f36e:	f06f 0301 	mvn.w	r3, #1
 801f372:	627b      	str	r3, [r7, #36]	; 0x24
 801f374:	e004      	b.n	801f380 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801f376:	f06f 0302 	mvn.w	r3, #2
 801f37a:	627b      	str	r3, [r7, #36]	; 0x24
 801f37c:	e000      	b.n	801f380 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f37e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801f380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801f382:	4618      	mov	r0, r3
 801f384:	3728      	adds	r7, #40	; 0x28
 801f386:	46bd      	mov	sp, r7
 801f388:	bd80      	pop	{r7, pc}
 801f38a:	bf00      	nop
 801f38c:	20000b74 	.word	0x20000b74
 801f390:	e000ed04 	.word	0xe000ed04

0801f394 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 801f394:	b580      	push	{r7, lr}
 801f396:	b088      	sub	sp, #32
 801f398:	af00      	add	r7, sp, #0
 801f39a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801f3a0:	f3ef 8305 	mrs	r3, IPSR
 801f3a4:	617b      	str	r3, [r7, #20]
  return(result);
 801f3a6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 801f3a8:	2b00      	cmp	r3, #0
 801f3aa:	d10f      	bne.n	801f3cc <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f3ac:	f3ef 8310 	mrs	r3, PRIMASK
 801f3b0:	613b      	str	r3, [r7, #16]
  return(result);
 801f3b2:	693b      	ldr	r3, [r7, #16]
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	d109      	bne.n	801f3cc <osMessageQueueReset+0x38>
 801f3b8:	4b0f      	ldr	r3, [pc, #60]	; (801f3f8 <osMessageQueueReset+0x64>)
 801f3ba:	681b      	ldr	r3, [r3, #0]
 801f3bc:	2b02      	cmp	r3, #2
 801f3be:	d109      	bne.n	801f3d4 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801f3c0:	f3ef 8311 	mrs	r3, BASEPRI
 801f3c4:	60fb      	str	r3, [r7, #12]
  return(result);
 801f3c6:	68fb      	ldr	r3, [r7, #12]
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d003      	beq.n	801f3d4 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 801f3cc:	f06f 0305 	mvn.w	r3, #5
 801f3d0:	61fb      	str	r3, [r7, #28]
 801f3d2:	e00c      	b.n	801f3ee <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 801f3d4:	69bb      	ldr	r3, [r7, #24]
 801f3d6:	2b00      	cmp	r3, #0
 801f3d8:	d103      	bne.n	801f3e2 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 801f3da:	f06f 0303 	mvn.w	r3, #3
 801f3de:	61fb      	str	r3, [r7, #28]
 801f3e0:	e005      	b.n	801f3ee <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 801f3e2:	2300      	movs	r3, #0
 801f3e4:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 801f3e6:	2100      	movs	r1, #0
 801f3e8:	69b8      	ldr	r0, [r7, #24]
 801f3ea:	f000 fce5 	bl	801fdb8 <xQueueGenericReset>
  }

  return (stat);
 801f3ee:	69fb      	ldr	r3, [r7, #28]
}
 801f3f0:	4618      	mov	r0, r3
 801f3f2:	3720      	adds	r7, #32
 801f3f4:	46bd      	mov	sp, r7
 801f3f6:	bd80      	pop	{r7, pc}
 801f3f8:	20000b74 	.word	0x20000b74

0801f3fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801f3fc:	b480      	push	{r7}
 801f3fe:	b085      	sub	sp, #20
 801f400:	af00      	add	r7, sp, #0
 801f402:	60f8      	str	r0, [r7, #12]
 801f404:	60b9      	str	r1, [r7, #8]
 801f406:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801f408:	68fb      	ldr	r3, [r7, #12]
 801f40a:	4a07      	ldr	r2, [pc, #28]	; (801f428 <vApplicationGetIdleTaskMemory+0x2c>)
 801f40c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801f40e:	68bb      	ldr	r3, [r7, #8]
 801f410:	4a06      	ldr	r2, [pc, #24]	; (801f42c <vApplicationGetIdleTaskMemory+0x30>)
 801f412:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f41a:	601a      	str	r2, [r3, #0]
}
 801f41c:	bf00      	nop
 801f41e:	3714      	adds	r7, #20
 801f420:	46bd      	mov	sp, r7
 801f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f426:	4770      	bx	lr
 801f428:	20000b78 	.word	0x20000b78
 801f42c:	20000bdc 	.word	0x20000bdc

0801f430 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801f430:	b480      	push	{r7}
 801f432:	b085      	sub	sp, #20
 801f434:	af00      	add	r7, sp, #0
 801f436:	60f8      	str	r0, [r7, #12]
 801f438:	60b9      	str	r1, [r7, #8]
 801f43a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801f43c:	68fb      	ldr	r3, [r7, #12]
 801f43e:	4a07      	ldr	r2, [pc, #28]	; (801f45c <vApplicationGetTimerTaskMemory+0x2c>)
 801f440:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801f442:	68bb      	ldr	r3, [r7, #8]
 801f444:	4a06      	ldr	r2, [pc, #24]	; (801f460 <vApplicationGetTimerTaskMemory+0x30>)
 801f446:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801f448:	687b      	ldr	r3, [r7, #4]
 801f44a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801f44e:	601a      	str	r2, [r3, #0]
}
 801f450:	bf00      	nop
 801f452:	3714      	adds	r7, #20
 801f454:	46bd      	mov	sp, r7
 801f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f45a:	4770      	bx	lr
 801f45c:	200013dc 	.word	0x200013dc
 801f460:	20001440 	.word	0x20001440

0801f464 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801f464:	b580      	push	{r7, lr}
 801f466:	b08a      	sub	sp, #40	; 0x28
 801f468:	af00      	add	r7, sp, #0
 801f46a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801f46c:	2300      	movs	r3, #0
 801f46e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801f470:	f001 ff76 	bl	8021360 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801f474:	4b59      	ldr	r3, [pc, #356]	; (801f5dc <pvPortMalloc+0x178>)
 801f476:	681b      	ldr	r3, [r3, #0]
 801f478:	2b00      	cmp	r3, #0
 801f47a:	d101      	bne.n	801f480 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801f47c:	f000 f910 	bl	801f6a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801f480:	4b57      	ldr	r3, [pc, #348]	; (801f5e0 <pvPortMalloc+0x17c>)
 801f482:	681a      	ldr	r2, [r3, #0]
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	4013      	ands	r3, r2
 801f488:	2b00      	cmp	r3, #0
 801f48a:	f040 808c 	bne.w	801f5a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801f48e:	687b      	ldr	r3, [r7, #4]
 801f490:	2b00      	cmp	r3, #0
 801f492:	d01c      	beq.n	801f4ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 801f494:	2208      	movs	r2, #8
 801f496:	687b      	ldr	r3, [r7, #4]
 801f498:	4413      	add	r3, r2
 801f49a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	f003 0307 	and.w	r3, r3, #7
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	d013      	beq.n	801f4ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801f4a6:	687b      	ldr	r3, [r7, #4]
 801f4a8:	f023 0307 	bic.w	r3, r3, #7
 801f4ac:	3308      	adds	r3, #8
 801f4ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	f003 0307 	and.w	r3, r3, #7
 801f4b6:	2b00      	cmp	r3, #0
 801f4b8:	d009      	beq.n	801f4ce <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801f4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f4be:	f383 8811 	msr	BASEPRI, r3
 801f4c2:	f3bf 8f6f 	isb	sy
 801f4c6:	f3bf 8f4f 	dsb	sy
 801f4ca:	617b      	str	r3, [r7, #20]
 801f4cc:	e7fe      	b.n	801f4cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801f4ce:	687b      	ldr	r3, [r7, #4]
 801f4d0:	2b00      	cmp	r3, #0
 801f4d2:	d068      	beq.n	801f5a6 <pvPortMalloc+0x142>
 801f4d4:	4b43      	ldr	r3, [pc, #268]	; (801f5e4 <pvPortMalloc+0x180>)
 801f4d6:	681b      	ldr	r3, [r3, #0]
 801f4d8:	687a      	ldr	r2, [r7, #4]
 801f4da:	429a      	cmp	r2, r3
 801f4dc:	d863      	bhi.n	801f5a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801f4de:	4b42      	ldr	r3, [pc, #264]	; (801f5e8 <pvPortMalloc+0x184>)
 801f4e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801f4e2:	4b41      	ldr	r3, [pc, #260]	; (801f5e8 <pvPortMalloc+0x184>)
 801f4e4:	681b      	ldr	r3, [r3, #0]
 801f4e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801f4e8:	e004      	b.n	801f4f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 801f4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801f4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4f0:	681b      	ldr	r3, [r3, #0]
 801f4f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4f6:	685b      	ldr	r3, [r3, #4]
 801f4f8:	687a      	ldr	r2, [r7, #4]
 801f4fa:	429a      	cmp	r2, r3
 801f4fc:	d903      	bls.n	801f506 <pvPortMalloc+0xa2>
 801f4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f500:	681b      	ldr	r3, [r3, #0]
 801f502:	2b00      	cmp	r3, #0
 801f504:	d1f1      	bne.n	801f4ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801f506:	4b35      	ldr	r3, [pc, #212]	; (801f5dc <pvPortMalloc+0x178>)
 801f508:	681b      	ldr	r3, [r3, #0]
 801f50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f50c:	429a      	cmp	r2, r3
 801f50e:	d04a      	beq.n	801f5a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801f510:	6a3b      	ldr	r3, [r7, #32]
 801f512:	681b      	ldr	r3, [r3, #0]
 801f514:	2208      	movs	r2, #8
 801f516:	4413      	add	r3, r2
 801f518:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801f51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f51c:	681a      	ldr	r2, [r3, #0]
 801f51e:	6a3b      	ldr	r3, [r7, #32]
 801f520:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801f522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f524:	685a      	ldr	r2, [r3, #4]
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	1ad2      	subs	r2, r2, r3
 801f52a:	2308      	movs	r3, #8
 801f52c:	005b      	lsls	r3, r3, #1
 801f52e:	429a      	cmp	r2, r3
 801f530:	d91e      	bls.n	801f570 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801f532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f534:	687b      	ldr	r3, [r7, #4]
 801f536:	4413      	add	r3, r2
 801f538:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801f53a:	69bb      	ldr	r3, [r7, #24]
 801f53c:	f003 0307 	and.w	r3, r3, #7
 801f540:	2b00      	cmp	r3, #0
 801f542:	d009      	beq.n	801f558 <pvPortMalloc+0xf4>
 801f544:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f548:	f383 8811 	msr	BASEPRI, r3
 801f54c:	f3bf 8f6f 	isb	sy
 801f550:	f3bf 8f4f 	dsb	sy
 801f554:	613b      	str	r3, [r7, #16]
 801f556:	e7fe      	b.n	801f556 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801f558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f55a:	685a      	ldr	r2, [r3, #4]
 801f55c:	687b      	ldr	r3, [r7, #4]
 801f55e:	1ad2      	subs	r2, r2, r3
 801f560:	69bb      	ldr	r3, [r7, #24]
 801f562:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801f564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f566:	687a      	ldr	r2, [r7, #4]
 801f568:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801f56a:	69b8      	ldr	r0, [r7, #24]
 801f56c:	f000 f8fc 	bl	801f768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801f570:	4b1c      	ldr	r3, [pc, #112]	; (801f5e4 <pvPortMalloc+0x180>)
 801f572:	681a      	ldr	r2, [r3, #0]
 801f574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f576:	685b      	ldr	r3, [r3, #4]
 801f578:	1ad3      	subs	r3, r2, r3
 801f57a:	4a1a      	ldr	r2, [pc, #104]	; (801f5e4 <pvPortMalloc+0x180>)
 801f57c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801f57e:	4b19      	ldr	r3, [pc, #100]	; (801f5e4 <pvPortMalloc+0x180>)
 801f580:	681a      	ldr	r2, [r3, #0]
 801f582:	4b1a      	ldr	r3, [pc, #104]	; (801f5ec <pvPortMalloc+0x188>)
 801f584:	681b      	ldr	r3, [r3, #0]
 801f586:	429a      	cmp	r2, r3
 801f588:	d203      	bcs.n	801f592 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801f58a:	4b16      	ldr	r3, [pc, #88]	; (801f5e4 <pvPortMalloc+0x180>)
 801f58c:	681b      	ldr	r3, [r3, #0]
 801f58e:	4a17      	ldr	r2, [pc, #92]	; (801f5ec <pvPortMalloc+0x188>)
 801f590:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801f592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f594:	685a      	ldr	r2, [r3, #4]
 801f596:	4b12      	ldr	r3, [pc, #72]	; (801f5e0 <pvPortMalloc+0x17c>)
 801f598:	681b      	ldr	r3, [r3, #0]
 801f59a:	431a      	orrs	r2, r3
 801f59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f59e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801f5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5a2:	2200      	movs	r2, #0
 801f5a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801f5a6:	f001 ff21 	bl	80213ec <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801f5aa:	69fb      	ldr	r3, [r7, #28]
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	d101      	bne.n	801f5b4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801f5b0:	f7f1 fe66 	bl	8011280 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801f5b4:	69fb      	ldr	r3, [r7, #28]
 801f5b6:	f003 0307 	and.w	r3, r3, #7
 801f5ba:	2b00      	cmp	r3, #0
 801f5bc:	d009      	beq.n	801f5d2 <pvPortMalloc+0x16e>
 801f5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f5c2:	f383 8811 	msr	BASEPRI, r3
 801f5c6:	f3bf 8f6f 	isb	sy
 801f5ca:	f3bf 8f4f 	dsb	sy
 801f5ce:	60fb      	str	r3, [r7, #12]
 801f5d0:	e7fe      	b.n	801f5d0 <pvPortMalloc+0x16c>
	return pvReturn;
 801f5d2:	69fb      	ldr	r3, [r7, #28]
}
 801f5d4:	4618      	mov	r0, r3
 801f5d6:	3728      	adds	r7, #40	; 0x28
 801f5d8:	46bd      	mov	sp, r7
 801f5da:	bd80      	pop	{r7, pc}
 801f5dc:	20026e38 	.word	0x20026e38
 801f5e0:	20026e44 	.word	0x20026e44
 801f5e4:	20026e3c 	.word	0x20026e3c
 801f5e8:	20026e30 	.word	0x20026e30
 801f5ec:	20026e40 	.word	0x20026e40

0801f5f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801f5f0:	b580      	push	{r7, lr}
 801f5f2:	b086      	sub	sp, #24
 801f5f4:	af00      	add	r7, sp, #0
 801f5f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801f5f8:	687b      	ldr	r3, [r7, #4]
 801f5fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801f5fc:	687b      	ldr	r3, [r7, #4]
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d046      	beq.n	801f690 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801f602:	2308      	movs	r3, #8
 801f604:	425b      	negs	r3, r3
 801f606:	697a      	ldr	r2, [r7, #20]
 801f608:	4413      	add	r3, r2
 801f60a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801f60c:	697b      	ldr	r3, [r7, #20]
 801f60e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801f610:	693b      	ldr	r3, [r7, #16]
 801f612:	685a      	ldr	r2, [r3, #4]
 801f614:	4b20      	ldr	r3, [pc, #128]	; (801f698 <vPortFree+0xa8>)
 801f616:	681b      	ldr	r3, [r3, #0]
 801f618:	4013      	ands	r3, r2
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	d109      	bne.n	801f632 <vPortFree+0x42>
 801f61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f622:	f383 8811 	msr	BASEPRI, r3
 801f626:	f3bf 8f6f 	isb	sy
 801f62a:	f3bf 8f4f 	dsb	sy
 801f62e:	60fb      	str	r3, [r7, #12]
 801f630:	e7fe      	b.n	801f630 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801f632:	693b      	ldr	r3, [r7, #16]
 801f634:	681b      	ldr	r3, [r3, #0]
 801f636:	2b00      	cmp	r3, #0
 801f638:	d009      	beq.n	801f64e <vPortFree+0x5e>
 801f63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f63e:	f383 8811 	msr	BASEPRI, r3
 801f642:	f3bf 8f6f 	isb	sy
 801f646:	f3bf 8f4f 	dsb	sy
 801f64a:	60bb      	str	r3, [r7, #8]
 801f64c:	e7fe      	b.n	801f64c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801f64e:	693b      	ldr	r3, [r7, #16]
 801f650:	685a      	ldr	r2, [r3, #4]
 801f652:	4b11      	ldr	r3, [pc, #68]	; (801f698 <vPortFree+0xa8>)
 801f654:	681b      	ldr	r3, [r3, #0]
 801f656:	4013      	ands	r3, r2
 801f658:	2b00      	cmp	r3, #0
 801f65a:	d019      	beq.n	801f690 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801f65c:	693b      	ldr	r3, [r7, #16]
 801f65e:	681b      	ldr	r3, [r3, #0]
 801f660:	2b00      	cmp	r3, #0
 801f662:	d115      	bne.n	801f690 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801f664:	693b      	ldr	r3, [r7, #16]
 801f666:	685a      	ldr	r2, [r3, #4]
 801f668:	4b0b      	ldr	r3, [pc, #44]	; (801f698 <vPortFree+0xa8>)
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	43db      	mvns	r3, r3
 801f66e:	401a      	ands	r2, r3
 801f670:	693b      	ldr	r3, [r7, #16]
 801f672:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801f674:	f001 fe74 	bl	8021360 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801f678:	693b      	ldr	r3, [r7, #16]
 801f67a:	685a      	ldr	r2, [r3, #4]
 801f67c:	4b07      	ldr	r3, [pc, #28]	; (801f69c <vPortFree+0xac>)
 801f67e:	681b      	ldr	r3, [r3, #0]
 801f680:	4413      	add	r3, r2
 801f682:	4a06      	ldr	r2, [pc, #24]	; (801f69c <vPortFree+0xac>)
 801f684:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801f686:	6938      	ldr	r0, [r7, #16]
 801f688:	f000 f86e 	bl	801f768 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801f68c:	f001 feae 	bl	80213ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801f690:	bf00      	nop
 801f692:	3718      	adds	r7, #24
 801f694:	46bd      	mov	sp, r7
 801f696:	bd80      	pop	{r7, pc}
 801f698:	20026e44 	.word	0x20026e44
 801f69c:	20026e3c 	.word	0x20026e3c

0801f6a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801f6a0:	b480      	push	{r7}
 801f6a2:	b085      	sub	sp, #20
 801f6a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801f6a6:	4b29      	ldr	r3, [pc, #164]	; (801f74c <prvHeapInit+0xac>)
 801f6a8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801f6aa:	4b29      	ldr	r3, [pc, #164]	; (801f750 <prvHeapInit+0xb0>)
 801f6ac:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801f6ae:	68fb      	ldr	r3, [r7, #12]
 801f6b0:	f003 0307 	and.w	r3, r3, #7
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d00c      	beq.n	801f6d2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801f6b8:	68fb      	ldr	r3, [r7, #12]
 801f6ba:	3307      	adds	r3, #7
 801f6bc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801f6be:	68fb      	ldr	r3, [r7, #12]
 801f6c0:	f023 0307 	bic.w	r3, r3, #7
 801f6c4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801f6c6:	68ba      	ldr	r2, [r7, #8]
 801f6c8:	68fb      	ldr	r3, [r7, #12]
 801f6ca:	1ad3      	subs	r3, r2, r3
 801f6cc:	4a20      	ldr	r2, [pc, #128]	; (801f750 <prvHeapInit+0xb0>)
 801f6ce:	4413      	add	r3, r2
 801f6d0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801f6d2:	68fb      	ldr	r3, [r7, #12]
 801f6d4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801f6d6:	4a1f      	ldr	r2, [pc, #124]	; (801f754 <prvHeapInit+0xb4>)
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801f6dc:	4b1d      	ldr	r3, [pc, #116]	; (801f754 <prvHeapInit+0xb4>)
 801f6de:	2200      	movs	r2, #0
 801f6e0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	68ba      	ldr	r2, [r7, #8]
 801f6e6:	4413      	add	r3, r2
 801f6e8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801f6ea:	2208      	movs	r2, #8
 801f6ec:	68fb      	ldr	r3, [r7, #12]
 801f6ee:	1a9b      	subs	r3, r3, r2
 801f6f0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801f6f2:	68fb      	ldr	r3, [r7, #12]
 801f6f4:	f023 0307 	bic.w	r3, r3, #7
 801f6f8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801f6fa:	68fb      	ldr	r3, [r7, #12]
 801f6fc:	4a16      	ldr	r2, [pc, #88]	; (801f758 <prvHeapInit+0xb8>)
 801f6fe:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801f700:	4b15      	ldr	r3, [pc, #84]	; (801f758 <prvHeapInit+0xb8>)
 801f702:	681b      	ldr	r3, [r3, #0]
 801f704:	2200      	movs	r2, #0
 801f706:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801f708:	4b13      	ldr	r3, [pc, #76]	; (801f758 <prvHeapInit+0xb8>)
 801f70a:	681b      	ldr	r3, [r3, #0]
 801f70c:	2200      	movs	r2, #0
 801f70e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801f710:	687b      	ldr	r3, [r7, #4]
 801f712:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801f714:	683b      	ldr	r3, [r7, #0]
 801f716:	68fa      	ldr	r2, [r7, #12]
 801f718:	1ad2      	subs	r2, r2, r3
 801f71a:	683b      	ldr	r3, [r7, #0]
 801f71c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801f71e:	4b0e      	ldr	r3, [pc, #56]	; (801f758 <prvHeapInit+0xb8>)
 801f720:	681a      	ldr	r2, [r3, #0]
 801f722:	683b      	ldr	r3, [r7, #0]
 801f724:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f726:	683b      	ldr	r3, [r7, #0]
 801f728:	685b      	ldr	r3, [r3, #4]
 801f72a:	4a0c      	ldr	r2, [pc, #48]	; (801f75c <prvHeapInit+0xbc>)
 801f72c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f72e:	683b      	ldr	r3, [r7, #0]
 801f730:	685b      	ldr	r3, [r3, #4]
 801f732:	4a0b      	ldr	r2, [pc, #44]	; (801f760 <prvHeapInit+0xc0>)
 801f734:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801f736:	4b0b      	ldr	r3, [pc, #44]	; (801f764 <prvHeapInit+0xc4>)
 801f738:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801f73c:	601a      	str	r2, [r3, #0]
}
 801f73e:	bf00      	nop
 801f740:	3714      	adds	r7, #20
 801f742:	46bd      	mov	sp, r7
 801f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f748:	4770      	bx	lr
 801f74a:	bf00      	nop
 801f74c:	000249f0 	.word	0x000249f0
 801f750:	20002440 	.word	0x20002440
 801f754:	20026e30 	.word	0x20026e30
 801f758:	20026e38 	.word	0x20026e38
 801f75c:	20026e40 	.word	0x20026e40
 801f760:	20026e3c 	.word	0x20026e3c
 801f764:	20026e44 	.word	0x20026e44

0801f768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801f768:	b480      	push	{r7}
 801f76a:	b085      	sub	sp, #20
 801f76c:	af00      	add	r7, sp, #0
 801f76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801f770:	4b28      	ldr	r3, [pc, #160]	; (801f814 <prvInsertBlockIntoFreeList+0xac>)
 801f772:	60fb      	str	r3, [r7, #12]
 801f774:	e002      	b.n	801f77c <prvInsertBlockIntoFreeList+0x14>
 801f776:	68fb      	ldr	r3, [r7, #12]
 801f778:	681b      	ldr	r3, [r3, #0]
 801f77a:	60fb      	str	r3, [r7, #12]
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	681b      	ldr	r3, [r3, #0]
 801f780:	687a      	ldr	r2, [r7, #4]
 801f782:	429a      	cmp	r2, r3
 801f784:	d8f7      	bhi.n	801f776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801f786:	68fb      	ldr	r3, [r7, #12]
 801f788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801f78a:	68fb      	ldr	r3, [r7, #12]
 801f78c:	685b      	ldr	r3, [r3, #4]
 801f78e:	68ba      	ldr	r2, [r7, #8]
 801f790:	4413      	add	r3, r2
 801f792:	687a      	ldr	r2, [r7, #4]
 801f794:	429a      	cmp	r2, r3
 801f796:	d108      	bne.n	801f7aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801f798:	68fb      	ldr	r3, [r7, #12]
 801f79a:	685a      	ldr	r2, [r3, #4]
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	685b      	ldr	r3, [r3, #4]
 801f7a0:	441a      	add	r2, r3
 801f7a2:	68fb      	ldr	r3, [r7, #12]
 801f7a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801f7a6:	68fb      	ldr	r3, [r7, #12]
 801f7a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	685b      	ldr	r3, [r3, #4]
 801f7b2:	68ba      	ldr	r2, [r7, #8]
 801f7b4:	441a      	add	r2, r3
 801f7b6:	68fb      	ldr	r3, [r7, #12]
 801f7b8:	681b      	ldr	r3, [r3, #0]
 801f7ba:	429a      	cmp	r2, r3
 801f7bc:	d118      	bne.n	801f7f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801f7be:	68fb      	ldr	r3, [r7, #12]
 801f7c0:	681a      	ldr	r2, [r3, #0]
 801f7c2:	4b15      	ldr	r3, [pc, #84]	; (801f818 <prvInsertBlockIntoFreeList+0xb0>)
 801f7c4:	681b      	ldr	r3, [r3, #0]
 801f7c6:	429a      	cmp	r2, r3
 801f7c8:	d00d      	beq.n	801f7e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	685a      	ldr	r2, [r3, #4]
 801f7ce:	68fb      	ldr	r3, [r7, #12]
 801f7d0:	681b      	ldr	r3, [r3, #0]
 801f7d2:	685b      	ldr	r3, [r3, #4]
 801f7d4:	441a      	add	r2, r3
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801f7da:	68fb      	ldr	r3, [r7, #12]
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	681a      	ldr	r2, [r3, #0]
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	601a      	str	r2, [r3, #0]
 801f7e4:	e008      	b.n	801f7f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801f7e6:	4b0c      	ldr	r3, [pc, #48]	; (801f818 <prvInsertBlockIntoFreeList+0xb0>)
 801f7e8:	681a      	ldr	r2, [r3, #0]
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	601a      	str	r2, [r3, #0]
 801f7ee:	e003      	b.n	801f7f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801f7f0:	68fb      	ldr	r3, [r7, #12]
 801f7f2:	681a      	ldr	r2, [r3, #0]
 801f7f4:	687b      	ldr	r3, [r7, #4]
 801f7f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801f7f8:	68fa      	ldr	r2, [r7, #12]
 801f7fa:	687b      	ldr	r3, [r7, #4]
 801f7fc:	429a      	cmp	r2, r3
 801f7fe:	d002      	beq.n	801f806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801f800:	68fb      	ldr	r3, [r7, #12]
 801f802:	687a      	ldr	r2, [r7, #4]
 801f804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f806:	bf00      	nop
 801f808:	3714      	adds	r7, #20
 801f80a:	46bd      	mov	sp, r7
 801f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f810:	4770      	bx	lr
 801f812:	bf00      	nop
 801f814:	20026e30 	.word	0x20026e30
 801f818:	20026e38 	.word	0x20026e38

0801f81c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801f81c:	b480      	push	{r7}
 801f81e:	b083      	sub	sp, #12
 801f820:	af00      	add	r7, sp, #0
 801f822:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f824:	687b      	ldr	r3, [r7, #4]
 801f826:	f103 0208 	add.w	r2, r3, #8
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801f82e:	687b      	ldr	r3, [r7, #4]
 801f830:	f04f 32ff 	mov.w	r2, #4294967295
 801f834:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	f103 0208 	add.w	r2, r3, #8
 801f83c:	687b      	ldr	r3, [r7, #4]
 801f83e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f840:	687b      	ldr	r3, [r7, #4]
 801f842:	f103 0208 	add.w	r2, r3, #8
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801f84a:	687b      	ldr	r3, [r7, #4]
 801f84c:	2200      	movs	r2, #0
 801f84e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801f850:	bf00      	nop
 801f852:	370c      	adds	r7, #12
 801f854:	46bd      	mov	sp, r7
 801f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f85a:	4770      	bx	lr

0801f85c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801f85c:	b480      	push	{r7}
 801f85e:	b083      	sub	sp, #12
 801f860:	af00      	add	r7, sp, #0
 801f862:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801f864:	687b      	ldr	r3, [r7, #4]
 801f866:	2200      	movs	r2, #0
 801f868:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801f86a:	bf00      	nop
 801f86c:	370c      	adds	r7, #12
 801f86e:	46bd      	mov	sp, r7
 801f870:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f874:	4770      	bx	lr

0801f876 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801f876:	b480      	push	{r7}
 801f878:	b085      	sub	sp, #20
 801f87a:	af00      	add	r7, sp, #0
 801f87c:	6078      	str	r0, [r7, #4]
 801f87e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801f880:	687b      	ldr	r3, [r7, #4]
 801f882:	685b      	ldr	r3, [r3, #4]
 801f884:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801f886:	683b      	ldr	r3, [r7, #0]
 801f888:	68fa      	ldr	r2, [r7, #12]
 801f88a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801f88c:	68fb      	ldr	r3, [r7, #12]
 801f88e:	689a      	ldr	r2, [r3, #8]
 801f890:	683b      	ldr	r3, [r7, #0]
 801f892:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801f894:	68fb      	ldr	r3, [r7, #12]
 801f896:	689b      	ldr	r3, [r3, #8]
 801f898:	683a      	ldr	r2, [r7, #0]
 801f89a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801f89c:	68fb      	ldr	r3, [r7, #12]
 801f89e:	683a      	ldr	r2, [r7, #0]
 801f8a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801f8a2:	683b      	ldr	r3, [r7, #0]
 801f8a4:	687a      	ldr	r2, [r7, #4]
 801f8a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	681b      	ldr	r3, [r3, #0]
 801f8ac:	1c5a      	adds	r2, r3, #1
 801f8ae:	687b      	ldr	r3, [r7, #4]
 801f8b0:	601a      	str	r2, [r3, #0]
}
 801f8b2:	bf00      	nop
 801f8b4:	3714      	adds	r7, #20
 801f8b6:	46bd      	mov	sp, r7
 801f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8bc:	4770      	bx	lr

0801f8be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801f8be:	b480      	push	{r7}
 801f8c0:	b085      	sub	sp, #20
 801f8c2:	af00      	add	r7, sp, #0
 801f8c4:	6078      	str	r0, [r7, #4]
 801f8c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801f8c8:	683b      	ldr	r3, [r7, #0]
 801f8ca:	681b      	ldr	r3, [r3, #0]
 801f8cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801f8ce:	68bb      	ldr	r3, [r7, #8]
 801f8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f8d4:	d103      	bne.n	801f8de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	691b      	ldr	r3, [r3, #16]
 801f8da:	60fb      	str	r3, [r7, #12]
 801f8dc:	e00c      	b.n	801f8f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	3308      	adds	r3, #8
 801f8e2:	60fb      	str	r3, [r7, #12]
 801f8e4:	e002      	b.n	801f8ec <vListInsert+0x2e>
 801f8e6:	68fb      	ldr	r3, [r7, #12]
 801f8e8:	685b      	ldr	r3, [r3, #4]
 801f8ea:	60fb      	str	r3, [r7, #12]
 801f8ec:	68fb      	ldr	r3, [r7, #12]
 801f8ee:	685b      	ldr	r3, [r3, #4]
 801f8f0:	681b      	ldr	r3, [r3, #0]
 801f8f2:	68ba      	ldr	r2, [r7, #8]
 801f8f4:	429a      	cmp	r2, r3
 801f8f6:	d2f6      	bcs.n	801f8e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801f8f8:	68fb      	ldr	r3, [r7, #12]
 801f8fa:	685a      	ldr	r2, [r3, #4]
 801f8fc:	683b      	ldr	r3, [r7, #0]
 801f8fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801f900:	683b      	ldr	r3, [r7, #0]
 801f902:	685b      	ldr	r3, [r3, #4]
 801f904:	683a      	ldr	r2, [r7, #0]
 801f906:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801f908:	683b      	ldr	r3, [r7, #0]
 801f90a:	68fa      	ldr	r2, [r7, #12]
 801f90c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801f90e:	68fb      	ldr	r3, [r7, #12]
 801f910:	683a      	ldr	r2, [r7, #0]
 801f912:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801f914:	683b      	ldr	r3, [r7, #0]
 801f916:	687a      	ldr	r2, [r7, #4]
 801f918:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801f91a:	687b      	ldr	r3, [r7, #4]
 801f91c:	681b      	ldr	r3, [r3, #0]
 801f91e:	1c5a      	adds	r2, r3, #1
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	601a      	str	r2, [r3, #0]
}
 801f924:	bf00      	nop
 801f926:	3714      	adds	r7, #20
 801f928:	46bd      	mov	sp, r7
 801f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f92e:	4770      	bx	lr

0801f930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801f930:	b480      	push	{r7}
 801f932:	b085      	sub	sp, #20
 801f934:	af00      	add	r7, sp, #0
 801f936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801f938:	687b      	ldr	r3, [r7, #4]
 801f93a:	691b      	ldr	r3, [r3, #16]
 801f93c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	685b      	ldr	r3, [r3, #4]
 801f942:	687a      	ldr	r2, [r7, #4]
 801f944:	6892      	ldr	r2, [r2, #8]
 801f946:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	689b      	ldr	r3, [r3, #8]
 801f94c:	687a      	ldr	r2, [r7, #4]
 801f94e:	6852      	ldr	r2, [r2, #4]
 801f950:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801f952:	68fb      	ldr	r3, [r7, #12]
 801f954:	685b      	ldr	r3, [r3, #4]
 801f956:	687a      	ldr	r2, [r7, #4]
 801f958:	429a      	cmp	r2, r3
 801f95a:	d103      	bne.n	801f964 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	689a      	ldr	r2, [r3, #8]
 801f960:	68fb      	ldr	r3, [r7, #12]
 801f962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	2200      	movs	r2, #0
 801f968:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801f96a:	68fb      	ldr	r3, [r7, #12]
 801f96c:	681b      	ldr	r3, [r3, #0]
 801f96e:	1e5a      	subs	r2, r3, #1
 801f970:	68fb      	ldr	r3, [r7, #12]
 801f972:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801f974:	68fb      	ldr	r3, [r7, #12]
 801f976:	681b      	ldr	r3, [r3, #0]
}
 801f978:	4618      	mov	r0, r3
 801f97a:	3714      	adds	r7, #20
 801f97c:	46bd      	mov	sp, r7
 801f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f982:	4770      	bx	lr

0801f984 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801f984:	b480      	push	{r7}
 801f986:	b085      	sub	sp, #20
 801f988:	af00      	add	r7, sp, #0
 801f98a:	60f8      	str	r0, [r7, #12]
 801f98c:	60b9      	str	r1, [r7, #8]
 801f98e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801f990:	68fb      	ldr	r3, [r7, #12]
 801f992:	3b04      	subs	r3, #4
 801f994:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801f996:	68fb      	ldr	r3, [r7, #12]
 801f998:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801f99c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801f99e:	68fb      	ldr	r3, [r7, #12]
 801f9a0:	3b04      	subs	r3, #4
 801f9a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801f9a4:	68bb      	ldr	r3, [r7, #8]
 801f9a6:	f023 0201 	bic.w	r2, r3, #1
 801f9aa:	68fb      	ldr	r3, [r7, #12]
 801f9ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801f9ae:	68fb      	ldr	r3, [r7, #12]
 801f9b0:	3b04      	subs	r3, #4
 801f9b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801f9b4:	4a0c      	ldr	r2, [pc, #48]	; (801f9e8 <pxPortInitialiseStack+0x64>)
 801f9b6:	68fb      	ldr	r3, [r7, #12]
 801f9b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801f9ba:	68fb      	ldr	r3, [r7, #12]
 801f9bc:	3b14      	subs	r3, #20
 801f9be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801f9c0:	687a      	ldr	r2, [r7, #4]
 801f9c2:	68fb      	ldr	r3, [r7, #12]
 801f9c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801f9c6:	68fb      	ldr	r3, [r7, #12]
 801f9c8:	3b04      	subs	r3, #4
 801f9ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801f9cc:	68fb      	ldr	r3, [r7, #12]
 801f9ce:	f06f 0202 	mvn.w	r2, #2
 801f9d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801f9d4:	68fb      	ldr	r3, [r7, #12]
 801f9d6:	3b20      	subs	r3, #32
 801f9d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801f9da:	68fb      	ldr	r3, [r7, #12]
}
 801f9dc:	4618      	mov	r0, r3
 801f9de:	3714      	adds	r7, #20
 801f9e0:	46bd      	mov	sp, r7
 801f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9e6:	4770      	bx	lr
 801f9e8:	0801f9ed 	.word	0x0801f9ed

0801f9ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801f9ec:	b480      	push	{r7}
 801f9ee:	b085      	sub	sp, #20
 801f9f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801f9f2:	2300      	movs	r3, #0
 801f9f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801f9f6:	4b11      	ldr	r3, [pc, #68]	; (801fa3c <prvTaskExitError+0x50>)
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f9fe:	d009      	beq.n	801fa14 <prvTaskExitError+0x28>
 801fa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fa04:	f383 8811 	msr	BASEPRI, r3
 801fa08:	f3bf 8f6f 	isb	sy
 801fa0c:	f3bf 8f4f 	dsb	sy
 801fa10:	60fb      	str	r3, [r7, #12]
 801fa12:	e7fe      	b.n	801fa12 <prvTaskExitError+0x26>
 801fa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fa18:	f383 8811 	msr	BASEPRI, r3
 801fa1c:	f3bf 8f6f 	isb	sy
 801fa20:	f3bf 8f4f 	dsb	sy
 801fa24:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801fa26:	bf00      	nop
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	2b00      	cmp	r3, #0
 801fa2c:	d0fc      	beq.n	801fa28 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801fa2e:	bf00      	nop
 801fa30:	3714      	adds	r7, #20
 801fa32:	46bd      	mov	sp, r7
 801fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa38:	4770      	bx	lr
 801fa3a:	bf00      	nop
 801fa3c:	20000084 	.word	0x20000084

0801fa40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801fa40:	4b07      	ldr	r3, [pc, #28]	; (801fa60 <pxCurrentTCBConst2>)
 801fa42:	6819      	ldr	r1, [r3, #0]
 801fa44:	6808      	ldr	r0, [r1, #0]
 801fa46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa4a:	f380 8809 	msr	PSP, r0
 801fa4e:	f3bf 8f6f 	isb	sy
 801fa52:	f04f 0000 	mov.w	r0, #0
 801fa56:	f380 8811 	msr	BASEPRI, r0
 801fa5a:	4770      	bx	lr
 801fa5c:	f3af 8000 	nop.w

0801fa60 <pxCurrentTCBConst2>:
 801fa60:	20026e50 	.word	0x20026e50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801fa64:	bf00      	nop
 801fa66:	bf00      	nop

0801fa68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801fa68:	4808      	ldr	r0, [pc, #32]	; (801fa8c <prvPortStartFirstTask+0x24>)
 801fa6a:	6800      	ldr	r0, [r0, #0]
 801fa6c:	6800      	ldr	r0, [r0, #0]
 801fa6e:	f380 8808 	msr	MSP, r0
 801fa72:	f04f 0000 	mov.w	r0, #0
 801fa76:	f380 8814 	msr	CONTROL, r0
 801fa7a:	b662      	cpsie	i
 801fa7c:	b661      	cpsie	f
 801fa7e:	f3bf 8f4f 	dsb	sy
 801fa82:	f3bf 8f6f 	isb	sy
 801fa86:	df00      	svc	0
 801fa88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801fa8a:	bf00      	nop
 801fa8c:	e000ed08 	.word	0xe000ed08

0801fa90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801fa90:	b580      	push	{r7, lr}
 801fa92:	b086      	sub	sp, #24
 801fa94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801fa96:	4b44      	ldr	r3, [pc, #272]	; (801fba8 <xPortStartScheduler+0x118>)
 801fa98:	681b      	ldr	r3, [r3, #0]
 801fa9a:	4a44      	ldr	r2, [pc, #272]	; (801fbac <xPortStartScheduler+0x11c>)
 801fa9c:	4293      	cmp	r3, r2
 801fa9e:	d109      	bne.n	801fab4 <xPortStartScheduler+0x24>
 801faa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801faa4:	f383 8811 	msr	BASEPRI, r3
 801faa8:	f3bf 8f6f 	isb	sy
 801faac:	f3bf 8f4f 	dsb	sy
 801fab0:	613b      	str	r3, [r7, #16]
 801fab2:	e7fe      	b.n	801fab2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801fab4:	4b3c      	ldr	r3, [pc, #240]	; (801fba8 <xPortStartScheduler+0x118>)
 801fab6:	681b      	ldr	r3, [r3, #0]
 801fab8:	4a3d      	ldr	r2, [pc, #244]	; (801fbb0 <xPortStartScheduler+0x120>)
 801faba:	4293      	cmp	r3, r2
 801fabc:	d109      	bne.n	801fad2 <xPortStartScheduler+0x42>
 801fabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fac2:	f383 8811 	msr	BASEPRI, r3
 801fac6:	f3bf 8f6f 	isb	sy
 801faca:	f3bf 8f4f 	dsb	sy
 801face:	60fb      	str	r3, [r7, #12]
 801fad0:	e7fe      	b.n	801fad0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801fad2:	4b38      	ldr	r3, [pc, #224]	; (801fbb4 <xPortStartScheduler+0x124>)
 801fad4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801fad6:	697b      	ldr	r3, [r7, #20]
 801fad8:	781b      	ldrb	r3, [r3, #0]
 801fada:	b2db      	uxtb	r3, r3
 801fadc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801fade:	697b      	ldr	r3, [r7, #20]
 801fae0:	22ff      	movs	r2, #255	; 0xff
 801fae2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801fae4:	697b      	ldr	r3, [r7, #20]
 801fae6:	781b      	ldrb	r3, [r3, #0]
 801fae8:	b2db      	uxtb	r3, r3
 801faea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801faec:	78fb      	ldrb	r3, [r7, #3]
 801faee:	b2db      	uxtb	r3, r3
 801faf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801faf4:	b2da      	uxtb	r2, r3
 801faf6:	4b30      	ldr	r3, [pc, #192]	; (801fbb8 <xPortStartScheduler+0x128>)
 801faf8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801fafa:	4b30      	ldr	r3, [pc, #192]	; (801fbbc <xPortStartScheduler+0x12c>)
 801fafc:	2207      	movs	r2, #7
 801fafe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801fb00:	e009      	b.n	801fb16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 801fb02:	4b2e      	ldr	r3, [pc, #184]	; (801fbbc <xPortStartScheduler+0x12c>)
 801fb04:	681b      	ldr	r3, [r3, #0]
 801fb06:	3b01      	subs	r3, #1
 801fb08:	4a2c      	ldr	r2, [pc, #176]	; (801fbbc <xPortStartScheduler+0x12c>)
 801fb0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801fb0c:	78fb      	ldrb	r3, [r7, #3]
 801fb0e:	b2db      	uxtb	r3, r3
 801fb10:	005b      	lsls	r3, r3, #1
 801fb12:	b2db      	uxtb	r3, r3
 801fb14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801fb16:	78fb      	ldrb	r3, [r7, #3]
 801fb18:	b2db      	uxtb	r3, r3
 801fb1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fb1e:	2b80      	cmp	r3, #128	; 0x80
 801fb20:	d0ef      	beq.n	801fb02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801fb22:	4b26      	ldr	r3, [pc, #152]	; (801fbbc <xPortStartScheduler+0x12c>)
 801fb24:	681b      	ldr	r3, [r3, #0]
 801fb26:	f1c3 0307 	rsb	r3, r3, #7
 801fb2a:	2b04      	cmp	r3, #4
 801fb2c:	d009      	beq.n	801fb42 <xPortStartScheduler+0xb2>
 801fb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fb32:	f383 8811 	msr	BASEPRI, r3
 801fb36:	f3bf 8f6f 	isb	sy
 801fb3a:	f3bf 8f4f 	dsb	sy
 801fb3e:	60bb      	str	r3, [r7, #8]
 801fb40:	e7fe      	b.n	801fb40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801fb42:	4b1e      	ldr	r3, [pc, #120]	; (801fbbc <xPortStartScheduler+0x12c>)
 801fb44:	681b      	ldr	r3, [r3, #0]
 801fb46:	021b      	lsls	r3, r3, #8
 801fb48:	4a1c      	ldr	r2, [pc, #112]	; (801fbbc <xPortStartScheduler+0x12c>)
 801fb4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801fb4c:	4b1b      	ldr	r3, [pc, #108]	; (801fbbc <xPortStartScheduler+0x12c>)
 801fb4e:	681b      	ldr	r3, [r3, #0]
 801fb50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801fb54:	4a19      	ldr	r2, [pc, #100]	; (801fbbc <xPortStartScheduler+0x12c>)
 801fb56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801fb58:	687b      	ldr	r3, [r7, #4]
 801fb5a:	b2da      	uxtb	r2, r3
 801fb5c:	697b      	ldr	r3, [r7, #20]
 801fb5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801fb60:	4b17      	ldr	r3, [pc, #92]	; (801fbc0 <xPortStartScheduler+0x130>)
 801fb62:	681b      	ldr	r3, [r3, #0]
 801fb64:	4a16      	ldr	r2, [pc, #88]	; (801fbc0 <xPortStartScheduler+0x130>)
 801fb66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801fb6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801fb6c:	4b14      	ldr	r3, [pc, #80]	; (801fbc0 <xPortStartScheduler+0x130>)
 801fb6e:	681b      	ldr	r3, [r3, #0]
 801fb70:	4a13      	ldr	r2, [pc, #76]	; (801fbc0 <xPortStartScheduler+0x130>)
 801fb72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801fb76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801fb78:	f7f2 fbd0 	bl	801231c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801fb7c:	4b11      	ldr	r3, [pc, #68]	; (801fbc4 <xPortStartScheduler+0x134>)
 801fb7e:	2200      	movs	r2, #0
 801fb80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801fb82:	f000 f8d1 	bl	801fd28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801fb86:	4b10      	ldr	r3, [pc, #64]	; (801fbc8 <xPortStartScheduler+0x138>)
 801fb88:	681b      	ldr	r3, [r3, #0]
 801fb8a:	4a0f      	ldr	r2, [pc, #60]	; (801fbc8 <xPortStartScheduler+0x138>)
 801fb8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801fb90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801fb92:	f7ff ff69 	bl	801fa68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801fb96:	f001 fdc1 	bl	802171c <vTaskSwitchContext>
	prvTaskExitError();
 801fb9a:	f7ff ff27 	bl	801f9ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801fb9e:	2300      	movs	r3, #0
}
 801fba0:	4618      	mov	r0, r3
 801fba2:	3718      	adds	r7, #24
 801fba4:	46bd      	mov	sp, r7
 801fba6:	bd80      	pop	{r7, pc}
 801fba8:	e000ed00 	.word	0xe000ed00
 801fbac:	410fc271 	.word	0x410fc271
 801fbb0:	410fc270 	.word	0x410fc270
 801fbb4:	e000e400 	.word	0xe000e400
 801fbb8:	20026e48 	.word	0x20026e48
 801fbbc:	20026e4c 	.word	0x20026e4c
 801fbc0:	e000ed20 	.word	0xe000ed20
 801fbc4:	20000084 	.word	0x20000084
 801fbc8:	e000ef34 	.word	0xe000ef34

0801fbcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801fbcc:	b480      	push	{r7}
 801fbce:	b083      	sub	sp, #12
 801fbd0:	af00      	add	r7, sp, #0
 801fbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fbd6:	f383 8811 	msr	BASEPRI, r3
 801fbda:	f3bf 8f6f 	isb	sy
 801fbde:	f3bf 8f4f 	dsb	sy
 801fbe2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801fbe4:	4b0e      	ldr	r3, [pc, #56]	; (801fc20 <vPortEnterCritical+0x54>)
 801fbe6:	681b      	ldr	r3, [r3, #0]
 801fbe8:	3301      	adds	r3, #1
 801fbea:	4a0d      	ldr	r2, [pc, #52]	; (801fc20 <vPortEnterCritical+0x54>)
 801fbec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801fbee:	4b0c      	ldr	r3, [pc, #48]	; (801fc20 <vPortEnterCritical+0x54>)
 801fbf0:	681b      	ldr	r3, [r3, #0]
 801fbf2:	2b01      	cmp	r3, #1
 801fbf4:	d10e      	bne.n	801fc14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801fbf6:	4b0b      	ldr	r3, [pc, #44]	; (801fc24 <vPortEnterCritical+0x58>)
 801fbf8:	681b      	ldr	r3, [r3, #0]
 801fbfa:	b2db      	uxtb	r3, r3
 801fbfc:	2b00      	cmp	r3, #0
 801fbfe:	d009      	beq.n	801fc14 <vPortEnterCritical+0x48>
 801fc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fc04:	f383 8811 	msr	BASEPRI, r3
 801fc08:	f3bf 8f6f 	isb	sy
 801fc0c:	f3bf 8f4f 	dsb	sy
 801fc10:	603b      	str	r3, [r7, #0]
 801fc12:	e7fe      	b.n	801fc12 <vPortEnterCritical+0x46>
	}
}
 801fc14:	bf00      	nop
 801fc16:	370c      	adds	r7, #12
 801fc18:	46bd      	mov	sp, r7
 801fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc1e:	4770      	bx	lr
 801fc20:	20000084 	.word	0x20000084
 801fc24:	e000ed04 	.word	0xe000ed04

0801fc28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801fc28:	b480      	push	{r7}
 801fc2a:	b083      	sub	sp, #12
 801fc2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801fc2e:	4b11      	ldr	r3, [pc, #68]	; (801fc74 <vPortExitCritical+0x4c>)
 801fc30:	681b      	ldr	r3, [r3, #0]
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	d109      	bne.n	801fc4a <vPortExitCritical+0x22>
 801fc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fc3a:	f383 8811 	msr	BASEPRI, r3
 801fc3e:	f3bf 8f6f 	isb	sy
 801fc42:	f3bf 8f4f 	dsb	sy
 801fc46:	607b      	str	r3, [r7, #4]
 801fc48:	e7fe      	b.n	801fc48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801fc4a:	4b0a      	ldr	r3, [pc, #40]	; (801fc74 <vPortExitCritical+0x4c>)
 801fc4c:	681b      	ldr	r3, [r3, #0]
 801fc4e:	3b01      	subs	r3, #1
 801fc50:	4a08      	ldr	r2, [pc, #32]	; (801fc74 <vPortExitCritical+0x4c>)
 801fc52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801fc54:	4b07      	ldr	r3, [pc, #28]	; (801fc74 <vPortExitCritical+0x4c>)
 801fc56:	681b      	ldr	r3, [r3, #0]
 801fc58:	2b00      	cmp	r3, #0
 801fc5a:	d104      	bne.n	801fc66 <vPortExitCritical+0x3e>
 801fc5c:	2300      	movs	r3, #0
 801fc5e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801fc60:	683b      	ldr	r3, [r7, #0]
 801fc62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801fc66:	bf00      	nop
 801fc68:	370c      	adds	r7, #12
 801fc6a:	46bd      	mov	sp, r7
 801fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc70:	4770      	bx	lr
 801fc72:	bf00      	nop
 801fc74:	20000084 	.word	0x20000084
	...

0801fc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801fc80:	f3ef 8009 	mrs	r0, PSP
 801fc84:	f3bf 8f6f 	isb	sy
 801fc88:	4b15      	ldr	r3, [pc, #84]	; (801fce0 <pxCurrentTCBConst>)
 801fc8a:	681a      	ldr	r2, [r3, #0]
 801fc8c:	f01e 0f10 	tst.w	lr, #16
 801fc90:	bf08      	it	eq
 801fc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801fc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc9a:	6010      	str	r0, [r2, #0]
 801fc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801fca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801fca4:	f380 8811 	msr	BASEPRI, r0
 801fca8:	f3bf 8f4f 	dsb	sy
 801fcac:	f3bf 8f6f 	isb	sy
 801fcb0:	f001 fd34 	bl	802171c <vTaskSwitchContext>
 801fcb4:	f04f 0000 	mov.w	r0, #0
 801fcb8:	f380 8811 	msr	BASEPRI, r0
 801fcbc:	bc09      	pop	{r0, r3}
 801fcbe:	6819      	ldr	r1, [r3, #0]
 801fcc0:	6808      	ldr	r0, [r1, #0]
 801fcc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcc6:	f01e 0f10 	tst.w	lr, #16
 801fcca:	bf08      	it	eq
 801fccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801fcd0:	f380 8809 	msr	PSP, r0
 801fcd4:	f3bf 8f6f 	isb	sy
 801fcd8:	4770      	bx	lr
 801fcda:	bf00      	nop
 801fcdc:	f3af 8000 	nop.w

0801fce0 <pxCurrentTCBConst>:
 801fce0:	20026e50 	.word	0x20026e50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801fce4:	bf00      	nop
 801fce6:	bf00      	nop

0801fce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801fce8:	b580      	push	{r7, lr}
 801fcea:	b082      	sub	sp, #8
 801fcec:	af00      	add	r7, sp, #0
	__asm volatile
 801fcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fcf2:	f383 8811 	msr	BASEPRI, r3
 801fcf6:	f3bf 8f6f 	isb	sy
 801fcfa:	f3bf 8f4f 	dsb	sy
 801fcfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801fd00:	f001 fc46 	bl	8021590 <xTaskIncrementTick>
 801fd04:	4603      	mov	r3, r0
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	d003      	beq.n	801fd12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801fd0a:	4b06      	ldr	r3, [pc, #24]	; (801fd24 <SysTick_Handler+0x3c>)
 801fd0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fd10:	601a      	str	r2, [r3, #0]
 801fd12:	2300      	movs	r3, #0
 801fd14:	603b      	str	r3, [r7, #0]
	__asm volatile
 801fd16:	683b      	ldr	r3, [r7, #0]
 801fd18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801fd1c:	bf00      	nop
 801fd1e:	3708      	adds	r7, #8
 801fd20:	46bd      	mov	sp, r7
 801fd22:	bd80      	pop	{r7, pc}
 801fd24:	e000ed04 	.word	0xe000ed04

0801fd28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801fd28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801fd38 <vPortEnableVFP+0x10>
 801fd2c:	6801      	ldr	r1, [r0, #0]
 801fd2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801fd32:	6001      	str	r1, [r0, #0]
 801fd34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801fd36:	bf00      	nop
 801fd38:	e000ed88 	.word	0xe000ed88

0801fd3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801fd3c:	b480      	push	{r7}
 801fd3e:	b085      	sub	sp, #20
 801fd40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801fd42:	f3ef 8305 	mrs	r3, IPSR
 801fd46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801fd48:	68fb      	ldr	r3, [r7, #12]
 801fd4a:	2b0f      	cmp	r3, #15
 801fd4c:	d913      	bls.n	801fd76 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801fd4e:	4a16      	ldr	r2, [pc, #88]	; (801fda8 <vPortValidateInterruptPriority+0x6c>)
 801fd50:	68fb      	ldr	r3, [r7, #12]
 801fd52:	4413      	add	r3, r2
 801fd54:	781b      	ldrb	r3, [r3, #0]
 801fd56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801fd58:	4b14      	ldr	r3, [pc, #80]	; (801fdac <vPortValidateInterruptPriority+0x70>)
 801fd5a:	781b      	ldrb	r3, [r3, #0]
 801fd5c:	7afa      	ldrb	r2, [r7, #11]
 801fd5e:	429a      	cmp	r2, r3
 801fd60:	d209      	bcs.n	801fd76 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801fd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fd66:	f383 8811 	msr	BASEPRI, r3
 801fd6a:	f3bf 8f6f 	isb	sy
 801fd6e:	f3bf 8f4f 	dsb	sy
 801fd72:	607b      	str	r3, [r7, #4]
 801fd74:	e7fe      	b.n	801fd74 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801fd76:	4b0e      	ldr	r3, [pc, #56]	; (801fdb0 <vPortValidateInterruptPriority+0x74>)
 801fd78:	681b      	ldr	r3, [r3, #0]
 801fd7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801fd7e:	4b0d      	ldr	r3, [pc, #52]	; (801fdb4 <vPortValidateInterruptPriority+0x78>)
 801fd80:	681b      	ldr	r3, [r3, #0]
 801fd82:	429a      	cmp	r2, r3
 801fd84:	d909      	bls.n	801fd9a <vPortValidateInterruptPriority+0x5e>
 801fd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fd8a:	f383 8811 	msr	BASEPRI, r3
 801fd8e:	f3bf 8f6f 	isb	sy
 801fd92:	f3bf 8f4f 	dsb	sy
 801fd96:	603b      	str	r3, [r7, #0]
 801fd98:	e7fe      	b.n	801fd98 <vPortValidateInterruptPriority+0x5c>
	}
 801fd9a:	bf00      	nop
 801fd9c:	3714      	adds	r7, #20
 801fd9e:	46bd      	mov	sp, r7
 801fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fda4:	4770      	bx	lr
 801fda6:	bf00      	nop
 801fda8:	e000e3f0 	.word	0xe000e3f0
 801fdac:	20026e48 	.word	0x20026e48
 801fdb0:	e000ed0c 	.word	0xe000ed0c
 801fdb4:	20026e4c 	.word	0x20026e4c

0801fdb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801fdb8:	b580      	push	{r7, lr}
 801fdba:	b084      	sub	sp, #16
 801fdbc:	af00      	add	r7, sp, #0
 801fdbe:	6078      	str	r0, [r7, #4]
 801fdc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801fdc2:	687b      	ldr	r3, [r7, #4]
 801fdc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801fdc6:	68fb      	ldr	r3, [r7, #12]
 801fdc8:	2b00      	cmp	r3, #0
 801fdca:	d109      	bne.n	801fde0 <xQueueGenericReset+0x28>
 801fdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fdd0:	f383 8811 	msr	BASEPRI, r3
 801fdd4:	f3bf 8f6f 	isb	sy
 801fdd8:	f3bf 8f4f 	dsb	sy
 801fddc:	60bb      	str	r3, [r7, #8]
 801fdde:	e7fe      	b.n	801fdde <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 801fde0:	f7ff fef4 	bl	801fbcc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801fde4:	68fb      	ldr	r3, [r7, #12]
 801fde6:	681a      	ldr	r2, [r3, #0]
 801fde8:	68fb      	ldr	r3, [r7, #12]
 801fdea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fdec:	68f9      	ldr	r1, [r7, #12]
 801fdee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801fdf0:	fb01 f303 	mul.w	r3, r1, r3
 801fdf4:	441a      	add	r2, r3
 801fdf6:	68fb      	ldr	r3, [r7, #12]
 801fdf8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801fdfa:	68fb      	ldr	r3, [r7, #12]
 801fdfc:	2200      	movs	r2, #0
 801fdfe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801fe00:	68fb      	ldr	r3, [r7, #12]
 801fe02:	681a      	ldr	r2, [r3, #0]
 801fe04:	68fb      	ldr	r3, [r7, #12]
 801fe06:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801fe08:	68fb      	ldr	r3, [r7, #12]
 801fe0a:	681a      	ldr	r2, [r3, #0]
 801fe0c:	68fb      	ldr	r3, [r7, #12]
 801fe0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fe10:	3b01      	subs	r3, #1
 801fe12:	68f9      	ldr	r1, [r7, #12]
 801fe14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801fe16:	fb01 f303 	mul.w	r3, r1, r3
 801fe1a:	441a      	add	r2, r3
 801fe1c:	68fb      	ldr	r3, [r7, #12]
 801fe1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801fe20:	68fb      	ldr	r3, [r7, #12]
 801fe22:	22ff      	movs	r2, #255	; 0xff
 801fe24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801fe28:	68fb      	ldr	r3, [r7, #12]
 801fe2a:	22ff      	movs	r2, #255	; 0xff
 801fe2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801fe30:	683b      	ldr	r3, [r7, #0]
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d114      	bne.n	801fe60 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801fe36:	68fb      	ldr	r3, [r7, #12]
 801fe38:	691b      	ldr	r3, [r3, #16]
 801fe3a:	2b00      	cmp	r3, #0
 801fe3c:	d01a      	beq.n	801fe74 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801fe3e:	68fb      	ldr	r3, [r7, #12]
 801fe40:	3310      	adds	r3, #16
 801fe42:	4618      	mov	r0, r3
 801fe44:	f001 fd40 	bl	80218c8 <xTaskRemoveFromEventList>
 801fe48:	4603      	mov	r3, r0
 801fe4a:	2b00      	cmp	r3, #0
 801fe4c:	d012      	beq.n	801fe74 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801fe4e:	4b0d      	ldr	r3, [pc, #52]	; (801fe84 <xQueueGenericReset+0xcc>)
 801fe50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fe54:	601a      	str	r2, [r3, #0]
 801fe56:	f3bf 8f4f 	dsb	sy
 801fe5a:	f3bf 8f6f 	isb	sy
 801fe5e:	e009      	b.n	801fe74 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801fe60:	68fb      	ldr	r3, [r7, #12]
 801fe62:	3310      	adds	r3, #16
 801fe64:	4618      	mov	r0, r3
 801fe66:	f7ff fcd9 	bl	801f81c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801fe6a:	68fb      	ldr	r3, [r7, #12]
 801fe6c:	3324      	adds	r3, #36	; 0x24
 801fe6e:	4618      	mov	r0, r3
 801fe70:	f7ff fcd4 	bl	801f81c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801fe74:	f7ff fed8 	bl	801fc28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801fe78:	2301      	movs	r3, #1
}
 801fe7a:	4618      	mov	r0, r3
 801fe7c:	3710      	adds	r7, #16
 801fe7e:	46bd      	mov	sp, r7
 801fe80:	bd80      	pop	{r7, pc}
 801fe82:	bf00      	nop
 801fe84:	e000ed04 	.word	0xe000ed04

0801fe88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801fe88:	b580      	push	{r7, lr}
 801fe8a:	b08e      	sub	sp, #56	; 0x38
 801fe8c:	af02      	add	r7, sp, #8
 801fe8e:	60f8      	str	r0, [r7, #12]
 801fe90:	60b9      	str	r1, [r7, #8]
 801fe92:	607a      	str	r2, [r7, #4]
 801fe94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801fe96:	68fb      	ldr	r3, [r7, #12]
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	d109      	bne.n	801feb0 <xQueueGenericCreateStatic+0x28>
 801fe9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fea0:	f383 8811 	msr	BASEPRI, r3
 801fea4:	f3bf 8f6f 	isb	sy
 801fea8:	f3bf 8f4f 	dsb	sy
 801feac:	62bb      	str	r3, [r7, #40]	; 0x28
 801feae:	e7fe      	b.n	801feae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801feb0:	683b      	ldr	r3, [r7, #0]
 801feb2:	2b00      	cmp	r3, #0
 801feb4:	d109      	bne.n	801feca <xQueueGenericCreateStatic+0x42>
 801feb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801feba:	f383 8811 	msr	BASEPRI, r3
 801febe:	f3bf 8f6f 	isb	sy
 801fec2:	f3bf 8f4f 	dsb	sy
 801fec6:	627b      	str	r3, [r7, #36]	; 0x24
 801fec8:	e7fe      	b.n	801fec8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801feca:	687b      	ldr	r3, [r7, #4]
 801fecc:	2b00      	cmp	r3, #0
 801fece:	d002      	beq.n	801fed6 <xQueueGenericCreateStatic+0x4e>
 801fed0:	68bb      	ldr	r3, [r7, #8]
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	d001      	beq.n	801feda <xQueueGenericCreateStatic+0x52>
 801fed6:	2301      	movs	r3, #1
 801fed8:	e000      	b.n	801fedc <xQueueGenericCreateStatic+0x54>
 801feda:	2300      	movs	r3, #0
 801fedc:	2b00      	cmp	r3, #0
 801fede:	d109      	bne.n	801fef4 <xQueueGenericCreateStatic+0x6c>
 801fee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fee4:	f383 8811 	msr	BASEPRI, r3
 801fee8:	f3bf 8f6f 	isb	sy
 801feec:	f3bf 8f4f 	dsb	sy
 801fef0:	623b      	str	r3, [r7, #32]
 801fef2:	e7fe      	b.n	801fef2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801fef4:	687b      	ldr	r3, [r7, #4]
 801fef6:	2b00      	cmp	r3, #0
 801fef8:	d102      	bne.n	801ff00 <xQueueGenericCreateStatic+0x78>
 801fefa:	68bb      	ldr	r3, [r7, #8]
 801fefc:	2b00      	cmp	r3, #0
 801fefe:	d101      	bne.n	801ff04 <xQueueGenericCreateStatic+0x7c>
 801ff00:	2301      	movs	r3, #1
 801ff02:	e000      	b.n	801ff06 <xQueueGenericCreateStatic+0x7e>
 801ff04:	2300      	movs	r3, #0
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	d109      	bne.n	801ff1e <xQueueGenericCreateStatic+0x96>
 801ff0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ff0e:	f383 8811 	msr	BASEPRI, r3
 801ff12:	f3bf 8f6f 	isb	sy
 801ff16:	f3bf 8f4f 	dsb	sy
 801ff1a:	61fb      	str	r3, [r7, #28]
 801ff1c:	e7fe      	b.n	801ff1c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801ff1e:	2350      	movs	r3, #80	; 0x50
 801ff20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801ff22:	697b      	ldr	r3, [r7, #20]
 801ff24:	2b50      	cmp	r3, #80	; 0x50
 801ff26:	d009      	beq.n	801ff3c <xQueueGenericCreateStatic+0xb4>
 801ff28:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ff2c:	f383 8811 	msr	BASEPRI, r3
 801ff30:	f3bf 8f6f 	isb	sy
 801ff34:	f3bf 8f4f 	dsb	sy
 801ff38:	61bb      	str	r3, [r7, #24]
 801ff3a:	e7fe      	b.n	801ff3a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ff3c:	683b      	ldr	r3, [r7, #0]
 801ff3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801ff40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff42:	2b00      	cmp	r3, #0
 801ff44:	d00d      	beq.n	801ff62 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801ff46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff48:	2201      	movs	r2, #1
 801ff4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801ff4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801ff52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff54:	9300      	str	r3, [sp, #0]
 801ff56:	4613      	mov	r3, r2
 801ff58:	687a      	ldr	r2, [r7, #4]
 801ff5a:	68b9      	ldr	r1, [r7, #8]
 801ff5c:	68f8      	ldr	r0, [r7, #12]
 801ff5e:	f000 f842 	bl	801ffe6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801ff62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801ff64:	4618      	mov	r0, r3
 801ff66:	3730      	adds	r7, #48	; 0x30
 801ff68:	46bd      	mov	sp, r7
 801ff6a:	bd80      	pop	{r7, pc}

0801ff6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801ff6c:	b580      	push	{r7, lr}
 801ff6e:	b08a      	sub	sp, #40	; 0x28
 801ff70:	af02      	add	r7, sp, #8
 801ff72:	60f8      	str	r0, [r7, #12]
 801ff74:	60b9      	str	r1, [r7, #8]
 801ff76:	4613      	mov	r3, r2
 801ff78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801ff7a:	68fb      	ldr	r3, [r7, #12]
 801ff7c:	2b00      	cmp	r3, #0
 801ff7e:	d109      	bne.n	801ff94 <xQueueGenericCreate+0x28>
 801ff80:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ff84:	f383 8811 	msr	BASEPRI, r3
 801ff88:	f3bf 8f6f 	isb	sy
 801ff8c:	f3bf 8f4f 	dsb	sy
 801ff90:	613b      	str	r3, [r7, #16]
 801ff92:	e7fe      	b.n	801ff92 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801ff94:	68bb      	ldr	r3, [r7, #8]
 801ff96:	2b00      	cmp	r3, #0
 801ff98:	d102      	bne.n	801ffa0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801ff9a:	2300      	movs	r3, #0
 801ff9c:	61fb      	str	r3, [r7, #28]
 801ff9e:	e004      	b.n	801ffaa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ffa0:	68fb      	ldr	r3, [r7, #12]
 801ffa2:	68ba      	ldr	r2, [r7, #8]
 801ffa4:	fb02 f303 	mul.w	r3, r2, r3
 801ffa8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801ffaa:	69fb      	ldr	r3, [r7, #28]
 801ffac:	3350      	adds	r3, #80	; 0x50
 801ffae:	4618      	mov	r0, r3
 801ffb0:	f7ff fa58 	bl	801f464 <pvPortMalloc>
 801ffb4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801ffb6:	69bb      	ldr	r3, [r7, #24]
 801ffb8:	2b00      	cmp	r3, #0
 801ffba:	d00f      	beq.n	801ffdc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 801ffbc:	69bb      	ldr	r3, [r7, #24]
 801ffbe:	3350      	adds	r3, #80	; 0x50
 801ffc0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801ffc2:	69bb      	ldr	r3, [r7, #24]
 801ffc4:	2200      	movs	r2, #0
 801ffc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801ffca:	79fa      	ldrb	r2, [r7, #7]
 801ffcc:	69bb      	ldr	r3, [r7, #24]
 801ffce:	9300      	str	r3, [sp, #0]
 801ffd0:	4613      	mov	r3, r2
 801ffd2:	697a      	ldr	r2, [r7, #20]
 801ffd4:	68b9      	ldr	r1, [r7, #8]
 801ffd6:	68f8      	ldr	r0, [r7, #12]
 801ffd8:	f000 f805 	bl	801ffe6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801ffdc:	69bb      	ldr	r3, [r7, #24]
	}
 801ffde:	4618      	mov	r0, r3
 801ffe0:	3720      	adds	r7, #32
 801ffe2:	46bd      	mov	sp, r7
 801ffe4:	bd80      	pop	{r7, pc}

0801ffe6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801ffe6:	b580      	push	{r7, lr}
 801ffe8:	b084      	sub	sp, #16
 801ffea:	af00      	add	r7, sp, #0
 801ffec:	60f8      	str	r0, [r7, #12]
 801ffee:	60b9      	str	r1, [r7, #8]
 801fff0:	607a      	str	r2, [r7, #4]
 801fff2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801fff4:	68bb      	ldr	r3, [r7, #8]
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	d103      	bne.n	8020002 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801fffa:	69bb      	ldr	r3, [r7, #24]
 801fffc:	69ba      	ldr	r2, [r7, #24]
 801fffe:	601a      	str	r2, [r3, #0]
 8020000:	e002      	b.n	8020008 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8020002:	69bb      	ldr	r3, [r7, #24]
 8020004:	687a      	ldr	r2, [r7, #4]
 8020006:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8020008:	69bb      	ldr	r3, [r7, #24]
 802000a:	68fa      	ldr	r2, [r7, #12]
 802000c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 802000e:	69bb      	ldr	r3, [r7, #24]
 8020010:	68ba      	ldr	r2, [r7, #8]
 8020012:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8020014:	2101      	movs	r1, #1
 8020016:	69b8      	ldr	r0, [r7, #24]
 8020018:	f7ff fece 	bl	801fdb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 802001c:	69bb      	ldr	r3, [r7, #24]
 802001e:	78fa      	ldrb	r2, [r7, #3]
 8020020:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8020024:	bf00      	nop
 8020026:	3710      	adds	r7, #16
 8020028:	46bd      	mov	sp, r7
 802002a:	bd80      	pop	{r7, pc}

0802002c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 802002c:	b580      	push	{r7, lr}
 802002e:	b082      	sub	sp, #8
 8020030:	af00      	add	r7, sp, #0
 8020032:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	2b00      	cmp	r3, #0
 8020038:	d00e      	beq.n	8020058 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	2200      	movs	r2, #0
 802003e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8020040:	687b      	ldr	r3, [r7, #4]
 8020042:	2200      	movs	r2, #0
 8020044:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8020046:	687b      	ldr	r3, [r7, #4]
 8020048:	2200      	movs	r2, #0
 802004a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 802004c:	2300      	movs	r3, #0
 802004e:	2200      	movs	r2, #0
 8020050:	2100      	movs	r1, #0
 8020052:	6878      	ldr	r0, [r7, #4]
 8020054:	f000 f906 	bl	8020264 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8020058:	bf00      	nop
 802005a:	3708      	adds	r7, #8
 802005c:	46bd      	mov	sp, r7
 802005e:	bd80      	pop	{r7, pc}

08020060 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8020060:	b580      	push	{r7, lr}
 8020062:	b086      	sub	sp, #24
 8020064:	af00      	add	r7, sp, #0
 8020066:	4603      	mov	r3, r0
 8020068:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 802006a:	2301      	movs	r3, #1
 802006c:	617b      	str	r3, [r7, #20]
 802006e:	2300      	movs	r3, #0
 8020070:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8020072:	79fb      	ldrb	r3, [r7, #7]
 8020074:	461a      	mov	r2, r3
 8020076:	6939      	ldr	r1, [r7, #16]
 8020078:	6978      	ldr	r0, [r7, #20]
 802007a:	f7ff ff77 	bl	801ff6c <xQueueGenericCreate>
 802007e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8020080:	68f8      	ldr	r0, [r7, #12]
 8020082:	f7ff ffd3 	bl	802002c <prvInitialiseMutex>

		return pxNewQueue;
 8020086:	68fb      	ldr	r3, [r7, #12]
	}
 8020088:	4618      	mov	r0, r3
 802008a:	3718      	adds	r7, #24
 802008c:	46bd      	mov	sp, r7
 802008e:	bd80      	pop	{r7, pc}

08020090 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8020090:	b580      	push	{r7, lr}
 8020092:	b088      	sub	sp, #32
 8020094:	af02      	add	r7, sp, #8
 8020096:	4603      	mov	r3, r0
 8020098:	6039      	str	r1, [r7, #0]
 802009a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 802009c:	2301      	movs	r3, #1
 802009e:	617b      	str	r3, [r7, #20]
 80200a0:	2300      	movs	r3, #0
 80200a2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80200a4:	79fb      	ldrb	r3, [r7, #7]
 80200a6:	9300      	str	r3, [sp, #0]
 80200a8:	683b      	ldr	r3, [r7, #0]
 80200aa:	2200      	movs	r2, #0
 80200ac:	6939      	ldr	r1, [r7, #16]
 80200ae:	6978      	ldr	r0, [r7, #20]
 80200b0:	f7ff feea 	bl	801fe88 <xQueueGenericCreateStatic>
 80200b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80200b6:	68f8      	ldr	r0, [r7, #12]
 80200b8:	f7ff ffb8 	bl	802002c <prvInitialiseMutex>

		return pxNewQueue;
 80200bc:	68fb      	ldr	r3, [r7, #12]
	}
 80200be:	4618      	mov	r0, r3
 80200c0:	3718      	adds	r7, #24
 80200c2:	46bd      	mov	sp, r7
 80200c4:	bd80      	pop	{r7, pc}

080200c6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80200c6:	b590      	push	{r4, r7, lr}
 80200c8:	b087      	sub	sp, #28
 80200ca:	af00      	add	r7, sp, #0
 80200cc:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80200d2:	693b      	ldr	r3, [r7, #16]
 80200d4:	2b00      	cmp	r3, #0
 80200d6:	d109      	bne.n	80200ec <xQueueGiveMutexRecursive+0x26>
 80200d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80200dc:	f383 8811 	msr	BASEPRI, r3
 80200e0:	f3bf 8f6f 	isb	sy
 80200e4:	f3bf 8f4f 	dsb	sy
 80200e8:	60fb      	str	r3, [r7, #12]
 80200ea:	e7fe      	b.n	80200ea <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80200ec:	693b      	ldr	r3, [r7, #16]
 80200ee:	685c      	ldr	r4, [r3, #4]
 80200f0:	f001 fdfc 	bl	8021cec <xTaskGetCurrentTaskHandle>
 80200f4:	4603      	mov	r3, r0
 80200f6:	429c      	cmp	r4, r3
 80200f8:	d111      	bne.n	802011e <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80200fa:	693b      	ldr	r3, [r7, #16]
 80200fc:	68db      	ldr	r3, [r3, #12]
 80200fe:	1e5a      	subs	r2, r3, #1
 8020100:	693b      	ldr	r3, [r7, #16]
 8020102:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8020104:	693b      	ldr	r3, [r7, #16]
 8020106:	68db      	ldr	r3, [r3, #12]
 8020108:	2b00      	cmp	r3, #0
 802010a:	d105      	bne.n	8020118 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 802010c:	2300      	movs	r3, #0
 802010e:	2200      	movs	r2, #0
 8020110:	2100      	movs	r1, #0
 8020112:	6938      	ldr	r0, [r7, #16]
 8020114:	f000 f8a6 	bl	8020264 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8020118:	2301      	movs	r3, #1
 802011a:	617b      	str	r3, [r7, #20]
 802011c:	e001      	b.n	8020122 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 802011e:	2300      	movs	r3, #0
 8020120:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8020122:	697b      	ldr	r3, [r7, #20]
	}
 8020124:	4618      	mov	r0, r3
 8020126:	371c      	adds	r7, #28
 8020128:	46bd      	mov	sp, r7
 802012a:	bd90      	pop	{r4, r7, pc}

0802012c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 802012c:	b590      	push	{r4, r7, lr}
 802012e:	b087      	sub	sp, #28
 8020130:	af00      	add	r7, sp, #0
 8020132:	6078      	str	r0, [r7, #4]
 8020134:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020136:	687b      	ldr	r3, [r7, #4]
 8020138:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 802013a:	693b      	ldr	r3, [r7, #16]
 802013c:	2b00      	cmp	r3, #0
 802013e:	d109      	bne.n	8020154 <xQueueTakeMutexRecursive+0x28>
 8020140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020144:	f383 8811 	msr	BASEPRI, r3
 8020148:	f3bf 8f6f 	isb	sy
 802014c:	f3bf 8f4f 	dsb	sy
 8020150:	60fb      	str	r3, [r7, #12]
 8020152:	e7fe      	b.n	8020152 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8020154:	693b      	ldr	r3, [r7, #16]
 8020156:	685c      	ldr	r4, [r3, #4]
 8020158:	f001 fdc8 	bl	8021cec <xTaskGetCurrentTaskHandle>
 802015c:	4603      	mov	r3, r0
 802015e:	429c      	cmp	r4, r3
 8020160:	d107      	bne.n	8020172 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8020162:	693b      	ldr	r3, [r7, #16]
 8020164:	68db      	ldr	r3, [r3, #12]
 8020166:	1c5a      	adds	r2, r3, #1
 8020168:	693b      	ldr	r3, [r7, #16]
 802016a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 802016c:	2301      	movs	r3, #1
 802016e:	617b      	str	r3, [r7, #20]
 8020170:	e00c      	b.n	802018c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8020172:	6839      	ldr	r1, [r7, #0]
 8020174:	6938      	ldr	r0, [r7, #16]
 8020176:	f000 fb69 	bl	802084c <xQueueSemaphoreTake>
 802017a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 802017c:	697b      	ldr	r3, [r7, #20]
 802017e:	2b00      	cmp	r3, #0
 8020180:	d004      	beq.n	802018c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8020182:	693b      	ldr	r3, [r7, #16]
 8020184:	68db      	ldr	r3, [r3, #12]
 8020186:	1c5a      	adds	r2, r3, #1
 8020188:	693b      	ldr	r3, [r7, #16]
 802018a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 802018c:	697b      	ldr	r3, [r7, #20]
	}
 802018e:	4618      	mov	r0, r3
 8020190:	371c      	adds	r7, #28
 8020192:	46bd      	mov	sp, r7
 8020194:	bd90      	pop	{r4, r7, pc}

08020196 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8020196:	b580      	push	{r7, lr}
 8020198:	b08a      	sub	sp, #40	; 0x28
 802019a:	af02      	add	r7, sp, #8
 802019c:	60f8      	str	r0, [r7, #12]
 802019e:	60b9      	str	r1, [r7, #8]
 80201a0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80201a2:	68fb      	ldr	r3, [r7, #12]
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	d109      	bne.n	80201bc <xQueueCreateCountingSemaphoreStatic+0x26>
 80201a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80201ac:	f383 8811 	msr	BASEPRI, r3
 80201b0:	f3bf 8f6f 	isb	sy
 80201b4:	f3bf 8f4f 	dsb	sy
 80201b8:	61bb      	str	r3, [r7, #24]
 80201ba:	e7fe      	b.n	80201ba <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80201bc:	68ba      	ldr	r2, [r7, #8]
 80201be:	68fb      	ldr	r3, [r7, #12]
 80201c0:	429a      	cmp	r2, r3
 80201c2:	d909      	bls.n	80201d8 <xQueueCreateCountingSemaphoreStatic+0x42>
 80201c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80201c8:	f383 8811 	msr	BASEPRI, r3
 80201cc:	f3bf 8f6f 	isb	sy
 80201d0:	f3bf 8f4f 	dsb	sy
 80201d4:	617b      	str	r3, [r7, #20]
 80201d6:	e7fe      	b.n	80201d6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80201d8:	2302      	movs	r3, #2
 80201da:	9300      	str	r3, [sp, #0]
 80201dc:	687b      	ldr	r3, [r7, #4]
 80201de:	2200      	movs	r2, #0
 80201e0:	2100      	movs	r1, #0
 80201e2:	68f8      	ldr	r0, [r7, #12]
 80201e4:	f7ff fe50 	bl	801fe88 <xQueueGenericCreateStatic>
 80201e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80201ea:	69fb      	ldr	r3, [r7, #28]
 80201ec:	2b00      	cmp	r3, #0
 80201ee:	d002      	beq.n	80201f6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80201f0:	69fb      	ldr	r3, [r7, #28]
 80201f2:	68ba      	ldr	r2, [r7, #8]
 80201f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80201f6:	69fb      	ldr	r3, [r7, #28]
	}
 80201f8:	4618      	mov	r0, r3
 80201fa:	3720      	adds	r7, #32
 80201fc:	46bd      	mov	sp, r7
 80201fe:	bd80      	pop	{r7, pc}

08020200 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8020200:	b580      	push	{r7, lr}
 8020202:	b086      	sub	sp, #24
 8020204:	af00      	add	r7, sp, #0
 8020206:	6078      	str	r0, [r7, #4]
 8020208:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	2b00      	cmp	r3, #0
 802020e:	d109      	bne.n	8020224 <xQueueCreateCountingSemaphore+0x24>
 8020210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020214:	f383 8811 	msr	BASEPRI, r3
 8020218:	f3bf 8f6f 	isb	sy
 802021c:	f3bf 8f4f 	dsb	sy
 8020220:	613b      	str	r3, [r7, #16]
 8020222:	e7fe      	b.n	8020222 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8020224:	683a      	ldr	r2, [r7, #0]
 8020226:	687b      	ldr	r3, [r7, #4]
 8020228:	429a      	cmp	r2, r3
 802022a:	d909      	bls.n	8020240 <xQueueCreateCountingSemaphore+0x40>
 802022c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020230:	f383 8811 	msr	BASEPRI, r3
 8020234:	f3bf 8f6f 	isb	sy
 8020238:	f3bf 8f4f 	dsb	sy
 802023c:	60fb      	str	r3, [r7, #12]
 802023e:	e7fe      	b.n	802023e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8020240:	2202      	movs	r2, #2
 8020242:	2100      	movs	r1, #0
 8020244:	6878      	ldr	r0, [r7, #4]
 8020246:	f7ff fe91 	bl	801ff6c <xQueueGenericCreate>
 802024a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 802024c:	697b      	ldr	r3, [r7, #20]
 802024e:	2b00      	cmp	r3, #0
 8020250:	d002      	beq.n	8020258 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8020252:	697b      	ldr	r3, [r7, #20]
 8020254:	683a      	ldr	r2, [r7, #0]
 8020256:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8020258:	697b      	ldr	r3, [r7, #20]
	}
 802025a:	4618      	mov	r0, r3
 802025c:	3718      	adds	r7, #24
 802025e:	46bd      	mov	sp, r7
 8020260:	bd80      	pop	{r7, pc}
	...

08020264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8020264:	b580      	push	{r7, lr}
 8020266:	b08e      	sub	sp, #56	; 0x38
 8020268:	af00      	add	r7, sp, #0
 802026a:	60f8      	str	r0, [r7, #12]
 802026c:	60b9      	str	r1, [r7, #8]
 802026e:	607a      	str	r2, [r7, #4]
 8020270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8020272:	2300      	movs	r3, #0
 8020274:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8020276:	68fb      	ldr	r3, [r7, #12]
 8020278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 802027a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802027c:	2b00      	cmp	r3, #0
 802027e:	d109      	bne.n	8020294 <xQueueGenericSend+0x30>
 8020280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020284:	f383 8811 	msr	BASEPRI, r3
 8020288:	f3bf 8f6f 	isb	sy
 802028c:	f3bf 8f4f 	dsb	sy
 8020290:	62bb      	str	r3, [r7, #40]	; 0x28
 8020292:	e7fe      	b.n	8020292 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020294:	68bb      	ldr	r3, [r7, #8]
 8020296:	2b00      	cmp	r3, #0
 8020298:	d103      	bne.n	80202a2 <xQueueGenericSend+0x3e>
 802029a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802029c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802029e:	2b00      	cmp	r3, #0
 80202a0:	d101      	bne.n	80202a6 <xQueueGenericSend+0x42>
 80202a2:	2301      	movs	r3, #1
 80202a4:	e000      	b.n	80202a8 <xQueueGenericSend+0x44>
 80202a6:	2300      	movs	r3, #0
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	d109      	bne.n	80202c0 <xQueueGenericSend+0x5c>
 80202ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80202b0:	f383 8811 	msr	BASEPRI, r3
 80202b4:	f3bf 8f6f 	isb	sy
 80202b8:	f3bf 8f4f 	dsb	sy
 80202bc:	627b      	str	r3, [r7, #36]	; 0x24
 80202be:	e7fe      	b.n	80202be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80202c0:	683b      	ldr	r3, [r7, #0]
 80202c2:	2b02      	cmp	r3, #2
 80202c4:	d103      	bne.n	80202ce <xQueueGenericSend+0x6a>
 80202c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80202c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80202ca:	2b01      	cmp	r3, #1
 80202cc:	d101      	bne.n	80202d2 <xQueueGenericSend+0x6e>
 80202ce:	2301      	movs	r3, #1
 80202d0:	e000      	b.n	80202d4 <xQueueGenericSend+0x70>
 80202d2:	2300      	movs	r3, #0
 80202d4:	2b00      	cmp	r3, #0
 80202d6:	d109      	bne.n	80202ec <xQueueGenericSend+0x88>
 80202d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80202dc:	f383 8811 	msr	BASEPRI, r3
 80202e0:	f3bf 8f6f 	isb	sy
 80202e4:	f3bf 8f4f 	dsb	sy
 80202e8:	623b      	str	r3, [r7, #32]
 80202ea:	e7fe      	b.n	80202ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80202ec:	f001 fd0e 	bl	8021d0c <xTaskGetSchedulerState>
 80202f0:	4603      	mov	r3, r0
 80202f2:	2b00      	cmp	r3, #0
 80202f4:	d102      	bne.n	80202fc <xQueueGenericSend+0x98>
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	2b00      	cmp	r3, #0
 80202fa:	d101      	bne.n	8020300 <xQueueGenericSend+0x9c>
 80202fc:	2301      	movs	r3, #1
 80202fe:	e000      	b.n	8020302 <xQueueGenericSend+0x9e>
 8020300:	2300      	movs	r3, #0
 8020302:	2b00      	cmp	r3, #0
 8020304:	d109      	bne.n	802031a <xQueueGenericSend+0xb6>
 8020306:	f04f 0350 	mov.w	r3, #80	; 0x50
 802030a:	f383 8811 	msr	BASEPRI, r3
 802030e:	f3bf 8f6f 	isb	sy
 8020312:	f3bf 8f4f 	dsb	sy
 8020316:	61fb      	str	r3, [r7, #28]
 8020318:	e7fe      	b.n	8020318 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802031a:	f7ff fc57 	bl	801fbcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802031e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020326:	429a      	cmp	r2, r3
 8020328:	d302      	bcc.n	8020330 <xQueueGenericSend+0xcc>
 802032a:	683b      	ldr	r3, [r7, #0]
 802032c:	2b02      	cmp	r3, #2
 802032e:	d129      	bne.n	8020384 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020330:	683a      	ldr	r2, [r7, #0]
 8020332:	68b9      	ldr	r1, [r7, #8]
 8020334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020336:	f000 fc48 	bl	8020bca <prvCopyDataToQueue>
 802033a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802033c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802033e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020340:	2b00      	cmp	r3, #0
 8020342:	d010      	beq.n	8020366 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020346:	3324      	adds	r3, #36	; 0x24
 8020348:	4618      	mov	r0, r3
 802034a:	f001 fabd 	bl	80218c8 <xTaskRemoveFromEventList>
 802034e:	4603      	mov	r3, r0
 8020350:	2b00      	cmp	r3, #0
 8020352:	d013      	beq.n	802037c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8020354:	4b3f      	ldr	r3, [pc, #252]	; (8020454 <xQueueGenericSend+0x1f0>)
 8020356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802035a:	601a      	str	r2, [r3, #0]
 802035c:	f3bf 8f4f 	dsb	sy
 8020360:	f3bf 8f6f 	isb	sy
 8020364:	e00a      	b.n	802037c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8020366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020368:	2b00      	cmp	r3, #0
 802036a:	d007      	beq.n	802037c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 802036c:	4b39      	ldr	r3, [pc, #228]	; (8020454 <xQueueGenericSend+0x1f0>)
 802036e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020372:	601a      	str	r2, [r3, #0]
 8020374:	f3bf 8f4f 	dsb	sy
 8020378:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 802037c:	f7ff fc54 	bl	801fc28 <vPortExitCritical>
				return pdPASS;
 8020380:	2301      	movs	r3, #1
 8020382:	e063      	b.n	802044c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	2b00      	cmp	r3, #0
 8020388:	d103      	bne.n	8020392 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802038a:	f7ff fc4d 	bl	801fc28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 802038e:	2300      	movs	r3, #0
 8020390:	e05c      	b.n	802044c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020394:	2b00      	cmp	r3, #0
 8020396:	d106      	bne.n	80203a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020398:	f107 0314 	add.w	r3, r7, #20
 802039c:	4618      	mov	r0, r3
 802039e:	f001 faf7 	bl	8021990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80203a2:	2301      	movs	r3, #1
 80203a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80203a6:	f7ff fc3f 	bl	801fc28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80203aa:	f000 ffd9 	bl	8021360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80203ae:	f7ff fc0d 	bl	801fbcc <vPortEnterCritical>
 80203b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80203b8:	b25b      	sxtb	r3, r3
 80203ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80203be:	d103      	bne.n	80203c8 <xQueueGenericSend+0x164>
 80203c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203c2:	2200      	movs	r2, #0
 80203c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80203c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80203ce:	b25b      	sxtb	r3, r3
 80203d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80203d4:	d103      	bne.n	80203de <xQueueGenericSend+0x17a>
 80203d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203d8:	2200      	movs	r2, #0
 80203da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80203de:	f7ff fc23 	bl	801fc28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80203e2:	1d3a      	adds	r2, r7, #4
 80203e4:	f107 0314 	add.w	r3, r7, #20
 80203e8:	4611      	mov	r1, r2
 80203ea:	4618      	mov	r0, r3
 80203ec:	f001 fae6 	bl	80219bc <xTaskCheckForTimeOut>
 80203f0:	4603      	mov	r3, r0
 80203f2:	2b00      	cmp	r3, #0
 80203f4:	d124      	bne.n	8020440 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80203f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80203f8:	f000 fcdf 	bl	8020dba <prvIsQueueFull>
 80203fc:	4603      	mov	r3, r0
 80203fe:	2b00      	cmp	r3, #0
 8020400:	d018      	beq.n	8020434 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8020402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020404:	3310      	adds	r3, #16
 8020406:	687a      	ldr	r2, [r7, #4]
 8020408:	4611      	mov	r1, r2
 802040a:	4618      	mov	r0, r3
 802040c:	f001 fa0e 	bl	802182c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8020410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020412:	f000 fc6a 	bl	8020cea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8020416:	f000 ffe9 	bl	80213ec <xTaskResumeAll>
 802041a:	4603      	mov	r3, r0
 802041c:	2b00      	cmp	r3, #0
 802041e:	f47f af7c 	bne.w	802031a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8020422:	4b0c      	ldr	r3, [pc, #48]	; (8020454 <xQueueGenericSend+0x1f0>)
 8020424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020428:	601a      	str	r2, [r3, #0]
 802042a:	f3bf 8f4f 	dsb	sy
 802042e:	f3bf 8f6f 	isb	sy
 8020432:	e772      	b.n	802031a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8020434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020436:	f000 fc58 	bl	8020cea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802043a:	f000 ffd7 	bl	80213ec <xTaskResumeAll>
 802043e:	e76c      	b.n	802031a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8020440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020442:	f000 fc52 	bl	8020cea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020446:	f000 ffd1 	bl	80213ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 802044a:	2300      	movs	r3, #0
		}
	}
}
 802044c:	4618      	mov	r0, r3
 802044e:	3738      	adds	r7, #56	; 0x38
 8020450:	46bd      	mov	sp, r7
 8020452:	bd80      	pop	{r7, pc}
 8020454:	e000ed04 	.word	0xe000ed04

08020458 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8020458:	b580      	push	{r7, lr}
 802045a:	b08e      	sub	sp, #56	; 0x38
 802045c:	af00      	add	r7, sp, #0
 802045e:	60f8      	str	r0, [r7, #12]
 8020460:	60b9      	str	r1, [r7, #8]
 8020462:	607a      	str	r2, [r7, #4]
 8020464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8020466:	68fb      	ldr	r3, [r7, #12]
 8020468:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 802046a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802046c:	2b00      	cmp	r3, #0
 802046e:	d109      	bne.n	8020484 <xQueueGenericSendFromISR+0x2c>
 8020470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020474:	f383 8811 	msr	BASEPRI, r3
 8020478:	f3bf 8f6f 	isb	sy
 802047c:	f3bf 8f4f 	dsb	sy
 8020480:	627b      	str	r3, [r7, #36]	; 0x24
 8020482:	e7fe      	b.n	8020482 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020484:	68bb      	ldr	r3, [r7, #8]
 8020486:	2b00      	cmp	r3, #0
 8020488:	d103      	bne.n	8020492 <xQueueGenericSendFromISR+0x3a>
 802048a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802048c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802048e:	2b00      	cmp	r3, #0
 8020490:	d101      	bne.n	8020496 <xQueueGenericSendFromISR+0x3e>
 8020492:	2301      	movs	r3, #1
 8020494:	e000      	b.n	8020498 <xQueueGenericSendFromISR+0x40>
 8020496:	2300      	movs	r3, #0
 8020498:	2b00      	cmp	r3, #0
 802049a:	d109      	bne.n	80204b0 <xQueueGenericSendFromISR+0x58>
 802049c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80204a0:	f383 8811 	msr	BASEPRI, r3
 80204a4:	f3bf 8f6f 	isb	sy
 80204a8:	f3bf 8f4f 	dsb	sy
 80204ac:	623b      	str	r3, [r7, #32]
 80204ae:	e7fe      	b.n	80204ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80204b0:	683b      	ldr	r3, [r7, #0]
 80204b2:	2b02      	cmp	r3, #2
 80204b4:	d103      	bne.n	80204be <xQueueGenericSendFromISR+0x66>
 80204b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80204ba:	2b01      	cmp	r3, #1
 80204bc:	d101      	bne.n	80204c2 <xQueueGenericSendFromISR+0x6a>
 80204be:	2301      	movs	r3, #1
 80204c0:	e000      	b.n	80204c4 <xQueueGenericSendFromISR+0x6c>
 80204c2:	2300      	movs	r3, #0
 80204c4:	2b00      	cmp	r3, #0
 80204c6:	d109      	bne.n	80204dc <xQueueGenericSendFromISR+0x84>
 80204c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80204cc:	f383 8811 	msr	BASEPRI, r3
 80204d0:	f3bf 8f6f 	isb	sy
 80204d4:	f3bf 8f4f 	dsb	sy
 80204d8:	61fb      	str	r3, [r7, #28]
 80204da:	e7fe      	b.n	80204da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80204dc:	f7ff fc2e 	bl	801fd3c <vPortValidateInterruptPriority>
	__asm volatile
 80204e0:	f3ef 8211 	mrs	r2, BASEPRI
 80204e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80204e8:	f383 8811 	msr	BASEPRI, r3
 80204ec:	f3bf 8f6f 	isb	sy
 80204f0:	f3bf 8f4f 	dsb	sy
 80204f4:	61ba      	str	r2, [r7, #24]
 80204f6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80204f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80204fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80204fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020504:	429a      	cmp	r2, r3
 8020506:	d302      	bcc.n	802050e <xQueueGenericSendFromISR+0xb6>
 8020508:	683b      	ldr	r3, [r7, #0]
 802050a:	2b02      	cmp	r3, #2
 802050c:	d12c      	bne.n	8020568 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 802050e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020518:	683a      	ldr	r2, [r7, #0]
 802051a:	68b9      	ldr	r1, [r7, #8]
 802051c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802051e:	f000 fb54 	bl	8020bca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8020522:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8020526:	f1b3 3fff 	cmp.w	r3, #4294967295
 802052a:	d112      	bne.n	8020552 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802052c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802052e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020530:	2b00      	cmp	r3, #0
 8020532:	d016      	beq.n	8020562 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020536:	3324      	adds	r3, #36	; 0x24
 8020538:	4618      	mov	r0, r3
 802053a:	f001 f9c5 	bl	80218c8 <xTaskRemoveFromEventList>
 802053e:	4603      	mov	r3, r0
 8020540:	2b00      	cmp	r3, #0
 8020542:	d00e      	beq.n	8020562 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	2b00      	cmp	r3, #0
 8020548:	d00b      	beq.n	8020562 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	2201      	movs	r2, #1
 802054e:	601a      	str	r2, [r3, #0]
 8020550:	e007      	b.n	8020562 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8020552:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8020556:	3301      	adds	r3, #1
 8020558:	b2db      	uxtb	r3, r3
 802055a:	b25a      	sxtb	r2, r3
 802055c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802055e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8020562:	2301      	movs	r3, #1
 8020564:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8020566:	e001      	b.n	802056c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8020568:	2300      	movs	r3, #0
 802056a:	637b      	str	r3, [r7, #52]	; 0x34
 802056c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802056e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8020570:	693b      	ldr	r3, [r7, #16]
 8020572:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8020578:	4618      	mov	r0, r3
 802057a:	3738      	adds	r7, #56	; 0x38
 802057c:	46bd      	mov	sp, r7
 802057e:	bd80      	pop	{r7, pc}

08020580 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8020580:	b580      	push	{r7, lr}
 8020582:	b08e      	sub	sp, #56	; 0x38
 8020584:	af00      	add	r7, sp, #0
 8020586:	6078      	str	r0, [r7, #4]
 8020588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 802058a:	687b      	ldr	r3, [r7, #4]
 802058c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 802058e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020590:	2b00      	cmp	r3, #0
 8020592:	d109      	bne.n	80205a8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8020594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020598:	f383 8811 	msr	BASEPRI, r3
 802059c:	f3bf 8f6f 	isb	sy
 80205a0:	f3bf 8f4f 	dsb	sy
 80205a4:	623b      	str	r3, [r7, #32]
 80205a6:	e7fe      	b.n	80205a6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80205a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80205ac:	2b00      	cmp	r3, #0
 80205ae:	d009      	beq.n	80205c4 <xQueueGiveFromISR+0x44>
 80205b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80205b4:	f383 8811 	msr	BASEPRI, r3
 80205b8:	f3bf 8f6f 	isb	sy
 80205bc:	f3bf 8f4f 	dsb	sy
 80205c0:	61fb      	str	r3, [r7, #28]
 80205c2:	e7fe      	b.n	80205c2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80205c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205c6:	681b      	ldr	r3, [r3, #0]
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	d103      	bne.n	80205d4 <xQueueGiveFromISR+0x54>
 80205cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205ce:	685b      	ldr	r3, [r3, #4]
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	d101      	bne.n	80205d8 <xQueueGiveFromISR+0x58>
 80205d4:	2301      	movs	r3, #1
 80205d6:	e000      	b.n	80205da <xQueueGiveFromISR+0x5a>
 80205d8:	2300      	movs	r3, #0
 80205da:	2b00      	cmp	r3, #0
 80205dc:	d109      	bne.n	80205f2 <xQueueGiveFromISR+0x72>
 80205de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80205e2:	f383 8811 	msr	BASEPRI, r3
 80205e6:	f3bf 8f6f 	isb	sy
 80205ea:	f3bf 8f4f 	dsb	sy
 80205ee:	61bb      	str	r3, [r7, #24]
 80205f0:	e7fe      	b.n	80205f0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80205f2:	f7ff fba3 	bl	801fd3c <vPortValidateInterruptPriority>
	__asm volatile
 80205f6:	f3ef 8211 	mrs	r2, BASEPRI
 80205fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80205fe:	f383 8811 	msr	BASEPRI, r3
 8020602:	f3bf 8f6f 	isb	sy
 8020606:	f3bf 8f4f 	dsb	sy
 802060a:	617a      	str	r2, [r7, #20]
 802060c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 802060e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8020610:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020616:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8020618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802061a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802061c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802061e:	429a      	cmp	r2, r3
 8020620:	d22b      	bcs.n	802067a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8020622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802062c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802062e:	1c5a      	adds	r2, r3, #1
 8020630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020632:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8020634:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8020638:	f1b3 3fff 	cmp.w	r3, #4294967295
 802063c:	d112      	bne.n	8020664 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802063e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020642:	2b00      	cmp	r3, #0
 8020644:	d016      	beq.n	8020674 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020648:	3324      	adds	r3, #36	; 0x24
 802064a:	4618      	mov	r0, r3
 802064c:	f001 f93c 	bl	80218c8 <xTaskRemoveFromEventList>
 8020650:	4603      	mov	r3, r0
 8020652:	2b00      	cmp	r3, #0
 8020654:	d00e      	beq.n	8020674 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8020656:	683b      	ldr	r3, [r7, #0]
 8020658:	2b00      	cmp	r3, #0
 802065a:	d00b      	beq.n	8020674 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 802065c:	683b      	ldr	r3, [r7, #0]
 802065e:	2201      	movs	r2, #1
 8020660:	601a      	str	r2, [r3, #0]
 8020662:	e007      	b.n	8020674 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8020664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020668:	3301      	adds	r3, #1
 802066a:	b2db      	uxtb	r3, r3
 802066c:	b25a      	sxtb	r2, r3
 802066e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8020674:	2301      	movs	r3, #1
 8020676:	637b      	str	r3, [r7, #52]	; 0x34
 8020678:	e001      	b.n	802067e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 802067a:	2300      	movs	r3, #0
 802067c:	637b      	str	r3, [r7, #52]	; 0x34
 802067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020680:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8020682:	68fb      	ldr	r3, [r7, #12]
 8020684:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 802068a:	4618      	mov	r0, r3
 802068c:	3738      	adds	r7, #56	; 0x38
 802068e:	46bd      	mov	sp, r7
 8020690:	bd80      	pop	{r7, pc}
	...

08020694 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8020694:	b580      	push	{r7, lr}
 8020696:	b08c      	sub	sp, #48	; 0x30
 8020698:	af00      	add	r7, sp, #0
 802069a:	60f8      	str	r0, [r7, #12]
 802069c:	60b9      	str	r1, [r7, #8]
 802069e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80206a0:	2300      	movs	r3, #0
 80206a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80206a4:	68fb      	ldr	r3, [r7, #12]
 80206a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80206a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206aa:	2b00      	cmp	r3, #0
 80206ac:	d109      	bne.n	80206c2 <xQueueReceive+0x2e>
	__asm volatile
 80206ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80206b2:	f383 8811 	msr	BASEPRI, r3
 80206b6:	f3bf 8f6f 	isb	sy
 80206ba:	f3bf 8f4f 	dsb	sy
 80206be:	623b      	str	r3, [r7, #32]
 80206c0:	e7fe      	b.n	80206c0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80206c2:	68bb      	ldr	r3, [r7, #8]
 80206c4:	2b00      	cmp	r3, #0
 80206c6:	d103      	bne.n	80206d0 <xQueueReceive+0x3c>
 80206c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206cc:	2b00      	cmp	r3, #0
 80206ce:	d101      	bne.n	80206d4 <xQueueReceive+0x40>
 80206d0:	2301      	movs	r3, #1
 80206d2:	e000      	b.n	80206d6 <xQueueReceive+0x42>
 80206d4:	2300      	movs	r3, #0
 80206d6:	2b00      	cmp	r3, #0
 80206d8:	d109      	bne.n	80206ee <xQueueReceive+0x5a>
 80206da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80206de:	f383 8811 	msr	BASEPRI, r3
 80206e2:	f3bf 8f6f 	isb	sy
 80206e6:	f3bf 8f4f 	dsb	sy
 80206ea:	61fb      	str	r3, [r7, #28]
 80206ec:	e7fe      	b.n	80206ec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80206ee:	f001 fb0d 	bl	8021d0c <xTaskGetSchedulerState>
 80206f2:	4603      	mov	r3, r0
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	d102      	bne.n	80206fe <xQueueReceive+0x6a>
 80206f8:	687b      	ldr	r3, [r7, #4]
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d101      	bne.n	8020702 <xQueueReceive+0x6e>
 80206fe:	2301      	movs	r3, #1
 8020700:	e000      	b.n	8020704 <xQueueReceive+0x70>
 8020702:	2300      	movs	r3, #0
 8020704:	2b00      	cmp	r3, #0
 8020706:	d109      	bne.n	802071c <xQueueReceive+0x88>
 8020708:	f04f 0350 	mov.w	r3, #80	; 0x50
 802070c:	f383 8811 	msr	BASEPRI, r3
 8020710:	f3bf 8f6f 	isb	sy
 8020714:	f3bf 8f4f 	dsb	sy
 8020718:	61bb      	str	r3, [r7, #24]
 802071a:	e7fe      	b.n	802071a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 802071c:	f7ff fa56 	bl	801fbcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020724:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8020726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020728:	2b00      	cmp	r3, #0
 802072a:	d01f      	beq.n	802076c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 802072c:	68b9      	ldr	r1, [r7, #8]
 802072e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020730:	f000 fab5 	bl	8020c9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8020734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020736:	1e5a      	subs	r2, r3, #1
 8020738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802073a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802073c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802073e:	691b      	ldr	r3, [r3, #16]
 8020740:	2b00      	cmp	r3, #0
 8020742:	d00f      	beq.n	8020764 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020746:	3310      	adds	r3, #16
 8020748:	4618      	mov	r0, r3
 802074a:	f001 f8bd 	bl	80218c8 <xTaskRemoveFromEventList>
 802074e:	4603      	mov	r3, r0
 8020750:	2b00      	cmp	r3, #0
 8020752:	d007      	beq.n	8020764 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8020754:	4b3c      	ldr	r3, [pc, #240]	; (8020848 <xQueueReceive+0x1b4>)
 8020756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802075a:	601a      	str	r2, [r3, #0]
 802075c:	f3bf 8f4f 	dsb	sy
 8020760:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8020764:	f7ff fa60 	bl	801fc28 <vPortExitCritical>
				return pdPASS;
 8020768:	2301      	movs	r3, #1
 802076a:	e069      	b.n	8020840 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	2b00      	cmp	r3, #0
 8020770:	d103      	bne.n	802077a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020772:	f7ff fa59 	bl	801fc28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8020776:	2300      	movs	r3, #0
 8020778:	e062      	b.n	8020840 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 802077a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802077c:	2b00      	cmp	r3, #0
 802077e:	d106      	bne.n	802078e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020780:	f107 0310 	add.w	r3, r7, #16
 8020784:	4618      	mov	r0, r3
 8020786:	f001 f903 	bl	8021990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802078a:	2301      	movs	r3, #1
 802078c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802078e:	f7ff fa4b 	bl	801fc28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020792:	f000 fde5 	bl	8021360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020796:	f7ff fa19 	bl	801fbcc <vPortEnterCritical>
 802079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802079c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80207a0:	b25b      	sxtb	r3, r3
 80207a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80207a6:	d103      	bne.n	80207b0 <xQueueReceive+0x11c>
 80207a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207aa:	2200      	movs	r2, #0
 80207ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80207b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80207b6:	b25b      	sxtb	r3, r3
 80207b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80207bc:	d103      	bne.n	80207c6 <xQueueReceive+0x132>
 80207be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207c0:	2200      	movs	r2, #0
 80207c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80207c6:	f7ff fa2f 	bl	801fc28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80207ca:	1d3a      	adds	r2, r7, #4
 80207cc:	f107 0310 	add.w	r3, r7, #16
 80207d0:	4611      	mov	r1, r2
 80207d2:	4618      	mov	r0, r3
 80207d4:	f001 f8f2 	bl	80219bc <xTaskCheckForTimeOut>
 80207d8:	4603      	mov	r3, r0
 80207da:	2b00      	cmp	r3, #0
 80207dc:	d123      	bne.n	8020826 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80207de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80207e0:	f000 fad5 	bl	8020d8e <prvIsQueueEmpty>
 80207e4:	4603      	mov	r3, r0
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	d017      	beq.n	802081a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80207ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207ec:	3324      	adds	r3, #36	; 0x24
 80207ee:	687a      	ldr	r2, [r7, #4]
 80207f0:	4611      	mov	r1, r2
 80207f2:	4618      	mov	r0, r3
 80207f4:	f001 f81a 	bl	802182c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80207f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80207fa:	f000 fa76 	bl	8020cea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80207fe:	f000 fdf5 	bl	80213ec <xTaskResumeAll>
 8020802:	4603      	mov	r3, r0
 8020804:	2b00      	cmp	r3, #0
 8020806:	d189      	bne.n	802071c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8020808:	4b0f      	ldr	r3, [pc, #60]	; (8020848 <xQueueReceive+0x1b4>)
 802080a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802080e:	601a      	str	r2, [r3, #0]
 8020810:	f3bf 8f4f 	dsb	sy
 8020814:	f3bf 8f6f 	isb	sy
 8020818:	e780      	b.n	802071c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 802081a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802081c:	f000 fa65 	bl	8020cea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020820:	f000 fde4 	bl	80213ec <xTaskResumeAll>
 8020824:	e77a      	b.n	802071c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8020826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020828:	f000 fa5f 	bl	8020cea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802082c:	f000 fdde 	bl	80213ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020832:	f000 faac 	bl	8020d8e <prvIsQueueEmpty>
 8020836:	4603      	mov	r3, r0
 8020838:	2b00      	cmp	r3, #0
 802083a:	f43f af6f 	beq.w	802071c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802083e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8020840:	4618      	mov	r0, r3
 8020842:	3730      	adds	r7, #48	; 0x30
 8020844:	46bd      	mov	sp, r7
 8020846:	bd80      	pop	{r7, pc}
 8020848:	e000ed04 	.word	0xe000ed04

0802084c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 802084c:	b580      	push	{r7, lr}
 802084e:	b08e      	sub	sp, #56	; 0x38
 8020850:	af00      	add	r7, sp, #0
 8020852:	6078      	str	r0, [r7, #4]
 8020854:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8020856:	2300      	movs	r3, #0
 8020858:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 802085a:	687b      	ldr	r3, [r7, #4]
 802085c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 802085e:	2300      	movs	r3, #0
 8020860:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020864:	2b00      	cmp	r3, #0
 8020866:	d109      	bne.n	802087c <xQueueSemaphoreTake+0x30>
 8020868:	f04f 0350 	mov.w	r3, #80	; 0x50
 802086c:	f383 8811 	msr	BASEPRI, r3
 8020870:	f3bf 8f6f 	isb	sy
 8020874:	f3bf 8f4f 	dsb	sy
 8020878:	623b      	str	r3, [r7, #32]
 802087a:	e7fe      	b.n	802087a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 802087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020880:	2b00      	cmp	r3, #0
 8020882:	d009      	beq.n	8020898 <xQueueSemaphoreTake+0x4c>
 8020884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020888:	f383 8811 	msr	BASEPRI, r3
 802088c:	f3bf 8f6f 	isb	sy
 8020890:	f3bf 8f4f 	dsb	sy
 8020894:	61fb      	str	r3, [r7, #28]
 8020896:	e7fe      	b.n	8020896 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020898:	f001 fa38 	bl	8021d0c <xTaskGetSchedulerState>
 802089c:	4603      	mov	r3, r0
 802089e:	2b00      	cmp	r3, #0
 80208a0:	d102      	bne.n	80208a8 <xQueueSemaphoreTake+0x5c>
 80208a2:	683b      	ldr	r3, [r7, #0]
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	d101      	bne.n	80208ac <xQueueSemaphoreTake+0x60>
 80208a8:	2301      	movs	r3, #1
 80208aa:	e000      	b.n	80208ae <xQueueSemaphoreTake+0x62>
 80208ac:	2300      	movs	r3, #0
 80208ae:	2b00      	cmp	r3, #0
 80208b0:	d109      	bne.n	80208c6 <xQueueSemaphoreTake+0x7a>
 80208b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80208b6:	f383 8811 	msr	BASEPRI, r3
 80208ba:	f3bf 8f6f 	isb	sy
 80208be:	f3bf 8f4f 	dsb	sy
 80208c2:	61bb      	str	r3, [r7, #24]
 80208c4:	e7fe      	b.n	80208c4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80208c6:	f7ff f981 	bl	801fbcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80208ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80208ce:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80208d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	d024      	beq.n	8020920 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80208d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208d8:	1e5a      	subs	r2, r3, #1
 80208da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208dc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80208de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208e0:	681b      	ldr	r3, [r3, #0]
 80208e2:	2b00      	cmp	r3, #0
 80208e4:	d104      	bne.n	80208f0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80208e6:	f001 fb8d 	bl	8022004 <pvTaskIncrementMutexHeldCount>
 80208ea:	4602      	mov	r2, r0
 80208ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208ee:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80208f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208f2:	691b      	ldr	r3, [r3, #16]
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	d00f      	beq.n	8020918 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80208f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208fa:	3310      	adds	r3, #16
 80208fc:	4618      	mov	r0, r3
 80208fe:	f000 ffe3 	bl	80218c8 <xTaskRemoveFromEventList>
 8020902:	4603      	mov	r3, r0
 8020904:	2b00      	cmp	r3, #0
 8020906:	d007      	beq.n	8020918 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8020908:	4b53      	ldr	r3, [pc, #332]	; (8020a58 <xQueueSemaphoreTake+0x20c>)
 802090a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802090e:	601a      	str	r2, [r3, #0]
 8020910:	f3bf 8f4f 	dsb	sy
 8020914:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8020918:	f7ff f986 	bl	801fc28 <vPortExitCritical>
				return pdPASS;
 802091c:	2301      	movs	r3, #1
 802091e:	e096      	b.n	8020a4e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020920:	683b      	ldr	r3, [r7, #0]
 8020922:	2b00      	cmp	r3, #0
 8020924:	d110      	bne.n	8020948 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8020926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020928:	2b00      	cmp	r3, #0
 802092a:	d009      	beq.n	8020940 <xQueueSemaphoreTake+0xf4>
 802092c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020930:	f383 8811 	msr	BASEPRI, r3
 8020934:	f3bf 8f6f 	isb	sy
 8020938:	f3bf 8f4f 	dsb	sy
 802093c:	617b      	str	r3, [r7, #20]
 802093e:	e7fe      	b.n	802093e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8020940:	f7ff f972 	bl	801fc28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8020944:	2300      	movs	r3, #0
 8020946:	e082      	b.n	8020a4e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802094a:	2b00      	cmp	r3, #0
 802094c:	d106      	bne.n	802095c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802094e:	f107 030c 	add.w	r3, r7, #12
 8020952:	4618      	mov	r0, r3
 8020954:	f001 f81c 	bl	8021990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020958:	2301      	movs	r3, #1
 802095a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802095c:	f7ff f964 	bl	801fc28 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020960:	f000 fcfe 	bl	8021360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020964:	f7ff f932 	bl	801fbcc <vPortEnterCritical>
 8020968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802096a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802096e:	b25b      	sxtb	r3, r3
 8020970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020974:	d103      	bne.n	802097e <xQueueSemaphoreTake+0x132>
 8020976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020978:	2200      	movs	r2, #0
 802097a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802097e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020984:	b25b      	sxtb	r3, r3
 8020986:	f1b3 3fff 	cmp.w	r3, #4294967295
 802098a:	d103      	bne.n	8020994 <xQueueSemaphoreTake+0x148>
 802098c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802098e:	2200      	movs	r2, #0
 8020990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020994:	f7ff f948 	bl	801fc28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020998:	463a      	mov	r2, r7
 802099a:	f107 030c 	add.w	r3, r7, #12
 802099e:	4611      	mov	r1, r2
 80209a0:	4618      	mov	r0, r3
 80209a2:	f001 f80b 	bl	80219bc <xTaskCheckForTimeOut>
 80209a6:	4603      	mov	r3, r0
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	d132      	bne.n	8020a12 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80209ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80209ae:	f000 f9ee 	bl	8020d8e <prvIsQueueEmpty>
 80209b2:	4603      	mov	r3, r0
 80209b4:	2b00      	cmp	r3, #0
 80209b6:	d026      	beq.n	8020a06 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80209b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209ba:	681b      	ldr	r3, [r3, #0]
 80209bc:	2b00      	cmp	r3, #0
 80209be:	d109      	bne.n	80209d4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80209c0:	f7ff f904 	bl	801fbcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80209c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209c6:	685b      	ldr	r3, [r3, #4]
 80209c8:	4618      	mov	r0, r3
 80209ca:	f001 f9bd 	bl	8021d48 <xTaskPriorityInherit>
 80209ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80209d0:	f7ff f92a 	bl	801fc28 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80209d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209d6:	3324      	adds	r3, #36	; 0x24
 80209d8:	683a      	ldr	r2, [r7, #0]
 80209da:	4611      	mov	r1, r2
 80209dc:	4618      	mov	r0, r3
 80209de:	f000 ff25 	bl	802182c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80209e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80209e4:	f000 f981 	bl	8020cea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80209e8:	f000 fd00 	bl	80213ec <xTaskResumeAll>
 80209ec:	4603      	mov	r3, r0
 80209ee:	2b00      	cmp	r3, #0
 80209f0:	f47f af69 	bne.w	80208c6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80209f4:	4b18      	ldr	r3, [pc, #96]	; (8020a58 <xQueueSemaphoreTake+0x20c>)
 80209f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80209fa:	601a      	str	r2, [r3, #0]
 80209fc:	f3bf 8f4f 	dsb	sy
 8020a00:	f3bf 8f6f 	isb	sy
 8020a04:	e75f      	b.n	80208c6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8020a06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020a08:	f000 f96f 	bl	8020cea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020a0c:	f000 fcee 	bl	80213ec <xTaskResumeAll>
 8020a10:	e759      	b.n	80208c6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8020a12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020a14:	f000 f969 	bl	8020cea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020a18:	f000 fce8 	bl	80213ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020a1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020a1e:	f000 f9b6 	bl	8020d8e <prvIsQueueEmpty>
 8020a22:	4603      	mov	r3, r0
 8020a24:	2b00      	cmp	r3, #0
 8020a26:	f43f af4e 	beq.w	80208c6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8020a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	d00d      	beq.n	8020a4c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8020a30:	f7ff f8cc 	bl	801fbcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8020a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020a36:	f000 f8b0 	bl	8020b9a <prvGetDisinheritPriorityAfterTimeout>
 8020a3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8020a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a3e:	685b      	ldr	r3, [r3, #4]
 8020a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020a42:	4618      	mov	r0, r3
 8020a44:	f001 fa5a 	bl	8021efc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8020a48:	f7ff f8ee 	bl	801fc28 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8020a4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8020a4e:	4618      	mov	r0, r3
 8020a50:	3738      	adds	r7, #56	; 0x38
 8020a52:	46bd      	mov	sp, r7
 8020a54:	bd80      	pop	{r7, pc}
 8020a56:	bf00      	nop
 8020a58:	e000ed04 	.word	0xe000ed04

08020a5c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8020a5c:	b580      	push	{r7, lr}
 8020a5e:	b08e      	sub	sp, #56	; 0x38
 8020a60:	af00      	add	r7, sp, #0
 8020a62:	60f8      	str	r0, [r7, #12]
 8020a64:	60b9      	str	r1, [r7, #8]
 8020a66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8020a68:	68fb      	ldr	r3, [r7, #12]
 8020a6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8020a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a6e:	2b00      	cmp	r3, #0
 8020a70:	d109      	bne.n	8020a86 <xQueueReceiveFromISR+0x2a>
 8020a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a76:	f383 8811 	msr	BASEPRI, r3
 8020a7a:	f3bf 8f6f 	isb	sy
 8020a7e:	f3bf 8f4f 	dsb	sy
 8020a82:	623b      	str	r3, [r7, #32]
 8020a84:	e7fe      	b.n	8020a84 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020a86:	68bb      	ldr	r3, [r7, #8]
 8020a88:	2b00      	cmp	r3, #0
 8020a8a:	d103      	bne.n	8020a94 <xQueueReceiveFromISR+0x38>
 8020a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	d101      	bne.n	8020a98 <xQueueReceiveFromISR+0x3c>
 8020a94:	2301      	movs	r3, #1
 8020a96:	e000      	b.n	8020a9a <xQueueReceiveFromISR+0x3e>
 8020a98:	2300      	movs	r3, #0
 8020a9a:	2b00      	cmp	r3, #0
 8020a9c:	d109      	bne.n	8020ab2 <xQueueReceiveFromISR+0x56>
 8020a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020aa2:	f383 8811 	msr	BASEPRI, r3
 8020aa6:	f3bf 8f6f 	isb	sy
 8020aaa:	f3bf 8f4f 	dsb	sy
 8020aae:	61fb      	str	r3, [r7, #28]
 8020ab0:	e7fe      	b.n	8020ab0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8020ab2:	f7ff f943 	bl	801fd3c <vPortValidateInterruptPriority>
	__asm volatile
 8020ab6:	f3ef 8211 	mrs	r2, BASEPRI
 8020aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020abe:	f383 8811 	msr	BASEPRI, r3
 8020ac2:	f3bf 8f6f 	isb	sy
 8020ac6:	f3bf 8f4f 	dsb	sy
 8020aca:	61ba      	str	r2, [r7, #24]
 8020acc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8020ace:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8020ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ad6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8020ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ada:	2b00      	cmp	r3, #0
 8020adc:	d02f      	beq.n	8020b3e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8020ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8020ae8:	68b9      	ldr	r1, [r7, #8]
 8020aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020aec:	f000 f8d7 	bl	8020c9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8020af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020af2:	1e5a      	subs	r2, r3, #1
 8020af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020af6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8020af8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8020afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020b00:	d112      	bne.n	8020b28 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b04:	691b      	ldr	r3, [r3, #16]
 8020b06:	2b00      	cmp	r3, #0
 8020b08:	d016      	beq.n	8020b38 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b0c:	3310      	adds	r3, #16
 8020b0e:	4618      	mov	r0, r3
 8020b10:	f000 feda 	bl	80218c8 <xTaskRemoveFromEventList>
 8020b14:	4603      	mov	r3, r0
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d00e      	beq.n	8020b38 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	2b00      	cmp	r3, #0
 8020b1e:	d00b      	beq.n	8020b38 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8020b20:	687b      	ldr	r3, [r7, #4]
 8020b22:	2201      	movs	r2, #1
 8020b24:	601a      	str	r2, [r3, #0]
 8020b26:	e007      	b.n	8020b38 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8020b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020b2c:	3301      	adds	r3, #1
 8020b2e:	b2db      	uxtb	r3, r3
 8020b30:	b25a      	sxtb	r2, r3
 8020b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8020b38:	2301      	movs	r3, #1
 8020b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8020b3c:	e001      	b.n	8020b42 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8020b3e:	2300      	movs	r3, #0
 8020b40:	637b      	str	r3, [r7, #52]	; 0x34
 8020b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8020b46:	693b      	ldr	r3, [r7, #16]
 8020b48:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8020b4e:	4618      	mov	r0, r3
 8020b50:	3738      	adds	r7, #56	; 0x38
 8020b52:	46bd      	mov	sp, r7
 8020b54:	bd80      	pop	{r7, pc}

08020b56 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8020b56:	b580      	push	{r7, lr}
 8020b58:	b084      	sub	sp, #16
 8020b5a:	af00      	add	r7, sp, #0
 8020b5c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8020b5e:	687b      	ldr	r3, [r7, #4]
 8020b60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8020b62:	68fb      	ldr	r3, [r7, #12]
 8020b64:	2b00      	cmp	r3, #0
 8020b66:	d109      	bne.n	8020b7c <vQueueDelete+0x26>
	__asm volatile
 8020b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b6c:	f383 8811 	msr	BASEPRI, r3
 8020b70:	f3bf 8f6f 	isb	sy
 8020b74:	f3bf 8f4f 	dsb	sy
 8020b78:	60bb      	str	r3, [r7, #8]
 8020b7a:	e7fe      	b.n	8020b7a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8020b7c:	68f8      	ldr	r0, [r7, #12]
 8020b7e:	f000 f95d 	bl	8020e3c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8020b82:	68fb      	ldr	r3, [r7, #12]
 8020b84:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8020b88:	2b00      	cmp	r3, #0
 8020b8a:	d102      	bne.n	8020b92 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8020b8c:	68f8      	ldr	r0, [r7, #12]
 8020b8e:	f7fe fd2f 	bl	801f5f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8020b92:	bf00      	nop
 8020b94:	3710      	adds	r7, #16
 8020b96:	46bd      	mov	sp, r7
 8020b98:	bd80      	pop	{r7, pc}

08020b9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8020b9a:	b480      	push	{r7}
 8020b9c:	b085      	sub	sp, #20
 8020b9e:	af00      	add	r7, sp, #0
 8020ba0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8020ba2:	687b      	ldr	r3, [r7, #4]
 8020ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ba6:	2b00      	cmp	r3, #0
 8020ba8:	d006      	beq.n	8020bb8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8020baa:	687b      	ldr	r3, [r7, #4]
 8020bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020bae:	681b      	ldr	r3, [r3, #0]
 8020bb0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8020bb4:	60fb      	str	r3, [r7, #12]
 8020bb6:	e001      	b.n	8020bbc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8020bb8:	2300      	movs	r3, #0
 8020bba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8020bbc:	68fb      	ldr	r3, [r7, #12]
	}
 8020bbe:	4618      	mov	r0, r3
 8020bc0:	3714      	adds	r7, #20
 8020bc2:	46bd      	mov	sp, r7
 8020bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bc8:	4770      	bx	lr

08020bca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8020bca:	b580      	push	{r7, lr}
 8020bcc:	b086      	sub	sp, #24
 8020bce:	af00      	add	r7, sp, #0
 8020bd0:	60f8      	str	r0, [r7, #12]
 8020bd2:	60b9      	str	r1, [r7, #8]
 8020bd4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8020bd6:	2300      	movs	r3, #0
 8020bd8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020bde:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8020be0:	68fb      	ldr	r3, [r7, #12]
 8020be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020be4:	2b00      	cmp	r3, #0
 8020be6:	d10d      	bne.n	8020c04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	681b      	ldr	r3, [r3, #0]
 8020bec:	2b00      	cmp	r3, #0
 8020bee:	d14d      	bne.n	8020c8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8020bf0:	68fb      	ldr	r3, [r7, #12]
 8020bf2:	685b      	ldr	r3, [r3, #4]
 8020bf4:	4618      	mov	r0, r3
 8020bf6:	f001 f915 	bl	8021e24 <xTaskPriorityDisinherit>
 8020bfa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8020bfc:	68fb      	ldr	r3, [r7, #12]
 8020bfe:	2200      	movs	r2, #0
 8020c00:	605a      	str	r2, [r3, #4]
 8020c02:	e043      	b.n	8020c8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8020c04:	687b      	ldr	r3, [r7, #4]
 8020c06:	2b00      	cmp	r3, #0
 8020c08:	d119      	bne.n	8020c3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8020c0a:	68fb      	ldr	r3, [r7, #12]
 8020c0c:	6898      	ldr	r0, [r3, #8]
 8020c0e:	68fb      	ldr	r3, [r7, #12]
 8020c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c12:	461a      	mov	r2, r3
 8020c14:	68b9      	ldr	r1, [r7, #8]
 8020c16:	f006 f89d 	bl	8026d54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8020c1a:	68fb      	ldr	r3, [r7, #12]
 8020c1c:	689a      	ldr	r2, [r3, #8]
 8020c1e:	68fb      	ldr	r3, [r7, #12]
 8020c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c22:	441a      	add	r2, r3
 8020c24:	68fb      	ldr	r3, [r7, #12]
 8020c26:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8020c28:	68fb      	ldr	r3, [r7, #12]
 8020c2a:	689a      	ldr	r2, [r3, #8]
 8020c2c:	68fb      	ldr	r3, [r7, #12]
 8020c2e:	685b      	ldr	r3, [r3, #4]
 8020c30:	429a      	cmp	r2, r3
 8020c32:	d32b      	bcc.n	8020c8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8020c34:	68fb      	ldr	r3, [r7, #12]
 8020c36:	681a      	ldr	r2, [r3, #0]
 8020c38:	68fb      	ldr	r3, [r7, #12]
 8020c3a:	609a      	str	r2, [r3, #8]
 8020c3c:	e026      	b.n	8020c8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020c3e:	68fb      	ldr	r3, [r7, #12]
 8020c40:	68d8      	ldr	r0, [r3, #12]
 8020c42:	68fb      	ldr	r3, [r7, #12]
 8020c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c46:	461a      	mov	r2, r3
 8020c48:	68b9      	ldr	r1, [r7, #8]
 8020c4a:	f006 f883 	bl	8026d54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8020c4e:	68fb      	ldr	r3, [r7, #12]
 8020c50:	68da      	ldr	r2, [r3, #12]
 8020c52:	68fb      	ldr	r3, [r7, #12]
 8020c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c56:	425b      	negs	r3, r3
 8020c58:	441a      	add	r2, r3
 8020c5a:	68fb      	ldr	r3, [r7, #12]
 8020c5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8020c5e:	68fb      	ldr	r3, [r7, #12]
 8020c60:	68da      	ldr	r2, [r3, #12]
 8020c62:	68fb      	ldr	r3, [r7, #12]
 8020c64:	681b      	ldr	r3, [r3, #0]
 8020c66:	429a      	cmp	r2, r3
 8020c68:	d207      	bcs.n	8020c7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8020c6a:	68fb      	ldr	r3, [r7, #12]
 8020c6c:	685a      	ldr	r2, [r3, #4]
 8020c6e:	68fb      	ldr	r3, [r7, #12]
 8020c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c72:	425b      	negs	r3, r3
 8020c74:	441a      	add	r2, r3
 8020c76:	68fb      	ldr	r3, [r7, #12]
 8020c78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8020c7a:	687b      	ldr	r3, [r7, #4]
 8020c7c:	2b02      	cmp	r3, #2
 8020c7e:	d105      	bne.n	8020c8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8020c80:	693b      	ldr	r3, [r7, #16]
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d002      	beq.n	8020c8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8020c86:	693b      	ldr	r3, [r7, #16]
 8020c88:	3b01      	subs	r3, #1
 8020c8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8020c8c:	693b      	ldr	r3, [r7, #16]
 8020c8e:	1c5a      	adds	r2, r3, #1
 8020c90:	68fb      	ldr	r3, [r7, #12]
 8020c92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8020c94:	697b      	ldr	r3, [r7, #20]
}
 8020c96:	4618      	mov	r0, r3
 8020c98:	3718      	adds	r7, #24
 8020c9a:	46bd      	mov	sp, r7
 8020c9c:	bd80      	pop	{r7, pc}

08020c9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8020c9e:	b580      	push	{r7, lr}
 8020ca0:	b082      	sub	sp, #8
 8020ca2:	af00      	add	r7, sp, #0
 8020ca4:	6078      	str	r0, [r7, #4]
 8020ca6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8020ca8:	687b      	ldr	r3, [r7, #4]
 8020caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	d018      	beq.n	8020ce2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8020cb0:	687b      	ldr	r3, [r7, #4]
 8020cb2:	68da      	ldr	r2, [r3, #12]
 8020cb4:	687b      	ldr	r3, [r7, #4]
 8020cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020cb8:	441a      	add	r2, r3
 8020cba:	687b      	ldr	r3, [r7, #4]
 8020cbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	68da      	ldr	r2, [r3, #12]
 8020cc2:	687b      	ldr	r3, [r7, #4]
 8020cc4:	685b      	ldr	r3, [r3, #4]
 8020cc6:	429a      	cmp	r2, r3
 8020cc8:	d303      	bcc.n	8020cd2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	681a      	ldr	r2, [r3, #0]
 8020cce:	687b      	ldr	r3, [r7, #4]
 8020cd0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8020cd2:	687b      	ldr	r3, [r7, #4]
 8020cd4:	68d9      	ldr	r1, [r3, #12]
 8020cd6:	687b      	ldr	r3, [r7, #4]
 8020cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020cda:	461a      	mov	r2, r3
 8020cdc:	6838      	ldr	r0, [r7, #0]
 8020cde:	f006 f839 	bl	8026d54 <memcpy>
	}
}
 8020ce2:	bf00      	nop
 8020ce4:	3708      	adds	r7, #8
 8020ce6:	46bd      	mov	sp, r7
 8020ce8:	bd80      	pop	{r7, pc}

08020cea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8020cea:	b580      	push	{r7, lr}
 8020cec:	b084      	sub	sp, #16
 8020cee:	af00      	add	r7, sp, #0
 8020cf0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8020cf2:	f7fe ff6b 	bl	801fbcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020cfc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8020cfe:	e011      	b.n	8020d24 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020d00:	687b      	ldr	r3, [r7, #4]
 8020d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d04:	2b00      	cmp	r3, #0
 8020d06:	d012      	beq.n	8020d2e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020d08:	687b      	ldr	r3, [r7, #4]
 8020d0a:	3324      	adds	r3, #36	; 0x24
 8020d0c:	4618      	mov	r0, r3
 8020d0e:	f000 fddb 	bl	80218c8 <xTaskRemoveFromEventList>
 8020d12:	4603      	mov	r3, r0
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	d001      	beq.n	8020d1c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8020d18:	f000 feb0 	bl	8021a7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8020d1c:	7bfb      	ldrb	r3, [r7, #15]
 8020d1e:	3b01      	subs	r3, #1
 8020d20:	b2db      	uxtb	r3, r3
 8020d22:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8020d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	dce9      	bgt.n	8020d00 <prvUnlockQueue+0x16>
 8020d2c:	e000      	b.n	8020d30 <prvUnlockQueue+0x46>
					break;
 8020d2e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	22ff      	movs	r2, #255	; 0xff
 8020d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8020d38:	f7fe ff76 	bl	801fc28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8020d3c:	f7fe ff46 	bl	801fbcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020d46:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8020d48:	e011      	b.n	8020d6e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	691b      	ldr	r3, [r3, #16]
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	d012      	beq.n	8020d78 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020d52:	687b      	ldr	r3, [r7, #4]
 8020d54:	3310      	adds	r3, #16
 8020d56:	4618      	mov	r0, r3
 8020d58:	f000 fdb6 	bl	80218c8 <xTaskRemoveFromEventList>
 8020d5c:	4603      	mov	r3, r0
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d001      	beq.n	8020d66 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8020d62:	f000 fe8b 	bl	8021a7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8020d66:	7bbb      	ldrb	r3, [r7, #14]
 8020d68:	3b01      	subs	r3, #1
 8020d6a:	b2db      	uxtb	r3, r3
 8020d6c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8020d6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	dce9      	bgt.n	8020d4a <prvUnlockQueue+0x60>
 8020d76:	e000      	b.n	8020d7a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8020d78:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8020d7a:	687b      	ldr	r3, [r7, #4]
 8020d7c:	22ff      	movs	r2, #255	; 0xff
 8020d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8020d82:	f7fe ff51 	bl	801fc28 <vPortExitCritical>
}
 8020d86:	bf00      	nop
 8020d88:	3710      	adds	r7, #16
 8020d8a:	46bd      	mov	sp, r7
 8020d8c:	bd80      	pop	{r7, pc}

08020d8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8020d8e:	b580      	push	{r7, lr}
 8020d90:	b084      	sub	sp, #16
 8020d92:	af00      	add	r7, sp, #0
 8020d94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8020d96:	f7fe ff19 	bl	801fbcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8020d9a:	687b      	ldr	r3, [r7, #4]
 8020d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d102      	bne.n	8020da8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8020da2:	2301      	movs	r3, #1
 8020da4:	60fb      	str	r3, [r7, #12]
 8020da6:	e001      	b.n	8020dac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8020da8:	2300      	movs	r3, #0
 8020daa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8020dac:	f7fe ff3c 	bl	801fc28 <vPortExitCritical>

	return xReturn;
 8020db0:	68fb      	ldr	r3, [r7, #12]
}
 8020db2:	4618      	mov	r0, r3
 8020db4:	3710      	adds	r7, #16
 8020db6:	46bd      	mov	sp, r7
 8020db8:	bd80      	pop	{r7, pc}

08020dba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8020dba:	b580      	push	{r7, lr}
 8020dbc:	b084      	sub	sp, #16
 8020dbe:	af00      	add	r7, sp, #0
 8020dc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8020dc2:	f7fe ff03 	bl	801fbcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8020dc6:	687b      	ldr	r3, [r7, #4]
 8020dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020dce:	429a      	cmp	r2, r3
 8020dd0:	d102      	bne.n	8020dd8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8020dd2:	2301      	movs	r3, #1
 8020dd4:	60fb      	str	r3, [r7, #12]
 8020dd6:	e001      	b.n	8020ddc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8020dd8:	2300      	movs	r3, #0
 8020dda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8020ddc:	f7fe ff24 	bl	801fc28 <vPortExitCritical>

	return xReturn;
 8020de0:	68fb      	ldr	r3, [r7, #12]
}
 8020de2:	4618      	mov	r0, r3
 8020de4:	3710      	adds	r7, #16
 8020de6:	46bd      	mov	sp, r7
 8020de8:	bd80      	pop	{r7, pc}
	...

08020dec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8020dec:	b480      	push	{r7}
 8020dee:	b085      	sub	sp, #20
 8020df0:	af00      	add	r7, sp, #0
 8020df2:	6078      	str	r0, [r7, #4]
 8020df4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8020df6:	2300      	movs	r3, #0
 8020df8:	60fb      	str	r3, [r7, #12]
 8020dfa:	e014      	b.n	8020e26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8020dfc:	4a0e      	ldr	r2, [pc, #56]	; (8020e38 <vQueueAddToRegistry+0x4c>)
 8020dfe:	68fb      	ldr	r3, [r7, #12]
 8020e00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	d10b      	bne.n	8020e20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8020e08:	490b      	ldr	r1, [pc, #44]	; (8020e38 <vQueueAddToRegistry+0x4c>)
 8020e0a:	68fb      	ldr	r3, [r7, #12]
 8020e0c:	683a      	ldr	r2, [r7, #0]
 8020e0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8020e12:	4a09      	ldr	r2, [pc, #36]	; (8020e38 <vQueueAddToRegistry+0x4c>)
 8020e14:	68fb      	ldr	r3, [r7, #12]
 8020e16:	00db      	lsls	r3, r3, #3
 8020e18:	4413      	add	r3, r2
 8020e1a:	687a      	ldr	r2, [r7, #4]
 8020e1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8020e1e:	e005      	b.n	8020e2c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8020e20:	68fb      	ldr	r3, [r7, #12]
 8020e22:	3301      	adds	r3, #1
 8020e24:	60fb      	str	r3, [r7, #12]
 8020e26:	68fb      	ldr	r3, [r7, #12]
 8020e28:	2b0b      	cmp	r3, #11
 8020e2a:	d9e7      	bls.n	8020dfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8020e2c:	bf00      	nop
 8020e2e:	3714      	adds	r7, #20
 8020e30:	46bd      	mov	sp, r7
 8020e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e36:	4770      	bx	lr
 8020e38:	20028894 	.word	0x20028894

08020e3c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8020e3c:	b480      	push	{r7}
 8020e3e:	b085      	sub	sp, #20
 8020e40:	af00      	add	r7, sp, #0
 8020e42:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8020e44:	2300      	movs	r3, #0
 8020e46:	60fb      	str	r3, [r7, #12]
 8020e48:	e016      	b.n	8020e78 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8020e4a:	4a10      	ldr	r2, [pc, #64]	; (8020e8c <vQueueUnregisterQueue+0x50>)
 8020e4c:	68fb      	ldr	r3, [r7, #12]
 8020e4e:	00db      	lsls	r3, r3, #3
 8020e50:	4413      	add	r3, r2
 8020e52:	685b      	ldr	r3, [r3, #4]
 8020e54:	687a      	ldr	r2, [r7, #4]
 8020e56:	429a      	cmp	r2, r3
 8020e58:	d10b      	bne.n	8020e72 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8020e5a:	4a0c      	ldr	r2, [pc, #48]	; (8020e8c <vQueueUnregisterQueue+0x50>)
 8020e5c:	68fb      	ldr	r3, [r7, #12]
 8020e5e:	2100      	movs	r1, #0
 8020e60:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8020e64:	4a09      	ldr	r2, [pc, #36]	; (8020e8c <vQueueUnregisterQueue+0x50>)
 8020e66:	68fb      	ldr	r3, [r7, #12]
 8020e68:	00db      	lsls	r3, r3, #3
 8020e6a:	4413      	add	r3, r2
 8020e6c:	2200      	movs	r2, #0
 8020e6e:	605a      	str	r2, [r3, #4]
				break;
 8020e70:	e005      	b.n	8020e7e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8020e72:	68fb      	ldr	r3, [r7, #12]
 8020e74:	3301      	adds	r3, #1
 8020e76:	60fb      	str	r3, [r7, #12]
 8020e78:	68fb      	ldr	r3, [r7, #12]
 8020e7a:	2b0b      	cmp	r3, #11
 8020e7c:	d9e5      	bls.n	8020e4a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8020e7e:	bf00      	nop
 8020e80:	3714      	adds	r7, #20
 8020e82:	46bd      	mov	sp, r7
 8020e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e88:	4770      	bx	lr
 8020e8a:	bf00      	nop
 8020e8c:	20028894 	.word	0x20028894

08020e90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8020e90:	b580      	push	{r7, lr}
 8020e92:	b086      	sub	sp, #24
 8020e94:	af00      	add	r7, sp, #0
 8020e96:	60f8      	str	r0, [r7, #12]
 8020e98:	60b9      	str	r1, [r7, #8]
 8020e9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8020e9c:	68fb      	ldr	r3, [r7, #12]
 8020e9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8020ea0:	f7fe fe94 	bl	801fbcc <vPortEnterCritical>
 8020ea4:	697b      	ldr	r3, [r7, #20]
 8020ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020eaa:	b25b      	sxtb	r3, r3
 8020eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020eb0:	d103      	bne.n	8020eba <vQueueWaitForMessageRestricted+0x2a>
 8020eb2:	697b      	ldr	r3, [r7, #20]
 8020eb4:	2200      	movs	r2, #0
 8020eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020eba:	697b      	ldr	r3, [r7, #20]
 8020ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020ec0:	b25b      	sxtb	r3, r3
 8020ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020ec6:	d103      	bne.n	8020ed0 <vQueueWaitForMessageRestricted+0x40>
 8020ec8:	697b      	ldr	r3, [r7, #20]
 8020eca:	2200      	movs	r2, #0
 8020ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020ed0:	f7fe feaa 	bl	801fc28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8020ed4:	697b      	ldr	r3, [r7, #20]
 8020ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ed8:	2b00      	cmp	r3, #0
 8020eda:	d106      	bne.n	8020eea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8020edc:	697b      	ldr	r3, [r7, #20]
 8020ede:	3324      	adds	r3, #36	; 0x24
 8020ee0:	687a      	ldr	r2, [r7, #4]
 8020ee2:	68b9      	ldr	r1, [r7, #8]
 8020ee4:	4618      	mov	r0, r3
 8020ee6:	f000 fcc5 	bl	8021874 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8020eea:	6978      	ldr	r0, [r7, #20]
 8020eec:	f7ff fefd 	bl	8020cea <prvUnlockQueue>
	}
 8020ef0:	bf00      	nop
 8020ef2:	3718      	adds	r7, #24
 8020ef4:	46bd      	mov	sp, r7
 8020ef6:	bd80      	pop	{r7, pc}

08020ef8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8020ef8:	b580      	push	{r7, lr}
 8020efa:	b08e      	sub	sp, #56	; 0x38
 8020efc:	af04      	add	r7, sp, #16
 8020efe:	60f8      	str	r0, [r7, #12]
 8020f00:	60b9      	str	r1, [r7, #8]
 8020f02:	607a      	str	r2, [r7, #4]
 8020f04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8020f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d109      	bne.n	8020f20 <xTaskCreateStatic+0x28>
 8020f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020f10:	f383 8811 	msr	BASEPRI, r3
 8020f14:	f3bf 8f6f 	isb	sy
 8020f18:	f3bf 8f4f 	dsb	sy
 8020f1c:	623b      	str	r3, [r7, #32]
 8020f1e:	e7fe      	b.n	8020f1e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8020f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	d109      	bne.n	8020f3a <xTaskCreateStatic+0x42>
 8020f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020f2a:	f383 8811 	msr	BASEPRI, r3
 8020f2e:	f3bf 8f6f 	isb	sy
 8020f32:	f3bf 8f4f 	dsb	sy
 8020f36:	61fb      	str	r3, [r7, #28]
 8020f38:	e7fe      	b.n	8020f38 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8020f3a:	2364      	movs	r3, #100	; 0x64
 8020f3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8020f3e:	693b      	ldr	r3, [r7, #16]
 8020f40:	2b64      	cmp	r3, #100	; 0x64
 8020f42:	d009      	beq.n	8020f58 <xTaskCreateStatic+0x60>
 8020f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020f48:	f383 8811 	msr	BASEPRI, r3
 8020f4c:	f3bf 8f6f 	isb	sy
 8020f50:	f3bf 8f4f 	dsb	sy
 8020f54:	61bb      	str	r3, [r7, #24]
 8020f56:	e7fe      	b.n	8020f56 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8020f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	d01e      	beq.n	8020f9c <xTaskCreateStatic+0xa4>
 8020f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020f60:	2b00      	cmp	r3, #0
 8020f62:	d01b      	beq.n	8020f9c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8020f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8020f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020f6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8020f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f70:	2202      	movs	r2, #2
 8020f72:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8020f76:	2300      	movs	r3, #0
 8020f78:	9303      	str	r3, [sp, #12]
 8020f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f7c:	9302      	str	r3, [sp, #8]
 8020f7e:	f107 0314 	add.w	r3, r7, #20
 8020f82:	9301      	str	r3, [sp, #4]
 8020f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f86:	9300      	str	r3, [sp, #0]
 8020f88:	683b      	ldr	r3, [r7, #0]
 8020f8a:	687a      	ldr	r2, [r7, #4]
 8020f8c:	68b9      	ldr	r1, [r7, #8]
 8020f8e:	68f8      	ldr	r0, [r7, #12]
 8020f90:	f000 f850 	bl	8021034 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8020f94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020f96:	f000 f8d9 	bl	802114c <prvAddNewTaskToReadyList>
 8020f9a:	e001      	b.n	8020fa0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8020f9c:	2300      	movs	r3, #0
 8020f9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8020fa0:	697b      	ldr	r3, [r7, #20]
	}
 8020fa2:	4618      	mov	r0, r3
 8020fa4:	3728      	adds	r7, #40	; 0x28
 8020fa6:	46bd      	mov	sp, r7
 8020fa8:	bd80      	pop	{r7, pc}

08020faa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8020faa:	b580      	push	{r7, lr}
 8020fac:	b08c      	sub	sp, #48	; 0x30
 8020fae:	af04      	add	r7, sp, #16
 8020fb0:	60f8      	str	r0, [r7, #12]
 8020fb2:	60b9      	str	r1, [r7, #8]
 8020fb4:	603b      	str	r3, [r7, #0]
 8020fb6:	4613      	mov	r3, r2
 8020fb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020fba:	88fb      	ldrh	r3, [r7, #6]
 8020fbc:	009b      	lsls	r3, r3, #2
 8020fbe:	4618      	mov	r0, r3
 8020fc0:	f7fe fa50 	bl	801f464 <pvPortMalloc>
 8020fc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8020fc6:	697b      	ldr	r3, [r7, #20]
 8020fc8:	2b00      	cmp	r3, #0
 8020fca:	d00e      	beq.n	8020fea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8020fcc:	2064      	movs	r0, #100	; 0x64
 8020fce:	f7fe fa49 	bl	801f464 <pvPortMalloc>
 8020fd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8020fd4:	69fb      	ldr	r3, [r7, #28]
 8020fd6:	2b00      	cmp	r3, #0
 8020fd8:	d003      	beq.n	8020fe2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8020fda:	69fb      	ldr	r3, [r7, #28]
 8020fdc:	697a      	ldr	r2, [r7, #20]
 8020fde:	631a      	str	r2, [r3, #48]	; 0x30
 8020fe0:	e005      	b.n	8020fee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8020fe2:	6978      	ldr	r0, [r7, #20]
 8020fe4:	f7fe fb04 	bl	801f5f0 <vPortFree>
 8020fe8:	e001      	b.n	8020fee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8020fea:	2300      	movs	r3, #0
 8020fec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8020fee:	69fb      	ldr	r3, [r7, #28]
 8020ff0:	2b00      	cmp	r3, #0
 8020ff2:	d017      	beq.n	8021024 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8020ff4:	69fb      	ldr	r3, [r7, #28]
 8020ff6:	2200      	movs	r2, #0
 8020ff8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8020ffc:	88fa      	ldrh	r2, [r7, #6]
 8020ffe:	2300      	movs	r3, #0
 8021000:	9303      	str	r3, [sp, #12]
 8021002:	69fb      	ldr	r3, [r7, #28]
 8021004:	9302      	str	r3, [sp, #8]
 8021006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021008:	9301      	str	r3, [sp, #4]
 802100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802100c:	9300      	str	r3, [sp, #0]
 802100e:	683b      	ldr	r3, [r7, #0]
 8021010:	68b9      	ldr	r1, [r7, #8]
 8021012:	68f8      	ldr	r0, [r7, #12]
 8021014:	f000 f80e 	bl	8021034 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021018:	69f8      	ldr	r0, [r7, #28]
 802101a:	f000 f897 	bl	802114c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 802101e:	2301      	movs	r3, #1
 8021020:	61bb      	str	r3, [r7, #24]
 8021022:	e002      	b.n	802102a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8021024:	f04f 33ff 	mov.w	r3, #4294967295
 8021028:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 802102a:	69bb      	ldr	r3, [r7, #24]
	}
 802102c:	4618      	mov	r0, r3
 802102e:	3720      	adds	r7, #32
 8021030:	46bd      	mov	sp, r7
 8021032:	bd80      	pop	{r7, pc}

08021034 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8021034:	b580      	push	{r7, lr}
 8021036:	b088      	sub	sp, #32
 8021038:	af00      	add	r7, sp, #0
 802103a:	60f8      	str	r0, [r7, #12]
 802103c:	60b9      	str	r1, [r7, #8]
 802103e:	607a      	str	r2, [r7, #4]
 8021040:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8021042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021044:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8021046:	687b      	ldr	r3, [r7, #4]
 8021048:	009b      	lsls	r3, r3, #2
 802104a:	461a      	mov	r2, r3
 802104c:	21a5      	movs	r1, #165	; 0xa5
 802104e:	f005 fe8c 	bl	8026d6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8021052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021056:	687b      	ldr	r3, [r7, #4]
 8021058:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802105c:	3b01      	subs	r3, #1
 802105e:	009b      	lsls	r3, r3, #2
 8021060:	4413      	add	r3, r2
 8021062:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8021064:	69bb      	ldr	r3, [r7, #24]
 8021066:	f023 0307 	bic.w	r3, r3, #7
 802106a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 802106c:	69bb      	ldr	r3, [r7, #24]
 802106e:	f003 0307 	and.w	r3, r3, #7
 8021072:	2b00      	cmp	r3, #0
 8021074:	d009      	beq.n	802108a <prvInitialiseNewTask+0x56>
 8021076:	f04f 0350 	mov.w	r3, #80	; 0x50
 802107a:	f383 8811 	msr	BASEPRI, r3
 802107e:	f3bf 8f6f 	isb	sy
 8021082:	f3bf 8f4f 	dsb	sy
 8021086:	617b      	str	r3, [r7, #20]
 8021088:	e7fe      	b.n	8021088 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 802108a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802108c:	69ba      	ldr	r2, [r7, #24]
 802108e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8021090:	2300      	movs	r3, #0
 8021092:	61fb      	str	r3, [r7, #28]
 8021094:	e012      	b.n	80210bc <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8021096:	68ba      	ldr	r2, [r7, #8]
 8021098:	69fb      	ldr	r3, [r7, #28]
 802109a:	4413      	add	r3, r2
 802109c:	7819      	ldrb	r1, [r3, #0]
 802109e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80210a0:	69fb      	ldr	r3, [r7, #28]
 80210a2:	4413      	add	r3, r2
 80210a4:	3334      	adds	r3, #52	; 0x34
 80210a6:	460a      	mov	r2, r1
 80210a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80210aa:	68ba      	ldr	r2, [r7, #8]
 80210ac:	69fb      	ldr	r3, [r7, #28]
 80210ae:	4413      	add	r3, r2
 80210b0:	781b      	ldrb	r3, [r3, #0]
 80210b2:	2b00      	cmp	r3, #0
 80210b4:	d006      	beq.n	80210c4 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80210b6:	69fb      	ldr	r3, [r7, #28]
 80210b8:	3301      	adds	r3, #1
 80210ba:	61fb      	str	r3, [r7, #28]
 80210bc:	69fb      	ldr	r3, [r7, #28]
 80210be:	2b0f      	cmp	r3, #15
 80210c0:	d9e9      	bls.n	8021096 <prvInitialiseNewTask+0x62>
 80210c2:	e000      	b.n	80210c6 <prvInitialiseNewTask+0x92>
		{
			break;
 80210c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80210c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210c8:	2200      	movs	r2, #0
 80210ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80210ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210d0:	2b37      	cmp	r3, #55	; 0x37
 80210d2:	d901      	bls.n	80210d8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80210d4:	2337      	movs	r3, #55	; 0x37
 80210d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80210d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80210dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80210de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80210e2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80210e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210e6:	2200      	movs	r2, #0
 80210e8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80210ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210ec:	3304      	adds	r3, #4
 80210ee:	4618      	mov	r0, r3
 80210f0:	f7fe fbb4 	bl	801f85c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80210f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210f6:	3318      	adds	r3, #24
 80210f8:	4618      	mov	r0, r3
 80210fa:	f7fe fbaf 	bl	801f85c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80210fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021102:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021106:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802110a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802110c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 802110e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021112:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8021114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021116:	2200      	movs	r2, #0
 8021118:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 802111a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802111c:	2200      	movs	r2, #0
 802111e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8021120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021122:	2200      	movs	r2, #0
 8021124:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8021128:	683a      	ldr	r2, [r7, #0]
 802112a:	68f9      	ldr	r1, [r7, #12]
 802112c:	69b8      	ldr	r0, [r7, #24]
 802112e:	f7fe fc29 	bl	801f984 <pxPortInitialiseStack>
 8021132:	4602      	mov	r2, r0
 8021134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021136:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8021138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802113a:	2b00      	cmp	r3, #0
 802113c:	d002      	beq.n	8021144 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 802113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021142:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021144:	bf00      	nop
 8021146:	3720      	adds	r7, #32
 8021148:	46bd      	mov	sp, r7
 802114a:	bd80      	pop	{r7, pc}

0802114c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 802114c:	b580      	push	{r7, lr}
 802114e:	b082      	sub	sp, #8
 8021150:	af00      	add	r7, sp, #0
 8021152:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8021154:	f7fe fd3a 	bl	801fbcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8021158:	4b2d      	ldr	r3, [pc, #180]	; (8021210 <prvAddNewTaskToReadyList+0xc4>)
 802115a:	681b      	ldr	r3, [r3, #0]
 802115c:	3301      	adds	r3, #1
 802115e:	4a2c      	ldr	r2, [pc, #176]	; (8021210 <prvAddNewTaskToReadyList+0xc4>)
 8021160:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8021162:	4b2c      	ldr	r3, [pc, #176]	; (8021214 <prvAddNewTaskToReadyList+0xc8>)
 8021164:	681b      	ldr	r3, [r3, #0]
 8021166:	2b00      	cmp	r3, #0
 8021168:	d109      	bne.n	802117e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 802116a:	4a2a      	ldr	r2, [pc, #168]	; (8021214 <prvAddNewTaskToReadyList+0xc8>)
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8021170:	4b27      	ldr	r3, [pc, #156]	; (8021210 <prvAddNewTaskToReadyList+0xc4>)
 8021172:	681b      	ldr	r3, [r3, #0]
 8021174:	2b01      	cmp	r3, #1
 8021176:	d110      	bne.n	802119a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8021178:	f000 fcf8 	bl	8021b6c <prvInitialiseTaskLists>
 802117c:	e00d      	b.n	802119a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 802117e:	4b26      	ldr	r3, [pc, #152]	; (8021218 <prvAddNewTaskToReadyList+0xcc>)
 8021180:	681b      	ldr	r3, [r3, #0]
 8021182:	2b00      	cmp	r3, #0
 8021184:	d109      	bne.n	802119a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8021186:	4b23      	ldr	r3, [pc, #140]	; (8021214 <prvAddNewTaskToReadyList+0xc8>)
 8021188:	681b      	ldr	r3, [r3, #0]
 802118a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802118c:	687b      	ldr	r3, [r7, #4]
 802118e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021190:	429a      	cmp	r2, r3
 8021192:	d802      	bhi.n	802119a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8021194:	4a1f      	ldr	r2, [pc, #124]	; (8021214 <prvAddNewTaskToReadyList+0xc8>)
 8021196:	687b      	ldr	r3, [r7, #4]
 8021198:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 802119a:	4b20      	ldr	r3, [pc, #128]	; (802121c <prvAddNewTaskToReadyList+0xd0>)
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	3301      	adds	r3, #1
 80211a0:	4a1e      	ldr	r2, [pc, #120]	; (802121c <prvAddNewTaskToReadyList+0xd0>)
 80211a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80211a4:	4b1d      	ldr	r3, [pc, #116]	; (802121c <prvAddNewTaskToReadyList+0xd0>)
 80211a6:	681a      	ldr	r2, [r3, #0]
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80211ac:	687b      	ldr	r3, [r7, #4]
 80211ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80211b0:	4b1b      	ldr	r3, [pc, #108]	; (8021220 <prvAddNewTaskToReadyList+0xd4>)
 80211b2:	681b      	ldr	r3, [r3, #0]
 80211b4:	429a      	cmp	r2, r3
 80211b6:	d903      	bls.n	80211c0 <prvAddNewTaskToReadyList+0x74>
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80211bc:	4a18      	ldr	r2, [pc, #96]	; (8021220 <prvAddNewTaskToReadyList+0xd4>)
 80211be:	6013      	str	r3, [r2, #0]
 80211c0:	687b      	ldr	r3, [r7, #4]
 80211c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80211c4:	4613      	mov	r3, r2
 80211c6:	009b      	lsls	r3, r3, #2
 80211c8:	4413      	add	r3, r2
 80211ca:	009b      	lsls	r3, r3, #2
 80211cc:	4a15      	ldr	r2, [pc, #84]	; (8021224 <prvAddNewTaskToReadyList+0xd8>)
 80211ce:	441a      	add	r2, r3
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	3304      	adds	r3, #4
 80211d4:	4619      	mov	r1, r3
 80211d6:	4610      	mov	r0, r2
 80211d8:	f7fe fb4d 	bl	801f876 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80211dc:	f7fe fd24 	bl	801fc28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80211e0:	4b0d      	ldr	r3, [pc, #52]	; (8021218 <prvAddNewTaskToReadyList+0xcc>)
 80211e2:	681b      	ldr	r3, [r3, #0]
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	d00e      	beq.n	8021206 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80211e8:	4b0a      	ldr	r3, [pc, #40]	; (8021214 <prvAddNewTaskToReadyList+0xc8>)
 80211ea:	681b      	ldr	r3, [r3, #0]
 80211ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80211ee:	687b      	ldr	r3, [r7, #4]
 80211f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80211f2:	429a      	cmp	r2, r3
 80211f4:	d207      	bcs.n	8021206 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80211f6:	4b0c      	ldr	r3, [pc, #48]	; (8021228 <prvAddNewTaskToReadyList+0xdc>)
 80211f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80211fc:	601a      	str	r2, [r3, #0]
 80211fe:	f3bf 8f4f 	dsb	sy
 8021202:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021206:	bf00      	nop
 8021208:	3708      	adds	r7, #8
 802120a:	46bd      	mov	sp, r7
 802120c:	bd80      	pop	{r7, pc}
 802120e:	bf00      	nop
 8021210:	20027324 	.word	0x20027324
 8021214:	20026e50 	.word	0x20026e50
 8021218:	20027330 	.word	0x20027330
 802121c:	20027340 	.word	0x20027340
 8021220:	2002732c 	.word	0x2002732c
 8021224:	20026e54 	.word	0x20026e54
 8021228:	e000ed04 	.word	0xe000ed04

0802122c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 802122c:	b580      	push	{r7, lr}
 802122e:	b084      	sub	sp, #16
 8021230:	af00      	add	r7, sp, #0
 8021232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8021234:	2300      	movs	r3, #0
 8021236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8021238:	687b      	ldr	r3, [r7, #4]
 802123a:	2b00      	cmp	r3, #0
 802123c:	d016      	beq.n	802126c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 802123e:	4b13      	ldr	r3, [pc, #76]	; (802128c <vTaskDelay+0x60>)
 8021240:	681b      	ldr	r3, [r3, #0]
 8021242:	2b00      	cmp	r3, #0
 8021244:	d009      	beq.n	802125a <vTaskDelay+0x2e>
 8021246:	f04f 0350 	mov.w	r3, #80	; 0x50
 802124a:	f383 8811 	msr	BASEPRI, r3
 802124e:	f3bf 8f6f 	isb	sy
 8021252:	f3bf 8f4f 	dsb	sy
 8021256:	60bb      	str	r3, [r7, #8]
 8021258:	e7fe      	b.n	8021258 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 802125a:	f000 f881 	bl	8021360 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 802125e:	2100      	movs	r1, #0
 8021260:	6878      	ldr	r0, [r7, #4]
 8021262:	f001 f8a9 	bl	80223b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8021266:	f000 f8c1 	bl	80213ec <xTaskResumeAll>
 802126a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802126c:	68fb      	ldr	r3, [r7, #12]
 802126e:	2b00      	cmp	r3, #0
 8021270:	d107      	bne.n	8021282 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8021272:	4b07      	ldr	r3, [pc, #28]	; (8021290 <vTaskDelay+0x64>)
 8021274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021278:	601a      	str	r2, [r3, #0]
 802127a:	f3bf 8f4f 	dsb	sy
 802127e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021282:	bf00      	nop
 8021284:	3710      	adds	r7, #16
 8021286:	46bd      	mov	sp, r7
 8021288:	bd80      	pop	{r7, pc}
 802128a:	bf00      	nop
 802128c:	2002734c 	.word	0x2002734c
 8021290:	e000ed04 	.word	0xe000ed04

08021294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8021294:	b580      	push	{r7, lr}
 8021296:	b08a      	sub	sp, #40	; 0x28
 8021298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 802129a:	2300      	movs	r3, #0
 802129c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 802129e:	2300      	movs	r3, #0
 80212a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80212a2:	463a      	mov	r2, r7
 80212a4:	1d39      	adds	r1, r7, #4
 80212a6:	f107 0308 	add.w	r3, r7, #8
 80212aa:	4618      	mov	r0, r3
 80212ac:	f7fe f8a6 	bl	801f3fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80212b0:	6839      	ldr	r1, [r7, #0]
 80212b2:	687b      	ldr	r3, [r7, #4]
 80212b4:	68ba      	ldr	r2, [r7, #8]
 80212b6:	9202      	str	r2, [sp, #8]
 80212b8:	9301      	str	r3, [sp, #4]
 80212ba:	2300      	movs	r3, #0
 80212bc:	9300      	str	r3, [sp, #0]
 80212be:	2300      	movs	r3, #0
 80212c0:	460a      	mov	r2, r1
 80212c2:	4921      	ldr	r1, [pc, #132]	; (8021348 <vTaskStartScheduler+0xb4>)
 80212c4:	4821      	ldr	r0, [pc, #132]	; (802134c <vTaskStartScheduler+0xb8>)
 80212c6:	f7ff fe17 	bl	8020ef8 <xTaskCreateStatic>
 80212ca:	4602      	mov	r2, r0
 80212cc:	4b20      	ldr	r3, [pc, #128]	; (8021350 <vTaskStartScheduler+0xbc>)
 80212ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80212d0:	4b1f      	ldr	r3, [pc, #124]	; (8021350 <vTaskStartScheduler+0xbc>)
 80212d2:	681b      	ldr	r3, [r3, #0]
 80212d4:	2b00      	cmp	r3, #0
 80212d6:	d002      	beq.n	80212de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80212d8:	2301      	movs	r3, #1
 80212da:	617b      	str	r3, [r7, #20]
 80212dc:	e001      	b.n	80212e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80212de:	2300      	movs	r3, #0
 80212e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80212e2:	697b      	ldr	r3, [r7, #20]
 80212e4:	2b01      	cmp	r3, #1
 80212e6:	d102      	bne.n	80212ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80212e8:	f001 f8ba 	bl	8022460 <xTimerCreateTimerTask>
 80212ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80212ee:	697b      	ldr	r3, [r7, #20]
 80212f0:	2b01      	cmp	r3, #1
 80212f2:	d117      	bne.n	8021324 <vTaskStartScheduler+0x90>
 80212f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80212f8:	f383 8811 	msr	BASEPRI, r3
 80212fc:	f3bf 8f6f 	isb	sy
 8021300:	f3bf 8f4f 	dsb	sy
 8021304:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8021306:	4b13      	ldr	r3, [pc, #76]	; (8021354 <vTaskStartScheduler+0xc0>)
 8021308:	f04f 32ff 	mov.w	r2, #4294967295
 802130c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 802130e:	4b12      	ldr	r3, [pc, #72]	; (8021358 <vTaskStartScheduler+0xc4>)
 8021310:	2201      	movs	r2, #1
 8021312:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8021314:	4b11      	ldr	r3, [pc, #68]	; (802135c <vTaskStartScheduler+0xc8>)
 8021316:	2200      	movs	r2, #0
 8021318:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 802131a:	f7ef ff88 	bl	801122e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 802131e:	f7fe fbb7 	bl	801fa90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8021322:	e00d      	b.n	8021340 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8021324:	697b      	ldr	r3, [r7, #20]
 8021326:	f1b3 3fff 	cmp.w	r3, #4294967295
 802132a:	d109      	bne.n	8021340 <vTaskStartScheduler+0xac>
 802132c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021330:	f383 8811 	msr	BASEPRI, r3
 8021334:	f3bf 8f6f 	isb	sy
 8021338:	f3bf 8f4f 	dsb	sy
 802133c:	60fb      	str	r3, [r7, #12]
 802133e:	e7fe      	b.n	802133e <vTaskStartScheduler+0xaa>
}
 8021340:	bf00      	nop
 8021342:	3718      	adds	r7, #24
 8021344:	46bd      	mov	sp, r7
 8021346:	bd80      	pop	{r7, pc}
 8021348:	0802815c 	.word	0x0802815c
 802134c:	08021a95 	.word	0x08021a95
 8021350:	20027348 	.word	0x20027348
 8021354:	20027344 	.word	0x20027344
 8021358:	20027330 	.word	0x20027330
 802135c:	20027328 	.word	0x20027328

08021360 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8021360:	b480      	push	{r7}
 8021362:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8021364:	4b04      	ldr	r3, [pc, #16]	; (8021378 <vTaskSuspendAll+0x18>)
 8021366:	681b      	ldr	r3, [r3, #0]
 8021368:	3301      	adds	r3, #1
 802136a:	4a03      	ldr	r2, [pc, #12]	; (8021378 <vTaskSuspendAll+0x18>)
 802136c:	6013      	str	r3, [r2, #0]
}
 802136e:	bf00      	nop
 8021370:	46bd      	mov	sp, r7
 8021372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021376:	4770      	bx	lr
 8021378:	2002734c 	.word	0x2002734c

0802137c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 802137c:	b480      	push	{r7}
 802137e:	b083      	sub	sp, #12
 8021380:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8021382:	2300      	movs	r3, #0
 8021384:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8021386:	4b14      	ldr	r3, [pc, #80]	; (80213d8 <prvGetExpectedIdleTime+0x5c>)
 8021388:	681b      	ldr	r3, [r3, #0]
 802138a:	2b00      	cmp	r3, #0
 802138c:	d001      	beq.n	8021392 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 802138e:	2301      	movs	r3, #1
 8021390:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8021392:	4b12      	ldr	r3, [pc, #72]	; (80213dc <prvGetExpectedIdleTime+0x60>)
 8021394:	681b      	ldr	r3, [r3, #0]
 8021396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021398:	2b00      	cmp	r3, #0
 802139a:	d002      	beq.n	80213a2 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 802139c:	2300      	movs	r3, #0
 802139e:	607b      	str	r3, [r7, #4]
 80213a0:	e012      	b.n	80213c8 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80213a2:	4b0f      	ldr	r3, [pc, #60]	; (80213e0 <prvGetExpectedIdleTime+0x64>)
 80213a4:	681b      	ldr	r3, [r3, #0]
 80213a6:	2b01      	cmp	r3, #1
 80213a8:	d902      	bls.n	80213b0 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 80213aa:	2300      	movs	r3, #0
 80213ac:	607b      	str	r3, [r7, #4]
 80213ae:	e00b      	b.n	80213c8 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80213b0:	683b      	ldr	r3, [r7, #0]
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	d002      	beq.n	80213bc <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 80213b6:	2300      	movs	r3, #0
 80213b8:	607b      	str	r3, [r7, #4]
 80213ba:	e005      	b.n	80213c8 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 80213bc:	4b09      	ldr	r3, [pc, #36]	; (80213e4 <prvGetExpectedIdleTime+0x68>)
 80213be:	681a      	ldr	r2, [r3, #0]
 80213c0:	4b09      	ldr	r3, [pc, #36]	; (80213e8 <prvGetExpectedIdleTime+0x6c>)
 80213c2:	681b      	ldr	r3, [r3, #0]
 80213c4:	1ad3      	subs	r3, r2, r3
 80213c6:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80213c8:	687b      	ldr	r3, [r7, #4]
	}
 80213ca:	4618      	mov	r0, r3
 80213cc:	370c      	adds	r7, #12
 80213ce:	46bd      	mov	sp, r7
 80213d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213d4:	4770      	bx	lr
 80213d6:	bf00      	nop
 80213d8:	2002732c 	.word	0x2002732c
 80213dc:	20026e50 	.word	0x20026e50
 80213e0:	20026e54 	.word	0x20026e54
 80213e4:	20027344 	.word	0x20027344
 80213e8:	20027328 	.word	0x20027328

080213ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80213ec:	b580      	push	{r7, lr}
 80213ee:	b084      	sub	sp, #16
 80213f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80213f2:	2300      	movs	r3, #0
 80213f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80213f6:	2300      	movs	r3, #0
 80213f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80213fa:	4b41      	ldr	r3, [pc, #260]	; (8021500 <xTaskResumeAll+0x114>)
 80213fc:	681b      	ldr	r3, [r3, #0]
 80213fe:	2b00      	cmp	r3, #0
 8021400:	d109      	bne.n	8021416 <xTaskResumeAll+0x2a>
 8021402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021406:	f383 8811 	msr	BASEPRI, r3
 802140a:	f3bf 8f6f 	isb	sy
 802140e:	f3bf 8f4f 	dsb	sy
 8021412:	603b      	str	r3, [r7, #0]
 8021414:	e7fe      	b.n	8021414 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8021416:	f7fe fbd9 	bl	801fbcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 802141a:	4b39      	ldr	r3, [pc, #228]	; (8021500 <xTaskResumeAll+0x114>)
 802141c:	681b      	ldr	r3, [r3, #0]
 802141e:	3b01      	subs	r3, #1
 8021420:	4a37      	ldr	r2, [pc, #220]	; (8021500 <xTaskResumeAll+0x114>)
 8021422:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021424:	4b36      	ldr	r3, [pc, #216]	; (8021500 <xTaskResumeAll+0x114>)
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	2b00      	cmp	r3, #0
 802142a:	d162      	bne.n	80214f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 802142c:	4b35      	ldr	r3, [pc, #212]	; (8021504 <xTaskResumeAll+0x118>)
 802142e:	681b      	ldr	r3, [r3, #0]
 8021430:	2b00      	cmp	r3, #0
 8021432:	d05e      	beq.n	80214f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8021434:	e02f      	b.n	8021496 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8021436:	4b34      	ldr	r3, [pc, #208]	; (8021508 <xTaskResumeAll+0x11c>)
 8021438:	68db      	ldr	r3, [r3, #12]
 802143a:	68db      	ldr	r3, [r3, #12]
 802143c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802143e:	68fb      	ldr	r3, [r7, #12]
 8021440:	3318      	adds	r3, #24
 8021442:	4618      	mov	r0, r3
 8021444:	f7fe fa74 	bl	801f930 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021448:	68fb      	ldr	r3, [r7, #12]
 802144a:	3304      	adds	r3, #4
 802144c:	4618      	mov	r0, r3
 802144e:	f7fe fa6f 	bl	801f930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8021452:	68fb      	ldr	r3, [r7, #12]
 8021454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021456:	4b2d      	ldr	r3, [pc, #180]	; (802150c <xTaskResumeAll+0x120>)
 8021458:	681b      	ldr	r3, [r3, #0]
 802145a:	429a      	cmp	r2, r3
 802145c:	d903      	bls.n	8021466 <xTaskResumeAll+0x7a>
 802145e:	68fb      	ldr	r3, [r7, #12]
 8021460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021462:	4a2a      	ldr	r2, [pc, #168]	; (802150c <xTaskResumeAll+0x120>)
 8021464:	6013      	str	r3, [r2, #0]
 8021466:	68fb      	ldr	r3, [r7, #12]
 8021468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802146a:	4613      	mov	r3, r2
 802146c:	009b      	lsls	r3, r3, #2
 802146e:	4413      	add	r3, r2
 8021470:	009b      	lsls	r3, r3, #2
 8021472:	4a27      	ldr	r2, [pc, #156]	; (8021510 <xTaskResumeAll+0x124>)
 8021474:	441a      	add	r2, r3
 8021476:	68fb      	ldr	r3, [r7, #12]
 8021478:	3304      	adds	r3, #4
 802147a:	4619      	mov	r1, r3
 802147c:	4610      	mov	r0, r2
 802147e:	f7fe f9fa 	bl	801f876 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8021482:	68fb      	ldr	r3, [r7, #12]
 8021484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021486:	4b23      	ldr	r3, [pc, #140]	; (8021514 <xTaskResumeAll+0x128>)
 8021488:	681b      	ldr	r3, [r3, #0]
 802148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802148c:	429a      	cmp	r2, r3
 802148e:	d302      	bcc.n	8021496 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8021490:	4b21      	ldr	r3, [pc, #132]	; (8021518 <xTaskResumeAll+0x12c>)
 8021492:	2201      	movs	r2, #1
 8021494:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8021496:	4b1c      	ldr	r3, [pc, #112]	; (8021508 <xTaskResumeAll+0x11c>)
 8021498:	681b      	ldr	r3, [r3, #0]
 802149a:	2b00      	cmp	r3, #0
 802149c:	d1cb      	bne.n	8021436 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 802149e:	68fb      	ldr	r3, [r7, #12]
 80214a0:	2b00      	cmp	r3, #0
 80214a2:	d001      	beq.n	80214a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80214a4:	f000 fbfc 	bl	8021ca0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80214a8:	4b1c      	ldr	r3, [pc, #112]	; (802151c <xTaskResumeAll+0x130>)
 80214aa:	681b      	ldr	r3, [r3, #0]
 80214ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80214ae:	687b      	ldr	r3, [r7, #4]
 80214b0:	2b00      	cmp	r3, #0
 80214b2:	d010      	beq.n	80214d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80214b4:	f000 f86c 	bl	8021590 <xTaskIncrementTick>
 80214b8:	4603      	mov	r3, r0
 80214ba:	2b00      	cmp	r3, #0
 80214bc:	d002      	beq.n	80214c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80214be:	4b16      	ldr	r3, [pc, #88]	; (8021518 <xTaskResumeAll+0x12c>)
 80214c0:	2201      	movs	r2, #1
 80214c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80214c4:	687b      	ldr	r3, [r7, #4]
 80214c6:	3b01      	subs	r3, #1
 80214c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	d1f1      	bne.n	80214b4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80214d0:	4b12      	ldr	r3, [pc, #72]	; (802151c <xTaskResumeAll+0x130>)
 80214d2:	2200      	movs	r2, #0
 80214d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80214d6:	4b10      	ldr	r3, [pc, #64]	; (8021518 <xTaskResumeAll+0x12c>)
 80214d8:	681b      	ldr	r3, [r3, #0]
 80214da:	2b00      	cmp	r3, #0
 80214dc:	d009      	beq.n	80214f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80214de:	2301      	movs	r3, #1
 80214e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80214e2:	4b0f      	ldr	r3, [pc, #60]	; (8021520 <xTaskResumeAll+0x134>)
 80214e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80214e8:	601a      	str	r2, [r3, #0]
 80214ea:	f3bf 8f4f 	dsb	sy
 80214ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80214f2:	f7fe fb99 	bl	801fc28 <vPortExitCritical>

	return xAlreadyYielded;
 80214f6:	68bb      	ldr	r3, [r7, #8]
}
 80214f8:	4618      	mov	r0, r3
 80214fa:	3710      	adds	r7, #16
 80214fc:	46bd      	mov	sp, r7
 80214fe:	bd80      	pop	{r7, pc}
 8021500:	2002734c 	.word	0x2002734c
 8021504:	20027324 	.word	0x20027324
 8021508:	200272e4 	.word	0x200272e4
 802150c:	2002732c 	.word	0x2002732c
 8021510:	20026e54 	.word	0x20026e54
 8021514:	20026e50 	.word	0x20026e50
 8021518:	20027338 	.word	0x20027338
 802151c:	20027334 	.word	0x20027334
 8021520:	e000ed04 	.word	0xe000ed04

08021524 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8021524:	b480      	push	{r7}
 8021526:	b083      	sub	sp, #12
 8021528:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 802152a:	4b05      	ldr	r3, [pc, #20]	; (8021540 <xTaskGetTickCount+0x1c>)
 802152c:	681b      	ldr	r3, [r3, #0]
 802152e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8021530:	687b      	ldr	r3, [r7, #4]
}
 8021532:	4618      	mov	r0, r3
 8021534:	370c      	adds	r7, #12
 8021536:	46bd      	mov	sp, r7
 8021538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802153c:	4770      	bx	lr
 802153e:	bf00      	nop
 8021540:	20027328 	.word	0x20027328

08021544 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8021544:	b480      	push	{r7}
 8021546:	b085      	sub	sp, #20
 8021548:	af00      	add	r7, sp, #0
 802154a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 802154c:	4b0e      	ldr	r3, [pc, #56]	; (8021588 <vTaskStepTick+0x44>)
 802154e:	681a      	ldr	r2, [r3, #0]
 8021550:	687b      	ldr	r3, [r7, #4]
 8021552:	441a      	add	r2, r3
 8021554:	4b0d      	ldr	r3, [pc, #52]	; (802158c <vTaskStepTick+0x48>)
 8021556:	681b      	ldr	r3, [r3, #0]
 8021558:	429a      	cmp	r2, r3
 802155a:	d909      	bls.n	8021570 <vTaskStepTick+0x2c>
 802155c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021560:	f383 8811 	msr	BASEPRI, r3
 8021564:	f3bf 8f6f 	isb	sy
 8021568:	f3bf 8f4f 	dsb	sy
 802156c:	60fb      	str	r3, [r7, #12]
 802156e:	e7fe      	b.n	802156e <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 8021570:	4b05      	ldr	r3, [pc, #20]	; (8021588 <vTaskStepTick+0x44>)
 8021572:	681a      	ldr	r2, [r3, #0]
 8021574:	687b      	ldr	r3, [r7, #4]
 8021576:	4413      	add	r3, r2
 8021578:	4a03      	ldr	r2, [pc, #12]	; (8021588 <vTaskStepTick+0x44>)
 802157a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 802157c:	bf00      	nop
 802157e:	3714      	adds	r7, #20
 8021580:	46bd      	mov	sp, r7
 8021582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021586:	4770      	bx	lr
 8021588:	20027328 	.word	0x20027328
 802158c:	20027344 	.word	0x20027344

08021590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8021590:	b580      	push	{r7, lr}
 8021592:	b086      	sub	sp, #24
 8021594:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8021596:	2300      	movs	r3, #0
 8021598:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802159a:	4b55      	ldr	r3, [pc, #340]	; (80216f0 <xTaskIncrementTick+0x160>)
 802159c:	681b      	ldr	r3, [r3, #0]
 802159e:	2b00      	cmp	r3, #0
 80215a0:	f040 8093 	bne.w	80216ca <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80215a4:	4b53      	ldr	r3, [pc, #332]	; (80216f4 <xTaskIncrementTick+0x164>)
 80215a6:	681b      	ldr	r3, [r3, #0]
 80215a8:	3301      	adds	r3, #1
 80215aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80215ac:	4a51      	ldr	r2, [pc, #324]	; (80216f4 <xTaskIncrementTick+0x164>)
 80215ae:	693b      	ldr	r3, [r7, #16]
 80215b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80215b2:	693b      	ldr	r3, [r7, #16]
 80215b4:	2b00      	cmp	r3, #0
 80215b6:	d11f      	bne.n	80215f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80215b8:	4b4f      	ldr	r3, [pc, #316]	; (80216f8 <xTaskIncrementTick+0x168>)
 80215ba:	681b      	ldr	r3, [r3, #0]
 80215bc:	681b      	ldr	r3, [r3, #0]
 80215be:	2b00      	cmp	r3, #0
 80215c0:	d009      	beq.n	80215d6 <xTaskIncrementTick+0x46>
 80215c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80215c6:	f383 8811 	msr	BASEPRI, r3
 80215ca:	f3bf 8f6f 	isb	sy
 80215ce:	f3bf 8f4f 	dsb	sy
 80215d2:	603b      	str	r3, [r7, #0]
 80215d4:	e7fe      	b.n	80215d4 <xTaskIncrementTick+0x44>
 80215d6:	4b48      	ldr	r3, [pc, #288]	; (80216f8 <xTaskIncrementTick+0x168>)
 80215d8:	681b      	ldr	r3, [r3, #0]
 80215da:	60fb      	str	r3, [r7, #12]
 80215dc:	4b47      	ldr	r3, [pc, #284]	; (80216fc <xTaskIncrementTick+0x16c>)
 80215de:	681b      	ldr	r3, [r3, #0]
 80215e0:	4a45      	ldr	r2, [pc, #276]	; (80216f8 <xTaskIncrementTick+0x168>)
 80215e2:	6013      	str	r3, [r2, #0]
 80215e4:	4a45      	ldr	r2, [pc, #276]	; (80216fc <xTaskIncrementTick+0x16c>)
 80215e6:	68fb      	ldr	r3, [r7, #12]
 80215e8:	6013      	str	r3, [r2, #0]
 80215ea:	4b45      	ldr	r3, [pc, #276]	; (8021700 <xTaskIncrementTick+0x170>)
 80215ec:	681b      	ldr	r3, [r3, #0]
 80215ee:	3301      	adds	r3, #1
 80215f0:	4a43      	ldr	r2, [pc, #268]	; (8021700 <xTaskIncrementTick+0x170>)
 80215f2:	6013      	str	r3, [r2, #0]
 80215f4:	f000 fb54 	bl	8021ca0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80215f8:	4b42      	ldr	r3, [pc, #264]	; (8021704 <xTaskIncrementTick+0x174>)
 80215fa:	681b      	ldr	r3, [r3, #0]
 80215fc:	693a      	ldr	r2, [r7, #16]
 80215fe:	429a      	cmp	r2, r3
 8021600:	d34e      	bcc.n	80216a0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021602:	4b3d      	ldr	r3, [pc, #244]	; (80216f8 <xTaskIncrementTick+0x168>)
 8021604:	681b      	ldr	r3, [r3, #0]
 8021606:	681b      	ldr	r3, [r3, #0]
 8021608:	2b00      	cmp	r3, #0
 802160a:	d101      	bne.n	8021610 <xTaskIncrementTick+0x80>
 802160c:	2301      	movs	r3, #1
 802160e:	e000      	b.n	8021612 <xTaskIncrementTick+0x82>
 8021610:	2300      	movs	r3, #0
 8021612:	2b00      	cmp	r3, #0
 8021614:	d004      	beq.n	8021620 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021616:	4b3b      	ldr	r3, [pc, #236]	; (8021704 <xTaskIncrementTick+0x174>)
 8021618:	f04f 32ff 	mov.w	r2, #4294967295
 802161c:	601a      	str	r2, [r3, #0]
					break;
 802161e:	e03f      	b.n	80216a0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8021620:	4b35      	ldr	r3, [pc, #212]	; (80216f8 <xTaskIncrementTick+0x168>)
 8021622:	681b      	ldr	r3, [r3, #0]
 8021624:	68db      	ldr	r3, [r3, #12]
 8021626:	68db      	ldr	r3, [r3, #12]
 8021628:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 802162a:	68bb      	ldr	r3, [r7, #8]
 802162c:	685b      	ldr	r3, [r3, #4]
 802162e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8021630:	693a      	ldr	r2, [r7, #16]
 8021632:	687b      	ldr	r3, [r7, #4]
 8021634:	429a      	cmp	r2, r3
 8021636:	d203      	bcs.n	8021640 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8021638:	4a32      	ldr	r2, [pc, #200]	; (8021704 <xTaskIncrementTick+0x174>)
 802163a:	687b      	ldr	r3, [r7, #4]
 802163c:	6013      	str	r3, [r2, #0]
						break;
 802163e:	e02f      	b.n	80216a0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021640:	68bb      	ldr	r3, [r7, #8]
 8021642:	3304      	adds	r3, #4
 8021644:	4618      	mov	r0, r3
 8021646:	f7fe f973 	bl	801f930 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802164a:	68bb      	ldr	r3, [r7, #8]
 802164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802164e:	2b00      	cmp	r3, #0
 8021650:	d004      	beq.n	802165c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8021652:	68bb      	ldr	r3, [r7, #8]
 8021654:	3318      	adds	r3, #24
 8021656:	4618      	mov	r0, r3
 8021658:	f7fe f96a 	bl	801f930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 802165c:	68bb      	ldr	r3, [r7, #8]
 802165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021660:	4b29      	ldr	r3, [pc, #164]	; (8021708 <xTaskIncrementTick+0x178>)
 8021662:	681b      	ldr	r3, [r3, #0]
 8021664:	429a      	cmp	r2, r3
 8021666:	d903      	bls.n	8021670 <xTaskIncrementTick+0xe0>
 8021668:	68bb      	ldr	r3, [r7, #8]
 802166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802166c:	4a26      	ldr	r2, [pc, #152]	; (8021708 <xTaskIncrementTick+0x178>)
 802166e:	6013      	str	r3, [r2, #0]
 8021670:	68bb      	ldr	r3, [r7, #8]
 8021672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021674:	4613      	mov	r3, r2
 8021676:	009b      	lsls	r3, r3, #2
 8021678:	4413      	add	r3, r2
 802167a:	009b      	lsls	r3, r3, #2
 802167c:	4a23      	ldr	r2, [pc, #140]	; (802170c <xTaskIncrementTick+0x17c>)
 802167e:	441a      	add	r2, r3
 8021680:	68bb      	ldr	r3, [r7, #8]
 8021682:	3304      	adds	r3, #4
 8021684:	4619      	mov	r1, r3
 8021686:	4610      	mov	r0, r2
 8021688:	f7fe f8f5 	bl	801f876 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802168c:	68bb      	ldr	r3, [r7, #8]
 802168e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021690:	4b1f      	ldr	r3, [pc, #124]	; (8021710 <xTaskIncrementTick+0x180>)
 8021692:	681b      	ldr	r3, [r3, #0]
 8021694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021696:	429a      	cmp	r2, r3
 8021698:	d3b3      	bcc.n	8021602 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 802169a:	2301      	movs	r3, #1
 802169c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802169e:	e7b0      	b.n	8021602 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80216a0:	4b1b      	ldr	r3, [pc, #108]	; (8021710 <xTaskIncrementTick+0x180>)
 80216a2:	681b      	ldr	r3, [r3, #0]
 80216a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80216a6:	4919      	ldr	r1, [pc, #100]	; (802170c <xTaskIncrementTick+0x17c>)
 80216a8:	4613      	mov	r3, r2
 80216aa:	009b      	lsls	r3, r3, #2
 80216ac:	4413      	add	r3, r2
 80216ae:	009b      	lsls	r3, r3, #2
 80216b0:	440b      	add	r3, r1
 80216b2:	681b      	ldr	r3, [r3, #0]
 80216b4:	2b01      	cmp	r3, #1
 80216b6:	d901      	bls.n	80216bc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80216b8:	2301      	movs	r3, #1
 80216ba:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80216bc:	4b15      	ldr	r3, [pc, #84]	; (8021714 <xTaskIncrementTick+0x184>)
 80216be:	681b      	ldr	r3, [r3, #0]
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	d109      	bne.n	80216d8 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 80216c4:	f7ef fdc1 	bl	801124a <vApplicationTickHook>
 80216c8:	e006      	b.n	80216d8 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80216ca:	4b12      	ldr	r3, [pc, #72]	; (8021714 <xTaskIncrementTick+0x184>)
 80216cc:	681b      	ldr	r3, [r3, #0]
 80216ce:	3301      	adds	r3, #1
 80216d0:	4a10      	ldr	r2, [pc, #64]	; (8021714 <xTaskIncrementTick+0x184>)
 80216d2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80216d4:	f7ef fdb9 	bl	801124a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80216d8:	4b0f      	ldr	r3, [pc, #60]	; (8021718 <xTaskIncrementTick+0x188>)
 80216da:	681b      	ldr	r3, [r3, #0]
 80216dc:	2b00      	cmp	r3, #0
 80216de:	d001      	beq.n	80216e4 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 80216e0:	2301      	movs	r3, #1
 80216e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80216e4:	697b      	ldr	r3, [r7, #20]
}
 80216e6:	4618      	mov	r0, r3
 80216e8:	3718      	adds	r7, #24
 80216ea:	46bd      	mov	sp, r7
 80216ec:	bd80      	pop	{r7, pc}
 80216ee:	bf00      	nop
 80216f0:	2002734c 	.word	0x2002734c
 80216f4:	20027328 	.word	0x20027328
 80216f8:	200272dc 	.word	0x200272dc
 80216fc:	200272e0 	.word	0x200272e0
 8021700:	2002733c 	.word	0x2002733c
 8021704:	20027344 	.word	0x20027344
 8021708:	2002732c 	.word	0x2002732c
 802170c:	20026e54 	.word	0x20026e54
 8021710:	20026e50 	.word	0x20026e50
 8021714:	20027334 	.word	0x20027334
 8021718:	20027338 	.word	0x20027338

0802171c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 802171c:	b580      	push	{r7, lr}
 802171e:	b084      	sub	sp, #16
 8021720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8021722:	4b3b      	ldr	r3, [pc, #236]	; (8021810 <vTaskSwitchContext+0xf4>)
 8021724:	681b      	ldr	r3, [r3, #0]
 8021726:	2b00      	cmp	r3, #0
 8021728:	d003      	beq.n	8021732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 802172a:	4b3a      	ldr	r3, [pc, #232]	; (8021814 <vTaskSwitchContext+0xf8>)
 802172c:	2201      	movs	r2, #1
 802172e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8021730:	e06a      	b.n	8021808 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 8021732:	4b38      	ldr	r3, [pc, #224]	; (8021814 <vTaskSwitchContext+0xf8>)
 8021734:	2200      	movs	r2, #0
 8021736:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8021738:	f7ef fd80 	bl	801123c <getRunTimeCounterValue>
 802173c:	4602      	mov	r2, r0
 802173e:	4b36      	ldr	r3, [pc, #216]	; (8021818 <vTaskSwitchContext+0xfc>)
 8021740:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8021742:	4b35      	ldr	r3, [pc, #212]	; (8021818 <vTaskSwitchContext+0xfc>)
 8021744:	681a      	ldr	r2, [r3, #0]
 8021746:	4b35      	ldr	r3, [pc, #212]	; (802181c <vTaskSwitchContext+0x100>)
 8021748:	681b      	ldr	r3, [r3, #0]
 802174a:	429a      	cmp	r2, r3
 802174c:	d909      	bls.n	8021762 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 802174e:	4b34      	ldr	r3, [pc, #208]	; (8021820 <vTaskSwitchContext+0x104>)
 8021750:	681b      	ldr	r3, [r3, #0]
 8021752:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8021754:	4a30      	ldr	r2, [pc, #192]	; (8021818 <vTaskSwitchContext+0xfc>)
 8021756:	6810      	ldr	r0, [r2, #0]
 8021758:	4a30      	ldr	r2, [pc, #192]	; (802181c <vTaskSwitchContext+0x100>)
 802175a:	6812      	ldr	r2, [r2, #0]
 802175c:	1a82      	subs	r2, r0, r2
 802175e:	440a      	add	r2, r1
 8021760:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8021762:	4b2d      	ldr	r3, [pc, #180]	; (8021818 <vTaskSwitchContext+0xfc>)
 8021764:	681b      	ldr	r3, [r3, #0]
 8021766:	4a2d      	ldr	r2, [pc, #180]	; (802181c <vTaskSwitchContext+0x100>)
 8021768:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 802176a:	4b2d      	ldr	r3, [pc, #180]	; (8021820 <vTaskSwitchContext+0x104>)
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	681a      	ldr	r2, [r3, #0]
 8021770:	4b2b      	ldr	r3, [pc, #172]	; (8021820 <vTaskSwitchContext+0x104>)
 8021772:	681b      	ldr	r3, [r3, #0]
 8021774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021776:	429a      	cmp	r2, r3
 8021778:	d808      	bhi.n	802178c <vTaskSwitchContext+0x70>
 802177a:	4b29      	ldr	r3, [pc, #164]	; (8021820 <vTaskSwitchContext+0x104>)
 802177c:	681a      	ldr	r2, [r3, #0]
 802177e:	4b28      	ldr	r3, [pc, #160]	; (8021820 <vTaskSwitchContext+0x104>)
 8021780:	681b      	ldr	r3, [r3, #0]
 8021782:	3334      	adds	r3, #52	; 0x34
 8021784:	4619      	mov	r1, r3
 8021786:	4610      	mov	r0, r2
 8021788:	f7ef fd66 	bl	8011258 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 802178c:	4b25      	ldr	r3, [pc, #148]	; (8021824 <vTaskSwitchContext+0x108>)
 802178e:	681b      	ldr	r3, [r3, #0]
 8021790:	60fb      	str	r3, [r7, #12]
 8021792:	e00f      	b.n	80217b4 <vTaskSwitchContext+0x98>
 8021794:	68fb      	ldr	r3, [r7, #12]
 8021796:	2b00      	cmp	r3, #0
 8021798:	d109      	bne.n	80217ae <vTaskSwitchContext+0x92>
 802179a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802179e:	f383 8811 	msr	BASEPRI, r3
 80217a2:	f3bf 8f6f 	isb	sy
 80217a6:	f3bf 8f4f 	dsb	sy
 80217aa:	607b      	str	r3, [r7, #4]
 80217ac:	e7fe      	b.n	80217ac <vTaskSwitchContext+0x90>
 80217ae:	68fb      	ldr	r3, [r7, #12]
 80217b0:	3b01      	subs	r3, #1
 80217b2:	60fb      	str	r3, [r7, #12]
 80217b4:	491c      	ldr	r1, [pc, #112]	; (8021828 <vTaskSwitchContext+0x10c>)
 80217b6:	68fa      	ldr	r2, [r7, #12]
 80217b8:	4613      	mov	r3, r2
 80217ba:	009b      	lsls	r3, r3, #2
 80217bc:	4413      	add	r3, r2
 80217be:	009b      	lsls	r3, r3, #2
 80217c0:	440b      	add	r3, r1
 80217c2:	681b      	ldr	r3, [r3, #0]
 80217c4:	2b00      	cmp	r3, #0
 80217c6:	d0e5      	beq.n	8021794 <vTaskSwitchContext+0x78>
 80217c8:	68fa      	ldr	r2, [r7, #12]
 80217ca:	4613      	mov	r3, r2
 80217cc:	009b      	lsls	r3, r3, #2
 80217ce:	4413      	add	r3, r2
 80217d0:	009b      	lsls	r3, r3, #2
 80217d2:	4a15      	ldr	r2, [pc, #84]	; (8021828 <vTaskSwitchContext+0x10c>)
 80217d4:	4413      	add	r3, r2
 80217d6:	60bb      	str	r3, [r7, #8]
 80217d8:	68bb      	ldr	r3, [r7, #8]
 80217da:	685b      	ldr	r3, [r3, #4]
 80217dc:	685a      	ldr	r2, [r3, #4]
 80217de:	68bb      	ldr	r3, [r7, #8]
 80217e0:	605a      	str	r2, [r3, #4]
 80217e2:	68bb      	ldr	r3, [r7, #8]
 80217e4:	685a      	ldr	r2, [r3, #4]
 80217e6:	68bb      	ldr	r3, [r7, #8]
 80217e8:	3308      	adds	r3, #8
 80217ea:	429a      	cmp	r2, r3
 80217ec:	d104      	bne.n	80217f8 <vTaskSwitchContext+0xdc>
 80217ee:	68bb      	ldr	r3, [r7, #8]
 80217f0:	685b      	ldr	r3, [r3, #4]
 80217f2:	685a      	ldr	r2, [r3, #4]
 80217f4:	68bb      	ldr	r3, [r7, #8]
 80217f6:	605a      	str	r2, [r3, #4]
 80217f8:	68bb      	ldr	r3, [r7, #8]
 80217fa:	685b      	ldr	r3, [r3, #4]
 80217fc:	68db      	ldr	r3, [r3, #12]
 80217fe:	4a08      	ldr	r2, [pc, #32]	; (8021820 <vTaskSwitchContext+0x104>)
 8021800:	6013      	str	r3, [r2, #0]
 8021802:	4a08      	ldr	r2, [pc, #32]	; (8021824 <vTaskSwitchContext+0x108>)
 8021804:	68fb      	ldr	r3, [r7, #12]
 8021806:	6013      	str	r3, [r2, #0]
}
 8021808:	bf00      	nop
 802180a:	3710      	adds	r7, #16
 802180c:	46bd      	mov	sp, r7
 802180e:	bd80      	pop	{r7, pc}
 8021810:	2002734c 	.word	0x2002734c
 8021814:	20027338 	.word	0x20027338
 8021818:	20027354 	.word	0x20027354
 802181c:	20027350 	.word	0x20027350
 8021820:	20026e50 	.word	0x20026e50
 8021824:	2002732c 	.word	0x2002732c
 8021828:	20026e54 	.word	0x20026e54

0802182c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 802182c:	b580      	push	{r7, lr}
 802182e:	b084      	sub	sp, #16
 8021830:	af00      	add	r7, sp, #0
 8021832:	6078      	str	r0, [r7, #4]
 8021834:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8021836:	687b      	ldr	r3, [r7, #4]
 8021838:	2b00      	cmp	r3, #0
 802183a:	d109      	bne.n	8021850 <vTaskPlaceOnEventList+0x24>
 802183c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021840:	f383 8811 	msr	BASEPRI, r3
 8021844:	f3bf 8f6f 	isb	sy
 8021848:	f3bf 8f4f 	dsb	sy
 802184c:	60fb      	str	r3, [r7, #12]
 802184e:	e7fe      	b.n	802184e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8021850:	4b07      	ldr	r3, [pc, #28]	; (8021870 <vTaskPlaceOnEventList+0x44>)
 8021852:	681b      	ldr	r3, [r3, #0]
 8021854:	3318      	adds	r3, #24
 8021856:	4619      	mov	r1, r3
 8021858:	6878      	ldr	r0, [r7, #4]
 802185a:	f7fe f830 	bl	801f8be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 802185e:	2101      	movs	r1, #1
 8021860:	6838      	ldr	r0, [r7, #0]
 8021862:	f000 fda9 	bl	80223b8 <prvAddCurrentTaskToDelayedList>
}
 8021866:	bf00      	nop
 8021868:	3710      	adds	r7, #16
 802186a:	46bd      	mov	sp, r7
 802186c:	bd80      	pop	{r7, pc}
 802186e:	bf00      	nop
 8021870:	20026e50 	.word	0x20026e50

08021874 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8021874:	b580      	push	{r7, lr}
 8021876:	b086      	sub	sp, #24
 8021878:	af00      	add	r7, sp, #0
 802187a:	60f8      	str	r0, [r7, #12]
 802187c:	60b9      	str	r1, [r7, #8]
 802187e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8021880:	68fb      	ldr	r3, [r7, #12]
 8021882:	2b00      	cmp	r3, #0
 8021884:	d109      	bne.n	802189a <vTaskPlaceOnEventListRestricted+0x26>
 8021886:	f04f 0350 	mov.w	r3, #80	; 0x50
 802188a:	f383 8811 	msr	BASEPRI, r3
 802188e:	f3bf 8f6f 	isb	sy
 8021892:	f3bf 8f4f 	dsb	sy
 8021896:	617b      	str	r3, [r7, #20]
 8021898:	e7fe      	b.n	8021898 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802189a:	4b0a      	ldr	r3, [pc, #40]	; (80218c4 <vTaskPlaceOnEventListRestricted+0x50>)
 802189c:	681b      	ldr	r3, [r3, #0]
 802189e:	3318      	adds	r3, #24
 80218a0:	4619      	mov	r1, r3
 80218a2:	68f8      	ldr	r0, [r7, #12]
 80218a4:	f7fd ffe7 	bl	801f876 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80218a8:	687b      	ldr	r3, [r7, #4]
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	d002      	beq.n	80218b4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80218ae:	f04f 33ff 	mov.w	r3, #4294967295
 80218b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80218b4:	6879      	ldr	r1, [r7, #4]
 80218b6:	68b8      	ldr	r0, [r7, #8]
 80218b8:	f000 fd7e 	bl	80223b8 <prvAddCurrentTaskToDelayedList>
	}
 80218bc:	bf00      	nop
 80218be:	3718      	adds	r7, #24
 80218c0:	46bd      	mov	sp, r7
 80218c2:	bd80      	pop	{r7, pc}
 80218c4:	20026e50 	.word	0x20026e50

080218c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80218c8:	b580      	push	{r7, lr}
 80218ca:	b086      	sub	sp, #24
 80218cc:	af00      	add	r7, sp, #0
 80218ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80218d0:	687b      	ldr	r3, [r7, #4]
 80218d2:	68db      	ldr	r3, [r3, #12]
 80218d4:	68db      	ldr	r3, [r3, #12]
 80218d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80218d8:	693b      	ldr	r3, [r7, #16]
 80218da:	2b00      	cmp	r3, #0
 80218dc:	d109      	bne.n	80218f2 <xTaskRemoveFromEventList+0x2a>
 80218de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80218e2:	f383 8811 	msr	BASEPRI, r3
 80218e6:	f3bf 8f6f 	isb	sy
 80218ea:	f3bf 8f4f 	dsb	sy
 80218ee:	60fb      	str	r3, [r7, #12]
 80218f0:	e7fe      	b.n	80218f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80218f2:	693b      	ldr	r3, [r7, #16]
 80218f4:	3318      	adds	r3, #24
 80218f6:	4618      	mov	r0, r3
 80218f8:	f7fe f81a 	bl	801f930 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80218fc:	4b1e      	ldr	r3, [pc, #120]	; (8021978 <xTaskRemoveFromEventList+0xb0>)
 80218fe:	681b      	ldr	r3, [r3, #0]
 8021900:	2b00      	cmp	r3, #0
 8021902:	d11d      	bne.n	8021940 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8021904:	693b      	ldr	r3, [r7, #16]
 8021906:	3304      	adds	r3, #4
 8021908:	4618      	mov	r0, r3
 802190a:	f7fe f811 	bl	801f930 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 802190e:	693b      	ldr	r3, [r7, #16]
 8021910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021912:	4b1a      	ldr	r3, [pc, #104]	; (802197c <xTaskRemoveFromEventList+0xb4>)
 8021914:	681b      	ldr	r3, [r3, #0]
 8021916:	429a      	cmp	r2, r3
 8021918:	d903      	bls.n	8021922 <xTaskRemoveFromEventList+0x5a>
 802191a:	693b      	ldr	r3, [r7, #16]
 802191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802191e:	4a17      	ldr	r2, [pc, #92]	; (802197c <xTaskRemoveFromEventList+0xb4>)
 8021920:	6013      	str	r3, [r2, #0]
 8021922:	693b      	ldr	r3, [r7, #16]
 8021924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021926:	4613      	mov	r3, r2
 8021928:	009b      	lsls	r3, r3, #2
 802192a:	4413      	add	r3, r2
 802192c:	009b      	lsls	r3, r3, #2
 802192e:	4a14      	ldr	r2, [pc, #80]	; (8021980 <xTaskRemoveFromEventList+0xb8>)
 8021930:	441a      	add	r2, r3
 8021932:	693b      	ldr	r3, [r7, #16]
 8021934:	3304      	adds	r3, #4
 8021936:	4619      	mov	r1, r3
 8021938:	4610      	mov	r0, r2
 802193a:	f7fd ff9c 	bl	801f876 <vListInsertEnd>
 802193e:	e005      	b.n	802194c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8021940:	693b      	ldr	r3, [r7, #16]
 8021942:	3318      	adds	r3, #24
 8021944:	4619      	mov	r1, r3
 8021946:	480f      	ldr	r0, [pc, #60]	; (8021984 <xTaskRemoveFromEventList+0xbc>)
 8021948:	f7fd ff95 	bl	801f876 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 802194c:	693b      	ldr	r3, [r7, #16]
 802194e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021950:	4b0d      	ldr	r3, [pc, #52]	; (8021988 <xTaskRemoveFromEventList+0xc0>)
 8021952:	681b      	ldr	r3, [r3, #0]
 8021954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021956:	429a      	cmp	r2, r3
 8021958:	d905      	bls.n	8021966 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 802195a:	2301      	movs	r3, #1
 802195c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 802195e:	4b0b      	ldr	r3, [pc, #44]	; (802198c <xTaskRemoveFromEventList+0xc4>)
 8021960:	2201      	movs	r2, #1
 8021962:	601a      	str	r2, [r3, #0]
 8021964:	e001      	b.n	802196a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8021966:	2300      	movs	r3, #0
 8021968:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 802196a:	f000 f999 	bl	8021ca0 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 802196e:	697b      	ldr	r3, [r7, #20]
}
 8021970:	4618      	mov	r0, r3
 8021972:	3718      	adds	r7, #24
 8021974:	46bd      	mov	sp, r7
 8021976:	bd80      	pop	{r7, pc}
 8021978:	2002734c 	.word	0x2002734c
 802197c:	2002732c 	.word	0x2002732c
 8021980:	20026e54 	.word	0x20026e54
 8021984:	200272e4 	.word	0x200272e4
 8021988:	20026e50 	.word	0x20026e50
 802198c:	20027338 	.word	0x20027338

08021990 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8021990:	b480      	push	{r7}
 8021992:	b083      	sub	sp, #12
 8021994:	af00      	add	r7, sp, #0
 8021996:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8021998:	4b06      	ldr	r3, [pc, #24]	; (80219b4 <vTaskInternalSetTimeOutState+0x24>)
 802199a:	681a      	ldr	r2, [r3, #0]
 802199c:	687b      	ldr	r3, [r7, #4]
 802199e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80219a0:	4b05      	ldr	r3, [pc, #20]	; (80219b8 <vTaskInternalSetTimeOutState+0x28>)
 80219a2:	681a      	ldr	r2, [r3, #0]
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	605a      	str	r2, [r3, #4]
}
 80219a8:	bf00      	nop
 80219aa:	370c      	adds	r7, #12
 80219ac:	46bd      	mov	sp, r7
 80219ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219b2:	4770      	bx	lr
 80219b4:	2002733c 	.word	0x2002733c
 80219b8:	20027328 	.word	0x20027328

080219bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80219bc:	b580      	push	{r7, lr}
 80219be:	b088      	sub	sp, #32
 80219c0:	af00      	add	r7, sp, #0
 80219c2:	6078      	str	r0, [r7, #4]
 80219c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80219c6:	687b      	ldr	r3, [r7, #4]
 80219c8:	2b00      	cmp	r3, #0
 80219ca:	d109      	bne.n	80219e0 <xTaskCheckForTimeOut+0x24>
 80219cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80219d0:	f383 8811 	msr	BASEPRI, r3
 80219d4:	f3bf 8f6f 	isb	sy
 80219d8:	f3bf 8f4f 	dsb	sy
 80219dc:	613b      	str	r3, [r7, #16]
 80219de:	e7fe      	b.n	80219de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80219e0:	683b      	ldr	r3, [r7, #0]
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	d109      	bne.n	80219fa <xTaskCheckForTimeOut+0x3e>
 80219e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80219ea:	f383 8811 	msr	BASEPRI, r3
 80219ee:	f3bf 8f6f 	isb	sy
 80219f2:	f3bf 8f4f 	dsb	sy
 80219f6:	60fb      	str	r3, [r7, #12]
 80219f8:	e7fe      	b.n	80219f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80219fa:	f7fe f8e7 	bl	801fbcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80219fe:	4b1d      	ldr	r3, [pc, #116]	; (8021a74 <xTaskCheckForTimeOut+0xb8>)
 8021a00:	681b      	ldr	r3, [r3, #0]
 8021a02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	685b      	ldr	r3, [r3, #4]
 8021a08:	69ba      	ldr	r2, [r7, #24]
 8021a0a:	1ad3      	subs	r3, r2, r3
 8021a0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8021a0e:	683b      	ldr	r3, [r7, #0]
 8021a10:	681b      	ldr	r3, [r3, #0]
 8021a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021a16:	d102      	bne.n	8021a1e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8021a18:	2300      	movs	r3, #0
 8021a1a:	61fb      	str	r3, [r7, #28]
 8021a1c:	e023      	b.n	8021a66 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8021a1e:	687b      	ldr	r3, [r7, #4]
 8021a20:	681a      	ldr	r2, [r3, #0]
 8021a22:	4b15      	ldr	r3, [pc, #84]	; (8021a78 <xTaskCheckForTimeOut+0xbc>)
 8021a24:	681b      	ldr	r3, [r3, #0]
 8021a26:	429a      	cmp	r2, r3
 8021a28:	d007      	beq.n	8021a3a <xTaskCheckForTimeOut+0x7e>
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	685b      	ldr	r3, [r3, #4]
 8021a2e:	69ba      	ldr	r2, [r7, #24]
 8021a30:	429a      	cmp	r2, r3
 8021a32:	d302      	bcc.n	8021a3a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8021a34:	2301      	movs	r3, #1
 8021a36:	61fb      	str	r3, [r7, #28]
 8021a38:	e015      	b.n	8021a66 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8021a3a:	683b      	ldr	r3, [r7, #0]
 8021a3c:	681b      	ldr	r3, [r3, #0]
 8021a3e:	697a      	ldr	r2, [r7, #20]
 8021a40:	429a      	cmp	r2, r3
 8021a42:	d20b      	bcs.n	8021a5c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8021a44:	683b      	ldr	r3, [r7, #0]
 8021a46:	681a      	ldr	r2, [r3, #0]
 8021a48:	697b      	ldr	r3, [r7, #20]
 8021a4a:	1ad2      	subs	r2, r2, r3
 8021a4c:	683b      	ldr	r3, [r7, #0]
 8021a4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8021a50:	6878      	ldr	r0, [r7, #4]
 8021a52:	f7ff ff9d 	bl	8021990 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8021a56:	2300      	movs	r3, #0
 8021a58:	61fb      	str	r3, [r7, #28]
 8021a5a:	e004      	b.n	8021a66 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8021a5c:	683b      	ldr	r3, [r7, #0]
 8021a5e:	2200      	movs	r2, #0
 8021a60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8021a62:	2301      	movs	r3, #1
 8021a64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8021a66:	f7fe f8df 	bl	801fc28 <vPortExitCritical>

	return xReturn;
 8021a6a:	69fb      	ldr	r3, [r7, #28]
}
 8021a6c:	4618      	mov	r0, r3
 8021a6e:	3720      	adds	r7, #32
 8021a70:	46bd      	mov	sp, r7
 8021a72:	bd80      	pop	{r7, pc}
 8021a74:	20027328 	.word	0x20027328
 8021a78:	2002733c 	.word	0x2002733c

08021a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8021a7c:	b480      	push	{r7}
 8021a7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8021a80:	4b03      	ldr	r3, [pc, #12]	; (8021a90 <vTaskMissedYield+0x14>)
 8021a82:	2201      	movs	r2, #1
 8021a84:	601a      	str	r2, [r3, #0]
}
 8021a86:	bf00      	nop
 8021a88:	46bd      	mov	sp, r7
 8021a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a8e:	4770      	bx	lr
 8021a90:	20027338 	.word	0x20027338

08021a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8021a94:	b580      	push	{r7, lr}
 8021a96:	b084      	sub	sp, #16
 8021a98:	af00      	add	r7, sp, #0
 8021a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8021a9c:	f000 f8a6 	bl	8021bec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8021aa0:	4b17      	ldr	r3, [pc, #92]	; (8021b00 <prvIdleTask+0x6c>)
 8021aa2:	681b      	ldr	r3, [r3, #0]
 8021aa4:	2b01      	cmp	r3, #1
 8021aa6:	d907      	bls.n	8021ab8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8021aa8:	4b16      	ldr	r3, [pc, #88]	; (8021b04 <prvIdleTask+0x70>)
 8021aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021aae:	601a      	str	r2, [r3, #0]
 8021ab0:	f3bf 8f4f 	dsb	sy
 8021ab4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8021ab8:	f7ff fc60 	bl	802137c <prvGetExpectedIdleTime>
 8021abc:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8021abe:	68fb      	ldr	r3, [r7, #12]
 8021ac0:	2b01      	cmp	r3, #1
 8021ac2:	d9eb      	bls.n	8021a9c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8021ac4:	f7ff fc4c 	bl	8021360 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8021ac8:	4b0f      	ldr	r3, [pc, #60]	; (8021b08 <prvIdleTask+0x74>)
 8021aca:	681a      	ldr	r2, [r3, #0]
 8021acc:	4b0f      	ldr	r3, [pc, #60]	; (8021b0c <prvIdleTask+0x78>)
 8021ace:	681b      	ldr	r3, [r3, #0]
 8021ad0:	429a      	cmp	r2, r3
 8021ad2:	d209      	bcs.n	8021ae8 <prvIdleTask+0x54>
 8021ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021ad8:	f383 8811 	msr	BASEPRI, r3
 8021adc:	f3bf 8f6f 	isb	sy
 8021ae0:	f3bf 8f4f 	dsb	sy
 8021ae4:	60bb      	str	r3, [r7, #8]
 8021ae6:	e7fe      	b.n	8021ae6 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8021ae8:	f7ff fc48 	bl	802137c <prvGetExpectedIdleTime>
 8021aec:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8021aee:	68fb      	ldr	r3, [r7, #12]
 8021af0:	2b01      	cmp	r3, #1
 8021af2:	d902      	bls.n	8021afa <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8021af4:	68f8      	ldr	r0, [r7, #12]
 8021af6:	f7f0 fbc7 	bl	8012288 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8021afa:	f7ff fc77 	bl	80213ec <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8021afe:	e7cd      	b.n	8021a9c <prvIdleTask+0x8>
 8021b00:	20026e54 	.word	0x20026e54
 8021b04:	e000ed04 	.word	0xe000ed04
 8021b08:	20027344 	.word	0x20027344
 8021b0c:	20027328 	.word	0x20027328

08021b10 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8021b10:	b480      	push	{r7}
 8021b12:	b083      	sub	sp, #12
 8021b14:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8021b16:	2301      	movs	r3, #1
 8021b18:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8021b1a:	2301      	movs	r3, #1
 8021b1c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8021b1e:	4b0f      	ldr	r3, [pc, #60]	; (8021b5c <eTaskConfirmSleepModeStatus+0x4c>)
 8021b20:	681b      	ldr	r3, [r3, #0]
 8021b22:	2b00      	cmp	r3, #0
 8021b24:	d002      	beq.n	8021b2c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8021b26:	2300      	movs	r3, #0
 8021b28:	71fb      	strb	r3, [r7, #7]
 8021b2a:	e010      	b.n	8021b4e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8021b2c:	4b0c      	ldr	r3, [pc, #48]	; (8021b60 <eTaskConfirmSleepModeStatus+0x50>)
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	2b00      	cmp	r3, #0
 8021b32:	d002      	beq.n	8021b3a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8021b34:	2300      	movs	r3, #0
 8021b36:	71fb      	strb	r3, [r7, #7]
 8021b38:	e009      	b.n	8021b4e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8021b3a:	4b0a      	ldr	r3, [pc, #40]	; (8021b64 <eTaskConfirmSleepModeStatus+0x54>)
 8021b3c:	681a      	ldr	r2, [r3, #0]
 8021b3e:	4b0a      	ldr	r3, [pc, #40]	; (8021b68 <eTaskConfirmSleepModeStatus+0x58>)
 8021b40:	6819      	ldr	r1, [r3, #0]
 8021b42:	683b      	ldr	r3, [r7, #0]
 8021b44:	1acb      	subs	r3, r1, r3
 8021b46:	429a      	cmp	r2, r3
 8021b48:	d101      	bne.n	8021b4e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8021b4a:	2302      	movs	r3, #2
 8021b4c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8021b4e:	79fb      	ldrb	r3, [r7, #7]
	}
 8021b50:	4618      	mov	r0, r3
 8021b52:	370c      	adds	r7, #12
 8021b54:	46bd      	mov	sp, r7
 8021b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b5a:	4770      	bx	lr
 8021b5c:	200272e4 	.word	0x200272e4
 8021b60:	20027338 	.word	0x20027338
 8021b64:	20027310 	.word	0x20027310
 8021b68:	20027324 	.word	0x20027324

08021b6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8021b6c:	b580      	push	{r7, lr}
 8021b6e:	b082      	sub	sp, #8
 8021b70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8021b72:	2300      	movs	r3, #0
 8021b74:	607b      	str	r3, [r7, #4]
 8021b76:	e00c      	b.n	8021b92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8021b78:	687a      	ldr	r2, [r7, #4]
 8021b7a:	4613      	mov	r3, r2
 8021b7c:	009b      	lsls	r3, r3, #2
 8021b7e:	4413      	add	r3, r2
 8021b80:	009b      	lsls	r3, r3, #2
 8021b82:	4a12      	ldr	r2, [pc, #72]	; (8021bcc <prvInitialiseTaskLists+0x60>)
 8021b84:	4413      	add	r3, r2
 8021b86:	4618      	mov	r0, r3
 8021b88:	f7fd fe48 	bl	801f81c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8021b8c:	687b      	ldr	r3, [r7, #4]
 8021b8e:	3301      	adds	r3, #1
 8021b90:	607b      	str	r3, [r7, #4]
 8021b92:	687b      	ldr	r3, [r7, #4]
 8021b94:	2b37      	cmp	r3, #55	; 0x37
 8021b96:	d9ef      	bls.n	8021b78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8021b98:	480d      	ldr	r0, [pc, #52]	; (8021bd0 <prvInitialiseTaskLists+0x64>)
 8021b9a:	f7fd fe3f 	bl	801f81c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8021b9e:	480d      	ldr	r0, [pc, #52]	; (8021bd4 <prvInitialiseTaskLists+0x68>)
 8021ba0:	f7fd fe3c 	bl	801f81c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8021ba4:	480c      	ldr	r0, [pc, #48]	; (8021bd8 <prvInitialiseTaskLists+0x6c>)
 8021ba6:	f7fd fe39 	bl	801f81c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8021baa:	480c      	ldr	r0, [pc, #48]	; (8021bdc <prvInitialiseTaskLists+0x70>)
 8021bac:	f7fd fe36 	bl	801f81c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8021bb0:	480b      	ldr	r0, [pc, #44]	; (8021be0 <prvInitialiseTaskLists+0x74>)
 8021bb2:	f7fd fe33 	bl	801f81c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8021bb6:	4b0b      	ldr	r3, [pc, #44]	; (8021be4 <prvInitialiseTaskLists+0x78>)
 8021bb8:	4a05      	ldr	r2, [pc, #20]	; (8021bd0 <prvInitialiseTaskLists+0x64>)
 8021bba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8021bbc:	4b0a      	ldr	r3, [pc, #40]	; (8021be8 <prvInitialiseTaskLists+0x7c>)
 8021bbe:	4a05      	ldr	r2, [pc, #20]	; (8021bd4 <prvInitialiseTaskLists+0x68>)
 8021bc0:	601a      	str	r2, [r3, #0]
}
 8021bc2:	bf00      	nop
 8021bc4:	3708      	adds	r7, #8
 8021bc6:	46bd      	mov	sp, r7
 8021bc8:	bd80      	pop	{r7, pc}
 8021bca:	bf00      	nop
 8021bcc:	20026e54 	.word	0x20026e54
 8021bd0:	200272b4 	.word	0x200272b4
 8021bd4:	200272c8 	.word	0x200272c8
 8021bd8:	200272e4 	.word	0x200272e4
 8021bdc:	200272f8 	.word	0x200272f8
 8021be0:	20027310 	.word	0x20027310
 8021be4:	200272dc 	.word	0x200272dc
 8021be8:	200272e0 	.word	0x200272e0

08021bec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8021bec:	b580      	push	{r7, lr}
 8021bee:	b082      	sub	sp, #8
 8021bf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8021bf2:	e019      	b.n	8021c28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8021bf4:	f7fd ffea 	bl	801fbcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8021bf8:	4b0f      	ldr	r3, [pc, #60]	; (8021c38 <prvCheckTasksWaitingTermination+0x4c>)
 8021bfa:	68db      	ldr	r3, [r3, #12]
 8021bfc:	68db      	ldr	r3, [r3, #12]
 8021bfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	3304      	adds	r3, #4
 8021c04:	4618      	mov	r0, r3
 8021c06:	f7fd fe93 	bl	801f930 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8021c0a:	4b0c      	ldr	r3, [pc, #48]	; (8021c3c <prvCheckTasksWaitingTermination+0x50>)
 8021c0c:	681b      	ldr	r3, [r3, #0]
 8021c0e:	3b01      	subs	r3, #1
 8021c10:	4a0a      	ldr	r2, [pc, #40]	; (8021c3c <prvCheckTasksWaitingTermination+0x50>)
 8021c12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8021c14:	4b0a      	ldr	r3, [pc, #40]	; (8021c40 <prvCheckTasksWaitingTermination+0x54>)
 8021c16:	681b      	ldr	r3, [r3, #0]
 8021c18:	3b01      	subs	r3, #1
 8021c1a:	4a09      	ldr	r2, [pc, #36]	; (8021c40 <prvCheckTasksWaitingTermination+0x54>)
 8021c1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8021c1e:	f7fe f803 	bl	801fc28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8021c22:	6878      	ldr	r0, [r7, #4]
 8021c24:	f000 f80e 	bl	8021c44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8021c28:	4b05      	ldr	r3, [pc, #20]	; (8021c40 <prvCheckTasksWaitingTermination+0x54>)
 8021c2a:	681b      	ldr	r3, [r3, #0]
 8021c2c:	2b00      	cmp	r3, #0
 8021c2e:	d1e1      	bne.n	8021bf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8021c30:	bf00      	nop
 8021c32:	3708      	adds	r7, #8
 8021c34:	46bd      	mov	sp, r7
 8021c36:	bd80      	pop	{r7, pc}
 8021c38:	200272f8 	.word	0x200272f8
 8021c3c:	20027324 	.word	0x20027324
 8021c40:	2002730c 	.word	0x2002730c

08021c44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8021c44:	b580      	push	{r7, lr}
 8021c46:	b084      	sub	sp, #16
 8021c48:	af00      	add	r7, sp, #0
 8021c4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8021c4c:	687b      	ldr	r3, [r7, #4]
 8021c4e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	d108      	bne.n	8021c68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c5a:	4618      	mov	r0, r3
 8021c5c:	f7fd fcc8 	bl	801f5f0 <vPortFree>
				vPortFree( pxTCB );
 8021c60:	6878      	ldr	r0, [r7, #4]
 8021c62:	f7fd fcc5 	bl	801f5f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8021c66:	e017      	b.n	8021c98 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8021c6e:	2b01      	cmp	r3, #1
 8021c70:	d103      	bne.n	8021c7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8021c72:	6878      	ldr	r0, [r7, #4]
 8021c74:	f7fd fcbc 	bl	801f5f0 <vPortFree>
	}
 8021c78:	e00e      	b.n	8021c98 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8021c7a:	687b      	ldr	r3, [r7, #4]
 8021c7c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8021c80:	2b02      	cmp	r3, #2
 8021c82:	d009      	beq.n	8021c98 <prvDeleteTCB+0x54>
 8021c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021c88:	f383 8811 	msr	BASEPRI, r3
 8021c8c:	f3bf 8f6f 	isb	sy
 8021c90:	f3bf 8f4f 	dsb	sy
 8021c94:	60fb      	str	r3, [r7, #12]
 8021c96:	e7fe      	b.n	8021c96 <prvDeleteTCB+0x52>
	}
 8021c98:	bf00      	nop
 8021c9a:	3710      	adds	r7, #16
 8021c9c:	46bd      	mov	sp, r7
 8021c9e:	bd80      	pop	{r7, pc}

08021ca0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8021ca0:	b480      	push	{r7}
 8021ca2:	b083      	sub	sp, #12
 8021ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021ca6:	4b0f      	ldr	r3, [pc, #60]	; (8021ce4 <prvResetNextTaskUnblockTime+0x44>)
 8021ca8:	681b      	ldr	r3, [r3, #0]
 8021caa:	681b      	ldr	r3, [r3, #0]
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d101      	bne.n	8021cb4 <prvResetNextTaskUnblockTime+0x14>
 8021cb0:	2301      	movs	r3, #1
 8021cb2:	e000      	b.n	8021cb6 <prvResetNextTaskUnblockTime+0x16>
 8021cb4:	2300      	movs	r3, #0
 8021cb6:	2b00      	cmp	r3, #0
 8021cb8:	d004      	beq.n	8021cc4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8021cba:	4b0b      	ldr	r3, [pc, #44]	; (8021ce8 <prvResetNextTaskUnblockTime+0x48>)
 8021cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8021cc0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8021cc2:	e008      	b.n	8021cd6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8021cc4:	4b07      	ldr	r3, [pc, #28]	; (8021ce4 <prvResetNextTaskUnblockTime+0x44>)
 8021cc6:	681b      	ldr	r3, [r3, #0]
 8021cc8:	68db      	ldr	r3, [r3, #12]
 8021cca:	68db      	ldr	r3, [r3, #12]
 8021ccc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8021cce:	687b      	ldr	r3, [r7, #4]
 8021cd0:	685b      	ldr	r3, [r3, #4]
 8021cd2:	4a05      	ldr	r2, [pc, #20]	; (8021ce8 <prvResetNextTaskUnblockTime+0x48>)
 8021cd4:	6013      	str	r3, [r2, #0]
}
 8021cd6:	bf00      	nop
 8021cd8:	370c      	adds	r7, #12
 8021cda:	46bd      	mov	sp, r7
 8021cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ce0:	4770      	bx	lr
 8021ce2:	bf00      	nop
 8021ce4:	200272dc 	.word	0x200272dc
 8021ce8:	20027344 	.word	0x20027344

08021cec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8021cec:	b480      	push	{r7}
 8021cee:	b083      	sub	sp, #12
 8021cf0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8021cf2:	4b05      	ldr	r3, [pc, #20]	; (8021d08 <xTaskGetCurrentTaskHandle+0x1c>)
 8021cf4:	681b      	ldr	r3, [r3, #0]
 8021cf6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8021cf8:	687b      	ldr	r3, [r7, #4]
	}
 8021cfa:	4618      	mov	r0, r3
 8021cfc:	370c      	adds	r7, #12
 8021cfe:	46bd      	mov	sp, r7
 8021d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d04:	4770      	bx	lr
 8021d06:	bf00      	nop
 8021d08:	20026e50 	.word	0x20026e50

08021d0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8021d0c:	b480      	push	{r7}
 8021d0e:	b083      	sub	sp, #12
 8021d10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8021d12:	4b0b      	ldr	r3, [pc, #44]	; (8021d40 <xTaskGetSchedulerState+0x34>)
 8021d14:	681b      	ldr	r3, [r3, #0]
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	d102      	bne.n	8021d20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8021d1a:	2301      	movs	r3, #1
 8021d1c:	607b      	str	r3, [r7, #4]
 8021d1e:	e008      	b.n	8021d32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021d20:	4b08      	ldr	r3, [pc, #32]	; (8021d44 <xTaskGetSchedulerState+0x38>)
 8021d22:	681b      	ldr	r3, [r3, #0]
 8021d24:	2b00      	cmp	r3, #0
 8021d26:	d102      	bne.n	8021d2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8021d28:	2302      	movs	r3, #2
 8021d2a:	607b      	str	r3, [r7, #4]
 8021d2c:	e001      	b.n	8021d32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8021d2e:	2300      	movs	r3, #0
 8021d30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8021d32:	687b      	ldr	r3, [r7, #4]
	}
 8021d34:	4618      	mov	r0, r3
 8021d36:	370c      	adds	r7, #12
 8021d38:	46bd      	mov	sp, r7
 8021d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d3e:	4770      	bx	lr
 8021d40:	20027330 	.word	0x20027330
 8021d44:	2002734c 	.word	0x2002734c

08021d48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8021d48:	b580      	push	{r7, lr}
 8021d4a:	b084      	sub	sp, #16
 8021d4c:	af00      	add	r7, sp, #0
 8021d4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8021d50:	687b      	ldr	r3, [r7, #4]
 8021d52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8021d54:	2300      	movs	r3, #0
 8021d56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8021d58:	687b      	ldr	r3, [r7, #4]
 8021d5a:	2b00      	cmp	r3, #0
 8021d5c:	d056      	beq.n	8021e0c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8021d5e:	68bb      	ldr	r3, [r7, #8]
 8021d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021d62:	4b2d      	ldr	r3, [pc, #180]	; (8021e18 <xTaskPriorityInherit+0xd0>)
 8021d64:	681b      	ldr	r3, [r3, #0]
 8021d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d68:	429a      	cmp	r2, r3
 8021d6a:	d246      	bcs.n	8021dfa <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8021d6c:	68bb      	ldr	r3, [r7, #8]
 8021d6e:	699b      	ldr	r3, [r3, #24]
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	db06      	blt.n	8021d82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021d74:	4b28      	ldr	r3, [pc, #160]	; (8021e18 <xTaskPriorityInherit+0xd0>)
 8021d76:	681b      	ldr	r3, [r3, #0]
 8021d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8021d7e:	68bb      	ldr	r3, [r7, #8]
 8021d80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8021d82:	68bb      	ldr	r3, [r7, #8]
 8021d84:	6959      	ldr	r1, [r3, #20]
 8021d86:	68bb      	ldr	r3, [r7, #8]
 8021d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021d8a:	4613      	mov	r3, r2
 8021d8c:	009b      	lsls	r3, r3, #2
 8021d8e:	4413      	add	r3, r2
 8021d90:	009b      	lsls	r3, r3, #2
 8021d92:	4a22      	ldr	r2, [pc, #136]	; (8021e1c <xTaskPriorityInherit+0xd4>)
 8021d94:	4413      	add	r3, r2
 8021d96:	4299      	cmp	r1, r3
 8021d98:	d101      	bne.n	8021d9e <xTaskPriorityInherit+0x56>
 8021d9a:	2301      	movs	r3, #1
 8021d9c:	e000      	b.n	8021da0 <xTaskPriorityInherit+0x58>
 8021d9e:	2300      	movs	r3, #0
 8021da0:	2b00      	cmp	r3, #0
 8021da2:	d022      	beq.n	8021dea <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8021da4:	68bb      	ldr	r3, [r7, #8]
 8021da6:	3304      	adds	r3, #4
 8021da8:	4618      	mov	r0, r3
 8021daa:	f7fd fdc1 	bl	801f930 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8021dae:	4b1a      	ldr	r3, [pc, #104]	; (8021e18 <xTaskPriorityInherit+0xd0>)
 8021db0:	681b      	ldr	r3, [r3, #0]
 8021db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021db4:	68bb      	ldr	r3, [r7, #8]
 8021db6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8021db8:	68bb      	ldr	r3, [r7, #8]
 8021dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021dbc:	4b18      	ldr	r3, [pc, #96]	; (8021e20 <xTaskPriorityInherit+0xd8>)
 8021dbe:	681b      	ldr	r3, [r3, #0]
 8021dc0:	429a      	cmp	r2, r3
 8021dc2:	d903      	bls.n	8021dcc <xTaskPriorityInherit+0x84>
 8021dc4:	68bb      	ldr	r3, [r7, #8]
 8021dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021dc8:	4a15      	ldr	r2, [pc, #84]	; (8021e20 <xTaskPriorityInherit+0xd8>)
 8021dca:	6013      	str	r3, [r2, #0]
 8021dcc:	68bb      	ldr	r3, [r7, #8]
 8021dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021dd0:	4613      	mov	r3, r2
 8021dd2:	009b      	lsls	r3, r3, #2
 8021dd4:	4413      	add	r3, r2
 8021dd6:	009b      	lsls	r3, r3, #2
 8021dd8:	4a10      	ldr	r2, [pc, #64]	; (8021e1c <xTaskPriorityInherit+0xd4>)
 8021dda:	441a      	add	r2, r3
 8021ddc:	68bb      	ldr	r3, [r7, #8]
 8021dde:	3304      	adds	r3, #4
 8021de0:	4619      	mov	r1, r3
 8021de2:	4610      	mov	r0, r2
 8021de4:	f7fd fd47 	bl	801f876 <vListInsertEnd>
 8021de8:	e004      	b.n	8021df4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8021dea:	4b0b      	ldr	r3, [pc, #44]	; (8021e18 <xTaskPriorityInherit+0xd0>)
 8021dec:	681b      	ldr	r3, [r3, #0]
 8021dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021df0:	68bb      	ldr	r3, [r7, #8]
 8021df2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8021df4:	2301      	movs	r3, #1
 8021df6:	60fb      	str	r3, [r7, #12]
 8021df8:	e008      	b.n	8021e0c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8021dfa:	68bb      	ldr	r3, [r7, #8]
 8021dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021dfe:	4b06      	ldr	r3, [pc, #24]	; (8021e18 <xTaskPriorityInherit+0xd0>)
 8021e00:	681b      	ldr	r3, [r3, #0]
 8021e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e04:	429a      	cmp	r2, r3
 8021e06:	d201      	bcs.n	8021e0c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8021e08:	2301      	movs	r3, #1
 8021e0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8021e0c:	68fb      	ldr	r3, [r7, #12]
	}
 8021e0e:	4618      	mov	r0, r3
 8021e10:	3710      	adds	r7, #16
 8021e12:	46bd      	mov	sp, r7
 8021e14:	bd80      	pop	{r7, pc}
 8021e16:	bf00      	nop
 8021e18:	20026e50 	.word	0x20026e50
 8021e1c:	20026e54 	.word	0x20026e54
 8021e20:	2002732c 	.word	0x2002732c

08021e24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8021e24:	b580      	push	{r7, lr}
 8021e26:	b086      	sub	sp, #24
 8021e28:	af00      	add	r7, sp, #0
 8021e2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8021e30:	2300      	movs	r3, #0
 8021e32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8021e34:	687b      	ldr	r3, [r7, #4]
 8021e36:	2b00      	cmp	r3, #0
 8021e38:	d054      	beq.n	8021ee4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8021e3a:	4b2d      	ldr	r3, [pc, #180]	; (8021ef0 <xTaskPriorityDisinherit+0xcc>)
 8021e3c:	681b      	ldr	r3, [r3, #0]
 8021e3e:	693a      	ldr	r2, [r7, #16]
 8021e40:	429a      	cmp	r2, r3
 8021e42:	d009      	beq.n	8021e58 <xTaskPriorityDisinherit+0x34>
 8021e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021e48:	f383 8811 	msr	BASEPRI, r3
 8021e4c:	f3bf 8f6f 	isb	sy
 8021e50:	f3bf 8f4f 	dsb	sy
 8021e54:	60fb      	str	r3, [r7, #12]
 8021e56:	e7fe      	b.n	8021e56 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8021e58:	693b      	ldr	r3, [r7, #16]
 8021e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	d109      	bne.n	8021e74 <xTaskPriorityDisinherit+0x50>
 8021e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021e64:	f383 8811 	msr	BASEPRI, r3
 8021e68:	f3bf 8f6f 	isb	sy
 8021e6c:	f3bf 8f4f 	dsb	sy
 8021e70:	60bb      	str	r3, [r7, #8]
 8021e72:	e7fe      	b.n	8021e72 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8021e74:	693b      	ldr	r3, [r7, #16]
 8021e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021e78:	1e5a      	subs	r2, r3, #1
 8021e7a:	693b      	ldr	r3, [r7, #16]
 8021e7c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8021e7e:	693b      	ldr	r3, [r7, #16]
 8021e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e82:	693b      	ldr	r3, [r7, #16]
 8021e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021e86:	429a      	cmp	r2, r3
 8021e88:	d02c      	beq.n	8021ee4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8021e8a:	693b      	ldr	r3, [r7, #16]
 8021e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	d128      	bne.n	8021ee4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8021e92:	693b      	ldr	r3, [r7, #16]
 8021e94:	3304      	adds	r3, #4
 8021e96:	4618      	mov	r0, r3
 8021e98:	f7fd fd4a 	bl	801f930 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8021e9c:	693b      	ldr	r3, [r7, #16]
 8021e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021ea0:	693b      	ldr	r3, [r7, #16]
 8021ea2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021ea4:	693b      	ldr	r3, [r7, #16]
 8021ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ea8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8021eac:	693b      	ldr	r3, [r7, #16]
 8021eae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8021eb0:	693b      	ldr	r3, [r7, #16]
 8021eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021eb4:	4b0f      	ldr	r3, [pc, #60]	; (8021ef4 <xTaskPriorityDisinherit+0xd0>)
 8021eb6:	681b      	ldr	r3, [r3, #0]
 8021eb8:	429a      	cmp	r2, r3
 8021eba:	d903      	bls.n	8021ec4 <xTaskPriorityDisinherit+0xa0>
 8021ebc:	693b      	ldr	r3, [r7, #16]
 8021ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ec0:	4a0c      	ldr	r2, [pc, #48]	; (8021ef4 <xTaskPriorityDisinherit+0xd0>)
 8021ec2:	6013      	str	r3, [r2, #0]
 8021ec4:	693b      	ldr	r3, [r7, #16]
 8021ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ec8:	4613      	mov	r3, r2
 8021eca:	009b      	lsls	r3, r3, #2
 8021ecc:	4413      	add	r3, r2
 8021ece:	009b      	lsls	r3, r3, #2
 8021ed0:	4a09      	ldr	r2, [pc, #36]	; (8021ef8 <xTaskPriorityDisinherit+0xd4>)
 8021ed2:	441a      	add	r2, r3
 8021ed4:	693b      	ldr	r3, [r7, #16]
 8021ed6:	3304      	adds	r3, #4
 8021ed8:	4619      	mov	r1, r3
 8021eda:	4610      	mov	r0, r2
 8021edc:	f7fd fccb 	bl	801f876 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8021ee0:	2301      	movs	r3, #1
 8021ee2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8021ee4:	697b      	ldr	r3, [r7, #20]
	}
 8021ee6:	4618      	mov	r0, r3
 8021ee8:	3718      	adds	r7, #24
 8021eea:	46bd      	mov	sp, r7
 8021eec:	bd80      	pop	{r7, pc}
 8021eee:	bf00      	nop
 8021ef0:	20026e50 	.word	0x20026e50
 8021ef4:	2002732c 	.word	0x2002732c
 8021ef8:	20026e54 	.word	0x20026e54

08021efc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8021efc:	b580      	push	{r7, lr}
 8021efe:	b088      	sub	sp, #32
 8021f00:	af00      	add	r7, sp, #0
 8021f02:	6078      	str	r0, [r7, #4]
 8021f04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8021f06:	687b      	ldr	r3, [r7, #4]
 8021f08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8021f0a:	2301      	movs	r3, #1
 8021f0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8021f0e:	687b      	ldr	r3, [r7, #4]
 8021f10:	2b00      	cmp	r3, #0
 8021f12:	d06d      	beq.n	8021ff0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8021f14:	69bb      	ldr	r3, [r7, #24]
 8021f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021f18:	2b00      	cmp	r3, #0
 8021f1a:	d109      	bne.n	8021f30 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8021f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021f20:	f383 8811 	msr	BASEPRI, r3
 8021f24:	f3bf 8f6f 	isb	sy
 8021f28:	f3bf 8f4f 	dsb	sy
 8021f2c:	60fb      	str	r3, [r7, #12]
 8021f2e:	e7fe      	b.n	8021f2e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8021f30:	69bb      	ldr	r3, [r7, #24]
 8021f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021f34:	683a      	ldr	r2, [r7, #0]
 8021f36:	429a      	cmp	r2, r3
 8021f38:	d902      	bls.n	8021f40 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8021f3a:	683b      	ldr	r3, [r7, #0]
 8021f3c:	61fb      	str	r3, [r7, #28]
 8021f3e:	e002      	b.n	8021f46 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8021f40:	69bb      	ldr	r3, [r7, #24]
 8021f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021f44:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8021f46:	69bb      	ldr	r3, [r7, #24]
 8021f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f4a:	69fa      	ldr	r2, [r7, #28]
 8021f4c:	429a      	cmp	r2, r3
 8021f4e:	d04f      	beq.n	8021ff0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8021f50:	69bb      	ldr	r3, [r7, #24]
 8021f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021f54:	697a      	ldr	r2, [r7, #20]
 8021f56:	429a      	cmp	r2, r3
 8021f58:	d14a      	bne.n	8021ff0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8021f5a:	4b27      	ldr	r3, [pc, #156]	; (8021ff8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8021f5c:	681b      	ldr	r3, [r3, #0]
 8021f5e:	69ba      	ldr	r2, [r7, #24]
 8021f60:	429a      	cmp	r2, r3
 8021f62:	d109      	bne.n	8021f78 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8021f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021f68:	f383 8811 	msr	BASEPRI, r3
 8021f6c:	f3bf 8f6f 	isb	sy
 8021f70:	f3bf 8f4f 	dsb	sy
 8021f74:	60bb      	str	r3, [r7, #8]
 8021f76:	e7fe      	b.n	8021f76 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8021f78:	69bb      	ldr	r3, [r7, #24]
 8021f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f7c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8021f7e:	69bb      	ldr	r3, [r7, #24]
 8021f80:	69fa      	ldr	r2, [r7, #28]
 8021f82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8021f84:	69bb      	ldr	r3, [r7, #24]
 8021f86:	699b      	ldr	r3, [r3, #24]
 8021f88:	2b00      	cmp	r3, #0
 8021f8a:	db04      	blt.n	8021f96 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021f8c:	69fb      	ldr	r3, [r7, #28]
 8021f8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8021f92:	69bb      	ldr	r3, [r7, #24]
 8021f94:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8021f96:	69bb      	ldr	r3, [r7, #24]
 8021f98:	6959      	ldr	r1, [r3, #20]
 8021f9a:	693a      	ldr	r2, [r7, #16]
 8021f9c:	4613      	mov	r3, r2
 8021f9e:	009b      	lsls	r3, r3, #2
 8021fa0:	4413      	add	r3, r2
 8021fa2:	009b      	lsls	r3, r3, #2
 8021fa4:	4a15      	ldr	r2, [pc, #84]	; (8021ffc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8021fa6:	4413      	add	r3, r2
 8021fa8:	4299      	cmp	r1, r3
 8021faa:	d101      	bne.n	8021fb0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8021fac:	2301      	movs	r3, #1
 8021fae:	e000      	b.n	8021fb2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8021fb0:	2300      	movs	r3, #0
 8021fb2:	2b00      	cmp	r3, #0
 8021fb4:	d01c      	beq.n	8021ff0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8021fb6:	69bb      	ldr	r3, [r7, #24]
 8021fb8:	3304      	adds	r3, #4
 8021fba:	4618      	mov	r0, r3
 8021fbc:	f7fd fcb8 	bl	801f930 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8021fc0:	69bb      	ldr	r3, [r7, #24]
 8021fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021fc4:	4b0e      	ldr	r3, [pc, #56]	; (8022000 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8021fc6:	681b      	ldr	r3, [r3, #0]
 8021fc8:	429a      	cmp	r2, r3
 8021fca:	d903      	bls.n	8021fd4 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8021fcc:	69bb      	ldr	r3, [r7, #24]
 8021fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021fd0:	4a0b      	ldr	r2, [pc, #44]	; (8022000 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8021fd2:	6013      	str	r3, [r2, #0]
 8021fd4:	69bb      	ldr	r3, [r7, #24]
 8021fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021fd8:	4613      	mov	r3, r2
 8021fda:	009b      	lsls	r3, r3, #2
 8021fdc:	4413      	add	r3, r2
 8021fde:	009b      	lsls	r3, r3, #2
 8021fe0:	4a06      	ldr	r2, [pc, #24]	; (8021ffc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8021fe2:	441a      	add	r2, r3
 8021fe4:	69bb      	ldr	r3, [r7, #24]
 8021fe6:	3304      	adds	r3, #4
 8021fe8:	4619      	mov	r1, r3
 8021fea:	4610      	mov	r0, r2
 8021fec:	f7fd fc43 	bl	801f876 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021ff0:	bf00      	nop
 8021ff2:	3720      	adds	r7, #32
 8021ff4:	46bd      	mov	sp, r7
 8021ff6:	bd80      	pop	{r7, pc}
 8021ff8:	20026e50 	.word	0x20026e50
 8021ffc:	20026e54 	.word	0x20026e54
 8022000:	2002732c 	.word	0x2002732c

08022004 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8022004:	b480      	push	{r7}
 8022006:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8022008:	4b07      	ldr	r3, [pc, #28]	; (8022028 <pvTaskIncrementMutexHeldCount+0x24>)
 802200a:	681b      	ldr	r3, [r3, #0]
 802200c:	2b00      	cmp	r3, #0
 802200e:	d004      	beq.n	802201a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8022010:	4b05      	ldr	r3, [pc, #20]	; (8022028 <pvTaskIncrementMutexHeldCount+0x24>)
 8022012:	681b      	ldr	r3, [r3, #0]
 8022014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8022016:	3201      	adds	r2, #1
 8022018:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 802201a:	4b03      	ldr	r3, [pc, #12]	; (8022028 <pvTaskIncrementMutexHeldCount+0x24>)
 802201c:	681b      	ldr	r3, [r3, #0]
	}
 802201e:	4618      	mov	r0, r3
 8022020:	46bd      	mov	sp, r7
 8022022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022026:	4770      	bx	lr
 8022028:	20026e50 	.word	0x20026e50

0802202c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 802202c:	b580      	push	{r7, lr}
 802202e:	b086      	sub	sp, #24
 8022030:	af00      	add	r7, sp, #0
 8022032:	60f8      	str	r0, [r7, #12]
 8022034:	60b9      	str	r1, [r7, #8]
 8022036:	607a      	str	r2, [r7, #4]
 8022038:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 802203a:	f7fd fdc7 	bl	801fbcc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 802203e:	4b26      	ldr	r3, [pc, #152]	; (80220d8 <xTaskNotifyWait+0xac>)
 8022040:	681b      	ldr	r3, [r3, #0]
 8022042:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8022046:	b2db      	uxtb	r3, r3
 8022048:	2b02      	cmp	r3, #2
 802204a:	d01a      	beq.n	8022082 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 802204c:	4b22      	ldr	r3, [pc, #136]	; (80220d8 <xTaskNotifyWait+0xac>)
 802204e:	681b      	ldr	r3, [r3, #0]
 8022050:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8022052:	68fa      	ldr	r2, [r7, #12]
 8022054:	43d2      	mvns	r2, r2
 8022056:	400a      	ands	r2, r1
 8022058:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 802205a:	4b1f      	ldr	r3, [pc, #124]	; (80220d8 <xTaskNotifyWait+0xac>)
 802205c:	681b      	ldr	r3, [r3, #0]
 802205e:	2201      	movs	r2, #1
 8022060:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8022064:	683b      	ldr	r3, [r7, #0]
 8022066:	2b00      	cmp	r3, #0
 8022068:	d00b      	beq.n	8022082 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 802206a:	2101      	movs	r1, #1
 802206c:	6838      	ldr	r0, [r7, #0]
 802206e:	f000 f9a3 	bl	80223b8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8022072:	4b1a      	ldr	r3, [pc, #104]	; (80220dc <xTaskNotifyWait+0xb0>)
 8022074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022078:	601a      	str	r2, [r3, #0]
 802207a:	f3bf 8f4f 	dsb	sy
 802207e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8022082:	f7fd fdd1 	bl	801fc28 <vPortExitCritical>

		taskENTER_CRITICAL();
 8022086:	f7fd fda1 	bl	801fbcc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 802208a:	687b      	ldr	r3, [r7, #4]
 802208c:	2b00      	cmp	r3, #0
 802208e:	d004      	beq.n	802209a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8022090:	4b11      	ldr	r3, [pc, #68]	; (80220d8 <xTaskNotifyWait+0xac>)
 8022092:	681b      	ldr	r3, [r3, #0]
 8022094:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8022096:	687b      	ldr	r3, [r7, #4]
 8022098:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 802209a:	4b0f      	ldr	r3, [pc, #60]	; (80220d8 <xTaskNotifyWait+0xac>)
 802209c:	681b      	ldr	r3, [r3, #0]
 802209e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80220a2:	b2db      	uxtb	r3, r3
 80220a4:	2b02      	cmp	r3, #2
 80220a6:	d002      	beq.n	80220ae <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80220a8:	2300      	movs	r3, #0
 80220aa:	617b      	str	r3, [r7, #20]
 80220ac:	e008      	b.n	80220c0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80220ae:	4b0a      	ldr	r3, [pc, #40]	; (80220d8 <xTaskNotifyWait+0xac>)
 80220b0:	681b      	ldr	r3, [r3, #0]
 80220b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80220b4:	68ba      	ldr	r2, [r7, #8]
 80220b6:	43d2      	mvns	r2, r2
 80220b8:	400a      	ands	r2, r1
 80220ba:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 80220bc:	2301      	movs	r3, #1
 80220be:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80220c0:	4b05      	ldr	r3, [pc, #20]	; (80220d8 <xTaskNotifyWait+0xac>)
 80220c2:	681b      	ldr	r3, [r3, #0]
 80220c4:	2200      	movs	r2, #0
 80220c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 80220ca:	f7fd fdad 	bl	801fc28 <vPortExitCritical>

		return xReturn;
 80220ce:	697b      	ldr	r3, [r7, #20]
	}
 80220d0:	4618      	mov	r0, r3
 80220d2:	3718      	adds	r7, #24
 80220d4:	46bd      	mov	sp, r7
 80220d6:	bd80      	pop	{r7, pc}
 80220d8:	20026e50 	.word	0x20026e50
 80220dc:	e000ed04 	.word	0xe000ed04

080220e0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80220e0:	b580      	push	{r7, lr}
 80220e2:	b08a      	sub	sp, #40	; 0x28
 80220e4:	af00      	add	r7, sp, #0
 80220e6:	60f8      	str	r0, [r7, #12]
 80220e8:	60b9      	str	r1, [r7, #8]
 80220ea:	603b      	str	r3, [r7, #0]
 80220ec:	4613      	mov	r3, r2
 80220ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80220f0:	2301      	movs	r3, #1
 80220f2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80220f4:	68fb      	ldr	r3, [r7, #12]
 80220f6:	2b00      	cmp	r3, #0
 80220f8:	d109      	bne.n	802210e <xTaskGenericNotify+0x2e>
 80220fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80220fe:	f383 8811 	msr	BASEPRI, r3
 8022102:	f3bf 8f6f 	isb	sy
 8022106:	f3bf 8f4f 	dsb	sy
 802210a:	61bb      	str	r3, [r7, #24]
 802210c:	e7fe      	b.n	802210c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 802210e:	68fb      	ldr	r3, [r7, #12]
 8022110:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8022112:	f7fd fd5b 	bl	801fbcc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8022116:	683b      	ldr	r3, [r7, #0]
 8022118:	2b00      	cmp	r3, #0
 802211a:	d003      	beq.n	8022124 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 802211c:	6a3b      	ldr	r3, [r7, #32]
 802211e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8022120:	683b      	ldr	r3, [r7, #0]
 8022122:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8022124:	6a3b      	ldr	r3, [r7, #32]
 8022126:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 802212a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 802212c:	6a3b      	ldr	r3, [r7, #32]
 802212e:	2202      	movs	r2, #2
 8022130:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8022134:	79fb      	ldrb	r3, [r7, #7]
 8022136:	2b04      	cmp	r3, #4
 8022138:	d827      	bhi.n	802218a <xTaskGenericNotify+0xaa>
 802213a:	a201      	add	r2, pc, #4	; (adr r2, 8022140 <xTaskGenericNotify+0x60>)
 802213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022140:	0802218b 	.word	0x0802218b
 8022144:	08022155 	.word	0x08022155
 8022148:	08022163 	.word	0x08022163
 802214c:	0802216f 	.word	0x0802216f
 8022150:	08022177 	.word	0x08022177
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8022154:	6a3b      	ldr	r3, [r7, #32]
 8022156:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8022158:	68bb      	ldr	r3, [r7, #8]
 802215a:	431a      	orrs	r2, r3
 802215c:	6a3b      	ldr	r3, [r7, #32]
 802215e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8022160:	e013      	b.n	802218a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8022162:	6a3b      	ldr	r3, [r7, #32]
 8022164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022166:	1c5a      	adds	r2, r3, #1
 8022168:	6a3b      	ldr	r3, [r7, #32]
 802216a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 802216c:	e00d      	b.n	802218a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 802216e:	6a3b      	ldr	r3, [r7, #32]
 8022170:	68ba      	ldr	r2, [r7, #8]
 8022172:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8022174:	e009      	b.n	802218a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8022176:	7ffb      	ldrb	r3, [r7, #31]
 8022178:	2b02      	cmp	r3, #2
 802217a:	d003      	beq.n	8022184 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 802217c:	6a3b      	ldr	r3, [r7, #32]
 802217e:	68ba      	ldr	r2, [r7, #8]
 8022180:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8022182:	e001      	b.n	8022188 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8022184:	2300      	movs	r3, #0
 8022186:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8022188:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 802218a:	7ffb      	ldrb	r3, [r7, #31]
 802218c:	2b01      	cmp	r3, #1
 802218e:	d13b      	bne.n	8022208 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022190:	6a3b      	ldr	r3, [r7, #32]
 8022192:	3304      	adds	r3, #4
 8022194:	4618      	mov	r0, r3
 8022196:	f7fd fbcb 	bl	801f930 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 802219a:	6a3b      	ldr	r3, [r7, #32]
 802219c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802219e:	4b1e      	ldr	r3, [pc, #120]	; (8022218 <xTaskGenericNotify+0x138>)
 80221a0:	681b      	ldr	r3, [r3, #0]
 80221a2:	429a      	cmp	r2, r3
 80221a4:	d903      	bls.n	80221ae <xTaskGenericNotify+0xce>
 80221a6:	6a3b      	ldr	r3, [r7, #32]
 80221a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80221aa:	4a1b      	ldr	r2, [pc, #108]	; (8022218 <xTaskGenericNotify+0x138>)
 80221ac:	6013      	str	r3, [r2, #0]
 80221ae:	6a3b      	ldr	r3, [r7, #32]
 80221b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80221b2:	4613      	mov	r3, r2
 80221b4:	009b      	lsls	r3, r3, #2
 80221b6:	4413      	add	r3, r2
 80221b8:	009b      	lsls	r3, r3, #2
 80221ba:	4a18      	ldr	r2, [pc, #96]	; (802221c <xTaskGenericNotify+0x13c>)
 80221bc:	441a      	add	r2, r3
 80221be:	6a3b      	ldr	r3, [r7, #32]
 80221c0:	3304      	adds	r3, #4
 80221c2:	4619      	mov	r1, r3
 80221c4:	4610      	mov	r0, r2
 80221c6:	f7fd fb56 	bl	801f876 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80221ca:	6a3b      	ldr	r3, [r7, #32]
 80221cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221ce:	2b00      	cmp	r3, #0
 80221d0:	d009      	beq.n	80221e6 <xTaskGenericNotify+0x106>
 80221d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80221d6:	f383 8811 	msr	BASEPRI, r3
 80221da:	f3bf 8f6f 	isb	sy
 80221de:	f3bf 8f4f 	dsb	sy
 80221e2:	617b      	str	r3, [r7, #20]
 80221e4:	e7fe      	b.n	80221e4 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 80221e6:	f7ff fd5b 	bl	8021ca0 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80221ea:	6a3b      	ldr	r3, [r7, #32]
 80221ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80221ee:	4b0c      	ldr	r3, [pc, #48]	; (8022220 <xTaskGenericNotify+0x140>)
 80221f0:	681b      	ldr	r3, [r3, #0]
 80221f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80221f4:	429a      	cmp	r2, r3
 80221f6:	d907      	bls.n	8022208 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80221f8:	4b0a      	ldr	r3, [pc, #40]	; (8022224 <xTaskGenericNotify+0x144>)
 80221fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80221fe:	601a      	str	r2, [r3, #0]
 8022200:	f3bf 8f4f 	dsb	sy
 8022204:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8022208:	f7fd fd0e 	bl	801fc28 <vPortExitCritical>

		return xReturn;
 802220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 802220e:	4618      	mov	r0, r3
 8022210:	3728      	adds	r7, #40	; 0x28
 8022212:	46bd      	mov	sp, r7
 8022214:	bd80      	pop	{r7, pc}
 8022216:	bf00      	nop
 8022218:	2002732c 	.word	0x2002732c
 802221c:	20026e54 	.word	0x20026e54
 8022220:	20026e50 	.word	0x20026e50
 8022224:	e000ed04 	.word	0xe000ed04

08022228 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8022228:	b580      	push	{r7, lr}
 802222a:	b08e      	sub	sp, #56	; 0x38
 802222c:	af00      	add	r7, sp, #0
 802222e:	60f8      	str	r0, [r7, #12]
 8022230:	60b9      	str	r1, [r7, #8]
 8022232:	603b      	str	r3, [r7, #0]
 8022234:	4613      	mov	r3, r2
 8022236:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8022238:	2301      	movs	r3, #1
 802223a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 802223c:	68fb      	ldr	r3, [r7, #12]
 802223e:	2b00      	cmp	r3, #0
 8022240:	d109      	bne.n	8022256 <xTaskGenericNotifyFromISR+0x2e>
 8022242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022246:	f383 8811 	msr	BASEPRI, r3
 802224a:	f3bf 8f6f 	isb	sy
 802224e:	f3bf 8f4f 	dsb	sy
 8022252:	627b      	str	r3, [r7, #36]	; 0x24
 8022254:	e7fe      	b.n	8022254 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8022256:	f7fd fd71 	bl	801fd3c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 802225a:	68fb      	ldr	r3, [r7, #12]
 802225c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 802225e:	f3ef 8211 	mrs	r2, BASEPRI
 8022262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022266:	f383 8811 	msr	BASEPRI, r3
 802226a:	f3bf 8f6f 	isb	sy
 802226e:	f3bf 8f4f 	dsb	sy
 8022272:	623a      	str	r2, [r7, #32]
 8022274:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8022276:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8022278:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 802227a:	683b      	ldr	r3, [r7, #0]
 802227c:	2b00      	cmp	r3, #0
 802227e:	d003      	beq.n	8022288 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8022280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022282:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8022284:	683b      	ldr	r3, [r7, #0]
 8022286:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8022288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802228a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 802228e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8022292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022294:	2202      	movs	r2, #2
 8022296:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 802229a:	79fb      	ldrb	r3, [r7, #7]
 802229c:	2b04      	cmp	r3, #4
 802229e:	d829      	bhi.n	80222f4 <xTaskGenericNotifyFromISR+0xcc>
 80222a0:	a201      	add	r2, pc, #4	; (adr r2, 80222a8 <xTaskGenericNotifyFromISR+0x80>)
 80222a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80222a6:	bf00      	nop
 80222a8:	080222f5 	.word	0x080222f5
 80222ac:	080222bd 	.word	0x080222bd
 80222b0:	080222cb 	.word	0x080222cb
 80222b4:	080222d7 	.word	0x080222d7
 80222b8:	080222df 	.word	0x080222df
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80222bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80222c0:	68bb      	ldr	r3, [r7, #8]
 80222c2:	431a      	orrs	r2, r3
 80222c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222c6:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80222c8:	e014      	b.n	80222f4 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80222ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80222ce:	1c5a      	adds	r2, r3, #1
 80222d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222d2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80222d4:	e00e      	b.n	80222f4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80222d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222d8:	68ba      	ldr	r2, [r7, #8]
 80222da:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80222dc:	e00a      	b.n	80222f4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80222de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80222e2:	2b02      	cmp	r3, #2
 80222e4:	d003      	beq.n	80222ee <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80222e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222e8:	68ba      	ldr	r2, [r7, #8]
 80222ea:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80222ec:	e001      	b.n	80222f2 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 80222ee:	2300      	movs	r3, #0
 80222f0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80222f2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80222f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80222f8:	2b01      	cmp	r3, #1
 80222fa:	d146      	bne.n	802238a <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80222fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022300:	2b00      	cmp	r3, #0
 8022302:	d009      	beq.n	8022318 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8022304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022308:	f383 8811 	msr	BASEPRI, r3
 802230c:	f3bf 8f6f 	isb	sy
 8022310:	f3bf 8f4f 	dsb	sy
 8022314:	61bb      	str	r3, [r7, #24]
 8022316:	e7fe      	b.n	8022316 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022318:	4b21      	ldr	r3, [pc, #132]	; (80223a0 <xTaskGenericNotifyFromISR+0x178>)
 802231a:	681b      	ldr	r3, [r3, #0]
 802231c:	2b00      	cmp	r3, #0
 802231e:	d11d      	bne.n	802235c <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022322:	3304      	adds	r3, #4
 8022324:	4618      	mov	r0, r3
 8022326:	f7fd fb03 	bl	801f930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 802232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802232c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802232e:	4b1d      	ldr	r3, [pc, #116]	; (80223a4 <xTaskGenericNotifyFromISR+0x17c>)
 8022330:	681b      	ldr	r3, [r3, #0]
 8022332:	429a      	cmp	r2, r3
 8022334:	d903      	bls.n	802233e <xTaskGenericNotifyFromISR+0x116>
 8022336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802233a:	4a1a      	ldr	r2, [pc, #104]	; (80223a4 <xTaskGenericNotifyFromISR+0x17c>)
 802233c:	6013      	str	r3, [r2, #0]
 802233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022342:	4613      	mov	r3, r2
 8022344:	009b      	lsls	r3, r3, #2
 8022346:	4413      	add	r3, r2
 8022348:	009b      	lsls	r3, r3, #2
 802234a:	4a17      	ldr	r2, [pc, #92]	; (80223a8 <xTaskGenericNotifyFromISR+0x180>)
 802234c:	441a      	add	r2, r3
 802234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022350:	3304      	adds	r3, #4
 8022352:	4619      	mov	r1, r3
 8022354:	4610      	mov	r0, r2
 8022356:	f7fd fa8e 	bl	801f876 <vListInsertEnd>
 802235a:	e005      	b.n	8022368 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 802235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802235e:	3318      	adds	r3, #24
 8022360:	4619      	mov	r1, r3
 8022362:	4812      	ldr	r0, [pc, #72]	; (80223ac <xTaskGenericNotifyFromISR+0x184>)
 8022364:	f7fd fa87 	bl	801f876 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8022368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802236a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802236c:	4b10      	ldr	r3, [pc, #64]	; (80223b0 <xTaskGenericNotifyFromISR+0x188>)
 802236e:	681b      	ldr	r3, [r3, #0]
 8022370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022372:	429a      	cmp	r2, r3
 8022374:	d909      	bls.n	802238a <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8022376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022378:	2b00      	cmp	r3, #0
 802237a:	d003      	beq.n	8022384 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 802237c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802237e:	2201      	movs	r2, #1
 8022380:	601a      	str	r2, [r3, #0]
 8022382:	e002      	b.n	802238a <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8022384:	4b0b      	ldr	r3, [pc, #44]	; (80223b4 <xTaskGenericNotifyFromISR+0x18c>)
 8022386:	2201      	movs	r2, #1
 8022388:	601a      	str	r2, [r3, #0]
 802238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802238c:	617b      	str	r3, [r7, #20]
	__asm volatile
 802238e:	697b      	ldr	r3, [r7, #20]
 8022390:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8022394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8022396:	4618      	mov	r0, r3
 8022398:	3738      	adds	r7, #56	; 0x38
 802239a:	46bd      	mov	sp, r7
 802239c:	bd80      	pop	{r7, pc}
 802239e:	bf00      	nop
 80223a0:	2002734c 	.word	0x2002734c
 80223a4:	2002732c 	.word	0x2002732c
 80223a8:	20026e54 	.word	0x20026e54
 80223ac:	200272e4 	.word	0x200272e4
 80223b0:	20026e50 	.word	0x20026e50
 80223b4:	20027338 	.word	0x20027338

080223b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80223b8:	b580      	push	{r7, lr}
 80223ba:	b084      	sub	sp, #16
 80223bc:	af00      	add	r7, sp, #0
 80223be:	6078      	str	r0, [r7, #4]
 80223c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80223c2:	4b21      	ldr	r3, [pc, #132]	; (8022448 <prvAddCurrentTaskToDelayedList+0x90>)
 80223c4:	681b      	ldr	r3, [r3, #0]
 80223c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80223c8:	4b20      	ldr	r3, [pc, #128]	; (802244c <prvAddCurrentTaskToDelayedList+0x94>)
 80223ca:	681b      	ldr	r3, [r3, #0]
 80223cc:	3304      	adds	r3, #4
 80223ce:	4618      	mov	r0, r3
 80223d0:	f7fd faae 	bl	801f930 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80223d4:	687b      	ldr	r3, [r7, #4]
 80223d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80223da:	d10a      	bne.n	80223f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80223dc:	683b      	ldr	r3, [r7, #0]
 80223de:	2b00      	cmp	r3, #0
 80223e0:	d007      	beq.n	80223f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80223e2:	4b1a      	ldr	r3, [pc, #104]	; (802244c <prvAddCurrentTaskToDelayedList+0x94>)
 80223e4:	681b      	ldr	r3, [r3, #0]
 80223e6:	3304      	adds	r3, #4
 80223e8:	4619      	mov	r1, r3
 80223ea:	4819      	ldr	r0, [pc, #100]	; (8022450 <prvAddCurrentTaskToDelayedList+0x98>)
 80223ec:	f7fd fa43 	bl	801f876 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80223f0:	e026      	b.n	8022440 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80223f2:	68fa      	ldr	r2, [r7, #12]
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	4413      	add	r3, r2
 80223f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80223fa:	4b14      	ldr	r3, [pc, #80]	; (802244c <prvAddCurrentTaskToDelayedList+0x94>)
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	68ba      	ldr	r2, [r7, #8]
 8022400:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8022402:	68ba      	ldr	r2, [r7, #8]
 8022404:	68fb      	ldr	r3, [r7, #12]
 8022406:	429a      	cmp	r2, r3
 8022408:	d209      	bcs.n	802241e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802240a:	4b12      	ldr	r3, [pc, #72]	; (8022454 <prvAddCurrentTaskToDelayedList+0x9c>)
 802240c:	681a      	ldr	r2, [r3, #0]
 802240e:	4b0f      	ldr	r3, [pc, #60]	; (802244c <prvAddCurrentTaskToDelayedList+0x94>)
 8022410:	681b      	ldr	r3, [r3, #0]
 8022412:	3304      	adds	r3, #4
 8022414:	4619      	mov	r1, r3
 8022416:	4610      	mov	r0, r2
 8022418:	f7fd fa51 	bl	801f8be <vListInsert>
}
 802241c:	e010      	b.n	8022440 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802241e:	4b0e      	ldr	r3, [pc, #56]	; (8022458 <prvAddCurrentTaskToDelayedList+0xa0>)
 8022420:	681a      	ldr	r2, [r3, #0]
 8022422:	4b0a      	ldr	r3, [pc, #40]	; (802244c <prvAddCurrentTaskToDelayedList+0x94>)
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	3304      	adds	r3, #4
 8022428:	4619      	mov	r1, r3
 802242a:	4610      	mov	r0, r2
 802242c:	f7fd fa47 	bl	801f8be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8022430:	4b0a      	ldr	r3, [pc, #40]	; (802245c <prvAddCurrentTaskToDelayedList+0xa4>)
 8022432:	681b      	ldr	r3, [r3, #0]
 8022434:	68ba      	ldr	r2, [r7, #8]
 8022436:	429a      	cmp	r2, r3
 8022438:	d202      	bcs.n	8022440 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 802243a:	4a08      	ldr	r2, [pc, #32]	; (802245c <prvAddCurrentTaskToDelayedList+0xa4>)
 802243c:	68bb      	ldr	r3, [r7, #8]
 802243e:	6013      	str	r3, [r2, #0]
}
 8022440:	bf00      	nop
 8022442:	3710      	adds	r7, #16
 8022444:	46bd      	mov	sp, r7
 8022446:	bd80      	pop	{r7, pc}
 8022448:	20027328 	.word	0x20027328
 802244c:	20026e50 	.word	0x20026e50
 8022450:	20027310 	.word	0x20027310
 8022454:	200272e0 	.word	0x200272e0
 8022458:	200272dc 	.word	0x200272dc
 802245c:	20027344 	.word	0x20027344

08022460 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8022460:	b580      	push	{r7, lr}
 8022462:	b08a      	sub	sp, #40	; 0x28
 8022464:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8022466:	2300      	movs	r3, #0
 8022468:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 802246a:	f000 fb51 	bl	8022b10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 802246e:	4b1c      	ldr	r3, [pc, #112]	; (80224e0 <xTimerCreateTimerTask+0x80>)
 8022470:	681b      	ldr	r3, [r3, #0]
 8022472:	2b00      	cmp	r3, #0
 8022474:	d021      	beq.n	80224ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8022476:	2300      	movs	r3, #0
 8022478:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 802247a:	2300      	movs	r3, #0
 802247c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 802247e:	1d3a      	adds	r2, r7, #4
 8022480:	f107 0108 	add.w	r1, r7, #8
 8022484:	f107 030c 	add.w	r3, r7, #12
 8022488:	4618      	mov	r0, r3
 802248a:	f7fc ffd1 	bl	801f430 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 802248e:	6879      	ldr	r1, [r7, #4]
 8022490:	68bb      	ldr	r3, [r7, #8]
 8022492:	68fa      	ldr	r2, [r7, #12]
 8022494:	9202      	str	r2, [sp, #8]
 8022496:	9301      	str	r3, [sp, #4]
 8022498:	2302      	movs	r3, #2
 802249a:	9300      	str	r3, [sp, #0]
 802249c:	2300      	movs	r3, #0
 802249e:	460a      	mov	r2, r1
 80224a0:	4910      	ldr	r1, [pc, #64]	; (80224e4 <xTimerCreateTimerTask+0x84>)
 80224a2:	4811      	ldr	r0, [pc, #68]	; (80224e8 <xTimerCreateTimerTask+0x88>)
 80224a4:	f7fe fd28 	bl	8020ef8 <xTaskCreateStatic>
 80224a8:	4602      	mov	r2, r0
 80224aa:	4b10      	ldr	r3, [pc, #64]	; (80224ec <xTimerCreateTimerTask+0x8c>)
 80224ac:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80224ae:	4b0f      	ldr	r3, [pc, #60]	; (80224ec <xTimerCreateTimerTask+0x8c>)
 80224b0:	681b      	ldr	r3, [r3, #0]
 80224b2:	2b00      	cmp	r3, #0
 80224b4:	d001      	beq.n	80224ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80224b6:	2301      	movs	r3, #1
 80224b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80224ba:	697b      	ldr	r3, [r7, #20]
 80224bc:	2b00      	cmp	r3, #0
 80224be:	d109      	bne.n	80224d4 <xTimerCreateTimerTask+0x74>
	__asm volatile
 80224c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80224c4:	f383 8811 	msr	BASEPRI, r3
 80224c8:	f3bf 8f6f 	isb	sy
 80224cc:	f3bf 8f4f 	dsb	sy
 80224d0:	613b      	str	r3, [r7, #16]
 80224d2:	e7fe      	b.n	80224d2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80224d4:	697b      	ldr	r3, [r7, #20]
}
 80224d6:	4618      	mov	r0, r3
 80224d8:	3718      	adds	r7, #24
 80224da:	46bd      	mov	sp, r7
 80224dc:	bd80      	pop	{r7, pc}
 80224de:	bf00      	nop
 80224e0:	20027388 	.word	0x20027388
 80224e4:	08028164 	.word	0x08028164
 80224e8:	08022725 	.word	0x08022725
 80224ec:	2002738c 	.word	0x2002738c

080224f0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80224f0:	b580      	push	{r7, lr}
 80224f2:	b088      	sub	sp, #32
 80224f4:	af02      	add	r7, sp, #8
 80224f6:	60f8      	str	r0, [r7, #12]
 80224f8:	60b9      	str	r1, [r7, #8]
 80224fa:	607a      	str	r2, [r7, #4]
 80224fc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80224fe:	2030      	movs	r0, #48	; 0x30
 8022500:	f7fc ffb0 	bl	801f464 <pvPortMalloc>
 8022504:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8022506:	697b      	ldr	r3, [r7, #20]
 8022508:	2b00      	cmp	r3, #0
 802250a:	d00d      	beq.n	8022528 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 802250c:	697b      	ldr	r3, [r7, #20]
 802250e:	9301      	str	r3, [sp, #4]
 8022510:	6a3b      	ldr	r3, [r7, #32]
 8022512:	9300      	str	r3, [sp, #0]
 8022514:	683b      	ldr	r3, [r7, #0]
 8022516:	687a      	ldr	r2, [r7, #4]
 8022518:	68b9      	ldr	r1, [r7, #8]
 802251a:	68f8      	ldr	r0, [r7, #12]
 802251c:	f000 f844 	bl	80225a8 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8022520:	697b      	ldr	r3, [r7, #20]
 8022522:	2200      	movs	r2, #0
 8022524:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8022528:	697b      	ldr	r3, [r7, #20]
	}
 802252a:	4618      	mov	r0, r3
 802252c:	3718      	adds	r7, #24
 802252e:	46bd      	mov	sp, r7
 8022530:	bd80      	pop	{r7, pc}

08022532 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8022532:	b580      	push	{r7, lr}
 8022534:	b08a      	sub	sp, #40	; 0x28
 8022536:	af02      	add	r7, sp, #8
 8022538:	60f8      	str	r0, [r7, #12]
 802253a:	60b9      	str	r1, [r7, #8]
 802253c:	607a      	str	r2, [r7, #4]
 802253e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8022540:	2330      	movs	r3, #48	; 0x30
 8022542:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8022544:	693b      	ldr	r3, [r7, #16]
 8022546:	2b30      	cmp	r3, #48	; 0x30
 8022548:	d009      	beq.n	802255e <xTimerCreateStatic+0x2c>
 802254a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802254e:	f383 8811 	msr	BASEPRI, r3
 8022552:	f3bf 8f6f 	isb	sy
 8022556:	f3bf 8f4f 	dsb	sy
 802255a:	61bb      	str	r3, [r7, #24]
 802255c:	e7fe      	b.n	802255c <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 802255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022560:	2b00      	cmp	r3, #0
 8022562:	d109      	bne.n	8022578 <xTimerCreateStatic+0x46>
 8022564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022568:	f383 8811 	msr	BASEPRI, r3
 802256c:	f3bf 8f6f 	isb	sy
 8022570:	f3bf 8f4f 	dsb	sy
 8022574:	617b      	str	r3, [r7, #20]
 8022576:	e7fe      	b.n	8022576 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8022578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802257a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 802257c:	69fb      	ldr	r3, [r7, #28]
 802257e:	2b00      	cmp	r3, #0
 8022580:	d00d      	beq.n	802259e <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8022582:	69fb      	ldr	r3, [r7, #28]
 8022584:	9301      	str	r3, [sp, #4]
 8022586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022588:	9300      	str	r3, [sp, #0]
 802258a:	683b      	ldr	r3, [r7, #0]
 802258c:	687a      	ldr	r2, [r7, #4]
 802258e:	68b9      	ldr	r1, [r7, #8]
 8022590:	68f8      	ldr	r0, [r7, #12]
 8022592:	f000 f809 	bl	80225a8 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8022596:	69fb      	ldr	r3, [r7, #28]
 8022598:	2201      	movs	r2, #1
 802259a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 802259e:	69fb      	ldr	r3, [r7, #28]
	}
 80225a0:	4618      	mov	r0, r3
 80225a2:	3720      	adds	r7, #32
 80225a4:	46bd      	mov	sp, r7
 80225a6:	bd80      	pop	{r7, pc}

080225a8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80225a8:	b580      	push	{r7, lr}
 80225aa:	b086      	sub	sp, #24
 80225ac:	af00      	add	r7, sp, #0
 80225ae:	60f8      	str	r0, [r7, #12]
 80225b0:	60b9      	str	r1, [r7, #8]
 80225b2:	607a      	str	r2, [r7, #4]
 80225b4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80225b6:	68bb      	ldr	r3, [r7, #8]
 80225b8:	2b00      	cmp	r3, #0
 80225ba:	d109      	bne.n	80225d0 <prvInitialiseNewTimer+0x28>
 80225bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80225c0:	f383 8811 	msr	BASEPRI, r3
 80225c4:	f3bf 8f6f 	isb	sy
 80225c8:	f3bf 8f4f 	dsb	sy
 80225cc:	617b      	str	r3, [r7, #20]
 80225ce:	e7fe      	b.n	80225ce <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80225d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225d2:	2b00      	cmp	r3, #0
 80225d4:	d015      	beq.n	8022602 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80225d6:	f000 fa9b 	bl	8022b10 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80225da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225dc:	68fa      	ldr	r2, [r7, #12]
 80225de:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80225e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225e2:	68ba      	ldr	r2, [r7, #8]
 80225e4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80225e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225e8:	687a      	ldr	r2, [r7, #4]
 80225ea:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80225ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225ee:	683a      	ldr	r2, [r7, #0]
 80225f0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80225f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225f4:	6a3a      	ldr	r2, [r7, #32]
 80225f6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80225f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225fa:	3304      	adds	r3, #4
 80225fc:	4618      	mov	r0, r3
 80225fe:	f7fd f92d 	bl	801f85c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8022602:	bf00      	nop
 8022604:	3718      	adds	r7, #24
 8022606:	46bd      	mov	sp, r7
 8022608:	bd80      	pop	{r7, pc}
	...

0802260c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 802260c:	b580      	push	{r7, lr}
 802260e:	b08a      	sub	sp, #40	; 0x28
 8022610:	af00      	add	r7, sp, #0
 8022612:	60f8      	str	r0, [r7, #12]
 8022614:	60b9      	str	r1, [r7, #8]
 8022616:	607a      	str	r2, [r7, #4]
 8022618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802261a:	2300      	movs	r3, #0
 802261c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 802261e:	68fb      	ldr	r3, [r7, #12]
 8022620:	2b00      	cmp	r3, #0
 8022622:	d109      	bne.n	8022638 <xTimerGenericCommand+0x2c>
 8022624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022628:	f383 8811 	msr	BASEPRI, r3
 802262c:	f3bf 8f6f 	isb	sy
 8022630:	f3bf 8f4f 	dsb	sy
 8022634:	623b      	str	r3, [r7, #32]
 8022636:	e7fe      	b.n	8022636 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8022638:	4b19      	ldr	r3, [pc, #100]	; (80226a0 <xTimerGenericCommand+0x94>)
 802263a:	681b      	ldr	r3, [r3, #0]
 802263c:	2b00      	cmp	r3, #0
 802263e:	d02a      	beq.n	8022696 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8022640:	68bb      	ldr	r3, [r7, #8]
 8022642:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8022644:	687b      	ldr	r3, [r7, #4]
 8022646:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8022648:	68fb      	ldr	r3, [r7, #12]
 802264a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 802264c:	68bb      	ldr	r3, [r7, #8]
 802264e:	2b05      	cmp	r3, #5
 8022650:	dc18      	bgt.n	8022684 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8022652:	f7ff fb5b 	bl	8021d0c <xTaskGetSchedulerState>
 8022656:	4603      	mov	r3, r0
 8022658:	2b02      	cmp	r3, #2
 802265a:	d109      	bne.n	8022670 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 802265c:	4b10      	ldr	r3, [pc, #64]	; (80226a0 <xTimerGenericCommand+0x94>)
 802265e:	6818      	ldr	r0, [r3, #0]
 8022660:	f107 0110 	add.w	r1, r7, #16
 8022664:	2300      	movs	r3, #0
 8022666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022668:	f7fd fdfc 	bl	8020264 <xQueueGenericSend>
 802266c:	6278      	str	r0, [r7, #36]	; 0x24
 802266e:	e012      	b.n	8022696 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8022670:	4b0b      	ldr	r3, [pc, #44]	; (80226a0 <xTimerGenericCommand+0x94>)
 8022672:	6818      	ldr	r0, [r3, #0]
 8022674:	f107 0110 	add.w	r1, r7, #16
 8022678:	2300      	movs	r3, #0
 802267a:	2200      	movs	r2, #0
 802267c:	f7fd fdf2 	bl	8020264 <xQueueGenericSend>
 8022680:	6278      	str	r0, [r7, #36]	; 0x24
 8022682:	e008      	b.n	8022696 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8022684:	4b06      	ldr	r3, [pc, #24]	; (80226a0 <xTimerGenericCommand+0x94>)
 8022686:	6818      	ldr	r0, [r3, #0]
 8022688:	f107 0110 	add.w	r1, r7, #16
 802268c:	2300      	movs	r3, #0
 802268e:	683a      	ldr	r2, [r7, #0]
 8022690:	f7fd fee2 	bl	8020458 <xQueueGenericSendFromISR>
 8022694:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8022696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8022698:	4618      	mov	r0, r3
 802269a:	3728      	adds	r7, #40	; 0x28
 802269c:	46bd      	mov	sp, r7
 802269e:	bd80      	pop	{r7, pc}
 80226a0:	20027388 	.word	0x20027388

080226a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80226a4:	b580      	push	{r7, lr}
 80226a6:	b088      	sub	sp, #32
 80226a8:	af02      	add	r7, sp, #8
 80226aa:	6078      	str	r0, [r7, #4]
 80226ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80226ae:	4b1c      	ldr	r3, [pc, #112]	; (8022720 <prvProcessExpiredTimer+0x7c>)
 80226b0:	681b      	ldr	r3, [r3, #0]
 80226b2:	68db      	ldr	r3, [r3, #12]
 80226b4:	68db      	ldr	r3, [r3, #12]
 80226b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80226b8:	697b      	ldr	r3, [r7, #20]
 80226ba:	3304      	adds	r3, #4
 80226bc:	4618      	mov	r0, r3
 80226be:	f7fd f937 	bl	801f930 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80226c2:	697b      	ldr	r3, [r7, #20]
 80226c4:	69db      	ldr	r3, [r3, #28]
 80226c6:	2b01      	cmp	r3, #1
 80226c8:	d121      	bne.n	802270e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80226ca:	697b      	ldr	r3, [r7, #20]
 80226cc:	699a      	ldr	r2, [r3, #24]
 80226ce:	687b      	ldr	r3, [r7, #4]
 80226d0:	18d1      	adds	r1, r2, r3
 80226d2:	687b      	ldr	r3, [r7, #4]
 80226d4:	683a      	ldr	r2, [r7, #0]
 80226d6:	6978      	ldr	r0, [r7, #20]
 80226d8:	f000 f8c8 	bl	802286c <prvInsertTimerInActiveList>
 80226dc:	4603      	mov	r3, r0
 80226de:	2b00      	cmp	r3, #0
 80226e0:	d015      	beq.n	802270e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80226e2:	2300      	movs	r3, #0
 80226e4:	9300      	str	r3, [sp, #0]
 80226e6:	2300      	movs	r3, #0
 80226e8:	687a      	ldr	r2, [r7, #4]
 80226ea:	2100      	movs	r1, #0
 80226ec:	6978      	ldr	r0, [r7, #20]
 80226ee:	f7ff ff8d 	bl	802260c <xTimerGenericCommand>
 80226f2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80226f4:	693b      	ldr	r3, [r7, #16]
 80226f6:	2b00      	cmp	r3, #0
 80226f8:	d109      	bne.n	802270e <prvProcessExpiredTimer+0x6a>
 80226fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80226fe:	f383 8811 	msr	BASEPRI, r3
 8022702:	f3bf 8f6f 	isb	sy
 8022706:	f3bf 8f4f 	dsb	sy
 802270a:	60fb      	str	r3, [r7, #12]
 802270c:	e7fe      	b.n	802270c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802270e:	697b      	ldr	r3, [r7, #20]
 8022710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022712:	6978      	ldr	r0, [r7, #20]
 8022714:	4798      	blx	r3
}
 8022716:	bf00      	nop
 8022718:	3718      	adds	r7, #24
 802271a:	46bd      	mov	sp, r7
 802271c:	bd80      	pop	{r7, pc}
 802271e:	bf00      	nop
 8022720:	20027380 	.word	0x20027380

08022724 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8022724:	b580      	push	{r7, lr}
 8022726:	b084      	sub	sp, #16
 8022728:	af00      	add	r7, sp, #0
 802272a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802272c:	f107 0308 	add.w	r3, r7, #8
 8022730:	4618      	mov	r0, r3
 8022732:	f000 f857 	bl	80227e4 <prvGetNextExpireTime>
 8022736:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8022738:	68bb      	ldr	r3, [r7, #8]
 802273a:	4619      	mov	r1, r3
 802273c:	68f8      	ldr	r0, [r7, #12]
 802273e:	f000 f803 	bl	8022748 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8022742:	f000 f8d5 	bl	80228f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022746:	e7f1      	b.n	802272c <prvTimerTask+0x8>

08022748 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8022748:	b580      	push	{r7, lr}
 802274a:	b084      	sub	sp, #16
 802274c:	af00      	add	r7, sp, #0
 802274e:	6078      	str	r0, [r7, #4]
 8022750:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8022752:	f7fe fe05 	bl	8021360 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022756:	f107 0308 	add.w	r3, r7, #8
 802275a:	4618      	mov	r0, r3
 802275c:	f000 f866 	bl	802282c <prvSampleTimeNow>
 8022760:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8022762:	68bb      	ldr	r3, [r7, #8]
 8022764:	2b00      	cmp	r3, #0
 8022766:	d130      	bne.n	80227ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8022768:	683b      	ldr	r3, [r7, #0]
 802276a:	2b00      	cmp	r3, #0
 802276c:	d10a      	bne.n	8022784 <prvProcessTimerOrBlockTask+0x3c>
 802276e:	687a      	ldr	r2, [r7, #4]
 8022770:	68fb      	ldr	r3, [r7, #12]
 8022772:	429a      	cmp	r2, r3
 8022774:	d806      	bhi.n	8022784 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8022776:	f7fe fe39 	bl	80213ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 802277a:	68f9      	ldr	r1, [r7, #12]
 802277c:	6878      	ldr	r0, [r7, #4]
 802277e:	f7ff ff91 	bl	80226a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8022782:	e024      	b.n	80227ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8022784:	683b      	ldr	r3, [r7, #0]
 8022786:	2b00      	cmp	r3, #0
 8022788:	d008      	beq.n	802279c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 802278a:	4b13      	ldr	r3, [pc, #76]	; (80227d8 <prvProcessTimerOrBlockTask+0x90>)
 802278c:	681b      	ldr	r3, [r3, #0]
 802278e:	681b      	ldr	r3, [r3, #0]
 8022790:	2b00      	cmp	r3, #0
 8022792:	bf0c      	ite	eq
 8022794:	2301      	moveq	r3, #1
 8022796:	2300      	movne	r3, #0
 8022798:	b2db      	uxtb	r3, r3
 802279a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 802279c:	4b0f      	ldr	r3, [pc, #60]	; (80227dc <prvProcessTimerOrBlockTask+0x94>)
 802279e:	6818      	ldr	r0, [r3, #0]
 80227a0:	687a      	ldr	r2, [r7, #4]
 80227a2:	68fb      	ldr	r3, [r7, #12]
 80227a4:	1ad3      	subs	r3, r2, r3
 80227a6:	683a      	ldr	r2, [r7, #0]
 80227a8:	4619      	mov	r1, r3
 80227aa:	f7fe fb71 	bl	8020e90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80227ae:	f7fe fe1d 	bl	80213ec <xTaskResumeAll>
 80227b2:	4603      	mov	r3, r0
 80227b4:	2b00      	cmp	r3, #0
 80227b6:	d10a      	bne.n	80227ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80227b8:	4b09      	ldr	r3, [pc, #36]	; (80227e0 <prvProcessTimerOrBlockTask+0x98>)
 80227ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80227be:	601a      	str	r2, [r3, #0]
 80227c0:	f3bf 8f4f 	dsb	sy
 80227c4:	f3bf 8f6f 	isb	sy
}
 80227c8:	e001      	b.n	80227ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80227ca:	f7fe fe0f 	bl	80213ec <xTaskResumeAll>
}
 80227ce:	bf00      	nop
 80227d0:	3710      	adds	r7, #16
 80227d2:	46bd      	mov	sp, r7
 80227d4:	bd80      	pop	{r7, pc}
 80227d6:	bf00      	nop
 80227d8:	20027384 	.word	0x20027384
 80227dc:	20027388 	.word	0x20027388
 80227e0:	e000ed04 	.word	0xe000ed04

080227e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80227e4:	b480      	push	{r7}
 80227e6:	b085      	sub	sp, #20
 80227e8:	af00      	add	r7, sp, #0
 80227ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80227ec:	4b0e      	ldr	r3, [pc, #56]	; (8022828 <prvGetNextExpireTime+0x44>)
 80227ee:	681b      	ldr	r3, [r3, #0]
 80227f0:	681b      	ldr	r3, [r3, #0]
 80227f2:	2b00      	cmp	r3, #0
 80227f4:	bf0c      	ite	eq
 80227f6:	2301      	moveq	r3, #1
 80227f8:	2300      	movne	r3, #0
 80227fa:	b2db      	uxtb	r3, r3
 80227fc:	461a      	mov	r2, r3
 80227fe:	687b      	ldr	r3, [r7, #4]
 8022800:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	681b      	ldr	r3, [r3, #0]
 8022806:	2b00      	cmp	r3, #0
 8022808:	d105      	bne.n	8022816 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802280a:	4b07      	ldr	r3, [pc, #28]	; (8022828 <prvGetNextExpireTime+0x44>)
 802280c:	681b      	ldr	r3, [r3, #0]
 802280e:	68db      	ldr	r3, [r3, #12]
 8022810:	681b      	ldr	r3, [r3, #0]
 8022812:	60fb      	str	r3, [r7, #12]
 8022814:	e001      	b.n	802281a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8022816:	2300      	movs	r3, #0
 8022818:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 802281a:	68fb      	ldr	r3, [r7, #12]
}
 802281c:	4618      	mov	r0, r3
 802281e:	3714      	adds	r7, #20
 8022820:	46bd      	mov	sp, r7
 8022822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022826:	4770      	bx	lr
 8022828:	20027380 	.word	0x20027380

0802282c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 802282c:	b580      	push	{r7, lr}
 802282e:	b084      	sub	sp, #16
 8022830:	af00      	add	r7, sp, #0
 8022832:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8022834:	f7fe fe76 	bl	8021524 <xTaskGetTickCount>
 8022838:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 802283a:	4b0b      	ldr	r3, [pc, #44]	; (8022868 <prvSampleTimeNow+0x3c>)
 802283c:	681b      	ldr	r3, [r3, #0]
 802283e:	68fa      	ldr	r2, [r7, #12]
 8022840:	429a      	cmp	r2, r3
 8022842:	d205      	bcs.n	8022850 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8022844:	f000 f904 	bl	8022a50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8022848:	687b      	ldr	r3, [r7, #4]
 802284a:	2201      	movs	r2, #1
 802284c:	601a      	str	r2, [r3, #0]
 802284e:	e002      	b.n	8022856 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	2200      	movs	r2, #0
 8022854:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8022856:	4a04      	ldr	r2, [pc, #16]	; (8022868 <prvSampleTimeNow+0x3c>)
 8022858:	68fb      	ldr	r3, [r7, #12]
 802285a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 802285c:	68fb      	ldr	r3, [r7, #12]
}
 802285e:	4618      	mov	r0, r3
 8022860:	3710      	adds	r7, #16
 8022862:	46bd      	mov	sp, r7
 8022864:	bd80      	pop	{r7, pc}
 8022866:	bf00      	nop
 8022868:	20027390 	.word	0x20027390

0802286c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 802286c:	b580      	push	{r7, lr}
 802286e:	b086      	sub	sp, #24
 8022870:	af00      	add	r7, sp, #0
 8022872:	60f8      	str	r0, [r7, #12]
 8022874:	60b9      	str	r1, [r7, #8]
 8022876:	607a      	str	r2, [r7, #4]
 8022878:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802287a:	2300      	movs	r3, #0
 802287c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 802287e:	68fb      	ldr	r3, [r7, #12]
 8022880:	68ba      	ldr	r2, [r7, #8]
 8022882:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022884:	68fb      	ldr	r3, [r7, #12]
 8022886:	68fa      	ldr	r2, [r7, #12]
 8022888:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802288a:	68ba      	ldr	r2, [r7, #8]
 802288c:	687b      	ldr	r3, [r7, #4]
 802288e:	429a      	cmp	r2, r3
 8022890:	d812      	bhi.n	80228b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022892:	687a      	ldr	r2, [r7, #4]
 8022894:	683b      	ldr	r3, [r7, #0]
 8022896:	1ad2      	subs	r2, r2, r3
 8022898:	68fb      	ldr	r3, [r7, #12]
 802289a:	699b      	ldr	r3, [r3, #24]
 802289c:	429a      	cmp	r2, r3
 802289e:	d302      	bcc.n	80228a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80228a0:	2301      	movs	r3, #1
 80228a2:	617b      	str	r3, [r7, #20]
 80228a4:	e01b      	b.n	80228de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80228a6:	4b10      	ldr	r3, [pc, #64]	; (80228e8 <prvInsertTimerInActiveList+0x7c>)
 80228a8:	681a      	ldr	r2, [r3, #0]
 80228aa:	68fb      	ldr	r3, [r7, #12]
 80228ac:	3304      	adds	r3, #4
 80228ae:	4619      	mov	r1, r3
 80228b0:	4610      	mov	r0, r2
 80228b2:	f7fd f804 	bl	801f8be <vListInsert>
 80228b6:	e012      	b.n	80228de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80228b8:	687a      	ldr	r2, [r7, #4]
 80228ba:	683b      	ldr	r3, [r7, #0]
 80228bc:	429a      	cmp	r2, r3
 80228be:	d206      	bcs.n	80228ce <prvInsertTimerInActiveList+0x62>
 80228c0:	68ba      	ldr	r2, [r7, #8]
 80228c2:	683b      	ldr	r3, [r7, #0]
 80228c4:	429a      	cmp	r2, r3
 80228c6:	d302      	bcc.n	80228ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80228c8:	2301      	movs	r3, #1
 80228ca:	617b      	str	r3, [r7, #20]
 80228cc:	e007      	b.n	80228de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80228ce:	4b07      	ldr	r3, [pc, #28]	; (80228ec <prvInsertTimerInActiveList+0x80>)
 80228d0:	681a      	ldr	r2, [r3, #0]
 80228d2:	68fb      	ldr	r3, [r7, #12]
 80228d4:	3304      	adds	r3, #4
 80228d6:	4619      	mov	r1, r3
 80228d8:	4610      	mov	r0, r2
 80228da:	f7fc fff0 	bl	801f8be <vListInsert>
		}
	}

	return xProcessTimerNow;
 80228de:	697b      	ldr	r3, [r7, #20]
}
 80228e0:	4618      	mov	r0, r3
 80228e2:	3718      	adds	r7, #24
 80228e4:	46bd      	mov	sp, r7
 80228e6:	bd80      	pop	{r7, pc}
 80228e8:	20027384 	.word	0x20027384
 80228ec:	20027380 	.word	0x20027380

080228f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80228f0:	b580      	push	{r7, lr}
 80228f2:	b08e      	sub	sp, #56	; 0x38
 80228f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80228f6:	e099      	b.n	8022a2c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	2b00      	cmp	r3, #0
 80228fc:	da17      	bge.n	802292e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80228fe:	1d3b      	adds	r3, r7, #4
 8022900:	3304      	adds	r3, #4
 8022902:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8022904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022906:	2b00      	cmp	r3, #0
 8022908:	d109      	bne.n	802291e <prvProcessReceivedCommands+0x2e>
 802290a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802290e:	f383 8811 	msr	BASEPRI, r3
 8022912:	f3bf 8f6f 	isb	sy
 8022916:	f3bf 8f4f 	dsb	sy
 802291a:	61fb      	str	r3, [r7, #28]
 802291c:	e7fe      	b.n	802291c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022920:	681b      	ldr	r3, [r3, #0]
 8022922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022924:	6850      	ldr	r0, [r2, #4]
 8022926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022928:	6892      	ldr	r2, [r2, #8]
 802292a:	4611      	mov	r1, r2
 802292c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802292e:	687b      	ldr	r3, [r7, #4]
 8022930:	2b00      	cmp	r3, #0
 8022932:	db7a      	blt.n	8022a2a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8022934:	68fb      	ldr	r3, [r7, #12]
 8022936:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8022938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802293a:	695b      	ldr	r3, [r3, #20]
 802293c:	2b00      	cmp	r3, #0
 802293e:	d004      	beq.n	802294a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022942:	3304      	adds	r3, #4
 8022944:	4618      	mov	r0, r3
 8022946:	f7fc fff3 	bl	801f930 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802294a:	463b      	mov	r3, r7
 802294c:	4618      	mov	r0, r3
 802294e:	f7ff ff6d 	bl	802282c <prvSampleTimeNow>
 8022952:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8022954:	687b      	ldr	r3, [r7, #4]
 8022956:	2b09      	cmp	r3, #9
 8022958:	d868      	bhi.n	8022a2c <prvProcessReceivedCommands+0x13c>
 802295a:	a201      	add	r2, pc, #4	; (adr r2, 8022960 <prvProcessReceivedCommands+0x70>)
 802295c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022960:	08022989 	.word	0x08022989
 8022964:	08022989 	.word	0x08022989
 8022968:	08022989 	.word	0x08022989
 802296c:	08022a2d 	.word	0x08022a2d
 8022970:	080229e3 	.word	0x080229e3
 8022974:	08022a19 	.word	0x08022a19
 8022978:	08022989 	.word	0x08022989
 802297c:	08022989 	.word	0x08022989
 8022980:	08022a2d 	.word	0x08022a2d
 8022984:	080229e3 	.word	0x080229e3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8022988:	68ba      	ldr	r2, [r7, #8]
 802298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802298c:	699b      	ldr	r3, [r3, #24]
 802298e:	18d1      	adds	r1, r2, r3
 8022990:	68bb      	ldr	r3, [r7, #8]
 8022992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022996:	f7ff ff69 	bl	802286c <prvInsertTimerInActiveList>
 802299a:	4603      	mov	r3, r0
 802299c:	2b00      	cmp	r3, #0
 802299e:	d045      	beq.n	8022a2c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80229a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80229a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80229a6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80229a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229aa:	69db      	ldr	r3, [r3, #28]
 80229ac:	2b01      	cmp	r3, #1
 80229ae:	d13d      	bne.n	8022a2c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80229b0:	68ba      	ldr	r2, [r7, #8]
 80229b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229b4:	699b      	ldr	r3, [r3, #24]
 80229b6:	441a      	add	r2, r3
 80229b8:	2300      	movs	r3, #0
 80229ba:	9300      	str	r3, [sp, #0]
 80229bc:	2300      	movs	r3, #0
 80229be:	2100      	movs	r1, #0
 80229c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80229c2:	f7ff fe23 	bl	802260c <xTimerGenericCommand>
 80229c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80229c8:	6a3b      	ldr	r3, [r7, #32]
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	d12e      	bne.n	8022a2c <prvProcessReceivedCommands+0x13c>
 80229ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80229d2:	f383 8811 	msr	BASEPRI, r3
 80229d6:	f3bf 8f6f 	isb	sy
 80229da:	f3bf 8f4f 	dsb	sy
 80229de:	61bb      	str	r3, [r7, #24]
 80229e0:	e7fe      	b.n	80229e0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80229e2:	68ba      	ldr	r2, [r7, #8]
 80229e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80229e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229ea:	699b      	ldr	r3, [r3, #24]
 80229ec:	2b00      	cmp	r3, #0
 80229ee:	d109      	bne.n	8022a04 <prvProcessReceivedCommands+0x114>
 80229f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80229f4:	f383 8811 	msr	BASEPRI, r3
 80229f8:	f3bf 8f6f 	isb	sy
 80229fc:	f3bf 8f4f 	dsb	sy
 8022a00:	617b      	str	r3, [r7, #20]
 8022a02:	e7fe      	b.n	8022a02 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8022a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a06:	699a      	ldr	r2, [r3, #24]
 8022a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a0a:	18d1      	adds	r1, r2, r3
 8022a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022a12:	f7ff ff2b 	bl	802286c <prvInsertTimerInActiveList>
					break;
 8022a16:	e009      	b.n	8022a2c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8022a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8022a1e:	2b00      	cmp	r3, #0
 8022a20:	d104      	bne.n	8022a2c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8022a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022a24:	f7fc fde4 	bl	801f5f0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8022a28:	e000      	b.n	8022a2c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8022a2a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8022a2c:	4b07      	ldr	r3, [pc, #28]	; (8022a4c <prvProcessReceivedCommands+0x15c>)
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	1d39      	adds	r1, r7, #4
 8022a32:	2200      	movs	r2, #0
 8022a34:	4618      	mov	r0, r3
 8022a36:	f7fd fe2d 	bl	8020694 <xQueueReceive>
 8022a3a:	4603      	mov	r3, r0
 8022a3c:	2b00      	cmp	r3, #0
 8022a3e:	f47f af5b 	bne.w	80228f8 <prvProcessReceivedCommands+0x8>
	}
}
 8022a42:	bf00      	nop
 8022a44:	3730      	adds	r7, #48	; 0x30
 8022a46:	46bd      	mov	sp, r7
 8022a48:	bd80      	pop	{r7, pc}
 8022a4a:	bf00      	nop
 8022a4c:	20027388 	.word	0x20027388

08022a50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8022a50:	b580      	push	{r7, lr}
 8022a52:	b088      	sub	sp, #32
 8022a54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8022a56:	e044      	b.n	8022ae2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022a58:	4b2b      	ldr	r3, [pc, #172]	; (8022b08 <prvSwitchTimerLists+0xb8>)
 8022a5a:	681b      	ldr	r3, [r3, #0]
 8022a5c:	68db      	ldr	r3, [r3, #12]
 8022a5e:	681b      	ldr	r3, [r3, #0]
 8022a60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022a62:	4b29      	ldr	r3, [pc, #164]	; (8022b08 <prvSwitchTimerLists+0xb8>)
 8022a64:	681b      	ldr	r3, [r3, #0]
 8022a66:	68db      	ldr	r3, [r3, #12]
 8022a68:	68db      	ldr	r3, [r3, #12]
 8022a6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022a6c:	68fb      	ldr	r3, [r7, #12]
 8022a6e:	3304      	adds	r3, #4
 8022a70:	4618      	mov	r0, r3
 8022a72:	f7fc ff5d 	bl	801f930 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022a76:	68fb      	ldr	r3, [r7, #12]
 8022a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022a7a:	68f8      	ldr	r0, [r7, #12]
 8022a7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8022a7e:	68fb      	ldr	r3, [r7, #12]
 8022a80:	69db      	ldr	r3, [r3, #28]
 8022a82:	2b01      	cmp	r3, #1
 8022a84:	d12d      	bne.n	8022ae2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8022a86:	68fb      	ldr	r3, [r7, #12]
 8022a88:	699b      	ldr	r3, [r3, #24]
 8022a8a:	693a      	ldr	r2, [r7, #16]
 8022a8c:	4413      	add	r3, r2
 8022a8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8022a90:	68ba      	ldr	r2, [r7, #8]
 8022a92:	693b      	ldr	r3, [r7, #16]
 8022a94:	429a      	cmp	r2, r3
 8022a96:	d90e      	bls.n	8022ab6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8022a98:	68fb      	ldr	r3, [r7, #12]
 8022a9a:	68ba      	ldr	r2, [r7, #8]
 8022a9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022a9e:	68fb      	ldr	r3, [r7, #12]
 8022aa0:	68fa      	ldr	r2, [r7, #12]
 8022aa2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8022aa4:	4b18      	ldr	r3, [pc, #96]	; (8022b08 <prvSwitchTimerLists+0xb8>)
 8022aa6:	681a      	ldr	r2, [r3, #0]
 8022aa8:	68fb      	ldr	r3, [r7, #12]
 8022aaa:	3304      	adds	r3, #4
 8022aac:	4619      	mov	r1, r3
 8022aae:	4610      	mov	r0, r2
 8022ab0:	f7fc ff05 	bl	801f8be <vListInsert>
 8022ab4:	e015      	b.n	8022ae2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8022ab6:	2300      	movs	r3, #0
 8022ab8:	9300      	str	r3, [sp, #0]
 8022aba:	2300      	movs	r3, #0
 8022abc:	693a      	ldr	r2, [r7, #16]
 8022abe:	2100      	movs	r1, #0
 8022ac0:	68f8      	ldr	r0, [r7, #12]
 8022ac2:	f7ff fda3 	bl	802260c <xTimerGenericCommand>
 8022ac6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8022ac8:	687b      	ldr	r3, [r7, #4]
 8022aca:	2b00      	cmp	r3, #0
 8022acc:	d109      	bne.n	8022ae2 <prvSwitchTimerLists+0x92>
 8022ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022ad2:	f383 8811 	msr	BASEPRI, r3
 8022ad6:	f3bf 8f6f 	isb	sy
 8022ada:	f3bf 8f4f 	dsb	sy
 8022ade:	603b      	str	r3, [r7, #0]
 8022ae0:	e7fe      	b.n	8022ae0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8022ae2:	4b09      	ldr	r3, [pc, #36]	; (8022b08 <prvSwitchTimerLists+0xb8>)
 8022ae4:	681b      	ldr	r3, [r3, #0]
 8022ae6:	681b      	ldr	r3, [r3, #0]
 8022ae8:	2b00      	cmp	r3, #0
 8022aea:	d1b5      	bne.n	8022a58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8022aec:	4b06      	ldr	r3, [pc, #24]	; (8022b08 <prvSwitchTimerLists+0xb8>)
 8022aee:	681b      	ldr	r3, [r3, #0]
 8022af0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8022af2:	4b06      	ldr	r3, [pc, #24]	; (8022b0c <prvSwitchTimerLists+0xbc>)
 8022af4:	681b      	ldr	r3, [r3, #0]
 8022af6:	4a04      	ldr	r2, [pc, #16]	; (8022b08 <prvSwitchTimerLists+0xb8>)
 8022af8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8022afa:	4a04      	ldr	r2, [pc, #16]	; (8022b0c <prvSwitchTimerLists+0xbc>)
 8022afc:	697b      	ldr	r3, [r7, #20]
 8022afe:	6013      	str	r3, [r2, #0]
}
 8022b00:	bf00      	nop
 8022b02:	3718      	adds	r7, #24
 8022b04:	46bd      	mov	sp, r7
 8022b06:	bd80      	pop	{r7, pc}
 8022b08:	20027380 	.word	0x20027380
 8022b0c:	20027384 	.word	0x20027384

08022b10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8022b10:	b580      	push	{r7, lr}
 8022b12:	b082      	sub	sp, #8
 8022b14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8022b16:	f7fd f859 	bl	801fbcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8022b1a:	4b15      	ldr	r3, [pc, #84]	; (8022b70 <prvCheckForValidListAndQueue+0x60>)
 8022b1c:	681b      	ldr	r3, [r3, #0]
 8022b1e:	2b00      	cmp	r3, #0
 8022b20:	d120      	bne.n	8022b64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8022b22:	4814      	ldr	r0, [pc, #80]	; (8022b74 <prvCheckForValidListAndQueue+0x64>)
 8022b24:	f7fc fe7a 	bl	801f81c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8022b28:	4813      	ldr	r0, [pc, #76]	; (8022b78 <prvCheckForValidListAndQueue+0x68>)
 8022b2a:	f7fc fe77 	bl	801f81c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8022b2e:	4b13      	ldr	r3, [pc, #76]	; (8022b7c <prvCheckForValidListAndQueue+0x6c>)
 8022b30:	4a10      	ldr	r2, [pc, #64]	; (8022b74 <prvCheckForValidListAndQueue+0x64>)
 8022b32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8022b34:	4b12      	ldr	r3, [pc, #72]	; (8022b80 <prvCheckForValidListAndQueue+0x70>)
 8022b36:	4a10      	ldr	r2, [pc, #64]	; (8022b78 <prvCheckForValidListAndQueue+0x68>)
 8022b38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8022b3a:	2300      	movs	r3, #0
 8022b3c:	9300      	str	r3, [sp, #0]
 8022b3e:	4b11      	ldr	r3, [pc, #68]	; (8022b84 <prvCheckForValidListAndQueue+0x74>)
 8022b40:	4a11      	ldr	r2, [pc, #68]	; (8022b88 <prvCheckForValidListAndQueue+0x78>)
 8022b42:	2110      	movs	r1, #16
 8022b44:	200a      	movs	r0, #10
 8022b46:	f7fd f99f 	bl	801fe88 <xQueueGenericCreateStatic>
 8022b4a:	4602      	mov	r2, r0
 8022b4c:	4b08      	ldr	r3, [pc, #32]	; (8022b70 <prvCheckForValidListAndQueue+0x60>)
 8022b4e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8022b50:	4b07      	ldr	r3, [pc, #28]	; (8022b70 <prvCheckForValidListAndQueue+0x60>)
 8022b52:	681b      	ldr	r3, [r3, #0]
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	d005      	beq.n	8022b64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8022b58:	4b05      	ldr	r3, [pc, #20]	; (8022b70 <prvCheckForValidListAndQueue+0x60>)
 8022b5a:	681b      	ldr	r3, [r3, #0]
 8022b5c:	490b      	ldr	r1, [pc, #44]	; (8022b8c <prvCheckForValidListAndQueue+0x7c>)
 8022b5e:	4618      	mov	r0, r3
 8022b60:	f7fe f944 	bl	8020dec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8022b64:	f7fd f860 	bl	801fc28 <vPortExitCritical>
}
 8022b68:	bf00      	nop
 8022b6a:	46bd      	mov	sp, r7
 8022b6c:	bd80      	pop	{r7, pc}
 8022b6e:	bf00      	nop
 8022b70:	20027388 	.word	0x20027388
 8022b74:	20027358 	.word	0x20027358
 8022b78:	2002736c 	.word	0x2002736c
 8022b7c:	20027380 	.word	0x20027380
 8022b80:	20027384 	.word	0x20027384
 8022b84:	20027434 	.word	0x20027434
 8022b88:	20027394 	.word	0x20027394
 8022b8c:	0802816c 	.word	0x0802816c

08022b90 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8022b90:	b580      	push	{r7, lr}
 8022b92:	b086      	sub	sp, #24
 8022b94:	af00      	add	r7, sp, #0
 8022b96:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8022b98:	687b      	ldr	r3, [r7, #4]
 8022b9a:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 8022b9c:	687b      	ldr	r3, [r7, #4]
 8022b9e:	2b00      	cmp	r3, #0
 8022ba0:	d109      	bne.n	8022bb6 <xTimerIsTimerActive+0x26>
 8022ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022ba6:	f383 8811 	msr	BASEPRI, r3
 8022baa:	f3bf 8f6f 	isb	sy
 8022bae:	f3bf 8f4f 	dsb	sy
 8022bb2:	60fb      	str	r3, [r7, #12]
 8022bb4:	e7fe      	b.n	8022bb4 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8022bb6:	f7fd f809 	bl	801fbcc <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8022bba:	697b      	ldr	r3, [r7, #20]
 8022bbc:	695b      	ldr	r3, [r3, #20]
 8022bbe:	2b00      	cmp	r3, #0
 8022bc0:	bf14      	ite	ne
 8022bc2:	2301      	movne	r3, #1
 8022bc4:	2300      	moveq	r3, #0
 8022bc6:	b2db      	uxtb	r3, r3
 8022bc8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8022bca:	f7fd f82d 	bl	801fc28 <vPortExitCritical>

	return xTimerIsInActiveList;
 8022bce:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8022bd0:	4618      	mov	r0, r3
 8022bd2:	3718      	adds	r7, #24
 8022bd4:	46bd      	mov	sp, r7
 8022bd6:	bd80      	pop	{r7, pc}

08022bd8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8022bd8:	b580      	push	{r7, lr}
 8022bda:	b086      	sub	sp, #24
 8022bdc:	af00      	add	r7, sp, #0
 8022bde:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8022be0:	687b      	ldr	r3, [r7, #4]
 8022be2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	2b00      	cmp	r3, #0
 8022be8:	d109      	bne.n	8022bfe <pvTimerGetTimerID+0x26>
 8022bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022bee:	f383 8811 	msr	BASEPRI, r3
 8022bf2:	f3bf 8f6f 	isb	sy
 8022bf6:	f3bf 8f4f 	dsb	sy
 8022bfa:	60fb      	str	r3, [r7, #12]
 8022bfc:	e7fe      	b.n	8022bfc <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8022bfe:	f7fc ffe5 	bl	801fbcc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8022c02:	697b      	ldr	r3, [r7, #20]
 8022c04:	6a1b      	ldr	r3, [r3, #32]
 8022c06:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8022c08:	f7fd f80e 	bl	801fc28 <vPortExitCritical>

	return pvReturn;
 8022c0c:	693b      	ldr	r3, [r7, #16]
}
 8022c0e:	4618      	mov	r0, r3
 8022c10:	3718      	adds	r7, #24
 8022c12:	46bd      	mov	sp, r7
 8022c14:	bd80      	pop	{r7, pc}

08022c16 <otChildSupervisionSetInterval>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetInterval(otInstance *aInstance, uint16_t aInterval)
{
 8022c16:	b580      	push	{r7, lr}
 8022c18:	b084      	sub	sp, #16
 8022c1a:	af00      	add	r7, sp, #0
 8022c1c:	6078      	str	r0, [r7, #4]
 8022c1e:	460b      	mov	r3, r1
 8022c20:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8022c22:	f003 f9c3 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022c26:	f003 f95f 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8022c2a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_INTERVAL;
 8022c2c:	68fb      	ldr	r3, [r7, #12]
 8022c2e:	2200      	movs	r2, #0
 8022c30:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8022c34:	701a      	strb	r2, [r3, #0]
 8022c36:	2200      	movs	r2, #0
 8022c38:	f042 0201 	orr.w	r2, r2, #1
 8022c3c:	705a      	strb	r2, [r3, #1]
 8022c3e:	2200      	movs	r2, #0
 8022c40:	709a      	strb	r2, [r3, #2]
 8022c42:	2200      	movs	r2, #0
 8022c44:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8022c46:	68fb      	ldr	r3, [r7, #12]
 8022c48:	2200      	movs	r2, #0
 8022c4a:	f042 0201 	orr.w	r2, r2, #1
 8022c4e:	711a      	strb	r2, [r3, #4]
 8022c50:	2200      	movs	r2, #0
 8022c52:	715a      	strb	r2, [r3, #5]
 8022c54:	2200      	movs	r2, #0
 8022c56:	719a      	strb	r2, [r3, #6]
 8022c58:	2200      	movs	r2, #0
 8022c5a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aInterval;
 8022c5c:	887a      	ldrh	r2, [r7, #2]
 8022c5e:	68fb      	ldr	r3, [r7, #12]
 8022c60:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8022c62:	f003 f965 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022c66:	f003 f94b 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022c6a:	60f8      	str	r0, [r7, #12]
}
 8022c6c:	bf00      	nop
 8022c6e:	3710      	adds	r7, #16
 8022c70:	46bd      	mov	sp, r7
 8022c72:	bd80      	pop	{r7, pc}

08022c74 <otChildSupervisionSetCheckTimeout>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetCheckTimeout(otInstance *aInstance, uint16_t aTimeout)
{
 8022c74:	b580      	push	{r7, lr}
 8022c76:	b084      	sub	sp, #16
 8022c78:	af00      	add	r7, sp, #0
 8022c7a:	6078      	str	r0, [r7, #4]
 8022c7c:	460b      	mov	r3, r1
 8022c7e:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8022c80:	f003 f994 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022c84:	f003 f930 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8022c88:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_CHECK_TIMEOUT;
 8022c8a:	68fb      	ldr	r3, [r7, #12]
 8022c8c:	2200      	movs	r2, #0
 8022c8e:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8022c92:	701a      	strb	r2, [r3, #0]
 8022c94:	2200      	movs	r2, #0
 8022c96:	f042 0201 	orr.w	r2, r2, #1
 8022c9a:	705a      	strb	r2, [r3, #1]
 8022c9c:	2200      	movs	r2, #0
 8022c9e:	709a      	strb	r2, [r3, #2]
 8022ca0:	2200      	movs	r2, #0
 8022ca2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8022ca4:	68fb      	ldr	r3, [r7, #12]
 8022ca6:	2200      	movs	r2, #0
 8022ca8:	f042 0201 	orr.w	r2, r2, #1
 8022cac:	711a      	strb	r2, [r3, #4]
 8022cae:	2200      	movs	r2, #0
 8022cb0:	715a      	strb	r2, [r3, #5]
 8022cb2:	2200      	movs	r2, #0
 8022cb4:	719a      	strb	r2, [r3, #6]
 8022cb6:	2200      	movs	r2, #0
 8022cb8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aTimeout;
 8022cba:	887a      	ldrh	r2, [r7, #2]
 8022cbc:	68fb      	ldr	r3, [r7, #12]
 8022cbe:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8022cc0:	f003 f936 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022cc4:	f003 f91c 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022cc8:	60f8      	str	r0, [r7, #12]
}
 8022cca:	bf00      	nop
 8022ccc:	3710      	adds	r7, #16
 8022cce:	46bd      	mov	sp, r7
 8022cd0:	bd80      	pop	{r7, pc}

08022cd2 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8022cd2:	b580      	push	{r7, lr}
 8022cd4:	b084      	sub	sp, #16
 8022cd6:	af00      	add	r7, sp, #0
 8022cd8:	6078      	str	r0, [r7, #4]
 8022cda:	460b      	mov	r3, r1
 8022cdc:	70fb      	strb	r3, [r7, #3]
 8022cde:	4613      	mov	r3, r2
 8022ce0:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8022ce2:	f003 f963 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022ce6:	f003 f8ff 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8022cea:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8022cec:	68fb      	ldr	r3, [r7, #12]
 8022cee:	2200      	movs	r2, #0
 8022cf0:	f062 0260 	orn	r2, r2, #96	; 0x60
 8022cf4:	701a      	strb	r2, [r3, #0]
 8022cf6:	2200      	movs	r2, #0
 8022cf8:	705a      	strb	r2, [r3, #1]
 8022cfa:	2200      	movs	r2, #0
 8022cfc:	709a      	strb	r2, [r3, #2]
 8022cfe:	2200      	movs	r2, #0
 8022d00:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8022d02:	68fb      	ldr	r3, [r7, #12]
 8022d04:	2200      	movs	r2, #0
 8022d06:	f042 0203 	orr.w	r2, r2, #3
 8022d0a:	711a      	strb	r2, [r3, #4]
 8022d0c:	2200      	movs	r2, #0
 8022d0e:	715a      	strb	r2, [r3, #5]
 8022d10:	2200      	movs	r2, #0
 8022d12:	719a      	strb	r2, [r3, #6]
 8022d14:	2200      	movs	r2, #0
 8022d16:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022d18:	687a      	ldr	r2, [r7, #4]
 8022d1a:	68fb      	ldr	r3, [r7, #12]
 8022d1c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 8022d1e:	78fa      	ldrb	r2, [r7, #3]
 8022d20:	68fb      	ldr	r3, [r7, #12]
 8022d22:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8022d24:	78ba      	ldrb	r2, [r7, #2]
 8022d26:	68fb      	ldr	r3, [r7, #12]
 8022d28:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8022d2a:	f003 f901 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022d2e:	f003 f8e7 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022d32:	60f8      	str	r0, [r7, #12]
}
 8022d34:	bf00      	nop
 8022d36:	3710      	adds	r7, #16
 8022d38:	46bd      	mov	sp, r7
 8022d3a:	bd80      	pop	{r7, pc}

08022d3c <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 8022d3c:	b580      	push	{r7, lr}
 8022d3e:	b086      	sub	sp, #24
 8022d40:	af00      	add	r7, sp, #0
 8022d42:	60f8      	str	r0, [r7, #12]
 8022d44:	60b9      	str	r1, [r7, #8]
 8022d46:	4613      	mov	r3, r2
 8022d48:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 8022d4a:	f003 f92f 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022d4e:	f003 f8cb 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8022d52:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8022d54:	697b      	ldr	r3, [r7, #20]
 8022d56:	2200      	movs	r2, #0
 8022d58:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8022d5c:	701a      	strb	r2, [r3, #0]
 8022d5e:	2200      	movs	r2, #0
 8022d60:	705a      	strb	r2, [r3, #1]
 8022d62:	2200      	movs	r2, #0
 8022d64:	709a      	strb	r2, [r3, #2]
 8022d66:	2200      	movs	r2, #0
 8022d68:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8022d6a:	697b      	ldr	r3, [r7, #20]
 8022d6c:	2200      	movs	r2, #0
 8022d6e:	f042 0203 	orr.w	r2, r2, #3
 8022d72:	711a      	strb	r2, [r3, #4]
 8022d74:	2200      	movs	r2, #0
 8022d76:	715a      	strb	r2, [r3, #5]
 8022d78:	2200      	movs	r2, #0
 8022d7a:	719a      	strb	r2, [r3, #6]
 8022d7c:	2200      	movs	r2, #0
 8022d7e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022d80:	68fa      	ldr	r2, [r7, #12]
 8022d82:	697b      	ldr	r3, [r7, #20]
 8022d84:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8022d86:	68ba      	ldr	r2, [r7, #8]
 8022d88:	697b      	ldr	r3, [r7, #20]
 8022d8a:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 8022d8c:	79fa      	ldrb	r2, [r7, #7]
 8022d8e:	697b      	ldr	r3, [r7, #20]
 8022d90:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8022d92:	f003 f8cd 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022d96:	f003 f8b3 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022d9a:	6178      	str	r0, [r7, #20]
}
 8022d9c:	bf00      	nop
 8022d9e:	3718      	adds	r7, #24
 8022da0:	46bd      	mov	sp, r7
 8022da2:	bd80      	pop	{r7, pc}

08022da4 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8022da4:	b580      	push	{r7, lr}
 8022da6:	b084      	sub	sp, #16
 8022da8:	af00      	add	r7, sp, #0
 8022daa:	6078      	str	r0, [r7, #4]
 8022dac:	460b      	mov	r3, r1
 8022dae:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8022db0:	f003 f8fc 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022db4:	f003 f898 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8022db8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 8022dba:	68fb      	ldr	r3, [r7, #12]
 8022dbc:	2200      	movs	r2, #0
 8022dbe:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8022dc2:	701a      	strb	r2, [r3, #0]
 8022dc4:	2200      	movs	r2, #0
 8022dc6:	705a      	strb	r2, [r3, #1]
 8022dc8:	2200      	movs	r2, #0
 8022dca:	709a      	strb	r2, [r3, #2]
 8022dcc:	2200      	movs	r2, #0
 8022dce:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8022dd0:	68fb      	ldr	r3, [r7, #12]
 8022dd2:	2200      	movs	r2, #0
 8022dd4:	f042 0202 	orr.w	r2, r2, #2
 8022dd8:	711a      	strb	r2, [r3, #4]
 8022dda:	2200      	movs	r2, #0
 8022ddc:	715a      	strb	r2, [r3, #5]
 8022dde:	2200      	movs	r2, #0
 8022de0:	719a      	strb	r2, [r3, #6]
 8022de2:	2200      	movs	r2, #0
 8022de4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022de6:	687a      	ldr	r2, [r7, #4]
 8022de8:	68fb      	ldr	r3, [r7, #12]
 8022dea:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8022dec:	78fa      	ldrb	r2, [r7, #3]
 8022dee:	68fb      	ldr	r3, [r7, #12]
 8022df0:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8022df2:	f003 f89d 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022df6:	f003 f883 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022dfa:	60f8      	str	r0, [r7, #12]
}
 8022dfc:	bf00      	nop
 8022dfe:	3710      	adds	r7, #16
 8022e00:	46bd      	mov	sp, r7
 8022e02:	bd80      	pop	{r7, pc}

08022e04 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8022e04:	b580      	push	{r7, lr}
 8022e06:	b084      	sub	sp, #16
 8022e08:	af00      	add	r7, sp, #0
 8022e0a:	6078      	str	r0, [r7, #4]
 8022e0c:	460b      	mov	r3, r1
 8022e0e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8022e10:	f003 f8cc 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022e14:	f003 f868 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8022e18:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 8022e1a:	68fb      	ldr	r3, [r7, #12]
 8022e1c:	2200      	movs	r2, #0
 8022e1e:	f062 025d 	orn	r2, r2, #93	; 0x5d
 8022e22:	701a      	strb	r2, [r3, #0]
 8022e24:	2200      	movs	r2, #0
 8022e26:	705a      	strb	r2, [r3, #1]
 8022e28:	2200      	movs	r2, #0
 8022e2a:	709a      	strb	r2, [r3, #2]
 8022e2c:	2200      	movs	r2, #0
 8022e2e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8022e30:	68fb      	ldr	r3, [r7, #12]
 8022e32:	2200      	movs	r2, #0
 8022e34:	f042 0202 	orr.w	r2, r2, #2
 8022e38:	711a      	strb	r2, [r3, #4]
 8022e3a:	2200      	movs	r2, #0
 8022e3c:	715a      	strb	r2, [r3, #5]
 8022e3e:	2200      	movs	r2, #0
 8022e40:	719a      	strb	r2, [r3, #6]
 8022e42:	2200      	movs	r2, #0
 8022e44:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022e46:	687a      	ldr	r2, [r7, #4]
 8022e48:	68fb      	ldr	r3, [r7, #12]
 8022e4a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 8022e4c:	78fa      	ldrb	r2, [r7, #3]
 8022e4e:	68fb      	ldr	r3, [r7, #12]
 8022e50:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8022e52:	f003 f86d 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022e56:	f003 f853 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022e5a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8022e5c:	68fb      	ldr	r3, [r7, #12]
 8022e5e:	689b      	ldr	r3, [r3, #8]
 8022e60:	b2db      	uxtb	r3, r3
}
 8022e62:	4618      	mov	r0, r3
 8022e64:	3710      	adds	r7, #16
 8022e66:	46bd      	mov	sp, r7
 8022e68:	bd80      	pop	{r7, pc}

08022e6a <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 8022e6a:	b580      	push	{r7, lr}
 8022e6c:	b084      	sub	sp, #16
 8022e6e:	af00      	add	r7, sp, #0
 8022e70:	6078      	str	r0, [r7, #4]
 8022e72:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8022e74:	f003 f89a 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022e78:	f003 f836 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8022e7c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8022e7e:	68fb      	ldr	r3, [r7, #12]
 8022e80:	2200      	movs	r2, #0
 8022e82:	f062 0250 	orn	r2, r2, #80	; 0x50
 8022e86:	701a      	strb	r2, [r3, #0]
 8022e88:	2200      	movs	r2, #0
 8022e8a:	705a      	strb	r2, [r3, #1]
 8022e8c:	2200      	movs	r2, #0
 8022e8e:	709a      	strb	r2, [r3, #2]
 8022e90:	2200      	movs	r2, #0
 8022e92:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8022e94:	68fb      	ldr	r3, [r7, #12]
 8022e96:	2200      	movs	r2, #0
 8022e98:	f042 0202 	orr.w	r2, r2, #2
 8022e9c:	711a      	strb	r2, [r3, #4]
 8022e9e:	2200      	movs	r2, #0
 8022ea0:	715a      	strb	r2, [r3, #5]
 8022ea2:	2200      	movs	r2, #0
 8022ea4:	719a      	strb	r2, [r3, #6]
 8022ea6:	2200      	movs	r2, #0
 8022ea8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022eaa:	687a      	ldr	r2, [r7, #4]
 8022eac:	68fb      	ldr	r3, [r7, #12]
 8022eae:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8022eb0:	683a      	ldr	r2, [r7, #0]
 8022eb2:	68fb      	ldr	r3, [r7, #12]
 8022eb4:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8022eb6:	f003 f83b 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022eba:	f003 f821 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022ebe:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8022ec0:	68fb      	ldr	r3, [r7, #12]
 8022ec2:	689b      	ldr	r3, [r3, #8]
 8022ec4:	b2db      	uxtb	r3, r3
}
 8022ec6:	4618      	mov	r0, r3
 8022ec8:	3710      	adds	r7, #16
 8022eca:	46bd      	mov	sp, r7
 8022ecc:	bd80      	pop	{r7, pc}

08022ece <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8022ece:	b580      	push	{r7, lr}
 8022ed0:	b084      	sub	sp, #16
 8022ed2:	af00      	add	r7, sp, #0
 8022ed4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8022ed6:	f003 f869 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022eda:	f003 f805 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8022ede:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8022ee0:	68fb      	ldr	r3, [r7, #12]
 8022ee2:	2200      	movs	r2, #0
 8022ee4:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8022ee8:	701a      	strb	r2, [r3, #0]
 8022eea:	2200      	movs	r2, #0
 8022eec:	705a      	strb	r2, [r3, #1]
 8022eee:	2200      	movs	r2, #0
 8022ef0:	709a      	strb	r2, [r3, #2]
 8022ef2:	2200      	movs	r2, #0
 8022ef4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8022ef6:	68fb      	ldr	r3, [r7, #12]
 8022ef8:	2200      	movs	r2, #0
 8022efa:	f042 0201 	orr.w	r2, r2, #1
 8022efe:	711a      	strb	r2, [r3, #4]
 8022f00:	2200      	movs	r2, #0
 8022f02:	715a      	strb	r2, [r3, #5]
 8022f04:	2200      	movs	r2, #0
 8022f06:	719a      	strb	r2, [r3, #6]
 8022f08:	2200      	movs	r2, #0
 8022f0a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022f0c:	687a      	ldr	r2, [r7, #4]
 8022f0e:	68fb      	ldr	r3, [r7, #12]
 8022f10:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8022f12:	f003 f80d 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022f16:	f002 fff3 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022f1a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8022f1c:	68fb      	ldr	r3, [r7, #12]
 8022f1e:	689b      	ldr	r3, [r3, #8]
 8022f20:	b2db      	uxtb	r3, r3
}
 8022f22:	4618      	mov	r0, r3
 8022f24:	3710      	adds	r7, #16
 8022f26:	46bd      	mov	sp, r7
 8022f28:	bd80      	pop	{r7, pc}

08022f2a <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8022f2a:	b580      	push	{r7, lr}
 8022f2c:	b084      	sub	sp, #16
 8022f2e:	af00      	add	r7, sp, #0
 8022f30:	6078      	str	r0, [r7, #4]
 8022f32:	460b      	mov	r3, r1
 8022f34:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8022f36:	f003 f839 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022f3a:	f002 ffd5 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8022f3e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8022f40:	68fb      	ldr	r3, [r7, #12]
 8022f42:	2200      	movs	r2, #0
 8022f44:	f062 0256 	orn	r2, r2, #86	; 0x56
 8022f48:	701a      	strb	r2, [r3, #0]
 8022f4a:	2200      	movs	r2, #0
 8022f4c:	705a      	strb	r2, [r3, #1]
 8022f4e:	2200      	movs	r2, #0
 8022f50:	709a      	strb	r2, [r3, #2]
 8022f52:	2200      	movs	r2, #0
 8022f54:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8022f56:	68fb      	ldr	r3, [r7, #12]
 8022f58:	2200      	movs	r2, #0
 8022f5a:	f042 0202 	orr.w	r2, r2, #2
 8022f5e:	711a      	strb	r2, [r3, #4]
 8022f60:	2200      	movs	r2, #0
 8022f62:	715a      	strb	r2, [r3, #5]
 8022f64:	2200      	movs	r2, #0
 8022f66:	719a      	strb	r2, [r3, #6]
 8022f68:	2200      	movs	r2, #0
 8022f6a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022f6c:	687a      	ldr	r2, [r7, #4]
 8022f6e:	68fb      	ldr	r3, [r7, #12]
 8022f70:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8022f72:	887a      	ldrh	r2, [r7, #2]
 8022f74:	68fb      	ldr	r3, [r7, #12]
 8022f76:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8022f78:	f002 ffda 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022f7c:	f002 ffc0 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022f80:	60f8      	str	r0, [r7, #12]
}
 8022f82:	bf00      	nop
 8022f84:	3710      	adds	r7, #16
 8022f86:	46bd      	mov	sp, r7
 8022f88:	bd80      	pop	{r7, pc}

08022f8a <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8022f8a:	b580      	push	{r7, lr}
 8022f8c:	b084      	sub	sp, #16
 8022f8e:	af00      	add	r7, sp, #0
 8022f90:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8022f92:	f003 f80b 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022f96:	f002 ffa7 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8022f9a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8022f9c:	68fb      	ldr	r3, [r7, #12]
 8022f9e:	2200      	movs	r2, #0
 8022fa0:	f062 0261 	orn	r2, r2, #97	; 0x61
 8022fa4:	701a      	strb	r2, [r3, #0]
 8022fa6:	2200      	movs	r2, #0
 8022fa8:	705a      	strb	r2, [r3, #1]
 8022faa:	2200      	movs	r2, #0
 8022fac:	709a      	strb	r2, [r3, #2]
 8022fae:	2200      	movs	r2, #0
 8022fb0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8022fb2:	68fb      	ldr	r3, [r7, #12]
 8022fb4:	2200      	movs	r2, #0
 8022fb6:	f042 0201 	orr.w	r2, r2, #1
 8022fba:	711a      	strb	r2, [r3, #4]
 8022fbc:	2200      	movs	r2, #0
 8022fbe:	715a      	strb	r2, [r3, #5]
 8022fc0:	2200      	movs	r2, #0
 8022fc2:	719a      	strb	r2, [r3, #6]
 8022fc4:	2200      	movs	r2, #0
 8022fc6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022fc8:	687a      	ldr	r2, [r7, #4]
 8022fca:	68fb      	ldr	r3, [r7, #12]
 8022fcc:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8022fce:	f002 ffaf 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022fd2:	f002 ff95 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022fd6:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8022fd8:	68fb      	ldr	r3, [r7, #12]
 8022fda:	689b      	ldr	r3, [r3, #8]
 8022fdc:	b2db      	uxtb	r3, r3
}
 8022fde:	4618      	mov	r0, r3
 8022fe0:	3710      	adds	r7, #16
 8022fe2:	46bd      	mov	sp, r7
 8022fe4:	bd80      	pop	{r7, pc}

08022fe6 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8022fe6:	b580      	push	{r7, lr}
 8022fe8:	b084      	sub	sp, #16
 8022fea:	af00      	add	r7, sp, #0
 8022fec:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8022fee:	f002 ffdd 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022ff2:	f002 ff79 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8022ff6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 8022ff8:	68fb      	ldr	r3, [r7, #12]
 8022ffa:	2200      	movs	r2, #0
 8022ffc:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8023000:	701a      	strb	r2, [r3, #0]
 8023002:	2200      	movs	r2, #0
 8023004:	705a      	strb	r2, [r3, #1]
 8023006:	2200      	movs	r2, #0
 8023008:	709a      	strb	r2, [r3, #2]
 802300a:	2200      	movs	r2, #0
 802300c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 802300e:	68fb      	ldr	r3, [r7, #12]
 8023010:	2200      	movs	r2, #0
 8023012:	f042 0201 	orr.w	r2, r2, #1
 8023016:	711a      	strb	r2, [r3, #4]
 8023018:	2200      	movs	r2, #0
 802301a:	715a      	strb	r2, [r3, #5]
 802301c:	2200      	movs	r2, #0
 802301e:	719a      	strb	r2, [r3, #6]
 8023020:	2200      	movs	r2, #0
 8023022:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8023024:	687a      	ldr	r2, [r7, #4]
 8023026:	68fb      	ldr	r3, [r7, #12]
 8023028:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 802302a:	f002 ff81 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802302e:	f002 ff67 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023032:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8023034:	68fb      	ldr	r3, [r7, #12]
 8023036:	689b      	ldr	r3, [r3, #8]
 8023038:	b2db      	uxtb	r3, r3
}
 802303a:	4618      	mov	r0, r3
 802303c:	3710      	adds	r7, #16
 802303e:	46bd      	mov	sp, r7
 8023040:	bd80      	pop	{r7, pc}

08023042 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8023042:	b580      	push	{r7, lr}
 8023044:	b084      	sub	sp, #16
 8023046:	af00      	add	r7, sp, #0
 8023048:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 802304a:	f002 ffaf 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 802304e:	f002 ff4b 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8023052:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8023054:	68fb      	ldr	r3, [r7, #12]
 8023056:	2200      	movs	r2, #0
 8023058:	f062 0255 	orn	r2, r2, #85	; 0x55
 802305c:	701a      	strb	r2, [r3, #0]
 802305e:	2200      	movs	r2, #0
 8023060:	705a      	strb	r2, [r3, #1]
 8023062:	2200      	movs	r2, #0
 8023064:	709a      	strb	r2, [r3, #2]
 8023066:	2200      	movs	r2, #0
 8023068:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 802306a:	68fb      	ldr	r3, [r7, #12]
 802306c:	2200      	movs	r2, #0
 802306e:	f042 0201 	orr.w	r2, r2, #1
 8023072:	711a      	strb	r2, [r3, #4]
 8023074:	2200      	movs	r2, #0
 8023076:	715a      	strb	r2, [r3, #5]
 8023078:	2200      	movs	r2, #0
 802307a:	719a      	strb	r2, [r3, #6]
 802307c:	2200      	movs	r2, #0
 802307e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8023080:	687a      	ldr	r2, [r7, #4]
 8023082:	68fb      	ldr	r3, [r7, #12]
 8023084:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8023086:	f002 ff53 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802308a:	f002 ff39 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 802308e:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8023090:	68fb      	ldr	r3, [r7, #12]
 8023092:	689b      	ldr	r3, [r3, #8]
 8023094:	b29b      	uxth	r3, r3
}
 8023096:	4618      	mov	r0, r3
 8023098:	3710      	adds	r7, #16
 802309a:	46bd      	mov	sp, r7
 802309c:	bd80      	pop	{r7, pc}

0802309e <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 802309e:	b580      	push	{r7, lr}
 80230a0:	b084      	sub	sp, #16
 80230a2:	af00      	add	r7, sp, #0
 80230a4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80230a6:	f002 ff81 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80230aa:	f002 ff1d 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 80230ae:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 80230b0:	68fb      	ldr	r3, [r7, #12]
 80230b2:	2200      	movs	r2, #0
 80230b4:	f062 0254 	orn	r2, r2, #84	; 0x54
 80230b8:	701a      	strb	r2, [r3, #0]
 80230ba:	2200      	movs	r2, #0
 80230bc:	705a      	strb	r2, [r3, #1]
 80230be:	2200      	movs	r2, #0
 80230c0:	709a      	strb	r2, [r3, #2]
 80230c2:	2200      	movs	r2, #0
 80230c4:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 80230c6:	68fb      	ldr	r3, [r7, #12]
 80230c8:	2200      	movs	r2, #0
 80230ca:	f042 0201 	orr.w	r2, r2, #1
 80230ce:	711a      	strb	r2, [r3, #4]
 80230d0:	2200      	movs	r2, #0
 80230d2:	715a      	strb	r2, [r3, #5]
 80230d4:	2200      	movs	r2, #0
 80230d6:	719a      	strb	r2, [r3, #6]
 80230d8:	2200      	movs	r2, #0
 80230da:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 80230dc:	687a      	ldr	r2, [r7, #4]
 80230de:	68fb      	ldr	r3, [r7, #12]
 80230e0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80230e2:	f002 ff25 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80230e6:	f002 ff0b 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 80230ea:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 80230ec:	68fb      	ldr	r3, [r7, #12]
 80230ee:	689b      	ldr	r3, [r3, #8]
 80230f0:	b2db      	uxtb	r3, r3
}
 80230f2:	4618      	mov	r0, r3
 80230f4:	3710      	adds	r7, #16
 80230f6:	46bd      	mov	sp, r7
 80230f8:	bd80      	pop	{r7, pc}

080230fa <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 80230fa:	b580      	push	{r7, lr}
 80230fc:	b084      	sub	sp, #16
 80230fe:	af00      	add	r7, sp, #0
 8023100:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8023102:	f002 ff53 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023106:	f002 feef 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 802310a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 802310c:	68fb      	ldr	r3, [r7, #12]
 802310e:	2200      	movs	r2, #0
 8023110:	f062 0253 	orn	r2, r2, #83	; 0x53
 8023114:	701a      	strb	r2, [r3, #0]
 8023116:	2200      	movs	r2, #0
 8023118:	705a      	strb	r2, [r3, #1]
 802311a:	2200      	movs	r2, #0
 802311c:	709a      	strb	r2, [r3, #2]
 802311e:	2200      	movs	r2, #0
 8023120:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8023122:	68fb      	ldr	r3, [r7, #12]
 8023124:	2200      	movs	r2, #0
 8023126:	f042 0201 	orr.w	r2, r2, #1
 802312a:	711a      	strb	r2, [r3, #4]
 802312c:	2200      	movs	r2, #0
 802312e:	715a      	strb	r2, [r3, #5]
 8023130:	2200      	movs	r2, #0
 8023132:	719a      	strb	r2, [r3, #6]
 8023134:	2200      	movs	r2, #0
 8023136:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8023138:	687a      	ldr	r2, [r7, #4]
 802313a:	68fb      	ldr	r3, [r7, #12]
 802313c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 802313e:	f002 fef7 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023142:	f002 fedd 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023146:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8023148:	68fb      	ldr	r3, [r7, #12]
 802314a:	689b      	ldr	r3, [r3, #8]
}
 802314c:	4618      	mov	r0, r3
 802314e:	3710      	adds	r7, #16
 8023150:	46bd      	mov	sp, r7
 8023152:	bd80      	pop	{r7, pc}

08023154 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8023154:	b580      	push	{r7, lr}
 8023156:	b084      	sub	sp, #16
 8023158:	af00      	add	r7, sp, #0
 802315a:	6078      	str	r0, [r7, #4]
 802315c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 802315e:	f002 ff25 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023162:	f002 fec1 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8023166:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8023168:	68fb      	ldr	r3, [r7, #12]
 802316a:	2200      	movs	r2, #0
 802316c:	f062 0259 	orn	r2, r2, #89	; 0x59
 8023170:	701a      	strb	r2, [r3, #0]
 8023172:	2200      	movs	r2, #0
 8023174:	705a      	strb	r2, [r3, #1]
 8023176:	2200      	movs	r2, #0
 8023178:	709a      	strb	r2, [r3, #2]
 802317a:	2200      	movs	r2, #0
 802317c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 802317e:	68fb      	ldr	r3, [r7, #12]
 8023180:	2200      	movs	r2, #0
 8023182:	f042 0201 	orr.w	r2, r2, #1
 8023186:	711a      	strb	r2, [r3, #4]
 8023188:	2200      	movs	r2, #0
 802318a:	715a      	strb	r2, [r3, #5]
 802318c:	2200      	movs	r2, #0
 802318e:	719a      	strb	r2, [r3, #6]
 8023190:	2200      	movs	r2, #0
 8023192:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8023194:	683a      	ldr	r2, [r7, #0]
 8023196:	68fb      	ldr	r3, [r7, #12]
 8023198:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 802319a:	f002 fec9 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802319e:	f002 feaf 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 80231a2:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 80231a4:	68fb      	ldr	r3, [r7, #12]
 80231a6:	689b      	ldr	r3, [r3, #8]

}
 80231a8:	4618      	mov	r0, r3
 80231aa:	3710      	adds	r7, #16
 80231ac:	46bd      	mov	sp, r7
 80231ae:	bd80      	pop	{r7, pc}

080231b0 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 80231b0:	b580      	push	{r7, lr}
 80231b2:	b086      	sub	sp, #24
 80231b4:	af00      	add	r7, sp, #0
 80231b6:	60f8      	str	r0, [r7, #12]
 80231b8:	60b9      	str	r1, [r7, #8]
 80231ba:	607a      	str	r2, [r7, #4]
 80231bc:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 80231be:	f002 fef5 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80231c2:	f002 fe91 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 80231c6:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 80231c8:	697b      	ldr	r3, [r7, #20]
 80231ca:	2200      	movs	r2, #0
 80231cc:	f062 0258 	orn	r2, r2, #88	; 0x58
 80231d0:	701a      	strb	r2, [r3, #0]
 80231d2:	2200      	movs	r2, #0
 80231d4:	705a      	strb	r2, [r3, #1]
 80231d6:	2200      	movs	r2, #0
 80231d8:	709a      	strb	r2, [r3, #2]
 80231da:	2200      	movs	r2, #0
 80231dc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80231de:	697b      	ldr	r3, [r7, #20]
 80231e0:	2200      	movs	r2, #0
 80231e2:	f042 0203 	orr.w	r2, r2, #3
 80231e6:	711a      	strb	r2, [r3, #4]
 80231e8:	2200      	movs	r2, #0
 80231ea:	715a      	strb	r2, [r3, #5]
 80231ec:	2200      	movs	r2, #0
 80231ee:	719a      	strb	r2, [r3, #6]
 80231f0:	2200      	movs	r2, #0
 80231f2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80231f4:	68ba      	ldr	r2, [r7, #8]
 80231f6:	697b      	ldr	r3, [r7, #20]
 80231f8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80231fa:	687a      	ldr	r2, [r7, #4]
 80231fc:	697b      	ldr	r3, [r7, #20]
 80231fe:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8023200:	683a      	ldr	r2, [r7, #0]
 8023202:	697b      	ldr	r3, [r7, #20]
 8023204:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8023206:	6a3a      	ldr	r2, [r7, #32]
 8023208:	697b      	ldr	r3, [r7, #20]
 802320a:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 802320c:	f002 fe90 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023210:	f002 fe76 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023214:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8023216:	697b      	ldr	r3, [r7, #20]
 8023218:	689b      	ldr	r3, [r3, #8]
 802321a:	b2db      	uxtb	r3, r3
}
 802321c:	4618      	mov	r0, r3
 802321e:	3718      	adds	r7, #24
 8023220:	46bd      	mov	sp, r7
 8023222:	bd80      	pop	{r7, pc}

08023224 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8023224:	b580      	push	{r7, lr}
 8023226:	b084      	sub	sp, #16
 8023228:	af00      	add	r7, sp, #0
 802322a:	6078      	str	r0, [r7, #4]
 802322c:	460b      	mov	r3, r1
 802322e:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8023230:	f002 febc 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023234:	f002 fe58 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8023238:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 802323a:	68fb      	ldr	r3, [r7, #12]
 802323c:	2200      	movs	r2, #0
 802323e:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8023242:	701a      	strb	r2, [r3, #0]
 8023244:	2200      	movs	r2, #0
 8023246:	705a      	strb	r2, [r3, #1]
 8023248:	2200      	movs	r2, #0
 802324a:	709a      	strb	r2, [r3, #2]
 802324c:	2200      	movs	r2, #0
 802324e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8023250:	68fb      	ldr	r3, [r7, #12]
 8023252:	2200      	movs	r2, #0
 8023254:	f042 0201 	orr.w	r2, r2, #1
 8023258:	711a      	strb	r2, [r3, #4]
 802325a:	2200      	movs	r2, #0
 802325c:	715a      	strb	r2, [r3, #5]
 802325e:	2200      	movs	r2, #0
 8023260:	719a      	strb	r2, [r3, #6]
 8023262:	2200      	movs	r2, #0
 8023264:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 8023266:	887a      	ldrh	r2, [r7, #2]
 8023268:	68fb      	ldr	r3, [r7, #12]
 802326a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 802326c:	f002 fe60 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023270:	f002 fe46 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023274:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8023276:	68fb      	ldr	r3, [r7, #12]
 8023278:	689b      	ldr	r3, [r3, #8]
 802327a:	b2db      	uxtb	r3, r3
}
 802327c:	4618      	mov	r0, r3
 802327e:	3710      	adds	r7, #16
 8023280:	46bd      	mov	sp, r7
 8023282:	bd80      	pop	{r7, pc}

08023284 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8023284:	b580      	push	{r7, lr}
 8023286:	b084      	sub	sp, #16
 8023288:	af00      	add	r7, sp, #0
 802328a:	6078      	str	r0, [r7, #4]
 802328c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 802328e:	f002 fe8d 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023292:	f002 fe29 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8023296:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8023298:	68fb      	ldr	r3, [r7, #12]
 802329a:	2200      	movs	r2, #0
 802329c:	f062 0249 	orn	r2, r2, #73	; 0x49
 80232a0:	701a      	strb	r2, [r3, #0]
 80232a2:	2200      	movs	r2, #0
 80232a4:	705a      	strb	r2, [r3, #1]
 80232a6:	2200      	movs	r2, #0
 80232a8:	709a      	strb	r2, [r3, #2]
 80232aa:	2200      	movs	r2, #0
 80232ac:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80232ae:	68fb      	ldr	r3, [r7, #12]
 80232b0:	2200      	movs	r2, #0
 80232b2:	f042 0201 	orr.w	r2, r2, #1
 80232b6:	711a      	strb	r2, [r3, #4]
 80232b8:	2200      	movs	r2, #0
 80232ba:	715a      	strb	r2, [r3, #5]
 80232bc:	2200      	movs	r2, #0
 80232be:	719a      	strb	r2, [r3, #6]
 80232c0:	2200      	movs	r2, #0
 80232c2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 80232c4:	683a      	ldr	r2, [r7, #0]
 80232c6:	68fb      	ldr	r3, [r7, #12]
 80232c8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80232ca:	f002 fe31 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80232ce:	f002 fe17 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 80232d2:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 80232d4:	68fb      	ldr	r3, [r7, #12]
 80232d6:	689b      	ldr	r3, [r3, #8]
 80232d8:	b2db      	uxtb	r3, r3
}
 80232da:	4618      	mov	r0, r3
 80232dc:	3710      	adds	r7, #16
 80232de:	46bd      	mov	sp, r7
 80232e0:	bd80      	pop	{r7, pc}

080232e2 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 80232e2:	b580      	push	{r7, lr}
 80232e4:	b086      	sub	sp, #24
 80232e6:	af00      	add	r7, sp, #0
 80232e8:	60f8      	str	r0, [r7, #12]
 80232ea:	60b9      	str	r1, [r7, #8]
 80232ec:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 80232ee:	f002 fe5d 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80232f2:	f002 fdf9 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 80232f6:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 80232f8:	697b      	ldr	r3, [r7, #20]
 80232fa:	2200      	movs	r2, #0
 80232fc:	f062 0257 	orn	r2, r2, #87	; 0x57
 8023300:	701a      	strb	r2, [r3, #0]
 8023302:	2200      	movs	r2, #0
 8023304:	705a      	strb	r2, [r3, #1]
 8023306:	2200      	movs	r2, #0
 8023308:	709a      	strb	r2, [r3, #2]
 802330a:	2200      	movs	r2, #0
 802330c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 802330e:	697b      	ldr	r3, [r7, #20]
 8023310:	2200      	movs	r2, #0
 8023312:	f042 0202 	orr.w	r2, r2, #2
 8023316:	711a      	strb	r2, [r3, #4]
 8023318:	2200      	movs	r2, #0
 802331a:	715a      	strb	r2, [r3, #5]
 802331c:	2200      	movs	r2, #0
 802331e:	719a      	strb	r2, [r3, #6]
 8023320:	2200      	movs	r2, #0
 8023322:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8023324:	68ba      	ldr	r2, [r7, #8]
 8023326:	697b      	ldr	r3, [r7, #20]
 8023328:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 802332a:	687a      	ldr	r2, [r7, #4]
 802332c:	697b      	ldr	r3, [r7, #20]
 802332e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8023330:	f002 fdfe 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023334:	f002 fde4 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023338:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 802333a:	697b      	ldr	r3, [r7, #20]
 802333c:	689b      	ldr	r3, [r3, #8]
 802333e:	b2db      	uxtb	r3, r3
}
 8023340:	4618      	mov	r0, r3
 8023342:	3718      	adds	r7, #24
 8023344:	46bd      	mov	sp, r7
 8023346:	bd80      	pop	{r7, pc}

08023348 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8023348:	b580      	push	{r7, lr}
 802334a:	b082      	sub	sp, #8
 802334c:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 802334e:	f002 fe2d 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023352:	f002 fdc9 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8023356:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8023358:	687b      	ldr	r3, [r7, #4]
 802335a:	2200      	movs	r2, #0
 802335c:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8023360:	701a      	strb	r2, [r3, #0]
 8023362:	2200      	movs	r2, #0
 8023364:	705a      	strb	r2, [r3, #1]
 8023366:	2200      	movs	r2, #0
 8023368:	709a      	strb	r2, [r3, #2]
 802336a:	2200      	movs	r2, #0
 802336c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 802336e:	687b      	ldr	r3, [r7, #4]
 8023370:	2200      	movs	r2, #0
 8023372:	711a      	strb	r2, [r3, #4]
 8023374:	2200      	movs	r2, #0
 8023376:	715a      	strb	r2, [r3, #5]
 8023378:	2200      	movs	r2, #0
 802337a:	719a      	strb	r2, [r3, #6]
 802337c:	2200      	movs	r2, #0
 802337e:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8023380:	f002 fdd6 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023384:	f002 fdbc 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023388:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 802338a:	687b      	ldr	r3, [r7, #4]
 802338c:	689b      	ldr	r3, [r3, #8]
}
 802338e:	4618      	mov	r0, r3
 8023390:	3708      	adds	r7, #8
 8023392:	46bd      	mov	sp, r7
 8023394:	bd80      	pop	{r7, pc}

08023396 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8023396:	b580      	push	{r7, lr}
 8023398:	b084      	sub	sp, #16
 802339a:	af00      	add	r7, sp, #0
 802339c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 802339e:	f002 fe05 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80233a2:	f002 fda1 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 80233a6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 80233a8:	68fb      	ldr	r3, [r7, #12]
 80233aa:	2200      	movs	r2, #0
 80233ac:	f062 0269 	orn	r2, r2, #105	; 0x69
 80233b0:	701a      	strb	r2, [r3, #0]
 80233b2:	2200      	movs	r2, #0
 80233b4:	705a      	strb	r2, [r3, #1]
 80233b6:	2200      	movs	r2, #0
 80233b8:	709a      	strb	r2, [r3, #2]
 80233ba:	2200      	movs	r2, #0
 80233bc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80233be:	68fb      	ldr	r3, [r7, #12]
 80233c0:	2200      	movs	r2, #0
 80233c2:	711a      	strb	r2, [r3, #4]
 80233c4:	2200      	movs	r2, #0
 80233c6:	715a      	strb	r2, [r3, #5]
 80233c8:	2200      	movs	r2, #0
 80233ca:	719a      	strb	r2, [r3, #6]
 80233cc:	2200      	movs	r2, #0
 80233ce:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 80233d0:	f002 fdae 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80233d4:	f002 fd94 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 80233d8:	60f8      	str	r0, [r7, #12]
}
 80233da:	bf00      	nop
 80233dc:	3710      	adds	r7, #16
 80233de:	46bd      	mov	sp, r7
 80233e0:	bd80      	pop	{r7, pc}
	...

080233e4 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 80233e4:	b580      	push	{r7, lr}
 80233e6:	b086      	sub	sp, #24
 80233e8:	af00      	add	r7, sp, #0
 80233ea:	60f8      	str	r0, [r7, #12]
 80233ec:	60b9      	str	r1, [r7, #8]
 80233ee:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 80233f0:	f002 fddc 	bl	8025fac <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 80233f4:	4a15      	ldr	r2, [pc, #84]	; (802344c <otSetStateChangedCallback+0x68>)
 80233f6:	68bb      	ldr	r3, [r7, #8]
 80233f8:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80233fa:	f002 fd75 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 80233fe:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8023400:	697b      	ldr	r3, [r7, #20]
 8023402:	2200      	movs	r2, #0
 8023404:	f062 0268 	orn	r2, r2, #104	; 0x68
 8023408:	701a      	strb	r2, [r3, #0]
 802340a:	2200      	movs	r2, #0
 802340c:	705a      	strb	r2, [r3, #1]
 802340e:	2200      	movs	r2, #0
 8023410:	709a      	strb	r2, [r3, #2]
 8023412:	2200      	movs	r2, #0
 8023414:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8023416:	697b      	ldr	r3, [r7, #20]
 8023418:	2200      	movs	r2, #0
 802341a:	f042 0201 	orr.w	r2, r2, #1
 802341e:	711a      	strb	r2, [r3, #4]
 8023420:	2200      	movs	r2, #0
 8023422:	715a      	strb	r2, [r3, #5]
 8023424:	2200      	movs	r2, #0
 8023426:	719a      	strb	r2, [r3, #6]
 8023428:	2200      	movs	r2, #0
 802342a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 802342c:	687a      	ldr	r2, [r7, #4]
 802342e:	697b      	ldr	r3, [r7, #20]
 8023430:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8023432:	f002 fd7d 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023436:	f002 fd63 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 802343a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 802343c:	697b      	ldr	r3, [r7, #20]
 802343e:	689b      	ldr	r3, [r3, #8]
 8023440:	b2db      	uxtb	r3, r3
}
 8023442:	4618      	mov	r0, r3
 8023444:	3718      	adds	r7, #24
 8023446:	46bd      	mov	sp, r7
 8023448:	bd80      	pop	{r7, pc}
 802344a:	bf00      	nop
 802344c:	20027484 	.word	0x20027484

08023450 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8023450:	b580      	push	{r7, lr}
 8023452:	b084      	sub	sp, #16
 8023454:	af00      	add	r7, sp, #0
 8023456:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8023458:	f002 fda8 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 802345c:	f002 fd44 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8023460:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8023462:	68fb      	ldr	r3, [r7, #12]
 8023464:	2200      	movs	r2, #0
 8023466:	f062 0264 	orn	r2, r2, #100	; 0x64
 802346a:	701a      	strb	r2, [r3, #0]
 802346c:	2200      	movs	r2, #0
 802346e:	705a      	strb	r2, [r3, #1]
 8023470:	2200      	movs	r2, #0
 8023472:	709a      	strb	r2, [r3, #2]
 8023474:	2200      	movs	r2, #0
 8023476:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8023478:	68fb      	ldr	r3, [r7, #12]
 802347a:	2200      	movs	r2, #0
 802347c:	711a      	strb	r2, [r3, #4]
 802347e:	2200      	movs	r2, #0
 8023480:	715a      	strb	r2, [r3, #5]
 8023482:	2200      	movs	r2, #0
 8023484:	719a      	strb	r2, [r3, #6]
 8023486:	2200      	movs	r2, #0
 8023488:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 802348a:	f002 fd51 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802348e:	f002 fd37 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023492:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8023494:	68fb      	ldr	r3, [r7, #12]
 8023496:	689b      	ldr	r3, [r3, #8]
 8023498:	b2db      	uxtb	r3, r3
}
 802349a:	4618      	mov	r0, r3
 802349c:	3710      	adds	r7, #16
 802349e:	46bd      	mov	sp, r7
 80234a0:	bd80      	pop	{r7, pc}

080234a2 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 80234a2:	b580      	push	{r7, lr}
 80234a4:	b084      	sub	sp, #16
 80234a6:	af00      	add	r7, sp, #0
 80234a8:	6078      	str	r0, [r7, #4]
 80234aa:	460b      	mov	r3, r1
 80234ac:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80234ae:	f002 fd7d 	bl	8025fac <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80234b2:	f002 fd19 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 80234b6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 80234b8:	68fb      	ldr	r3, [r7, #12]
 80234ba:	2200      	movs	r2, #0
 80234bc:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80234c0:	701a      	strb	r2, [r3, #0]
 80234c2:	2200      	movs	r2, #0
 80234c4:	705a      	strb	r2, [r3, #1]
 80234c6:	2200      	movs	r2, #0
 80234c8:	709a      	strb	r2, [r3, #2]
 80234ca:	2200      	movs	r2, #0
 80234cc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80234ce:	68fb      	ldr	r3, [r7, #12]
 80234d0:	2200      	movs	r2, #0
 80234d2:	f042 0201 	orr.w	r2, r2, #1
 80234d6:	711a      	strb	r2, [r3, #4]
 80234d8:	2200      	movs	r2, #0
 80234da:	715a      	strb	r2, [r3, #5]
 80234dc:	2200      	movs	r2, #0
 80234de:	719a      	strb	r2, [r3, #6]
 80234e0:	2200      	movs	r2, #0
 80234e2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 80234e4:	78fa      	ldrb	r2, [r7, #3]
 80234e6:	68fb      	ldr	r3, [r7, #12]
 80234e8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80234ea:	f002 fd21 	bl	8025f30 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80234ee:	f002 fd07 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 80234f2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80234f4:	68fb      	ldr	r3, [r7, #12]
 80234f6:	689b      	ldr	r3, [r3, #8]
 80234f8:	b2db      	uxtb	r3, r3
}
 80234fa:	4618      	mov	r0, r3
 80234fc:	3710      	adds	r7, #16
 80234fe:	46bd      	mov	sp, r7
 8023500:	bd80      	pop	{r7, pc}

08023502 <otIp6IsAddressEqual>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t *)p_ot_req->Data[0];
}

OTAPI bool OTCALL otIp6IsAddressEqual(const otIp6Address *a, const otIp6Address *b)
{
 8023502:	b580      	push	{r7, lr}
 8023504:	b084      	sub	sp, #16
 8023506:	af00      	add	r7, sp, #0
 8023508:	6078      	str	r0, [r7, #4]
 802350a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 802350c:	f002 fd4e 	bl	8025fac <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023510:	f002 fcea 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8023514:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ADDRESS_EQUAL;
 8023516:	68fb      	ldr	r3, [r7, #12]
 8023518:	2200      	movs	r2, #0
 802351a:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 802351e:	701a      	strb	r2, [r3, #0]
 8023520:	2200      	movs	r2, #0
 8023522:	705a      	strb	r2, [r3, #1]
 8023524:	2200      	movs	r2, #0
 8023526:	709a      	strb	r2, [r3, #2]
 8023528:	2200      	movs	r2, #0
 802352a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 802352c:	68fb      	ldr	r3, [r7, #12]
 802352e:	2200      	movs	r2, #0
 8023530:	f042 0202 	orr.w	r2, r2, #2
 8023534:	711a      	strb	r2, [r3, #4]
 8023536:	2200      	movs	r2, #0
 8023538:	715a      	strb	r2, [r3, #5]
 802353a:	2200      	movs	r2, #0
 802353c:	719a      	strb	r2, [r3, #6]
 802353e:	2200      	movs	r2, #0
 8023540:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)a;
 8023542:	687a      	ldr	r2, [r7, #4]
 8023544:	68fb      	ldr	r3, [r7, #12]
 8023546:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)b;
 8023548:	683a      	ldr	r2, [r7, #0]
 802354a:	68fb      	ldr	r3, [r7, #12]
 802354c:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 802354e:	f002 fcef 	bl	8025f30 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023552:	f002 fcd5 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023556:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 8023558:	68fb      	ldr	r3, [r7, #12]
 802355a:	689b      	ldr	r3, [r3, #8]
 802355c:	2b00      	cmp	r3, #0
 802355e:	bf14      	ite	ne
 8023560:	2301      	movne	r3, #1
 8023562:	2300      	moveq	r3, #0
 8023564:	b2db      	uxtb	r3, r3
}
 8023566:	4618      	mov	r0, r3
 8023568:	3710      	adds	r7, #16
 802356a:	46bd      	mov	sp, r7
 802356c:	bd80      	pop	{r7, pc}

0802356e <otIp6AddressFromString>:

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 802356e:	b580      	push	{r7, lr}
 8023570:	b084      	sub	sp, #16
 8023572:	af00      	add	r7, sp, #0
 8023574:	6078      	str	r0, [r7, #4]
 8023576:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8023578:	f002 fd18 	bl	8025fac <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 802357c:	f002 fcb4 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8023580:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8023582:	68fb      	ldr	r3, [r7, #12]
 8023584:	2200      	movs	r2, #0
 8023586:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 802358a:	701a      	strb	r2, [r3, #0]
 802358c:	2200      	movs	r2, #0
 802358e:	705a      	strb	r2, [r3, #1]
 8023590:	2200      	movs	r2, #0
 8023592:	709a      	strb	r2, [r3, #2]
 8023594:	2200      	movs	r2, #0
 8023596:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8023598:	68fb      	ldr	r3, [r7, #12]
 802359a:	2200      	movs	r2, #0
 802359c:	f042 0202 	orr.w	r2, r2, #2
 80235a0:	711a      	strb	r2, [r3, #4]
 80235a2:	2200      	movs	r2, #0
 80235a4:	715a      	strb	r2, [r3, #5]
 80235a6:	2200      	movs	r2, #0
 80235a8:	719a      	strb	r2, [r3, #6]
 80235aa:	2200      	movs	r2, #0
 80235ac:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 80235ae:	687a      	ldr	r2, [r7, #4]
 80235b0:	68fb      	ldr	r3, [r7, #12]
 80235b2:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 80235b4:	683a      	ldr	r2, [r7, #0]
 80235b6:	68fb      	ldr	r3, [r7, #12]
 80235b8:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80235ba:	f002 fcb9 	bl	8025f30 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80235be:	f002 fc9f 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 80235c2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80235c4:	68fb      	ldr	r3, [r7, #12]
 80235c6:	689b      	ldr	r3, [r3, #8]
 80235c8:	b2db      	uxtb	r3, r3
}
 80235ca:	4618      	mov	r0, r3
 80235cc:	3710      	adds	r7, #16
 80235ce:	46bd      	mov	sp, r7
 80235d0:	bd80      	pop	{r7, pc}

080235d2 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 80235d2:	b580      	push	{r7, lr}
 80235d4:	b084      	sub	sp, #16
 80235d6:	af00      	add	r7, sp, #0
 80235d8:	6078      	str	r0, [r7, #4]
 80235da:	460b      	mov	r3, r1
 80235dc:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80235de:	f002 fce5 	bl	8025fac <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80235e2:	f002 fc81 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 80235e6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 80235e8:	68fb      	ldr	r3, [r7, #12]
 80235ea:	2200      	movs	r2, #0
 80235ec:	f042 0208 	orr.w	r2, r2, #8
 80235f0:	701a      	strb	r2, [r3, #0]
 80235f2:	2200      	movs	r2, #0
 80235f4:	705a      	strb	r2, [r3, #1]
 80235f6:	2200      	movs	r2, #0
 80235f8:	709a      	strb	r2, [r3, #2]
 80235fa:	2200      	movs	r2, #0
 80235fc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80235fe:	68fb      	ldr	r3, [r7, #12]
 8023600:	2200      	movs	r2, #0
 8023602:	f042 0201 	orr.w	r2, r2, #1
 8023606:	711a      	strb	r2, [r3, #4]
 8023608:	2200      	movs	r2, #0
 802360a:	715a      	strb	r2, [r3, #5]
 802360c:	2200      	movs	r2, #0
 802360e:	719a      	strb	r2, [r3, #6]
 8023610:	2200      	movs	r2, #0
 8023612:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8023614:	78fa      	ldrb	r2, [r7, #3]
 8023616:	68fb      	ldr	r3, [r7, #12]
 8023618:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 802361a:	f002 fc89 	bl	8025f30 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802361e:	f002 fc6f 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023622:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8023624:	68fb      	ldr	r3, [r7, #12]
 8023626:	689b      	ldr	r3, [r3, #8]
 8023628:	b2db      	uxtb	r3, r3
}
 802362a:	4618      	mov	r0, r3
 802362c:	3710      	adds	r7, #16
 802362e:	46bd      	mov	sp, r7
 8023630:	bd80      	pop	{r7, pc}

08023632 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8023632:	b580      	push	{r7, lr}
 8023634:	b084      	sub	sp, #16
 8023636:	af00      	add	r7, sp, #0
 8023638:	6078      	str	r0, [r7, #4]
 802363a:	460b      	mov	r3, r1
 802363c:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 802363e:	f002 fcb5 	bl	8025fac <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023642:	f002 fc51 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8023646:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8023648:	68fb      	ldr	r3, [r7, #12]
 802364a:	2200      	movs	r2, #0
 802364c:	f042 020f 	orr.w	r2, r2, #15
 8023650:	701a      	strb	r2, [r3, #0]
 8023652:	2200      	movs	r2, #0
 8023654:	705a      	strb	r2, [r3, #1]
 8023656:	2200      	movs	r2, #0
 8023658:	709a      	strb	r2, [r3, #2]
 802365a:	2200      	movs	r2, #0
 802365c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 802365e:	68fb      	ldr	r3, [r7, #12]
 8023660:	2200      	movs	r2, #0
 8023662:	f042 0201 	orr.w	r2, r2, #1
 8023666:	711a      	strb	r2, [r3, #4]
 8023668:	2200      	movs	r2, #0
 802366a:	715a      	strb	r2, [r3, #5]
 802366c:	2200      	movs	r2, #0
 802366e:	719a      	strb	r2, [r3, #6]
 8023670:	2200      	movs	r2, #0
 8023672:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8023674:	887a      	ldrh	r2, [r7, #2]
 8023676:	68fb      	ldr	r3, [r7, #12]
 8023678:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 802367a:	f002 fc59 	bl	8025f30 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802367e:	f002 fc3f 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023682:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8023684:	68fb      	ldr	r3, [r7, #12]
 8023686:	689b      	ldr	r3, [r3, #8]
 8023688:	b2db      	uxtb	r3, r3
}
 802368a:	4618      	mov	r0, r3
 802368c:	3710      	adds	r7, #16
 802368e:	46bd      	mov	sp, r7
 8023690:	bd80      	pop	{r7, pc}

08023692 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8023692:	b580      	push	{r7, lr}
 8023694:	b084      	sub	sp, #16
 8023696:	af00      	add	r7, sp, #0
 8023698:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 802369a:	f002 fc87 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 802369e:	f002 fc23 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 80236a2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 80236a4:	68fb      	ldr	r3, [r7, #12]
 80236a6:	2200      	movs	r2, #0
 80236a8:	f062 0246 	orn	r2, r2, #70	; 0x46
 80236ac:	701a      	strb	r2, [r3, #0]
 80236ae:	2200      	movs	r2, #0
 80236b0:	705a      	strb	r2, [r3, #1]
 80236b2:	2200      	movs	r2, #0
 80236b4:	709a      	strb	r2, [r3, #2]
 80236b6:	2200      	movs	r2, #0
 80236b8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80236ba:	68fb      	ldr	r3, [r7, #12]
 80236bc:	2200      	movs	r2, #0
 80236be:	f042 0201 	orr.w	r2, r2, #1
 80236c2:	711a      	strb	r2, [r3, #4]
 80236c4:	2200      	movs	r2, #0
 80236c6:	715a      	strb	r2, [r3, #5]
 80236c8:	2200      	movs	r2, #0
 80236ca:	719a      	strb	r2, [r3, #6]
 80236cc:	2200      	movs	r2, #0
 80236ce:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80236d0:	687a      	ldr	r2, [r7, #4]
 80236d2:	68fb      	ldr	r3, [r7, #12]
 80236d4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80236d6:	f002 fc2b 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80236da:	f002 fc11 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 80236de:	60f8      	str	r0, [r7, #12]
}
 80236e0:	bf00      	nop
 80236e2:	3710      	adds	r7, #16
 80236e4:	46bd      	mov	sp, r7
 80236e6:	bd80      	pop	{r7, pc}

080236e8 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 80236e8:	b580      	push	{r7, lr}
 80236ea:	b084      	sub	sp, #16
 80236ec:	af00      	add	r7, sp, #0
 80236ee:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80236f0:	f002 fc5c 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80236f4:	f002 fbf8 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 80236f8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 80236fa:	68fb      	ldr	r3, [r7, #12]
 80236fc:	2200      	movs	r2, #0
 80236fe:	f062 0243 	orn	r2, r2, #67	; 0x43
 8023702:	701a      	strb	r2, [r3, #0]
 8023704:	2200      	movs	r2, #0
 8023706:	705a      	strb	r2, [r3, #1]
 8023708:	2200      	movs	r2, #0
 802370a:	709a      	strb	r2, [r3, #2]
 802370c:	2200      	movs	r2, #0
 802370e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8023710:	68fb      	ldr	r3, [r7, #12]
 8023712:	2200      	movs	r2, #0
 8023714:	f042 0201 	orr.w	r2, r2, #1
 8023718:	711a      	strb	r2, [r3, #4]
 802371a:	2200      	movs	r2, #0
 802371c:	715a      	strb	r2, [r3, #5]
 802371e:	2200      	movs	r2, #0
 8023720:	719a      	strb	r2, [r3, #6]
 8023722:	2200      	movs	r2, #0
 8023724:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8023726:	687a      	ldr	r2, [r7, #4]
 8023728:	68fb      	ldr	r3, [r7, #12]
 802372a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 802372c:	f002 fc00 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023730:	f002 fbe6 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023734:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8023736:	68fb      	ldr	r3, [r7, #12]
 8023738:	689b      	ldr	r3, [r3, #8]
 802373a:	b29b      	uxth	r3, r3
}
 802373c:	4618      	mov	r0, r3
 802373e:	3710      	adds	r7, #16
 8023740:	46bd      	mov	sp, r7
 8023742:	bd80      	pop	{r7, pc}

08023744 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8023744:	b580      	push	{r7, lr}
 8023746:	b086      	sub	sp, #24
 8023748:	af00      	add	r7, sp, #0
 802374a:	60f8      	str	r0, [r7, #12]
 802374c:	60b9      	str	r1, [r7, #8]
 802374e:	4613      	mov	r3, r2
 8023750:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 8023752:	f002 fc2b 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023756:	f002 fbc7 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 802375a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 802375c:	697b      	ldr	r3, [r7, #20]
 802375e:	2200      	movs	r2, #0
 8023760:	f062 023e 	orn	r2, r2, #62	; 0x3e
 8023764:	701a      	strb	r2, [r3, #0]
 8023766:	2200      	movs	r2, #0
 8023768:	705a      	strb	r2, [r3, #1]
 802376a:	2200      	movs	r2, #0
 802376c:	709a      	strb	r2, [r3, #2]
 802376e:	2200      	movs	r2, #0
 8023770:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8023772:	697b      	ldr	r3, [r7, #20]
 8023774:	2200      	movs	r2, #0
 8023776:	f042 0203 	orr.w	r2, r2, #3
 802377a:	711a      	strb	r2, [r3, #4]
 802377c:	2200      	movs	r2, #0
 802377e:	715a      	strb	r2, [r3, #5]
 8023780:	2200      	movs	r2, #0
 8023782:	719a      	strb	r2, [r3, #6]
 8023784:	2200      	movs	r2, #0
 8023786:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8023788:	68fa      	ldr	r2, [r7, #12]
 802378a:	697b      	ldr	r3, [r7, #20]
 802378c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 802378e:	68ba      	ldr	r2, [r7, #8]
 8023790:	697b      	ldr	r3, [r7, #20]
 8023792:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 8023794:	88fa      	ldrh	r2, [r7, #6]
 8023796:	697b      	ldr	r3, [r7, #20]
 8023798:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 802379a:	f002 fbc9 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802379e:	f002 fbaf 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 80237a2:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80237a4:	697b      	ldr	r3, [r7, #20]
 80237a6:	689b      	ldr	r3, [r3, #8]
 80237a8:	b2db      	uxtb	r3, r3
}
 80237aa:	4618      	mov	r0, r3
 80237ac:	3718      	adds	r7, #24
 80237ae:	46bd      	mov	sp, r7
 80237b0:	bd80      	pop	{r7, pc}

080237b2 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 80237b2:	b580      	push	{r7, lr}
 80237b4:	b086      	sub	sp, #24
 80237b6:	af00      	add	r7, sp, #0
 80237b8:	60f8      	str	r0, [r7, #12]
 80237ba:	607a      	str	r2, [r7, #4]
 80237bc:	461a      	mov	r2, r3
 80237be:	460b      	mov	r3, r1
 80237c0:	817b      	strh	r3, [r7, #10]
 80237c2:	4613      	mov	r3, r2
 80237c4:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 80237c6:	f002 fbf1 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80237ca:	f002 fb8d 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 80237ce:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 80237d0:	697b      	ldr	r3, [r7, #20]
 80237d2:	2200      	movs	r2, #0
 80237d4:	f062 023d 	orn	r2, r2, #61	; 0x3d
 80237d8:	701a      	strb	r2, [r3, #0]
 80237da:	2200      	movs	r2, #0
 80237dc:	705a      	strb	r2, [r3, #1]
 80237de:	2200      	movs	r2, #0
 80237e0:	709a      	strb	r2, [r3, #2]
 80237e2:	2200      	movs	r2, #0
 80237e4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 80237e6:	697b      	ldr	r3, [r7, #20]
 80237e8:	2200      	movs	r2, #0
 80237ea:	f042 0204 	orr.w	r2, r2, #4
 80237ee:	711a      	strb	r2, [r3, #4]
 80237f0:	2200      	movs	r2, #0
 80237f2:	715a      	strb	r2, [r3, #5]
 80237f4:	2200      	movs	r2, #0
 80237f6:	719a      	strb	r2, [r3, #6]
 80237f8:	2200      	movs	r2, #0
 80237fa:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80237fc:	68fa      	ldr	r2, [r7, #12]
 80237fe:	697b      	ldr	r3, [r7, #20]
 8023800:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8023802:	897a      	ldrh	r2, [r7, #10]
 8023804:	697b      	ldr	r3, [r7, #20]
 8023806:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 8023808:	687a      	ldr	r2, [r7, #4]
 802380a:	697b      	ldr	r3, [r7, #20]
 802380c:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 802380e:	893a      	ldrh	r2, [r7, #8]
 8023810:	697b      	ldr	r3, [r7, #20]
 8023812:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8023814:	f002 fb8c 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023818:	f002 fb72 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 802381c:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 802381e:	697b      	ldr	r3, [r7, #20]
 8023820:	689b      	ldr	r3, [r3, #8]
}
 8023822:	4618      	mov	r0, r3
 8023824:	3718      	adds	r7, #24
 8023826:	46bd      	mov	sp, r7
 8023828:	bd80      	pop	{r7, pc}
	...

0802382c <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 802382c:	b5b0      	push	{r4, r5, r7, lr}
 802382e:	b084      	sub	sp, #16
 8023830:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8023832:	2300      	movs	r3, #0
 8023834:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8023836:	f002 fb6f 	bl	8025f18 <THREAD_Get_NotificationPayloadBuffer>
 802383a:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 802383c:	683b      	ldr	r3, [r7, #0]
 802383e:	681b      	ldr	r3, [r3, #0]
 8023840:	3b01      	subs	r3, #1
 8023842:	2b14      	cmp	r3, #20
 8023844:	f200 8172 	bhi.w	8023b2c <OpenThread_CallBack_Processing+0x300>
 8023848:	a201      	add	r2, pc, #4	; (adr r2, 8023850 <OpenThread_CallBack_Processing+0x24>)
 802384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802384e:	bf00      	nop
 8023850:	080238a5 	.word	0x080238a5
 8023854:	080238c1 	.word	0x080238c1
 8023858:	080238ed 	.word	0x080238ed
 802385c:	08023921 	.word	0x08023921
 8023860:	0802392d 	.word	0x0802392d
 8023864:	0802394b 	.word	0x0802394b
 8023868:	08023969 	.word	0x08023969
 802386c:	08023987 	.word	0x08023987
 8023870:	080239a5 	.word	0x080239a5
 8023874:	080239c3 	.word	0x080239c3
 8023878:	080239e5 	.word	0x080239e5
 802387c:	08023a03 	.word	0x08023a03
 8023880:	08023b2d 	.word	0x08023b2d
 8023884:	08023a29 	.word	0x08023a29
 8023888:	08023a5d 	.word	0x08023a5d
 802388c:	08023a85 	.word	0x08023a85
 8023890:	08023aa3 	.word	0x08023aa3
 8023894:	08023ac7 	.word	0x08023ac7
 8023898:	08023aef 	.word	0x08023aef
 802389c:	08023b2d 	.word	0x08023b2d
 80238a0:	08023b0d 	.word	0x08023b0d
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 80238a4:	4ba3      	ldr	r3, [pc, #652]	; (8023b34 <OpenThread_CallBack_Processing+0x308>)
 80238a6:	681b      	ldr	r3, [r3, #0]
 80238a8:	2b00      	cmp	r3, #0
 80238aa:	f000 8167 	beq.w	8023b7c <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 80238ae:	4ba1      	ldr	r3, [pc, #644]	; (8023b34 <OpenThread_CallBack_Processing+0x308>)
 80238b0:	681b      	ldr	r3, [r3, #0]
 80238b2:	683a      	ldr	r2, [r7, #0]
 80238b4:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 80238b6:	683a      	ldr	r2, [r7, #0]
 80238b8:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 80238ba:	4611      	mov	r1, r2
 80238bc:	4798      	blx	r3
        }
        break;
 80238be:	e15d      	b.n	8023b7c <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 80238c0:	683b      	ldr	r3, [r7, #0]
 80238c2:	689b      	ldr	r3, [r3, #8]
 80238c4:	461a      	mov	r2, r3
 80238c6:	4b9c      	ldr	r3, [pc, #624]	; (8023b38 <OpenThread_CallBack_Processing+0x30c>)
 80238c8:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 80238ca:	4b9b      	ldr	r3, [pc, #620]	; (8023b38 <OpenThread_CallBack_Processing+0x30c>)
 80238cc:	681b      	ldr	r3, [r3, #0]
 80238ce:	2b00      	cmp	r3, #0
 80238d0:	f000 8156 	beq.w	8023b80 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80238d4:	4b98      	ldr	r3, [pc, #608]	; (8023b38 <OpenThread_CallBack_Processing+0x30c>)
 80238d6:	681b      	ldr	r3, [r3, #0]
 80238d8:	683a      	ldr	r2, [r7, #0]
 80238da:	68d2      	ldr	r2, [r2, #12]
 80238dc:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 80238de:	683a      	ldr	r2, [r7, #0]
 80238e0:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80238e2:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 80238e4:	683a      	ldr	r2, [r7, #0]
 80238e6:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80238e8:	4798      	blx	r3
        }
        break;
 80238ea:	e149      	b.n	8023b80 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 80238ec:	683b      	ldr	r3, [r7, #0]
 80238ee:	689b      	ldr	r3, [r3, #8]
 80238f0:	461a      	mov	r2, r3
 80238f2:	4b92      	ldr	r3, [pc, #584]	; (8023b3c <OpenThread_CallBack_Processing+0x310>)
 80238f4:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 80238f6:	4b91      	ldr	r3, [pc, #580]	; (8023b3c <OpenThread_CallBack_Processing+0x310>)
 80238f8:	681b      	ldr	r3, [r3, #0]
 80238fa:	2b00      	cmp	r3, #0
 80238fc:	f000 8142 	beq.w	8023b84 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8023900:	4b8e      	ldr	r3, [pc, #568]	; (8023b3c <OpenThread_CallBack_Processing+0x310>)
 8023902:	681c      	ldr	r4, [r3, #0]
 8023904:	683b      	ldr	r3, [r7, #0]
 8023906:	68db      	ldr	r3, [r3, #12]
 8023908:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 802390a:	683b      	ldr	r3, [r7, #0]
 802390c:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 802390e:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 8023910:	683b      	ldr	r3, [r7, #0]
 8023912:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8023914:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 8023916:	683b      	ldr	r3, [r7, #0]
 8023918:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 802391a:	b2db      	uxtb	r3, r3
 802391c:	47a0      	blx	r4
        }
        break;
 802391e:	e131      	b.n	8023b84 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 8023920:	2001      	movs	r0, #1
 8023922:	f000 f9b8 	bl	8023c96 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 8023926:	f7f4 fa0a 	bl	8017d3e <HAL_NVIC_SystemReset>
        break;
 802392a:	e14a      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 802392c:	4b84      	ldr	r3, [pc, #528]	; (8023b40 <OpenThread_CallBack_Processing+0x314>)
 802392e:	681b      	ldr	r3, [r3, #0]
 8023930:	2b00      	cmp	r3, #0
 8023932:	f000 8129 	beq.w	8023b88 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8023936:	4b82      	ldr	r3, [pc, #520]	; (8023b40 <OpenThread_CallBack_Processing+0x314>)
 8023938:	681b      	ldr	r3, [r3, #0]
 802393a:	683a      	ldr	r2, [r7, #0]
 802393c:	6892      	ldr	r2, [r2, #8]
 802393e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8023940:	683a      	ldr	r2, [r7, #0]
 8023942:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8023944:	4611      	mov	r1, r2
 8023946:	4798      	blx	r3
        }
        break;
 8023948:	e11e      	b.n	8023b88 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 802394a:	4b7e      	ldr	r3, [pc, #504]	; (8023b44 <OpenThread_CallBack_Processing+0x318>)
 802394c:	681b      	ldr	r3, [r3, #0]
 802394e:	2b00      	cmp	r3, #0
 8023950:	f000 811c 	beq.w	8023b8c <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8023954:	4b7b      	ldr	r3, [pc, #492]	; (8023b44 <OpenThread_CallBack_Processing+0x318>)
 8023956:	681b      	ldr	r3, [r3, #0]
 8023958:	683a      	ldr	r2, [r7, #0]
 802395a:	6892      	ldr	r2, [r2, #8]
 802395c:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 802395e:	683a      	ldr	r2, [r7, #0]
 8023960:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8023962:	2000      	movs	r0, #0
 8023964:	4798      	blx	r3
        }
        break;
 8023966:	e111      	b.n	8023b8c <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 8023968:	4b77      	ldr	r3, [pc, #476]	; (8023b48 <OpenThread_CallBack_Processing+0x31c>)
 802396a:	681b      	ldr	r3, [r3, #0]
 802396c:	2b00      	cmp	r3, #0
 802396e:	f000 810f 	beq.w	8023b90 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8023972:	4b75      	ldr	r3, [pc, #468]	; (8023b48 <OpenThread_CallBack_Processing+0x31c>)
 8023974:	681b      	ldr	r3, [r3, #0]
 8023976:	683a      	ldr	r2, [r7, #0]
 8023978:	6892      	ldr	r2, [r2, #8]
 802397a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 802397c:	683a      	ldr	r2, [r7, #0]
 802397e:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8023980:	4611      	mov	r1, r2
 8023982:	4798      	blx	r3
        }
        break;
 8023984:	e104      	b.n	8023b90 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 8023986:	4b71      	ldr	r3, [pc, #452]	; (8023b4c <OpenThread_CallBack_Processing+0x320>)
 8023988:	681b      	ldr	r3, [r3, #0]
 802398a:	2b00      	cmp	r3, #0
 802398c:	f000 8102 	beq.w	8023b94 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8023990:	4b6e      	ldr	r3, [pc, #440]	; (8023b4c <OpenThread_CallBack_Processing+0x320>)
 8023992:	681b      	ldr	r3, [r3, #0]
 8023994:	683a      	ldr	r2, [r7, #0]
 8023996:	6892      	ldr	r2, [r2, #8]
 8023998:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 802399a:	683a      	ldr	r2, [r7, #0]
 802399c:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 802399e:	4611      	mov	r1, r2
 80239a0:	4798      	blx	r3
        }
        break;
 80239a2:	e0f7      	b.n	8023b94 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 80239a4:	4b6a      	ldr	r3, [pc, #424]	; (8023b50 <OpenThread_CallBack_Processing+0x324>)
 80239a6:	681b      	ldr	r3, [r3, #0]
 80239a8:	2b00      	cmp	r3, #0
 80239aa:	f000 80f5 	beq.w	8023b98 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80239ae:	4b68      	ldr	r3, [pc, #416]	; (8023b50 <OpenThread_CallBack_Processing+0x324>)
 80239b0:	681b      	ldr	r3, [r3, #0]
 80239b2:	683a      	ldr	r2, [r7, #0]
 80239b4:	6892      	ldr	r2, [r2, #8]
 80239b6:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80239b8:	683a      	ldr	r2, [r7, #0]
 80239ba:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80239bc:	4611      	mov	r1, r2
 80239be:	4798      	blx	r3
        }
        break;
 80239c0:	e0ea      	b.n	8023b98 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 80239c2:	4b64      	ldr	r3, [pc, #400]	; (8023b54 <OpenThread_CallBack_Processing+0x328>)
 80239c4:	681b      	ldr	r3, [r3, #0]
 80239c6:	2b00      	cmp	r3, #0
 80239c8:	f000 80e8 	beq.w	8023b9c <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 80239cc:	4b61      	ldr	r3, [pc, #388]	; (8023b54 <OpenThread_CallBack_Processing+0x328>)
 80239ce:	681b      	ldr	r3, [r3, #0]
 80239d0:	683a      	ldr	r2, [r7, #0]
 80239d2:	6892      	ldr	r2, [r2, #8]
 80239d4:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 80239d6:	683a      	ldr	r2, [r7, #0]
 80239d8:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 80239da:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 80239dc:	683a      	ldr	r2, [r7, #0]
 80239de:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 80239e0:	4798      	blx	r3
        }
        break;
 80239e2:	e0db      	b.n	8023b9c <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 80239e4:	4b5c      	ldr	r3, [pc, #368]	; (8023b58 <OpenThread_CallBack_Processing+0x32c>)
 80239e6:	681b      	ldr	r3, [r3, #0]
 80239e8:	2b00      	cmp	r3, #0
 80239ea:	f000 80d9 	beq.w	8023ba0 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 80239ee:	4b5a      	ldr	r3, [pc, #360]	; (8023b58 <OpenThread_CallBack_Processing+0x32c>)
 80239f0:	681b      	ldr	r3, [r3, #0]
 80239f2:	683a      	ldr	r2, [r7, #0]
 80239f4:	6892      	ldr	r2, [r2, #8]
 80239f6:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 80239f8:	683a      	ldr	r2, [r7, #0]
 80239fa:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 80239fc:	4611      	mov	r1, r2
 80239fe:	4798      	blx	r3
        }
        break;
 8023a00:	e0ce      	b.n	8023ba0 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 8023a02:	4b56      	ldr	r3, [pc, #344]	; (8023b5c <OpenThread_CallBack_Processing+0x330>)
 8023a04:	681b      	ldr	r3, [r3, #0]
 8023a06:	2b00      	cmp	r3, #0
 8023a08:	f000 80cc 	beq.w	8023ba4 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8023a0c:	4b53      	ldr	r3, [pc, #332]	; (8023b5c <OpenThread_CallBack_Processing+0x330>)
 8023a0e:	681c      	ldr	r4, [r3, #0]
 8023a10:	683b      	ldr	r3, [r7, #0]
 8023a12:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 8023a14:	683b      	ldr	r3, [r7, #0]
 8023a16:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8023a18:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 8023a1a:	683b      	ldr	r3, [r7, #0]
 8023a1c:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8023a1e:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 8023a20:	683b      	ldr	r3, [r7, #0]
 8023a22:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8023a24:	47a0      	blx	r4
        }
        break;
 8023a26:	e0bd      	b.n	8023ba4 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 8023a28:	4b4d      	ldr	r3, [pc, #308]	; (8023b60 <OpenThread_CallBack_Processing+0x334>)
 8023a2a:	681b      	ldr	r3, [r3, #0]
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	f000 80bb 	beq.w	8023ba8 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8023a32:	4b4b      	ldr	r3, [pc, #300]	; (8023b60 <OpenThread_CallBack_Processing+0x334>)
 8023a34:	681c      	ldr	r4, [r3, #0]
 8023a36:	683b      	ldr	r3, [r7, #0]
 8023a38:	689b      	ldr	r3, [r3, #8]
 8023a3a:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 8023a3c:	683b      	ldr	r3, [r7, #0]
 8023a3e:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8023a40:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 8023a42:	683b      	ldr	r3, [r7, #0]
 8023a44:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8023a46:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 8023a48:	683b      	ldr	r3, [r7, #0]
 8023a4a:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 8023a4c:	683b      	ldr	r3, [r7, #0]
 8023a4e:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8023a50:	b2db      	uxtb	r3, r3
 8023a52:	9300      	str	r3, [sp, #0]
 8023a54:	4613      	mov	r3, r2
 8023a56:	462a      	mov	r2, r5
 8023a58:	47a0      	blx	r4
        }
        break;
 8023a5a:	e0a5      	b.n	8023ba8 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 8023a5c:	4b41      	ldr	r3, [pc, #260]	; (8023b64 <OpenThread_CallBack_Processing+0x338>)
 8023a5e:	681b      	ldr	r3, [r3, #0]
 8023a60:	2b00      	cmp	r3, #0
 8023a62:	f000 80a3 	beq.w	8023bac <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8023a66:	4b3f      	ldr	r3, [pc, #252]	; (8023b64 <OpenThread_CallBack_Processing+0x338>)
 8023a68:	681c      	ldr	r4, [r3, #0]
 8023a6a:	683b      	ldr	r3, [r7, #0]
 8023a6c:	689b      	ldr	r3, [r3, #8]
 8023a6e:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 8023a70:	683b      	ldr	r3, [r7, #0]
 8023a72:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8023a74:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 8023a76:	683b      	ldr	r3, [r7, #0]
 8023a78:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8023a7a:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 8023a7c:	683b      	ldr	r3, [r7, #0]
 8023a7e:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8023a80:	47a0      	blx	r4
        }
        break;
 8023a82:	e093      	b.n	8023bac <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 8023a84:	4b38      	ldr	r3, [pc, #224]	; (8023b68 <OpenThread_CallBack_Processing+0x33c>)
 8023a86:	681b      	ldr	r3, [r3, #0]
 8023a88:	2b00      	cmp	r3, #0
 8023a8a:	f000 8091 	beq.w	8023bb0 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 8023a8e:	4b36      	ldr	r3, [pc, #216]	; (8023b68 <OpenThread_CallBack_Processing+0x33c>)
 8023a90:	681b      	ldr	r3, [r3, #0]
 8023a92:	683a      	ldr	r2, [r7, #0]
 8023a94:	6892      	ldr	r2, [r2, #8]
 8023a96:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8023a98:	683a      	ldr	r2, [r7, #0]
 8023a9a:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 8023a9c:	4611      	mov	r1, r2
 8023a9e:	4798      	blx	r3
        }
        break;
 8023aa0:	e086      	b.n	8023bb0 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8023aa2:	4b32      	ldr	r3, [pc, #200]	; (8023b6c <OpenThread_CallBack_Processing+0x340>)
 8023aa4:	681b      	ldr	r3, [r3, #0]
 8023aa6:	2b00      	cmp	r3, #0
 8023aa8:	f000 8084 	beq.w	8023bb4 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8023aac:	4b2f      	ldr	r3, [pc, #188]	; (8023b6c <OpenThread_CallBack_Processing+0x340>)
 8023aae:	681b      	ldr	r3, [r3, #0]
 8023ab0:	683a      	ldr	r2, [r7, #0]
 8023ab2:	6892      	ldr	r2, [r2, #8]
 8023ab4:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8023ab6:	683a      	ldr	r2, [r7, #0]
 8023ab8:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8023aba:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 8023abc:	683a      	ldr	r2, [r7, #0]
 8023abe:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8023ac0:	b2d2      	uxtb	r2, r2
 8023ac2:	4798      	blx	r3
        }
        break;
 8023ac4:	e076      	b.n	8023bb4 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8023ac6:	4b2a      	ldr	r3, [pc, #168]	; (8023b70 <OpenThread_CallBack_Processing+0x344>)
 8023ac8:	681b      	ldr	r3, [r3, #0]
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	d074      	beq.n	8023bb8 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8023ace:	4b28      	ldr	r3, [pc, #160]	; (8023b70 <OpenThread_CallBack_Processing+0x344>)
 8023ad0:	681c      	ldr	r4, [r3, #0]
 8023ad2:	683b      	ldr	r3, [r7, #0]
 8023ad4:	689b      	ldr	r3, [r3, #8]
 8023ad6:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8023ad8:	683b      	ldr	r3, [r7, #0]
 8023ada:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8023adc:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 8023ade:	683b      	ldr	r3, [r7, #0]
 8023ae0:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8023ae2:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8023ae4:	683b      	ldr	r3, [r7, #0]
 8023ae6:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8023ae8:	b2db      	uxtb	r3, r3
 8023aea:	47a0      	blx	r4
        }
        break;
 8023aec:	e064      	b.n	8023bb8 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 8023aee:	4b21      	ldr	r3, [pc, #132]	; (8023b74 <OpenThread_CallBack_Processing+0x348>)
 8023af0:	681b      	ldr	r3, [r3, #0]
 8023af2:	2b00      	cmp	r3, #0
 8023af4:	d062      	beq.n	8023bbc <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8023af6:	4b1f      	ldr	r3, [pc, #124]	; (8023b74 <OpenThread_CallBack_Processing+0x348>)
 8023af8:	681b      	ldr	r3, [r3, #0]
 8023afa:	683a      	ldr	r2, [r7, #0]
 8023afc:	6892      	ldr	r2, [r2, #8]
 8023afe:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8023b00:	683a      	ldr	r2, [r7, #0]
 8023b02:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8023b04:	b252      	sxtb	r2, r2
 8023b06:	4611      	mov	r1, r2
 8023b08:	4798      	blx	r3
        }
        break;
 8023b0a:	e057      	b.n	8023bbc <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 8023b0c:	4b1a      	ldr	r3, [pc, #104]	; (8023b78 <OpenThread_CallBack_Processing+0x34c>)
 8023b0e:	681b      	ldr	r3, [r3, #0]
 8023b10:	2b00      	cmp	r3, #0
 8023b12:	d055      	beq.n	8023bc0 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 8023b14:	4b18      	ldr	r3, [pc, #96]	; (8023b78 <OpenThread_CallBack_Processing+0x34c>)
 8023b16:	681b      	ldr	r3, [r3, #0]
 8023b18:	683a      	ldr	r2, [r7, #0]
 8023b1a:	6892      	ldr	r2, [r2, #8]
 8023b1c:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 8023b1e:	683a      	ldr	r2, [r7, #0]
 8023b20:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8023b22:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 8023b24:	683a      	ldr	r2, [r7, #0]
 8023b26:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8023b28:	4798      	blx	r3
        }
        break;
 8023b2a:	e049      	b.n	8023bc0 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 8023b2c:	2301      	movs	r3, #1
 8023b2e:	71fb      	strb	r3, [r7, #7]
        break;
 8023b30:	e047      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
 8023b32:	bf00      	nop
 8023b34:	20027484 	.word	0x20027484
 8023b38:	200274c4 	.word	0x200274c4
 8023b3c:	200274c8 	.word	0x200274c8
 8023b40:	2002748c 	.word	0x2002748c
 8023b44:	20027488 	.word	0x20027488
 8023b48:	20027490 	.word	0x20027490
 8023b4c:	20027494 	.word	0x20027494
 8023b50:	20027498 	.word	0x20027498
 8023b54:	2002749c 	.word	0x2002749c
 8023b58:	200274a0 	.word	0x200274a0
 8023b5c:	200274a4 	.word	0x200274a4
 8023b60:	200274a8 	.word	0x200274a8
 8023b64:	200274ac 	.word	0x200274ac
 8023b68:	200274b0 	.word	0x200274b0
 8023b6c:	200274b4 	.word	0x200274b4
 8023b70:	200274b8 	.word	0x200274b8
 8023b74:	200274bc 	.word	0x200274bc
 8023b78:	200274c0 	.word	0x200274c0
        break;
 8023b7c:	bf00      	nop
 8023b7e:	e020      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023b80:	bf00      	nop
 8023b82:	e01e      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023b84:	bf00      	nop
 8023b86:	e01c      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023b88:	bf00      	nop
 8023b8a:	e01a      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023b8c:	bf00      	nop
 8023b8e:	e018      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023b90:	bf00      	nop
 8023b92:	e016      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023b94:	bf00      	nop
 8023b96:	e014      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023b98:	bf00      	nop
 8023b9a:	e012      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023b9c:	bf00      	nop
 8023b9e:	e010      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023ba0:	bf00      	nop
 8023ba2:	e00e      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023ba4:	bf00      	nop
 8023ba6:	e00c      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023ba8:	bf00      	nop
 8023baa:	e00a      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023bac:	bf00      	nop
 8023bae:	e008      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023bb0:	bf00      	nop
 8023bb2:	e006      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023bb4:	bf00      	nop
 8023bb6:	e004      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023bb8:	bf00      	nop
 8023bba:	e002      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023bbc:	bf00      	nop
 8023bbe:	e000      	b.n	8023bc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8023bc0:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8023bc2:	f000 fd05 	bl	80245d0 <TL_THREAD_SendAck>
    return status;
 8023bc6:	79fb      	ldrb	r3, [r7, #7]

}
 8023bc8:	4618      	mov	r0, r3
 8023bca:	3708      	adds	r7, #8
 8023bcc:	46bd      	mov	sp, r7
 8023bce:	bdb0      	pop	{r4, r5, r7, pc}

08023bd0 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8023bd0:	b580      	push	{r7, lr}
 8023bd2:	b084      	sub	sp, #16
 8023bd4:	af00      	add	r7, sp, #0
 8023bd6:	6078      	str	r0, [r7, #4]
 8023bd8:	460b      	mov	r3, r1
 8023bda:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8023bdc:	f002 f9e6 	bl	8025fac <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023be0:	f002 f982 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8023be4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 8023be6:	68fb      	ldr	r3, [r7, #12]
 8023be8:	2200      	movs	r2, #0
 8023bea:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8023bee:	701a      	strb	r2, [r3, #0]
 8023bf0:	2200      	movs	r2, #0
 8023bf2:	f042 0201 	orr.w	r2, r2, #1
 8023bf6:	705a      	strb	r2, [r3, #1]
 8023bf8:	2200      	movs	r2, #0
 8023bfa:	709a      	strb	r2, [r3, #2]
 8023bfc:	2200      	movs	r2, #0
 8023bfe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8023c00:	68fb      	ldr	r3, [r7, #12]
 8023c02:	2200      	movs	r2, #0
 8023c04:	f042 0201 	orr.w	r2, r2, #1
 8023c08:	711a      	strb	r2, [r3, #4]
 8023c0a:	2200      	movs	r2, #0
 8023c0c:	715a      	strb	r2, [r3, #5]
 8023c0e:	2200      	movs	r2, #0
 8023c10:	719a      	strb	r2, [r3, #6]
 8023c12:	2200      	movs	r2, #0
 8023c14:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 8023c16:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8023c1a:	68fb      	ldr	r3, [r7, #12]
 8023c1c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8023c1e:	f002 f987 	bl	8025f30 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023c22:	f002 f96d 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023c26:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8023c28:	68fb      	ldr	r3, [r7, #12]
 8023c2a:	689b      	ldr	r3, [r3, #8]
 8023c2c:	b2db      	uxtb	r3, r3
}
 8023c2e:	4618      	mov	r0, r3
 8023c30:	3710      	adds	r7, #16
 8023c32:	46bd      	mov	sp, r7
 8023c34:	bd80      	pop	{r7, pc}

08023c36 <SHCI_C2_FUS_GetState>:
/**
 *  C2 COMMAND
 *  These commands are sent to the CPU2
 */
uint8_t SHCI_C2_FUS_GetState( SHCI_FUS_GetState_ErrorCode_t *p_error_code )
{
 8023c36:	b580      	push	{r7, lr}
 8023c38:	b088      	sub	sp, #32
 8023c3a:	af00      	add	r7, sp, #0
 8023c3c:	6078      	str	r0, [r7, #4]
   * A command status event + payload has the same size than the expected command complete
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE + 1];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8023c3e:	f107 030c 	add.w	r3, r7, #12
 8023c42:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_FUS_GET_STATE,
 8023c44:	69fb      	ldr	r3, [r7, #28]
 8023c46:	2200      	movs	r2, #0
 8023c48:	2100      	movs	r1, #0
 8023c4a:	f64f 4052 	movw	r0, #64594	; 0xfc52
 8023c4e:	f000 f92f 	bl	8023eb0 <shci_send>
             0,
             0,
             p_rsp );

  if(p_error_code != 0)
 8023c52:	687b      	ldr	r3, [r7, #4]
 8023c54:	2b00      	cmp	r3, #0
 8023c56:	d004      	beq.n	8023c62 <SHCI_C2_FUS_GetState+0x2c>
  {
    *p_error_code = (SHCI_FUS_GetState_ErrorCode_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[1]);
 8023c58:	69fb      	ldr	r3, [r7, #28]
 8023c5a:	330b      	adds	r3, #11
 8023c5c:	791a      	ldrb	r2, [r3, #4]
 8023c5e:	687b      	ldr	r3, [r7, #4]
 8023c60:	701a      	strb	r2, [r3, #0]
  }

  return (((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8023c62:	69fb      	ldr	r3, [r7, #28]
 8023c64:	330b      	adds	r3, #11
 8023c66:	78db      	ldrb	r3, [r3, #3]
}
 8023c68:	4618      	mov	r0, r3
 8023c6a:	3720      	adds	r7, #32
 8023c6c:	46bd      	mov	sp, r7
 8023c6e:	bd80      	pop	{r7, pc}

08023c70 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8023c70:	b580      	push	{r7, lr}
 8023c72:	b086      	sub	sp, #24
 8023c74:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8023c76:	1d3b      	adds	r3, r7, #4
 8023c78:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8023c7a:	697b      	ldr	r3, [r7, #20]
 8023c7c:	2200      	movs	r2, #0
 8023c7e:	2100      	movs	r1, #0
 8023c80:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8023c84:	f000 f914 	bl	8023eb0 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8023c88:	697b      	ldr	r3, [r7, #20]
 8023c8a:	330b      	adds	r3, #11
 8023c8c:	78db      	ldrb	r3, [r3, #3]
}
 8023c8e:	4618      	mov	r0, r3
 8023c90:	3718      	adds	r7, #24
 8023c92:	46bd      	mov	sp, r7
 8023c94:	bd80      	pop	{r7, pc}

08023c96 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8023c96:	b580      	push	{r7, lr}
 8023c98:	b088      	sub	sp, #32
 8023c9a:	af00      	add	r7, sp, #0
 8023c9c:	4603      	mov	r3, r0
 8023c9e:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8023ca0:	f107 030c 	add.w	r3, r7, #12
 8023ca4:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8023ca6:	79fb      	ldrb	r3, [r7, #7]
 8023ca8:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8023caa:	f107 020c 	add.w	r2, r7, #12
 8023cae:	69fb      	ldr	r3, [r7, #28]
 8023cb0:	2101      	movs	r1, #1
 8023cb2:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8023cb6:	f000 f8fb 	bl	8023eb0 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8023cba:	69fb      	ldr	r3, [r7, #28]
 8023cbc:	330b      	adds	r3, #11
 8023cbe:	78db      	ldrb	r3, [r3, #3]
}
 8023cc0:	4618      	mov	r0, r3
 8023cc2:	3720      	adds	r7, #32
 8023cc4:	46bd      	mov	sp, r7
 8023cc6:	bd80      	pop	{r7, pc}

08023cc8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8023cc8:	b480      	push	{r7}
 8023cca:	b089      	sub	sp, #36	; 0x24
 8023ccc:	af00      	add	r7, sp, #0
 8023cce:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8023cd0:	2300      	movs	r3, #0
 8023cd2:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 8023cd4:	2300      	movs	r3, #0
 8023cd6:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 8023cd8:	2300      	movs	r3, #0
 8023cda:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 8023cdc:	2300      	movs	r3, #0
 8023cde:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 8023ce0:	2300      	movs	r3, #0
 8023ce2:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8023ce4:	4b3c      	ldr	r3, [pc, #240]	; (8023dd8 <SHCI_GetWirelessFwInfo+0x110>)
 8023ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023ce8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8023cec:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8023cee:	69fb      	ldr	r3, [r7, #28]
 8023cf0:	009b      	lsls	r3, r3, #2
 8023cf2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8023cf6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8023cfa:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8023cfc:	69bb      	ldr	r3, [r7, #24]
 8023cfe:	681b      	ldr	r3, [r3, #0]
 8023d00:	691b      	ldr	r3, [r3, #16]
 8023d02:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8023d04:	697b      	ldr	r3, [r7, #20]
 8023d06:	0e1b      	lsrs	r3, r3, #24
 8023d08:	b2da      	uxtb	r2, r3
 8023d0a:	687b      	ldr	r3, [r7, #4]
 8023d0c:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8023d0e:	697b      	ldr	r3, [r7, #20]
 8023d10:	0c1b      	lsrs	r3, r3, #16
 8023d12:	b2da      	uxtb	r2, r3
 8023d14:	687b      	ldr	r3, [r7, #4]
 8023d16:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8023d18:	697b      	ldr	r3, [r7, #20]
 8023d1a:	0a1b      	lsrs	r3, r3, #8
 8023d1c:	b2da      	uxtb	r2, r3
 8023d1e:	687b      	ldr	r3, [r7, #4]
 8023d20:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8023d22:	697b      	ldr	r3, [r7, #20]
 8023d24:	091b      	lsrs	r3, r3, #4
 8023d26:	b2db      	uxtb	r3, r3
 8023d28:	f003 030f 	and.w	r3, r3, #15
 8023d2c:	b2da      	uxtb	r2, r3
 8023d2e:	687b      	ldr	r3, [r7, #4]
 8023d30:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8023d32:	697b      	ldr	r3, [r7, #20]
 8023d34:	b2db      	uxtb	r3, r3
 8023d36:	f003 030f 	and.w	r3, r3, #15
 8023d3a:	b2da      	uxtb	r2, r3
 8023d3c:	687b      	ldr	r3, [r7, #4]
 8023d3e:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8023d40:	69bb      	ldr	r3, [r7, #24]
 8023d42:	681b      	ldr	r3, [r3, #0]
 8023d44:	695b      	ldr	r3, [r3, #20]
 8023d46:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8023d48:	693b      	ldr	r3, [r7, #16]
 8023d4a:	0e1b      	lsrs	r3, r3, #24
 8023d4c:	b2da      	uxtb	r2, r3
 8023d4e:	687b      	ldr	r3, [r7, #4]
 8023d50:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8023d52:	693b      	ldr	r3, [r7, #16]
 8023d54:	0c1b      	lsrs	r3, r3, #16
 8023d56:	b2da      	uxtb	r2, r3
 8023d58:	687b      	ldr	r3, [r7, #4]
 8023d5a:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8023d5c:	693b      	ldr	r3, [r7, #16]
 8023d5e:	0a1b      	lsrs	r3, r3, #8
 8023d60:	b2da      	uxtb	r2, r3
 8023d62:	687b      	ldr	r3, [r7, #4]
 8023d64:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8023d66:	693b      	ldr	r3, [r7, #16]
 8023d68:	b2da      	uxtb	r2, r3
 8023d6a:	687b      	ldr	r3, [r7, #4]
 8023d6c:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8023d6e:	69bb      	ldr	r3, [r7, #24]
 8023d70:	681b      	ldr	r3, [r3, #0]
 8023d72:	699b      	ldr	r3, [r3, #24]
 8023d74:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8023d76:	68fb      	ldr	r3, [r7, #12]
 8023d78:	b2da      	uxtb	r2, r3
 8023d7a:	687b      	ldr	r3, [r7, #4]
 8023d7c:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8023d7e:	69bb      	ldr	r3, [r7, #24]
 8023d80:	681b      	ldr	r3, [r3, #0]
 8023d82:	685b      	ldr	r3, [r3, #4]
 8023d84:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8023d86:	697b      	ldr	r3, [r7, #20]
 8023d88:	0e1b      	lsrs	r3, r3, #24
 8023d8a:	b2da      	uxtb	r2, r3
 8023d8c:	687b      	ldr	r3, [r7, #4]
 8023d8e:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8023d90:	697b      	ldr	r3, [r7, #20]
 8023d92:	0c1b      	lsrs	r3, r3, #16
 8023d94:	b2da      	uxtb	r2, r3
 8023d96:	687b      	ldr	r3, [r7, #4]
 8023d98:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8023d9a:	697b      	ldr	r3, [r7, #20]
 8023d9c:	0a1b      	lsrs	r3, r3, #8
 8023d9e:	b2da      	uxtb	r2, r3
 8023da0:	687b      	ldr	r3, [r7, #4]
 8023da2:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8023da4:	69bb      	ldr	r3, [r7, #24]
 8023da6:	681b      	ldr	r3, [r3, #0]
 8023da8:	689b      	ldr	r3, [r3, #8]
 8023daa:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8023dac:	693b      	ldr	r3, [r7, #16]
 8023dae:	0e1b      	lsrs	r3, r3, #24
 8023db0:	b2da      	uxtb	r2, r3
 8023db2:	687b      	ldr	r3, [r7, #4]
 8023db4:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8023db6:	693b      	ldr	r3, [r7, #16]
 8023db8:	0c1b      	lsrs	r3, r3, #16
 8023dba:	b2da      	uxtb	r2, r3
 8023dbc:	687b      	ldr	r3, [r7, #4]
 8023dbe:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8023dc0:	693b      	ldr	r3, [r7, #16]
 8023dc2:	b2da      	uxtb	r2, r3
 8023dc4:	687b      	ldr	r3, [r7, #4]
 8023dc6:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8023dc8:	2300      	movs	r3, #0
}
 8023dca:	4618      	mov	r0, r3
 8023dcc:	3724      	adds	r7, #36	; 0x24
 8023dce:	46bd      	mov	sp, r7
 8023dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dd4:	4770      	bx	lr
 8023dd6:	bf00      	nop
 8023dd8:	58004000 	.word	0x58004000

08023ddc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8023ddc:	b580      	push	{r7, lr}
 8023dde:	b082      	sub	sp, #8
 8023de0:	af00      	add	r7, sp, #0
 8023de2:	6078      	str	r0, [r7, #4]
 8023de4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8023de6:	683b      	ldr	r3, [r7, #0]
 8023de8:	685b      	ldr	r3, [r3, #4]
 8023dea:	4a08      	ldr	r2, [pc, #32]	; (8023e0c <shci_init+0x30>)
 8023dec:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8023dee:	4a08      	ldr	r2, [pc, #32]	; (8023e10 <shci_init+0x34>)
 8023df0:	687b      	ldr	r3, [r7, #4]
 8023df2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8023df4:	4806      	ldr	r0, [pc, #24]	; (8023e10 <shci_init+0x34>)
 8023df6:	f000 f911 	bl	802401c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8023dfa:	683b      	ldr	r3, [r7, #0]
 8023dfc:	681b      	ldr	r3, [r3, #0]
 8023dfe:	4618      	mov	r0, r3
 8023e00:	f000 f894 	bl	8023f2c <TlInit>

  return;
 8023e04:	bf00      	nop
}
 8023e06:	3708      	adds	r7, #8
 8023e08:	46bd      	mov	sp, r7
 8023e0a:	bd80      	pop	{r7, pc}
 8023e0c:	200274ec 	.word	0x200274ec
 8023e10:	200274cc 	.word	0x200274cc

08023e14 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8023e14:	b580      	push	{r7, lr}
 8023e16:	b084      	sub	sp, #16
 8023e18:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8023e1a:	4822      	ldr	r0, [pc, #136]	; (8023ea4 <shci_user_evt_proc+0x90>)
 8023e1c:	f000 f922 	bl	8024064 <LST_is_empty>
 8023e20:	4603      	mov	r3, r0
 8023e22:	2b00      	cmp	r3, #0
 8023e24:	d12b      	bne.n	8023e7e <shci_user_evt_proc+0x6a>
 8023e26:	4b20      	ldr	r3, [pc, #128]	; (8023ea8 <shci_user_evt_proc+0x94>)
 8023e28:	781b      	ldrb	r3, [r3, #0]
 8023e2a:	2b00      	cmp	r3, #0
 8023e2c:	d027      	beq.n	8023e7e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8023e2e:	f107 030c 	add.w	r3, r7, #12
 8023e32:	4619      	mov	r1, r3
 8023e34:	481b      	ldr	r0, [pc, #108]	; (8023ea4 <shci_user_evt_proc+0x90>)
 8023e36:	f000 f99c 	bl	8024172 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8023e3a:	4b1c      	ldr	r3, [pc, #112]	; (8023eac <shci_user_evt_proc+0x98>)
 8023e3c:	69db      	ldr	r3, [r3, #28]
 8023e3e:	2b00      	cmp	r3, #0
 8023e40:	d00c      	beq.n	8023e5c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8023e42:	68fb      	ldr	r3, [r7, #12]
 8023e44:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8023e46:	2301      	movs	r3, #1
 8023e48:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8023e4a:	4b18      	ldr	r3, [pc, #96]	; (8023eac <shci_user_evt_proc+0x98>)
 8023e4c:	69db      	ldr	r3, [r3, #28]
 8023e4e:	1d3a      	adds	r2, r7, #4
 8023e50:	4610      	mov	r0, r2
 8023e52:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8023e54:	793a      	ldrb	r2, [r7, #4]
 8023e56:	4b14      	ldr	r3, [pc, #80]	; (8023ea8 <shci_user_evt_proc+0x94>)
 8023e58:	701a      	strb	r2, [r3, #0]
 8023e5a:	e002      	b.n	8023e62 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8023e5c:	4b12      	ldr	r3, [pc, #72]	; (8023ea8 <shci_user_evt_proc+0x94>)
 8023e5e:	2201      	movs	r2, #1
 8023e60:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8023e62:	4b11      	ldr	r3, [pc, #68]	; (8023ea8 <shci_user_evt_proc+0x94>)
 8023e64:	781b      	ldrb	r3, [r3, #0]
 8023e66:	2b00      	cmp	r3, #0
 8023e68:	d004      	beq.n	8023e74 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8023e6a:	68fb      	ldr	r3, [r7, #12]
 8023e6c:	4618      	mov	r0, r3
 8023e6e:	f000 fc2b 	bl	80246c8 <TL_MM_EvtDone>
 8023e72:	e004      	b.n	8023e7e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8023e74:	68fb      	ldr	r3, [r7, #12]
 8023e76:	4619      	mov	r1, r3
 8023e78:	480a      	ldr	r0, [pc, #40]	; (8023ea4 <shci_user_evt_proc+0x90>)
 8023e7a:	f000 f913 	bl	80240a4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8023e7e:	4809      	ldr	r0, [pc, #36]	; (8023ea4 <shci_user_evt_proc+0x90>)
 8023e80:	f000 f8f0 	bl	8024064 <LST_is_empty>
 8023e84:	4603      	mov	r3, r0
 8023e86:	2b00      	cmp	r3, #0
 8023e88:	d107      	bne.n	8023e9a <shci_user_evt_proc+0x86>
 8023e8a:	4b07      	ldr	r3, [pc, #28]	; (8023ea8 <shci_user_evt_proc+0x94>)
 8023e8c:	781b      	ldrb	r3, [r3, #0]
 8023e8e:	2b00      	cmp	r3, #0
 8023e90:	d003      	beq.n	8023e9a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8023e92:	4804      	ldr	r0, [pc, #16]	; (8023ea4 <shci_user_evt_proc+0x90>)
 8023e94:	f7ed f98e 	bl	80111b4 <shci_notify_asynch_evt>
  }


  return;
 8023e98:	bf00      	nop
 8023e9a:	bf00      	nop
}
 8023e9c:	3710      	adds	r7, #16
 8023e9e:	46bd      	mov	sp, r7
 8023ea0:	bd80      	pop	{r7, pc}
 8023ea2:	bf00      	nop
 8023ea4:	20000248 	.word	0x20000248
 8023ea8:	20000258 	.word	0x20000258
 8023eac:	200274cc 	.word	0x200274cc

08023eb0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8023eb0:	b580      	push	{r7, lr}
 8023eb2:	b084      	sub	sp, #16
 8023eb4:	af00      	add	r7, sp, #0
 8023eb6:	60ba      	str	r2, [r7, #8]
 8023eb8:	607b      	str	r3, [r7, #4]
 8023eba:	4603      	mov	r3, r0
 8023ebc:	81fb      	strh	r3, [r7, #14]
 8023ebe:	460b      	mov	r3, r1
 8023ec0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8023ec2:	2000      	movs	r0, #0
 8023ec4:	f000 f864 	bl	8023f90 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8023ec8:	4b16      	ldr	r3, [pc, #88]	; (8023f24 <shci_send+0x74>)
 8023eca:	681b      	ldr	r3, [r3, #0]
 8023ecc:	89fa      	ldrh	r2, [r7, #14]
 8023ece:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8023ed2:	4b14      	ldr	r3, [pc, #80]	; (8023f24 <shci_send+0x74>)
 8023ed4:	681b      	ldr	r3, [r3, #0]
 8023ed6:	7b7a      	ldrb	r2, [r7, #13]
 8023ed8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8023eda:	4b12      	ldr	r3, [pc, #72]	; (8023f24 <shci_send+0x74>)
 8023edc:	681b      	ldr	r3, [r3, #0]
 8023ede:	330c      	adds	r3, #12
 8023ee0:	7b7a      	ldrb	r2, [r7, #13]
 8023ee2:	68b9      	ldr	r1, [r7, #8]
 8023ee4:	4618      	mov	r0, r3
 8023ee6:	f002 ff35 	bl	8026d54 <memcpy>

  shciContext.io.Send(0,0);
 8023eea:	4b0f      	ldr	r3, [pc, #60]	; (8023f28 <shci_send+0x78>)
 8023eec:	691b      	ldr	r3, [r3, #16]
 8023eee:	2100      	movs	r1, #0
 8023ef0:	2000      	movs	r0, #0
 8023ef2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8023ef4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8023ef8:	f7ed f97c 	bl	80111f4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8023efc:	687b      	ldr	r3, [r7, #4]
 8023efe:	f103 0008 	add.w	r0, r3, #8
 8023f02:	4b08      	ldr	r3, [pc, #32]	; (8023f24 <shci_send+0x74>)
 8023f04:	6819      	ldr	r1, [r3, #0]
 8023f06:	4b07      	ldr	r3, [pc, #28]	; (8023f24 <shci_send+0x74>)
 8023f08:	681b      	ldr	r3, [r3, #0]
 8023f0a:	789b      	ldrb	r3, [r3, #2]
 8023f0c:	3303      	adds	r3, #3
 8023f0e:	461a      	mov	r2, r3
 8023f10:	f002 ff20 	bl	8026d54 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8023f14:	2001      	movs	r0, #1
 8023f16:	f000 f83b 	bl	8023f90 <Cmd_SetStatus>

  return;
 8023f1a:	bf00      	nop
}
 8023f1c:	3710      	adds	r7, #16
 8023f1e:	46bd      	mov	sp, r7
 8023f20:	bd80      	pop	{r7, pc}
 8023f22:	bf00      	nop
 8023f24:	20000254 	.word	0x20000254
 8023f28:	200274cc 	.word	0x200274cc

08023f2c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8023f2c:	b580      	push	{r7, lr}
 8023f2e:	b086      	sub	sp, #24
 8023f30:	af00      	add	r7, sp, #0
 8023f32:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8023f34:	4a10      	ldr	r2, [pc, #64]	; (8023f78 <TlInit+0x4c>)
 8023f36:	687b      	ldr	r3, [r7, #4]
 8023f38:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8023f3a:	4810      	ldr	r0, [pc, #64]	; (8023f7c <TlInit+0x50>)
 8023f3c:	f000 f882 	bl	8024044 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8023f40:	2001      	movs	r0, #1
 8023f42:	f000 f825 	bl	8023f90 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8023f46:	4b0e      	ldr	r3, [pc, #56]	; (8023f80 <TlInit+0x54>)
 8023f48:	2201      	movs	r2, #1
 8023f4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8023f4c:	4b0d      	ldr	r3, [pc, #52]	; (8023f84 <TlInit+0x58>)
 8023f4e:	681b      	ldr	r3, [r3, #0]
 8023f50:	2b00      	cmp	r3, #0
 8023f52:	d00c      	beq.n	8023f6e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8023f54:	687b      	ldr	r3, [r7, #4]
 8023f56:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8023f58:	4b0b      	ldr	r3, [pc, #44]	; (8023f88 <TlInit+0x5c>)
 8023f5a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8023f5c:	4b0b      	ldr	r3, [pc, #44]	; (8023f8c <TlInit+0x60>)
 8023f5e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8023f60:	4b08      	ldr	r3, [pc, #32]	; (8023f84 <TlInit+0x58>)
 8023f62:	681b      	ldr	r3, [r3, #0]
 8023f64:	f107 020c 	add.w	r2, r7, #12
 8023f68:	4610      	mov	r0, r2
 8023f6a:	4798      	blx	r3
  }

  return;
 8023f6c:	bf00      	nop
 8023f6e:	bf00      	nop
}
 8023f70:	3718      	adds	r7, #24
 8023f72:	46bd      	mov	sp, r7
 8023f74:	bd80      	pop	{r7, pc}
 8023f76:	bf00      	nop
 8023f78:	20000254 	.word	0x20000254
 8023f7c:	20000248 	.word	0x20000248
 8023f80:	20000258 	.word	0x20000258
 8023f84:	200274cc 	.word	0x200274cc
 8023f88:	08023fe1 	.word	0x08023fe1
 8023f8c:	08023ff9 	.word	0x08023ff9

08023f90 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8023f90:	b580      	push	{r7, lr}
 8023f92:	b082      	sub	sp, #8
 8023f94:	af00      	add	r7, sp, #0
 8023f96:	4603      	mov	r3, r0
 8023f98:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8023f9a:	79fb      	ldrb	r3, [r7, #7]
 8023f9c:	2b00      	cmp	r3, #0
 8023f9e:	d10b      	bne.n	8023fb8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8023fa0:	4b0d      	ldr	r3, [pc, #52]	; (8023fd8 <Cmd_SetStatus+0x48>)
 8023fa2:	681b      	ldr	r3, [r3, #0]
 8023fa4:	2b00      	cmp	r3, #0
 8023fa6:	d003      	beq.n	8023fb0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8023fa8:	4b0b      	ldr	r3, [pc, #44]	; (8023fd8 <Cmd_SetStatus+0x48>)
 8023faa:	681b      	ldr	r3, [r3, #0]
 8023fac:	2000      	movs	r0, #0
 8023fae:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8023fb0:	4b0a      	ldr	r3, [pc, #40]	; (8023fdc <Cmd_SetStatus+0x4c>)
 8023fb2:	2200      	movs	r2, #0
 8023fb4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8023fb6:	e00b      	b.n	8023fd0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8023fb8:	4b08      	ldr	r3, [pc, #32]	; (8023fdc <Cmd_SetStatus+0x4c>)
 8023fba:	2201      	movs	r2, #1
 8023fbc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8023fbe:	4b06      	ldr	r3, [pc, #24]	; (8023fd8 <Cmd_SetStatus+0x48>)
 8023fc0:	681b      	ldr	r3, [r3, #0]
 8023fc2:	2b00      	cmp	r3, #0
 8023fc4:	d004      	beq.n	8023fd0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8023fc6:	4b04      	ldr	r3, [pc, #16]	; (8023fd8 <Cmd_SetStatus+0x48>)
 8023fc8:	681b      	ldr	r3, [r3, #0]
 8023fca:	2001      	movs	r0, #1
 8023fcc:	4798      	blx	r3
  return;
 8023fce:	bf00      	nop
 8023fd0:	bf00      	nop
}
 8023fd2:	3708      	adds	r7, #8
 8023fd4:	46bd      	mov	sp, r7
 8023fd6:	bd80      	pop	{r7, pc}
 8023fd8:	200274ec 	.word	0x200274ec
 8023fdc:	20000250 	.word	0x20000250

08023fe0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8023fe0:	b580      	push	{r7, lr}
 8023fe2:	b082      	sub	sp, #8
 8023fe4:	af00      	add	r7, sp, #0
 8023fe6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8023fe8:	2000      	movs	r0, #0
 8023fea:	f7ed f8f3 	bl	80111d4 <shci_cmd_resp_release>

  return;
 8023fee:	bf00      	nop
}
 8023ff0:	3708      	adds	r7, #8
 8023ff2:	46bd      	mov	sp, r7
 8023ff4:	bd80      	pop	{r7, pc}
	...

08023ff8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8023ff8:	b580      	push	{r7, lr}
 8023ffa:	b082      	sub	sp, #8
 8023ffc:	af00      	add	r7, sp, #0
 8023ffe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8024000:	6879      	ldr	r1, [r7, #4]
 8024002:	4805      	ldr	r0, [pc, #20]	; (8024018 <TlUserEvtReceived+0x20>)
 8024004:	f000 f872 	bl	80240ec <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8024008:	4803      	ldr	r0, [pc, #12]	; (8024018 <TlUserEvtReceived+0x20>)
 802400a:	f7ed f8d3 	bl	80111b4 <shci_notify_asynch_evt>

  return;
 802400e:	bf00      	nop
}
 8024010:	3708      	adds	r7, #8
 8024012:	46bd      	mov	sp, r7
 8024014:	bd80      	pop	{r7, pc}
 8024016:	bf00      	nop
 8024018:	20000248 	.word	0x20000248

0802401c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 802401c:	b480      	push	{r7}
 802401e:	b083      	sub	sp, #12
 8024020:	af00      	add	r7, sp, #0
 8024022:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8024024:	687b      	ldr	r3, [r7, #4]
 8024026:	4a05      	ldr	r2, [pc, #20]	; (802403c <shci_register_io_bus+0x20>)
 8024028:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	4a04      	ldr	r2, [pc, #16]	; (8024040 <shci_register_io_bus+0x24>)
 802402e:	611a      	str	r2, [r3, #16]

  return;
 8024030:	bf00      	nop
}
 8024032:	370c      	adds	r7, #12
 8024034:	46bd      	mov	sp, r7
 8024036:	f85d 7b04 	ldr.w	r7, [sp], #4
 802403a:	4770      	bx	lr
 802403c:	0802448d 	.word	0x0802448d
 8024040:	080244e1 	.word	0x080244e1

08024044 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8024044:	b480      	push	{r7}
 8024046:	b083      	sub	sp, #12
 8024048:	af00      	add	r7, sp, #0
 802404a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 802404c:	687b      	ldr	r3, [r7, #4]
 802404e:	687a      	ldr	r2, [r7, #4]
 8024050:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8024052:	687b      	ldr	r3, [r7, #4]
 8024054:	687a      	ldr	r2, [r7, #4]
 8024056:	605a      	str	r2, [r3, #4]
}
 8024058:	bf00      	nop
 802405a:	370c      	adds	r7, #12
 802405c:	46bd      	mov	sp, r7
 802405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024062:	4770      	bx	lr

08024064 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8024064:	b480      	push	{r7}
 8024066:	b087      	sub	sp, #28
 8024068:	af00      	add	r7, sp, #0
 802406a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802406c:	f3ef 8310 	mrs	r3, PRIMASK
 8024070:	60fb      	str	r3, [r7, #12]
  return(result);
 8024072:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8024074:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8024076:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8024078:	687b      	ldr	r3, [r7, #4]
 802407a:	681b      	ldr	r3, [r3, #0]
 802407c:	687a      	ldr	r2, [r7, #4]
 802407e:	429a      	cmp	r2, r3
 8024080:	d102      	bne.n	8024088 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8024082:	2301      	movs	r3, #1
 8024084:	75fb      	strb	r3, [r7, #23]
 8024086:	e001      	b.n	802408c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8024088:	2300      	movs	r3, #0
 802408a:	75fb      	strb	r3, [r7, #23]
 802408c:	693b      	ldr	r3, [r7, #16]
 802408e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024090:	68bb      	ldr	r3, [r7, #8]
 8024092:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8024096:	7dfb      	ldrb	r3, [r7, #23]
}
 8024098:	4618      	mov	r0, r3
 802409a:	371c      	adds	r7, #28
 802409c:	46bd      	mov	sp, r7
 802409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240a2:	4770      	bx	lr

080240a4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80240a4:	b480      	push	{r7}
 80240a6:	b087      	sub	sp, #28
 80240a8:	af00      	add	r7, sp, #0
 80240aa:	6078      	str	r0, [r7, #4]
 80240ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80240ae:	f3ef 8310 	mrs	r3, PRIMASK
 80240b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80240b4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80240b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80240b8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80240ba:	687b      	ldr	r3, [r7, #4]
 80240bc:	681a      	ldr	r2, [r3, #0]
 80240be:	683b      	ldr	r3, [r7, #0]
 80240c0:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80240c2:	683b      	ldr	r3, [r7, #0]
 80240c4:	687a      	ldr	r2, [r7, #4]
 80240c6:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80240c8:	687b      	ldr	r3, [r7, #4]
 80240ca:	683a      	ldr	r2, [r7, #0]
 80240cc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80240ce:	683b      	ldr	r3, [r7, #0]
 80240d0:	681b      	ldr	r3, [r3, #0]
 80240d2:	683a      	ldr	r2, [r7, #0]
 80240d4:	605a      	str	r2, [r3, #4]
 80240d6:	697b      	ldr	r3, [r7, #20]
 80240d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80240da:	693b      	ldr	r3, [r7, #16]
 80240dc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80240e0:	bf00      	nop
 80240e2:	371c      	adds	r7, #28
 80240e4:	46bd      	mov	sp, r7
 80240e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240ea:	4770      	bx	lr

080240ec <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80240ec:	b480      	push	{r7}
 80240ee:	b087      	sub	sp, #28
 80240f0:	af00      	add	r7, sp, #0
 80240f2:	6078      	str	r0, [r7, #4]
 80240f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80240f6:	f3ef 8310 	mrs	r3, PRIMASK
 80240fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80240fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80240fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8024100:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8024102:	683b      	ldr	r3, [r7, #0]
 8024104:	687a      	ldr	r2, [r7, #4]
 8024106:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8024108:	687b      	ldr	r3, [r7, #4]
 802410a:	685a      	ldr	r2, [r3, #4]
 802410c:	683b      	ldr	r3, [r7, #0]
 802410e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8024110:	687b      	ldr	r3, [r7, #4]
 8024112:	683a      	ldr	r2, [r7, #0]
 8024114:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8024116:	683b      	ldr	r3, [r7, #0]
 8024118:	685b      	ldr	r3, [r3, #4]
 802411a:	683a      	ldr	r2, [r7, #0]
 802411c:	601a      	str	r2, [r3, #0]
 802411e:	697b      	ldr	r3, [r7, #20]
 8024120:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024122:	693b      	ldr	r3, [r7, #16]
 8024124:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8024128:	bf00      	nop
 802412a:	371c      	adds	r7, #28
 802412c:	46bd      	mov	sp, r7
 802412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024132:	4770      	bx	lr

08024134 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8024134:	b480      	push	{r7}
 8024136:	b087      	sub	sp, #28
 8024138:	af00      	add	r7, sp, #0
 802413a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802413c:	f3ef 8310 	mrs	r3, PRIMASK
 8024140:	60fb      	str	r3, [r7, #12]
  return(result);
 8024142:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8024144:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8024146:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8024148:	687b      	ldr	r3, [r7, #4]
 802414a:	685b      	ldr	r3, [r3, #4]
 802414c:	687a      	ldr	r2, [r7, #4]
 802414e:	6812      	ldr	r2, [r2, #0]
 8024150:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8024152:	687b      	ldr	r3, [r7, #4]
 8024154:	681b      	ldr	r3, [r3, #0]
 8024156:	687a      	ldr	r2, [r7, #4]
 8024158:	6852      	ldr	r2, [r2, #4]
 802415a:	605a      	str	r2, [r3, #4]
 802415c:	697b      	ldr	r3, [r7, #20]
 802415e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024160:	693b      	ldr	r3, [r7, #16]
 8024162:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8024166:	bf00      	nop
 8024168:	371c      	adds	r7, #28
 802416a:	46bd      	mov	sp, r7
 802416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024170:	4770      	bx	lr

08024172 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8024172:	b580      	push	{r7, lr}
 8024174:	b086      	sub	sp, #24
 8024176:	af00      	add	r7, sp, #0
 8024178:	6078      	str	r0, [r7, #4]
 802417a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802417c:	f3ef 8310 	mrs	r3, PRIMASK
 8024180:	60fb      	str	r3, [r7, #12]
  return(result);
 8024182:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8024184:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8024186:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8024188:	687b      	ldr	r3, [r7, #4]
 802418a:	681a      	ldr	r2, [r3, #0]
 802418c:	683b      	ldr	r3, [r7, #0]
 802418e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8024190:	687b      	ldr	r3, [r7, #4]
 8024192:	681b      	ldr	r3, [r3, #0]
 8024194:	4618      	mov	r0, r3
 8024196:	f7ff ffcd 	bl	8024134 <LST_remove_node>
 802419a:	697b      	ldr	r3, [r7, #20]
 802419c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802419e:	693b      	ldr	r3, [r7, #16]
 80241a0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80241a4:	bf00      	nop
 80241a6:	3718      	adds	r7, #24
 80241a8:	46bd      	mov	sp, r7
 80241aa:	bd80      	pop	{r7, pc}

080241ac <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 80241ac:	b580      	push	{r7, lr}
 80241ae:	b084      	sub	sp, #16
 80241b0:	af00      	add	r7, sp, #0
 80241b2:	6078      	str	r0, [r7, #4]
 80241b4:	460b      	mov	r3, r1
 80241b6:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80241b8:	f001 fef8 	bl	8025fac <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80241bc:	f001 fe94 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 80241c0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 80241c2:	68fb      	ldr	r3, [r7, #12]
 80241c4:	2200      	movs	r2, #0
 80241c6:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 80241ca:	701a      	strb	r2, [r3, #0]
 80241cc:	2200      	movs	r2, #0
 80241ce:	705a      	strb	r2, [r3, #1]
 80241d0:	2200      	movs	r2, #0
 80241d2:	709a      	strb	r2, [r3, #2]
 80241d4:	2200      	movs	r2, #0
 80241d6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80241d8:	68fb      	ldr	r3, [r7, #12]
 80241da:	2200      	movs	r2, #0
 80241dc:	f042 0201 	orr.w	r2, r2, #1
 80241e0:	711a      	strb	r2, [r3, #4]
 80241e2:	2200      	movs	r2, #0
 80241e4:	715a      	strb	r2, [r3, #5]
 80241e6:	2200      	movs	r2, #0
 80241e8:	719a      	strb	r2, [r3, #6]
 80241ea:	2200      	movs	r2, #0
 80241ec:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 80241ee:	78fa      	ldrb	r2, [r7, #3]
 80241f0:	68fb      	ldr	r3, [r7, #12]
 80241f2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80241f4:	f001 fe9c 	bl	8025f30 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80241f8:	f001 fe82 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 80241fc:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80241fe:	68fb      	ldr	r3, [r7, #12]
 8024200:	689b      	ldr	r3, [r3, #8]
 8024202:	b2db      	uxtb	r3, r3
}
 8024204:	4618      	mov	r0, r3
 8024206:	3710      	adds	r7, #16
 8024208:	46bd      	mov	sp, r7
 802420a:	bd80      	pop	{r7, pc}

0802420c <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 802420c:	b580      	push	{r7, lr}
 802420e:	b084      	sub	sp, #16
 8024210:	af00      	add	r7, sp, #0
 8024212:	6078      	str	r0, [r7, #4]
 8024214:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8024216:	f001 fec9 	bl	8025fac <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 802421a:	f001 fe65 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 802421e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 8024220:	68fb      	ldr	r3, [r7, #12]
 8024222:	2200      	movs	r2, #0
 8024224:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 8024228:	701a      	strb	r2, [r3, #0]
 802422a:	2200      	movs	r2, #0
 802422c:	705a      	strb	r2, [r3, #1]
 802422e:	2200      	movs	r2, #0
 8024230:	709a      	strb	r2, [r3, #2]
 8024232:	2200      	movs	r2, #0
 8024234:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8024236:	68fb      	ldr	r3, [r7, #12]
 8024238:	2200      	movs	r2, #0
 802423a:	f042 0201 	orr.w	r2, r2, #1
 802423e:	711a      	strb	r2, [r3, #4]
 8024240:	2200      	movs	r2, #0
 8024242:	715a      	strb	r2, [r3, #5]
 8024244:	2200      	movs	r2, #0
 8024246:	719a      	strb	r2, [r3, #6]
 8024248:	2200      	movs	r2, #0
 802424a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 802424c:	683a      	ldr	r2, [r7, #0]
 802424e:	68fb      	ldr	r3, [r7, #12]
 8024250:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8024252:	f001 fe6d 	bl	8025f30 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8024256:	f001 fe53 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 802425a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 802425c:	68fb      	ldr	r3, [r7, #12]
 802425e:	689b      	ldr	r3, [r3, #8]
 8024260:	b2db      	uxtb	r3, r3
}
 8024262:	4618      	mov	r0, r3
 8024264:	3710      	adds	r7, #16
 8024266:	46bd      	mov	sp, r7
 8024268:	bd80      	pop	{r7, pc}

0802426a <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 802426a:	b580      	push	{r7, lr}
 802426c:	b084      	sub	sp, #16
 802426e:	af00      	add	r7, sp, #0
 8024270:	6078      	str	r0, [r7, #4]
 8024272:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8024274:	f001 fe9a 	bl	8025fac <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8024278:	f001 fe36 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 802427c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 802427e:	68fb      	ldr	r3, [r7, #12]
 8024280:	2200      	movs	r2, #0
 8024282:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8024286:	701a      	strb	r2, [r3, #0]
 8024288:	2200      	movs	r2, #0
 802428a:	705a      	strb	r2, [r3, #1]
 802428c:	2200      	movs	r2, #0
 802428e:	709a      	strb	r2, [r3, #2]
 8024290:	2200      	movs	r2, #0
 8024292:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8024294:	68fb      	ldr	r3, [r7, #12]
 8024296:	2200      	movs	r2, #0
 8024298:	f042 0201 	orr.w	r2, r2, #1
 802429c:	711a      	strb	r2, [r3, #4]
 802429e:	2200      	movs	r2, #0
 80242a0:	715a      	strb	r2, [r3, #5]
 80242a2:	2200      	movs	r2, #0
 80242a4:	719a      	strb	r2, [r3, #6]
 80242a6:	2200      	movs	r2, #0
 80242a8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 80242aa:	683a      	ldr	r2, [r7, #0]
 80242ac:	68fb      	ldr	r3, [r7, #12]
 80242ae:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80242b0:	f001 fe3e 	bl	8025f30 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80242b4:	f001 fe24 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 80242b8:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80242ba:	68fb      	ldr	r3, [r7, #12]
 80242bc:	689b      	ldr	r3, [r3, #8]
 80242be:	b2db      	uxtb	r3, r3
}
 80242c0:	4618      	mov	r0, r3
 80242c2:	3710      	adds	r7, #16
 80242c4:	46bd      	mov	sp, r7
 80242c6:	bd80      	pop	{r7, pc}

080242c8 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 80242c8:	b580      	push	{r7, lr}
 80242ca:	b084      	sub	sp, #16
 80242cc:	af00      	add	r7, sp, #0
 80242ce:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80242d0:	f001 fe6c 	bl	8025fac <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80242d4:	f001 fe08 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 80242d8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 80242da:	68fb      	ldr	r3, [r7, #12]
 80242dc:	2200      	movs	r2, #0
 80242de:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 80242e2:	701a      	strb	r2, [r3, #0]
 80242e4:	2200      	movs	r2, #0
 80242e6:	705a      	strb	r2, [r3, #1]
 80242e8:	2200      	movs	r2, #0
 80242ea:	709a      	strb	r2, [r3, #2]
 80242ec:	2200      	movs	r2, #0
 80242ee:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80242f0:	68fb      	ldr	r3, [r7, #12]
 80242f2:	2200      	movs	r2, #0
 80242f4:	711a      	strb	r2, [r3, #4]
 80242f6:	2200      	movs	r2, #0
 80242f8:	715a      	strb	r2, [r3, #5]
 80242fa:	2200      	movs	r2, #0
 80242fc:	719a      	strb	r2, [r3, #6]
 80242fe:	2200      	movs	r2, #0
 8024300:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8024302:	f001 fe15 	bl	8025f30 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8024306:	f001 fdfb 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 802430a:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 802430c:	68fb      	ldr	r3, [r7, #12]
 802430e:	689b      	ldr	r3, [r3, #8]
}
 8024310:	4618      	mov	r0, r3
 8024312:	3710      	adds	r7, #16
 8024314:	46bd      	mov	sp, r7
 8024316:	bd80      	pop	{r7, pc}

08024318 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8024318:	b580      	push	{r7, lr}
 802431a:	b084      	sub	sp, #16
 802431c:	af00      	add	r7, sp, #0
 802431e:	6078      	str	r0, [r7, #4]
 8024320:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8024322:	f001 fe43 	bl	8025fac <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8024326:	f001 fddf 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 802432a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 802432c:	68fb      	ldr	r3, [r7, #12]
 802432e:	2200      	movs	r2, #0
 8024330:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8024334:	701a      	strb	r2, [r3, #0]
 8024336:	2200      	movs	r2, #0
 8024338:	705a      	strb	r2, [r3, #1]
 802433a:	2200      	movs	r2, #0
 802433c:	709a      	strb	r2, [r3, #2]
 802433e:	2200      	movs	r2, #0
 8024340:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8024342:	68fb      	ldr	r3, [r7, #12]
 8024344:	2200      	movs	r2, #0
 8024346:	f042 0201 	orr.w	r2, r2, #1
 802434a:	711a      	strb	r2, [r3, #4]
 802434c:	2200      	movs	r2, #0
 802434e:	715a      	strb	r2, [r3, #5]
 8024350:	2200      	movs	r2, #0
 8024352:	719a      	strb	r2, [r3, #6]
 8024354:	2200      	movs	r2, #0
 8024356:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8024358:	683a      	ldr	r2, [r7, #0]
 802435a:	68fb      	ldr	r3, [r7, #12]
 802435c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 802435e:	f001 fde7 	bl	8025f30 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8024362:	f001 fdcd 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 8024366:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8024368:	68fb      	ldr	r3, [r7, #12]
 802436a:	689b      	ldr	r3, [r3, #8]
 802436c:	b2db      	uxtb	r3, r3
}
 802436e:	4618      	mov	r0, r3
 8024370:	3710      	adds	r7, #16
 8024372:	46bd      	mov	sp, r7
 8024374:	bd80      	pop	{r7, pc}

08024376 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8024376:	b580      	push	{r7, lr}
 8024378:	b084      	sub	sp, #16
 802437a:	af00      	add	r7, sp, #0
 802437c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 802437e:	f001 fe15 	bl	8025fac <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8024382:	f001 fdb1 	bl	8025ee8 <THREAD_Get_OTCmdPayloadBuffer>
 8024386:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8024388:	68fb      	ldr	r3, [r7, #12]
 802438a:	2200      	movs	r2, #0
 802438c:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8024390:	701a      	strb	r2, [r3, #0]
 8024392:	2200      	movs	r2, #0
 8024394:	705a      	strb	r2, [r3, #1]
 8024396:	2200      	movs	r2, #0
 8024398:	709a      	strb	r2, [r3, #2]
 802439a:	2200      	movs	r2, #0
 802439c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 802439e:	68fb      	ldr	r3, [r7, #12]
 80243a0:	2200      	movs	r2, #0
 80243a2:	711a      	strb	r2, [r3, #4]
 80243a4:	2200      	movs	r2, #0
 80243a6:	715a      	strb	r2, [r3, #5]
 80243a8:	2200      	movs	r2, #0
 80243aa:	719a      	strb	r2, [r3, #6]
 80243ac:	2200      	movs	r2, #0
 80243ae:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80243b0:	f001 fdbe 	bl	8025f30 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80243b4:	f001 fda4 	bl	8025f00 <THREAD_Get_OTCmdRspPayloadBuffer>
 80243b8:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 80243ba:	68fb      	ldr	r3, [r7, #12]
 80243bc:	689b      	ldr	r3, [r3, #8]
 80243be:	b2db      	uxtb	r3, r3
}
 80243c0:	4618      	mov	r0, r3
 80243c2:	3710      	adds	r7, #16
 80243c4:	46bd      	mov	sp, r7
 80243c6:	bd80      	pop	{r7, pc}

080243c8 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80243c8:	b580      	push	{r7, lr}
 80243ca:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80243cc:	f002 f872 	bl	80264b4 <HW_IPCC_Enable>

  return;
 80243d0:	bf00      	nop
}
 80243d2:	bd80      	pop	{r7, pc}

080243d4 <TL_Init>:


void TL_Init( void )
{
 80243d4:	b580      	push	{r7, lr}
 80243d6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80243d8:	4b0f      	ldr	r3, [pc, #60]	; (8024418 <TL_Init+0x44>)
 80243da:	4a10      	ldr	r2, [pc, #64]	; (802441c <TL_Init+0x48>)
 80243dc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80243de:	4b0e      	ldr	r3, [pc, #56]	; (8024418 <TL_Init+0x44>)
 80243e0:	4a0f      	ldr	r2, [pc, #60]	; (8024420 <TL_Init+0x4c>)
 80243e2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80243e4:	4b0c      	ldr	r3, [pc, #48]	; (8024418 <TL_Init+0x44>)
 80243e6:	4a0f      	ldr	r2, [pc, #60]	; (8024424 <TL_Init+0x50>)
 80243e8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80243ea:	4b0b      	ldr	r3, [pc, #44]	; (8024418 <TL_Init+0x44>)
 80243ec:	4a0e      	ldr	r2, [pc, #56]	; (8024428 <TL_Init+0x54>)
 80243ee:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 80243f0:	4b09      	ldr	r3, [pc, #36]	; (8024418 <TL_Init+0x44>)
 80243f2:	4a0e      	ldr	r2, [pc, #56]	; (802442c <TL_Init+0x58>)
 80243f4:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80243f6:	4b08      	ldr	r3, [pc, #32]	; (8024418 <TL_Init+0x44>)
 80243f8:	4a0d      	ldr	r2, [pc, #52]	; (8024430 <TL_Init+0x5c>)
 80243fa:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80243fc:	4b06      	ldr	r3, [pc, #24]	; (8024418 <TL_Init+0x44>)
 80243fe:	4a0d      	ldr	r2, [pc, #52]	; (8024434 <TL_Init+0x60>)
 8024400:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8024402:	4b05      	ldr	r3, [pc, #20]	; (8024418 <TL_Init+0x44>)
 8024404:	4a0c      	ldr	r2, [pc, #48]	; (8024438 <TL_Init+0x64>)
 8024406:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8024408:	4b03      	ldr	r3, [pc, #12]	; (8024418 <TL_Init+0x44>)
 802440a:	4a0c      	ldr	r2, [pc, #48]	; (802443c <TL_Init+0x68>)
 802440c:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 802440e:	f002 f861 	bl	80264d4 <HW_IPCC_Init>

  return;
 8024412:	bf00      	nop
}
 8024414:	bd80      	pop	{r7, pc}
 8024416:	bf00      	nop
 8024418:	20030000 	.word	0x20030000
 802441c:	20030024 	.word	0x20030024
 8024420:	20030044 	.word	0x20030044
 8024424:	20030054 	.word	0x20030054
 8024428:	20030060 	.word	0x20030060
 802442c:	20030068 	.word	0x20030068
 8024430:	20030070 	.word	0x20030070
 8024434:	2003008c 	.word	0x2003008c
 8024438:	20030090 	.word	0x20030090
 802443c:	2003009c 	.word	0x2003009c

08024440 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8024440:	b580      	push	{r7, lr}
 8024442:	b082      	sub	sp, #8
 8024444:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8024446:	e009      	b.n	802445c <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8024448:	1d3b      	adds	r3, r7, #4
 802444a:	4619      	mov	r1, r3
 802444c:	4808      	ldr	r0, [pc, #32]	; (8024470 <HW_IPCC_BLE_RxEvtNot+0x30>)
 802444e:	f7ff fe90 	bl	8024172 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8024452:	4b08      	ldr	r3, [pc, #32]	; (8024474 <HW_IPCC_BLE_RxEvtNot+0x34>)
 8024454:	681b      	ldr	r3, [r3, #0]
 8024456:	687a      	ldr	r2, [r7, #4]
 8024458:	4610      	mov	r0, r2
 802445a:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 802445c:	4804      	ldr	r0, [pc, #16]	; (8024470 <HW_IPCC_BLE_RxEvtNot+0x30>)
 802445e:	f7ff fe01 	bl	8024064 <LST_is_empty>
 8024462:	4603      	mov	r3, r0
 8024464:	2b00      	cmp	r3, #0
 8024466:	d0ef      	beq.n	8024448 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8024468:	bf00      	nop
}
 802446a:	3708      	adds	r7, #8
 802446c:	46bd      	mov	sp, r7
 802446e:	bd80      	pop	{r7, pc}
 8024470:	20030828 	.word	0x20030828
 8024474:	200274f8 	.word	0x200274f8

08024478 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8024478:	b580      	push	{r7, lr}
 802447a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 802447c:	4b02      	ldr	r3, [pc, #8]	; (8024488 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 802447e:	681b      	ldr	r3, [r3, #0]
 8024480:	4798      	blx	r3

  return;
 8024482:	bf00      	nop
}
 8024484:	bd80      	pop	{r7, pc}
 8024486:	bf00      	nop
 8024488:	200274fc 	.word	0x200274fc

0802448c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 802448c:	b580      	push	{r7, lr}
 802448e:	b084      	sub	sp, #16
 8024490:	af00      	add	r7, sp, #0
 8024492:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8024494:	687b      	ldr	r3, [r7, #4]
 8024496:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8024498:	480d      	ldr	r0, [pc, #52]	; (80244d0 <TL_SYS_Init+0x44>)
 802449a:	f7ff fdd3 	bl	8024044 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 802449e:	4b0d      	ldr	r3, [pc, #52]	; (80244d4 <TL_SYS_Init+0x48>)
 80244a0:	68db      	ldr	r3, [r3, #12]
 80244a2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80244a4:	68fb      	ldr	r3, [r7, #12]
 80244a6:	689a      	ldr	r2, [r3, #8]
 80244a8:	68bb      	ldr	r3, [r7, #8]
 80244aa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80244ac:	68bb      	ldr	r3, [r7, #8]
 80244ae:	4a08      	ldr	r2, [pc, #32]	; (80244d0 <TL_SYS_Init+0x44>)
 80244b0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80244b2:	f002 f83d 	bl	8026530 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80244b6:	68fb      	ldr	r3, [r7, #12]
 80244b8:	681b      	ldr	r3, [r3, #0]
 80244ba:	4a07      	ldr	r2, [pc, #28]	; (80244d8 <TL_SYS_Init+0x4c>)
 80244bc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80244be:	68fb      	ldr	r3, [r7, #12]
 80244c0:	685b      	ldr	r3, [r3, #4]
 80244c2:	4a06      	ldr	r2, [pc, #24]	; (80244dc <TL_SYS_Init+0x50>)
 80244c4:	6013      	str	r3, [r2, #0]

  return 0;
 80244c6:	2300      	movs	r3, #0
}
 80244c8:	4618      	mov	r0, r3
 80244ca:	3710      	adds	r7, #16
 80244cc:	46bd      	mov	sp, r7
 80244ce:	bd80      	pop	{r7, pc}
 80244d0:	20030830 	.word	0x20030830
 80244d4:	20030000 	.word	0x20030000
 80244d8:	20027500 	.word	0x20027500
 80244dc:	20027504 	.word	0x20027504

080244e0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80244e0:	b580      	push	{r7, lr}
 80244e2:	b082      	sub	sp, #8
 80244e4:	af00      	add	r7, sp, #0
 80244e6:	6078      	str	r0, [r7, #4]
 80244e8:	460b      	mov	r3, r1
 80244ea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80244ec:	4b05      	ldr	r3, [pc, #20]	; (8024504 <TL_SYS_SendCmd+0x24>)
 80244ee:	68db      	ldr	r3, [r3, #12]
 80244f0:	681b      	ldr	r3, [r3, #0]
 80244f2:	2210      	movs	r2, #16
 80244f4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 80244f6:	f002 f825 	bl	8026544 <HW_IPCC_SYS_SendCmd>

  return 0;
 80244fa:	2300      	movs	r3, #0
}
 80244fc:	4618      	mov	r0, r3
 80244fe:	3708      	adds	r7, #8
 8024500:	46bd      	mov	sp, r7
 8024502:	bd80      	pop	{r7, pc}
 8024504:	20030000 	.word	0x20030000

08024508 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8024508:	b580      	push	{r7, lr}
 802450a:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 802450c:	4b04      	ldr	r3, [pc, #16]	; (8024520 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 802450e:	681b      	ldr	r3, [r3, #0]
 8024510:	4a04      	ldr	r2, [pc, #16]	; (8024524 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 8024512:	68d2      	ldr	r2, [r2, #12]
 8024514:	6812      	ldr	r2, [r2, #0]
 8024516:	4610      	mov	r0, r2
 8024518:	4798      	blx	r3

  return;
 802451a:	bf00      	nop
}
 802451c:	bd80      	pop	{r7, pc}
 802451e:	bf00      	nop
 8024520:	20027500 	.word	0x20027500
 8024524:	20030000 	.word	0x20030000

08024528 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8024528:	b580      	push	{r7, lr}
 802452a:	b082      	sub	sp, #8
 802452c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 802452e:	e009      	b.n	8024544 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8024530:	1d3b      	adds	r3, r7, #4
 8024532:	4619      	mov	r1, r3
 8024534:	4808      	ldr	r0, [pc, #32]	; (8024558 <HW_IPCC_SYS_EvtNot+0x30>)
 8024536:	f7ff fe1c 	bl	8024172 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 802453a:	4b08      	ldr	r3, [pc, #32]	; (802455c <HW_IPCC_SYS_EvtNot+0x34>)
 802453c:	681b      	ldr	r3, [r3, #0]
 802453e:	687a      	ldr	r2, [r7, #4]
 8024540:	4610      	mov	r0, r2
 8024542:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8024544:	4804      	ldr	r0, [pc, #16]	; (8024558 <HW_IPCC_SYS_EvtNot+0x30>)
 8024546:	f7ff fd8d 	bl	8024064 <LST_is_empty>
 802454a:	4603      	mov	r3, r0
 802454c:	2b00      	cmp	r3, #0
 802454e:	d0ef      	beq.n	8024530 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8024550:	bf00      	nop
}
 8024552:	3708      	adds	r7, #8
 8024554:	46bd      	mov	sp, r7
 8024556:	bd80      	pop	{r7, pc}
 8024558:	20030830 	.word	0x20030830
 802455c:	20027504 	.word	0x20027504

08024560 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8024560:	b580      	push	{r7, lr}
 8024562:	b084      	sub	sp, #16
 8024564:	af00      	add	r7, sp, #0
 8024566:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8024568:	4b0a      	ldr	r3, [pc, #40]	; (8024594 <TL_THREAD_Init+0x34>)
 802456a:	689b      	ldr	r3, [r3, #8]
 802456c:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 802456e:	687b      	ldr	r3, [r7, #4]
 8024570:	685a      	ldr	r2, [r3, #4]
 8024572:	68fb      	ldr	r3, [r7, #12]
 8024574:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8024576:	687b      	ldr	r3, [r7, #4]
 8024578:	681a      	ldr	r2, [r3, #0]
 802457a:	68fb      	ldr	r3, [r7, #12]
 802457c:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 802457e:	687b      	ldr	r3, [r7, #4]
 8024580:	689a      	ldr	r2, [r3, #8]
 8024582:	68fb      	ldr	r3, [r7, #12]
 8024584:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 8024586:	f002 f803 	bl	8026590 <HW_IPCC_THREAD_Init>

  return;
 802458a:	bf00      	nop
}
 802458c:	3710      	adds	r7, #16
 802458e:	46bd      	mov	sp, r7
 8024590:	bd80      	pop	{r7, pc}
 8024592:	bf00      	nop
 8024594:	20030000 	.word	0x20030000

08024598 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8024598:	b580      	push	{r7, lr}
 802459a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 802459c:	4b04      	ldr	r3, [pc, #16]	; (80245b0 <TL_OT_SendCmd+0x18>)
 802459e:	689b      	ldr	r3, [r3, #8]
 80245a0:	689b      	ldr	r3, [r3, #8]
 80245a2:	2208      	movs	r2, #8
 80245a4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 80245a6:	f002 f801 	bl	80265ac <HW_IPCC_OT_SendCmd>

  return;
 80245aa:	bf00      	nop
}
 80245ac:	bd80      	pop	{r7, pc}
 80245ae:	bf00      	nop
 80245b0:	20030000 	.word	0x20030000

080245b4 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 80245b4:	b580      	push	{r7, lr}
 80245b6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 80245b8:	4b04      	ldr	r3, [pc, #16]	; (80245cc <TL_CLI_SendCmd+0x18>)
 80245ba:	689b      	ldr	r3, [r3, #8]
 80245bc:	685b      	ldr	r3, [r3, #4]
 80245be:	220a      	movs	r2, #10
 80245c0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 80245c2:	f002 f801 	bl	80265c8 <HW_IPCC_CLI_SendCmd>

  return;
 80245c6:	bf00      	nop
}
 80245c8:	bd80      	pop	{r7, pc}
 80245ca:	bf00      	nop
 80245cc:	20030000 	.word	0x20030000

080245d0 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 80245d0:	b580      	push	{r7, lr}
 80245d2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80245d4:	4b04      	ldr	r3, [pc, #16]	; (80245e8 <TL_THREAD_SendAck+0x18>)
 80245d6:	689b      	ldr	r3, [r3, #8]
 80245d8:	681b      	ldr	r3, [r3, #0]
 80245da:	220d      	movs	r2, #13
 80245dc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 80245de:	f001 fffd 	bl	80265dc <HW_IPCC_THREAD_SendAck>

  return;
 80245e2:	bf00      	nop
}
 80245e4:	bd80      	pop	{r7, pc}
 80245e6:	bf00      	nop
 80245e8:	20030000 	.word	0x20030000

080245ec <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 80245ec:	b580      	push	{r7, lr}
 80245ee:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80245f0:	4b04      	ldr	r3, [pc, #16]	; (8024604 <TL_THREAD_CliSendAck+0x18>)
 80245f2:	689b      	ldr	r3, [r3, #8]
 80245f4:	681b      	ldr	r3, [r3, #0]
 80245f6:	220d      	movs	r2, #13
 80245f8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 80245fa:	f001 fffd 	bl	80265f8 <HW_IPCC_THREAD_CliSendAck>

  return;
 80245fe:	bf00      	nop
}
 8024600:	bd80      	pop	{r7, pc}
 8024602:	bf00      	nop
 8024604:	20030000 	.word	0x20030000

08024608 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8024608:	b580      	push	{r7, lr}
 802460a:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 802460c:	4b03      	ldr	r3, [pc, #12]	; (802461c <HW_IPCC_OT_CmdEvtNot+0x14>)
 802460e:	689b      	ldr	r3, [r3, #8]
 8024610:	689b      	ldr	r3, [r3, #8]
 8024612:	4618      	mov	r0, r3
 8024614:	f001 fcb0 	bl	8025f78 <TL_OT_CmdEvtReceived>

  return;
 8024618:	bf00      	nop
}
 802461a:	bd80      	pop	{r7, pc}
 802461c:	20030000 	.word	0x20030000

08024620 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8024620:	b580      	push	{r7, lr}
 8024622:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8024624:	4b03      	ldr	r3, [pc, #12]	; (8024634 <HW_IPCC_THREAD_EvtNot+0x14>)
 8024626:	689b      	ldr	r3, [r3, #8]
 8024628:	681b      	ldr	r3, [r3, #0]
 802462a:	4618      	mov	r0, r3
 802462c:	f001 fcae 	bl	8025f8c <TL_THREAD_NotReceived>

  return;
 8024630:	bf00      	nop
}
 8024632:	bd80      	pop	{r7, pc}
 8024634:	20030000 	.word	0x20030000

08024638 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8024638:	b580      	push	{r7, lr}
 802463a:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 802463c:	4b03      	ldr	r3, [pc, #12]	; (802464c <HW_IPCC_THREAD_CliEvtNot+0x14>)
 802463e:	689b      	ldr	r3, [r3, #8]
 8024640:	685b      	ldr	r3, [r3, #4]
 8024642:	4618      	mov	r0, r3
 8024644:	f001 fd50 	bl	80260e8 <TL_THREAD_CliNotReceived>

  return;
 8024648:	bf00      	nop
}
 802464a:	bd80      	pop	{r7, pc}
 802464c:	20030000 	.word	0x20030000

08024650 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8024650:	b580      	push	{r7, lr}
 8024652:	b082      	sub	sp, #8
 8024654:	af00      	add	r7, sp, #0
 8024656:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8024658:	4817      	ldr	r0, [pc, #92]	; (80246b8 <TL_MM_Init+0x68>)
 802465a:	f7ff fcf3 	bl	8024044 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 802465e:	4817      	ldr	r0, [pc, #92]	; (80246bc <TL_MM_Init+0x6c>)
 8024660:	f7ff fcf0 	bl	8024044 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8024664:	4b16      	ldr	r3, [pc, #88]	; (80246c0 <TL_MM_Init+0x70>)
 8024666:	691b      	ldr	r3, [r3, #16]
 8024668:	4a16      	ldr	r2, [pc, #88]	; (80246c4 <TL_MM_Init+0x74>)
 802466a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 802466c:	4b15      	ldr	r3, [pc, #84]	; (80246c4 <TL_MM_Init+0x74>)
 802466e:	681b      	ldr	r3, [r3, #0]
 8024670:	687a      	ldr	r2, [r7, #4]
 8024672:	6892      	ldr	r2, [r2, #8]
 8024674:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8024676:	4b13      	ldr	r3, [pc, #76]	; (80246c4 <TL_MM_Init+0x74>)
 8024678:	681b      	ldr	r3, [r3, #0]
 802467a:	687a      	ldr	r2, [r7, #4]
 802467c:	68d2      	ldr	r2, [r2, #12]
 802467e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8024680:	4b10      	ldr	r3, [pc, #64]	; (80246c4 <TL_MM_Init+0x74>)
 8024682:	681b      	ldr	r3, [r3, #0]
 8024684:	4a0c      	ldr	r2, [pc, #48]	; (80246b8 <TL_MM_Init+0x68>)
 8024686:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8024688:	4b0e      	ldr	r3, [pc, #56]	; (80246c4 <TL_MM_Init+0x74>)
 802468a:	681b      	ldr	r3, [r3, #0]
 802468c:	687a      	ldr	r2, [r7, #4]
 802468e:	6812      	ldr	r2, [r2, #0]
 8024690:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8024692:	4b0c      	ldr	r3, [pc, #48]	; (80246c4 <TL_MM_Init+0x74>)
 8024694:	681b      	ldr	r3, [r3, #0]
 8024696:	687a      	ldr	r2, [r7, #4]
 8024698:	6852      	ldr	r2, [r2, #4]
 802469a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 802469c:	4b09      	ldr	r3, [pc, #36]	; (80246c4 <TL_MM_Init+0x74>)
 802469e:	681b      	ldr	r3, [r3, #0]
 80246a0:	687a      	ldr	r2, [r7, #4]
 80246a2:	6912      	ldr	r2, [r2, #16]
 80246a4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80246a6:	4b07      	ldr	r3, [pc, #28]	; (80246c4 <TL_MM_Init+0x74>)
 80246a8:	681b      	ldr	r3, [r3, #0]
 80246aa:	687a      	ldr	r2, [r7, #4]
 80246ac:	6952      	ldr	r2, [r2, #20]
 80246ae:	619a      	str	r2, [r3, #24]

  return;
 80246b0:	bf00      	nop
}
 80246b2:	3708      	adds	r7, #8
 80246b4:	46bd      	mov	sp, r7
 80246b6:	bd80      	pop	{r7, pc}
 80246b8:	200300a8 	.word	0x200300a8
 80246bc:	200274f0 	.word	0x200274f0
 80246c0:	20030000 	.word	0x20030000
 80246c4:	20027508 	.word	0x20027508

080246c8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80246c8:	b580      	push	{r7, lr}
 80246ca:	b082      	sub	sp, #8
 80246cc:	af00      	add	r7, sp, #0
 80246ce:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80246d0:	6879      	ldr	r1, [r7, #4]
 80246d2:	4805      	ldr	r0, [pc, #20]	; (80246e8 <TL_MM_EvtDone+0x20>)
 80246d4:	f7ff fd0a 	bl	80240ec <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80246d8:	4804      	ldr	r0, [pc, #16]	; (80246ec <TL_MM_EvtDone+0x24>)
 80246da:	f001 ffbf 	bl	802665c <HW_IPCC_MM_SendFreeBuf>

  return;
 80246de:	bf00      	nop
}
 80246e0:	3708      	adds	r7, #8
 80246e2:	46bd      	mov	sp, r7
 80246e4:	bd80      	pop	{r7, pc}
 80246e6:	bf00      	nop
 80246e8:	200274f0 	.word	0x200274f0
 80246ec:	080246f1 	.word	0x080246f1

080246f0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80246f0:	b580      	push	{r7, lr}
 80246f2:	b082      	sub	sp, #8
 80246f4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80246f6:	e00c      	b.n	8024712 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80246f8:	1d3b      	adds	r3, r7, #4
 80246fa:	4619      	mov	r1, r3
 80246fc:	480a      	ldr	r0, [pc, #40]	; (8024728 <SendFreeBuf+0x38>)
 80246fe:	f7ff fd38 	bl	8024172 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8024702:	4b0a      	ldr	r3, [pc, #40]	; (802472c <SendFreeBuf+0x3c>)
 8024704:	691b      	ldr	r3, [r3, #16]
 8024706:	691b      	ldr	r3, [r3, #16]
 8024708:	687a      	ldr	r2, [r7, #4]
 802470a:	4611      	mov	r1, r2
 802470c:	4618      	mov	r0, r3
 802470e:	f7ff fced 	bl	80240ec <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8024712:	4805      	ldr	r0, [pc, #20]	; (8024728 <SendFreeBuf+0x38>)
 8024714:	f7ff fca6 	bl	8024064 <LST_is_empty>
 8024718:	4603      	mov	r3, r0
 802471a:	2b00      	cmp	r3, #0
 802471c:	d0ec      	beq.n	80246f8 <SendFreeBuf+0x8>
  }

  return;
 802471e:	bf00      	nop
}
 8024720:	3708      	adds	r7, #8
 8024722:	46bd      	mov	sp, r7
 8024724:	bd80      	pop	{r7, pc}
 8024726:	bf00      	nop
 8024728:	200274f0 	.word	0x200274f0
 802472c:	20030000 	.word	0x20030000

08024730 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8024730:	b580      	push	{r7, lr}
 8024732:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8024734:	4805      	ldr	r0, [pc, #20]	; (802474c <TL_TRACES_Init+0x1c>)
 8024736:	f7ff fc85 	bl	8024044 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 802473a:	4b05      	ldr	r3, [pc, #20]	; (8024750 <TL_TRACES_Init+0x20>)
 802473c:	695b      	ldr	r3, [r3, #20]
 802473e:	4a03      	ldr	r2, [pc, #12]	; (802474c <TL_TRACES_Init+0x1c>)
 8024740:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8024742:	f001 ffc1 	bl	80266c8 <HW_IPCC_TRACES_Init>

  return;
 8024746:	bf00      	nop
}
 8024748:	bd80      	pop	{r7, pc}
 802474a:	bf00      	nop
 802474c:	200300b0 	.word	0x200300b0
 8024750:	20030000 	.word	0x20030000

08024754 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8024754:	b580      	push	{r7, lr}
 8024756:	b082      	sub	sp, #8
 8024758:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 802475a:	e008      	b.n	802476e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 802475c:	1d3b      	adds	r3, r7, #4
 802475e:	4619      	mov	r1, r3
 8024760:	4808      	ldr	r0, [pc, #32]	; (8024784 <HW_IPCC_TRACES_EvtNot+0x30>)
 8024762:	f7ff fd06 	bl	8024172 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8024766:	687b      	ldr	r3, [r7, #4]
 8024768:	4618      	mov	r0, r3
 802476a:	f7ec fd55 	bl	8011218 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 802476e:	4805      	ldr	r0, [pc, #20]	; (8024784 <HW_IPCC_TRACES_EvtNot+0x30>)
 8024770:	f7ff fc78 	bl	8024064 <LST_is_empty>
 8024774:	4603      	mov	r3, r0
 8024776:	2b00      	cmp	r3, #0
 8024778:	d0f0      	beq.n	802475c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 802477a:	bf00      	nop
}
 802477c:	3708      	adds	r7, #8
 802477e:	46bd      	mov	sp, r7
 8024780:	bd80      	pop	{r7, pc}
 8024782:	bf00      	nop
 8024784:	200300b0 	.word	0x200300b0

08024788 <__NVIC_SystemReset>:
{
 8024788:	b480      	push	{r7}
 802478a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 802478c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8024790:	4b05      	ldr	r3, [pc, #20]	; (80247a8 <__NVIC_SystemReset+0x20>)
 8024792:	68db      	ldr	r3, [r3, #12]
 8024794:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8024798:	4903      	ldr	r1, [pc, #12]	; (80247a8 <__NVIC_SystemReset+0x20>)
 802479a:	4b04      	ldr	r3, [pc, #16]	; (80247ac <__NVIC_SystemReset+0x24>)
 802479c:	4313      	orrs	r3, r2
 802479e:	60cb      	str	r3, [r1, #12]
 80247a0:	f3bf 8f4f 	dsb	sy
    __NOP();
 80247a4:	bf00      	nop
 80247a6:	e7fd      	b.n	80247a4 <__NVIC_SystemReset+0x1c>
 80247a8:	e000ed00 	.word	0xe000ed00
 80247ac:	05fa0004 	.word	0x05fa0004

080247b0 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 80247b0:	b480      	push	{r7}
 80247b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80247b4:	4b07      	ldr	r3, [pc, #28]	; (80247d4 <LL_FLASH_IsActiveFlag_OperationSuspended+0x24>)
 80247b6:	691b      	ldr	r3, [r3, #16]
 80247b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80247bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80247c0:	d101      	bne.n	80247c6 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 80247c2:	2301      	movs	r3, #1
 80247c4:	e000      	b.n	80247c8 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 80247c6:	2300      	movs	r3, #0
}
 80247c8:	4618      	mov	r0, r3
 80247ca:	46bd      	mov	sp, r7
 80247cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247d0:	4770      	bx	lr
 80247d2:	bf00      	nop
 80247d4:	58004000 	.word	0x58004000

080247d8 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80247d8:	b480      	push	{r7}
 80247da:	b083      	sub	sp, #12
 80247dc:	af00      	add	r7, sp, #0
 80247de:	6078      	str	r0, [r7, #4]
 80247e0:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80247e2:	687b      	ldr	r3, [r7, #4]
 80247e4:	683a      	ldr	r2, [r7, #0]
 80247e6:	3220      	adds	r2, #32
 80247e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80247ec:	4a05      	ldr	r2, [pc, #20]	; (8024804 <LL_HSEM_1StepLock+0x2c>)
 80247ee:	4293      	cmp	r3, r2
 80247f0:	d001      	beq.n	80247f6 <LL_HSEM_1StepLock+0x1e>
 80247f2:	2301      	movs	r3, #1
 80247f4:	e000      	b.n	80247f8 <LL_HSEM_1StepLock+0x20>
 80247f6:	2300      	movs	r3, #0
}
 80247f8:	4618      	mov	r0, r3
 80247fa:	370c      	adds	r7, #12
 80247fc:	46bd      	mov	sp, r7
 80247fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024802:	4770      	bx	lr
 8024804:	80000400 	.word	0x80000400

08024808 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8024808:	b480      	push	{r7}
 802480a:	b085      	sub	sp, #20
 802480c:	af00      	add	r7, sp, #0
 802480e:	60f8      	str	r0, [r7, #12]
 8024810:	60b9      	str	r1, [r7, #8]
 8024812:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8024814:	687b      	ldr	r3, [r7, #4]
 8024816:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 802481a:	68fb      	ldr	r3, [r7, #12]
 802481c:	68ba      	ldr	r2, [r7, #8]
 802481e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8024822:	bf00      	nop
 8024824:	3714      	adds	r7, #20
 8024826:	46bd      	mov	sp, r7
 8024828:	f85d 7b04 	ldr.w	r7, [sp], #4
 802482c:	4770      	bx	lr
	...

08024830 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8024830:	b580      	push	{r7, lr}
 8024832:	b082      	sub	sp, #8
 8024834:	af00      	add	r7, sp, #0
#ifdef OTA_ENABLED
	  /**
	   * This is a safe clear in case the engi bytes are not all written
	   * The error flag should be cleared before moving forward
	   */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8024836:	4b15      	ldr	r3, [pc, #84]	; (802488c <APP_THREAD_Init+0x5c>)
 8024838:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 802483c:	611a      	str	r2, [r3, #16]

	  APP_DBG("Delete_Sectors");
 802483e:	4a14      	ldr	r2, [pc, #80]	; (8024890 <APP_THREAD_Init+0x60>)
 8024840:	2101      	movs	r1, #1
 8024842:	2000      	movs	r0, #0
 8024844:	f7f0 fe36 	bl	80154b4 <logApplication>
	  Delete_Sectors();
 8024848:	f000 faea 	bl	8024e20 <Delete_Sectors>
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 802484c:	f000 fa50 	bl	8024cf0 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8024850:	4810      	ldr	r0, [pc, #64]	; (8024894 <APP_THREAD_Init+0x64>)
 8024852:	f001 fb39 	bl	8025ec8 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8024856:	2101      	movs	r1, #1
 8024858:	2002      	movs	r0, #2
 802485a:	f001 ff5d 	bl	8026718 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 802485e:	f001 fc2b 	bl	80260b8 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8024862:	f001 fc17 	bl	8026094 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8024866:	f7ff fa03 	bl	8023c70 <SHCI_C2_THREAD_Init>
 802486a:	4603      	mov	r3, r0
 802486c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 802486e:	4a0a      	ldr	r2, [pc, #40]	; (8024898 <APP_THREAD_Init+0x68>)
 8024870:	2100      	movs	r1, #0
 8024872:	480a      	ldr	r0, [pc, #40]	; (802489c <APP_THREAD_Init+0x6c>)
 8024874:	f7f9 fe3a 	bl	801e4ec <osThreadNew>
 8024878:	4602      	mov	r2, r0
 802487a:	4b09      	ldr	r3, [pc, #36]	; (80248a0 <APP_THREAD_Init+0x70>)
 802487c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 802487e:	f000 f897 	bl	80249b0 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8024882:	bf00      	nop
 8024884:	3708      	adds	r7, #8
 8024886:	46bd      	mov	sp, r7
 8024888:	bd80      	pop	{r7, pc}
 802488a:	bf00      	nop
 802488c:	58004000 	.word	0x58004000
 8024890:	08028200 	.word	0x08028200
 8024894:	20030838 	.word	0x20030838
 8024898:	08028dcc 	.word	0x08028dcc
 802489c:	08024dad 	.word	0x08024dad
 80248a0:	20027620 	.word	0x20027620

080248a4 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 80248a4:	b580      	push	{r7, lr}
 80248a6:	b082      	sub	sp, #8
 80248a8:	af00      	add	r7, sp, #0
 80248aa:	6078      	str	r0, [r7, #4]
 80248ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 80248ae:	687b      	ldr	r3, [r7, #4]
 80248b0:	2b1a      	cmp	r3, #26
 80248b2:	d861      	bhi.n	8024978 <APP_THREAD_Error+0xd4>
 80248b4:	a201      	add	r2, pc, #4	; (adr r2, 80248bc <APP_THREAD_Error+0x18>)
 80248b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80248ba:	bf00      	nop
 80248bc:	08024929 	.word	0x08024929
 80248c0:	08024933 	.word	0x08024933
 80248c4:	0802493d 	.word	0x0802493d
 80248c8:	08024947 	.word	0x08024947
 80248cc:	08024951 	.word	0x08024951
 80248d0:	0802495b 	.word	0x0802495b
 80248d4:	08024965 	.word	0x08024965
 80248d8:	08024979 	.word	0x08024979
 80248dc:	08024979 	.word	0x08024979
 80248e0:	08024979 	.word	0x08024979
 80248e4:	08024979 	.word	0x08024979
 80248e8:	08024979 	.word	0x08024979
 80248ec:	08024979 	.word	0x08024979
 80248f0:	08024979 	.word	0x08024979
 80248f4:	08024979 	.word	0x08024979
 80248f8:	08024979 	.word	0x08024979
 80248fc:	08024979 	.word	0x08024979
 8024900:	08024979 	.word	0x08024979
 8024904:	08024979 	.word	0x08024979
 8024908:	08024979 	.word	0x08024979
 802490c:	08024979 	.word	0x08024979
 8024910:	08024979 	.word	0x08024979
 8024914:	08024979 	.word	0x08024979
 8024918:	08024979 	.word	0x08024979
 802491c:	08024979 	.word	0x08024979
 8024920:	08024979 	.word	0x08024979
 8024924:	0802496f 	.word	0x0802496f
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8024928:	6839      	ldr	r1, [r7, #0]
 802492a:	4818      	ldr	r0, [pc, #96]	; (802498c <APP_THREAD_Error+0xe8>)
 802492c:	f000 f9d4 	bl	8024cd8 <APP_THREAD_TraceError>
    break;
 8024930:	e027      	b.n	8024982 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8024932:	6839      	ldr	r1, [r7, #0]
 8024934:	4816      	ldr	r0, [pc, #88]	; (8024990 <APP_THREAD_Error+0xec>)
 8024936:	f000 f9cf 	bl	8024cd8 <APP_THREAD_TraceError>
    break;
 802493a:	e022      	b.n	8024982 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 802493c:	6839      	ldr	r1, [r7, #0]
 802493e:	4815      	ldr	r0, [pc, #84]	; (8024994 <APP_THREAD_Error+0xf0>)
 8024940:	f000 f9ca 	bl	8024cd8 <APP_THREAD_TraceError>
    break;
 8024944:	e01d      	b.n	8024982 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8024946:	6839      	ldr	r1, [r7, #0]
 8024948:	4813      	ldr	r0, [pc, #76]	; (8024998 <APP_THREAD_Error+0xf4>)
 802494a:	f000 f9c5 	bl	8024cd8 <APP_THREAD_TraceError>
    break;
 802494e:	e018      	b.n	8024982 <APP_THREAD_Error+0xde>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8024950:	6839      	ldr	r1, [r7, #0]
 8024952:	4812      	ldr	r0, [pc, #72]	; (802499c <APP_THREAD_Error+0xf8>)
 8024954:	f000 f9c0 	bl	8024cd8 <APP_THREAD_TraceError>
    break;
 8024958:	e013      	b.n	8024982 <APP_THREAD_Error+0xde>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 802495a:	6839      	ldr	r1, [r7, #0]
 802495c:	4810      	ldr	r0, [pc, #64]	; (80249a0 <APP_THREAD_Error+0xfc>)
 802495e:	f000 f9bb 	bl	8024cd8 <APP_THREAD_TraceError>
    break;
 8024962:	e00e      	b.n	8024982 <APP_THREAD_Error+0xde>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8024964:	6839      	ldr	r1, [r7, #0]
 8024966:	480f      	ldr	r0, [pc, #60]	; (80249a4 <APP_THREAD_Error+0x100>)
 8024968:	f000 f9b6 	bl	8024cd8 <APP_THREAD_TraceError>
    break;
 802496c:	e009      	b.n	8024982 <APP_THREAD_Error+0xde>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 802496e:	6839      	ldr	r1, [r7, #0]
 8024970:	480d      	ldr	r0, [pc, #52]	; (80249a8 <APP_THREAD_Error+0x104>)
 8024972:	f000 f9b1 	bl	8024cd8 <APP_THREAD_TraceError>
    break;
 8024976:	e004      	b.n	8024982 <APP_THREAD_Error+0xde>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8024978:	2100      	movs	r1, #0
 802497a:	480c      	ldr	r0, [pc, #48]	; (80249ac <APP_THREAD_Error+0x108>)
 802497c:	f000 f9ac 	bl	8024cd8 <APP_THREAD_TraceError>
    break;
 8024980:	bf00      	nop
  }
}
 8024982:	bf00      	nop
 8024984:	3708      	adds	r7, #8
 8024986:	46bd      	mov	sp, r7
 8024988:	bd80      	pop	{r7, pc}
 802498a:	bf00      	nop
 802498c:	08028210 	.word	0x08028210
 8024990:	08028234 	.word	0x08028234
 8024994:	08028258 	.word	0x08028258
 8024998:	08028278 	.word	0x08028278
 802499c:	08028298 	.word	0x08028298
 80249a0:	080282b8 	.word	0x080282b8
 80249a4:	080282d4 	.word	0x080282d4
 80249a8:	08028300 	.word	0x08028300
 80249ac:	08028324 	.word	0x08028324

080249b0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 80249b0:	b590      	push	{r4, r7, lr}
 80249b2:	b083      	sub	sp, #12
 80249b4:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 80249b6:	2000      	movs	r0, #0
 80249b8:	f7fe fd4a 	bl	8023450 <otInstanceErasePersistentInfo>
 80249bc:	4603      	mov	r3, r0
 80249be:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80249c0:	79fb      	ldrb	r3, [r7, #7]
 80249c2:	2b00      	cmp	r3, #0
 80249c4:	d004      	beq.n	80249d0 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 80249c6:	79fb      	ldrb	r3, [r7, #7]
 80249c8:	4619      	mov	r1, r3
 80249ca:	2006      	movs	r0, #6
 80249cc:	f7ff ff6a 	bl	80248a4 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 80249d0:	2000      	movs	r0, #0
 80249d2:	f7fe fce0 	bl	8023396 <otInstanceFinalize>
  otInstanceInitSingle();
 80249d6:	f7fe fcb7 	bl	8023348 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 80249da:	2200      	movs	r2, #0
 80249dc:	4981      	ldr	r1, [pc, #516]	; (8024be4 <APP_THREAD_DeviceConfig+0x234>)
 80249de:	2000      	movs	r0, #0
 80249e0:	f7fe fd00 	bl	80233e4 <otSetStateChangedCallback>
 80249e4:	4603      	mov	r3, r0
 80249e6:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80249e8:	79fb      	ldrb	r3, [r7, #7]
 80249ea:	2b00      	cmp	r3, #0
 80249ec:	d004      	beq.n	80249f8 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 80249ee:	79fb      	ldrb	r3, [r7, #7]
 80249f0:	4619      	mov	r1, r3
 80249f2:	2001      	movs	r0, #1
 80249f4:	f7ff ff56 	bl	80248a4 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 80249f8:	2117      	movs	r1, #23
 80249fa:	2000      	movs	r0, #0
 80249fc:	f7fe fde9 	bl	80235d2 <otLinkSetChannel>
 8024a00:	4603      	mov	r3, r0
 8024a02:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8024a04:	79fb      	ldrb	r3, [r7, #7]
 8024a06:	2b00      	cmp	r3, #0
 8024a08:	d004      	beq.n	8024a14 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8024a0a:	79fb      	ldrb	r3, [r7, #7]
 8024a0c:	4619      	mov	r1, r3
 8024a0e:	2002      	movs	r0, #2
 8024a10:	f7ff ff48 	bl	80248a4 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8024a14:	f241 2134 	movw	r1, #4660	; 0x1234
 8024a18:	2000      	movs	r0, #0
 8024a1a:	f7fe fe0a 	bl	8023632 <otLinkSetPanId>
 8024a1e:	4603      	mov	r3, r0
 8024a20:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8024a22:	79fb      	ldrb	r3, [r7, #7]
 8024a24:	2b00      	cmp	r3, #0
 8024a26:	d004      	beq.n	8024a32 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8024a28:	79fb      	ldrb	r3, [r7, #7]
 8024a2a:	4619      	mov	r1, r3
 8024a2c:	2003      	movs	r0, #3
 8024a2e:	f7ff ff39 	bl	80248a4 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8024a32:	2101      	movs	r1, #1
 8024a34:	2000      	movs	r0, #0
 8024a36:	f7fe fd34 	bl	80234a2 <otIp6SetEnabled>
 8024a3a:	4603      	mov	r3, r0
 8024a3c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8024a3e:	79fb      	ldrb	r3, [r7, #7]
 8024a40:	2b00      	cmp	r3, #0
 8024a42:	d004      	beq.n	8024a4e <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8024a44:	79fb      	ldrb	r3, [r7, #7]
 8024a46:	4619      	mov	r1, r3
 8024a48:	2004      	movs	r0, #4
 8024a4a:	f7ff ff2b 	bl	80248a4 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8024a4e:	2101      	movs	r1, #1
 8024a50:	2000      	movs	r0, #0
 8024a52:	f7ff fbab 	bl	80241ac <otThreadSetEnabled>
 8024a56:	4603      	mov	r3, r0
 8024a58:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8024a5a:	79fb      	ldrb	r3, [r7, #7]
 8024a5c:	2b00      	cmp	r3, #0
 8024a5e:	d004      	beq.n	8024a6a <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8024a60:	79fb      	ldrb	r3, [r7, #7]
 8024a62:	4619      	mov	r1, r3
 8024a64:	2005      	movs	r0, #5
 8024a66:	f7ff ff1d 	bl	80248a4 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
	error = otThreadSetEnabled(NULL, false);
 8024a6a:	2100      	movs	r1, #0
 8024a6c:	2000      	movs	r0, #0
 8024a6e:	f7ff fb9d 	bl	80241ac <otThreadSetEnabled>
 8024a72:	4603      	mov	r3, r0
 8024a74:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8024a76:	79fb      	ldrb	r3, [r7, #7]
 8024a78:	2b00      	cmp	r3, #0
 8024a7a:	d004      	beq.n	8024a86 <APP_THREAD_DeviceConfig+0xd6>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8024a7c:	79fb      	ldrb	r3, [r7, #7]
 8024a7e:	4619      	mov	r1, r3
 8024a80:	2005      	movs	r0, #5
 8024a82:	f7ff ff0f 	bl	80248a4 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, false);
 8024a86:	2100      	movs	r1, #0
 8024a88:	2000      	movs	r0, #0
 8024a8a:	f7fe fd0a 	bl	80234a2 <otIp6SetEnabled>
 8024a8e:	4603      	mov	r3, r0
 8024a90:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8024a92:	79fb      	ldrb	r3, [r7, #7]
 8024a94:	2b00      	cmp	r3, #0
 8024a96:	d004      	beq.n	8024aa2 <APP_THREAD_DeviceConfig+0xf2>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8024a98:	79fb      	ldrb	r3, [r7, #7]
 8024a9a:	4619      	mov	r1, r3
 8024a9c:	2004      	movs	r0, #4
 8024a9e:	f7ff ff01 	bl	80248a4 <APP_THREAD_Error>
	}

	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8024aa2:	2106      	movs	r1, #6
 8024aa4:	2000      	movs	r0, #0
 8024aa6:	f7ff f893 	bl	8023bd0 <otPlatRadioSetTransmitPower>
 8024aaa:	4603      	mov	r3, r0
 8024aac:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8024aae:	79fb      	ldrb	r3, [r7, #7]
 8024ab0:	2b00      	cmp	r3, #0
 8024ab2:	d004      	beq.n	8024abe <APP_THREAD_DeviceConfig+0x10e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8024ab4:	79fb      	ldrb	r3, [r7, #7]
 8024ab6:	4619      	mov	r1, r3
 8024ab8:	2002      	movs	r0, #2
 8024aba:	f7ff fef3 	bl	80248a4 <APP_THREAD_Error>
	}

	otChildSupervisionSetCheckTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 8024abe:	2103      	movs	r1, #3
 8024ac0:	2000      	movs	r0, #0
 8024ac2:	f7fe f8d7 	bl	8022c74 <otChildSupervisionSetCheckTimeout>
	otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);
 8024ac6:	2102      	movs	r1, #2
 8024ac8:	2000      	movs	r0, #0
 8024aca:	f7fe f8a4 	bl	8022c16 <otChildSupervisionSetInterval>

//   error = otIp6AddressFromString("ff12::1", &multicastAddr);
//   error = otIp6SubscribeMulticastAddress(NULL, &multicastAddr);

	error = otThreadSetMasterKey(NULL, &masterKey);
 8024ace:	4946      	ldr	r1, [pc, #280]	; (8024be8 <APP_THREAD_DeviceConfig+0x238>)
 8024ad0:	2000      	movs	r0, #0
 8024ad2:	f7ff fbca 	bl	802426a <otThreadSetMasterKey>
 8024ad6:	4603      	mov	r3, r0
 8024ad8:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8024ada:	79fb      	ldrb	r3, [r7, #7]
 8024adc:	2b00      	cmp	r3, #0
 8024ade:	d004      	beq.n	8024aea <APP_THREAD_DeviceConfig+0x13a>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8024ae0:	79fb      	ldrb	r3, [r7, #7]
 8024ae2:	4619      	mov	r1, r3
 8024ae4:	2002      	movs	r0, #2
 8024ae6:	f7ff fedd 	bl	80248a4 <APP_THREAD_Error>
	}

	error = otThreadSetNetworkName(NULL, networkName);
 8024aea:	4940      	ldr	r1, [pc, #256]	; (8024bec <APP_THREAD_DeviceConfig+0x23c>)
 8024aec:	2000      	movs	r0, #0
 8024aee:	f7ff fc13 	bl	8024318 <otThreadSetNetworkName>
 8024af2:	4603      	mov	r3, r0
 8024af4:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8024af6:	79fb      	ldrb	r3, [r7, #7]
 8024af8:	2b00      	cmp	r3, #0
 8024afa:	d004      	beq.n	8024b06 <APP_THREAD_DeviceConfig+0x156>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8024afc:	79fb      	ldrb	r3, [r7, #7]
 8024afe:	4619      	mov	r1, r3
 8024b00:	2002      	movs	r0, #2
 8024b02:	f7ff fecf 	bl	80248a4 <APP_THREAD_Error>
	}
	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
 8024b06:	493a      	ldr	r1, [pc, #232]	; (8024bf0 <APP_THREAD_DeviceConfig+0x240>)
 8024b08:	2000      	movs	r0, #0
 8024b0a:	f7ff fb7f 	bl	802420c <otThreadSetExtendedPanId>
 8024b0e:	4603      	mov	r3, r0
 8024b10:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8024b12:	79fb      	ldrb	r3, [r7, #7]
 8024b14:	2b00      	cmp	r3, #0
 8024b16:	d004      	beq.n	8024b22 <APP_THREAD_DeviceConfig+0x172>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8024b18:	79fb      	ldrb	r3, [r7, #7]
 8024b1a:	4619      	mov	r1, r3
 8024b1c:	2002      	movs	r0, #2
 8024b1e:	f7ff fec1 	bl	80248a4 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, true);
 8024b22:	2101      	movs	r1, #1
 8024b24:	2000      	movs	r0, #0
 8024b26:	f7fe fcbc 	bl	80234a2 <otIp6SetEnabled>
 8024b2a:	4603      	mov	r3, r0
 8024b2c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8024b2e:	79fb      	ldrb	r3, [r7, #7]
 8024b30:	2b00      	cmp	r3, #0
 8024b32:	d004      	beq.n	8024b3e <APP_THREAD_DeviceConfig+0x18e>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8024b34:	79fb      	ldrb	r3, [r7, #7]
 8024b36:	4619      	mov	r1, r3
 8024b38:	2004      	movs	r0, #4
 8024b3a:	f7ff feb3 	bl	80248a4 <APP_THREAD_Error>
	}

	error = otThreadSetEnabled(NULL, true);
 8024b3e:	2101      	movs	r1, #1
 8024b40:	2000      	movs	r0, #0
 8024b42:	f7ff fb33 	bl	80241ac <otThreadSetEnabled>
 8024b46:	4603      	mov	r3, r0
 8024b48:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8024b4a:	79fb      	ldrb	r3, [r7, #7]
 8024b4c:	2b00      	cmp	r3, #0
 8024b4e:	d004      	beq.n	8024b5a <APP_THREAD_DeviceConfig+0x1aa>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8024b50:	79fb      	ldrb	r3, [r7, #7]
 8024b52:	4619      	mov	r1, r3
 8024b54:	2005      	movs	r0, #5
 8024b56:	f7ff fea5 	bl	80248a4 <APP_THREAD_Error>
	}

	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8024b5a:	f241 6133 	movw	r1, #5683	; 0x1633
 8024b5e:	2000      	movs	r0, #0
 8024b60:	f7fe fb60 	bl	8023224 <otCoapStart>
 8024b64:	4603      	mov	r3, r0
 8024b66:	71fb      	strb	r3, [r7, #7]
	//  error = otCoapAddResource(NULL, &OT_Light_Ressource);
	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8024b68:	4922      	ldr	r1, [pc, #136]	; (8024bf4 <APP_THREAD_DeviceConfig+0x244>)
 8024b6a:	2000      	movs	r0, #0
 8024b6c:	f7fe fb8a 	bl	8023284 <otCoapAddResource>
 8024b70:	4603      	mov	r3, r0
 8024b72:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 8024b74:	4920      	ldr	r1, [pc, #128]	; (8024bf8 <APP_THREAD_DeviceConfig+0x248>)
 8024b76:	2000      	movs	r0, #0
 8024b78:	f7fe fb84 	bl	8023284 <otCoapAddResource>
 8024b7c:	4603      	mov	r3, r0
 8024b7e:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 8024b80:	491e      	ldr	r1, [pc, #120]	; (8024bfc <APP_THREAD_DeviceConfig+0x24c>)
 8024b82:	2000      	movs	r0, #0
 8024b84:	f7fe fb7e 	bl	8023284 <otCoapAddResource>
 8024b88:	4603      	mov	r3, r0
 8024b8a:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);
 8024b8c:	491c      	ldr	r1, [pc, #112]	; (8024c00 <APP_THREAD_DeviceConfig+0x250>)
 8024b8e:	2000      	movs	r0, #0
 8024b90:	f7fe fb78 	bl	8023284 <otCoapAddResource>
 8024b94:	4603      	mov	r3, r0
 8024b96:	71fb      	strb	r3, [r7, #7]
#ifdef OTA_ENABLED
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaProvisioning);
 8024b98:	491a      	ldr	r1, [pc, #104]	; (8024c04 <APP_THREAD_DeviceConfig+0x254>)
 8024b9a:	2000      	movs	r0, #0
 8024b9c:	f7fe fb72 	bl	8023284 <otCoapAddResource>
 8024ba0:	4603      	mov	r3, r0
 8024ba2:	71fb      	strb	r3, [r7, #7]
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaParameters);
 8024ba4:	4918      	ldr	r1, [pc, #96]	; (8024c08 <APP_THREAD_DeviceConfig+0x258>)
 8024ba6:	2000      	movs	r0, #0
 8024ba8:	f7fe fb6c 	bl	8023284 <otCoapAddResource>
 8024bac:	4603      	mov	r3, r0
 8024bae:	71fb      	strb	r3, [r7, #7]
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaSend);
 8024bb0:	4916      	ldr	r1, [pc, #88]	; (8024c0c <APP_THREAD_DeviceConfig+0x25c>)
 8024bb2:	2000      	movs	r0, #0
 8024bb4:	f7fe fb66 	bl	8023284 <otCoapAddResource>
 8024bb8:	4603      	mov	r3, r0
 8024bba:	71fb      	strb	r3, [r7, #7]
#ifndef DONGLE_CODE
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
#endif
	// set default multicast address for border router
//    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
	otIp6AddressFromString("ff03::1", &multicastAddr);
 8024bbc:	4914      	ldr	r1, [pc, #80]	; (8024c10 <APP_THREAD_DeviceConfig+0x260>)
 8024bbe:	4815      	ldr	r0, [pc, #84]	; (8024c14 <APP_THREAD_DeviceConfig+0x264>)
 8024bc0:	f7fe fcd5 	bl	802356e <otIp6AddressFromString>
	memcpy(&borderRouter.ipv6, &multicastAddr, sizeof(multicastAddr));
 8024bc4:	4a14      	ldr	r2, [pc, #80]	; (8024c18 <APP_THREAD_DeviceConfig+0x268>)
 8024bc6:	4b12      	ldr	r3, [pc, #72]	; (8024c10 <APP_THREAD_DeviceConfig+0x260>)
 8024bc8:	4614      	mov	r4, r2
 8024bca:	6818      	ldr	r0, [r3, #0]
 8024bcc:	6859      	ldr	r1, [r3, #4]
 8024bce:	689a      	ldr	r2, [r3, #8]
 8024bd0:	68db      	ldr	r3, [r3, #12]
 8024bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// set UID in local state variable
//	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
//	 = UID64_BASE;
	stm32UID(msgSendMyIP.uid);
 8024bd4:	4811      	ldr	r0, [pc, #68]	; (8024c1c <APP_THREAD_DeviceConfig+0x26c>)
 8024bd6:	f000 f903 	bl	8024de0 <stm32UID>

  /* USER CODE END DEVICECONFIG */
}
 8024bda:	bf00      	nop
 8024bdc:	370c      	adds	r7, #12
 8024bde:	46bd      	mov	sp, r7
 8024be0:	bd90      	pop	{r4, r7, pc}
 8024be2:	bf00      	nop
 8024be4:	08024c21 	.word	0x08024c21
 8024be8:	08028e44 	.word	0x08028e44
 8024bec:	08028e5c 	.word	0x08028e5c
 8024bf0:	08028e54 	.word	0x08028e54
 8024bf4:	20000088 	.word	0x20000088
 8024bf8:	20000098 	.word	0x20000098
 8024bfc:	200000a8 	.word	0x200000a8
 8024c00:	200000b8 	.word	0x200000b8
 8024c04:	200000e8 	.word	0x200000e8
 8024c08:	200000f8 	.word	0x200000f8
 8024c0c:	20000108 	.word	0x20000108
 8024c10:	20028938 	.word	0x20028938
 8024c14:	08028334 	.word	0x08028334
 8024c18:	200276f0 	.word	0x200276f0
 8024c1c:	200000e0 	.word	0x200000e0

08024c20 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8024c20:	b590      	push	{r4, r7, lr}
 8024c22:	b083      	sub	sp, #12
 8024c24:	af00      	add	r7, sp, #0
 8024c26:	6078      	str	r0, [r7, #4]
 8024c28:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8024c2a:	687b      	ldr	r3, [r7, #4]
 8024c2c:	f003 0304 	and.w	r3, r3, #4
 8024c30:	2b00      	cmp	r3, #0
 8024c32:	d04a      	beq.n	8024cca <APP_THREAD_StateNotif+0xaa>
  {
    switch (otThreadGetDeviceRole(NULL))
 8024c34:	2000      	movs	r0, #0
 8024c36:	f7ff fb9e 	bl	8024376 <otThreadGetDeviceRole>
 8024c3a:	4603      	mov	r3, r0
 8024c3c:	2b04      	cmp	r3, #4
 8024c3e:	d841      	bhi.n	8024cc4 <APP_THREAD_StateNotif+0xa4>
 8024c40:	a201      	add	r2, pc, #4	; (adr r2, 8024c48 <APP_THREAD_StateNotif+0x28>)
 8024c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024c46:	bf00      	nop
 8024c48:	08024c5d 	.word	0x08024c5d
 8024c4c:	08024c6d 	.word	0x08024c6d
 8024c50:	08024c7d 	.word	0x08024c7d
 8024c54:	08024c95 	.word	0x08024c95
 8024c58:	08024cad 	.word	0x08024cad
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
			borderRouter.epoch = 0;
 8024c5c:	4a1d      	ldr	r2, [pc, #116]	; (8024cd4 <APP_THREAD_StateNotif+0xb4>)
 8024c5e:	f04f 0300 	mov.w	r3, #0
 8024c62:	f04f 0400 	mov.w	r4, #0
 8024c66:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 8024c6a:	e02f      	b.n	8024ccc <APP_THREAD_StateNotif+0xac>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
			borderRouter.epoch = 0;
 8024c6c:	4a19      	ldr	r2, [pc, #100]	; (8024cd4 <APP_THREAD_StateNotif+0xb4>)
 8024c6e:	f04f 0300 	mov.w	r3, #0
 8024c72:	f04f 0400 	mov.w	r4, #0
 8024c76:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 8024c7a:	e027      	b.n	8024ccc <APP_THREAD_StateNotif+0xac>
    case OT_DEVICE_ROLE_CHILD:
      /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
 8024c7c:	2001      	movs	r0, #1
 8024c7e:	f7ef fa21 	bl	80140c4 <BSP_LED_On>
			BSP_LED_Off(LED_RED);
 8024c82:	2002      	movs	r0, #2
 8024c84:	f7ef fa38 	bl	80140f8 <BSP_LED_Off>
			BSP_LED_Off(LED_BLUE);
 8024c88:	2000      	movs	r0, #0
 8024c8a:	f7ef fa35 	bl	80140f8 <BSP_LED_Off>
#endif
			APP_THREAD_UpdateBorderRouter();
 8024c8e:	f000 fd47 	bl	8025720 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 8024c92:	e01b      	b.n	8024ccc <APP_THREAD_StateNotif+0xac>
    case OT_DEVICE_ROLE_ROUTER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_ROUTER */
#ifdef DONGLE_CODE
			BSP_LED_Off(LED_GREEN);
 8024c94:	2001      	movs	r0, #1
 8024c96:	f7ef fa2f 	bl	80140f8 <BSP_LED_Off>
			BSP_LED_Off(LED_RED);
 8024c9a:	2002      	movs	r0, #2
 8024c9c:	f7ef fa2c 	bl	80140f8 <BSP_LED_Off>
			BSP_LED_On(LED_BLUE);
 8024ca0:	2000      	movs	r0, #0
 8024ca2:	f7ef fa0f 	bl	80140c4 <BSP_LED_On>
#endif
			APP_THREAD_UpdateBorderRouter();
 8024ca6:	f000 fd3b 	bl	8025720 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 8024caa:	e00f      	b.n	8024ccc <APP_THREAD_StateNotif+0xac>
    case OT_DEVICE_ROLE_LEADER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_LEADER */
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
 8024cac:	2001      	movs	r0, #1
 8024cae:	f7ef fa09 	bl	80140c4 <BSP_LED_On>
			BSP_LED_Off(LED_RED);
 8024cb2:	2002      	movs	r0, #2
 8024cb4:	f7ef fa20 	bl	80140f8 <BSP_LED_Off>
			BSP_LED_On(LED_BLUE);
 8024cb8:	2000      	movs	r0, #0
 8024cba:	f7ef fa03 	bl	80140c4 <BSP_LED_On>
#endif
			APP_THREAD_UpdateBorderRouter();
 8024cbe:	f000 fd2f 	bl	8025720 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 8024cc2:	e003      	b.n	8024ccc <APP_THREAD_StateNotif+0xac>
    default:
      /* USER CODE BEGIN DEFAULT */
			APP_THREAD_UpdateBorderRouter();
 8024cc4:	f000 fd2c 	bl	8025720 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END DEFAULT */
      break;
 8024cc8:	e000      	b.n	8024ccc <APP_THREAD_StateNotif+0xac>
    }
  }
 8024cca:	bf00      	nop
}
 8024ccc:	bf00      	nop
 8024cce:	370c      	adds	r7, #12
 8024cd0:	46bd      	mov	sp, r7
 8024cd2:	bd90      	pop	{r4, r7, pc}
 8024cd4:	200276f0 	.word	0x200276f0

08024cd8 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8024cd8:	b480      	push	{r7}
 8024cda:	b083      	sub	sp, #12
 8024cdc:	af00      	add	r7, sp, #0
 8024cde:	6078      	str	r0, [r7, #4]
 8024ce0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 8024ce2:	bf00      	nop
 8024ce4:	370c      	adds	r7, #12
 8024ce6:	46bd      	mov	sp, r7
 8024ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cec:	4770      	bx	lr
	...

08024cf0 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8024cf0:	b580      	push	{r7, lr}
 8024cf2:	b088      	sub	sp, #32
 8024cf4:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8024cf6:	1d3b      	adds	r3, r7, #4
 8024cf8:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8024cfa:	6978      	ldr	r0, [r7, #20]
 8024cfc:	f7fe ffe4 	bl	8023cc8 <SHCI_GetWirelessFwInfo>
 8024d00:	4603      	mov	r3, r0
 8024d02:	2b00      	cmp	r3, #0
 8024d04:	d004      	beq.n	8024d10 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8024d06:	2101      	movs	r1, #1
 8024d08:	201a      	movs	r0, #26
 8024d0a:	f7ff fdcb 	bl	80248a4 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8024d0e:	e03d      	b.n	8024d8c <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8024d10:	4a20      	ldr	r2, [pc, #128]	; (8024d94 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8024d12:	2101      	movs	r1, #1
 8024d14:	2000      	movs	r0, #0
 8024d16:	f7f0 fbcd 	bl	80154b4 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8024d1a:	4a1f      	ldr	r2, [pc, #124]	; (8024d98 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8024d1c:	2101      	movs	r1, #1
 8024d1e:	2000      	movs	r0, #0
 8024d20:	f7f0 fbc8 	bl	80154b4 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8024d24:	697b      	ldr	r3, [r7, #20]
 8024d26:	781b      	ldrb	r3, [r3, #0]
 8024d28:	4619      	mov	r1, r3
 8024d2a:	697b      	ldr	r3, [r7, #20]
 8024d2c:	785b      	ldrb	r3, [r3, #1]
 8024d2e:	461a      	mov	r2, r3
 8024d30:	697b      	ldr	r3, [r7, #20]
 8024d32:	789b      	ldrb	r3, [r3, #2]
 8024d34:	9301      	str	r3, [sp, #4]
 8024d36:	9200      	str	r2, [sp, #0]
 8024d38:	460b      	mov	r3, r1
 8024d3a:	4a18      	ldr	r2, [pc, #96]	; (8024d9c <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8024d3c:	2101      	movs	r1, #1
 8024d3e:	2000      	movs	r0, #0
 8024d40:	f7f0 fbb8 	bl	80154b4 <logApplication>
    switch(p_wireless_info->StackType)
 8024d44:	697b      	ldr	r3, [r7, #20]
 8024d46:	7a5b      	ldrb	r3, [r3, #9]
 8024d48:	2b11      	cmp	r3, #17
 8024d4a:	d009      	beq.n	8024d60 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8024d4c:	2b50      	cmp	r3, #80	; 0x50
 8024d4e:	d00d      	beq.n	8024d6c <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8024d50:	2b10      	cmp	r3, #16
 8024d52:	d111      	bne.n	8024d78 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8024d54:	4a12      	ldr	r2, [pc, #72]	; (8024da0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8024d56:	2101      	movs	r1, #1
 8024d58:	2000      	movs	r0, #0
 8024d5a:	f7f0 fbab 	bl	80154b4 <logApplication>
      break;
 8024d5e:	e010      	b.n	8024d82 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 8024d60:	4a10      	ldr	r2, [pc, #64]	; (8024da4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 8024d62:	2101      	movs	r1, #1
 8024d64:	2000      	movs	r0, #0
 8024d66:	f7f0 fba5 	bl	80154b4 <logApplication>
      break;
 8024d6a:	e00a      	b.n	8024d82 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8024d6c:	4a0e      	ldr	r2, [pc, #56]	; (8024da8 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 8024d6e:	2101      	movs	r1, #1
 8024d70:	2000      	movs	r0, #0
 8024d72:	f7f0 fb9f 	bl	80154b4 <logApplication>
      break;
 8024d76:	e004      	b.n	8024d82 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8024d78:	2101      	movs	r1, #1
 8024d7a:	201a      	movs	r0, #26
 8024d7c:	f7ff fd92 	bl	80248a4 <APP_THREAD_Error>
      break;
 8024d80:	bf00      	nop
    APP_DBG("**********************************************************");
 8024d82:	4a04      	ldr	r2, [pc, #16]	; (8024d94 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8024d84:	2101      	movs	r1, #1
 8024d86:	2000      	movs	r0, #0
 8024d88:	f7f0 fb94 	bl	80154b4 <logApplication>
}
 8024d8c:	bf00      	nop
 8024d8e:	3718      	adds	r7, #24
 8024d90:	46bd      	mov	sp, r7
 8024d92:	bd80      	pop	{r7, pc}
 8024d94:	0802833c 	.word	0x0802833c
 8024d98:	08028378 	.word	0x08028378
 8024d9c:	08028394 	.word	0x08028394
 8024da0:	080283ac 	.word	0x080283ac
 8024da4:	080283c4 	.word	0x080283c4
 8024da8:	080283dc 	.word	0x080283dc

08024dac <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8024dac:	b580      	push	{r7, lr}
 8024dae:	b082      	sub	sp, #8
 8024db0:	af00      	add	r7, sp, #0
 8024db2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8024db4:	f04f 32ff 	mov.w	r2, #4294967295
 8024db8:	2101      	movs	r1, #1
 8024dba:	2001      	movs	r0, #1
 8024dbc:	f7f9 fcf4 	bl	801e7a8 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8024dc0:	f001 f9ac 	bl	802611c <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8024dc4:	e7f6      	b.n	8024db4 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08024dc6 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8024dc6:	b580      	push	{r7, lr}
 8024dc8:	b082      	sub	sp, #8
 8024dca:	af00      	add	r7, sp, #0
 8024dcc:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8024dce:	f04f 32ff 	mov.w	r2, #4294967295
 8024dd2:	2101      	movs	r1, #1
 8024dd4:	2001      	movs	r0, #1
 8024dd6:	f7f9 fce7 	bl	801e7a8 <osThreadFlagsWait>
    Send_CLI_To_M0();
 8024dda:	f001 f921 	bl	8026020 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8024dde:	e7f6      	b.n	8024dce <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08024de0 <stm32UID>:
  }
}
#endif /* (CFG_FULL_LOW_POWER == 0) */

/* USER CODE BEGIN FREERTOS_WRAPPER_FUNCTIONS */
void stm32UID(uint8_t* uid) {
 8024de0:	b480      	push	{r7}
 8024de2:	b085      	sub	sp, #20
 8024de4:	af00      	add	r7, sp, #0
 8024de6:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < 12; i++) {
 8024de8:	2300      	movs	r3, #0
 8024dea:	73fb      	strb	r3, [r7, #15]
 8024dec:	e00c      	b.n	8024e08 <stm32UID+0x28>
    uid[i] = *(volatile uint8_t *)(UID_BASE + i);
 8024dee:	7bfa      	ldrb	r2, [r7, #15]
 8024df0:	4b0a      	ldr	r3, [pc, #40]	; (8024e1c <stm32UID+0x3c>)
 8024df2:	4413      	add	r3, r2
 8024df4:	4619      	mov	r1, r3
 8024df6:	7bfb      	ldrb	r3, [r7, #15]
 8024df8:	687a      	ldr	r2, [r7, #4]
 8024dfa:	4413      	add	r3, r2
 8024dfc:	780a      	ldrb	r2, [r1, #0]
 8024dfe:	b2d2      	uxtb	r2, r2
 8024e00:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 12; i++) {
 8024e02:	7bfb      	ldrb	r3, [r7, #15]
 8024e04:	3301      	adds	r3, #1
 8024e06:	73fb      	strb	r3, [r7, #15]
 8024e08:	7bfb      	ldrb	r3, [r7, #15]
 8024e0a:	2b0b      	cmp	r3, #11
 8024e0c:	d9ef      	bls.n	8024dee <stm32UID+0xe>
    }
  }
 8024e0e:	bf00      	nop
 8024e10:	3714      	adds	r7, #20
 8024e12:	46bd      	mov	sp, r7
 8024e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e18:	4770      	bx	lr
 8024e1a:	bf00      	nop
 8024e1c:	1fff7590 	.word	0x1fff7590

08024e20 <Delete_Sectors>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */

#ifdef OTA_ENABLED
static void Delete_Sectors( void )
{
 8024e20:	b590      	push	{r4, r7, lr}
 8024e22:	b08b      	sub	sp, #44	; 0x2c
 8024e24:	af04      	add	r7, sp, #16

  uint32_t page_error;
  FLASH_EraseInitTypeDef p_erase_init;
  uint32_t first_secure_sector_idx;

  first_secure_sector_idx = (READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos);
 8024e26:	4b25      	ldr	r3, [pc, #148]	; (8024ebc <Delete_Sectors+0x9c>)
 8024e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8024e2c:	b2db      	uxtb	r3, r3
 8024e2e:	617b      	str	r3, [r7, #20]

  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8024e30:	2302      	movs	r3, #2
 8024e32:	607b      	str	r3, [r7, #4]
  p_erase_init.Page = *((uint8_t*) SRAM1_BASE + 1);
 8024e34:	4b22      	ldr	r3, [pc, #136]	; (8024ec0 <Delete_Sectors+0xa0>)
 8024e36:	781b      	ldrb	r3, [r3, #0]
 8024e38:	60bb      	str	r3, [r7, #8]
  if(p_erase_init.Page < (CFG_APP_START_SECTOR_INDEX - 1))
 8024e3a:	68bb      	ldr	r3, [r7, #8]
 8024e3c:	2b0e      	cmp	r3, #14
 8024e3e:	d805      	bhi.n	8024e4c <Delete_Sectors+0x2c>
  {
    /**
     * Something has been wrong as there is no case we should delete the BLE_Ota application
     * Reboot on the firmware application
     */
    *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_FW_APP;
 8024e40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8024e44:	2200      	movs	r2, #0
 8024e46:	701a      	strb	r2, [r3, #0]
    NVIC_SystemReset();
 8024e48:	f7ff fc9e 	bl	8024788 <__NVIC_SystemReset>
  }
  p_erase_init.NbPages = *((uint8_t*) SRAM1_BASE + 2);
 8024e4c:	4b1d      	ldr	r3, [pc, #116]	; (8024ec4 <Delete_Sectors+0xa4>)
 8024e4e:	781b      	ldrb	r3, [r3, #0]
 8024e50:	60fb      	str	r3, [r7, #12]

  if ((p_erase_init.Page + p_erase_init.NbPages) > first_secure_sector_idx)
 8024e52:	68ba      	ldr	r2, [r7, #8]
 8024e54:	68fb      	ldr	r3, [r7, #12]
 8024e56:	4413      	add	r3, r2
 8024e58:	697a      	ldr	r2, [r7, #20]
 8024e5a:	429a      	cmp	r2, r3
 8024e5c:	d203      	bcs.n	8024e66 <Delete_Sectors+0x46>
  {
    p_erase_init.NbPages = first_secure_sector_idx - p_erase_init.Page;
 8024e5e:	68bb      	ldr	r3, [r7, #8]
 8024e60:	697a      	ldr	r2, [r7, #20]
 8024e62:	1ad3      	subs	r3, r2, r3
 8024e64:	60fb      	str	r3, [r7, #12]
  }

  APP_DBG("SFSA Option Bytes set to sector = %d (0x080%x)", first_secure_sector_idx, first_secure_sector_idx*4096);
 8024e66:	697b      	ldr	r3, [r7, #20]
 8024e68:	031b      	lsls	r3, r3, #12
 8024e6a:	9300      	str	r3, [sp, #0]
 8024e6c:	697b      	ldr	r3, [r7, #20]
 8024e6e:	4a16      	ldr	r2, [pc, #88]	; (8024ec8 <Delete_Sectors+0xa8>)
 8024e70:	2101      	movs	r1, #1
 8024e72:	2000      	movs	r0, #0
 8024e74:	f7f0 fb1e 	bl	80154b4 <logApplication>
  APP_DBG("Erase FLASH Memory from sector %d (0x080%x) to sector %d (0x080%x)", p_erase_init.Page, p_erase_init.Page*4096, p_erase_init.NbPages+p_erase_init.Page, (p_erase_init.NbPages+p_erase_init.Page)*4096);
 8024e78:	68bc      	ldr	r4, [r7, #8]
 8024e7a:	68bb      	ldr	r3, [r7, #8]
 8024e7c:	031b      	lsls	r3, r3, #12
 8024e7e:	68f9      	ldr	r1, [r7, #12]
 8024e80:	68ba      	ldr	r2, [r7, #8]
 8024e82:	440a      	add	r2, r1
 8024e84:	68f8      	ldr	r0, [r7, #12]
 8024e86:	68b9      	ldr	r1, [r7, #8]
 8024e88:	4401      	add	r1, r0
 8024e8a:	0309      	lsls	r1, r1, #12
 8024e8c:	9102      	str	r1, [sp, #8]
 8024e8e:	9201      	str	r2, [sp, #4]
 8024e90:	9300      	str	r3, [sp, #0]
 8024e92:	4623      	mov	r3, r4
 8024e94:	4a0d      	ldr	r2, [pc, #52]	; (8024ecc <Delete_Sectors+0xac>)
 8024e96:	2101      	movs	r1, #1
 8024e98:	2000      	movs	r0, #0
 8024e9a:	f7f0 fb0b 	bl	80154b4 <logApplication>

  HAL_FLASH_Unlock();
 8024e9e:	f7f3 fae3 	bl	8018468 <HAL_FLASH_Unlock>

  HAL_FLASHEx_Erase(&p_erase_init, &page_error);
 8024ea2:	f107 0210 	add.w	r2, r7, #16
 8024ea6:	1d3b      	adds	r3, r7, #4
 8024ea8:	4611      	mov	r1, r2
 8024eaa:	4618      	mov	r0, r3
 8024eac:	f7f3 fb9e 	bl	80185ec <HAL_FLASHEx_Erase>

  HAL_FLASH_Lock();
 8024eb0:	f7f3 fafc 	bl	80184ac <HAL_FLASH_Lock>

  return;
 8024eb4:	bf00      	nop
}
 8024eb6:	371c      	adds	r7, #28
 8024eb8:	46bd      	mov	sp, r7
 8024eba:	bd90      	pop	{r4, r7, pc}
 8024ebc:	58004000 	.word	0x58004000
 8024ec0:	20000001 	.word	0x20000001
 8024ec4:	20000002 	.word	0x20000002
 8024ec8:	08028408 	.word	0x08028408
 8024ecc:	08028438 	.word	0x08028438

08024ed0 <APP_THREAD_DummyRespHandler>:
#endif

static void APP_THREAD_DummyRespHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 8024ed0:	b480      	push	{r7}
 8024ed2:	b085      	sub	sp, #20
 8024ed4:	af00      	add	r7, sp, #0
 8024ed6:	60f8      	str	r0, [r7, #12]
 8024ed8:	60b9      	str	r1, [r7, #8]
 8024eda:	607a      	str	r2, [r7, #4]
 8024edc:	603b      	str	r3, [r7, #0]
	UNUSED(p_context);
	UNUSED(pHeader);
	UNUSED(pMessage);
	UNUSED(pMessageInfo);
	UNUSED(Result);
}
 8024ede:	bf00      	nop
 8024ee0:	3714      	adds	r7, #20
 8024ee2:	46bd      	mov	sp, r7
 8024ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ee8:	4770      	bx	lr
	...

08024eec <APP_THREAD_CoapRespHandler_UpdateBorderRouter>:

static void APP_THREAD_CoapRespHandler_UpdateBorderRouter(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 8024eec:	b5b0      	push	{r4, r5, r7, lr}
 8024eee:	b084      	sub	sp, #16
 8024ef0:	af00      	add	r7, sp, #0
 8024ef2:	60f8      	str	r0, [r7, #12]
 8024ef4:	60b9      	str	r1, [r7, #8]
 8024ef6:	607a      	str	r2, [r7, #4]
 8024ef8:	70fb      	strb	r3, [r7, #3]

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8024efa:	68b8      	ldr	r0, [r7, #8]
 8024efc:	f7fe fbf4 	bl	80236e8 <otMessageGetOffset>
 8024f00:	4603      	mov	r3, r0
 8024f02:	4619      	mov	r1, r3
 8024f04:	2318      	movs	r3, #24
 8024f06:	4a0e      	ldr	r2, [pc, #56]	; (8024f40 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8024f08:	68b8      	ldr	r0, [r7, #8]
 8024f0a:	f7fe fc52 	bl	80237b2 <otMessageRead>
 8024f0e:	4603      	mov	r3, r0
 8024f10:	2b18      	cmp	r3, #24
 8024f12:	d110      	bne.n	8024f36 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x4a>
			== sizeof(receivedSystemCal)) {

			// if successful, update border router state variable
			memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8024f14:	4a0b      	ldr	r2, [pc, #44]	; (8024f44 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8024f16:	4b0a      	ldr	r3, [pc, #40]	; (8024f40 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8024f18:	4614      	mov	r4, r2
 8024f1a:	461d      	mov	r5, r3
 8024f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024f20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024f24:	e884 0003 	stmia.w	r4, {r0, r1}

			// update the onboard RTC unix time
			updateRTC(borderRouter.epoch);
 8024f28:	4b06      	ldr	r3, [pc, #24]	; (8024f44 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8024f2a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8024f2e:	4618      	mov	r0, r3
 8024f30:	4621      	mov	r1, r4
 8024f32:	f000 fd33 	bl	802599c <updateRTC>
	}

}
 8024f36:	bf00      	nop
 8024f38:	3710      	adds	r7, #16
 8024f3a:	46bd      	mov	sp, r7
 8024f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8024f3e:	bf00      	nop
 8024f40:	20027708 	.word	0x20027708
 8024f44:	200276f0 	.word	0x200276f0

08024f48 <APP_THREAD_DummyReqHandler>:
 * @brief Dummy request handler
 * @param
 * @retval None
 */
static void APP_THREAD_DummyReqHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8024f48:	b480      	push	{r7}
 8024f4a:	b085      	sub	sp, #20
 8024f4c:	af00      	add	r7, sp, #0
 8024f4e:	60f8      	str	r0, [r7, #12]
 8024f50:	60b9      	str	r1, [r7, #8]
 8024f52:	607a      	str	r2, [r7, #4]
 8024f54:	603b      	str	r3, [r7, #0]
	tempMessageInfo = pMessageInfo;
 8024f56:	4a06      	ldr	r2, [pc, #24]	; (8024f70 <APP_THREAD_DummyReqHandler+0x28>)
 8024f58:	683b      	ldr	r3, [r7, #0]
 8024f5a:	6013      	str	r3, [r2, #0]
	receivedMessage = (otMessageInfo*) pMessage;
 8024f5c:	4a05      	ldr	r2, [pc, #20]	; (8024f74 <APP_THREAD_DummyReqHandler+0x2c>)
 8024f5e:	687b      	ldr	r3, [r7, #4]
 8024f60:	6013      	str	r3, [r2, #0]
}
 8024f62:	bf00      	nop
 8024f64:	3714      	adds	r7, #20
 8024f66:	46bd      	mov	sp, r7
 8024f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f6c:	4770      	bx	lr
 8024f6e:	bf00      	nop
 8024f70:	200288f4 	.word	0x200288f4
 8024f74:	2002894c 	.word	0x2002894c

08024f78 <APP_THREAD_CoapReqHandlerFuotaProvisioning>:
 * @retval None
 */
static void APP_THREAD_CoapReqHandlerFuotaProvisioning(otCoapHeader * pHeader,
    otMessage            * pMessage,
    const otMessageInfo  * pMessageInfo)
{
 8024f78:	b5b0      	push	{r4, r5, r7, lr}
 8024f7a:	b084      	sub	sp, #16
 8024f7c:	af00      	add	r7, sp, #0
 8024f7e:	60f8      	str	r0, [r7, #12]
 8024f80:	60b9      	str	r1, [r7, #8]
 8024f82:	607a      	str	r2, [r7, #4]
  APP_DBG(" Received CoAP request on FUOTA_PROVISIONING ressource");
 8024f84:	4a14      	ldr	r2, [pc, #80]	; (8024fd8 <APP_THREAD_CoapReqHandlerFuotaProvisioning+0x60>)
 8024f86:	2101      	movs	r1, #1
 8024f88:	2000      	movs	r0, #0
 8024f8a:	f7f0 fa93 	bl	80154b4 <logApplication>

  if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_NON_CONFIRMABLE &&
 8024f8e:	68f8      	ldr	r0, [r7, #12]
 8024f90:	f7fd fffb 	bl	8022f8a <otCoapHeaderGetType>
 8024f94:	4603      	mov	r3, r0
 8024f96:	2b10      	cmp	r3, #16
 8024f98:	d11a      	bne.n	8024fd0 <APP_THREAD_CoapReqHandlerFuotaProvisioning+0x58>
      otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET)
 8024f9a:	68f8      	ldr	r0, [r7, #12]
 8024f9c:	f7fe f823 	bl	8022fe6 <otCoapHeaderGetCode>
 8024fa0:	4603      	mov	r3, r0
  if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_NON_CONFIRMABLE &&
 8024fa2:	2b01      	cmp	r3, #1
 8024fa4:	d114      	bne.n	8024fd0 <APP_THREAD_CoapReqHandlerFuotaProvisioning+0x58>
  {
    OT_MessageInfo = *pMessageInfo;
 8024fa6:	4a0d      	ldr	r2, [pc, #52]	; (8024fdc <APP_THREAD_CoapReqHandlerFuotaProvisioning+0x64>)
 8024fa8:	687b      	ldr	r3, [r7, #4]
 8024faa:	4614      	mov	r4, r2
 8024fac:	461d      	mov	r5, r3
 8024fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024fb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8024fba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    memset(&OT_MessageInfo.mSockAddr, 0, sizeof(OT_MessageInfo.mSockAddr));
 8024fbe:	2210      	movs	r2, #16
 8024fc0:	2100      	movs	r1, #0
 8024fc2:	4806      	ldr	r0, [pc, #24]	; (8024fdc <APP_THREAD_CoapReqHandlerFuotaProvisioning+0x64>)
 8024fc4:	f001 fed1 	bl	8026d6a <memset>
    APP_THREAD_ProvisioningRespSend(pHeader, pMessageInfo);
 8024fc8:	6879      	ldr	r1, [r7, #4]
 8024fca:	68f8      	ldr	r0, [r7, #12]
 8024fcc:	f000 f808 	bl	8024fe0 <APP_THREAD_ProvisioningRespSend>
  }
}
 8024fd0:	bf00      	nop
 8024fd2:	3710      	adds	r7, #16
 8024fd4:	46bd      	mov	sp, r7
 8024fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8024fd8:	0802847c 	.word	0x0802847c
 8024fdc:	20027628 	.word	0x20027628

08024fe0 <APP_THREAD_ProvisioningRespSend>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_ProvisioningRespSend(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8024fe0:	b590      	push	{r4, r7, lr}
 8024fe2:	b085      	sub	sp, #20
 8024fe4:	af00      	add	r7, sp, #0
 8024fe6:	6078      	str	r0, [r7, #4]
 8024fe8:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 8024fea:	2300      	movs	r3, #0
 8024fec:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG("Provisiong: Send CoAP response");
 8024fee:	4a38      	ldr	r2, [pc, #224]	; (80250d0 <APP_THREAD_ProvisioningRespSend+0xf0>)
 8024ff0:	2101      	movs	r1, #1
 8024ff2:	2000      	movs	r0, #0
 8024ff4:	f7f0 fa5e 	bl	80154b4 <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_CONTENT);
 8024ff8:	2245      	movs	r2, #69	; 0x45
 8024ffa:	2110      	movs	r1, #16
 8024ffc:	4835      	ldr	r0, [pc, #212]	; (80250d4 <APP_THREAD_ProvisioningRespSend+0xf4>)
 8024ffe:	f7fd fe68 	bl	8022cd2 <otCoapHeaderInit>
    otCoapHeaderSetToken(&OT_Header,
 8025002:	6878      	ldr	r0, [r7, #4]
 8025004:	f7fe f879 	bl	80230fa <otCoapHeaderGetToken>
 8025008:	4604      	mov	r4, r0
 802500a:	6878      	ldr	r0, [r7, #4]
 802500c:	f7fe f847 	bl	802309e <otCoapHeaderGetTokenLength>
 8025010:	4603      	mov	r3, r0
 8025012:	461a      	mov	r2, r3
 8025014:	4621      	mov	r1, r4
 8025016:	482f      	ldr	r0, [pc, #188]	; (80250d4 <APP_THREAD_ProvisioningRespSend+0xf4>)
 8025018:	f7fd fe90 	bl	8022d3c <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));
    otCoapHeaderSetPayloadMarker(&OT_Header);
 802501c:	482d      	ldr	r0, [pc, #180]	; (80250d4 <APP_THREAD_ProvisioningRespSend+0xf4>)
 802501e:	f7fd ff56 	bl	8022ece <otCoapHeaderSetPayloadMarker>

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8025022:	492c      	ldr	r1, [pc, #176]	; (80250d4 <APP_THREAD_ProvisioningRespSend+0xf4>)
 8025024:	2000      	movs	r0, #0
 8025026:	f7fe f895 	bl	8023154 <otCoapNewMessage>
 802502a:	4602      	mov	r2, r0
 802502c:	4b2a      	ldr	r3, [pc, #168]	; (80250d8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 802502e:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 8025030:	4b29      	ldr	r3, [pc, #164]	; (80250d8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 8025032:	681b      	ldr	r3, [r3, #0]
 8025034:	2b00      	cmp	r3, #0
 8025036:	d105      	bne.n	8025044 <APP_THREAD_ProvisioningRespSend+0x64>
    {
      APP_THREAD_Error(ERR_THREAD_COAP_APPEND_MSG, error);
 8025038:	7bfb      	ldrb	r3, [r7, #15]
 802503a:	4619      	mov	r1, r3
 802503c:	2014      	movs	r0, #20
 802503e:	f7ff fc31 	bl	80248a4 <APP_THREAD_Error>
      break;
 8025042:	e041      	b.n	80250c8 <APP_THREAD_ProvisioningRespSend+0xe8>
    }

    error = otMessageAppend(pOT_Message, &OT_Command, sizeof(OT_Command));
 8025044:	4b24      	ldr	r3, [pc, #144]	; (80250d8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 8025046:	681b      	ldr	r3, [r3, #0]
 8025048:	2201      	movs	r2, #1
 802504a:	4924      	ldr	r1, [pc, #144]	; (80250dc <APP_THREAD_ProvisioningRespSend+0xfc>)
 802504c:	4618      	mov	r0, r3
 802504e:	f7fe fb79 	bl	8023744 <otMessageAppend>
 8025052:	4603      	mov	r3, r0
 8025054:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE)
 8025056:	7bfb      	ldrb	r3, [r7, #15]
 8025058:	2b00      	cmp	r3, #0
 802505a:	d004      	beq.n	8025066 <APP_THREAD_ProvisioningRespSend+0x86>
    {
      APP_THREAD_Error(ERR_THREAD_COAP_APPEND_MSG, error);
 802505c:	7bfb      	ldrb	r3, [r7, #15]
 802505e:	4619      	mov	r1, r3
 8025060:	2014      	movs	r0, #20
 8025062:	f7ff fc1f 	bl	80248a4 <APP_THREAD_Error>
    }

    error = otMessageAppend(pOT_Message, otThreadGetMeshLocalEid(NULL), sizeof(otIp6Address));
 8025066:	4b1c      	ldr	r3, [pc, #112]	; (80250d8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 8025068:	681c      	ldr	r4, [r3, #0]
 802506a:	2000      	movs	r0, #0
 802506c:	f7ff f92c 	bl	80242c8 <otThreadGetMeshLocalEid>
 8025070:	4603      	mov	r3, r0
 8025072:	2210      	movs	r2, #16
 8025074:	4619      	mov	r1, r3
 8025076:	4620      	mov	r0, r4
 8025078:	f7fe fb64 	bl	8023744 <otMessageAppend>
 802507c:	4603      	mov	r3, r0
 802507e:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE)
 8025080:	7bfb      	ldrb	r3, [r7, #15]
 8025082:	2b00      	cmp	r3, #0
 8025084:	d005      	beq.n	8025092 <APP_THREAD_ProvisioningRespSend+0xb2>
    {
      APP_THREAD_Error(ERR_THREAD_COAP_APPEND_MSG, error);
 8025086:	7bfb      	ldrb	r3, [r7, #15]
 8025088:	4619      	mov	r1, r3
 802508a:	2014      	movs	r0, #20
 802508c:	f7ff fc0a 	bl	80248a4 <APP_THREAD_Error>
      break;
 8025090:	e01a      	b.n	80250c8 <APP_THREAD_ProvisioningRespSend+0xe8>
    }

    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8025092:	4b11      	ldr	r3, [pc, #68]	; (80250d8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 8025094:	681b      	ldr	r3, [r3, #0]
 8025096:	683a      	ldr	r2, [r7, #0]
 8025098:	4619      	mov	r1, r3
 802509a:	2000      	movs	r0, #0
 802509c:	f7fe f921 	bl	80232e2 <otCoapSendResponse>
 80250a0:	4603      	mov	r3, r0
 80250a2:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 80250a4:	7bfb      	ldrb	r3, [r7, #15]
 80250a6:	2b00      	cmp	r3, #0
 80250a8:	d00e      	beq.n	80250c8 <APP_THREAD_ProvisioningRespSend+0xe8>
 80250aa:	4b0b      	ldr	r3, [pc, #44]	; (80250d8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 80250ac:	681b      	ldr	r3, [r3, #0]
 80250ae:	2b00      	cmp	r3, #0
 80250b0:	d00a      	beq.n	80250c8 <APP_THREAD_ProvisioningRespSend+0xe8>
    {
      otMessageFree(pOT_Message);
 80250b2:	4b09      	ldr	r3, [pc, #36]	; (80250d8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 80250b4:	681b      	ldr	r3, [r3, #0]
 80250b6:	4618      	mov	r0, r3
 80250b8:	f7fe faeb 	bl	8023692 <otMessageFree>
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
 80250bc:	7bfb      	ldrb	r3, [r7, #15]
 80250be:	4619      	mov	r1, r3
 80250c0:	200e      	movs	r0, #14
 80250c2:	f7ff fbef 	bl	80248a4 <APP_THREAD_Error>
    }
  }while(false);
}
 80250c6:	e7ff      	b.n	80250c8 <APP_THREAD_ProvisioningRespSend+0xe8>
 80250c8:	bf00      	nop
 80250ca:	3714      	adds	r7, #20
 80250cc:	46bd      	mov	sp, r7
 80250ce:	bd90      	pop	{r4, r7, pc}
 80250d0:	080284b4 	.word	0x080284b4
 80250d4:	20027654 	.word	0x20027654
 80250d8:	200276e4 	.word	0x200276e4
 80250dc:	20027720 	.word	0x20027720

080250e0 <APP_THREAD_CoapReqHandlerFuotaParameters>:
 * @retval None
 */
static void APP_THREAD_CoapReqHandlerFuotaParameters(otCoapHeader * pHeader,
    otMessage            * pMessage,
    const otMessageInfo  * pMessageInfo)
{
 80250e0:	b580      	push	{r7, lr}
 80250e2:	b084      	sub	sp, #16
 80250e4:	af00      	add	r7, sp, #0
 80250e6:	60f8      	str	r0, [r7, #12]
 80250e8:	60b9      	str	r1, [r7, #8]
 80250ea:	607a      	str	r2, [r7, #4]
  if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OtaContext, sizeof(OtaContext)) != sizeof(OtaContext))
 80250ec:	68b8      	ldr	r0, [r7, #8]
 80250ee:	f7fe fafb 	bl	80236e8 <otMessageGetOffset>
 80250f2:	4603      	mov	r3, r0
 80250f4:	4619      	mov	r1, r3
 80250f6:	2310      	movs	r3, #16
 80250f8:	4a2e      	ldr	r2, [pc, #184]	; (80251b4 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd4>)
 80250fa:	68b8      	ldr	r0, [r7, #8]
 80250fc:	f7fe fb59 	bl	80237b2 <otMessageRead>
 8025100:	4603      	mov	r3, r0
 8025102:	2b10      	cmp	r3, #16
 8025104:	d003      	beq.n	802510e <APP_THREAD_CoapReqHandlerFuotaParameters+0x2e>
  {
    APP_THREAD_Error(ERR_THREAD_MESSAGE_READ, 0);
 8025106:	2100      	movs	r1, #0
 8025108:	2009      	movs	r0, #9
 802510a:	f7ff fbcb 	bl	80248a4 <APP_THREAD_Error>
  }

  /* Display Ota_Context values */
  if(OtaContext.file_type == APP_THREAD_OTA_FILE_TYPE_FW_APP)
 802510e:	4b29      	ldr	r3, [pc, #164]	; (80251b4 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd4>)
 8025110:	781b      	ldrb	r3, [r3, #0]
 8025112:	2b00      	cmp	r3, #0
 8025114:	d105      	bne.n	8025122 <APP_THREAD_CoapReqHandlerFuotaParameters+0x42>
  {
    APP_DBG("FUOTA_PARAMETERS: File Type set to : FW_APP");
 8025116:	4a28      	ldr	r2, [pc, #160]	; (80251b8 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd8>)
 8025118:	2101      	movs	r1, #1
 802511a:	2000      	movs	r0, #0
 802511c:	f7f0 f9ca 	bl	80154b4 <logApplication>
 8025120:	e012      	b.n	8025148 <APP_THREAD_CoapReqHandlerFuotaParameters+0x68>
  }
  else  if (OtaContext.file_type == APP_THREAD_OTA_FILE_TYPE_FW_COPRO_WIRELESS)
 8025122:	4b24      	ldr	r3, [pc, #144]	; (80251b4 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd4>)
 8025124:	781b      	ldrb	r3, [r3, #0]
 8025126:	2b01      	cmp	r3, #1
 8025128:	d105      	bne.n	8025136 <APP_THREAD_CoapReqHandlerFuotaParameters+0x56>
  {
    APP_DBG("FUOTA_PARAMETERS: File Type set to : FW_COPRO_WIRELESS");
 802512a:	4a24      	ldr	r2, [pc, #144]	; (80251bc <APP_THREAD_CoapReqHandlerFuotaParameters+0xdc>)
 802512c:	2101      	movs	r1, #1
 802512e:	2000      	movs	r0, #0
 8025130:	f7f0 f9c0 	bl	80154b4 <logApplication>
 8025134:	e008      	b.n	8025148 <APP_THREAD_CoapReqHandlerFuotaParameters+0x68>
  }
  else
  {
    APP_DBG("FUOTA_PARAMETERS: File Type not recognized");
 8025136:	4a22      	ldr	r2, [pc, #136]	; (80251c0 <APP_THREAD_CoapReqHandlerFuotaParameters+0xe0>)
 8025138:	2101      	movs	r1, #1
 802513a:	2000      	movs	r0, #0
 802513c:	f7f0 f9ba 	bl	80154b4 <logApplication>
    APP_THREAD_Error(ERR_THREAD_FUOTA_FILE_TYPE_NOT_RECOGNIZED, 0);
 8025140:	2100      	movs	r1, #0
 8025142:	2018      	movs	r0, #24
 8025144:	f7ff fbae 	bl	80248a4 <APP_THREAD_Error>
  }

  APP_DBG("FUOTA_PARAMETERS: Binary Size = 0x%x", OtaContext.binary_size);
 8025148:	4b1a      	ldr	r3, [pc, #104]	; (80251b4 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd4>)
 802514a:	685b      	ldr	r3, [r3, #4]
 802514c:	4a1d      	ldr	r2, [pc, #116]	; (80251c4 <APP_THREAD_CoapReqHandlerFuotaParameters+0xe4>)
 802514e:	2101      	movs	r1, #1
 8025150:	2000      	movs	r0, #0
 8025152:	f7f0 f9af 	bl	80154b4 <logApplication>
  APP_DBG("FUOTA_PARAMETERS: Address = 0x%x", OtaContext.base_address);
 8025156:	4b17      	ldr	r3, [pc, #92]	; (80251b4 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd4>)
 8025158:	689b      	ldr	r3, [r3, #8]
 802515a:	4a1b      	ldr	r2, [pc, #108]	; (80251c8 <APP_THREAD_CoapReqHandlerFuotaParameters+0xe8>)
 802515c:	2101      	movs	r1, #1
 802515e:	2000      	movs	r0, #0
 8025160:	f7f0 f9a8 	bl	80154b4 <logApplication>
  APP_DBG("FUOTA_PARAMETERS: Magic Keyword = 0x%x", OtaContext.magic_keyword);
 8025164:	4b13      	ldr	r3, [pc, #76]	; (80251b4 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd4>)
 8025166:	68db      	ldr	r3, [r3, #12]
 8025168:	4a18      	ldr	r2, [pc, #96]	; (80251cc <APP_THREAD_CoapReqHandlerFuotaParameters+0xec>)
 802516a:	2101      	movs	r1, #1
 802516c:	2000      	movs	r0, #0
 802516e:	f7f0 f9a1 	bl	80154b4 <logApplication>

  /* Check if Device can be updated with Fuota Server request */
  if (APP_THREAD_CheckDeviceCapabilities() == APP_THREAD_OK)
 8025172:	f000 f831 	bl	80251d8 <APP_THREAD_CheckDeviceCapabilities>
 8025176:	4603      	mov	r3, r0
 8025178:	2b00      	cmp	r3, #0
 802517a:	d103      	bne.n	8025184 <APP_THREAD_CoapReqHandlerFuotaParameters+0xa4>
  {
    OT_Command = APP_THREAD_OK;
 802517c:	4b14      	ldr	r3, [pc, #80]	; (80251d0 <APP_THREAD_CoapReqHandlerFuotaParameters+0xf0>)
 802517e:	2200      	movs	r2, #0
 8025180:	701a      	strb	r2, [r3, #0]
 8025182:	e007      	b.n	8025194 <APP_THREAD_CoapReqHandlerFuotaParameters+0xb4>
    // TODO : add LED toggling here
//    HW_TS_Start(TimerID, (uint32_t)LED_TOGGLE_TIMING);
  }
  else
  {
    OT_Command = APP_THREAD_ERROR;
 8025184:	4b12      	ldr	r3, [pc, #72]	; (80251d0 <APP_THREAD_CoapReqHandlerFuotaParameters+0xf0>)
 8025186:	2201      	movs	r2, #1
 8025188:	701a      	strb	r2, [r3, #0]
    APP_DBG("WARNING: Current Device capabilities cannot handle FUOTA. Check memory size available!");
 802518a:	4a12      	ldr	r2, [pc, #72]	; (80251d4 <APP_THREAD_CoapReqHandlerFuotaParameters+0xf4>)
 802518c:	2101      	movs	r1, #1
 802518e:	2000      	movs	r0, #0
 8025190:	f7f0 f990 	bl	80154b4 <logApplication>
  }
  /* If Message is Confirmable, send response */
  if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8025194:	68f8      	ldr	r0, [r7, #12]
 8025196:	f7fd fef8 	bl	8022f8a <otCoapHeaderGetType>
 802519a:	4603      	mov	r3, r0
 802519c:	2b00      	cmp	r3, #0
 802519e:	d104      	bne.n	80251aa <APP_THREAD_CoapReqHandlerFuotaParameters+0xca>
  {
    APP_THREAD_CoapSendRespFuotaParameters(pHeader, pMessageInfo, &OT_Command);
 80251a0:	4a0b      	ldr	r2, [pc, #44]	; (80251d0 <APP_THREAD_CoapReqHandlerFuotaParameters+0xf0>)
 80251a2:	6879      	ldr	r1, [r7, #4]
 80251a4:	68f8      	ldr	r0, [r7, #12]
 80251a6:	f000 f9f1 	bl	802558c <APP_THREAD_CoapSendRespFuotaParameters>
  }
}
 80251aa:	bf00      	nop
 80251ac:	3710      	adds	r7, #16
 80251ae:	46bd      	mov	sp, r7
 80251b0:	bd80      	pop	{r7, pc}
 80251b2:	bf00      	nop
 80251b4:	200278b8 	.word	0x200278b8
 80251b8:	080284d4 	.word	0x080284d4
 80251bc:	08028500 	.word	0x08028500
 80251c0:	08028538 	.word	0x08028538
 80251c4:	08028564 	.word	0x08028564
 80251c8:	0802858c 	.word	0x0802858c
 80251cc:	080285b0 	.word	0x080285b0
 80251d0:	20027720 	.word	0x20027720
 80251d4:	080285d8 	.word	0x080285d8

080251d8 <APP_THREAD_CheckDeviceCapabilities>:

static APP_THREAD_StatusTypeDef APP_THREAD_CheckDeviceCapabilities(void)
{
 80251d8:	b580      	push	{r7, lr}
 80251da:	b088      	sub	sp, #32
 80251dc:	af02      	add	r7, sp, #8
  APP_THREAD_StatusTypeDef status = APP_THREAD_OK;
 80251de:	2300      	movs	r3, #0
 80251e0:	74fb      	strb	r3, [r7, #19]
  uint32_t first_sector_idx;
  uint32_t first_secure_sector_idx;
  uint32_t free_sectors;
  uint32_t free_size;

  APP_DBG("Check Device capabilities");
 80251e2:	4a2e      	ldr	r2, [pc, #184]	; (802529c <APP_THREAD_CheckDeviceCapabilities+0xc4>)
 80251e4:	2101      	movs	r1, #1
 80251e6:	2000      	movs	r0, #0
 80251e8:	f7f0 f964 	bl	80154b4 <logApplication>

  first_secure_sector_idx = (READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos);
 80251ec:	4b2c      	ldr	r3, [pc, #176]	; (80252a0 <APP_THREAD_CheckDeviceCapabilities+0xc8>)
 80251ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80251f2:	b2db      	uxtb	r3, r3
 80251f4:	617b      	str	r3, [r7, #20]
  APP_DBG("SFSA Option Bytes set to sector = %d (0x080%x)", first_secure_sector_idx, first_secure_sector_idx*4096);
 80251f6:	697b      	ldr	r3, [r7, #20]
 80251f8:	031b      	lsls	r3, r3, #12
 80251fa:	9300      	str	r3, [sp, #0]
 80251fc:	697b      	ldr	r3, [r7, #20]
 80251fe:	4a29      	ldr	r2, [pc, #164]	; (80252a4 <APP_THREAD_CheckDeviceCapabilities+0xcc>)
 8025200:	2101      	movs	r1, #1
 8025202:	2000      	movs	r0, #0
 8025204:	f7f0 f956 	bl	80154b4 <logApplication>

  first_sector_idx = *((uint8_t*) SRAM1_BASE + 1);
 8025208:	4b27      	ldr	r3, [pc, #156]	; (80252a8 <APP_THREAD_CheckDeviceCapabilities+0xd0>)
 802520a:	781b      	ldrb	r3, [r3, #0]
 802520c:	60fb      	str	r3, [r7, #12]
  if (first_sector_idx == 0)
 802520e:	68fb      	ldr	r3, [r7, #12]
 8025210:	2b00      	cmp	r3, #0
 8025212:	d106      	bne.n	8025222 <APP_THREAD_CheckDeviceCapabilities+0x4a>
  {
    APP_DBG("ERROR : SRAM1_BASE + 1 == 0");
 8025214:	4a25      	ldr	r2, [pc, #148]	; (80252ac <APP_THREAD_CheckDeviceCapabilities+0xd4>)
 8025216:	2101      	movs	r1, #1
 8025218:	2000      	movs	r0, #0
 802521a:	f7f0 f94b 	bl	80154b4 <logApplication>
    first_sector_idx = CFG_APP_START_SECTOR_INDEX;
 802521e:	2310      	movs	r3, #16
 8025220:	60fb      	str	r3, [r7, #12]
  }
  APP_DBG("First available sector = %d (0x080%x)", first_sector_idx, first_sector_idx*4096);
 8025222:	68fb      	ldr	r3, [r7, #12]
 8025224:	031b      	lsls	r3, r3, #12
 8025226:	9300      	str	r3, [sp, #0]
 8025228:	68fb      	ldr	r3, [r7, #12]
 802522a:	4a21      	ldr	r2, [pc, #132]	; (80252b0 <APP_THREAD_CheckDeviceCapabilities+0xd8>)
 802522c:	2101      	movs	r1, #1
 802522e:	2000      	movs	r0, #0
 8025230:	f7f0 f940 	bl	80154b4 <logApplication>

  free_sectors = first_secure_sector_idx - first_sector_idx;
 8025234:	697a      	ldr	r2, [r7, #20]
 8025236:	68fb      	ldr	r3, [r7, #12]
 8025238:	1ad3      	subs	r3, r2, r3
 802523a:	60bb      	str	r3, [r7, #8]
  free_size = free_sectors*4096;
 802523c:	68bb      	ldr	r3, [r7, #8]
 802523e:	031b      	lsls	r3, r3, #12
 8025240:	607b      	str	r3, [r7, #4]

  APP_DBG("free_sectors = %d , -> %d bytes of FLASH Free", free_sectors, free_size);
 8025242:	687b      	ldr	r3, [r7, #4]
 8025244:	9300      	str	r3, [sp, #0]
 8025246:	68bb      	ldr	r3, [r7, #8]
 8025248:	4a1a      	ldr	r2, [pc, #104]	; (80252b4 <APP_THREAD_CheckDeviceCapabilities+0xdc>)
 802524a:	2101      	movs	r1, #1
 802524c:	2000      	movs	r0, #0
 802524e:	f7f0 f931 	bl	80154b4 <logApplication>

  APP_DBG("Server requests    : %d bytes", OtaContext.binary_size);
 8025252:	4b19      	ldr	r3, [pc, #100]	; (80252b8 <APP_THREAD_CheckDeviceCapabilities+0xe0>)
 8025254:	685b      	ldr	r3, [r3, #4]
 8025256:	4a19      	ldr	r2, [pc, #100]	; (80252bc <APP_THREAD_CheckDeviceCapabilities+0xe4>)
 8025258:	2101      	movs	r1, #1
 802525a:	2000      	movs	r0, #0
 802525c:	f7f0 f92a 	bl	80154b4 <logApplication>
  APP_DBG("Client Free memory : %d bytes", free_size);
 8025260:	687b      	ldr	r3, [r7, #4]
 8025262:	4a17      	ldr	r2, [pc, #92]	; (80252c0 <APP_THREAD_CheckDeviceCapabilities+0xe8>)
 8025264:	2101      	movs	r1, #1
 8025266:	2000      	movs	r0, #0
 8025268:	f7f0 f924 	bl	80154b4 <logApplication>

  if (free_size < OtaContext.binary_size)
 802526c:	4b12      	ldr	r3, [pc, #72]	; (80252b8 <APP_THREAD_CheckDeviceCapabilities+0xe0>)
 802526e:	685b      	ldr	r3, [r3, #4]
 8025270:	687a      	ldr	r2, [r7, #4]
 8025272:	429a      	cmp	r2, r3
 8025274:	d207      	bcs.n	8025286 <APP_THREAD_CheckDeviceCapabilities+0xae>
  {
    status = APP_THREAD_ERROR;
 8025276:	2301      	movs	r3, #1
 8025278:	74fb      	strb	r3, [r7, #19]
    APP_DBG("WARNING: Not enough Free Flash Memory available to download binary from Server!");
 802527a:	4a12      	ldr	r2, [pc, #72]	; (80252c4 <APP_THREAD_CheckDeviceCapabilities+0xec>)
 802527c:	2101      	movs	r1, #1
 802527e:	2000      	movs	r0, #0
 8025280:	f7f0 f918 	bl	80154b4 <logApplication>
 8025284:	e004      	b.n	8025290 <APP_THREAD_CheckDeviceCapabilities+0xb8>
  }
  else
  {
    APP_DBG("Device contains enough Flash Memory to download binary");
 8025286:	4a10      	ldr	r2, [pc, #64]	; (80252c8 <APP_THREAD_CheckDeviceCapabilities+0xf0>)
 8025288:	2101      	movs	r1, #1
 802528a:	2000      	movs	r0, #0
 802528c:	f7f0 f912 	bl	80154b4 <logApplication>
  }

  return status;
 8025290:	7cfb      	ldrb	r3, [r7, #19]
}
 8025292:	4618      	mov	r0, r3
 8025294:	3718      	adds	r7, #24
 8025296:	46bd      	mov	sp, r7
 8025298:	bd80      	pop	{r7, pc}
 802529a:	bf00      	nop
 802529c:	08028630 	.word	0x08028630
 80252a0:	58004000 	.word	0x58004000
 80252a4:	08028408 	.word	0x08028408
 80252a8:	20000001 	.word	0x20000001
 80252ac:	0802864c 	.word	0x0802864c
 80252b0:	08028668 	.word	0x08028668
 80252b4:	08028690 	.word	0x08028690
 80252b8:	200278b8 	.word	0x200278b8
 80252bc:	080286c0 	.word	0x080286c0
 80252c0:	080286e0 	.word	0x080286e0
 80252c4:	08028700 	.word	0x08028700
 80252c8:	08028750 	.word	0x08028750

080252cc <APP_THREAD_CoapReqHandlerFuota>:
 * @retval None
 */
static void APP_THREAD_CoapReqHandlerFuota(otCoapHeader * pHeader,
    otMessage            * pMessage,
    const otMessageInfo  * pMessageInfo)
{
 80252cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80252d0:	b08e      	sub	sp, #56	; 0x38
 80252d2:	af04      	add	r7, sp, #16
 80252d4:	60f8      	str	r0, [r7, #12]
 80252d6:	60b9      	str	r1, [r7, #8]
 80252d8:	607a      	str	r2, [r7, #4]
  bool l_end_full_bin_transfer = FALSE;
 80252da:	2300      	movs	r3, #0
 80252dc:	77fb      	strb	r3, [r7, #31]
  uint32_t flash_index = 0;
 80252de:	2300      	movs	r3, #0
 80252e0:	623b      	str	r3, [r7, #32]
  uint64_t l_read64 = 0;
 80252e2:	f04f 0300 	mov.w	r3, #0
 80252e6:	f04f 0400 	mov.w	r4, #0
 80252ea:	e9c7 3404 	strd	r3, r4, [r7, #16]

  if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &FuotaTransferArray, FUOTA_PAYLOAD_SIZE) != FUOTA_PAYLOAD_SIZE)
 80252ee:	68b8      	ldr	r0, [r7, #8]
 80252f0:	f7fe f9fa 	bl	80236e8 <otMessageGetOffset>
 80252f4:	4603      	mov	r3, r0
 80252f6:	4619      	mov	r1, r3
 80252f8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80252fc:	4a6f      	ldr	r2, [pc, #444]	; (80254bc <APP_THREAD_CoapReqHandlerFuota+0x1f0>)
 80252fe:	68b8      	ldr	r0, [r7, #8]
 8025300:	f7fe fa57 	bl	80237b2 <otMessageRead>
 8025304:	4603      	mov	r3, r0
 8025306:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 802530a:	d003      	beq.n	8025314 <APP_THREAD_CoapReqHandlerFuota+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_MESSAGE_READ, 0);
 802530c:	2100      	movs	r1, #0
 802530e:	2009      	movs	r0, #9
 8025310:	f7ff fac8 	bl	80248a4 <APP_THREAD_Error>
  }

  /* Test if magic Keyword is in FuotaBinData */
  for (int index = 0; index < FUOTA_NUMBER_WORDS_64BITS; ++index) {
 8025314:	2300      	movs	r3, #0
 8025316:	627b      	str	r3, [r7, #36]	; 0x24
 8025318:	e046      	b.n	80253a8 <APP_THREAD_CoapReqHandlerFuota+0xdc>
    if((FuotaTransferArray[index] & 0x00000000FFFFFFFF) == OtaContext.magic_keyword)
 802531a:	4a68      	ldr	r2, [pc, #416]	; (80254bc <APP_THREAD_CoapReqHandlerFuota+0x1f0>)
 802531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802531e:	00db      	lsls	r3, r3, #3
 8025320:	4413      	add	r3, r2
 8025322:	e9d3 3400 	ldrd	r3, r4, [r3]
 8025326:	f04f 31ff 	mov.w	r1, #4294967295
 802532a:	f04f 0200 	mov.w	r2, #0
 802532e:	ea01 0b03 	and.w	fp, r1, r3
 8025332:	ea02 0c04 	and.w	ip, r2, r4
 8025336:	4b62      	ldr	r3, [pc, #392]	; (80254c0 <APP_THREAD_CoapReqHandlerFuota+0x1f4>)
 8025338:	68db      	ldr	r3, [r3, #12]
 802533a:	f04f 0400 	mov.w	r4, #0
 802533e:	45a4      	cmp	ip, r4
 8025340:	bf08      	it	eq
 8025342:	459b      	cmpeq	fp, r3
 8025344:	d10c      	bne.n	8025360 <APP_THREAD_CoapReqHandlerFuota+0x94>
    {
      APP_DBG("1 - FUOTA_MAGIC_KEYWORD found at flash_current_offset = %d", (FuotaBinData_index + index)*8);
 8025346:	4b5f      	ldr	r3, [pc, #380]	; (80254c4 <APP_THREAD_CoapReqHandlerFuota+0x1f8>)
 8025348:	681a      	ldr	r2, [r3, #0]
 802534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802534c:	4413      	add	r3, r2
 802534e:	00db      	lsls	r3, r3, #3
 8025350:	4a5d      	ldr	r2, [pc, #372]	; (80254c8 <APP_THREAD_CoapReqHandlerFuota+0x1fc>)
 8025352:	2101      	movs	r1, #1
 8025354:	2000      	movs	r0, #0
 8025356:	f7f0 f8ad 	bl	80154b4 <logApplication>
      l_end_full_bin_transfer = TRUE;
 802535a:	2301      	movs	r3, #1
 802535c:	77fb      	strb	r3, [r7, #31]
 802535e:	e020      	b.n	80253a2 <APP_THREAD_CoapReqHandlerFuota+0xd6>
    }
    else
    if (((FuotaTransferArray[index] & 0xFFFFFFFF00000000) >> 32) == OtaContext.magic_keyword)
 8025360:	4a56      	ldr	r2, [pc, #344]	; (80254bc <APP_THREAD_CoapReqHandlerFuota+0x1f0>)
 8025362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025364:	00db      	lsls	r3, r3, #3
 8025366:	4413      	add	r3, r2
 8025368:	e9d3 1200 	ldrd	r1, r2, [r3]
 802536c:	f04f 0300 	mov.w	r3, #0
 8025370:	f04f 0400 	mov.w	r4, #0
 8025374:	0013      	movs	r3, r2
 8025376:	2400      	movs	r4, #0
 8025378:	4a51      	ldr	r2, [pc, #324]	; (80254c0 <APP_THREAD_CoapReqHandlerFuota+0x1f4>)
 802537a:	68d2      	ldr	r2, [r2, #12]
 802537c:	4611      	mov	r1, r2
 802537e:	f04f 0200 	mov.w	r2, #0
 8025382:	4294      	cmp	r4, r2
 8025384:	bf08      	it	eq
 8025386:	428b      	cmpeq	r3, r1
 8025388:	d10b      	bne.n	80253a2 <APP_THREAD_CoapReqHandlerFuota+0xd6>
    {
      APP_DBG("2 - FUOTA_MAGIC_KEYWORD found at flash_current_offset = %d", (FuotaBinData_index + index)*8);
 802538a:	4b4e      	ldr	r3, [pc, #312]	; (80254c4 <APP_THREAD_CoapReqHandlerFuota+0x1f8>)
 802538c:	681a      	ldr	r2, [r3, #0]
 802538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025390:	4413      	add	r3, r2
 8025392:	00db      	lsls	r3, r3, #3
 8025394:	4a4d      	ldr	r2, [pc, #308]	; (80254cc <APP_THREAD_CoapReqHandlerFuota+0x200>)
 8025396:	2101      	movs	r1, #1
 8025398:	2000      	movs	r0, #0
 802539a:	f7f0 f88b 	bl	80154b4 <logApplication>
      l_end_full_bin_transfer = TRUE;
 802539e:	2301      	movs	r3, #1
 80253a0:	77fb      	strb	r3, [r7, #31]
  for (int index = 0; index < FUOTA_NUMBER_WORDS_64BITS; ++index) {
 80253a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80253a4:	3301      	adds	r3, #1
 80253a6:	627b      	str	r3, [r7, #36]	; 0x24
 80253a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80253aa:	2b31      	cmp	r3, #49	; 0x31
 80253ac:	ddb5      	ble.n	802531a <APP_THREAD_CoapReqHandlerFuota+0x4e>
    }
  }

  FuotaBinData_index += FUOTA_NUMBER_WORDS_64BITS;
 80253ae:	4b45      	ldr	r3, [pc, #276]	; (80254c4 <APP_THREAD_CoapReqHandlerFuota+0x1f8>)
 80253b0:	681b      	ldr	r3, [r3, #0]
 80253b2:	3332      	adds	r3, #50	; 0x32
 80253b4:	4a43      	ldr	r2, [pc, #268]	; (80254c4 <APP_THREAD_CoapReqHandlerFuota+0x1f8>)
 80253b6:	6013      	str	r3, [r2, #0]

  /* Write to Flash Memory */
  for(flash_index = 0; flash_index < FUOTA_NUMBER_WORDS_64BITS; flash_index++)
 80253b8:	2300      	movs	r3, #0
 80253ba:	623b      	str	r3, [r7, #32]
 80253bc:	e066      	b.n	802548c <APP_THREAD_CoapReqHandlerFuota+0x1c0>
  {
    while( LL_HSEM_1StepLock( HSEM, CFG_HW_FLASH_SEMID ) );
 80253be:	bf00      	nop
 80253c0:	2102      	movs	r1, #2
 80253c2:	4843      	ldr	r0, [pc, #268]	; (80254d0 <APP_THREAD_CoapReqHandlerFuota+0x204>)
 80253c4:	f7ff fa08 	bl	80247d8 <LL_HSEM_1StepLock>
 80253c8:	4603      	mov	r3, r0
 80253ca:	2b00      	cmp	r3, #0
 80253cc:	d1f8      	bne.n	80253c0 <APP_THREAD_CoapReqHandlerFuota+0xf4>
    HAL_FLASH_Unlock();
 80253ce:	f7f3 f84b 	bl	8018468 <HAL_FLASH_Unlock>
    while(LL_FLASH_IsActiveFlag_OperationSuspended());
 80253d2:	bf00      	nop
 80253d4:	f7ff f9ec 	bl	80247b0 <LL_FLASH_IsActiveFlag_OperationSuspended>
 80253d8:	4603      	mov	r3, r0
 80253da:	2b00      	cmp	r3, #0
 80253dc:	d1fa      	bne.n	80253d4 <APP_THREAD_CoapReqHandlerFuota+0x108>

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
        OtaContext.base_address + flash_current_offset,
 80253de:	4b38      	ldr	r3, [pc, #224]	; (80254c0 <APP_THREAD_CoapReqHandlerFuota+0x1f4>)
 80253e0:	689a      	ldr	r2, [r3, #8]
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 80253e2:	4b3c      	ldr	r3, [pc, #240]	; (80254d4 <APP_THREAD_CoapReqHandlerFuota+0x208>)
 80253e4:	681b      	ldr	r3, [r3, #0]
 80253e6:	18d1      	adds	r1, r2, r3
 80253e8:	4a34      	ldr	r2, [pc, #208]	; (80254bc <APP_THREAD_CoapReqHandlerFuota+0x1f0>)
 80253ea:	6a3b      	ldr	r3, [r7, #32]
 80253ec:	00db      	lsls	r3, r3, #3
 80253ee:	4413      	add	r3, r2
 80253f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80253f4:	461a      	mov	r2, r3
 80253f6:	4623      	mov	r3, r4
 80253f8:	2001      	movs	r0, #1
 80253fa:	f7f2 fff1 	bl	80183e0 <HAL_FLASH_Program>
 80253fe:	4603      	mov	r3, r0
 8025400:	2b00      	cmp	r3, #0
 8025402:	d12a      	bne.n	802545a <APP_THREAD_CoapReqHandlerFuota+0x18e>
        FuotaTransferArray[flash_index]) == HAL_OK)
    {
      /* Read back value for verification */
      l_read64 = *(uint64_t*)(OtaContext.base_address + flash_current_offset);
 8025404:	4b2e      	ldr	r3, [pc, #184]	; (80254c0 <APP_THREAD_CoapReqHandlerFuota+0x1f4>)
 8025406:	689a      	ldr	r2, [r3, #8]
 8025408:	4b32      	ldr	r3, [pc, #200]	; (80254d4 <APP_THREAD_CoapReqHandlerFuota+0x208>)
 802540a:	681b      	ldr	r3, [r3, #0]
 802540c:	4413      	add	r3, r2
 802540e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8025412:	e9c7 3404 	strd	r3, r4, [r7, #16]
      if(l_read64 != FuotaTransferArray[flash_index])
 8025416:	4a29      	ldr	r2, [pc, #164]	; (80254bc <APP_THREAD_CoapReqHandlerFuota+0x1f0>)
 8025418:	6a3b      	ldr	r3, [r7, #32]
 802541a:	00db      	lsls	r3, r3, #3
 802541c:	4413      	add	r3, r2
 802541e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8025422:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8025426:	42a2      	cmp	r2, r4
 8025428:	bf08      	it	eq
 802542a:	4299      	cmpeq	r1, r3
 802542c:	d01f      	beq.n	802546e <APP_THREAD_CoapReqHandlerFuota+0x1a2>
      {
        APP_DBG("FLASH: Comparison failed l_read64 = 0x%jx / ram_array = 0x%jx", l_read64, FuotaTransferArray[flash_index])
 802542e:	4a23      	ldr	r2, [pc, #140]	; (80254bc <APP_THREAD_CoapReqHandlerFuota+0x1f0>)
 8025430:	6a3b      	ldr	r3, [r7, #32]
 8025432:	00db      	lsls	r3, r3, #3
 8025434:	4413      	add	r3, r2
 8025436:	e9d3 3400 	ldrd	r3, r4, [r3]
 802543a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802543e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8025442:	e9cd 3400 	strd	r3, r4, [sp]
 8025446:	4a24      	ldr	r2, [pc, #144]	; (80254d8 <APP_THREAD_CoapReqHandlerFuota+0x20c>)
 8025448:	2101      	movs	r1, #1
 802544a:	2000      	movs	r0, #0
 802544c:	f7f0 f832 	bl	80154b4 <logApplication>
                  APP_THREAD_Error(ERR_THREAD_MSG_COMPARE_FAILED,0);
 8025450:	2100      	movs	r1, #0
 8025452:	2013      	movs	r0, #19
 8025454:	f7ff fa26 	bl	80248a4 <APP_THREAD_Error>
 8025458:	e009      	b.n	802546e <APP_THREAD_CoapReqHandlerFuota+0x1a2>
      }
    }
    else
    {
      APP_DBG("HAL_FLASH_Program FAILED at flash_index = %d", flash_index)
 802545a:	6a3b      	ldr	r3, [r7, #32]
 802545c:	4a1f      	ldr	r2, [pc, #124]	; (80254dc <APP_THREAD_CoapReqHandlerFuota+0x210>)
 802545e:	2101      	movs	r1, #1
 8025460:	2000      	movs	r0, #0
 8025462:	f7f0 f827 	bl	80154b4 <logApplication>
      APP_THREAD_Error(ERR_THREAD_FLASH_PROGRAM,0);
 8025466:	2100      	movs	r1, #0
 8025468:	2017      	movs	r0, #23
 802546a:	f7ff fa1b 	bl	80248a4 <APP_THREAD_Error>
    }

    HAL_FLASH_Lock();
 802546e:	f7f3 f81d 	bl	80184ac <HAL_FLASH_Lock>
    LL_HSEM_ReleaseLock( HSEM, CFG_HW_FLASH_SEMID, 0 );
 8025472:	2200      	movs	r2, #0
 8025474:	2102      	movs	r1, #2
 8025476:	4816      	ldr	r0, [pc, #88]	; (80254d0 <APP_THREAD_CoapReqHandlerFuota+0x204>)
 8025478:	f7ff f9c6 	bl	8024808 <LL_HSEM_ReleaseLock>

    flash_current_offset += 8;
 802547c:	4b15      	ldr	r3, [pc, #84]	; (80254d4 <APP_THREAD_CoapReqHandlerFuota+0x208>)
 802547e:	681b      	ldr	r3, [r3, #0]
 8025480:	3308      	adds	r3, #8
 8025482:	4a14      	ldr	r2, [pc, #80]	; (80254d4 <APP_THREAD_CoapReqHandlerFuota+0x208>)
 8025484:	6013      	str	r3, [r2, #0]
  for(flash_index = 0; flash_index < FUOTA_NUMBER_WORDS_64BITS; flash_index++)
 8025486:	6a3b      	ldr	r3, [r7, #32]
 8025488:	3301      	adds	r3, #1
 802548a:	623b      	str	r3, [r7, #32]
 802548c:	6a3b      	ldr	r3, [r7, #32]
 802548e:	2b31      	cmp	r3, #49	; 0x31
 8025490:	d995      	bls.n	80253be <APP_THREAD_CoapReqHandlerFuota+0xf2>
  }

  /* If Message is Confirmable, send response */
  if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8025492:	68f8      	ldr	r0, [r7, #12]
 8025494:	f7fd fd79 	bl	8022f8a <otCoapHeaderGetType>
 8025498:	4603      	mov	r3, r0
 802549a:	2b00      	cmp	r3, #0
 802549c:	d103      	bne.n	80254a6 <APP_THREAD_CoapReqHandlerFuota+0x1da>
  {
    APP_THREAD_CoapSendDataResponseFuota(pHeader, pMessageInfo);
 802549e:	6879      	ldr	r1, [r7, #4]
 80254a0:	68f8      	ldr	r0, [r7, #12]
 80254a2:	f000 f81d 	bl	80254e0 <APP_THREAD_CoapSendDataResponseFuota>
  }

  if(l_end_full_bin_transfer == TRUE)
 80254a6:	7ffb      	ldrb	r3, [r7, #31]
 80254a8:	2b00      	cmp	r3, #0
 80254aa:	d001      	beq.n	80254b0 <APP_THREAD_CoapReqHandlerFuota+0x1e4>
  {
	  // TODO : add FREERTOS task flag enable here

	  APP_THREAD_PerformReset();
 80254ac:	f000 f8e4 	bl	8025678 <APP_THREAD_PerformReset>

//    UTIL_SEQ_SetTask(TASK_FUOTA_RESET, CFG_SCH_PRIO_0);
  }
}
 80254b0:	bf00      	nop
 80254b2:	3728      	adds	r7, #40	; 0x28
 80254b4:	46bd      	mov	sp, r7
 80254b6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80254ba:	bf00      	nop
 80254bc:	20027728 	.word	0x20027728
 80254c0:	200278b8 	.word	0x200278b8
 80254c4:	20027724 	.word	0x20027724
 80254c8:	08028788 	.word	0x08028788
 80254cc:	080287c4 	.word	0x080287c4
 80254d0:	58001400 	.word	0x58001400
 80254d4:	200278c8 	.word	0x200278c8
 80254d8:	08028800 	.word	0x08028800
 80254dc:	08028840 	.word	0x08028840

080254e0 <APP_THREAD_CoapSendDataResponseFuota>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponseFuota(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 80254e0:	b590      	push	{r4, r7, lr}
 80254e2:	b085      	sub	sp, #20
 80254e4:	af00      	add	r7, sp, #0
 80254e6:	6078      	str	r0, [r7, #4]
 80254e8:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 80254ea:	2300      	movs	r3, #0
 80254ec:	73fb      	strb	r3, [r7, #15]
  static otCoapHeader  OT_Header = {0};

  do{
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 80254ee:	2244      	movs	r2, #68	; 0x44
 80254f0:	2120      	movs	r1, #32
 80254f2:	4824      	ldr	r0, [pc, #144]	; (8025584 <APP_THREAD_CoapSendDataResponseFuota+0xa4>)
 80254f4:	f7fd fbed 	bl	8022cd2 <otCoapHeaderInit>
    otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 80254f8:	6878      	ldr	r0, [r7, #4]
 80254fa:	f7fd fda2 	bl	8023042 <otCoapHeaderGetMessageId>
 80254fe:	4603      	mov	r3, r0
 8025500:	4619      	mov	r1, r3
 8025502:	4820      	ldr	r0, [pc, #128]	; (8025584 <APP_THREAD_CoapSendDataResponseFuota+0xa4>)
 8025504:	f7fd fd11 	bl	8022f2a <otCoapHeaderSetMessageId>
    otCoapHeaderSetToken(&OT_Header,
 8025508:	6878      	ldr	r0, [r7, #4]
 802550a:	f7fd fdf6 	bl	80230fa <otCoapHeaderGetToken>
 802550e:	4604      	mov	r4, r0
 8025510:	6878      	ldr	r0, [r7, #4]
 8025512:	f7fd fdc4 	bl	802309e <otCoapHeaderGetTokenLength>
 8025516:	4603      	mov	r3, r0
 8025518:	461a      	mov	r2, r3
 802551a:	4621      	mov	r1, r4
 802551c:	4819      	ldr	r0, [pc, #100]	; (8025584 <APP_THREAD_CoapSendDataResponseFuota+0xa4>)
 802551e:	f7fd fc0d 	bl	8022d3c <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8025522:	4918      	ldr	r1, [pc, #96]	; (8025584 <APP_THREAD_CoapSendDataResponseFuota+0xa4>)
 8025524:	2000      	movs	r0, #0
 8025526:	f7fd fe15 	bl	8023154 <otCoapNewMessage>
 802552a:	4602      	mov	r2, r0
 802552c:	4b16      	ldr	r3, [pc, #88]	; (8025588 <APP_THREAD_CoapSendDataResponseFuota+0xa8>)
 802552e:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 8025530:	4b15      	ldr	r3, [pc, #84]	; (8025588 <APP_THREAD_CoapSendDataResponseFuota+0xa8>)
 8025532:	681b      	ldr	r3, [r3, #0]
 8025534:	2b00      	cmp	r3, #0
 8025536:	d106      	bne.n	8025546 <APP_THREAD_CoapSendDataResponseFuota+0x66>
    {
      APP_THREAD_Error(ERR_THREAD_COAP_APPEND_MSG, error);
 8025538:	7bfb      	ldrb	r3, [r7, #15]
 802553a:	4619      	mov	r1, r3
 802553c:	2014      	movs	r0, #20
 802553e:	f7ff f9b1 	bl	80248a4 <APP_THREAD_Error>
      break;
 8025542:	bf00      	nop
    {
      otMessageFree(pOT_Message);
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 8025544:	e019      	b.n	802557a <APP_THREAD_CoapSendDataResponseFuota+0x9a>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8025546:	4b10      	ldr	r3, [pc, #64]	; (8025588 <APP_THREAD_CoapSendDataResponseFuota+0xa8>)
 8025548:	681b      	ldr	r3, [r3, #0]
 802554a:	683a      	ldr	r2, [r7, #0]
 802554c:	4619      	mov	r1, r3
 802554e:	2000      	movs	r0, #0
 8025550:	f7fd fec7 	bl	80232e2 <otCoapSendResponse>
 8025554:	4603      	mov	r3, r0
 8025556:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 8025558:	7bfb      	ldrb	r3, [r7, #15]
 802555a:	2b00      	cmp	r3, #0
 802555c:	d00d      	beq.n	802557a <APP_THREAD_CoapSendDataResponseFuota+0x9a>
 802555e:	4b0a      	ldr	r3, [pc, #40]	; (8025588 <APP_THREAD_CoapSendDataResponseFuota+0xa8>)
 8025560:	681b      	ldr	r3, [r3, #0]
 8025562:	2b00      	cmp	r3, #0
 8025564:	d009      	beq.n	802557a <APP_THREAD_CoapSendDataResponseFuota+0x9a>
      otMessageFree(pOT_Message);
 8025566:	4b08      	ldr	r3, [pc, #32]	; (8025588 <APP_THREAD_CoapSendDataResponseFuota+0xa8>)
 8025568:	681b      	ldr	r3, [r3, #0]
 802556a:	4618      	mov	r0, r3
 802556c:	f7fe f891 	bl	8023692 <otMessageFree>
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
 8025570:	7bfb      	ldrb	r3, [r7, #15]
 8025572:	4619      	mov	r1, r3
 8025574:	200e      	movs	r0, #14
 8025576:	f7ff f995 	bl	80248a4 <APP_THREAD_Error>
}
 802557a:	bf00      	nop
 802557c:	3714      	adds	r7, #20
 802557e:	46bd      	mov	sp, r7
 8025580:	bd90      	pop	{r4, r7, pc}
 8025582:	bf00      	nop
 8025584:	200278cc 	.word	0x200278cc
 8025588:	200276e4 	.word	0x200276e4

0802558c <APP_THREAD_CoapSendRespFuotaParameters>:
 * @retval None
 */
static void APP_THREAD_CoapSendRespFuotaParameters(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo,
    uint8_t * pData)
{
 802558c:	b590      	push	{r4, r7, lr}
 802558e:	b087      	sub	sp, #28
 8025590:	af00      	add	r7, sp, #0
 8025592:	60f8      	str	r0, [r7, #12]
 8025594:	60b9      	str	r1, [r7, #8]
 8025596:	607a      	str	r2, [r7, #4]
  otError  error = OT_ERROR_NONE;
 8025598:	2300      	movs	r3, #0
 802559a:	75fb      	strb	r3, [r7, #23]
  static otCoapHeader  OT_Header = {0};
  uint8_t data = *pData;
 802559c:	687b      	ldr	r3, [r7, #4]
 802559e:	781b      	ldrb	r3, [r3, #0]
 80255a0:	75bb      	strb	r3, [r7, #22]
  APP_DBG("APP_THREAD_CoapSendRespFuotaParameters data = %d", data);
 80255a2:	7dbb      	ldrb	r3, [r7, #22]
 80255a4:	4a30      	ldr	r2, [pc, #192]	; (8025668 <APP_THREAD_CoapSendRespFuotaParameters+0xdc>)
 80255a6:	2101      	movs	r1, #1
 80255a8:	2000      	movs	r0, #0
 80255aa:	f7ef ff83 	bl	80154b4 <logApplication>

  do{
    APP_DBG("FUOTA: Send CoAP response for Fuota Parameters");
 80255ae:	4a2f      	ldr	r2, [pc, #188]	; (802566c <APP_THREAD_CoapSendRespFuotaParameters+0xe0>)
 80255b0:	2101      	movs	r1, #1
 80255b2:	2000      	movs	r0, #0
 80255b4:	f7ef ff7e 	bl	80154b4 <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_CONTENT);
 80255b8:	2245      	movs	r2, #69	; 0x45
 80255ba:	2110      	movs	r1, #16
 80255bc:	482c      	ldr	r0, [pc, #176]	; (8025670 <APP_THREAD_CoapSendRespFuotaParameters+0xe4>)
 80255be:	f7fd fb88 	bl	8022cd2 <otCoapHeaderInit>
    otCoapHeaderSetToken(&OT_Header,
 80255c2:	68f8      	ldr	r0, [r7, #12]
 80255c4:	f7fd fd99 	bl	80230fa <otCoapHeaderGetToken>
 80255c8:	4604      	mov	r4, r0
 80255ca:	68f8      	ldr	r0, [r7, #12]
 80255cc:	f7fd fd67 	bl	802309e <otCoapHeaderGetTokenLength>
 80255d0:	4603      	mov	r3, r0
 80255d2:	461a      	mov	r2, r3
 80255d4:	4621      	mov	r1, r4
 80255d6:	4826      	ldr	r0, [pc, #152]	; (8025670 <APP_THREAD_CoapSendRespFuotaParameters+0xe4>)
 80255d8:	f7fd fbb0 	bl	8022d3c <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));
    otCoapHeaderSetPayloadMarker(&OT_Header);
 80255dc:	4824      	ldr	r0, [pc, #144]	; (8025670 <APP_THREAD_CoapSendRespFuotaParameters+0xe4>)
 80255de:	f7fd fc76 	bl	8022ece <otCoapHeaderSetPayloadMarker>

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80255e2:	4923      	ldr	r1, [pc, #140]	; (8025670 <APP_THREAD_CoapSendRespFuotaParameters+0xe4>)
 80255e4:	2000      	movs	r0, #0
 80255e6:	f7fd fdb5 	bl	8023154 <otCoapNewMessage>
 80255ea:	4602      	mov	r2, r0
 80255ec:	4b21      	ldr	r3, [pc, #132]	; (8025674 <APP_THREAD_CoapSendRespFuotaParameters+0xe8>)
 80255ee:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 80255f0:	4b20      	ldr	r3, [pc, #128]	; (8025674 <APP_THREAD_CoapSendRespFuotaParameters+0xe8>)
 80255f2:	681b      	ldr	r3, [r3, #0]
 80255f4:	2b00      	cmp	r3, #0
 80255f6:	d106      	bne.n	8025606 <APP_THREAD_CoapSendRespFuotaParameters+0x7a>
    {
      APP_THREAD_Error(ERR_THREAD_COAP_APPEND_MSG, error);
 80255f8:	7dfb      	ldrb	r3, [r7, #23]
 80255fa:	4619      	mov	r1, r3
 80255fc:	2014      	movs	r0, #20
 80255fe:	f7ff f951 	bl	80248a4 <APP_THREAD_Error>
      break;
 8025602:	bf00      	nop
    {
      otMessageFree(pOT_Message);
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 8025604:	e02b      	b.n	802565e <APP_THREAD_CoapSendRespFuotaParameters+0xd2>
    error = otMessageAppend(pOT_Message, &data, sizeof(data));
 8025606:	4b1b      	ldr	r3, [pc, #108]	; (8025674 <APP_THREAD_CoapSendRespFuotaParameters+0xe8>)
 8025608:	681b      	ldr	r3, [r3, #0]
 802560a:	f107 0116 	add.w	r1, r7, #22
 802560e:	2201      	movs	r2, #1
 8025610:	4618      	mov	r0, r3
 8025612:	f7fe f897 	bl	8023744 <otMessageAppend>
 8025616:	4603      	mov	r3, r0
 8025618:	75fb      	strb	r3, [r7, #23]
    if (error != OT_ERROR_NONE)
 802561a:	7dfb      	ldrb	r3, [r7, #23]
 802561c:	2b00      	cmp	r3, #0
 802561e:	d004      	beq.n	802562a <APP_THREAD_CoapSendRespFuotaParameters+0x9e>
      APP_THREAD_Error(ERR_THREAD_COAP_APPEND_MSG, error);
 8025620:	7dfb      	ldrb	r3, [r7, #23]
 8025622:	4619      	mov	r1, r3
 8025624:	2014      	movs	r0, #20
 8025626:	f7ff f93d 	bl	80248a4 <APP_THREAD_Error>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 802562a:	4b12      	ldr	r3, [pc, #72]	; (8025674 <APP_THREAD_CoapSendRespFuotaParameters+0xe8>)
 802562c:	681b      	ldr	r3, [r3, #0]
 802562e:	68ba      	ldr	r2, [r7, #8]
 8025630:	4619      	mov	r1, r3
 8025632:	2000      	movs	r0, #0
 8025634:	f7fd fe55 	bl	80232e2 <otCoapSendResponse>
 8025638:	4603      	mov	r3, r0
 802563a:	75fb      	strb	r3, [r7, #23]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 802563c:	7dfb      	ldrb	r3, [r7, #23]
 802563e:	2b00      	cmp	r3, #0
 8025640:	d00d      	beq.n	802565e <APP_THREAD_CoapSendRespFuotaParameters+0xd2>
 8025642:	4b0c      	ldr	r3, [pc, #48]	; (8025674 <APP_THREAD_CoapSendRespFuotaParameters+0xe8>)
 8025644:	681b      	ldr	r3, [r3, #0]
 8025646:	2b00      	cmp	r3, #0
 8025648:	d009      	beq.n	802565e <APP_THREAD_CoapSendRespFuotaParameters+0xd2>
      otMessageFree(pOT_Message);
 802564a:	4b0a      	ldr	r3, [pc, #40]	; (8025674 <APP_THREAD_CoapSendRespFuotaParameters+0xe8>)
 802564c:	681b      	ldr	r3, [r3, #0]
 802564e:	4618      	mov	r0, r3
 8025650:	f7fe f81f 	bl	8023692 <otMessageFree>
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
 8025654:	7dfb      	ldrb	r3, [r7, #23]
 8025656:	4619      	mov	r1, r3
 8025658:	200e      	movs	r0, #14
 802565a:	f7ff f923 	bl	80248a4 <APP_THREAD_Error>
}
 802565e:	bf00      	nop
 8025660:	371c      	adds	r7, #28
 8025662:	46bd      	mov	sp, r7
 8025664:	bd90      	pop	{r4, r7, pc}
 8025666:	bf00      	nop
 8025668:	08028870 	.word	0x08028870
 802566c:	080288a4 	.word	0x080288a4
 8025670:	2002795c 	.word	0x2002795c
 8025674:	200276e4 	.word	0x200276e4

08025678 <APP_THREAD_PerformReset>:
 * @brief Task responsible for the reset at the end of OTA transfer.
 * @param  None
 * @retval None
 */
static void APP_THREAD_PerformReset(void)
{
 8025678:	b580      	push	{r7, lr}
 802567a:	af00      	add	r7, sp, #0
  APP_DBG("*******************************************************");
 802567c:	4a22      	ldr	r2, [pc, #136]	; (8025708 <APP_THREAD_PerformReset+0x90>)
 802567e:	2101      	movs	r1, #1
 8025680:	2000      	movs	r0, #0
 8025682:	f7ef ff17 	bl	80154b4 <logApplication>
  APP_DBG(" FUOTA_CLIENT : END OF TRANSFER COMPLETED");
 8025686:	4a21      	ldr	r2, [pc, #132]	; (802570c <APP_THREAD_PerformReset+0x94>)
 8025688:	2101      	movs	r1, #1
 802568a:	2000      	movs	r0, #0
 802568c:	f7ef ff12 	bl	80154b4 <logApplication>
  /* Stop Toggling of the LED */
//  HW_TS_Stop(TimerID);
//  BSP_LED_On(LED1);

  /* Insert delay to make sure CoAP response has been sent */
  HAL_Delay(200);
 8025690:	20c8      	movs	r0, #200	; 0xc8
 8025692:	f7f0 fe03 	bl	801629c <HAL_Delay>

  if(OtaContext.file_type == APP_THREAD_OTA_FILE_TYPE_FW_APP)
 8025696:	4b1e      	ldr	r3, [pc, #120]	; (8025710 <APP_THREAD_PerformReset+0x98>)
 8025698:	781b      	ldrb	r3, [r3, #0]
 802569a:	2b00      	cmp	r3, #0
 802569c:	d10f      	bne.n	80256be <APP_THREAD_PerformReset+0x46>
  {
    APP_DBG("  --> Request to reboot on FW Application");
 802569e:	4a1d      	ldr	r2, [pc, #116]	; (8025714 <APP_THREAD_PerformReset+0x9c>)
 80256a0:	2101      	movs	r1, #1
 80256a2:	2000      	movs	r0, #0
 80256a4:	f7ef ff06 	bl	80154b4 <logApplication>
    APP_DBG("*******************************************************");
 80256a8:	4a17      	ldr	r2, [pc, #92]	; (8025708 <APP_THREAD_PerformReset+0x90>)
 80256aa:	2101      	movs	r1, #1
 80256ac:	2000      	movs	r0, #0
 80256ae:	f7ef ff01 	bl	80154b4 <logApplication>
    /**
     * Reboot on FW Application
     */
    *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_FW_APP;
 80256b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80256b6:	2200      	movs	r2, #0
 80256b8:	701a      	strb	r2, [r3, #0]
    NVIC_SystemReset();
 80256ba:	f7ff f865 	bl	8024788 <__NVIC_SystemReset>
  }
  else if(OtaContext.file_type == APP_THREAD_OTA_FILE_TYPE_FW_COPRO_WIRELESS)
 80256be:	4b14      	ldr	r3, [pc, #80]	; (8025710 <APP_THREAD_PerformReset+0x98>)
 80256c0:	781b      	ldrb	r3, [r3, #0]
 80256c2:	2b01      	cmp	r3, #1
 80256c4:	d114      	bne.n	80256f0 <APP_THREAD_PerformReset+0x78>
  {
    APP_DBG("  --> Request to reboot on FUS");
 80256c6:	4a14      	ldr	r2, [pc, #80]	; (8025718 <APP_THREAD_PerformReset+0xa0>)
 80256c8:	2101      	movs	r1, #1
 80256ca:	2000      	movs	r0, #0
 80256cc:	f7ef fef2 	bl	80154b4 <logApplication>
    APP_DBG("*******************************************************");
 80256d0:	4a0d      	ldr	r2, [pc, #52]	; (8025708 <APP_THREAD_PerformReset+0x90>)
 80256d2:	2101      	movs	r1, #1
 80256d4:	2000      	movs	r0, #0
 80256d6:	f7ef feed 	bl	80154b4 <logApplication>
    /**
     * Wireless firmware update is requested
     * Request CPU2 to reboot on FUS by sending two FUS command
     */
    SHCI_C2_FUS_GetState( NULL );
 80256da:	2000      	movs	r0, #0
 80256dc:	f7fe faab 	bl	8023c36 <SHCI_C2_FUS_GetState>
    SHCI_C2_FUS_GetState( NULL );
 80256e0:	2000      	movs	r0, #0
 80256e2:	f7fe faa8 	bl	8023c36 <SHCI_C2_FUS_GetState>
    while(1)
    {
      HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80256e6:	2101      	movs	r1, #1
 80256e8:	2000      	movs	r0, #0
 80256ea:	f7f5 fa2d 	bl	801ab48 <HAL_PWR_EnterSLEEPMode>
 80256ee:	e7fa      	b.n	80256e6 <APP_THREAD_PerformReset+0x6e>
    }
  }
  else
  {
    APP_DBG("APP_THREAD_PerformReset: OtaContext.file_type not recognized");
 80256f0:	4a0a      	ldr	r2, [pc, #40]	; (802571c <APP_THREAD_PerformReset+0xa4>)
 80256f2:	2101      	movs	r1, #1
 80256f4:	2000      	movs	r0, #0
 80256f6:	f7ef fedd 	bl	80154b4 <logApplication>
    APP_THREAD_Error(ERR_THREAD_FUOTA_FILE_TYPE_NOT_RECOGNIZED,0);
 80256fa:	2100      	movs	r1, #0
 80256fc:	2018      	movs	r0, #24
 80256fe:	f7ff f8d1 	bl	80248a4 <APP_THREAD_Error>
  }

}
 8025702:	bf00      	nop
 8025704:	bd80      	pop	{r7, pc}
 8025706:	bf00      	nop
 8025708:	080288d4 	.word	0x080288d4
 802570c:	0802890c 	.word	0x0802890c
 8025710:	200278b8 	.word	0x200278b8
 8025714:	08028938 	.word	0x08028938
 8025718:	08028964 	.word	0x08028964
 802571c:	08028984 	.word	0x08028984

08025720 <APP_THREAD_UpdateBorderRouter>:
//volatile otNetifMulticastAddress *test_addr;
//volatile otExtAddress *test_ext_addr;
//volatile otExtAddress test_1;
//volatile otExtAddress test_2;

void APP_THREAD_UpdateBorderRouter() {
 8025720:	b580      	push	{r7, lr}
 8025722:	af00      	add	r7, sp, #0

	// if border router IP is still multicast (ff03::1), attempt to sync
	if (otIp6IsAddressEqual(&multicastAddr, &borderRouter.ipv6)) {
 8025724:	4906      	ldr	r1, [pc, #24]	; (8025740 <APP_THREAD_UpdateBorderRouter+0x20>)
 8025726:	4807      	ldr	r0, [pc, #28]	; (8025744 <APP_THREAD_UpdateBorderRouter+0x24>)
 8025728:	f7fd feeb 	bl	8023502 <otIp6IsAddressEqual>
 802572c:	4603      	mov	r3, r0
 802572e:	2b00      	cmp	r3, #0
 8025730:	d001      	beq.n	8025736 <APP_THREAD_UpdateBorderRouter+0x16>
		APP_THREAD_SyncWithBorderRouter();
 8025732:	f000 f809 	bl	8025748 <APP_THREAD_SyncWithBorderRouter>
	}

	// send IP to border router
	APP_THREAD_SendMyInfo();
 8025736:	f000 f81d 	bl	8025774 <APP_THREAD_SendMyInfo>
}
 802573a:	bf00      	nop
 802573c:	bd80      	pop	{r7, pc}
 802573e:	bf00      	nop
 8025740:	200276f0 	.word	0x200276f0
 8025744:	20028938 	.word	0x20028938

08025748 <APP_THREAD_SyncWithBorderRouter>:

// send a GET request to border router via multicast
void APP_THREAD_SyncWithBorderRouter() {
 8025748:	b580      	push	{r7, lr}
 802574a:	b084      	sub	sp, #16
 802574c:	af04      	add	r7, sp, #16
	APP_THREAD_SendCoapMsgForBorderSync(NULL, 0, &multicastAddr, borderSyncResource, REQUEST_ACK, OT_COAP_CODE_GET, 1U);
 802574e:	2301      	movs	r3, #1
 8025750:	9302      	str	r3, [sp, #8]
 8025752:	2301      	movs	r3, #1
 8025754:	9301      	str	r3, [sp, #4]
 8025756:	2301      	movs	r3, #1
 8025758:	9300      	str	r3, [sp, #0]
 802575a:	4b04      	ldr	r3, [pc, #16]	; (802576c <APP_THREAD_SyncWithBorderRouter+0x24>)
 802575c:	4a04      	ldr	r2, [pc, #16]	; (8025770 <APP_THREAD_SyncWithBorderRouter+0x28>)
 802575e:	2100      	movs	r1, #0
 8025760:	2000      	movs	r0, #0
 8025762:	f000 fa79 	bl	8025c58 <APP_THREAD_SendCoapMsgForBorderSync>
}
 8025766:	bf00      	nop
 8025768:	46bd      	mov	sp, r7
 802576a:	bd80      	pop	{r7, pc}
 802576c:	08028e14 	.word	0x08028e14
 8025770:	20028938 	.word	0x20028938

08025774 <APP_THREAD_SendMyInfo>:

void APP_THREAD_SendMyInfo() {
 8025774:	b580      	push	{r7, lr}
 8025776:	b084      	sub	sp, #16
 8025778:	af04      	add	r7, sp, #16
////	test_1 = test_ext_addr[0];
////	test_2 = &test_ext_addr;
//
//	error = otThreadGetNextNeighborInfo(NULL, &test_neighbor_iterator, &test_info_neighbor);
	// TODO: does this need an ACK
	APP_THREAD_SendCoapMsg(&msgSendMyIP, sizeof(msgSendMyIP), &borderRouter.ipv6, nodeInfoResource, REQUEST_ACK,
 802577a:	2301      	movs	r3, #1
 802577c:	9302      	str	r3, [sp, #8]
 802577e:	2303      	movs	r3, #3
 8025780:	9301      	str	r3, [sp, #4]
 8025782:	2301      	movs	r3, #1
 8025784:	9300      	str	r3, [sp, #0]
 8025786:	4b04      	ldr	r3, [pc, #16]	; (8025798 <APP_THREAD_SendMyInfo+0x24>)
 8025788:	4a04      	ldr	r2, [pc, #16]	; (802579c <APP_THREAD_SendMyInfo+0x28>)
 802578a:	2120      	movs	r1, #32
 802578c:	4804      	ldr	r0, [pc, #16]	; (80257a0 <APP_THREAD_SendMyInfo+0x2c>)
 802578e:	f000 f96f 	bl	8025a70 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 8025792:	bf00      	nop
 8025794:	46bd      	mov	sp, r7
 8025796:	bd80      	pop	{r7, pc}
 8025798:	08028e34 	.word	0x08028e34
 802579c:	200276f0 	.word	0x200276f0
 80257a0:	200000c8 	.word	0x200000c8

080257a4 <APP_THREAD_SendBorderPacket>:
void APP_THREAD_SendBorderMessage(void *packet, uint8_t len) {
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(packet, len, &borderRouter.ipv6, borderPacket, REQUEST_ACK, OT_COAP_CODE_PUT, 1U);
}

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket) {
 80257a4:	b580      	push	{r7, lr}
 80257a6:	b086      	sub	sp, #24
 80257a8:	af04      	add	r7, sp, #16
 80257aa:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(sensorPacket, sizeof(struct LogPacket), &borderRouter.ipv6, borderPacket, NO_ACK,
 80257ac:	2301      	movs	r3, #1
 80257ae:	9302      	str	r3, [sp, #8]
 80257b0:	2303      	movs	r3, #3
 80257b2:	9301      	str	r3, [sp, #4]
 80257b4:	2300      	movs	r3, #0
 80257b6:	9300      	str	r3, [sp, #0]
 80257b8:	4b04      	ldr	r3, [pc, #16]	; (80257cc <APP_THREAD_SendBorderPacket+0x28>)
 80257ba:	4a05      	ldr	r2, [pc, #20]	; (80257d0 <APP_THREAD_SendBorderPacket+0x2c>)
 80257bc:	21cc      	movs	r1, #204	; 0xcc
 80257be:	6878      	ldr	r0, [r7, #4]
 80257c0:	f000 f956 	bl	8025a70 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);

}
 80257c4:	bf00      	nop
 80257c6:	3708      	adds	r7, #8
 80257c8:	46bd      	mov	sp, r7
 80257ca:	bd80      	pop	{r7, pc}
 80257cc:	08028e24 	.word	0x08028e24
 80257d0:	200276f0 	.word	0x200276f0

080257d4 <APP_THREAD_CoapLightsSimpleRequestHandler>:

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80257d4:	b580      	push	{r7, lr}
 80257d6:	b084      	sub	sp, #16
 80257d8:	af00      	add	r7, sp, #0
 80257da:	60f8      	str	r0, [r7, #12]
 80257dc:	60b9      	str	r1, [r7, #8]
 80257de:	607a      	str	r2, [r7, #4]
	do {

		// if get, send response with current log message
		if (otCoapHeaderGetType(pHeader) == OT_COAP_CODE_GET) {
 80257e0:	68f8      	ldr	r0, [r7, #12]
 80257e2:	f7fd fbd2 	bl	8022f8a <otCoapHeaderGetType>
 80257e6:	4603      	mov	r3, r0
 80257e8:	2b01      	cmp	r3, #1
 80257ea:	d106      	bne.n	80257fa <APP_THREAD_CoapLightsSimpleRequestHandler+0x26>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &lightsSimpleMessage, sizeof(lightsSimpleMessage));
 80257ec:	2304      	movs	r3, #4
 80257ee:	4a23      	ldr	r2, [pc, #140]	; (802587c <APP_THREAD_CoapLightsSimpleRequestHandler+0xa8>)
 80257f0:	6879      	ldr	r1, [r7, #4]
 80257f2:	68f8      	ldr	r0, [r7, #12]
 80257f4:	f000 fb14 	bl	8025e20 <APP_THREAD_SendDataResponse>
			break;
 80257f8:	e03c      	b.n	8025874 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage))
 80257fa:	68b8      	ldr	r0, [r7, #8]
 80257fc:	f7fd ff74 	bl	80236e8 <otMessageGetOffset>
 8025800:	4603      	mov	r3, r0
 8025802:	4619      	mov	r1, r3
 8025804:	2304      	movs	r3, #4
 8025806:	4a1d      	ldr	r2, [pc, #116]	; (802587c <APP_THREAD_CoapLightsSimpleRequestHandler+0xa8>)
 8025808:	68b8      	ldr	r0, [r7, #8]
 802580a:	f7fd ffd2 	bl	80237b2 <otMessageRead>
 802580e:	4603      	mov	r3, r0
 8025810:	2b04      	cmp	r3, #4
 8025812:	d112      	bne.n	802583a <APP_THREAD_CoapLightsSimpleRequestHandler+0x66>
				== 4U) {
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8025814:	68f8      	ldr	r0, [r7, #12]
 8025816:	f7fd fbe6 	bl	8022fe6 <otCoapHeaderGetCode>
 802581a:	4603      	mov	r3, r0
 802581c:	2b03      	cmp	r3, #3
 802581e:	d005      	beq.n	802582c <APP_THREAD_CoapLightsSimpleRequestHandler+0x58>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8025820:	68f8      	ldr	r0, [r7, #12]
 8025822:	f7fd fbe0 	bl	8022fe6 <otCoapHeaderGetCode>
 8025826:	4603      	mov	r3, r0
 8025828:	2b02      	cmp	r3, #2
 802582a:	d106      	bne.n	802583a <APP_THREAD_CoapLightsSimpleRequestHandler+0x66>
				osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 802582c:	4b14      	ldr	r3, [pc, #80]	; (8025880 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 802582e:	6818      	ldr	r0, [r3, #0]
 8025830:	2300      	movs	r3, #0
 8025832:	2200      	movs	r2, #0
 8025834:	4911      	ldr	r1, [pc, #68]	; (802587c <APP_THREAD_CoapLightsSimpleRequestHandler+0xa8>)
 8025836:	f7f9 fcc7 	bl	801f1c8 <osMessageQueuePut>
			}

		}

		tempMessageInfo = pMessageInfo;
 802583a:	4a12      	ldr	r2, [pc, #72]	; (8025884 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb0>)
 802583c:	687b      	ldr	r3, [r7, #4]
 802583e:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8025840:	4a11      	ldr	r2, [pc, #68]	; (8025888 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb4>)
 8025842:	68bb      	ldr	r3, [r7, #8]
 8025844:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8025846:	68f8      	ldr	r0, [r7, #12]
 8025848:	f7fd fb9f 	bl	8022f8a <otCoapHeaderGetType>
 802584c:	4603      	mov	r3, r0
 802584e:	2b00      	cmp	r3, #0
 8025850:	d106      	bne.n	8025860 <APP_THREAD_CoapLightsSimpleRequestHandler+0x8c>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 8025852:	2300      	movs	r3, #0
 8025854:	2200      	movs	r2, #0
 8025856:	6879      	ldr	r1, [r7, #4]
 8025858:	68f8      	ldr	r0, [r7, #12]
 802585a:	f000 fae1 	bl	8025e20 <APP_THREAD_SendDataResponse>
			break;
 802585e:	e009      	b.n	8025874 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8025860:	68b8      	ldr	r0, [r7, #8]
 8025862:	f7fd ff41 	bl	80236e8 <otMessageGetOffset>
 8025866:	4603      	mov	r3, r0
 8025868:	4619      	mov	r1, r3
 802586a:	2301      	movs	r3, #1
 802586c:	4a07      	ldr	r2, [pc, #28]	; (802588c <APP_THREAD_CoapLightsSimpleRequestHandler+0xb8>)
 802586e:	68b8      	ldr	r0, [r7, #8]
 8025870:	f7fd ff9f 	bl	80237b2 <otMessageRead>

		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}
	} while (false);
}
 8025874:	bf00      	nop
 8025876:	3710      	adds	r7, #16
 8025878:	46bd      	mov	sp, r7
 802587a:	bd80      	pop	{r7, pc}
 802587c:	20028010 	.word	0x20028010
 8025880:	20027bcc 	.word	0x20027bcc
 8025884:	200288f4 	.word	0x200288f4
 8025888:	2002894c 	.word	0x2002894c
 802588c:	200276e9 	.word	0x200276e9

08025890 <APP_THREAD_CoapBorderTimeRequestHandler>:
volatile char temp_var[100];
volatile uint8_t temp_num = 0;

// request handler for when receiving a message directed at the border router synchronizing resource
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8025890:	b5b0      	push	{r4, r5, r7, lr}
 8025892:	b084      	sub	sp, #16
 8025894:	af00      	add	r7, sp, #0
 8025896:	60f8      	str	r0, [r7, #12]
 8025898:	60b9      	str	r1, [r7, #8]
 802589a:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
 802589c:	2002      	movs	r0, #2
 802589e:	f7ee fc45 	bl	801412c <BSP_LED_Toggle>
#endif
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 80258a2:	68b8      	ldr	r0, [r7, #8]
 80258a4:	f7fd ff20 	bl	80236e8 <otMessageGetOffset>
 80258a8:	4603      	mov	r3, r0
 80258aa:	4619      	mov	r1, r3
 80258ac:	2318      	movs	r3, #24
 80258ae:	4a1f      	ldr	r2, [pc, #124]	; (802592c <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 80258b0:	68b8      	ldr	r0, [r7, #8]
 80258b2:	f7fd ff7e 	bl	80237b2 <otMessageRead>
 80258b6:	4603      	mov	r3, r0
 80258b8:	2b18      	cmp	r3, #24
 80258ba:	d11c      	bne.n	80258f6 <APP_THREAD_CoapBorderTimeRequestHandler+0x66>
				== sizeof(receivedSystemCal)) {
			// if the message was a put request, copy message over to border router info struct
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 80258bc:	68f8      	ldr	r0, [r7, #12]
 80258be:	f7fd fb92 	bl	8022fe6 <otCoapHeaderGetCode>
 80258c2:	4603      	mov	r3, r0
 80258c4:	2b03      	cmp	r3, #3
 80258c6:	d005      	beq.n	80258d4 <APP_THREAD_CoapBorderTimeRequestHandler+0x44>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 80258c8:	68f8      	ldr	r0, [r7, #12]
 80258ca:	f7fd fb8c 	bl	8022fe6 <otCoapHeaderGetCode>
 80258ce:	4603      	mov	r3, r0
 80258d0:	2b02      	cmp	r3, #2
 80258d2:	d110      	bne.n	80258f6 <APP_THREAD_CoapBorderTimeRequestHandler+0x66>

				memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 80258d4:	4a16      	ldr	r2, [pc, #88]	; (8025930 <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 80258d6:	4b15      	ldr	r3, [pc, #84]	; (802592c <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 80258d8:	4614      	mov	r4, r2
 80258da:	461d      	mov	r5, r3
 80258dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80258de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80258e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80258e4:	e884 0003 	stmia.w	r4, {r0, r1}

				// update the onboard RTC unix time
				updateRTC(borderRouter.epoch);
 80258e8:	4b11      	ldr	r3, [pc, #68]	; (8025930 <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 80258ea:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80258ee:	4618      	mov	r0, r3
 80258f0:	4621      	mov	r1, r4
 80258f2:	f000 f853 	bl	802599c <updateRTC>
			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 80258f6:	4a0f      	ldr	r2, [pc, #60]	; (8025934 <APP_THREAD_CoapBorderTimeRequestHandler+0xa4>)
 80258f8:	68bb      	ldr	r3, [r7, #8]
 80258fa:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80258fc:	68f8      	ldr	r0, [r7, #12]
 80258fe:	f7fd fb72 	bl	8022fe6 <otCoapHeaderGetCode>
 8025902:	4603      	mov	r3, r0
 8025904:	2b01      	cmp	r3, #1
 8025906:	d00c      	beq.n	8025922 <APP_THREAD_CoapBorderTimeRequestHandler+0x92>
			//APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &borderRouter, sizeof(borderRouter));

			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8025908:	68f8      	ldr	r0, [r7, #12]
 802590a:	f7fd fb3e 	bl	8022f8a <otCoapHeaderGetType>
 802590e:	4603      	mov	r3, r0
 8025910:	2b00      	cmp	r3, #0
 8025912:	d107      	bne.n	8025924 <APP_THREAD_CoapBorderTimeRequestHandler+0x94>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 8025914:	2300      	movs	r3, #0
 8025916:	2200      	movs	r2, #0
 8025918:	6879      	ldr	r1, [r7, #4]
 802591a:	68f8      	ldr	r0, [r7, #12]
 802591c:	f000 fa80 	bl	8025e20 <APP_THREAD_SendDataResponse>
			break;
 8025920:	e000      	b.n	8025924 <APP_THREAD_CoapBorderTimeRequestHandler+0x94>
			break;
 8025922:	bf00      	nop
		}

	} while (false);
}
 8025924:	bf00      	nop
 8025926:	3710      	adds	r7, #16
 8025928:	46bd      	mov	sp, r7
 802592a:	bdb0      	pop	{r4, r5, r7, pc}
 802592c:	20027708 	.word	0x20027708
 8025930:	200276f0 	.word	0x200276f0
 8025934:	2002894c 	.word	0x2002894c

08025938 <APP_THREAD_CoapNodeInfoRequestHandler>:

// Only get requests allowed for this resource
struct sendIP_struct tempVar = {"test","test",0};
//char test_string[200] = "test";
static void APP_THREAD_CoapNodeInfoRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8025938:	b580      	push	{r7, lr}
 802593a:	b084      	sub	sp, #16
 802593c:	af00      	add	r7, sp, #0
 802593e:	60f8      	str	r0, [r7, #12]
 8025940:	60b9      	str	r1, [r7, #8]
 8025942:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
 8025944:	2002      	movs	r0, #2
 8025946:	f7ee fbf1 	bl	801412c <BSP_LED_Toggle>
#endif

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &tempVar, sizeof(tempVar))
 802594a:	68b8      	ldr	r0, [r7, #8]
 802594c:	f7fd fecc 	bl	80236e8 <otMessageGetOffset>
 8025950:	4603      	mov	r3, r0
 8025952:	4619      	mov	r1, r3
 8025954:	2320      	movs	r3, #32
 8025956:	4a0f      	ldr	r2, [pc, #60]	; (8025994 <APP_THREAD_CoapNodeInfoRequestHandler+0x5c>)
 8025958:	68b8      	ldr	r0, [r7, #8]
 802595a:	f7fd ff2a 	bl	80237b2 <otMessageRead>
//				// update the onboard RTC unix time
//				updateRTC(borderRouter.epoch);
//			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 802595e:	4a0e      	ldr	r2, [pc, #56]	; (8025998 <APP_THREAD_CoapNodeInfoRequestHandler+0x60>)
 8025960:	68bb      	ldr	r3, [r7, #8]
 8025962:	6013      	str	r3, [r2, #0]

		// send info if requested
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8025964:	68f8      	ldr	r0, [r7, #12]
 8025966:	f7fd fb3e 	bl	8022fe6 <otCoapHeaderGetCode>
 802596a:	4603      	mov	r3, r0
 802596c:	2b01      	cmp	r3, #1
 802596e:	d101      	bne.n	8025974 <APP_THREAD_CoapNodeInfoRequestHandler+0x3c>
//			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &msgSendMyIP, sizeof(msgSendMyIP));
			APP_THREAD_SendMyInfo();
 8025970:	f7ff ff00 	bl	8025774 <APP_THREAD_SendMyInfo>
//			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &tempVar, sizeof(tempVar));

//			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8025974:	68f8      	ldr	r0, [r7, #12]
 8025976:	f7fd fb08 	bl	8022f8a <otCoapHeaderGetType>
 802597a:	4603      	mov	r3, r0
 802597c:	2b00      	cmp	r3, #0
 802597e:	d105      	bne.n	802598c <APP_THREAD_CoapNodeInfoRequestHandler+0x54>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 8025980:	2300      	movs	r3, #0
 8025982:	2200      	movs	r2, #0
 8025984:	6879      	ldr	r1, [r7, #4]
 8025986:	68f8      	ldr	r0, [r7, #12]
 8025988:	f000 fa4a 	bl	8025e20 <APP_THREAD_SendDataResponse>
		}

	} while (false);
}
 802598c:	bf00      	nop
 802598e:	3710      	adds	r7, #16
 8025990:	46bd      	mov	sp, r7
 8025992:	bd80      	pop	{r7, pc}
 8025994:	20000118 	.word	0x20000118
 8025998:	2002894c 	.word	0x2002894c

0802599c <updateRTC>:

void updateRTC(time_t now) {
 802599c:	b580      	push	{r7, lr}
 802599e:	b088      	sub	sp, #32
 80259a0:	af00      	add	r7, sp, #0
 80259a2:	e9c7 0100 	strd	r0, r1, [r7]
	RTC_DateTypeDef sDate;

	// https://www.st.com/content/ccc/resource/technical/document/application_note/2a/c2/6f/74/fa/0d/46/3a/CD00015424.pdf/files/CD00015424.pdf/jcr:content/translations/en.CD00015424.pdf
	struct tm *time_tm;

	RTC_FromEpoch(now, &sTime, &sDate);
 80259a6:	683b      	ldr	r3, [r7, #0]
 80259a8:	f107 0208 	add.w	r2, r7, #8
 80259ac:	f107 010c 	add.w	r1, r7, #12
 80259b0:	4618      	mov	r0, r3
 80259b2:	f7ef fb3f 	bl	8015034 <RTC_FromEpoch>

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80259b6:	f107 030c 	add.w	r3, r7, #12
 80259ba:	2200      	movs	r2, #0
 80259bc:	4619      	mov	r1, r3
 80259be:	480a      	ldr	r0, [pc, #40]	; (80259e8 <updateRTC+0x4c>)
 80259c0:	f7f6 ffc5 	bl	801c94e <HAL_RTC_SetTime>
	}

	/*
	 * update the RTC
	 */
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80259c4:	f107 0308 	add.w	r3, r7, #8
 80259c8:	2200      	movs	r2, #0
 80259ca:	4619      	mov	r1, r3
 80259cc:	4806      	ldr	r0, [pc, #24]	; (80259e8 <updateRTC+0x4c>)
 80259ce:	f7f7 f8de 	bl	801cb8e <HAL_RTC_SetDate>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // lock it in with the backup registers
 80259d2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80259d6:	2100      	movs	r1, #0
 80259d8:	4803      	ldr	r0, [pc, #12]	; (80259e8 <updateRTC+0x4c>)
 80259da:	f7f7 fa5f 	bl	801ce9c <HAL_RTCEx_BKUPWrite>
}
 80259de:	bf00      	nop
 80259e0:	3720      	adds	r7, #32
 80259e2:	46bd      	mov	sp, r7
 80259e4:	bd80      	pop	{r7, pc}
 80259e6:	bf00      	nop
 80259e8:	20028734 	.word	0x20028734

080259ec <APP_THREAD_CoapLightsComplexRequestHandler>:
//    BSP_LED_On(LED1);
//    APP_DBG(" ********* BUFFER HAS BEEN TRANFERED \r\n");
//  }
//}
static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80259ec:	b580      	push	{r7, lr}
 80259ee:	b084      	sub	sp, #16
 80259f0:	af00      	add	r7, sp, #0
 80259f2:	60f8      	str	r0, [r7, #12]
 80259f4:	60b9      	str	r1, [r7, #8]
 80259f6:	607a      	str	r2, [r7, #4]
	do {
		//APP_THREAD_SendCoapUnicastRequest();

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex))
 80259f8:	68b8      	ldr	r0, [r7, #8]
 80259fa:	f7fd fe75 	bl	80236e8 <otMessageGetOffset>
 80259fe:	4603      	mov	r3, r0
 8025a00:	4619      	mov	r1, r3
 8025a02:	2312      	movs	r3, #18
 8025a04:	4a16      	ldr	r2, [pc, #88]	; (8025a60 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8025a06:	68b8      	ldr	r0, [r7, #8]
 8025a08:	f7fd fed3 	bl	80237b2 <otMessageRead>
 8025a0c:	4603      	mov	r3, r0
 8025a0e:	2b12      	cmp	r3, #18
 8025a10:	d102      	bne.n	8025a18 <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
				== sizeof(lightMessageComplex)) {
			FrontLightsSet(&lightMessageComplex);
 8025a12:	4813      	ldr	r0, [pc, #76]	; (8025a60 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8025a14:	f7ee fa46 	bl	8013ea4 <FrontLightsSet>
		}

		tempMessageInfo = pMessageInfo;
 8025a18:	4a12      	ldr	r2, [pc, #72]	; (8025a64 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 8025a1a:	687b      	ldr	r3, [r7, #4]
 8025a1c:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8025a1e:	4a12      	ldr	r2, [pc, #72]	; (8025a68 <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 8025a20:	68bb      	ldr	r3, [r7, #8]
 8025a22:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE) {
 8025a24:	68f8      	ldr	r0, [r7, #12]
 8025a26:	f7fd fab0 	bl	8022f8a <otCoapHeaderGetType>
 8025a2a:	4603      	mov	r3, r0
 8025a2c:	2b10      	cmp	r3, #16
 8025a2e:	d110      	bne.n	8025a52 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
			break;
		}

		if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT) {
 8025a30:	68f8      	ldr	r0, [r7, #12]
 8025a32:	f7fd fad8 	bl	8022fe6 <otCoapHeaderGetCode>
 8025a36:	4603      	mov	r3, r0
 8025a38:	2b03      	cmp	r3, #3
 8025a3a:	d10c      	bne.n	8025a56 <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
			break;
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8025a3c:	68b8      	ldr	r0, [r7, #8]
 8025a3e:	f7fd fe53 	bl	80236e8 <otMessageGetOffset>
 8025a42:	4603      	mov	r3, r0
 8025a44:	4619      	mov	r1, r3
 8025a46:	2301      	movs	r3, #1
 8025a48:	4a08      	ldr	r2, [pc, #32]	; (8025a6c <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 8025a4a:	68b8      	ldr	r0, [r7, #8]
 8025a4c:	f7fd feb1 	bl	80237b2 <otMessageRead>
		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}

	} while (false);
}
 8025a50:	e002      	b.n	8025a58 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8025a52:	bf00      	nop
 8025a54:	e000      	b.n	8025a58 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8025a56:	bf00      	nop
}
 8025a58:	bf00      	nop
 8025a5a:	3710      	adds	r7, #16
 8025a5c:	46bd      	mov	sp, r7
 8025a5e:	bd80      	pop	{r7, pc}
 8025a60:	20028924 	.word	0x20028924
 8025a64:	200288f4 	.word	0x200288f4
 8025a68:	2002894c 	.word	0x2002894c
 8025a6c:	200276e9 	.word	0x200276e9

08025a70 <APP_THREAD_SendCoapMsg>:
//  }
//}

static char empty_message[10] = "empty";
static void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8025a70:	b590      	push	{r4, r7, lr}
 8025a72:	b087      	sub	sp, #28
 8025a74:	af02      	add	r7, sp, #8
 8025a76:	60f8      	str	r0, [r7, #12]
 8025a78:	607a      	str	r2, [r7, #4]
 8025a7a:	603b      	str	r3, [r7, #0]
 8025a7c:	460b      	mov	r3, r1
 8025a7e:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8025a80:	222c      	movs	r2, #44	; 0x2c
 8025a82:	2100      	movs	r1, #0
 8025a84:	486c      	ldr	r0, [pc, #432]	; (8025c38 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025a86:	f001 f970 	bl	8026d6a <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 8025a8a:	897b      	ldrh	r3, [r7, #10]
 8025a8c:	2b64      	cmp	r3, #100	; 0x64
 8025a8e:	d90c      	bls.n	8025aaa <APP_THREAD_SendCoapMsg+0x3a>
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8025a90:	4b69      	ldr	r3, [pc, #420]	; (8025c38 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025a92:	4a6a      	ldr	r2, [pc, #424]	; (8025c3c <APP_THREAD_SendCoapMsg+0x1cc>)
 8025a94:	f103 0410 	add.w	r4, r3, #16
 8025a98:	4613      	mov	r3, r2
 8025a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025a9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
 8025aa0:	4965      	ldr	r1, [pc, #404]	; (8025c38 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025aa2:	4867      	ldr	r0, [pc, #412]	; (8025c40 <APP_THREAD_SendCoapMsg+0x1d0>)
 8025aa4:	f7fd fd63 	bl	802356e <otIp6AddressFromString>
 8025aa8:	e009      	b.n	8025abe <APP_THREAD_SendCoapMsg+0x4e>
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8025aaa:	4b63      	ldr	r3, [pc, #396]	; (8025c38 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025aac:	4a65      	ldr	r2, [pc, #404]	; (8025c44 <APP_THREAD_SendCoapMsg+0x1d4>)
 8025aae:	f103 0410 	add.w	r4, r3, #16
 8025ab2:	4613      	mov	r3, r2
 8025ab4:	6818      	ldr	r0, [r3, #0]
 8025ab6:	6859      	ldr	r1, [r3, #4]
 8025ab8:	689a      	ldr	r2, [r3, #8]
 8025aba:	68db      	ldr	r3, [r3, #12]
 8025abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8025abe:	4b5e      	ldr	r3, [pc, #376]	; (8025c38 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025ac0:	2201      	movs	r2, #1
 8025ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8025ac6:	4b5c      	ldr	r3, [pc, #368]	; (8025c38 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025ac8:	f241 6233 	movw	r2, #5683	; 0x1633
 8025acc:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8025ace:	4b5a      	ldr	r3, [pc, #360]	; (8025c38 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025ad0:	2240      	movs	r2, #64	; 0x40
 8025ad2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8025ad6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025ada:	2b00      	cmp	r3, #0
 8025adc:	d009      	beq.n	8025af2 <APP_THREAD_SendCoapMsg+0x82>
 8025ade:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025ae2:	2b03      	cmp	r3, #3
 8025ae4:	d105      	bne.n	8025af2 <APP_THREAD_SendCoapMsg+0x82>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8025ae6:	2203      	movs	r2, #3
 8025ae8:	2100      	movs	r1, #0
 8025aea:	4857      	ldr	r0, [pc, #348]	; (8025c48 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025aec:	f7fd f8f1 	bl	8022cd2 <otCoapHeaderInit>
 8025af0:	e04a      	b.n	8025b88 <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8025af2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025af6:	2b00      	cmp	r3, #0
 8025af8:	d009      	beq.n	8025b0e <APP_THREAD_SendCoapMsg+0x9e>
 8025afa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025afe:	2b01      	cmp	r3, #1
 8025b00:	d105      	bne.n	8025b0e <APP_THREAD_SendCoapMsg+0x9e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8025b02:	2201      	movs	r2, #1
 8025b04:	2100      	movs	r1, #0
 8025b06:	4850      	ldr	r0, [pc, #320]	; (8025c48 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025b08:	f7fd f8e3 	bl	8022cd2 <otCoapHeaderInit>
 8025b0c:	e03c      	b.n	8025b88 <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8025b0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025b12:	2b00      	cmp	r3, #0
 8025b14:	d009      	beq.n	8025b2a <APP_THREAD_SendCoapMsg+0xba>
 8025b16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025b1a:	2b02      	cmp	r3, #2
 8025b1c:	d105      	bne.n	8025b2a <APP_THREAD_SendCoapMsg+0xba>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8025b1e:	2202      	movs	r2, #2
 8025b20:	2100      	movs	r1, #0
 8025b22:	4849      	ldr	r0, [pc, #292]	; (8025c48 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025b24:	f7fd f8d5 	bl	8022cd2 <otCoapHeaderInit>
 8025b28:	e02e      	b.n	8025b88 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8025b2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025b2e:	2b00      	cmp	r3, #0
 8025b30:	d109      	bne.n	8025b46 <APP_THREAD_SendCoapMsg+0xd6>
 8025b32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025b36:	2b03      	cmp	r3, #3
 8025b38:	d105      	bne.n	8025b46 <APP_THREAD_SendCoapMsg+0xd6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8025b3a:	2203      	movs	r2, #3
 8025b3c:	2110      	movs	r1, #16
 8025b3e:	4842      	ldr	r0, [pc, #264]	; (8025c48 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025b40:	f7fd f8c7 	bl	8022cd2 <otCoapHeaderInit>
 8025b44:	e020      	b.n	8025b88 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8025b46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025b4a:	2b00      	cmp	r3, #0
 8025b4c:	d109      	bne.n	8025b62 <APP_THREAD_SendCoapMsg+0xf2>
 8025b4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025b52:	2b01      	cmp	r3, #1
 8025b54:	d105      	bne.n	8025b62 <APP_THREAD_SendCoapMsg+0xf2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8025b56:	2201      	movs	r2, #1
 8025b58:	2110      	movs	r1, #16
 8025b5a:	483b      	ldr	r0, [pc, #236]	; (8025c48 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025b5c:	f7fd f8b9 	bl	8022cd2 <otCoapHeaderInit>
 8025b60:	e012      	b.n	8025b88 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8025b62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025b66:	2b00      	cmp	r3, #0
 8025b68:	d109      	bne.n	8025b7e <APP_THREAD_SendCoapMsg+0x10e>
 8025b6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025b6e:	2b02      	cmp	r3, #2
 8025b70:	d105      	bne.n	8025b7e <APP_THREAD_SendCoapMsg+0x10e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8025b72:	2202      	movs	r2, #2
 8025b74:	2110      	movs	r1, #16
 8025b76:	4834      	ldr	r0, [pc, #208]	; (8025c48 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025b78:	f7fd f8ab 	bl	8022cd2 <otCoapHeaderInit>
 8025b7c:	e004      	b.n	8025b88 <APP_THREAD_SendCoapMsg+0x118>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8025b7e:	2102      	movs	r1, #2
 8025b80:	4831      	ldr	r0, [pc, #196]	; (8025c48 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025b82:	f7fd f90f 	bl	8022da4 <otCoapHeaderGenerateToken>
 8025b86:	e053      	b.n	8025c30 <APP_THREAD_SendCoapMsg+0x1c0>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8025b88:	6839      	ldr	r1, [r7, #0]
 8025b8a:	482f      	ldr	r0, [pc, #188]	; (8025c48 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025b8c:	f7fd f96d 	bl	8022e6a <otCoapHeaderAppendUriPathOptions>
 8025b90:	4603      	mov	r3, r0
 8025b92:	461a      	mov	r2, r3
 8025b94:	4b2d      	ldr	r3, [pc, #180]	; (8025c4c <APP_THREAD_SendCoapMsg+0x1dc>)
 8025b96:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8025b98:	212a      	movs	r1, #42	; 0x2a
 8025b9a:	482b      	ldr	r0, [pc, #172]	; (8025c48 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025b9c:	f7fd f932 	bl	8022e04 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header);
 8025ba0:	4829      	ldr	r0, [pc, #164]	; (8025c48 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025ba2:	f7fd f994 	bl	8022ece <otCoapHeaderSetPayloadMarker>

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8025ba6:	4928      	ldr	r1, [pc, #160]	; (8025c48 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025ba8:	2000      	movs	r0, #0
 8025baa:	f7fd fad3 	bl	8023154 <otCoapNewMessage>
 8025bae:	4602      	mov	r2, r0
 8025bb0:	4b27      	ldr	r3, [pc, #156]	; (8025c50 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025bb2:	601a      	str	r2, [r3, #0]
		if (pOT_Message == NULL)
 8025bb4:	4b26      	ldr	r3, [pc, #152]	; (8025c50 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025bb6:	681b      	ldr	r3, [r3, #0]
 8025bb8:	2b00      	cmp	r3, #0
 8025bba:	d100      	bne.n	8025bbe <APP_THREAD_SendCoapMsg+0x14e>
			while (1);
 8025bbc:	e7fe      	b.n	8025bbc <APP_THREAD_SendCoapMsg+0x14c>

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 8025bbe:	897b      	ldrh	r3, [r7, #10]
 8025bc0:	2b00      	cmp	r3, #0
 8025bc2:	d00b      	beq.n	8025bdc <APP_THREAD_SendCoapMsg+0x16c>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8025bc4:	4b22      	ldr	r3, [pc, #136]	; (8025c50 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025bc6:	681b      	ldr	r3, [r3, #0]
 8025bc8:	897a      	ldrh	r2, [r7, #10]
 8025bca:	68f9      	ldr	r1, [r7, #12]
 8025bcc:	4618      	mov	r0, r3
 8025bce:	f7fd fdb9 	bl	8023744 <otMessageAppend>
 8025bd2:	4603      	mov	r3, r0
 8025bd4:	461a      	mov	r2, r3
 8025bd6:	4b1d      	ldr	r3, [pc, #116]	; (8025c4c <APP_THREAD_SendCoapMsg+0x1dc>)
 8025bd8:	701a      	strb	r2, [r3, #0]
 8025bda:	e00a      	b.n	8025bf2 <APP_THREAD_SendCoapMsg+0x182>
		}else{
			error = otMessageAppend(pOT_Message, empty_message, 10);
 8025bdc:	4b1c      	ldr	r3, [pc, #112]	; (8025c50 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025bde:	681b      	ldr	r3, [r3, #0]
 8025be0:	220a      	movs	r2, #10
 8025be2:	491c      	ldr	r1, [pc, #112]	; (8025c54 <APP_THREAD_SendCoapMsg+0x1e4>)
 8025be4:	4618      	mov	r0, r3
 8025be6:	f7fd fdad 	bl	8023744 <otMessageAppend>
 8025bea:	4603      	mov	r3, r0
 8025bec:	461a      	mov	r2, r3
 8025bee:	4b17      	ldr	r3, [pc, #92]	; (8025c4c <APP_THREAD_SendCoapMsg+0x1dc>)
 8025bf0:	701a      	strb	r2, [r3, #0]
		}

			  if (error != OT_ERROR_NONE) while(1);
 8025bf2:	4b16      	ldr	r3, [pc, #88]	; (8025c4c <APP_THREAD_SendCoapMsg+0x1dc>)
 8025bf4:	781b      	ldrb	r3, [r3, #0]
 8025bf6:	2b00      	cmp	r3, #0
 8025bf8:	d000      	beq.n	8025bfc <APP_THREAD_SendCoapMsg+0x18c>
 8025bfa:	e7fe      	b.n	8025bfa <APP_THREAD_SendCoapMsg+0x18a>

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 8025bfc:	4b14      	ldr	r3, [pc, #80]	; (8025c50 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025bfe:	6819      	ldr	r1, [r3, #0]
 8025c00:	2300      	movs	r3, #0
 8025c02:	9300      	str	r3, [sp, #0]
 8025c04:	2300      	movs	r3, #0
 8025c06:	4a0c      	ldr	r2, [pc, #48]	; (8025c38 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025c08:	2000      	movs	r0, #0
 8025c0a:	f7fd fad1 	bl	80231b0 <otCoapSendRequest>
 8025c0e:	4603      	mov	r3, r0
 8025c10:	461a      	mov	r2, r3
 8025c12:	4b0e      	ldr	r3, [pc, #56]	; (8025c4c <APP_THREAD_SendCoapMsg+0x1dc>)
 8025c14:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8025c16:	4b0d      	ldr	r3, [pc, #52]	; (8025c4c <APP_THREAD_SendCoapMsg+0x1dc>)
 8025c18:	781b      	ldrb	r3, [r3, #0]
 8025c1a:	2b00      	cmp	r3, #0
 8025c1c:	d008      	beq.n	8025c30 <APP_THREAD_SendCoapMsg+0x1c0>
 8025c1e:	4b0c      	ldr	r3, [pc, #48]	; (8025c50 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025c20:	681b      	ldr	r3, [r3, #0]
 8025c22:	2b00      	cmp	r3, #0
 8025c24:	d004      	beq.n	8025c30 <APP_THREAD_SendCoapMsg+0x1c0>
			otMessageFree(pOT_Message);
 8025c26:	4b0a      	ldr	r3, [pc, #40]	; (8025c50 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025c28:	681b      	ldr	r3, [r3, #0]
 8025c2a:	4618      	mov	r0, r3
 8025c2c:	f7fd fd31 	bl	8023692 <otMessageFree>
		}

	} while (false);
}
 8025c30:	3714      	adds	r7, #20
 8025c32:	46bd      	mov	sp, r7
 8025c34:	bd90      	pop	{r4, r7, pc}
 8025c36:	bf00      	nop
 8025c38:	20027628 	.word	0x20027628
 8025c3c:	200276f0 	.word	0x200276f0
 8025c40:	080289c4 	.word	0x080289c4
 8025c44:	20028938 	.word	0x20028938
 8025c48:	20027654 	.word	0x20027654
 8025c4c:	200276e8 	.word	0x200276e8
 8025c50:	200276e4 	.word	0x200276e4
 8025c54:	20000138 	.word	0x20000138

08025c58 <APP_THREAD_SendCoapMsgForBorderSync>:

static void APP_THREAD_SendCoapMsgForBorderSync(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8025c58:	b590      	push	{r4, r7, lr}
 8025c5a:	b087      	sub	sp, #28
 8025c5c:	af02      	add	r7, sp, #8
 8025c5e:	60f8      	str	r0, [r7, #12]
 8025c60:	607a      	str	r2, [r7, #4]
 8025c62:	603b      	str	r3, [r7, #0]
 8025c64:	460b      	mov	r3, r1
 8025c66:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8025c68:	222c      	movs	r2, #44	; 0x2c
 8025c6a:	2100      	movs	r1, #0
 8025c6c:	4864      	ldr	r0, [pc, #400]	; (8025e00 <APP_THREAD_SendCoapMsgForBorderSync+0x1a8>)
 8025c6e:	f001 f87c 	bl	8026d6a <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed


		memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8025c72:	4b63      	ldr	r3, [pc, #396]	; (8025e00 <APP_THREAD_SendCoapMsgForBorderSync+0x1a8>)
 8025c74:	4a63      	ldr	r2, [pc, #396]	; (8025e04 <APP_THREAD_SendCoapMsgForBorderSync+0x1ac>)
 8025c76:	f103 0410 	add.w	r4, r3, #16
 8025c7a:	4613      	mov	r3, r2
 8025c7c:	6818      	ldr	r0, [r3, #0]
 8025c7e:	6859      	ldr	r1, [r3, #4]
 8025c80:	689a      	ldr	r2, [r3, #8]
 8025c82:	68db      	ldr	r3, [r3, #12]
 8025c84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8025c86:	4b5e      	ldr	r3, [pc, #376]	; (8025e00 <APP_THREAD_SendCoapMsgForBorderSync+0x1a8>)
 8025c88:	2201      	movs	r2, #1
 8025c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8025c8e:	4b5c      	ldr	r3, [pc, #368]	; (8025e00 <APP_THREAD_SendCoapMsgForBorderSync+0x1a8>)
 8025c90:	f241 6233 	movw	r2, #5683	; 0x1633
 8025c94:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8025c96:	4b5a      	ldr	r3, [pc, #360]	; (8025e00 <APP_THREAD_SendCoapMsgForBorderSync+0x1a8>)
 8025c98:	2240      	movs	r2, #64	; 0x40
 8025c9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8025c9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025ca2:	2b00      	cmp	r3, #0
 8025ca4:	d009      	beq.n	8025cba <APP_THREAD_SendCoapMsgForBorderSync+0x62>
 8025ca6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025caa:	2b03      	cmp	r3, #3
 8025cac:	d105      	bne.n	8025cba <APP_THREAD_SendCoapMsgForBorderSync+0x62>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8025cae:	2203      	movs	r2, #3
 8025cb0:	2100      	movs	r1, #0
 8025cb2:	4855      	ldr	r0, [pc, #340]	; (8025e08 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025cb4:	f7fd f80d 	bl	8022cd2 <otCoapHeaderInit>
 8025cb8:	e04a      	b.n	8025d50 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8025cba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025cbe:	2b00      	cmp	r3, #0
 8025cc0:	d009      	beq.n	8025cd6 <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
 8025cc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025cc6:	2b01      	cmp	r3, #1
 8025cc8:	d105      	bne.n	8025cd6 <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8025cca:	2201      	movs	r2, #1
 8025ccc:	2100      	movs	r1, #0
 8025cce:	484e      	ldr	r0, [pc, #312]	; (8025e08 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025cd0:	f7fc ffff 	bl	8022cd2 <otCoapHeaderInit>
 8025cd4:	e03c      	b.n	8025d50 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8025cd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025cda:	2b00      	cmp	r3, #0
 8025cdc:	d009      	beq.n	8025cf2 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
 8025cde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025ce2:	2b02      	cmp	r3, #2
 8025ce4:	d105      	bne.n	8025cf2 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8025ce6:	2202      	movs	r2, #2
 8025ce8:	2100      	movs	r1, #0
 8025cea:	4847      	ldr	r0, [pc, #284]	; (8025e08 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025cec:	f7fc fff1 	bl	8022cd2 <otCoapHeaderInit>
 8025cf0:	e02e      	b.n	8025d50 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8025cf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025cf6:	2b00      	cmp	r3, #0
 8025cf8:	d109      	bne.n	8025d0e <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
 8025cfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025cfe:	2b03      	cmp	r3, #3
 8025d00:	d105      	bne.n	8025d0e <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8025d02:	2203      	movs	r2, #3
 8025d04:	2110      	movs	r1, #16
 8025d06:	4840      	ldr	r0, [pc, #256]	; (8025e08 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025d08:	f7fc ffe3 	bl	8022cd2 <otCoapHeaderInit>
 8025d0c:	e020      	b.n	8025d50 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8025d0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025d12:	2b00      	cmp	r3, #0
 8025d14:	d109      	bne.n	8025d2a <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
 8025d16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025d1a:	2b01      	cmp	r3, #1
 8025d1c:	d105      	bne.n	8025d2a <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8025d1e:	2201      	movs	r2, #1
 8025d20:	2110      	movs	r1, #16
 8025d22:	4839      	ldr	r0, [pc, #228]	; (8025e08 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025d24:	f7fc ffd5 	bl	8022cd2 <otCoapHeaderInit>
 8025d28:	e012      	b.n	8025d50 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8025d2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025d2e:	2b00      	cmp	r3, #0
 8025d30:	d109      	bne.n	8025d46 <APP_THREAD_SendCoapMsgForBorderSync+0xee>
 8025d32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025d36:	2b02      	cmp	r3, #2
 8025d38:	d105      	bne.n	8025d46 <APP_THREAD_SendCoapMsgForBorderSync+0xee>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8025d3a:	2202      	movs	r2, #2
 8025d3c:	2110      	movs	r1, #16
 8025d3e:	4832      	ldr	r0, [pc, #200]	; (8025e08 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025d40:	f7fc ffc7 	bl	8022cd2 <otCoapHeaderInit>
 8025d44:	e004      	b.n	8025d50 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8025d46:	2102      	movs	r1, #2
 8025d48:	482f      	ldr	r0, [pc, #188]	; (8025e08 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025d4a:	f7fd f82b 	bl	8022da4 <otCoapHeaderGenerateToken>
 8025d4e:	e053      	b.n	8025df8 <APP_THREAD_SendCoapMsgForBorderSync+0x1a0>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8025d50:	6839      	ldr	r1, [r7, #0]
 8025d52:	482d      	ldr	r0, [pc, #180]	; (8025e08 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025d54:	f7fd f889 	bl	8022e6a <otCoapHeaderAppendUriPathOptions>
 8025d58:	4603      	mov	r3, r0
 8025d5a:	461a      	mov	r2, r3
 8025d5c:	4b2b      	ldr	r3, [pc, #172]	; (8025e0c <APP_THREAD_SendCoapMsgForBorderSync+0x1b4>)
 8025d5e:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8025d60:	212a      	movs	r1, #42	; 0x2a
 8025d62:	4829      	ldr	r0, [pc, #164]	; (8025e08 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025d64:	f7fd f84e 	bl	8022e04 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header);
 8025d68:	4827      	ldr	r0, [pc, #156]	; (8025e08 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025d6a:	f7fd f8b0 	bl	8022ece <otCoapHeaderSetPayloadMarker>

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8025d6e:	4926      	ldr	r1, [pc, #152]	; (8025e08 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025d70:	2000      	movs	r0, #0
 8025d72:	f7fd f9ef 	bl	8023154 <otCoapNewMessage>
 8025d76:	4602      	mov	r2, r0
 8025d78:	4b25      	ldr	r3, [pc, #148]	; (8025e10 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025d7a:	601a      	str	r2, [r3, #0]
		if (pOT_Message == NULL)
 8025d7c:	4b24      	ldr	r3, [pc, #144]	; (8025e10 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025d7e:	681b      	ldr	r3, [r3, #0]
 8025d80:	2b00      	cmp	r3, #0
 8025d82:	d100      	bne.n	8025d86 <APP_THREAD_SendCoapMsgForBorderSync+0x12e>
			while (1);
 8025d84:	e7fe      	b.n	8025d84 <APP_THREAD_SendCoapMsgForBorderSync+0x12c>

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 8025d86:	897b      	ldrh	r3, [r7, #10]
 8025d88:	2b00      	cmp	r3, #0
 8025d8a:	d00b      	beq.n	8025da4 <APP_THREAD_SendCoapMsgForBorderSync+0x14c>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8025d8c:	4b20      	ldr	r3, [pc, #128]	; (8025e10 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025d8e:	681b      	ldr	r3, [r3, #0]
 8025d90:	897a      	ldrh	r2, [r7, #10]
 8025d92:	68f9      	ldr	r1, [r7, #12]
 8025d94:	4618      	mov	r0, r3
 8025d96:	f7fd fcd5 	bl	8023744 <otMessageAppend>
 8025d9a:	4603      	mov	r3, r0
 8025d9c:	461a      	mov	r2, r3
 8025d9e:	4b1b      	ldr	r3, [pc, #108]	; (8025e0c <APP_THREAD_SendCoapMsgForBorderSync+0x1b4>)
 8025da0:	701a      	strb	r2, [r3, #0]
 8025da2:	e00a      	b.n	8025dba <APP_THREAD_SendCoapMsgForBorderSync+0x162>
		}else{
			error = otMessageAppend(pOT_Message, empty_message, 10);
 8025da4:	4b1a      	ldr	r3, [pc, #104]	; (8025e10 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025da6:	681b      	ldr	r3, [r3, #0]
 8025da8:	220a      	movs	r2, #10
 8025daa:	491a      	ldr	r1, [pc, #104]	; (8025e14 <APP_THREAD_SendCoapMsgForBorderSync+0x1bc>)
 8025dac:	4618      	mov	r0, r3
 8025dae:	f7fd fcc9 	bl	8023744 <otMessageAppend>
 8025db2:	4603      	mov	r3, r0
 8025db4:	461a      	mov	r2, r3
 8025db6:	4b15      	ldr	r3, [pc, #84]	; (8025e0c <APP_THREAD_SendCoapMsgForBorderSync+0x1b4>)
 8025db8:	701a      	strb	r2, [r3, #0]
		}

			  if (error != OT_ERROR_NONE) while(1);
 8025dba:	4b14      	ldr	r3, [pc, #80]	; (8025e0c <APP_THREAD_SendCoapMsgForBorderSync+0x1b4>)
 8025dbc:	781b      	ldrb	r3, [r3, #0]
 8025dbe:	2b00      	cmp	r3, #0
 8025dc0:	d000      	beq.n	8025dc4 <APP_THREAD_SendCoapMsgForBorderSync+0x16c>
 8025dc2:	e7fe      	b.n	8025dc2 <APP_THREAD_SendCoapMsgForBorderSync+0x16a>

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL, pOT_Message, &OT_MessageInfo, &APP_THREAD_DummyRespHandler,
 8025dc4:	4b12      	ldr	r3, [pc, #72]	; (8025e10 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025dc6:	6819      	ldr	r1, [r3, #0]
 8025dc8:	4b13      	ldr	r3, [pc, #76]	; (8025e18 <APP_THREAD_SendCoapMsgForBorderSync+0x1c0>)
 8025dca:	9300      	str	r3, [sp, #0]
 8025dcc:	4b13      	ldr	r3, [pc, #76]	; (8025e1c <APP_THREAD_SendCoapMsgForBorderSync+0x1c4>)
 8025dce:	4a0c      	ldr	r2, [pc, #48]	; (8025e00 <APP_THREAD_SendCoapMsgForBorderSync+0x1a8>)
 8025dd0:	2000      	movs	r0, #0
 8025dd2:	f7fd f9ed 	bl	80231b0 <otCoapSendRequest>
 8025dd6:	4603      	mov	r3, r0
 8025dd8:	461a      	mov	r2, r3
 8025dda:	4b0c      	ldr	r3, [pc, #48]	; (8025e0c <APP_THREAD_SendCoapMsgForBorderSync+0x1b4>)
 8025ddc:	701a      	strb	r2, [r3, #0]
				(void*) &APP_THREAD_CoapRespHandler_UpdateBorderRouter);



		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8025dde:	4b0b      	ldr	r3, [pc, #44]	; (8025e0c <APP_THREAD_SendCoapMsgForBorderSync+0x1b4>)
 8025de0:	781b      	ldrb	r3, [r3, #0]
 8025de2:	2b00      	cmp	r3, #0
 8025de4:	d008      	beq.n	8025df8 <APP_THREAD_SendCoapMsgForBorderSync+0x1a0>
 8025de6:	4b0a      	ldr	r3, [pc, #40]	; (8025e10 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025de8:	681b      	ldr	r3, [r3, #0]
 8025dea:	2b00      	cmp	r3, #0
 8025dec:	d004      	beq.n	8025df8 <APP_THREAD_SendCoapMsgForBorderSync+0x1a0>
			otMessageFree(pOT_Message);
 8025dee:	4b08      	ldr	r3, [pc, #32]	; (8025e10 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025df0:	681b      	ldr	r3, [r3, #0]
 8025df2:	4618      	mov	r0, r3
 8025df4:	f7fd fc4d 	bl	8023692 <otMessageFree>
		}

	} while (false);

}
 8025df8:	3714      	adds	r7, #20
 8025dfa:	46bd      	mov	sp, r7
 8025dfc:	bd90      	pop	{r4, r7, pc}
 8025dfe:	bf00      	nop
 8025e00:	20027628 	.word	0x20027628
 8025e04:	20028938 	.word	0x20028938
 8025e08:	20027654 	.word	0x20027654
 8025e0c:	200276e8 	.word	0x200276e8
 8025e10:	200276e4 	.word	0x200276e4
 8025e14:	20000138 	.word	0x20000138
 8025e18:	08024eed 	.word	0x08024eed
 8025e1c:	08024ed1 	.word	0x08024ed1

08025e20 <APP_THREAD_SendDataResponse>:
response and original request MUST match.  In a separate
response, just the tokens of the response and original request
MUST match.*/

static void APP_THREAD_SendDataResponse(otCoapHeader *pRequestHeader, const otMessageInfo *pMessageInfo, void *message,
		uint16_t msgSize) {
 8025e20:	b590      	push	{r4, r7, lr}
 8025e22:	b087      	sub	sp, #28
 8025e24:	af00      	add	r7, sp, #0
 8025e26:	60f8      	str	r0, [r7, #12]
 8025e28:	60b9      	str	r1, [r7, #8]
 8025e2a:	607a      	str	r2, [r7, #4]
 8025e2c:	807b      	strh	r3, [r7, #2]
	otError error = OT_ERROR_NONE;
 8025e2e:	2300      	movs	r3, #0
 8025e30:	75fb      	strb	r3, [r7, #23]

	//APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
	otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8025e32:	2244      	movs	r2, #68	; 0x44
 8025e34:	2120      	movs	r1, #32
 8025e36:	4822      	ldr	r0, [pc, #136]	; (8025ec0 <APP_THREAD_SendDataResponse+0xa0>)
 8025e38:	f7fc ff4b 	bl	8022cd2 <otCoapHeaderInit>
	otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8025e3c:	68f8      	ldr	r0, [r7, #12]
 8025e3e:	f7fd f900 	bl	8023042 <otCoapHeaderGetMessageId>
 8025e42:	4603      	mov	r3, r0
 8025e44:	4619      	mov	r1, r3
 8025e46:	481e      	ldr	r0, [pc, #120]	; (8025ec0 <APP_THREAD_SendDataResponse+0xa0>)
 8025e48:	f7fd f86f 	bl	8022f2a <otCoapHeaderSetMessageId>
	otCoapHeaderSetToken(&OT_Header, otCoapHeaderGetToken(pRequestHeader), otCoapHeaderGetTokenLength(pRequestHeader));
 8025e4c:	68f8      	ldr	r0, [r7, #12]
 8025e4e:	f7fd f954 	bl	80230fa <otCoapHeaderGetToken>
 8025e52:	4604      	mov	r4, r0
 8025e54:	68f8      	ldr	r0, [r7, #12]
 8025e56:	f7fd f922 	bl	802309e <otCoapHeaderGetTokenLength>
 8025e5a:	4603      	mov	r3, r0
 8025e5c:	461a      	mov	r2, r3
 8025e5e:	4621      	mov	r1, r4
 8025e60:	4817      	ldr	r0, [pc, #92]	; (8025ec0 <APP_THREAD_SendDataResponse+0xa0>)
 8025e62:	f7fc ff6b 	bl	8022d3c <otCoapHeaderSetToken>

	pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8025e66:	4916      	ldr	r1, [pc, #88]	; (8025ec0 <APP_THREAD_SendDataResponse+0xa0>)
 8025e68:	2000      	movs	r0, #0
 8025e6a:	f7fd f973 	bl	8023154 <otCoapNewMessage>
 8025e6e:	4602      	mov	r2, r0
 8025e70:	4b14      	ldr	r3, [pc, #80]	; (8025ec4 <APP_THREAD_SendDataResponse+0xa4>)
 8025e72:	601a      	str	r2, [r3, #0]
	if (pOT_Message == NULL) {
		//APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
	}

	// append message if there was one given
	if (msgSize > 0) {
 8025e74:	887b      	ldrh	r3, [r7, #2]
 8025e76:	2b00      	cmp	r3, #0
 8025e78:	d008      	beq.n	8025e8c <APP_THREAD_SendDataResponse+0x6c>
		error = otMessageAppend(pOT_Message, message, msgSize);
 8025e7a:	4b12      	ldr	r3, [pc, #72]	; (8025ec4 <APP_THREAD_SendDataResponse+0xa4>)
 8025e7c:	681b      	ldr	r3, [r3, #0]
 8025e7e:	887a      	ldrh	r2, [r7, #2]
 8025e80:	6879      	ldr	r1, [r7, #4]
 8025e82:	4618      	mov	r0, r3
 8025e84:	f7fd fc5e 	bl	8023744 <otMessageAppend>
 8025e88:	4603      	mov	r3, r0
 8025e8a:	75fb      	strb	r3, [r7, #23]
	}

	error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8025e8c:	4b0d      	ldr	r3, [pc, #52]	; (8025ec4 <APP_THREAD_SendDataResponse+0xa4>)
 8025e8e:	681b      	ldr	r3, [r3, #0]
 8025e90:	68ba      	ldr	r2, [r7, #8]
 8025e92:	4619      	mov	r1, r3
 8025e94:	2000      	movs	r0, #0
 8025e96:	f7fd fa24 	bl	80232e2 <otCoapSendResponse>
 8025e9a:	4603      	mov	r3, r0
 8025e9c:	75fb      	strb	r3, [r7, #23]
	if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8025e9e:	7dfb      	ldrb	r3, [r7, #23]
 8025ea0:	2b00      	cmp	r3, #0
 8025ea2:	d008      	beq.n	8025eb6 <APP_THREAD_SendDataResponse+0x96>
 8025ea4:	4b07      	ldr	r3, [pc, #28]	; (8025ec4 <APP_THREAD_SendDataResponse+0xa4>)
 8025ea6:	681b      	ldr	r3, [r3, #0]
 8025ea8:	2b00      	cmp	r3, #0
 8025eaa:	d004      	beq.n	8025eb6 <APP_THREAD_SendDataResponse+0x96>
		otMessageFree(pOT_Message);
 8025eac:	4b05      	ldr	r3, [pc, #20]	; (8025ec4 <APP_THREAD_SendDataResponse+0xa4>)
 8025eae:	681b      	ldr	r3, [r3, #0]
 8025eb0:	4618      	mov	r0, r3
 8025eb2:	f7fd fbee 	bl	8023692 <otMessageFree>
		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
	}
}
 8025eb6:	bf00      	nop
 8025eb8:	371c      	adds	r7, #28
 8025eba:	46bd      	mov	sp, r7
 8025ebc:	bd90      	pop	{r4, r7, pc}
 8025ebe:	bf00      	nop
 8025ec0:	20027654 	.word	0x20027654
 8025ec4:	200276e4 	.word	0x200276e4

08025ec8 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8025ec8:	b480      	push	{r7}
 8025eca:	b083      	sub	sp, #12
 8025ecc:	af00      	add	r7, sp, #0
 8025ece:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8025ed0:	4a04      	ldr	r2, [pc, #16]	; (8025ee4 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8025ed2:	687b      	ldr	r3, [r7, #4]
 8025ed4:	6013      	str	r3, [r2, #0]
}
 8025ed6:	bf00      	nop
 8025ed8:	370c      	adds	r7, #12
 8025eda:	46bd      	mov	sp, r7
 8025edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ee0:	4770      	bx	lr
 8025ee2:	bf00      	nop
 8025ee4:	20027610 	.word	0x20027610

08025ee8 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8025ee8:	b480      	push	{r7}
 8025eea:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8025eec:	4b03      	ldr	r3, [pc, #12]	; (8025efc <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8025eee:	681b      	ldr	r3, [r3, #0]
 8025ef0:	330c      	adds	r3, #12
}
 8025ef2:	4618      	mov	r0, r3
 8025ef4:	46bd      	mov	sp, r7
 8025ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025efa:	4770      	bx	lr
 8025efc:	20027610 	.word	0x20027610

08025f00 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8025f00:	b480      	push	{r7}
 8025f02:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8025f04:	4b03      	ldr	r3, [pc, #12]	; (8025f14 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8025f06:	681b      	ldr	r3, [r3, #0]
 8025f08:	330b      	adds	r3, #11
}
 8025f0a:	4618      	mov	r0, r3
 8025f0c:	46bd      	mov	sp, r7
 8025f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f12:	4770      	bx	lr
 8025f14:	20027610 	.word	0x20027610

08025f18 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8025f18:	b480      	push	{r7}
 8025f1a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8025f1c:	4b03      	ldr	r3, [pc, #12]	; (8025f2c <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8025f1e:	681b      	ldr	r3, [r3, #0]
 8025f20:	330b      	adds	r3, #11
}
 8025f22:	4618      	mov	r0, r3
 8025f24:	46bd      	mov	sp, r7
 8025f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f2a:	4770      	bx	lr
 8025f2c:	20027614 	.word	0x20027614

08025f30 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8025f30:	b580      	push	{r7, lr}
 8025f32:	b082      	sub	sp, #8
 8025f34:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8025f36:	4b0f      	ldr	r3, [pc, #60]	; (8025f74 <Ot_Cmd_Transfer+0x44>)
 8025f38:	681b      	ldr	r3, [r3, #0]
 8025f3a:	2200      	movs	r2, #0
 8025f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8025f40:	725a      	strb	r2, [r3, #9]
 8025f42:	2200      	movs	r2, #0
 8025f44:	f042 0202 	orr.w	r2, r2, #2
 8025f48:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8025f4a:	4b0a      	ldr	r3, [pc, #40]	; (8025f74 <Ot_Cmd_Transfer+0x44>)
 8025f4c:	681b      	ldr	r3, [r3, #0]
 8025f4e:	330c      	adds	r3, #12
 8025f50:	685b      	ldr	r3, [r3, #4]
 8025f52:	3302      	adds	r3, #2
 8025f54:	009b      	lsls	r3, r3, #2
 8025f56:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8025f58:	4b06      	ldr	r3, [pc, #24]	; (8025f74 <Ot_Cmd_Transfer+0x44>)
 8025f5a:	681b      	ldr	r3, [r3, #0]
 8025f5c:	687a      	ldr	r2, [r7, #4]
 8025f5e:	b2d2      	uxtb	r2, r2
 8025f60:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8025f62:	f7fe fb19 	bl	8024598 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8025f66:	f000 f829 	bl	8025fbc <Wait_Getting_Ack_From_M0>
}
 8025f6a:	bf00      	nop
 8025f6c:	3708      	adds	r7, #8
 8025f6e:	46bd      	mov	sp, r7
 8025f70:	bd80      	pop	{r7, pc}
 8025f72:	bf00      	nop
 8025f74:	20027610 	.word	0x20027610

08025f78 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8025f78:	b580      	push	{r7, lr}
 8025f7a:	b082      	sub	sp, #8
 8025f7c:	af00      	add	r7, sp, #0
 8025f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8025f80:	f000 f82e 	bl	8025fe0 <Receive_Ack_From_M0>
}
 8025f84:	bf00      	nop
 8025f86:	3708      	adds	r7, #8
 8025f88:	46bd      	mov	sp, r7
 8025f8a:	bd80      	pop	{r7, pc}

08025f8c <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8025f8c:	b580      	push	{r7, lr}
 8025f8e:	b082      	sub	sp, #8
 8025f90:	af00      	add	r7, sp, #0
 8025f92:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8025f94:	4a04      	ldr	r2, [pc, #16]	; (8025fa8 <TL_THREAD_NotReceived+0x1c>)
 8025f96:	687b      	ldr	r3, [r7, #4]
 8025f98:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8025f9a:	f000 f82d 	bl	8025ff8 <Receive_Notification_From_M0>
}
 8025f9e:	bf00      	nop
 8025fa0:	3708      	adds	r7, #8
 8025fa2:	46bd      	mov	sp, r7
 8025fa4:	bd80      	pop	{r7, pc}
 8025fa6:	bf00      	nop
 8025fa8:	20027614 	.word	0x20027614

08025fac <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8025fac:	b480      	push	{r7}
 8025fae:	af00      	add	r7, sp, #0

}
 8025fb0:	bf00      	nop
 8025fb2:	46bd      	mov	sp, r7
 8025fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fb8:	4770      	bx	lr
	...

08025fbc <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8025fbc:	b480      	push	{r7}
 8025fbe:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8025fc0:	bf00      	nop
 8025fc2:	4b06      	ldr	r3, [pc, #24]	; (8025fdc <Wait_Getting_Ack_From_M0+0x20>)
 8025fc4:	681b      	ldr	r3, [r3, #0]
 8025fc6:	2b00      	cmp	r3, #0
 8025fc8:	d0fb      	beq.n	8025fc2 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8025fca:	4b04      	ldr	r3, [pc, #16]	; (8025fdc <Wait_Getting_Ack_From_M0+0x20>)
 8025fcc:	2200      	movs	r2, #0
 8025fce:	601a      	str	r2, [r3, #0]
}
 8025fd0:	bf00      	nop
 8025fd2:	46bd      	mov	sp, r7
 8025fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fd8:	4770      	bx	lr
 8025fda:	bf00      	nop
 8025fdc:	2002761c 	.word	0x2002761c

08025fe0 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8025fe0:	b480      	push	{r7}
 8025fe2:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8025fe4:	4b03      	ldr	r3, [pc, #12]	; (8025ff4 <Receive_Ack_From_M0+0x14>)
 8025fe6:	2201      	movs	r2, #1
 8025fe8:	601a      	str	r2, [r3, #0]
}
 8025fea:	bf00      	nop
 8025fec:	46bd      	mov	sp, r7
 8025fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ff2:	4770      	bx	lr
 8025ff4:	2002761c 	.word	0x2002761c

08025ff8 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8025ff8:	b580      	push	{r7, lr}
 8025ffa:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8025ffc:	4b06      	ldr	r3, [pc, #24]	; (8026018 <Receive_Notification_From_M0+0x20>)
 8025ffe:	681b      	ldr	r3, [r3, #0]
 8026000:	3301      	adds	r3, #1
 8026002:	4a05      	ldr	r2, [pc, #20]	; (8026018 <Receive_Notification_From_M0+0x20>)
 8026004:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 8026006:	4b05      	ldr	r3, [pc, #20]	; (802601c <Receive_Notification_From_M0+0x24>)
 8026008:	681b      	ldr	r3, [r3, #0]
 802600a:	2101      	movs	r1, #1
 802600c:	4618      	mov	r0, r3
 802600e:	f7f8 fb19 	bl	801e644 <osThreadFlagsSet>
}
 8026012:	bf00      	nop
 8026014:	bd80      	pop	{r7, pc}
 8026016:	bf00      	nop
 8026018:	20027618 	.word	0x20027618
 802601c:	20027620 	.word	0x20027620

08026020 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8026020:	b580      	push	{r7, lr}
 8026022:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8026024:	22ff      	movs	r2, #255	; 0xff
 8026026:	2100      	movs	r1, #0
 8026028:	4812      	ldr	r0, [pc, #72]	; (8026074 <Send_CLI_To_M0+0x54>)
 802602a:	f000 fe9e 	bl	8026d6a <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 802602e:	4b12      	ldr	r3, [pc, #72]	; (8026078 <Send_CLI_To_M0+0x58>)
 8026030:	881b      	ldrh	r3, [r3, #0]
 8026032:	b29b      	uxth	r3, r3
 8026034:	461a      	mov	r2, r3
 8026036:	4911      	ldr	r1, [pc, #68]	; (802607c <Send_CLI_To_M0+0x5c>)
 8026038:	480e      	ldr	r0, [pc, #56]	; (8026074 <Send_CLI_To_M0+0x54>)
 802603a:	f000 fe8b 	bl	8026d54 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 802603e:	4b0e      	ldr	r3, [pc, #56]	; (8026078 <Send_CLI_To_M0+0x58>)
 8026040:	881b      	ldrh	r3, [r3, #0]
 8026042:	b29b      	uxth	r3, r3
 8026044:	b2da      	uxtb	r2, r3
 8026046:	4b0e      	ldr	r3, [pc, #56]	; (8026080 <Send_CLI_To_M0+0x60>)
 8026048:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 802604a:	4b0d      	ldr	r3, [pc, #52]	; (8026080 <Send_CLI_To_M0+0x60>)
 802604c:	2200      	movs	r2, #0
 802604e:	725a      	strb	r2, [r3, #9]
 8026050:	2200      	movs	r2, #0
 8026052:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8026054:	4b0b      	ldr	r3, [pc, #44]	; (8026084 <Send_CLI_To_M0+0x64>)
 8026056:	2200      	movs	r2, #0
 8026058:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 802605a:	4b07      	ldr	r3, [pc, #28]	; (8026078 <Send_CLI_To_M0+0x58>)
 802605c:	2200      	movs	r2, #0
 802605e:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8026060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8026064:	2100      	movs	r1, #0
 8026066:	4805      	ldr	r0, [pc, #20]	; (802607c <Send_CLI_To_M0+0x5c>)
 8026068:	f000 fe7f 	bl	8026d6a <memset>

  TL_CLI_SendCmd();
 802606c:	f7fe faa2 	bl	80245b4 <TL_CLI_SendCmd>
}
 8026070:	bf00      	nop
 8026072:	bd80      	pop	{r7, pc}
 8026074:	20030a5c 	.word	0x20030a5c
 8026078:	2002760c 	.word	0x2002760c
 802607c:	2002750c 	.word	0x2002750c
 8026080:	20030a50 	.word	0x20030a50
 8026084:	2002760e 	.word	0x2002760e

08026088 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8026088:	b580      	push	{r7, lr}
 802608a:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 802608c:	f7fe faae 	bl	80245ec <TL_THREAD_CliSendAck>
}
 8026090:	bf00      	nop
 8026092:	bd80      	pop	{r7, pc}

08026094 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8026094:	b580      	push	{r7, lr}
 8026096:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8026098:	4a04      	ldr	r2, [pc, #16]	; (80260ac <APP_THREAD_Init_UART_CLI+0x18>)
 802609a:	2100      	movs	r1, #0
 802609c:	4804      	ldr	r0, [pc, #16]	; (80260b0 <APP_THREAD_Init_UART_CLI+0x1c>)
 802609e:	f7f8 fa25 	bl	801e4ec <osThreadNew>
 80260a2:	4602      	mov	r2, r0
 80260a4:	4b03      	ldr	r3, [pc, #12]	; (80260b4 <APP_THREAD_Init_UART_CLI+0x20>)
 80260a6:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80260a8:	bf00      	nop
 80260aa:	bd80      	pop	{r7, pc}
 80260ac:	08028df0 	.word	0x08028df0
 80260b0:	08024dc7 	.word	0x08024dc7
 80260b4:	20027624 	.word	0x20027624

080260b8 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 80260b8:	b580      	push	{r7, lr}
 80260ba:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 80260bc:	4b06      	ldr	r3, [pc, #24]	; (80260d8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80260be:	4a07      	ldr	r2, [pc, #28]	; (80260dc <APP_THREAD_TL_THREAD_INIT+0x24>)
 80260c0:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 80260c2:	4b05      	ldr	r3, [pc, #20]	; (80260d8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80260c4:	4a06      	ldr	r2, [pc, #24]	; (80260e0 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80260c6:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 80260c8:	4b03      	ldr	r3, [pc, #12]	; (80260d8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80260ca:	4a06      	ldr	r2, [pc, #24]	; (80260e4 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 80260cc:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 80260ce:	4802      	ldr	r0, [pc, #8]	; (80260d8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80260d0:	f7fe fa46 	bl	8024560 <TL_THREAD_Init>
}
 80260d4:	bf00      	nop
 80260d6:	bd80      	pop	{r7, pc}
 80260d8:	200300b8 	.word	0x200300b8
 80260dc:	20030838 	.word	0x20030838
 80260e0:	20030944 	.word	0x20030944
 80260e4:	20030a50 	.word	0x20030a50

080260e8 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 80260e8:	b580      	push	{r7, lr}
 80260ea:	b084      	sub	sp, #16
 80260ec:	af00      	add	r7, sp, #0
 80260ee:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 80260f0:	687b      	ldr	r3, [r7, #4]
 80260f2:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 80260f4:	68fb      	ldr	r3, [r7, #12]
 80260f6:	7adb      	ldrb	r3, [r3, #11]
 80260f8:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 80260fa:	68fb      	ldr	r3, [r7, #12]
 80260fc:	330c      	adds	r3, #12
 80260fe:	4906      	ldr	r1, [pc, #24]	; (8026118 <TL_THREAD_CliNotReceived+0x30>)
 8026100:	4618      	mov	r0, r3
 8026102:	f7ea f83d 	bl	8010180 <strcmp>
 8026106:	4603      	mov	r3, r0
 8026108:	2b00      	cmp	r3, #0
 802610a:	d101      	bne.n	8026110 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 802610c:	f7ff ffbc 	bl	8026088 <Send_CLI_Ack_For_OT>
  }
}
 8026110:	bf00      	nop
 8026112:	3710      	adds	r7, #16
 8026114:	46bd      	mov	sp, r7
 8026116:	bd80      	pop	{r7, pc}
 8026118:	080289e4 	.word	0x080289e4

0802611c <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 802611c:	b580      	push	{r7, lr}
 802611e:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8026120:	4b09      	ldr	r3, [pc, #36]	; (8026148 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8026122:	681b      	ldr	r3, [r3, #0]
 8026124:	2b00      	cmp	r3, #0
 8026126:	d00d      	beq.n	8026144 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8026128:	4b07      	ldr	r3, [pc, #28]	; (8026148 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 802612a:	681b      	ldr	r3, [r3, #0]
 802612c:	2b01      	cmp	r3, #1
 802612e:	d904      	bls.n	802613a <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8026130:	2100      	movs	r1, #0
 8026132:	2000      	movs	r0, #0
 8026134:	f7fe fbb6 	bl	80248a4 <APP_THREAD_Error>
 8026138:	e001      	b.n	802613e <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 802613a:	f7fd fb77 	bl	802382c <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 802613e:	4b02      	ldr	r3, [pc, #8]	; (8026148 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8026140:	2200      	movs	r2, #0
 8026142:	601a      	str	r2, [r3, #0]
  }
}
 8026144:	bf00      	nop
 8026146:	bd80      	pop	{r7, pc}
 8026148:	20027618 	.word	0x20027618

0802614c <LL_C2_EXTI_EnableEvent_32_63>:
{
 802614c:	b480      	push	{r7}
 802614e:	b083      	sub	sp, #12
 8026150:	af00      	add	r7, sp, #0
 8026152:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8026154:	4b06      	ldr	r3, [pc, #24]	; (8026170 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8026156:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 802615a:	4905      	ldr	r1, [pc, #20]	; (8026170 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 802615c:	687b      	ldr	r3, [r7, #4]
 802615e:	4313      	orrs	r3, r2
 8026160:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8026164:	bf00      	nop
 8026166:	370c      	adds	r7, #12
 8026168:	46bd      	mov	sp, r7
 802616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802616e:	4770      	bx	lr
 8026170:	58000800 	.word	0x58000800

08026174 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8026174:	b480      	push	{r7}
 8026176:	b083      	sub	sp, #12
 8026178:	af00      	add	r7, sp, #0
 802617a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 802617c:	4b05      	ldr	r3, [pc, #20]	; (8026194 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 802617e:	6a1a      	ldr	r2, [r3, #32]
 8026180:	4904      	ldr	r1, [pc, #16]	; (8026194 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8026182:	687b      	ldr	r3, [r7, #4]
 8026184:	4313      	orrs	r3, r2
 8026186:	620b      	str	r3, [r1, #32]
}
 8026188:	bf00      	nop
 802618a:	370c      	adds	r7, #12
 802618c:	46bd      	mov	sp, r7
 802618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026192:	4770      	bx	lr
 8026194:	58000800 	.word	0x58000800

08026198 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8026198:	b480      	push	{r7}
 802619a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 802619c:	4b05      	ldr	r3, [pc, #20]	; (80261b4 <LL_PWR_EnableBootC2+0x1c>)
 802619e:	68db      	ldr	r3, [r3, #12]
 80261a0:	4a04      	ldr	r2, [pc, #16]	; (80261b4 <LL_PWR_EnableBootC2+0x1c>)
 80261a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80261a6:	60d3      	str	r3, [r2, #12]
}
 80261a8:	bf00      	nop
 80261aa:	46bd      	mov	sp, r7
 80261ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261b0:	4770      	bx	lr
 80261b2:	bf00      	nop
 80261b4:	58000400 	.word	0x58000400

080261b8 <LL_AHB3_GRP1_EnableClock>:
{
 80261b8:	b480      	push	{r7}
 80261ba:	b085      	sub	sp, #20
 80261bc:	af00      	add	r7, sp, #0
 80261be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80261c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80261c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80261c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80261ca:	687b      	ldr	r3, [r7, #4]
 80261cc:	4313      	orrs	r3, r2
 80261ce:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80261d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80261d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80261d6:	687b      	ldr	r3, [r7, #4]
 80261d8:	4013      	ands	r3, r2
 80261da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80261dc:	68fb      	ldr	r3, [r7, #12]
}
 80261de:	bf00      	nop
 80261e0:	3714      	adds	r7, #20
 80261e2:	46bd      	mov	sp, r7
 80261e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261e8:	4770      	bx	lr

080261ea <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80261ea:	b480      	push	{r7}
 80261ec:	b083      	sub	sp, #12
 80261ee:	af00      	add	r7, sp, #0
 80261f0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80261f2:	687b      	ldr	r3, [r7, #4]
 80261f4:	681b      	ldr	r3, [r3, #0]
 80261f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80261fa:	687b      	ldr	r3, [r7, #4]
 80261fc:	601a      	str	r2, [r3, #0]
}
 80261fe:	bf00      	nop
 8026200:	370c      	adds	r7, #12
 8026202:	46bd      	mov	sp, r7
 8026204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026208:	4770      	bx	lr

0802620a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 802620a:	b480      	push	{r7}
 802620c:	b083      	sub	sp, #12
 802620e:	af00      	add	r7, sp, #0
 8026210:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8026212:	687b      	ldr	r3, [r7, #4]
 8026214:	681b      	ldr	r3, [r3, #0]
 8026216:	f043 0201 	orr.w	r2, r3, #1
 802621a:	687b      	ldr	r3, [r7, #4]
 802621c:	601a      	str	r2, [r3, #0]
}
 802621e:	bf00      	nop
 8026220:	370c      	adds	r7, #12
 8026222:	46bd      	mov	sp, r7
 8026224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026228:	4770      	bx	lr

0802622a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 802622a:	b480      	push	{r7}
 802622c:	b083      	sub	sp, #12
 802622e:	af00      	add	r7, sp, #0
 8026230:	6078      	str	r0, [r7, #4]
 8026232:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8026234:	687b      	ldr	r3, [r7, #4]
 8026236:	685a      	ldr	r2, [r3, #4]
 8026238:	683b      	ldr	r3, [r7, #0]
 802623a:	041b      	lsls	r3, r3, #16
 802623c:	43db      	mvns	r3, r3
 802623e:	401a      	ands	r2, r3
 8026240:	687b      	ldr	r3, [r7, #4]
 8026242:	605a      	str	r2, [r3, #4]
}
 8026244:	bf00      	nop
 8026246:	370c      	adds	r7, #12
 8026248:	46bd      	mov	sp, r7
 802624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802624e:	4770      	bx	lr

08026250 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8026250:	b480      	push	{r7}
 8026252:	b083      	sub	sp, #12
 8026254:	af00      	add	r7, sp, #0
 8026256:	6078      	str	r0, [r7, #4]
 8026258:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 802625a:	687b      	ldr	r3, [r7, #4]
 802625c:	685a      	ldr	r2, [r3, #4]
 802625e:	683b      	ldr	r3, [r7, #0]
 8026260:	041b      	lsls	r3, r3, #16
 8026262:	431a      	orrs	r2, r3
 8026264:	687b      	ldr	r3, [r7, #4]
 8026266:	605a      	str	r2, [r3, #4]
}
 8026268:	bf00      	nop
 802626a:	370c      	adds	r7, #12
 802626c:	46bd      	mov	sp, r7
 802626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026272:	4770      	bx	lr

08026274 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8026274:	b480      	push	{r7}
 8026276:	b083      	sub	sp, #12
 8026278:	af00      	add	r7, sp, #0
 802627a:	6078      	str	r0, [r7, #4]
 802627c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 802627e:	687b      	ldr	r3, [r7, #4]
 8026280:	685a      	ldr	r2, [r3, #4]
 8026282:	683b      	ldr	r3, [r7, #0]
 8026284:	43db      	mvns	r3, r3
 8026286:	401a      	ands	r2, r3
 8026288:	687b      	ldr	r3, [r7, #4]
 802628a:	605a      	str	r2, [r3, #4]
}
 802628c:	bf00      	nop
 802628e:	370c      	adds	r7, #12
 8026290:	46bd      	mov	sp, r7
 8026292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026296:	4770      	bx	lr

08026298 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8026298:	b480      	push	{r7}
 802629a:	b083      	sub	sp, #12
 802629c:	af00      	add	r7, sp, #0
 802629e:	6078      	str	r0, [r7, #4]
 80262a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80262a2:	687b      	ldr	r3, [r7, #4]
 80262a4:	685a      	ldr	r2, [r3, #4]
 80262a6:	683b      	ldr	r3, [r7, #0]
 80262a8:	431a      	orrs	r2, r3
 80262aa:	687b      	ldr	r3, [r7, #4]
 80262ac:	605a      	str	r2, [r3, #4]
}
 80262ae:	bf00      	nop
 80262b0:	370c      	adds	r7, #12
 80262b2:	46bd      	mov	sp, r7
 80262b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262b8:	4770      	bx	lr

080262ba <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80262ba:	b480      	push	{r7}
 80262bc:	b083      	sub	sp, #12
 80262be:	af00      	add	r7, sp, #0
 80262c0:	6078      	str	r0, [r7, #4]
 80262c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80262c4:	687b      	ldr	r3, [r7, #4]
 80262c6:	683a      	ldr	r2, [r7, #0]
 80262c8:	609a      	str	r2, [r3, #8]
}
 80262ca:	bf00      	nop
 80262cc:	370c      	adds	r7, #12
 80262ce:	46bd      	mov	sp, r7
 80262d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262d4:	4770      	bx	lr

080262d6 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80262d6:	b480      	push	{r7}
 80262d8:	b083      	sub	sp, #12
 80262da:	af00      	add	r7, sp, #0
 80262dc:	6078      	str	r0, [r7, #4]
 80262de:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80262e0:	683b      	ldr	r3, [r7, #0]
 80262e2:	041a      	lsls	r2, r3, #16
 80262e4:	687b      	ldr	r3, [r7, #4]
 80262e6:	609a      	str	r2, [r3, #8]
}
 80262e8:	bf00      	nop
 80262ea:	370c      	adds	r7, #12
 80262ec:	46bd      	mov	sp, r7
 80262ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262f2:	4770      	bx	lr

080262f4 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80262f4:	b480      	push	{r7}
 80262f6:	b083      	sub	sp, #12
 80262f8:	af00      	add	r7, sp, #0
 80262fa:	6078      	str	r0, [r7, #4]
 80262fc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80262fe:	687b      	ldr	r3, [r7, #4]
 8026300:	68da      	ldr	r2, [r3, #12]
 8026302:	683b      	ldr	r3, [r7, #0]
 8026304:	4013      	ands	r3, r2
 8026306:	683a      	ldr	r2, [r7, #0]
 8026308:	429a      	cmp	r2, r3
 802630a:	d101      	bne.n	8026310 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 802630c:	2301      	movs	r3, #1
 802630e:	e000      	b.n	8026312 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8026310:	2300      	movs	r3, #0
}
 8026312:	4618      	mov	r0, r3
 8026314:	370c      	adds	r7, #12
 8026316:	46bd      	mov	sp, r7
 8026318:	f85d 7b04 	ldr.w	r7, [sp], #4
 802631c:	4770      	bx	lr

0802631e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 802631e:	b480      	push	{r7}
 8026320:	b083      	sub	sp, #12
 8026322:	af00      	add	r7, sp, #0
 8026324:	6078      	str	r0, [r7, #4]
 8026326:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8026328:	687b      	ldr	r3, [r7, #4]
 802632a:	69da      	ldr	r2, [r3, #28]
 802632c:	683b      	ldr	r3, [r7, #0]
 802632e:	4013      	ands	r3, r2
 8026330:	683a      	ldr	r2, [r7, #0]
 8026332:	429a      	cmp	r2, r3
 8026334:	d101      	bne.n	802633a <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8026336:	2301      	movs	r3, #1
 8026338:	e000      	b.n	802633c <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 802633a:	2300      	movs	r3, #0
}
 802633c:	4618      	mov	r0, r3
 802633e:	370c      	adds	r7, #12
 8026340:	46bd      	mov	sp, r7
 8026342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026346:	4770      	bx	lr

08026348 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8026348:	b580      	push	{r7, lr}
 802634a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 802634c:	2102      	movs	r1, #2
 802634e:	482a      	ldr	r0, [pc, #168]	; (80263f8 <HW_IPCC_Rx_Handler+0xb0>)
 8026350:	f7ff ffe5 	bl	802631e <LL_C2_IPCC_IsActiveFlag_CHx>
 8026354:	4603      	mov	r3, r0
 8026356:	2b00      	cmp	r3, #0
 8026358:	d009      	beq.n	802636e <HW_IPCC_Rx_Handler+0x26>
 802635a:	4b27      	ldr	r3, [pc, #156]	; (80263f8 <HW_IPCC_Rx_Handler+0xb0>)
 802635c:	685b      	ldr	r3, [r3, #4]
 802635e:	43db      	mvns	r3, r3
 8026360:	f003 0302 	and.w	r3, r3, #2
 8026364:	2b00      	cmp	r3, #0
 8026366:	d002      	beq.n	802636e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8026368:	f000 f906 	bl	8026578 <HW_IPCC_SYS_EvtHandler>
 802636c:	e041      	b.n	80263f2 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 802636e:	2104      	movs	r1, #4
 8026370:	4821      	ldr	r0, [pc, #132]	; (80263f8 <HW_IPCC_Rx_Handler+0xb0>)
 8026372:	f7ff ffd4 	bl	802631e <LL_C2_IPCC_IsActiveFlag_CHx>
 8026376:	4603      	mov	r3, r0
 8026378:	2b00      	cmp	r3, #0
 802637a:	d009      	beq.n	8026390 <HW_IPCC_Rx_Handler+0x48>
 802637c:	4b1e      	ldr	r3, [pc, #120]	; (80263f8 <HW_IPCC_Rx_Handler+0xb0>)
 802637e:	685b      	ldr	r3, [r3, #4]
 8026380:	43db      	mvns	r3, r3
 8026382:	f003 0304 	and.w	r3, r3, #4
 8026386:	2b00      	cmp	r3, #0
 8026388:	d002      	beq.n	8026390 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 802638a:	f000 f94f 	bl	802662c <HW_IPCC_THREAD_NotEvtHandler>
 802638e:	e030      	b.n	80263f2 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8026390:	2110      	movs	r1, #16
 8026392:	4819      	ldr	r0, [pc, #100]	; (80263f8 <HW_IPCC_Rx_Handler+0xb0>)
 8026394:	f7ff ffc3 	bl	802631e <LL_C2_IPCC_IsActiveFlag_CHx>
 8026398:	4603      	mov	r3, r0
 802639a:	2b00      	cmp	r3, #0
 802639c:	d009      	beq.n	80263b2 <HW_IPCC_Rx_Handler+0x6a>
 802639e:	4b16      	ldr	r3, [pc, #88]	; (80263f8 <HW_IPCC_Rx_Handler+0xb0>)
 80263a0:	685b      	ldr	r3, [r3, #4]
 80263a2:	43db      	mvns	r3, r3
 80263a4:	f003 0310 	and.w	r3, r3, #16
 80263a8:	2b00      	cmp	r3, #0
 80263aa:	d002      	beq.n	80263b2 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 80263ac:	f000 f94a 	bl	8026644 <HW_IPCC_THREAD_CliNotEvtHandler>
 80263b0:	e01f      	b.n	80263f2 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80263b2:	2101      	movs	r1, #1
 80263b4:	4810      	ldr	r0, [pc, #64]	; (80263f8 <HW_IPCC_Rx_Handler+0xb0>)
 80263b6:	f7ff ffb2 	bl	802631e <LL_C2_IPCC_IsActiveFlag_CHx>
 80263ba:	4603      	mov	r3, r0
 80263bc:	2b00      	cmp	r3, #0
 80263be:	d008      	beq.n	80263d2 <HW_IPCC_Rx_Handler+0x8a>
 80263c0:	4b0d      	ldr	r3, [pc, #52]	; (80263f8 <HW_IPCC_Rx_Handler+0xb0>)
 80263c2:	685b      	ldr	r3, [r3, #4]
 80263c4:	f003 0301 	and.w	r3, r3, #1
 80263c8:	2b00      	cmp	r3, #0
 80263ca:	d102      	bne.n	80263d2 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 80263cc:	f000 f898 	bl	8026500 <HW_IPCC_BLE_EvtHandler>
 80263d0:	e00f      	b.n	80263f2 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80263d2:	2108      	movs	r1, #8
 80263d4:	4808      	ldr	r0, [pc, #32]	; (80263f8 <HW_IPCC_Rx_Handler+0xb0>)
 80263d6:	f7ff ffa2 	bl	802631e <LL_C2_IPCC_IsActiveFlag_CHx>
 80263da:	4603      	mov	r3, r0
 80263dc:	2b00      	cmp	r3, #0
 80263de:	d009      	beq.n	80263f4 <HW_IPCC_Rx_Handler+0xac>
 80263e0:	4b05      	ldr	r3, [pc, #20]	; (80263f8 <HW_IPCC_Rx_Handler+0xb0>)
 80263e2:	685b      	ldr	r3, [r3, #4]
 80263e4:	43db      	mvns	r3, r3
 80263e6:	f003 0308 	and.w	r3, r3, #8
 80263ea:	2b00      	cmp	r3, #0
 80263ec:	d002      	beq.n	80263f4 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 80263ee:	f000 f975 	bl	80266dc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80263f2:	bf00      	nop
 80263f4:	bf00      	nop
}
 80263f6:	bd80      	pop	{r7, pc}
 80263f8:	58000c00 	.word	0x58000c00

080263fc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80263fc:	b580      	push	{r7, lr}
 80263fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8026400:	2102      	movs	r1, #2
 8026402:	482b      	ldr	r0, [pc, #172]	; (80264b0 <HW_IPCC_Tx_Handler+0xb4>)
 8026404:	f7ff ff76 	bl	80262f4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8026408:	4603      	mov	r3, r0
 802640a:	2b00      	cmp	r3, #0
 802640c:	d109      	bne.n	8026422 <HW_IPCC_Tx_Handler+0x26>
 802640e:	4b28      	ldr	r3, [pc, #160]	; (80264b0 <HW_IPCC_Tx_Handler+0xb4>)
 8026410:	685b      	ldr	r3, [r3, #4]
 8026412:	43db      	mvns	r3, r3
 8026414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026418:	2b00      	cmp	r3, #0
 802641a:	d002      	beq.n	8026422 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 802641c:	f000 f8a0 	bl	8026560 <HW_IPCC_SYS_CmdEvtHandler>
 8026420:	e042      	b.n	80264a8 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8026422:	2104      	movs	r1, #4
 8026424:	4822      	ldr	r0, [pc, #136]	; (80264b0 <HW_IPCC_Tx_Handler+0xb4>)
 8026426:	f7ff ff65 	bl	80262f4 <LL_C1_IPCC_IsActiveFlag_CHx>
 802642a:	4603      	mov	r3, r0
 802642c:	2b00      	cmp	r3, #0
 802642e:	d109      	bne.n	8026444 <HW_IPCC_Tx_Handler+0x48>
 8026430:	4b1f      	ldr	r3, [pc, #124]	; (80264b0 <HW_IPCC_Tx_Handler+0xb4>)
 8026432:	685b      	ldr	r3, [r3, #4]
 8026434:	43db      	mvns	r3, r3
 8026436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802643a:	2b00      	cmp	r3, #0
 802643c:	d002      	beq.n	8026444 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 802643e:	f000 f8e9 	bl	8026614 <HW_IPCC_OT_CmdEvtHandler>
 8026442:	e031      	b.n	80264a8 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8026444:	2102      	movs	r1, #2
 8026446:	481a      	ldr	r0, [pc, #104]	; (80264b0 <HW_IPCC_Tx_Handler+0xb4>)
 8026448:	f7ff ff54 	bl	80262f4 <LL_C1_IPCC_IsActiveFlag_CHx>
 802644c:	4603      	mov	r3, r0
 802644e:	2b00      	cmp	r3, #0
 8026450:	d109      	bne.n	8026466 <HW_IPCC_Tx_Handler+0x6a>
 8026452:	4b17      	ldr	r3, [pc, #92]	; (80264b0 <HW_IPCC_Tx_Handler+0xb4>)
 8026454:	685b      	ldr	r3, [r3, #4]
 8026456:	43db      	mvns	r3, r3
 8026458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802645c:	2b00      	cmp	r3, #0
 802645e:	d002      	beq.n	8026466 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8026460:	f000 f87e 	bl	8026560 <HW_IPCC_SYS_CmdEvtHandler>
 8026464:	e020      	b.n	80264a8 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8026466:	2108      	movs	r1, #8
 8026468:	4811      	ldr	r0, [pc, #68]	; (80264b0 <HW_IPCC_Tx_Handler+0xb4>)
 802646a:	f7ff ff43 	bl	80262f4 <LL_C1_IPCC_IsActiveFlag_CHx>
 802646e:	4603      	mov	r3, r0
 8026470:	2b00      	cmp	r3, #0
 8026472:	d109      	bne.n	8026488 <HW_IPCC_Tx_Handler+0x8c>
 8026474:	4b0e      	ldr	r3, [pc, #56]	; (80264b0 <HW_IPCC_Tx_Handler+0xb4>)
 8026476:	685b      	ldr	r3, [r3, #4]
 8026478:	43db      	mvns	r3, r3
 802647a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802647e:	2b00      	cmp	r3, #0
 8026480:	d002      	beq.n	8026488 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8026482:	f000 f90d 	bl	80266a0 <HW_IPCC_MM_FreeBufHandler>
 8026486:	e00f      	b.n	80264a8 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8026488:	2120      	movs	r1, #32
 802648a:	4809      	ldr	r0, [pc, #36]	; (80264b0 <HW_IPCC_Tx_Handler+0xb4>)
 802648c:	f7ff ff32 	bl	80262f4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8026490:	4603      	mov	r3, r0
 8026492:	2b00      	cmp	r3, #0
 8026494:	d109      	bne.n	80264aa <HW_IPCC_Tx_Handler+0xae>
 8026496:	4b06      	ldr	r3, [pc, #24]	; (80264b0 <HW_IPCC_Tx_Handler+0xb4>)
 8026498:	685b      	ldr	r3, [r3, #4]
 802649a:	43db      	mvns	r3, r3
 802649c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80264a0:	2b00      	cmp	r3, #0
 80264a2:	d002      	beq.n	80264aa <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80264a4:	f000 f838 	bl	8026518 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80264a8:	bf00      	nop
 80264aa:	bf00      	nop
}
 80264ac:	bd80      	pop	{r7, pc}
 80264ae:	bf00      	nop
 80264b0:	58000c00 	.word	0x58000c00

080264b4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80264b4:	b580      	push	{r7, lr}
 80264b6:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80264b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80264bc:	f7ff fe46 	bl	802614c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80264c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80264c4:	f7ff fe56 	bl	8026174 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80264c8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80264ca:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80264cc:	f7ff fe64 	bl	8026198 <LL_PWR_EnableBootC2>

  return;
 80264d0:	bf00      	nop
}
 80264d2:	bd80      	pop	{r7, pc}

080264d4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80264d4:	b580      	push	{r7, lr}
 80264d6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80264d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80264dc:	f7ff fe6c 	bl	80261b8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80264e0:	4806      	ldr	r0, [pc, #24]	; (80264fc <HW_IPCC_Init+0x28>)
 80264e2:	f7ff fe92 	bl	802620a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80264e6:	4805      	ldr	r0, [pc, #20]	; (80264fc <HW_IPCC_Init+0x28>)
 80264e8:	f7ff fe7f 	bl	80261ea <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80264ec:	202c      	movs	r0, #44	; 0x2c
 80264ee:	f7f1 fc0a 	bl	8017d06 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80264f2:	202d      	movs	r0, #45	; 0x2d
 80264f4:	f7f1 fc07 	bl	8017d06 <HAL_NVIC_EnableIRQ>

  return;
 80264f8:	bf00      	nop
}
 80264fa:	bd80      	pop	{r7, pc}
 80264fc:	58000c00 	.word	0x58000c00

08026500 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8026500:	b580      	push	{r7, lr}
 8026502:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8026504:	f7fd ff9c 	bl	8024440 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8026508:	2101      	movs	r1, #1
 802650a:	4802      	ldr	r0, [pc, #8]	; (8026514 <HW_IPCC_BLE_EvtHandler+0x14>)
 802650c:	f7ff fed5 	bl	80262ba <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8026510:	bf00      	nop
}
 8026512:	bd80      	pop	{r7, pc}
 8026514:	58000c00 	.word	0x58000c00

08026518 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8026518:	b580      	push	{r7, lr}
 802651a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 802651c:	2120      	movs	r1, #32
 802651e:	4803      	ldr	r0, [pc, #12]	; (802652c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8026520:	f7ff fe96 	bl	8026250 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8026524:	f7fd ffa8 	bl	8024478 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8026528:	bf00      	nop
}
 802652a:	bd80      	pop	{r7, pc}
 802652c:	58000c00 	.word	0x58000c00

08026530 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8026530:	b580      	push	{r7, lr}
 8026532:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8026534:	2102      	movs	r1, #2
 8026536:	4802      	ldr	r0, [pc, #8]	; (8026540 <HW_IPCC_SYS_Init+0x10>)
 8026538:	f7ff fe9c 	bl	8026274 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 802653c:	bf00      	nop
}
 802653e:	bd80      	pop	{r7, pc}
 8026540:	58000c00 	.word	0x58000c00

08026544 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8026544:	b580      	push	{r7, lr}
 8026546:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8026548:	2102      	movs	r1, #2
 802654a:	4804      	ldr	r0, [pc, #16]	; (802655c <HW_IPCC_SYS_SendCmd+0x18>)
 802654c:	f7ff fec3 	bl	80262d6 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8026550:	2102      	movs	r1, #2
 8026552:	4802      	ldr	r0, [pc, #8]	; (802655c <HW_IPCC_SYS_SendCmd+0x18>)
 8026554:	f7ff fe69 	bl	802622a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8026558:	bf00      	nop
}
 802655a:	bd80      	pop	{r7, pc}
 802655c:	58000c00 	.word	0x58000c00

08026560 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8026560:	b580      	push	{r7, lr}
 8026562:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8026564:	2102      	movs	r1, #2
 8026566:	4803      	ldr	r0, [pc, #12]	; (8026574 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8026568:	f7ff fe72 	bl	8026250 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 802656c:	f7fd ffcc 	bl	8024508 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8026570:	bf00      	nop
}
 8026572:	bd80      	pop	{r7, pc}
 8026574:	58000c00 	.word	0x58000c00

08026578 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8026578:	b580      	push	{r7, lr}
 802657a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 802657c:	f7fd ffd4 	bl	8024528 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8026580:	2102      	movs	r1, #2
 8026582:	4802      	ldr	r0, [pc, #8]	; (802658c <HW_IPCC_SYS_EvtHandler+0x14>)
 8026584:	f7ff fe99 	bl	80262ba <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8026588:	bf00      	nop
}
 802658a:	bd80      	pop	{r7, pc}
 802658c:	58000c00 	.word	0x58000c00

08026590 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8026590:	b580      	push	{r7, lr}
 8026592:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8026594:	2104      	movs	r1, #4
 8026596:	4804      	ldr	r0, [pc, #16]	; (80265a8 <HW_IPCC_THREAD_Init+0x18>)
 8026598:	f7ff fe6c 	bl	8026274 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 802659c:	2110      	movs	r1, #16
 802659e:	4802      	ldr	r0, [pc, #8]	; (80265a8 <HW_IPCC_THREAD_Init+0x18>)
 80265a0:	f7ff fe68 	bl	8026274 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80265a4:	bf00      	nop
}
 80265a6:	bd80      	pop	{r7, pc}
 80265a8:	58000c00 	.word	0x58000c00

080265ac <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 80265ac:	b580      	push	{r7, lr}
 80265ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80265b0:	2104      	movs	r1, #4
 80265b2:	4804      	ldr	r0, [pc, #16]	; (80265c4 <HW_IPCC_OT_SendCmd+0x18>)
 80265b4:	f7ff fe8f 	bl	80262d6 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80265b8:	2104      	movs	r1, #4
 80265ba:	4802      	ldr	r0, [pc, #8]	; (80265c4 <HW_IPCC_OT_SendCmd+0x18>)
 80265bc:	f7ff fe35 	bl	802622a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80265c0:	bf00      	nop
}
 80265c2:	bd80      	pop	{r7, pc}
 80265c4:	58000c00 	.word	0x58000c00

080265c8 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 80265c8:	b580      	push	{r7, lr}
 80265ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 80265cc:	2110      	movs	r1, #16
 80265ce:	4802      	ldr	r0, [pc, #8]	; (80265d8 <HW_IPCC_CLI_SendCmd+0x10>)
 80265d0:	f7ff fe81 	bl	80262d6 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80265d4:	bf00      	nop
}
 80265d6:	bd80      	pop	{r7, pc}
 80265d8:	58000c00 	.word	0x58000c00

080265dc <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 80265dc:	b580      	push	{r7, lr}
 80265de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80265e0:	2104      	movs	r1, #4
 80265e2:	4804      	ldr	r0, [pc, #16]	; (80265f4 <HW_IPCC_THREAD_SendAck+0x18>)
 80265e4:	f7ff fe69 	bl	80262ba <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80265e8:	2104      	movs	r1, #4
 80265ea:	4802      	ldr	r0, [pc, #8]	; (80265f4 <HW_IPCC_THREAD_SendAck+0x18>)
 80265ec:	f7ff fe42 	bl	8026274 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80265f0:	bf00      	nop
}
 80265f2:	bd80      	pop	{r7, pc}
 80265f4:	58000c00 	.word	0x58000c00

080265f8 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 80265f8:	b580      	push	{r7, lr}
 80265fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80265fc:	2110      	movs	r1, #16
 80265fe:	4804      	ldr	r0, [pc, #16]	; (8026610 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8026600:	f7ff fe5b 	bl	80262ba <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8026604:	2110      	movs	r1, #16
 8026606:	4802      	ldr	r0, [pc, #8]	; (8026610 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8026608:	f7ff fe34 	bl	8026274 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 802660c:	bf00      	nop
}
 802660e:	bd80      	pop	{r7, pc}
 8026610:	58000c00 	.word	0x58000c00

08026614 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8026614:	b580      	push	{r7, lr}
 8026616:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8026618:	2104      	movs	r1, #4
 802661a:	4803      	ldr	r0, [pc, #12]	; (8026628 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 802661c:	f7ff fe18 	bl	8026250 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8026620:	f7fd fff2 	bl	8024608 <HW_IPCC_OT_CmdEvtNot>

  return;
 8026624:	bf00      	nop
}
 8026626:	bd80      	pop	{r7, pc}
 8026628:	58000c00 	.word	0x58000c00

0802662c <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 802662c:	b580      	push	{r7, lr}
 802662e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8026630:	2104      	movs	r1, #4
 8026632:	4803      	ldr	r0, [pc, #12]	; (8026640 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8026634:	f7ff fe30 	bl	8026298 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8026638:	f7fd fff2 	bl	8024620 <HW_IPCC_THREAD_EvtNot>

  return;
 802663c:	bf00      	nop
}
 802663e:	bd80      	pop	{r7, pc}
 8026640:	58000c00 	.word	0x58000c00

08026644 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8026644:	b580      	push	{r7, lr}
 8026646:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8026648:	2110      	movs	r1, #16
 802664a:	4803      	ldr	r0, [pc, #12]	; (8026658 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 802664c:	f7ff fe24 	bl	8026298 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8026650:	f7fd fff2 	bl	8024638 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8026654:	bf00      	nop
}
 8026656:	bd80      	pop	{r7, pc}
 8026658:	58000c00 	.word	0x58000c00

0802665c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 802665c:	b580      	push	{r7, lr}
 802665e:	b082      	sub	sp, #8
 8026660:	af00      	add	r7, sp, #0
 8026662:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8026664:	2108      	movs	r1, #8
 8026666:	480c      	ldr	r0, [pc, #48]	; (8026698 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8026668:	f7ff fe44 	bl	80262f4 <LL_C1_IPCC_IsActiveFlag_CHx>
 802666c:	4603      	mov	r3, r0
 802666e:	2b00      	cmp	r3, #0
 8026670:	d007      	beq.n	8026682 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8026672:	4a0a      	ldr	r2, [pc, #40]	; (802669c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8026674:	687b      	ldr	r3, [r7, #4]
 8026676:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8026678:	2108      	movs	r1, #8
 802667a:	4807      	ldr	r0, [pc, #28]	; (8026698 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 802667c:	f7ff fdd5 	bl	802622a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8026680:	e006      	b.n	8026690 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8026682:	687b      	ldr	r3, [r7, #4]
 8026684:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8026686:	2108      	movs	r1, #8
 8026688:	4803      	ldr	r0, [pc, #12]	; (8026698 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 802668a:	f7ff fe24 	bl	80262d6 <LL_C1_IPCC_SetFlag_CHx>
  return;
 802668e:	bf00      	nop
}
 8026690:	3708      	adds	r7, #8
 8026692:	46bd      	mov	sp, r7
 8026694:	bd80      	pop	{r7, pc}
 8026696:	bf00      	nop
 8026698:	58000c00 	.word	0x58000c00
 802669c:	200279ec 	.word	0x200279ec

080266a0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80266a0:	b580      	push	{r7, lr}
 80266a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80266a4:	2108      	movs	r1, #8
 80266a6:	4806      	ldr	r0, [pc, #24]	; (80266c0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80266a8:	f7ff fdd2 	bl	8026250 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80266ac:	4b05      	ldr	r3, [pc, #20]	; (80266c4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80266ae:	681b      	ldr	r3, [r3, #0]
 80266b0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80266b2:	2108      	movs	r1, #8
 80266b4:	4802      	ldr	r0, [pc, #8]	; (80266c0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80266b6:	f7ff fe0e 	bl	80262d6 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80266ba:	bf00      	nop
}
 80266bc:	bd80      	pop	{r7, pc}
 80266be:	bf00      	nop
 80266c0:	58000c00 	.word	0x58000c00
 80266c4:	200279ec 	.word	0x200279ec

080266c8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80266c8:	b580      	push	{r7, lr}
 80266ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80266cc:	2108      	movs	r1, #8
 80266ce:	4802      	ldr	r0, [pc, #8]	; (80266d8 <HW_IPCC_TRACES_Init+0x10>)
 80266d0:	f7ff fdd0 	bl	8026274 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80266d4:	bf00      	nop
}
 80266d6:	bd80      	pop	{r7, pc}
 80266d8:	58000c00 	.word	0x58000c00

080266dc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80266dc:	b580      	push	{r7, lr}
 80266de:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80266e0:	f7fe f838 	bl	8024754 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80266e4:	2108      	movs	r1, #8
 80266e6:	4802      	ldr	r0, [pc, #8]	; (80266f0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80266e8:	f7ff fde7 	bl	80262ba <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80266ec:	bf00      	nop
}
 80266ee:	bd80      	pop	{r7, pc}
 80266f0:	58000c00 	.word	0x58000c00

080266f4 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 80266f4:	b480      	push	{r7}
 80266f6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80266f8:	4b05      	ldr	r3, [pc, #20]	; (8026710 <UTIL_LPM_Init+0x1c>)
 80266fa:	2200      	movs	r2, #0
 80266fc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80266fe:	4b05      	ldr	r3, [pc, #20]	; (8026714 <UTIL_LPM_Init+0x20>)
 8026700:	2200      	movs	r2, #0
 8026702:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8026704:	bf00      	nop
 8026706:	46bd      	mov	sp, r7
 8026708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802670c:	4770      	bx	lr
 802670e:	bf00      	nop
 8026710:	200279f0 	.word	0x200279f0
 8026714:	200279f4 	.word	0x200279f4

08026718 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8026718:	b480      	push	{r7}
 802671a:	b087      	sub	sp, #28
 802671c:	af00      	add	r7, sp, #0
 802671e:	6078      	str	r0, [r7, #4]
 8026720:	460b      	mov	r3, r1
 8026722:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026724:	f3ef 8310 	mrs	r3, PRIMASK
 8026728:	613b      	str	r3, [r7, #16]
  return(result);
 802672a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 802672c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 802672e:	b672      	cpsid	i
  
  switch(state)
 8026730:	78fb      	ldrb	r3, [r7, #3]
 8026732:	2b00      	cmp	r3, #0
 8026734:	d009      	beq.n	802674a <UTIL_LPM_SetOffMode+0x32>
 8026736:	2b01      	cmp	r3, #1
 8026738:	d000      	beq.n	802673c <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 802673a:	e00e      	b.n	802675a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 802673c:	4b0c      	ldr	r3, [pc, #48]	; (8026770 <UTIL_LPM_SetOffMode+0x58>)
 802673e:	681a      	ldr	r2, [r3, #0]
 8026740:	687b      	ldr	r3, [r7, #4]
 8026742:	4313      	orrs	r3, r2
 8026744:	4a0a      	ldr	r2, [pc, #40]	; (8026770 <UTIL_LPM_SetOffMode+0x58>)
 8026746:	6013      	str	r3, [r2, #0]
      break;
 8026748:	e007      	b.n	802675a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 802674a:	687b      	ldr	r3, [r7, #4]
 802674c:	43da      	mvns	r2, r3
 802674e:	4b08      	ldr	r3, [pc, #32]	; (8026770 <UTIL_LPM_SetOffMode+0x58>)
 8026750:	681b      	ldr	r3, [r3, #0]
 8026752:	4013      	ands	r3, r2
 8026754:	4a06      	ldr	r2, [pc, #24]	; (8026770 <UTIL_LPM_SetOffMode+0x58>)
 8026756:	6013      	str	r3, [r2, #0]
      break;
 8026758:	bf00      	nop
 802675a:	697b      	ldr	r3, [r7, #20]
 802675c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802675e:	68fb      	ldr	r3, [r7, #12]
 8026760:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8026764:	bf00      	nop
 8026766:	371c      	adds	r7, #28
 8026768:	46bd      	mov	sp, r7
 802676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802676e:	4770      	bx	lr
 8026770:	200279f4 	.word	0x200279f4

08026774 <arm_power_f32>:
 8026774:	b430      	push	{r4, r5}
 8026776:	088d      	lsrs	r5, r1, #2
 8026778:	eddf 5a20 	vldr	s11, [pc, #128]	; 80267fc <arm_power_f32+0x88>
 802677c:	d020      	beq.n	80267c0 <arm_power_f32+0x4c>
 802677e:	f100 0310 	add.w	r3, r0, #16
 8026782:	462c      	mov	r4, r5
 8026784:	ed53 6a04 	vldr	s13, [r3, #-16]
 8026788:	ed13 7a03 	vldr	s14, [r3, #-12]
 802678c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8026790:	ed13 6a01 	vldr	s12, [r3, #-4]
 8026794:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8026798:	ee27 7a07 	vmul.f32	s14, s14, s14
 802679c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80267a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80267a4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80267a8:	ee26 6a06 	vmul.f32	s12, s12, s12
 80267ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80267b0:	3c01      	subs	r4, #1
 80267b2:	f103 0310 	add.w	r3, r3, #16
 80267b6:	ee76 5a27 	vadd.f32	s11, s12, s15
 80267ba:	d1e3      	bne.n	8026784 <arm_power_f32+0x10>
 80267bc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80267c0:	f011 0103 	ands.w	r1, r1, #3
 80267c4:	d015      	beq.n	80267f2 <arm_power_f32+0x7e>
 80267c6:	edd0 7a00 	vldr	s15, [r0]
 80267ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80267ce:	3901      	subs	r1, #1
 80267d0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80267d4:	d00d      	beq.n	80267f2 <arm_power_f32+0x7e>
 80267d6:	edd0 7a01 	vldr	s15, [r0, #4]
 80267da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80267de:	2901      	cmp	r1, #1
 80267e0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80267e4:	d005      	beq.n	80267f2 <arm_power_f32+0x7e>
 80267e6:	edd0 7a02 	vldr	s15, [r0, #8]
 80267ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80267ee:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80267f2:	edc2 5a00 	vstr	s11, [r2]
 80267f6:	bc30      	pop	{r4, r5}
 80267f8:	4770      	bx	lr
 80267fa:	bf00      	nop
 80267fc:	00000000 	.word	0x00000000

08026800 <arm_mat_mult_f32>:
 8026800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026804:	8845      	ldrh	r5, [r0, #2]
 8026806:	880b      	ldrh	r3, [r1, #0]
 8026808:	8806      	ldrh	r6, [r0, #0]
 802680a:	6847      	ldr	r7, [r0, #4]
 802680c:	6854      	ldr	r4, [r2, #4]
 802680e:	6848      	ldr	r0, [r1, #4]
 8026810:	b08b      	sub	sp, #44	; 0x2c
 8026812:	42ab      	cmp	r3, r5
 8026814:	9109      	str	r1, [sp, #36]	; 0x24
 8026816:	9604      	str	r6, [sp, #16]
 8026818:	8849      	ldrh	r1, [r1, #2]
 802681a:	f040 808a 	bne.w	8026932 <arm_mat_mult_f32+0x132>
 802681e:	8815      	ldrh	r5, [r2, #0]
 8026820:	42b5      	cmp	r5, r6
 8026822:	f040 8086 	bne.w	8026932 <arm_mat_mult_f32+0x132>
 8026826:	8852      	ldrh	r2, [r2, #2]
 8026828:	428a      	cmp	r2, r1
 802682a:	f040 8082 	bne.w	8026932 <arm_mat_mult_f32+0x132>
 802682e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8026832:	1d01      	adds	r1, r0, #4
 8026834:	0116      	lsls	r6, r2, #4
 8026836:	9108      	str	r1, [sp, #32]
 8026838:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 802683c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8026840:	9101      	str	r1, [sp, #4]
 8026842:	fb06 f108 	mul.w	r1, r6, r8
 8026846:	0095      	lsls	r5, r2, #2
 8026848:	9103      	str	r1, [sp, #12]
 802684a:	00d2      	lsls	r2, r2, #3
 802684c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8026850:	f003 0903 	and.w	r9, r3, #3
 8026854:	009b      	lsls	r3, r3, #2
 8026856:	f107 0b10 	add.w	fp, r7, #16
 802685a:	eb04 0a05 	add.w	sl, r4, r5
 802685e:	9107      	str	r1, [sp, #28]
 8026860:	9202      	str	r2, [sp, #8]
 8026862:	9306      	str	r3, [sp, #24]
 8026864:	f1ab 0310 	sub.w	r3, fp, #16
 8026868:	9305      	str	r3, [sp, #20]
 802686a:	9b07      	ldr	r3, [sp, #28]
 802686c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8026870:	eb03 0c0a 	add.w	ip, r3, sl
 8026874:	eddf 7a31 	vldr	s15, [pc, #196]	; 802693c <arm_mat_mult_f32+0x13c>
 8026878:	f1b8 0f00 	cmp.w	r8, #0
 802687c:	d053      	beq.n	8026926 <arm_mat_mult_f32+0x126>
 802687e:	9b02      	ldr	r3, [sp, #8]
 8026880:	4644      	mov	r4, r8
 8026882:	18c1      	adds	r1, r0, r3
 8026884:	4602      	mov	r2, r0
 8026886:	465b      	mov	r3, fp
 8026888:	ed92 6a00 	vldr	s12, [r2]
 802688c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8026890:	ed53 4a03 	vldr	s9, [r3, #-12]
 8026894:	ed53 6a02 	vldr	s13, [r3, #-8]
 8026898:	ed91 5a00 	vldr	s10, [r1]
 802689c:	ed53 5a01 	vldr	s11, [r3, #-4]
 80268a0:	1957      	adds	r7, r2, r5
 80268a2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80268a6:	ed97 6a00 	vldr	s12, [r7]
 80268aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80268ae:	ee26 6a24 	vmul.f32	s12, s12, s9
 80268b2:	194f      	adds	r7, r1, r5
 80268b4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80268b8:	ee26 7a85 	vmul.f32	s14, s13, s10
 80268bc:	edd7 7a00 	vldr	s15, [r7]
 80268c0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80268c4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80268c8:	3c01      	subs	r4, #1
 80268ca:	4432      	add	r2, r6
 80268cc:	4431      	add	r1, r6
 80268ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80268d2:	f103 0310 	add.w	r3, r3, #16
 80268d6:	d1d7      	bne.n	8026888 <arm_mat_mult_f32+0x88>
 80268d8:	9b03      	ldr	r3, [sp, #12]
 80268da:	9a01      	ldr	r2, [sp, #4]
 80268dc:	4418      	add	r0, r3
 80268de:	f1b9 0f00 	cmp.w	r9, #0
 80268e2:	d00b      	beq.n	80268fc <arm_mat_mult_f32+0xfc>
 80268e4:	464b      	mov	r3, r9
 80268e6:	edd0 6a00 	vldr	s13, [r0]
 80268ea:	ecb2 7a01 	vldmia	r2!, {s14}
 80268ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 80268f2:	3b01      	subs	r3, #1
 80268f4:	4428      	add	r0, r5
 80268f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80268fa:	d1f4      	bne.n	80268e6 <arm_mat_mult_f32+0xe6>
 80268fc:	ecec 7a01 	vstmia	ip!, {s15}
 8026900:	45d4      	cmp	ip, sl
 8026902:	4670      	mov	r0, lr
 8026904:	f10e 0e04 	add.w	lr, lr, #4
 8026908:	d1b4      	bne.n	8026874 <arm_mat_mult_f32+0x74>
 802690a:	9a01      	ldr	r2, [sp, #4]
 802690c:	9b06      	ldr	r3, [sp, #24]
 802690e:	4611      	mov	r1, r2
 8026910:	4419      	add	r1, r3
 8026912:	449b      	add	fp, r3
 8026914:	9b04      	ldr	r3, [sp, #16]
 8026916:	9101      	str	r1, [sp, #4]
 8026918:	3b01      	subs	r3, #1
 802691a:	44aa      	add	sl, r5
 802691c:	9304      	str	r3, [sp, #16]
 802691e:	d004      	beq.n	802692a <arm_mat_mult_f32+0x12a>
 8026920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026922:	6858      	ldr	r0, [r3, #4]
 8026924:	e79e      	b.n	8026864 <arm_mat_mult_f32+0x64>
 8026926:	9a05      	ldr	r2, [sp, #20]
 8026928:	e7d9      	b.n	80268de <arm_mat_mult_f32+0xde>
 802692a:	4618      	mov	r0, r3
 802692c:	b00b      	add	sp, #44	; 0x2c
 802692e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026932:	f06f 0002 	mvn.w	r0, #2
 8026936:	b00b      	add	sp, #44	; 0x2c
 8026938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802693c:	00000000 	.word	0x00000000

08026940 <arm_sin_f32>:
 8026940:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80269c0 <arm_sin_f32+0x80>
 8026944:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026948:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802694c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026950:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8026954:	d504      	bpl.n	8026960 <arm_sin_f32+0x20>
 8026956:	ee17 3a90 	vmov	r3, s15
 802695a:	3b01      	subs	r3, #1
 802695c:	ee07 3a90 	vmov	s15, r3
 8026960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026964:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80269c4 <arm_sin_f32+0x84>
 8026968:	ee30 0a67 	vsub.f32	s0, s0, s15
 802696c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8026970:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8026974:	ee17 3a90 	vmov	r3, s15
 8026978:	b29b      	uxth	r3, r3
 802697a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802697e:	d21a      	bcs.n	80269b6 <arm_sin_f32+0x76>
 8026980:	ee07 3a90 	vmov	s15, r3
 8026984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8026988:	1c59      	adds	r1, r3, #1
 802698a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802698e:	4a0e      	ldr	r2, [pc, #56]	; (80269c8 <arm_sin_f32+0x88>)
 8026990:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8026994:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026998:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 802699c:	ed93 7a00 	vldr	s14, [r3]
 80269a0:	edd2 6a00 	vldr	s13, [r2]
 80269a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80269a8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80269ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80269b0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80269b4:	4770      	bx	lr
 80269b6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80269ba:	2101      	movs	r1, #1
 80269bc:	2300      	movs	r3, #0
 80269be:	e7e6      	b.n	802698e <arm_sin_f32+0x4e>
 80269c0:	3e22f983 	.word	0x3e22f983
 80269c4:	44000000 	.word	0x44000000
 80269c8:	08028e70 	.word	0x08028e70

080269cc <arm_cos_f32>:
 80269cc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8026a54 <arm_cos_f32+0x88>
 80269d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80269d4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80269d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80269dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80269e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80269e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80269e8:	d504      	bpl.n	80269f4 <arm_cos_f32+0x28>
 80269ea:	ee17 3a90 	vmov	r3, s15
 80269ee:	3b01      	subs	r3, #1
 80269f0:	ee07 3a90 	vmov	s15, r3
 80269f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80269f8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8026a58 <arm_cos_f32+0x8c>
 80269fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026a00:	ee20 0a07 	vmul.f32	s0, s0, s14
 8026a04:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8026a08:	ee17 3a90 	vmov	r3, s15
 8026a0c:	b29b      	uxth	r3, r3
 8026a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026a12:	d21a      	bcs.n	8026a4a <arm_cos_f32+0x7e>
 8026a14:	ee07 3a90 	vmov	s15, r3
 8026a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8026a1c:	1c59      	adds	r1, r3, #1
 8026a1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026a22:	4a0e      	ldr	r2, [pc, #56]	; (8026a5c <arm_cos_f32+0x90>)
 8026a24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8026a28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026a2c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8026a30:	ed93 7a00 	vldr	s14, [r3]
 8026a34:	edd2 6a00 	vldr	s13, [r2]
 8026a38:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8026a3c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8026a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026a44:	ee37 0a80 	vadd.f32	s0, s15, s0
 8026a48:	4770      	bx	lr
 8026a4a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8026a4e:	2101      	movs	r1, #1
 8026a50:	2300      	movs	r3, #0
 8026a52:	e7e6      	b.n	8026a22 <arm_cos_f32+0x56>
 8026a54:	3e22f983 	.word	0x3e22f983
 8026a58:	44000000 	.word	0x44000000
 8026a5c:	08028e70 	.word	0x08028e70

08026a60 <arm_sub_f32>:
 8026a60:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8026a64:	b4f0      	push	{r4, r5, r6, r7}
 8026a66:	d033      	beq.n	8026ad0 <arm_sub_f32+0x70>
 8026a68:	f100 0610 	add.w	r6, r0, #16
 8026a6c:	f101 0510 	add.w	r5, r1, #16
 8026a70:	f102 0410 	add.w	r4, r2, #16
 8026a74:	4667      	mov	r7, ip
 8026a76:	ed15 7a04 	vldr	s14, [r5, #-16]
 8026a7a:	ed56 7a04 	vldr	s15, [r6, #-16]
 8026a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026a82:	3f01      	subs	r7, #1
 8026a84:	ed44 7a04 	vstr	s15, [r4, #-16]
 8026a88:	ed15 7a03 	vldr	s14, [r5, #-12]
 8026a8c:	ed56 7a03 	vldr	s15, [r6, #-12]
 8026a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026a94:	f106 0610 	add.w	r6, r6, #16
 8026a98:	ed44 7a03 	vstr	s15, [r4, #-12]
 8026a9c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8026aa0:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8026aa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026aa8:	f105 0510 	add.w	r5, r5, #16
 8026aac:	ed44 7a02 	vstr	s15, [r4, #-8]
 8026ab0:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8026ab4:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8026ab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026abc:	f104 0410 	add.w	r4, r4, #16
 8026ac0:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8026ac4:	d1d7      	bne.n	8026a76 <arm_sub_f32+0x16>
 8026ac6:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8026aca:	4420      	add	r0, r4
 8026acc:	4421      	add	r1, r4
 8026ace:	4422      	add	r2, r4
 8026ad0:	f013 0303 	ands.w	r3, r3, #3
 8026ad4:	d01b      	beq.n	8026b0e <arm_sub_f32+0xae>
 8026ad6:	edd0 7a00 	vldr	s15, [r0]
 8026ada:	ed91 7a00 	vldr	s14, [r1]
 8026ade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026ae2:	3b01      	subs	r3, #1
 8026ae4:	edc2 7a00 	vstr	s15, [r2]
 8026ae8:	d011      	beq.n	8026b0e <arm_sub_f32+0xae>
 8026aea:	edd0 7a01 	vldr	s15, [r0, #4]
 8026aee:	ed91 7a01 	vldr	s14, [r1, #4]
 8026af2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026af6:	2b01      	cmp	r3, #1
 8026af8:	edc2 7a01 	vstr	s15, [r2, #4]
 8026afc:	d007      	beq.n	8026b0e <arm_sub_f32+0xae>
 8026afe:	edd0 7a02 	vldr	s15, [r0, #8]
 8026b02:	ed91 7a02 	vldr	s14, [r1, #8]
 8026b06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026b0a:	edc2 7a02 	vstr	s15, [r2, #8]
 8026b0e:	bcf0      	pop	{r4, r5, r6, r7}
 8026b10:	4770      	bx	lr
 8026b12:	bf00      	nop

08026b14 <arm_scale_f32>:
 8026b14:	b470      	push	{r4, r5, r6}
 8026b16:	0896      	lsrs	r6, r2, #2
 8026b18:	d025      	beq.n	8026b66 <arm_scale_f32+0x52>
 8026b1a:	f100 0410 	add.w	r4, r0, #16
 8026b1e:	f101 0310 	add.w	r3, r1, #16
 8026b22:	4635      	mov	r5, r6
 8026b24:	ed54 7a04 	vldr	s15, [r4, #-16]
 8026b28:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026b2c:	3d01      	subs	r5, #1
 8026b2e:	ed43 7a04 	vstr	s15, [r3, #-16]
 8026b32:	ed54 7a03 	vldr	s15, [r4, #-12]
 8026b36:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026b3a:	f104 0410 	add.w	r4, r4, #16
 8026b3e:	ed43 7a03 	vstr	s15, [r3, #-12]
 8026b42:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8026b46:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026b4a:	f103 0310 	add.w	r3, r3, #16
 8026b4e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8026b52:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8026b56:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026b5a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8026b5e:	d1e1      	bne.n	8026b24 <arm_scale_f32+0x10>
 8026b60:	0136      	lsls	r6, r6, #4
 8026b62:	4430      	add	r0, r6
 8026b64:	4431      	add	r1, r6
 8026b66:	f012 0203 	ands.w	r2, r2, #3
 8026b6a:	d015      	beq.n	8026b98 <arm_scale_f32+0x84>
 8026b6c:	edd0 7a00 	vldr	s15, [r0]
 8026b70:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026b74:	3a01      	subs	r2, #1
 8026b76:	edc1 7a00 	vstr	s15, [r1]
 8026b7a:	d00d      	beq.n	8026b98 <arm_scale_f32+0x84>
 8026b7c:	edd0 7a01 	vldr	s15, [r0, #4]
 8026b80:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026b84:	2a01      	cmp	r2, #1
 8026b86:	edc1 7a01 	vstr	s15, [r1, #4]
 8026b8a:	d005      	beq.n	8026b98 <arm_scale_f32+0x84>
 8026b8c:	edd0 7a02 	vldr	s15, [r0, #8]
 8026b90:	ee27 0a80 	vmul.f32	s0, s15, s0
 8026b94:	ed81 0a02 	vstr	s0, [r1, #8]
 8026b98:	bc70      	pop	{r4, r5, r6}
 8026b9a:	4770      	bx	lr

08026b9c <arm_dot_prod_f32>:
 8026b9c:	b4f0      	push	{r4, r5, r6, r7}
 8026b9e:	0897      	lsrs	r7, r2, #2
 8026ba0:	eddf 5a29 	vldr	s11, [pc, #164]	; 8026c48 <arm_dot_prod_f32+0xac>
 8026ba4:	d02d      	beq.n	8026c02 <arm_dot_prod_f32+0x66>
 8026ba6:	f100 0510 	add.w	r5, r0, #16
 8026baa:	f101 0410 	add.w	r4, r1, #16
 8026bae:	463e      	mov	r6, r7
 8026bb0:	ed55 6a04 	vldr	s13, [r5, #-16]
 8026bb4:	ed54 3a04 	vldr	s7, [r4, #-16]
 8026bb8:	ed15 7a03 	vldr	s14, [r5, #-12]
 8026bbc:	ed14 4a03 	vldr	s8, [r4, #-12]
 8026bc0:	ed55 7a02 	vldr	s15, [r5, #-8]
 8026bc4:	ed54 4a02 	vldr	s9, [r4, #-8]
 8026bc8:	ed15 6a01 	vldr	s12, [r5, #-4]
 8026bcc:	ed14 5a01 	vldr	s10, [r4, #-4]
 8026bd0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8026bd4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8026bd8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8026bdc:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8026be0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8026be4:	ee66 6a05 	vmul.f32	s13, s12, s10
 8026be8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026bec:	3e01      	subs	r6, #1
 8026bee:	f105 0510 	add.w	r5, r5, #16
 8026bf2:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8026bf6:	f104 0410 	add.w	r4, r4, #16
 8026bfa:	d1d9      	bne.n	8026bb0 <arm_dot_prod_f32+0x14>
 8026bfc:	013f      	lsls	r7, r7, #4
 8026bfe:	4438      	add	r0, r7
 8026c00:	4439      	add	r1, r7
 8026c02:	f012 0203 	ands.w	r2, r2, #3
 8026c06:	d01b      	beq.n	8026c40 <arm_dot_prod_f32+0xa4>
 8026c08:	edd1 7a00 	vldr	s15, [r1]
 8026c0c:	ed90 7a00 	vldr	s14, [r0]
 8026c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026c14:	3a01      	subs	r2, #1
 8026c16:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8026c1a:	d011      	beq.n	8026c40 <arm_dot_prod_f32+0xa4>
 8026c1c:	edd1 7a01 	vldr	s15, [r1, #4]
 8026c20:	ed90 7a01 	vldr	s14, [r0, #4]
 8026c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026c28:	2a01      	cmp	r2, #1
 8026c2a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8026c2e:	d007      	beq.n	8026c40 <arm_dot_prod_f32+0xa4>
 8026c30:	edd0 7a02 	vldr	s15, [r0, #8]
 8026c34:	ed91 7a02 	vldr	s14, [r1, #8]
 8026c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026c3c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8026c40:	edc3 5a00 	vstr	s11, [r3]
 8026c44:	bcf0      	pop	{r4, r5, r6, r7}
 8026c46:	4770      	bx	lr
 8026c48:	00000000 	.word	0x00000000

08026c4c <arm_add_f32>:
 8026c4c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8026c50:	b4f0      	push	{r4, r5, r6, r7}
 8026c52:	d033      	beq.n	8026cbc <arm_add_f32+0x70>
 8026c54:	f100 0610 	add.w	r6, r0, #16
 8026c58:	f101 0510 	add.w	r5, r1, #16
 8026c5c:	f102 0410 	add.w	r4, r2, #16
 8026c60:	4667      	mov	r7, ip
 8026c62:	ed15 7a04 	vldr	s14, [r5, #-16]
 8026c66:	ed56 7a04 	vldr	s15, [r6, #-16]
 8026c6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026c6e:	3f01      	subs	r7, #1
 8026c70:	ed44 7a04 	vstr	s15, [r4, #-16]
 8026c74:	ed15 7a03 	vldr	s14, [r5, #-12]
 8026c78:	ed56 7a03 	vldr	s15, [r6, #-12]
 8026c7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026c80:	f106 0610 	add.w	r6, r6, #16
 8026c84:	ed44 7a03 	vstr	s15, [r4, #-12]
 8026c88:	ed15 7a02 	vldr	s14, [r5, #-8]
 8026c8c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8026c90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026c94:	f105 0510 	add.w	r5, r5, #16
 8026c98:	ed44 7a02 	vstr	s15, [r4, #-8]
 8026c9c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8026ca0:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8026ca4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026ca8:	f104 0410 	add.w	r4, r4, #16
 8026cac:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8026cb0:	d1d7      	bne.n	8026c62 <arm_add_f32+0x16>
 8026cb2:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8026cb6:	4420      	add	r0, r4
 8026cb8:	4421      	add	r1, r4
 8026cba:	4422      	add	r2, r4
 8026cbc:	f013 0303 	ands.w	r3, r3, #3
 8026cc0:	d01b      	beq.n	8026cfa <arm_add_f32+0xae>
 8026cc2:	edd1 7a00 	vldr	s15, [r1]
 8026cc6:	ed90 7a00 	vldr	s14, [r0]
 8026cca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026cce:	3b01      	subs	r3, #1
 8026cd0:	edc2 7a00 	vstr	s15, [r2]
 8026cd4:	d011      	beq.n	8026cfa <arm_add_f32+0xae>
 8026cd6:	edd0 7a01 	vldr	s15, [r0, #4]
 8026cda:	ed91 7a01 	vldr	s14, [r1, #4]
 8026cde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026ce2:	2b01      	cmp	r3, #1
 8026ce4:	edc2 7a01 	vstr	s15, [r2, #4]
 8026ce8:	d007      	beq.n	8026cfa <arm_add_f32+0xae>
 8026cea:	edd0 7a02 	vldr	s15, [r0, #8]
 8026cee:	ed91 7a02 	vldr	s14, [r1, #8]
 8026cf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026cf6:	edc2 7a02 	vstr	s15, [r2, #8]
 8026cfa:	bcf0      	pop	{r4, r5, r6, r7}
 8026cfc:	4770      	bx	lr
 8026cfe:	bf00      	nop

08026d00 <__errno>:
 8026d00:	4b01      	ldr	r3, [pc, #4]	; (8026d08 <__errno+0x8>)
 8026d02:	6818      	ldr	r0, [r3, #0]
 8026d04:	4770      	bx	lr
 8026d06:	bf00      	nop
 8026d08:	20000144 	.word	0x20000144

08026d0c <__libc_init_array>:
 8026d0c:	b570      	push	{r4, r5, r6, lr}
 8026d0e:	4e0d      	ldr	r6, [pc, #52]	; (8026d44 <__libc_init_array+0x38>)
 8026d10:	4c0d      	ldr	r4, [pc, #52]	; (8026d48 <__libc_init_array+0x3c>)
 8026d12:	1ba4      	subs	r4, r4, r6
 8026d14:	10a4      	asrs	r4, r4, #2
 8026d16:	2500      	movs	r5, #0
 8026d18:	42a5      	cmp	r5, r4
 8026d1a:	d109      	bne.n	8026d30 <__libc_init_array+0x24>
 8026d1c:	4e0b      	ldr	r6, [pc, #44]	; (8026d4c <__libc_init_array+0x40>)
 8026d1e:	4c0c      	ldr	r4, [pc, #48]	; (8026d50 <__libc_init_array+0x44>)
 8026d20:	f001 f8d4 	bl	8027ecc <_init>
 8026d24:	1ba4      	subs	r4, r4, r6
 8026d26:	10a4      	asrs	r4, r4, #2
 8026d28:	2500      	movs	r5, #0
 8026d2a:	42a5      	cmp	r5, r4
 8026d2c:	d105      	bne.n	8026d3a <__libc_init_array+0x2e>
 8026d2e:	bd70      	pop	{r4, r5, r6, pc}
 8026d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026d34:	4798      	blx	r3
 8026d36:	3501      	adds	r5, #1
 8026d38:	e7ee      	b.n	8026d18 <__libc_init_array+0xc>
 8026d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026d3e:	4798      	blx	r3
 8026d40:	3501      	adds	r5, #1
 8026d42:	e7f2      	b.n	8026d2a <__libc_init_array+0x1e>
 8026d44:	08029728 	.word	0x08029728
 8026d48:	08029728 	.word	0x08029728
 8026d4c:	08029728 	.word	0x08029728
 8026d50:	0802972c 	.word	0x0802972c

08026d54 <memcpy>:
 8026d54:	b510      	push	{r4, lr}
 8026d56:	1e43      	subs	r3, r0, #1
 8026d58:	440a      	add	r2, r1
 8026d5a:	4291      	cmp	r1, r2
 8026d5c:	d100      	bne.n	8026d60 <memcpy+0xc>
 8026d5e:	bd10      	pop	{r4, pc}
 8026d60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026d68:	e7f7      	b.n	8026d5a <memcpy+0x6>

08026d6a <memset>:
 8026d6a:	4402      	add	r2, r0
 8026d6c:	4603      	mov	r3, r0
 8026d6e:	4293      	cmp	r3, r2
 8026d70:	d100      	bne.n	8026d74 <memset+0xa>
 8026d72:	4770      	bx	lr
 8026d74:	f803 1b01 	strb.w	r1, [r3], #1
 8026d78:	e7f9      	b.n	8026d6e <memset+0x4>
	...

08026d7c <pow>:
 8026d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d80:	ed2d 8b04 	vpush	{d8-d9}
 8026d84:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8027058 <pow+0x2dc>
 8026d88:	b08d      	sub	sp, #52	; 0x34
 8026d8a:	ec57 6b10 	vmov	r6, r7, d0
 8026d8e:	ec55 4b11 	vmov	r4, r5, d1
 8026d92:	f000 f9b5 	bl	8027100 <__ieee754_pow>
 8026d96:	f999 3000 	ldrsb.w	r3, [r9]
 8026d9a:	9300      	str	r3, [sp, #0]
 8026d9c:	3301      	adds	r3, #1
 8026d9e:	eeb0 8a40 	vmov.f32	s16, s0
 8026da2:	eef0 8a60 	vmov.f32	s17, s1
 8026da6:	46c8      	mov	r8, r9
 8026da8:	d05f      	beq.n	8026e6a <pow+0xee>
 8026daa:	4622      	mov	r2, r4
 8026dac:	462b      	mov	r3, r5
 8026dae:	4620      	mov	r0, r4
 8026db0:	4629      	mov	r1, r5
 8026db2:	f7e9 fe45 	bl	8010a40 <__aeabi_dcmpun>
 8026db6:	4683      	mov	fp, r0
 8026db8:	2800      	cmp	r0, #0
 8026dba:	d156      	bne.n	8026e6a <pow+0xee>
 8026dbc:	4632      	mov	r2, r6
 8026dbe:	463b      	mov	r3, r7
 8026dc0:	4630      	mov	r0, r6
 8026dc2:	4639      	mov	r1, r7
 8026dc4:	f7e9 fe3c 	bl	8010a40 <__aeabi_dcmpun>
 8026dc8:	9001      	str	r0, [sp, #4]
 8026dca:	b1e8      	cbz	r0, 8026e08 <pow+0x8c>
 8026dcc:	2200      	movs	r2, #0
 8026dce:	2300      	movs	r3, #0
 8026dd0:	4620      	mov	r0, r4
 8026dd2:	4629      	mov	r1, r5
 8026dd4:	f7e9 fe02 	bl	80109dc <__aeabi_dcmpeq>
 8026dd8:	2800      	cmp	r0, #0
 8026dda:	d046      	beq.n	8026e6a <pow+0xee>
 8026ddc:	2301      	movs	r3, #1
 8026dde:	9302      	str	r3, [sp, #8]
 8026de0:	4b96      	ldr	r3, [pc, #600]	; (802703c <pow+0x2c0>)
 8026de2:	9303      	str	r3, [sp, #12]
 8026de4:	4b96      	ldr	r3, [pc, #600]	; (8027040 <pow+0x2c4>)
 8026de6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8026dea:	2200      	movs	r2, #0
 8026dec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026df0:	9b00      	ldr	r3, [sp, #0]
 8026df2:	2b02      	cmp	r3, #2
 8026df4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8026df8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8026dfc:	d033      	beq.n	8026e66 <pow+0xea>
 8026dfe:	a802      	add	r0, sp, #8
 8026e00:	f000 ff50 	bl	8027ca4 <matherr>
 8026e04:	bb48      	cbnz	r0, 8026e5a <pow+0xde>
 8026e06:	e05d      	b.n	8026ec4 <pow+0x148>
 8026e08:	f04f 0a00 	mov.w	sl, #0
 8026e0c:	f04f 0b00 	mov.w	fp, #0
 8026e10:	4652      	mov	r2, sl
 8026e12:	465b      	mov	r3, fp
 8026e14:	4630      	mov	r0, r6
 8026e16:	4639      	mov	r1, r7
 8026e18:	f7e9 fde0 	bl	80109dc <__aeabi_dcmpeq>
 8026e1c:	ec4b ab19 	vmov	d9, sl, fp
 8026e20:	2800      	cmp	r0, #0
 8026e22:	d054      	beq.n	8026ece <pow+0x152>
 8026e24:	4652      	mov	r2, sl
 8026e26:	465b      	mov	r3, fp
 8026e28:	4620      	mov	r0, r4
 8026e2a:	4629      	mov	r1, r5
 8026e2c:	f7e9 fdd6 	bl	80109dc <__aeabi_dcmpeq>
 8026e30:	4680      	mov	r8, r0
 8026e32:	b318      	cbz	r0, 8026e7c <pow+0x100>
 8026e34:	2301      	movs	r3, #1
 8026e36:	9302      	str	r3, [sp, #8]
 8026e38:	4b80      	ldr	r3, [pc, #512]	; (802703c <pow+0x2c0>)
 8026e3a:	9303      	str	r3, [sp, #12]
 8026e3c:	9b01      	ldr	r3, [sp, #4]
 8026e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8026e40:	9b00      	ldr	r3, [sp, #0]
 8026e42:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8026e46:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8026e4a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8026e4e:	2b00      	cmp	r3, #0
 8026e50:	d0d5      	beq.n	8026dfe <pow+0x82>
 8026e52:	4b7b      	ldr	r3, [pc, #492]	; (8027040 <pow+0x2c4>)
 8026e54:	2200      	movs	r2, #0
 8026e56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e5c:	b11b      	cbz	r3, 8026e66 <pow+0xea>
 8026e5e:	f7ff ff4f 	bl	8026d00 <__errno>
 8026e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e64:	6003      	str	r3, [r0, #0]
 8026e66:	ed9d 8b08 	vldr	d8, [sp, #32]
 8026e6a:	eeb0 0a48 	vmov.f32	s0, s16
 8026e6e:	eef0 0a68 	vmov.f32	s1, s17
 8026e72:	b00d      	add	sp, #52	; 0x34
 8026e74:	ecbd 8b04 	vpop	{d8-d9}
 8026e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e7c:	ec45 4b10 	vmov	d0, r4, r5
 8026e80:	f000 ff08 	bl	8027c94 <finite>
 8026e84:	2800      	cmp	r0, #0
 8026e86:	d0f0      	beq.n	8026e6a <pow+0xee>
 8026e88:	4652      	mov	r2, sl
 8026e8a:	465b      	mov	r3, fp
 8026e8c:	4620      	mov	r0, r4
 8026e8e:	4629      	mov	r1, r5
 8026e90:	f7e9 fdae 	bl	80109f0 <__aeabi_dcmplt>
 8026e94:	2800      	cmp	r0, #0
 8026e96:	d0e8      	beq.n	8026e6a <pow+0xee>
 8026e98:	2301      	movs	r3, #1
 8026e9a:	9302      	str	r3, [sp, #8]
 8026e9c:	4b67      	ldr	r3, [pc, #412]	; (802703c <pow+0x2c0>)
 8026e9e:	9303      	str	r3, [sp, #12]
 8026ea0:	f999 3000 	ldrsb.w	r3, [r9]
 8026ea4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8026ea8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8026eac:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8026eb0:	b913      	cbnz	r3, 8026eb8 <pow+0x13c>
 8026eb2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8026eb6:	e7a2      	b.n	8026dfe <pow+0x82>
 8026eb8:	4962      	ldr	r1, [pc, #392]	; (8027044 <pow+0x2c8>)
 8026eba:	2000      	movs	r0, #0
 8026ebc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8026ec0:	2b02      	cmp	r3, #2
 8026ec2:	d19c      	bne.n	8026dfe <pow+0x82>
 8026ec4:	f7ff ff1c 	bl	8026d00 <__errno>
 8026ec8:	2321      	movs	r3, #33	; 0x21
 8026eca:	6003      	str	r3, [r0, #0]
 8026ecc:	e7c5      	b.n	8026e5a <pow+0xde>
 8026ece:	eeb0 0a48 	vmov.f32	s0, s16
 8026ed2:	eef0 0a68 	vmov.f32	s1, s17
 8026ed6:	f000 fedd 	bl	8027c94 <finite>
 8026eda:	9000      	str	r0, [sp, #0]
 8026edc:	2800      	cmp	r0, #0
 8026ede:	f040 8081 	bne.w	8026fe4 <pow+0x268>
 8026ee2:	ec47 6b10 	vmov	d0, r6, r7
 8026ee6:	f000 fed5 	bl	8027c94 <finite>
 8026eea:	2800      	cmp	r0, #0
 8026eec:	d07a      	beq.n	8026fe4 <pow+0x268>
 8026eee:	ec45 4b10 	vmov	d0, r4, r5
 8026ef2:	f000 fecf 	bl	8027c94 <finite>
 8026ef6:	2800      	cmp	r0, #0
 8026ef8:	d074      	beq.n	8026fe4 <pow+0x268>
 8026efa:	ec53 2b18 	vmov	r2, r3, d8
 8026efe:	ee18 0a10 	vmov	r0, s16
 8026f02:	4619      	mov	r1, r3
 8026f04:	f7e9 fd9c 	bl	8010a40 <__aeabi_dcmpun>
 8026f08:	f999 9000 	ldrsb.w	r9, [r9]
 8026f0c:	4b4b      	ldr	r3, [pc, #300]	; (802703c <pow+0x2c0>)
 8026f0e:	b1b0      	cbz	r0, 8026f3e <pow+0x1c2>
 8026f10:	2201      	movs	r2, #1
 8026f12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8026f16:	9b00      	ldr	r3, [sp, #0]
 8026f18:	930a      	str	r3, [sp, #40]	; 0x28
 8026f1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8026f1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8026f22:	f1b9 0f00 	cmp.w	r9, #0
 8026f26:	d0c4      	beq.n	8026eb2 <pow+0x136>
 8026f28:	4652      	mov	r2, sl
 8026f2a:	465b      	mov	r3, fp
 8026f2c:	4650      	mov	r0, sl
 8026f2e:	4659      	mov	r1, fp
 8026f30:	f7e9 fc16 	bl	8010760 <__aeabi_ddiv>
 8026f34:	f1b9 0f02 	cmp.w	r9, #2
 8026f38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8026f3c:	e7c1      	b.n	8026ec2 <pow+0x146>
 8026f3e:	2203      	movs	r2, #3
 8026f40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8026f44:	900a      	str	r0, [sp, #40]	; 0x28
 8026f46:	4629      	mov	r1, r5
 8026f48:	4620      	mov	r0, r4
 8026f4a:	2200      	movs	r2, #0
 8026f4c:	4b3e      	ldr	r3, [pc, #248]	; (8027048 <pow+0x2cc>)
 8026f4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8026f52:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8026f56:	f7e9 fad9 	bl	801050c <__aeabi_dmul>
 8026f5a:	4604      	mov	r4, r0
 8026f5c:	460d      	mov	r5, r1
 8026f5e:	f1b9 0f00 	cmp.w	r9, #0
 8026f62:	d124      	bne.n	8026fae <pow+0x232>
 8026f64:	4b39      	ldr	r3, [pc, #228]	; (802704c <pow+0x2d0>)
 8026f66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8026f6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026f6e:	4630      	mov	r0, r6
 8026f70:	4652      	mov	r2, sl
 8026f72:	465b      	mov	r3, fp
 8026f74:	4639      	mov	r1, r7
 8026f76:	f7e9 fd3b 	bl	80109f0 <__aeabi_dcmplt>
 8026f7a:	2800      	cmp	r0, #0
 8026f7c:	d056      	beq.n	802702c <pow+0x2b0>
 8026f7e:	ec45 4b10 	vmov	d0, r4, r5
 8026f82:	f000 fe99 	bl	8027cb8 <rint>
 8026f86:	4622      	mov	r2, r4
 8026f88:	462b      	mov	r3, r5
 8026f8a:	ec51 0b10 	vmov	r0, r1, d0
 8026f8e:	f7e9 fd25 	bl	80109dc <__aeabi_dcmpeq>
 8026f92:	b920      	cbnz	r0, 8026f9e <pow+0x222>
 8026f94:	4b2e      	ldr	r3, [pc, #184]	; (8027050 <pow+0x2d4>)
 8026f96:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8026f9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026f9e:	f998 3000 	ldrsb.w	r3, [r8]
 8026fa2:	2b02      	cmp	r3, #2
 8026fa4:	d142      	bne.n	802702c <pow+0x2b0>
 8026fa6:	f7ff feab 	bl	8026d00 <__errno>
 8026faa:	2322      	movs	r3, #34	; 0x22
 8026fac:	e78d      	b.n	8026eca <pow+0x14e>
 8026fae:	4b29      	ldr	r3, [pc, #164]	; (8027054 <pow+0x2d8>)
 8026fb0:	2200      	movs	r2, #0
 8026fb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026fb6:	4630      	mov	r0, r6
 8026fb8:	4652      	mov	r2, sl
 8026fba:	465b      	mov	r3, fp
 8026fbc:	4639      	mov	r1, r7
 8026fbe:	f7e9 fd17 	bl	80109f0 <__aeabi_dcmplt>
 8026fc2:	2800      	cmp	r0, #0
 8026fc4:	d0eb      	beq.n	8026f9e <pow+0x222>
 8026fc6:	ec45 4b10 	vmov	d0, r4, r5
 8026fca:	f000 fe75 	bl	8027cb8 <rint>
 8026fce:	4622      	mov	r2, r4
 8026fd0:	462b      	mov	r3, r5
 8026fd2:	ec51 0b10 	vmov	r0, r1, d0
 8026fd6:	f7e9 fd01 	bl	80109dc <__aeabi_dcmpeq>
 8026fda:	2800      	cmp	r0, #0
 8026fdc:	d1df      	bne.n	8026f9e <pow+0x222>
 8026fde:	2200      	movs	r2, #0
 8026fe0:	4b18      	ldr	r3, [pc, #96]	; (8027044 <pow+0x2c8>)
 8026fe2:	e7da      	b.n	8026f9a <pow+0x21e>
 8026fe4:	2200      	movs	r2, #0
 8026fe6:	2300      	movs	r3, #0
 8026fe8:	ec51 0b18 	vmov	r0, r1, d8
 8026fec:	f7e9 fcf6 	bl	80109dc <__aeabi_dcmpeq>
 8026ff0:	2800      	cmp	r0, #0
 8026ff2:	f43f af3a 	beq.w	8026e6a <pow+0xee>
 8026ff6:	ec47 6b10 	vmov	d0, r6, r7
 8026ffa:	f000 fe4b 	bl	8027c94 <finite>
 8026ffe:	2800      	cmp	r0, #0
 8027000:	f43f af33 	beq.w	8026e6a <pow+0xee>
 8027004:	ec45 4b10 	vmov	d0, r4, r5
 8027008:	f000 fe44 	bl	8027c94 <finite>
 802700c:	2800      	cmp	r0, #0
 802700e:	f43f af2c 	beq.w	8026e6a <pow+0xee>
 8027012:	2304      	movs	r3, #4
 8027014:	9302      	str	r3, [sp, #8]
 8027016:	4b09      	ldr	r3, [pc, #36]	; (802703c <pow+0x2c0>)
 8027018:	9303      	str	r3, [sp, #12]
 802701a:	2300      	movs	r3, #0
 802701c:	930a      	str	r3, [sp, #40]	; 0x28
 802701e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8027022:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8027026:	ed8d 9b08 	vstr	d9, [sp, #32]
 802702a:	e7b8      	b.n	8026f9e <pow+0x222>
 802702c:	a802      	add	r0, sp, #8
 802702e:	f000 fe39 	bl	8027ca4 <matherr>
 8027032:	2800      	cmp	r0, #0
 8027034:	f47f af11 	bne.w	8026e5a <pow+0xde>
 8027038:	e7b5      	b.n	8026fa6 <pow+0x22a>
 802703a:	bf00      	nop
 802703c:	080296d4 	.word	0x080296d4
 8027040:	3ff00000 	.word	0x3ff00000
 8027044:	fff00000 	.word	0xfff00000
 8027048:	3fe00000 	.word	0x3fe00000
 802704c:	47efffff 	.word	0x47efffff
 8027050:	c7efffff 	.word	0xc7efffff
 8027054:	7ff00000 	.word	0x7ff00000
 8027058:	200001a8 	.word	0x200001a8

0802705c <sqrtf>:
 802705c:	b510      	push	{r4, lr}
 802705e:	ed2d 8b02 	vpush	{d8}
 8027062:	b08a      	sub	sp, #40	; 0x28
 8027064:	eeb0 8a40 	vmov.f32	s16, s0
 8027068:	f000 fe08 	bl	8027c7c <__ieee754_sqrtf>
 802706c:	4b21      	ldr	r3, [pc, #132]	; (80270f4 <sqrtf+0x98>)
 802706e:	f993 4000 	ldrsb.w	r4, [r3]
 8027072:	1c63      	adds	r3, r4, #1
 8027074:	d02c      	beq.n	80270d0 <sqrtf+0x74>
 8027076:	eeb4 8a48 	vcmp.f32	s16, s16
 802707a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802707e:	d627      	bvs.n	80270d0 <sqrtf+0x74>
 8027080:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8027084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027088:	d522      	bpl.n	80270d0 <sqrtf+0x74>
 802708a:	2301      	movs	r3, #1
 802708c:	9300      	str	r3, [sp, #0]
 802708e:	4b1a      	ldr	r3, [pc, #104]	; (80270f8 <sqrtf+0x9c>)
 8027090:	9301      	str	r3, [sp, #4]
 8027092:	ee18 0a10 	vmov	r0, s16
 8027096:	2300      	movs	r3, #0
 8027098:	9308      	str	r3, [sp, #32]
 802709a:	f7e9 f9df 	bl	801045c <__aeabi_f2d>
 802709e:	2200      	movs	r2, #0
 80270a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80270a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80270a8:	2300      	movs	r3, #0
 80270aa:	b9ac      	cbnz	r4, 80270d8 <sqrtf+0x7c>
 80270ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80270b0:	4668      	mov	r0, sp
 80270b2:	f000 fdf7 	bl	8027ca4 <matherr>
 80270b6:	b1b8      	cbz	r0, 80270e8 <sqrtf+0x8c>
 80270b8:	9b08      	ldr	r3, [sp, #32]
 80270ba:	b11b      	cbz	r3, 80270c4 <sqrtf+0x68>
 80270bc:	f7ff fe20 	bl	8026d00 <__errno>
 80270c0:	9b08      	ldr	r3, [sp, #32]
 80270c2:	6003      	str	r3, [r0, #0]
 80270c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80270c8:	f7e9 fcd0 	bl	8010a6c <__aeabi_d2f>
 80270cc:	ee00 0a10 	vmov	s0, r0
 80270d0:	b00a      	add	sp, #40	; 0x28
 80270d2:	ecbd 8b02 	vpop	{d8}
 80270d6:	bd10      	pop	{r4, pc}
 80270d8:	4610      	mov	r0, r2
 80270da:	4619      	mov	r1, r3
 80270dc:	f7e9 fb40 	bl	8010760 <__aeabi_ddiv>
 80270e0:	2c02      	cmp	r4, #2
 80270e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80270e6:	d1e3      	bne.n	80270b0 <sqrtf+0x54>
 80270e8:	f7ff fe0a 	bl	8026d00 <__errno>
 80270ec:	2321      	movs	r3, #33	; 0x21
 80270ee:	6003      	str	r3, [r0, #0]
 80270f0:	e7e2      	b.n	80270b8 <sqrtf+0x5c>
 80270f2:	bf00      	nop
 80270f4:	200001a8 	.word	0x200001a8
 80270f8:	080296d8 	.word	0x080296d8
 80270fc:	00000000 	.word	0x00000000

08027100 <__ieee754_pow>:
 8027100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027104:	b091      	sub	sp, #68	; 0x44
 8027106:	ed8d 1b00 	vstr	d1, [sp]
 802710a:	e9dd 2900 	ldrd	r2, r9, [sp]
 802710e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8027112:	ea58 0302 	orrs.w	r3, r8, r2
 8027116:	ec57 6b10 	vmov	r6, r7, d0
 802711a:	f000 84be 	beq.w	8027a9a <__ieee754_pow+0x99a>
 802711e:	4b7a      	ldr	r3, [pc, #488]	; (8027308 <__ieee754_pow+0x208>)
 8027120:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8027124:	429c      	cmp	r4, r3
 8027126:	463d      	mov	r5, r7
 8027128:	ee10 aa10 	vmov	sl, s0
 802712c:	dc09      	bgt.n	8027142 <__ieee754_pow+0x42>
 802712e:	d103      	bne.n	8027138 <__ieee754_pow+0x38>
 8027130:	b93e      	cbnz	r6, 8027142 <__ieee754_pow+0x42>
 8027132:	45a0      	cmp	r8, r4
 8027134:	dc0d      	bgt.n	8027152 <__ieee754_pow+0x52>
 8027136:	e001      	b.n	802713c <__ieee754_pow+0x3c>
 8027138:	4598      	cmp	r8, r3
 802713a:	dc02      	bgt.n	8027142 <__ieee754_pow+0x42>
 802713c:	4598      	cmp	r8, r3
 802713e:	d10e      	bne.n	802715e <__ieee754_pow+0x5e>
 8027140:	b16a      	cbz	r2, 802715e <__ieee754_pow+0x5e>
 8027142:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8027146:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802714a:	ea54 030a 	orrs.w	r3, r4, sl
 802714e:	f000 84a4 	beq.w	8027a9a <__ieee754_pow+0x99a>
 8027152:	486e      	ldr	r0, [pc, #440]	; (802730c <__ieee754_pow+0x20c>)
 8027154:	b011      	add	sp, #68	; 0x44
 8027156:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802715a:	f000 bda5 	b.w	8027ca8 <nan>
 802715e:	2d00      	cmp	r5, #0
 8027160:	da53      	bge.n	802720a <__ieee754_pow+0x10a>
 8027162:	4b6b      	ldr	r3, [pc, #428]	; (8027310 <__ieee754_pow+0x210>)
 8027164:	4598      	cmp	r8, r3
 8027166:	dc4d      	bgt.n	8027204 <__ieee754_pow+0x104>
 8027168:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802716c:	4598      	cmp	r8, r3
 802716e:	dd4c      	ble.n	802720a <__ieee754_pow+0x10a>
 8027170:	ea4f 5328 	mov.w	r3, r8, asr #20
 8027174:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8027178:	2b14      	cmp	r3, #20
 802717a:	dd26      	ble.n	80271ca <__ieee754_pow+0xca>
 802717c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8027180:	fa22 f103 	lsr.w	r1, r2, r3
 8027184:	fa01 f303 	lsl.w	r3, r1, r3
 8027188:	4293      	cmp	r3, r2
 802718a:	d13e      	bne.n	802720a <__ieee754_pow+0x10a>
 802718c:	f001 0101 	and.w	r1, r1, #1
 8027190:	f1c1 0b02 	rsb	fp, r1, #2
 8027194:	2a00      	cmp	r2, #0
 8027196:	d15b      	bne.n	8027250 <__ieee754_pow+0x150>
 8027198:	4b5b      	ldr	r3, [pc, #364]	; (8027308 <__ieee754_pow+0x208>)
 802719a:	4598      	cmp	r8, r3
 802719c:	d124      	bne.n	80271e8 <__ieee754_pow+0xe8>
 802719e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80271a2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80271a6:	ea53 030a 	orrs.w	r3, r3, sl
 80271aa:	f000 8476 	beq.w	8027a9a <__ieee754_pow+0x99a>
 80271ae:	4b59      	ldr	r3, [pc, #356]	; (8027314 <__ieee754_pow+0x214>)
 80271b0:	429c      	cmp	r4, r3
 80271b2:	dd2d      	ble.n	8027210 <__ieee754_pow+0x110>
 80271b4:	f1b9 0f00 	cmp.w	r9, #0
 80271b8:	f280 8473 	bge.w	8027aa2 <__ieee754_pow+0x9a2>
 80271bc:	2000      	movs	r0, #0
 80271be:	2100      	movs	r1, #0
 80271c0:	ec41 0b10 	vmov	d0, r0, r1
 80271c4:	b011      	add	sp, #68	; 0x44
 80271c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80271ca:	2a00      	cmp	r2, #0
 80271cc:	d13e      	bne.n	802724c <__ieee754_pow+0x14c>
 80271ce:	f1c3 0314 	rsb	r3, r3, #20
 80271d2:	fa48 f103 	asr.w	r1, r8, r3
 80271d6:	fa01 f303 	lsl.w	r3, r1, r3
 80271da:	4543      	cmp	r3, r8
 80271dc:	f040 8469 	bne.w	8027ab2 <__ieee754_pow+0x9b2>
 80271e0:	f001 0101 	and.w	r1, r1, #1
 80271e4:	f1c1 0b02 	rsb	fp, r1, #2
 80271e8:	4b4b      	ldr	r3, [pc, #300]	; (8027318 <__ieee754_pow+0x218>)
 80271ea:	4598      	cmp	r8, r3
 80271ec:	d118      	bne.n	8027220 <__ieee754_pow+0x120>
 80271ee:	f1b9 0f00 	cmp.w	r9, #0
 80271f2:	f280 845a 	bge.w	8027aaa <__ieee754_pow+0x9aa>
 80271f6:	4948      	ldr	r1, [pc, #288]	; (8027318 <__ieee754_pow+0x218>)
 80271f8:	4632      	mov	r2, r6
 80271fa:	463b      	mov	r3, r7
 80271fc:	2000      	movs	r0, #0
 80271fe:	f7e9 faaf 	bl	8010760 <__aeabi_ddiv>
 8027202:	e7dd      	b.n	80271c0 <__ieee754_pow+0xc0>
 8027204:	f04f 0b02 	mov.w	fp, #2
 8027208:	e7c4      	b.n	8027194 <__ieee754_pow+0x94>
 802720a:	f04f 0b00 	mov.w	fp, #0
 802720e:	e7c1      	b.n	8027194 <__ieee754_pow+0x94>
 8027210:	f1b9 0f00 	cmp.w	r9, #0
 8027214:	dad2      	bge.n	80271bc <__ieee754_pow+0xbc>
 8027216:	e9dd 0300 	ldrd	r0, r3, [sp]
 802721a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802721e:	e7cf      	b.n	80271c0 <__ieee754_pow+0xc0>
 8027220:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8027224:	d106      	bne.n	8027234 <__ieee754_pow+0x134>
 8027226:	4632      	mov	r2, r6
 8027228:	463b      	mov	r3, r7
 802722a:	4610      	mov	r0, r2
 802722c:	4619      	mov	r1, r3
 802722e:	f7e9 f96d 	bl	801050c <__aeabi_dmul>
 8027232:	e7c5      	b.n	80271c0 <__ieee754_pow+0xc0>
 8027234:	4b39      	ldr	r3, [pc, #228]	; (802731c <__ieee754_pow+0x21c>)
 8027236:	4599      	cmp	r9, r3
 8027238:	d10a      	bne.n	8027250 <__ieee754_pow+0x150>
 802723a:	2d00      	cmp	r5, #0
 802723c:	db08      	blt.n	8027250 <__ieee754_pow+0x150>
 802723e:	ec47 6b10 	vmov	d0, r6, r7
 8027242:	b011      	add	sp, #68	; 0x44
 8027244:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027248:	f000 bc68 	b.w	8027b1c <__ieee754_sqrt>
 802724c:	f04f 0b00 	mov.w	fp, #0
 8027250:	ec47 6b10 	vmov	d0, r6, r7
 8027254:	f000 fd15 	bl	8027c82 <fabs>
 8027258:	ec51 0b10 	vmov	r0, r1, d0
 802725c:	f1ba 0f00 	cmp.w	sl, #0
 8027260:	d127      	bne.n	80272b2 <__ieee754_pow+0x1b2>
 8027262:	b124      	cbz	r4, 802726e <__ieee754_pow+0x16e>
 8027264:	4b2c      	ldr	r3, [pc, #176]	; (8027318 <__ieee754_pow+0x218>)
 8027266:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 802726a:	429a      	cmp	r2, r3
 802726c:	d121      	bne.n	80272b2 <__ieee754_pow+0x1b2>
 802726e:	f1b9 0f00 	cmp.w	r9, #0
 8027272:	da05      	bge.n	8027280 <__ieee754_pow+0x180>
 8027274:	4602      	mov	r2, r0
 8027276:	460b      	mov	r3, r1
 8027278:	2000      	movs	r0, #0
 802727a:	4927      	ldr	r1, [pc, #156]	; (8027318 <__ieee754_pow+0x218>)
 802727c:	f7e9 fa70 	bl	8010760 <__aeabi_ddiv>
 8027280:	2d00      	cmp	r5, #0
 8027282:	da9d      	bge.n	80271c0 <__ieee754_pow+0xc0>
 8027284:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8027288:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802728c:	ea54 030b 	orrs.w	r3, r4, fp
 8027290:	d108      	bne.n	80272a4 <__ieee754_pow+0x1a4>
 8027292:	4602      	mov	r2, r0
 8027294:	460b      	mov	r3, r1
 8027296:	4610      	mov	r0, r2
 8027298:	4619      	mov	r1, r3
 802729a:	f7e8 ff7f 	bl	801019c <__aeabi_dsub>
 802729e:	4602      	mov	r2, r0
 80272a0:	460b      	mov	r3, r1
 80272a2:	e7ac      	b.n	80271fe <__ieee754_pow+0xfe>
 80272a4:	f1bb 0f01 	cmp.w	fp, #1
 80272a8:	d18a      	bne.n	80271c0 <__ieee754_pow+0xc0>
 80272aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80272ae:	4619      	mov	r1, r3
 80272b0:	e786      	b.n	80271c0 <__ieee754_pow+0xc0>
 80272b2:	0fed      	lsrs	r5, r5, #31
 80272b4:	1e6b      	subs	r3, r5, #1
 80272b6:	930d      	str	r3, [sp, #52]	; 0x34
 80272b8:	ea5b 0303 	orrs.w	r3, fp, r3
 80272bc:	d102      	bne.n	80272c4 <__ieee754_pow+0x1c4>
 80272be:	4632      	mov	r2, r6
 80272c0:	463b      	mov	r3, r7
 80272c2:	e7e8      	b.n	8027296 <__ieee754_pow+0x196>
 80272c4:	4b16      	ldr	r3, [pc, #88]	; (8027320 <__ieee754_pow+0x220>)
 80272c6:	4598      	cmp	r8, r3
 80272c8:	f340 80fe 	ble.w	80274c8 <__ieee754_pow+0x3c8>
 80272cc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80272d0:	4598      	cmp	r8, r3
 80272d2:	dd0a      	ble.n	80272ea <__ieee754_pow+0x1ea>
 80272d4:	4b0f      	ldr	r3, [pc, #60]	; (8027314 <__ieee754_pow+0x214>)
 80272d6:	429c      	cmp	r4, r3
 80272d8:	dc0d      	bgt.n	80272f6 <__ieee754_pow+0x1f6>
 80272da:	f1b9 0f00 	cmp.w	r9, #0
 80272de:	f6bf af6d 	bge.w	80271bc <__ieee754_pow+0xbc>
 80272e2:	a307      	add	r3, pc, #28	; (adr r3, 8027300 <__ieee754_pow+0x200>)
 80272e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80272e8:	e79f      	b.n	802722a <__ieee754_pow+0x12a>
 80272ea:	4b0e      	ldr	r3, [pc, #56]	; (8027324 <__ieee754_pow+0x224>)
 80272ec:	429c      	cmp	r4, r3
 80272ee:	ddf4      	ble.n	80272da <__ieee754_pow+0x1da>
 80272f0:	4b09      	ldr	r3, [pc, #36]	; (8027318 <__ieee754_pow+0x218>)
 80272f2:	429c      	cmp	r4, r3
 80272f4:	dd18      	ble.n	8027328 <__ieee754_pow+0x228>
 80272f6:	f1b9 0f00 	cmp.w	r9, #0
 80272fa:	dcf2      	bgt.n	80272e2 <__ieee754_pow+0x1e2>
 80272fc:	e75e      	b.n	80271bc <__ieee754_pow+0xbc>
 80272fe:	bf00      	nop
 8027300:	8800759c 	.word	0x8800759c
 8027304:	7e37e43c 	.word	0x7e37e43c
 8027308:	7ff00000 	.word	0x7ff00000
 802730c:	080296dd 	.word	0x080296dd
 8027310:	433fffff 	.word	0x433fffff
 8027314:	3fefffff 	.word	0x3fefffff
 8027318:	3ff00000 	.word	0x3ff00000
 802731c:	3fe00000 	.word	0x3fe00000
 8027320:	41e00000 	.word	0x41e00000
 8027324:	3feffffe 	.word	0x3feffffe
 8027328:	2200      	movs	r2, #0
 802732a:	4b63      	ldr	r3, [pc, #396]	; (80274b8 <__ieee754_pow+0x3b8>)
 802732c:	f7e8 ff36 	bl	801019c <__aeabi_dsub>
 8027330:	a355      	add	r3, pc, #340	; (adr r3, 8027488 <__ieee754_pow+0x388>)
 8027332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027336:	4604      	mov	r4, r0
 8027338:	460d      	mov	r5, r1
 802733a:	f7e9 f8e7 	bl	801050c <__aeabi_dmul>
 802733e:	a354      	add	r3, pc, #336	; (adr r3, 8027490 <__ieee754_pow+0x390>)
 8027340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027344:	4606      	mov	r6, r0
 8027346:	460f      	mov	r7, r1
 8027348:	4620      	mov	r0, r4
 802734a:	4629      	mov	r1, r5
 802734c:	f7e9 f8de 	bl	801050c <__aeabi_dmul>
 8027350:	2200      	movs	r2, #0
 8027352:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027356:	4b59      	ldr	r3, [pc, #356]	; (80274bc <__ieee754_pow+0x3bc>)
 8027358:	4620      	mov	r0, r4
 802735a:	4629      	mov	r1, r5
 802735c:	f7e9 f8d6 	bl	801050c <__aeabi_dmul>
 8027360:	4602      	mov	r2, r0
 8027362:	460b      	mov	r3, r1
 8027364:	a14c      	add	r1, pc, #304	; (adr r1, 8027498 <__ieee754_pow+0x398>)
 8027366:	e9d1 0100 	ldrd	r0, r1, [r1]
 802736a:	f7e8 ff17 	bl	801019c <__aeabi_dsub>
 802736e:	4622      	mov	r2, r4
 8027370:	462b      	mov	r3, r5
 8027372:	f7e9 f8cb 	bl	801050c <__aeabi_dmul>
 8027376:	4602      	mov	r2, r0
 8027378:	460b      	mov	r3, r1
 802737a:	2000      	movs	r0, #0
 802737c:	4950      	ldr	r1, [pc, #320]	; (80274c0 <__ieee754_pow+0x3c0>)
 802737e:	f7e8 ff0d 	bl	801019c <__aeabi_dsub>
 8027382:	4622      	mov	r2, r4
 8027384:	462b      	mov	r3, r5
 8027386:	4680      	mov	r8, r0
 8027388:	4689      	mov	r9, r1
 802738a:	4620      	mov	r0, r4
 802738c:	4629      	mov	r1, r5
 802738e:	f7e9 f8bd 	bl	801050c <__aeabi_dmul>
 8027392:	4602      	mov	r2, r0
 8027394:	460b      	mov	r3, r1
 8027396:	4640      	mov	r0, r8
 8027398:	4649      	mov	r1, r9
 802739a:	f7e9 f8b7 	bl	801050c <__aeabi_dmul>
 802739e:	a340      	add	r3, pc, #256	; (adr r3, 80274a0 <__ieee754_pow+0x3a0>)
 80273a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80273a4:	f7e9 f8b2 	bl	801050c <__aeabi_dmul>
 80273a8:	4602      	mov	r2, r0
 80273aa:	460b      	mov	r3, r1
 80273ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80273b0:	f7e8 fef4 	bl	801019c <__aeabi_dsub>
 80273b4:	4602      	mov	r2, r0
 80273b6:	460b      	mov	r3, r1
 80273b8:	4604      	mov	r4, r0
 80273ba:	460d      	mov	r5, r1
 80273bc:	4630      	mov	r0, r6
 80273be:	4639      	mov	r1, r7
 80273c0:	f7e8 feee 	bl	80101a0 <__adddf3>
 80273c4:	2000      	movs	r0, #0
 80273c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80273ca:	4632      	mov	r2, r6
 80273cc:	463b      	mov	r3, r7
 80273ce:	f7e8 fee5 	bl	801019c <__aeabi_dsub>
 80273d2:	4602      	mov	r2, r0
 80273d4:	460b      	mov	r3, r1
 80273d6:	4620      	mov	r0, r4
 80273d8:	4629      	mov	r1, r5
 80273da:	f7e8 fedf 	bl	801019c <__aeabi_dsub>
 80273de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80273e0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80273e4:	4313      	orrs	r3, r2
 80273e6:	4606      	mov	r6, r0
 80273e8:	460f      	mov	r7, r1
 80273ea:	f040 81eb 	bne.w	80277c4 <__ieee754_pow+0x6c4>
 80273ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80274a8 <__ieee754_pow+0x3a8>
 80273f2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80273f6:	2400      	movs	r4, #0
 80273f8:	4622      	mov	r2, r4
 80273fa:	462b      	mov	r3, r5
 80273fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027400:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027404:	f7e8 feca 	bl	801019c <__aeabi_dsub>
 8027408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802740c:	f7e9 f87e 	bl	801050c <__aeabi_dmul>
 8027410:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027414:	4680      	mov	r8, r0
 8027416:	4689      	mov	r9, r1
 8027418:	4630      	mov	r0, r6
 802741a:	4639      	mov	r1, r7
 802741c:	f7e9 f876 	bl	801050c <__aeabi_dmul>
 8027420:	4602      	mov	r2, r0
 8027422:	460b      	mov	r3, r1
 8027424:	4640      	mov	r0, r8
 8027426:	4649      	mov	r1, r9
 8027428:	f7e8 feba 	bl	80101a0 <__adddf3>
 802742c:	4622      	mov	r2, r4
 802742e:	462b      	mov	r3, r5
 8027430:	4680      	mov	r8, r0
 8027432:	4689      	mov	r9, r1
 8027434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027438:	f7e9 f868 	bl	801050c <__aeabi_dmul>
 802743c:	460b      	mov	r3, r1
 802743e:	4604      	mov	r4, r0
 8027440:	460d      	mov	r5, r1
 8027442:	4602      	mov	r2, r0
 8027444:	4649      	mov	r1, r9
 8027446:	4640      	mov	r0, r8
 8027448:	e9cd 4500 	strd	r4, r5, [sp]
 802744c:	f7e8 fea8 	bl	80101a0 <__adddf3>
 8027450:	4b1c      	ldr	r3, [pc, #112]	; (80274c4 <__ieee754_pow+0x3c4>)
 8027452:	4299      	cmp	r1, r3
 8027454:	4606      	mov	r6, r0
 8027456:	460f      	mov	r7, r1
 8027458:	468b      	mov	fp, r1
 802745a:	f340 82f7 	ble.w	8027a4c <__ieee754_pow+0x94c>
 802745e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8027462:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8027466:	4303      	orrs	r3, r0
 8027468:	f000 81ea 	beq.w	8027840 <__ieee754_pow+0x740>
 802746c:	a310      	add	r3, pc, #64	; (adr r3, 80274b0 <__ieee754_pow+0x3b0>)
 802746e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027476:	f7e9 f849 	bl	801050c <__aeabi_dmul>
 802747a:	a30d      	add	r3, pc, #52	; (adr r3, 80274b0 <__ieee754_pow+0x3b0>)
 802747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027480:	e6d5      	b.n	802722e <__ieee754_pow+0x12e>
 8027482:	bf00      	nop
 8027484:	f3af 8000 	nop.w
 8027488:	60000000 	.word	0x60000000
 802748c:	3ff71547 	.word	0x3ff71547
 8027490:	f85ddf44 	.word	0xf85ddf44
 8027494:	3e54ae0b 	.word	0x3e54ae0b
 8027498:	55555555 	.word	0x55555555
 802749c:	3fd55555 	.word	0x3fd55555
 80274a0:	652b82fe 	.word	0x652b82fe
 80274a4:	3ff71547 	.word	0x3ff71547
 80274a8:	00000000 	.word	0x00000000
 80274ac:	bff00000 	.word	0xbff00000
 80274b0:	8800759c 	.word	0x8800759c
 80274b4:	7e37e43c 	.word	0x7e37e43c
 80274b8:	3ff00000 	.word	0x3ff00000
 80274bc:	3fd00000 	.word	0x3fd00000
 80274c0:	3fe00000 	.word	0x3fe00000
 80274c4:	408fffff 	.word	0x408fffff
 80274c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80274cc:	f04f 0200 	mov.w	r2, #0
 80274d0:	da05      	bge.n	80274de <__ieee754_pow+0x3de>
 80274d2:	4bd3      	ldr	r3, [pc, #844]	; (8027820 <__ieee754_pow+0x720>)
 80274d4:	f7e9 f81a 	bl	801050c <__aeabi_dmul>
 80274d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80274dc:	460c      	mov	r4, r1
 80274de:	1523      	asrs	r3, r4, #20
 80274e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80274e4:	4413      	add	r3, r2
 80274e6:	9309      	str	r3, [sp, #36]	; 0x24
 80274e8:	4bce      	ldr	r3, [pc, #824]	; (8027824 <__ieee754_pow+0x724>)
 80274ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80274ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80274f2:	429c      	cmp	r4, r3
 80274f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80274f8:	dd08      	ble.n	802750c <__ieee754_pow+0x40c>
 80274fa:	4bcb      	ldr	r3, [pc, #812]	; (8027828 <__ieee754_pow+0x728>)
 80274fc:	429c      	cmp	r4, r3
 80274fe:	f340 815e 	ble.w	80277be <__ieee754_pow+0x6be>
 8027502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027504:	3301      	adds	r3, #1
 8027506:	9309      	str	r3, [sp, #36]	; 0x24
 8027508:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802750c:	f04f 0a00 	mov.w	sl, #0
 8027510:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8027514:	930c      	str	r3, [sp, #48]	; 0x30
 8027516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027518:	4bc4      	ldr	r3, [pc, #784]	; (802782c <__ieee754_pow+0x72c>)
 802751a:	4413      	add	r3, r2
 802751c:	ed93 7b00 	vldr	d7, [r3]
 8027520:	4629      	mov	r1, r5
 8027522:	ec53 2b17 	vmov	r2, r3, d7
 8027526:	ed8d 7b06 	vstr	d7, [sp, #24]
 802752a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 802752e:	f7e8 fe35 	bl	801019c <__aeabi_dsub>
 8027532:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8027536:	4606      	mov	r6, r0
 8027538:	460f      	mov	r7, r1
 802753a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802753e:	f7e8 fe2f 	bl	80101a0 <__adddf3>
 8027542:	4602      	mov	r2, r0
 8027544:	460b      	mov	r3, r1
 8027546:	2000      	movs	r0, #0
 8027548:	49b9      	ldr	r1, [pc, #740]	; (8027830 <__ieee754_pow+0x730>)
 802754a:	f7e9 f909 	bl	8010760 <__aeabi_ddiv>
 802754e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8027552:	4602      	mov	r2, r0
 8027554:	460b      	mov	r3, r1
 8027556:	4630      	mov	r0, r6
 8027558:	4639      	mov	r1, r7
 802755a:	f7e8 ffd7 	bl	801050c <__aeabi_dmul>
 802755e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8027562:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8027566:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802756a:	2300      	movs	r3, #0
 802756c:	9302      	str	r3, [sp, #8]
 802756e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8027572:	106d      	asrs	r5, r5, #1
 8027574:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8027578:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 802757c:	2200      	movs	r2, #0
 802757e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8027582:	4640      	mov	r0, r8
 8027584:	4649      	mov	r1, r9
 8027586:	4614      	mov	r4, r2
 8027588:	461d      	mov	r5, r3
 802758a:	f7e8 ffbf 	bl	801050c <__aeabi_dmul>
 802758e:	4602      	mov	r2, r0
 8027590:	460b      	mov	r3, r1
 8027592:	4630      	mov	r0, r6
 8027594:	4639      	mov	r1, r7
 8027596:	f7e8 fe01 	bl	801019c <__aeabi_dsub>
 802759a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802759e:	4606      	mov	r6, r0
 80275a0:	460f      	mov	r7, r1
 80275a2:	4620      	mov	r0, r4
 80275a4:	4629      	mov	r1, r5
 80275a6:	f7e8 fdf9 	bl	801019c <__aeabi_dsub>
 80275aa:	4602      	mov	r2, r0
 80275ac:	460b      	mov	r3, r1
 80275ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80275b2:	f7e8 fdf3 	bl	801019c <__aeabi_dsub>
 80275b6:	4642      	mov	r2, r8
 80275b8:	464b      	mov	r3, r9
 80275ba:	f7e8 ffa7 	bl	801050c <__aeabi_dmul>
 80275be:	4602      	mov	r2, r0
 80275c0:	460b      	mov	r3, r1
 80275c2:	4630      	mov	r0, r6
 80275c4:	4639      	mov	r1, r7
 80275c6:	f7e8 fde9 	bl	801019c <__aeabi_dsub>
 80275ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80275ce:	f7e8 ff9d 	bl	801050c <__aeabi_dmul>
 80275d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80275d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80275da:	4610      	mov	r0, r2
 80275dc:	4619      	mov	r1, r3
 80275de:	f7e8 ff95 	bl	801050c <__aeabi_dmul>
 80275e2:	a37b      	add	r3, pc, #492	; (adr r3, 80277d0 <__ieee754_pow+0x6d0>)
 80275e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275e8:	4604      	mov	r4, r0
 80275ea:	460d      	mov	r5, r1
 80275ec:	f7e8 ff8e 	bl	801050c <__aeabi_dmul>
 80275f0:	a379      	add	r3, pc, #484	; (adr r3, 80277d8 <__ieee754_pow+0x6d8>)
 80275f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275f6:	f7e8 fdd3 	bl	80101a0 <__adddf3>
 80275fa:	4622      	mov	r2, r4
 80275fc:	462b      	mov	r3, r5
 80275fe:	f7e8 ff85 	bl	801050c <__aeabi_dmul>
 8027602:	a377      	add	r3, pc, #476	; (adr r3, 80277e0 <__ieee754_pow+0x6e0>)
 8027604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027608:	f7e8 fdca 	bl	80101a0 <__adddf3>
 802760c:	4622      	mov	r2, r4
 802760e:	462b      	mov	r3, r5
 8027610:	f7e8 ff7c 	bl	801050c <__aeabi_dmul>
 8027614:	a374      	add	r3, pc, #464	; (adr r3, 80277e8 <__ieee754_pow+0x6e8>)
 8027616:	e9d3 2300 	ldrd	r2, r3, [r3]
 802761a:	f7e8 fdc1 	bl	80101a0 <__adddf3>
 802761e:	4622      	mov	r2, r4
 8027620:	462b      	mov	r3, r5
 8027622:	f7e8 ff73 	bl	801050c <__aeabi_dmul>
 8027626:	a372      	add	r3, pc, #456	; (adr r3, 80277f0 <__ieee754_pow+0x6f0>)
 8027628:	e9d3 2300 	ldrd	r2, r3, [r3]
 802762c:	f7e8 fdb8 	bl	80101a0 <__adddf3>
 8027630:	4622      	mov	r2, r4
 8027632:	462b      	mov	r3, r5
 8027634:	f7e8 ff6a 	bl	801050c <__aeabi_dmul>
 8027638:	a36f      	add	r3, pc, #444	; (adr r3, 80277f8 <__ieee754_pow+0x6f8>)
 802763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802763e:	f7e8 fdaf 	bl	80101a0 <__adddf3>
 8027642:	4622      	mov	r2, r4
 8027644:	4606      	mov	r6, r0
 8027646:	460f      	mov	r7, r1
 8027648:	462b      	mov	r3, r5
 802764a:	4620      	mov	r0, r4
 802764c:	4629      	mov	r1, r5
 802764e:	f7e8 ff5d 	bl	801050c <__aeabi_dmul>
 8027652:	4602      	mov	r2, r0
 8027654:	460b      	mov	r3, r1
 8027656:	4630      	mov	r0, r6
 8027658:	4639      	mov	r1, r7
 802765a:	f7e8 ff57 	bl	801050c <__aeabi_dmul>
 802765e:	4642      	mov	r2, r8
 8027660:	4604      	mov	r4, r0
 8027662:	460d      	mov	r5, r1
 8027664:	464b      	mov	r3, r9
 8027666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802766a:	f7e8 fd99 	bl	80101a0 <__adddf3>
 802766e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8027672:	f7e8 ff4b 	bl	801050c <__aeabi_dmul>
 8027676:	4622      	mov	r2, r4
 8027678:	462b      	mov	r3, r5
 802767a:	f7e8 fd91 	bl	80101a0 <__adddf3>
 802767e:	4642      	mov	r2, r8
 8027680:	4606      	mov	r6, r0
 8027682:	460f      	mov	r7, r1
 8027684:	464b      	mov	r3, r9
 8027686:	4640      	mov	r0, r8
 8027688:	4649      	mov	r1, r9
 802768a:	f7e8 ff3f 	bl	801050c <__aeabi_dmul>
 802768e:	2200      	movs	r2, #0
 8027690:	4b68      	ldr	r3, [pc, #416]	; (8027834 <__ieee754_pow+0x734>)
 8027692:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8027696:	f7e8 fd83 	bl	80101a0 <__adddf3>
 802769a:	4632      	mov	r2, r6
 802769c:	463b      	mov	r3, r7
 802769e:	f7e8 fd7f 	bl	80101a0 <__adddf3>
 80276a2:	9802      	ldr	r0, [sp, #8]
 80276a4:	460d      	mov	r5, r1
 80276a6:	4604      	mov	r4, r0
 80276a8:	4602      	mov	r2, r0
 80276aa:	460b      	mov	r3, r1
 80276ac:	4640      	mov	r0, r8
 80276ae:	4649      	mov	r1, r9
 80276b0:	f7e8 ff2c 	bl	801050c <__aeabi_dmul>
 80276b4:	2200      	movs	r2, #0
 80276b6:	4680      	mov	r8, r0
 80276b8:	4689      	mov	r9, r1
 80276ba:	4b5e      	ldr	r3, [pc, #376]	; (8027834 <__ieee754_pow+0x734>)
 80276bc:	4620      	mov	r0, r4
 80276be:	4629      	mov	r1, r5
 80276c0:	f7e8 fd6c 	bl	801019c <__aeabi_dsub>
 80276c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80276c8:	f7e8 fd68 	bl	801019c <__aeabi_dsub>
 80276cc:	4602      	mov	r2, r0
 80276ce:	460b      	mov	r3, r1
 80276d0:	4630      	mov	r0, r6
 80276d2:	4639      	mov	r1, r7
 80276d4:	f7e8 fd62 	bl	801019c <__aeabi_dsub>
 80276d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80276dc:	f7e8 ff16 	bl	801050c <__aeabi_dmul>
 80276e0:	4622      	mov	r2, r4
 80276e2:	4606      	mov	r6, r0
 80276e4:	460f      	mov	r7, r1
 80276e6:	462b      	mov	r3, r5
 80276e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80276ec:	f7e8 ff0e 	bl	801050c <__aeabi_dmul>
 80276f0:	4602      	mov	r2, r0
 80276f2:	460b      	mov	r3, r1
 80276f4:	4630      	mov	r0, r6
 80276f6:	4639      	mov	r1, r7
 80276f8:	f7e8 fd52 	bl	80101a0 <__adddf3>
 80276fc:	4606      	mov	r6, r0
 80276fe:	460f      	mov	r7, r1
 8027700:	4602      	mov	r2, r0
 8027702:	460b      	mov	r3, r1
 8027704:	4640      	mov	r0, r8
 8027706:	4649      	mov	r1, r9
 8027708:	f7e8 fd4a 	bl	80101a0 <__adddf3>
 802770c:	9802      	ldr	r0, [sp, #8]
 802770e:	a33c      	add	r3, pc, #240	; (adr r3, 8027800 <__ieee754_pow+0x700>)
 8027710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027714:	4604      	mov	r4, r0
 8027716:	460d      	mov	r5, r1
 8027718:	f7e8 fef8 	bl	801050c <__aeabi_dmul>
 802771c:	4642      	mov	r2, r8
 802771e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8027722:	464b      	mov	r3, r9
 8027724:	4620      	mov	r0, r4
 8027726:	4629      	mov	r1, r5
 8027728:	f7e8 fd38 	bl	801019c <__aeabi_dsub>
 802772c:	4602      	mov	r2, r0
 802772e:	460b      	mov	r3, r1
 8027730:	4630      	mov	r0, r6
 8027732:	4639      	mov	r1, r7
 8027734:	f7e8 fd32 	bl	801019c <__aeabi_dsub>
 8027738:	a333      	add	r3, pc, #204	; (adr r3, 8027808 <__ieee754_pow+0x708>)
 802773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802773e:	f7e8 fee5 	bl	801050c <__aeabi_dmul>
 8027742:	a333      	add	r3, pc, #204	; (adr r3, 8027810 <__ieee754_pow+0x710>)
 8027744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027748:	4606      	mov	r6, r0
 802774a:	460f      	mov	r7, r1
 802774c:	4620      	mov	r0, r4
 802774e:	4629      	mov	r1, r5
 8027750:	f7e8 fedc 	bl	801050c <__aeabi_dmul>
 8027754:	4602      	mov	r2, r0
 8027756:	460b      	mov	r3, r1
 8027758:	4630      	mov	r0, r6
 802775a:	4639      	mov	r1, r7
 802775c:	f7e8 fd20 	bl	80101a0 <__adddf3>
 8027760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027762:	4b35      	ldr	r3, [pc, #212]	; (8027838 <__ieee754_pow+0x738>)
 8027764:	4413      	add	r3, r2
 8027766:	e9d3 2300 	ldrd	r2, r3, [r3]
 802776a:	f7e8 fd19 	bl	80101a0 <__adddf3>
 802776e:	4604      	mov	r4, r0
 8027770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027772:	460d      	mov	r5, r1
 8027774:	f7e8 fe60 	bl	8010438 <__aeabi_i2d>
 8027778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802777a:	4b30      	ldr	r3, [pc, #192]	; (802783c <__ieee754_pow+0x73c>)
 802777c:	4413      	add	r3, r2
 802777e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8027782:	4606      	mov	r6, r0
 8027784:	460f      	mov	r7, r1
 8027786:	4622      	mov	r2, r4
 8027788:	462b      	mov	r3, r5
 802778a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802778e:	f7e8 fd07 	bl	80101a0 <__adddf3>
 8027792:	4642      	mov	r2, r8
 8027794:	464b      	mov	r3, r9
 8027796:	f7e8 fd03 	bl	80101a0 <__adddf3>
 802779a:	4632      	mov	r2, r6
 802779c:	463b      	mov	r3, r7
 802779e:	f7e8 fcff 	bl	80101a0 <__adddf3>
 80277a2:	9802      	ldr	r0, [sp, #8]
 80277a4:	4632      	mov	r2, r6
 80277a6:	463b      	mov	r3, r7
 80277a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80277ac:	f7e8 fcf6 	bl	801019c <__aeabi_dsub>
 80277b0:	4642      	mov	r2, r8
 80277b2:	464b      	mov	r3, r9
 80277b4:	f7e8 fcf2 	bl	801019c <__aeabi_dsub>
 80277b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80277bc:	e607      	b.n	80273ce <__ieee754_pow+0x2ce>
 80277be:	f04f 0a01 	mov.w	sl, #1
 80277c2:	e6a5      	b.n	8027510 <__ieee754_pow+0x410>
 80277c4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8027818 <__ieee754_pow+0x718>
 80277c8:	e613      	b.n	80273f2 <__ieee754_pow+0x2f2>
 80277ca:	bf00      	nop
 80277cc:	f3af 8000 	nop.w
 80277d0:	4a454eef 	.word	0x4a454eef
 80277d4:	3fca7e28 	.word	0x3fca7e28
 80277d8:	93c9db65 	.word	0x93c9db65
 80277dc:	3fcd864a 	.word	0x3fcd864a
 80277e0:	a91d4101 	.word	0xa91d4101
 80277e4:	3fd17460 	.word	0x3fd17460
 80277e8:	518f264d 	.word	0x518f264d
 80277ec:	3fd55555 	.word	0x3fd55555
 80277f0:	db6fabff 	.word	0xdb6fabff
 80277f4:	3fdb6db6 	.word	0x3fdb6db6
 80277f8:	33333303 	.word	0x33333303
 80277fc:	3fe33333 	.word	0x3fe33333
 8027800:	e0000000 	.word	0xe0000000
 8027804:	3feec709 	.word	0x3feec709
 8027808:	dc3a03fd 	.word	0xdc3a03fd
 802780c:	3feec709 	.word	0x3feec709
 8027810:	145b01f5 	.word	0x145b01f5
 8027814:	be3e2fe0 	.word	0xbe3e2fe0
 8027818:	00000000 	.word	0x00000000
 802781c:	3ff00000 	.word	0x3ff00000
 8027820:	43400000 	.word	0x43400000
 8027824:	0003988e 	.word	0x0003988e
 8027828:	000bb679 	.word	0x000bb679
 802782c:	080296e0 	.word	0x080296e0
 8027830:	3ff00000 	.word	0x3ff00000
 8027834:	40080000 	.word	0x40080000
 8027838:	08029700 	.word	0x08029700
 802783c:	080296f0 	.word	0x080296f0
 8027840:	a3b4      	add	r3, pc, #720	; (adr r3, 8027b14 <__ieee754_pow+0xa14>)
 8027842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027846:	4640      	mov	r0, r8
 8027848:	4649      	mov	r1, r9
 802784a:	f7e8 fca9 	bl	80101a0 <__adddf3>
 802784e:	4622      	mov	r2, r4
 8027850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8027854:	462b      	mov	r3, r5
 8027856:	4630      	mov	r0, r6
 8027858:	4639      	mov	r1, r7
 802785a:	f7e8 fc9f 	bl	801019c <__aeabi_dsub>
 802785e:	4602      	mov	r2, r0
 8027860:	460b      	mov	r3, r1
 8027862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027866:	f7e9 f8e1 	bl	8010a2c <__aeabi_dcmpgt>
 802786a:	2800      	cmp	r0, #0
 802786c:	f47f adfe 	bne.w	802746c <__ieee754_pow+0x36c>
 8027870:	4aa3      	ldr	r2, [pc, #652]	; (8027b00 <__ieee754_pow+0xa00>)
 8027872:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8027876:	4293      	cmp	r3, r2
 8027878:	f340 810a 	ble.w	8027a90 <__ieee754_pow+0x990>
 802787c:	151b      	asrs	r3, r3, #20
 802787e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8027882:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8027886:	fa4a f303 	asr.w	r3, sl, r3
 802788a:	445b      	add	r3, fp
 802788c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8027890:	4e9c      	ldr	r6, [pc, #624]	; (8027b04 <__ieee754_pow+0xa04>)
 8027892:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8027896:	4116      	asrs	r6, r2
 8027898:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 802789c:	2000      	movs	r0, #0
 802789e:	ea23 0106 	bic.w	r1, r3, r6
 80278a2:	f1c2 0214 	rsb	r2, r2, #20
 80278a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80278aa:	fa4a fa02 	asr.w	sl, sl, r2
 80278ae:	f1bb 0f00 	cmp.w	fp, #0
 80278b2:	4602      	mov	r2, r0
 80278b4:	460b      	mov	r3, r1
 80278b6:	4620      	mov	r0, r4
 80278b8:	4629      	mov	r1, r5
 80278ba:	bfb8      	it	lt
 80278bc:	f1ca 0a00 	rsblt	sl, sl, #0
 80278c0:	f7e8 fc6c 	bl	801019c <__aeabi_dsub>
 80278c4:	e9cd 0100 	strd	r0, r1, [sp]
 80278c8:	4642      	mov	r2, r8
 80278ca:	464b      	mov	r3, r9
 80278cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80278d0:	f7e8 fc66 	bl	80101a0 <__adddf3>
 80278d4:	2000      	movs	r0, #0
 80278d6:	a378      	add	r3, pc, #480	; (adr r3, 8027ab8 <__ieee754_pow+0x9b8>)
 80278d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80278dc:	4604      	mov	r4, r0
 80278de:	460d      	mov	r5, r1
 80278e0:	f7e8 fe14 	bl	801050c <__aeabi_dmul>
 80278e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80278e8:	4606      	mov	r6, r0
 80278ea:	460f      	mov	r7, r1
 80278ec:	4620      	mov	r0, r4
 80278ee:	4629      	mov	r1, r5
 80278f0:	f7e8 fc54 	bl	801019c <__aeabi_dsub>
 80278f4:	4602      	mov	r2, r0
 80278f6:	460b      	mov	r3, r1
 80278f8:	4640      	mov	r0, r8
 80278fa:	4649      	mov	r1, r9
 80278fc:	f7e8 fc4e 	bl	801019c <__aeabi_dsub>
 8027900:	a36f      	add	r3, pc, #444	; (adr r3, 8027ac0 <__ieee754_pow+0x9c0>)
 8027902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027906:	f7e8 fe01 	bl	801050c <__aeabi_dmul>
 802790a:	a36f      	add	r3, pc, #444	; (adr r3, 8027ac8 <__ieee754_pow+0x9c8>)
 802790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027910:	4680      	mov	r8, r0
 8027912:	4689      	mov	r9, r1
 8027914:	4620      	mov	r0, r4
 8027916:	4629      	mov	r1, r5
 8027918:	f7e8 fdf8 	bl	801050c <__aeabi_dmul>
 802791c:	4602      	mov	r2, r0
 802791e:	460b      	mov	r3, r1
 8027920:	4640      	mov	r0, r8
 8027922:	4649      	mov	r1, r9
 8027924:	f7e8 fc3c 	bl	80101a0 <__adddf3>
 8027928:	4604      	mov	r4, r0
 802792a:	460d      	mov	r5, r1
 802792c:	4602      	mov	r2, r0
 802792e:	460b      	mov	r3, r1
 8027930:	4630      	mov	r0, r6
 8027932:	4639      	mov	r1, r7
 8027934:	f7e8 fc34 	bl	80101a0 <__adddf3>
 8027938:	4632      	mov	r2, r6
 802793a:	463b      	mov	r3, r7
 802793c:	4680      	mov	r8, r0
 802793e:	4689      	mov	r9, r1
 8027940:	f7e8 fc2c 	bl	801019c <__aeabi_dsub>
 8027944:	4602      	mov	r2, r0
 8027946:	460b      	mov	r3, r1
 8027948:	4620      	mov	r0, r4
 802794a:	4629      	mov	r1, r5
 802794c:	f7e8 fc26 	bl	801019c <__aeabi_dsub>
 8027950:	4642      	mov	r2, r8
 8027952:	4606      	mov	r6, r0
 8027954:	460f      	mov	r7, r1
 8027956:	464b      	mov	r3, r9
 8027958:	4640      	mov	r0, r8
 802795a:	4649      	mov	r1, r9
 802795c:	f7e8 fdd6 	bl	801050c <__aeabi_dmul>
 8027960:	a35b      	add	r3, pc, #364	; (adr r3, 8027ad0 <__ieee754_pow+0x9d0>)
 8027962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027966:	4604      	mov	r4, r0
 8027968:	460d      	mov	r5, r1
 802796a:	f7e8 fdcf 	bl	801050c <__aeabi_dmul>
 802796e:	a35a      	add	r3, pc, #360	; (adr r3, 8027ad8 <__ieee754_pow+0x9d8>)
 8027970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027974:	f7e8 fc12 	bl	801019c <__aeabi_dsub>
 8027978:	4622      	mov	r2, r4
 802797a:	462b      	mov	r3, r5
 802797c:	f7e8 fdc6 	bl	801050c <__aeabi_dmul>
 8027980:	a357      	add	r3, pc, #348	; (adr r3, 8027ae0 <__ieee754_pow+0x9e0>)
 8027982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027986:	f7e8 fc0b 	bl	80101a0 <__adddf3>
 802798a:	4622      	mov	r2, r4
 802798c:	462b      	mov	r3, r5
 802798e:	f7e8 fdbd 	bl	801050c <__aeabi_dmul>
 8027992:	a355      	add	r3, pc, #340	; (adr r3, 8027ae8 <__ieee754_pow+0x9e8>)
 8027994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027998:	f7e8 fc00 	bl	801019c <__aeabi_dsub>
 802799c:	4622      	mov	r2, r4
 802799e:	462b      	mov	r3, r5
 80279a0:	f7e8 fdb4 	bl	801050c <__aeabi_dmul>
 80279a4:	a352      	add	r3, pc, #328	; (adr r3, 8027af0 <__ieee754_pow+0x9f0>)
 80279a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80279aa:	f7e8 fbf9 	bl	80101a0 <__adddf3>
 80279ae:	4622      	mov	r2, r4
 80279b0:	462b      	mov	r3, r5
 80279b2:	f7e8 fdab 	bl	801050c <__aeabi_dmul>
 80279b6:	4602      	mov	r2, r0
 80279b8:	460b      	mov	r3, r1
 80279ba:	4640      	mov	r0, r8
 80279bc:	4649      	mov	r1, r9
 80279be:	f7e8 fbed 	bl	801019c <__aeabi_dsub>
 80279c2:	4604      	mov	r4, r0
 80279c4:	460d      	mov	r5, r1
 80279c6:	4602      	mov	r2, r0
 80279c8:	460b      	mov	r3, r1
 80279ca:	4640      	mov	r0, r8
 80279cc:	4649      	mov	r1, r9
 80279ce:	f7e8 fd9d 	bl	801050c <__aeabi_dmul>
 80279d2:	2200      	movs	r2, #0
 80279d4:	e9cd 0100 	strd	r0, r1, [sp]
 80279d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80279dc:	4620      	mov	r0, r4
 80279de:	4629      	mov	r1, r5
 80279e0:	f7e8 fbdc 	bl	801019c <__aeabi_dsub>
 80279e4:	4602      	mov	r2, r0
 80279e6:	460b      	mov	r3, r1
 80279e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80279ec:	f7e8 feb8 	bl	8010760 <__aeabi_ddiv>
 80279f0:	4632      	mov	r2, r6
 80279f2:	4604      	mov	r4, r0
 80279f4:	460d      	mov	r5, r1
 80279f6:	463b      	mov	r3, r7
 80279f8:	4640      	mov	r0, r8
 80279fa:	4649      	mov	r1, r9
 80279fc:	f7e8 fd86 	bl	801050c <__aeabi_dmul>
 8027a00:	4632      	mov	r2, r6
 8027a02:	463b      	mov	r3, r7
 8027a04:	f7e8 fbcc 	bl	80101a0 <__adddf3>
 8027a08:	4602      	mov	r2, r0
 8027a0a:	460b      	mov	r3, r1
 8027a0c:	4620      	mov	r0, r4
 8027a0e:	4629      	mov	r1, r5
 8027a10:	f7e8 fbc4 	bl	801019c <__aeabi_dsub>
 8027a14:	4642      	mov	r2, r8
 8027a16:	464b      	mov	r3, r9
 8027a18:	f7e8 fbc0 	bl	801019c <__aeabi_dsub>
 8027a1c:	4602      	mov	r2, r0
 8027a1e:	460b      	mov	r3, r1
 8027a20:	2000      	movs	r0, #0
 8027a22:	4939      	ldr	r1, [pc, #228]	; (8027b08 <__ieee754_pow+0xa08>)
 8027a24:	f7e8 fbba 	bl	801019c <__aeabi_dsub>
 8027a28:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8027a2c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8027a30:	4602      	mov	r2, r0
 8027a32:	460b      	mov	r3, r1
 8027a34:	da2f      	bge.n	8027a96 <__ieee754_pow+0x996>
 8027a36:	4650      	mov	r0, sl
 8027a38:	ec43 2b10 	vmov	d0, r2, r3
 8027a3c:	f000 f9c0 	bl	8027dc0 <scalbn>
 8027a40:	ec51 0b10 	vmov	r0, r1, d0
 8027a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027a48:	f7ff bbf1 	b.w	802722e <__ieee754_pow+0x12e>
 8027a4c:	4b2f      	ldr	r3, [pc, #188]	; (8027b0c <__ieee754_pow+0xa0c>)
 8027a4e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8027a52:	429e      	cmp	r6, r3
 8027a54:	f77f af0c 	ble.w	8027870 <__ieee754_pow+0x770>
 8027a58:	4b2d      	ldr	r3, [pc, #180]	; (8027b10 <__ieee754_pow+0xa10>)
 8027a5a:	440b      	add	r3, r1
 8027a5c:	4303      	orrs	r3, r0
 8027a5e:	d00b      	beq.n	8027a78 <__ieee754_pow+0x978>
 8027a60:	a325      	add	r3, pc, #148	; (adr r3, 8027af8 <__ieee754_pow+0x9f8>)
 8027a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027a6a:	f7e8 fd4f 	bl	801050c <__aeabi_dmul>
 8027a6e:	a322      	add	r3, pc, #136	; (adr r3, 8027af8 <__ieee754_pow+0x9f8>)
 8027a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027a74:	f7ff bbdb 	b.w	802722e <__ieee754_pow+0x12e>
 8027a78:	4622      	mov	r2, r4
 8027a7a:	462b      	mov	r3, r5
 8027a7c:	f7e8 fb8e 	bl	801019c <__aeabi_dsub>
 8027a80:	4642      	mov	r2, r8
 8027a82:	464b      	mov	r3, r9
 8027a84:	f7e8 ffc8 	bl	8010a18 <__aeabi_dcmpge>
 8027a88:	2800      	cmp	r0, #0
 8027a8a:	f43f aef1 	beq.w	8027870 <__ieee754_pow+0x770>
 8027a8e:	e7e7      	b.n	8027a60 <__ieee754_pow+0x960>
 8027a90:	f04f 0a00 	mov.w	sl, #0
 8027a94:	e718      	b.n	80278c8 <__ieee754_pow+0x7c8>
 8027a96:	4621      	mov	r1, r4
 8027a98:	e7d4      	b.n	8027a44 <__ieee754_pow+0x944>
 8027a9a:	2000      	movs	r0, #0
 8027a9c:	491a      	ldr	r1, [pc, #104]	; (8027b08 <__ieee754_pow+0xa08>)
 8027a9e:	f7ff bb8f 	b.w	80271c0 <__ieee754_pow+0xc0>
 8027aa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027aa6:	f7ff bb8b 	b.w	80271c0 <__ieee754_pow+0xc0>
 8027aaa:	4630      	mov	r0, r6
 8027aac:	4639      	mov	r1, r7
 8027aae:	f7ff bb87 	b.w	80271c0 <__ieee754_pow+0xc0>
 8027ab2:	4693      	mov	fp, r2
 8027ab4:	f7ff bb98 	b.w	80271e8 <__ieee754_pow+0xe8>
 8027ab8:	00000000 	.word	0x00000000
 8027abc:	3fe62e43 	.word	0x3fe62e43
 8027ac0:	fefa39ef 	.word	0xfefa39ef
 8027ac4:	3fe62e42 	.word	0x3fe62e42
 8027ac8:	0ca86c39 	.word	0x0ca86c39
 8027acc:	be205c61 	.word	0xbe205c61
 8027ad0:	72bea4d0 	.word	0x72bea4d0
 8027ad4:	3e663769 	.word	0x3e663769
 8027ad8:	c5d26bf1 	.word	0xc5d26bf1
 8027adc:	3ebbbd41 	.word	0x3ebbbd41
 8027ae0:	af25de2c 	.word	0xaf25de2c
 8027ae4:	3f11566a 	.word	0x3f11566a
 8027ae8:	16bebd93 	.word	0x16bebd93
 8027aec:	3f66c16c 	.word	0x3f66c16c
 8027af0:	5555553e 	.word	0x5555553e
 8027af4:	3fc55555 	.word	0x3fc55555
 8027af8:	c2f8f359 	.word	0xc2f8f359
 8027afc:	01a56e1f 	.word	0x01a56e1f
 8027b00:	3fe00000 	.word	0x3fe00000
 8027b04:	000fffff 	.word	0x000fffff
 8027b08:	3ff00000 	.word	0x3ff00000
 8027b0c:	4090cbff 	.word	0x4090cbff
 8027b10:	3f6f3400 	.word	0x3f6f3400
 8027b14:	652b82fe 	.word	0x652b82fe
 8027b18:	3c971547 	.word	0x3c971547

08027b1c <__ieee754_sqrt>:
 8027b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027b20:	4955      	ldr	r1, [pc, #340]	; (8027c78 <__ieee754_sqrt+0x15c>)
 8027b22:	ec55 4b10 	vmov	r4, r5, d0
 8027b26:	43a9      	bics	r1, r5
 8027b28:	462b      	mov	r3, r5
 8027b2a:	462a      	mov	r2, r5
 8027b2c:	d112      	bne.n	8027b54 <__ieee754_sqrt+0x38>
 8027b2e:	ee10 2a10 	vmov	r2, s0
 8027b32:	ee10 0a10 	vmov	r0, s0
 8027b36:	4629      	mov	r1, r5
 8027b38:	f7e8 fce8 	bl	801050c <__aeabi_dmul>
 8027b3c:	4602      	mov	r2, r0
 8027b3e:	460b      	mov	r3, r1
 8027b40:	4620      	mov	r0, r4
 8027b42:	4629      	mov	r1, r5
 8027b44:	f7e8 fb2c 	bl	80101a0 <__adddf3>
 8027b48:	4604      	mov	r4, r0
 8027b4a:	460d      	mov	r5, r1
 8027b4c:	ec45 4b10 	vmov	d0, r4, r5
 8027b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027b54:	2d00      	cmp	r5, #0
 8027b56:	ee10 0a10 	vmov	r0, s0
 8027b5a:	4621      	mov	r1, r4
 8027b5c:	dc0f      	bgt.n	8027b7e <__ieee754_sqrt+0x62>
 8027b5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8027b62:	4330      	orrs	r0, r6
 8027b64:	d0f2      	beq.n	8027b4c <__ieee754_sqrt+0x30>
 8027b66:	b155      	cbz	r5, 8027b7e <__ieee754_sqrt+0x62>
 8027b68:	ee10 2a10 	vmov	r2, s0
 8027b6c:	4620      	mov	r0, r4
 8027b6e:	4629      	mov	r1, r5
 8027b70:	f7e8 fb14 	bl	801019c <__aeabi_dsub>
 8027b74:	4602      	mov	r2, r0
 8027b76:	460b      	mov	r3, r1
 8027b78:	f7e8 fdf2 	bl	8010760 <__aeabi_ddiv>
 8027b7c:	e7e4      	b.n	8027b48 <__ieee754_sqrt+0x2c>
 8027b7e:	151b      	asrs	r3, r3, #20
 8027b80:	d073      	beq.n	8027c6a <__ieee754_sqrt+0x14e>
 8027b82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8027b86:	07dd      	lsls	r5, r3, #31
 8027b88:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8027b8c:	bf48      	it	mi
 8027b8e:	0fc8      	lsrmi	r0, r1, #31
 8027b90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8027b94:	bf44      	itt	mi
 8027b96:	0049      	lslmi	r1, r1, #1
 8027b98:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8027b9c:	2500      	movs	r5, #0
 8027b9e:	1058      	asrs	r0, r3, #1
 8027ba0:	0fcb      	lsrs	r3, r1, #31
 8027ba2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8027ba6:	0049      	lsls	r1, r1, #1
 8027ba8:	2316      	movs	r3, #22
 8027baa:	462c      	mov	r4, r5
 8027bac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8027bb0:	19a7      	adds	r7, r4, r6
 8027bb2:	4297      	cmp	r7, r2
 8027bb4:	bfde      	ittt	le
 8027bb6:	19bc      	addle	r4, r7, r6
 8027bb8:	1bd2      	suble	r2, r2, r7
 8027bba:	19ad      	addle	r5, r5, r6
 8027bbc:	0fcf      	lsrs	r7, r1, #31
 8027bbe:	3b01      	subs	r3, #1
 8027bc0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8027bc4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8027bc8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8027bcc:	d1f0      	bne.n	8027bb0 <__ieee754_sqrt+0x94>
 8027bce:	f04f 0c20 	mov.w	ip, #32
 8027bd2:	469e      	mov	lr, r3
 8027bd4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8027bd8:	42a2      	cmp	r2, r4
 8027bda:	eb06 070e 	add.w	r7, r6, lr
 8027bde:	dc02      	bgt.n	8027be6 <__ieee754_sqrt+0xca>
 8027be0:	d112      	bne.n	8027c08 <__ieee754_sqrt+0xec>
 8027be2:	428f      	cmp	r7, r1
 8027be4:	d810      	bhi.n	8027c08 <__ieee754_sqrt+0xec>
 8027be6:	2f00      	cmp	r7, #0
 8027be8:	eb07 0e06 	add.w	lr, r7, r6
 8027bec:	da42      	bge.n	8027c74 <__ieee754_sqrt+0x158>
 8027bee:	f1be 0f00 	cmp.w	lr, #0
 8027bf2:	db3f      	blt.n	8027c74 <__ieee754_sqrt+0x158>
 8027bf4:	f104 0801 	add.w	r8, r4, #1
 8027bf8:	1b12      	subs	r2, r2, r4
 8027bfa:	428f      	cmp	r7, r1
 8027bfc:	bf88      	it	hi
 8027bfe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8027c02:	1bc9      	subs	r1, r1, r7
 8027c04:	4433      	add	r3, r6
 8027c06:	4644      	mov	r4, r8
 8027c08:	0052      	lsls	r2, r2, #1
 8027c0a:	f1bc 0c01 	subs.w	ip, ip, #1
 8027c0e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8027c12:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8027c16:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8027c1a:	d1dd      	bne.n	8027bd8 <__ieee754_sqrt+0xbc>
 8027c1c:	430a      	orrs	r2, r1
 8027c1e:	d006      	beq.n	8027c2e <__ieee754_sqrt+0x112>
 8027c20:	1c5c      	adds	r4, r3, #1
 8027c22:	bf13      	iteet	ne
 8027c24:	3301      	addne	r3, #1
 8027c26:	3501      	addeq	r5, #1
 8027c28:	4663      	moveq	r3, ip
 8027c2a:	f023 0301 	bicne.w	r3, r3, #1
 8027c2e:	106a      	asrs	r2, r5, #1
 8027c30:	085b      	lsrs	r3, r3, #1
 8027c32:	07e9      	lsls	r1, r5, #31
 8027c34:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8027c38:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8027c3c:	bf48      	it	mi
 8027c3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8027c42:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8027c46:	461c      	mov	r4, r3
 8027c48:	e780      	b.n	8027b4c <__ieee754_sqrt+0x30>
 8027c4a:	0aca      	lsrs	r2, r1, #11
 8027c4c:	3815      	subs	r0, #21
 8027c4e:	0549      	lsls	r1, r1, #21
 8027c50:	2a00      	cmp	r2, #0
 8027c52:	d0fa      	beq.n	8027c4a <__ieee754_sqrt+0x12e>
 8027c54:	02d6      	lsls	r6, r2, #11
 8027c56:	d50a      	bpl.n	8027c6e <__ieee754_sqrt+0x152>
 8027c58:	f1c3 0420 	rsb	r4, r3, #32
 8027c5c:	fa21 f404 	lsr.w	r4, r1, r4
 8027c60:	1e5d      	subs	r5, r3, #1
 8027c62:	4099      	lsls	r1, r3
 8027c64:	4322      	orrs	r2, r4
 8027c66:	1b43      	subs	r3, r0, r5
 8027c68:	e78b      	b.n	8027b82 <__ieee754_sqrt+0x66>
 8027c6a:	4618      	mov	r0, r3
 8027c6c:	e7f0      	b.n	8027c50 <__ieee754_sqrt+0x134>
 8027c6e:	0052      	lsls	r2, r2, #1
 8027c70:	3301      	adds	r3, #1
 8027c72:	e7ef      	b.n	8027c54 <__ieee754_sqrt+0x138>
 8027c74:	46a0      	mov	r8, r4
 8027c76:	e7bf      	b.n	8027bf8 <__ieee754_sqrt+0xdc>
 8027c78:	7ff00000 	.word	0x7ff00000

08027c7c <__ieee754_sqrtf>:
 8027c7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8027c80:	4770      	bx	lr

08027c82 <fabs>:
 8027c82:	ec51 0b10 	vmov	r0, r1, d0
 8027c86:	ee10 2a10 	vmov	r2, s0
 8027c8a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8027c8e:	ec43 2b10 	vmov	d0, r2, r3
 8027c92:	4770      	bx	lr

08027c94 <finite>:
 8027c94:	ee10 3a90 	vmov	r3, s1
 8027c98:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8027c9c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8027ca0:	0fc0      	lsrs	r0, r0, #31
 8027ca2:	4770      	bx	lr

08027ca4 <matherr>:
 8027ca4:	2000      	movs	r0, #0
 8027ca6:	4770      	bx	lr

08027ca8 <nan>:
 8027ca8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8027cb0 <nan+0x8>
 8027cac:	4770      	bx	lr
 8027cae:	bf00      	nop
 8027cb0:	00000000 	.word	0x00000000
 8027cb4:	7ff80000 	.word	0x7ff80000

08027cb8 <rint>:
 8027cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027cba:	ec51 0b10 	vmov	r0, r1, d0
 8027cbe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8027cc2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8027cc6:	2e13      	cmp	r6, #19
 8027cc8:	460b      	mov	r3, r1
 8027cca:	ee10 4a10 	vmov	r4, s0
 8027cce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8027cd2:	dc56      	bgt.n	8027d82 <rint+0xca>
 8027cd4:	2e00      	cmp	r6, #0
 8027cd6:	da2b      	bge.n	8027d30 <rint+0x78>
 8027cd8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8027cdc:	4302      	orrs	r2, r0
 8027cde:	d023      	beq.n	8027d28 <rint+0x70>
 8027ce0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8027ce4:	4302      	orrs	r2, r0
 8027ce6:	4254      	negs	r4, r2
 8027ce8:	4314      	orrs	r4, r2
 8027cea:	0c4b      	lsrs	r3, r1, #17
 8027cec:	0b24      	lsrs	r4, r4, #12
 8027cee:	045b      	lsls	r3, r3, #17
 8027cf0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8027cf4:	ea44 0103 	orr.w	r1, r4, r3
 8027cf8:	460b      	mov	r3, r1
 8027cfa:	492f      	ldr	r1, [pc, #188]	; (8027db8 <rint+0x100>)
 8027cfc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8027d00:	e9d1 6700 	ldrd	r6, r7, [r1]
 8027d04:	4602      	mov	r2, r0
 8027d06:	4639      	mov	r1, r7
 8027d08:	4630      	mov	r0, r6
 8027d0a:	f7e8 fa49 	bl	80101a0 <__adddf3>
 8027d0e:	e9cd 0100 	strd	r0, r1, [sp]
 8027d12:	463b      	mov	r3, r7
 8027d14:	4632      	mov	r2, r6
 8027d16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027d1a:	f7e8 fa3f 	bl	801019c <__aeabi_dsub>
 8027d1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8027d22:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8027d26:	4639      	mov	r1, r7
 8027d28:	ec41 0b10 	vmov	d0, r0, r1
 8027d2c:	b003      	add	sp, #12
 8027d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027d30:	4a22      	ldr	r2, [pc, #136]	; (8027dbc <rint+0x104>)
 8027d32:	4132      	asrs	r2, r6
 8027d34:	ea01 0702 	and.w	r7, r1, r2
 8027d38:	4307      	orrs	r7, r0
 8027d3a:	d0f5      	beq.n	8027d28 <rint+0x70>
 8027d3c:	0852      	lsrs	r2, r2, #1
 8027d3e:	4011      	ands	r1, r2
 8027d40:	430c      	orrs	r4, r1
 8027d42:	d00b      	beq.n	8027d5c <rint+0xa4>
 8027d44:	ea23 0202 	bic.w	r2, r3, r2
 8027d48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8027d4c:	2e13      	cmp	r6, #19
 8027d4e:	fa43 f306 	asr.w	r3, r3, r6
 8027d52:	bf0c      	ite	eq
 8027d54:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8027d58:	2400      	movne	r4, #0
 8027d5a:	4313      	orrs	r3, r2
 8027d5c:	4916      	ldr	r1, [pc, #88]	; (8027db8 <rint+0x100>)
 8027d5e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8027d62:	4622      	mov	r2, r4
 8027d64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8027d68:	4620      	mov	r0, r4
 8027d6a:	4629      	mov	r1, r5
 8027d6c:	f7e8 fa18 	bl	80101a0 <__adddf3>
 8027d70:	e9cd 0100 	strd	r0, r1, [sp]
 8027d74:	4622      	mov	r2, r4
 8027d76:	462b      	mov	r3, r5
 8027d78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027d7c:	f7e8 fa0e 	bl	801019c <__aeabi_dsub>
 8027d80:	e7d2      	b.n	8027d28 <rint+0x70>
 8027d82:	2e33      	cmp	r6, #51	; 0x33
 8027d84:	dd07      	ble.n	8027d96 <rint+0xde>
 8027d86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8027d8a:	d1cd      	bne.n	8027d28 <rint+0x70>
 8027d8c:	ee10 2a10 	vmov	r2, s0
 8027d90:	f7e8 fa06 	bl	80101a0 <__adddf3>
 8027d94:	e7c8      	b.n	8027d28 <rint+0x70>
 8027d96:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8027d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8027d9e:	40f2      	lsrs	r2, r6
 8027da0:	4210      	tst	r0, r2
 8027da2:	d0c1      	beq.n	8027d28 <rint+0x70>
 8027da4:	0852      	lsrs	r2, r2, #1
 8027da6:	4210      	tst	r0, r2
 8027da8:	bf1f      	itttt	ne
 8027daa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8027dae:	ea20 0202 	bicne.w	r2, r0, r2
 8027db2:	4134      	asrne	r4, r6
 8027db4:	4314      	orrne	r4, r2
 8027db6:	e7d1      	b.n	8027d5c <rint+0xa4>
 8027db8:	08029710 	.word	0x08029710
 8027dbc:	000fffff 	.word	0x000fffff

08027dc0 <scalbn>:
 8027dc0:	b570      	push	{r4, r5, r6, lr}
 8027dc2:	ec55 4b10 	vmov	r4, r5, d0
 8027dc6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8027dca:	4606      	mov	r6, r0
 8027dcc:	462b      	mov	r3, r5
 8027dce:	b9aa      	cbnz	r2, 8027dfc <scalbn+0x3c>
 8027dd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8027dd4:	4323      	orrs	r3, r4
 8027dd6:	d03b      	beq.n	8027e50 <scalbn+0x90>
 8027dd8:	4b31      	ldr	r3, [pc, #196]	; (8027ea0 <scalbn+0xe0>)
 8027dda:	4629      	mov	r1, r5
 8027ddc:	2200      	movs	r2, #0
 8027dde:	ee10 0a10 	vmov	r0, s0
 8027de2:	f7e8 fb93 	bl	801050c <__aeabi_dmul>
 8027de6:	4b2f      	ldr	r3, [pc, #188]	; (8027ea4 <scalbn+0xe4>)
 8027de8:	429e      	cmp	r6, r3
 8027dea:	4604      	mov	r4, r0
 8027dec:	460d      	mov	r5, r1
 8027dee:	da12      	bge.n	8027e16 <scalbn+0x56>
 8027df0:	a327      	add	r3, pc, #156	; (adr r3, 8027e90 <scalbn+0xd0>)
 8027df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027df6:	f7e8 fb89 	bl	801050c <__aeabi_dmul>
 8027dfa:	e009      	b.n	8027e10 <scalbn+0x50>
 8027dfc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8027e00:	428a      	cmp	r2, r1
 8027e02:	d10c      	bne.n	8027e1e <scalbn+0x5e>
 8027e04:	ee10 2a10 	vmov	r2, s0
 8027e08:	4620      	mov	r0, r4
 8027e0a:	4629      	mov	r1, r5
 8027e0c:	f7e8 f9c8 	bl	80101a0 <__adddf3>
 8027e10:	4604      	mov	r4, r0
 8027e12:	460d      	mov	r5, r1
 8027e14:	e01c      	b.n	8027e50 <scalbn+0x90>
 8027e16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8027e1a:	460b      	mov	r3, r1
 8027e1c:	3a36      	subs	r2, #54	; 0x36
 8027e1e:	4432      	add	r2, r6
 8027e20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8027e24:	428a      	cmp	r2, r1
 8027e26:	dd0b      	ble.n	8027e40 <scalbn+0x80>
 8027e28:	ec45 4b11 	vmov	d1, r4, r5
 8027e2c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8027e98 <scalbn+0xd8>
 8027e30:	f000 f83c 	bl	8027eac <copysign>
 8027e34:	a318      	add	r3, pc, #96	; (adr r3, 8027e98 <scalbn+0xd8>)
 8027e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e3a:	ec51 0b10 	vmov	r0, r1, d0
 8027e3e:	e7da      	b.n	8027df6 <scalbn+0x36>
 8027e40:	2a00      	cmp	r2, #0
 8027e42:	dd08      	ble.n	8027e56 <scalbn+0x96>
 8027e44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8027e48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8027e4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8027e50:	ec45 4b10 	vmov	d0, r4, r5
 8027e54:	bd70      	pop	{r4, r5, r6, pc}
 8027e56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8027e5a:	da0d      	bge.n	8027e78 <scalbn+0xb8>
 8027e5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8027e60:	429e      	cmp	r6, r3
 8027e62:	ec45 4b11 	vmov	d1, r4, r5
 8027e66:	dce1      	bgt.n	8027e2c <scalbn+0x6c>
 8027e68:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8027e90 <scalbn+0xd0>
 8027e6c:	f000 f81e 	bl	8027eac <copysign>
 8027e70:	a307      	add	r3, pc, #28	; (adr r3, 8027e90 <scalbn+0xd0>)
 8027e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e76:	e7e0      	b.n	8027e3a <scalbn+0x7a>
 8027e78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8027e7c:	3236      	adds	r2, #54	; 0x36
 8027e7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8027e82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8027e86:	4620      	mov	r0, r4
 8027e88:	4629      	mov	r1, r5
 8027e8a:	2200      	movs	r2, #0
 8027e8c:	4b06      	ldr	r3, [pc, #24]	; (8027ea8 <scalbn+0xe8>)
 8027e8e:	e7b2      	b.n	8027df6 <scalbn+0x36>
 8027e90:	c2f8f359 	.word	0xc2f8f359
 8027e94:	01a56e1f 	.word	0x01a56e1f
 8027e98:	8800759c 	.word	0x8800759c
 8027e9c:	7e37e43c 	.word	0x7e37e43c
 8027ea0:	43500000 	.word	0x43500000
 8027ea4:	ffff3cb0 	.word	0xffff3cb0
 8027ea8:	3c900000 	.word	0x3c900000

08027eac <copysign>:
 8027eac:	ec51 0b10 	vmov	r0, r1, d0
 8027eb0:	ee11 0a90 	vmov	r0, s3
 8027eb4:	ee10 2a10 	vmov	r2, s0
 8027eb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8027ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8027ec0:	ea41 0300 	orr.w	r3, r1, r0
 8027ec4:	ec43 2b10 	vmov	d0, r2, r3
 8027ec8:	4770      	bx	lr
	...

08027ecc <_init>:
 8027ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027ece:	bf00      	nop
 8027ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027ed2:	bc08      	pop	{r3}
 8027ed4:	469e      	mov	lr, r3
 8027ed6:	4770      	bx	lr

08027ed8 <_fini>:
 8027ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027eda:	bf00      	nop
 8027edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027ede:	bc08      	pop	{r3}
 8027ee0:	469e      	mov	lr, r3
 8027ee2:	4770      	bx	lr

Disassembly of section .RamFunc:

08027ee4 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8027ee4:	b480      	push	{r7}
 8027ee6:	b089      	sub	sp, #36	; 0x24
 8027ee8:	af00      	add	r7, sp, #0
 8027eea:	6078      	str	r0, [r7, #4]
 8027eec:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8027eee:	2380      	movs	r3, #128	; 0x80
 8027ef0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8027ef2:	687b      	ldr	r3, [r7, #4]
 8027ef4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8027ef6:	683b      	ldr	r3, [r7, #0]
 8027ef8:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8027efa:	4b17      	ldr	r3, [pc, #92]	; (8027f58 <_etext+0x74>)
 8027efc:	695b      	ldr	r3, [r3, #20]
 8027efe:	4a16      	ldr	r2, [pc, #88]	; (8027f58 <_etext+0x74>)
 8027f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8027f04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8027f06:	f3ef 8310 	mrs	r3, PRIMASK
 8027f0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8027f0c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8027f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8027f10:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8027f12:	697b      	ldr	r3, [r7, #20]
 8027f14:	681a      	ldr	r2, [r3, #0]
 8027f16:	69bb      	ldr	r3, [r7, #24]
 8027f18:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8027f1a:	69bb      	ldr	r3, [r7, #24]
 8027f1c:	3304      	adds	r3, #4
 8027f1e:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8027f20:	697b      	ldr	r3, [r7, #20]
 8027f22:	3304      	adds	r3, #4
 8027f24:	617b      	str	r3, [r7, #20]
    row_index--;
 8027f26:	7ffb      	ldrb	r3, [r7, #31]
 8027f28:	3b01      	subs	r3, #1
 8027f2a:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8027f2c:	7ffb      	ldrb	r3, [r7, #31]
 8027f2e:	2b00      	cmp	r3, #0
 8027f30:	d1ef      	bne.n	8027f12 <FLASH_Program_Fast+0x2e>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8027f32:	bf00      	nop
 8027f34:	4b08      	ldr	r3, [pc, #32]	; (8027f58 <_etext+0x74>)
 8027f36:	691b      	ldr	r3, [r3, #16]
 8027f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027f40:	d0f8      	beq.n	8027f34 <FLASH_Program_Fast+0x50>
 8027f42:	693b      	ldr	r3, [r7, #16]
 8027f44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8027f46:	68bb      	ldr	r3, [r7, #8]
 8027f48:	f383 8810 	msr	PRIMASK, r3
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8027f4c:	bf00      	nop
 8027f4e:	3724      	adds	r7, #36	; 0x24
 8027f50:	46bd      	mov	sp, r7
 8027f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f56:	4770      	bx	lr
 8027f58:	58004000 	.word	0x58004000
