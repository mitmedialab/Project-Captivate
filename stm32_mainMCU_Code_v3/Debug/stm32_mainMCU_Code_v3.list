
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b684  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b8  0801b7c8  0801b7c8  0002b7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ca80  0801ca80  0002ca80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ca88  0801ca88  0002ca88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ca8c  0801ca8c  0002ca8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d0  20000004  0801ca90  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200002d4  0801cd60  000302d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000370  0801cdf9  00030370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00029df4  20000388  0801ce0a  00030388  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2002a17c  0801ce0a  0003a17c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   00072f7a  00000000  00000000  000303b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000cb3f  00000000  00000000  000a332b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000041f8  00000000  00000000  000afe70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003c50  00000000  00000000  000b4068  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002c13c  00000000  00000000  000b7cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0001a13c  00000000  00000000  000e3df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  000fdf30  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00010f88  00000000  00000000  000fe020  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  0010efa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000388 	.word	0x20000388
 800015c:	00000000 	.word	0x00000000
 8000160:	0801b7ac 	.word	0x0801b7ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000038c 	.word	0x2000038c
 800017c:	0801b7ac 	.word	0x0801b7ac

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e58:	4a2c      	ldr	r2, [pc, #176]	; (8000f0c <MX_ADC1_Init+0xcc>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e5e:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e9e:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec2:	4811      	ldr	r0, [pc, #68]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000ec4:	f005 fffc 	bl	8006ec0 <HAL_ADC_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ece:	f003 fb5f 	bl	8004590 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_ADC1_Init+0xd0>)
 8000ed4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000eda:	2303      	movs	r3, #3
 8000edc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ede:	237f      	movs	r3, #127	; 0x7f
 8000ee0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eea:	463b      	mov	r3, r7
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000ef0:	f006 fa1c 	bl	800732c <HAL_ADC_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000efa:	f003 fb49 	bl	8004590 <Error_Handler>
  }

}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20027a94 	.word	0x20027a94
 8000f0c:	50040000 	.word	0x50040000
 8000f10:	14f00020 	.word	0x14f00020

08000f14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <HAL_ADC_MspInit+0xa4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d13c      	bne.n	8000fb0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f36:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f3a:	f7ff ff67 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f7ff ff64 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f44:	2301      	movs	r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f007 fe31 	bl	8008bc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_ADC_MspInit+0xac>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f66:	2205      	movs	r2, #5
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f96:	f007 fae3 	bl	8008560 <HAL_DMA_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000fa0:	f003 faf6 	bl	8004590 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000fa8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	50040000 	.word	0x50040000
 8000fbc:	20027af8 	.word	0x20027af8
 8000fc0:	40020008 	.word	0x40020008

08000fc4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	608b      	str	r3, [r1, #8]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000ff0:	f000 f80a 	bl	8001008 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ff4:	4903      	ldr	r1, [pc, #12]	; (8001004 <APPE_Init+0x18>)
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f002 fa76 	bl	80034e8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ffc:	f000 f80e 	bl	800101c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001000:	bf00      	nop
}
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200287fc 	.word	0x200287fc

08001008 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800100c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001010:	f7ff ffd8 	bl	8000fc4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001014:	f018 ffe0 	bl	8019fd8 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001018:	bf00      	nop
}
 800101a:	bd80      	pop	{r7, pc}

0800101c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001022:	f015 fa13 	bl	801644c <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001026:	2000      	movs	r0, #0
 8001028:	f00f fe24 	bl	8010c74 <osMutexNew>
 800102c:	4602      	mov	r2, r0
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <appe_Tl_Init+0x70>)
 8001030:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2001      	movs	r0, #1
 8001038:	f00f ff64 	bl	8010f04 <osSemaphoreNew>
 800103c:	4602      	mov	r2, r0
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <appe_Tl_Init+0x74>)
 8001040:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <appe_Tl_Init+0x78>)
 8001044:	2100      	movs	r1, #0
 8001046:	4814      	ldr	r0, [pc, #80]	; (8001098 <appe_Tl_Init+0x7c>)
 8001048:	f00f fad0 	bl	80105ec <osThreadNew>
 800104c:	4602      	mov	r2, r0
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <appe_Tl_Init+0x80>)
 8001050:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <appe_Tl_Init+0x84>)
 8001054:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <appe_Tl_Init+0x88>)
 8001058:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	4812      	ldr	r0, [pc, #72]	; (80010a8 <appe_Tl_Init+0x8c>)
 8001060:	f014 ff20 	bl	8015ea4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <appe_Tl_Init+0x90>)
 800106a:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <appe_Tl_Init+0x94>)
 800106e:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001070:	f240 533c 	movw	r3, #1340	; 0x53c
 8001074:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4618      	mov	r0, r3
 800107c:	f015 fb24 	bl	80166c8 <TL_MM_Init>

  TL_Enable();
 8001080:	f015 f9de 	bl	8016440 <TL_Enable>

  return;
 8001084:	bf00      	nop
}
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20027b58 	.word	0x20027b58
 8001090:	20027b70 	.word	0x20027b70
 8001094:	0801bcf4 	.word	0x0801bcf4
 8001098:	0800119d 	.word	0x0800119d
 800109c:	20027b5c 	.word	0x20027b5c
 80010a0:	20030600 	.word	0x20030600
 80010a4:	080010b5 	.word	0x080010b5
 80010a8:	080010f5 	.word	0x080010f5
 80010ac:	2003070c 	.word	0x2003070c
 80010b0:	200300c4 	.word	0x200300c4

080010b4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <APPE_SysStatusNot+0x16>
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d008      	beq.n	80010da <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010c8:	e00d      	b.n	80010e6 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <APPE_SysStatusNot+0x3c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f04f 31ff 	mov.w	r1, #4294967295
 80010d2:	4618      	mov	r0, r3
 80010d4:	f00f fe68 	bl	8010da8 <osMutexAcquire>
      break;
 80010d8:	e005      	b.n	80010e6 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <APPE_SysStatusNot+0x3c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f00f fec0 	bl	8010e64 <osMutexRelease>
      break;
 80010e4:	bf00      	nop
  }
  return;
 80010e6:	bf00      	nop
}
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20027b58 	.word	0x20027b58

080010f4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	330b      	adds	r3, #11
 8001102:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800110e:	d004      	beq.n	800111a <APPE_SysUserEvtRx+0x26>
 8001110:	f249 2201 	movw	r2, #37377	; 0x9201
 8001114:	4293      	cmp	r3, r2
 8001116:	d003      	beq.n	8001120 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001118:	e008      	b.n	800112c <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 800111a:	f000 f833 	bl	8001184 <APPE_SysEvtReadyProcessing>
         break;
 800111e:	e005      	b.n	800112c <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	789b      	ldrb	r3, [r3, #2]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f805 	bl	8001134 <APPE_SysEvtError>
         break;
 800112a:	bf00      	nop
  }
  return;
 800112c:	bf00      	nop
}
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b7d      	cmp	r3, #125	; 0x7d
 8001142:	d002      	beq.n	800114a <APPE_SysEvtError+0x16>
 8001144:	2b7e      	cmp	r3, #126	; 0x7e
 8001146:	d006      	beq.n	8001156 <APPE_SysEvtError+0x22>
 8001148:	e00b      	b.n	8001162 <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <APPE_SysEvtError+0x44>)
 800114c:	2101      	movs	r1, #1
 800114e:	2000      	movs	r0, #0
 8001150:	f004 fd78 	bl	8005c44 <logApplication>
       break;
 8001154:	e00c      	b.n	8001170 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <APPE_SysEvtError+0x48>)
 8001158:	2101      	movs	r1, #1
 800115a:	2000      	movs	r0, #0
 800115c:	f004 fd72 	bl	8005c44 <logApplication>
       break;
 8001160:	e006      	b.n	8001170 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <APPE_SysEvtError+0x4c>)
 8001166:	2101      	movs	r1, #1
 8001168:	2000      	movs	r0, #0
 800116a:	f004 fd6b 	bl	8005c44 <logApplication>
       break;
 800116e:	bf00      	nop
  }
  return;
 8001170:	bf00      	nop
}
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	0801b7e0 	.word	0x0801b7e0
 800117c:	0801b804 	.word	0x0801b804
 8001180:	0801b824 	.word	0x0801b824

08001184 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001188:	f015 fb0e 	bl	80167a8 <TL_TRACES_Init>

  APP_THREAD_Init();
 800118c:	f016 feae 	bl	8017eec <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001190:	2100      	movs	r1, #0
 8001192:	2001      	movs	r0, #1
 8001194:	f018 ff32 	bl	8019ffc <UTIL_LPM_SetOffMode>
  return;
 8001198:	bf00      	nop
}
 800119a:	bd80      	pop	{r7, pc}

0800119c <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	2100      	movs	r1, #0
 80011aa:	2001      	movs	r0, #1
 80011ac:	f00f fb7c 	bl	80108a8 <osThreadFlagsWait>
     shci_user_evt_proc();
 80011b0:	f014 fe94 	bl	8015edc <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011b4:	e7f6      	b.n	80011a4 <ShciUserEvtProcess+0x8>
	...

080011b8 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <shci_notify_asynch_evt+0x1c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00f fabc 	bl	8010744 <osThreadFlagsSet>
  return;
 80011cc:	bf00      	nop
}
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20027b5c 	.word	0x20027b5c

080011d8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <shci_cmd_resp_release+0x1c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00f ff91 	bl	801110c <osSemaphoreRelease>
  return;
 80011ea:	bf00      	nop
}
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20027b70 	.word	0x20027b70

080011f8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <shci_cmd_resp_wait+0x20>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	4618      	mov	r0, r3
 800120a:	f00f ff19 	bl	8011040 <osSemaphoreAcquire>
  return;
 800120e:	bf00      	nop
}
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20027b70 	.word	0x20027b70

0800121c <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f015 fa8b 	bl	8016740 <TL_MM_EvtDone>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001244:	f005 fc02 	bl	8006a4c <HAL_GetTick>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}

0800124e <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <vApplicationStackOverflowHook+0x24>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	3301      	adds	r3, #1
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <vApplicationStackOverflowHook+0x24>)
 8001272:	701a      	strb	r2, [r3, #0]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	200003a4 	.word	0x200003a4

08001284 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <vApplicationMallocFailedHook+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	3301      	adds	r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <vApplicationMallocFailedHook+0x1c>)
 8001294:	701a      	strb	r2, [r3, #0]

}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	200003a4 	.word	0x200003a4

080012a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012a8:	4a70      	ldr	r2, [pc, #448]	; (800146c <MX_FREERTOS_Init+0x1c8>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	2001      	movs	r0, #1
 80012ae:	f00f fe29 	bl	8010f04 <osSemaphoreNew>
 80012b2:	4602      	mov	r2, r0
 80012b4:	4b6e      	ldr	r3, [pc, #440]	; (8001470 <MX_FREERTOS_Init+0x1cc>)
 80012b6:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80012b8:	4a6e      	ldr	r2, [pc, #440]	; (8001474 <MX_FREERTOS_Init+0x1d0>)
 80012ba:	2101      	movs	r1, #1
 80012bc:	2001      	movs	r0, #1
 80012be:	f00f fe21 	bl	8010f04 <osSemaphoreNew>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <MX_FREERTOS_Init+0x1d4>)
 80012c6:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80012c8:	4a6c      	ldr	r2, [pc, #432]	; (800147c <MX_FREERTOS_Init+0x1d8>)
 80012ca:	2101      	movs	r1, #1
 80012cc:	2001      	movs	r0, #1
 80012ce:	f00f fe19 	bl	8010f04 <osSemaphoreNew>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <MX_FREERTOS_Init+0x1dc>)
 80012d6:	601a      	str	r2, [r3, #0]

  /* creation of lightingLabDemoEnd */
  lightingLabDemoEndHandle = osSemaphoreNew(1, 1, &lightingLabDemoEnd_attributes);
 80012d8:	4a6a      	ldr	r2, [pc, #424]	; (8001484 <MX_FREERTOS_Init+0x1e0>)
 80012da:	2101      	movs	r1, #1
 80012dc:	2001      	movs	r0, #1
 80012de:	f00f fe11 	bl	8010f04 <osSemaphoreNew>
 80012e2:	4602      	mov	r2, r0
 80012e4:	4b68      	ldr	r3, [pc, #416]	; (8001488 <MX_FREERTOS_Init+0x1e4>)
 80012e6:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, (void*) &viveStateVar, &viveTimer_attributes);
 80012e8:	4b68      	ldr	r3, [pc, #416]	; (800148c <MX_FREERTOS_Init+0x1e8>)
 80012ea:	4a69      	ldr	r2, [pc, #420]	; (8001490 <MX_FREERTOS_Init+0x1ec>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	4869      	ldr	r0, [pc, #420]	; (8001494 <MX_FREERTOS_Init+0x1f0>)
 80012f0:	f00f fbb2 	bl	8010a58 <osTimerNew>
 80012f4:	4602      	mov	r2, r0
 80012f6:	4b68      	ldr	r3, [pc, #416]	; (8001498 <MX_FREERTOS_Init+0x1f4>)
 80012f8:	601a      	str	r2, [r3, #0]

  /* creation of watchDogTimer */
  watchDogTimerHandle = osTimerNew(watchDogReset, osTimerPeriodic, NULL, &watchDogTimer_attributes);
 80012fa:	4b68      	ldr	r3, [pc, #416]	; (800149c <MX_FREERTOS_Init+0x1f8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	2101      	movs	r1, #1
 8001300:	4867      	ldr	r0, [pc, #412]	; (80014a0 <MX_FREERTOS_Init+0x1fc>)
 8001302:	f00f fba9 	bl	8010a58 <osTimerNew>
 8001306:	4602      	mov	r2, r0
 8001308:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <MX_FREERTOS_Init+0x200>)
 800130a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
//  /* start timers, add new ones, ... */
  osTimerStart(watchDogTimerHandle, WATCHDOG_PERIOD);
 800130c:	4b65      	ldr	r3, [pc, #404]	; (80014a4 <MX_FREERTOS_Init+0x200>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f241 3188 	movw	r1, #5000	; 0x1388
 8001314:	4618      	mov	r0, r3
 8001316:	f00f fc23 	bl	8010b60 <osTimerStart>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 800131a:	4a63      	ldr	r2, [pc, #396]	; (80014a8 <MX_FREERTOS_Init+0x204>)
 800131c:	216c      	movs	r1, #108	; 0x6c
 800131e:	200a      	movs	r0, #10
 8001320:	f00f ff4c 	bl	80111bc <osMessageQueueNew>
 8001324:	4602      	mov	r2, r0
 8001326:	4b61      	ldr	r3, [pc, #388]	; (80014ac <MX_FREERTOS_Init+0x208>)
 8001328:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 800132a:	4a61      	ldr	r2, [pc, #388]	; (80014b0 <MX_FREERTOS_Init+0x20c>)
 800132c:	2104      	movs	r1, #4
 800132e:	2003      	movs	r0, #3
 8001330:	f00f ff44 	bl	80111bc <osMessageQueueNew>
 8001334:	4602      	mov	r2, r0
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <MX_FREERTOS_Init+0x210>)
 8001338:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 800133a:	4a5f      	ldr	r2, [pc, #380]	; (80014b8 <MX_FREERTOS_Init+0x214>)
 800133c:	2106      	movs	r1, #6
 800133e:	2004      	movs	r0, #4
 8001340:	f00f ff3c 	bl	80111bc <osMessageQueueNew>
 8001344:	4602      	mov	r2, r0
 8001346:	4b5d      	ldr	r3, [pc, #372]	; (80014bc <MX_FREERTOS_Init+0x218>)
 8001348:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 800134a:	4a5d      	ldr	r2, [pc, #372]	; (80014c0 <MX_FREERTOS_Init+0x21c>)
 800134c:	2118      	movs	r1, #24
 800134e:	200a      	movs	r0, #10
 8001350:	f00f ff34 	bl	80111bc <osMessageQueueNew>
 8001354:	4602      	mov	r2, r0
 8001356:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <MX_FREERTOS_Init+0x220>)
 8001358:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 800135a:	4a5b      	ldr	r2, [pc, #364]	; (80014c8 <MX_FREERTOS_Init+0x224>)
 800135c:	2128      	movs	r1, #40	; 0x28
 800135e:	200a      	movs	r0, #10
 8001360:	f00f ff2c 	bl	80111bc <osMessageQueueNew>
 8001364:	4602      	mov	r2, r0
 8001366:	4b59      	ldr	r3, [pc, #356]	; (80014cc <MX_FREERTOS_Init+0x228>)
 8001368:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 800136a:	4a59      	ldr	r2, [pc, #356]	; (80014d0 <MX_FREERTOS_Init+0x22c>)
 800136c:	2110      	movs	r1, #16
 800136e:	200a      	movs	r0, #10
 8001370:	f00f ff24 	bl	80111bc <osMessageQueueNew>
 8001374:	4602      	mov	r2, r0
 8001376:	4b57      	ldr	r3, [pc, #348]	; (80014d4 <MX_FREERTOS_Init+0x230>)
 8001378:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 800137a:	4a57      	ldr	r2, [pc, #348]	; (80014d8 <MX_FREERTOS_Init+0x234>)
 800137c:	2118      	movs	r1, #24
 800137e:	2003      	movs	r0, #3
 8001380:	f00f ff1c 	bl	80111bc <osMessageQueueNew>
 8001384:	4602      	mov	r2, r0
 8001386:	4b55      	ldr	r3, [pc, #340]	; (80014dc <MX_FREERTOS_Init+0x238>)
 8001388:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 800138a:	4a55      	ldr	r2, [pc, #340]	; (80014e0 <MX_FREERTOS_Init+0x23c>)
 800138c:	2106      	movs	r1, #6
 800138e:	200a      	movs	r0, #10
 8001390:	f00f ff14 	bl	80111bc <osMessageQueueNew>
 8001394:	4602      	mov	r2, r0
 8001396:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <MX_FREERTOS_Init+0x240>)
 8001398:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 800139a:	4a53      	ldr	r2, [pc, #332]	; (80014e8 <MX_FREERTOS_Init+0x244>)
 800139c:	2118      	movs	r1, #24
 800139e:	200a      	movs	r0, #10
 80013a0:	f00f ff0c 	bl	80111bc <osMessageQueueNew>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b51      	ldr	r3, [pc, #324]	; (80014ec <MX_FREERTOS_Init+0x248>)
 80013a8:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 80013aa:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <MX_FREERTOS_Init+0x24c>)
 80013ac:	2104      	movs	r1, #4
 80013ae:	2001      	movs	r0, #1
 80013b0:	f00f ff04 	bl	80111bc <osMessageQueueNew>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <MX_FREERTOS_Init+0x250>)
 80013b8:	601a      	str	r2, [r3, #0]

  /* creation of msgPasssingUSB_Queue */
  msgPasssingUSB_QueueHandle = osMessageQueueNew (5, 11, &msgPasssingUSB_Queue_attributes);
 80013ba:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <MX_FREERTOS_Init+0x254>)
 80013bc:	210b      	movs	r1, #11
 80013be:	2005      	movs	r0, #5
 80013c0:	f00f fefc 	bl	80111bc <osMessageQueueNew>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b4d      	ldr	r3, [pc, #308]	; (80014fc <MX_FREERTOS_Init+0x258>)
 80013c8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 80013ca:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <MX_FREERTOS_Init+0x25c>)
 80013cc:	2100      	movs	r1, #0
 80013ce:	484d      	ldr	r0, [pc, #308]	; (8001504 <MX_FREERTOS_Init+0x260>)
 80013d0:	f00f f90c 	bl	80105ec <osThreadNew>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <MX_FREERTOS_Init+0x264>)
 80013d8:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 80013da:	4a4c      	ldr	r2, [pc, #304]	; (800150c <MX_FREERTOS_Init+0x268>)
 80013dc:	2100      	movs	r1, #0
 80013de:	484c      	ldr	r0, [pc, #304]	; (8001510 <MX_FREERTOS_Init+0x26c>)
 80013e0:	f00f f904 	bl	80105ec <osThreadNew>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <MX_FREERTOS_Init+0x270>)
 80013e8:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80013ea:	4a4b      	ldr	r2, [pc, #300]	; (8001518 <MX_FREERTOS_Init+0x274>)
 80013ec:	2100      	movs	r1, #0
 80013ee:	484b      	ldr	r0, [pc, #300]	; (800151c <MX_FREERTOS_Init+0x278>)
 80013f0:	f00f f8fc 	bl	80105ec <osThreadNew>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <MX_FREERTOS_Init+0x27c>)
 80013f8:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80013fa:	4a4a      	ldr	r2, [pc, #296]	; (8001524 <MX_FREERTOS_Init+0x280>)
 80013fc:	2100      	movs	r1, #0
 80013fe:	484a      	ldr	r0, [pc, #296]	; (8001528 <MX_FREERTOS_Init+0x284>)
 8001400:	f00f f8f4 	bl	80105ec <osThreadNew>
 8001404:	4602      	mov	r2, r0
 8001406:	4b49      	ldr	r3, [pc, #292]	; (800152c <MX_FREERTOS_Init+0x288>)
 8001408:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 800140a:	4a49      	ldr	r2, [pc, #292]	; (8001530 <MX_FREERTOS_Init+0x28c>)
 800140c:	2100      	movs	r1, #0
 800140e:	4849      	ldr	r0, [pc, #292]	; (8001534 <MX_FREERTOS_Init+0x290>)
 8001410:	f00f f8ec 	bl	80105ec <osThreadNew>
 8001414:	4602      	mov	r2, r0
 8001416:	4b48      	ldr	r3, [pc, #288]	; (8001538 <MX_FREERTOS_Init+0x294>)
 8001418:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 800141a:	4a48      	ldr	r2, [pc, #288]	; (800153c <MX_FREERTOS_Init+0x298>)
 800141c:	2100      	movs	r1, #0
 800141e:	4848      	ldr	r0, [pc, #288]	; (8001540 <MX_FREERTOS_Init+0x29c>)
 8001420:	f00f f8e4 	bl	80105ec <osThreadNew>
 8001424:	4602      	mov	r2, r0
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <MX_FREERTOS_Init+0x2a0>)
 8001428:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 800142a:	4a47      	ldr	r2, [pc, #284]	; (8001548 <MX_FREERTOS_Init+0x2a4>)
 800142c:	2100      	movs	r1, #0
 800142e:	4847      	ldr	r0, [pc, #284]	; (800154c <MX_FREERTOS_Init+0x2a8>)
 8001430:	f00f f8dc 	bl	80105ec <osThreadNew>
 8001434:	4602      	mov	r2, r0
 8001436:	4b46      	ldr	r3, [pc, #280]	; (8001550 <MX_FREERTOS_Init+0x2ac>)
 8001438:	601a      	str	r2, [r3, #0]

  /* creation of msgPassingUSB_T */
  msgPassingUSB_THandle = osThreadNew(msgPassingUSB, NULL, &msgPassingUSB_T_attributes);
 800143a:	4a46      	ldr	r2, [pc, #280]	; (8001554 <MX_FREERTOS_Init+0x2b0>)
 800143c:	2100      	movs	r1, #0
 800143e:	4846      	ldr	r0, [pc, #280]	; (8001558 <MX_FREERTOS_Init+0x2b4>)
 8001440:	f00f f8d4 	bl	80105ec <osThreadNew>
 8001444:	4602      	mov	r2, r0
 8001446:	4b45      	ldr	r3, [pc, #276]	; (800155c <MX_FREERTOS_Init+0x2b8>)
 8001448:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_FREERTOS_Init+0x1d4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f00f fdf5 	bl	8011040 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_FREERTOS_Init+0x1dc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f00f fdef 	bl	8011040 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 8001462:	f7ff fdc3 	bl	8000fec <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	0801bf60 	.word	0x0801bf60
 8001470:	20027c68 	.word	0x20027c68
 8001474:	0801bf70 	.word	0x0801bf70
 8001478:	200280b0 	.word	0x200280b0
 800147c:	0801bf80 	.word	0x0801bf80
 8001480:	200280a8 	.word	0x200280a8
 8001484:	0801bf90 	.word	0x0801bf90
 8001488:	20027c74 	.word	0x20027c74
 800148c:	0801bf40 	.word	0x0801bf40
 8001490:	20000c84 	.word	0x20000c84
 8001494:	08003d75 	.word	0x08003d75
 8001498:	20027c54 	.word	0x20027c54
 800149c:	0801bf50 	.word	0x0801bf50
 80014a0:	080015e5 	.word	0x080015e5
 80014a4:	200280c0 	.word	0x200280c0
 80014a8:	0801be38 	.word	0x0801be38
 80014ac:	200280bc 	.word	0x200280bc
 80014b0:	0801be50 	.word	0x0801be50
 80014b4:	20027c70 	.word	0x20027c70
 80014b8:	0801be68 	.word	0x0801be68
 80014bc:	200280a0 	.word	0x200280a0
 80014c0:	0801be80 	.word	0x0801be80
 80014c4:	20027c78 	.word	0x20027c78
 80014c8:	0801be98 	.word	0x0801be98
 80014cc:	20027c6c 	.word	0x20027c6c
 80014d0:	0801beb0 	.word	0x0801beb0
 80014d4:	20027c5c 	.word	0x20027c5c
 80014d8:	0801bec8 	.word	0x0801bec8
 80014dc:	20027c80 	.word	0x20027c80
 80014e0:	0801bee0 	.word	0x0801bee0
 80014e4:	20027b60 	.word	0x20027b60
 80014e8:	0801bef8 	.word	0x0801bef8
 80014ec:	20027b64 	.word	0x20027b64
 80014f0:	0801bf10 	.word	0x0801bf10
 80014f4:	20027c7c 	.word	0x20027c7c
 80014f8:	0801bf28 	.word	0x0801bf28
 80014fc:	20027c64 	.word	0x20027c64
 8001500:	0801bd18 	.word	0x0801bd18
 8001504:	08001561 	.word	0x08001561
 8001508:	20027c48 	.word	0x20027c48
 800150c:	0801bd3c 	.word	0x0801bd3c
 8001510:	080042b5 	.word	0x080042b5
 8001514:	20027c58 	.word	0x20027c58
 8001518:	0801bd60 	.word	0x0801bd60
 800151c:	080045a1 	.word	0x080045a1
 8001520:	200280a4 	.word	0x200280a4
 8001524:	0801bd84 	.word	0x0801bd84
 8001528:	08003b6d 	.word	0x08003b6d
 800152c:	200280c4 	.word	0x200280c4
 8001530:	0801bda8 	.word	0x0801bda8
 8001534:	08003ce5 	.word	0x08003ce5
 8001538:	200280b4 	.word	0x200280b4
 800153c:	0801bdcc 	.word	0x0801bdcc
 8001540:	08003eed 	.word	0x08003eed
 8001544:	200280ac 	.word	0x200280ac
 8001548:	0801bdf0 	.word	0x0801bdf0
 800154c:	080015f9 	.word	0x080015f9
 8001550:	20027c4c 	.word	0x20027c4c
 8001554:	0801be14 	.word	0x0801be14
 8001558:	08001571 	.word	0x08001571
 800155c:	20027c50 	.word	0x20027c50

08001560 <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001568:	2001      	movs	r0, #1
 800156a:	f00f fa31 	bl	80109d0 <osDelay>
 800156e:	e7fb      	b.n	8001568 <DefaultTask+0x8>

08001570 <msgPassingUSB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_msgPassingUSB */
__weak void msgPassingUSB(void *argument)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af04      	add	r7, sp, #16
 8001576:	6078      	str	r0, [r7, #4]
	struct USB_msgPass receivedPacket;
  /* Infinite loop */
  for(;;)
  {
    while(1){
    	osMessageQueueGet(msgPasssingUSB_QueueHandle, &receivedPacket, 0U, osWaitForever);
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <msgPassingUSB+0x64>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	f107 010c 	add.w	r1, r7, #12
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	2200      	movs	r2, #0
 8001586:	f00f ff13 	bl	80113b0 <osMessageQueueGet>

    	if(receivedPacket.len == 6){
 800158a:	7b3b      	ldrb	r3, [r7, #12]
 800158c:	2b06      	cmp	r3, #6
 800158e:	d10e      	bne.n	80015ae <msgPassingUSB+0x3e>
//    		  logReceivedMessage.blinkEnabled = Buf[2] - '0';
//    		  logReceivedMessage.tempEnabled = Buf[3] - '0';
//    		  logReceivedMessage.intertialEnabled = Buf[4] - '0';
//    		  logReceivedMessage.positionEnabled  = Buf[5] - '0';

    		  APP_THREAD_SendCoapMsg(receivedPacket.buf, 6, &multicastAddr, "togLog", NO_ACK, OT_COAP_CODE_PUT, 1U);
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	1c58      	adds	r0, r3, #1
 8001596:	2301      	movs	r3, #1
 8001598:	9302      	str	r3, [sp, #8]
 800159a:	2303      	movs	r3, #3
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	2300      	movs	r3, #0
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <msgPassingUSB+0x68>)
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <msgPassingUSB+0x6c>)
 80015a6:	2106      	movs	r1, #6
 80015a8:	f017 f9aa 	bl	8018900 <APP_THREAD_SendCoapMsg>
 80015ac:	e7e4      	b.n	8001578 <msgPassingUSB+0x8>
    	  }
    	  else if(receivedPacket.len == 1){
 80015ae:	7b3b      	ldrb	r3, [r7, #12]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d1e1      	bne.n	8001578 <msgPassingUSB+0x8>
//    		  lightsSimpleReceivedMessage = Buf[0] - '0';

    		  APP_THREAD_SendCoapMsg(receivedPacket.buf, 4, &multicastAddr, "lightS", NO_ACK, OT_COAP_CODE_PUT, 1U);
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	1c58      	adds	r0, r3, #1
 80015ba:	2301      	movs	r3, #1
 80015bc:	9302      	str	r3, [sp, #8]
 80015be:	2303      	movs	r3, #3
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	2300      	movs	r3, #0
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <msgPassingUSB+0x70>)
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <msgPassingUSB+0x6c>)
 80015ca:	2104      	movs	r1, #4
 80015cc:	f017 f998 	bl	8018900 <APP_THREAD_SendCoapMsg>
    	osMessageQueueGet(msgPasssingUSB_QueueHandle, &receivedPacket, 0U, osWaitForever);
 80015d0:	e7d2      	b.n	8001578 <msgPassingUSB+0x8>
 80015d2:	bf00      	nop
 80015d4:	20027c64 	.word	0x20027c64
 80015d8:	0801b9d4 	.word	0x0801b9d4
 80015dc:	20028a00 	.word	0x20028a00
 80015e0:	0801b9dc 	.word	0x0801b9dc

080015e4 <watchDogReset>:
  /* USER CODE END msgPassingUSB */
}

/* watchDogReset function */
void watchDogReset(void *argument)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchDogReset */
//	 HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END watchDogReset */
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	2100      	movs	r1, #0
 8001606:	2001      	movs	r0, #1
 8001608:	f00f f94e 	bl	80108a8 <osThreadFlagsWait>
 800160c:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f3      	beq.n	8001600 <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001618:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <BlinkTask+0x1b0>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
 8001620:	2200      	movs	r2, #0
 8001622:	4962      	ldr	r1, [pc, #392]	; (80017ac <BlinkTask+0x1b4>)
 8001624:	f00f fec4 	bl	80113b0 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 8001628:	4b60      	ldr	r3, [pc, #384]	; (80017ac <BlinkTask+0x1b4>)
 800162a:	2201      	movs	r2, #1
 800162c:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800162e:	4b5e      	ldr	r3, [pc, #376]	; (80017a8 <BlinkTask+0x1b0>)
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	2200      	movs	r2, #0
 8001636:	495d      	ldr	r1, [pc, #372]	; (80017ac <BlinkTask+0x1b4>)
 8001638:	f00f fe46 	bl	80112c8 <osMessageQueuePut>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 800163c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001640:	495b      	ldr	r1, [pc, #364]	; (80017b0 <BlinkTask+0x1b8>)
 8001642:	485c      	ldr	r0, [pc, #368]	; (80017b4 <BlinkTask+0x1bc>)
 8001644:	f005 fd82 	bl	800714c <HAL_ADC_Start_DMA>

			// start  PWM channel for blink LED
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001648:	2104      	movs	r1, #4
 800164a:	485b      	ldr	r0, [pc, #364]	; (80017b8 <BlinkTask+0x1c0>)
 800164c:	f00c fdc4 	bl	800e1d8 <HAL_TIM_PWM_Start>

			// start timer
			HAL_TIM_Base_Start_IT(&htim2);
 8001650:	4859      	ldr	r0, [pc, #356]	; (80017b8 <BlinkTask+0x1c0>)
 8001652:	f00c fd2d 	bl	800e0b0 <HAL_TIM_Base_Start_IT>
			//      is passed by reference via queue to masterThread for packetization

			while (1) {

				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 8001656:	f04f 32ff 	mov.w	r2, #4294967295
 800165a:	2100      	movs	r1, #0
 800165c:	2006      	movs	r0, #6
 800165e:	f00f f923 	bl	80108a8 <osThreadFlagsWait>
 8001662:	60f8      	str	r0, [r7, #12]


				if ((evt & 0x00000004U) == 0x00000004U) {
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b00      	cmp	r3, #0
 800166c:	d064      	beq.n	8001738 <BlinkTask+0x140>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 800166e:	4b53      	ldr	r3, [pc, #332]	; (80017bc <BlinkTask+0x1c4>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167c:	d108      	bne.n	8001690 <BlinkTask+0x98>
						previousTick_ms = HAL_GetTick();
 800167e:	f005 f9e5 	bl	8006a4c <HAL_GetTick>
 8001682:	ee07 0a90 	vmov	s15, r0
 8001686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168a:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <BlinkTask+0x1c4>)
 800168c:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 8001690:	f005 f9dc 	bl	8006a4c <HAL_GetTick>
 8001694:	ee07 0a90 	vmov	s15, r0
 8001698:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800169c:	4b47      	ldr	r3, [pc, #284]	; (80017bc <BlinkTask+0x1c4>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ae:	4b44      	ldr	r3, [pc, #272]	; (80017c0 <BlinkTask+0x1c8>)
 80016b0:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 80016b4:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <BlinkTask+0x1cc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	e039      	b.n	8001730 <BlinkTask+0x138>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80016bc:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <BlinkTask+0x1cc>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2264      	movs	r2, #100	; 0x64
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	4a3a      	ldr	r2, [pc, #232]	; (80017b0 <BlinkTask+0x1b8>)
 80016c8:	4413      	add	r3, r2
 80016ca:	4a3f      	ldr	r2, [pc, #252]	; (80017c8 <BlinkTask+0x1d0>)
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	2364      	movs	r3, #100	; 0x64
 80016d2:	461a      	mov	r2, r3
 80016d4:	f018 ffb0 	bl	801a638 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80016d8:	4b38      	ldr	r3, [pc, #224]	; (80017bc <BlinkTask+0x1c4>)
 80016da:	ed93 7a00 	vldr	s14, [r3]
 80016de:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <BlinkTask+0x1c8>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ec:	ee17 2a90 	vmov	r2, s15
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <BlinkTask+0x1d0>)
 80016f2:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 80016f4:	4b35      	ldr	r3, [pc, #212]	; (80017cc <BlinkTask+0x1d4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a33      	ldr	r2, [pc, #204]	; (80017c8 <BlinkTask+0x1d0>)
 80016fa:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <BlinkTask+0x1d0>)
 80016fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001708:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <BlinkTask+0x1c4>)
 800170a:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 800170e:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <BlinkTask+0x1d4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	4a2d      	ldr	r2, [pc, #180]	; (80017cc <BlinkTask+0x1d4>)
 8001716:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 8001718:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <BlinkTask+0x1d8>)
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	2300      	movs	r3, #0
 800171e:	2200      	movs	r2, #0
 8001720:	4929      	ldr	r1, [pc, #164]	; (80017c8 <BlinkTask+0x1d0>)
 8001722:	f00f fdd1 	bl	80112c8 <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <BlinkTask+0x1cc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <BlinkTask+0x1cc>)
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <BlinkTask+0x1cc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b09      	cmp	r3, #9
 8001736:	d9c1      	bls.n	80016bc <BlinkTask+0xc4>
				}



				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d089      	beq.n	8001656 <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 8001742:	481c      	ldr	r0, [pc, #112]	; (80017b4 <BlinkTask+0x1bc>)
 8001744:	f005 fd86 	bl	8007254 <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001748:	2104      	movs	r1, #4
 800174a:	481b      	ldr	r0, [pc, #108]	; (80017b8 <BlinkTask+0x1c0>)
 800174c:	f00c fd8e 	bl	800e26c <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8001750:	4819      	ldr	r0, [pc, #100]	; (80017b8 <BlinkTask+0x1c0>)
 8001752:	f00c fc81 	bl	800e058 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <BlinkTask+0x1c4>)
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <BlinkTask+0x1b0>)
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	2200      	movs	r2, #0
 8001768:	4910      	ldr	r1, [pc, #64]	; (80017ac <BlinkTask+0x1b4>)
 800176a:	f00f fe21 	bl	80113b0 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <BlinkTask+0x1b4>)
 8001770:	2200      	movs	r2, #0
 8001772:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <BlinkTask+0x1b4>)
 8001776:	795b      	ldrb	r3, [r3, #5]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d104      	bne.n	8001786 <BlinkTask+0x18e>
						osSemaphoreRelease(locNotifyHandle);
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <BlinkTask+0x1dc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f00f fcc3 	bl	801110c <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <BlinkTask+0x1b0>)
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	2200      	movs	r2, #0
 800178e:	4907      	ldr	r1, [pc, #28]	; (80017ac <BlinkTask+0x1b4>)
 8001790:	f00f fd9a 	bl	80112c8 <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <BlinkTask+0x1d8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f00f fe7b 	bl	8011494 <osMessageQueueReset>

					// clear any flags
					osThreadFlagsClear(0x0000000EU);
 800179e:	200e      	movs	r0, #14
 80017a0:	f00f f832 	bl	8010808 <osThreadFlagsClear>

					break;
 80017a4:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80017a6:	e72b      	b.n	8001600 <BlinkTask+0x8>
 80017a8:	20027c7c 	.word	0x20027c7c
 80017ac:	200280cc 	.word	0x200280cc
 80017b0:	20000414 	.word	0x20000414
 80017b4:	20027a94 	.word	0x20027a94
 80017b8:	20028860 	.word	0x20028860
 80017bc:	20000bec 	.word	0x20000bec
 80017c0:	20000bf0 	.word	0x20000bf0
 80017c4:	20000be8 	.word	0x20000be8
 80017c8:	200003a8 	.word	0x200003a8
 80017cc:	20000be4 	.word	0x20000be4
 80017d0:	200280bc 	.word	0x200280bc
 80017d4:	200280b0 	.word	0x200280b0

080017d8 <HAL_ADC_ConvCpltCallback>:

volatile uint8_t low_adc_sample = 0;
volatile uint8_t random_sample = 0;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	end_time = HAL_GetTick() - start_time;
 80017e0:	f005 f934 	bl	8006a4c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_ADC_ConvCpltCallback+0x5c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	4a12      	ldr	r2, [pc, #72]	; (8001838 <HAL_ADC_ConvCpltCallback+0x60>)
 80017ee:	6013      	str	r3, [r2, #0]
	pwm_tracker_diff = pwm_tracker - pwm_tracker_s;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_ADC_ConvCpltCallback+0x64>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_ADC_ConvCpltCallback+0x68>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <HAL_ADC_ConvCpltCallback+0x6c>)
 80017fc:	6013      	str	r3, [r2, #0]
	start_time = HAL_GetTick();
 80017fe:	f005 f925 	bl	8006a4c <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001806:	601a      	str	r2, [r3, #0]
	pwm_tracker_s = pwm_tracker;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_ADC_ConvCpltCallback+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0c      	ldr	r2, [pc, #48]	; (8001840 <HAL_ADC_ConvCpltCallback+0x68>)
 800180e:	6013      	str	r3, [r2, #0]
//	if(low_adc_sample){
//		HAL_ADC_Stop(&hadc1);
//		low_adc_sample = 0;
//		return;
//	}
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_ADC_ConvCpltCallback+0x70>)
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_ADC_ConvCpltCallback+0x74>)
 8001814:	601a      	str	r2, [r3, #0]
	random_sample = blink_buffer[80];
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_ADC_ConvCpltCallback+0x78>)
 8001818:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_ADC_ConvCpltCallback+0x7c>)
 800181e:	701a      	strb	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_ADC_ConvCpltCallback+0x80>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2104      	movs	r1, #4
 8001826:	4618      	mov	r0, r3
 8001828:	f00e ff8c 	bl	8010744 <osThreadFlagsSet>

}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000bf4 	.word	0x20000bf4
 8001838:	20000bf8 	.word	0x20000bf8
 800183c:	20000c04 	.word	0x20000c04
 8001840:	20000bfc 	.word	0x20000bfc
 8001844:	20000c00 	.word	0x20000c00
 8001848:	200280c8 	.word	0x200280c8
 800184c:	200007fc 	.word	0x200007fc
 8001850:	20000414 	.word	0x20000414
 8001854:	20000c08 	.word	0x20000c08
 8001858:	20027c4c 	.word	0x20027c4c

0800185c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001866:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001868:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2104      	movs	r1, #4
 8001870:	4618      	mov	r0, r3
 8001872:	f00e ff67 	bl	8010744 <osThreadFlagsSet>

}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200280c8 	.word	0x200280c8
 8001884:	20000414 	.word	0x20000414
 8001888:	20027c4c 	.word	0x20027c4c

0800188c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
//	if(htim->Instance == TIM2){
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//		HAL_ADC_Start(&hadc1);
//	}
	pwm_tracker++;
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800189c:	6013      	str	r3, [r2, #0]

//	low_adc_sample = 1;
//	HAL_ADC_Start(&hadc1);
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000c04 	.word	0x20000c04

080018b0 <LL_AHB2_GRP1_EnableClock>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d4:	68fb      	ldr	r3, [r7, #12]
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_COMP1_Init+0x50>)
 80018ea:	4a13      	ldr	r2, [pc, #76]	; (8001938 <MX_COMP1_Init+0x54>)
 80018ec:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_COMP1_Init+0x50>)
 80018f0:	4a12      	ldr	r2, [pc, #72]	; (800193c <MX_COMP1_Init+0x58>)
 80018f2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_COMP1_Init+0x50>)
 80018f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fa:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <MX_COMP1_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_COMP1_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MX_COMP1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_COMP1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <MX_COMP1_Init+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_COMP1_Init+0x50>)
 800191c:	2231      	movs	r2, #49	; 0x31
 800191e:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_COMP1_Init+0x50>)
 8001922:	f006 fafd 	bl	8007f20 <HAL_COMP_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 800192c:	f002 fe30 	bl	8004590 <Error_Handler>
  }

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200280d4 	.word	0x200280d4
 8001938:	40010200 	.word	0x40010200
 800193c:	00c00010 	.word	0x00c00010

08001940 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_COMP_MspInit+0x5c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d117      	bne.n	8001992 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2001      	movs	r0, #1
 8001964:	f7ff ffa4 	bl	80018b0 <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 8001968:	2302      	movs	r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196c:	2303      	movs	r3, #3
 800196e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197e:	f007 f91f 	bl	8008bc0 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2105      	movs	r1, #5
 8001986:	2016      	movs	r0, #22
 8001988:	f006 fd93 	bl	80084b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800198c:	2016      	movs	r0, #22
 800198e:	f006 fdaa 	bl	80084e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001992:	bf00      	nop
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40010200 	.word	0x40010200

080019a0 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d02a      	beq.n	8001a10 <process_pulse_lengths+0x70>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3302      	adds	r3, #2
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d025      	beq.n	8001a10 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	881a      	ldrh	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3302      	adds	r3, #2
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	bf8c      	ite	hi
 80019d2:	2301      	movhi	r3, #1
 80019d4:	2300      	movls	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	3301      	adds	r3, #1
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d10e      	bne.n	8001a04 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	005a      	lsls	r2, r3, #1
 80019ec:	7efb      	ldrb	r3, [r7, #27]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <process_pulse_lengths+0xd0>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	e002      	b.n	8001a0a <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 8001a04:	7efa      	ldrb	r2, [r7, #27]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db26      	blt.n	8001a64 <process_pulse_lengths+0xc4>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b0f      	cmp	r3, #15
 8001a1c:	dc22      	bgt.n	8001a64 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10a      	bne.n	8001a3c <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f003 0203 	and.w	r2, r3, #3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 8001a3a:	e013      	b.n	8001a64 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4413      	add	r3, r2
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	69f9      	ldr	r1, [r7, #28]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4291      	cmp	r1, r2
 8001a54:	d101      	bne.n	8001a5a <process_pulse_lengths+0xba>
 8001a56:	2201      	movs	r2, #1
 8001a58:	e001      	b.n	8001a5e <process_pulse_lengths+0xbe>
 8001a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5e:	441a      	add	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	609a      	str	r2, [r3, #8]
}
 8001a64:	bf00      	nop
 8001a66:	3724      	adds	r7, #36	; 0x24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	0801bfa0 	.word	0x0801bfa0

08001a74 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	dd06      	ble.n	8001a94 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	e001      	b.n	8001a98 <get_phase+0x24>
    } else {
        return -1;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <reset>:

void reset(CyclePhaseClassifier * self) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <reset+0x30>)
 8001abe:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	427a0000 	.word	0x427a0000

08001ad8 <LL_AHB1_GRP1_EnableClock>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001afc:	68fb      	ldr	r3, [r7, #12]
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b0e:	2004      	movs	r0, #4
 8001b10:	f7ff ffe2 	bl	8001ad8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b14:	2001      	movs	r0, #1
 8001b16:	f7ff ffdf 	bl	8001ad8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	200b      	movs	r0, #11
 8001b20:	f006 fcc7 	bl	80084b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b24:	200b      	movs	r0, #11
 8001b26:	f006 fcde 	bl	80084e6 <HAL_NVIC_EnableIRQ>

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	603a      	str	r2, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <IMU_begin+0x60>)
 8001b48:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <IMU_begin+0x64>)
 8001b4c:	79bb      	ldrb	r3, [r7, #6]
 8001b4e:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 8001b50:	4a11      	ldr	r2, [pc, #68]	; (8001b98 <IMU_begin+0x68>)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 8001b56:	f000 fa85 	bl	8002064 <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <IMU_begin+0x6c>)
 8001b5c:	22f9      	movs	r2, #249	; 0xf9
 8001b5e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <IMU_begin+0x6c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 8001b66:	2302      	movs	r3, #2
 8001b68:	2102      	movs	r1, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fc80 	bl	8002470 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 8001b70:	f000 fbd6 	bl	8002320 <IMU_receivePacket>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d005      	beq.n	8001b86 <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <IMU_begin+0x6c>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2bf8      	cmp	r3, #248	; 0xf8
 8001b80:	d101      	bne.n	8001b86 <IMU_begin+0x56>
		{
			return (true);
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000006 	.word	0x20000006
 8001b94:	20028156 	.word	0x20028156
 8001b98:	2002821c 	.word	0x2002821c
 8001b9c:	20028194 	.word	0x20028194

08001ba0 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <IMU_dataAvailable+0x64>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2bff      	cmp	r3, #255	; 0xff
 8001baa:	d00d      	beq.n	8001bc8 <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <IMU_dataAvailable+0x68>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <IMU_dataAvailable+0x64>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f007 f971 	bl	8008ea0 <HAL_GPIO_ReadPin>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <IMU_dataAvailable+0x28>
			return (false);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e01b      	b.n	8001c00 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001bc8:	f000 fbaa 	bl	8002320 <IMU_receivePacket>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d015      	beq.n	8001bfe <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <IMU_dataAvailable+0x6c>)
 8001bd4:	789b      	ldrb	r3, [r3, #2]
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d107      	bne.n	8001bec <IMU_dataAvailable+0x4c>
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <IMU_dataAvailable+0x70>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2bfb      	cmp	r3, #251	; 0xfb
 8001be2:	d103      	bne.n	8001bec <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001be4:	f000 f832 	bl	8001c4c <IMU_parseInputReport>
			return (true);
 8001be8:	2301      	movs	r3, #1
 8001bea:	e009      	b.n	8001c00 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <IMU_dataAvailable+0x6c>)
 8001bee:	789b      	ldrb	r3, [r3, #2]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d103      	bne.n	8001bfe <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001bf6:	f000 f80d 	bl	8001c14 <IMU_parseCommandReport>
			return (true);
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20028156 	.word	0x20028156
 8001c08:	2002821c 	.word	0x2002821c
 8001c0c:	20028104 	.word	0x20028104
 8001c10:	20028194 	.word	0x20028194

08001c14 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <IMU_parseCommandReport+0x30>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2bf1      	cmp	r3, #241	; 0xf1
 8001c20:	d109      	bne.n	8001c36 <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <IMU_parseCommandReport+0x30>)
 8001c24:	789b      	ldrb	r3, [r3, #2]
 8001c26:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	2b07      	cmp	r3, #7
 8001c2c:	d103      	bne.n	8001c36 <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <IMU_parseCommandReport+0x30>)
 8001c30:	795a      	ldrb	r2, [r3, #5]
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <IMU_parseCommandReport+0x34>)
 8001c34:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20028194 	.word	0x20028194
 8001c48:	20028247 	.word	0x20028247

08001c4c <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001c52:	4b96      	ldr	r3, [pc, #600]	; (8001eac <IMU_parseInputReport+0x260>)
 8001c54:	785b      	ldrb	r3, [r3, #1]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	4b94      	ldr	r3, [pc, #592]	; (8001eac <IMU_parseInputReport+0x260>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001c64:	8a3b      	ldrh	r3, [r7, #16]
 8001c66:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c6a:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001c6c:	8a3b      	ldrh	r3, [r7, #16]
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001c74:	4b8e      	ldr	r3, [pc, #568]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	061a      	lsls	r2, r3, #24
 8001c7a:	4b8d      	ldr	r3, [pc, #564]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001c7c:	78db      	ldrb	r3, [r3, #3]
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	431a      	orrs	r2, r3
 8001c82:	4b8b      	ldr	r3, [pc, #556]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001c84:	789b      	ldrb	r3, [r3, #2]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	4a89      	ldr	r2, [pc, #548]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001c8c:	7852      	ldrb	r2, [r2, #1]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	4a88      	ldr	r2, [pc, #544]	; (8001eb4 <IMU_parseInputReport+0x268>)
 8001c92:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001c94:	4b86      	ldr	r3, [pc, #536]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001c96:	79db      	ldrb	r3, [r3, #7]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001c9e:	4b84      	ldr	r3, [pc, #528]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001ca0:	7a9b      	ldrb	r3, [r3, #10]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	4b82      	ldr	r3, [pc, #520]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001ca8:	7a5b      	ldrb	r3, [r3, #9]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	4313      	orrs	r3, r2
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001cb4:	7b1b      	ldrb	r3, [r3, #12]
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	b21a      	sxth	r2, r3
 8001cba:	4b7d      	ldr	r3, [pc, #500]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001cbc:	7adb      	ldrb	r3, [r3, #11]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001cc6:	4b7a      	ldr	r3, [pc, #488]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001cc8:	7b9b      	ldrb	r3, [r3, #14]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b21a      	sxth	r2, r3
 8001cce:	4b78      	ldr	r3, [pc, #480]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001cd0:	7b5b      	ldrb	r3, [r3, #13]
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001cde:	2300      	movs	r3, #0
 8001ce0:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001ce2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ce6:	3b05      	subs	r3, #5
 8001ce8:	2b09      	cmp	r3, #9
 8001cea:	dd09      	ble.n	8001d00 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001cec:	4b70      	ldr	r3, [pc, #448]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001cee:	7c1b      	ldrb	r3, [r3, #16]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	4b6e      	ldr	r3, [pc, #440]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001cf6:	7bdb      	ldrb	r3, [r3, #15]
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001d00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d04:	3b05      	subs	r3, #5
 8001d06:	2b0b      	cmp	r3, #11
 8001d08:	dd09      	ble.n	8001d1e <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001d0a:	4b69      	ldr	r3, [pc, #420]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001d0c:	7c9b      	ldrb	r3, [r3, #18]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	4b67      	ldr	r3, [pc, #412]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001d14:	7c5b      	ldrb	r3, [r3, #17]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001d1e:	4b64      	ldr	r3, [pc, #400]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001d20:	795b      	ldrb	r3, [r3, #5]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d10d      	bne.n	8001d42 <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <IMU_parseInputReport+0x26c>)
 8001d2c:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001d2e:	4a63      	ldr	r2, [pc, #396]	; (8001ebc <IMU_parseInputReport+0x270>)
 8001d30:	89bb      	ldrh	r3, [r7, #12]
 8001d32:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001d34:	4a62      	ldr	r2, [pc, #392]	; (8001ec0 <IMU_parseInputReport+0x274>)
 8001d36:	897b      	ldrh	r3, [r7, #10]
 8001d38:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001d3a:	4a62      	ldr	r2, [pc, #392]	; (8001ec4 <IMU_parseInputReport+0x278>)
 8001d3c:	893b      	ldrh	r3, [r7, #8]
 8001d3e:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001d40:	e16a      	b.n	8002018 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001d42:	4b5b      	ldr	r3, [pc, #364]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001d44:	795b      	ldrb	r3, [r3, #5]
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d10d      	bne.n	8001d66 <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b5e      	ldr	r3, [pc, #376]	; (8001ec8 <IMU_parseInputReport+0x27c>)
 8001d50:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001d52:	4a5e      	ldr	r2, [pc, #376]	; (8001ecc <IMU_parseInputReport+0x280>)
 8001d54:	89bb      	ldrh	r3, [r7, #12]
 8001d56:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001d58:	4a5d      	ldr	r2, [pc, #372]	; (8001ed0 <IMU_parseInputReport+0x284>)
 8001d5a:	897b      	ldrh	r3, [r7, #10]
 8001d5c:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001d5e:	4a5d      	ldr	r2, [pc, #372]	; (8001ed4 <IMU_parseInputReport+0x288>)
 8001d60:	893b      	ldrh	r3, [r7, #8]
 8001d62:	8013      	strh	r3, [r2, #0]
}
 8001d64:	e158      	b.n	8002018 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001d66:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001d68:	795b      	ldrb	r3, [r3, #5]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d10d      	bne.n	8001d8a <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	4b59      	ldr	r3, [pc, #356]	; (8001ed8 <IMU_parseInputReport+0x28c>)
 8001d74:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001d76:	4a59      	ldr	r2, [pc, #356]	; (8001edc <IMU_parseInputReport+0x290>)
 8001d78:	89bb      	ldrh	r3, [r7, #12]
 8001d7a:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001d7c:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <IMU_parseInputReport+0x294>)
 8001d7e:	897b      	ldrh	r3, [r7, #10]
 8001d80:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001d82:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <IMU_parseInputReport+0x298>)
 8001d84:	893b      	ldrh	r3, [r7, #8]
 8001d86:	8013      	strh	r3, [r2, #0]
}
 8001d88:	e146      	b.n	8002018 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001d8a:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001d8c:	795b      	ldrb	r3, [r3, #5]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d10d      	bne.n	8001dae <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b54      	ldr	r3, [pc, #336]	; (8001ee8 <IMU_parseInputReport+0x29c>)
 8001d98:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001d9a:	4a54      	ldr	r2, [pc, #336]	; (8001eec <IMU_parseInputReport+0x2a0>)
 8001d9c:	89bb      	ldrh	r3, [r7, #12]
 8001d9e:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001da0:	4a53      	ldr	r2, [pc, #332]	; (8001ef0 <IMU_parseInputReport+0x2a4>)
 8001da2:	897b      	ldrh	r3, [r7, #10]
 8001da4:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001da6:	4a53      	ldr	r2, [pc, #332]	; (8001ef4 <IMU_parseInputReport+0x2a8>)
 8001da8:	893b      	ldrh	r3, [r7, #8]
 8001daa:	8013      	strh	r3, [r2, #0]
}
 8001dac:	e134      	b.n	8002018 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001db0:	795b      	ldrb	r3, [r3, #5]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d003      	beq.n	8001dbe <IMU_parseInputReport+0x172>
 8001db6:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001db8:	795b      	ldrb	r3, [r3, #5]
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d166      	bne.n	8001e8c <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001dbe:	f004 fe45 	bl	8006a4c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <IMU_parseInputReport+0x2ac>)
 8001dc6:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001dc8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001dcc:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <IMU_parseInputReport+0x2b0>)
 8001dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f000 f966 	bl	80020a8 <IMU_qToFloat>
 8001ddc:	eef0 7a40 	vmov.f32	s15, s0
 8001de0:	4b45      	ldr	r3, [pc, #276]	; (8001ef8 <IMU_parseInputReport+0x2ac>)
 8001de2:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001de6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001dea:	4b44      	ldr	r3, [pc, #272]	; (8001efc <IMU_parseInputReport+0x2b0>)
 8001dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4619      	mov	r1, r3
 8001df4:	4610      	mov	r0, r2
 8001df6:	f000 f957 	bl	80020a8 <IMU_qToFloat>
 8001dfa:	eef0 7a40 	vmov.f32	s15, s0
 8001dfe:	4b3e      	ldr	r3, [pc, #248]	; (8001ef8 <IMU_parseInputReport+0x2ac>)
 8001e00:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001e04:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e08:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <IMU_parseInputReport+0x2b0>)
 8001e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f000 f948 	bl	80020a8 <IMU_qToFloat>
 8001e18:	eef0 7a40 	vmov.f32	s15, s0
 8001e1c:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <IMU_parseInputReport+0x2ac>)
 8001e1e:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001e22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e26:	4b35      	ldr	r3, [pc, #212]	; (8001efc <IMU_parseInputReport+0x2b0>)
 8001e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4610      	mov	r0, r2
 8001e32:	f000 f939 	bl	80020a8 <IMU_qToFloat>
 8001e36:	eef0 7a40 	vmov.f32	s15, s0
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <IMU_parseInputReport+0x2ac>)
 8001e3c:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001e40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e44:	210c      	movs	r1, #12
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f92e 	bl	80020a8 <IMU_qToFloat>
 8001e4c:	eef0 7a40 	vmov.f32	s15, s0
 8001e50:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <IMU_parseInputReport+0x2ac>)
 8001e52:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <IMU_parseInputReport+0x2b4>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4926      	ldr	r1, [pc, #152]	; (8001ef8 <IMU_parseInputReport+0x2ac>)
 8001e60:	f00f fa32 	bl	80112c8 <osMessageQueuePut>
		quatAccuracy = status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <IMU_parseInputReport+0x2b8>)
 8001e6a:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001e6c:	4a26      	ldr	r2, [pc, #152]	; (8001f08 <IMU_parseInputReport+0x2bc>)
 8001e6e:	89bb      	ldrh	r3, [r7, #12]
 8001e70:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001e72:	4a26      	ldr	r2, [pc, #152]	; (8001f0c <IMU_parseInputReport+0x2c0>)
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001e78:	4a25      	ldr	r2, [pc, #148]	; (8001f10 <IMU_parseInputReport+0x2c4>)
 8001e7a:	893b      	ldrh	r3, [r7, #8]
 8001e7c:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001e7e:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <IMU_parseInputReport+0x2c8>)
 8001e80:	8afb      	ldrh	r3, [r7, #22]
 8001e82:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001e84:	4a24      	ldr	r2, [pc, #144]	; (8001f18 <IMU_parseInputReport+0x2cc>)
 8001e86:	8abb      	ldrh	r3, [r7, #20]
 8001e88:	8013      	strh	r3, [r2, #0]
}
 8001e8a:	e0c5      	b.n	8002018 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <IMU_parseInputReport+0x264>)
 8001e8e:	795b      	ldrb	r3, [r3, #5]
 8001e90:	2b11      	cmp	r3, #17
 8001e92:	d147      	bne.n	8001f24 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001e94:	f004 fdda 	bl	8006a4c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <IMU_parseInputReport+0x2d0>)
 8001e9c:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <IMU_parseInputReport+0x2d0>)
 8001ea0:	893b      	ldrh	r3, [r7, #8]
 8001ea2:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <IMU_parseInputReport+0x2d4>)
 8001ea6:	893b      	ldrh	r3, [r7, #8]
 8001ea8:	8013      	strh	r3, [r2, #0]
}
 8001eaa:	e0b5      	b.n	8002018 <IMU_parseInputReport+0x3cc>
 8001eac:	20028104 	.word	0x20028104
 8001eb0:	20028194 	.word	0x20028194
 8001eb4:	20028120 	.word	0x20028120
 8001eb8:	2002825c 	.word	0x2002825c
 8001ebc:	20028244 	.word	0x20028244
 8001ec0:	20028260 	.word	0x20028260
 8001ec4:	2002815c 	.word	0x2002815c
 8001ec8:	20028158 	.word	0x20028158
 8001ecc:	2002812a 	.word	0x2002812a
 8001ed0:	20028248 	.word	0x20028248
 8001ed4:	20028186 	.word	0x20028186
 8001ed8:	20028188 	.word	0x20028188
 8001edc:	2002818a 	.word	0x2002818a
 8001ee0:	20028152 	.word	0x20028152
 8001ee4:	20028150 	.word	0x20028150
 8001ee8:	20028108 	.word	0x20028108
 8001eec:	20028154 	.word	0x20028154
 8001ef0:	2002824a 	.word	0x2002824a
 8001ef4:	2002815a 	.word	0x2002815a
 8001ef8:	2002816c 	.word	0x2002816c
 8001efc:	20000004 	.word	0x20000004
 8001f00:	20027c80 	.word	0x20027c80
 8001f04:	20028126 	.word	0x20028126
 8001f08:	2002825e 	.word	0x2002825e
 8001f0c:	20028184 	.word	0x20028184
 8001f10:	20028100 	.word	0x20028100
 8001f14:	2002811c 	.word	0x2002811c
 8001f18:	2002815e 	.word	0x2002815e
 8001f1c:	2002810c 	.word	0x2002810c
 8001f20:	20028262 	.word	0x20028262
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001f24:	4b3e      	ldr	r3, [pc, #248]	; (8002020 <IMU_parseInputReport+0x3d4>)
 8001f26:	795b      	ldrb	r3, [r3, #5]
 8001f28:	2b13      	cmp	r3, #19
 8001f2a:	d10d      	bne.n	8001f48 <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001f2c:	f004 fd8e 	bl	8006a4c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <IMU_parseInputReport+0x3d8>)
 8001f34:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001f36:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <IMU_parseInputReport+0x3d4>)
 8001f38:	7a5a      	ldrb	r2, [r3, #9]
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <IMU_parseInputReport+0x3d8>)
 8001f3c:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001f3e:	4b38      	ldr	r3, [pc, #224]	; (8002020 <IMU_parseInputReport+0x3d4>)
 8001f40:	7a5a      	ldrb	r2, [r3, #9]
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <IMU_parseInputReport+0x3dc>)
 8001f44:	701a      	strb	r2, [r3, #0]
}
 8001f46:	e067      	b.n	8002018 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001f48:	4b35      	ldr	r3, [pc, #212]	; (8002020 <IMU_parseInputReport+0x3d4>)
 8001f4a:	795b      	ldrb	r3, [r3, #5]
 8001f4c:	2b1e      	cmp	r3, #30
 8001f4e:	d12b      	bne.n	8001fa8 <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001f50:	f004 fd7c 	bl	8006a4c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b35      	ldr	r3, [pc, #212]	; (800202c <IMU_parseInputReport+0x3e0>)
 8001f58:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	74fb      	strb	r3, [r7, #19]
 8001f5e:	e00c      	b.n	8001f7a <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001f60:	7cfb      	ldrb	r3, [r7, #19]
 8001f62:	f103 020b 	add.w	r2, r3, #11
 8001f66:	4b32      	ldr	r3, [pc, #200]	; (8002030 <IMU_parseInputReport+0x3e4>)
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	7cfb      	ldrb	r3, [r7, #19]
 8001f6c:	440b      	add	r3, r1
 8001f6e:	492c      	ldr	r1, [pc, #176]	; (8002020 <IMU_parseInputReport+0x3d4>)
 8001f70:	5c8a      	ldrb	r2, [r1, r2]
 8001f72:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	3301      	adds	r3, #1
 8001f78:	74fb      	strb	r3, [r7, #19]
 8001f7a:	7cfb      	ldrb	r3, [r7, #19]
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d9ef      	bls.n	8001f60 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <IMU_parseInputReport+0x3d4>)
 8001f82:	7a9a      	ldrb	r2, [r3, #10]
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <IMU_parseInputReport+0x3e8>)
 8001f86:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001f88:	4b29      	ldr	r3, [pc, #164]	; (8002030 <IMU_parseInputReport+0x3e4>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <IMU_parseInputReport+0x3e0>)
 8001f8e:	6810      	ldr	r0, [r2, #0]
 8001f90:	6851      	ldr	r1, [r2, #4]
 8001f92:	c303      	stmia	r3!, {r0, r1}
 8001f94:	7a12      	ldrb	r2, [r2, #8]
 8001f96:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001f98:	4b27      	ldr	r3, [pc, #156]	; (8002038 <IMU_parseInputReport+0x3ec>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	4922      	ldr	r1, [pc, #136]	; (800202c <IMU_parseInputReport+0x3e0>)
 8001fa2:	f00f f991 	bl	80112c8 <osMessageQueuePut>
}
 8001fa6:	e037      	b.n	8002018 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <IMU_parseInputReport+0x3d4>)
 8001faa:	795b      	ldrb	r3, [r3, #5]
 8001fac:	2b14      	cmp	r3, #20
 8001fae:	d109      	bne.n	8001fc4 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001fb0:	4a22      	ldr	r2, [pc, #136]	; (800203c <IMU_parseInputReport+0x3f0>)
 8001fb2:	89bb      	ldrh	r3, [r7, #12]
 8001fb4:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001fb6:	4a22      	ldr	r2, [pc, #136]	; (8002040 <IMU_parseInputReport+0x3f4>)
 8001fb8:	897b      	ldrh	r3, [r7, #10]
 8001fba:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001fbc:	4a21      	ldr	r2, [pc, #132]	; (8002044 <IMU_parseInputReport+0x3f8>)
 8001fbe:	893b      	ldrh	r3, [r7, #8]
 8001fc0:	8013      	strh	r3, [r2, #0]
}
 8001fc2:	e029      	b.n	8002018 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <IMU_parseInputReport+0x3d4>)
 8001fc6:	795b      	ldrb	r3, [r3, #5]
 8001fc8:	2b15      	cmp	r3, #21
 8001fca:	d109      	bne.n	8001fe0 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001fcc:	4a1e      	ldr	r2, [pc, #120]	; (8002048 <IMU_parseInputReport+0x3fc>)
 8001fce:	89bb      	ldrh	r3, [r7, #12]
 8001fd0:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001fd2:	4a1e      	ldr	r2, [pc, #120]	; (800204c <IMU_parseInputReport+0x400>)
 8001fd4:	897b      	ldrh	r3, [r7, #10]
 8001fd6:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <IMU_parseInputReport+0x404>)
 8001fda:	893b      	ldrh	r3, [r7, #8]
 8001fdc:	8013      	strh	r3, [r2, #0]
}
 8001fde:	e01b      	b.n	8002018 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <IMU_parseInputReport+0x3d4>)
 8001fe2:	795b      	ldrb	r3, [r3, #5]
 8001fe4:	2b16      	cmp	r3, #22
 8001fe6:	d109      	bne.n	8001ffc <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001fe8:	4a1a      	ldr	r2, [pc, #104]	; (8002054 <IMU_parseInputReport+0x408>)
 8001fea:	89bb      	ldrh	r3, [r7, #12]
 8001fec:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001fee:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <IMU_parseInputReport+0x40c>)
 8001ff0:	897b      	ldrh	r3, [r7, #10]
 8001ff2:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <IMU_parseInputReport+0x410>)
 8001ff6:	893b      	ldrh	r3, [r7, #8]
 8001ff8:	8013      	strh	r3, [r2, #0]
}
 8001ffa:	e00d      	b.n	8002018 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <IMU_parseInputReport+0x3d4>)
 8001ffe:	795b      	ldrb	r3, [r3, #5]
 8002000:	2bf1      	cmp	r3, #241	; 0xf1
 8002002:	d109      	bne.n	8002018 <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <IMU_parseInputReport+0x3d4>)
 8002006:	79db      	ldrb	r3, [r3, #7]
 8002008:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	2b07      	cmp	r3, #7
 800200e:	d103      	bne.n	8002018 <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <IMU_parseInputReport+0x3d4>)
 8002012:	7a9a      	ldrb	r2, [r3, #10]
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <IMU_parseInputReport+0x414>)
 8002016:	701a      	strb	r2, [r3, #0]
}
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20028194 	.word	0x20028194
 8002024:	20028114 	.word	0x20028114
 8002028:	2002818e 	.word	0x2002818e
 800202c:	2002824c 	.word	0x2002824c
 8002030:	20028168 	.word	0x20028168
 8002034:	20028246 	.word	0x20028246
 8002038:	20027c5c 	.word	0x20027c5c
 800203c:	2002818c 	.word	0x2002818c
 8002040:	20028166 	.word	0x20028166
 8002044:	20028216 	.word	0x20028216
 8002048:	2002810a 	.word	0x2002810a
 800204c:	20028190 	.word	0x20028190
 8002050:	20028160 	.word	0x20028160
 8002054:	20028164 	.word	0x20028164
 8002058:	20028162 	.word	0x20028162
 800205c:	20028128 	.word	0x20028128
 8002060:	20028247 	.word	0x20028247

08002064 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <IMU_softReset+0x3c>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 800206e:	2301      	movs	r3, #1
 8002070:	2101      	movs	r1, #1
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f9fc 	bl	8002470 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8002078:	20c8      	movs	r0, #200	; 0xc8
 800207a:	f004 fcff 	bl	8006a7c <HAL_Delay>
	while (IMU_receivePacket() == true)
 800207e:	bf00      	nop
 8002080:	f000 f94e 	bl	8002320 <IMU_receivePacket>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1fa      	bne.n	8002080 <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 800208a:	20c8      	movs	r0, #200	; 0xc8
 800208c:	f004 fcf6 	bl	8006a7c <HAL_Delay>
	while (IMU_receivePacket() == true)
 8002090:	bf00      	nop
 8002092:	f000 f945 	bl	8002320 <IMU_receivePacket>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1fa      	bne.n	8002092 <IMU_softReset+0x2e>
		;
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20028194 	.word	0x20028194
 80020a4:	00000000 	.word	0x00000000

080020a8 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	460a      	mov	r2, r1
 80020b2:	80fb      	strh	r3, [r7, #6]
 80020b4:	4613      	mov	r3, r2
 80020b6:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 80020b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c4:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 80020c8:	797b      	ldrb	r3, [r7, #5]
 80020ca:	425b      	negs	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe f9b3 	bl	8000438 <__aeabi_i2d>
 80020d2:	4603      	mov	r3, r0
 80020d4:	460c      	mov	r4, r1
 80020d6:	ec44 3b11 	vmov	d1, r3, r4
 80020da:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002120 <IMU_qToFloat+0x78>
 80020de:	f018 fabf 	bl	801a660 <pow>
 80020e2:	ec56 5b10 	vmov	r5, r6, d0
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7fe f9b8 	bl	800045c <__aeabi_f2d>
 80020ec:	4603      	mov	r3, r0
 80020ee:	460c      	mov	r4, r1
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	4628      	mov	r0, r5
 80020f6:	4631      	mov	r1, r6
 80020f8:	f7fe fa08 	bl	800050c <__aeabi_dmul>
 80020fc:	4603      	mov	r3, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	4618      	mov	r0, r3
 8002102:	4621      	mov	r1, r4
 8002104:	f7fe fcb2 	bl	8000a6c <__aeabi_d2f>
 8002108:	4603      	mov	r3, r0
 800210a:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	ee07 3a90 	vmov	s15, r3
}
 8002112:	eeb0 0a67 	vmov.f32	s0, s15
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211c:	f3af 8000 	nop.w
 8002120:	00000000 	.word	0x00000000
 8002124:	40000000 	.word	0x40000000

08002128 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	4619      	mov	r1, r3
 8002136:	2005      	movs	r0, #5
 8002138:	f000 f81a 	bl	8002170 <IMU_setFeatureCommand_2>
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 8002152:	4a06      	ldr	r2, [pc, #24]	; (800216c <IMU_enableActivityClassifier+0x28>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8002158:	89fb      	ldrh	r3, [r7, #14]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	4619      	mov	r1, r3
 800215e:	201e      	movs	r0, #30
 8002160:	f000 f818 	bl	8002194 <IMU_setFeatureCommand_3>
}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20028168 	.word	0x20028168

08002170 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	460a      	mov	r2, r1
 800217a:	71fb      	strb	r3, [r7, #7]
 800217c:	4613      	mov	r3, r2
 800217e:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8002180:	88b9      	ldrh	r1, [r7, #4]
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2200      	movs	r2, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f804 	bl	8002194 <IMU_setFeatureCommand_3>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	603a      	str	r2, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
 80021a0:	460b      	mov	r3, r1
 80021a2:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 80021a4:	88bb      	ldrh	r3, [r7, #4]
 80021a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80021b0:	4b24      	ldr	r3, [pc, #144]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 80021b2:	22fd      	movs	r2, #253	; 0xfd
 80021b4:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80021b6:	4a23      	ldr	r2, [pc, #140]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 80021bc:	4b21      	ldr	r3, [pc, #132]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 80021c8:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 80021d4:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	121b      	asrs	r3, r3, #8
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 80021de:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	141b      	asrs	r3, r3, #16
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 80021e8:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0e1b      	lsrs	r3, r3, #24
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 80021f2:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 8002202:	2200      	movs	r2, #0
 8002204:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 8002208:	2200      	movs	r2, #0
 800220a:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 8002212:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 800221c:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	b2da      	uxtb	r2, r3
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 8002226:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	0e1b      	lsrs	r3, r3, #24
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <IMU_setFeatureCommand_3+0xb0>)
 8002230:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 8002232:	2302      	movs	r3, #2
 8002234:	2111      	movs	r1, #17
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f91a 	bl	8002470 <IMU_sendPacket>
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20028194 	.word	0x20028194

08002248 <IMU_sendTareNow>:
	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
}

void IMU_sendTareNow(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 800224c:	4b17      	ldr	r3, [pc, #92]	; (80022ac <IMU_sendTareNow+0x64>)
 800224e:	22f2      	movs	r2, #242	; 0xf2
 8002250:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <IMU_sendTareNow+0x68>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	b2d1      	uxtb	r1, r2
 800225a:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <IMU_sendTareNow+0x68>)
 800225c:	7011      	strb	r1, [r2, #0]
 800225e:	4a13      	ldr	r2, [pc, #76]	; (80022ac <IMU_sendTareNow+0x64>)
 8002260:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0x03;					   // TareCommand
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <IMU_sendTareNow+0x64>)
 8002264:	2203      	movs	r2, #3
 8002266:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0; // Tare Now
 8002268:	4b10      	ldr	r3, [pc, #64]	; (80022ac <IMU_sendTareNow+0x64>)
 800226a:	2200      	movs	r2, #0
 800226c:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0x07; // All 3 axes
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <IMU_sendTareNow+0x64>)
 8002270:	2207      	movs	r2, #7
 8002272:	711a      	strb	r2, [r3, #4]
	shtpData[5] = 0; // Rotation Vector
 8002274:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <IMU_sendTareNow+0x64>)
 8002276:	2200      	movs	r2, #0
 8002278:	715a      	strb	r2, [r3, #5]


	// RESERVED
	shtpData[6] = 0;
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <IMU_sendTareNow+0x64>)
 800227c:	2200      	movs	r2, #0
 800227e:	719a      	strb	r2, [r3, #6]
	shtpData[7] = 0;
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <IMU_sendTareNow+0x64>)
 8002282:	2200      	movs	r2, #0
 8002284:	71da      	strb	r2, [r3, #7]
	shtpData[8] = 0;
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <IMU_sendTareNow+0x64>)
 8002288:	2200      	movs	r2, #0
 800228a:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <IMU_sendTareNow+0x64>)
 800228e:	2200      	movs	r2, #0
 8002290:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <IMU_sendTareNow+0x64>)
 8002294:	2200      	movs	r2, #0
 8002296:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <IMU_sendTareNow+0x64>)
 800229a:	2200      	movs	r2, #0
 800229c:	72da      	strb	r2, [r3, #11]

	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
 800229e:	2302      	movs	r3, #2
 80022a0:	210c      	movs	r1, #12
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f8e4 	bl	8002470 <IMU_sendPacket>
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20028194 	.word	0x20028194
 80022b0:	20000c12 	.word	0x20000c12

080022b4 <IMU_sendPersistTare>:

void IMU_sendPersistTare(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <IMU_sendPersistTare+0x64>)
 80022ba:	22f2      	movs	r2, #242	; 0xf2
 80022bc:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <IMU_sendPersistTare+0x68>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	b2d1      	uxtb	r1, r2
 80022c6:	4a15      	ldr	r2, [pc, #84]	; (800231c <IMU_sendPersistTare+0x68>)
 80022c8:	7011      	strb	r1, [r2, #0]
 80022ca:	4a13      	ldr	r2, [pc, #76]	; (8002318 <IMU_sendPersistTare+0x64>)
 80022cc:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0x03;					   // TareCommand
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <IMU_sendPersistTare+0x64>)
 80022d0:	2203      	movs	r2, #3
 80022d2:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0x01; // Persist Tare
 80022d4:	4b10      	ldr	r3, [pc, #64]	; (8002318 <IMU_sendPersistTare+0x64>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	70da      	strb	r2, [r3, #3]


	// RESERVED
	shtpData[4] = 0;
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <IMU_sendPersistTare+0x64>)
 80022dc:	2200      	movs	r2, #0
 80022de:	711a      	strb	r2, [r3, #4]
	shtpData[5] = 0;
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <IMU_sendPersistTare+0x64>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	715a      	strb	r2, [r3, #5]
	shtpData[6] = 0;
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <IMU_sendPersistTare+0x64>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	719a      	strb	r2, [r3, #6]
	shtpData[7] = 0;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <IMU_sendPersistTare+0x64>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	71da      	strb	r2, [r3, #7]
	shtpData[8] = 0;
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <IMU_sendPersistTare+0x64>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <IMU_sendPersistTare+0x64>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <IMU_sendPersistTare+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <IMU_sendPersistTare+0x64>)
 8002306:	2200      	movs	r2, #0
 8002308:	72da      	strb	r2, [r3, #11]

	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
 800230a:	2302      	movs	r3, #2
 800230c:	210c      	movs	r1, #12
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f8ae 	bl	8002470 <IMU_sendPacket>
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20028194 	.word	0x20028194
 800231c:	20000c12 	.word	0x20000c12

08002320 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <IMU_receivePacket+0x90>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <IMU_receivePacket+0x94>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	4619      	mov	r1, r3
 8002332:	4610      	mov	r0, r2
 8002334:	f006 fdb4 	bl	8008ea0 <HAL_GPIO_ReadPin>
 8002338:	4603      	mov	r3, r0
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <IMU_receivePacket+0x22>
		return (false);
 800233e:	2300      	movs	r3, #0
 8002340:	e031      	b.n	80023a6 <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <IMU_receivePacket+0x98>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f04f 31ff 	mov.w	r1, #4294967295
 800234a:	4618      	mov	r0, r3
 800234c:	f00e fe78 	bl	8011040 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <IMU_receivePacket+0x9c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b299      	uxth	r1, r3
 8002356:	2364      	movs	r3, #100	; 0x64
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2304      	movs	r3, #4
 800235c:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <IMU_receivePacket+0xa0>)
 800235e:	4819      	ldr	r0, [pc, #100]	; (80023c4 <IMU_receivePacket+0xa4>)
 8002360:	f006 ff6a 	bl	8009238 <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <IMU_receivePacket+0x98>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f00e fecf 	bl	801110c <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <IMU_receivePacket+0xa0>)
 8002370:	785b      	ldrb	r3, [r3, #1]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	b21a      	sxth	r2, r3
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <IMU_receivePacket+0xa0>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b21b      	sxth	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002386:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002390:	2300      	movs	r3, #0
 8002392:	e008      	b.n	80023a6 <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	3b04      	subs	r3, #4
 8002398:	b29b      	uxth	r3, r3
 800239a:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f812 	bl	80023c8 <IMU_getData>


	return (true); //We're done!
 80023a4:	2301      	movs	r3, #1
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2002821c 	.word	0x2002821c
 80023b4:	20028156 	.word	0x20028156
 80023b8:	20027c68 	.word	0x20027c68
 80023bc:	20000006 	.word	0x20000006
 80023c0:	20028104 	.word	0x20028104
 80023c4:	20028264 	.word	0x20028264

080023c8 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 80023d2:	2300      	movs	r3, #0
 80023d4:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 80023d6:	e036      	b.n	8002446 <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 80023dc:	89bb      	ldrh	r3, [r7, #12]
 80023de:	2b1c      	cmp	r3, #28
 80023e0:	d901      	bls.n	80023e6 <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 80023e2:	231c      	movs	r3, #28
 80023e4:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <IMU_getData+0x90>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f04f 31ff 	mov.w	r1, #4294967295
 80023ee:	4618      	mov	r0, r3
 80023f0:	f00e fe26 	bl	8011040 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <IMU_getData+0x94>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b299      	uxth	r1, r3
 80023fa:	89bb      	ldrh	r3, [r7, #12]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	3304      	adds	r3, #4
 8002400:	b2db      	uxtb	r3, r3
 8002402:	b29a      	uxth	r2, r3
 8002404:	2364      	movs	r3, #100	; 0x64
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	4613      	mov	r3, r2
 800240a:	4a15      	ldr	r2, [pc, #84]	; (8002460 <IMU_getData+0x98>)
 800240c:	4815      	ldr	r0, [pc, #84]	; (8002464 <IMU_getData+0x9c>)
 800240e:	f006 ff13 	bl	8009238 <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <IMU_getData+0x90>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f00e fe78 	bl	801110c <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 800241c:	89fa      	ldrh	r2, [r7, #14]
 800241e:	89bb      	ldrh	r3, [r7, #12]
 8002420:	4413      	add	r3, r2
 8002422:	2b7f      	cmp	r3, #127	; 0x7f
 8002424:	dc07      	bgt.n	8002436 <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 8002426:	89fb      	ldrh	r3, [r7, #14]
 8002428:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <IMU_getData+0xa0>)
 800242a:	4413      	add	r3, r2
 800242c:	89ba      	ldrh	r2, [r7, #12]
 800242e:	490f      	ldr	r1, [pc, #60]	; (800246c <IMU_getData+0xa4>)
 8002430:	4618      	mov	r0, r3
 8002432:	f018 f901 	bl	801a638 <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 8002436:	89fa      	ldrh	r2, [r7, #14]
 8002438:	89bb      	ldrh	r3, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 800243e:	88fa      	ldrh	r2, [r7, #6]
 8002440:	89bb      	ldrh	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1c5      	bne.n	80023d8 <IMU_getData+0x10>
	}
	return (true); //Done!
 800244c:	2301      	movs	r3, #1
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20027c68 	.word	0x20027c68
 800245c:	20000006 	.word	0x20000006
 8002460:	20000c14 	.word	0x20000c14
 8002464:	20028264 	.word	0x20028264
 8002468:	20028194 	.word	0x20028194
 800246c:	20000c18 	.word	0x20000c18

08002470 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af02      	add	r7, sp, #8
 8002476:	4603      	mov	r3, r0
 8002478:	460a      	mov	r2, r1
 800247a:	71fb      	strb	r3, [r7, #7]
 800247c:	4613      	mov	r3, r2
 800247e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002480:	79bb      	ldrb	r3, [r7, #6]
 8002482:	3304      	adds	r3, #4
 8002484:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 8002486:	4a1b      	ldr	r2, [pc, #108]	; (80024f4 <IMU_sendPacket+0x84>)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	121b      	asrs	r3, r3, #8
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <IMU_sendPacket+0x84>)
 8002494:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 8002496:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <IMU_sendPacket+0x84>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <IMU_sendPacket+0x88>)
 80024a0:	5cd2      	ldrb	r2, [r2, r3]
 80024a2:	1c51      	adds	r1, r2, #1
 80024a4:	b2c8      	uxtb	r0, r1
 80024a6:	4914      	ldr	r1, [pc, #80]	; (80024f8 <IMU_sendPacket+0x88>)
 80024a8:	54c8      	strb	r0, [r1, r3]
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <IMU_sendPacket+0x84>)
 80024ac:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4912      	ldr	r1, [pc, #72]	; (80024fc <IMU_sendPacket+0x8c>)
 80024b4:	4812      	ldr	r0, [pc, #72]	; (8002500 <IMU_sendPacket+0x90>)
 80024b6:	f018 f8bf 	bl	801a638 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <IMU_sendPacket+0x94>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f04f 31ff 	mov.w	r1, #4294967295
 80024c2:	4618      	mov	r0, r3
 80024c4:	f00e fdbc 	bl	8011040 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <IMU_sendPacket+0x98>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	b299      	uxth	r1, r3
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	2364      	movs	r3, #100	; 0x64
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	4613      	mov	r3, r2
 80024d8:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <IMU_sendPacket+0x84>)
 80024da:	480c      	ldr	r0, [pc, #48]	; (800250c <IMU_sendPacket+0x9c>)
 80024dc:	f006 fdb8 	bl	8009050 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <IMU_sendPacket+0x94>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f00e fe11 	bl	801110c <osSemaphoreRelease>

	return (true);
 80024ea:	2301      	movs	r3, #1
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20028220 	.word	0x20028220
 80024f8:	20000c0c 	.word	0x20000c0c
 80024fc:	20028194 	.word	0x20028194
 8002500:	20028224 	.word	0x20028224
 8002504:	20027c68 	.word	0x20027c68
 8002508:	20000006 	.word	0x20000006
 800250c:	20028264 	.word	0x20028264

08002510 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8002518:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <vPortSuppressTicksAndSleep+0x84>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <vPortSuppressTicksAndSleep+0x84>)
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002524:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002526:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800252a:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800252e:	f011 fb6f 	bl	8013c10 <eTaskConfirmSleepModeStatus>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002538:	4b16      	ldr	r3, [pc, #88]	; (8002594 <vPortSuppressTicksAndSleep+0x84>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a15      	ldr	r2, [pc, #84]	; (8002594 <vPortSuppressTicksAndSleep+0x84>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002544:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 8002546:	e021      	b.n	800258c <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d002      	beq.n	8002556 <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f869 	bl	8002628 <LpTimerStart>
    LpEnter( );
 8002556:	f000 f8cb 	bl	80026f0 <LpEnter>
    if (xExpectedIdleTime != (~0))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d005      	beq.n	800256e <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8002562:	f000 f8cd 	bl	8002700 <LpGetElapsedTime>
 8002566:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f011 f86b 	bl	8013644 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <vPortSuppressTicksAndSleep+0x88>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <vPortSuppressTicksAndSleep+0x84>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <vPortSuppressTicksAndSleep+0x84>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <vPortSuppressTicksAndSleep+0x8c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <vPortSuppressTicksAndSleep+0x90>)
 8002586:	3b01      	subs	r3, #1
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	b662      	cpsie	i
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	e000e010 	.word	0xe000e010
 8002598:	e000e018 	.word	0xe000e018
 800259c:	20000c34 	.word	0x20000c34
 80025a0:	e000e014 	.word	0xe000e014

080025a4 <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  LpTimerInit( );
 80025a8:	f000 f828 	bl	80025fc <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <vPortSetupTimerInterrupt+0x40>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <vPortSetupTimerInterrupt+0x44>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <vPortSetupTimerInterrupt+0x48>)
 80025ba:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <vPortSetupTimerInterrupt+0x4c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <vPortSetupTimerInterrupt+0x50>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <vPortSetupTimerInterrupt+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <vPortSetupTimerInterrupt+0x44>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	099b      	lsrs	r3, r3, #6
 80025d4:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <vPortSetupTimerInterrupt+0x54>)
 80025d6:	3b01      	subs	r3, #1
 80025d8:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <vPortSetupTimerInterrupt+0x4c>)
 80025dc:	2207      	movs	r2, #7
 80025de:	601a      	str	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000078 	.word	0x20000078
 80025e8:	10624dd3 	.word	0x10624dd3
 80025ec:	20000c34 	.word	0x20000c34
 80025f0:	e000e010 	.word	0xe000e010
 80025f4:	e000e018 	.word	0xe000e018
 80025f8:	e000e014 	.word	0xe000e014

080025fc <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <LpTimerInit+0x14>)
 8002602:	2200      	movs	r2, #0
 8002604:	4903      	ldr	r1, [pc, #12]	; (8002614 <LpTimerInit+0x18>)
 8002606:	2000      	movs	r0, #0
 8002608:	f001 f84e 	bl	80036a8 <HW_TS_Create>

  return;
 800260c:	bf00      	nop
}
 800260e:	bd80      	pop	{r7, pc}
 8002610:	08002619 	.word	0x08002619
 8002614:	20000c3c 	.word	0x20000c3c

08002618 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 800261c:	bf00      	nop
}
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8002636:	4293      	cmp	r3, r2
 8002638:	d80c      	bhi.n	8002654 <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <LpTimerStart+0xb8>)
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	099b      	lsrs	r3, r3, #6
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <LpTimerStart+0xbc>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	e034      	b.n	80026be <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a24      	ldr	r2, [pc, #144]	; (80026e8 <LpTimerStart+0xc0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d81b      	bhi.n	8002694 <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <LpTimerStart+0xbc>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1b      	ldr	r2, [pc, #108]	; (80026e8 <LpTimerStart+0xc0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d806      	bhi.n	800268c <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	e018      	b.n	80026be <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	e014      	b.n	80026be <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	099b      	lsrs	r3, r3, #6
 8002698:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <LpTimerStart+0xbc>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f241 02c6 	movw	r2, #4294	; 0x10c6
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d805      	bhi.n	80026b8 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <LpTimerStart+0xb8>)
 80026b0:	fb02 f303 	mul.w	r3, r2, r3
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	e002      	b.n	80026be <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
 80026bc:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <LpTimerStart+0xc4>)
 80026c0:	791b      	ldrb	r3, [r3, #4]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f001 f8ef 	bl	80038a8 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 80026ca:	f001 f973 	bl	80039b4 <HW_TS_RTC_ReadLeftTicksToCount>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <LpTimerStart+0xc4>)
 80026d4:	601a      	str	r2, [r3, #0]

  return;
 80026d6:	bf00      	nop
}
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	000f4240 	.word	0x000f4240
 80026e4:	0113094d 	.word	0x0113094d
 80026e8:	00418937 	.word	0x00418937
 80026ec:	20000c38 	.word	0x20000c38

080026f0 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 80026f4:	bf00      	nop
}
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <LpGetElapsedTime+0x60>)
 8002708:	681c      	ldr	r4, [r3, #0]
 800270a:	f001 f953 	bl	80039b4 <HW_TS_RTC_ReadLeftTicksToCount>
 800270e:	4603      	mov	r3, r0
 8002710:	1ae3      	subs	r3, r4, r3
 8002712:	f04f 0400 	mov.w	r4, #0
 8002716:	4a13      	ldr	r2, [pc, #76]	; (8002764 <LpGetElapsedTime+0x64>)
 8002718:	fb02 f104 	mul.w	r1, r2, r4
 800271c:	2200      	movs	r2, #0
 800271e:	fb02 f203 	mul.w	r2, r2, r3
 8002722:	440a      	add	r2, r1
 8002724:	490f      	ldr	r1, [pc, #60]	; (8002764 <LpGetElapsedTime+0x64>)
 8002726:	fba3 3401 	umull	r3, r4, r3, r1
 800272a:	4422      	add	r2, r4
 800272c:	4614      	mov	r4, r2
 800272e:	e9c7 3400 	strd	r3, r4, [r7]
 8002732:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 8002736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <LpGetElapsedTime+0x68>)
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	f7fe f9e4 	bl	8000b0c <__aeabi_uldivmod>
 8002744:	4603      	mov	r3, r0
 8002746:	460c      	mov	r4, r1
 8002748:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <LpGetElapsedTime+0x60>)
 800274e:	791b      	ldrb	r3, [r3, #4]
 8002750:	4618      	mov	r0, r3
 8002752:	f001 f81f 	bl	8003794 <HW_TS_Stop>

  return (uint32_t)return_value;
 8002756:	683b      	ldr	r3, [r7, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bd90      	pop	{r4, r7, pc}
 8002760:	20000c38 	.word	0x20000c38
 8002764:	00077240 	.word	0x00077240
 8002768:	000f4240 	.word	0x000f4240

0800276c <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 800276c:	b4b0      	push	{r4, r5, r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <_GeometryBuilder+0x54>)
 8002778:	461c      	mov	r4, r3
 800277a:	4615      	mov	r5, r2
 800277c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800277e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002784:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <_GeometryBuilder+0x58>)
 8002790:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002794:	4615      	mov	r5, r2
 8002796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800279a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800279e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <_GeometryBuilder+0x5c>)
 80027aa:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80027ae:	4613      	mov	r3, r2
 80027b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bcb0      	pop	{r4, r5, r7}
 80027be:	4770      	bx	lr
 80027c0:	20000008 	.word	0x20000008
 80027c4:	20000038 	.word	0x20000038
 80027c8:	20000c40 	.word	0x20000c40

080027cc <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b096      	sub	sp, #88	; 0x58
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2bc7      	cmp	r3, #199	; 0xc7
 80027dc:	f340 8093 	ble.w	8002906 <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3360      	adds	r3, #96	; 0x60
 80027e4:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 80027e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	015b      	lsls	r3, r3, #5
 80027ec:	3310      	adds	r3, #16
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	4413      	add	r3, r2
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80027f8:	2300      	movs	r3, #0
 80027fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80027fc:	e011      	b.n	8002822 <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002804:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002806:	3104      	adds	r1, #4
 8002808:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 8002810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002814:	4293      	cmp	r3, r2
 8002816:	bf38      	it	cc
 8002818:	4613      	movcc	r3, r2
 800281a:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 800281c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800281e:	3301      	adds	r3, #1
 8002820:	64bb      	str	r3, [r7, #72]	; 0x48
 8002822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002824:	2b03      	cmp	r3, #3
 8002826:	ddea      	ble.n	80027fe <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 8002828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282a:	2b0b      	cmp	r3, #11
 800282c:	d86b      	bhi.n	8002906 <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002838:	ed93 7a01 	vldr	s14, [r3, #4]
 800283c:	f107 0214 	add.w	r2, r7, #20
 8002840:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002844:	4619      	mov	r1, r3
 8002846:	eef0 0a47 	vmov.f32	s1, s14
 800284a:	eeb0 0a67 	vmov.f32	s0, s15
 800284e:	f000 f8e5 	bl	8002a1c <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285a:	edd3 7a02 	vldr	s15, [r3, #8]
 800285e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002860:	ed93 7a03 	vldr	s14, [r3, #12]
 8002864:	f107 0208 	add.w	r2, r7, #8
 8002868:	f107 0320 	add.w	r3, r7, #32
 800286c:	4619      	mov	r1, r3
 800286e:	eef0 0a47 	vmov.f32	s1, s14
 8002872:	eeb0 0a67 	vmov.f32	s0, s15
 8002876:	f000 f8d1 	bl	8002a1c <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3370      	adds	r3, #112	; 0x70
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	327c      	adds	r2, #124	; 0x7c
 8002882:	f107 0520 	add.w	r5, r7, #32
 8002886:	f107 0408 	add.w	r4, r7, #8
 800288a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800288e:	f107 0014 	add.w	r0, r7, #20
 8002892:	9201      	str	r2, [sp, #4]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	462b      	mov	r3, r5
 8002898:	4622      	mov	r2, r4
 800289a:	f000 f945 	bl	8002b28 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 800289e:	2300      	movs	r3, #0
 80028a0:	647b      	str	r3, [r7, #68]	; 0x44
 80028a2:	e019      	b.n	80028d8 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a8:	331c      	adds	r3, #28
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	ed93 7a00 	vldr	s14, [r3]
 80028b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3304      	adds	r3, #4
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c8:	331c      	adds	r3, #28
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 80028d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d4:	3301      	adds	r3, #1
 80028d6:	647b      	str	r3, [r7, #68]	; 0x44
 80028d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028da:	2b02      	cmp	r3, #2
 80028dc:	dde2      	ble.n	80028a4 <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 80028de:	f004 f8b5 	bl	8006a4c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <consume_angles+0x144>)
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80028f4:	2300      	movs	r3, #0
 80028f6:	2200      	movs	r2, #0
 80028f8:	f00e fce6 	bl	80112c8 <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <consume_angles+0x148>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f00e fc03 	bl	801110c <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 8002906:	bf00      	nop
 8002908:	3750      	adds	r7, #80	; 0x50
 800290a:	46bd      	mov	sp, r7
 800290c:	bdb0      	pop	{r4, r5, r7, pc}
 800290e:	bf00      	nop
 8002910:	20027b64 	.word	0x20027b64
 8002914:	200280a8 	.word	0x200280a8

08002918 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3304      	adds	r3, #4
 8002928:	ed93 7a00 	vldr	s14, [r3]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	3308      	adds	r3, #8
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3308      	adds	r3, #8
 800293c:	edd3 6a00 	vldr	s13, [r3]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	3304      	adds	r3, #4
 8002944:	edd3 7a00 	vldr	s15, [r3]
 8002948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800294c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3308      	adds	r3, #8
 800295a:	ed93 7a00 	vldr	s14, [r3]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	edd3 6a00 	vldr	s13, [r3]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3308      	adds	r3, #8
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002982:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	ed93 7a00 	vldr	s14, [r3]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3304      	adds	r3, #4
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3304      	adds	r3, #4
 800299c:	edd3 6a00 	vldr	s13, [r3]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3308      	adds	r3, #8
 80029ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b2:	edc3 7a00 	vstr	s15, [r3]
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <vec_length>:

float vec_length(float *vec) {
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 80029ca:	f107 030c 	add.w	r3, r7, #12
 80029ce:	461a      	mov	r2, r3
 80029d0:	2103      	movs	r1, #3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f017 fb40 	bl	801a058 <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	f107 0308 	add.w	r3, r7, #8
 80029e0:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80029e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80029e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ee:	db09      	blt.n	8002a04 <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80029f0:	ed97 0a05 	vldr	s0, [r7, #20]
 80029f4:	f017 ffa4 	bl	801a940 <sqrtf>
 80029f8:	eef0 7a40 	vmov.f32	s15, s0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	edc3 7a00 	vstr	s15, [r3]
 8002a02:	e003      	b.n	8002a0c <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

    return res;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	ee07 3a90 	vmov	s15, r3
}
 8002a12:	eeb0 0a67 	vmov.f32	s0, s15
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b09a      	sub	sp, #104	; 0x68
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6178      	str	r0, [r7, #20]
 8002a24:	ed87 0a04 	vstr	s0, [r7, #16]
 8002a28:	edc7 0a03 	vstr	s1, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 8002a30:	ed97 0a04 	vldr	s0, [r7, #16]
 8002a34:	f017 fc3c 	bl	801a2b0 <arm_cos_f32>
 8002a38:	eef0 7a40 	vmov.f32	s15, s0
 8002a3c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a46:	ed97 0a04 	vldr	s0, [r7, #16]
 8002a4a:	f017 fbeb 	bl	801a224 <arm_sin_f32>
 8002a4e:	eef0 7a40 	vmov.f32	s15, s0
 8002a52:	eef1 7a67 	vneg.f32	s15, s15
 8002a56:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a60:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a64:	f017 fc24 	bl	801a2b0 <arm_cos_f32>
 8002a68:	eef0 7a40 	vmov.f32	s15, s0
 8002a6c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002a70:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a74:	f017 fbd6 	bl	801a224 <arm_sin_f32>
 8002a78:	eef0 7a40 	vmov.f32	s15, s0
 8002a7c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8002a80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 8002a8c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002a90:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002a94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff3d 	bl	8002918 <vec_cross_product>
    float len = vec_length(ray);
 8002a9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff8d 	bl	80029c2 <vec_length>
 8002aa8:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 8002aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ab0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002ab4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ab8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002abc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	eeb0 0a66 	vmov.f32	s0, s13
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f017 fc96 	bl	801a3f8 <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 8002acc:	2303      	movs	r3, #3
 8002ace:	873b      	strh	r3, [r7, #56]	; 0x38
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 8002ada:	2303      	movs	r3, #3
 8002adc:	863b      	strh	r3, [r7, #48]	; 0x30
 8002ade:	2301      	movs	r3, #1
 8002ae0:	867b      	strh	r3, [r7, #50]	; 0x32
 8002ae2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ae6:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 8002ae8:	2303      	movs	r3, #3
 8002aea:	853b      	strh	r3, [r7, #40]	; 0x28
 8002aec:	2301      	movs	r3, #1
 8002aee:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 8002af4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002af8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002afc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b00:	4618      	mov	r0, r3
 8002b02:	f017 faef 	bl	801a0e4 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 8002b06:	f107 031c 	add.w	r3, r7, #28
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f107 011c 	add.w	r1, r7, #28
 8002b18:	2303      	movs	r3, #3
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	f017 fd08 	bl	801a530 <arm_add_f32>
}
 8002b20:	bf00      	nop
 8002b22:	3768      	adds	r7, #104	; 0x68
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b098      	sub	sp, #96	; 0x60
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 8002b36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 8002b42:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002b46:	2303      	movs	r3, #3
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f017 fbfa 	bl	801a344 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 8002b50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b54:	2203      	movs	r2, #3
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	68b8      	ldr	r0, [r7, #8]
 8002b5a:	f017 fc91 	bl	801a480 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 8002b5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b62:	2203      	movs	r2, #3
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	68b8      	ldr	r0, [r7, #8]
 8002b68:	f017 fc8a 	bl	801a480 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 8002b6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b70:	2203      	movs	r2, #3
 8002b72:	6839      	ldr	r1, [r7, #0]
 8002b74:	6838      	ldr	r0, [r7, #0]
 8002b76:	f017 fc83 	bl	801a480 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 8002b7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b7e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002b82:	2203      	movs	r2, #3
 8002b84:	68b8      	ldr	r0, [r7, #8]
 8002b86:	f017 fc7b 	bl	801a480 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 8002b8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b8e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002b92:	2203      	movs	r2, #3
 8002b94:	6838      	ldr	r0, [r7, #0]
 8002b96:	f017 fc73 	bl	801a480 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 8002b9a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002b9e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002baa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 8002bba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002bbe:	eef0 7ae7 	vabs.f32	s15, s15
 8002bc2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002ce0 <intersect_lines+0x1b8>
 8002bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	d501      	bpl.n	8002bd4 <intersect_lines+0xac>
        return 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e081      	b.n	8002cd8 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 8002bd4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002bd8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002be4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002be8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bec:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002bf0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bf8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 8002bfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 8002c08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8002c14:	68b8      	ldr	r0, [r7, #8]
 8002c16:	f017 fbef 	bl	801a3f8 <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 8002c1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c1e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002c22:	2303      	movs	r3, #3
 8002c24:	68f9      	ldr	r1, [r7, #12]
 8002c26:	f017 fc83 	bl	801a530 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 8002c2a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002c2e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c36:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002c3a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c42:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c46:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c4e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8002c52:	f107 031c 	add.w	r3, r7, #28
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 8002c5e:	f107 031c 	add.w	r3, r7, #28
 8002c62:	2203      	movs	r2, #3
 8002c64:	4619      	mov	r1, r3
 8002c66:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002c6a:	6838      	ldr	r0, [r7, #0]
 8002c6c:	f017 fbc4 	bl	801a3f8 <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002c70:	f107 021c 	add.w	r2, r7, #28
 8002c74:	f107 001c 	add.w	r0, r7, #28
 8002c78:	2303      	movs	r3, #3
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	f017 fc58 	bl	801a530 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002c80:	f107 0310 	add.w	r3, r7, #16
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002c8c:	f107 0210 	add.w	r2, r7, #16
 8002c90:	f107 011c 	add.w	r1, r7, #28
 8002c94:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002c98:	2303      	movs	r3, #3
 8002c9a:	f017 fc49 	bl	801a530 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002c9e:	f107 0310 	add.w	r3, r7, #16
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ca6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002caa:	4618      	mov	r0, r3
 8002cac:	f017 fba4 	bl	801a3f8 <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002cb0:	f107 0210 	add.w	r2, r7, #16
 8002cb4:	f107 011c 	add.w	r1, r7, #28
 8002cb8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	f017 fb41 	bl	801a344 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002cc2:	f107 0310 	add.w	r3, r7, #16
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fe7b 	bl	80029c2 <vec_length>
 8002ccc:	eef0 7a40 	vmov.f32	s15, s0
 8002cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd2:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002cd6:	2301      	movs	r3, #1
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3760      	adds	r7, #96	; 0x60
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	3727c5ac 	.word	0x3727c5ac

08002ce4 <LL_AHB2_GRP1_EnableClock>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d08:	68fb      	ldr	r3, [r7, #12]
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2c:	2004      	movs	r0, #4
 8002d2e:	f7ff ffd9 	bl	8002ce4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d32:	2080      	movs	r0, #128	; 0x80
 8002d34:	f7ff ffd6 	bl	8002ce4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d38:	2002      	movs	r0, #2
 8002d3a:	f7ff ffd3 	bl	8002ce4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	2001      	movs	r0, #1
 8002d40:	f7ff ffd0 	bl	8002ce4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d44:	2010      	movs	r0, #16
 8002d46:	f7ff ffcd 	bl	8002ce4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DONGLE_DEBUG_PIN_GPIO_Port, DONGLE_DEBUG_PIN_Pin, GPIO_PIN_RESET);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d50:	4835      	ldr	r0, [pc, #212]	; (8002e28 <MX_GPIO_Init+0x110>)
 8002d52:	f006 f8bd 	bl	8008ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d56:	2308      	movs	r3, #8
 8002d58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4831      	ldr	r0, [pc, #196]	; (8002e2c <MX_GPIO_Init+0x114>)
 8002d68:	f005 ff2a 	bl	8008bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DONGLE_DEBUG_PIN_Pin;
 8002d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d72:	2301      	movs	r3, #1
 8002d74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DONGLE_DEBUG_PIN_GPIO_Port, &GPIO_InitStruct);
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	4619      	mov	r1, r3
 8002d82:	4829      	ldr	r0, [pc, #164]	; (8002e28 <MX_GPIO_Init+0x110>)
 8002d84:	f005 ff1c 	bl	8008bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB0 PB1 PB4 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 8002d88:	f240 23f3 	movw	r3, #755	; 0x2f3
 8002d8c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4823      	ldr	r0, [pc, #140]	; (8002e28 <MX_GPIO_Init+0x110>)
 8002d9c:	f005 ff10 	bl	8008bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8002da0:	f248 13dc 	movw	r3, #33244	; 0x81dc
 8002da4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002da6:	2303      	movs	r3, #3
 8002da8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db6:	f005 ff03 	bl	8008bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <MX_GPIO_Init+0x118>)
 8002dc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dce:	f005 fef7 	bl	8008bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dd6:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <MX_GPIO_Init+0x11c>)
 8002dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	4619      	mov	r1, r3
 8002de2:	4811      	ldr	r0, [pc, #68]	; (8002e28 <MX_GPIO_Init+0x110>)
 8002de4:	f005 feec 	bl	8008bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002de8:	2310      	movs	r3, #16
 8002dea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dec:	2303      	movs	r3, #3
 8002dee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	4619      	mov	r1, r3
 8002df8:	480f      	ldr	r0, [pc, #60]	; (8002e38 <MX_GPIO_Init+0x120>)
 8002dfa:	f005 fee1 	bl	8008bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2105      	movs	r1, #5
 8002e02:	2008      	movs	r0, #8
 8002e04:	f005 fb55 	bl	80084b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002e08:	2008      	movs	r0, #8
 8002e0a:	f005 fb6c 	bl	80084e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2105      	movs	r1, #5
 8002e12:	2017      	movs	r0, #23
 8002e14:	f005 fb4d 	bl	80084b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e18:	2017      	movs	r0, #23
 8002e1a:	f005 fb64 	bl	80084e6 <HAL_NVIC_EnableIRQ>

}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	48000400 	.word	0x48000400
 8002e2c:	48001c00 	.word	0x48001c00
 8002e30:	10210000 	.word	0x10210000
 8002e34:	10110000 	.word	0x10110000
 8002e38:	48001000 	.word	0x48001000

08002e3c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <LL_EXTI_EnableIT_0_31+0x24>)
 8002e46:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002e4a:	4905      	ldr	r1, [pc, #20]	; (8002e60 <LL_EXTI_EnableIT_0_31+0x24>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	58000800 	.word	0x58000800

08002e64 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4904      	ldr	r1, [pc, #16]	; (8002e84 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	600b      	str	r3, [r1, #0]

}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	58000800 	.word	0x58000800

08002e88 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <ReadRtcSsrValue+0x3c>)
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <ReadRtcSsrValue+0x3c>)
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002e9e:	e005      	b.n	8002eac <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <ReadRtcSsrValue+0x3c>)
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d1f5      	bne.n	8002ea0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002eb4:	683b      	ldr	r3, [r7, #0]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40002800 	.word	0x40002800

08002ec8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	460a      	mov	r2, r1
 8002ed2:	71fb      	strb	r3, [r7, #7]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002ed8:	79ba      	ldrb	r2, [r7, #6]
 8002eda:	491d      	ldr	r1, [pc, #116]	; (8002f50 <LinkTimerAfter+0x88>)
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3315      	adds	r3, #21
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b06      	cmp	r3, #6
 8002ef0:	d009      	beq.n	8002f06 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	4916      	ldr	r1, [pc, #88]	; (8002f50 <LinkTimerAfter+0x88>)
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	440b      	add	r3, r1
 8002f00:	3314      	adds	r3, #20
 8002f02:	79fa      	ldrb	r2, [r7, #7]
 8002f04:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002f06:	79fa      	ldrb	r2, [r7, #7]
 8002f08:	4911      	ldr	r1, [pc, #68]	; (8002f50 <LinkTimerAfter+0x88>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	3315      	adds	r3, #21
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002f1a:	79fa      	ldrb	r2, [r7, #7]
 8002f1c:	490c      	ldr	r1, [pc, #48]	; (8002f50 <LinkTimerAfter+0x88>)
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	440b      	add	r3, r1
 8002f28:	3314      	adds	r3, #20
 8002f2a:	79ba      	ldrb	r2, [r7, #6]
 8002f2c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002f2e:	79ba      	ldrb	r2, [r7, #6]
 8002f30:	4907      	ldr	r1, [pc, #28]	; (8002f50 <LinkTimerAfter+0x88>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3315      	adds	r3, #21
 8002f3e:	79fa      	ldrb	r2, [r7, #7]
 8002f40:	701a      	strb	r2, [r3, #0]

  return;
 8002f42:	bf00      	nop
}
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	200002d4 	.word	0x200002d4

08002f54 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	460a      	mov	r2, r1
 8002f5e:	71fb      	strb	r3, [r7, #7]
 8002f60:	4613      	mov	r3, r2
 8002f62:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002f64:	4b29      	ldr	r3, [pc, #164]	; (800300c <LinkTimerBefore+0xb8>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	79ba      	ldrb	r2, [r7, #6]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d032      	beq.n	8002fd6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002f70:	79ba      	ldrb	r2, [r7, #6]
 8002f72:	4927      	ldr	r1, [pc, #156]	; (8003010 <LinkTimerBefore+0xbc>)
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3314      	adds	r3, #20
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	4922      	ldr	r1, [pc, #136]	; (8003010 <LinkTimerBefore+0xbc>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	3315      	adds	r3, #21
 8002f94:	79fa      	ldrb	r2, [r7, #7]
 8002f96:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002f98:	79fa      	ldrb	r2, [r7, #7]
 8002f9a:	491d      	ldr	r1, [pc, #116]	; (8003010 <LinkTimerBefore+0xbc>)
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3315      	adds	r3, #21
 8002fa8:	79ba      	ldrb	r2, [r7, #6]
 8002faa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002fac:	79fa      	ldrb	r2, [r7, #7]
 8002fae:	4918      	ldr	r1, [pc, #96]	; (8003010 <LinkTimerBefore+0xbc>)
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	440b      	add	r3, r1
 8002fba:	3314      	adds	r3, #20
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002fc0:	79ba      	ldrb	r2, [r7, #6]
 8002fc2:	4913      	ldr	r1, [pc, #76]	; (8003010 <LinkTimerBefore+0xbc>)
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4413      	add	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	440b      	add	r3, r1
 8002fce:	3314      	adds	r3, #20
 8002fd0:	79fa      	ldrb	r2, [r7, #7]
 8002fd2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002fd4:	e014      	b.n	8003000 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002fd6:	79fa      	ldrb	r2, [r7, #7]
 8002fd8:	490d      	ldr	r1, [pc, #52]	; (8003010 <LinkTimerBefore+0xbc>)
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3315      	adds	r3, #21
 8002fe6:	79ba      	ldrb	r2, [r7, #6]
 8002fe8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002fea:	79ba      	ldrb	r2, [r7, #6]
 8002fec:	4908      	ldr	r1, [pc, #32]	; (8003010 <LinkTimerBefore+0xbc>)
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3314      	adds	r3, #20
 8002ffa:	79fa      	ldrb	r2, [r7, #7]
 8002ffc:	701a      	strb	r2, [r3, #0]
  return;
 8002ffe:	bf00      	nop
}
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000364 	.word	0x20000364
 8003010:	200002d4 	.word	0x200002d4

08003014 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800301e:	4b4e      	ldr	r3, [pc, #312]	; (8003158 <linkTimer+0x144>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b06      	cmp	r3, #6
 8003026:	d118      	bne.n	800305a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8003028:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <linkTimer+0x144>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b4b      	ldr	r3, [pc, #300]	; (800315c <linkTimer+0x148>)
 8003030:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8003032:	4a49      	ldr	r2, [pc, #292]	; (8003158 <linkTimer+0x144>)
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8003038:	79fa      	ldrb	r2, [r7, #7]
 800303a:	4949      	ldr	r1, [pc, #292]	; (8003160 <linkTimer+0x14c>)
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	3315      	adds	r3, #21
 8003048:	2206      	movs	r2, #6
 800304a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800304c:	4b45      	ldr	r3, [pc, #276]	; (8003164 <linkTimer+0x150>)
 800304e:	f04f 32ff 	mov.w	r2, #4294967295
 8003052:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	81fb      	strh	r3, [r7, #14]
 8003058:	e078      	b.n	800314c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800305a:	f000 f909 	bl	8003270 <ReturnTimeElapsed>
 800305e:	4603      	mov	r3, r0
 8003060:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8003062:	79fa      	ldrb	r2, [r7, #7]
 8003064:	493e      	ldr	r1, [pc, #248]	; (8003160 <linkTimer+0x14c>)
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	3308      	adds	r3, #8
 8003072:	6819      	ldr	r1, [r3, #0]
 8003074:	89fb      	ldrh	r3, [r7, #14]
 8003076:	79fa      	ldrb	r2, [r7, #7]
 8003078:	4419      	add	r1, r3
 800307a:	4839      	ldr	r0, [pc, #228]	; (8003160 <linkTimer+0x14c>)
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4403      	add	r3, r0
 8003086:	3308      	adds	r3, #8
 8003088:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800308a:	79fa      	ldrb	r2, [r7, #7]
 800308c:	4934      	ldr	r1, [pc, #208]	; (8003160 <linkTimer+0x14c>)
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	440b      	add	r3, r1
 8003098:	3308      	adds	r3, #8
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800309e:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <linkTimer+0x144>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4619      	mov	r1, r3
 80030a6:	4a2e      	ldr	r2, [pc, #184]	; (8003160 <linkTimer+0x14c>)
 80030a8:	460b      	mov	r3, r1
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	440b      	add	r3, r1
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	3308      	adds	r3, #8
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d337      	bcc.n	800312c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80030bc:	4b26      	ldr	r3, [pc, #152]	; (8003158 <linkTimer+0x144>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80030c2:	7b7a      	ldrb	r2, [r7, #13]
 80030c4:	4926      	ldr	r1, [pc, #152]	; (8003160 <linkTimer+0x14c>)
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	3315      	adds	r3, #21
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80030d6:	e013      	b.n	8003100 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80030d8:	7b7a      	ldrb	r2, [r7, #13]
 80030da:	4921      	ldr	r1, [pc, #132]	; (8003160 <linkTimer+0x14c>)
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	440b      	add	r3, r1
 80030e6:	3315      	adds	r3, #21
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80030ec:	7b7a      	ldrb	r2, [r7, #13]
 80030ee:	491c      	ldr	r1, [pc, #112]	; (8003160 <linkTimer+0x14c>)
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	3315      	adds	r3, #21
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8003100:	7b3b      	ldrb	r3, [r7, #12]
 8003102:	2b06      	cmp	r3, #6
 8003104:	d00b      	beq.n	800311e <linkTimer+0x10a>
 8003106:	7b3a      	ldrb	r2, [r7, #12]
 8003108:	4915      	ldr	r1, [pc, #84]	; (8003160 <linkTimer+0x14c>)
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	440b      	add	r3, r1
 8003114:	3308      	adds	r3, #8
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	429a      	cmp	r2, r3
 800311c:	d2dc      	bcs.n	80030d8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800311e:	7b7a      	ldrb	r2, [r7, #13]
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fecf 	bl	8002ec8 <LinkTimerAfter>
 800312a:	e00f      	b.n	800314c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <linkTimer+0x144>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ff0c 	bl	8002f54 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <linkTimer+0x144>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <linkTimer+0x148>)
 8003144:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8003146:	4a04      	ldr	r2, [pc, #16]	; (8003158 <linkTimer+0x144>)
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800314c:	89fb      	ldrh	r3, [r7, #14]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000364 	.word	0x20000364
 800315c:	20000365 	.word	0x20000365
 8003160:	200002d4 	.word	0x200002d4
 8003164:	20000368 	.word	0x20000368

08003168 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	460a      	mov	r2, r1
 8003172:	71fb      	strb	r3, [r7, #7]
 8003174:	4613      	mov	r3, r2
 8003176:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8003178:	4b39      	ldr	r3, [pc, #228]	; (8003260 <UnlinkTimer+0xf8>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	79fa      	ldrb	r2, [r7, #7]
 8003180:	429a      	cmp	r2, r3
 8003182:	d111      	bne.n	80031a8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8003184:	4b36      	ldr	r3, [pc, #216]	; (8003260 <UnlinkTimer+0xf8>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4b36      	ldr	r3, [pc, #216]	; (8003264 <UnlinkTimer+0xfc>)
 800318c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800318e:	79fa      	ldrb	r2, [r7, #7]
 8003190:	4935      	ldr	r1, [pc, #212]	; (8003268 <UnlinkTimer+0x100>)
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	3315      	adds	r3, #21
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <UnlinkTimer+0xf8>)
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e03e      	b.n	8003226 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80031a8:	79fa      	ldrb	r2, [r7, #7]
 80031aa:	492f      	ldr	r1, [pc, #188]	; (8003268 <UnlinkTimer+0x100>)
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	3314      	adds	r3, #20
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80031bc:	79fa      	ldrb	r2, [r7, #7]
 80031be:	492a      	ldr	r1, [pc, #168]	; (8003268 <UnlinkTimer+0x100>)
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	440b      	add	r3, r1
 80031ca:	3315      	adds	r3, #21
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80031d0:	79f9      	ldrb	r1, [r7, #7]
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	4824      	ldr	r0, [pc, #144]	; (8003268 <UnlinkTimer+0x100>)
 80031d6:	460b      	mov	r3, r1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	440b      	add	r3, r1
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4403      	add	r3, r0
 80031e0:	3315      	adds	r3, #21
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b2d8      	uxtb	r0, r3
 80031e6:	4920      	ldr	r1, [pc, #128]	; (8003268 <UnlinkTimer+0x100>)
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	440b      	add	r3, r1
 80031f2:	3315      	adds	r3, #21
 80031f4:	4602      	mov	r2, r0
 80031f6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031f8:	7bbb      	ldrb	r3, [r7, #14]
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d013      	beq.n	8003226 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80031fe:	79f9      	ldrb	r1, [r7, #7]
 8003200:	7bba      	ldrb	r2, [r7, #14]
 8003202:	4819      	ldr	r0, [pc, #100]	; (8003268 <UnlinkTimer+0x100>)
 8003204:	460b      	mov	r3, r1
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	440b      	add	r3, r1
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4403      	add	r3, r0
 800320e:	3314      	adds	r3, #20
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b2d8      	uxtb	r0, r3
 8003214:	4914      	ldr	r1, [pc, #80]	; (8003268 <UnlinkTimer+0x100>)
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	440b      	add	r3, r1
 8003220:	3314      	adds	r3, #20
 8003222:	4602      	mov	r2, r0
 8003224:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8003226:	79fa      	ldrb	r2, [r7, #7]
 8003228:	490f      	ldr	r1, [pc, #60]	; (8003268 <UnlinkTimer+0x100>)
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	330c      	adds	r3, #12
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800323a:	4b09      	ldr	r3, [pc, #36]	; (8003260 <UnlinkTimer+0xf8>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b06      	cmp	r3, #6
 8003242:	d107      	bne.n	8003254 <UnlinkTimer+0xec>
 8003244:	79bb      	ldrb	r3, [r7, #6]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d104      	bne.n	8003254 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <UnlinkTimer+0x104>)
 800324c:	f04f 32ff 	mov.w	r2, #4294967295
 8003250:	601a      	str	r2, [r3, #0]
  }

  return;
 8003252:	bf00      	nop
 8003254:	bf00      	nop
}
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	20000364 	.word	0x20000364
 8003264:	20000365 	.word	0x20000365
 8003268:	200002d4 	.word	0x200002d4
 800326c:	20000368 	.word	0x20000368

08003270 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8003276:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <ReturnTimeElapsed+0x70>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d026      	beq.n	80032ce <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003280:	f7ff fe02 	bl	8002e88 <ReadRtcSsrValue>
 8003284:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8003286:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <ReturnTimeElapsed+0x70>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	d805      	bhi.n	800329c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003290:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <ReturnTimeElapsed+0x70>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	607b      	str	r3, [r7, #4]
 800329a:	e00a      	b.n	80032b2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <ReturnTimeElapsed+0x74>)
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <ReturnTimeElapsed+0x70>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <ReturnTimeElapsed+0x78>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <ReturnTimeElapsed+0x7c>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	40d3      	lsrs	r3, r2
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	e001      	b.n	80032d2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	b29b      	uxth	r3, r3
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000368 	.word	0x20000368
 80032e4:	20000c56 	.word	0x20000c56
 80032e8:	20000c55 	.word	0x20000c55
 80032ec:	20000c54 	.word	0x20000c54

080032f0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d108      	bne.n	8003312 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003300:	f7ff fdc2 	bl	8002e88 <ReadRtcSsrValue>
 8003304:	4602      	mov	r2, r0
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <RestartWakeupCounter+0xa8>)
 8003308:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800330a:	2003      	movs	r0, #3
 800330c:	f005 f90b 	bl	8008526 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003310:	e03e      	b.n	8003390 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d803      	bhi.n	8003320 <RestartWakeupCounter+0x30>
 8003318:	4b20      	ldr	r3, [pc, #128]	; (800339c <RestartWakeupCounter+0xac>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d002      	beq.n	8003326 <RestartWakeupCounter+0x36>
      Value -= 1;
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	3b01      	subs	r3, #1
 8003324:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8003326:	bf00      	nop
 8003328:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <RestartWakeupCounter+0xb0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f7      	beq.n	8003328 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <RestartWakeupCounter+0xb0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <RestartWakeupCounter+0xb0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800334c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <RestartWakeupCounter+0xb4>)
 8003350:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003354:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003356:	2003      	movs	r0, #3
 8003358:	f005 f8f3 	bl	8008542 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <RestartWakeupCounter+0xb8>)
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	0c1b      	lsrs	r3, r3, #16
 8003362:	041b      	lsls	r3, r3, #16
 8003364:	88fa      	ldrh	r2, [r7, #6]
 8003366:	4910      	ldr	r1, [pc, #64]	; (80033a8 <RestartWakeupCounter+0xb8>)
 8003368:	4313      	orrs	r3, r2
 800336a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800336c:	f7ff fd8c 	bl	8002e88 <ReadRtcSsrValue>
 8003370:	4602      	mov	r2, r0
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <RestartWakeupCounter+0xa8>)
 8003374:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <RestartWakeupCounter+0xb0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <RestartWakeupCounter+0xb0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003388:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800338a:	f3af 8000 	nop.w
  return ;
 800338e:	bf00      	nop
}
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000368 	.word	0x20000368
 800339c:	20000c54 	.word	0x20000c54
 80033a0:	20000c50 	.word	0x20000c50
 80033a4:	58000800 	.word	0x58000800
 80033a8:	40002800 	.word	0x40002800

080033ac <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <RescheduleTimerList+0x124>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033be:	d108      	bne.n	80033d2 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80033c0:	bf00      	nop
 80033c2:	4b44      	ldr	r3, [pc, #272]	; (80034d4 <RescheduleTimerList+0x128>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f7      	bne.n	80033c2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80033d2:	4b40      	ldr	r3, [pc, #256]	; (80034d4 <RescheduleTimerList+0x128>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <RescheduleTimerList+0x128>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e4:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80033e6:	4b3c      	ldr	r3, [pc, #240]	; (80034d8 <RescheduleTimerList+0x12c>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	493b      	ldr	r1, [pc, #236]	; (80034dc <RescheduleTimerList+0x130>)
 80033f0:	4613      	mov	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	440b      	add	r3, r1
 80033fa:	3308      	adds	r3, #8
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003400:	f7ff ff36 	bl	8003270 <ReturnTimeElapsed>
 8003404:	4603      	mov	r3, r0
 8003406:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	429a      	cmp	r2, r3
 800340e:	d205      	bcs.n	800341c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <RescheduleTimerList+0x134>)
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	e04d      	b.n	80034b8 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	4a31      	ldr	r2, [pc, #196]	; (80034e4 <RescheduleTimerList+0x138>)
 8003420:	8812      	ldrh	r2, [r2, #0]
 8003422:	b292      	uxth	r2, r2
 8003424:	4413      	add	r3, r2
 8003426:	461a      	mov	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4293      	cmp	r3, r2
 800342c:	d906      	bls.n	800343c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800342e:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <RescheduleTimerList+0x138>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8003434:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <RescheduleTimerList+0x134>)
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e03d      	b.n	80034b8 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	b29a      	uxth	r2, r3
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <RescheduleTimerList+0x134>)
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800344c:	e034      	b.n	80034b8 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	4922      	ldr	r1, [pc, #136]	; (80034dc <RescheduleTimerList+0x130>)
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	440b      	add	r3, r1
 800345c:	3308      	adds	r3, #8
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	429a      	cmp	r2, r3
 8003464:	d20a      	bcs.n	800347c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	491c      	ldr	r1, [pc, #112]	; (80034dc <RescheduleTimerList+0x130>)
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	440b      	add	r3, r1
 8003474:	3308      	adds	r3, #8
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	e013      	b.n	80034a4 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	4917      	ldr	r1, [pc, #92]	; (80034dc <RescheduleTimerList+0x130>)
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	440b      	add	r3, r1
 800348a:	3308      	adds	r3, #8
 800348c:	6819      	ldr	r1, [r3, #0]
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	1ac9      	subs	r1, r1, r3
 8003494:	4811      	ldr	r0, [pc, #68]	; (80034dc <RescheduleTimerList+0x130>)
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4403      	add	r3, r0
 80034a0:	3308      	adds	r3, #8
 80034a2:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	490d      	ldr	r1, [pc, #52]	; (80034dc <RescheduleTimerList+0x130>)
 80034a8:	4613      	mov	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	3315      	adds	r3, #21
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d1c7      	bne.n	800344e <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80034be:	89bb      	ldrh	r3, [r7, #12]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff15 	bl	80032f0 <RestartWakeupCounter>

  return ;
 80034c6:	bf00      	nop
}
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40002800 	.word	0x40002800
 80034d4:	20000c50 	.word	0x20000c50
 80034d8:	20000364 	.word	0x20000364
 80034dc:	200002d4 	.word	0x200002d4
 80034e0:	2000036c 	.word	0x2000036c
 80034e4:	20000c58 	.word	0x20000c58

080034e8 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	6039      	str	r1, [r7, #0]
 80034f2:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80034f4:	4a61      	ldr	r2, [pc, #388]	; (800367c <HW_TS_Init+0x194>)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80034fa:	4b60      	ldr	r3, [pc, #384]	; (800367c <HW_TS_Init+0x194>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	22ca      	movs	r2, #202	; 0xca
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
 8003504:	4b5d      	ldr	r3, [pc, #372]	; (800367c <HW_TS_Init+0x194>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2253      	movs	r2, #83	; 0x53
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800350e:	4b5c      	ldr	r3, [pc, #368]	; (8003680 <HW_TS_Init+0x198>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	4a5b      	ldr	r2, [pc, #364]	; (8003680 <HW_TS_Init+0x198>)
 8003514:	f043 0320 	orr.w	r3, r3, #32
 8003518:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800351a:	4b59      	ldr	r3, [pc, #356]	; (8003680 <HW_TS_Init+0x198>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f1c3 0304 	rsb	r3, r3, #4
 800352a:	b2da      	uxtb	r2, r3
 800352c:	4b55      	ldr	r3, [pc, #340]	; (8003684 <HW_TS_Init+0x19c>)
 800352e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003530:	4b53      	ldr	r3, [pc, #332]	; (8003680 <HW_TS_Init+0x198>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003538:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800353c:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	fa92 f2a2 	rbit	r2, r2
 8003544:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	40d3      	lsrs	r3, r2
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3301      	adds	r3, #1
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <HW_TS_Init+0x1a0>)
 8003558:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800355a:	4b49      	ldr	r3, [pc, #292]	; (8003680 <HW_TS_Init+0x198>)
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003564:	b29b      	uxth	r3, r3
 8003566:	3301      	adds	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	4b48      	ldr	r3, [pc, #288]	; (800368c <HW_TS_Init+0x1a4>)
 800356c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HW_TS_Init+0x1a4>)
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	3b01      	subs	r3, #1
 8003574:	4a44      	ldr	r2, [pc, #272]	; (8003688 <HW_TS_Init+0x1a0>)
 8003576:	7812      	ldrb	r2, [r2, #0]
 8003578:	fb02 f303 	mul.w	r3, r2, r3
 800357c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003580:	4a40      	ldr	r2, [pc, #256]	; (8003684 <HW_TS_Init+0x19c>)
 8003582:	7812      	ldrb	r2, [r2, #0]
 8003584:	40d3      	lsrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800358e:	4293      	cmp	r3, r2
 8003590:	d904      	bls.n	800359c <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003592:	4b3f      	ldr	r3, [pc, #252]	; (8003690 <HW_TS_Init+0x1a8>)
 8003594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	e003      	b.n	80035a4 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HW_TS_Init+0x1a8>)
 80035a2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80035a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035a8:	f7ff fc5c 	bl	8002e64 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80035ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035b0:	f7ff fc44 	bl	8002e3c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d143      	bne.n	8003642 <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80035ba:	4b36      	ldr	r3, [pc, #216]	; (8003694 <HW_TS_Init+0x1ac>)
 80035bc:	2201      	movs	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80035c0:	4b35      	ldr	r3, [pc, #212]	; (8003698 <HW_TS_Init+0x1b0>)
 80035c2:	f04f 32ff 	mov.w	r2, #4294967295
 80035c6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	75fb      	strb	r3, [r7, #23]
 80035cc:	e00c      	b.n	80035e8 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80035ce:	7dfa      	ldrb	r2, [r7, #23]
 80035d0:	4932      	ldr	r1, [pc, #200]	; (800369c <HW_TS_Init+0x1b4>)
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	440b      	add	r3, r1
 80035dc:	330c      	adds	r3, #12
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	3301      	adds	r3, #1
 80035e6:	75fb      	strb	r3, [r7, #23]
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d9ef      	bls.n	80035ce <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80035ee:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <HW_TS_Init+0x1b8>)
 80035f0:	2206      	movs	r2, #6
 80035f2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80035f4:	4b21      	ldr	r3, [pc, #132]	; (800367c <HW_TS_Init+0x194>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <HW_TS_Init+0x194>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003606:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HW_TS_Init+0x194>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b1a      	ldr	r3, [pc, #104]	; (800367c <HW_TS_Init+0x194>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800361c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800361e:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <HW_TS_Init+0x1bc>)
 8003620:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003624:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8003626:	2003      	movs	r0, #3
 8003628:	f004 ff8b 	bl	8008542 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <HW_TS_Init+0x194>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <HW_TS_Init+0x194>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	e00a      	b.n	8003658 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8003642:	4b0e      	ldr	r3, [pc, #56]	; (800367c <HW_TS_Init+0x194>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003652:	2003      	movs	r0, #3
 8003654:	f004 ff67 	bl	8008526 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <HW_TS_Init+0x194>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	22ff      	movs	r2, #255	; 0xff
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003662:	2200      	movs	r2, #0
 8003664:	2106      	movs	r1, #6
 8003666:	2003      	movs	r0, #3
 8003668:	f004 ff23 	bl	80084b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800366c:	2003      	movs	r0, #3
 800366e:	f004 ff3a 	bl	80084e6 <HAL_NVIC_EnableIRQ>

  return;
 8003672:	bf00      	nop
}
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000c50 	.word	0x20000c50
 8003680:	40002800 	.word	0x40002800
 8003684:	20000c54 	.word	0x20000c54
 8003688:	20000c55 	.word	0x20000c55
 800368c:	20000c56 	.word	0x20000c56
 8003690:	20000c58 	.word	0x20000c58
 8003694:	2000036c 	.word	0x2000036c
 8003698:	20000368 	.word	0x20000368
 800369c:	200002d4 	.word	0x200002d4
 80036a0:	20000364 	.word	0x20000364
 80036a4:	58000800 	.word	0x58000800

080036a8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b08b      	sub	sp, #44	; 0x2c
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	4613      	mov	r3, r2
 80036b6:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036be:	f3ef 8310 	mrs	r3, PRIMASK
 80036c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80036c4:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80036c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80036c8:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80036ca:	e004      	b.n	80036d6 <HW_TS_Create+0x2e>
  {
    loop++;
 80036cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036d0:	3301      	adds	r3, #1
 80036d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80036d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036da:	2b05      	cmp	r3, #5
 80036dc:	d80c      	bhi.n	80036f8 <HW_TS_Create+0x50>
 80036de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80036e2:	492b      	ldr	r1, [pc, #172]	; (8003790 <HW_TS_Create+0xe8>)
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	440b      	add	r3, r1
 80036ee:	330c      	adds	r3, #12
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e9      	bne.n	80036cc <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80036f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036fc:	2b06      	cmp	r3, #6
 80036fe:	d037      	beq.n	8003770 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003700:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003704:	4922      	ldr	r1, [pc, #136]	; (8003790 <HW_TS_Create+0xe8>)
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	330c      	adds	r3, #12
 8003712:	2201      	movs	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003720:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003724:	491a      	ldr	r1, [pc, #104]	; (8003790 <HW_TS_Create+0xe8>)
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	440b      	add	r3, r1
 8003730:	3310      	adds	r3, #16
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8003736:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800373a:	4915      	ldr	r1, [pc, #84]	; (8003790 <HW_TS_Create+0xe8>)
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	440b      	add	r3, r1
 8003746:	330d      	adds	r3, #13
 8003748:	79fa      	ldrb	r2, [r7, #7]
 800374a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800374c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003750:	490f      	ldr	r1, [pc, #60]	; (8003790 <HW_TS_Create+0xe8>)
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	440b      	add	r3, r1
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003766:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003768:	2300      	movs	r3, #0
 800376a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800376e:	e007      	b.n	8003780 <HW_TS_Create+0xd8>
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003784:	4618      	mov	r0, r3
 8003786:	372c      	adds	r7, #44	; 0x2c
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	200002d4 	.word	0x200002d4

08003794 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379e:	f3ef 8310 	mrs	r3, PRIMASK
 80037a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80037a4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80037a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80037a8:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80037aa:	2003      	movs	r0, #3
 80037ac:	f004 fea9 	bl	8008502 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80037b0:	4b37      	ldr	r3, [pc, #220]	; (8003890 <HW_TS_Stop+0xfc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	22ca      	movs	r2, #202	; 0xca
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24
 80037ba:	4b35      	ldr	r3, [pc, #212]	; (8003890 <HW_TS_Stop+0xfc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2253      	movs	r2, #83	; 0x53
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80037c4:	79fa      	ldrb	r2, [r7, #7]
 80037c6:	4933      	ldr	r1, [pc, #204]	; (8003894 <HW_TS_Stop+0x100>)
 80037c8:	4613      	mov	r3, r2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	440b      	add	r3, r1
 80037d2:	330c      	adds	r3, #12
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d148      	bne.n	800386e <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fcc1 	bl	8003168 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80037e6:	4b2c      	ldr	r3, [pc, #176]	; (8003898 <HW_TS_Stop+0x104>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	2b06      	cmp	r3, #6
 80037f0:	d135      	bne.n	800385e <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80037f2:	4b2a      	ldr	r3, [pc, #168]	; (800389c <HW_TS_Stop+0x108>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fe:	d108      	bne.n	8003812 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003800:	bf00      	nop
 8003802:	4b23      	ldr	r3, [pc, #140]	; (8003890 <HW_TS_Stop+0xfc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f7      	bne.n	8003802 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8003812:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <HW_TS_Stop+0xfc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HW_TS_Stop+0xfc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003824:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8003826:	bf00      	nop
 8003828:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HW_TS_Stop+0xfc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f7      	beq.n	8003828 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003838:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HW_TS_Stop+0xfc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4b13      	ldr	r3, [pc, #76]	; (8003890 <HW_TS_Stop+0xfc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800384c:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800384e:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <HW_TS_Stop+0x10c>)
 8003850:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003854:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003856:	2003      	movs	r0, #3
 8003858:	f004 fe73 	bl	8008542 <HAL_NVIC_ClearPendingIRQ>
 800385c:	e007      	b.n	800386e <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <HW_TS_Stop+0x110>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	7cfa      	ldrb	r2, [r7, #19]
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 800386a:	f7ff fd9f 	bl	80033ac <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <HW_TS_Stop+0xfc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003878:	2003      	movs	r0, #3
 800387a:	f004 fe34 	bl	80084e6 <HAL_NVIC_EnableIRQ>
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003888:	bf00      	nop
}
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000c50 	.word	0x20000c50
 8003894:	200002d4 	.word	0x200002d4
 8003898:	20000364 	.word	0x20000364
 800389c:	40002800 	.word	0x40002800
 80038a0:	58000800 	.word	0x58000800
 80038a4:	20000365 	.word	0x20000365

080038a8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	6039      	str	r1, [r7, #0]
 80038b2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80038b4:	79fa      	ldrb	r2, [r7, #7]
 80038b6:	493b      	ldr	r1, [pc, #236]	; (80039a4 <HW_TS_Start+0xfc>)
 80038b8:	4613      	mov	r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4413      	add	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	440b      	add	r3, r1
 80038c2:	330c      	adds	r3, #12
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d103      	bne.n	80038d4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff ff60 	bl	8003794 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d4:	f3ef 8310 	mrs	r3, PRIMASK
 80038d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80038da:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80038dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80038de:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80038e0:	2003      	movs	r0, #3
 80038e2:	f004 fe0e 	bl	8008502 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80038e6:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <HW_TS_Start+0x100>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	22ca      	movs	r2, #202	; 0xca
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
 80038f0:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HW_TS_Start+0x100>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2253      	movs	r2, #83	; 0x53
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80038fa:	79fa      	ldrb	r2, [r7, #7]
 80038fc:	4929      	ldr	r1, [pc, #164]	; (80039a4 <HW_TS_Start+0xfc>)
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	440b      	add	r3, r1
 8003908:	330c      	adds	r3, #12
 800390a:	2202      	movs	r2, #2
 800390c:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800390e:	79fa      	ldrb	r2, [r7, #7]
 8003910:	4924      	ldr	r1, [pc, #144]	; (80039a4 <HW_TS_Start+0xfc>)
 8003912:	4613      	mov	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4413      	add	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	440b      	add	r3, r1
 800391c:	3308      	adds	r3, #8
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003922:	79fa      	ldrb	r2, [r7, #7]
 8003924:	491f      	ldr	r1, [pc, #124]	; (80039a4 <HW_TS_Start+0xfc>)
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	440b      	add	r3, r1
 8003930:	3304      	adds	r3, #4
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fb6b 	bl	8003014 <linkTimer>
 800393e:	4603      	mov	r3, r0
 8003940:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003942:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <HW_TS_Start+0x104>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <HW_TS_Start+0x108>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	7c7a      	ldrb	r2, [r7, #17]
 8003950:	429a      	cmp	r2, r3
 8003952:	d002      	beq.n	800395a <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8003954:	f7ff fd2a 	bl	80033ac <RescheduleTimerList>
 8003958:	e013      	b.n	8003982 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800395a:	79fa      	ldrb	r2, [r7, #7]
 800395c:	4911      	ldr	r1, [pc, #68]	; (80039a4 <HW_TS_Start+0xfc>)
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	440b      	add	r3, r1
 8003968:	3308      	adds	r3, #8
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	8a7b      	ldrh	r3, [r7, #18]
 800396e:	79fa      	ldrb	r2, [r7, #7]
 8003970:	1ac9      	subs	r1, r1, r3
 8003972:	480c      	ldr	r0, [pc, #48]	; (80039a4 <HW_TS_Start+0xfc>)
 8003974:	4613      	mov	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4413      	add	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4403      	add	r3, r0
 800397e:	3308      	adds	r3, #8
 8003980:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <HW_TS_Start+0x100>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800398c:	2003      	movs	r0, #3
 800398e:	f004 fdaa 	bl	80084e6 <HAL_NVIC_EnableIRQ>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800399c:	bf00      	nop
}
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	200002d4 	.word	0x200002d4
 80039a8:	20000c50 	.word	0x20000c50
 80039ac:	20000364 	.word	0x20000364
 80039b0:	20000365 	.word	0x20000365

080039b4 <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ba:	f3ef 8310 	mrs	r3, PRIMASK
 80039be:	60bb      	str	r3, [r7, #8]
  return(result);
 80039c0:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80039c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80039c4:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d2:	d112      	bne.n	80039fa <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 80039da:	f7ff fc49 	bl	8003270 <ReturnTimeElapsed>
 80039de:	4603      	mov	r3, r0
 80039e0:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 80039e2:	89fa      	ldrh	r2, [r7, #14]
 80039e4:	89bb      	ldrh	r3, [r7, #12]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d904      	bls.n	80039f4 <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 80039ea:	89fa      	ldrh	r2, [r7, #14]
 80039ec:	89bb      	ldrh	r3, [r7, #12]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	82fb      	strh	r3, [r7, #22]
 80039f2:	e005      	b.n	8003a00 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	82fb      	strh	r3, [r7, #22]
 80039f8:	e002      	b.n	8003a00 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 80039fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039fe:	82fb      	strh	r3, [r7, #22]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 8003a0a:	8afb      	ldrh	r3, [r7, #22]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40002800 	.word	0x40002800

08003a18 <LL_AHB2_GRP1_EnableClock>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <MX_I2C1_Init+0x74>)
 8003a82:	4a1c      	ldr	r2, [pc, #112]	; (8003af4 <MX_I2C1_Init+0x78>)
 8003a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 8003a86:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <MX_I2C1_Init+0x74>)
 8003a88:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <MX_I2C1_Init+0x7c>)
 8003a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a8c:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <MX_I2C1_Init+0x74>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a92:	4b17      	ldr	r3, [pc, #92]	; (8003af0 <MX_I2C1_Init+0x74>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a98:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <MX_I2C1_Init+0x74>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <MX_I2C1_Init+0x74>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003aa4:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <MX_I2C1_Init+0x74>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <MX_I2C1_Init+0x74>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <MX_I2C1_Init+0x74>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ab6:	480e      	ldr	r0, [pc, #56]	; (8003af0 <MX_I2C1_Init+0x74>)
 8003ab8:	f005 fa3a 	bl	8008f30 <HAL_I2C_Init>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ac2:	f000 fd65 	bl	8004590 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4809      	ldr	r0, [pc, #36]	; (8003af0 <MX_I2C1_Init+0x74>)
 8003aca:	f007 f932 	bl	800ad32 <HAL_I2CEx_ConfigAnalogFilter>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ad4:	f000 fd5c 	bl	8004590 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4805      	ldr	r0, [pc, #20]	; (8003af0 <MX_I2C1_Init+0x74>)
 8003adc:	f007 f974 	bl	800adc8 <HAL_I2CEx_ConfigDigitalFilter>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003ae6:	f000 fd53 	bl	8004590 <Error_Handler>
  }

}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20028264 	.word	0x20028264
 8003af4:	40005400 	.word	0x40005400
 8003af8:	00e27cae 	.word	0x00e27cae

08003afc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b04:	f107 030c 	add.w	r3, r7, #12
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	60da      	str	r2, [r3, #12]
 8003b12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <HAL_I2C_MspInit+0x6c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d120      	bne.n	8003b60 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f7ff ff7a 	bl	8003a18 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b24:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b2a:	2312      	movs	r3, #18
 8003b2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b36:	2304      	movs	r3, #4
 8003b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3a:	f107 030c 	add.w	r3, r7, #12
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b44:	f005 f83c 	bl	8008bc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b48:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003b4c:	f7ff ff7d 	bl	8003a4a <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003b50:	2200      	movs	r2, #0
 8003b52:	2105      	movs	r1, #5
 8003b54:	201e      	movs	r0, #30
 8003b56:	f004 fcac 	bl	80084b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b5a:	201e      	movs	r0, #30
 8003b5c:	f004 fcc3 	bl	80084e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003b60:	bf00      	nop
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40005400 	.word	0x40005400

08003b6c <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 8003b74:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <InertialSensingTask+0xec>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 8003b7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003b7e:	2120      	movs	r1, #32
 8003b80:	204a      	movs	r0, #74	; 0x4a
 8003b82:	f7fd ffd5 	bl	8001b30 <IMU_begin>
#endif

	uint32_t evt = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8e:	2100      	movs	r1, #0
 8003b90:	2001      	movs	r0, #1
 8003b92:	f00c fe89 	bl	80108a8 <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 8003b96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b9a:	f00c ff19 	bl	80109d0 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 8003b9e:	2064      	movs	r0, #100	; 0x64
 8003ba0:	f7fe fac2 	bl	8002128 <IMU_enableRotationVector>
		osDelay(100);
 8003ba4:	2064      	movs	r0, #100	; 0x64
 8003ba6:	f00c ff13 	bl	80109d0 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <InertialSensingTask+0xf0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2c      	ldr	r2, [pc, #176]	; (8003c60 <InertialSensingTask+0xf4>)
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bb6:	f7fe fac5 	bl	8002144 <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 8003bba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003bbe:	f00c ff07 	bl	80109d0 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 8003bc2:	2064      	movs	r0, #100	; 0x64
 8003bc4:	f00c ff04 	bl	80109d0 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8003bc8:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <InertialSensingTask+0xf8>)
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	2364      	movs	r3, #100	; 0x64
 8003bce:	2200      	movs	r2, #0
 8003bd0:	4925      	ldr	r1, [pc, #148]	; (8003c68 <InertialSensingTask+0xfc>)
 8003bd2:	f00d fbed 	bl	80113b0 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 8003bd6:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <InertialSensingTask+0x100>)
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2200      	movs	r2, #0
 8003bde:	4924      	ldr	r1, [pc, #144]	; (8003c70 <InertialSensingTask+0x104>)
 8003be0:	f00d fbe6 	bl	80113b0 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 8003be4:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <InertialSensingTask+0x108>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	2300      	movs	r3, #0
 8003bea:	2200      	movs	r2, #0
 8003bec:	491e      	ldr	r1, [pc, #120]	; (8003c68 <InertialSensingTask+0xfc>)
 8003bee:	f00d fb6b 	bl	80112c8 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 8003bf2:	2120      	movs	r1, #32
 8003bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bf8:	f005 f952 	bl	8008ea0 <HAL_GPIO_ReadPin>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <InertialSensingTask+0x9a>
 8003c02:	f7fd ffcd 	bl	8001ba0 <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 8003c06:	2200      	movs	r2, #0
 8003c08:	2100      	movs	r1, #0
 8003c0a:	2002      	movs	r0, #2
 8003c0c:	f00c fe4c 	bl	80108a8 <osThreadFlagsWait>
 8003c10:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0d2      	beq.n	8003bc2 <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 8003c1c:	f7fe fa22 	bl	8002064 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 8003c20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c24:	f00c fed4 	bl	80109d0 <osDelay>

				inertialEnabled = 0;
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <InertialSensingTask+0xec>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <InertialSensingTask+0x108>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f00d fc2e 	bl	8011494 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <InertialSensingTask+0x100>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f00d fc29 	bl	8011494 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 8003c42:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <InertialSensingTask+0xf8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f00d fc24 	bl	8011494 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8003c4c:	200e      	movs	r0, #14
 8003c4e:	f00c fddb 	bl	8010808 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 8003c52:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003c54:	e799      	b.n	8003b8a <InertialSensingTask+0x1e>
 8003c56:	bf00      	nop
 8003c58:	20000c5a 	.word	0x20000c5a
 8003c5c:	20000068 	.word	0x20000068
 8003c60:	200282f4 	.word	0x200282f4
 8003c64:	20027c80 	.word	0x20027c80
 8003c68:	200282b8 	.word	0x200282b8
 8003c6c:	20027c5c 	.word	0x20027c5c
 8003c70:	200282d0 	.word	0x200282d0
 8003c74:	20027c6c 	.word	0x20027c6c

08003c78 <HAL_GPIO_EXTI_Callback>:
//
//
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d105      	bne.n	8003c94 <HAL_GPIO_EXTI_Callback+0x1c>
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <HAL_GPIO_EXTI_Callback+0x24>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003c90:	f7fd ff86 	bl	8001ba0 <IMU_dataAvailable>
	}
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000c5a 	.word	0x20000c5a

08003ca0 <_Input>:
#include "string.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003cac:	480b      	ldr	r0, [pc, #44]	; (8003cdc <_Input+0x3c>)
 8003cae:	f7fe fd5d 	bl	800276c <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	480a      	ldr	r0, [pc, #40]	; (8003ce0 <_Input+0x40>)
 8003cb6:	f000 ff6f 	bl	8004b98 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <_Input+0x40>)
 8003cbc:	4a07      	ldr	r2, [pc, #28]	; (8003cdc <_Input+0x3c>)
 8003cbe:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a06      	ldr	r2, [pc, #24]	; (8003ce0 <_Input+0x40>)
 8003cc6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20028320 	.word	0x20028320
 8003ce0:	200283a8 	.word	0x200283a8

08003ce4 <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f00c fdd6 	bl	80108a8 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003cfc:	4818      	ldr	r0, [pc, #96]	; (8003d60 <PulseHandlerTask+0x7c>)
 8003cfe:	f00a f981 	bl	800e004 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8003d02:	4818      	ldr	r0, [pc, #96]	; (8003d64 <PulseHandlerTask+0x80>)
 8003d04:	f004 f9ee 	bl	80080e4 <HAL_COMP_Start>
		_Input(&input0, 0);
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4817      	ldr	r0, [pc, #92]	; (8003d68 <PulseHandlerTask+0x84>)
 8003d0c:	f7ff ffc8 	bl	8003ca0 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003d10:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <PulseHandlerTask+0x88>)
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	f04f 33ff 	mov.w	r3, #4294967295
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4915      	ldr	r1, [pc, #84]	; (8003d70 <PulseHandlerTask+0x8c>)
 8003d1c:	f00d fb48 	bl	80113b0 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003d20:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <PulseHandlerTask+0x84>)
 8003d22:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003d26:	4912      	ldr	r1, [pc, #72]	; (8003d70 <PulseHandlerTask+0x8c>)
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 ff69 	bl	8004c00 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2100      	movs	r1, #0
 8003d32:	2002      	movs	r0, #2
 8003d34:	f00c fdb8 	bl	80108a8 <osThreadFlagsWait>
 8003d38:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0e5      	beq.n	8003d10 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003d44:	4807      	ldr	r0, [pc, #28]	; (8003d64 <PulseHandlerTask+0x80>)
 8003d46:	f004 fa17 	bl	8008178 <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003d4a:	4805      	ldr	r0, [pc, #20]	; (8003d60 <PulseHandlerTask+0x7c>)
 8003d4c:	f00a f984 	bl	800e058 <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <PulseHandlerTask+0x88>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f00d fb9d 	bl	8011494 <osMessageQueueReset>
				break;
 8003d5a:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003d5c:	e7c8      	b.n	8003cf0 <PulseHandlerTask+0xc>
 8003d5e:	bf00      	nop
 8003d60:	200288a0 	.word	0x200288a0
 8003d64:	200280d4 	.word	0x200280d4
 8003d68:	20027c84 	.word	0x20027c84
 8003d6c:	20027b60 	.word	0x20027b60
 8003d70:	20028300 	.word	0x20028300

08003d74 <get3D_location>:

VIVEVars vive_vars;
struct LogMessage statusMessage;
struct VIVEVars vive_loc_demo;

void get3D_location(void *arguments){
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	73fb      	strb	r3, [r7, #15]
	uint32_t blinkState;

	memcpy(&blinkState, arguments, sizeof(blinkState));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60bb      	str	r3, [r7, #8]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8003d86:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <get3D_location+0x110>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f00d f957 	bl	8011040 <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 8003d92:	4b3d      	ldr	r3, [pc, #244]	; (8003e88 <get3D_location+0x114>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f00d f951 	bl	8011040 <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003d9e:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <get3D_location+0x118>)
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
 8003da6:	2200      	movs	r2, #0
 8003da8:	4939      	ldr	r1, [pc, #228]	; (8003e90 <get3D_location+0x11c>)
 8003daa:	f00d fb01 	bl	80113b0 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8003dae:	4b38      	ldr	r3, [pc, #224]	; (8003e90 <get3D_location+0x11c>)
 8003db0:	789b      	ldrb	r3, [r3, #2]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d116      	bne.n	8003de4 <get3D_location+0x70>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003db6:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <get3D_location+0x118>)
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4934      	ldr	r1, [pc, #208]	; (8003e90 <get3D_location+0x11c>)
 8003dc0:	f00d fa82 	bl	80112c8 <osMessageQueuePut>

		blinkActive = 1;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003dc8:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <get3D_location+0x120>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2102      	movs	r1, #2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f00c fcb8 	bl	8010744 <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8003dd4:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <get3D_location+0x114>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f00d f92f 	bl	8011040 <osSemaphoreAcquire>
 8003de2:	e006      	b.n	8003df2 <get3D_location+0x7e>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003de4:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <get3D_location+0x118>)
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	2300      	movs	r3, #0
 8003dea:	2200      	movs	r2, #0
 8003dec:	4928      	ldr	r1, [pc, #160]	; (8003e90 <get3D_location+0x11c>)
 8003dee:	f00d fa6b 	bl	80112c8 <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003df2:	4b29      	ldr	r3, [pc, #164]	; (8003e98 <get3D_location+0x124>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f04f 31ff 	mov.w	r1, #4294967295
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f00d f920 	bl	8011040 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8003e00:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <get3D_location+0x128>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f00c fc9c 	bl	8010744 <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <get3D_location+0x110>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003e14:	4618      	mov	r0, r3
 8003e16:	f00d f913 	bl	8011040 <osSemaphoreAcquire>

#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	if(blinkState == LIGHT_LAB_DEMO){
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d119      	bne.n	8003e54 <get3D_location+0xe0>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003e20:	e00f      	b.n	8003e42 <get3D_location+0xce>
			if(osOK == osMessageQueueGet(viveQueueHandle, &vive_loc_demo, 0U, 1000)){
 8003e22:	4b1f      	ldr	r3, [pc, #124]	; (8003ea0 <get3D_location+0x12c>)
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	491d      	ldr	r1, [pc, #116]	; (8003ea4 <get3D_location+0x130>)
 8003e2e:	f00d fabf 	bl	80113b0 <osMessageQueueGet>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <get3D_location+0xce>
				APP_THREAD_SendBorderMessage(&vive_loc_demo, sizeof(VIVEVars), "capLoc");
 8003e38:	4a1b      	ldr	r2, [pc, #108]	; (8003ea8 <get3D_location+0x134>)
 8003e3a:	2118      	movs	r1, #24
 8003e3c:	4819      	ldr	r0, [pc, #100]	; (8003ea4 <get3D_location+0x130>)
 8003e3e:	f014 fba9 	bl	8018594 <APP_THREAD_SendBorderMessage>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <get3D_location+0x138>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f00d f8f9 	bl	8011040 <osSemaphoreAcquire>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e6      	bne.n	8003e22 <get3D_location+0xae>
//			}
		}
	}

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8003e54:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <get3D_location+0x124>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f00d f957 	bl	801110c <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <get3D_location+0x128>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2102      	movs	r1, #2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f00c fc6d 	bl	8010744 <osThreadFlagsSet>

	if(blinkActive){
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <get3D_location+0x108>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <get3D_location+0x120>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2101      	movs	r1, #1
 8003e76:	4618      	mov	r0, r3
 8003e78:	f00c fc64 	bl	8010744 <osThreadFlagsSet>
	}

}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	200280a8 	.word	0x200280a8
 8003e88:	200280b0 	.word	0x200280b0
 8003e8c:	20027c7c 	.word	0x20027c7c
 8003e90:	200280cc 	.word	0x200280cc
 8003e94:	20027c4c 	.word	0x20027c4c
 8003e98:	20027c68 	.word	0x20027c68
 8003e9c:	200280b4 	.word	0x200280b4
 8003ea0:	20027b64 	.word	0x20027b64
 8003ea4:	20028678 	.word	0x20028678
 8003ea8:	0801b9e4 	.word	0x0801b9e4
 8003eac:	20027c74 	.word	0x20027c74

08003eb0 <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003ec6:	723b      	strb	r3, [r7, #8]
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	817b      	strh	r3, [r7, #10]
 8003ecc:	883b      	ldrh	r3, [r7, #0]
 8003ece:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <enqueue_pulse+0x38>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	f107 0108 	add.w	r1, r7, #8
 8003ed8:	2300      	movs	r3, #0
 8003eda:	2200      	movs	r2, #0
 8003edc:	f00d f9f4 	bl	80112c8 <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20027b60 	.word	0x20027b60

08003eec <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
#ifndef DONGLE_CODE
	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003ef8:	4b76      	ldr	r3, [pc, #472]	; (80040d4 <InterProcessorTask+0x1e8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f04f 31ff 	mov.w	r1, #4294967295
 8003f00:	4618      	mov	r0, r3
 8003f02:	f00d f89d 	bl	8011040 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003f06:	bf00      	nop
 8003f08:	2364      	movs	r3, #100	; 0x64
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	2306      	movs	r3, #6
 8003f0e:	4a72      	ldr	r2, [pc, #456]	; (80040d8 <InterProcessorTask+0x1ec>)
 8003f10:	21e6      	movs	r1, #230	; 0xe6
 8003f12:	4872      	ldr	r0, [pc, #456]	; (80040dc <InterProcessorTask+0x1f0>)
 8003f14:	f005 f89c 	bl	8009050 <HAL_I2C_Master_Transmit>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f4      	bne.n	8003f08 <InterProcessorTask+0x1c>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003f1e:	4b6d      	ldr	r3, [pc, #436]	; (80040d4 <InterProcessorTask+0x1e8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f00d f8f2 	bl	801110c <osSemaphoreRelease>
#endif
	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003f28:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	2001      	movs	r0, #1
 8003f30:	f00c fcba 	bl	80108a8 <osThreadFlagsWait>
 8003f34:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f3      	beq.n	8003f28 <InterProcessorTask+0x3c>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003f40:	4b67      	ldr	r3, [pc, #412]	; (80040e0 <InterProcessorTask+0x1f4>)
 8003f42:	4a68      	ldr	r2, [pc, #416]	; (80040e4 <InterProcessorTask+0x1f8>)
 8003f44:	6811      	ldr	r1, [r2, #0]
 8003f46:	6019      	str	r1, [r3, #0]
 8003f48:	8892      	ldrh	r2, [r2, #4]
 8003f4a:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f4c:	4b61      	ldr	r3, [pc, #388]	; (80040d4 <InterProcessorTask+0x1e8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f04f 31ff 	mov.w	r1, #4294967295
 8003f54:	4618      	mov	r0, r3
 8003f56:	f00d f873 	bl	8011040 <osSemaphoreAcquire>
			//while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
			HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100);
 8003f5a:	2364      	movs	r3, #100	; 0x64
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	2306      	movs	r3, #6
 8003f60:	4a5f      	ldr	r2, [pc, #380]	; (80040e0 <InterProcessorTask+0x1f4>)
 8003f62:	21e6      	movs	r1, #230	; 0xe6
 8003f64:	485d      	ldr	r0, [pc, #372]	; (80040dc <InterProcessorTask+0x1f0>)
 8003f66:	f005 f873 	bl	8009050 <HAL_I2C_Master_Transmit>

			osDelay(100);
 8003f6a:	2064      	movs	r0, #100	; 0x64
 8003f6c:	f00c fd30 	bl	80109d0 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003f70:	4b58      	ldr	r3, [pc, #352]	; (80040d4 <InterProcessorTask+0x1e8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f00d f8c9 	bl	801110c <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8003f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7e:	2100      	movs	r1, #0
 8003f80:	2006      	movs	r0, #6
 8003f82:	f00c fc91 	bl	80108a8 <osThreadFlagsWait>
 8003f86:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d079      	beq.n	8004086 <InterProcessorTask+0x19a>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f92:	4b50      	ldr	r3, [pc, #320]	; (80040d4 <InterProcessorTask+0x1e8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f04f 31ff 	mov.w	r1, #4294967295
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f00d f850 	bl	8011040 <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003fa0:	e00e      	b.n	8003fc0 <InterProcessorTask+0xd4>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003fa2:	4b4c      	ldr	r3, [pc, #304]	; (80040d4 <InterProcessorTask+0x1e8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f00d f8b0 	bl	801110c <osSemaphoreRelease>
 						osDelay(100);
 8003fac:	2064      	movs	r0, #100	; 0x64
 8003fae:	f00c fd0f 	bl	80109d0 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003fb2:	4b48      	ldr	r3, [pc, #288]	; (80040d4 <InterProcessorTask+0x1e8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f00d f840 	bl	8011040 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003fc0:	2364      	movs	r3, #100	; 0x64
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2306      	movs	r3, #6
 8003fc6:	4a46      	ldr	r2, [pc, #280]	; (80040e0 <InterProcessorTask+0x1f4>)
 8003fc8:	21e6      	movs	r1, #230	; 0xe6
 8003fca:	4844      	ldr	r0, [pc, #272]	; (80040dc <InterProcessorTask+0x1f0>)
 8003fcc:	f005 f840 	bl	8009050 <HAL_I2C_Master_Transmit>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e5      	bne.n	8003fa2 <InterProcessorTask+0xb6>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003fd6:	2008      	movs	r0, #8
 8003fd8:	f00c fc16 	bl	8010808 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003fdc:	e00e      	b.n	8003ffc <InterProcessorTask+0x110>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003fde:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <InterProcessorTask+0x1e8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f00d f892 	bl	801110c <osSemaphoreRelease>
 						osDelay(100);
 8003fe8:	2064      	movs	r0, #100	; 0x64
 8003fea:	f00c fcf1 	bl	80109d0 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003fee:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <InterProcessorTask+0x1e8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f00d f822 	bl	8011040 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003ffc:	2358      	movs	r3, #88	; 0x58
 8003ffe:	4a3a      	ldr	r2, [pc, #232]	; (80040e8 <InterProcessorTask+0x1fc>)
 8004000:	21e6      	movs	r1, #230	; 0xe6
 8004002:	4836      	ldr	r0, [pc, #216]	; (80040dc <InterProcessorTask+0x1f0>)
 8004004:	f005 fa0e 	bl	8009424 <HAL_I2C_Master_Receive_IT>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e7      	bne.n	8003fde <InterProcessorTask+0xf2>
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 800400e:	f04f 32ff 	mov.w	r2, #4294967295
 8004012:	2100      	movs	r1, #0
 8004014:	200a      	movs	r0, #10
 8004016:	f00c fc47 	bl	80108a8 <osThreadFlagsWait>
 800401a:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 800401c:	4b2d      	ldr	r3, [pc, #180]	; (80040d4 <InterProcessorTask+0x1e8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f00d f873 	bl	801110c <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d14e      	bne.n	80040ce <InterProcessorTask+0x1e2>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8004030:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <InterProcessorTask+0x1fc>)
 8004032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004034:	4a2d      	ldr	r2, [pc, #180]	; (80040ec <InterProcessorTask+0x200>)
 8004036:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8004038:	4b2b      	ldr	r3, [pc, #172]	; (80040e8 <InterProcessorTask+0x1fc>)
 800403a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403c:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <InterProcessorTask+0x200>)
 800403e:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	e01c      	b.n	8004080 <InterProcessorTask+0x194>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4a27      	ldr	r2, [pc, #156]	; (80040e8 <InterProcessorTask+0x1fc>)
 800404c:	4413      	add	r3, r2
 800404e:	2208      	movs	r2, #8
 8004050:	4619      	mov	r1, r3
 8004052:	4826      	ldr	r0, [pc, #152]	; (80040ec <InterProcessorTask+0x200>)
 8004054:	f016 faf0 	bl	801a638 <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	3305      	adds	r3, #5
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <InterProcessorTask+0x1fc>)
 8004060:	4413      	add	r3, r2
 8004062:	2208      	movs	r2, #8
 8004064:	4619      	mov	r1, r3
 8004066:	4822      	ldr	r0, [pc, #136]	; (80040f0 <InterProcessorTask+0x204>)
 8004068:	f016 fae6 	bl	801a638 <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 800406c:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <InterProcessorTask+0x208>)
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	2300      	movs	r3, #0
 8004072:	2200      	movs	r2, #0
 8004074:	491d      	ldr	r1, [pc, #116]	; (80040ec <InterProcessorTask+0x200>)
 8004076:	f00d f927 	bl	80112c8 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	3301      	adds	r3, #1
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b04      	cmp	r3, #4
 8004084:	dddf      	ble.n	8004046 <InterProcessorTask+0x15a>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	f43f af74 	beq.w	8003f7a <InterProcessorTask+0x8e>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <InterProcessorTask+0x1e8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f04f 31ff 	mov.w	r1, #4294967295
 800409a:	4618      	mov	r0, r3
 800409c:	f00c ffd0 	bl	8011040 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 80040a0:	bf00      	nop
 80040a2:	2364      	movs	r3, #100	; 0x64
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	2306      	movs	r3, #6
 80040a8:	4a0b      	ldr	r2, [pc, #44]	; (80040d8 <InterProcessorTask+0x1ec>)
 80040aa:	21e6      	movs	r1, #230	; 0xe6
 80040ac:	480b      	ldr	r0, [pc, #44]	; (80040dc <InterProcessorTask+0x1f0>)
 80040ae:	f004 ffcf 	bl	8009050 <HAL_I2C_Master_Transmit>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f4      	bne.n	80040a2 <InterProcessorTask+0x1b6>
					osSemaphoreRelease(messageI2C_LockHandle);
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <InterProcessorTask+0x1e8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f00d f825 	bl	801110c <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <InterProcessorTask+0x208>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f00d f9e4 	bl	8011494 <osMessageQueueReset>

					break;
 80040cc:	e000      	b.n	80040d0 <InterProcessorTask+0x1e4>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 80040ce:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80040d0:	e72a      	b.n	8003f28 <InterProcessorTask+0x3c>
 80040d2:	bf00      	nop
 80040d4:	20027c68 	.word	0x20027c68
 80040d8:	0801bfa4 	.word	0x0801bfa4
 80040dc:	20028264 	.word	0x20028264
 80040e0:	200286e8 	.word	0x200286e8
 80040e4:	20027b68 	.word	0x20027b68
 80040e8:	20028690 	.word	0x20028690
 80040ec:	200286f0 	.word	0x200286f0
 80040f0:	200286f8 	.word	0x200286f8
 80040f4:	20027c78 	.word	0x20027c78

080040f8 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2110      	movs	r1, #16
 8004106:	4618      	mov	r0, r3
 8004108:	f00c fb1c 	bl	8010744 <osThreadFlagsSet>
	test_1 = 1;
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <HAL_I2C_MasterTxCpltCallback+0x28>)
 800410e:	2201      	movs	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	200280ac 	.word	0x200280ac
 8004120:	20000c5b 	.word	0x20000c5b

08004124 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2108      	movs	r1, #8
 8004132:	4618      	mov	r0, r3
 8004134:	f00c fb06 	bl	8010744 <osThreadFlagsSet>
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	200280ac 	.word	0x200280ac

08004144 <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af04      	add	r7, sp, #16
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	b2da      	uxtb	r2, r3
 8004154:	4b2e      	ldr	r3, [pc, #184]	; (8004210 <setup_LP5523+0xcc>)
 8004156:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004158:	4b2e      	ldr	r3, [pc, #184]	; (8004214 <setup_LP5523+0xd0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f04f 31ff 	mov.w	r1, #4294967295
 8004160:	4618      	mov	r0, r3
 8004162:	f00c ff6d 	bl	8011040 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8004166:	4b2c      	ldr	r3, [pc, #176]	; (8004218 <setup_LP5523+0xd4>)
 8004168:	2240      	movs	r2, #64	; 0x40
 800416a:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 800416c:	4b28      	ldr	r3, [pc, #160]	; (8004210 <setup_LP5523+0xcc>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	b299      	uxth	r1, r3
 8004172:	2364      	movs	r3, #100	; 0x64
 8004174:	9302      	str	r3, [sp, #8]
 8004176:	2301      	movs	r3, #1
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	4b27      	ldr	r3, [pc, #156]	; (8004218 <setup_LP5523+0xd4>)
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2301      	movs	r3, #1
 8004180:	2200      	movs	r2, #0
 8004182:	4826      	ldr	r0, [pc, #152]	; (800421c <setup_LP5523+0xd8>)
 8004184:	f005 f9be 	bl	8009504 <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8004188:	4b23      	ldr	r3, [pc, #140]	; (8004218 <setup_LP5523+0xd4>)
 800418a:	224f      	movs	r2, #79	; 0x4f
 800418c:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 800418e:	4b20      	ldr	r3, [pc, #128]	; (8004210 <setup_LP5523+0xcc>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	b299      	uxth	r1, r3
 8004194:	2364      	movs	r3, #100	; 0x64
 8004196:	9302      	str	r3, [sp, #8]
 8004198:	2301      	movs	r3, #1
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <setup_LP5523+0xd4>)
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	2301      	movs	r3, #1
 80041a2:	2236      	movs	r2, #54	; 0x36
 80041a4:	481d      	ldr	r0, [pc, #116]	; (800421c <setup_LP5523+0xd8>)
 80041a6:	f005 f9ad 	bl	8009504 <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 80041aa:	4b19      	ldr	r3, [pc, #100]	; (8004210 <setup_LP5523+0xcc>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b299      	uxth	r1, r3
 80041b0:	2364      	movs	r3, #100	; 0x64
 80041b2:	9302      	str	r3, [sp, #8]
 80041b4:	2309      	movs	r3, #9
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <setup_LP5523+0xdc>)
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	2301      	movs	r3, #1
 80041be:	2216      	movs	r2, #22
 80041c0:	4816      	ldr	r0, [pc, #88]	; (800421c <setup_LP5523+0xd8>)
 80041c2:	f005 f99f 	bl	8009504 <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 80041c6:	4b12      	ldr	r3, [pc, #72]	; (8004210 <setup_LP5523+0xcc>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	b299      	uxth	r1, r3
 80041cc:	2364      	movs	r3, #100	; 0x64
 80041ce:	9302      	str	r3, [sp, #8]
 80041d0:	2309      	movs	r3, #9
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <setup_LP5523+0xe0>)
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	2301      	movs	r3, #1
 80041da:	2226      	movs	r2, #38	; 0x26
 80041dc:	480f      	ldr	r0, [pc, #60]	; (800421c <setup_LP5523+0xd8>)
 80041de:	f005 f991 	bl	8009504 <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <setup_LP5523+0xcc>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	b299      	uxth	r1, r3
 80041e8:	2364      	movs	r3, #100	; 0x64
 80041ea:	9302      	str	r3, [sp, #8]
 80041ec:	2309      	movs	r3, #9
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <setup_LP5523+0xe4>)
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	2301      	movs	r3, #1
 80041f6:	2206      	movs	r2, #6
 80041f8:	4808      	ldr	r0, [pc, #32]	; (800421c <setup_LP5523+0xd8>)
 80041fa:	f005 f983 	bl	8009504 <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 80041fe:	4b05      	ldr	r3, [pc, #20]	; (8004214 <setup_LP5523+0xd0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f00c ff82 	bl	801110c <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20028709 	.word	0x20028709
 8004214:	20027c68 	.word	0x20027c68
 8004218:	20028708 	.word	0x20028708
 800421c:	20028264 	.word	0x20028264
 8004220:	20000c74 	.word	0x20000c74
 8004224:	2000006c 	.word	0x2000006c
 8004228:	0801bfac 	.word	0x0801bfac

0800422c <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af04      	add	r7, sp, #16
 8004232:	6078      	str	r0, [r7, #4]

	memcpy(led_left_PWM, setColors, 9);
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <FrontLightsSet+0x78>)
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6810      	ldr	r0, [r2, #0]
 800423a:	6851      	ldr	r1, [r2, #4]
 800423c:	c303      	stmia	r3!, {r0, r1}
 800423e:	7a12      	ldrb	r2, [r2, #8]
 8004240:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f103 0209 	add.w	r2, r3, #9
 8004248:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <FrontLightsSet+0x7c>)
 800424a:	6810      	ldr	r0, [r2, #0]
 800424c:	6851      	ldr	r1, [r2, #4]
 800424e:	c303      	stmia	r3!, {r0, r1}
 8004250:	7a12      	ldrb	r2, [r2, #8]
 8004252:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004254:	4b15      	ldr	r3, [pc, #84]	; (80042ac <FrontLightsSet+0x80>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f04f 31ff 	mov.w	r1, #4294967295
 800425c:	4618      	mov	r0, r3
 800425e:	f00c feef 	bl	8011040 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8004262:	2364      	movs	r3, #100	; 0x64
 8004264:	9302      	str	r3, [sp, #8]
 8004266:	2309      	movs	r3, #9
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <FrontLightsSet+0x78>)
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	2301      	movs	r3, #1
 8004270:	2216      	movs	r2, #22
 8004272:	2168      	movs	r1, #104	; 0x68
 8004274:	480e      	ldr	r0, [pc, #56]	; (80042b0 <FrontLightsSet+0x84>)
 8004276:	f005 f945 	bl	8009504 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 800427a:	2364      	movs	r3, #100	; 0x64
 800427c:	9302      	str	r3, [sp, #8]
 800427e:	2309      	movs	r3, #9
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <FrontLightsSet+0x7c>)
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	2301      	movs	r3, #1
 8004288:	2216      	movs	r2, #22
 800428a:	216a      	movs	r1, #106	; 0x6a
 800428c:	4808      	ldr	r0, [pc, #32]	; (80042b0 <FrontLightsSet+0x84>)
 800428e:	f005 f939 	bl	8009504 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <FrontLightsSet+0x80>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f00c ff38 	bl	801110c <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000c5c 	.word	0x20000c5c
 80042a8:	20000c68 	.word	0x20000c68
 80042ac:	20027c68 	.word	0x20027c68
 80042b0:	20028264 	.word	0x20028264

080042b4 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af04      	add	r7, sp, #16
 80042ba:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 80042bc:	2034      	movs	r0, #52	; 0x34
 80042be:	f7ff ff41 	bl	8004144 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 80042c2:	2035      	movs	r0, #53	; 0x35
 80042c4:	f7ff ff3e 	bl	8004144 <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 80042cc:	2001      	movs	r0, #1
 80042ce:	f00c fb7f 	bl	80109d0 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 80042d2:	4b2f      	ldr	r3, [pc, #188]	; (8004390 <ThreadFrontLightsTask+0xdc>)
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	f107 010c 	add.w	r1, r7, #12
 80042da:	f04f 33ff 	mov.w	r3, #4294967295
 80042de:	2200      	movs	r2, #0
 80042e0:	f00d f866 	bl	80113b0 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e011      	b.n	800430e <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	425b      	negs	r3, r3
 80042f6:	b2d9      	uxtb	r1, r3
 80042f8:	4a26      	ldr	r2, [pc, #152]	; (8004394 <ThreadFrontLightsTask+0xe0>)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	4413      	add	r3, r2
 80042fe:	460a      	mov	r2, r1
 8004300:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	085b      	lsrs	r3, r3, #1
 8004306:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3301      	adds	r3, #1
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b08      	cmp	r3, #8
 8004312:	ddea      	ble.n	80042ea <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 8004314:	2300      	movs	r3, #0
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	e011      	b.n	800433e <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	b2db      	uxtb	r3, r3
 8004324:	425b      	negs	r3, r3
 8004326:	b2d9      	uxtb	r1, r3
 8004328:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <ThreadFrontLightsTask+0xe4>)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4413      	add	r3, r2
 800432e:	460a      	mov	r2, r1
 8004330:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	3301      	adds	r3, #1
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b08      	cmp	r3, #8
 8004342:	ddea      	ble.n	800431a <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004344:	4b15      	ldr	r3, [pc, #84]	; (800439c <ThreadFrontLightsTask+0xe8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f04f 31ff 	mov.w	r1, #4294967295
 800434c:	4618      	mov	r0, r3
 800434e:	f00c fe77 	bl	8011040 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8004352:	2364      	movs	r3, #100	; 0x64
 8004354:	9302      	str	r3, [sp, #8]
 8004356:	2309      	movs	r3, #9
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <ThreadFrontLightsTask+0xe0>)
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2301      	movs	r3, #1
 8004360:	2216      	movs	r2, #22
 8004362:	2168      	movs	r1, #104	; 0x68
 8004364:	480e      	ldr	r0, [pc, #56]	; (80043a0 <ThreadFrontLightsTask+0xec>)
 8004366:	f005 f8cd 	bl	8009504 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 800436a:	2364      	movs	r3, #100	; 0x64
 800436c:	9302      	str	r3, [sp, #8]
 800436e:	2309      	movs	r3, #9
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	4b09      	ldr	r3, [pc, #36]	; (8004398 <ThreadFrontLightsTask+0xe4>)
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	2301      	movs	r3, #1
 8004378:	2216      	movs	r2, #22
 800437a:	216a      	movs	r1, #106	; 0x6a
 800437c:	4808      	ldr	r0, [pc, #32]	; (80043a0 <ThreadFrontLightsTask+0xec>)
 800437e:	f005 f8c1 	bl	8009504 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <ThreadFrontLightsTask+0xe8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f00c fec0 	bl	801110c <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 800438c:	e79c      	b.n	80042c8 <ThreadFrontLightsTask+0x14>
 800438e:	bf00      	nop
 8004390:	20027c70 	.word	0x20027c70
 8004394:	20000c5c 	.word	0x20000c5c
 8004398:	20000c68 	.word	0x20000c68
 800439c:	20027c68 	.word	0x20027c68
 80043a0:	20028264 	.word	0x20028264

080043a4 <LL_RCC_LSE_SetDriveCapability>:
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	f023 0218 	bic.w	r2, r3, #24
 80043b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043d4:	f002 fb08 	bl	80069e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043d8:	f000 f822 	bl	8004420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043dc:	f7fe fc9c 	bl	8002d18 <MX_GPIO_Init>
  MX_DMA_Init();
 80043e0:	f7fd fb93 	bl	8001b0a <MX_DMA_Init>
  MX_ADC1_Init();
 80043e4:	f7fc fd2c 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 80043e8:	f000 ff2c 	bl	8005244 <MX_RTC_Init>
  MX_TIM2_Init();
 80043ec:	f001 fd7e 	bl	8005eec <MX_TIM2_Init>
  MX_RF_Init();
 80043f0:	f000 ff10 	bl	8005214 <MX_RF_Init>
  MX_I2C1_Init();
 80043f4:	f7ff fb42 	bl	8003a7c <MX_I2C1_Init>
  MX_COMP1_Init();
 80043f8:	f7fd fa74 	bl	80018e4 <MX_COMP1_Init>
  MX_TIM16_Init();
 80043fc:	f001 fe0c 	bl	8006018 <MX_TIM16_Init>
  MX_USB_Device_Init();
 8004400:	f015 f886 	bl	8019510 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 8004404:	f002 fa2e 	bl	8006864 <MX_TSC_Init>

#ifndef BORDER_ROUTER_NODE
  USBD_Stop(&hUsbDeviceFS);
 8004408:	4804      	ldr	r0, [pc, #16]	; (800441c <main+0x4c>)
 800440a:	f012 fced 	bl	8016de8 <USBD_Stop>

//  HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 800440e:	f00c f885 	bl	801051c <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8004412:	f7fc ff47 	bl	80012a4 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 8004416:	f00c f8b5 	bl	8010584 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 800441a:	e7fe      	b.n	800441a <main+0x4a>
 800441c:	20028a38 	.word	0x20028a38

08004420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b0ae      	sub	sp, #184	; 0xb8
 8004424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004426:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800442a:	2248      	movs	r2, #72	; 0x48
 800442c:	2100      	movs	r1, #0
 800442e:	4618      	mov	r0, r3
 8004430:	f016 f90d 	bl	801a64e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004434:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
 8004444:	615a      	str	r2, [r3, #20]
 8004446:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004448:	1d3b      	adds	r3, r7, #4
 800444a:	2250      	movs	r2, #80	; 0x50
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f016 f8fd 	bl	801a64e <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8004454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004462:	f043 0310 	orr.w	r3, r3, #16
 8004466:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004472:	f043 0303 	orr.w	r3, r3, #3
 8004476:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004478:	2000      	movs	r0, #0
 800447a:	f7ff ff93 	bl	80043a4 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800447e:	4b3a      	ldr	r3, [pc, #232]	; (8004568 <SystemClock_Config+0x148>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004486:	4a38      	ldr	r2, [pc, #224]	; (8004568 <SystemClock_Config+0x148>)
 8004488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b36      	ldr	r3, [pc, #216]	; (8004568 <SystemClock_Config+0x148>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800449a:	230f      	movs	r3, #15
 800449c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800449e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044a2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80044a4:	2301      	movs	r3, #1
 80044a6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044ae:	2340      	movs	r3, #64	; 0x40
 80044b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80044b4:	2305      	movs	r3, #5
 80044b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80044c4:	4618      	mov	r0, r3
 80044c6:	f007 ffd9 	bl	800c47c <HAL_RCC_OscConfig>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80044d0:	f000 f85e 	bl	8004590 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80044d4:	236f      	movs	r3, #111	; 0x6f
 80044d6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80044d8:	2302      	movs	r3, #2
 80044da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044dc:	2300      	movs	r3, #0
 80044de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80044e0:	2300      	movs	r3, #0
 80044e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044e4:	2300      	movs	r3, #0
 80044e6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80044e8:	2300      	movs	r3, #0
 80044ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80044ec:	2300      	movs	r3, #0
 80044ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80044f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044f4:	2101      	movs	r1, #1
 80044f6:	4618      	mov	r0, r3
 80044f8:	f008 fb1e 	bl	800cb38 <HAL_RCC_ClockConfig>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8004502:	f000 f845 	bl	8004590 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8004506:	f643 5304 	movw	r3, #15620	; 0x3d04
 800450a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800450c:	2306      	movs	r3, #6
 800450e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004514:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8004516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800451a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800451c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004520:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8004522:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8004526:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004528:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800452e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004532:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004534:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004538:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800453a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800453e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8004540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004544:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8004546:	2302      	movs	r3, #2
 8004548:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800454a:	2300      	movs	r3, #0
 800454c:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	4618      	mov	r0, r3
 8004552:	f008 ff48 	bl	800d3e6 <HAL_RCCEx_PeriphCLKConfig>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <SystemClock_Config+0x140>
  {
    Error_Handler();
 800455c:	f000 f818 	bl	8004590 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004560:	bf00      	nop
 8004562:	37b8      	adds	r7, #184	; 0xb8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	58000400 	.word	0x58000400

0800456c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a04      	ldr	r2, [pc, #16]	; (800458c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d101      	bne.n	8004582 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800457e:	f002 fa53 	bl	8006a28 <HAL_IncTick>
//	 HAL_GPIO_WritePin(DONGLE_DEBUG_PIN_GPIO_Port, DONGLE_DEBUG_PIN_Pin, GPIO_PIN_RESET);
//  }
//#endif
//}
  /* USER CODE END Callback 1 */
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40012c00 	.word	0x40012c00

08004590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <MasterThreadTask>:
uint32_t startTime = 0;
uint32_t viveStateVar = 0;
uint64_t waitTime = 0;
uint32_t lightsSimpleMessageAck = 0;

void MasterThreadTask(void *argument) {
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	6078      	str	r0, [r7, #4]
#endif

	while (1) {
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 80045a8:	4b81      	ldr	r3, [pc, #516]	; (80047b0 <MasterThreadTask+0x210>)
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295
 80045b0:	2200      	movs	r2, #0
 80045b2:	4980      	ldr	r1, [pc, #512]	; (80047b4 <MasterThreadTask+0x214>)
 80045b4:	f00c fefc 	bl	80113b0 <osMessageQueueGet>
#endif



		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 80045b8:	4b7f      	ldr	r3, [pc, #508]	; (80047b8 <MasterThreadTask+0x218>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f00c ff69 	bl	8011494 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
 80045c2:	4b7d      	ldr	r3, [pc, #500]	; (80047b8 <MasterThreadTask+0x218>)
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	2300      	movs	r3, #0
 80045c8:	2200      	movs	r2, #0
 80045ca:	497c      	ldr	r1, [pc, #496]	; (80047bc <MasterThreadTask+0x21c>)
 80045cc:	f00c fe7c 	bl	80112c8 <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 80045d0:	4b7b      	ldr	r3, [pc, #492]	; (80047c0 <MasterThreadTask+0x220>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f040 8083 	bne.w	80046e0 <MasterThreadTask+0x140>
 80045da:	4b76      	ldr	r3, [pc, #472]	; (80047b4 <MasterThreadTask+0x214>)
 80045dc:	785b      	ldrb	r3, [r3, #1]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d17e      	bne.n	80046e0 <MasterThreadTask+0x140>
			logEnabled = 1;
 80045e2:	4b77      	ldr	r3, [pc, #476]	; (80047c0 <MasterThreadTask+0x220>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 80045e8:	4b76      	ldr	r3, [pc, #472]	; (80047c4 <MasterThreadTask+0x224>)
 80045ea:	4a72      	ldr	r2, [pc, #456]	; (80047b4 <MasterThreadTask+0x214>)
 80045ec:	6811      	ldr	r1, [r2, #0]
 80045ee:	6019      	str	r1, [r3, #0]
 80045f0:	8892      	ldrh	r2, [r2, #4]
 80045f2:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 80045f4:	f000 f97e 	bl	80048f4 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 80045f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045fc:	f00c f9e8 	bl	80109d0 <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 8004600:	f002 fa24 	bl	8006a4c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	4b70      	ldr	r3, [pc, #448]	; (80047c8 <MasterThreadTask+0x228>)
 8004608:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 800460a:	f000 f8f5 	bl	80047f8 <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 800460e:	4b6f      	ldr	r3, [pc, #444]	; (80047cc <MasterThreadTask+0x22c>)
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	4b6f      	ldr	r3, [pc, #444]	; (80047d0 <MasterThreadTask+0x230>)
 8004614:	4a6f      	ldr	r2, [pc, #444]	; (80047d4 <MasterThreadTask+0x234>)
 8004616:	4970      	ldr	r1, [pc, #448]	; (80047d8 <MasterThreadTask+0x238>)
 8004618:	4870      	ldr	r0, [pc, #448]	; (80047dc <MasterThreadTask+0x23c>)
 800461a:	f000 f9f3 	bl	8004a04 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 800461e:	486f      	ldr	r0, [pc, #444]	; (80047dc <MasterThreadTask+0x23c>)
 8004620:	f013 ffd2 	bl	80185c8 <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 8004624:	4b62      	ldr	r3, [pc, #392]	; (80047b0 <MasterThreadTask+0x210>)
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	2300      	movs	r3, #0
 800462a:	2200      	movs	r2, #0
 800462c:	4961      	ldr	r1, [pc, #388]	; (80047b4 <MasterThreadTask+0x214>)
 800462e:	f00c febf 	bl	80113b0 <osMessageQueueGet>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d12c      	bne.n	8004692 <MasterThreadTask+0xf2>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 8004638:	4b5e      	ldr	r3, [pc, #376]	; (80047b4 <MasterThreadTask+0x214>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <MasterThreadTask+0xae>

						masterExitRoutine();
 8004640:	f000 f9a6 	bl	8004990 <masterExitRoutine>
						logEnabled = 0;
 8004644:	4b5e      	ldr	r3, [pc, #376]	; (80047c0 <MasterThreadTask+0x220>)
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
						// break out of first while loop and wait until told to start logging again
						break;
 800464a:	bf00      	nop
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 800464c:	e0ae      	b.n	80047ac <MasterThreadTask+0x20c>
					}

					else if (togLogMessageReceived.status == TARE_NOW){
 800464e:	4b59      	ldr	r3, [pc, #356]	; (80047b4 <MasterThreadTask+0x214>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b03      	cmp	r3, #3
 8004654:	d11d      	bne.n	8004692 <MasterThreadTask+0xf2>
						lightsSimpleMessageAck = 0x03; // cyan (green + blue)
 8004656:	4b62      	ldr	r3, [pc, #392]	; (80047e0 <MasterThreadTask+0x240>)
 8004658:	2203      	movs	r2, #3
 800465a:	601a      	str	r2, [r3, #0]
						osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageAck, 0U, 0);
 800465c:	4b61      	ldr	r3, [pc, #388]	; (80047e4 <MasterThreadTask+0x244>)
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	2300      	movs	r3, #0
 8004662:	2200      	movs	r2, #0
 8004664:	495e      	ldr	r1, [pc, #376]	; (80047e0 <MasterThreadTask+0x240>)
 8004666:	f00c fe2f 	bl	80112c8 <osMessageQueuePut>

						IMU_sendTareNow();
 800466a:	f7fd fded 	bl	8002248 <IMU_sendTareNow>

						osDelay(100);
 800466e:	2064      	movs	r0, #100	; 0x64
 8004670:	f00c f9ae 	bl	80109d0 <osDelay>

						IMU_sendPersistTare();
 8004674:	f7fd fe1e 	bl	80022b4 <IMU_sendPersistTare>

						osDelay(100);
 8004678:	2064      	movs	r0, #100	; 0x64
 800467a:	f00c f9a9 	bl	80109d0 <osDelay>

						lightsSimpleMessageAck = 0;
 800467e:	4b58      	ldr	r3, [pc, #352]	; (80047e0 <MasterThreadTask+0x240>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
						osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageAck, 0U, 0);
 8004684:	4b57      	ldr	r3, [pc, #348]	; (80047e4 <MasterThreadTask+0x244>)
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	2300      	movs	r3, #0
 800468a:	2200      	movs	r2, #0
 800468c:	4954      	ldr	r1, [pc, #336]	; (80047e0 <MasterThreadTask+0x240>)
 800468e:	f00c fe1b 	bl	80112c8 <osMessageQueuePut>
					}
				}

				// add delay to wait for next transmission period
				waitTime = PACKET_SEND_PERIOD - (HAL_GetTick() - startTime);
 8004692:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <MasterThreadTask+0x228>)
 8004694:	681c      	ldr	r4, [r3, #0]
 8004696:	f002 f9d9 	bl	8006a4c <HAL_GetTick>
 800469a:	4603      	mov	r3, r0
 800469c:	1ae3      	subs	r3, r4, r3
 800469e:	3364      	adds	r3, #100	; 0x64
 80046a0:	f04f 0400 	mov.w	r4, #0
 80046a4:	4a50      	ldr	r2, [pc, #320]	; (80047e8 <MasterThreadTask+0x248>)
 80046a6:	e9c2 3400 	strd	r3, r4, [r2]
				// if wait time is less than zero (i.e. the border packet send took longer than PACKET_SEND_PERIOD)
				// or greater than the allotted PACKET_SEND_PERIOD
				if( (waitTime <= 0) || (waitTime > PACKET_SEND_PERIOD)){
 80046aa:	4b4f      	ldr	r3, [pc, #316]	; (80047e8 <MasterThreadTask+0x248>)
 80046ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046b0:	4323      	orrs	r3, r4
 80046b2:	d006      	beq.n	80046c2 <MasterThreadTask+0x122>
 80046b4:	4b4c      	ldr	r3, [pc, #304]	; (80047e8 <MasterThreadTask+0x248>)
 80046b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046ba:	2c00      	cmp	r4, #0
 80046bc:	bf08      	it	eq
 80046be:	2b65      	cmpeq	r3, #101	; 0x65
 80046c0:	d307      	bcc.n	80046d2 <MasterThreadTask+0x132>
					waitTime = 0; //set to zero (i.e. dont wait)
 80046c2:	4a49      	ldr	r2, [pc, #292]	; (80047e8 <MasterThreadTask+0x248>)
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	f04f 0400 	mov.w	r4, #0
 80046cc:	e9c2 3400 	strd	r3, r4, [r2]
 80046d0:	e005      	b.n	80046de <MasterThreadTask+0x13e>
				}
				else{
					osDelay(waitTime);
 80046d2:	4b45      	ldr	r3, [pc, #276]	; (80047e8 <MasterThreadTask+0x248>)
 80046d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046d8:	4618      	mov	r0, r3
 80046da:	f00c f979 	bl	80109d0 <osDelay>
				startTime = HAL_GetTick();
 80046de:	e78f      	b.n	8004600 <MasterThreadTask+0x60>
				}

			}
		}
		else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 80046e0:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <MasterThreadTask+0x220>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d109      	bne.n	80046fc <MasterThreadTask+0x15c>
 80046e8:	4b32      	ldr	r3, [pc, #200]	; (80047b4 <MasterThreadTask+0x214>)
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d105      	bne.n	80046fc <MasterThreadTask+0x15c>
			logEnabled = 0;
 80046f0:	4b33      	ldr	r3, [pc, #204]	; (80047c0 <MasterThreadTask+0x220>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 80046f6:	f000 f94b 	bl	8004990 <masterExitRoutine>
 80046fa:	e057      	b.n	80047ac <MasterThreadTask+0x20c>
		}
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 80046fc:	4b3b      	ldr	r3, [pc, #236]	; (80047ec <MasterThreadTask+0x24c>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d141      	bne.n	8004788 <MasterThreadTask+0x1e8>
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <MasterThreadTask+0x214>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d13d      	bne.n	8004788 <MasterThreadTask+0x1e8>
			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 800470c:	4b2d      	ldr	r3, [pc, #180]	; (80047c4 <MasterThreadTask+0x224>)
 800470e:	4a29      	ldr	r2, [pc, #164]	; (80047b4 <MasterThreadTask+0x214>)
 8004710:	6811      	ldr	r1, [r2, #0]
 8004712:	6019      	str	r1, [r3, #0]
 8004714:	8892      	ldrh	r2, [r2, #4]
 8004716:	809a      	strh	r2, [r3, #4]

			// if requesting another feature to be enabled but the logging is still enabled
			if(logEnabled == 1){
 8004718:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <MasterThreadTask+0x220>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d104      	bne.n	800472a <MasterThreadTask+0x18a>
				logEnabled = 0;
 8004720:	4b27      	ldr	r3, [pc, #156]	; (80047c0 <MasterThreadTask+0x220>)
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
				masterExitRoutine();
 8004726:	f000 f933 	bl	8004990 <masterExitRoutine>
			}

			lightLabDemoEnabled = LIGHT_LAB_DEMO;
 800472a:	4b30      	ldr	r3, [pc, #192]	; (80047ec <MasterThreadTask+0x24c>)
 800472c:	2202      	movs	r2, #2
 800472e:	701a      	strb	r2, [r3, #0]

			// enable functionality
			osSemaphoreAcquire(lightingLabDemoEndHandle, 0);
 8004730:	4b2f      	ldr	r3, [pc, #188]	; (80047f0 <MasterThreadTask+0x250>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f00c fc82 	bl	8011040 <osSemaphoreAcquire>
			viveStateVar = lightLabDemoEnabled;
 800473c:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <MasterThreadTask+0x24c>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	4b2c      	ldr	r3, [pc, #176]	; (80047f4 <MasterThreadTask+0x254>)
 8004744:	601a      	str	r2, [r3, #0]

			// start all sensor subsystems
			masterEnterRoutine();
 8004746:	f000 f8d5 	bl	80048f4 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 800474a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800474e:	f00c f93f 	bl	80109d0 <osDelay>

			while(1){
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever) == osOK) {
 8004752:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <MasterThreadTask+0x210>)
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	f04f 33ff 	mov.w	r3, #4294967295
 800475a:	2200      	movs	r2, #0
 800475c:	4915      	ldr	r1, [pc, #84]	; (80047b4 <MasterThreadTask+0x214>)
 800475e:	f00c fe27 	bl	80113b0 <osMessageQueueGet>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f4      	bne.n	8004752 <MasterThreadTask+0x1b2>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 8004768:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <MasterThreadTask+0x214>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1f0      	bne.n	8004752 <MasterThreadTask+0x1b2>

						osSemaphoreRelease(lightingLabDemoEndHandle);
 8004770:	4b1f      	ldr	r3, [pc, #124]	; (80047f0 <MasterThreadTask+0x250>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f00c fcc9 	bl	801110c <osSemaphoreRelease>
						masterExitRoutine();
 800477a:	f000 f909 	bl	8004990 <masterExitRoutine>
						lightLabDemoEnabled = 0;
 800477e:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <MasterThreadTask+0x24c>)
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
						// break out of first while loop and wait until told to start logging again
						break;
 8004784:	bf00      	nop
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 8004786:	e011      	b.n	80047ac <MasterThreadTask+0x20c>
					}
				}
			}
		}
		else if ((lightLabDemoEnabled == LIGHT_LAB_DEMO) && (togLogMessageReceived.status == DISABLE_LOG)){
 8004788:	4b18      	ldr	r3, [pc, #96]	; (80047ec <MasterThreadTask+0x24c>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b02      	cmp	r3, #2
 800478e:	f47f af0b 	bne.w	80045a8 <MasterThreadTask+0x8>
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <MasterThreadTask+0x214>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f47f af06 	bne.w	80045a8 <MasterThreadTask+0x8>

			osSemaphoreRelease(lightingLabDemoEndHandle);
 800479c:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <MasterThreadTask+0x250>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f00c fcb3 	bl	801110c <osSemaphoreRelease>


			lightLabDemoEnabled = 0;
 80047a6:	4b11      	ldr	r3, [pc, #68]	; (80047ec <MasterThreadTask+0x24c>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 80047ac:	e6fc      	b.n	80045a8 <MasterThreadTask+0x8>
 80047ae:	bf00      	nop
 80047b0:	200280a0 	.word	0x200280a0
 80047b4:	20027b68 	.word	0x20027b68
 80047b8:	20027c7c 	.word	0x20027c7c
 80047bc:	0801bfb8 	.word	0x0801bfb8
 80047c0:	20000c7d 	.word	0x20000c7d
 80047c4:	20027c40 	.word	0x20027c40
 80047c8:	20000c80 	.word	0x20000c80
 80047cc:	2002878c 	.word	0x2002878c
 80047d0:	200287a4 	.word	0x200287a4
 80047d4:	200287e0 	.word	0x200287e0
 80047d8:	20028720 	.word	0x20028720
 80047dc:	20027b74 	.word	0x20027b74
 80047e0:	20000c90 	.word	0x20000c90
 80047e4:	20027c70 	.word	0x20027c70
 80047e8:	20000c88 	.word	0x20000c88
 80047ec:	20000c7e 	.word	0x20000c7e
 80047f0:	20027c74 	.word	0x20027c74
 80047f4:	20000c84 	.word	0x20000c84

080047f8 <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 80047f8:	b5b0      	push	{r4, r5, r7, lr}
 80047fa:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80047fc:	4b30      	ldr	r3, [pc, #192]	; (80048c0 <grabSensorData+0xc8>)
 80047fe:	789b      	ldrb	r3, [r3, #2]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d111      	bne.n	8004828 <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 8004804:	4b2f      	ldr	r3, [pc, #188]	; (80048c4 <grabSensorData+0xcc>)
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	2300      	movs	r3, #0
 800480a:	2200      	movs	r2, #0
 800480c:	492e      	ldr	r1, [pc, #184]	; (80048c8 <grabSensorData+0xd0>)
 800480e:	f00c fdcf 	bl	80113b0 <osMessageQueueGet>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 8004818:	4a2b      	ldr	r2, [pc, #172]	; (80048c8 <grabSensorData+0xd0>)
 800481a:	4b2c      	ldr	r3, [pc, #176]	; (80048cc <grabSensorData+0xd4>)
 800481c:	4610      	mov	r0, r2
 800481e:	4619      	mov	r1, r3
 8004820:	236c      	movs	r3, #108	; 0x6c
 8004822:	461a      	mov	r2, r3
 8004824:	f015 ff08 	bl	801a638 <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8004828:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <grabSensorData+0xc8>)
 800482a:	78db      	ldrb	r3, [r3, #3]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d113      	bne.n	8004858 <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 8004830:	4b27      	ldr	r3, [pc, #156]	; (80048d0 <grabSensorData+0xd8>)
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	2200      	movs	r2, #0
 8004838:	4926      	ldr	r1, [pc, #152]	; (80048d4 <grabSensorData+0xdc>)
 800483a:	f00c fdb9 	bl	80113b0 <osMessageQueueGet>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d009      	beq.n	8004858 <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 8004844:	4a23      	ldr	r2, [pc, #140]	; (80048d4 <grabSensorData+0xdc>)
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <grabSensorData+0xe0>)
 8004848:	4614      	mov	r4, r2
 800484a:	461d      	mov	r5, r3
 800484c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800484e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004850:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004854:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 8004858:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <grabSensorData+0xc8>)
 800485a:	795b      	ldrb	r3, [r3, #5]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d113      	bne.n	8004888 <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 8004860:	4b1e      	ldr	r3, [pc, #120]	; (80048dc <grabSensorData+0xe4>)
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	2300      	movs	r3, #0
 8004866:	2200      	movs	r2, #0
 8004868:	491d      	ldr	r1, [pc, #116]	; (80048e0 <grabSensorData+0xe8>)
 800486a:	f00c fda1 	bl	80113b0 <osMessageQueueGet>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d009      	beq.n	8004888 <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 8004874:	4a1a      	ldr	r2, [pc, #104]	; (80048e0 <grabSensorData+0xe8>)
 8004876:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <grabSensorData+0xec>)
 8004878:	4614      	mov	r4, r2
 800487a:	461d      	mov	r5, r3
 800487c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800487e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004880:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004884:	e884 0003 	stmia.w	r4, {r0, r1}

		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8004888:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <grabSensorData+0xc8>)
 800488a:	791b      	ldrb	r3, [r3, #4]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d115      	bne.n	80048bc <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 8004890:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <grabSensorData+0xf0>)
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	2200      	movs	r2, #0
 8004898:	4914      	ldr	r1, [pc, #80]	; (80048ec <grabSensorData+0xf4>)
 800489a:	f00c fd89 	bl	80113b0 <osMessageQueueGet>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 80048a4:	4a11      	ldr	r2, [pc, #68]	; (80048ec <grabSensorData+0xf4>)
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <grabSensorData+0xf8>)
 80048a8:	4614      	mov	r4, r2
 80048aa:	461d      	mov	r5, r3
 80048ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80048b8:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 80048bc:	bf00      	nop
 80048be:	bdb0      	pop	{r4, r5, r7, pc}
 80048c0:	20027c40 	.word	0x20027c40
 80048c4:	200280bc 	.word	0x200280bc
 80048c8:	20028720 	.word	0x20028720
 80048cc:	0801bfc0 	.word	0x0801bfc0
 80048d0:	20027c78 	.word	0x20027c78
 80048d4:	200287e0 	.word	0x200287e0
 80048d8:	0801c02c 	.word	0x0801c02c
 80048dc:	20027b64 	.word	0x20027b64
 80048e0:	2002878c 	.word	0x2002878c
 80048e4:	0801c06c 	.word	0x0801c06c
 80048e8:	20027c6c 	.word	0x20027c6c
 80048ec:	200287a4 	.word	0x200287a4
 80048f0:	0801c044 	.word	0x0801c044

080048f4 <masterEnterRoutine>:

void masterEnterRoutine(void) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80048f8:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <masterEnterRoutine+0x80>)
 80048fa:	789b      	ldrb	r3, [r3, #2]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d105      	bne.n	800490c <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8004900:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <masterEnterRoutine+0x84>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2101      	movs	r1, #1
 8004906:	4618      	mov	r0, r3
 8004908:	f00b ff1c 	bl	8010744 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <masterEnterRoutine+0x80>)
 800490e:	795b      	ldrb	r3, [r3, #5]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d118      	bne.n	8004946 <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8004914:	4b19      	ldr	r3, [pc, #100]	; (800497c <masterEnterRoutine+0x88>)
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	f04f 33ff 	mov.w	r3, #4294967295
 800491c:	2200      	movs	r2, #0
 800491e:	4918      	ldr	r1, [pc, #96]	; (8004980 <masterEnterRoutine+0x8c>)
 8004920:	f00c fd46 	bl	80113b0 <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <masterEnterRoutine+0x8c>)
 8004926:	2201      	movs	r2, #1
 8004928:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800492a:	4b14      	ldr	r3, [pc, #80]	; (800497c <masterEnterRoutine+0x88>)
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	2300      	movs	r3, #0
 8004930:	2200      	movs	r2, #0
 8004932:	4913      	ldr	r1, [pc, #76]	; (8004980 <masterEnterRoutine+0x8c>)
 8004934:	f00c fcc8 	bl	80112c8 <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <masterEnterRoutine+0x90>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004940:	4618      	mov	r0, r3
 8004942:	f00c f90d 	bl	8010b60 <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <masterEnterRoutine+0x80>)
 8004948:	78db      	ldrb	r3, [r3, #3]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d105      	bne.n	800495a <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 800494e:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <masterEnterRoutine+0x94>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2101      	movs	r1, #1
 8004954:	4618      	mov	r0, r3
 8004956:	f00b fef5 	bl	8010744 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <masterEnterRoutine+0x80>)
 800495c:	791b      	ldrb	r3, [r3, #4]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d105      	bne.n	800496e <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 8004962:	4b0a      	ldr	r3, [pc, #40]	; (800498c <masterEnterRoutine+0x98>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2101      	movs	r1, #1
 8004968:	4618      	mov	r0, r3
 800496a:	f00b feeb 	bl	8010744 <osThreadFlagsSet>
	}
}
 800496e:	bf00      	nop
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20027c40 	.word	0x20027c40
 8004978:	20027c4c 	.word	0x20027c4c
 800497c:	20027c7c 	.word	0x20027c7c
 8004980:	200280cc 	.word	0x200280cc
 8004984:	20027c54 	.word	0x20027c54
 8004988:	200280ac 	.word	0x200280ac
 800498c:	200280c4 	.word	0x200280c4

08004990 <masterExitRoutine>:

void masterExitRoutine(void) {
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8004994:	4b15      	ldr	r3, [pc, #84]	; (80049ec <masterExitRoutine+0x5c>)
 8004996:	789b      	ldrb	r3, [r3, #2]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d105      	bne.n	80049a8 <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 800499c:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <masterExitRoutine+0x60>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2102      	movs	r1, #2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f00b fece 	bl	8010744 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 80049a8:	4b10      	ldr	r3, [pc, #64]	; (80049ec <masterExitRoutine+0x5c>)
 80049aa:	795b      	ldrb	r3, [r3, #5]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d107      	bne.n	80049c0 <masterExitRoutine+0x30>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <masterExitRoutine+0x64>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f00c f913 	bl	8010be0 <osTimerStop>
		viveStateVar = 0;
 80049ba:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <masterExitRoutine+0x68>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <masterExitRoutine+0x5c>)
 80049c2:	78db      	ldrb	r3, [r3, #3]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <masterExitRoutine+0x44>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <masterExitRoutine+0x6c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2102      	movs	r1, #2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f00b feb8 	bl	8010744 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <masterExitRoutine+0x5c>)
 80049d6:	791b      	ldrb	r3, [r3, #4]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d105      	bne.n	80049e8 <masterExitRoutine+0x58>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 80049dc:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <masterExitRoutine+0x70>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2102      	movs	r1, #2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f00b feae 	bl	8010744 <osThreadFlagsSet>
	}

}
 80049e8:	bf00      	nop
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20027c40 	.word	0x20027c40
 80049f0:	20027c4c 	.word	0x20027c4c
 80049f4:	20027c54 	.word	0x20027c54
 80049f8:	20000c84 	.word	0x20000c84
 80049fc:	200280ac 	.word	0x200280ac
 8004a00:	200280c4 	.word	0x200280c4

08004a04 <packetizeData>:



void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 8004a12:	f002 f81b 	bl	8006a4c <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// get epoch time from RTC
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 8004a1e:	2200      	movs	r2, #0
 8004a20:	4917      	ldr	r1, [pc, #92]	; (8004a80 <packetizeData+0x7c>)
 8004a22:	4818      	ldr	r0, [pc, #96]	; (8004a84 <packetizeData+0x80>)
 8004a24:	f009 f8c7 	bl	800dbb6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 8004a28:	2200      	movs	r2, #0
 8004a2a:	4917      	ldr	r1, [pc, #92]	; (8004a88 <packetizeData+0x84>)
 8004a2c:	4815      	ldr	r0, [pc, #84]	; (8004a84 <packetizeData+0x80>)
 8004a2e:	f009 f9cc 	bl	800ddca <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 8004a32:	4915      	ldr	r1, [pc, #84]	; (8004a88 <packetizeData+0x84>)
 8004a34:	4812      	ldr	r0, [pc, #72]	; (8004a80 <packetizeData+0x7c>)
 8004a36:	f000 fc35 	bl	80052a4 <RTC_ToEpoch>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	226c      	movs	r2, #108	; 0x6c
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f015 fdf5 	bl	801a638 <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	336c      	adds	r3, #108	; 0x6c
 8004a52:	2218      	movs	r2, #24
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f015 fdee 	bl	801a638 <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3384      	adds	r3, #132	; 0x84
 8004a60:	2228      	movs	r2, #40	; 0x28
 8004a62:	6839      	ldr	r1, [r7, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f015 fde7 	bl	801a638 <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	33ac      	adds	r3, #172	; 0xac
 8004a6e:	2218      	movs	r2, #24
 8004a70:	69b9      	ldr	r1, [r7, #24]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f015 fde0 	bl	801a638 <memcpy>
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	200287cc 	.word	0x200287cc
 8004a84:	200287fc 	.word	0x200287fc
 8004a88:	200287f8 	.word	0x200287f8

08004a8c <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a9a:	2b0f      	cmp	r3, #15
 8004a9c:	d80f      	bhi.n	8004abe <vector_push+0x32>
    	self->items[self->count++] = *item;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004aa2:	1c51      	adds	r1, r2, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6619      	str	r1, [r3, #96]	; 0x60
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	4413      	add	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	440b      	add	r3, r1
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	6811      	ldr	r1, [r2, #0]
 8004ab8:	6019      	str	r1, [r3, #0]
 8004aba:	8892      	ldrh	r2, [r2, #4]
 8004abc:	809a      	strh	r2, [r3, #4]
    }
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <vector_pop>:

Pulse vector_pop(vector *self){
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01c      	beq.n	8004b16 <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae0:	1e5a      	subs	r2, r3, #1
 8004ae2:	6839      	ldr	r1, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4413      	add	r3, r2
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	18ca      	adds	r2, r1, r3
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	6810      	ldr	r0, [r2, #0]
 8004af4:	6018      	str	r0, [r3, #0]
 8004af6:	8892      	ldrh	r2, [r2, #4]
 8004af8:	809a      	strh	r2, [r3, #4]
		self->count--;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afe:	1e5a      	subs	r2, r3, #1
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f107 0308 	add.w	r3, r7, #8
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	6010      	str	r0, [r2, #0]
 8004b10:	889b      	ldrh	r3, [r3, #4]
 8004b12:	8093      	strh	r3, [r2, #4]
 8004b14:	e005      	b.n	8004b22 <vector_pop+0x58>
	}
	return self->items[0];
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	6810      	ldr	r0, [r2, #0]
 8004b1c:	6018      	str	r0, [r3, #0]
 8004b1e:	8892      	ldrh	r2, [r2, #4]
 8004b20:	809a      	strh	r2, [r3, #4]
}
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <vector_get>:

Pulse vector_get(vector *self, int index)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	db12      	blt.n	8004b66 <vector_get+0x38>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d90d      	bls.n	8004b66 <vector_get+0x38>
    	return self->items[index];
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	18ca      	adds	r2, r1, r3
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	6811      	ldr	r1, [r2, #0]
 8004b5e:	6019      	str	r1, [r3, #0]
 8004b60:	8892      	ldrh	r2, [r2, #4]
 8004b62:	809a      	strh	r2, [r3, #4]
 8004b64:	e005      	b.n	8004b72 <vector_get+0x44>
    }
    return self->items[0];
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	6810      	ldr	r0, [r2, #0]
 8004b6c:	6018      	str	r0, [r3, #0]
 8004b6e:	8892      	ldrh	r2, [r2, #4]
 8004b70:	809a      	strh	r2, [r3, #4]
}
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <vector_clear>:

void vector_clear(vector *self){
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
	self->count = 0;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	e00c      	b.n	8004bd4 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2264      	movs	r2, #100	; 0x64
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	3310      	adds	r3, #16
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ffd8 	bl	8004b7e <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	ddef      	ble.n	8004bba <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	33d8      	adds	r3, #216	; 0xd8
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff ffcd 	bl	8004b7e <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff ffc7 	bl	8004b7e <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	889b      	ldrh	r3, [r3, #4]
 8004c0e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004c12:	d303      	bcc.n	8004c1c <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <consume_pulse+0x54>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 8004c1a:	e016      	b.n	8004c4a <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	889b      	ldrh	r3, [r3, #4]
 8004c20:	2b27      	cmp	r3, #39	; 0x27
 8004c22:	d907      	bls.n	8004c34 <consume_pulse+0x34>
		prev_pulse_short = 0;
 8004c24:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <consume_pulse+0x54>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 8004c2a:	6839      	ldr	r1, [r7, #0]
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f813 	bl	8004c58 <process_long_pulse>
}
 8004c32:	e00a      	b.n	8004c4a <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 8004c34:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <consume_pulse+0x54>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d006      	beq.n	8004c4a <consume_pulse+0x4a>
			process_short_pulse(self, p);
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f89c 	bl	8004d7c <process_short_pulse>
			prev_pulse_short = 1;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <consume_pulse+0x54>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000c94 	.word	0x20000c94

08004c58 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d144      	bne.n	8004cf4 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d03f      	beq.n	8004cf4 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8004c7a:	f107 0308 	add.w	r3, r7, #8
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff ff22 	bl	8004aca <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	885a      	ldrh	r2, [r3, #2]
 8004c8a:	897b      	ldrh	r3, [r7, #10]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8004ca2:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 8004ca6:	330d      	adds	r3, #13
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f113 0f1e 	cmn.w	r3, #30
 8004cb2:	db1c      	blt.n	8004cee <process_long_pulse+0x96>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b1d      	cmp	r3, #29
 8004cb8:	dc19      	bgt.n	8004cee <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	885a      	ldrh	r2, [r3, #2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fc fee5 	bl	8001aa4 <reset>

                reset_cycle_long_pulses(self);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa64 	bl	80051a8 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fa7c 	bl	80051de <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fa87 	bl	80051fa <reset_cycle_short_pulses>
 8004cec:	e002      	b.n	8004cf4 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa75 	bl	80051de <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d02d      	beq.n	8004d5c <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	885a      	ldrh	r2, [r3, #2]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	891b      	ldrh	r3, [r3, #8]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	e021      	b.n	8004d56 <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 8004d12:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <process_long_pulse+0x120>)
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d1a:	8a7a      	ldrh	r2, [r7, #18]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 8004d22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d26:	f113 0f1e 	cmn.w	r3, #30
 8004d2a:	db11      	blt.n	8004d50 <process_long_pulse+0xf8>
 8004d2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d30:	2b1d      	cmp	r3, #29
 8004d32:	dc0d      	bgt.n	8004d50 <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	2264      	movs	r2, #100	; 0x64
 8004d38:	fb02 f303 	mul.w	r3, r2, r3
 8004d3c:	3310      	adds	r3, #16
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	4413      	add	r3, r2
 8004d42:	6839      	ldr	r1, [r7, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fea1 	bl	8004a8c <vector_push>
                pulse_classified = 1;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	77fb      	strb	r3, [r7, #31]
                break;
 8004d4e:	e005      	b.n	8004d5c <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	3301      	adds	r3, #1
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	ddda      	ble.n	8004d12 <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 8004d5c:	7ffb      	ldrb	r3, [r7, #31]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004d68:	6839      	ldr	r1, [r7, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff fe8e 	bl	8004a8c <vector_push>
    }
}
 8004d70:	bf00      	nop
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	0801c084 	.word	0x0801c084

08004d7c <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00f      	beq.n	8004dae <process_short_pulse+0x32>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d208      	bcs.n	8004dae <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	33d8      	adds	r3, #216	; 0xd8
 8004da0:	6839      	ldr	r1, [r7, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fe72 	bl	8004a8c <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f805 	bl	8004db8 <process_cycle_fix>
	}
}
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b0a2      	sub	sp, #136	; 0x88
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8004dc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8004dca:	2300      	movs	r3, #0
 8004dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <process_cycle_fix+0x2a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80b7 	beq.w	8004f50 <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b09      	cmp	r3, #9
 8004de8:	d80d      	bhi.n	8004e06 <process_cycle_fix+0x4e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <process_cycle_fix+0x4e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004e06:	2300      	movs	r3, #0
 8004e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e0c:	e090      	b.n	8004f30 <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e14:	2164      	movs	r1, #100	; 0x64
 8004e16:	fb01 f303 	mul.w	r3, r1, r3
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3370      	adds	r3, #112	; 0x70
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 8004e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d07e      	beq.n	8004f26 <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	891a      	ldrh	r2, [r3, #8]
 8004e2c:	49c0      	ldr	r1, [pc, #768]	; (8005130 <process_cycle_fix+0x378>)
 8004e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e32:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004e36:	4413      	add	r3, r2
 8004e38:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e42:	e03e      	b.n	8004ec2 <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8004e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e48:	2264      	movs	r2, #100	; 0x64
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	3310      	adds	r3, #16
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	18d1      	adds	r1, r2, r3
 8004e54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fe66 	bl	8004b2e <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 8004e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004e72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004e76:	4619      	mov	r1, r3
 8004e78:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8004e7c:	1acb      	subs	r3, r1, r3
 8004e7e:	441a      	add	r2, r3
 8004e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e8a:	440b      	add	r3, r1
 8004e8c:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 8004e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004ea0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ea4:	4413      	add	r3, r2
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004eb2:	440b      	add	r3, r1
 8004eb4:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d3bb      	bcc.n	8004e44 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d929      	bls.n	8004f26 <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8004ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004edc:	4413      	add	r3, r2
 8004ede:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004ef6:	440b      	add	r3, r1
 8004ef8:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f06:	4413      	add	r3, r2
 8004f08:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004f20:	440b      	add	r3, r1
 8004f22:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	f77f af6a 	ble.w	8004e0e <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004f48:	4619      	mov	r1, r3
 8004f4a:	f7fc fd29 	bl	80019a0 <process_pulse_lengths>
 8004f4e:	e008      	b.n	8004f62 <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d004      	beq.n	8004f62 <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	1e5a      	subs	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f7fc fd80 	bl	8001a74 <get_phase>
 8004f74:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8004f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f2c0 80b5 	blt.w	80050e8 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8004f7e:	f107 030c 	add.w	r3, r7, #12
 8004f82:	2220      	movs	r2, #32
 8004f84:	2100      	movs	r1, #0
 8004f86:	4618      	mov	r0, r3
 8004f88:	f015 fb61 	bl	801a64e <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8004f8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8004f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9c:	105b      	asrs	r3, r3, #1
 8004f9e:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	891a      	ldrh	r2, [r3, #8]
 8004fa4:	4962      	ldr	r1, [pc, #392]	; (8005130 <process_cycle_fix+0x378>)
 8004fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fa8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004fac:	4413      	add	r3, r2
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004fb8:	440b      	add	r3, r1
 8004fba:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fca:	e04a      	b.n	8005062 <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004fd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fda8 	bl	8004b2e <vector_get>
            uint32_t input_idx = p.input_idx;
 8004fde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004fe2:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004fe4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004fe6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	4413      	add	r3, r2
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004ffa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004ffe:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8005002:	d32b      	bcc.n	800505c <process_cycle_fix+0x2a4>
 8005004:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005008:	f641 2278 	movw	r2, #6776	; 0x1a78
 800500c:	4293      	cmp	r3, r2
 800500e:	d825      	bhi.n	800505c <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8005010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005018:	4413      	add	r3, r2
 800501a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <process_cycle_fix+0x280>
 8005022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800502a:	4413      	add	r3, r2
 800502c:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8005030:	889a      	ldrh	r2, [r3, #4]
 8005032:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005034:	429a      	cmp	r2, r3
 8005036:	d211      	bcs.n	800505c <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8005038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005040:	4413      	add	r3, r2
 8005042:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005046:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 800504a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005052:	4413      	add	r3, r2
 8005054:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8005058:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 800505c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800505e:	3301      	adds	r3, #1
 8005060:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005068:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800506a:	429a      	cmp	r2, r3
 800506c:	d3ae      	bcc.n	8004fcc <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 800506e:	2300      	movs	r3, #0
 8005070:	67bb      	str	r3, [r7, #120]	; 0x78
 8005072:	e034      	b.n	80050de <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8005074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800507c:	4413      	add	r3, r2
 800507e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d028      	beq.n	80050d8 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8005086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005088:	015b      	lsls	r3, r3, #5
 800508a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	4413      	add	r3, r2
 8005092:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8005094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800509c:	4413      	add	r3, r2
 800509e:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80050a2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050ae:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005134 <process_cycle_fix+0x37c>
 80050b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80050b6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005138 <process_cycle_fix+0x380>
 80050ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68d9      	ldr	r1, [r3, #12]
 80050ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050d2:	3204      	adds	r2, #4
 80050d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 80050d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050da:	3301      	adds	r3, #1
 80050dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d3c5      	bcc.n	8005074 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 80050e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	db06      	blt.n	80050fc <process_cycle_fix+0x344>
 80050ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	bf0c      	ite	eq
 80050f4:	2301      	moveq	r3, #1
 80050f6:	2300      	movne	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	e008      	b.n	800510e <process_cycle_fix+0x356>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf0c      	ite	eq
 8005108:	2301      	moveq	r3, #1
 800510a:	2300      	movne	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d02b      	beq.n	800516a <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	891a      	ldrh	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 800511c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511e:	2b00      	cmp	r3, #0
 8005120:	db0c      	blt.n	800513c <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b04      	cmp	r3, #4
 8005128:	d908      	bls.n	800513c <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 800512a:	22c8      	movs	r2, #200	; 0xc8
 800512c:	e007      	b.n	800513e <process_cycle_fix+0x386>
 800512e:	bf00      	nop
 8005130:	0801c084 	.word	0x0801c084
 8005134:	40490fdb 	.word	0x40490fdb
 8005138:	46023400 	.word	0x46023400
 800513c:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005152:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f7fd fb31 	bl	80027cc <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f81c 	bl	80051a8 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f834 	bl	80051de <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f83f 	bl	80051fa <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	891a      	ldrh	r2, [r3, #8]
 8005180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005182:	b29b      	uxth	r3, r3
 8005184:	4413      	add	r3, r2
 8005186:	b29b      	uxth	r3, r3
 8005188:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800518c:	330d      	adds	r3, #13
 800518e:	b29a      	uxth	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	60da      	str	r2, [r3, #12]
}
 800519e:	bf00      	nop
 80051a0:	3788      	adds	r7, #136	; 0x88
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop

080051a8 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	e00c      	b.n	80051d0 <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2264      	movs	r2, #100	; 0x64
 80051ba:	fb02 f303 	mul.w	r3, r2, r3
 80051be:	3310      	adds	r3, #16
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	4413      	add	r3, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff fcda 	bl	8004b7e <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3301      	adds	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	ddef      	ble.n	80051b6 <reset_cycle_long_pulses+0xe>
	}
}
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff fcc6 	bl	8004b7e <vector_clear>
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	33d8      	adds	r3, #216	; 0xd8
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff fcb9 	bl	8004b7e <vector_clear>
}
 800520c:	bf00      	nop
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0

}
 8005218:	bf00      	nop
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8005222:	b480      	push	{r7}
 8005224:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8005226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800523a:	bf00      	nop
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <MX_RTC_Init+0x34>)
 800524a:	4a0c      	ldr	r2, [pc, #48]	; (800527c <MX_RTC_Init+0x38>)
 800524c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <MX_RTC_Init+0x34>)
 8005250:	2200      	movs	r2, #0
 8005252:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8005254:	4b08      	ldr	r3, [pc, #32]	; (8005278 <MX_RTC_Init+0x34>)
 8005256:	220f      	movs	r2, #15
 8005258:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800525a:	4b07      	ldr	r3, [pc, #28]	; (8005278 <MX_RTC_Init+0x34>)
 800525c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005260:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005262:	4805      	ldr	r0, [pc, #20]	; (8005278 <MX_RTC_Init+0x34>)
 8005264:	f008 fb45 	bl	800d8f2 <HAL_RTC_Init>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 800526e:	f7ff f98f 	bl	8004590 <Error_Handler>
  }

}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	200287fc 	.word	0x200287fc
 800527c:	40002800 	.word	0x40002800

08005280 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a04      	ldr	r2, [pc, #16]	; (80052a0 <HAL_RTC_MspInit+0x20>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d101      	bne.n	8005296 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005292:	f7ff ffc6 	bl	8005222 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40002800 	.word	0x40002800

080052a4 <RTC_ToEpoch>:
  }
} 

/* USER CODE BEGIN 1 */
// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	785b      	ldrb	r3, [r3, #1]
 80052b2:	f1c3 030e 	rsb	r3, r3, #14
 80052b6:	4a44      	ldr	r2, [pc, #272]	; (80053c8 <RTC_ToEpoch+0x124>)
 80052b8:	fb82 1203 	smull	r1, r2, r2, r3
 80052bc:	1052      	asrs	r2, r2, #1
 80052be:	17db      	asrs	r3, r3, #31
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	75fb      	strb	r3, [r7, #23]
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	78db      	ldrb	r3, [r3, #3]
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 80052d6:	3310      	adds	r3, #16
 80052d8:	82bb      	strh	r3, [r7, #20]
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	785a      	ldrb	r2, [r3, #1]
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	4619      	mov	r1, r3
 80052e2:	0049      	lsls	r1, r1, #1
 80052e4:	440b      	add	r3, r1
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	4413      	add	r3, r2
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	3b03      	subs	r3, #3
 80052f0:	74fb      	strb	r3, [r7, #19]

	// Gregorian calendar date compute
	JDN = date->Date;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	789b      	ldrb	r3, [r3, #2]
 80052f6:	60fb      	str	r3, [r7, #12]
	JDN += (153 * m + 2) / 5;
 80052f8:	7cfa      	ldrb	r2, [r7, #19]
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4413      	add	r3, r2
 8005300:	011a      	lsls	r2, r3, #4
 8005302:	4413      	add	r3, r2
 8005304:	3302      	adds	r3, #2
 8005306:	4a31      	ldr	r2, [pc, #196]	; (80053cc <RTC_ToEpoch+0x128>)
 8005308:	fb82 1203 	smull	r1, r2, r2, r3
 800530c:	1052      	asrs	r2, r2, #1
 800530e:	17db      	asrs	r3, r3, #31
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	461a      	mov	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
	JDN += 365 * y;
 800531a:	8abb      	ldrh	r3, [r7, #20]
 800531c:	f240 126d 	movw	r2, #365	; 0x16d
 8005320:	fb02 f303 	mul.w	r3, r2, r3
 8005324:	461a      	mov	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
	JDN += y / 4;
 800532c:	8abb      	ldrh	r3, [r7, #20]
 800532e:	089b      	lsrs	r3, r3, #2
 8005330:	b29b      	uxth	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
	JDN += -y / 100;
 800533a:	8abb      	ldrh	r3, [r7, #20]
 800533c:	425b      	negs	r3, r3
 800533e:	4a24      	ldr	r2, [pc, #144]	; (80053d0 <RTC_ToEpoch+0x12c>)
 8005340:	fb82 1203 	smull	r1, r2, r2, r3
 8005344:	1152      	asrs	r2, r2, #5
 8005346:	17db      	asrs	r3, r3, #31
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	461a      	mov	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
	JDN += y / 400;
 8005352:	8abb      	ldrh	r3, [r7, #20]
 8005354:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <RTC_ToEpoch+0x12c>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	09db      	lsrs	r3, r3, #7
 800535c:	b29b      	uxth	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
	JDN = JDN - 32045;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 800536c:	3b2d      	subs	r3, #45	; 0x2d
 800536e:	60fb      	str	r3, [r7, #12]
	JDN = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4b18      	ldr	r3, [pc, #96]	; (80053d4 <RTC_ToEpoch+0x130>)
 8005374:	4413      	add	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
	JDN *= 86400;                     // Days to seconds
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <RTC_ToEpoch+0x134>)
 800537c:	fb02 f303 	mul.w	r3, r2, r3
 8005380:	60fb      	str	r3, [r7, #12]
	JDN += time->Hours * 3600;    // ... and today seconds
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800538c:	fb03 f302 	mul.w	r3, r3, r2
 8005390:	461a      	mov	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
	JDN += time->Minutes * 60;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	785b      	ldrb	r3, [r3, #1]
 800539c:	461a      	mov	r2, r3
 800539e:	4613      	mov	r3, r2
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	461a      	mov	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
	JDN += time->Seconds;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	789b      	ldrb	r3, [r3, #2]
 80053b2:	461a      	mov	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

	return JDN;
 80053ba:	68fb      	ldr	r3, [r7, #12]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	2aaaaaab 	.word	0x2aaaaaab
 80053cc:	66666667 	.word	0x66666667
 80053d0:	51eb851f 	.word	0x51eb851f
 80053d4:	ffdac274 	.word	0xffdac274
 80053d8:	00015180 	.word	0x00015180

080053dc <RTC_FromEpoch>:

//
//// Convert epoch time to Date/Time structures
void RTC_FromEpoch(uint32_t epoch, RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b095      	sub	sp, #84	; 0x54
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;
	uint32_t m;
	int16_t  year  = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t  month = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t  dow   = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t  mday  = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t  hour  = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  min   = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t  sec   = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint64_t JD    = 0;
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	f04f 0400 	mov.w	r4, #0
 800541a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	uint64_t JDN   = 0;
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	f04f 0400 	mov.w	r4, #0
 8005426:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	JD  = ((epoch + 43200) / (86400 >>1 )) + (2440587 << 1) + 1;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8005430:	33c0      	adds	r3, #192	; 0xc0
 8005432:	4a7c      	ldr	r2, [pc, #496]	; (8005624 <RTC_FromEpoch+0x248>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	0bda      	lsrs	r2, r3, #15
 800543a:	4b7b      	ldr	r3, [pc, #492]	; (8005628 <RTC_FromEpoch+0x24c>)
 800543c:	4413      	add	r3, r2
 800543e:	f04f 0400 	mov.w	r4, #0
 8005442:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	JDN = JD >> 1;
 8005446:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800544a:	0864      	lsrs	r4, r4, #1
 800544c:	ea4f 0333 	mov.w	r3, r3, rrx
 8005450:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    tm = epoch; t1 = tm / 60; sec  = tm - (t1 * 60);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	4a74      	ldr	r2, [pc, #464]	; (800562c <RTC_FromEpoch+0x250>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	b29a      	uxth	r2, r3
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	b29b      	uxth	r3, r3
 800546c:	4619      	mov	r1, r3
 800546e:	0109      	lsls	r1, r1, #4
 8005470:	1acb      	subs	r3, r1, r3
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	b29b      	uxth	r3, r3
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	b29b      	uxth	r3, r3
 800547a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    tm = t1;    t1 = tm / 60; min  = tm - (t1 * 60);
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	4a69      	ldr	r2, [pc, #420]	; (800562c <RTC_FromEpoch+0x250>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	62bb      	str	r3, [r7, #40]	; 0x28
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	b29a      	uxth	r2, r3
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	b29b      	uxth	r3, r3
 8005496:	4619      	mov	r1, r3
 8005498:	0109      	lsls	r1, r1, #4
 800549a:	1acb      	subs	r3, r1, r3
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	b29b      	uxth	r3, r3
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    tm = t1;    t1 = tm / 24; hour = tm - (t1 * 24);
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ae:	4a60      	ldr	r2, [pc, #384]	; (8005630 <RTC_FromEpoch+0x254>)
 80054b0:	fba2 2303 	umull	r2, r3, r2, r3
 80054b4:	091b      	lsrs	r3, r3, #4
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	b29b      	uxth	r3, r3
 80054c0:	4619      	mov	r1, r3
 80054c2:	0049      	lsls	r1, r1, #1
 80054c4:	440b      	add	r3, r1
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    dow   = JDN % 7;
 80054d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80054d6:	f04f 0207 	mov.w	r2, #7
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	f7fb fb15 	bl	8000b0c <__aeabi_uldivmod>
 80054e2:	461c      	mov	r4, r3
 80054e4:	4613      	mov	r3, r2
 80054e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    a     = JDN + 32044;
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 80054f0:	332c      	adds	r3, #44	; 0x2c
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
    b     = ((4 * a) + 3) / 146097;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	3303      	adds	r3, #3
 80054fa:	4a4e      	ldr	r2, [pc, #312]	; (8005634 <RTC_FromEpoch+0x258>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	0bdb      	lsrs	r3, r3, #15
 8005502:	623b      	str	r3, [r7, #32]
    c     = a - ((146097 * b) / 4);
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	4a4c      	ldr	r2, [pc, #304]	; (8005638 <RTC_FromEpoch+0x25c>)
 8005508:	fb02 f303 	mul.w	r3, r2, r3
 800550c:	089b      	lsrs	r3, r3, #2
 800550e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	61fb      	str	r3, [r7, #28]
    d     = ((4 * c) + 3) / 1461;
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	3303      	adds	r3, #3
 800551a:	4a48      	ldr	r2, [pc, #288]	; (800563c <RTC_FromEpoch+0x260>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	09db      	lsrs	r3, r3, #7
 8005522:	61bb      	str	r3, [r7, #24]
    e     = c - ((1461 * d) / 4);
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f240 52b5 	movw	r2, #1461	; 0x5b5
 800552a:	fb02 f303 	mul.w	r3, r2, r3
 800552e:	089b      	lsrs	r3, r3, #2
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]
    m     = ((5 * e) + 2) / 153;
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	3302      	adds	r3, #2
 8005540:	4a3f      	ldr	r2, [pc, #252]	; (8005640 <RTC_FromEpoch+0x264>)
 8005542:	fba2 2303 	umull	r2, r3, r2, r3
 8005546:	09db      	lsrs	r3, r3, #7
 8005548:	613b      	str	r3, [r7, #16]
    mday  = e - (((153 * m) + 2) / 5) + 1;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	b299      	uxth	r1, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4613      	mov	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	4413      	add	r3, r2
 8005556:	011a      	lsls	r2, r3, #4
 8005558:	4413      	add	r3, r2
 800555a:	3302      	adds	r3, #2
 800555c:	4a39      	ldr	r2, [pc, #228]	; (8005644 <RTC_FromEpoch+0x268>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	089b      	lsrs	r3, r3, #2
 8005564:	b29b      	uxth	r3, r3
 8005566:	1acb      	subs	r3, r1, r3
 8005568:	b29b      	uxth	r3, r3
 800556a:	3301      	adds	r3, #1
 800556c:	b29b      	uxth	r3, r3
 800556e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    month = m + 3 - (12 * (m / 10));
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	b29a      	uxth	r2, r3
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4932      	ldr	r1, [pc, #200]	; (8005644 <RTC_FromEpoch+0x268>)
 800557a:	fba1 1303 	umull	r1, r3, r1, r3
 800557e:	08db      	lsrs	r3, r3, #3
 8005580:	b29b      	uxth	r3, r3
 8005582:	4619      	mov	r1, r3
 8005584:	0049      	lsls	r1, r1, #1
 8005586:	440b      	add	r3, r1
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	b29b      	uxth	r3, r3
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	b29b      	uxth	r3, r3
 8005590:	3303      	adds	r3, #3
 8005592:	b29b      	uxth	r3, r3
 8005594:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    year  = (100 * b) + d - 4800 + (m / 10);
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	b29b      	uxth	r3, r3
 800559c:	461a      	mov	r2, r3
 800559e:	0092      	lsls	r2, r2, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	461a      	mov	r2, r3
 80055a4:	0091      	lsls	r1, r2, #2
 80055a6:	461a      	mov	r2, r3
 80055a8:	460b      	mov	r3, r1
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	4413      	add	r3, r2
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4922      	ldr	r1, [pc, #136]	; (8005644 <RTC_FromEpoch+0x268>)
 80055bc:	fba1 1303 	umull	r1, r3, r1, r3
 80055c0:	08db      	lsrs	r3, r3, #3
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	4413      	add	r3, r2
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    date->Year    = year - 2000;
 80055d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	3330      	adds	r3, #48	; 0x30
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	70da      	strb	r2, [r3, #3]
    date->Month   = month;
 80055e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	705a      	strb	r2, [r3, #1]
    date->Date    = mday;
 80055ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	709a      	strb	r2, [r3, #2]
    date->WeekDay = dow;
 80055f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	701a      	strb	r2, [r3, #0]
    time->Hours   = hour;
 80055fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005602:	b2da      	uxtb	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	701a      	strb	r2, [r3, #0]
    time->Minutes = min;
 8005608:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800560c:	b2da      	uxtb	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	705a      	strb	r2, [r3, #1]
    time->Seconds = sec;
 8005612:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005616:	b2da      	uxtb	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	709a      	strb	r2, [r3, #2]
}
 800561c:	bf00      	nop
 800561e:	3754      	adds	r7, #84	; 0x54
 8005620:	46bd      	mov	sp, r7
 8005622:	bd90      	pop	{r4, r7, pc}
 8005624:	c22e4507 	.word	0xc22e4507
 8005628:	004a7b17 	.word	0x004a7b17
 800562c:	88888889 	.word	0x88888889
 8005630:	aaaaaaab 	.word	0xaaaaaaab
 8005634:	396b06bd 	.word	0x396b06bd
 8005638:	00023ab1 	.word	0x00023ab1
 800563c:	166db073 	.word	0x166db073
 8005640:	d62b80d7 	.word	0xd62b80d7
 8005644:	cccccccd 	.word	0xcccccccd

08005648 <LL_AHB3_GRP1_EnableClock>:
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005656:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4313      	orrs	r3, r2
 800565e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800566c:	68fb      	ldr	r3, [r7, #12]
}
 800566e:	bf00      	nop
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800567e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005682:	f7ff ffe1 	bl	8005648 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005686:	2200      	movs	r2, #0
 8005688:	210f      	movs	r1, #15
 800568a:	f06f 0001 	mvn.w	r0, #1
 800568e:	f002 ff10 	bl	80084b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8005692:	2200      	movs	r2, #0
 8005694:	210f      	movs	r1, #15
 8005696:	202c      	movs	r0, #44	; 0x2c
 8005698:	f002 ff0b 	bl	80084b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 800569c:	2200      	movs	r2, #0
 800569e:	210f      	movs	r1, #15
 80056a0:	202d      	movs	r0, #45	; 0x2d
 80056a2:	f002 ff06 	bl	80084b2 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80056a6:	bf00      	nop
 80056a8:	bd80      	pop	{r7, pc}

080056aa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80056b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4313      	orrs	r3, r2
 80056c0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80056c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4013      	ands	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80056ce:	68fb      	ldr	r3, [r7, #12]
}
 80056d0:	bf00      	nop
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08c      	sub	sp, #48	; 0x30
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80056ec:	2200      	movs	r2, #0
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	2019      	movs	r0, #25
 80056f2:	f002 fede 	bl	80084b2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80056f6:	2019      	movs	r0, #25
 80056f8:	f002 fef5 	bl	80084e6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80056fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005700:	f7ff ffd3 	bl	80056aa <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005704:	f107 0208 	add.w	r2, r7, #8
 8005708:	f107 030c 	add.w	r3, r7, #12
 800570c:	4611      	mov	r1, r2
 800570e:	4618      	mov	r0, r3
 8005710:	f007 fbe2 	bl	800ced8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005714:	f007 fbca 	bl	800ceac <HAL_RCC_GetPCLK2Freq>
 8005718:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	4a12      	ldr	r2, [pc, #72]	; (8005768 <HAL_InitTick+0x8c>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	0c9b      	lsrs	r3, r3, #18
 8005724:	3b01      	subs	r3, #1
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005728:	4b10      	ldr	r3, [pc, #64]	; (800576c <HAL_InitTick+0x90>)
 800572a:	4a11      	ldr	r2, [pc, #68]	; (8005770 <HAL_InitTick+0x94>)
 800572c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800572e:	4b0f      	ldr	r3, [pc, #60]	; (800576c <HAL_InitTick+0x90>)
 8005730:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005734:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005736:	4a0d      	ldr	r2, [pc, #52]	; (800576c <HAL_InitTick+0x90>)
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800573c:	4b0b      	ldr	r3, [pc, #44]	; (800576c <HAL_InitTick+0x90>)
 800573e:	2200      	movs	r2, #0
 8005740:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005742:	4b0a      	ldr	r3, [pc, #40]	; (800576c <HAL_InitTick+0x90>)
 8005744:	2200      	movs	r2, #0
 8005746:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005748:	4808      	ldr	r0, [pc, #32]	; (800576c <HAL_InitTick+0x90>)
 800574a:	f008 fc2f 	bl	800dfac <HAL_TIM_Base_Init>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d104      	bne.n	800575e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005754:	4805      	ldr	r0, [pc, #20]	; (800576c <HAL_InitTick+0x90>)
 8005756:	f008 fcab 	bl	800e0b0 <HAL_TIM_Base_Start_IT>
 800575a:	4603      	mov	r3, r0
 800575c:	e000      	b.n	8005760 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
}
 8005760:	4618      	mov	r0, r3
 8005762:	3730      	adds	r7, #48	; 0x30
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	431bde83 	.word	0x431bde83
 800576c:	20028820 	.word	0x20028820
 8005770:	40012c00 	.word	0x40012c00

08005774 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8005774:	b590      	push	{r4, r7, lr}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e072      	b.n	800586c <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 f8a4 	bl	80068e8 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2201      	movs	r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6819      	ldr	r1, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80057be:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 80057c6:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80057cc:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 80057d2:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 80057d8:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 80057de:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 80057e4:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	7b1b      	ldrb	r3, [r3, #12]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d107      	bne.n	8005806 <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005804:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	43d2      	mvns	r2, r2
 800581c:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005836:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681c      	ldr	r4, [r3, #0]
 8005840:	4610      	mov	r0, r2
 8005842:	f000 f952 	bl	8005aea <TSC_extract_groups>
 8005846:	4603      	mov	r3, r0
 8005848:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0203 	bic.w	r2, r2, #3
 8005858:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2203      	movs	r2, #3
 8005860:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	bd90      	pop	{r4, r7, pc}

08005874 <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_TSC_Start_IT+0x16>
 8005886:	2302      	movs	r3, #2
 8005888:	e04b      	b.n	8005922 <HAL_TSC_Start_IT+0xae>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0201 	orr.w	r2, r2, #1
 80058a8:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d108      	bne.n	80058c6 <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0202 	orr.w	r2, r2, #2
 80058c2:	605a      	str	r2, [r3, #4]
 80058c4:	e007      	b.n	80058d6 <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0202 	bic.w	r2, r2, #2
 80058d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2203      	movs	r2, #3
 80058dc:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d108      	bne.n	80058f8 <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0210 	bic.w	r2, r2, #16
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	e007      	b.n	8005908 <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0210 	orr.w	r2, r2, #16
 8005906:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0202 	orr.w	r2, r2, #2
 8005916:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	3310      	adds	r3, #16
 8005946:	2101      	movs	r1, #1
 8005948:	fa01 f303 	lsl.w	r3, r1, r3
 800594c:	401a      	ands	r2, r3
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	3310      	adds	r3, #16
 8005956:	2101      	movs	r1, #1
 8005958:	fa01 f303 	lsl.w	r3, r1, r3
 800595c:	429a      	cmp	r2, r3
 800595e:	bf0c      	ite	eq
 8005960:	2301      	moveq	r3, #1
 8005962:	2300      	movne	r3, #0
 8005964:	b2db      	uxtb	r3, r3
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	685b      	ldr	r3, [r3, #4]
}
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 8005996:	b590      	push	{r4, r7, lr}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_TSC_IOConfig+0x18>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e032      	b.n	8005a14 <HAL_TSC_IOConfig+0x7e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0202 	bic.w	r2, r2, #2
 80059c4:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	43d2      	mvns	r2, r2
 80059dc:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6819      	ldr	r1, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	6892      	ldr	r2, [r2, #8]
 80059f6:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681c      	ldr	r4, [r3, #0]
 8005a00:	4610      	mov	r0, r2
 8005a02:	f000 f872 	bl	8005aea <TSC_extract_groups>
 8005a06:	4603      	mov	r3, r0
 8005a08:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd90      	pop	{r4, r7, pc}

08005a1c <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_TSC_IODischarge+0x1a>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e01c      	b.n	8005a70 <HAL_TSC_IODischarge+0x54>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d108      	bne.n	8005a56 <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0210 	bic.w	r2, r2, #16
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	e007      	b.n	8005a66 <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0210 	orr.w	r2, r2, #16
 8005a64:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d103      	bne.n	8005a9a <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2201      	movs	r2, #1
 8005a98:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d10b      	bne.n	8005ac0 <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2202      	movs	r2, #2
 8005aae:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f80c 	bl	8005ad6 <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 8005abe:	e006      	b.n	8005ace <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fb61 	bl	8006190 <HAL_TSC_ConvCpltCallback>
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8005af6:	2300      	movs	r3, #0
 8005af8:	60bb      	str	r3, [r7, #8]
 8005afa:	e011      	b.n	8005b20 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	220f      	movs	r2, #15
 8005b02:	409a      	lsls	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4013      	ands	r3, r2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d006      	beq.n	8005b1a <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	60bb      	str	r3, [r7, #8]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	d9ea      	bls.n	8005afc <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8005b26:	68fb      	ldr	r3, [r7, #12]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b38:	bf00      	nop
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b42:	b480      	push	{r7}
 8005b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b46:	e7fe      	b.n	8005b46 <HardFault_Handler+0x4>

08005b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b4c:	e7fe      	b.n	8005b4c <MemManage_Handler+0x4>

08005b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b52:	e7fe      	b.n	8005b52 <BusFault_Handler+0x4>

08005b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b58:	e7fe      	b.n	8005b58 <UsageFault_Handler+0x4>

08005b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b5e:	bf00      	nop
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005b6c:	2004      	movs	r0, #4
 8005b6e:	f003 f9c7 	bl	8008f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 8005b72:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <EXTI2_IRQHandler+0x1c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2104      	movs	r1, #4
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f00a fde3 	bl	8010744 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8005b7e:	bf00      	nop
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	200280ac 	.word	0x200280ac

08005b88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005b8c:	4802      	ldr	r0, [pc, #8]	; (8005b98 <DMA1_Channel1_IRQHandler+0x10>)
 8005b8e:	f002 fec8 	bl	8008922 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005b92:	bf00      	nop
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20027af8 	.word	0x20027af8

08005b9c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005ba0:	4802      	ldr	r0, [pc, #8]	; (8005bac <USB_LP_IRQHandler+0x10>)
 8005ba2:	f005 fa5c 	bl	800b05e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005ba6:	bf00      	nop
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	20029f08 	.word	0x20029f08

08005bb0 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8005bb4:	4802      	ldr	r0, [pc, #8]	; (8005bc0 <COMP_IRQHandler+0x10>)
 8005bb6:	f002 fb13 	bl	80081e0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8005bba:	bf00      	nop
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	200280d4 	.word	0x200280d4

08005bc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005bc8:	2020      	movs	r0, #32
 8005bca:	f003 f999 	bl	8008f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005bce:	bf00      	nop
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005bd8:	4803      	ldr	r0, [pc, #12]	; (8005be8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005bda:	f008 fba7 	bl	800e32c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005bde:	4803      	ldr	r0, [pc, #12]	; (8005bec <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005be0:	f008 fba4 	bl	800e32c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005be4:	bf00      	nop
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20028820 	.word	0x20028820
 8005bec:	200288a0 	.word	0x200288a0

08005bf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005bf4:	4802      	ldr	r0, [pc, #8]	; (8005c00 <TIM2_IRQHandler+0x10>)
 8005bf6:	f008 fb99 	bl	800e32c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005bfa:	bf00      	nop
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20028860 	.word	0x20028860

08005c04 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005c08:	4802      	ldr	r0, [pc, #8]	; (8005c14 <I2C1_EV_IRQHandler+0x10>)
 8005c0a:	f003 fd8f 	bl	800972c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20028264 	.word	0x20028264

08005c18 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005c1c:	f013 fafc 	bl	8019218 <HW_IPCC_Tx_Handler>

  return;
 8005c20:	bf00      	nop
}
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8005c28:	f013 fa9c 	bl	8019164 <HW_IPCC_Rx_Handler>
  return;
 8005c2c:	bf00      	nop
}
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 8005c34:	4802      	ldr	r0, [pc, #8]	; (8005c40 <TSC_IRQHandler+0x10>)
 8005c36:	f7ff ff21 	bl	8005a7c <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 8005c3a:	bf00      	nop
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20028914 	.word	0x20028914

08005c44 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8005c44:	b40c      	push	{r2, r3}
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	460a      	mov	r2, r1
 8005c50:	71fb      	strb	r3, [r7, #7]
 8005c52:	4613      	mov	r3, r2
 8005c54:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	b002      	add	sp, #8
 8005c62:	4770      	bx	lr

08005c64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005c68:	4b26      	ldr	r3, [pc, #152]	; (8005d04 <SystemInit+0xa0>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005c6e:	4b25      	ldr	r3, [pc, #148]	; (8005d04 <SystemInit+0xa0>)
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c74:	4a23      	ldr	r2, [pc, #140]	; (8005d04 <SystemInit+0xa0>)
 8005c76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c88:	f043 0301 	orr.w	r3, r3, #1
 8005c8c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8005c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c92:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005c96:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca2:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <SystemInit+0xa4>)
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cb4:	f023 0305 	bic.w	r3, r3, #5
 8005cb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cc8:	f023 0301 	bic.w	r3, r3, #1
 8005ccc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd4:	4a0d      	ldr	r2, [pc, #52]	; (8005d0c <SystemInit+0xa8>)
 8005cd6:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cdc:	4a0b      	ldr	r2, [pc, #44]	; (8005d0c <SystemInit+0xa8>)
 8005cde:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	619a      	str	r2, [r3, #24]
}
 8005cf8:	bf00      	nop
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	e000ed00 	.word	0xe000ed00
 8005d08:	faf6fefb 	.word	0xfaf6fefb
 8005d0c:	22041000 	.word	0x22041000

08005d10 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	4a47      	ldr	r2, [pc, #284]	; (8005e40 <SystemCoreClockUpdate+0x130>)
 8005d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 030c 	and.w	r3, r3, #12
 8005d34:	2b0c      	cmp	r3, #12
 8005d36:	d867      	bhi.n	8005e08 <SystemCoreClockUpdate+0xf8>
 8005d38:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <SystemCoreClockUpdate+0x30>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005d75 	.word	0x08005d75
 8005d44:	08005e09 	.word	0x08005e09
 8005d48:	08005e09 	.word	0x08005e09
 8005d4c:	08005e09 	.word	0x08005e09
 8005d50:	08005d7d 	.word	0x08005d7d
 8005d54:	08005e09 	.word	0x08005e09
 8005d58:	08005e09 	.word	0x08005e09
 8005d5c:	08005e09 	.word	0x08005e09
 8005d60:	08005d85 	.word	0x08005d85
 8005d64:	08005e09 	.word	0x08005e09
 8005d68:	08005e09 	.word	0x08005e09
 8005d6c:	08005e09 	.word	0x08005e09
 8005d70:	08005d8d 	.word	0x08005d8d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8005d74:	4a33      	ldr	r2, [pc, #204]	; (8005e44 <SystemCoreClockUpdate+0x134>)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6013      	str	r3, [r2, #0]
      break;
 8005d7a:	e049      	b.n	8005e10 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8005d7c:	4b31      	ldr	r3, [pc, #196]	; (8005e44 <SystemCoreClockUpdate+0x134>)
 8005d7e:	4a32      	ldr	r2, [pc, #200]	; (8005e48 <SystemCoreClockUpdate+0x138>)
 8005d80:	601a      	str	r2, [r3, #0]
      break;
 8005d82:	e045      	b.n	8005e10 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005d84:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <SystemCoreClockUpdate+0x134>)
 8005d86:	4a31      	ldr	r2, [pc, #196]	; (8005e4c <SystemCoreClockUpdate+0x13c>)
 8005d88:	601a      	str	r2, [r3, #0]
      break;
 8005d8a:	e041      	b.n	8005e10 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	091b      	lsrs	r3, r3, #4
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	3301      	adds	r3, #1
 8005da6:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d105      	bne.n	8005dba <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8005dae:	4a26      	ldr	r2, [pc, #152]	; (8005e48 <SystemCoreClockUpdate+0x138>)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	e00d      	b.n	8005dd6 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d105      	bne.n	8005dcc <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8005dc0:	4a22      	ldr	r2, [pc, #136]	; (8005e4c <SystemCoreClockUpdate+0x13c>)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	e004      	b.n	8005dd6 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd4:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	0a1b      	lsrs	r3, r3, #8
 8005dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	fb02 f303 	mul.w	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	0f5b      	lsrs	r3, r3, #29
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	3301      	adds	r3, #1
 8005df8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e02:	4a10      	ldr	r2, [pc, #64]	; (8005e44 <SystemCoreClockUpdate+0x134>)
 8005e04:	6013      	str	r3, [r2, #0]
      break;
 8005e06:	e003      	b.n	8005e10 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8005e08:	4a0e      	ldr	r2, [pc, #56]	; (8005e44 <SystemCoreClockUpdate+0x134>)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6013      	str	r3, [r2, #0]
      break;
 8005e0e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	091b      	lsrs	r3, r3, #4
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	4a0c      	ldr	r2, [pc, #48]	; (8005e50 <SystemCoreClockUpdate+0x140>)
 8005e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e22:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8005e24:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <SystemCoreClockUpdate+0x134>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	4a05      	ldr	r2, [pc, #20]	; (8005e44 <SystemCoreClockUpdate+0x134>)
 8005e30:	6013      	str	r3, [r2, #0]

}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	0801c0e8 	.word	0x0801c0e8
 8005e44:	20000078 	.word	0x20000078
 8005e48:	00f42400 	.word	0x00f42400
 8005e4c:	01e84800 	.word	0x01e84800
 8005e50:	0801c088 	.word	0x0801c088

08005e54 <LL_AHB2_GRP1_EnableClock>:
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4013      	ands	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005e78:	68fb      	ldr	r3, [r7, #12]
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <LL_APB1_GRP1_EnableClock>:
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
}
 8005eac:	bf00      	nop
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <LL_APB2_GRP1_EnableClock>:
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005edc:	68fb      	ldr	r3, [r7, #12]
}
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08e      	sub	sp, #56	; 0x38
 8005ef0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	605a      	str	r2, [r3, #4]
 8005efc:	609a      	str	r2, [r3, #8]
 8005efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f00:	f107 031c 	add.w	r3, r7, #28
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	605a      	str	r2, [r3, #4]
 8005f0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	609a      	str	r2, [r3, #8]
 8005f16:	60da      	str	r2, [r3, #12]
 8005f18:	611a      	str	r2, [r3, #16]
 8005f1a:	615a      	str	r2, [r3, #20]
 8005f1c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005f1e:	4b3d      	ldr	r3, [pc, #244]	; (8006014 <MX_TIM2_Init+0x128>)
 8005f20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8005f26:	4b3b      	ldr	r3, [pc, #236]	; (8006014 <MX_TIM2_Init+0x128>)
 8005f28:	f240 623f 	movw	r2, #1599	; 0x63f
 8005f2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005f2e:	4b39      	ldr	r3, [pc, #228]	; (8006014 <MX_TIM2_Init+0x128>)
 8005f30:	2220      	movs	r2, #32
 8005f32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8005f34:	4b37      	ldr	r3, [pc, #220]	; (8006014 <MX_TIM2_Init+0x128>)
 8005f36:	220a      	movs	r2, #10
 8005f38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f3a:	4b36      	ldr	r3, [pc, #216]	; (8006014 <MX_TIM2_Init+0x128>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f40:	4b34      	ldr	r3, [pc, #208]	; (8006014 <MX_TIM2_Init+0x128>)
 8005f42:	2280      	movs	r2, #128	; 0x80
 8005f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005f46:	4833      	ldr	r0, [pc, #204]	; (8006014 <MX_TIM2_Init+0x128>)
 8005f48:	f008 f830 	bl	800dfac <HAL_TIM_Base_Init>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005f52:	f7fe fb1d 	bl	8004590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f60:	4619      	mov	r1, r3
 8005f62:	482c      	ldr	r0, [pc, #176]	; (8006014 <MX_TIM2_Init+0x128>)
 8005f64:	f008 fc98 	bl	800e898 <HAL_TIM_ConfigClockSource>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005f6e:	f7fe fb0f 	bl	8004590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005f72:	4828      	ldr	r0, [pc, #160]	; (8006014 <MX_TIM2_Init+0x128>)
 8005f74:	f008 f8fb 	bl	800e16e <HAL_TIM_PWM_Init>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005f7e:	f7fe fb07 	bl	8004590 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8005f82:	4824      	ldr	r0, [pc, #144]	; (8006014 <MX_TIM2_Init+0x128>)
 8005f84:	f008 f8be 	bl	800e104 <HAL_TIM_OC_Init>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8005f8e:	f7fe faff 	bl	8004590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005f92:	2320      	movs	r3, #32
 8005f94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005f9a:	f107 031c 	add.w	r3, r7, #28
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	481c      	ldr	r0, [pc, #112]	; (8006014 <MX_TIM2_Init+0x128>)
 8005fa2:	f009 f8f5 	bl	800f190 <HAL_TIMEx_MasterConfigSynchronization>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8005fac:	f7fe faf0 	bl	8004590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fb0:	2360      	movs	r3, #96	; 0x60
 8005fb2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 8005fb4:	2305      	movs	r3, #5
 8005fb6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	2204      	movs	r2, #4
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4813      	ldr	r0, [pc, #76]	; (8006014 <MX_TIM2_Init+0x128>)
 8005fc8:	f008 fb4e 	bl	800e668 <HAL_TIM_PWM_ConfigChannel>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8005fd2:	f7fe fadd 	bl	8004590 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <MX_TIM2_Init+0x128>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <MX_TIM2_Init+0x128>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fe4:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005fee:	463b      	mov	r3, r7
 8005ff0:	220c      	movs	r2, #12
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4807      	ldr	r0, [pc, #28]	; (8006014 <MX_TIM2_Init+0x128>)
 8005ff6:	f008 fab9 	bl	800e56c <HAL_TIM_OC_ConfigChannel>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8006000:	f7fe fac6 	bl	8004590 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8006004:	4803      	ldr	r0, [pc, #12]	; (8006014 <MX_TIM2_Init+0x128>)
 8006006:	f000 f859 	bl	80060bc <HAL_TIM_MspPostInit>

}
 800600a:	bf00      	nop
 800600c:	3738      	adds	r7, #56	; 0x38
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20028860 	.word	0x20028860

08006018 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800601c:	4b0f      	ldr	r3, [pc, #60]	; (800605c <MX_TIM16_Init+0x44>)
 800601e:	4a10      	ldr	r2, [pc, #64]	; (8006060 <MX_TIM16_Init+0x48>)
 8006020:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8006022:	4b0e      	ldr	r3, [pc, #56]	; (800605c <MX_TIM16_Init+0x44>)
 8006024:	221f      	movs	r2, #31
 8006026:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006028:	4b0c      	ldr	r3, [pc, #48]	; (800605c <MX_TIM16_Init+0x44>)
 800602a:	2200      	movs	r2, #0
 800602c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800602e:	4b0b      	ldr	r3, [pc, #44]	; (800605c <MX_TIM16_Init+0x44>)
 8006030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006034:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <MX_TIM16_Init+0x44>)
 8006038:	2200      	movs	r2, #0
 800603a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800603c:	4b07      	ldr	r3, [pc, #28]	; (800605c <MX_TIM16_Init+0x44>)
 800603e:	2200      	movs	r2, #0
 8006040:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006042:	4b06      	ldr	r3, [pc, #24]	; (800605c <MX_TIM16_Init+0x44>)
 8006044:	2200      	movs	r2, #0
 8006046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006048:	4804      	ldr	r0, [pc, #16]	; (800605c <MX_TIM16_Init+0x44>)
 800604a:	f007 ffaf 	bl	800dfac <HAL_TIM_Base_Init>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8006054:	f7fe fa9c 	bl	8004590 <Error_Handler>
  }

}
 8006058:	bf00      	nop
 800605a:	bd80      	pop	{r7, pc}
 800605c:	200288a0 	.word	0x200288a0
 8006060:	40014400 	.word	0x40014400

08006064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006074:	d10b      	bne.n	800608e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006076:	2001      	movs	r0, #1
 8006078:	f7ff ff05 	bl	8005e86 <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800607c:	2200      	movs	r2, #0
 800607e:	2105      	movs	r1, #5
 8006080:	201c      	movs	r0, #28
 8006082:	f002 fa16 	bl	80084b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006086:	201c      	movs	r0, #28
 8006088:	f002 fa2d 	bl	80084e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800608c:	e010      	b.n	80060b0 <HAL_TIM_Base_MspInit+0x4c>
  else if(tim_baseHandle->Instance==TIM16)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a09      	ldr	r2, [pc, #36]	; (80060b8 <HAL_TIM_Base_MspInit+0x54>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d10b      	bne.n	80060b0 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006098:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800609c:	f7ff ff0c 	bl	8005eb8 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80060a0:	2200      	movs	r2, #0
 80060a2:	2100      	movs	r1, #0
 80060a4:	2019      	movs	r0, #25
 80060a6:	f002 fa04 	bl	80084b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80060aa:	2019      	movs	r0, #25
 80060ac:	f002 fa1b 	bl	80084e6 <HAL_NVIC_EnableIRQ>
}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40014400 	.word	0x40014400

080060bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060c4:	f107 030c 	add.w	r3, r7, #12
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	605a      	str	r2, [r3, #4]
 80060ce:	609a      	str	r2, [r3, #8]
 80060d0:	60da      	str	r2, [r3, #12]
 80060d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d112      	bne.n	8006104 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060de:	2002      	movs	r0, #2
 80060e0:	f7ff feb8 	bl	8005e54 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80060e4:	2308      	movs	r3, #8
 80060e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e8:	2302      	movs	r3, #2
 80060ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060f0:	2300      	movs	r3, #0
 80060f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80060f4:	2301      	movs	r3, #1
 80060f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060f8:	f107 030c 	add.w	r3, r7, #12
 80060fc:	4619      	mov	r1, r3
 80060fe:	4803      	ldr	r0, [pc, #12]	; (800610c <HAL_TIM_MspPostInit+0x50>)
 8006100:	f002 fd5e 	bl	8008bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8006104:	bf00      	nop
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	48000400 	.word	0x48000400

08006110 <HAL_COMP_TriggerCallback>:
uint16_t calibration_1 = 0;
union ColorComplex lightMessageComplexTouch = {0};
uint32_t lightsSimpleMessageReceivedTouch;
uint32_t prev_msg = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 8006118:	4b1a      	ldr	r3, [pc, #104]	; (8006184 <HAL_COMP_TriggerCallback+0x74>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	b29a      	uxth	r2, r3
 8006120:	4b19      	ldr	r3, [pc, #100]	; (8006188 <HAL_COMP_TriggerCallback+0x78>)
 8006122:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f002 f889 	bl	800823c <HAL_COMP_GetOutputLevel>
 800612a:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d109      	bne.n	8006146 <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 8006132:	4b15      	ldr	r3, [pc, #84]	; (8006188 <HAL_COMP_TriggerCallback+0x78>)
 8006134:	881a      	ldrh	r2, [r3, #0]
 8006136:	4b15      	ldr	r3, [pc, #84]	; (800618c <HAL_COMP_TriggerCallback+0x7c>)
 8006138:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 800613c:	4b13      	ldr	r3, [pc, #76]	; (800618c <HAL_COMP_TriggerCallback+0x7c>)
 800613e:	2201      	movs	r2, #1
 8006140:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8006144:	e019      	b.n	800617a <HAL_COMP_TriggerCallback+0x6a>
	} else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 8006146:	4b11      	ldr	r3, [pc, #68]	; (800618c <HAL_COMP_TriggerCallback+0x7c>)
 8006148:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d014      	beq.n	800617a <HAL_COMP_TriggerCallback+0x6a>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d111      	bne.n	800617a <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 8006156:	4b0d      	ldr	r3, [pc, #52]	; (800618c <HAL_COMP_TriggerCallback+0x7c>)
 8006158:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 800615c:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <HAL_COMP_TriggerCallback+0x78>)
 800615e:	881a      	ldrh	r2, [r3, #0]
 8006160:	4b0a      	ldr	r3, [pc, #40]	; (800618c <HAL_COMP_TriggerCallback+0x7c>)
 8006162:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	b29b      	uxth	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	4807      	ldr	r0, [pc, #28]	; (800618c <HAL_COMP_TriggerCallback+0x7c>)
 800616e:	f7fd fe9f 	bl	8003eb0 <enqueue_pulse>
		input0.rise_valid_ = 0;
 8006172:	4b06      	ldr	r3, [pc, #24]	; (800618c <HAL_COMP_TriggerCallback+0x7c>)
 8006174:	2200      	movs	r2, #0
 8006176:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	200288a0 	.word	0x200288a0
 8006188:	20000c96 	.word	0x20000c96
 800618c:	20027c84 	.word	0x20027c84

08006190 <HAL_TSC_ConvCpltCallback>:


uint32_t temp = 0x01;
// TODO: make threshold update if "touch" is active for too long
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc) {
 8006190:	b5b0      	push	{r4, r5, r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	/*##-5- Discharge the touch-sensing IOs ####################################*/
	HAL_TSC_IODischarge(htsc, ENABLE);
 8006198:	2101      	movs	r1, #1
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff fc3e 	bl	8005a1c <HAL_TSC_IODischarge>
	/* Note: a delay can be added here */

	uint32_t uhTSCAcquisitionValue;
	TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 80061a0:	2101      	movs	r1, #1
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fbc3 	bl	800592e <HAL_TSC_GroupGetStatus>
 80061a8:	4603      	mov	r3, r0
 80061aa:	75bb      	strb	r3, [r7, #22]
	uint32_t cur_time;
	/*##-6- Check if the acquisition is correct (no max count) #################*/
	if (status == TSC_GROUP_COMPLETED) {
 80061ac:	7dbb      	ldrb	r3, [r7, #22]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	f040 8115 	bne.w	80063de <HAL_TSC_ConvCpltCallback+0x24e>
		/*##-7- Read the acquisition value #######################################*/
		uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 80061b4:	2101      	movs	r1, #1
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff fbdb 	bl	8005972 <HAL_TSC_GroupGetValue>
 80061bc:	6138      	str	r0, [r7, #16]
		uint8_t touch;
		if (cap_sensor == 0) {
 80061be:	4ba0      	ldr	r3, [pc, #640]	; (8006440 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d17d      	bne.n	80062c2 <HAL_TSC_ConvCpltCallback+0x132>
			if(calibration_0 <= CALIBRATION_SAMPLES){
 80061c6:	4b9f      	ldr	r3, [pc, #636]	; (8006444 <HAL_TSC_ConvCpltCallback+0x2b4>)
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	2b64      	cmp	r3, #100	; 0x64
 80061cc:	d83a      	bhi.n	8006244 <HAL_TSC_ConvCpltCallback+0xb4>
				touch = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	75fb      	strb	r3, [r7, #23]
				if(calibration_0 == 0){
 80061d2:	4b9c      	ldr	r3, [pc, #624]	; (8006444 <HAL_TSC_ConvCpltCallback+0x2b4>)
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d108      	bne.n	80061ec <HAL_TSC_ConvCpltCallback+0x5c>
					ts1_threshold = uhTSCAcquisitionValue;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	ee07 3a90 	vmov	s15, r3
 80061e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e4:	4b98      	ldr	r3, [pc, #608]	; (8006448 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80061e6:	edc3 7a00 	vstr	s15, [r3]
 80061ea:	e024      	b.n	8006236 <HAL_TSC_ConvCpltCallback+0xa6>
				}else{
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 80061ec:	6938      	ldr	r0, [r7, #16]
 80061ee:	f7fa f913 	bl	8000418 <__aeabi_ui2d>
 80061f2:	a38f      	add	r3, pc, #572	; (adr r3, 8006430 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f7fa f988 	bl	800050c <__aeabi_dmul>
 80061fc:	4603      	mov	r3, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	4625      	mov	r5, r4
 8006202:	461c      	mov	r4, r3
 8006204:	4b90      	ldr	r3, [pc, #576]	; (8006448 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f7fa f927 	bl	800045c <__aeabi_f2d>
 800620e:	a38a      	add	r3, pc, #552	; (adr r3, 8006438 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f7fa f97a 	bl	800050c <__aeabi_dmul>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4620      	mov	r0, r4
 800621e:	4629      	mov	r1, r5
 8006220:	f7f9 ffbe 	bl	80001a0 <__adddf3>
 8006224:	4603      	mov	r3, r0
 8006226:	460c      	mov	r4, r1
 8006228:	4618      	mov	r0, r3
 800622a:	4621      	mov	r1, r4
 800622c:	f7fa fc1e 	bl	8000a6c <__aeabi_d2f>
 8006230:	4602      	mov	r2, r0
 8006232:	4b85      	ldr	r3, [pc, #532]	; (8006448 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8006234:	601a      	str	r2, [r3, #0]
				}
				calibration_0 += 1;
 8006236:	4b83      	ldr	r3, [pc, #524]	; (8006444 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	3301      	adds	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	4b81      	ldr	r3, [pc, #516]	; (8006444 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	e0ba      	b.n	80063ba <HAL_TSC_ConvCpltCallback+0x22a>
			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts1_threshold - THRESHOLD_TOLERANCE));
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800624e:	4b7e      	ldr	r3, [pc, #504]	; (8006448 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8006250:	edd3 7a00 	vldr	s15, [r3]
 8006254:	eddf 6a7d 	vldr	s13, [pc, #500]	; 800644c <HAL_TSC_ConvCpltCallback+0x2bc>
 8006258:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800625c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006264:	bf94      	ite	ls
 8006266:	2301      	movls	r3, #1
 8006268:	2300      	movhi	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 800626e:	7dfb      	ldrb	r3, [r7, #23]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f040 80a2 	bne.w	80063ba <HAL_TSC_ConvCpltCallback+0x22a>
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8006276:	6938      	ldr	r0, [r7, #16]
 8006278:	f7fa f8ce 	bl	8000418 <__aeabi_ui2d>
 800627c:	a36c      	add	r3, pc, #432	; (adr r3, 8006430 <HAL_TSC_ConvCpltCallback+0x2a0>)
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f7fa f943 	bl	800050c <__aeabi_dmul>
 8006286:	4603      	mov	r3, r0
 8006288:	460c      	mov	r4, r1
 800628a:	4625      	mov	r5, r4
 800628c:	461c      	mov	r4, r3
 800628e:	4b6e      	ldr	r3, [pc, #440]	; (8006448 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f7fa f8e2 	bl	800045c <__aeabi_f2d>
 8006298:	a367      	add	r3, pc, #412	; (adr r3, 8006438 <HAL_TSC_ConvCpltCallback+0x2a8>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f7fa f935 	bl	800050c <__aeabi_dmul>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4620      	mov	r0, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	f7f9 ff79 	bl	80001a0 <__adddf3>
 80062ae:	4603      	mov	r3, r0
 80062b0:	460c      	mov	r4, r1
 80062b2:	4618      	mov	r0, r3
 80062b4:	4621      	mov	r1, r4
 80062b6:	f7fa fbd9 	bl	8000a6c <__aeabi_d2f>
 80062ba:	4602      	mov	r2, r0
 80062bc:	4b62      	ldr	r3, [pc, #392]	; (8006448 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	e07b      	b.n	80063ba <HAL_TSC_ConvCpltCallback+0x22a>
				}
			}
		} else {
			if(calibration_1 <= CALIBRATION_SAMPLES){
 80062c2:	4b63      	ldr	r3, [pc, #396]	; (8006450 <HAL_TSC_ConvCpltCallback+0x2c0>)
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	2b64      	cmp	r3, #100	; 0x64
 80062c8:	d83a      	bhi.n	8006340 <HAL_TSC_ConvCpltCallback+0x1b0>
				touch = 0;
 80062ca:	2300      	movs	r3, #0
 80062cc:	75fb      	strb	r3, [r7, #23]
				if(calibration_1 == 0){
 80062ce:	4b60      	ldr	r3, [pc, #384]	; (8006450 <HAL_TSC_ConvCpltCallback+0x2c0>)
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d108      	bne.n	80062e8 <HAL_TSC_ConvCpltCallback+0x158>
					ts2_threshold = uhTSCAcquisitionValue;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	ee07 3a90 	vmov	s15, r3
 80062dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e0:	4b5c      	ldr	r3, [pc, #368]	; (8006454 <HAL_TSC_ConvCpltCallback+0x2c4>)
 80062e2:	edc3 7a00 	vstr	s15, [r3]
 80062e6:	e024      	b.n	8006332 <HAL_TSC_ConvCpltCallback+0x1a2>
				}else{
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 80062e8:	6938      	ldr	r0, [r7, #16]
 80062ea:	f7fa f895 	bl	8000418 <__aeabi_ui2d>
 80062ee:	a350      	add	r3, pc, #320	; (adr r3, 8006430 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f7fa f90a 	bl	800050c <__aeabi_dmul>
 80062f8:	4603      	mov	r3, r0
 80062fa:	460c      	mov	r4, r1
 80062fc:	4625      	mov	r5, r4
 80062fe:	461c      	mov	r4, r3
 8006300:	4b54      	ldr	r3, [pc, #336]	; (8006454 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f7fa f8a9 	bl	800045c <__aeabi_f2d>
 800630a:	a34b      	add	r3, pc, #300	; (adr r3, 8006438 <HAL_TSC_ConvCpltCallback+0x2a8>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7fa f8fc 	bl	800050c <__aeabi_dmul>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4620      	mov	r0, r4
 800631a:	4629      	mov	r1, r5
 800631c:	f7f9 ff40 	bl	80001a0 <__adddf3>
 8006320:	4603      	mov	r3, r0
 8006322:	460c      	mov	r4, r1
 8006324:	4618      	mov	r0, r3
 8006326:	4621      	mov	r1, r4
 8006328:	f7fa fba0 	bl	8000a6c <__aeabi_d2f>
 800632c:	4602      	mov	r2, r0
 800632e:	4b49      	ldr	r3, [pc, #292]	; (8006454 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8006330:	601a      	str	r2, [r3, #0]
				}
				calibration_1 += 1;
 8006332:	4b47      	ldr	r3, [pc, #284]	; (8006450 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	3301      	adds	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	4b45      	ldr	r3, [pc, #276]	; (8006450 <HAL_TSC_ConvCpltCallback+0x2c0>)
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	e03c      	b.n	80063ba <HAL_TSC_ConvCpltCallback+0x22a>

			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts2_threshold - THRESHOLD_TOLERANCE));
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800634a:	4b42      	ldr	r3, [pc, #264]	; (8006454 <HAL_TSC_ConvCpltCallback+0x2c4>)
 800634c:	edd3 7a00 	vldr	s15, [r3]
 8006350:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800644c <HAL_TSC_ConvCpltCallback+0x2bc>
 8006354:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800635c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006360:	bf94      	ite	ls
 8006362:	2301      	movls	r3, #1
 8006364:	2300      	movhi	r3, #0
 8006366:	b2db      	uxtb	r3, r3
 8006368:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d124      	bne.n	80063ba <HAL_TSC_ConvCpltCallback+0x22a>
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8006370:	6938      	ldr	r0, [r7, #16]
 8006372:	f7fa f851 	bl	8000418 <__aeabi_ui2d>
 8006376:	a32e      	add	r3, pc, #184	; (adr r3, 8006430 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f7fa f8c6 	bl	800050c <__aeabi_dmul>
 8006380:	4603      	mov	r3, r0
 8006382:	460c      	mov	r4, r1
 8006384:	4625      	mov	r5, r4
 8006386:	461c      	mov	r4, r3
 8006388:	4b32      	ldr	r3, [pc, #200]	; (8006454 <HAL_TSC_ConvCpltCallback+0x2c4>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4618      	mov	r0, r3
 800638e:	f7fa f865 	bl	800045c <__aeabi_f2d>
 8006392:	a329      	add	r3, pc, #164	; (adr r3, 8006438 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f7fa f8b8 	bl	800050c <__aeabi_dmul>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4620      	mov	r0, r4
 80063a2:	4629      	mov	r1, r5
 80063a4:	f7f9 fefc 	bl	80001a0 <__adddf3>
 80063a8:	4603      	mov	r3, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	4618      	mov	r0, r3
 80063ae:	4621      	mov	r1, r4
 80063b0:	f7fa fb5c 	bl	8000a6c <__aeabi_d2f>
 80063b4:	4602      	mov	r2, r0
 80063b6:	4b27      	ldr	r3, [pc, #156]	; (8006454 <HAL_TSC_ConvCpltCallback+0x2c4>)
 80063b8:	601a      	str	r2, [r3, #0]
				}
			}
		}

		cur_time = HAL_GetTick();
 80063ba:	f000 fb47 	bl	8006a4c <HAL_GetTick>
 80063be:	60f8      	str	r0, [r7, #12]
		debounce(&dbs[cap_sensor], touch, cur_time);
 80063c0:	4b1f      	ldr	r3, [pc, #124]	; (8006440 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	4a24      	ldr	r2, [pc, #144]	; (8006458 <HAL_TSC_ConvCpltCallback+0x2c8>)
 80063c8:	4413      	add	r3, r2
 80063ca:	7df9      	ldrb	r1, [r7, #23]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 f9f2 	bl	80067b8 <debounce>
		process_touches(&touch_detector, dbs, cur_time);
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4920      	ldr	r1, [pc, #128]	; (8006458 <HAL_TSC_ConvCpltCallback+0x2c8>)
 80063d8:	4820      	ldr	r0, [pc, #128]	; (800645c <HAL_TSC_ConvCpltCallback+0x2cc>)
 80063da:	f000 f843 	bl	8006464 <process_touches>
	}

	//Switches between the two channels to be acquired
	if (cap_sensor == 0) {
 80063de:	4b18      	ldr	r3, [pc, #96]	; (8006440 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_TSC_ConvCpltCallback+0x264>
		IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 80063e6:	4b1e      	ldr	r3, [pc, #120]	; (8006460 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80063e8:	2280      	movs	r2, #128	; 0x80
 80063ea:	601a      	str	r2, [r3, #0]
		cap_sensor = 1;
 80063ec:	4b14      	ldr	r3, [pc, #80]	; (8006440 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	e005      	b.n	8006400 <HAL_TSC_ConvCpltCallback+0x270>
	} else {
		IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 80063f4:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80063f6:	2240      	movs	r2, #64	; 0x40
 80063f8:	601a      	str	r2, [r3, #0]
		cap_sensor = 0;
 80063fa:	4b11      	ldr	r3, [pc, #68]	; (8006440 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK) {
 8006400:	4917      	ldr	r1, [pc, #92]	; (8006460 <HAL_TSC_ConvCpltCallback+0x2d0>)
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff fac7 	bl	8005996 <HAL_TSC_IOConfig>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_TSC_ConvCpltCallback+0x282>
		/* Initialization Error */
		Error_Handler();
 800640e:	f7fe f8bf 	bl	8004590 <Error_Handler>
	}

	/*##-9- Re-start the acquisition process ###################################*/
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fa2e 	bl	8005874 <HAL_TSC_Start_IT>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_TSC_ConvCpltCallback+0x292>
		/* Acquisition Error */
		Error_Handler();
 800641e:	f7fe f8b7 	bl	8004590 <Error_Handler>
	}

}
 8006422:	bf00      	nop
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bdb0      	pop	{r4, r5, r7, pc}
 800642a:	bf00      	nop
 800642c:	f3af 8000 	nop.w
 8006430:	47ae147b 	.word	0x47ae147b
 8006434:	3f847ae1 	.word	0x3f847ae1
 8006438:	7ae147ae 	.word	0x7ae147ae
 800643c:	3fefae14 	.word	0x3fefae14
 8006440:	20000c98 	.word	0x20000c98
 8006444:	20000cac 	.word	0x20000cac
 8006448:	200288ec 	.word	0x200288ec
 800644c:	42700000 	.word	0x42700000
 8006450:	20000cae 	.word	0x20000cae
 8006454:	20028910 	.word	0x20028910
 8006458:	20000c9c 	.word	0x20000c9c
 800645c:	200288f4 	.word	0x200288f4
 8006460:	200288e0 	.word	0x200288e0

08006464 <process_touches>:
}

uint8_t temp_flag = 1;
enum TouchType action = None;

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b08c      	sub	sp, #48	; 0x30
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]

//	action = None;

	if (self->touch_state == Idle) {
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	7e1b      	ldrb	r3, [r3, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d123      	bne.n	80064c0 <process_touches+0x5c>
		if (dbs[0].clean_out) {
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	795b      	ldrb	r3, [r3, #5]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00c      	beq.n	800649a <process_touches+0x36>
			// front button is held

			self->touch_state = OnePressed;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 0;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	605a      	str	r2, [r3, #4]
			action = FrontHold;
 8006492:	4b99      	ldr	r3, [pc, #612]	; (80066f8 <process_touches+0x294>)
 8006494:	2205      	movs	r2, #5
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	e126      	b.n	80066e8 <process_touches+0x284>

		} else if (dbs[1].clean_out) {
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	3308      	adds	r3, #8
 800649e:	795b      	ldrb	r3, [r3, #5]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8121 	beq.w	80066e8 <process_touches+0x284>
			// back button is held

			self->touch_state = OnePressed;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 1;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	605a      	str	r2, [r3, #4]
			action = BackHold;
 80064b8:	4b8f      	ldr	r3, [pc, #572]	; (80066f8 <process_touches+0x294>)
 80064ba:	2206      	movs	r2, #6
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e113      	b.n	80066e8 <process_touches+0x284>
		}
	} else if (self->touch_state == OnePressed) {
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	7e1b      	ldrb	r3, [r3, #24]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d12d      	bne.n	8006524 <process_touches+0xc0>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	f1c3 0301 	rsb	r3, r3, #1
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4413      	add	r3, r2
 80064d6:	795b      	ldrb	r3, [r3, #5]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d010      	beq.n	80064fe <process_touches+0x9a>
			self->touch_state = TwoPressed;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2202      	movs	r2, #2
 80064e0:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	f1c3 0301 	rsb	r3, r3, #1
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	611a      	str	r2, [r3, #16]
			action = BothHold;
 80064f6:	4b80      	ldr	r3, [pc, #512]	; (80066f8 <process_touches+0x294>)
 80064f8:	2207      	movs	r2, #7
 80064fa:	701a      	strb	r2, [r3, #0]
 80064fc:	e0f4      	b.n	80066e8 <process_touches+0x284>

		} else if (!dbs[self->touches[0].cap_idx].clean_out) {
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	4413      	add	r3, r2
 8006508:	795b      	ldrb	r3, [r3, #5]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 80ec 	bne.w	80066e8 <process_touches+0x284>
			self->touch_state = OneReleasedNoPressed;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2203      	movs	r2, #3
 8006514:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	609a      	str	r2, [r3, #8]
			action = BothRelease;
 800651c:	4b76      	ldr	r3, [pc, #472]	; (80066f8 <process_touches+0x294>)
 800651e:	2208      	movs	r2, #8
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	e0e1      	b.n	80066e8 <process_touches+0x284>

		}
	} else if (self->touch_state == TwoPressed) {
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	7e1b      	ldrb	r3, [r3, #24]
 8006528:	2b02      	cmp	r3, #2
 800652a:	d11e      	bne.n	800656a <process_touches+0x106>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	4413      	add	r3, r2
 8006536:	795b      	ldrb	r3, [r3, #5]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d106      	bne.n	800654a <process_touches+0xe6>
			self->touch_state = FirstReleasedSecondPressed;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2204      	movs	r2, #4
 8006540:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	609a      	str	r2, [r3, #8]
 8006548:	e0ce      	b.n	80066e8 <process_touches+0x284>
		} else if (!dbs[self->touches[1].cap_idx].clean_out) {
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	7b1b      	ldrb	r3, [r3, #12]
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	4413      	add	r3, r2
 8006554:	795b      	ldrb	r3, [r3, #5]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f040 80c6 	bne.w	80066e8 <process_touches+0x284>
			self->touch_state = SecondReleasedFirstPressed;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2205      	movs	r2, #5
 8006560:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	615a      	str	r2, [r3, #20]
 8006568:	e0be      	b.n	80066e8 <process_touches+0x284>
		}
	} else if (self->touch_state == OneReleasedNoPressed) {
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	7e1b      	ldrb	r3, [r3, #24]
 800656e:	2b03      	cmp	r3, #3
 8006570:	d134      	bne.n	80065dc <process_touches+0x178>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	f1c3 0301 	rsb	r3, r3, #1
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	4413      	add	r3, r2
 8006580:	795b      	ldrb	r3, [r3, #5]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00d      	beq.n	80065a2 <process_touches+0x13e>
			self->touch_state = FirstReleasedSecondPressed;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2204      	movs	r2, #4
 800658a:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	f1c3 0301 	rsb	r3, r3, #1
 8006594:	b2da      	uxtb	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	611a      	str	r2, [r3, #16]
 80065a0:	e0a2      	b.n	80066e8 <process_touches+0x284>
		} else if (cur_time - self->touches[0].end_t > MIN_SWIPE_GAP) {
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b0a      	cmp	r3, #10
 80065ac:	f240 809c 	bls.w	80066e8 <process_touches+0x284>
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	617b      	str	r3, [r7, #20]
			if (TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD) {
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2b28      	cmp	r3, #40	; 0x28
 80065c0:	d905      	bls.n	80065ce <process_touches+0x16a>
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2bc7      	cmp	r3, #199	; 0xc7
 80065c6:	d802      	bhi.n	80065ce <process_touches+0x16a>
				//Register a tap
				action = BothRelease;
 80065c8:	4b4b      	ldr	r3, [pc, #300]	; (80066f8 <process_touches+0x294>)
 80065ca:	2208      	movs	r2, #8
 80065cc:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 80065ce:	4b4b      	ldr	r3, [pc, #300]	; (80066fc <process_touches+0x298>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	761a      	strb	r2, [r3, #24]
 80065da:	e085      	b.n	80066e8 <process_touches+0x284>
		}
	} else if (self->touch_state == FirstReleasedSecondPressed) {
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	7e1b      	ldrb	r3, [r3, #24]
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d148      	bne.n	8006676 <process_touches+0x212>
		if (!dbs[self->touches[1].cap_idx].clean_out) {
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	7b1b      	ldrb	r3, [r3, #12]
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	4413      	add	r3, r2
 80065ee:	795b      	ldrb	r3, [r3, #5]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d179      	bne.n	80066e8 <process_touches+0x284>
			self->touch_state = Idle;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	615a      	str	r2, [r3, #20]
			action = None;
 8006600:	4b3d      	ldr	r3, [pc, #244]	; (80066f8 <process_touches+0x294>)
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	623b      	str	r3, [r7, #32]
			uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	695a      	ldr	r2, [r3, #20]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	61fb      	str	r3, [r7, #28]
			uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	695a      	ldr	r2, [r3, #20]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	61bb      	str	r3, [r7, #24]

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	2b28      	cmp	r3, #40	; 0x28
 800662e:	d80c      	bhi.n	800664a <process_touches+0x1e6>
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	2b28      	cmp	r3, #40	; 0x28
 8006634:	d809      	bhi.n	800664a <process_touches+0x1e6>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2b28      	cmp	r3, #40	; 0x28
 800663a:	d906      	bls.n	800664a <process_touches+0x1e6>
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	2bc7      	cmp	r3, #199	; 0xc7
 8006640:	d803      	bhi.n	800664a <process_touches+0x1e6>
				//Register a tap
				action = BothRelease;
 8006642:	4b2d      	ldr	r3, [pc, #180]	; (80066f8 <process_touches+0x294>)
 8006644:	2208      	movs	r2, #8
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e011      	b.n	800666e <process_touches+0x20a>
			}
			//Otherwise, it was a swipe. Might have to adjust these thresholds to allow swipe detection
			else if (touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD) {
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	2b28      	cmp	r3, #40	; 0x28
 800664e:	d90e      	bls.n	800666e <process_touches+0x20a>
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	2b28      	cmp	r3, #40	; 0x28
 8006654:	d90b      	bls.n	800666e <process_touches+0x20a>
				//Register a swipe
				action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	b25a      	sxtb	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	7b1b      	ldrb	r3, [r3, #12]
 8006662:	b25b      	sxtb	r3, r3
 8006664:	4313      	orrs	r3, r2
 8006666:	b25b      	sxtb	r3, r3
 8006668:	b2da      	uxtb	r2, r3
 800666a:	4b23      	ldr	r3, [pc, #140]	; (80066f8 <process_touches+0x294>)
 800666c:	701a      	strb	r2, [r3, #0]
			}

			self->touch_state = Idle;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	761a      	strb	r2, [r3, #24]
 8006674:	e038      	b.n	80066e8 <process_touches+0x284>
		}
	} else if (self->touch_state == SecondReleasedFirstPressed) {
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	7e1b      	ldrb	r3, [r3, #24]
 800667a:	2b05      	cmp	r3, #5
 800667c:	d134      	bne.n	80066e8 <process_touches+0x284>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	4413      	add	r3, r2
 8006688:	795b      	ldrb	r3, [r3, #5]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d12c      	bne.n	80066e8 <process_touches+0x284>
			self->touch_state = Idle;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	609a      	str	r2, [r3, #8]

			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	2b28      	cmp	r3, #40	; 0x28
 80066c2:	d80b      	bhi.n	80066dc <process_touches+0x278>
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	2b28      	cmp	r3, #40	; 0x28
 80066c8:	d808      	bhi.n	80066dc <process_touches+0x278>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	2b28      	cmp	r3, #40	; 0x28
 80066ce:	d905      	bls.n	80066dc <process_touches+0x278>
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	2bc7      	cmp	r3, #199	; 0xc7
 80066d4:	d802      	bhi.n	80066dc <process_touches+0x278>
				//Register a tap
				action = BothRelease;
 80066d6:	4b08      	ldr	r3, [pc, #32]	; (80066f8 <process_touches+0x294>)
 80066d8:	2208      	movs	r2, #8
 80066da:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 80066dc:	4b07      	ldr	r3, [pc, #28]	; (80066fc <process_touches+0x298>)
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	761a      	strb	r2, [r3, #24]
		}
	}

	if( action == None){
 80066e8:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <process_touches+0x294>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d107      	bne.n	8006700 <process_touches+0x29c>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 80066f0:	4b02      	ldr	r3, [pc, #8]	; (80066fc <process_touches+0x298>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	e042      	b.n	800677e <process_touches+0x31a>
 80066f8:	20000cb4 	.word	0x20000cb4
 80066fc:	200288f0 	.word	0x200288f0

	}else if(action == SwipeForward){
 8006700:	4b29      	ldr	r3, [pc, #164]	; (80067a8 <process_touches+0x344>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d103      	bne.n	8006710 <process_touches+0x2ac>
		lightsSimpleMessageReceivedTouch = 0x03; // cyan (green + blue)
 8006708:	4b28      	ldr	r3, [pc, #160]	; (80067ac <process_touches+0x348>)
 800670a:	2203      	movs	r2, #3
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	e036      	b.n	800677e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x03 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x03 << 4;
	}else if(action == SwipeBackward){
 8006710:	4b25      	ldr	r3, [pc, #148]	; (80067a8 <process_touches+0x344>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d103      	bne.n	8006720 <process_touches+0x2bc>
		lightsSimpleMessageReceivedTouch = (0x01 << 6) | 0x01; // orange (green + red)
 8006718:	4b24      	ldr	r3, [pc, #144]	; (80067ac <process_touches+0x348>)
 800671a:	2241      	movs	r2, #65	; 0x41
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e02e      	b.n	800677e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == FrontRelease){
 8006720:	4b21      	ldr	r3, [pc, #132]	; (80067a8 <process_touches+0x344>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b03      	cmp	r3, #3
 8006726:	d103      	bne.n	8006730 <process_touches+0x2cc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006728:	4b20      	ldr	r3, [pc, #128]	; (80067ac <process_touches+0x348>)
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	e026      	b.n	800677e <process_touches+0x31a>
	}else if(action == BackRelease){
 8006730:	4b1d      	ldr	r3, [pc, #116]	; (80067a8 <process_touches+0x344>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b04      	cmp	r3, #4
 8006736:	d103      	bne.n	8006740 <process_touches+0x2dc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006738:	4b1c      	ldr	r3, [pc, #112]	; (80067ac <process_touches+0x348>)
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	e01e      	b.n	800677e <process_touches+0x31a>
	}else if(action == FrontHold){
 8006740:	4b19      	ldr	r3, [pc, #100]	; (80067a8 <process_touches+0x344>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b05      	cmp	r3, #5
 8006746:	d103      	bne.n	8006750 <process_touches+0x2ec>
		lightsSimpleMessageReceivedTouch = 0x01; // green
 8006748:	4b18      	ldr	r3, [pc, #96]	; (80067ac <process_touches+0x348>)
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e016      	b.n	800677e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x01 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x01 << 4;
	}else if(action == BackHold){
 8006750:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <process_touches+0x344>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b06      	cmp	r3, #6
 8006756:	d103      	bne.n	8006760 <process_touches+0x2fc>
		lightsSimpleMessageReceivedTouch = 0x02; // blue
 8006758:	4b14      	ldr	r3, [pc, #80]	; (80067ac <process_touches+0x348>)
 800675a:	2202      	movs	r2, #2
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e00e      	b.n	800677e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x02 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x02 << 4;
	}else if(action == BothHold){
 8006760:	4b11      	ldr	r3, [pc, #68]	; (80067a8 <process_touches+0x344>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b07      	cmp	r3, #7
 8006766:	d103      	bne.n	8006770 <process_touches+0x30c>
		lightsSimpleMessageReceivedTouch = 0x01 << 6; // red
 8006768:	4b10      	ldr	r3, [pc, #64]	; (80067ac <process_touches+0x348>)
 800676a:	2240      	movs	r2, #64	; 0x40
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e006      	b.n	800677e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == BothRelease){
 8006770:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <process_touches+0x344>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b08      	cmp	r3, #8
 8006776:	d102      	bne.n	800677e <process_touches+0x31a>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006778:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <process_touches+0x348>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
	}

	if(prev_msg != lightsSimpleMessageReceivedTouch ){
 800677e:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <process_touches+0x34c>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <process_touches+0x348>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d00a      	beq.n	80067a0 <process_touches+0x33c>
		prev_msg = lightsSimpleMessageReceivedTouch;
 800678a:	4b08      	ldr	r3, [pc, #32]	; (80067ac <process_touches+0x348>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a08      	ldr	r2, [pc, #32]	; (80067b0 <process_touches+0x34c>)
 8006790:	6013      	str	r3, [r2, #0]

		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageReceivedTouch, 0U, 0);
 8006792:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <process_touches+0x350>)
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	2300      	movs	r3, #0
 8006798:	2200      	movs	r2, #0
 800679a:	4904      	ldr	r1, [pc, #16]	; (80067ac <process_touches+0x348>)
 800679c:	f00a fd94 	bl	80112c8 <osMessageQueuePut>

	}

}
 80067a0:	bf00      	nop
 80067a2:	3730      	adds	r7, #48	; 0x30
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000cb4 	.word	0x20000cb4
 80067ac:	200288f0 	.word	0x200288f0
 80067b0:	20000cb0 	.word	0x20000cb0
 80067b4:	20027c70 	.word	0x20027c70

080067b8 <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time) {
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	460b      	mov	r3, r1
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	72fb      	strb	r3, [r7, #11]
	if (noisy_in != self->input) {
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	791b      	ldrb	r3, [r3, #4]
 80067ca:	7afa      	ldrb	r2, [r7, #11]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d006      	beq.n	80067de <debounce+0x26>
		self->input = noisy_in;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	7afa      	ldrb	r2, [r7, #11]
 80067d4:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	601a      	str	r2, [r3, #0]
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
		self->clean_out = self->input;
	}
}
 80067dc:	e009      	b.n	80067f2 <debounce+0x3a>
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b1e      	cmp	r3, #30
 80067e8:	d903      	bls.n	80067f2 <debounce+0x3a>
		self->clean_out = self->input;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	791a      	ldrb	r2, [r3, #4]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	715a      	strb	r2, [r3, #5]
}
 80067f2:	bf00      	nop
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <LL_AHB1_GRP1_EnableClock>:
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800680a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800680c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4313      	orrs	r3, r2
 8006814:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800681a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4013      	ands	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006822:	68fb      	ldr	r3, [r7, #12]
}
 8006824:	bf00      	nop
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <LL_AHB2_GRP1_EnableClock>:
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800683c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800683e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4313      	orrs	r3, r2
 8006846:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800684c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4013      	ands	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006854:	68fb      	ldr	r3, [r7, #12]
}
 8006856:	bf00      	nop
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 8006868:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <MX_TSC_Init+0x7c>)
 800686a:	4a1e      	ldr	r2, [pc, #120]	; (80068e4 <MX_TSC_Init+0x80>)
 800686c:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 800686e:	4b1c      	ldr	r3, [pc, #112]	; (80068e0 <MX_TSC_Init+0x7c>)
 8006870:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8006874:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 8006876:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <MX_TSC_Init+0x7c>)
 8006878:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800687c:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 800687e:	4b18      	ldr	r3, [pc, #96]	; (80068e0 <MX_TSC_Init+0x7c>)
 8006880:	2200      	movs	r2, #0
 8006882:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 8006884:	4b16      	ldr	r3, [pc, #88]	; (80068e0 <MX_TSC_Init+0x7c>)
 8006886:	2201      	movs	r2, #1
 8006888:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800688a:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <MX_TSC_Init+0x7c>)
 800688c:	2200      	movs	r2, #0
 800688e:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8006890:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <MX_TSC_Init+0x7c>)
 8006892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006896:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 8006898:	4b11      	ldr	r3, [pc, #68]	; (80068e0 <MX_TSC_Init+0x7c>)
 800689a:	22c0      	movs	r2, #192	; 0xc0
 800689c:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800689e:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <MX_TSC_Init+0x7c>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80068a4:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <MX_TSC_Init+0x7c>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80068aa:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <MX_TSC_Init+0x7c>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 80068b0:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <MX_TSC_Init+0x7c>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 80068b8:	4b09      	ldr	r3, [pc, #36]	; (80068e0 <MX_TSC_Init+0x7c>)
 80068ba:	22c0      	movs	r2, #192	; 0xc0
 80068bc:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 80068be:	4b08      	ldr	r3, [pc, #32]	; (80068e0 <MX_TSC_Init+0x7c>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 80068c4:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <MX_TSC_Init+0x7c>)
 80068c6:	2210      	movs	r2, #16
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80068ca:	4805      	ldr	r0, [pc, #20]	; (80068e0 <MX_TSC_Init+0x7c>)
 80068cc:	f7fe ff52 	bl	8005774 <HAL_TSC_Init>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <MX_TSC_Init+0x76>
  {
    Error_Handler();
 80068d6:	f7fd fe5b 	bl	8004590 <Error_Handler>
  }

}
 80068da:	bf00      	nop
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20028914 	.word	0x20028914
 80068e4:	40024000 	.word	0x40024000

080068e8 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068f0:	f107 030c 	add.w	r3, r7, #12
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	609a      	str	r2, [r3, #8]
 80068fc:	60da      	str	r2, [r3, #12]
 80068fe:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1a      	ldr	r2, [pc, #104]	; (8006970 <HAL_TSC_MspInit+0x88>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d12e      	bne.n	8006968 <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 800690a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800690e:	f7ff ff76 	bl	80067fe <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006912:	2002      	movs	r0, #2
 8006914:	f7ff ff8c 	bl	8006830 <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006918:	2310      	movs	r3, #16
 800691a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800691c:	2312      	movs	r3, #18
 800691e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006920:	2300      	movs	r3, #0
 8006922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006924:	2300      	movs	r3, #0
 8006926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8006928:	2309      	movs	r3, #9
 800692a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800692c:	f107 030c 	add.w	r3, r7, #12
 8006930:	4619      	mov	r1, r3
 8006932:	4810      	ldr	r0, [pc, #64]	; (8006974 <HAL_TSC_MspInit+0x8c>)
 8006934:	f002 f944 	bl	8008bc0 <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006938:	23c0      	movs	r3, #192	; 0xc0
 800693a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693c:	2302      	movs	r3, #2
 800693e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006940:	2300      	movs	r3, #0
 8006942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006944:	2300      	movs	r3, #0
 8006946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8006948:	2309      	movs	r3, #9
 800694a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800694c:	f107 030c 	add.w	r3, r7, #12
 8006950:	4619      	mov	r1, r3
 8006952:	4808      	ldr	r0, [pc, #32]	; (8006974 <HAL_TSC_MspInit+0x8c>)
 8006954:	f002 f934 	bl	8008bc0 <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 8006958:	2200      	movs	r2, #0
 800695a:	2105      	movs	r1, #5
 800695c:	2027      	movs	r0, #39	; 0x27
 800695e:	f001 fda8 	bl	80084b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 8006962:	2027      	movs	r0, #39	; 0x27
 8006964:	f001 fdbf 	bl	80084e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8006968:	bf00      	nop
 800696a:	3720      	adds	r7, #32
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40024000 	.word	0x40024000
 8006974:	48000400 	.word	0x48000400

08006978 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006978:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800697a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800697c:	3304      	adds	r3, #4

0800697e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800697e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006980:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8006982:	d3f9      	bcc.n	8006978 <CopyDataInit>
  bx lr
 8006984:	4770      	bx	lr

08006986 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8006986:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006988:	3004      	adds	r0, #4

0800698a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800698a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800698c:	d3fb      	bcc.n	8006986 <FillZerobss>
  bx lr
 800698e:	4770      	bx	lr

08006990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8006990:	480c      	ldr	r0, [pc, #48]	; (80069c4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8006992:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006994:	480c      	ldr	r0, [pc, #48]	; (80069c8 <LoopForever+0x8>)
 8006996:	490d      	ldr	r1, [pc, #52]	; (80069cc <LoopForever+0xc>)
 8006998:	4a0d      	ldr	r2, [pc, #52]	; (80069d0 <LoopForever+0x10>)
 800699a:	2300      	movs	r3, #0
 800699c:	f7ff ffef 	bl	800697e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80069a0:	480c      	ldr	r0, [pc, #48]	; (80069d4 <LoopForever+0x14>)
 80069a2:	490d      	ldr	r1, [pc, #52]	; (80069d8 <LoopForever+0x18>)
 80069a4:	2300      	movs	r3, #0
 80069a6:	f7ff fff0 	bl	800698a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80069aa:	480c      	ldr	r0, [pc, #48]	; (80069dc <LoopForever+0x1c>)
 80069ac:	490c      	ldr	r1, [pc, #48]	; (80069e0 <LoopForever+0x20>)
 80069ae:	2300      	movs	r3, #0
 80069b0:	f7ff ffeb 	bl	800698a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80069b4:	f7ff f956 	bl	8005c64 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80069b8:	f013 fe1a 	bl	801a5f0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80069bc:	f7fd fd08 	bl	80043d0 <main>

080069c0 <LoopForever>:

LoopForever:
  b LoopForever
 80069c0:	e7fe      	b.n	80069c0 <LoopForever>
 80069c2:	0000      	.short	0x0000
Reset_Handler:  ldr   r0, =_estack
 80069c4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80069c8:	20000004 	.word	0x20000004
 80069cc:	200002d4 	.word	0x200002d4
 80069d0:	0801ca90 	.word	0x0801ca90
  INIT_BSS _sbss, _ebss
 80069d4:	20000388 	.word	0x20000388
 80069d8:	2002a17c 	.word	0x2002a17c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80069dc:	200300c4 	.word	0x200300c4
 80069e0:	20030b5b 	.word	0x20030b5b

080069e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80069e4:	e7fe      	b.n	80069e4 <ADC1_IRQHandler>
	...

080069e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069f2:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <HAL_Init+0x3c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a0b      	ldr	r2, [pc, #44]	; (8006a24 <HAL_Init+0x3c>)
 80069f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069fe:	2003      	movs	r0, #3
 8006a00:	f001 fd4c 	bl	800849c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a04:	2000      	movs	r0, #0
 8006a06:	f7fe fe69 	bl	80056dc <HAL_InitTick>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	71fb      	strb	r3, [r7, #7]
 8006a14:	e001      	b.n	8006a1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006a16:	f7fe fe30 	bl	800567a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	58004000 	.word	0x58004000

08006a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <HAL_IncTick+0x1c>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <HAL_IncTick+0x20>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4413      	add	r3, r2
 8006a36:	4a03      	ldr	r2, [pc, #12]	; (8006a44 <HAL_IncTick+0x1c>)
 8006a38:	6013      	str	r3, [r2, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	20028958 	.word	0x20028958
 8006a48:	20000080 	.word	0x20000080

08006a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8006a50:	4b03      	ldr	r3, [pc, #12]	; (8006a60 <HAL_GetTick+0x14>)
 8006a52:	681b      	ldr	r3, [r3, #0]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	20028958 	.word	0x20028958

08006a64 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006a68:	4b03      	ldr	r3, [pc, #12]	; (8006a78 <HAL_GetTickPrio+0x14>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	2000007c 	.word	0x2000007c

08006a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8006a84:	f7ff ffe2 	bl	8006a4c <HAL_GetTick>
 8006a88:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d004      	beq.n	8006aa0 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 8006a96:	4b09      	ldr	r3, [pc, #36]	; (8006abc <HAL_Delay+0x40>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8006aa0:	bf00      	nop
 8006aa2:	f7ff ffd3 	bl	8006a4c <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d8f7      	bhi.n	8006aa2 <HAL_Delay+0x26>
    {
    }
  }
 8006ab2:	bf00      	nop
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000080 	.word	0x20000080

08006ac0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	609a      	str	r2, [r3, #8]
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006b18:	b490      	push	{r4, r7}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3360      	adds	r3, #96	; 0x60
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006b34:	6822      	ldr	r2, [r4, #0]
 8006b36:	4b08      	ldr	r3, [pc, #32]	; (8006b58 <LL_ADC_SetOffset+0x40>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	4313      	orrs	r3, r2
 8006b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b4a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006b4c:	bf00      	nop
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bc90      	pop	{r4, r7}
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	03fff000 	.word	0x03fff000

08006b5c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006b5c:	b490      	push	{r4, r7}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	3360      	adds	r3, #96	; 0x60
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc90      	pop	{r4, r7}
 8006b82:	4770      	bx	lr

08006b84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006b84:	b490      	push	{r4, r7}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3360      	adds	r3, #96	; 0x60
 8006b94:	461a      	mov	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006baa:	bf00      	nop
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc90      	pop	{r4, r7}
 8006bb2:	4770      	bx	lr

08006bb4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e000      	b.n	8006bce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006bda:	b490      	push	{r4, r7}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3330      	adds	r3, #48	; 0x30
 8006bea:	461a      	mov	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	f003 030c 	and.w	r3, r3, #12
 8006bf6:	4413      	add	r3, r2
 8006bf8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006bfa:	6822      	ldr	r2, [r4, #0]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f003 031f 	and.w	r3, r3, #31
 8006c02:	211f      	movs	r1, #31
 8006c04:	fa01 f303 	lsl.w	r3, r1, r3
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	401a      	ands	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	0e9b      	lsrs	r3, r3, #26
 8006c10:	f003 011f 	and.w	r1, r3, #31
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f003 031f 	and.w	r3, r3, #31
 8006c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006c22:	bf00      	nop
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc90      	pop	{r4, r7}
 8006c2a:	4770      	bx	lr

08006c2c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006c2c:	b490      	push	{r4, r7}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	0e5b      	lsrs	r3, r3, #25
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	4413      	add	r3, r2
 8006c4a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	0d1b      	lsrs	r3, r3, #20
 8006c52:	f003 031f 	and.w	r3, r3, #31
 8006c56:	2107      	movs	r1, #7
 8006c58:	fa01 f303 	lsl.w	r3, r1, r3
 8006c5c:	43db      	mvns	r3, r3
 8006c5e:	401a      	ands	r2, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	0d1b      	lsrs	r3, r3, #20
 8006c64:	f003 031f 	and.w	r3, r3, #31
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006c72:	bf00      	nop
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bc90      	pop	{r4, r7}
 8006c7a:	4770      	bx	lr

08006c7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c94:	43db      	mvns	r3, r3
 8006c96:	401a      	ands	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f003 0318 	and.w	r3, r3, #24
 8006c9e:	4908      	ldr	r1, [pc, #32]	; (8006cc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006ca0:	40d9      	lsrs	r1, r3
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	400b      	ands	r3, r1
 8006ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006caa:	431a      	orrs	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006cb2:	bf00      	nop
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	0007ffff 	.word	0x0007ffff

08006cc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006cd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	6093      	str	r3, [r2, #8]
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cfc:	d101      	bne.n	8006d02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e000      	b.n	8006d04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006d20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d4c:	d101      	bne.n	8006d52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d74:	f043 0201 	orr.w	r2, r3, #1
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d9c:	f043 0202 	orr.w	r2, r3, #2
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d101      	bne.n	8006dc8 <LL_ADC_IsEnabled+0x18>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <LL_ADC_IsEnabled+0x1a>
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d101      	bne.n	8006dee <LL_ADC_IsDisableOngoing+0x18>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <LL_ADC_IsDisableOngoing+0x1a>
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e10:	f043 0204 	orr.w	r2, r3, #4
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e38:	f043 0210 	orr.w	r2, r3, #16
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d101      	bne.n	8006e64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e86:	f043 0220 	orr.w	r2, r3, #32
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d101      	bne.n	8006eb2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e000      	b.n	8006eb4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e12a      	b.n	8007130 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d109      	bne.n	8006efc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fa f813 	bl	8000f14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff fef1 	bl	8006ce8 <LL_ADC_IsDeepPowerDownEnabled>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d004      	beq.n	8006f16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff fed7 	bl	8006cc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff ff0c 	bl	8006d38 <LL_ADC_IsInternalRegulatorEnabled>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d113      	bne.n	8006f4e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff fef0 	bl	8006d10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006f30:	4b81      	ldr	r3, [pc, #516]	; (8007138 <HAL_ADC_Init+0x278>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	099b      	lsrs	r3, r3, #6
 8006f36:	4a81      	ldr	r2, [pc, #516]	; (800713c <HAL_ADC_Init+0x27c>)
 8006f38:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3c:	099b      	lsrs	r3, r3, #6
 8006f3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006f40:	e002      	b.n	8006f48 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1f9      	bne.n	8006f42 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff fef0 	bl	8006d38 <LL_ADC_IsInternalRegulatorEnabled>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10d      	bne.n	8006f7a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f62:	f043 0210 	orr.w	r2, r3, #16
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6e:	f043 0201 	orr.w	r2, r3, #1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff ff64 	bl	8006e4c <LL_ADC_REG_IsConversionOngoing>
 8006f84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f040 80c5 	bne.w	800711e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f040 80c1 	bne.w	800711e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006fa4:	f043 0202 	orr.w	r2, r3, #2
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff fefd 	bl	8006db0 <LL_ADC_IsEnabled>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10b      	bne.n	8006fd4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fbc:	4860      	ldr	r0, [pc, #384]	; (8007140 <HAL_ADC_Init+0x280>)
 8006fbe:	f7ff fef7 	bl	8006db0 <LL_ADC_IsEnabled>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d105      	bne.n	8006fd4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	485d      	ldr	r0, [pc, #372]	; (8007144 <HAL_ADC_Init+0x284>)
 8006fd0:	f7ff fd76 	bl	8006ac0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	7e5b      	ldrb	r3, [r3, #25]
 8006fd8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006fde:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006fe4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006fea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ff2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d106      	bne.n	8007010 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	3b01      	subs	r3, #1
 8007008:	045b      	lsls	r3, r3, #17
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	4313      	orrs	r3, r2
 800700e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007014:	2b00      	cmp	r3, #0
 8007016:	d009      	beq.n	800702c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	4313      	orrs	r3, r2
 800702a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	4b45      	ldr	r3, [pc, #276]	; (8007148 <HAL_ADC_Init+0x288>)
 8007034:	4013      	ands	r3, r2
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	6812      	ldr	r2, [r2, #0]
 800703a:	69b9      	ldr	r1, [r7, #24]
 800703c:	430b      	orrs	r3, r1
 800703e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff ff01 	bl	8006e4c <LL_ADC_REG_IsConversionOngoing>
 800704a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff ff22 	bl	8006e9a <LL_ADC_INJ_IsConversionOngoing>
 8007056:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d13d      	bne.n	80070da <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d13a      	bne.n	80070da <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007068:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007070:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007072:	4313      	orrs	r3, r2
 8007074:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007080:	f023 0302 	bic.w	r3, r3, #2
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	69b9      	ldr	r1, [r7, #24]
 800708a:	430b      	orrs	r3, r1
 800708c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007094:	2b01      	cmp	r3, #1
 8007096:	d118      	bne.n	80070ca <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80070a2:	f023 0304 	bic.w	r3, r3, #4
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070ae:	4311      	orrs	r1, r2
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80070b4:	4311      	orrs	r1, r2
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070ba:	430a      	orrs	r2, r1
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	611a      	str	r2, [r3, #16]
 80070c8:	e007      	b.n	80070da <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0201 	bic.w	r2, r2, #1
 80070d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d10c      	bne.n	80070fc <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	f023 010f 	bic.w	r1, r3, #15
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	1e5a      	subs	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30
 80070fa:	e007      	b.n	800710c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 020f 	bic.w	r2, r2, #15
 800710a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	f023 0303 	bic.w	r3, r3, #3
 8007114:	f043 0201 	orr.w	r2, r3, #1
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	655a      	str	r2, [r3, #84]	; 0x54
 800711c:	e007      	b.n	800712e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007122:	f043 0210 	orr.w	r2, r3, #16
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800712e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3720      	adds	r7, #32
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20000078 	.word	0x20000078
 800713c:	053e2d63 	.word	0x053e2d63
 8007140:	50040000 	.word	0x50040000
 8007144:	50040300 	.word	0x50040300
 8007148:	fff0c007 	.word	0xfff0c007

0800714c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff fe75 	bl	8006e4c <LL_ADC_REG_IsConversionOngoing>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d167      	bne.n	8007238 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <HAL_ADC_Start_DMA+0x2a>
 8007172:	2302      	movs	r3, #2
 8007174:	e063      	b.n	800723e <HAL_ADC_Start_DMA+0xf2>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 fcc2 	bl	8007b08 <ADC_Enable>
 8007184:	4603      	mov	r3, r0
 8007186:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d14f      	bne.n	800722e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007192:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007196:	f023 0301 	bic.w	r3, r3, #1
 800719a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d006      	beq.n	80071bc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b2:	f023 0206 	bic.w	r2, r3, #6
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	659a      	str	r2, [r3, #88]	; 0x58
 80071ba:	e002      	b.n	80071c2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c6:	4a20      	ldr	r2, [pc, #128]	; (8007248 <HAL_ADC_Start_DMA+0xfc>)
 80071c8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ce:	4a1f      	ldr	r2, [pc, #124]	; (800724c <HAL_ADC_Start_DMA+0x100>)
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d6:	4a1e      	ldr	r2, [pc, #120]	; (8007250 <HAL_ADC_Start_DMA+0x104>)
 80071d8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	221c      	movs	r2, #28
 80071e0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f042 0210 	orr.w	r2, r2, #16
 80071f8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0201 	orr.w	r2, r2, #1
 8007208:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3340      	adds	r3, #64	; 0x40
 8007214:	4619      	mov	r1, r3
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f001 fa49 	bl	80086b0 <HAL_DMA_Start_IT>
 800721e:	4603      	mov	r3, r0
 8007220:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff fde8 	bl	8006dfc <LL_ADC_REG_StartConversion>
 800722c:	e006      	b.n	800723c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007236:	e001      	b.n	800723c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007238:	2302      	movs	r3, #2
 800723a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	08007c6d 	.word	0x08007c6d
 800724c:	08007d45 	.word	0x08007d45
 8007250:	08007d61 	.word	0x08007d61

08007254 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007262:	2b01      	cmp	r3, #1
 8007264:	d101      	bne.n	800726a <HAL_ADC_Stop_DMA+0x16>
 8007266:	2302      	movs	r3, #2
 8007268:	e051      	b.n	800730e <HAL_ADC_Stop_DMA+0xba>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007272:	2103      	movs	r1, #3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fb93 	bl	80079a0 <ADC_ConversionStop>
 800727a:	4603      	mov	r3, r0
 800727c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d13f      	bne.n	8007304 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0201 	bic.w	r2, r2, #1
 8007292:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007298:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d10f      	bne.n	80072c2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 fa7d 	bl	80087a6 <HAL_DMA_Abort>
 80072ac:	4603      	mov	r3, r0
 80072ae:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0210 	bic.w	r2, r2, #16
 80072d0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d105      	bne.n	80072e4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fc6f 	bl	8007bbc <ADC_Disable>
 80072de:	4603      	mov	r3, r0
 80072e0:	73fb      	strb	r3, [r7, #15]
 80072e2:	e002      	b.n	80072ea <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fc69 	bl	8007bbc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d109      	bne.n	8007304 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80072f8:	f023 0301 	bic.w	r3, r3, #1
 80072fc:	f043 0201 	orr.w	r2, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800730c:	7bfb      	ldrb	r3, [r7, #15]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007316:	b480      	push	{r7}
 8007318:	b083      	sub	sp, #12
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
	...

0800732c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b0a6      	sub	sp, #152	; 0x98
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <HAL_ADC_ConfigChannel+0x22>
 800734a:	2302      	movs	r3, #2
 800734c:	e31e      	b.n	800798c <HAL_ADC_ConfigChannel+0x660>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff fd76 	bl	8006e4c <LL_ADC_REG_IsConversionOngoing>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	f040 8303 	bne.w	800796e <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6818      	ldr	r0, [r3, #0]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	6859      	ldr	r1, [r3, #4]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	f7ff fc30 	bl	8006bda <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff fd64 	bl	8006e4c <LL_ADC_REG_IsConversionOngoing>
 8007384:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fd84 	bl	8006e9a <LL_ADC_INJ_IsConversionOngoing>
 8007392:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007396:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800739a:	2b00      	cmp	r3, #0
 800739c:	f040 8148 	bne.w	8007630 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80073a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 8143 	bne.w	8007630 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	6819      	ldr	r1, [r3, #0]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	461a      	mov	r2, r3
 80073b8:	f7ff fc38 	bl	8006c2c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	695a      	ldr	r2, [r3, #20]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	08db      	lsrs	r3, r3, #3
 80073c8:	f003 0303 	and.w	r3, r3, #3
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d00a      	beq.n	80073f4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6818      	ldr	r0, [r3, #0]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	6919      	ldr	r1, [r3, #16]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073ee:	f7ff fb93 	bl	8006b18 <LL_ADC_SetOffset>
 80073f2:	e11d      	b.n	8007630 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2100      	movs	r1, #0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fbae 	bl	8006b5c <LL_ADC_GetOffsetChannel>
 8007400:	4603      	mov	r3, r0
 8007402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <HAL_ADC_ConfigChannel+0xf4>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2100      	movs	r1, #0
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff fba3 	bl	8006b5c <LL_ADC_GetOffsetChannel>
 8007416:	4603      	mov	r3, r0
 8007418:	0e9b      	lsrs	r3, r3, #26
 800741a:	f003 021f 	and.w	r2, r3, #31
 800741e:	e012      	b.n	8007446 <HAL_ADC_ConfigChannel+0x11a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2100      	movs	r1, #0
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff fb98 	bl	8006b5c <LL_ADC_GetOffsetChannel>
 800742c:	4603      	mov	r3, r0
 800742e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007432:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007436:	fa93 f3a3 	rbit	r3, r3
 800743a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800743c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800743e:	fab3 f383 	clz	r3, r3
 8007442:	b2db      	uxtb	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800744e:	2b00      	cmp	r3, #0
 8007450:	d105      	bne.n	800745e <HAL_ADC_ConfigChannel+0x132>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	0e9b      	lsrs	r3, r3, #26
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	e00a      	b.n	8007474 <HAL_ADC_ConfigChannel+0x148>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007466:	fa93 f3a3 	rbit	r3, r3
 800746a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800746c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800746e:	fab3 f383 	clz	r3, r3
 8007472:	b2db      	uxtb	r3, r3
 8007474:	429a      	cmp	r2, r3
 8007476:	d106      	bne.n	8007486 <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2200      	movs	r2, #0
 800747e:	2100      	movs	r1, #0
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff fb7f 	bl	8006b84 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2101      	movs	r1, #1
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff fb65 	bl	8006b5c <LL_ADC_GetOffsetChannel>
 8007492:	4603      	mov	r3, r0
 8007494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <HAL_ADC_ConfigChannel+0x186>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2101      	movs	r1, #1
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff fb5a 	bl	8006b5c <LL_ADC_GetOffsetChannel>
 80074a8:	4603      	mov	r3, r0
 80074aa:	0e9b      	lsrs	r3, r3, #26
 80074ac:	f003 021f 	and.w	r2, r3, #31
 80074b0:	e010      	b.n	80074d4 <HAL_ADC_ConfigChannel+0x1a8>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2101      	movs	r1, #1
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff fb4f 	bl	8006b5c <LL_ADC_GetOffsetChannel>
 80074be:	4603      	mov	r3, r0
 80074c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074c4:	fa93 f3a3 	rbit	r3, r3
 80074c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80074ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074cc:	fab3 f383 	clz	r3, r3
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	461a      	mov	r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d105      	bne.n	80074ec <HAL_ADC_ConfigChannel+0x1c0>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	0e9b      	lsrs	r3, r3, #26
 80074e6:	f003 031f 	and.w	r3, r3, #31
 80074ea:	e00a      	b.n	8007502 <HAL_ADC_ConfigChannel+0x1d6>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074f4:	fa93 f3a3 	rbit	r3, r3
 80074f8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80074fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074fc:	fab3 f383 	clz	r3, r3
 8007500:	b2db      	uxtb	r3, r3
 8007502:	429a      	cmp	r2, r3
 8007504:	d106      	bne.n	8007514 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2200      	movs	r2, #0
 800750c:	2101      	movs	r1, #1
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff fb38 	bl	8006b84 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2102      	movs	r1, #2
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff fb1e 	bl	8006b5c <LL_ADC_GetOffsetChannel>
 8007520:	4603      	mov	r3, r0
 8007522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10a      	bne.n	8007540 <HAL_ADC_ConfigChannel+0x214>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2102      	movs	r1, #2
 8007530:	4618      	mov	r0, r3
 8007532:	f7ff fb13 	bl	8006b5c <LL_ADC_GetOffsetChannel>
 8007536:	4603      	mov	r3, r0
 8007538:	0e9b      	lsrs	r3, r3, #26
 800753a:	f003 021f 	and.w	r2, r3, #31
 800753e:	e010      	b.n	8007562 <HAL_ADC_ConfigChannel+0x236>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2102      	movs	r1, #2
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff fb08 	bl	8006b5c <LL_ADC_GetOffsetChannel>
 800754c:	4603      	mov	r3, r0
 800754e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007552:	fa93 f3a3 	rbit	r3, r3
 8007556:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8007558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800755a:	fab3 f383 	clz	r3, r3
 800755e:	b2db      	uxtb	r3, r3
 8007560:	461a      	mov	r2, r3
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800756a:	2b00      	cmp	r3, #0
 800756c:	d105      	bne.n	800757a <HAL_ADC_ConfigChannel+0x24e>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	0e9b      	lsrs	r3, r3, #26
 8007574:	f003 031f 	and.w	r3, r3, #31
 8007578:	e00a      	b.n	8007590 <HAL_ADC_ConfigChannel+0x264>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007582:	fa93 f3a3 	rbit	r3, r3
 8007586:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800758a:	fab3 f383 	clz	r3, r3
 800758e:	b2db      	uxtb	r3, r3
 8007590:	429a      	cmp	r2, r3
 8007592:	d106      	bne.n	80075a2 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2200      	movs	r2, #0
 800759a:	2102      	movs	r1, #2
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff faf1 	bl	8006b84 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2103      	movs	r1, #3
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff fad7 	bl	8006b5c <LL_ADC_GetOffsetChannel>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <HAL_ADC_ConfigChannel+0x2a2>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2103      	movs	r1, #3
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff facc 	bl	8006b5c <LL_ADC_GetOffsetChannel>
 80075c4:	4603      	mov	r3, r0
 80075c6:	0e9b      	lsrs	r3, r3, #26
 80075c8:	f003 021f 	and.w	r2, r3, #31
 80075cc:	e010      	b.n	80075f0 <HAL_ADC_ConfigChannel+0x2c4>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2103      	movs	r1, #3
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7ff fac1 	bl	8006b5c <LL_ADC_GetOffsetChannel>
 80075da:	4603      	mov	r3, r0
 80075dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e0:	fa93 f3a3 	rbit	r3, r3
 80075e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80075e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e8:	fab3 f383 	clz	r3, r3
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	461a      	mov	r2, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d105      	bne.n	8007608 <HAL_ADC_ConfigChannel+0x2dc>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	0e9b      	lsrs	r3, r3, #26
 8007602:	f003 031f 	and.w	r3, r3, #31
 8007606:	e00a      	b.n	800761e <HAL_ADC_ConfigChannel+0x2f2>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800760e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007610:	fa93 f3a3 	rbit	r3, r3
 8007614:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8007616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007618:	fab3 f383 	clz	r3, r3
 800761c:	b2db      	uxtb	r3, r3
 800761e:	429a      	cmp	r2, r3
 8007620:	d106      	bne.n	8007630 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	2103      	movs	r1, #3
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff faaa 	bl	8006b84 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff fbbb 	bl	8006db0 <LL_ADC_IsEnabled>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 819f 	bne.w	8007980 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	6819      	ldr	r1, [r3, #0]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	461a      	mov	r2, r3
 8007650:	f7ff fb14 	bl	8006c7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	4aab      	ldr	r2, [pc, #684]	; (8007908 <HAL_ADC_ConfigChannel+0x5dc>)
 800765a:	4293      	cmp	r3, r2
 800765c:	f040 80fd 	bne.w	800785a <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10b      	bne.n	8007688 <HAL_ADC_ConfigChannel+0x35c>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	0e9b      	lsrs	r3, r3, #26
 8007676:	3301      	adds	r3, #1
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	2b09      	cmp	r3, #9
 800767e:	bf94      	ite	ls
 8007680:	2301      	movls	r3, #1
 8007682:	2300      	movhi	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	e012      	b.n	80076ae <HAL_ADC_ConfigChannel+0x382>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800768e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007690:	fa93 f3a3 	rbit	r3, r3
 8007694:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8007696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007698:	fab3 f383 	clz	r3, r3
 800769c:	b2db      	uxtb	r3, r3
 800769e:	3301      	adds	r3, #1
 80076a0:	f003 031f 	and.w	r3, r3, #31
 80076a4:	2b09      	cmp	r3, #9
 80076a6:	bf94      	ite	ls
 80076a8:	2301      	movls	r3, #1
 80076aa:	2300      	movhi	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d064      	beq.n	800777c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d107      	bne.n	80076ce <HAL_ADC_ConfigChannel+0x3a2>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	0e9b      	lsrs	r3, r3, #26
 80076c4:	3301      	adds	r3, #1
 80076c6:	069b      	lsls	r3, r3, #26
 80076c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076cc:	e00e      	b.n	80076ec <HAL_ADC_ConfigChannel+0x3c0>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	fa93 f3a3 	rbit	r3, r3
 80076da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80076dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076de:	fab3 f383 	clz	r3, r3
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	3301      	adds	r3, #1
 80076e6:	069b      	lsls	r3, r3, #26
 80076e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d109      	bne.n	800770c <HAL_ADC_ConfigChannel+0x3e0>
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	0e9b      	lsrs	r3, r3, #26
 80076fe:	3301      	adds	r3, #1
 8007700:	f003 031f 	and.w	r3, r3, #31
 8007704:	2101      	movs	r1, #1
 8007706:	fa01 f303 	lsl.w	r3, r1, r3
 800770a:	e010      	b.n	800772e <HAL_ADC_ConfigChannel+0x402>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	fa93 f3a3 	rbit	r3, r3
 8007718:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	fab3 f383 	clz	r3, r3
 8007720:	b2db      	uxtb	r3, r3
 8007722:	3301      	adds	r3, #1
 8007724:	f003 031f 	and.w	r3, r3, #31
 8007728:	2101      	movs	r1, #1
 800772a:	fa01 f303 	lsl.w	r3, r1, r3
 800772e:	ea42 0103 	orr.w	r1, r2, r3
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <HAL_ADC_ConfigChannel+0x428>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	0e9b      	lsrs	r3, r3, #26
 8007744:	3301      	adds	r3, #1
 8007746:	f003 021f 	and.w	r2, r3, #31
 800774a:	4613      	mov	r3, r2
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	4413      	add	r3, r2
 8007750:	051b      	lsls	r3, r3, #20
 8007752:	e011      	b.n	8007778 <HAL_ADC_ConfigChannel+0x44c>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	fa93 f3a3 	rbit	r3, r3
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	fab3 f383 	clz	r3, r3
 8007768:	b2db      	uxtb	r3, r3
 800776a:	3301      	adds	r3, #1
 800776c:	f003 021f 	and.w	r2, r3, #31
 8007770:	4613      	mov	r3, r2
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	4413      	add	r3, r2
 8007776:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007778:	430b      	orrs	r3, r1
 800777a:	e069      	b.n	8007850 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007784:	2b00      	cmp	r3, #0
 8007786:	d107      	bne.n	8007798 <HAL_ADC_ConfigChannel+0x46c>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	0e9b      	lsrs	r3, r3, #26
 800778e:	3301      	adds	r3, #1
 8007790:	069b      	lsls	r3, r3, #26
 8007792:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007796:	e00e      	b.n	80077b6 <HAL_ADC_ConfigChannel+0x48a>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	fa93 f3a3 	rbit	r3, r3
 80077a4:	61fb      	str	r3, [r7, #28]
  return result;
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	fab3 f383 	clz	r3, r3
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	3301      	adds	r3, #1
 80077b0:	069b      	lsls	r3, r3, #26
 80077b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <HAL_ADC_ConfigChannel+0x4aa>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	0e9b      	lsrs	r3, r3, #26
 80077c8:	3301      	adds	r3, #1
 80077ca:	f003 031f 	and.w	r3, r3, #31
 80077ce:	2101      	movs	r1, #1
 80077d0:	fa01 f303 	lsl.w	r3, r1, r3
 80077d4:	e010      	b.n	80077f8 <HAL_ADC_ConfigChannel+0x4cc>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	fa93 f3a3 	rbit	r3, r3
 80077e2:	617b      	str	r3, [r7, #20]
  return result;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	fab3 f383 	clz	r3, r3
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	3301      	adds	r3, #1
 80077ee:	f003 031f 	and.w	r3, r3, #31
 80077f2:	2101      	movs	r1, #1
 80077f4:	fa01 f303 	lsl.w	r3, r1, r3
 80077f8:	ea42 0103 	orr.w	r1, r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10d      	bne.n	8007824 <HAL_ADC_ConfigChannel+0x4f8>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	0e9b      	lsrs	r3, r3, #26
 800780e:	3301      	adds	r3, #1
 8007810:	f003 021f 	and.w	r2, r3, #31
 8007814:	4613      	mov	r3, r2
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	4413      	add	r3, r2
 800781a:	3b1e      	subs	r3, #30
 800781c:	051b      	lsls	r3, r3, #20
 800781e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007822:	e014      	b.n	800784e <HAL_ADC_ConfigChannel+0x522>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	fa93 f3a3 	rbit	r3, r3
 8007830:	60fb      	str	r3, [r7, #12]
  return result;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	fab3 f383 	clz	r3, r3
 8007838:	b2db      	uxtb	r3, r3
 800783a:	3301      	adds	r3, #1
 800783c:	f003 021f 	and.w	r2, r3, #31
 8007840:	4613      	mov	r3, r2
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	4413      	add	r3, r2
 8007846:	3b1e      	subs	r3, #30
 8007848:	051b      	lsls	r3, r3, #20
 800784a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800784e:	430b      	orrs	r3, r1
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	6892      	ldr	r2, [r2, #8]
 8007854:	4619      	mov	r1, r3
 8007856:	f7ff f9e9 	bl	8006c2c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4b2b      	ldr	r3, [pc, #172]	; (800790c <HAL_ADC_ConfigChannel+0x5e0>)
 8007860:	4013      	ands	r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 808c 	beq.w	8007980 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007868:	4829      	ldr	r0, [pc, #164]	; (8007910 <HAL_ADC_ConfigChannel+0x5e4>)
 800786a:	f7ff f947 	bl	8006afc <LL_ADC_GetCommonPathInternalCh>
 800786e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007872:	4828      	ldr	r0, [pc, #160]	; (8007914 <HAL_ADC_ConfigChannel+0x5e8>)
 8007874:	f7ff fa9c 	bl	8006db0 <LL_ADC_IsEnabled>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d16d      	bne.n	800795a <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a25      	ldr	r2, [pc, #148]	; (8007918 <HAL_ADC_ConfigChannel+0x5ec>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d126      	bne.n	80078d6 <HAL_ADC_ConfigChannel+0x5aa>
 8007888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800788c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d120      	bne.n	80078d6 <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1e      	ldr	r2, [pc, #120]	; (8007914 <HAL_ADC_ConfigChannel+0x5e8>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d170      	bne.n	8007980 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800789e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078a6:	4619      	mov	r1, r3
 80078a8:	4819      	ldr	r0, [pc, #100]	; (8007910 <HAL_ADC_ConfigChannel+0x5e4>)
 80078aa:	f7ff f914 	bl	8006ad6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80078ae:	4b1b      	ldr	r3, [pc, #108]	; (800791c <HAL_ADC_ConfigChannel+0x5f0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	099b      	lsrs	r3, r3, #6
 80078b4:	4a1a      	ldr	r2, [pc, #104]	; (8007920 <HAL_ADC_ConfigChannel+0x5f4>)
 80078b6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ba:	099a      	lsrs	r2, r3, #6
 80078bc:	4613      	mov	r3, r2
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80078c6:	e002      	b.n	80078ce <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1f9      	bne.n	80078c8 <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80078d4:	e054      	b.n	8007980 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a12      	ldr	r2, [pc, #72]	; (8007924 <HAL_ADC_ConfigChannel+0x5f8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d123      	bne.n	8007928 <HAL_ADC_ConfigChannel+0x5fc>
 80078e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11d      	bne.n	8007928 <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a08      	ldr	r2, [pc, #32]	; (8007914 <HAL_ADC_ConfigChannel+0x5e8>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d144      	bne.n	8007980 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80078f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078fe:	4619      	mov	r1, r3
 8007900:	4803      	ldr	r0, [pc, #12]	; (8007910 <HAL_ADC_ConfigChannel+0x5e4>)
 8007902:	f7ff f8e8 	bl	8006ad6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007906:	e03b      	b.n	8007980 <HAL_ADC_ConfigChannel+0x654>
 8007908:	407f0000 	.word	0x407f0000
 800790c:	80080000 	.word	0x80080000
 8007910:	50040300 	.word	0x50040300
 8007914:	50040000 	.word	0x50040000
 8007918:	c7520000 	.word	0xc7520000
 800791c:	20000078 	.word	0x20000078
 8007920:	053e2d63 	.word	0x053e2d63
 8007924:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a19      	ldr	r2, [pc, #100]	; (8007994 <HAL_ADC_ConfigChannel+0x668>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d126      	bne.n	8007980 <HAL_ADC_ConfigChannel+0x654>
 8007932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d120      	bne.n	8007980 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a15      	ldr	r2, [pc, #84]	; (8007998 <HAL_ADC_ConfigChannel+0x66c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d11b      	bne.n	8007980 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8007948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800794c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007950:	4619      	mov	r1, r3
 8007952:	4812      	ldr	r0, [pc, #72]	; (800799c <HAL_ADC_ConfigChannel+0x670>)
 8007954:	f7ff f8bf 	bl	8006ad6 <LL_ADC_SetCommonPathInternalCh>
 8007958:	e012      	b.n	8007980 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795e:	f043 0220 	orr.w	r2, r3, #32
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800796c:	e008      	b.n	8007980 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	f043 0220 	orr.w	r2, r3, #32
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007988:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800798c:	4618      	mov	r0, r3
 800798e:	3798      	adds	r7, #152	; 0x98
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	80000001 	.word	0x80000001
 8007998:	50040000 	.word	0x50040000
 800799c:	50040300 	.word	0x50040300

080079a0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff fa48 	bl	8006e4c <LL_ADC_REG_IsConversionOngoing>
 80079bc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff fa69 	bl	8006e9a <LL_ADC_INJ_IsConversionOngoing>
 80079c8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8090 	beq.w	8007af8 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d02a      	beq.n	8007a3c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7e5b      	ldrb	r3, [r3, #25]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d126      	bne.n	8007a3c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7e1b      	ldrb	r3, [r3, #24]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d122      	bne.n	8007a3c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80079f6:	2301      	movs	r3, #1
 80079f8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80079fa:	e014      	b.n	8007a26 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4a41      	ldr	r2, [pc, #260]	; (8007b04 <ADC_ConversionStop+0x164>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d90d      	bls.n	8007a20 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a08:	f043 0210 	orr.w	r2, r3, #16
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a14:	f043 0201 	orr.w	r2, r3, #1
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e06c      	b.n	8007afa <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	3301      	adds	r3, #1
 8007a24:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a30:	2b40      	cmp	r3, #64	; 0x40
 8007a32:	d1e3      	bne.n	80079fc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2240      	movs	r2, #64	; 0x40
 8007a3a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d014      	beq.n	8007a6c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff fa00 	bl	8006e4c <LL_ADC_REG_IsConversionOngoing>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00c      	beq.n	8007a6c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff f9bd 	bl	8006dd6 <LL_ADC_IsDisableOngoing>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d104      	bne.n	8007a6c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff f9dc 	bl	8006e24 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d014      	beq.n	8007a9c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff fa0f 	bl	8006e9a <LL_ADC_INJ_IsConversionOngoing>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00c      	beq.n	8007a9c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff f9a5 	bl	8006dd6 <LL_ADC_IsDisableOngoing>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d104      	bne.n	8007a9c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff f9eb 	bl	8006e72 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d004      	beq.n	8007aac <ADC_ConversionStop+0x10c>
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d105      	bne.n	8007ab2 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007aa6:	230c      	movs	r3, #12
 8007aa8:	617b      	str	r3, [r7, #20]
        break;
 8007aaa:	e005      	b.n	8007ab8 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007aac:	2308      	movs	r3, #8
 8007aae:	617b      	str	r3, [r7, #20]
        break;
 8007ab0:	e002      	b.n	8007ab8 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007ab2:	2304      	movs	r3, #4
 8007ab4:	617b      	str	r3, [r7, #20]
        break;
 8007ab6:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007ab8:	f7fe ffc8 	bl	8006a4c <HAL_GetTick>
 8007abc:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007abe:	e014      	b.n	8007aea <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007ac0:	f7fe ffc4 	bl	8006a4c <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b05      	cmp	r3, #5
 8007acc:	d90d      	bls.n	8007aea <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad2:	f043 0210 	orr.w	r2, r3, #16
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ade:	f043 0201 	orr.w	r2, r3, #1
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e007      	b.n	8007afa <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	4013      	ands	r3, r2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e3      	bne.n	8007ac0 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3720      	adds	r7, #32
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	a33fffff 	.word	0xa33fffff

08007b08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7ff f94b 	bl	8006db0 <LL_ADC_IsEnabled>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d146      	bne.n	8007bae <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	4b24      	ldr	r3, [pc, #144]	; (8007bb8 <ADC_Enable+0xb0>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00d      	beq.n	8007b4a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b32:	f043 0210 	orr.w	r2, r3, #16
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b3e:	f043 0201 	orr.w	r2, r3, #1
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e032      	b.n	8007bb0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff f906 	bl	8006d60 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007b54:	f7fe ff7a 	bl	8006a4c <HAL_GetTick>
 8007b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b5a:	e021      	b.n	8007ba0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff f925 	bl	8006db0 <LL_ADC_IsEnabled>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d104      	bne.n	8007b76 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff f8f5 	bl	8006d60 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007b76:	f7fe ff69 	bl	8006a4c <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d90d      	bls.n	8007ba0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b88:	f043 0210 	orr.w	r2, r3, #16
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b94:	f043 0201 	orr.w	r2, r3, #1
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e007      	b.n	8007bb0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d1d6      	bne.n	8007b5c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	8000003f 	.word	0x8000003f

08007bbc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff f904 	bl	8006dd6 <LL_ADC_IsDisableOngoing>
 8007bce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7ff f8eb 	bl	8006db0 <LL_ADC_IsEnabled>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d040      	beq.n	8007c62 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d13d      	bne.n	8007c62 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f003 030d 	and.w	r3, r3, #13
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d10c      	bne.n	8007c0e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff f8c5 	bl	8006d88 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2203      	movs	r2, #3
 8007c04:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007c06:	f7fe ff21 	bl	8006a4c <HAL_GetTick>
 8007c0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007c0c:	e022      	b.n	8007c54 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c12:	f043 0210 	orr.w	r2, r3, #16
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1e:	f043 0201 	orr.w	r2, r3, #1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e01c      	b.n	8007c64 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007c2a:	f7fe ff0f 	bl	8006a4c <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d90d      	bls.n	8007c54 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3c:	f043 0210 	orr.w	r2, r3, #16
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c48:	f043 0201 	orr.w	r2, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e007      	b.n	8007c64 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e3      	bne.n	8007c2a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c78:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d14b      	bne.n	8007d1e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0308 	and.w	r3, r3, #8
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d021      	beq.n	8007ce4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fe ff85 	bl	8006bb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d032      	beq.n	8007d16 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d12b      	bne.n	8007d16 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d11f      	bne.n	8007d16 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cda:	f043 0201 	orr.w	r2, r3, #1
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	655a      	str	r2, [r3, #84]	; 0x54
 8007ce2:	e018      	b.n	8007d16 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d111      	bne.n	8007d16 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d105      	bne.n	8007d16 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0e:	f043 0201 	orr.w	r2, r3, #1
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7f9 fd5e 	bl	80017d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007d1c:	e00e      	b.n	8007d3c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d22:	f003 0310 	and.w	r3, r3, #16
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f7ff faf3 	bl	8007316 <HAL_ADC_ErrorCallback>
}
 8007d30:	e004      	b.n	8007d3c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	4798      	blx	r3
}
 8007d3c:	bf00      	nop
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7f9 fd82 	bl	800185c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d58:	bf00      	nop
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7e:	f043 0204 	orr.w	r2, r3, #4
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff fac5 	bl	8007316 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d8c:	bf00      	nop
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <LL_EXTI_EnableIT_0_31>:
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007d9c:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <LL_EXTI_EnableIT_0_31+0x24>)
 8007d9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007da2:	4905      	ldr	r1, [pc, #20]	; (8007db8 <LL_EXTI_EnableIT_0_31+0x24>)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	58000800 	.word	0x58000800

08007dbc <LL_EXTI_DisableIT_0_31>:
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007dc4:	4b07      	ldr	r3, [pc, #28]	; (8007de4 <LL_EXTI_DisableIT_0_31+0x28>)
 8007dc6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	43db      	mvns	r3, r3
 8007dce:	4905      	ldr	r1, [pc, #20]	; (8007de4 <LL_EXTI_DisableIT_0_31+0x28>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	58000800 	.word	0x58000800

08007de8 <LL_EXTI_EnableEvent_0_31>:
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007df0:	4b06      	ldr	r3, [pc, #24]	; (8007e0c <LL_EXTI_EnableEvent_0_31+0x24>)
 8007df2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007df6:	4905      	ldr	r1, [pc, #20]	; (8007e0c <LL_EXTI_EnableEvent_0_31+0x24>)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	58000800 	.word	0x58000800

08007e10 <LL_EXTI_DisableEvent_0_31>:
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007e18:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <LL_EXTI_DisableEvent_0_31+0x28>)
 8007e1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	43db      	mvns	r3, r3
 8007e22:	4905      	ldr	r1, [pc, #20]	; (8007e38 <LL_EXTI_DisableEvent_0_31+0x28>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	58000800 	.word	0x58000800

08007e3c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	4904      	ldr	r1, [pc, #16]	; (8007e5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	600b      	str	r3, [r1, #0]
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	58000800 	.word	0x58000800

08007e60 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007e68:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	4904      	ldr	r1, [pc, #16]	; (8007e84 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007e72:	4013      	ands	r3, r2
 8007e74:	600b      	str	r3, [r1, #0]

}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	58000800 	.word	0x58000800

08007e88 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007e90:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	4904      	ldr	r1, [pc, #16]	; (8007ea8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	604b      	str	r3, [r1, #4]
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	58000800 	.word	0x58000800

08007eac <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007eb4:	4b06      	ldr	r3, [pc, #24]	; (8007ed0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	43db      	mvns	r3, r3
 8007ebc:	4904      	ldr	r1, [pc, #16]	; (8007ed0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	604b      	str	r3, [r1, #4]
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	58000800 	.word	0x58000800

08007ed4 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007edc:	4b07      	ldr	r3, [pc, #28]	; (8007efc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d101      	bne.n	8007eee <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	58000800 	.word	0x58000800

08007f00 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007f08:	4a04      	ldr	r2, [pc, #16]	; (8007f1c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60d3      	str	r3, [r2, #12]
}
 8007f0e:	bf00      	nop
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	58000800 	.word	0x58000800

08007f20 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	77fb      	strb	r3, [r7, #31]
 8007f3a:	e0c4      	b.n	80080c6 <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f4a:	d102      	bne.n	8007f52 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	77fb      	strb	r3, [r7, #31]
 8007f50:	e0b9      	b.n	80080c6 <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d109      	bne.n	8007f72 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7f9 fce7 	bl	8001940 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f7c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	69db      	ldr	r3, [r3, #28]
 8007f8c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	4b49      	ldr	r3, [pc, #292]	; (80080d0 <HAL_COMP_Init+0x1b0>)
 8007faa:	4013      	ands	r3, r2
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6812      	ldr	r2, [r2, #0]
 8007fb0:	6979      	ldr	r1, [r7, #20]
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fbe:	d106      	bne.n	8007fce <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007fc0:	4b44      	ldr	r3, [pc, #272]	; (80080d4 <HAL_COMP_Init+0x1b4>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a43      	ldr	r2, [pc, #268]	; (80080d4 <HAL_COMP_Init+0x1b4>)
 8007fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	e005      	b.n	8007fda <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007fce:	4b41      	ldr	r3, [pc, #260]	; (80080d4 <HAL_COMP_Init+0x1b4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a40      	ldr	r2, [pc, #256]	; (80080d4 <HAL_COMP_Init+0x1b4>)
 8007fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fd8:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d015      	beq.n	8008014 <HAL_COMP_Init+0xf4>
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d112      	bne.n	8008014 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007fee:	4b3a      	ldr	r3, [pc, #232]	; (80080d8 <HAL_COMP_Init+0x1b8>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	099b      	lsrs	r3, r3, #6
 8007ff4:	4a39      	ldr	r2, [pc, #228]	; (80080dc <HAL_COMP_Init+0x1bc>)
 8007ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ffa:	099a      	lsrs	r2, r3, #6
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8008006:	e002      	b.n	800800e <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3b01      	subs	r3, #1
 800800c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1f9      	bne.n	8008008 <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a31      	ldr	r2, [pc, #196]	; (80080e0 <HAL_COMP_Init+0x1c0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d102      	bne.n	8008024 <HAL_COMP_Init+0x104>
 800801e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008022:	e001      	b.n	8008028 <HAL_COMP_Init+0x108>
 8008024:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008028:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	f003 0303 	and.w	r3, r3, #3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d037      	beq.n	80080a6 <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	f003 0310 	and.w	r3, r3, #16
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8008042:	6938      	ldr	r0, [r7, #16]
 8008044:	f7ff fefa 	bl	8007e3c <LL_EXTI_EnableRisingTrig_0_31>
 8008048:	e002      	b.n	8008050 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800804a:	6938      	ldr	r0, [r7, #16]
 800804c:	f7ff ff08 	bl	8007e60 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a1b      	ldr	r3, [r3, #32]
 8008054:	f003 0320 	and.w	r3, r3, #32
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800805c:	6938      	ldr	r0, [r7, #16]
 800805e:	f7ff ff13 	bl	8007e88 <LL_EXTI_EnableFallingTrig_0_31>
 8008062:	e002      	b.n	800806a <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8008064:	6938      	ldr	r0, [r7, #16]
 8008066:	f7ff ff21 	bl	8007eac <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800806a:	6938      	ldr	r0, [r7, #16]
 800806c:	f7ff ff48 	bl	8007f00 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800807c:	6938      	ldr	r0, [r7, #16]
 800807e:	f7ff feb3 	bl	8007de8 <LL_EXTI_EnableEvent_0_31>
 8008082:	e002      	b.n	800808a <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8008084:	6938      	ldr	r0, [r7, #16]
 8008086:	f7ff fec3 	bl	8007e10 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8008096:	6938      	ldr	r0, [r7, #16]
 8008098:	f7ff fe7c 	bl	8007d94 <LL_EXTI_EnableIT_0_31>
 800809c:	e009      	b.n	80080b2 <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800809e:	6938      	ldr	r0, [r7, #16]
 80080a0:	f7ff fe8c 	bl	8007dbc <LL_EXTI_DisableIT_0_31>
 80080a4:	e005      	b.n	80080b2 <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80080a6:	6938      	ldr	r0, [r7, #16]
 80080a8:	f7ff feb2 	bl	8007e10 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80080ac:	6938      	ldr	r0, [r7, #16]
 80080ae:	f7ff fe85 	bl	8007dbc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d103      	bne.n	80080c6 <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80080c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3720      	adds	r7, #32
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	f9207c03 	.word	0xf9207c03
 80080d4:	40010204 	.word	0x40010204
 80080d8:	20000078 	.word	0x20000078
 80080dc:	053e2d63 	.word	0x053e2d63
 80080e0:	40010200 	.word	0x40010200

080080e4 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d102      	bne.n	8008100 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	73fb      	strb	r3, [r7, #15]
 80080fe:	e02f      	b.n	8008160 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800810a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800810e:	d102      	bne.n	8008116 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	73fb      	strb	r3, [r7, #15]
 8008114:	e024      	b.n	8008160 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b01      	cmp	r3, #1
 8008120:	d11c      	bne.n	800815c <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0201 	orr.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2202      	movs	r2, #2
 8008136:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800813a:	4b0d      	ldr	r3, [pc, #52]	; (8008170 <HAL_COMP_Start+0x8c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	099b      	lsrs	r3, r3, #6
 8008140:	4a0c      	ldr	r2, [pc, #48]	; (8008174 <HAL_COMP_Start+0x90>)
 8008142:	fba2 2303 	umull	r2, r3, r2, r3
 8008146:	099b      	lsrs	r3, r3, #6
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800814c:	e002      	b.n	8008154 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	3b01      	subs	r3, #1
 8008152:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1f9      	bne.n	800814e <HAL_COMP_Start+0x6a>
 800815a:	e001      	b.n	8008160 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20000078 	.word	0x20000078
 8008174:	053e2d63 	.word	0x053e2d63

08008178 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d102      	bne.n	8008190 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	73fb      	strb	r3, [r7, #15]
 800818e:	e01f      	b.n	80081d0 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800819a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800819e:	d102      	bne.n	80081a6 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	73fb      	strb	r3, [r7, #15]
 80081a4:	e014      	b.n	80081d0 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00c      	beq.n	80081cc <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 0201 	bic.w	r2, r2, #1
 80081c0:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80081ca:	e001      	b.n	80081d0 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
	...

080081e0 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a11      	ldr	r2, [pc, #68]	; (8008234 <HAL_COMP_IRQHandler+0x54>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d102      	bne.n	80081f8 <HAL_COMP_IRQHandler+0x18>
 80081f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80081f6:	e001      	b.n	80081fc <HAL_COMP_IRQHandler+0x1c>
 80081f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f7ff fe68 	bl	8007ed4 <LL_EXTI_IsActiveFlag_0_31>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d010      	beq.n	800822c <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 800820a:	4b0b      	ldr	r3, [pc, #44]	; (8008238 <HAL_COMP_IRQHandler+0x58>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008212:	2b00      	cmp	r3, #0
 8008214:	d004      	beq.n	8008220 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8008216:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800821a:	f7ff fe71 	bl	8007f00 <LL_EXTI_ClearFlag_0_31>
 800821e:	e002      	b.n	8008226 <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f7ff fe6d 	bl	8007f00 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7fd ff72 	bl	8006110 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	40010200 	.word	0x40010200
 8008238:	40010204 	.word	0x40010204

0800823c <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	0f9b      	lsrs	r3, r3, #30
 800824c:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800826c:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <__NVIC_SetPriorityGrouping+0x44>)
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008278:	4013      	ands	r3, r2
 800827a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800828c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800828e:	4a04      	ldr	r2, [pc, #16]	; (80082a0 <__NVIC_SetPriorityGrouping+0x44>)
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	60d3      	str	r3, [r2, #12]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	e000ed00 	.word	0xe000ed00

080082a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082a8:	4b04      	ldr	r3, [pc, #16]	; (80082bc <__NVIC_GetPriorityGrouping+0x18>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	0a1b      	lsrs	r3, r3, #8
 80082ae:	f003 0307 	and.w	r3, r3, #7
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	e000ed00 	.word	0xe000ed00

080082c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	db0b      	blt.n	80082ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	f003 021f 	and.w	r2, r3, #31
 80082d8:	4907      	ldr	r1, [pc, #28]	; (80082f8 <__NVIC_EnableIRQ+0x38>)
 80082da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082de:	095b      	lsrs	r3, r3, #5
 80082e0:	2001      	movs	r0, #1
 80082e2:	fa00 f202 	lsl.w	r2, r0, r2
 80082e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	e000e100 	.word	0xe000e100

080082fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800830a:	2b00      	cmp	r3, #0
 800830c:	db10      	blt.n	8008330 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	f003 021f 	and.w	r2, r3, #31
 8008314:	4909      	ldr	r1, [pc, #36]	; (800833c <__NVIC_DisableIRQ+0x40>)
 8008316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800831a:	095b      	lsrs	r3, r3, #5
 800831c:	2001      	movs	r0, #1
 800831e:	fa00 f202 	lsl.w	r2, r0, r2
 8008322:	3320      	adds	r3, #32
 8008324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008328:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800832c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	e000e100 	.word	0xe000e100

08008340 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800834a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800834e:	2b00      	cmp	r3, #0
 8008350:	db0c      	blt.n	800836c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	f003 021f 	and.w	r2, r3, #31
 8008358:	4907      	ldr	r1, [pc, #28]	; (8008378 <__NVIC_SetPendingIRQ+0x38>)
 800835a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800835e:	095b      	lsrs	r3, r3, #5
 8008360:	2001      	movs	r0, #1
 8008362:	fa00 f202 	lsl.w	r2, r0, r2
 8008366:	3340      	adds	r3, #64	; 0x40
 8008368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	e000e100 	.word	0xe000e100

0800837c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800838a:	2b00      	cmp	r3, #0
 800838c:	db0c      	blt.n	80083a8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	f003 021f 	and.w	r2, r3, #31
 8008394:	4907      	ldr	r1, [pc, #28]	; (80083b4 <__NVIC_ClearPendingIRQ+0x38>)
 8008396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800839a:	095b      	lsrs	r3, r3, #5
 800839c:	2001      	movs	r0, #1
 800839e:	fa00 f202 	lsl.w	r2, r0, r2
 80083a2:	3360      	adds	r3, #96	; 0x60
 80083a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	e000e100 	.word	0xe000e100

080083b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	6039      	str	r1, [r7, #0]
 80083c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	db0a      	blt.n	80083e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	490c      	ldr	r1, [pc, #48]	; (8008404 <__NVIC_SetPriority+0x4c>)
 80083d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083d6:	0112      	lsls	r2, r2, #4
 80083d8:	b2d2      	uxtb	r2, r2
 80083da:	440b      	add	r3, r1
 80083dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80083e0:	e00a      	b.n	80083f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	4908      	ldr	r1, [pc, #32]	; (8008408 <__NVIC_SetPriority+0x50>)
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	f003 030f 	and.w	r3, r3, #15
 80083ee:	3b04      	subs	r3, #4
 80083f0:	0112      	lsls	r2, r2, #4
 80083f2:	b2d2      	uxtb	r2, r2
 80083f4:	440b      	add	r3, r1
 80083f6:	761a      	strb	r2, [r3, #24]
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	e000e100 	.word	0xe000e100
 8008408:	e000ed00 	.word	0xe000ed00

0800840c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800840c:	b480      	push	{r7}
 800840e:	b089      	sub	sp, #36	; 0x24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f003 0307 	and.w	r3, r3, #7
 800841e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	f1c3 0307 	rsb	r3, r3, #7
 8008426:	2b04      	cmp	r3, #4
 8008428:	bf28      	it	cs
 800842a:	2304      	movcs	r3, #4
 800842c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	3304      	adds	r3, #4
 8008432:	2b06      	cmp	r3, #6
 8008434:	d902      	bls.n	800843c <NVIC_EncodePriority+0x30>
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	3b03      	subs	r3, #3
 800843a:	e000      	b.n	800843e <NVIC_EncodePriority+0x32>
 800843c:	2300      	movs	r3, #0
 800843e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008440:	f04f 32ff 	mov.w	r2, #4294967295
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	fa02 f303 	lsl.w	r3, r2, r3
 800844a:	43da      	mvns	r2, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	401a      	ands	r2, r3
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008454:	f04f 31ff 	mov.w	r1, #4294967295
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	fa01 f303 	lsl.w	r3, r1, r3
 800845e:	43d9      	mvns	r1, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008464:	4313      	orrs	r3, r2
         );
}
 8008466:	4618      	mov	r0, r3
 8008468:	3724      	adds	r7, #36	; 0x24
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
	...

08008474 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008474:	b480      	push	{r7}
 8008476:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008478:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800847c:	4b05      	ldr	r3, [pc, #20]	; (8008494 <__NVIC_SystemReset+0x20>)
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008484:	4903      	ldr	r1, [pc, #12]	; (8008494 <__NVIC_SystemReset+0x20>)
 8008486:	4b04      	ldr	r3, [pc, #16]	; (8008498 <__NVIC_SystemReset+0x24>)
 8008488:	4313      	orrs	r3, r2
 800848a:	60cb      	str	r3, [r1, #12]
 800848c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008490:	bf00      	nop
 8008492:	e7fd      	b.n	8008490 <__NVIC_SystemReset+0x1c>
 8008494:	e000ed00 	.word	0xe000ed00
 8008498:	05fa0004 	.word	0x05fa0004

0800849c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7ff fed9 	bl	800825c <__NVIC_SetPriorityGrouping>
}
 80084aa:	bf00      	nop
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	4603      	mov	r3, r0
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
 80084be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80084c0:	f7ff fef0 	bl	80082a4 <__NVIC_GetPriorityGrouping>
 80084c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	68b9      	ldr	r1, [r7, #8]
 80084ca:	6978      	ldr	r0, [r7, #20]
 80084cc:	f7ff ff9e 	bl	800840c <NVIC_EncodePriority>
 80084d0:	4602      	mov	r2, r0
 80084d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084d6:	4611      	mov	r1, r2
 80084d8:	4618      	mov	r0, r3
 80084da:	f7ff ff6d 	bl	80083b8 <__NVIC_SetPriority>
}
 80084de:	bf00      	nop
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	4603      	mov	r3, r0
 80084ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80084f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7ff fee3 	bl	80082c0 <__NVIC_EnableIRQ>
}
 80084fa:	bf00      	nop
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b082      	sub	sp, #8
 8008506:	af00      	add	r7, sp, #0
 8008508:	4603      	mov	r3, r0
 800850a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800850c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008510:	4618      	mov	r0, r3
 8008512:	f7ff fef3 	bl	80082fc <__NVIC_DisableIRQ>
}
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008522:	f7ff ffa7 	bl	8008474 <__NVIC_SystemReset>

08008526 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b082      	sub	sp, #8
 800852a:	af00      	add	r7, sp, #0
 800852c:	4603      	mov	r3, r0
 800852e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8008530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff ff03 	bl	8008340 <__NVIC_SetPendingIRQ>
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	4603      	mov	r3, r0
 800854a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800854c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff ff13 	bl	800837c <__NVIC_ClearPendingIRQ>
}
 8008556:	bf00      	nop
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e08d      	b.n	800868e <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	4b47      	ldr	r3, [pc, #284]	; (8008698 <HAL_DMA_Init+0x138>)
 800857a:	429a      	cmp	r2, r3
 800857c:	d80f      	bhi.n	800859e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	4b45      	ldr	r3, [pc, #276]	; (800869c <HAL_DMA_Init+0x13c>)
 8008586:	4413      	add	r3, r2
 8008588:	4a45      	ldr	r2, [pc, #276]	; (80086a0 <HAL_DMA_Init+0x140>)
 800858a:	fba2 2303 	umull	r2, r3, r2, r3
 800858e:	091b      	lsrs	r3, r3, #4
 8008590:	009a      	lsls	r2, r3, #2
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a42      	ldr	r2, [pc, #264]	; (80086a4 <HAL_DMA_Init+0x144>)
 800859a:	641a      	str	r2, [r3, #64]	; 0x40
 800859c:	e00e      	b.n	80085bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	4b40      	ldr	r3, [pc, #256]	; (80086a8 <HAL_DMA_Init+0x148>)
 80085a6:	4413      	add	r3, r2
 80085a8:	4a3d      	ldr	r2, [pc, #244]	; (80086a0 <HAL_DMA_Init+0x140>)
 80085aa:	fba2 2303 	umull	r2, r3, r2, r3
 80085ae:	091b      	lsrs	r3, r3, #4
 80085b0:	009a      	lsls	r2, r3, #2
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a3c      	ldr	r2, [pc, #240]	; (80086ac <HAL_DMA_Init+0x14c>)
 80085ba:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80085d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80085e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fa74 	bl	8008afc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800861c:	d102      	bne.n	8008624 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800862c:	b2d2      	uxtb	r2, r2
 800862e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008638:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d010      	beq.n	8008664 <HAL_DMA_Init+0x104>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	2b04      	cmp	r3, #4
 8008648:	d80c      	bhi.n	8008664 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fa94 	bl	8008b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008654:	2200      	movs	r2, #0
 8008656:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008660:	605a      	str	r2, [r3, #4]
 8008662:	e008      	b.n	8008676 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40020407 	.word	0x40020407
 800869c:	bffdfff8 	.word	0xbffdfff8
 80086a0:	cccccccd 	.word	0xcccccccd
 80086a4:	40020000 	.word	0x40020000
 80086a8:	bffdfbf8 	.word	0xbffdfbf8
 80086ac:	40020400 	.word	0x40020400

080086b0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d101      	bne.n	80086d0 <HAL_DMA_Start_IT+0x20>
 80086cc:	2302      	movs	r3, #2
 80086ce:	e066      	b.n	800879e <HAL_DMA_Start_IT+0xee>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d155      	bne.n	8008790 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0201 	bic.w	r2, r2, #1
 8008700:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 f9b9 	bl	8008a80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008712:	2b00      	cmp	r3, #0
 8008714:	d008      	beq.n	8008728 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f042 020e 	orr.w	r2, r2, #14
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	e00f      	b.n	8008748 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0204 	bic.w	r2, r2, #4
 8008736:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 020a 	orr.w	r2, r2, #10
 8008746:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008764:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800876a:	2b00      	cmp	r3, #0
 800876c:	d007      	beq.n	800877e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800877c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f042 0201 	orr.w	r2, r2, #1
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	e005      	b.n	800879c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008798:	2302      	movs	r3, #2
 800879a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b083      	sub	sp, #12
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e04f      	b.n	8008858 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d008      	beq.n	80087d6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2204      	movs	r2, #4
 80087c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e040      	b.n	8008858 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 020e 	bic.w	r2, r2, #14
 80087e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 0201 	bic.w	r2, r2, #1
 8008804:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800880a:	f003 021c 	and.w	r2, r3, #28
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	2101      	movs	r1, #1
 8008814:	fa01 f202 	lsl.w	r2, r1, r2
 8008818:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008822:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00c      	beq.n	8008846 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800883a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008844:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b02      	cmp	r3, #2
 800887a:	d005      	beq.n	8008888 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2204      	movs	r2, #4
 8008880:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	73fb      	strb	r3, [r7, #15]
 8008886:	e047      	b.n	8008918 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 020e 	bic.w	r2, r2, #14
 8008896:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 0201 	bic.w	r2, r2, #1
 80088a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088bc:	f003 021c 	and.w	r2, r3, #28
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c4:	2101      	movs	r1, #1
 80088c6:	fa01 f202 	lsl.w	r2, r1, r2
 80088ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80088d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00c      	beq.n	80088f8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80088f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	4798      	blx	r3
    }
  }
  return status;
 8008918:	7bfb      	ldrb	r3, [r7, #15]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800893e:	f003 031c 	and.w	r3, r3, #28
 8008942:	2204      	movs	r2, #4
 8008944:	409a      	lsls	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4013      	ands	r3, r2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d026      	beq.n	800899c <HAL_DMA_IRQHandler+0x7a>
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	d021      	beq.n	800899c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0320 	and.w	r3, r3, #32
 8008962:	2b00      	cmp	r3, #0
 8008964:	d107      	bne.n	8008976 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0204 	bic.w	r2, r2, #4
 8008974:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897a:	f003 021c 	and.w	r2, r3, #28
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	2104      	movs	r1, #4
 8008984:	fa01 f202 	lsl.w	r2, r1, r2
 8008988:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898e:	2b00      	cmp	r3, #0
 8008990:	d071      	beq.n	8008a76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800899a:	e06c      	b.n	8008a76 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a0:	f003 031c 	and.w	r3, r3, #28
 80089a4:	2202      	movs	r2, #2
 80089a6:	409a      	lsls	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d02e      	beq.n	8008a0e <HAL_DMA_IRQHandler+0xec>
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d029      	beq.n	8008a0e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0320 	and.w	r3, r3, #32
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10b      	bne.n	80089e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 020a 	bic.w	r2, r2, #10
 80089d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e4:	f003 021c 	and.w	r2, r3, #28
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ec:	2102      	movs	r1, #2
 80089ee:	fa01 f202 	lsl.w	r2, r1, r2
 80089f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d038      	beq.n	8008a76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008a0c:	e033      	b.n	8008a76 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a12:	f003 031c 	and.w	r3, r3, #28
 8008a16:	2208      	movs	r2, #8
 8008a18:	409a      	lsls	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d02a      	beq.n	8008a78 <HAL_DMA_IRQHandler+0x156>
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	f003 0308 	and.w	r3, r3, #8
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d025      	beq.n	8008a78 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 020e 	bic.w	r2, r2, #14
 8008a3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a40:	f003 021c 	and.w	r2, r3, #28
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a48:	2101      	movs	r1, #1
 8008a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8008a4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d004      	beq.n	8008a78 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008a76:	bf00      	nop
 8008a78:	bf00      	nop
}
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
 8008a8c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008a96:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d004      	beq.n	8008aaa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008aa8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aae:	f003 021c 	and.w	r2, r3, #28
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8008abc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	2b10      	cmp	r3, #16
 8008acc:	d108      	bne.n	8008ae0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008ade:	e007      	b.n	8008af0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	60da      	str	r2, [r3, #12]
}
 8008af0:	bf00      	nop
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	4b17      	ldr	r3, [pc, #92]	; (8008b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d80a      	bhi.n	8008b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b14:	089b      	lsrs	r3, r3, #2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b1c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6493      	str	r3, [r2, #72]	; 0x48
 8008b24:	e007      	b.n	8008b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b2a:	089b      	lsrs	r3, r3, #2
 8008b2c:	009a      	lsls	r2, r3, #2
 8008b2e:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008b30:	4413      	add	r3, r2
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	3b08      	subs	r3, #8
 8008b3e:	4a0c      	ldr	r2, [pc, #48]	; (8008b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008b40:	fba2 2303 	umull	r2, r3, r2, r3
 8008b44:	091b      	lsrs	r3, r3, #4
 8008b46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a0a      	ldr	r2, [pc, #40]	; (8008b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008b4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f003 031c 	and.w	r3, r3, #28
 8008b54:	2201      	movs	r2, #1
 8008b56:	409a      	lsls	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008b5c:	bf00      	nop
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	40020407 	.word	0x40020407
 8008b6c:	4002081c 	.word	0x4002081c
 8008b70:	cccccccd 	.word	0xcccccccd
 8008b74:	40020880 	.word	0x40020880

08008b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	461a      	mov	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a08      	ldr	r2, [pc, #32]	; (8008bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008b9a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	f003 0303 	and.w	r3, r3, #3
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	409a      	lsls	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008bac:	bf00      	nop
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	1000823f 	.word	0x1000823f
 8008bbc:	40020940 	.word	0x40020940

08008bc0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008bce:	e14c      	b.n	8008e6a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bdc:	4013      	ands	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 813e 	beq.w	8008e64 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d003      	beq.n	8008bf8 <HAL_GPIO_Init+0x38>
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	2b12      	cmp	r3, #18
 8008bf6:	d123      	bne.n	8008c40 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	08da      	lsrs	r2, r3, #3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3208      	adds	r2, #8
 8008c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	220f      	movs	r2, #15
 8008c10:	fa02 f303 	lsl.w	r3, r2, r3
 8008c14:	43db      	mvns	r3, r3
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4013      	ands	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	691a      	ldr	r2, [r3, #16]
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f003 0307 	and.w	r3, r3, #7
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	08da      	lsrs	r2, r3, #3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3208      	adds	r2, #8
 8008c3a:	6939      	ldr	r1, [r7, #16]
 8008c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	005b      	lsls	r3, r3, #1
 8008c4a:	2203      	movs	r2, #3
 8008c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c50:	43db      	mvns	r3, r3
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	4013      	ands	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f003 0203 	and.w	r2, r3, #3
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	fa02 f303 	lsl.w	r3, r2, r3
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d00b      	beq.n	8008c94 <HAL_GPIO_Init+0xd4>
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d007      	beq.n	8008c94 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c88:	2b11      	cmp	r3, #17
 8008c8a:	d003      	beq.n	8008c94 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	2b12      	cmp	r3, #18
 8008c92:	d130      	bne.n	8008cf6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	2203      	movs	r2, #3
 8008ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca4:	43db      	mvns	r3, r3
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	68da      	ldr	r2, [r3, #12]
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cca:	2201      	movs	r2, #1
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	43db      	mvns	r3, r3
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	091b      	lsrs	r3, r3, #4
 8008ce0:	f003 0201 	and.w	r2, r3, #1
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	2203      	movs	r2, #3
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	43db      	mvns	r3, r3
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 8098 	beq.w	8008e64 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008d34:	4a54      	ldr	r2, [pc, #336]	; (8008e88 <HAL_GPIO_Init+0x2c8>)
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	089b      	lsrs	r3, r3, #2
 8008d3a:	3302      	adds	r3, #2
 8008d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f003 0303 	and.w	r3, r3, #3
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	220f      	movs	r2, #15
 8008d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d50:	43db      	mvns	r3, r3
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	4013      	ands	r3, r2
 8008d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008d5e:	d019      	beq.n	8008d94 <HAL_GPIO_Init+0x1d4>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a4a      	ldr	r2, [pc, #296]	; (8008e8c <HAL_GPIO_Init+0x2cc>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d013      	beq.n	8008d90 <HAL_GPIO_Init+0x1d0>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a49      	ldr	r2, [pc, #292]	; (8008e90 <HAL_GPIO_Init+0x2d0>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d00d      	beq.n	8008d8c <HAL_GPIO_Init+0x1cc>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a48      	ldr	r2, [pc, #288]	; (8008e94 <HAL_GPIO_Init+0x2d4>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d007      	beq.n	8008d88 <HAL_GPIO_Init+0x1c8>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a47      	ldr	r2, [pc, #284]	; (8008e98 <HAL_GPIO_Init+0x2d8>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d101      	bne.n	8008d84 <HAL_GPIO_Init+0x1c4>
 8008d80:	2304      	movs	r3, #4
 8008d82:	e008      	b.n	8008d96 <HAL_GPIO_Init+0x1d6>
 8008d84:	2307      	movs	r3, #7
 8008d86:	e006      	b.n	8008d96 <HAL_GPIO_Init+0x1d6>
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e004      	b.n	8008d96 <HAL_GPIO_Init+0x1d6>
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	e002      	b.n	8008d96 <HAL_GPIO_Init+0x1d6>
 8008d90:	2301      	movs	r3, #1
 8008d92:	e000      	b.n	8008d96 <HAL_GPIO_Init+0x1d6>
 8008d94:	2300      	movs	r3, #0
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	f002 0203 	and.w	r2, r2, #3
 8008d9c:	0092      	lsls	r2, r2, #2
 8008d9e:	4093      	lsls	r3, r2
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008da6:	4938      	ldr	r1, [pc, #224]	; (8008e88 <HAL_GPIO_Init+0x2c8>)
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	089b      	lsrs	r3, r3, #2
 8008dac:	3302      	adds	r3, #2
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008db4:	4b39      	ldr	r3, [pc, #228]	; (8008e9c <HAL_GPIO_Init+0x2dc>)
 8008db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	43db      	mvns	r3, r3
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008dda:	4a30      	ldr	r2, [pc, #192]	; (8008e9c <HAL_GPIO_Init+0x2dc>)
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008de2:	4b2e      	ldr	r3, [pc, #184]	; (8008e9c <HAL_GPIO_Init+0x2dc>)
 8008de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	43db      	mvns	r3, r3
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4013      	ands	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008e08:	4a24      	ldr	r2, [pc, #144]	; (8008e9c <HAL_GPIO_Init+0x2dc>)
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e10:	4b22      	ldr	r3, [pc, #136]	; (8008e9c <HAL_GPIO_Init+0x2dc>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	43db      	mvns	r3, r3
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008e34:	4a19      	ldr	r2, [pc, #100]	; (8008e9c <HAL_GPIO_Init+0x2dc>)
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e3a:	4b18      	ldr	r3, [pc, #96]	; (8008e9c <HAL_GPIO_Init+0x2dc>)
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	43db      	mvns	r3, r3
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	4013      	ands	r3, r2
 8008e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008e5e:	4a0f      	ldr	r2, [pc, #60]	; (8008e9c <HAL_GPIO_Init+0x2dc>)
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	3301      	adds	r3, #1
 8008e68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	fa22 f303 	lsr.w	r3, r2, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f47f aeab 	bne.w	8008bd0 <HAL_GPIO_Init+0x10>
  }
}
 8008e7a:	bf00      	nop
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	40010000 	.word	0x40010000
 8008e8c:	48000400 	.word	0x48000400
 8008e90:	48000800 	.word	0x48000800
 8008e94:	48000c00 	.word	0x48000c00
 8008e98:	48001000 	.word	0x48001000
 8008e9c:	58000800 	.word	0x58000800

08008ea0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	691a      	ldr	r2, [r3, #16]
 8008eb0:	887b      	ldrh	r3, [r7, #2]
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	73fb      	strb	r3, [r7, #15]
 8008ebc:	e001      	b.n	8008ec2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	807b      	strh	r3, [r7, #2]
 8008edc:	4613      	mov	r3, r2
 8008ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ee0:	787b      	ldrb	r3, [r7, #1]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ee6:	887a      	ldrh	r2, [r7, #2]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008eec:	e002      	b.n	8008ef4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008eee:	887a      	ldrh	r2, [r7, #2]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008f0a:	4b08      	ldr	r3, [pc, #32]	; (8008f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	88fb      	ldrh	r3, [r7, #6]
 8008f10:	4013      	ands	r3, r2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d006      	beq.n	8008f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f16:	4a05      	ldr	r2, [pc, #20]	; (8008f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f18:	88fb      	ldrh	r3, [r7, #6]
 8008f1a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f1c:	88fb      	ldrh	r3, [r7, #6]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fa feaa 	bl	8003c78 <HAL_GPIO_EXTI_Callback>
  }
}
 8008f24:	bf00      	nop
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	58000800 	.word	0x58000800

08008f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e081      	b.n	8009046 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d106      	bne.n	8008f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fa fdd0 	bl	8003afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2224      	movs	r2, #36	; 0x24
 8008f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 0201 	bic.w	r2, r2, #1
 8008f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d107      	bne.n	8008faa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fa6:	609a      	str	r2, [r3, #8]
 8008fa8:	e006      	b.n	8008fb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	689a      	ldr	r2, [r3, #8]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008fb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d104      	bne.n	8008fca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6812      	ldr	r2, [r2, #0]
 8008fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	691a      	ldr	r2, [r3, #16]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	ea42 0103 	orr.w	r1, r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	021a      	lsls	r2, r3, #8
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	69d9      	ldr	r1, [r3, #28]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a1a      	ldr	r2, [r3, #32]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	430a      	orrs	r2, r1
 8009016:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f042 0201 	orr.w	r2, r2, #1
 8009026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2220      	movs	r2, #32
 8009032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af02      	add	r7, sp, #8
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	607a      	str	r2, [r7, #4]
 800905a:	461a      	mov	r2, r3
 800905c:	460b      	mov	r3, r1
 800905e:	817b      	strh	r3, [r7, #10]
 8009060:	4613      	mov	r3, r2
 8009062:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b20      	cmp	r3, #32
 800906e:	f040 80da 	bne.w	8009226 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009078:	2b01      	cmp	r3, #1
 800907a:	d101      	bne.n	8009080 <HAL_I2C_Master_Transmit+0x30>
 800907c:	2302      	movs	r3, #2
 800907e:	e0d3      	b.n	8009228 <HAL_I2C_Master_Transmit+0x1d8>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009088:	f7fd fce0 	bl	8006a4c <HAL_GetTick>
 800908c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	2319      	movs	r3, #25
 8009094:	2201      	movs	r2, #1
 8009096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f001 fbba 	bl	800a814 <I2C_WaitOnFlagUntilTimeout>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e0be      	b.n	8009228 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2221      	movs	r2, #33	; 0x21
 80090ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2210      	movs	r2, #16
 80090b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	893a      	ldrh	r2, [r7, #8]
 80090ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	2bff      	cmp	r3, #255	; 0xff
 80090da:	d90e      	bls.n	80090fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	22ff      	movs	r2, #255	; 0xff
 80090e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	8979      	ldrh	r1, [r7, #10]
 80090ea:	4b51      	ldr	r3, [pc, #324]	; (8009230 <HAL_I2C_Master_Transmit+0x1e0>)
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f001 fd1c 	bl	800ab30 <I2C_TransferConfig>
 80090f8:	e06c      	b.n	80091d4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009108:	b2da      	uxtb	r2, r3
 800910a:	8979      	ldrh	r1, [r7, #10]
 800910c:	4b48      	ldr	r3, [pc, #288]	; (8009230 <HAL_I2C_Master_Transmit+0x1e0>)
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f001 fd0b 	bl	800ab30 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800911a:	e05b      	b.n	80091d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	6a39      	ldr	r1, [r7, #32]
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f001 fbb7 	bl	800a894 <I2C_WaitOnTXISFlagUntilTimeout>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e07b      	b.n	8009228 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	781a      	ldrb	r2, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800914a:	b29b      	uxth	r3, r3
 800914c:	3b01      	subs	r3, #1
 800914e:	b29a      	uxth	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009158:	3b01      	subs	r3, #1
 800915a:	b29a      	uxth	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009164:	b29b      	uxth	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d034      	beq.n	80091d4 <HAL_I2C_Master_Transmit+0x184>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800916e:	2b00      	cmp	r3, #0
 8009170:	d130      	bne.n	80091d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	2200      	movs	r2, #0
 800917a:	2180      	movs	r1, #128	; 0x80
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f001 fb49 	bl	800a814 <I2C_WaitOnFlagUntilTimeout>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d001      	beq.n	800918c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e04d      	b.n	8009228 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009190:	b29b      	uxth	r3, r3
 8009192:	2bff      	cmp	r3, #255	; 0xff
 8009194:	d90e      	bls.n	80091b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	22ff      	movs	r2, #255	; 0xff
 800919a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	8979      	ldrh	r1, [r7, #10]
 80091a4:	2300      	movs	r3, #0
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f001 fcbf 	bl	800ab30 <I2C_TransferConfig>
 80091b2:	e00f      	b.n	80091d4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	8979      	ldrh	r1, [r7, #10]
 80091c6:	2300      	movs	r3, #0
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f001 fcae 	bl	800ab30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d8:	b29b      	uxth	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d19e      	bne.n	800911c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	6a39      	ldr	r1, [r7, #32]
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f001 fb96 	bl	800a914 <I2C_WaitOnSTOPFlagUntilTimeout>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e01a      	b.n	8009228 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2220      	movs	r2, #32
 80091f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6859      	ldr	r1, [r3, #4]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <HAL_I2C_Master_Transmit+0x1e4>)
 8009206:	400b      	ands	r3, r1
 8009208:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2220      	movs	r2, #32
 800920e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	e000      	b.n	8009228 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009226:	2302      	movs	r3, #2
  }
}
 8009228:	4618      	mov	r0, r3
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	80002000 	.word	0x80002000
 8009234:	fe00e800 	.word	0xfe00e800

08009238 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af02      	add	r7, sp, #8
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	607a      	str	r2, [r7, #4]
 8009242:	461a      	mov	r2, r3
 8009244:	460b      	mov	r3, r1
 8009246:	817b      	strh	r3, [r7, #10]
 8009248:	4613      	mov	r3, r2
 800924a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b20      	cmp	r3, #32
 8009256:	f040 80db 	bne.w	8009410 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009260:	2b01      	cmp	r3, #1
 8009262:	d101      	bne.n	8009268 <HAL_I2C_Master_Receive+0x30>
 8009264:	2302      	movs	r3, #2
 8009266:	e0d4      	b.n	8009412 <HAL_I2C_Master_Receive+0x1da>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009270:	f7fd fbec 	bl	8006a4c <HAL_GetTick>
 8009274:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	2319      	movs	r3, #25
 800927c:	2201      	movs	r2, #1
 800927e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f001 fac6 	bl	800a814 <I2C_WaitOnFlagUntilTimeout>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e0bf      	b.n	8009412 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2222      	movs	r2, #34	; 0x22
 8009296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2210      	movs	r2, #16
 800929e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	893a      	ldrh	r2, [r7, #8]
 80092b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092be:	b29b      	uxth	r3, r3
 80092c0:	2bff      	cmp	r3, #255	; 0xff
 80092c2:	d90e      	bls.n	80092e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	22ff      	movs	r2, #255	; 0xff
 80092c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	8979      	ldrh	r1, [r7, #10]
 80092d2:	4b52      	ldr	r3, [pc, #328]	; (800941c <HAL_I2C_Master_Receive+0x1e4>)
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f001 fc28 	bl	800ab30 <I2C_TransferConfig>
 80092e0:	e06d      	b.n	80093be <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	8979      	ldrh	r1, [r7, #10]
 80092f4:	4b49      	ldr	r3, [pc, #292]	; (800941c <HAL_I2C_Master_Receive+0x1e4>)
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f001 fc17 	bl	800ab30 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009302:	e05c      	b.n	80093be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	6a39      	ldr	r1, [r7, #32]
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f001 fb3f 	bl	800a98c <I2C_WaitOnRXNEFlagUntilTimeout>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e07c      	b.n	8009412 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	b2d2      	uxtb	r2, r2
 8009324:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009334:	3b01      	subs	r3, #1
 8009336:	b29a      	uxth	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009340:	b29b      	uxth	r3, r3
 8009342:	3b01      	subs	r3, #1
 8009344:	b29a      	uxth	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800934e:	b29b      	uxth	r3, r3
 8009350:	2b00      	cmp	r3, #0
 8009352:	d034      	beq.n	80093be <HAL_I2C_Master_Receive+0x186>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009358:	2b00      	cmp	r3, #0
 800935a:	d130      	bne.n	80093be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	2200      	movs	r2, #0
 8009364:	2180      	movs	r1, #128	; 0x80
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f001 fa54 	bl	800a814 <I2C_WaitOnFlagUntilTimeout>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e04d      	b.n	8009412 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800937a:	b29b      	uxth	r3, r3
 800937c:	2bff      	cmp	r3, #255	; 0xff
 800937e:	d90e      	bls.n	800939e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	22ff      	movs	r2, #255	; 0xff
 8009384:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800938a:	b2da      	uxtb	r2, r3
 800938c:	8979      	ldrh	r1, [r7, #10]
 800938e:	2300      	movs	r3, #0
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f001 fbca 	bl	800ab30 <I2C_TransferConfig>
 800939c:	e00f      	b.n	80093be <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	8979      	ldrh	r1, [r7, #10]
 80093b0:	2300      	movs	r3, #0
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f001 fbb9 	bl	800ab30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d19d      	bne.n	8009304 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	6a39      	ldr	r1, [r7, #32]
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f001 faa1 	bl	800a914 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e01a      	b.n	8009412 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2220      	movs	r2, #32
 80093e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6859      	ldr	r1, [r3, #4]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	4b0c      	ldr	r3, [pc, #48]	; (8009420 <HAL_I2C_Master_Receive+0x1e8>)
 80093f0:	400b      	ands	r3, r1
 80093f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2220      	movs	r2, #32
 80093f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	e000      	b.n	8009412 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009410:	2302      	movs	r3, #2
  }
}
 8009412:	4618      	mov	r0, r3
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	80002400 	.word	0x80002400
 8009420:	fe00e800 	.word	0xfe00e800

08009424 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af02      	add	r7, sp, #8
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	607a      	str	r2, [r7, #4]
 800942e:	461a      	mov	r2, r3
 8009430:	460b      	mov	r3, r1
 8009432:	817b      	strh	r3, [r7, #10]
 8009434:	4613      	mov	r3, r2
 8009436:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b20      	cmp	r3, #32
 8009442:	d153      	bne.n	80094ec <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800944e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009452:	d101      	bne.n	8009458 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8009454:	2302      	movs	r3, #2
 8009456:	e04a      	b.n	80094ee <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800945e:	2b01      	cmp	r3, #1
 8009460:	d101      	bne.n	8009466 <HAL_I2C_Master_Receive_IT+0x42>
 8009462:	2302      	movs	r3, #2
 8009464:	e043      	b.n	80094ee <HAL_I2C_Master_Receive_IT+0xca>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2222      	movs	r2, #34	; 0x22
 8009472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2210      	movs	r2, #16
 800947a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	893a      	ldrh	r2, [r7, #8]
 800948e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4a19      	ldr	r2, [pc, #100]	; (80094f8 <HAL_I2C_Master_Receive_IT+0xd4>)
 8009494:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	4a18      	ldr	r2, [pc, #96]	; (80094fc <HAL_I2C_Master_Receive_IT+0xd8>)
 800949a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	2bff      	cmp	r3, #255	; 0xff
 80094a4:	d906      	bls.n	80094b4 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	22ff      	movs	r2, #255	; 0xff
 80094aa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80094ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094b0:	617b      	str	r3, [r7, #20]
 80094b2:	e007      	b.n	80094c4 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80094be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094c2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	8979      	ldrh	r1, [r7, #10]
 80094cc:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <HAL_I2C_Master_Receive_IT+0xdc>)
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f001 fb2c 	bl	800ab30 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80094e0:	2102      	movs	r1, #2
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f001 fb52 	bl	800ab8c <I2C_Enable_IRQ>

    return HAL_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	e000      	b.n	80094ee <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80094ec:	2302      	movs	r3, #2
  }
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	ffff0000 	.word	0xffff0000
 80094fc:	08009809 	.word	0x08009809
 8009500:	80002400 	.word	0x80002400

08009504 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af02      	add	r7, sp, #8
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	4608      	mov	r0, r1
 800950e:	4611      	mov	r1, r2
 8009510:	461a      	mov	r2, r3
 8009512:	4603      	mov	r3, r0
 8009514:	817b      	strh	r3, [r7, #10]
 8009516:	460b      	mov	r3, r1
 8009518:	813b      	strh	r3, [r7, #8]
 800951a:	4613      	mov	r3, r2
 800951c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b20      	cmp	r3, #32
 8009528:	f040 80f9 	bne.w	800971e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d002      	beq.n	8009538 <HAL_I2C_Mem_Write+0x34>
 8009532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009534:	2b00      	cmp	r3, #0
 8009536:	d105      	bne.n	8009544 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800953e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e0ed      	b.n	8009720 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <HAL_I2C_Mem_Write+0x4e>
 800954e:	2302      	movs	r3, #2
 8009550:	e0e6      	b.n	8009720 <HAL_I2C_Mem_Write+0x21c>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800955a:	f7fd fa77 	bl	8006a4c <HAL_GetTick>
 800955e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	2319      	movs	r3, #25
 8009566:	2201      	movs	r2, #1
 8009568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f001 f951 	bl	800a814 <I2C_WaitOnFlagUntilTimeout>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e0d1      	b.n	8009720 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2221      	movs	r2, #33	; 0x21
 8009580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2240      	movs	r2, #64	; 0x40
 8009588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6a3a      	ldr	r2, [r7, #32]
 8009596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800959c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80095a4:	88f8      	ldrh	r0, [r7, #6]
 80095a6:	893a      	ldrh	r2, [r7, #8]
 80095a8:	8979      	ldrh	r1, [r7, #10]
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	4603      	mov	r3, r0
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 fd0f 	bl	8009fd8 <I2C_RequestMemoryWrite>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d005      	beq.n	80095cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e0a9      	b.n	8009720 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	2bff      	cmp	r3, #255	; 0xff
 80095d4:	d90e      	bls.n	80095f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	22ff      	movs	r2, #255	; 0xff
 80095da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	8979      	ldrh	r1, [r7, #10]
 80095e4:	2300      	movs	r3, #0
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f001 fa9f 	bl	800ab30 <I2C_TransferConfig>
 80095f2:	e00f      	b.n	8009614 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009602:	b2da      	uxtb	r2, r3
 8009604:	8979      	ldrh	r1, [r7, #10]
 8009606:	2300      	movs	r3, #0
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f001 fa8e 	bl	800ab30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f001 f93b 	bl	800a894 <I2C_WaitOnTXISFlagUntilTimeout>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e07b      	b.n	8009720 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962c:	781a      	ldrb	r2, [r3, #0]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009642:	b29b      	uxth	r3, r3
 8009644:	3b01      	subs	r3, #1
 8009646:	b29a      	uxth	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009650:	3b01      	subs	r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800965c:	b29b      	uxth	r3, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d034      	beq.n	80096cc <HAL_I2C_Mem_Write+0x1c8>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009666:	2b00      	cmp	r3, #0
 8009668:	d130      	bne.n	80096cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	2200      	movs	r2, #0
 8009672:	2180      	movs	r1, #128	; 0x80
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f001 f8cd 	bl	800a814 <I2C_WaitOnFlagUntilTimeout>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e04d      	b.n	8009720 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009688:	b29b      	uxth	r3, r3
 800968a:	2bff      	cmp	r3, #255	; 0xff
 800968c:	d90e      	bls.n	80096ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	22ff      	movs	r2, #255	; 0xff
 8009692:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009698:	b2da      	uxtb	r2, r3
 800969a:	8979      	ldrh	r1, [r7, #10]
 800969c:	2300      	movs	r3, #0
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f001 fa43 	bl	800ab30 <I2C_TransferConfig>
 80096aa:	e00f      	b.n	80096cc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	8979      	ldrh	r1, [r7, #10]
 80096be:	2300      	movs	r3, #0
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f001 fa32 	bl	800ab30 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d19e      	bne.n	8009614 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f001 f91a 	bl	800a914 <I2C_WaitOnSTOPFlagUntilTimeout>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e01a      	b.n	8009720 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2220      	movs	r2, #32
 80096f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6859      	ldr	r1, [r3, #4]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <HAL_I2C_Mem_Write+0x224>)
 80096fe:	400b      	ands	r3, r1
 8009700:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2220      	movs	r2, #32
 8009706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	e000      	b.n	8009720 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800971e:	2302      	movs	r3, #2
  }
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	fe00e800 	.word	0xfe00e800

0800972c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009748:	2b00      	cmp	r3, #0
 800974a:	d005      	beq.n	8009758 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	68f9      	ldr	r1, [r7, #12]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	4798      	blx	r3
  }
}
 8009758:	bf00      	nop
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	70fb      	strb	r3, [r7, #3]
 8009794:	4613      	mov	r3, r2
 8009796:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af02      	add	r7, sp, #8
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800981e:	2b01      	cmp	r3, #1
 8009820:	d101      	bne.n	8009826 <I2C_Master_ISR_IT+0x1e>
 8009822:	2302      	movs	r3, #2
 8009824:	e115      	b.n	8009a52 <I2C_Master_ISR_IT+0x24a>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	091b      	lsrs	r3, r3, #4
 8009832:	f003 0301 	and.w	r3, r3, #1
 8009836:	2b00      	cmp	r3, #0
 8009838:	d013      	beq.n	8009862 <I2C_Master_ISR_IT+0x5a>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	091b      	lsrs	r3, r3, #4
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00d      	beq.n	8009862 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2210      	movs	r2, #16
 800984c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009852:	f043 0204 	orr.w	r2, r3, #4
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f000 ff92 	bl	800a784 <I2C_Flush_TXDR>
 8009860:	e0e2      	b.n	8009a28 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	089b      	lsrs	r3, r3, #2
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b00      	cmp	r3, #0
 800986c:	d023      	beq.n	80098b6 <I2C_Master_ISR_IT+0xae>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	089b      	lsrs	r3, r3, #2
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d01d      	beq.n	80098b6 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f023 0304 	bic.w	r3, r3, #4
 8009880:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	b2d2      	uxtb	r2, r2
 800988e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800989e:	3b01      	subs	r3, #1
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	3b01      	subs	r3, #1
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80098b4:	e0b8      	b.n	8009a28 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	085b      	lsrs	r3, r3, #1
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d01e      	beq.n	8009900 <I2C_Master_ISR_IT+0xf8>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	085b      	lsrs	r3, r3, #1
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d018      	beq.n	8009900 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d2:	781a      	ldrb	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80098fe:	e093      	b.n	8009a28 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	09db      	lsrs	r3, r3, #7
 8009904:	f003 0301 	and.w	r3, r3, #1
 8009908:	2b00      	cmp	r3, #0
 800990a:	d05e      	beq.n	80099ca <I2C_Master_ISR_IT+0x1c2>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	099b      	lsrs	r3, r3, #6
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	d058      	beq.n	80099ca <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800991c:	b29b      	uxth	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d041      	beq.n	80099a6 <I2C_Master_ISR_IT+0x19e>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009926:	2b00      	cmp	r3, #0
 8009928:	d13d      	bne.n	80099a6 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	b29b      	uxth	r3, r3
 8009932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009936:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993c:	b29b      	uxth	r3, r3
 800993e:	2bff      	cmp	r3, #255	; 0xff
 8009940:	d90e      	bls.n	8009960 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	22ff      	movs	r2, #255	; 0xff
 8009946:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800994c:	b2da      	uxtb	r2, r3
 800994e:	8a79      	ldrh	r1, [r7, #18]
 8009950:	2300      	movs	r3, #0
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f001 f8e9 	bl	800ab30 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800995e:	e033      	b.n	80099c8 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009964:	b29a      	uxth	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009972:	d00c      	beq.n	800998e <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009978:	b2da      	uxtb	r2, r3
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800997e:	8a79      	ldrh	r1, [r7, #18]
 8009980:	2300      	movs	r3, #0
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	4603      	mov	r3, r0
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f001 f8d2 	bl	800ab30 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800998c:	e01c      	b.n	80099c8 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009992:	b2da      	uxtb	r2, r3
 8009994:	8a79      	ldrh	r1, [r7, #18]
 8009996:	2300      	movs	r3, #0
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f001 f8c6 	bl	800ab30 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099a4:	e010      	b.n	80099c8 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099b4:	d003      	beq.n	80099be <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 fbe4 	bl	800a184 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80099bc:	e034      	b.n	8009a28 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80099be:	2140      	movs	r1, #64	; 0x40
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 fe1f 	bl	800a604 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80099c6:	e02f      	b.n	8009a28 <I2C_Master_ISR_IT+0x220>
 80099c8:	e02e      	b.n	8009a28 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	099b      	lsrs	r3, r3, #6
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d028      	beq.n	8009a28 <I2C_Master_ISR_IT+0x220>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	099b      	lsrs	r3, r3, #6
 80099da:	f003 0301 	and.w	r3, r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d022      	beq.n	8009a28 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d119      	bne.n	8009a20 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099fa:	d015      	beq.n	8009a28 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a04:	d108      	bne.n	8009a18 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a14:	605a      	str	r2, [r3, #4]
 8009a16:	e007      	b.n	8009a28 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f000 fbb3 	bl	800a184 <I2C_ITMasterSeqCplt>
 8009a1e:	e003      	b.n	8009a28 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009a20:	2140      	movs	r1, #64	; 0x40
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f000 fdee 	bl	800a604 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	095b      	lsrs	r3, r3, #5
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d009      	beq.n	8009a48 <I2C_Master_ISR_IT+0x240>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	095b      	lsrs	r3, r3, #5
 8009a38:	f003 0301 	and.w	r3, r3, #1
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d003      	beq.n	8009a48 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009a40:	6979      	ldr	r1, [r7, #20]
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 fc18 	bl	800a278 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b086      	sub	sp, #24
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	60b9      	str	r1, [r7, #8]
 8009a64:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d101      	bne.n	8009a7e <I2C_Slave_ISR_IT+0x24>
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	e0ec      	b.n	8009c58 <I2C_Slave_ISR_IT+0x1fe>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	095b      	lsrs	r3, r3, #5
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d009      	beq.n	8009aa6 <I2C_Slave_ISR_IT+0x4c>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	095b      	lsrs	r3, r3, #5
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009a9e:	6939      	ldr	r1, [r7, #16]
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 fc85 	bl	800a3b0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	091b      	lsrs	r3, r3, #4
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d04d      	beq.n	8009b4e <I2C_Slave_ISR_IT+0xf4>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	091b      	lsrs	r3, r3, #4
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d047      	beq.n	8009b4e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d128      	bne.n	8009b1a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b28      	cmp	r3, #40	; 0x28
 8009ad2:	d108      	bne.n	8009ae6 <I2C_Slave_ISR_IT+0x8c>
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ada:	d104      	bne.n	8009ae6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009adc:	6939      	ldr	r1, [r7, #16]
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 fd3c 	bl	800a55c <I2C_ITListenCplt>
 8009ae4:	e032      	b.n	8009b4c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b29      	cmp	r3, #41	; 0x29
 8009af0:	d10e      	bne.n	8009b10 <I2C_Slave_ISR_IT+0xb6>
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009af8:	d00a      	beq.n	8009b10 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2210      	movs	r2, #16
 8009b00:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 fe3e 	bl	800a784 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 fb78 	bl	800a1fe <I2C_ITSlaveSeqCplt>
 8009b0e:	e01d      	b.n	8009b4c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2210      	movs	r2, #16
 8009b16:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009b18:	e096      	b.n	8009c48 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2210      	movs	r2, #16
 8009b20:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b26:	f043 0204 	orr.w	r2, r3, #4
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d004      	beq.n	8009b3e <I2C_Slave_ISR_IT+0xe4>
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b3a:	f040 8085 	bne.w	8009c48 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b42:	4619      	mov	r1, r3
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f000 fd5d 	bl	800a604 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009b4a:	e07d      	b.n	8009c48 <I2C_Slave_ISR_IT+0x1ee>
 8009b4c:	e07c      	b.n	8009c48 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	089b      	lsrs	r3, r3, #2
 8009b52:	f003 0301 	and.w	r3, r3, #1
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d030      	beq.n	8009bbc <I2C_Slave_ISR_IT+0x162>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	089b      	lsrs	r3, r3, #2
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d02a      	beq.n	8009bbc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d018      	beq.n	8009ba2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	b2d2      	uxtb	r2, r2
 8009b7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d14f      	bne.n	8009c4c <I2C_Slave_ISR_IT+0x1f2>
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009bb2:	d04b      	beq.n	8009c4c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 fb22 	bl	800a1fe <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009bba:	e047      	b.n	8009c4c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	08db      	lsrs	r3, r3, #3
 8009bc0:	f003 0301 	and.w	r3, r3, #1
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00a      	beq.n	8009bde <I2C_Slave_ISR_IT+0x184>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	08db      	lsrs	r3, r3, #3
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d004      	beq.n	8009bde <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009bd4:	6939      	ldr	r1, [r7, #16]
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 fa52 	bl	800a080 <I2C_ITAddrCplt>
 8009bdc:	e037      	b.n	8009c4e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	085b      	lsrs	r3, r3, #1
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d031      	beq.n	8009c4e <I2C_Slave_ISR_IT+0x1f4>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	085b      	lsrs	r3, r3, #1
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d02b      	beq.n	8009c4e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d018      	beq.n	8009c32 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c04:	781a      	ldrb	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c10:	1c5a      	adds	r2, r3, #1
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009c30:	e00d      	b.n	8009c4e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c38:	d002      	beq.n	8009c40 <I2C_Slave_ISR_IT+0x1e6>
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d106      	bne.n	8009c4e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 fadc 	bl	800a1fe <I2C_ITSlaveSeqCplt>
 8009c46:	e002      	b.n	8009c4e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009c48:	bf00      	nop
 8009c4a:	e000      	b.n	8009c4e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009c4c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af02      	add	r7, sp, #8
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d101      	bne.n	8009c7a <I2C_Master_ISR_DMA+0x1a>
 8009c76:	2302      	movs	r3, #2
 8009c78:	e0e1      	b.n	8009e3e <I2C_Master_ISR_DMA+0x1de>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	091b      	lsrs	r3, r3, #4
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d017      	beq.n	8009cbe <I2C_Master_ISR_DMA+0x5e>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	091b      	lsrs	r3, r3, #4
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d011      	beq.n	8009cbe <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2210      	movs	r2, #16
 8009ca0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca6:	f043 0204 	orr.w	r2, r3, #4
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009cae:	2112      	movs	r1, #18
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f000 ff6b 	bl	800ab8c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 fd64 	bl	800a784 <I2C_Flush_TXDR>
 8009cbc:	e0ba      	b.n	8009e34 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	09db      	lsrs	r3, r3, #7
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d072      	beq.n	8009db0 <I2C_Master_ISR_DMA+0x150>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	099b      	lsrs	r3, r3, #6
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d06c      	beq.n	8009db0 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ce4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d04e      	beq.n	8009d8e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cfc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	2bff      	cmp	r3, #255	; 0xff
 8009d06:	d906      	bls.n	8009d16 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	22ff      	movs	r2, #255	; 0xff
 8009d0c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009d0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e010      	b.n	8009d38 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d28:	d003      	beq.n	8009d32 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2e:	617b      	str	r3, [r7, #20]
 8009d30:	e002      	b.n	8009d38 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009d32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d36:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	8a79      	ldrh	r1, [r7, #18]
 8009d40:	2300      	movs	r3, #0
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f000 fef2 	bl	800ab30 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b22      	cmp	r3, #34	; 0x22
 8009d68:	d108      	bne.n	8009d7c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d78:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009d7a:	e05b      	b.n	8009e34 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d8a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009d8c:	e052      	b.n	8009e34 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d9c:	d003      	beq.n	8009da6 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f000 f9f0 	bl	800a184 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009da4:	e046      	b.n	8009e34 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009da6:	2140      	movs	r1, #64	; 0x40
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f000 fc2b 	bl	800a604 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009dae:	e041      	b.n	8009e34 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	099b      	lsrs	r3, r3, #6
 8009db4:	f003 0301 	and.w	r3, r3, #1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d029      	beq.n	8009e10 <I2C_Master_ISR_DMA+0x1b0>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	099b      	lsrs	r3, r3, #6
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d023      	beq.n	8009e10 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d119      	bne.n	8009e06 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ddc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009de0:	d027      	beq.n	8009e32 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009dea:	d108      	bne.n	8009dfe <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009dfa:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009dfc:	e019      	b.n	8009e32 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f000 f9c0 	bl	800a184 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009e04:	e015      	b.n	8009e32 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009e06:	2140      	movs	r1, #64	; 0x40
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 fbfb 	bl	800a604 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009e0e:	e010      	b.n	8009e32 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	095b      	lsrs	r3, r3, #5
 8009e14:	f003 0301 	and.w	r3, r3, #1
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <I2C_Master_ISR_DMA+0x1d4>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	095b      	lsrs	r3, r3, #5
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d005      	beq.n	8009e34 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009e28:	68b9      	ldr	r1, [r7, #8]
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 fa24 	bl	800a278 <I2C_ITMasterCplt>
 8009e30:	e000      	b.n	8009e34 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009e32:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b086      	sub	sp, #24
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	60b9      	str	r1, [r7, #8]
 8009e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e56:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d101      	bne.n	8009e6a <I2C_Slave_ISR_DMA+0x24>
 8009e66:	2302      	movs	r3, #2
 8009e68:	e0b1      	b.n	8009fce <I2C_Slave_ISR_DMA+0x188>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	095b      	lsrs	r3, r3, #5
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d009      	beq.n	8009e92 <I2C_Slave_ISR_DMA+0x4c>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	095b      	lsrs	r3, r3, #5
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009e8a:	68b9      	ldr	r1, [r7, #8]
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 fa8f 	bl	800a3b0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	091b      	lsrs	r3, r3, #4
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f000 8082 	beq.w	8009fa4 <I2C_Slave_ISR_DMA+0x15e>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	091b      	lsrs	r3, r3, #4
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d07b      	beq.n	8009fa4 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	0b9b      	lsrs	r3, r3, #14
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d105      	bne.n	8009ec4 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	0bdb      	lsrs	r3, r3, #15
 8009ebc:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d068      	beq.n	8009f96 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00d      	beq.n	8009ee8 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	0bdb      	lsrs	r3, r3, #15
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d007      	beq.n	8009ee8 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00d      	beq.n	8009f0c <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	0b9b      	lsrs	r3, r3, #14
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d007      	beq.n	8009f0c <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d101      	bne.n	8009f0c <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d128      	bne.n	8009f64 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b28      	cmp	r3, #40	; 0x28
 8009f1c:	d108      	bne.n	8009f30 <I2C_Slave_ISR_DMA+0xea>
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f24:	d104      	bne.n	8009f30 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009f26:	68b9      	ldr	r1, [r7, #8]
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f000 fb17 	bl	800a55c <I2C_ITListenCplt>
 8009f2e:	e031      	b.n	8009f94 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b29      	cmp	r3, #41	; 0x29
 8009f3a:	d10e      	bne.n	8009f5a <I2C_Slave_ISR_DMA+0x114>
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f42:	d00a      	beq.n	8009f5a <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2210      	movs	r2, #16
 8009f4a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f000 fc19 	bl	800a784 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f000 f953 	bl	800a1fe <I2C_ITSlaveSeqCplt>
 8009f58:	e01c      	b.n	8009f94 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2210      	movs	r2, #16
 8009f60:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009f62:	e01d      	b.n	8009fa0 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2210      	movs	r2, #16
 8009f6a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f70:	f043 0204 	orr.w	r2, r3, #4
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <I2C_Slave_ISR_DMA+0x140>
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f84:	d10c      	bne.n	8009fa0 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f000 fb39 	bl	800a604 <I2C_ITError>
      if (treatdmanack == 1U)
 8009f92:	e005      	b.n	8009fa0 <I2C_Slave_ISR_DMA+0x15a>
 8009f94:	e004      	b.n	8009fa0 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2210      	movs	r2, #16
 8009f9c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009f9e:	e011      	b.n	8009fc4 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8009fa0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009fa2:	e00f      	b.n	8009fc4 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	08db      	lsrs	r3, r3, #3
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d009      	beq.n	8009fc4 <I2C_Slave_ISR_DMA+0x17e>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	08db      	lsrs	r3, r3, #3
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009fbc:	68b9      	ldr	r1, [r7, #8]
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 f85e 	bl	800a080 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af02      	add	r7, sp, #8
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	4608      	mov	r0, r1
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	817b      	strh	r3, [r7, #10]
 8009fea:	460b      	mov	r3, r1
 8009fec:	813b      	strh	r3, [r7, #8]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009ff2:	88fb      	ldrh	r3, [r7, #6]
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	8979      	ldrh	r1, [r7, #10]
 8009ff8:	4b20      	ldr	r3, [pc, #128]	; (800a07c <I2C_RequestMemoryWrite+0xa4>)
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 fd95 	bl	800ab30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a006:	69fa      	ldr	r2, [r7, #28]
 800a008:	69b9      	ldr	r1, [r7, #24]
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 fc42 	bl	800a894 <I2C_WaitOnTXISFlagUntilTimeout>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e02c      	b.n	800a074 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a01a:	88fb      	ldrh	r3, [r7, #6]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d105      	bne.n	800a02c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a020:	893b      	ldrh	r3, [r7, #8]
 800a022:	b2da      	uxtb	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	629a      	str	r2, [r3, #40]	; 0x28
 800a02a:	e015      	b.n	800a058 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a02c:	893b      	ldrh	r3, [r7, #8]
 800a02e:	0a1b      	lsrs	r3, r3, #8
 800a030:	b29b      	uxth	r3, r3
 800a032:	b2da      	uxtb	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	69b9      	ldr	r1, [r7, #24]
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 fc28 	bl	800a894 <I2C_WaitOnTXISFlagUntilTimeout>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e012      	b.n	800a074 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a04e:	893b      	ldrh	r3, [r7, #8]
 800a050:	b2da      	uxtb	r2, r3
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	2200      	movs	r2, #0
 800a060:	2180      	movs	r1, #128	; 0x80
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 fbd6 	bl	800a814 <I2C_WaitOnFlagUntilTimeout>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e000      	b.n	800a074 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	80002000 	.word	0x80002000

0800a080 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a090:	b2db      	uxtb	r3, r3
 800a092:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a096:	2b28      	cmp	r3, #40	; 0x28
 800a098:	d168      	bne.n	800a16c <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	0c1b      	lsrs	r3, r3, #16
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	f003 0301 	and.w	r3, r3, #1
 800a0a8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	0c1b      	lsrs	r3, r3, #16
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a0b8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0c6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a0d4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d137      	bne.n	800a14e <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800a0de:	897b      	ldrh	r3, [r7, #10]
 800a0e0:	09db      	lsrs	r3, r3, #7
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	89bb      	ldrh	r3, [r7, #12]
 800a0e6:	4053      	eors	r3, r2
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	f003 0306 	and.w	r3, r3, #6
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d11c      	bne.n	800a12c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a0f2:	897b      	ldrh	r3, [r7, #10]
 800a0f4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0fa:	1c5a      	adds	r2, r3, #1
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a104:	2b02      	cmp	r3, #2
 800a106:	d139      	bne.n	800a17c <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2208      	movs	r2, #8
 800a114:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a11e:	89ba      	ldrh	r2, [r7, #12]
 800a120:	7bfb      	ldrb	r3, [r7, #15]
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7ff fb2f 	bl	8009788 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a12a:	e027      	b.n	800a17c <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800a12c:	893b      	ldrh	r3, [r7, #8]
 800a12e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a130:	2104      	movs	r1, #4
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fd98 	bl	800ac68 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a140:	89ba      	ldrh	r2, [r7, #12]
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7ff fb1e 	bl	8009788 <HAL_I2C_AddrCallback>
}
 800a14c:	e016      	b.n	800a17c <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a14e:	2104      	movs	r1, #4
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fd89 	bl	800ac68 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a15e:	89ba      	ldrh	r2, [r7, #12]
 800a160:	7bfb      	ldrb	r3, [r7, #15]
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff fb0f 	bl	8009788 <HAL_I2C_AddrCallback>
}
 800a16a:	e007      	b.n	800a17c <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2208      	movs	r2, #8
 800a172:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a17c:	bf00      	nop
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b21      	cmp	r3, #33	; 0x21
 800a19e:	d115      	bne.n	800a1cc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2211      	movs	r2, #17
 800a1ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fd56 	bl	800ac68 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7f9 ff97 	bl	80040f8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a1ca:	e014      	b.n	800a1f6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2212      	movs	r2, #18
 800a1d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a1e0:	2102      	movs	r1, #2
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fd40 	bl	800ac68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7f9 ff97 	bl	8004124 <HAL_I2C_MasterRxCpltCallback>
}
 800a1f6:	bf00      	nop
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b082      	sub	sp, #8
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b29      	cmp	r3, #41	; 0x29
 800a218:	d112      	bne.n	800a240 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2228      	movs	r2, #40	; 0x28
 800a21e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2221      	movs	r2, #33	; 0x21
 800a226:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a228:	2101      	movs	r1, #1
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fd1c 	bl	800ac68 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f7ff fa91 	bl	8009760 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a23e:	e017      	b.n	800a270 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b2a      	cmp	r3, #42	; 0x2a
 800a24a:	d111      	bne.n	800a270 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2228      	movs	r2, #40	; 0x28
 800a250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2222      	movs	r2, #34	; 0x22
 800a258:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a25a:	2102      	movs	r1, #2
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fd03 	bl	800ac68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff fa82 	bl	8009774 <HAL_I2C_SlaveRxCpltCallback>
}
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2220      	movs	r2, #32
 800a288:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	6859      	ldr	r1, [r3, #4]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	4b44      	ldr	r3, [pc, #272]	; (800a3a8 <I2C_ITMasterCplt+0x130>)
 800a296:	400b      	ands	r3, r1
 800a298:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a40      	ldr	r2, [pc, #256]	; (800a3ac <I2C_ITMasterCplt+0x134>)
 800a2aa:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	091b      	lsrs	r3, r3, #4
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d009      	beq.n	800a2cc <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2210      	movs	r2, #16
 800a2be:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c4:	f043 0204 	orr.w	r2, r3, #4
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fa59 	bl	800a784 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a2d2:	2103      	movs	r1, #3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fcc7 	bl	800ac68 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2de:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b60      	cmp	r3, #96	; 0x60
 800a2ea:	d002      	beq.n	800a2f2 <I2C_ITMasterCplt+0x7a>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d006      	beq.n	800a300 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f983 	bl	800a604 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a2fe:	e04e      	b.n	800a39e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b21      	cmp	r3, #33	; 0x21
 800a30a:	d121      	bne.n	800a350 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2220      	movs	r2, #32
 800a310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b40      	cmp	r3, #64	; 0x40
 800a31e:	d10b      	bne.n	800a338 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7ff fa41 	bl	80097b8 <HAL_I2C_MemTxCpltCallback>
}
 800a336:	e032      	b.n	800a39e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7f9 fed5 	bl	80040f8 <HAL_I2C_MasterTxCpltCallback>
}
 800a34e:	e026      	b.n	800a39e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b22      	cmp	r3, #34	; 0x22
 800a35a:	d120      	bne.n	800a39e <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2220      	movs	r2, #32
 800a360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b40      	cmp	r3, #64	; 0x40
 800a36e:	d10b      	bne.n	800a388 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff fa23 	bl	80097cc <HAL_I2C_MemRxCpltCallback>
}
 800a386:	e00a      	b.n	800a39e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7f9 fec3 	bl	8004124 <HAL_I2C_MasterRxCpltCallback>
}
 800a39e:	bf00      	nop
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	fe00e800 	.word	0xfe00e800
 800a3ac:	ffff0000 	.word	0xffff0000

0800a3b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2220      	movs	r2, #32
 800a3cc:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a3ce:	2107      	movs	r1, #7
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fc49 	bl	800ac68 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3e4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6859      	ldr	r1, [r3, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	4b58      	ldr	r3, [pc, #352]	; (800a554 <I2C_ITSlaveCplt+0x1a4>)
 800a3f2:	400b      	ands	r3, r1
 800a3f4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f9c4 	bl	800a784 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	0b9b      	lsrs	r3, r3, #14
 800a400:	f003 0301 	and.w	r3, r3, #1
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00b      	beq.n	800a420 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d018      	beq.n	800a442 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	b29a      	uxth	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a41e:	e010      	b.n	800a442 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	0bdb      	lsrs	r3, r3, #15
 800a424:	f003 0301 	and.w	r3, r3, #1
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00a      	beq.n	800a442 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a430:	2b00      	cmp	r3, #0
 800a432:	d006      	beq.n	800a442 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	089b      	lsrs	r3, r3, #2
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d020      	beq.n	800a490 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f023 0304 	bic.w	r3, r3, #4
 800a454:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a460:	b2d2      	uxtb	r2, r2
 800a462:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00c      	beq.n	800a490 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a47a:	3b01      	subs	r3, #1
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a486:	b29b      	uxth	r3, r3
 800a488:	3b01      	subs	r3, #1
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a494:	b29b      	uxth	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d005      	beq.n	800a4a6 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a49e:	f043 0204 	orr.w	r2, r3, #4
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d010      	beq.n	800a4e4 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f89b 	bl	800a604 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b28      	cmp	r3, #40	; 0x28
 800a4d8:	d138      	bne.n	800a54c <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a4da:	68f9      	ldr	r1, [r7, #12]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f83d 	bl	800a55c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a4e2:	e033      	b.n	800a54c <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a4ec:	d011      	beq.n	800a512 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7ff fe85 	bl	800a1fe <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a18      	ldr	r2, [pc, #96]	; (800a558 <I2C_ITSlaveCplt+0x1a8>)
 800a4f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7ff f94a 	bl	80097a4 <HAL_I2C_ListenCpltCallback>
}
 800a510:	e01c      	b.n	800a54c <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b22      	cmp	r3, #34	; 0x22
 800a51c:	d10b      	bne.n	800a536 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2220      	movs	r2, #32
 800a522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff f920 	bl	8009774 <HAL_I2C_SlaveRxCpltCallback>
}
 800a534:	e00a      	b.n	800a54c <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2220      	movs	r2, #32
 800a53a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7ff f90a 	bl	8009760 <HAL_I2C_SlaveTxCpltCallback>
}
 800a54c:	bf00      	nop
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	fe00e800 	.word	0xfe00e800
 800a558:	ffff0000 	.word	0xffff0000

0800a55c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a25      	ldr	r2, [pc, #148]	; (800a600 <I2C_ITListenCplt+0xa4>)
 800a56a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2220      	movs	r2, #32
 800a576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	089b      	lsrs	r3, r3, #2
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	d022      	beq.n	800a5da <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59e:	b2d2      	uxtb	r2, r2
 800a5a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d012      	beq.n	800a5da <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d2:	f043 0204 	orr.w	r2, r3, #4
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a5da:	2107      	movs	r1, #7
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 fb43 	bl	800ac68 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2210      	movs	r2, #16
 800a5e8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7ff f8d6 	bl	80097a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a5f8:	bf00      	nop
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	ffff0000 	.word	0xffff0000

0800a604 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a614:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a55      	ldr	r2, [pc, #340]	; (800a778 <I2C_ITError+0x174>)
 800a622:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	431a      	orrs	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a636:	7bfb      	ldrb	r3, [r7, #15]
 800a638:	2b28      	cmp	r3, #40	; 0x28
 800a63a:	d005      	beq.n	800a648 <I2C_ITError+0x44>
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
 800a63e:	2b29      	cmp	r3, #41	; 0x29
 800a640:	d002      	beq.n	800a648 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	2b2a      	cmp	r3, #42	; 0x2a
 800a646:	d10e      	bne.n	800a666 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a648:	2103      	movs	r1, #3
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fb0c 	bl	800ac68 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2228      	movs	r2, #40	; 0x28
 800a654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a46      	ldr	r2, [pc, #280]	; (800a77c <I2C_ITError+0x178>)
 800a662:	635a      	str	r2, [r3, #52]	; 0x34
 800a664:	e013      	b.n	800a68e <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a666:	2107      	movs	r1, #7
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fafd 	bl	800ac68 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a674:	b2db      	uxtb	r3, r3
 800a676:	2b60      	cmp	r3, #96	; 0x60
 800a678:	d003      	beq.n	800a682 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2220      	movs	r2, #32
 800a67e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a69c:	d123      	bne.n	800a6e6 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a6ac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d05c      	beq.n	800a770 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ba:	4a31      	ldr	r2, [pc, #196]	; (800a780 <I2C_ITError+0x17c>)
 800a6bc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe f8ca 	bl	8008864 <HAL_DMA_Abort_IT>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d04c      	beq.n	800a770 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a6e4:	e044      	b.n	800a770 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6f4:	d123      	bne.n	800a73e <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a704:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d030      	beq.n	800a770 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a712:	4a1b      	ldr	r2, [pc, #108]	; (800a780 <I2C_ITError+0x17c>)
 800a714:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a722:	4618      	mov	r0, r3
 800a724:	f7fe f89e 	bl	8008864 <HAL_DMA_Abort_IT>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d020      	beq.n	800a770 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a738:	4610      	mov	r0, r2
 800a73a:	4798      	blx	r3
}
 800a73c:	e018      	b.n	800a770 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b60      	cmp	r3, #96	; 0x60
 800a748:	d10b      	bne.n	800a762 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2220      	movs	r2, #32
 800a74e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff f84a 	bl	80097f4 <HAL_I2C_AbortCpltCallback>
}
 800a760:	e006      	b.n	800a770 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7ff f838 	bl	80097e0 <HAL_I2C_ErrorCallback>
}
 800a770:	bf00      	nop
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	ffff0000 	.word	0xffff0000
 800a77c:	08009a5b 	.word	0x08009a5b
 800a780:	0800a7cd 	.word	0x0800a7cd

0800a784 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	f003 0302 	and.w	r3, r3, #2
 800a796:	2b02      	cmp	r3, #2
 800a798:	d103      	bne.n	800a7a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d007      	beq.n	800a7c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	699a      	ldr	r2, [r3, #24]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f042 0201 	orr.w	r2, r2, #1
 800a7be:	619a      	str	r2, [r3, #24]
  }
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7de:	2200      	movs	r2, #0
 800a7e0:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b60      	cmp	r3, #96	; 0x60
 800a7f4:	d107      	bne.n	800a806 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2220      	movs	r2, #32
 800a7fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7fe fff8 	bl	80097f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a804:	e002      	b.n	800a80c <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7fe ffea 	bl	80097e0 <HAL_I2C_ErrorCallback>
}
 800a80c:	bf00      	nop
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	603b      	str	r3, [r7, #0]
 800a820:	4613      	mov	r3, r2
 800a822:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a824:	e022      	b.n	800a86c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82c:	d01e      	beq.n	800a86c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a82e:	f7fc f90d 	bl	8006a4c <HAL_GetTick>
 800a832:	4602      	mov	r2, r0
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d302      	bcc.n	800a844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d113      	bne.n	800a86c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a848:	f043 0220 	orr.w	r2, r3, #32
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2220      	movs	r2, #32
 800a854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e00f      	b.n	800a88c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	699a      	ldr	r2, [r3, #24]
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	4013      	ands	r3, r2
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	429a      	cmp	r2, r3
 800a87a:	bf0c      	ite	eq
 800a87c:	2301      	moveq	r3, #1
 800a87e:	2300      	movne	r3, #0
 800a880:	b2db      	uxtb	r3, r3
 800a882:	461a      	mov	r2, r3
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	429a      	cmp	r2, r3
 800a888:	d0cd      	beq.n	800a826 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a8a0:	e02c      	b.n	800a8fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	68b9      	ldr	r1, [r7, #8]
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 f8dc 	bl	800aa64 <I2C_IsAcknowledgeFailed>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e02a      	b.n	800a90c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8bc:	d01e      	beq.n	800a8fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8be:	f7fc f8c5 	bl	8006a4c <HAL_GetTick>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d302      	bcc.n	800a8d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d113      	bne.n	800a8fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8d8:	f043 0220 	orr.w	r2, r3, #32
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e007      	b.n	800a90c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	f003 0302 	and.w	r3, r3, #2
 800a906:	2b02      	cmp	r3, #2
 800a908:	d1cb      	bne.n	800a8a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a920:	e028      	b.n	800a974 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	68b9      	ldr	r1, [r7, #8]
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f000 f89c 	bl	800aa64 <I2C_IsAcknowledgeFailed>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e026      	b.n	800a984 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a936:	f7fc f889 	bl	8006a4c <HAL_GetTick>
 800a93a:	4602      	mov	r2, r0
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	68ba      	ldr	r2, [r7, #8]
 800a942:	429a      	cmp	r2, r3
 800a944:	d302      	bcc.n	800a94c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d113      	bne.n	800a974 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a950:	f043 0220 	orr.w	r2, r3, #32
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2220      	movs	r2, #32
 800a95c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e007      	b.n	800a984 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	f003 0320 	and.w	r3, r3, #32
 800a97e:	2b20      	cmp	r3, #32
 800a980:	d1cf      	bne.n	800a922 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a998:	e055      	b.n	800aa46 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f000 f860 	bl	800aa64 <I2C_IsAcknowledgeFailed>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e053      	b.n	800aa56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	f003 0320 	and.w	r3, r3, #32
 800a9b8:	2b20      	cmp	r3, #32
 800a9ba:	d129      	bne.n	800aa10 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	f003 0304 	and.w	r3, r3, #4
 800a9c6:	2b04      	cmp	r3, #4
 800a9c8:	d105      	bne.n	800a9d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e03f      	b.n	800aa56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2220      	movs	r2, #32
 800a9dc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	6859      	ldr	r1, [r3, #4]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	4b1d      	ldr	r3, [pc, #116]	; (800aa60 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a9ea:	400b      	ands	r3, r1
 800a9ec:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2220      	movs	r2, #32
 800a9f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e022      	b.n	800aa56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa10:	f7fc f81c 	bl	8006a4c <HAL_GetTick>
 800aa14:	4602      	mov	r2, r0
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d302      	bcc.n	800aa26 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10f      	bne.n	800aa46 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa2a:	f043 0220 	orr.w	r2, r3, #32
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e007      	b.n	800aa56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	f003 0304 	and.w	r3, r3, #4
 800aa50:	2b04      	cmp	r3, #4
 800aa52:	d1a2      	bne.n	800a99a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	fe00e800 	.word	0xfe00e800

0800aa64 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	f003 0310 	and.w	r3, r3, #16
 800aa7a:	2b10      	cmp	r3, #16
 800aa7c:	d151      	bne.n	800ab22 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa7e:	e022      	b.n	800aac6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa86:	d01e      	beq.n	800aac6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa88:	f7fb ffe0 	bl	8006a4c <HAL_GetTick>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d302      	bcc.n	800aa9e <I2C_IsAcknowledgeFailed+0x3a>
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d113      	bne.n	800aac6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaa2:	f043 0220 	orr.w	r2, r3, #32
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2220      	movs	r2, #32
 800aaae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	e02e      	b.n	800ab24 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	699b      	ldr	r3, [r3, #24]
 800aacc:	f003 0320 	and.w	r3, r3, #32
 800aad0:	2b20      	cmp	r3, #32
 800aad2:	d1d5      	bne.n	800aa80 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2210      	movs	r2, #16
 800aada:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2220      	movs	r2, #32
 800aae2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f7ff fe4d 	bl	800a784 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6859      	ldr	r1, [r3, #4]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	4b0d      	ldr	r3, [pc, #52]	; (800ab2c <I2C_IsAcknowledgeFailed+0xc8>)
 800aaf6:	400b      	ands	r3, r1
 800aaf8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafe:	f043 0204 	orr.w	r2, r3, #4
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2220      	movs	r2, #32
 800ab0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e000      	b.n	800ab24 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	fe00e800 	.word	0xfe00e800

0800ab30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	607b      	str	r3, [r7, #4]
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	817b      	strh	r3, [r7, #10]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	0d5b      	lsrs	r3, r3, #21
 800ab4c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ab50:	4b0d      	ldr	r3, [pc, #52]	; (800ab88 <I2C_TransferConfig+0x58>)
 800ab52:	430b      	orrs	r3, r1
 800ab54:	43db      	mvns	r3, r3
 800ab56:	ea02 0103 	and.w	r1, r2, r3
 800ab5a:	897b      	ldrh	r3, [r7, #10]
 800ab5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ab60:	7a7b      	ldrb	r3, [r7, #9]
 800ab62:	041b      	lsls	r3, r3, #16
 800ab64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	431a      	orrs	r2, r3
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	431a      	orrs	r2, r3
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	430a      	orrs	r2, r1
 800ab78:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ab7a:	bf00      	nop
 800ab7c:	3714      	adds	r7, #20
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	03ff63ff 	.word	0x03ff63ff

0800ab8c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aba0:	4a2f      	ldr	r2, [pc, #188]	; (800ac60 <I2C_Enable_IRQ+0xd4>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d004      	beq.n	800abb0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800abaa:	4a2e      	ldr	r2, [pc, #184]	; (800ac64 <I2C_Enable_IRQ+0xd8>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d124      	bne.n	800abfa <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800abb0:	887b      	ldrh	r3, [r7, #2]
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800abc0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800abc2:	887b      	ldrh	r3, [r7, #2]
 800abc4:	f003 0311 	and.w	r3, r3, #17
 800abc8:	2b11      	cmp	r3, #17
 800abca:	d103      	bne.n	800abd4 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800abd2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800abd4:	887b      	ldrh	r3, [r7, #2]
 800abd6:	f003 0312 	and.w	r3, r3, #18
 800abda:	2b12      	cmp	r3, #18
 800abdc:	d103      	bne.n	800abe6 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f043 0320 	orr.w	r3, r3, #32
 800abe4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800abe6:	887b      	ldrh	r3, [r7, #2]
 800abe8:	f003 0312 	and.w	r3, r3, #18
 800abec:	2b12      	cmp	r3, #18
 800abee:	d128      	bne.n	800ac42 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abf6:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800abf8:	e023      	b.n	800ac42 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800abfa:	887b      	ldrh	r3, [r7, #2]
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d003      	beq.n	800ac0c <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ac0a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ac0c:	887b      	ldrh	r3, [r7, #2]
 800ac0e:	f003 0301 	and.w	r3, r3, #1
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d003      	beq.n	800ac1e <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800ac1c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ac1e:	887b      	ldrh	r3, [r7, #2]
 800ac20:	f003 0302 	and.w	r3, r3, #2
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d003      	beq.n	800ac30 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800ac2e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800ac30:	887b      	ldrh	r3, [r7, #2]
 800ac32:	f003 0312 	and.w	r3, r3, #18
 800ac36:	2b12      	cmp	r3, #18
 800ac38:	d103      	bne.n	800ac42 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f043 0320 	orr.w	r3, r3, #32
 800ac40:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6819      	ldr	r1, [r3, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	430a      	orrs	r2, r1
 800ac50:	601a      	str	r2, [r3, #0]
}
 800ac52:	bf00      	nop
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	08009c61 	.word	0x08009c61
 800ac64:	08009e47 	.word	0x08009e47

0800ac68 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ac74:	2300      	movs	r3, #0
 800ac76:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ac78:	887b      	ldrh	r3, [r7, #2]
 800ac7a:	f003 0301 	and.w	r3, r3, #1
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00f      	beq.n	800aca2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800ac88:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ac96:	2b28      	cmp	r3, #40	; 0x28
 800ac98:	d003      	beq.n	800aca2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800aca0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800aca2:	887b      	ldrh	r3, [r7, #2]
 800aca4:	f003 0302 	and.w	r3, r3, #2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00f      	beq.n	800accc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800acb2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800acc0:	2b28      	cmp	r3, #40	; 0x28
 800acc2:	d003      	beq.n	800accc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800acca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800accc:	887b      	ldrh	r3, [r7, #2]
 800acce:	f003 0304 	and.w	r3, r3, #4
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800acdc:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800acde:	887b      	ldrh	r3, [r7, #2]
 800ace0:	f003 0311 	and.w	r3, r3, #17
 800ace4:	2b11      	cmp	r3, #17
 800ace6:	d103      	bne.n	800acf0 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800acee:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800acf0:	887b      	ldrh	r3, [r7, #2]
 800acf2:	f003 0312 	and.w	r3, r3, #18
 800acf6:	2b12      	cmp	r3, #18
 800acf8:	d103      	bne.n	800ad02 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f043 0320 	orr.w	r3, r3, #32
 800ad00:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800ad02:	887b      	ldrh	r3, [r7, #2]
 800ad04:	f003 0312 	and.w	r3, r3, #18
 800ad08:	2b12      	cmp	r3, #18
 800ad0a:	d103      	bne.n	800ad14 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad12:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	6819      	ldr	r1, [r3, #0]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	43da      	mvns	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	400a      	ands	r2, r1
 800ad24:	601a      	str	r2, [r3, #0]
}
 800ad26:	bf00      	nop
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b083      	sub	sp, #12
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b20      	cmp	r3, #32
 800ad46:	d138      	bne.n	800adba <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d101      	bne.n	800ad56 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ad52:	2302      	movs	r3, #2
 800ad54:	e032      	b.n	800adbc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2224      	movs	r2, #36	; 0x24
 800ad62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f022 0201 	bic.w	r2, r2, #1
 800ad74:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ad84:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6819      	ldr	r1, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	683a      	ldr	r2, [r7, #0]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f042 0201 	orr.w	r2, r2, #1
 800ada4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2220      	movs	r2, #32
 800adaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	e000      	b.n	800adbc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800adba:	2302      	movs	r3, #2
  }
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800add8:	b2db      	uxtb	r3, r3
 800adda:	2b20      	cmp	r3, #32
 800addc:	d139      	bne.n	800ae52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d101      	bne.n	800adec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ade8:	2302      	movs	r3, #2
 800adea:	e033      	b.n	800ae54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2224      	movs	r2, #36	; 0x24
 800adf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 0201 	bic.w	r2, r2, #1
 800ae0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ae1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	021b      	lsls	r3, r3, #8
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f042 0201 	orr.w	r2, r2, #1
 800ae3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2220      	movs	r2, #32
 800ae42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	e000      	b.n	800ae54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ae52:	2302      	movs	r3, #2
  }
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ae60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae62:	b08b      	sub	sp, #44	; 0x2c
 800ae64:	af06      	add	r7, sp, #24
 800ae66:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d101      	bne.n	800ae72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e0ad      	b.n	800afce <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d106      	bne.n	800ae8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f00e fd90 	bl	80199ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2203      	movs	r2, #3
 800ae90:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f004 fa0f 	bl	800f2bc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73fb      	strb	r3, [r7, #15]
 800aea2:	e035      	b.n	800af10 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	015b      	lsls	r3, r3, #5
 800aeaa:	4413      	add	r3, r2
 800aeac:	3329      	adds	r3, #41	; 0x29
 800aeae:	2201      	movs	r2, #1
 800aeb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	015b      	lsls	r3, r3, #5
 800aeb8:	4413      	add	r3, r2
 800aeba:	3328      	adds	r3, #40	; 0x28
 800aebc:	7bfa      	ldrb	r2, [r7, #15]
 800aebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
 800aec2:	7bfa      	ldrb	r2, [r7, #15]
 800aec4:	b291      	uxth	r1, r2
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	015b      	lsls	r3, r3, #5
 800aeca:	4413      	add	r3, r2
 800aecc:	3336      	adds	r3, #54	; 0x36
 800aece:	460a      	mov	r2, r1
 800aed0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	015b      	lsls	r3, r3, #5
 800aed8:	4413      	add	r3, r2
 800aeda:	332b      	adds	r3, #43	; 0x2b
 800aedc:	2200      	movs	r2, #0
 800aede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	015b      	lsls	r3, r3, #5
 800aee6:	4413      	add	r3, r2
 800aee8:	3338      	adds	r3, #56	; 0x38
 800aeea:	2200      	movs	r2, #0
 800aeec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	015b      	lsls	r3, r3, #5
 800aef4:	4413      	add	r3, r2
 800aef6:	333c      	adds	r3, #60	; 0x3c
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	3302      	adds	r3, #2
 800af02:	015b      	lsls	r3, r3, #5
 800af04:	4413      	add	r3, r2
 800af06:	2200      	movs	r2, #0
 800af08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	3301      	adds	r3, #1
 800af0e:	73fb      	strb	r3, [r7, #15]
 800af10:	7bfa      	ldrb	r2, [r7, #15]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	429a      	cmp	r2, r3
 800af18:	d3c4      	bcc.n	800aea4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af1a:	2300      	movs	r3, #0
 800af1c:	73fb      	strb	r3, [r7, #15]
 800af1e:	e031      	b.n	800af84 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	015b      	lsls	r3, r3, #5
 800af26:	4413      	add	r3, r2
 800af28:	f203 1329 	addw	r3, r3, #297	; 0x129
 800af2c:	2200      	movs	r2, #0
 800af2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	015b      	lsls	r3, r3, #5
 800af36:	4413      	add	r3, r2
 800af38:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800af3c:	7bfa      	ldrb	r2, [r7, #15]
 800af3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800af40:	7bfb      	ldrb	r3, [r7, #15]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	015b      	lsls	r3, r3, #5
 800af46:	4413      	add	r3, r2
 800af48:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800af4c:	2200      	movs	r2, #0
 800af4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800af50:	7bfb      	ldrb	r3, [r7, #15]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	015b      	lsls	r3, r3, #5
 800af56:	4413      	add	r3, r2
 800af58:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800af5c:	2200      	movs	r2, #0
 800af5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800af60:	7bfb      	ldrb	r3, [r7, #15]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	015b      	lsls	r3, r3, #5
 800af66:	4413      	add	r3, r2
 800af68:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800af70:	7bfb      	ldrb	r3, [r7, #15]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	330a      	adds	r3, #10
 800af76:	015b      	lsls	r3, r3, #5
 800af78:	4413      	add	r3, r2
 800af7a:	2200      	movs	r2, #0
 800af7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	3301      	adds	r3, #1
 800af82:	73fb      	strb	r3, [r7, #15]
 800af84:	7bfa      	ldrb	r2, [r7, #15]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d3c8      	bcc.n	800af20 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	687e      	ldr	r6, [r7, #4]
 800af96:	466d      	mov	r5, sp
 800af98:	f106 0410 	add.w	r4, r6, #16
 800af9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	602b      	str	r3, [r5, #0]
 800afa4:	1d33      	adds	r3, r6, #4
 800afa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800afa8:	6838      	ldr	r0, [r7, #0]
 800afaa:	f004 f9a4 	bl	800f2f6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	69db      	ldr	r3, [r3, #28]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d102      	bne.n	800afcc <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fe5f 	bl	800bc8a <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800afd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b082      	sub	sp, #8
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d101      	bne.n	800afec <HAL_PCD_Start+0x16>
 800afe8:	2302      	movs	r3, #2
 800afea:	e012      	b.n	800b012 <HAL_PCD_Start+0x3c>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4618      	mov	r0, r3
 800affa:	f005 f9ce 	bl	801039a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4618      	mov	r0, r3
 800b004:	f004 f942 	bl	800f28c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b082      	sub	sp, #8
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d101      	bne.n	800b030 <HAL_PCD_Stop+0x16>
 800b02c:	2302      	movs	r3, #2
 800b02e:	e012      	b.n	800b056 <HAL_PCD_Stop+0x3c>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  __HAL_PCD_DISABLE(hpcd);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f004 f93d 	bl	800f2bc <USB_DisableGlobalInt>

  (void)USB_StopDevice(hpcd->Instance);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4618      	mov	r0, r3
 800b048:	f005 f97c 	bl	8010344 <USB_StopDevice>

  __HAL_UNLOCK(hpcd);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b082      	sub	sp, #8
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f005 f9ac 	bl	80103c8 <USB_ReadInterrupts>
 800b070:	4603      	mov	r3, r0
 800b072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b07a:	d102      	bne.n	800b082 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fb3f 	bl	800b700 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4618      	mov	r0, r3
 800b088:	f005 f99e 	bl	80103c8 <USB_ReadInterrupts>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b096:	d112      	bne.n	800b0be <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0aa:	b292      	uxth	r2, r2
 800b0ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f00e fd02 	bl	8019aba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f929 	bl	800b310 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f005 f980 	bl	80103c8 <USB_ReadInterrupts>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0d2:	d10b      	bne.n	800b0ec <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b0e6:	b292      	uxth	r2, r2
 800b0e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f005 f969 	bl	80103c8 <USB_ReadInterrupts>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b100:	d10b      	bne.n	800b11a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b114:	b292      	uxth	r2, r2
 800b116:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f005 f952 	bl	80103c8 <USB_ReadInterrupts>
 800b124:	4603      	mov	r3, r0
 800b126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b12a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b12e:	d133      	bne.n	800b198 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b138:	b29a      	uxth	r2, r3
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f022 0204 	bic.w	r2, r2, #4
 800b142:	b292      	uxth	r2, r2
 800b144:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b150:	b29a      	uxth	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f022 0208 	bic.w	r2, r2, #8
 800b15a:	b292      	uxth	r2, r2
 800b15c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b166:	2b01      	cmp	r3, #1
 800b168:	d107      	bne.n	800b17a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b172:	2100      	movs	r1, #0
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f00e feaf 	bl	8019ed8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f00e fcd6 	bl	8019b2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b188:	b29a      	uxth	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b192:	b292      	uxth	r2, r2
 800b194:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f005 f913 	bl	80103c8 <USB_ReadInterrupts>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1ac:	d131      	bne.n	800b212 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f042 0208 	orr.w	r2, r2, #8
 800b1c0:	b292      	uxth	r2, r2
 800b1c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1d8:	b292      	uxth	r2, r2
 800b1da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f042 0204 	orr.w	r2, r2, #4
 800b1f0:	b292      	uxth	r2, r2
 800b1f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f005 f8e4 	bl	80103c8 <USB_ReadInterrupts>
 800b200:	4603      	mov	r3, r0
 800b202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b20a:	d002      	beq.n	800b212 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f00e fc73 	bl	8019af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4618      	mov	r0, r3
 800b218:	f005 f8d6 	bl	80103c8 <USB_ReadInterrupts>
 800b21c:	4603      	mov	r3, r0
 800b21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b222:	2b80      	cmp	r3, #128	; 0x80
 800b224:	d13f      	bne.n	800b2a6 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b22e:	b29a      	uxth	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b238:	b292      	uxth	r2, r2
 800b23a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b244:	2b00      	cmp	r3, #0
 800b246:	d12b      	bne.n	800b2a0 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b250:	b29a      	uxth	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f042 0204 	orr.w	r2, r2, #4
 800b25a:	b292      	uxth	r2, r2
 800b25c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b268:	b29a      	uxth	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f042 0208 	orr.w	r2, r2, #8
 800b272:	b292      	uxth	r2, r2
 800b274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b288:	b29b      	uxth	r3, r3
 800b28a:	089b      	lsrs	r3, r3, #2
 800b28c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b296:	2101      	movs	r1, #1
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f00e fe1d 	bl	8019ed8 <HAL_PCDEx_LPM_Callback>
 800b29e:	e002      	b.n	800b2a6 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f00e fc29 	bl	8019af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f005 f88c 	bl	80103c8 <USB_ReadInterrupts>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2ba:	d10e      	bne.n	800b2da <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b2ce:	b292      	uxth	r2, r2
 800b2d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f00e fbe2 	bl	8019a9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f005 f872 	bl	80103c8 <USB_ReadInterrupts>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ee:	d10b      	bne.n	800b308 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b302:	b292      	uxth	r2, r2
 800b304:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800b308:	bf00      	nop
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	460b      	mov	r3, r1
 800b31a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b322:	2b01      	cmp	r3, #1
 800b324:	d101      	bne.n	800b32a <HAL_PCD_SetAddress+0x1a>
 800b326:	2302      	movs	r3, #2
 800b328:	e013      	b.n	800b352 <HAL_PCD_SetAddress+0x42>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	78fa      	ldrb	r2, [r7, #3]
 800b336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	78fa      	ldrb	r2, [r7, #3]
 800b340:	4611      	mov	r1, r2
 800b342:	4618      	mov	r0, r3
 800b344:	f005 f815 	bl	8010372 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b084      	sub	sp, #16
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	4608      	mov	r0, r1
 800b364:	4611      	mov	r1, r2
 800b366:	461a      	mov	r2, r3
 800b368:	4603      	mov	r3, r0
 800b36a:	70fb      	strb	r3, [r7, #3]
 800b36c:	460b      	mov	r3, r1
 800b36e:	803b      	strh	r3, [r7, #0]
 800b370:	4613      	mov	r3, r2
 800b372:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	da0b      	bge.n	800b398 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b380:	78fb      	ldrb	r3, [r7, #3]
 800b382:	f003 0307 	and.w	r3, r3, #7
 800b386:	015b      	lsls	r3, r3, #5
 800b388:	3328      	adds	r3, #40	; 0x28
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	4413      	add	r3, r2
 800b38e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2201      	movs	r2, #1
 800b394:	705a      	strb	r2, [r3, #1]
 800b396:	e00b      	b.n	800b3b0 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b398:	78fb      	ldrb	r3, [r7, #3]
 800b39a:	f003 0307 	and.w	r3, r3, #7
 800b39e:	015b      	lsls	r3, r3, #5
 800b3a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b3b0:	78fb      	ldrb	r3, [r7, #3]
 800b3b2:	f003 0307 	and.w	r3, r3, #7
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b3bc:	883a      	ldrh	r2, [r7, #0]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	78ba      	ldrb	r2, [r7, #2]
 800b3c6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	785b      	ldrb	r3, [r3, #1]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d004      	beq.n	800b3da <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b3da:	78bb      	ldrb	r3, [r7, #2]
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	d102      	bne.n	800b3e6 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d101      	bne.n	800b3f4 <HAL_PCD_EP_Open+0x9a>
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	e00e      	b.n	800b412 <HAL_PCD_EP_Open+0xb8>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68f9      	ldr	r1, [r7, #12]
 800b402:	4618      	mov	r0, r3
 800b404:	f003 ff9c 	bl	800f340 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800b410:	7afb      	ldrb	r3, [r7, #11]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	460b      	mov	r3, r1
 800b424:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	da0b      	bge.n	800b446 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b42e:	78fb      	ldrb	r3, [r7, #3]
 800b430:	f003 0307 	and.w	r3, r3, #7
 800b434:	015b      	lsls	r3, r3, #5
 800b436:	3328      	adds	r3, #40	; 0x28
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	4413      	add	r3, r2
 800b43c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2201      	movs	r2, #1
 800b442:	705a      	strb	r2, [r3, #1]
 800b444:	e00b      	b.n	800b45e <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b446:	78fb      	ldrb	r3, [r7, #3]
 800b448:	f003 0307 	and.w	r3, r3, #7
 800b44c:	015b      	lsls	r3, r3, #5
 800b44e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	4413      	add	r3, r2
 800b456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b45e:	78fb      	ldrb	r3, [r7, #3]
 800b460:	f003 0307 	and.w	r3, r3, #7
 800b464:	b2da      	uxtb	r2, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b470:	2b01      	cmp	r3, #1
 800b472:	d101      	bne.n	800b478 <HAL_PCD_EP_Close+0x5e>
 800b474:	2302      	movs	r3, #2
 800b476:	e00e      	b.n	800b496 <HAL_PCD_EP_Close+0x7c>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68f9      	ldr	r1, [r7, #12]
 800b486:	4618      	mov	r0, r3
 800b488:	f004 fa44 	bl	800f914 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b086      	sub	sp, #24
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	60f8      	str	r0, [r7, #12]
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	603b      	str	r3, [r7, #0]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b4ae:	7afb      	ldrb	r3, [r7, #11]
 800b4b0:	f003 0307 	and.w	r3, r3, #7
 800b4b4:	015b      	lsls	r3, r3, #5
 800b4b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	4413      	add	r3, r2
 800b4be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b4d8:	7afb      	ldrb	r3, [r7, #11]
 800b4da:	f003 0307 	and.w	r3, r3, #7
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b4e4:	7afb      	ldrb	r3, [r7, #11]
 800b4e6:	f003 0307 	and.w	r3, r3, #7
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	6979      	ldr	r1, [r7, #20]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f004 fba3 	bl	800fc40 <USB_EPStartXfer>
 800b4fa:	e005      	b.n	800b508 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6979      	ldr	r1, [r7, #20]
 800b502:	4618      	mov	r0, r3
 800b504:	f004 fb9c 	bl	800fc40 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3718      	adds	r7, #24
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b512:	b480      	push	{r7}
 800b514:	b083      	sub	sp, #12
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
 800b51a:	460b      	mov	r3, r1
 800b51c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b51e:	78fb      	ldrb	r3, [r7, #3]
 800b520:	f003 0307 	and.w	r3, r3, #7
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	330a      	adds	r3, #10
 800b528:	015b      	lsls	r3, r3, #5
 800b52a:	4413      	add	r3, r2
 800b52c:	3304      	adds	r3, #4
 800b52e:	681b      	ldr	r3, [r3, #0]
}
 800b530:	4618      	mov	r0, r3
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	607a      	str	r2, [r7, #4]
 800b546:	603b      	str	r3, [r7, #0]
 800b548:	460b      	mov	r3, r1
 800b54a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b54c:	7afb      	ldrb	r3, [r7, #11]
 800b54e:	f003 0307 	and.w	r3, r3, #7
 800b552:	015b      	lsls	r3, r3, #5
 800b554:	3328      	adds	r3, #40	; 0x28
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	4413      	add	r3, r2
 800b55a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	2200      	movs	r2, #0
 800b56c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2201      	movs	r2, #1
 800b572:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b574:	7afb      	ldrb	r3, [r7, #11]
 800b576:	f003 0307 	and.w	r3, r3, #7
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	f003 0307 	and.w	r3, r3, #7
 800b586:	2b00      	cmp	r3, #0
 800b588:	d106      	bne.n	800b598 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	6979      	ldr	r1, [r7, #20]
 800b590:	4618      	mov	r0, r3
 800b592:	f004 fb55 	bl	800fc40 <USB_EPStartXfer>
 800b596:	e005      	b.n	800b5a4 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	6979      	ldr	r1, [r7, #20]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f004 fb4e 	bl	800fc40 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b5ba:	78fb      	ldrb	r3, [r7, #3]
 800b5bc:	f003 0207 	and.w	r2, r3, #7
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d901      	bls.n	800b5cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e046      	b.n	800b65a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b5cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	da0b      	bge.n	800b5ec <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5d4:	78fb      	ldrb	r3, [r7, #3]
 800b5d6:	f003 0307 	and.w	r3, r3, #7
 800b5da:	015b      	lsls	r3, r3, #5
 800b5dc:	3328      	adds	r3, #40	; 0x28
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	705a      	strb	r2, [r3, #1]
 800b5ea:	e009      	b.n	800b600 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b5ec:	78fb      	ldrb	r3, [r7, #3]
 800b5ee:	015b      	lsls	r3, r3, #5
 800b5f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2201      	movs	r2, #1
 800b604:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b606:	78fb      	ldrb	r3, [r7, #3]
 800b608:	f003 0307 	and.w	r3, r3, #7
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d101      	bne.n	800b620 <HAL_PCD_EP_SetStall+0x72>
 800b61c:	2302      	movs	r3, #2
 800b61e:	e01c      	b.n	800b65a <HAL_PCD_EP_SetStall+0xac>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68f9      	ldr	r1, [r7, #12]
 800b62e:	4618      	mov	r0, r3
 800b630:	f004 fdb2 	bl	8010198 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b634:	78fb      	ldrb	r3, [r7, #3]
 800b636:	f003 0307 	and.w	r3, r3, #7
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d108      	bne.n	800b650 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b648:	4619      	mov	r1, r3
 800b64a:	4610      	mov	r0, r2
 800b64c:	f004 fecc 	bl	80103e8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b66e:	78fb      	ldrb	r3, [r7, #3]
 800b670:	f003 020f 	and.w	r2, r3, #15
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d901      	bls.n	800b680 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	e03a      	b.n	800b6f6 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b684:	2b00      	cmp	r3, #0
 800b686:	da0b      	bge.n	800b6a0 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b688:	78fb      	ldrb	r3, [r7, #3]
 800b68a:	f003 0307 	and.w	r3, r3, #7
 800b68e:	015b      	lsls	r3, r3, #5
 800b690:	3328      	adds	r3, #40	; 0x28
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	4413      	add	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2201      	movs	r2, #1
 800b69c:	705a      	strb	r2, [r3, #1]
 800b69e:	e00b      	b.n	800b6b8 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	f003 0307 	and.w	r3, r3, #7
 800b6a6:	015b      	lsls	r3, r3, #5
 800b6a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b6be:	78fb      	ldrb	r3, [r7, #3]
 800b6c0:	f003 0307 	and.w	r3, r3, #7
 800b6c4:	b2da      	uxtb	r2, r3
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d101      	bne.n	800b6d8 <HAL_PCD_EP_ClrStall+0x76>
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	e00e      	b.n	800b6f6 <HAL_PCD_EP_ClrStall+0x94>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68f9      	ldr	r1, [r7, #12]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f004 fd98 	bl	801021c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b700:	b590      	push	{r4, r7, lr}
 800b702:	b089      	sub	sp, #36	; 0x24
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b708:	e26f      	b.n	800bbea <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b712:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b714:	8afb      	ldrh	r3, [r7, #22]
 800b716:	b2db      	uxtb	r3, r3
 800b718:	f003 030f 	and.w	r3, r3, #15
 800b71c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800b71e:	7d7b      	ldrb	r3, [r7, #21]
 800b720:	2b00      	cmp	r3, #0
 800b722:	f040 8137 	bne.w	800b994 <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b726:	8afb      	ldrh	r3, [r7, #22]
 800b728:	f003 0310 	and.w	r3, r3, #16
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d14f      	bne.n	800b7d0 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	881b      	ldrh	r3, [r3, #0]
 800b736:	b29b      	uxth	r3, r3
 800b738:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b73c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b740:	b29c      	uxth	r4, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800b74a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b74e:	b29b      	uxth	r3, r3
 800b750:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	3328      	adds	r3, #40	; 0x28
 800b756:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b760:	b29b      	uxth	r3, r3
 800b762:	461a      	mov	r2, r3
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	00db      	lsls	r3, r3, #3
 800b76a:	4413      	add	r3, r2
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	6812      	ldr	r2, [r2, #0]
 800b770:	4413      	add	r3, r2
 800b772:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b776:	881b      	ldrh	r3, [r3, #0]
 800b778:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	695a      	ldr	r2, [r3, #20]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	69db      	ldr	r3, [r3, #28]
 800b788:	441a      	add	r2, r3
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b78e:	2100      	movs	r1, #0
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f00e f96d 	bl	8019a70 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 8223 	beq.w	800bbea <PCD_EP_ISR_Handler+0x4ea>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	699b      	ldr	r3, [r3, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f040 821e 	bne.w	800bbea <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	b292      	uxth	r2, r2
 800b7c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b7ce:	e20c      	b.n	800bbea <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b7d6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	881b      	ldrh	r3, [r3, #0]
 800b7de:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b7e0:	8a7b      	ldrh	r3, [r7, #18]
 800b7e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d031      	beq.n	800b84e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	4413      	add	r3, r2
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	6812      	ldr	r2, [r2, #0]
 800b802:	4413      	add	r3, r2
 800b804:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b808:	881b      	ldrh	r3, [r3, #0]
 800b80a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6818      	ldr	r0, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b824:	b29b      	uxth	r3, r3
 800b826:	f004 fe2c 	bl	8010482 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	881b      	ldrh	r3, [r3, #0]
 800b830:	b29a      	uxth	r2, r3
 800b832:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b836:	4013      	ands	r3, r2
 800b838:	b29c      	uxth	r4, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800b842:	b292      	uxth	r2, r2
 800b844:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f00e f8e8 	bl	8019a1c <HAL_PCD_SetupStageCallback>
 800b84c:	e1cd      	b.n	800bbea <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b84e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b852:	2b00      	cmp	r3, #0
 800b854:	f280 81c9 	bge.w	800bbea <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	881b      	ldrh	r3, [r3, #0]
 800b85e:	b29a      	uxth	r2, r3
 800b860:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b864:	4013      	ands	r3, r2
 800b866:	b29c      	uxth	r4, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800b870:	b292      	uxth	r2, r2
 800b872:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	461a      	mov	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	00db      	lsls	r3, r3, #3
 800b886:	4413      	add	r3, r2
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	6812      	ldr	r2, [r2, #0]
 800b88c:	4413      	add	r3, r2
 800b88e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b892:	881b      	ldrh	r3, [r3, #0]
 800b894:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	69db      	ldr	r3, [r3, #28]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d019      	beq.n	800b8d8 <PCD_EP_ISR_Handler+0x1d8>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	695b      	ldr	r3, [r3, #20]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d015      	beq.n	800b8d8 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6818      	ldr	r0, [r3, #0]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6959      	ldr	r1, [r3, #20]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	f004 fde0 	bl	8010482 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	695a      	ldr	r2, [r3, #20]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	69db      	ldr	r3, [r3, #28]
 800b8ca:	441a      	add	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f00e f8b4 	bl	8019a40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	461c      	mov	r4, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	441c      	add	r4, r3
 800b8ea:	f204 4306 	addw	r3, r4, #1030	; 0x406
 800b8ee:	60bb      	str	r3, [r7, #8]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d110      	bne.n	800b91a <PCD_EP_ISR_Handler+0x21a>
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	881b      	ldrh	r3, [r3, #0]
 800b8fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b900:	b29a      	uxth	r2, r3
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	801a      	strh	r2, [r3, #0]
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	881b      	ldrh	r3, [r3, #0]
 800b90a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b90e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b912:	b29a      	uxth	r2, r3
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	801a      	strh	r2, [r3, #0]
 800b918:	e026      	b.n	800b968 <PCD_EP_ISR_Handler+0x268>
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	2b3d      	cmp	r3, #61	; 0x3d
 800b920:	d813      	bhi.n	800b94a <PCD_EP_ISR_Handler+0x24a>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	085b      	lsrs	r3, r3, #1
 800b928:	61bb      	str	r3, [r7, #24]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	f003 0301 	and.w	r3, r3, #1
 800b932:	2b00      	cmp	r3, #0
 800b934:	d002      	beq.n	800b93c <PCD_EP_ISR_Handler+0x23c>
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	3301      	adds	r3, #1
 800b93a:	61bb      	str	r3, [r7, #24]
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	b29b      	uxth	r3, r3
 800b940:	029b      	lsls	r3, r3, #10
 800b942:	b29a      	uxth	r2, r3
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	801a      	strh	r2, [r3, #0]
 800b948:	e00e      	b.n	800b968 <PCD_EP_ISR_Handler+0x268>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	095b      	lsrs	r3, r3, #5
 800b950:	61bb      	str	r3, [r7, #24]
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	b29b      	uxth	r3, r3
 800b956:	029b      	lsls	r3, r3, #10
 800b958:	b29b      	uxth	r3, r3
 800b95a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b95e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b962:	b29a      	uxth	r2, r3
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	b29b      	uxth	r3, r3
 800b970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b978:	b29c      	uxth	r4, r3
 800b97a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800b97e:	b29c      	uxth	r4, r3
 800b980:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800b984:	b29c      	uxth	r4, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	4b9f      	ldr	r3, [pc, #636]	; (800bc08 <PCD_EP_ISR_Handler+0x508>)
 800b98c:	4323      	orrs	r3, r4
 800b98e:	b29b      	uxth	r3, r3
 800b990:	8013      	strh	r3, [r2, #0]
 800b992:	e12a      	b.n	800bbea <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	461a      	mov	r2, r3
 800b99a:	7d7b      	ldrb	r3, [r7, #21]
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b9a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f280 80cb 	bge.w	800bb44 <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	7d7b      	ldrb	r3, [r7, #21]
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4413      	add	r3, r2
 800b9ba:	881b      	ldrh	r3, [r3, #0]
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	b29c      	uxth	r4, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	7d7b      	ldrb	r3, [r7, #21]
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800b9d6:	b292      	uxth	r2, r2
 800b9d8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b9da:	7d7b      	ldrb	r3, [r7, #21]
 800b9dc:	015b      	lsls	r3, r3, #5
 800b9de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	7b1b      	ldrb	r3, [r3, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d11f      	bne.n	800ba30 <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	00db      	lsls	r3, r3, #3
 800ba02:	4413      	add	r3, r2
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	6812      	ldr	r2, [r2, #0]
 800ba08:	4413      	add	r3, r2
 800ba0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba0e:	881b      	ldrh	r3, [r3, #0]
 800ba10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba14:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800ba16:	8bfb      	ldrh	r3, [r7, #30]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d06e      	beq.n	800bafa <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6818      	ldr	r0, [r3, #0]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6959      	ldr	r1, [r3, #20]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	88da      	ldrh	r2, [r3, #6]
 800ba28:	8bfb      	ldrh	r3, [r7, #30]
 800ba2a:	f004 fd2a 	bl	8010482 <USB_ReadPMA>
 800ba2e:	e064      	b.n	800bafa <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	461a      	mov	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d01f      	beq.n	800ba8a <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	461a      	mov	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	00db      	lsls	r3, r3, #3
 800ba5c:	4413      	add	r3, r2
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	6812      	ldr	r2, [r2, #0]
 800ba62:	4413      	add	r3, r2
 800ba64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba68:	881b      	ldrh	r3, [r3, #0]
 800ba6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba6e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800ba70:	8bfb      	ldrh	r3, [r7, #30]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d028      	beq.n	800bac8 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6818      	ldr	r0, [r3, #0]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6959      	ldr	r1, [r3, #20]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	891a      	ldrh	r2, [r3, #8]
 800ba82:	8bfb      	ldrh	r3, [r7, #30]
 800ba84:	f004 fcfd 	bl	8010482 <USB_ReadPMA>
 800ba88:	e01e      	b.n	800bac8 <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	461a      	mov	r2, r3
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	4413      	add	r3, r2
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	6812      	ldr	r2, [r2, #0]
 800baa2:	4413      	add	r3, r2
 800baa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800baa8:	881b      	ldrh	r3, [r3, #0]
 800baaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800baae:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800bab0:	8bfb      	ldrh	r3, [r7, #30]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d008      	beq.n	800bac8 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6818      	ldr	r0, [r3, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6959      	ldr	r1, [r3, #20]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	895a      	ldrh	r2, [r3, #10]
 800bac2:	8bfb      	ldrh	r3, [r7, #30]
 800bac4:	f004 fcdd 	bl	8010482 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	461a      	mov	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	881b      	ldrh	r3, [r3, #0]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bae2:	b29c      	uxth	r4, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	461a      	mov	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	441a      	add	r2, r3
 800baf2:	4b46      	ldr	r3, [pc, #280]	; (800bc0c <PCD_EP_ISR_Handler+0x50c>)
 800baf4:	4323      	orrs	r3, r4
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	69da      	ldr	r2, [r3, #28]
 800bafe:	8bfb      	ldrh	r3, [r7, #30]
 800bb00:	441a      	add	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	695a      	ldr	r2, [r3, #20]
 800bb0a:	8bfb      	ldrh	r3, [r7, #30]
 800bb0c:	441a      	add	r2, r3
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d004      	beq.n	800bb24 <PCD_EP_ISR_Handler+0x424>
 800bb1a:	8bfa      	ldrh	r2, [r7, #30]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	691b      	ldr	r3, [r3, #16]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d206      	bcs.n	800bb32 <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f00d ff88 	bl	8019a40 <HAL_PCD_DataOutStageCallback>
 800bb30:	e008      	b.n	800bb44 <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	7819      	ldrb	r1, [r3, #0]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	695a      	ldr	r2, [r3, #20]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7ff fcad 	bl	800b49e <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800bb44:	8a7b      	ldrh	r3, [r7, #18]
 800bb46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d04d      	beq.n	800bbea <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 800bb4e:	7d7b      	ldrb	r3, [r7, #21]
 800bb50:	015b      	lsls	r3, r3, #5
 800bb52:	3328      	adds	r3, #40	; 0x28
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	4413      	add	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	7d7b      	ldrb	r3, [r7, #21]
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4413      	add	r3, r2
 800bb66:	881b      	ldrh	r3, [r3, #0]
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800bb6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb72:	b29c      	uxth	r4, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	461a      	mov	r2, r3
 800bb7a:	7d7b      	ldrb	r3, [r7, #21]
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	441a      	add	r2, r3
 800bb80:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800bb84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	461a      	mov	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	4413      	add	r3, r2
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	6812      	ldr	r2, [r2, #0]
 800bba4:	4413      	add	r3, r2
 800bba6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	695a      	ldr	r2, [r3, #20]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	69db      	ldr	r3, [r3, #28]
 800bbbc:	441a      	add	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	699b      	ldr	r3, [r3, #24]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d106      	bne.n	800bbd8 <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f00d ff4d 	bl	8019a70 <HAL_PCD_DataInStageCallback>
 800bbd6:	e008      	b.n	800bbea <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	7819      	ldrb	r1, [r3, #0]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	695a      	ldr	r2, [r3, #20]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff fca9 	bl	800b53c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	b21b      	sxth	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f6ff ad87 	blt.w	800b70a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3724      	adds	r7, #36	; 0x24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd90      	pop	{r4, r7, pc}
 800bc06:	bf00      	nop
 800bc08:	ffff8080 	.word	0xffff8080
 800bc0c:	ffff80c0 	.word	0xffff80c0

0800bc10 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b087      	sub	sp, #28
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	607b      	str	r3, [r7, #4]
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	817b      	strh	r3, [r7, #10]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800bc22:	897b      	ldrh	r3, [r7, #10]
 800bc24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d008      	beq.n	800bc40 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bc2e:	897b      	ldrh	r3, [r7, #10]
 800bc30:	f003 0307 	and.w	r3, r3, #7
 800bc34:	015b      	lsls	r3, r3, #5
 800bc36:	3328      	adds	r3, #40	; 0x28
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	617b      	str	r3, [r7, #20]
 800bc3e:	e006      	b.n	800bc4e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bc40:	897b      	ldrh	r3, [r7, #10]
 800bc42:	015b      	lsls	r3, r3, #5
 800bc44:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800bc4e:	893b      	ldrh	r3, [r7, #8]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d107      	bne.n	800bc64 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	2200      	movs	r2, #0
 800bc58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	80da      	strh	r2, [r3, #6]
 800bc62:	e00b      	b.n	800bc7c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	2201      	movs	r2, #1
 800bc68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	0c1b      	lsrs	r3, r3, #16
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	371c      	adds	r7, #28
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b085      	sub	sp, #20
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	f043 0301 	orr.w	r3, r3, #1
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	f043 0302 	orr.w	r3, r3, #2
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3714      	adds	r7, #20
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
	...

0800bce0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bce0:	b480      	push	{r7}
 800bce2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bce4:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a04      	ldr	r2, [pc, #16]	; (800bcfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bcea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcee:	6013      	str	r3, [r2, #0]
}
 800bcf0:	bf00      	nop
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	58000400 	.word	0x58000400

0800bd00 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bd00:	b480      	push	{r7}
 800bd02:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bd04:	4b04      	ldr	r3, [pc, #16]	; (800bd18 <HAL_PWREx_GetVoltageRange+0x18>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	58000400 	.word	0x58000400

0800bd1c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bd20:	4b05      	ldr	r3, [pc, #20]	; (800bd38 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	4a04      	ldr	r2, [pc, #16]	; (800bd38 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bd26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bd2a:	6053      	str	r3, [r2, #4]
}
 800bd2c:	bf00      	nop
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	58000400 	.word	0x58000400

0800bd3c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bd40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd4e:	d101      	bne.n	800bd54 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800bd50:	2301      	movs	r3, #1
 800bd52:	e000      	b.n	800bd56 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <LL_RCC_HSE_EnableBypass>:
{
 800bd60:	b480      	push	{r7}
 800bd62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800bd64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bd6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bd72:	6013      	str	r3, [r2, #0]
}
 800bd74:	bf00      	nop
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr

0800bd7e <LL_RCC_HSE_DisableBypass>:
{
 800bd7e:	b480      	push	{r7}
 800bd80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800bd82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bd8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd90:	6013      	str	r3, [r2, #0]
}
 800bd92:	bf00      	nop
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <LL_RCC_HSE_Enable>:
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800bda0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bdaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdae:	6013      	str	r3, [r2, #0]
}
 800bdb0:	bf00      	nop
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <LL_RCC_HSE_Disable>:
{
 800bdba:	b480      	push	{r7}
 800bdbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800bdbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bdc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdcc:	6013      	str	r3, [r2, #0]
}
 800bdce:	bf00      	nop
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <LL_RCC_HSE_IsReady>:
{
 800bdd8:	b480      	push	{r7}
 800bdda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800bddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bde6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdea:	d101      	bne.n	800bdf0 <LL_RCC_HSE_IsReady+0x18>
 800bdec:	2301      	movs	r3, #1
 800bdee:	e000      	b.n	800bdf2 <LL_RCC_HSE_IsReady+0x1a>
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <LL_RCC_HSI_Enable>:
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800be00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be0e:	6013      	str	r3, [r2, #0]
}
 800be10:	bf00      	nop
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <LL_RCC_HSI_Disable>:
{
 800be1a:	b480      	push	{r7}
 800be1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800be1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be2c:	6013      	str	r3, [r2, #0]
}
 800be2e:	bf00      	nop
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <LL_RCC_HSI_IsReady>:
{
 800be38:	b480      	push	{r7}
 800be3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800be3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be4a:	d101      	bne.n	800be50 <LL_RCC_HSI_IsReady+0x18>
 800be4c:	2301      	movs	r3, #1
 800be4e:	e000      	b.n	800be52 <LL_RCC_HSI_IsReady+0x1a>
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <LL_RCC_HSI_SetCalibTrimming>:
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800be64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	061b      	lsls	r3, r3, #24
 800be72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be76:	4313      	orrs	r3, r2
 800be78:	604b      	str	r3, [r1, #4]
}
 800be7a:	bf00      	nop
 800be7c:	370c      	adds	r7, #12
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <LL_RCC_HSI48_Enable>:
{
 800be86:	b480      	push	{r7}
 800be88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800be8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be96:	f043 0301 	orr.w	r3, r3, #1
 800be9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800be9e:	bf00      	nop
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <LL_RCC_HSI48_Disable>:
{
 800bea8:	b480      	push	{r7}
 800beaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800beac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800beb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800beb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800beb8:	f023 0301 	bic.w	r3, r3, #1
 800bebc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800bec0:	bf00      	nop
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <LL_RCC_HSI48_IsReady>:
{
 800beca:	b480      	push	{r7}
 800becc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800bece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bed6:	f003 0302 	and.w	r3, r3, #2
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d101      	bne.n	800bee2 <LL_RCC_HSI48_IsReady+0x18>
 800bede:	2301      	movs	r3, #1
 800bee0:	e000      	b.n	800bee4 <LL_RCC_HSI48_IsReady+0x1a>
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <LL_RCC_LSE_Enable>:
{
 800beee:	b480      	push	{r7}
 800bef0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800befa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800befe:	f043 0301 	orr.w	r3, r3, #1
 800bf02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800bf06:	bf00      	nop
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <LL_RCC_LSE_Disable>:
{
 800bf10:	b480      	push	{r7}
 800bf12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bf14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bf20:	f023 0301 	bic.w	r3, r3, #1
 800bf24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800bf28:	bf00      	nop
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <LL_RCC_LSE_EnableBypass>:
{
 800bf32:	b480      	push	{r7}
 800bf34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bf36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bf42:	f043 0304 	orr.w	r3, r3, #4
 800bf46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800bf4a:	bf00      	nop
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <LL_RCC_LSE_DisableBypass>:
{
 800bf54:	b480      	push	{r7}
 800bf56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bf58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bf64:	f023 0304 	bic.w	r3, r3, #4
 800bf68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800bf6c:	bf00      	nop
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <LL_RCC_LSE_IsReady>:
{
 800bf76:	b480      	push	{r7}
 800bf78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bf7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf82:	f003 0302 	and.w	r3, r3, #2
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d101      	bne.n	800bf8e <LL_RCC_LSE_IsReady+0x18>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e000      	b.n	800bf90 <LL_RCC_LSE_IsReady+0x1a>
 800bf8e:	2300      	movs	r3, #0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <LL_RCC_LSI1_Enable>:
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800bf9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bfaa:	f043 0301 	orr.w	r3, r3, #1
 800bfae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800bfb2:	bf00      	nop
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <LL_RCC_LSI1_Disable>:
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800bfc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bfcc:	f023 0301 	bic.w	r3, r3, #1
 800bfd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800bfd4:	bf00      	nop
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <LL_RCC_LSI1_IsReady>:
{
 800bfde:	b480      	push	{r7}
 800bfe0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800bfe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfea:	f003 0302 	and.w	r3, r3, #2
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d101      	bne.n	800bff6 <LL_RCC_LSI1_IsReady+0x18>
 800bff2:	2301      	movs	r3, #1
 800bff4:	e000      	b.n	800bff8 <LL_RCC_LSI1_IsReady+0x1a>
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr

0800c002 <LL_RCC_LSI2_Enable>:
{
 800c002:	b480      	push	{r7}
 800c004:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c00a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c00e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c012:	f043 0304 	orr.w	r3, r3, #4
 800c016:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c01a:	bf00      	nop
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <LL_RCC_LSI2_Disable>:
{
 800c024:	b480      	push	{r7}
 800c026:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c02c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c034:	f023 0304 	bic.w	r3, r3, #4
 800c038:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c03c:	bf00      	nop
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <LL_RCC_LSI2_IsReady>:
{
 800c046:	b480      	push	{r7}
 800c048:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800c04a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c04e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c052:	f003 0308 	and.w	r3, r3, #8
 800c056:	2b08      	cmp	r3, #8
 800c058:	d101      	bne.n	800c05e <LL_RCC_LSI2_IsReady+0x18>
 800c05a:	2301      	movs	r3, #1
 800c05c:	e000      	b.n	800c060 <LL_RCC_LSI2_IsReady+0x1a>
 800c05e:	2300      	movs	r3, #0
}
 800c060:	4618      	mov	r0, r3
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <LL_RCC_LSI2_SetTrimming>:
{
 800c06a:	b480      	push	{r7}
 800c06c:	b083      	sub	sp, #12
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800c072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c07a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	021b      	lsls	r3, r3, #8
 800c082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c086:	4313      	orrs	r3, r2
 800c088:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <LL_RCC_MSI_Enable>:
{
 800c098:	b480      	push	{r7}
 800c09a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800c09c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c0a6:	f043 0301 	orr.w	r3, r3, #1
 800c0aa:	6013      	str	r3, [r2, #0]
}
 800c0ac:	bf00      	nop
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <LL_RCC_MSI_Disable>:
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800c0ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c0c4:	f023 0301 	bic.w	r3, r3, #1
 800c0c8:	6013      	str	r3, [r2, #0]
}
 800c0ca:	bf00      	nop
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <LL_RCC_MSI_IsReady>:
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c0d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0302 	and.w	r3, r3, #2
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	d101      	bne.n	800c0ea <LL_RCC_MSI_IsReady+0x16>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e000      	b.n	800c0ec <LL_RCC_MSI_IsReady+0x18>
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <LL_RCC_MSI_SetRange>:
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b083      	sub	sp, #12
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800c0fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4313      	orrs	r3, r2
 800c110:	600b      	str	r3, [r1, #0]
}
 800c112:	bf00      	nop
 800c114:	370c      	adds	r7, #12
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr

0800c11e <LL_RCC_MSI_GetRange>:
{
 800c11e:	b480      	push	{r7}
 800c120:	b083      	sub	sp, #12
 800c122:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c12e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2bb0      	cmp	r3, #176	; 0xb0
 800c134:	d901      	bls.n	800c13a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800c136:	23b0      	movs	r3, #176	; 0xb0
 800c138:	607b      	str	r3, [r7, #4]
  return msiRange;
 800c13a:	687b      	ldr	r3, [r7, #4]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <LL_RCC_MSI_SetCalibTrimming>:
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	021b      	lsls	r3, r3, #8
 800c15e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c162:	4313      	orrs	r3, r2
 800c164:	604b      	str	r3, [r1, #4]
}
 800c166:	bf00      	nop
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr

0800c172 <LL_RCC_SetSysClkSource>:
{
 800c172:	b480      	push	{r7}
 800c174:	b083      	sub	sp, #12
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c17a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f023 0203 	bic.w	r2, r3, #3
 800c184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	608b      	str	r3, [r1, #8]
}
 800c18e:	bf00      	nop
 800c190:	370c      	adds	r7, #12
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <LL_RCC_GetSysClkSource>:
{
 800c19a:	b480      	push	{r7}
 800c19c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c19e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f003 030c 	and.w	r3, r3, #12
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr

0800c1b2 <LL_RCC_SetAHBPrescaler>:
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	b083      	sub	sp, #12
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c1ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c1c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	608b      	str	r3, [r1, #8]
}
 800c1ce:	bf00      	nop
 800c1d0:	370c      	adds	r7, #12
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <LL_C2_RCC_SetAHBPrescaler>:
{
 800c1da:	b480      	push	{r7}
 800c1dc:	b083      	sub	sp, #12
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c1e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c1ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c1ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c1fa:	bf00      	nop
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <LL_RCC_SetAHB4Prescaler>:
{
 800c206:	b480      	push	{r7}
 800c208:	b083      	sub	sp, #12
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c20e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c212:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c216:	f023 020f 	bic.w	r2, r3, #15
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	091b      	lsrs	r3, r3, #4
 800c21e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c222:	4313      	orrs	r3, r2
 800c224:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <LL_RCC_SetAPB1Prescaler>:
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c23c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	608b      	str	r3, [r1, #8]
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <LL_RCC_SetAPB2Prescaler>:
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c26e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4313      	orrs	r3, r2
 800c276:	608b      	str	r3, [r1, #8]
}
 800c278:	bf00      	nop
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <LL_RCC_GetAHBPrescaler>:
{
 800c284:	b480      	push	{r7}
 800c286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c292:	4618      	mov	r0, r3
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <LL_C2_RCC_GetAHBPrescaler>:
{
 800c29c:	b480      	push	{r7}
 800c29e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800c2a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c2a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <LL_RCC_GetAHB4Prescaler>:
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c2ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c2c2:	011b      	lsls	r3, r3, #4
 800c2c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <LL_RCC_GetAPB1Prescaler>:
{
 800c2d2:	b480      	push	{r7}
 800c2d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c2d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <LL_RCC_GetAPB2Prescaler>:
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c2ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr

0800c302 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c302:	b480      	push	{r7}
 800c304:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c310:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c314:	6013      	str	r3, [r2, #0]
}
 800c316:	bf00      	nop
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c320:	b480      	push	{r7}
 800c322:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c32e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c332:	6013      	str	r3, [r2, #0]
}
 800c334:	bf00      	nop
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr

0800c33e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c33e:	b480      	push	{r7}
 800c340:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c34c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c350:	d101      	bne.n	800c356 <LL_RCC_PLL_IsReady+0x18>
 800c352:	2301      	movs	r3, #1
 800c354:	e000      	b.n	800c358 <LL_RCC_PLL_IsReady+0x1a>
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr

0800c362 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c362:	b480      	push	{r7}
 800c364:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	0a1b      	lsrs	r3, r3, #8
 800c36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800c372:	4618      	mov	r0, r3
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c37c:	b480      	push	{r7}
 800c37e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c394:	b480      	push	{r7}
 800c396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c3b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	f003 0303 	and.w	r3, r3, #3
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c3c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3d6:	d101      	bne.n	800c3dc <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e000      	b.n	800c3de <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c3ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c3f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3fc:	d101      	bne.n	800c402 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c3fe:	2301      	movs	r3, #1
 800c400:	e000      	b.n	800c404 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr

0800c40e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c40e:	b480      	push	{r7}
 800c410:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c416:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c41a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c41e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c422:	d101      	bne.n	800c428 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c424:	2301      	movs	r3, #1
 800c426:	e000      	b.n	800c42a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c434:	b480      	push	{r7}
 800c436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c446:	d101      	bne.n	800c44c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c448:	2301      	movs	r3, #1
 800c44a:	e000      	b.n	800c44e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c458:	b480      	push	{r7}
 800c45a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c45c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c466:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c46a:	d101      	bne.n	800c470 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c46c:	2301      	movs	r3, #1
 800c46e:	e000      	b.n	800c472 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c470:	2300      	movs	r3, #0
}
 800c472:	4618      	mov	r0, r3
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c47c:	b590      	push	{r4, r7, lr}
 800c47e:	b08b      	sub	sp, #44	; 0x2c
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e34b      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f003 0320 	and.w	r3, r3, #32
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 808f 	beq.w	800c5ba <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c49c:	f7ff fe7d 	bl	800c19a <LL_RCC_GetSysClkSource>
 800c4a0:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c4a2:	f7ff ff83 	bl	800c3ac <LL_RCC_PLL_GetMainSource>
 800c4a6:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d005      	beq.n	800c4ba <HAL_RCC_OscConfig+0x3e>
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b0:	2b0c      	cmp	r3, #12
 800c4b2:	d149      	bne.n	800c548 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c4b4:	6a3b      	ldr	r3, [r7, #32]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d146      	bne.n	800c548 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c4ba:	f7ff fe0b 	bl	800c0d4 <LL_RCC_MSI_IsReady>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d005      	beq.n	800c4d0 <HAL_RCC_OscConfig+0x54>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	69db      	ldr	r3, [r3, #28]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d101      	bne.n	800c4d0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e32a      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c4d4:	f7ff fe23 	bl	800c11e <LL_RCC_MSI_GetRange>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	429c      	cmp	r4, r3
 800c4dc:	d914      	bls.n	800c508 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f000 fd2a 	bl	800cf3c <RCC_SetFlashLatencyFromMSIRange>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e319      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff fdfd 	bl	800c0f6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6a1b      	ldr	r3, [r3, #32]
 800c500:	4618      	mov	r0, r3
 800c502:	f7ff fe21 	bl	800c148 <LL_RCC_MSI_SetCalibTrimming>
 800c506:	e013      	b.n	800c530 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7ff fdf2 	bl	800c0f6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a1b      	ldr	r3, [r3, #32]
 800c516:	4618      	mov	r0, r3
 800c518:	f7ff fe16 	bl	800c148 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c520:	4618      	mov	r0, r3
 800c522:	f000 fd0b 	bl	800cf3c <RCC_SetFlashLatencyFromMSIRange>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d001      	beq.n	800c530 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e2fa      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800c530:	f7f9 fbee 	bl	8005d10 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c534:	4bb4      	ldr	r3, [pc, #720]	; (800c808 <HAL_RCC_OscConfig+0x38c>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4618      	mov	r0, r3
 800c53a:	f7f9 f8cf 	bl	80056dc <HAL_InitTick>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d039      	beq.n	800c5b8 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	e2ee      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	69db      	ldr	r3, [r3, #28]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d01e      	beq.n	800c58e <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c550:	f7ff fda2 	bl	800c098 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c554:	f7fa fa7a 	bl	8006a4c <HAL_GetTick>
 800c558:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c55a:	e008      	b.n	800c56e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c55c:	f7fa fa76 	bl	8006a4c <HAL_GetTick>
 800c560:	4602      	mov	r2, r0
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	1ad3      	subs	r3, r2, r3
 800c566:	2b02      	cmp	r3, #2
 800c568:	d901      	bls.n	800c56e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800c56a:	2303      	movs	r3, #3
 800c56c:	e2db      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c56e:	f7ff fdb1 	bl	800c0d4 <LL_RCC_MSI_IsReady>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d0f1      	beq.n	800c55c <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7ff fdba 	bl	800c0f6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a1b      	ldr	r3, [r3, #32]
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff fdde 	bl	800c148 <LL_RCC_MSI_SetCalibTrimming>
 800c58c:	e015      	b.n	800c5ba <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c58e:	f7ff fd92 	bl	800c0b6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c592:	f7fa fa5b 	bl	8006a4c <HAL_GetTick>
 800c596:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c598:	e008      	b.n	800c5ac <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c59a:	f7fa fa57 	bl	8006a4c <HAL_GetTick>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d901      	bls.n	800c5ac <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e2bc      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c5ac:	f7ff fd92 	bl	800c0d4 <LL_RCC_MSI_IsReady>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1f1      	bne.n	800c59a <HAL_RCC_OscConfig+0x11e>
 800c5b6:	e000      	b.n	800c5ba <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c5b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f003 0301 	and.w	r3, r3, #1
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d05a      	beq.n	800c67c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c5c6:	f7ff fde8 	bl	800c19a <LL_RCC_GetSysClkSource>
 800c5ca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c5cc:	f7ff feee 	bl	800c3ac <LL_RCC_PLL_GetMainSource>
 800c5d0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	2b08      	cmp	r3, #8
 800c5d6:	d005      	beq.n	800c5e4 <HAL_RCC_OscConfig+0x168>
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	2b0c      	cmp	r3, #12
 800c5dc:	d10d      	bne.n	800c5fa <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	2b03      	cmp	r3, #3
 800c5e2:	d10a      	bne.n	800c5fa <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5e4:	f7ff fbf8 	bl	800bdd8 <LL_RCC_HSE_IsReady>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d045      	beq.n	800c67a <HAL_RCC_OscConfig+0x1fe>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d141      	bne.n	800c67a <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e295      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c602:	d102      	bne.n	800c60a <HAL_RCC_OscConfig+0x18e>
 800c604:	f7ff fbca 	bl	800bd9c <LL_RCC_HSE_Enable>
 800c608:	e00d      	b.n	800c626 <HAL_RCC_OscConfig+0x1aa>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c612:	d104      	bne.n	800c61e <HAL_RCC_OscConfig+0x1a2>
 800c614:	f7ff fba4 	bl	800bd60 <LL_RCC_HSE_EnableBypass>
 800c618:	f7ff fbc0 	bl	800bd9c <LL_RCC_HSE_Enable>
 800c61c:	e003      	b.n	800c626 <HAL_RCC_OscConfig+0x1aa>
 800c61e:	f7ff fbcc 	bl	800bdba <LL_RCC_HSE_Disable>
 800c622:	f7ff fbac 	bl	800bd7e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d012      	beq.n	800c654 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c62e:	f7fa fa0d 	bl	8006a4c <HAL_GetTick>
 800c632:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c634:	e008      	b.n	800c648 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c636:	f7fa fa09 	bl	8006a4c <HAL_GetTick>
 800c63a:	4602      	mov	r2, r0
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	2b64      	cmp	r3, #100	; 0x64
 800c642:	d901      	bls.n	800c648 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c644:	2303      	movs	r3, #3
 800c646:	e26e      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c648:	f7ff fbc6 	bl	800bdd8 <LL_RCC_HSE_IsReady>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d0f1      	beq.n	800c636 <HAL_RCC_OscConfig+0x1ba>
 800c652:	e013      	b.n	800c67c <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c654:	f7fa f9fa 	bl	8006a4c <HAL_GetTick>
 800c658:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c65a:	e008      	b.n	800c66e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c65c:	f7fa f9f6 	bl	8006a4c <HAL_GetTick>
 800c660:	4602      	mov	r2, r0
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	2b64      	cmp	r3, #100	; 0x64
 800c668:	d901      	bls.n	800c66e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c66a:	2303      	movs	r3, #3
 800c66c:	e25b      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c66e:	f7ff fbb3 	bl	800bdd8 <LL_RCC_HSE_IsReady>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1f1      	bne.n	800c65c <HAL_RCC_OscConfig+0x1e0>
 800c678:	e000      	b.n	800c67c <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c67a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f003 0302 	and.w	r3, r3, #2
 800c684:	2b00      	cmp	r3, #0
 800c686:	d051      	beq.n	800c72c <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c688:	f7ff fd87 	bl	800c19a <LL_RCC_GetSysClkSource>
 800c68c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c68e:	f7ff fe8d 	bl	800c3ac <LL_RCC_PLL_GetMainSource>
 800c692:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	2b04      	cmp	r3, #4
 800c698:	d005      	beq.n	800c6a6 <HAL_RCC_OscConfig+0x22a>
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	2b0c      	cmp	r3, #12
 800c69e:	d113      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d110      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c6a6:	f7ff fbc7 	bl	800be38 <LL_RCC_HSI_IsReady>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d005      	beq.n	800c6bc <HAL_RCC_OscConfig+0x240>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d101      	bne.n	800c6bc <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e234      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7ff fbcb 	bl	800be5c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c6c6:	e031      	b.n	800c72c <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d019      	beq.n	800c704 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c6d0:	f7ff fb94 	bl	800bdfc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6d4:	f7fa f9ba 	bl	8006a4c <HAL_GetTick>
 800c6d8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c6da:	e008      	b.n	800c6ee <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6dc:	f7fa f9b6 	bl	8006a4c <HAL_GetTick>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d901      	bls.n	800c6ee <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	e21b      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c6ee:	f7ff fba3 	bl	800be38 <LL_RCC_HSI_IsReady>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d0f1      	beq.n	800c6dc <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7ff fbad 	bl	800be5c <LL_RCC_HSI_SetCalibTrimming>
 800c702:	e013      	b.n	800c72c <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c704:	f7ff fb89 	bl	800be1a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c708:	f7fa f9a0 	bl	8006a4c <HAL_GetTick>
 800c70c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c70e:	e008      	b.n	800c722 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c710:	f7fa f99c 	bl	8006a4c <HAL_GetTick>
 800c714:	4602      	mov	r2, r0
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d901      	bls.n	800c722 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800c71e:	2303      	movs	r3, #3
 800c720:	e201      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c722:	f7ff fb89 	bl	800be38 <LL_RCC_HSI_IsReady>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1f1      	bne.n	800c710 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f003 0308 	and.w	r3, r3, #8
 800c734:	2b00      	cmp	r3, #0
 800c736:	d106      	bne.n	800c746 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c740:	2b00      	cmp	r3, #0
 800c742:	f000 80a2 	beq.w	800c88a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	695b      	ldr	r3, [r3, #20]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d075      	beq.n	800c83a <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f003 0310 	and.w	r3, r3, #16
 800c756:	2b00      	cmp	r3, #0
 800c758:	d046      	beq.n	800c7e8 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c75a:	f7ff fc40 	bl	800bfde <LL_RCC_LSI1_IsReady>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d113      	bne.n	800c78c <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c764:	f7ff fc19 	bl	800bf9a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c768:	f7fa f970 	bl	8006a4c <HAL_GetTick>
 800c76c:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c76e:	e008      	b.n	800c782 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c770:	f7fa f96c 	bl	8006a4c <HAL_GetTick>
 800c774:	4602      	mov	r2, r0
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d901      	bls.n	800c782 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800c77e:	2303      	movs	r3, #3
 800c780:	e1d1      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c782:	f7ff fc2c 	bl	800bfde <LL_RCC_LSI1_IsReady>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d0f1      	beq.n	800c770 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c78c:	f7ff fc39 	bl	800c002 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c790:	f7fa f95c 	bl	8006a4c <HAL_GetTick>
 800c794:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c796:	e008      	b.n	800c7aa <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c798:	f7fa f958 	bl	8006a4c <HAL_GetTick>
 800c79c:	4602      	mov	r2, r0
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	2b03      	cmp	r3, #3
 800c7a4:	d901      	bls.n	800c7aa <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800c7a6:	2303      	movs	r3, #3
 800c7a8:	e1bd      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c7aa:	f7ff fc4c 	bl	800c046 <LL_RCC_LSI2_IsReady>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d0f1      	beq.n	800c798 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff fc56 	bl	800c06a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c7be:	f7ff fbfd 	bl	800bfbc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7c2:	f7fa f943 	bl	8006a4c <HAL_GetTick>
 800c7c6:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c7c8:	e008      	b.n	800c7dc <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c7ca:	f7fa f93f 	bl	8006a4c <HAL_GetTick>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d901      	bls.n	800c7dc <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	e1a4      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c7dc:	f7ff fbff 	bl	800bfde <LL_RCC_LSI1_IsReady>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1f1      	bne.n	800c7ca <HAL_RCC_OscConfig+0x34e>
 800c7e6:	e050      	b.n	800c88a <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c7e8:	f7ff fbd7 	bl	800bf9a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7ec:	f7fa f92e 	bl	8006a4c <HAL_GetTick>
 800c7f0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c7f2:	e00b      	b.n	800c80c <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c7f4:	f7fa f92a 	bl	8006a4c <HAL_GetTick>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	1ad3      	subs	r3, r2, r3
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	d904      	bls.n	800c80c <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800c802:	2303      	movs	r3, #3
 800c804:	e18f      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
 800c806:	bf00      	nop
 800c808:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c80c:	f7ff fbe7 	bl	800bfde <LL_RCC_LSI1_IsReady>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d0ee      	beq.n	800c7f4 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c816:	f7ff fc05 	bl	800c024 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c81a:	e008      	b.n	800c82e <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c81c:	f7fa f916 	bl	8006a4c <HAL_GetTick>
 800c820:	4602      	mov	r2, r0
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	1ad3      	subs	r3, r2, r3
 800c826:	2b03      	cmp	r3, #3
 800c828:	d901      	bls.n	800c82e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800c82a:	2303      	movs	r3, #3
 800c82c:	e17b      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c82e:	f7ff fc0a 	bl	800c046 <LL_RCC_LSI2_IsReady>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d1f1      	bne.n	800c81c <HAL_RCC_OscConfig+0x3a0>
 800c838:	e027      	b.n	800c88a <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c83a:	f7ff fbf3 	bl	800c024 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c83e:	f7fa f905 	bl	8006a4c <HAL_GetTick>
 800c842:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c844:	e008      	b.n	800c858 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c846:	f7fa f901 	bl	8006a4c <HAL_GetTick>
 800c84a:	4602      	mov	r2, r0
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	2b03      	cmp	r3, #3
 800c852:	d901      	bls.n	800c858 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800c854:	2303      	movs	r3, #3
 800c856:	e166      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c858:	f7ff fbf5 	bl	800c046 <LL_RCC_LSI2_IsReady>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1f1      	bne.n	800c846 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c862:	f7ff fbab 	bl	800bfbc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c866:	f7fa f8f1 	bl	8006a4c <HAL_GetTick>
 800c86a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c86c:	e008      	b.n	800c880 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c86e:	f7fa f8ed 	bl	8006a4c <HAL_GetTick>
 800c872:	4602      	mov	r2, r0
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d901      	bls.n	800c880 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800c87c:	2303      	movs	r3, #3
 800c87e:	e152      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c880:	f7ff fbad 	bl	800bfde <LL_RCC_LSI1_IsReady>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1f1      	bne.n	800c86e <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f003 0304 	and.w	r3, r3, #4
 800c892:	2b00      	cmp	r3, #0
 800c894:	d05b      	beq.n	800c94e <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c896:	4ba6      	ldr	r3, [pc, #664]	; (800cb30 <HAL_RCC_OscConfig+0x6b4>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d114      	bne.n	800c8cc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c8a2:	f7ff fa1d 	bl	800bce0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c8a6:	f7fa f8d1 	bl	8006a4c <HAL_GetTick>
 800c8aa:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c8ac:	e008      	b.n	800c8c0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8ae:	f7fa f8cd 	bl	8006a4c <HAL_GetTick>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d901      	bls.n	800c8c0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	e132      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c8c0:	4b9b      	ldr	r3, [pc, #620]	; (800cb30 <HAL_RCC_OscConfig+0x6b4>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d0f0      	beq.n	800c8ae <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d102      	bne.n	800c8da <HAL_RCC_OscConfig+0x45e>
 800c8d4:	f7ff fb0b 	bl	800beee <LL_RCC_LSE_Enable>
 800c8d8:	e00c      	b.n	800c8f4 <HAL_RCC_OscConfig+0x478>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	2b05      	cmp	r3, #5
 800c8e0:	d104      	bne.n	800c8ec <HAL_RCC_OscConfig+0x470>
 800c8e2:	f7ff fb26 	bl	800bf32 <LL_RCC_LSE_EnableBypass>
 800c8e6:	f7ff fb02 	bl	800beee <LL_RCC_LSE_Enable>
 800c8ea:	e003      	b.n	800c8f4 <HAL_RCC_OscConfig+0x478>
 800c8ec:	f7ff fb10 	bl	800bf10 <LL_RCC_LSE_Disable>
 800c8f0:	f7ff fb30 	bl	800bf54 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d014      	beq.n	800c926 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8fc:	f7fa f8a6 	bl	8006a4c <HAL_GetTick>
 800c900:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c902:	e00a      	b.n	800c91a <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c904:	f7fa f8a2 	bl	8006a4c <HAL_GetTick>
 800c908:	4602      	mov	r2, r0
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c912:	4293      	cmp	r3, r2
 800c914:	d901      	bls.n	800c91a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800c916:	2303      	movs	r3, #3
 800c918:	e105      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c91a:	f7ff fb2c 	bl	800bf76 <LL_RCC_LSE_IsReady>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d0ef      	beq.n	800c904 <HAL_RCC_OscConfig+0x488>
 800c924:	e013      	b.n	800c94e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c926:	f7fa f891 	bl	8006a4c <HAL_GetTick>
 800c92a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c92c:	e00a      	b.n	800c944 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c92e:	f7fa f88d 	bl	8006a4c <HAL_GetTick>
 800c932:	4602      	mov	r2, r0
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	f241 3288 	movw	r2, #5000	; 0x1388
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d901      	bls.n	800c944 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800c940:	2303      	movs	r3, #3
 800c942:	e0f0      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c944:	f7ff fb17 	bl	800bf76 <LL_RCC_LSE_IsReady>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1ef      	bne.n	800c92e <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c956:	2b00      	cmp	r3, #0
 800c958:	d02c      	beq.n	800c9b4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d014      	beq.n	800c98c <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c962:	f7ff fa90 	bl	800be86 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c966:	f7fa f871 	bl	8006a4c <HAL_GetTick>
 800c96a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c96c:	e008      	b.n	800c980 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c96e:	f7fa f86d 	bl	8006a4c <HAL_GetTick>
 800c972:	4602      	mov	r2, r0
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d901      	bls.n	800c980 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800c97c:	2303      	movs	r3, #3
 800c97e:	e0d2      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c980:	f7ff faa3 	bl	800beca <LL_RCC_HSI48_IsReady>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d0f1      	beq.n	800c96e <HAL_RCC_OscConfig+0x4f2>
 800c98a:	e013      	b.n	800c9b4 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c98c:	f7ff fa8c 	bl	800bea8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c990:	f7fa f85c 	bl	8006a4c <HAL_GetTick>
 800c994:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c996:	e008      	b.n	800c9aa <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c998:	f7fa f858 	bl	8006a4c <HAL_GetTick>
 800c99c:	4602      	mov	r2, r0
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d901      	bls.n	800c9aa <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	e0bd      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c9aa:	f7ff fa8e 	bl	800beca <LL_RCC_HSI48_IsReady>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1f1      	bne.n	800c998 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 80b3 	beq.w	800cb24 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c9be:	f7ff fbec 	bl	800c19a <LL_RCC_GetSysClkSource>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b0c      	cmp	r3, #12
 800c9c6:	d076      	beq.n	800cab6 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d14b      	bne.n	800ca68 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9d0:	f7ff fca6 	bl	800c320 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9d4:	f7fa f83a 	bl	8006a4c <HAL_GetTick>
 800c9d8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800c9da:	e008      	b.n	800c9ee <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9dc:	f7fa f836 	bl	8006a4c <HAL_GetTick>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	1ad3      	subs	r3, r2, r3
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d901      	bls.n	800c9ee <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	e09b      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800c9ee:	f7ff fca6 	bl	800c33e <LL_RCC_PLL_IsReady>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1f1      	bne.n	800c9dc <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c9f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9fc:	68da      	ldr	r2, [r3, #12]
 800c9fe:	4b4d      	ldr	r3, [pc, #308]	; (800cb34 <HAL_RCC_OscConfig+0x6b8>)
 800ca00:	4013      	ands	r3, r2
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ca0a:	4311      	orrs	r1, r2
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ca10:	0212      	lsls	r2, r2, #8
 800ca12:	4311      	orrs	r1, r2
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ca18:	4311      	orrs	r1, r2
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ca1e:	4311      	orrs	r1, r2
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ca24:	430a      	orrs	r2, r1
 800ca26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca2e:	f7ff fc68 	bl	800c302 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ca32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ca3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca40:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca42:	f7fa f803 	bl	8006a4c <HAL_GetTick>
 800ca46:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800ca48:	e008      	b.n	800ca5c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca4a:	f7f9 ffff 	bl	8006a4c <HAL_GetTick>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	1ad3      	subs	r3, r2, r3
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d901      	bls.n	800ca5c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	e064      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800ca5c:	f7ff fc6f 	bl	800c33e <LL_RCC_PLL_IsReady>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d0f1      	beq.n	800ca4a <HAL_RCC_OscConfig+0x5ce>
 800ca66:	e05d      	b.n	800cb24 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca68:	f7ff fc5a 	bl	800c320 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800ca6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ca76:	f023 0303 	bic.w	r3, r3, #3
 800ca7a:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800ca7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ca86:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800ca8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca8e:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca90:	f7f9 ffdc 	bl	8006a4c <HAL_GetTick>
 800ca94:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800ca96:	e008      	b.n	800caaa <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca98:	f7f9 ffd8 	bl	8006a4c <HAL_GetTick>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	69fb      	ldr	r3, [r7, #28]
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d901      	bls.n	800caaa <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800caa6:	2303      	movs	r3, #3
 800caa8:	e03d      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800caaa:	f7ff fc48 	bl	800c33e <LL_RCC_PLL_IsReady>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1f1      	bne.n	800ca98 <HAL_RCC_OscConfig+0x61c>
 800cab4:	e036      	b.n	800cb24 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d101      	bne.n	800cac2 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e031      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800cac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	f003 0203 	and.w	r2, r3, #3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d123      	bne.n	800cb20 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d11c      	bne.n	800cb20 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	0a1b      	lsrs	r3, r3, #8
 800caea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d114      	bne.n	800cb20 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d10d      	bne.n	800cb20 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d106      	bne.n	800cb20 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d001      	beq.n	800cb24 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e000      	b.n	800cb26 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	372c      	adds	r7, #44	; 0x2c
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd90      	pop	{r4, r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	58000400 	.word	0x58000400
 800cb34:	11c1808c 	.word	0x11c1808c

0800cb38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d101      	bne.n	800cb4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e12a      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cb4c:	4b97      	ldr	r3, [pc, #604]	; (800cdac <HAL_RCC_ClockConfig+0x274>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 0307 	and.w	r3, r3, #7
 800cb54:	683a      	ldr	r2, [r7, #0]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d91b      	bls.n	800cb92 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb5a:	4b94      	ldr	r3, [pc, #592]	; (800cdac <HAL_RCC_ClockConfig+0x274>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f023 0207 	bic.w	r2, r3, #7
 800cb62:	4992      	ldr	r1, [pc, #584]	; (800cdac <HAL_RCC_ClockConfig+0x274>)
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb6a:	f7f9 ff6f 	bl	8006a4c <HAL_GetTick>
 800cb6e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb70:	e008      	b.n	800cb84 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cb72:	f7f9 ff6b 	bl	8006a4c <HAL_GetTick>
 800cb76:	4602      	mov	r2, r0
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	d901      	bls.n	800cb84 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800cb80:	2303      	movs	r3, #3
 800cb82:	e10e      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb84:	4b89      	ldr	r3, [pc, #548]	; (800cdac <HAL_RCC_ClockConfig+0x274>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 0307 	and.w	r3, r3, #7
 800cb8c:	683a      	ldr	r2, [r7, #0]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d1ef      	bne.n	800cb72 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f003 0302 	and.w	r3, r3, #2
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d016      	beq.n	800cbcc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7ff fb05 	bl	800c1b2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cba8:	f7f9 ff50 	bl	8006a4c <HAL_GetTick>
 800cbac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800cbae:	e008      	b.n	800cbc2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cbb0:	f7f9 ff4c 	bl	8006a4c <HAL_GetTick>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d901      	bls.n	800cbc2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800cbbe:	2303      	movs	r3, #3
 800cbc0:	e0ef      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800cbc2:	f7ff fbff 	bl	800c3c4 <LL_RCC_IsActiveFlag_HPRE>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d0f1      	beq.n	800cbb0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f003 0320 	and.w	r3, r3, #32
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d016      	beq.n	800cc06 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7ff fafc 	bl	800c1da <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cbe2:	f7f9 ff33 	bl	8006a4c <HAL_GetTick>
 800cbe6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800cbe8:	e008      	b.n	800cbfc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cbea:	f7f9 ff2f 	bl	8006a4c <HAL_GetTick>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	1ad3      	subs	r3, r2, r3
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d901      	bls.n	800cbfc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	e0d2      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800cbfc:	f7ff fbf4 	bl	800c3e8 <LL_RCC_IsActiveFlag_C2HPRE>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d0f1      	beq.n	800cbea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d016      	beq.n	800cc40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	699b      	ldr	r3, [r3, #24]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff faf5 	bl	800c206 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cc1c:	f7f9 ff16 	bl	8006a4c <HAL_GetTick>
 800cc20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800cc22:	e008      	b.n	800cc36 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cc24:	f7f9 ff12 	bl	8006a4c <HAL_GetTick>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d901      	bls.n	800cc36 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800cc32:	2303      	movs	r3, #3
 800cc34:	e0b5      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800cc36:	f7ff fbea 	bl	800c40e <LL_RCC_IsActiveFlag_SHDHPRE>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d0f1      	beq.n	800cc24 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f003 0304 	and.w	r3, r3, #4
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d016      	beq.n	800cc7a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7ff faef 	bl	800c234 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cc56:	f7f9 fef9 	bl	8006a4c <HAL_GetTick>
 800cc5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cc5c:	e008      	b.n	800cc70 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cc5e:	f7f9 fef5 	bl	8006a4c <HAL_GetTick>
 800cc62:	4602      	mov	r2, r0
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d901      	bls.n	800cc70 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	e098      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cc70:	f7ff fbe0 	bl	800c434 <LL_RCC_IsActiveFlag_PPRE1>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d0f1      	beq.n	800cc5e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f003 0308 	and.w	r3, r3, #8
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d017      	beq.n	800ccb6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	00db      	lsls	r3, r3, #3
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7ff fae5 	bl	800c25c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cc92:	f7f9 fedb 	bl	8006a4c <HAL_GetTick>
 800cc96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cc98:	e008      	b.n	800ccac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cc9a:	f7f9 fed7 	bl	8006a4c <HAL_GetTick>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	d901      	bls.n	800ccac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e07a      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ccac:	f7ff fbd4 	bl	800c458 <LL_RCC_IsActiveFlag_PPRE2>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d0f1      	beq.n	800cc9a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f003 0301 	and.w	r3, r3, #1
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d043      	beq.n	800cd4a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	d106      	bne.n	800ccd8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800ccca:	f7ff f885 	bl	800bdd8 <LL_RCC_HSE_IsReady>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d11e      	bne.n	800cd12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e064      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	2b03      	cmp	r3, #3
 800ccde:	d106      	bne.n	800ccee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800cce0:	f7ff fb2d 	bl	800c33e <LL_RCC_PLL_IsReady>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d113      	bne.n	800cd12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ccea:	2301      	movs	r3, #1
 800ccec:	e059      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d106      	bne.n	800cd04 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800ccf6:	f7ff f9ed 	bl	800c0d4 <LL_RCC_MSI_IsReady>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d108      	bne.n	800cd12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cd00:	2301      	movs	r3, #1
 800cd02:	e04e      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800cd04:	f7ff f898 	bl	800be38 <LL_RCC_HSI_IsReady>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e047      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7ff fa2b 	bl	800c172 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd1c:	f7f9 fe96 	bl	8006a4c <HAL_GetTick>
 800cd20:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd22:	e00a      	b.n	800cd3a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd24:	f7f9 fe92 	bl	8006a4c <HAL_GetTick>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d901      	bls.n	800cd3a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800cd36:	2303      	movs	r3, #3
 800cd38:	e033      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd3a:	f7ff fa2e 	bl	800c19a <LL_RCC_GetSysClkSource>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d1ec      	bne.n	800cd24 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cd4a:	4b18      	ldr	r3, [pc, #96]	; (800cdac <HAL_RCC_ClockConfig+0x274>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f003 0307 	and.w	r3, r3, #7
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d21b      	bcs.n	800cd90 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd58:	4b14      	ldr	r3, [pc, #80]	; (800cdac <HAL_RCC_ClockConfig+0x274>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f023 0207 	bic.w	r2, r3, #7
 800cd60:	4912      	ldr	r1, [pc, #72]	; (800cdac <HAL_RCC_ClockConfig+0x274>)
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	4313      	orrs	r3, r2
 800cd66:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd68:	f7f9 fe70 	bl	8006a4c <HAL_GetTick>
 800cd6c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd6e:	e008      	b.n	800cd82 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cd70:	f7f9 fe6c 	bl	8006a4c <HAL_GetTick>
 800cd74:	4602      	mov	r2, r0
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	2b02      	cmp	r3, #2
 800cd7c:	d901      	bls.n	800cd82 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800cd7e:	2303      	movs	r3, #3
 800cd80:	e00f      	b.n	800cda2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd82:	4b0a      	ldr	r3, [pc, #40]	; (800cdac <HAL_RCC_ClockConfig+0x274>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f003 0307 	and.w	r3, r3, #7
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d1ef      	bne.n	800cd70 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800cd90:	f7f8 ffbe 	bl	8005d10 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800cd94:	f7f9 fe66 	bl	8006a64 <HAL_GetTickPrio>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7f8 fc9e 	bl	80056dc <HAL_InitTick>
 800cda0:	4603      	mov	r3, r0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	58004000 	.word	0x58004000

0800cdb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cdb0:	b590      	push	{r4, r7, lr}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cdb6:	f7ff f9f0 	bl	800c19a <LL_RCC_GetSysClkSource>
 800cdba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10a      	bne.n	800cdd8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cdc2:	f7ff f9ac 	bl	800c11e <LL_RCC_MSI_GetRange>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	091b      	lsrs	r3, r3, #4
 800cdca:	f003 030f 	and.w	r3, r3, #15
 800cdce:	4a2a      	ldr	r2, [pc, #168]	; (800ce78 <HAL_RCC_GetSysClockFreq+0xc8>)
 800cdd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdd4:	60fb      	str	r3, [r7, #12]
 800cdd6:	e04a      	b.n	800ce6e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b04      	cmp	r3, #4
 800cddc:	d102      	bne.n	800cde4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cdde:	4b27      	ldr	r3, [pc, #156]	; (800ce7c <HAL_RCC_GetSysClockFreq+0xcc>)
 800cde0:	60fb      	str	r3, [r7, #12]
 800cde2:	e044      	b.n	800ce6e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b08      	cmp	r3, #8
 800cde8:	d10a      	bne.n	800ce00 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cdea:	f7fe ffa7 	bl	800bd3c <LL_RCC_HSE_IsEnabledDiv2>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d102      	bne.n	800cdfa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800cdf4:	4b21      	ldr	r3, [pc, #132]	; (800ce7c <HAL_RCC_GetSysClockFreq+0xcc>)
 800cdf6:	60fb      	str	r3, [r7, #12]
 800cdf8:	e039      	b.n	800ce6e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800cdfa:	4b21      	ldr	r3, [pc, #132]	; (800ce80 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cdfc:	60fb      	str	r3, [r7, #12]
 800cdfe:	e036      	b.n	800ce6e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800ce00:	f7ff fad4 	bl	800c3ac <LL_RCC_PLL_GetMainSource>
 800ce04:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d002      	beq.n	800ce12 <HAL_RCC_GetSysClockFreq+0x62>
 800ce0c:	2b03      	cmp	r3, #3
 800ce0e:	d003      	beq.n	800ce18 <HAL_RCC_GetSysClockFreq+0x68>
 800ce10:	e00d      	b.n	800ce2e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800ce12:	4b1a      	ldr	r3, [pc, #104]	; (800ce7c <HAL_RCC_GetSysClockFreq+0xcc>)
 800ce14:	60bb      	str	r3, [r7, #8]
        break;
 800ce16:	e015      	b.n	800ce44 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ce18:	f7fe ff90 	bl	800bd3c <LL_RCC_HSE_IsEnabledDiv2>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d102      	bne.n	800ce28 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800ce22:	4b16      	ldr	r3, [pc, #88]	; (800ce7c <HAL_RCC_GetSysClockFreq+0xcc>)
 800ce24:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800ce26:	e00d      	b.n	800ce44 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800ce28:	4b15      	ldr	r3, [pc, #84]	; (800ce80 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ce2a:	60bb      	str	r3, [r7, #8]
        break;
 800ce2c:	e00a      	b.n	800ce44 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ce2e:	f7ff f976 	bl	800c11e <LL_RCC_MSI_GetRange>
 800ce32:	4603      	mov	r3, r0
 800ce34:	091b      	lsrs	r3, r3, #4
 800ce36:	f003 030f 	and.w	r3, r3, #15
 800ce3a:	4a0f      	ldr	r2, [pc, #60]	; (800ce78 <HAL_RCC_GetSysClockFreq+0xc8>)
 800ce3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce40:	60bb      	str	r3, [r7, #8]
        break;
 800ce42:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800ce44:	f7ff fa8d 	bl	800c362 <LL_RCC_PLL_GetN>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	fb03 f402 	mul.w	r4, r3, r2
 800ce50:	f7ff faa0 	bl	800c394 <LL_RCC_PLL_GetDivider>
 800ce54:	4603      	mov	r3, r0
 800ce56:	091b      	lsrs	r3, r3, #4
 800ce58:	3301      	adds	r3, #1
 800ce5a:	fbb4 f4f3 	udiv	r4, r4, r3
 800ce5e:	f7ff fa8d 	bl	800c37c <LL_RCC_PLL_GetR>
 800ce62:	4603      	mov	r3, r0
 800ce64:	0f5b      	lsrs	r3, r3, #29
 800ce66:	3301      	adds	r3, #1
 800ce68:	fbb4 f3f3 	udiv	r3, r4, r3
 800ce6c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd90      	pop	{r4, r7, pc}
 800ce78:	0801c0e8 	.word	0x0801c0e8
 800ce7c:	00f42400 	.word	0x00f42400
 800ce80:	01e84800 	.word	0x01e84800

0800ce84 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ce84:	b598      	push	{r3, r4, r7, lr}
 800ce86:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ce88:	f7ff ff92 	bl	800cdb0 <HAL_RCC_GetSysClockFreq>
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	f7ff f9f9 	bl	800c284 <LL_RCC_GetAHBPrescaler>
 800ce92:	4603      	mov	r3, r0
 800ce94:	091b      	lsrs	r3, r3, #4
 800ce96:	f003 030f 	and.w	r3, r3, #15
 800ce9a:	4a03      	ldr	r2, [pc, #12]	; (800cea8 <HAL_RCC_GetHCLKFreq+0x24>)
 800ce9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cea0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	bd98      	pop	{r3, r4, r7, pc}
 800cea8:	0801c088 	.word	0x0801c088

0800ceac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ceac:	b598      	push	{r3, r4, r7, lr}
 800ceae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ceb0:	f7ff ffe8 	bl	800ce84 <HAL_RCC_GetHCLKFreq>
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	f7ff fa18 	bl	800c2ea <LL_RCC_GetAPB2Prescaler>
 800ceba:	4603      	mov	r3, r0
 800cebc:	0adb      	lsrs	r3, r3, #11
 800cebe:	f003 0307 	and.w	r3, r3, #7
 800cec2:	4a04      	ldr	r2, [pc, #16]	; (800ced4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cec8:	f003 031f 	and.w	r3, r3, #31
 800cecc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	bd98      	pop	{r3, r4, r7, pc}
 800ced4:	0801c0c8 	.word	0x0801c0c8

0800ced8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	226f      	movs	r2, #111	; 0x6f
 800cee6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800cee8:	f7ff f957 	bl	800c19a <LL_RCC_GetSysClkSource>
 800ceec:	4602      	mov	r2, r0
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800cef2:	f7ff f9c7 	bl	800c284 <LL_RCC_GetAHBPrescaler>
 800cef6:	4602      	mov	r2, r0
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800cefc:	f7ff f9e9 	bl	800c2d2 <LL_RCC_GetAPB1Prescaler>
 800cf00:	4602      	mov	r2, r0
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800cf06:	f7ff f9f0 	bl	800c2ea <LL_RCC_GetAPB2Prescaler>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800cf10:	f7ff f9c4 	bl	800c29c <LL_C2_RCC_GetAHBPrescaler>
 800cf14:	4602      	mov	r2, r0
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800cf1a:	f7ff f9cc 	bl	800c2b6 <LL_RCC_GetAHB4Prescaler>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800cf24:	4b04      	ldr	r3, [pc, #16]	; (800cf38 <HAL_RCC_GetClockConfig+0x60>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f003 0207 	and.w	r2, r3, #7
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	601a      	str	r2, [r3, #0]
}
 800cf30:	bf00      	nop
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	58004000 	.word	0x58004000

0800cf3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800cf3c:	b590      	push	{r4, r7, lr}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2bb0      	cmp	r3, #176	; 0xb0
 800cf48:	d903      	bls.n	800cf52 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800cf4a:	4b15      	ldr	r3, [pc, #84]	; (800cfa0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800cf4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4e:	60fb      	str	r3, [r7, #12]
 800cf50:	e007      	b.n	800cf62 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	091b      	lsrs	r3, r3, #4
 800cf56:	f003 030f 	and.w	r3, r3, #15
 800cf5a:	4a11      	ldr	r2, [pc, #68]	; (800cfa0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800cf5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf60:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800cf62:	f7ff f9a8 	bl	800c2b6 <LL_RCC_GetAHB4Prescaler>
 800cf66:	4603      	mov	r3, r0
 800cf68:	091b      	lsrs	r3, r3, #4
 800cf6a:	f003 030f 	and.w	r3, r3, #15
 800cf6e:	4a0d      	ldr	r2, [pc, #52]	; (800cfa4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800cf70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf7a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	4a0a      	ldr	r2, [pc, #40]	; (800cfa8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800cf80:	fba2 2303 	umull	r2, r3, r2, r3
 800cf84:	0c9c      	lsrs	r4, r3, #18
 800cf86:	f7fe febb 	bl	800bd00 <HAL_PWREx_GetVoltageRange>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f000 f80c 	bl	800cfac <RCC_SetFlashLatency>
 800cf94:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3714      	adds	r7, #20
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd90      	pop	{r4, r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	0801c0e8 	.word	0x0801c0e8
 800cfa4:	0801c088 	.word	0x0801c088
 800cfa8:	431bde83 	.word	0x431bde83

0800cfac <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800cfac:	b590      	push	{r4, r7, lr}
 800cfae:	b093      	sub	sp, #76	; 0x4c
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800cfb6:	4b39      	ldr	r3, [pc, #228]	; (800d09c <RCC_SetFlashLatency+0xf0>)
 800cfb8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cfbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cfbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800cfc2:	4a37      	ldr	r2, [pc, #220]	; (800d0a0 <RCC_SetFlashLatency+0xf4>)
 800cfc4:	f107 031c 	add.w	r3, r7, #28
 800cfc8:	ca07      	ldmia	r2, {r0, r1, r2}
 800cfca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800cfce:	4b35      	ldr	r3, [pc, #212]	; (800d0a4 <RCC_SetFlashLatency+0xf8>)
 800cfd0:	f107 040c 	add.w	r4, r7, #12
 800cfd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cfd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800cfda:	2300      	movs	r3, #0
 800cfdc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfe4:	d11c      	bne.n	800d020 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	643b      	str	r3, [r7, #64]	; 0x40
 800cfea:	e015      	b.n	800d018 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800cfec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cff4:	4413      	add	r3, r2
 800cff6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d808      	bhi.n	800d012 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d008:	4413      	add	r3, r2
 800d00a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d00e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800d010:	e022      	b.n	800d058 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d014:	3301      	adds	r3, #1
 800d016:	643b      	str	r3, [r7, #64]	; 0x40
 800d018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d01a:	2b03      	cmp	r3, #3
 800d01c:	d9e6      	bls.n	800cfec <RCC_SetFlashLatency+0x40>
 800d01e:	e01b      	b.n	800d058 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d020:	2300      	movs	r3, #0
 800d022:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d024:	e015      	b.n	800d052 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800d026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d02e:	4413      	add	r3, r2
 800d030:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	429a      	cmp	r2, r3
 800d038:	d808      	bhi.n	800d04c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d042:	4413      	add	r3, r2
 800d044:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d048:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800d04a:	e005      	b.n	800d058 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d04e:	3301      	adds	r3, #1
 800d050:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d054:	2b02      	cmp	r3, #2
 800d056:	d9e6      	bls.n	800d026 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800d058:	4b13      	ldr	r3, [pc, #76]	; (800d0a8 <RCC_SetFlashLatency+0xfc>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f023 0207 	bic.w	r2, r3, #7
 800d060:	4911      	ldr	r1, [pc, #68]	; (800d0a8 <RCC_SetFlashLatency+0xfc>)
 800d062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d064:	4313      	orrs	r3, r2
 800d066:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d068:	f7f9 fcf0 	bl	8006a4c <HAL_GetTick>
 800d06c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d06e:	e008      	b.n	800d082 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d070:	f7f9 fcec 	bl	8006a4c <HAL_GetTick>
 800d074:	4602      	mov	r2, r0
 800d076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	d901      	bls.n	800d082 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800d07e:	2303      	movs	r3, #3
 800d080:	e007      	b.n	800d092 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d082:	4b09      	ldr	r3, [pc, #36]	; (800d0a8 <RCC_SetFlashLatency+0xfc>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f003 0307 	and.w	r3, r3, #7
 800d08a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d1ef      	bne.n	800d070 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	374c      	adds	r7, #76	; 0x4c
 800d096:	46bd      	mov	sp, r7
 800d098:	bd90      	pop	{r4, r7, pc}
 800d09a:	bf00      	nop
 800d09c:	0801b9ec 	.word	0x0801b9ec
 800d0a0:	0801b9fc 	.word	0x0801b9fc
 800d0a4:	0801ba08 	.word	0x0801ba08
 800d0a8:	58004000 	.word	0x58004000

0800d0ac <LL_RCC_LSE_IsEnabled>:
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800d0b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0b8:	f003 0301 	and.w	r3, r3, #1
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d101      	bne.n	800d0c4 <LL_RCC_LSE_IsEnabled+0x18>
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e000      	b.n	800d0c6 <LL_RCC_LSE_IsEnabled+0x1a>
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <LL_RCC_LSE_IsReady>:
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d0d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0dc:	f003 0302 	and.w	r3, r3, #2
 800d0e0:	2b02      	cmp	r3, #2
 800d0e2:	d101      	bne.n	800d0e8 <LL_RCC_LSE_IsReady+0x18>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e000      	b.n	800d0ea <LL_RCC_LSE_IsReady+0x1a>
 800d0e8:	2300      	movs	r3, #0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <LL_RCC_SetRFWKPClockSource>:
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800d0fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d104:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	4313      	orrs	r3, r2
 800d110:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800d114:	bf00      	nop
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <LL_RCC_SetSMPSClockSource>:
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800d128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12e:	f023 0203 	bic.w	r2, r3, #3
 800d132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	4313      	orrs	r3, r2
 800d13a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d13c:	bf00      	nop
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <LL_RCC_SetSMPSPrescaler>:
{
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800d150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d156:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d15a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	4313      	orrs	r3, r2
 800d162:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d164:	bf00      	nop
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <LL_RCC_SetUSARTClockSource>:
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800d178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d180:	f023 0203 	bic.w	r2, r3, #3
 800d184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4313      	orrs	r3, r2
 800d18c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d190:	bf00      	nop
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <LL_RCC_SetLPUARTClockSource>:
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800d1a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d1b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d1bc:	bf00      	nop
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <LL_RCC_SetI2CClockSource>:
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d1d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	091b      	lsrs	r3, r3, #4
 800d1dc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d1e0:	43db      	mvns	r3, r3
 800d1e2:	401a      	ands	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	011b      	lsls	r3, r3, #4
 800d1e8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d1ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d1f6:	bf00      	nop
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <LL_RCC_SetLPTIMClockSource>:
{
 800d202:	b480      	push	{r7}
 800d204:	b083      	sub	sp, #12
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d20a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d20e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	0c1b      	lsrs	r3, r3, #16
 800d216:	041b      	lsls	r3, r3, #16
 800d218:	43db      	mvns	r3, r3
 800d21a:	401a      	ands	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	041b      	lsls	r3, r3, #16
 800d220:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d224:	4313      	orrs	r3, r2
 800d226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d22a:	bf00      	nop
 800d22c:	370c      	adds	r7, #12
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr

0800d236 <LL_RCC_SetSAIClockSource>:
{
 800d236:	b480      	push	{r7}
 800d238:	b083      	sub	sp, #12
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d23e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d24a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4313      	orrs	r3, r2
 800d252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d256:	bf00      	nop
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr

0800d262 <LL_RCC_SetRNGClockSource>:
{
 800d262:	b480      	push	{r7}
 800d264:	b083      	sub	sp, #12
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d26a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d272:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d282:	bf00      	nop
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <LL_RCC_SetCLK48ClockSource>:
{
 800d28e:	b480      	push	{r7}
 800d290:	b083      	sub	sp, #12
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d29e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d2a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d2ae:	bf00      	nop
 800d2b0:	370c      	adds	r7, #12
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr

0800d2ba <LL_RCC_SetUSBClockSource>:
{
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b082      	sub	sp, #8
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7ff ffe3 	bl	800d28e <LL_RCC_SetCLK48ClockSource>
}
 800d2c8:	bf00      	nop
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <LL_RCC_SetADCClockSource>:
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d2d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d2e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d2f0:	bf00      	nop
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <LL_RCC_SetRTCClockSource>:
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d30c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	4313      	orrs	r3, r2
 800d318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800d31c:	bf00      	nop
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <LL_RCC_GetRTCClockSource>:
{
 800d328:	b480      	push	{r7}
 800d32a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d32c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d334:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800d338:	4618      	mov	r0, r3
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <LL_RCC_ForceBackupDomainReset>:
{
 800d342:	b480      	push	{r7}
 800d344:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d34e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d35a:	bf00      	nop
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <LL_RCC_ReleaseBackupDomainReset>:
{
 800d364:	b480      	push	{r7}
 800d366:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d37c:	bf00      	nop
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr

0800d386 <LL_RCC_PLLSAI1_Enable>:
{
 800d386:	b480      	push	{r7}
 800d388:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d38a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d394:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d398:	6013      	str	r3, [r2, #0]
}
 800d39a:	bf00      	nop
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <LL_RCC_PLLSAI1_Disable>:
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d3a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d3b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d3b6:	6013      	str	r3, [r2, #0]
}
 800d3b8:	bf00      	nop
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <LL_RCC_PLLSAI1_IsReady>:
{
 800d3c2:	b480      	push	{r7}
 800d3c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d3c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d3d4:	d101      	bne.n	800d3da <LL_RCC_PLLSAI1_IsReady+0x18>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e000      	b.n	800d3dc <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr

0800d3e6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b088      	sub	sp, #32
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d033      	beq.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d40a:	d00c      	beq.n	800d426 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800d40c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d410:	d802      	bhi.n	800d418 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800d412:	2b00      	cmp	r3, #0
 800d414:	d010      	beq.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800d416:	e017      	b.n	800d448 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800d418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d41c:	d017      	beq.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x68>
 800d41e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d422:	d016      	beq.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800d424:	e010      	b.n	800d448 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d434:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d436:	e00d      	b.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	3304      	adds	r3, #4
 800d43c:	4618      	mov	r0, r3
 800d43e:	f000 f947 	bl	800d6d0 <RCCEx_PLLSAI1_ConfigNP>
 800d442:	4603      	mov	r3, r0
 800d444:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d446:	e005      	b.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	77fb      	strb	r3, [r7, #31]
        break;
 800d44c:	e002      	b.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800d44e:	bf00      	nop
 800d450:	e000      	b.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800d452:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d454:	7ffb      	ldrb	r3, [r7, #31]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d105      	bne.n	800d466 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d45e:	4618      	mov	r0, r3
 800d460:	f7ff fee9 	bl	800d236 <LL_RCC_SetSAIClockSource>
 800d464:	e001      	b.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d466:	7ffb      	ldrb	r3, [r7, #31]
 800d468:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d472:	2b00      	cmp	r3, #0
 800d474:	d046      	beq.n	800d504 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d476:	f7ff ff57 	bl	800d328 <LL_RCC_GetRTCClockSource>
 800d47a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d480:	69ba      	ldr	r2, [r7, #24]
 800d482:	429a      	cmp	r2, r3
 800d484:	d03c      	beq.n	800d500 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d486:	f7fe fc2b 	bl	800bce0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d105      	bne.n	800d49c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d494:	4618      	mov	r0, r3
 800d496:	f7ff ff31 	bl	800d2fc <LL_RCC_SetRTCClockSource>
 800d49a:	e02e      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d49c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4a4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d4a6:	f7ff ff4c 	bl	800d342 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d4aa:	f7ff ff5b 	bl	800d364 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d4bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d4c6:	f7ff fdf1 	bl	800d0ac <LL_RCC_LSE_IsEnabled>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d114      	bne.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d4d0:	f7f9 fabc 	bl	8006a4c <HAL_GetTick>
 800d4d4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d4d6:	e00b      	b.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4d8:	f7f9 fab8 	bl	8006a4c <HAL_GetTick>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d902      	bls.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800d4ea:	2303      	movs	r3, #3
 800d4ec:	77fb      	strb	r3, [r7, #31]
              break;
 800d4ee:	e004      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d4f0:	f7ff fdee 	bl	800d0d0 <LL_RCC_LSE_IsReady>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d1ee      	bne.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d4fa:	7ffb      	ldrb	r3, [r7, #31]
 800d4fc:	77bb      	strb	r3, [r7, #30]
 800d4fe:	e001      	b.n	800d504 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d500:	7ffb      	ldrb	r3, [r7, #31]
 800d502:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f003 0301 	and.w	r3, r3, #1
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d004      	beq.n	800d51a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	699b      	ldr	r3, [r3, #24]
 800d514:	4618      	mov	r0, r3
 800d516:	f7ff fe2b 	bl	800d170 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f003 0302 	and.w	r3, r3, #2
 800d522:	2b00      	cmp	r3, #0
 800d524:	d004      	beq.n	800d530 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	69db      	ldr	r3, [r3, #28]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7ff fe36 	bl	800d19c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f003 0310 	and.w	r3, r3, #16
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d004      	beq.n	800d546 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fe5e 	bl	800d202 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f003 0320 	and.w	r3, r3, #32
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d004      	beq.n	800d55c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d556:	4618      	mov	r0, r3
 800d558:	f7ff fe53 	bl	800d202 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f003 0304 	and.w	r3, r3, #4
 800d564:	2b00      	cmp	r3, #0
 800d566:	d004      	beq.n	800d572 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6a1b      	ldr	r3, [r3, #32]
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7ff fe2b 	bl	800d1c8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f003 0308 	and.w	r3, r3, #8
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d004      	beq.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d582:	4618      	mov	r0, r3
 800d584:	f7ff fe20 	bl	800d1c8 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d590:	2b00      	cmp	r3, #0
 800d592:	d022      	beq.n	800d5da <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff fe8e 	bl	800d2ba <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d5a6:	d107      	bne.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d5a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d5b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d5b6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d5c0:	d10b      	bne.n	800d5da <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f000 f8dd 	bl	800d786 <RCCEx_PLLSAI1_ConfigNQ>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d5d0:	7ffb      	ldrb	r3, [r7, #31]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d001      	beq.n	800d5da <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800d5d6:	7ffb      	ldrb	r3, [r7, #31]
 800d5d8:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d02b      	beq.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5ee:	d008      	beq.n	800d602 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5f8:	d003      	beq.n	800d602 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d105      	bne.n	800d60e <HAL_RCCEx_PeriphCLKConfig+0x228>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d606:	4618      	mov	r0, r3
 800d608:	f7ff fe2b 	bl	800d262 <LL_RCC_SetRNGClockSource>
 800d60c:	e00a      	b.n	800d624 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d616:	60fb      	str	r3, [r7, #12]
 800d618:	2000      	movs	r0, #0
 800d61a:	f7ff fe22 	bl	800d262 <LL_RCC_SetRNGClockSource>
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f7ff fe35 	bl	800d28e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d628:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800d62c:	d107      	bne.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d62e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d63c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d646:	2b00      	cmp	r3, #0
 800d648:	d022      	beq.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d64e:	4618      	mov	r0, r3
 800d650:	f7ff fe3e 	bl	800d2d0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d65c:	d107      	bne.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d65e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d66c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d676:	d10b      	bne.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	3304      	adds	r3, #4
 800d67c:	4618      	mov	r0, r3
 800d67e:	f000 f8dd 	bl	800d83c <RCCEx_PLLSAI1_ConfigNR>
 800d682:	4603      	mov	r3, r0
 800d684:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d686:	7ffb      	ldrb	r3, [r7, #31]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d001      	beq.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 800d68c:	7ffb      	ldrb	r3, [r7, #31]
 800d68e:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d004      	beq.n	800d6a6 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7ff fd27 	bl	800d0f4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d009      	beq.n	800d6c6 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7ff fd46 	bl	800d148 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7ff fd2d 	bl	800d120 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800d6c6:	7fbb      	ldrb	r3, [r7, #30]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3720      	adds	r7, #32
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d6dc:	f7ff fe62 	bl	800d3a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d6e0:	f7f9 f9b4 	bl	8006a4c <HAL_GetTick>
 800d6e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d6e6:	e009      	b.n	800d6fc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d6e8:	f7f9 f9b0 	bl	8006a4c <HAL_GetTick>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	2b02      	cmp	r3, #2
 800d6f4:	d902      	bls.n	800d6fc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	73fb      	strb	r3, [r7, #15]
      break;
 800d6fa:	e004      	b.n	800d706 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d6fc:	f7ff fe61 	bl	800d3c2 <LL_RCC_PLLSAI1_IsReady>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1f0      	bne.n	800d6e8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d706:	7bfb      	ldrb	r3, [r7, #15]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d137      	bne.n	800d77c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d70c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d710:	691b      	ldr	r3, [r3, #16]
 800d712:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	021b      	lsls	r3, r3, #8
 800d71c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d720:	4313      	orrs	r3, r2
 800d722:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d736:	4313      	orrs	r3, r2
 800d738:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d73a:	f7ff fe24 	bl	800d386 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d73e:	f7f9 f985 	bl	8006a4c <HAL_GetTick>
 800d742:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d744:	e009      	b.n	800d75a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d746:	f7f9 f981 	bl	8006a4c <HAL_GetTick>
 800d74a:	4602      	mov	r2, r0
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	1ad3      	subs	r3, r2, r3
 800d750:	2b02      	cmp	r3, #2
 800d752:	d902      	bls.n	800d75a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d754:	2303      	movs	r3, #3
 800d756:	73fb      	strb	r3, [r7, #15]
        break;
 800d758:	e004      	b.n	800d764 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d75a:	f7ff fe32 	bl	800d3c2 <LL_RCC_PLLSAI1_IsReady>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b01      	cmp	r3, #1
 800d762:	d1f0      	bne.n	800d746 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d764:	7bfb      	ldrb	r3, [r7, #15]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d108      	bne.n	800d77c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d76a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d76e:	691a      	ldr	r2, [r3, #16]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	691b      	ldr	r3, [r3, #16]
 800d774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d778:	4313      	orrs	r3, r2
 800d77a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b084      	sub	sp, #16
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d78e:	2300      	movs	r3, #0
 800d790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d792:	f7ff fe07 	bl	800d3a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d796:	f7f9 f959 	bl	8006a4c <HAL_GetTick>
 800d79a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d79c:	e009      	b.n	800d7b2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d79e:	f7f9 f955 	bl	8006a4c <HAL_GetTick>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	2b02      	cmp	r3, #2
 800d7aa:	d902      	bls.n	800d7b2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d7ac:	2303      	movs	r3, #3
 800d7ae:	73fb      	strb	r3, [r7, #15]
      break;
 800d7b0:	e004      	b.n	800d7bc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d7b2:	f7ff fe06 	bl	800d3c2 <LL_RCC_PLLSAI1_IsReady>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1f0      	bne.n	800d79e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d7bc:	7bfb      	ldrb	r3, [r7, #15]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d137      	bne.n	800d832 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d7c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	021b      	lsls	r3, r3, #8
 800d7d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d7da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d7f0:	f7ff fdc9 	bl	800d386 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7f4:	f7f9 f92a 	bl	8006a4c <HAL_GetTick>
 800d7f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d7fa:	e009      	b.n	800d810 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d7fc:	f7f9 f926 	bl	8006a4c <HAL_GetTick>
 800d800:	4602      	mov	r2, r0
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	1ad3      	subs	r3, r2, r3
 800d806:	2b02      	cmp	r3, #2
 800d808:	d902      	bls.n	800d810 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d80a:	2303      	movs	r3, #3
 800d80c:	73fb      	strb	r3, [r7, #15]
        break;
 800d80e:	e004      	b.n	800d81a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d810:	f7ff fdd7 	bl	800d3c2 <LL_RCC_PLLSAI1_IsReady>
 800d814:	4603      	mov	r3, r0
 800d816:	2b01      	cmp	r3, #1
 800d818:	d1f0      	bne.n	800d7fc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d81a:	7bfb      	ldrb	r3, [r7, #15]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d108      	bne.n	800d832 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d824:	691a      	ldr	r2, [r3, #16]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d82e:	4313      	orrs	r3, r2
 800d830:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d832:	7bfb      	ldrb	r3, [r7, #15]
}
 800d834:	4618      	mov	r0, r3
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d844:	2300      	movs	r3, #0
 800d846:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d848:	f7ff fdac 	bl	800d3a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d84c:	f7f9 f8fe 	bl	8006a4c <HAL_GetTick>
 800d850:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d852:	e009      	b.n	800d868 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d854:	f7f9 f8fa 	bl	8006a4c <HAL_GetTick>
 800d858:	4602      	mov	r2, r0
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	1ad3      	subs	r3, r2, r3
 800d85e:	2b02      	cmp	r3, #2
 800d860:	d902      	bls.n	800d868 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d862:	2303      	movs	r3, #3
 800d864:	73fb      	strb	r3, [r7, #15]
      break;
 800d866:	e004      	b.n	800d872 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d868:	f7ff fdab 	bl	800d3c2 <LL_RCC_PLLSAI1_IsReady>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1f0      	bne.n	800d854 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d872:	7bfb      	ldrb	r3, [r7, #15]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d137      	bne.n	800d8e8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d87c:	691b      	ldr	r3, [r3, #16]
 800d87e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	021b      	lsls	r3, r3, #8
 800d888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d88c:	4313      	orrs	r3, r2
 800d88e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d894:	691b      	ldr	r3, [r3, #16]
 800d896:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d8a6:	f7ff fd6e 	bl	800d386 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8aa:	f7f9 f8cf 	bl	8006a4c <HAL_GetTick>
 800d8ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d8b0:	e009      	b.n	800d8c6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d8b2:	f7f9 f8cb 	bl	8006a4c <HAL_GetTick>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	1ad3      	subs	r3, r2, r3
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d902      	bls.n	800d8c6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d8c0:	2303      	movs	r3, #3
 800d8c2:	73fb      	strb	r3, [r7, #15]
        break;
 800d8c4:	e004      	b.n	800d8d0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d8c6:	f7ff fd7c 	bl	800d3c2 <LL_RCC_PLLSAI1_IsReady>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d1f0      	bne.n	800d8b2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d108      	bne.n	800d8e8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d8d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d8da:	691a      	ldr	r2, [r3, #16]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	691b      	ldr	r3, [r3, #16]
 800d8e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b082      	sub	sp, #8
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d101      	bne.n	800d904 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	e090      	b.n	800da26 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d106      	bne.n	800d91e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7f7 fcb1 	bl	8005280 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2202      	movs	r2, #2
 800d922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	22ca      	movs	r2, #202	; 0xca
 800d92c:	625a      	str	r2, [r3, #36]	; 0x24
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2253      	movs	r2, #83	; 0x53
 800d934:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 faba 	bl	800deb0 <RTC_EnterInitMode>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d009      	beq.n	800d956 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	22ff      	movs	r2, #255	; 0xff
 800d948:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2204      	movs	r2, #4
 800d94e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800d952:	2301      	movs	r3, #1
 800d954:	e067      	b.n	800da26 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	6812      	ldr	r2, [r2, #0]
 800d960:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d968:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	6899      	ldr	r1, [r3, #8]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	685a      	ldr	r2, [r3, #4]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	691b      	ldr	r3, [r3, #16]
 800d978:	431a      	orrs	r2, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	699b      	ldr	r3, [r3, #24]
 800d97e:	431a      	orrs	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	430a      	orrs	r2, r1
 800d986:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	68d2      	ldr	r2, [r2, #12]
 800d990:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	6919      	ldr	r1, [r3, #16]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	041a      	lsls	r2, r3, #16
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	430a      	orrs	r2, r1
 800d9a4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	68da      	ldr	r2, [r3, #12]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d9b4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f022 0203 	bic.w	r2, r2, #3
 800d9c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	69da      	ldr	r2, [r3, #28]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	695b      	ldr	r3, [r3, #20]
 800d9d4:	431a      	orrs	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	430a      	orrs	r2, r1
 800d9dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	689b      	ldr	r3, [r3, #8]
 800d9e4:	f003 0320 	and.w	r3, r3, #32
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d113      	bne.n	800da14 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 fa39 	bl	800de64 <HAL_RTC_WaitForSynchro>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d00d      	beq.n	800da14 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	22ff      	movs	r2, #255	; 0xff
 800d9fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2204      	movs	r2, #4
 800da04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800da10:	2301      	movs	r3, #1
 800da12:	e008      	b.n	800da26 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	22ff      	movs	r2, #255	; 0xff
 800da1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2201      	movs	r2, #1
 800da20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800da24:	2300      	movs	r3, #0
  }
}
 800da26:	4618      	mov	r0, r3
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800da2e:	b590      	push	{r4, r7, lr}
 800da30:	b087      	sub	sp, #28
 800da32:	af00      	add	r7, sp, #0
 800da34:	60f8      	str	r0, [r7, #12]
 800da36:	60b9      	str	r1, [r7, #8]
 800da38:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d101      	bne.n	800da48 <HAL_RTC_SetTime+0x1a>
 800da44:	2302      	movs	r3, #2
 800da46:	e0b2      	b.n	800dbae <HAL_RTC_SetTime+0x180>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2202      	movs	r2, #2
 800da54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d126      	bne.n	800daac <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d102      	bne.n	800da72 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	2200      	movs	r2, #0
 800da70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	4618      	mov	r0, r3
 800da78:	f000 fa44 	bl	800df04 <RTC_ByteToBcd2>
 800da7c:	4603      	mov	r3, r0
 800da7e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	785b      	ldrb	r3, [r3, #1]
 800da84:	4618      	mov	r0, r3
 800da86:	f000 fa3d 	bl	800df04 <RTC_ByteToBcd2>
 800da8a:	4603      	mov	r3, r0
 800da8c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800da8e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	789b      	ldrb	r3, [r3, #2]
 800da94:	4618      	mov	r0, r3
 800da96:	f000 fa35 	bl	800df04 <RTC_ByteToBcd2>
 800da9a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800da9c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	78db      	ldrb	r3, [r3, #3]
 800daa4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800daa6:	4313      	orrs	r3, r2
 800daa8:	617b      	str	r3, [r7, #20]
 800daaa:	e018      	b.n	800dade <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d102      	bne.n	800dac0 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	2200      	movs	r2, #0
 800dabe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	785b      	ldrb	r3, [r3, #1]
 800daca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800dacc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800dad2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	78db      	ldrb	r3, [r3, #3]
 800dad8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800dada:	4313      	orrs	r3, r2
 800dadc:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	22ca      	movs	r2, #202	; 0xca
 800dae4:	625a      	str	r2, [r3, #36]	; 0x24
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2253      	movs	r2, #83	; 0x53
 800daec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	f000 f9de 	bl	800deb0 <RTC_EnterInitMode>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00d      	beq.n	800db16 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	22ff      	movs	r2, #255	; 0xff
 800db00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2204      	movs	r2, #4
 800db06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2200      	movs	r2, #0
 800db0e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	e04b      	b.n	800dbae <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800db20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800db24:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	689a      	ldr	r2, [r3, #8]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800db34:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	6899      	ldr	r1, [r3, #8]
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	68da      	ldr	r2, [r3, #12]
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	691b      	ldr	r3, [r3, #16]
 800db44:	431a      	orrs	r2, r3
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	430a      	orrs	r2, r1
 800db4c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	68da      	ldr	r2, [r3, #12]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800db5c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	f003 0320 	and.w	r3, r3, #32
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d113      	bne.n	800db94 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800db6c:	68f8      	ldr	r0, [r7, #12]
 800db6e:	f000 f979 	bl	800de64 <HAL_RTC_WaitForSynchro>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00d      	beq.n	800db94 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	22ff      	movs	r2, #255	; 0xff
 800db7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2204      	movs	r2, #4
 800db84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800db90:	2301      	movs	r3, #1
 800db92:	e00c      	b.n	800dbae <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	22ff      	movs	r2, #255	; 0xff
 800db9a:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2201      	movs	r2, #1
 800dba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800dbac:	2300      	movs	r3, #0
  }
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	371c      	adds	r7, #28
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd90      	pop	{r4, r7, pc}

0800dbb6 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b086      	sub	sp, #24
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	60f8      	str	r0, [r7, #12]
 800dbbe:	60b9      	str	r1, [r7, #8]
 800dbc0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	691b      	ldr	r3, [r3, #16]
 800dbd2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800dbe4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800dbe8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	0c1b      	lsrs	r3, r3, #16
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	0a1b      	lsrs	r3, r3, #8
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc04:	b2da      	uxtb	r2, r3
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc12:	b2da      	uxtb	r2, r3
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	0c1b      	lsrs	r3, r3, #16
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc22:	b2da      	uxtb	r2, r3
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d11a      	bne.n	800dc64 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 f986 	bl	800df44 <RTC_Bcd2ToByte>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	785b      	ldrb	r3, [r3, #1]
 800dc44:	4618      	mov	r0, r3
 800dc46:	f000 f97d 	bl	800df44 <RTC_Bcd2ToByte>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	789b      	ldrb	r3, [r3, #2]
 800dc56:	4618      	mov	r0, r3
 800dc58:	f000 f974 	bl	800df44 <RTC_Bcd2ToByte>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	461a      	mov	r2, r3
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dc6e:	b590      	push	{r4, r7, lr}
 800dc70:	b087      	sub	sp, #28
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	60f8      	str	r0, [r7, #12]
 800dc76:	60b9      	str	r1, [r7, #8]
 800dc78:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d101      	bne.n	800dc88 <HAL_RTC_SetDate+0x1a>
 800dc84:	2302      	movs	r3, #2
 800dc86:	e09c      	b.n	800ddc2 <HAL_RTC_SetDate+0x154>
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2202      	movs	r2, #2
 800dc94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d10e      	bne.n	800dcbc <HAL_RTC_SetDate+0x4e>
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	785b      	ldrb	r3, [r3, #1]
 800dca2:	f003 0310 	and.w	r3, r3, #16
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d008      	beq.n	800dcbc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	785b      	ldrb	r3, [r3, #1]
 800dcae:	f023 0310 	bic.w	r3, r3, #16
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	330a      	adds	r3, #10
 800dcb6:	b2da      	uxtb	r2, r3
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d11c      	bne.n	800dcfc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	78db      	ldrb	r3, [r3, #3]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f000 f91c 	bl	800df04 <RTC_ByteToBcd2>
 800dccc:	4603      	mov	r3, r0
 800dcce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	785b      	ldrb	r3, [r3, #1]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f000 f915 	bl	800df04 <RTC_ByteToBcd2>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dcde:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	789b      	ldrb	r3, [r3, #2]
 800dce4:	4618      	mov	r0, r3
 800dce6:	f000 f90d 	bl	800df04 <RTC_ByteToBcd2>
 800dcea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800dcec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	617b      	str	r3, [r7, #20]
 800dcfa:	e00e      	b.n	800dd1a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	78db      	ldrb	r3, [r3, #3]
 800dd00:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	785b      	ldrb	r3, [r3, #1]
 800dd06:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dd08:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800dd0e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dd16:	4313      	orrs	r3, r2
 800dd18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	22ca      	movs	r2, #202	; 0xca
 800dd20:	625a      	str	r2, [r3, #36]	; 0x24
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2253      	movs	r2, #83	; 0x53
 800dd28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800dd2a:	68f8      	ldr	r0, [r7, #12]
 800dd2c:	f000 f8c0 	bl	800deb0 <RTC_EnterInitMode>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00d      	beq.n	800dd52 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	22ff      	movs	r2, #255	; 0xff
 800dd3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2204      	movs	r2, #4
 800dd42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e037      	b.n	800ddc2 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dd5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dd60:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68da      	ldr	r2, [r3, #12]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd70:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	f003 0320 	and.w	r3, r3, #32
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d113      	bne.n	800dda8 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd80:	68f8      	ldr	r0, [r7, #12]
 800dd82:	f000 f86f 	bl	800de64 <HAL_RTC_WaitForSynchro>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00d      	beq.n	800dda8 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	22ff      	movs	r2, #255	; 0xff
 800dd92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2204      	movs	r2, #4
 800dd98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800dda4:	2301      	movs	r3, #1
 800dda6:	e00c      	b.n	800ddc2 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	22ff      	movs	r2, #255	; 0xff
 800ddae:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800ddc0:	2300      	movs	r3, #0
  }
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	371c      	adds	r7, #28
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd90      	pop	{r4, r7, pc}

0800ddca <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b086      	sub	sp, #24
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	60f8      	str	r0, [r7, #12]
 800ddd2:	60b9      	str	r1, [r7, #8]
 800ddd4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dde0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dde4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	0c1b      	lsrs	r3, r3, #16
 800ddea:	b2da      	uxtb	r2, r3
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	0a1b      	lsrs	r3, r3, #8
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	f003 031f 	and.w	r3, r3, #31
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	b2db      	uxtb	r3, r3
 800de04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	0b5b      	lsrs	r3, r3, #13
 800de12:	b2db      	uxtb	r3, r3
 800de14:	f003 0307 	and.w	r3, r3, #7
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d11a      	bne.n	800de5a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	78db      	ldrb	r3, [r3, #3]
 800de28:	4618      	mov	r0, r3
 800de2a:	f000 f88b 	bl	800df44 <RTC_Bcd2ToByte>
 800de2e:	4603      	mov	r3, r0
 800de30:	461a      	mov	r2, r3
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	785b      	ldrb	r3, [r3, #1]
 800de3a:	4618      	mov	r0, r3
 800de3c:	f000 f882 	bl	800df44 <RTC_Bcd2ToByte>
 800de40:	4603      	mov	r3, r0
 800de42:	461a      	mov	r2, r3
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	789b      	ldrb	r3, [r3, #2]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f000 f879 	bl	800df44 <RTC_Bcd2ToByte>
 800de52:	4603      	mov	r3, r0
 800de54:	461a      	mov	r2, r3
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800de5a:	2300      	movs	r3, #0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3718      	adds	r7, #24
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	68da      	ldr	r2, [r3, #12]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800de7a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800de7c:	f7f8 fde6 	bl	8006a4c <HAL_GetTick>
 800de80:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800de82:	e009      	b.n	800de98 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800de84:	f7f8 fde2 	bl	8006a4c <HAL_GetTick>
 800de88:	4602      	mov	r2, r0
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	1ad3      	subs	r3, r2, r3
 800de8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de92:	d901      	bls.n	800de98 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800de94:	2303      	movs	r3, #3
 800de96:	e007      	b.n	800dea8 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	f003 0320 	and.w	r3, r3, #32
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d0ee      	beq.n	800de84 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d119      	bne.n	800defa <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f04f 32ff 	mov.w	r2, #4294967295
 800dece:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ded0:	f7f8 fdbc 	bl	8006a4c <HAL_GetTick>
 800ded4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ded6:	e009      	b.n	800deec <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800ded8:	f7f8 fdb8 	bl	8006a4c <HAL_GetTick>
 800dedc:	4602      	mov	r2, r0
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dee6:	d901      	bls.n	800deec <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800dee8:	2303      	movs	r3, #3
 800deea:	e007      	b.n	800defc <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800def6:	2b00      	cmp	r3, #0
 800def8:	d0ee      	beq.n	800ded8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800defa:	2300      	movs	r3, #0
}
 800defc:	4618      	mov	r0, r3
 800defe:	3710      	adds	r7, #16
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800df04:	b480      	push	{r7}
 800df06:	b085      	sub	sp, #20
 800df08:	af00      	add	r7, sp, #0
 800df0a:	4603      	mov	r3, r0
 800df0c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800df0e:	2300      	movs	r3, #0
 800df10:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800df12:	79fb      	ldrb	r3, [r7, #7]
 800df14:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800df16:	e005      	b.n	800df24 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	3301      	adds	r3, #1
 800df1c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800df1e:	7afb      	ldrb	r3, [r7, #11]
 800df20:	3b0a      	subs	r3, #10
 800df22:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800df24:	7afb      	ldrb	r3, [r7, #11]
 800df26:	2b09      	cmp	r3, #9
 800df28:	d8f6      	bhi.n	800df18 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	011b      	lsls	r3, r3, #4
 800df30:	b2da      	uxtb	r2, r3
 800df32:	7afb      	ldrb	r3, [r7, #11]
 800df34:	4313      	orrs	r3, r2
 800df36:	b2db      	uxtb	r3, r3
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3714      	adds	r7, #20
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr

0800df44 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	4603      	mov	r3, r0
 800df4c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800df4e:	79fb      	ldrb	r3, [r7, #7]
 800df50:	091b      	lsrs	r3, r3, #4
 800df52:	b2db      	uxtb	r3, r3
 800df54:	461a      	mov	r2, r3
 800df56:	4613      	mov	r3, r2
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	4413      	add	r3, r2
 800df5c:	005b      	lsls	r3, r3, #1
 800df5e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	b2da      	uxtb	r2, r3
 800df64:	79fb      	ldrb	r3, [r7, #7]
 800df66:	f003 030f 	and.w	r3, r3, #15
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	4413      	add	r3, r2
 800df6e:	b2db      	uxtb	r3, r3
}
 800df70:	4618      	mov	r0, r3
 800df72:	3714      	adds	r7, #20
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b087      	sub	sp, #28
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	3350      	adds	r3, #80	; 0x50
 800df8e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	009b      	lsls	r3, r3, #2
 800df94:	697a      	ldr	r2, [r7, #20]
 800df96:	4413      	add	r3, r2
 800df98:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	601a      	str	r2, [r3, #0]
}
 800dfa0:	bf00      	nop
 800dfa2:	371c      	adds	r7, #28
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d101      	bne.n	800dfbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e01d      	b.n	800dffa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d106      	bne.n	800dfd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7f8 f846 	bl	8006064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2202      	movs	r2, #2
 800dfdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	3304      	adds	r3, #4
 800dfe8:	4619      	mov	r1, r3
 800dfea:	4610      	mov	r0, r2
 800dfec:	f000 fd2c 	bl	800ea48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2201      	movs	r2, #1
 800dff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dff8:	2300      	movs	r3, #0
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
	...

0800e004 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2202      	movs	r2, #2
 800e010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	689a      	ldr	r2, [r3, #8]
 800e01a:	4b0e      	ldr	r3, [pc, #56]	; (800e054 <HAL_TIM_Base_Start+0x50>)
 800e01c:	4013      	ands	r3, r2
 800e01e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2b06      	cmp	r3, #6
 800e024:	d00b      	beq.n	800e03e <HAL_TIM_Base_Start+0x3a>
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e02c:	d007      	beq.n	800e03e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f042 0201 	orr.w	r2, r2, #1
 800e03c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2201      	movs	r2, #1
 800e042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e046:	2300      	movs	r3, #0
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3714      	adds	r7, #20
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	00010007 	.word	0x00010007

0800e058 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2202      	movs	r2, #2
 800e064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	6a1a      	ldr	r2, [r3, #32]
 800e06e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e072:	4013      	ands	r3, r2
 800e074:	2b00      	cmp	r3, #0
 800e076:	d10f      	bne.n	800e098 <HAL_TIM_Base_Stop+0x40>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	6a1a      	ldr	r2, [r3, #32]
 800e07e:	f240 4344 	movw	r3, #1092	; 0x444
 800e082:	4013      	ands	r3, r2
 800e084:	2b00      	cmp	r3, #0
 800e086:	d107      	bne.n	800e098 <HAL_TIM_Base_Stop+0x40>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f022 0201 	bic.w	r2, r2, #1
 800e096:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	370c      	adds	r7, #12
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr
	...

0800e0b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	68da      	ldr	r2, [r3, #12]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f042 0201 	orr.w	r2, r2, #1
 800e0c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	689a      	ldr	r2, [r3, #8]
 800e0ce:	4b0c      	ldr	r3, [pc, #48]	; (800e100 <HAL_TIM_Base_Start_IT+0x50>)
 800e0d0:	4013      	ands	r3, r2
 800e0d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2b06      	cmp	r3, #6
 800e0d8:	d00b      	beq.n	800e0f2 <HAL_TIM_Base_Start_IT+0x42>
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0e0:	d007      	beq.n	800e0f2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f042 0201 	orr.w	r2, r2, #1
 800e0f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3714      	adds	r7, #20
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr
 800e100:	00010007 	.word	0x00010007

0800e104 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d101      	bne.n	800e116 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e01d      	b.n	800e152 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d106      	bne.n	800e130 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 f815 	bl	800e15a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2202      	movs	r2, #2
 800e134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	3304      	adds	r3, #4
 800e140:	4619      	mov	r1, r3
 800e142:	4610      	mov	r0, r2
 800e144:	f000 fc80 	bl	800ea48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2201      	movs	r2, #1
 800e14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3708      	adds	r7, #8
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800e15a:	b480      	push	{r7}
 800e15c:	b083      	sub	sp, #12
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800e162:	bf00      	nop
 800e164:	370c      	adds	r7, #12
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr

0800e16e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b082      	sub	sp, #8
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d101      	bne.n	800e180 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	e01d      	b.n	800e1bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e186:	b2db      	uxtb	r3, r3
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d106      	bne.n	800e19a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2200      	movs	r2, #0
 800e190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 f815 	bl	800e1c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2202      	movs	r2, #2
 800e19e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	3304      	adds	r3, #4
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	4610      	mov	r0, r2
 800e1ae:	f000 fc4b 	bl	800ea48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3708      	adds	r7, #8
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e1cc:	bf00      	nop
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	6839      	ldr	r1, [r7, #0]
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f000 ffaa 	bl	800f144 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a19      	ldr	r2, [pc, #100]	; (800e25c <HAL_TIM_PWM_Start+0x84>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d009      	beq.n	800e20e <HAL_TIM_PWM_Start+0x36>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a18      	ldr	r2, [pc, #96]	; (800e260 <HAL_TIM_PWM_Start+0x88>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d004      	beq.n	800e20e <HAL_TIM_PWM_Start+0x36>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a16      	ldr	r2, [pc, #88]	; (800e264 <HAL_TIM_PWM_Start+0x8c>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d101      	bne.n	800e212 <HAL_TIM_PWM_Start+0x3a>
 800e20e:	2301      	movs	r3, #1
 800e210:	e000      	b.n	800e214 <HAL_TIM_PWM_Start+0x3c>
 800e212:	2300      	movs	r3, #0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d007      	beq.n	800e228 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e226:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	689a      	ldr	r2, [r3, #8]
 800e22e:	4b0e      	ldr	r3, [pc, #56]	; (800e268 <HAL_TIM_PWM_Start+0x90>)
 800e230:	4013      	ands	r3, r2
 800e232:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2b06      	cmp	r3, #6
 800e238:	d00b      	beq.n	800e252 <HAL_TIM_PWM_Start+0x7a>
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e240:	d007      	beq.n	800e252 <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f042 0201 	orr.w	r2, r2, #1
 800e250:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e252:	2300      	movs	r3, #0
}
 800e254:	4618      	mov	r0, r3
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	40012c00 	.word	0x40012c00
 800e260:	40014400 	.word	0x40014400
 800e264:	40014800 	.word	0x40014800
 800e268:	00010007 	.word	0x00010007

0800e26c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2200      	movs	r2, #0
 800e27c:	6839      	ldr	r1, [r7, #0]
 800e27e:	4618      	mov	r0, r3
 800e280:	f000 ff60 	bl	800f144 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4a25      	ldr	r2, [pc, #148]	; (800e320 <HAL_TIM_PWM_Stop+0xb4>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d009      	beq.n	800e2a2 <HAL_TIM_PWM_Stop+0x36>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4a24      	ldr	r2, [pc, #144]	; (800e324 <HAL_TIM_PWM_Stop+0xb8>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d004      	beq.n	800e2a2 <HAL_TIM_PWM_Stop+0x36>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a22      	ldr	r2, [pc, #136]	; (800e328 <HAL_TIM_PWM_Stop+0xbc>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d101      	bne.n	800e2a6 <HAL_TIM_PWM_Stop+0x3a>
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	e000      	b.n	800e2a8 <HAL_TIM_PWM_Stop+0x3c>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d017      	beq.n	800e2dc <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	6a1a      	ldr	r2, [r3, #32]
 800e2b2:	f241 1311 	movw	r3, #4369	; 0x1111
 800e2b6:	4013      	ands	r3, r2
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d10f      	bne.n	800e2dc <HAL_TIM_PWM_Stop+0x70>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	6a1a      	ldr	r2, [r3, #32]
 800e2c2:	f240 4344 	movw	r3, #1092	; 0x444
 800e2c6:	4013      	ands	r3, r2
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d107      	bne.n	800e2dc <HAL_TIM_PWM_Stop+0x70>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e2da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	6a1a      	ldr	r2, [r3, #32]
 800e2e2:	f241 1311 	movw	r3, #4369	; 0x1111
 800e2e6:	4013      	ands	r3, r2
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d10f      	bne.n	800e30c <HAL_TIM_PWM_Stop+0xa0>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	6a1a      	ldr	r2, [r3, #32]
 800e2f2:	f240 4344 	movw	r3, #1092	; 0x444
 800e2f6:	4013      	ands	r3, r2
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d107      	bne.n	800e30c <HAL_TIM_PWM_Stop+0xa0>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f022 0201 	bic.w	r2, r2, #1
 800e30a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2201      	movs	r2, #1
 800e310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3708      	adds	r7, #8
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	40012c00 	.word	0x40012c00
 800e324:	40014400 	.word	0x40014400
 800e328:	40014800 	.word	0x40014800

0800e32c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	f003 0302 	and.w	r3, r3, #2
 800e33e:	2b02      	cmp	r3, #2
 800e340:	d122      	bne.n	800e388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	f003 0302 	and.w	r3, r3, #2
 800e34c:	2b02      	cmp	r3, #2
 800e34e:	d11b      	bne.n	800e388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f06f 0202 	mvn.w	r2, #2
 800e358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2201      	movs	r2, #1
 800e35e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	699b      	ldr	r3, [r3, #24]
 800e366:	f003 0303 	and.w	r3, r3, #3
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d003      	beq.n	800e376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fb55 	bl	800ea1e <HAL_TIM_IC_CaptureCallback>
 800e374:	e005      	b.n	800e382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 fb47 	bl	800ea0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7f3 fa85 	bl	800188c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	691b      	ldr	r3, [r3, #16]
 800e38e:	f003 0304 	and.w	r3, r3, #4
 800e392:	2b04      	cmp	r3, #4
 800e394:	d122      	bne.n	800e3dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	f003 0304 	and.w	r3, r3, #4
 800e3a0:	2b04      	cmp	r3, #4
 800e3a2:	d11b      	bne.n	800e3dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f06f 0204 	mvn.w	r2, #4
 800e3ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2202      	movs	r2, #2
 800e3b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	699b      	ldr	r3, [r3, #24]
 800e3ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d003      	beq.n	800e3ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 fb2b 	bl	800ea1e <HAL_TIM_IC_CaptureCallback>
 800e3c8:	e005      	b.n	800e3d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 fb1d 	bl	800ea0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f7f3 fa5b 	bl	800188c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	f003 0308 	and.w	r3, r3, #8
 800e3e6:	2b08      	cmp	r3, #8
 800e3e8:	d122      	bne.n	800e430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	f003 0308 	and.w	r3, r3, #8
 800e3f4:	2b08      	cmp	r3, #8
 800e3f6:	d11b      	bne.n	800e430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f06f 0208 	mvn.w	r2, #8
 800e400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2204      	movs	r2, #4
 800e406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	69db      	ldr	r3, [r3, #28]
 800e40e:	f003 0303 	and.w	r3, r3, #3
 800e412:	2b00      	cmp	r3, #0
 800e414:	d003      	beq.n	800e41e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 fb01 	bl	800ea1e <HAL_TIM_IC_CaptureCallback>
 800e41c:	e005      	b.n	800e42a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 faf3 	bl	800ea0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f7f3 fa31 	bl	800188c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	691b      	ldr	r3, [r3, #16]
 800e436:	f003 0310 	and.w	r3, r3, #16
 800e43a:	2b10      	cmp	r3, #16
 800e43c:	d122      	bne.n	800e484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	f003 0310 	and.w	r3, r3, #16
 800e448:	2b10      	cmp	r3, #16
 800e44a:	d11b      	bne.n	800e484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f06f 0210 	mvn.w	r2, #16
 800e454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2208      	movs	r2, #8
 800e45a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	69db      	ldr	r3, [r3, #28]
 800e462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e466:	2b00      	cmp	r3, #0
 800e468:	d003      	beq.n	800e472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 fad7 	bl	800ea1e <HAL_TIM_IC_CaptureCallback>
 800e470:	e005      	b.n	800e47e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 fac9 	bl	800ea0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f7f3 fa07 	bl	800188c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2200      	movs	r2, #0
 800e482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	691b      	ldr	r3, [r3, #16]
 800e48a:	f003 0301 	and.w	r3, r3, #1
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d10e      	bne.n	800e4b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	f003 0301 	and.w	r3, r3, #1
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d107      	bne.n	800e4b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f06f 0201 	mvn.w	r2, #1
 800e4a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7f6 f85e 	bl	800456c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	691b      	ldr	r3, [r3, #16]
 800e4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4ba:	2b80      	cmp	r3, #128	; 0x80
 800e4bc:	d10e      	bne.n	800e4dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4c8:	2b80      	cmp	r3, #128	; 0x80
 800e4ca:	d107      	bne.n	800e4dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e4d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 fec4 	bl	800f264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	691b      	ldr	r3, [r3, #16]
 800e4e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4ea:	d10e      	bne.n	800e50a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4f6:	2b80      	cmp	r3, #128	; 0x80
 800e4f8:	d107      	bne.n	800e50a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 feb7 	bl	800f278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	691b      	ldr	r3, [r3, #16]
 800e510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e514:	2b40      	cmp	r3, #64	; 0x40
 800e516:	d10e      	bne.n	800e536 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e522:	2b40      	cmp	r3, #64	; 0x40
 800e524:	d107      	bne.n	800e536 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e52e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 fa7e 	bl	800ea32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	691b      	ldr	r3, [r3, #16]
 800e53c:	f003 0320 	and.w	r3, r3, #32
 800e540:	2b20      	cmp	r3, #32
 800e542:	d10e      	bne.n	800e562 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	f003 0320 	and.w	r3, r3, #32
 800e54e:	2b20      	cmp	r3, #32
 800e550:	d107      	bne.n	800e562 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f06f 0220 	mvn.w	r2, #32
 800e55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 fe77 	bl	800f250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e562:	bf00      	nop
 800e564:	3708      	adds	r7, #8
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
	...

0800e56c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d101      	bne.n	800e586 <HAL_TIM_OC_ConfigChannel+0x1a>
 800e582:	2302      	movs	r3, #2
 800e584:	e06c      	b.n	800e660 <HAL_TIM_OC_ConfigChannel+0xf4>
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2201      	movs	r2, #1
 800e58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2202      	movs	r2, #2
 800e592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b14      	cmp	r3, #20
 800e59a:	d857      	bhi.n	800e64c <HAL_TIM_OC_ConfigChannel+0xe0>
 800e59c:	a201      	add	r2, pc, #4	; (adr r2, 800e5a4 <HAL_TIM_OC_ConfigChannel+0x38>)
 800e59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a2:	bf00      	nop
 800e5a4:	0800e5f9 	.word	0x0800e5f9
 800e5a8:	0800e64d 	.word	0x0800e64d
 800e5ac:	0800e64d 	.word	0x0800e64d
 800e5b0:	0800e64d 	.word	0x0800e64d
 800e5b4:	0800e607 	.word	0x0800e607
 800e5b8:	0800e64d 	.word	0x0800e64d
 800e5bc:	0800e64d 	.word	0x0800e64d
 800e5c0:	0800e64d 	.word	0x0800e64d
 800e5c4:	0800e615 	.word	0x0800e615
 800e5c8:	0800e64d 	.word	0x0800e64d
 800e5cc:	0800e64d 	.word	0x0800e64d
 800e5d0:	0800e64d 	.word	0x0800e64d
 800e5d4:	0800e623 	.word	0x0800e623
 800e5d8:	0800e64d 	.word	0x0800e64d
 800e5dc:	0800e64d 	.word	0x0800e64d
 800e5e0:	0800e64d 	.word	0x0800e64d
 800e5e4:	0800e631 	.word	0x0800e631
 800e5e8:	0800e64d 	.word	0x0800e64d
 800e5ec:	0800e64d 	.word	0x0800e64d
 800e5f0:	0800e64d 	.word	0x0800e64d
 800e5f4:	0800e63f 	.word	0x0800e63f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	68b9      	ldr	r1, [r7, #8]
 800e5fe:	4618      	mov	r0, r3
 800e600:	f000 fa86 	bl	800eb10 <TIM_OC1_SetConfig>
      break;
 800e604:	e023      	b.n	800e64e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	68b9      	ldr	r1, [r7, #8]
 800e60c:	4618      	mov	r0, r3
 800e60e:	f000 fafb 	bl	800ec08 <TIM_OC2_SetConfig>
      break;
 800e612:	e01c      	b.n	800e64e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	68b9      	ldr	r1, [r7, #8]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f000 fb6e 	bl	800ecfc <TIM_OC3_SetConfig>
      break;
 800e620:	e015      	b.n	800e64e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	68b9      	ldr	r1, [r7, #8]
 800e628:	4618      	mov	r0, r3
 800e62a:	f000 fbdf 	bl	800edec <TIM_OC4_SetConfig>
      break;
 800e62e:	e00e      	b.n	800e64e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	68b9      	ldr	r1, [r7, #8]
 800e636:	4618      	mov	r0, r3
 800e638:	f000 fc36 	bl	800eea8 <TIM_OC5_SetConfig>
      break;
 800e63c:	e007      	b.n	800e64e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	68b9      	ldr	r1, [r7, #8]
 800e644:	4618      	mov	r0, r3
 800e646:	f000 fc87 	bl	800ef58 <TIM_OC6_SetConfig>
      break;
 800e64a:	e000      	b.n	800e64e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 800e64c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2201      	movs	r2, #1
 800e652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2200      	movs	r2, #0
 800e65a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e65e:	2300      	movs	r3, #0
}
 800e660:	4618      	mov	r0, r3
 800e662:	3710      	adds	r7, #16
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d101      	bne.n	800e682 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e67e:	2302      	movs	r3, #2
 800e680:	e105      	b.n	800e88e <HAL_TIM_PWM_ConfigChannel+0x226>
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2201      	movs	r2, #1
 800e686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2202      	movs	r2, #2
 800e68e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2b14      	cmp	r3, #20
 800e696:	f200 80f0 	bhi.w	800e87a <HAL_TIM_PWM_ConfigChannel+0x212>
 800e69a:	a201      	add	r2, pc, #4	; (adr r2, 800e6a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a0:	0800e6f5 	.word	0x0800e6f5
 800e6a4:	0800e87b 	.word	0x0800e87b
 800e6a8:	0800e87b 	.word	0x0800e87b
 800e6ac:	0800e87b 	.word	0x0800e87b
 800e6b0:	0800e735 	.word	0x0800e735
 800e6b4:	0800e87b 	.word	0x0800e87b
 800e6b8:	0800e87b 	.word	0x0800e87b
 800e6bc:	0800e87b 	.word	0x0800e87b
 800e6c0:	0800e777 	.word	0x0800e777
 800e6c4:	0800e87b 	.word	0x0800e87b
 800e6c8:	0800e87b 	.word	0x0800e87b
 800e6cc:	0800e87b 	.word	0x0800e87b
 800e6d0:	0800e7b7 	.word	0x0800e7b7
 800e6d4:	0800e87b 	.word	0x0800e87b
 800e6d8:	0800e87b 	.word	0x0800e87b
 800e6dc:	0800e87b 	.word	0x0800e87b
 800e6e0:	0800e7f9 	.word	0x0800e7f9
 800e6e4:	0800e87b 	.word	0x0800e87b
 800e6e8:	0800e87b 	.word	0x0800e87b
 800e6ec:	0800e87b 	.word	0x0800e87b
 800e6f0:	0800e839 	.word	0x0800e839
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	68b9      	ldr	r1, [r7, #8]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f000 fa08 	bl	800eb10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	699a      	ldr	r2, [r3, #24]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f042 0208 	orr.w	r2, r2, #8
 800e70e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	699a      	ldr	r2, [r3, #24]
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f022 0204 	bic.w	r2, r2, #4
 800e71e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	6999      	ldr	r1, [r3, #24]
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	691a      	ldr	r2, [r3, #16]
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	430a      	orrs	r2, r1
 800e730:	619a      	str	r2, [r3, #24]
      break;
 800e732:	e0a3      	b.n	800e87c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	68b9      	ldr	r1, [r7, #8]
 800e73a:	4618      	mov	r0, r3
 800e73c:	f000 fa64 	bl	800ec08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	699a      	ldr	r2, [r3, #24]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e74e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	699a      	ldr	r2, [r3, #24]
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e75e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	6999      	ldr	r1, [r3, #24]
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	021a      	lsls	r2, r3, #8
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	430a      	orrs	r2, r1
 800e772:	619a      	str	r2, [r3, #24]
      break;
 800e774:	e082      	b.n	800e87c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	68b9      	ldr	r1, [r7, #8]
 800e77c:	4618      	mov	r0, r3
 800e77e:	f000 fabd 	bl	800ecfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	69da      	ldr	r2, [r3, #28]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f042 0208 	orr.w	r2, r2, #8
 800e790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	69da      	ldr	r2, [r3, #28]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f022 0204 	bic.w	r2, r2, #4
 800e7a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	69d9      	ldr	r1, [r3, #28]
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	691a      	ldr	r2, [r3, #16]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	430a      	orrs	r2, r1
 800e7b2:	61da      	str	r2, [r3, #28]
      break;
 800e7b4:	e062      	b.n	800e87c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	68b9      	ldr	r1, [r7, #8]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f000 fb15 	bl	800edec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	69da      	ldr	r2, [r3, #28]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	69da      	ldr	r2, [r3, #28]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	69d9      	ldr	r1, [r3, #28]
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	021a      	lsls	r2, r3, #8
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	430a      	orrs	r2, r1
 800e7f4:	61da      	str	r2, [r3, #28]
      break;
 800e7f6:	e041      	b.n	800e87c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	68b9      	ldr	r1, [r7, #8]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f000 fb52 	bl	800eea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f042 0208 	orr.w	r2, r2, #8
 800e812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f022 0204 	bic.w	r2, r2, #4
 800e822:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	691a      	ldr	r2, [r3, #16]
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	430a      	orrs	r2, r1
 800e834:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e836:	e021      	b.n	800e87c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68b9      	ldr	r1, [r7, #8]
 800e83e:	4618      	mov	r0, r3
 800e840:	f000 fb8a 	bl	800ef58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e852:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e862:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	691b      	ldr	r3, [r3, #16]
 800e86e:	021a      	lsls	r2, r3, #8
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	430a      	orrs	r2, r1
 800e876:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e878:	e000      	b.n	800e87c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800e87a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	2201      	movs	r2, #1
 800e880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2200      	movs	r2, #0
 800e888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop

0800e898 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d101      	bne.n	800e8b0 <HAL_TIM_ConfigClockSource+0x18>
 800e8ac:	2302      	movs	r3, #2
 800e8ae:	e0a8      	b.n	800ea02 <HAL_TIM_ConfigClockSource+0x16a>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2202      	movs	r2, #2
 800e8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	689b      	ldr	r3, [r3, #8]
 800e8c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800e8ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e8d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e8da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2b40      	cmp	r3, #64	; 0x40
 800e8ea:	d067      	beq.n	800e9bc <HAL_TIM_ConfigClockSource+0x124>
 800e8ec:	2b40      	cmp	r3, #64	; 0x40
 800e8ee:	d80b      	bhi.n	800e908 <HAL_TIM_ConfigClockSource+0x70>
 800e8f0:	2b10      	cmp	r3, #16
 800e8f2:	d073      	beq.n	800e9dc <HAL_TIM_ConfigClockSource+0x144>
 800e8f4:	2b10      	cmp	r3, #16
 800e8f6:	d802      	bhi.n	800e8fe <HAL_TIM_ConfigClockSource+0x66>
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d06f      	beq.n	800e9dc <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e8fc:	e078      	b.n	800e9f0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e8fe:	2b20      	cmp	r3, #32
 800e900:	d06c      	beq.n	800e9dc <HAL_TIM_ConfigClockSource+0x144>
 800e902:	2b30      	cmp	r3, #48	; 0x30
 800e904:	d06a      	beq.n	800e9dc <HAL_TIM_ConfigClockSource+0x144>
      break;
 800e906:	e073      	b.n	800e9f0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e908:	2b70      	cmp	r3, #112	; 0x70
 800e90a:	d00d      	beq.n	800e928 <HAL_TIM_ConfigClockSource+0x90>
 800e90c:	2b70      	cmp	r3, #112	; 0x70
 800e90e:	d804      	bhi.n	800e91a <HAL_TIM_ConfigClockSource+0x82>
 800e910:	2b50      	cmp	r3, #80	; 0x50
 800e912:	d033      	beq.n	800e97c <HAL_TIM_ConfigClockSource+0xe4>
 800e914:	2b60      	cmp	r3, #96	; 0x60
 800e916:	d041      	beq.n	800e99c <HAL_TIM_ConfigClockSource+0x104>
      break;
 800e918:	e06a      	b.n	800e9f0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e91a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e91e:	d066      	beq.n	800e9ee <HAL_TIM_ConfigClockSource+0x156>
 800e920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e924:	d017      	beq.n	800e956 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800e926:	e063      	b.n	800e9f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6818      	ldr	r0, [r3, #0]
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	6899      	ldr	r1, [r3, #8]
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	685a      	ldr	r2, [r3, #4]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	f000 fbe4 	bl	800f104 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	689b      	ldr	r3, [r3, #8]
 800e942:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e94a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	68fa      	ldr	r2, [r7, #12]
 800e952:	609a      	str	r2, [r3, #8]
      break;
 800e954:	e04c      	b.n	800e9f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6818      	ldr	r0, [r3, #0]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	6899      	ldr	r1, [r3, #8]
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	685a      	ldr	r2, [r3, #4]
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	f000 fbcd 	bl	800f104 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	689a      	ldr	r2, [r3, #8]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e978:	609a      	str	r2, [r3, #8]
      break;
 800e97a:	e039      	b.n	800e9f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6818      	ldr	r0, [r3, #0]
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	6859      	ldr	r1, [r3, #4]
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	461a      	mov	r2, r3
 800e98a:	f000 fb3f 	bl	800f00c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	2150      	movs	r1, #80	; 0x50
 800e994:	4618      	mov	r0, r3
 800e996:	f000 fb98 	bl	800f0ca <TIM_ITRx_SetConfig>
      break;
 800e99a:	e029      	b.n	800e9f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6818      	ldr	r0, [r3, #0]
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	6859      	ldr	r1, [r3, #4]
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	f000 fb5e 	bl	800f06a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2160      	movs	r1, #96	; 0x60
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f000 fb88 	bl	800f0ca <TIM_ITRx_SetConfig>
      break;
 800e9ba:	e019      	b.n	800e9f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6818      	ldr	r0, [r3, #0]
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	6859      	ldr	r1, [r3, #4]
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	f000 fb1f 	bl	800f00c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2140      	movs	r1, #64	; 0x40
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f000 fb78 	bl	800f0ca <TIM_ITRx_SetConfig>
      break;
 800e9da:	e009      	b.n	800e9f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	4610      	mov	r0, r2
 800e9e8:	f000 fb6f 	bl	800f0ca <TIM_ITRx_SetConfig>
      break;
 800e9ec:	e000      	b.n	800e9f0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800e9ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ea0a:	b480      	push	{r7}
 800ea0c:	b083      	sub	sp, #12
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ea12:	bf00      	nop
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ea1e:	b480      	push	{r7}
 800ea20:	b083      	sub	sp, #12
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ea26:	bf00      	nop
 800ea28:	370c      	adds	r7, #12
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr

0800ea32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ea32:	b480      	push	{r7}
 800ea34:	b083      	sub	sp, #12
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ea3a:	bf00      	nop
 800ea3c:	370c      	adds	r7, #12
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr
	...

0800ea48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b085      	sub	sp, #20
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	4a2a      	ldr	r2, [pc, #168]	; (800eb04 <TIM_Base_SetConfig+0xbc>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d003      	beq.n	800ea68 <TIM_Base_SetConfig+0x20>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea66:	d108      	bne.n	800ea7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	68fa      	ldr	r2, [r7, #12]
 800ea76:	4313      	orrs	r3, r2
 800ea78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	4a21      	ldr	r2, [pc, #132]	; (800eb04 <TIM_Base_SetConfig+0xbc>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d00b      	beq.n	800ea9a <TIM_Base_SetConfig+0x52>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea88:	d007      	beq.n	800ea9a <TIM_Base_SetConfig+0x52>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	4a1e      	ldr	r2, [pc, #120]	; (800eb08 <TIM_Base_SetConfig+0xc0>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d003      	beq.n	800ea9a <TIM_Base_SetConfig+0x52>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	4a1d      	ldr	r2, [pc, #116]	; (800eb0c <TIM_Base_SetConfig+0xc4>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d108      	bne.n	800eaac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eaa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	68db      	ldr	r3, [r3, #12]
 800eaa6:	68fa      	ldr	r2, [r7, #12]
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	695b      	ldr	r3, [r3, #20]
 800eab6:	4313      	orrs	r3, r2
 800eab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	689a      	ldr	r2, [r3, #8]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	4a0c      	ldr	r2, [pc, #48]	; (800eb04 <TIM_Base_SetConfig+0xbc>)
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d007      	beq.n	800eae8 <TIM_Base_SetConfig+0xa0>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	4a0b      	ldr	r2, [pc, #44]	; (800eb08 <TIM_Base_SetConfig+0xc0>)
 800eadc:	4293      	cmp	r3, r2
 800eade:	d003      	beq.n	800eae8 <TIM_Base_SetConfig+0xa0>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	4a0a      	ldr	r2, [pc, #40]	; (800eb0c <TIM_Base_SetConfig+0xc4>)
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d103      	bne.n	800eaf0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	691a      	ldr	r2, [r3, #16]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	615a      	str	r2, [r3, #20]
}
 800eaf6:	bf00      	nop
 800eaf8:	3714      	adds	r7, #20
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	40012c00 	.word	0x40012c00
 800eb08:	40014400 	.word	0x40014400
 800eb0c:	40014800 	.word	0x40014800

0800eb10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b087      	sub	sp, #28
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6a1b      	ldr	r3, [r3, #32]
 800eb1e:	f023 0201 	bic.w	r2, r3, #1
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6a1b      	ldr	r3, [r3, #32]
 800eb2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	699b      	ldr	r3, [r3, #24]
 800eb36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f023 0303 	bic.w	r3, r3, #3
 800eb4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	4313      	orrs	r3, r2
 800eb54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	f023 0302 	bic.w	r3, r3, #2
 800eb5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	689b      	ldr	r3, [r3, #8]
 800eb62:	697a      	ldr	r2, [r7, #20]
 800eb64:	4313      	orrs	r3, r2
 800eb66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4a24      	ldr	r2, [pc, #144]	; (800ebfc <TIM_OC1_SetConfig+0xec>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d007      	beq.n	800eb80 <TIM_OC1_SetConfig+0x70>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	4a23      	ldr	r2, [pc, #140]	; (800ec00 <TIM_OC1_SetConfig+0xf0>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d003      	beq.n	800eb80 <TIM_OC1_SetConfig+0x70>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4a22      	ldr	r2, [pc, #136]	; (800ec04 <TIM_OC1_SetConfig+0xf4>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d10c      	bne.n	800eb9a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	f023 0308 	bic.w	r3, r3, #8
 800eb86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	68db      	ldr	r3, [r3, #12]
 800eb8c:	697a      	ldr	r2, [r7, #20]
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	f023 0304 	bic.w	r3, r3, #4
 800eb98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a17      	ldr	r2, [pc, #92]	; (800ebfc <TIM_OC1_SetConfig+0xec>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d007      	beq.n	800ebb2 <TIM_OC1_SetConfig+0xa2>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a17      	ldr	r2, [pc, #92]	; (800ec04 <TIM_OC1_SetConfig+0xf4>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d003      	beq.n	800ebb2 <TIM_OC1_SetConfig+0xa2>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4a14      	ldr	r2, [pc, #80]	; (800ec00 <TIM_OC1_SetConfig+0xf0>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d111      	bne.n	800ebd6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ebb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ebc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	695b      	ldr	r3, [r3, #20]
 800ebc6:	693a      	ldr	r2, [r7, #16]
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	693a      	ldr	r2, [r7, #16]
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	693a      	ldr	r2, [r7, #16]
 800ebda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	685a      	ldr	r2, [r3, #4]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	697a      	ldr	r2, [r7, #20]
 800ebee:	621a      	str	r2, [r3, #32]
}
 800ebf0:	bf00      	nop
 800ebf2:	371c      	adds	r7, #28
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr
 800ebfc:	40012c00 	.word	0x40012c00
 800ec00:	40014800 	.word	0x40014800
 800ec04:	40014400 	.word	0x40014400

0800ec08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b087      	sub	sp, #28
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6a1b      	ldr	r3, [r3, #32]
 800ec16:	f023 0210 	bic.w	r2, r3, #16
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	699b      	ldr	r3, [r3, #24]
 800ec2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ec36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	021b      	lsls	r3, r3, #8
 800ec4a:	68fa      	ldr	r2, [r7, #12]
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	f023 0320 	bic.w	r3, r3, #32
 800ec56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	011b      	lsls	r3, r3, #4
 800ec5e:	697a      	ldr	r2, [r7, #20]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	4a22      	ldr	r2, [pc, #136]	; (800ecf0 <TIM_OC2_SetConfig+0xe8>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d10d      	bne.n	800ec88 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	68db      	ldr	r3, [r3, #12]
 800ec78:	011b      	lsls	r3, r3, #4
 800ec7a:	697a      	ldr	r2, [r7, #20]
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4a19      	ldr	r2, [pc, #100]	; (800ecf0 <TIM_OC2_SetConfig+0xe8>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d007      	beq.n	800eca0 <TIM_OC2_SetConfig+0x98>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	4a18      	ldr	r2, [pc, #96]	; (800ecf4 <TIM_OC2_SetConfig+0xec>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d003      	beq.n	800eca0 <TIM_OC2_SetConfig+0x98>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	4a17      	ldr	r2, [pc, #92]	; (800ecf8 <TIM_OC2_SetConfig+0xf0>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d113      	bne.n	800ecc8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ecae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	695b      	ldr	r3, [r3, #20]
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	693a      	ldr	r2, [r7, #16]
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	699b      	ldr	r3, [r3, #24]
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	693a      	ldr	r2, [r7, #16]
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	693a      	ldr	r2, [r7, #16]
 800eccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	68fa      	ldr	r2, [r7, #12]
 800ecd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	685a      	ldr	r2, [r3, #4]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	697a      	ldr	r2, [r7, #20]
 800ece0:	621a      	str	r2, [r3, #32]
}
 800ece2:	bf00      	nop
 800ece4:	371c      	adds	r7, #28
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop
 800ecf0:	40012c00 	.word	0x40012c00
 800ecf4:	40014400 	.word	0x40014400
 800ecf8:	40014800 	.word	0x40014800

0800ecfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b087      	sub	sp, #28
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6a1b      	ldr	r3, [r3, #32]
 800ed16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	69db      	ldr	r3, [r3, #28]
 800ed22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ed2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f023 0303 	bic.w	r3, r3, #3
 800ed36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	68fa      	ldr	r2, [r7, #12]
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ed48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	021b      	lsls	r3, r3, #8
 800ed50:	697a      	ldr	r2, [r7, #20]
 800ed52:	4313      	orrs	r3, r2
 800ed54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	4a21      	ldr	r2, [pc, #132]	; (800ede0 <TIM_OC3_SetConfig+0xe4>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d10d      	bne.n	800ed7a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ed64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	021b      	lsls	r3, r3, #8
 800ed6c:	697a      	ldr	r2, [r7, #20]
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ed78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4a18      	ldr	r2, [pc, #96]	; (800ede0 <TIM_OC3_SetConfig+0xe4>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d007      	beq.n	800ed92 <TIM_OC3_SetConfig+0x96>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4a17      	ldr	r2, [pc, #92]	; (800ede4 <TIM_OC3_SetConfig+0xe8>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d003      	beq.n	800ed92 <TIM_OC3_SetConfig+0x96>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	4a16      	ldr	r2, [pc, #88]	; (800ede8 <TIM_OC3_SetConfig+0xec>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d113      	bne.n	800edba <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ed98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eda0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	695b      	ldr	r3, [r3, #20]
 800eda6:	011b      	lsls	r3, r3, #4
 800eda8:	693a      	ldr	r2, [r7, #16]
 800edaa:	4313      	orrs	r3, r2
 800edac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	699b      	ldr	r3, [r3, #24]
 800edb2:	011b      	lsls	r3, r3, #4
 800edb4:	693a      	ldr	r2, [r7, #16]
 800edb6:	4313      	orrs	r3, r2
 800edb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	693a      	ldr	r2, [r7, #16]
 800edbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	68fa      	ldr	r2, [r7, #12]
 800edc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	685a      	ldr	r2, [r3, #4]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	697a      	ldr	r2, [r7, #20]
 800edd2:	621a      	str	r2, [r3, #32]
}
 800edd4:	bf00      	nop
 800edd6:	371c      	adds	r7, #28
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr
 800ede0:	40012c00 	.word	0x40012c00
 800ede4:	40014400 	.word	0x40014400
 800ede8:	40014800 	.word	0x40014800

0800edec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800edec:	b480      	push	{r7}
 800edee:	b087      	sub	sp, #28
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6a1b      	ldr	r3, [r3, #32]
 800edfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6a1b      	ldr	r3, [r3, #32]
 800ee06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	685b      	ldr	r3, [r3, #4]
 800ee0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	69db      	ldr	r3, [r3, #28]
 800ee12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ee1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	021b      	lsls	r3, r3, #8
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	4313      	orrs	r3, r2
 800ee32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ee3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	689b      	ldr	r3, [r3, #8]
 800ee40:	031b      	lsls	r3, r3, #12
 800ee42:	693a      	ldr	r2, [r7, #16]
 800ee44:	4313      	orrs	r3, r2
 800ee46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	4a14      	ldr	r2, [pc, #80]	; (800ee9c <TIM_OC4_SetConfig+0xb0>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d007      	beq.n	800ee60 <TIM_OC4_SetConfig+0x74>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4a13      	ldr	r2, [pc, #76]	; (800eea0 <TIM_OC4_SetConfig+0xb4>)
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d003      	beq.n	800ee60 <TIM_OC4_SetConfig+0x74>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	4a12      	ldr	r2, [pc, #72]	; (800eea4 <TIM_OC4_SetConfig+0xb8>)
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d109      	bne.n	800ee74 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ee66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	695b      	ldr	r3, [r3, #20]
 800ee6c:	019b      	lsls	r3, r3, #6
 800ee6e:	697a      	ldr	r2, [r7, #20]
 800ee70:	4313      	orrs	r3, r2
 800ee72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	697a      	ldr	r2, [r7, #20]
 800ee78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	68fa      	ldr	r2, [r7, #12]
 800ee7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	685a      	ldr	r2, [r3, #4]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	693a      	ldr	r2, [r7, #16]
 800ee8c:	621a      	str	r2, [r3, #32]
}
 800ee8e:	bf00      	nop
 800ee90:	371c      	adds	r7, #28
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr
 800ee9a:	bf00      	nop
 800ee9c:	40012c00 	.word	0x40012c00
 800eea0:	40014400 	.word	0x40014400
 800eea4:	40014800 	.word	0x40014800

0800eea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b087      	sub	sp, #28
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a1b      	ldr	r3, [r3, #32]
 800eeb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6a1b      	ldr	r3, [r3, #32]
 800eec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eeda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800eeec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	041b      	lsls	r3, r3, #16
 800eef4:	693a      	ldr	r2, [r7, #16]
 800eef6:	4313      	orrs	r3, r2
 800eef8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4a13      	ldr	r2, [pc, #76]	; (800ef4c <TIM_OC5_SetConfig+0xa4>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d007      	beq.n	800ef12 <TIM_OC5_SetConfig+0x6a>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	4a12      	ldr	r2, [pc, #72]	; (800ef50 <TIM_OC5_SetConfig+0xa8>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d003      	beq.n	800ef12 <TIM_OC5_SetConfig+0x6a>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4a11      	ldr	r2, [pc, #68]	; (800ef54 <TIM_OC5_SetConfig+0xac>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d109      	bne.n	800ef26 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	695b      	ldr	r3, [r3, #20]
 800ef1e:	021b      	lsls	r3, r3, #8
 800ef20:	697a      	ldr	r2, [r7, #20]
 800ef22:	4313      	orrs	r3, r2
 800ef24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	697a      	ldr	r2, [r7, #20]
 800ef2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	685a      	ldr	r2, [r3, #4]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	693a      	ldr	r2, [r7, #16]
 800ef3e:	621a      	str	r2, [r3, #32]
}
 800ef40:	bf00      	nop
 800ef42:	371c      	adds	r7, #28
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr
 800ef4c:	40012c00 	.word	0x40012c00
 800ef50:	40014400 	.word	0x40014400
 800ef54:	40014800 	.word	0x40014800

0800ef58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b087      	sub	sp, #28
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6a1b      	ldr	r3, [r3, #32]
 800ef66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6a1b      	ldr	r3, [r3, #32]
 800ef72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ef86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	021b      	lsls	r3, r3, #8
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	4313      	orrs	r3, r2
 800ef96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ef9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	689b      	ldr	r3, [r3, #8]
 800efa4:	051b      	lsls	r3, r3, #20
 800efa6:	693a      	ldr	r2, [r7, #16]
 800efa8:	4313      	orrs	r3, r2
 800efaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4a14      	ldr	r2, [pc, #80]	; (800f000 <TIM_OC6_SetConfig+0xa8>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d007      	beq.n	800efc4 <TIM_OC6_SetConfig+0x6c>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	4a13      	ldr	r2, [pc, #76]	; (800f004 <TIM_OC6_SetConfig+0xac>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d003      	beq.n	800efc4 <TIM_OC6_SetConfig+0x6c>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4a12      	ldr	r2, [pc, #72]	; (800f008 <TIM_OC6_SetConfig+0xb0>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d109      	bne.n	800efd8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800efca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	695b      	ldr	r3, [r3, #20]
 800efd0:	029b      	lsls	r3, r3, #10
 800efd2:	697a      	ldr	r2, [r7, #20]
 800efd4:	4313      	orrs	r3, r2
 800efd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	697a      	ldr	r2, [r7, #20]
 800efdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	685a      	ldr	r2, [r3, #4]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	693a      	ldr	r2, [r7, #16]
 800eff0:	621a      	str	r2, [r3, #32]
}
 800eff2:	bf00      	nop
 800eff4:	371c      	adds	r7, #28
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop
 800f000:	40012c00 	.word	0x40012c00
 800f004:	40014400 	.word	0x40014400
 800f008:	40014800 	.word	0x40014800

0800f00c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b087      	sub	sp, #28
 800f010:	af00      	add	r7, sp, #0
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6a1b      	ldr	r3, [r3, #32]
 800f01c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6a1b      	ldr	r3, [r3, #32]
 800f022:	f023 0201 	bic.w	r2, r3, #1
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	699b      	ldr	r3, [r3, #24]
 800f02e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	011b      	lsls	r3, r3, #4
 800f03c:	693a      	ldr	r2, [r7, #16]
 800f03e:	4313      	orrs	r3, r2
 800f040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	f023 030a 	bic.w	r3, r3, #10
 800f048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f04a:	697a      	ldr	r2, [r7, #20]
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	4313      	orrs	r3, r2
 800f050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	693a      	ldr	r2, [r7, #16]
 800f056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	697a      	ldr	r2, [r7, #20]
 800f05c:	621a      	str	r2, [r3, #32]
}
 800f05e:	bf00      	nop
 800f060:	371c      	adds	r7, #28
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr

0800f06a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f06a:	b480      	push	{r7}
 800f06c:	b087      	sub	sp, #28
 800f06e:	af00      	add	r7, sp, #0
 800f070:	60f8      	str	r0, [r7, #12]
 800f072:	60b9      	str	r1, [r7, #8]
 800f074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6a1b      	ldr	r3, [r3, #32]
 800f07a:	f023 0210 	bic.w	r2, r3, #16
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	699b      	ldr	r3, [r3, #24]
 800f086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	6a1b      	ldr	r3, [r3, #32]
 800f08c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	031b      	lsls	r3, r3, #12
 800f09a:	697a      	ldr	r2, [r7, #20]
 800f09c:	4313      	orrs	r3, r2
 800f09e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f0a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	011b      	lsls	r3, r3, #4
 800f0ac:	693a      	ldr	r2, [r7, #16]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	697a      	ldr	r2, [r7, #20]
 800f0b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	693a      	ldr	r2, [r7, #16]
 800f0bc:	621a      	str	r2, [r3, #32]
}
 800f0be:	bf00      	nop
 800f0c0:	371c      	adds	r7, #28
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr

0800f0ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f0ca:	b480      	push	{r7}
 800f0cc:	b085      	sub	sp, #20
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
 800f0d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f0e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f0e6:	683a      	ldr	r2, [r7, #0]
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	f043 0307 	orr.w	r3, r3, #7
 800f0f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	609a      	str	r2, [r3, #8]
}
 800f0f8:	bf00      	nop
 800f0fa:	3714      	adds	r7, #20
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr

0800f104 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f104:	b480      	push	{r7}
 800f106:	b087      	sub	sp, #28
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
 800f110:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	689b      	ldr	r3, [r3, #8]
 800f116:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f11e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	021a      	lsls	r2, r3, #8
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	431a      	orrs	r2, r3
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	4313      	orrs	r3, r2
 800f12c:	697a      	ldr	r2, [r7, #20]
 800f12e:	4313      	orrs	r3, r2
 800f130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	697a      	ldr	r2, [r7, #20]
 800f136:	609a      	str	r2, [r3, #8]
}
 800f138:	bf00      	nop
 800f13a:	371c      	adds	r7, #28
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f144:	b480      	push	{r7}
 800f146:	b087      	sub	sp, #28
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	f003 031f 	and.w	r3, r3, #31
 800f156:	2201      	movs	r2, #1
 800f158:	fa02 f303 	lsl.w	r3, r2, r3
 800f15c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	6a1a      	ldr	r2, [r3, #32]
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	43db      	mvns	r3, r3
 800f166:	401a      	ands	r2, r3
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	6a1a      	ldr	r2, [r3, #32]
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	f003 031f 	and.w	r3, r3, #31
 800f176:	6879      	ldr	r1, [r7, #4]
 800f178:	fa01 f303 	lsl.w	r3, r1, r3
 800f17c:	431a      	orrs	r2, r3
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	621a      	str	r2, [r3, #32]
}
 800f182:	bf00      	nop
 800f184:	371c      	adds	r7, #28
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr
	...

0800f190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f190:	b480      	push	{r7}
 800f192:	b085      	sub	sp, #20
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d101      	bne.n	800f1a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f1a4:	2302      	movs	r3, #2
 800f1a6:	e04a      	b.n	800f23e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2202      	movs	r2, #2
 800f1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	689b      	ldr	r3, [r3, #8]
 800f1c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4a1f      	ldr	r2, [pc, #124]	; (800f24c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d108      	bne.n	800f1e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f1d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	68fa      	ldr	r2, [r7, #12]
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68fa      	ldr	r2, [r7, #12]
 800f1fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	4a12      	ldr	r2, [pc, #72]	; (800f24c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d004      	beq.n	800f212 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f210:	d10c      	bne.n	800f22c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	68ba      	ldr	r2, [r7, #8]
 800f220:	4313      	orrs	r3, r2
 800f222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	68ba      	ldr	r2, [r7, #8]
 800f22a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2201      	movs	r2, #1
 800f230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f23c:	2300      	movs	r3, #0
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3714      	adds	r7, #20
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr
 800f24a:	bf00      	nop
 800f24c:	40012c00 	.word	0x40012c00

0800f250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f258:	bf00      	nop
 800f25a:	370c      	adds	r7, #12
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr

0800f264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f26c:	bf00      	nop
 800f26e:	370c      	adds	r7, #12
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	4770      	bx	lr

0800f278 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f280:	bf00      	nop
 800f282:	370c      	adds	r7, #12
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b085      	sub	sp, #20
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f294:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f298:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f2a0:	b29a      	uxth	r2, r3
 800f2a2:	89fb      	ldrh	r3, [r7, #14]
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f2ae:	2300      	movs	r3, #0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3714      	adds	r7, #20
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b085      	sub	sp, #20
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f2c4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f2c8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	b21a      	sxth	r2, r3
 800f2d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f2d8:	43db      	mvns	r3, r3
 800f2da:	b21b      	sxth	r3, r3
 800f2dc:	4013      	ands	r3, r2
 800f2de:	b21b      	sxth	r3, r3
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f2e8:	2300      	movs	r3, #0
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3714      	adds	r7, #20
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr

0800f2f6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f2f6:	b084      	sub	sp, #16
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	f107 0014 	add.w	r0, r7, #20
 800f304:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2201      	movs	r2, #1
 800f30c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2200      	movs	r2, #0
 800f31c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f7ff ffaf 	bl	800f28c <USB_EnableGlobalInt>

  return HAL_OK;
 800f32e:	2300      	movs	r3, #0
}
 800f330:	4618      	mov	r0, r3
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f33a:	b004      	add	sp, #16
 800f33c:	4770      	bx	lr
	...

0800f340 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f340:	b490      	push	{r4, r7}
 800f342:	b086      	sub	sp, #24
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800f34a:	2300      	movs	r3, #0
 800f34c:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	009b      	lsls	r3, r3, #2
 800f356:	4413      	add	r3, r2
 800f358:	881b      	ldrh	r3, [r3, #0]
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800f360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f364:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	78db      	ldrb	r3, [r3, #3]
 800f36a:	2b03      	cmp	r3, #3
 800f36c:	d819      	bhi.n	800f3a2 <USB_ActivateEndpoint+0x62>
 800f36e:	a201      	add	r2, pc, #4	; (adr r2, 800f374 <USB_ActivateEndpoint+0x34>)
 800f370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f374:	0800f385 	.word	0x0800f385
 800f378:	0800f399 	.word	0x0800f399
 800f37c:	0800f3a9 	.word	0x0800f3a9
 800f380:	0800f38f 	.word	0x0800f38f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f384:	8abb      	ldrh	r3, [r7, #20]
 800f386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f38a:	82bb      	strh	r3, [r7, #20]
      break;
 800f38c:	e00d      	b.n	800f3aa <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f38e:	8abb      	ldrh	r3, [r7, #20]
 800f390:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800f394:	82bb      	strh	r3, [r7, #20]
      break;
 800f396:	e008      	b.n	800f3aa <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f398:	8abb      	ldrh	r3, [r7, #20]
 800f39a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f39e:	82bb      	strh	r3, [r7, #20]
      break;
 800f3a0:	e003      	b.n	800f3aa <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	75fb      	strb	r3, [r7, #23]
      break;
 800f3a6:	e000      	b.n	800f3aa <USB_ActivateEndpoint+0x6a>
      break;
 800f3a8:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	441a      	add	r2, r3
 800f3b4:	8abb      	ldrh	r3, [r7, #20]
 800f3b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f3ca:	687a      	ldr	r2, [r7, #4]
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	4413      	add	r3, r2
 800f3d4:	881b      	ldrh	r3, [r3, #0]
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	b21b      	sxth	r3, r3
 800f3da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3e2:	b21a      	sxth	r2, r3
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	b21b      	sxth	r3, r3
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	b21b      	sxth	r3, r3
 800f3ee:	b29c      	uxth	r4, r3
 800f3f0:	687a      	ldr	r2, [r7, #4]
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	441a      	add	r2, r3
 800f3fa:	4b87      	ldr	r3, [pc, #540]	; (800f618 <USB_ActivateEndpoint+0x2d8>)
 800f3fc:	4323      	orrs	r3, r4
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	7b1b      	ldrb	r3, [r3, #12]
 800f406:	2b00      	cmp	r3, #0
 800f408:	f040 810c 	bne.w	800f624 <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	785b      	ldrb	r3, [r3, #1]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d067      	beq.n	800f4e4 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f414:	687c      	ldr	r4, [r7, #4]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	441c      	add	r4, r3
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	00db      	lsls	r3, r3, #3
 800f426:	4423      	add	r3, r4
 800f428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f42c:	461c      	mov	r4, r3
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	88db      	ldrh	r3, [r3, #6]
 800f432:	085b      	lsrs	r3, r3, #1
 800f434:	b29b      	uxth	r3, r3
 800f436:	005b      	lsls	r3, r3, #1
 800f438:	b29b      	uxth	r3, r3
 800f43a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	4413      	add	r3, r2
 800f446:	881b      	ldrh	r3, [r3, #0]
 800f448:	b29c      	uxth	r4, r3
 800f44a:	4623      	mov	r3, r4
 800f44c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f450:	2b00      	cmp	r3, #0
 800f452:	d014      	beq.n	800f47e <USB_ActivateEndpoint+0x13e>
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	4413      	add	r3, r2
 800f45e:	881b      	ldrh	r3, [r3, #0]
 800f460:	b29b      	uxth	r3, r3
 800f462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f46a:	b29c      	uxth	r4, r3
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	441a      	add	r2, r3
 800f476:	4b69      	ldr	r3, [pc, #420]	; (800f61c <USB_ActivateEndpoint+0x2dc>)
 800f478:	4323      	orrs	r3, r4
 800f47a:	b29b      	uxth	r3, r3
 800f47c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	78db      	ldrb	r3, [r3, #3]
 800f482:	2b01      	cmp	r3, #1
 800f484:	d018      	beq.n	800f4b8 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	4413      	add	r3, r2
 800f490:	881b      	ldrh	r3, [r3, #0]
 800f492:	b29b      	uxth	r3, r3
 800f494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f49c:	b29c      	uxth	r4, r3
 800f49e:	f084 0320 	eor.w	r3, r4, #32
 800f4a2:	b29c      	uxth	r4, r3
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	441a      	add	r2, r3
 800f4ae:	4b5a      	ldr	r3, [pc, #360]	; (800f618 <USB_ActivateEndpoint+0x2d8>)
 800f4b0:	4323      	orrs	r3, r4
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	8013      	strh	r3, [r2, #0]
 800f4b6:	e225      	b.n	800f904 <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	781b      	ldrb	r3, [r3, #0]
 800f4be:	009b      	lsls	r3, r3, #2
 800f4c0:	4413      	add	r3, r2
 800f4c2:	881b      	ldrh	r3, [r3, #0]
 800f4c4:	b29b      	uxth	r3, r3
 800f4c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4ce:	b29c      	uxth	r4, r3
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	441a      	add	r2, r3
 800f4da:	4b4f      	ldr	r3, [pc, #316]	; (800f618 <USB_ActivateEndpoint+0x2d8>)
 800f4dc:	4323      	orrs	r3, r4
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	8013      	strh	r3, [r2, #0]
 800f4e2:	e20f      	b.n	800f904 <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f4e4:	687c      	ldr	r4, [r7, #4]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	441c      	add	r4, r3
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	00db      	lsls	r3, r3, #3
 800f4f6:	4423      	add	r3, r4
 800f4f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f4fc:	461c      	mov	r4, r3
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	88db      	ldrh	r3, [r3, #6]
 800f502:	085b      	lsrs	r3, r3, #1
 800f504:	b29b      	uxth	r3, r3
 800f506:	005b      	lsls	r3, r3, #1
 800f508:	b29b      	uxth	r3, r3
 800f50a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800f50c:	687c      	ldr	r4, [r7, #4]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f514:	b29b      	uxth	r3, r3
 800f516:	441c      	add	r4, r3
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	00db      	lsls	r3, r3, #3
 800f51e:	4423      	add	r3, r4
 800f520:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f524:	60fb      	str	r3, [r7, #12]
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	691b      	ldr	r3, [r3, #16]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d110      	bne.n	800f550 <USB_ActivateEndpoint+0x210>
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	881b      	ldrh	r3, [r3, #0]
 800f532:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f536:	b29a      	uxth	r2, r3
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	801a      	strh	r2, [r3, #0]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	881b      	ldrh	r3, [r3, #0]
 800f540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f548:	b29a      	uxth	r2, r3
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	801a      	strh	r2, [r3, #0]
 800f54e:	e026      	b.n	800f59e <USB_ActivateEndpoint+0x25e>
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	691b      	ldr	r3, [r3, #16]
 800f554:	2b3d      	cmp	r3, #61	; 0x3d
 800f556:	d813      	bhi.n	800f580 <USB_ActivateEndpoint+0x240>
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	691b      	ldr	r3, [r3, #16]
 800f55c:	085b      	lsrs	r3, r3, #1
 800f55e:	613b      	str	r3, [r7, #16]
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	691b      	ldr	r3, [r3, #16]
 800f564:	f003 0301 	and.w	r3, r3, #1
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d002      	beq.n	800f572 <USB_ActivateEndpoint+0x232>
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	3301      	adds	r3, #1
 800f570:	613b      	str	r3, [r7, #16]
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	b29b      	uxth	r3, r3
 800f576:	029b      	lsls	r3, r3, #10
 800f578:	b29a      	uxth	r2, r3
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	801a      	strh	r2, [r3, #0]
 800f57e:	e00e      	b.n	800f59e <USB_ActivateEndpoint+0x25e>
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	691b      	ldr	r3, [r3, #16]
 800f584:	095b      	lsrs	r3, r3, #5
 800f586:	613b      	str	r3, [r7, #16]
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	029b      	lsls	r3, r3, #10
 800f58e:	b29b      	uxth	r3, r3
 800f590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f598:	b29a      	uxth	r2, r3
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	4413      	add	r3, r2
 800f5a8:	881b      	ldrh	r3, [r3, #0]
 800f5aa:	b29c      	uxth	r4, r3
 800f5ac:	4623      	mov	r3, r4
 800f5ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d014      	beq.n	800f5e0 <USB_ActivateEndpoint+0x2a0>
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	009b      	lsls	r3, r3, #2
 800f5be:	4413      	add	r3, r2
 800f5c0:	881b      	ldrh	r3, [r3, #0]
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5cc:	b29c      	uxth	r4, r3
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	441a      	add	r2, r3
 800f5d8:	4b11      	ldr	r3, [pc, #68]	; (800f620 <USB_ActivateEndpoint+0x2e0>)
 800f5da:	4323      	orrs	r3, r4
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	009b      	lsls	r3, r3, #2
 800f5e8:	4413      	add	r3, r2
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f5f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5f6:	b29c      	uxth	r4, r3
 800f5f8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800f5fc:	b29c      	uxth	r4, r3
 800f5fe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800f602:	b29c      	uxth	r4, r3
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	441a      	add	r2, r3
 800f60e:	4b02      	ldr	r3, [pc, #8]	; (800f618 <USB_ActivateEndpoint+0x2d8>)
 800f610:	4323      	orrs	r3, r4
 800f612:	b29b      	uxth	r3, r3
 800f614:	8013      	strh	r3, [r2, #0]
 800f616:	e175      	b.n	800f904 <USB_ActivateEndpoint+0x5c4>
 800f618:	ffff8080 	.word	0xffff8080
 800f61c:	ffff80c0 	.word	0xffff80c0
 800f620:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	009b      	lsls	r3, r3, #2
 800f62c:	4413      	add	r3, r2
 800f62e:	881b      	ldrh	r3, [r3, #0]
 800f630:	b29b      	uxth	r3, r3
 800f632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f63a:	b29c      	uxth	r4, r3
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	441a      	add	r2, r3
 800f646:	4b96      	ldr	r3, [pc, #600]	; (800f8a0 <USB_ActivateEndpoint+0x560>)
 800f648:	4323      	orrs	r3, r4
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f64e:	687c      	ldr	r4, [r7, #4]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f656:	b29b      	uxth	r3, r3
 800f658:	441c      	add	r4, r3
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	00db      	lsls	r3, r3, #3
 800f660:	4423      	add	r3, r4
 800f662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f666:	461c      	mov	r4, r3
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	891b      	ldrh	r3, [r3, #8]
 800f66c:	085b      	lsrs	r3, r3, #1
 800f66e:	b29b      	uxth	r3, r3
 800f670:	005b      	lsls	r3, r3, #1
 800f672:	b29b      	uxth	r3, r3
 800f674:	8023      	strh	r3, [r4, #0]
 800f676:	687c      	ldr	r4, [r7, #4]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f67e:	b29b      	uxth	r3, r3
 800f680:	441c      	add	r4, r3
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	00db      	lsls	r3, r3, #3
 800f688:	4423      	add	r3, r4
 800f68a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f68e:	461c      	mov	r4, r3
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	895b      	ldrh	r3, [r3, #10]
 800f694:	085b      	lsrs	r3, r3, #1
 800f696:	b29b      	uxth	r3, r3
 800f698:	005b      	lsls	r3, r3, #1
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	785b      	ldrb	r3, [r3, #1]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f040 8088 	bne.w	800f7b8 <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	4413      	add	r3, r2
 800f6b2:	881b      	ldrh	r3, [r3, #0]
 800f6b4:	b29c      	uxth	r4, r3
 800f6b6:	4623      	mov	r3, r4
 800f6b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d014      	beq.n	800f6ea <USB_ActivateEndpoint+0x3aa>
 800f6c0:	687a      	ldr	r2, [r7, #4]
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	009b      	lsls	r3, r3, #2
 800f6c8:	4413      	add	r3, r2
 800f6ca:	881b      	ldrh	r3, [r3, #0]
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6d6:	b29c      	uxth	r4, r3
 800f6d8:	687a      	ldr	r2, [r7, #4]
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	009b      	lsls	r3, r3, #2
 800f6e0:	441a      	add	r2, r3
 800f6e2:	4b70      	ldr	r3, [pc, #448]	; (800f8a4 <USB_ActivateEndpoint+0x564>)
 800f6e4:	4323      	orrs	r3, r4
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	009b      	lsls	r3, r3, #2
 800f6f2:	4413      	add	r3, r2
 800f6f4:	881b      	ldrh	r3, [r3, #0]
 800f6f6:	b29c      	uxth	r4, r3
 800f6f8:	4623      	mov	r3, r4
 800f6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d014      	beq.n	800f72c <USB_ActivateEndpoint+0x3ec>
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	4413      	add	r3, r2
 800f70c:	881b      	ldrh	r3, [r3, #0]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f718:	b29c      	uxth	r4, r3
 800f71a:	687a      	ldr	r2, [r7, #4]
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	441a      	add	r2, r3
 800f724:	4b60      	ldr	r3, [pc, #384]	; (800f8a8 <USB_ActivateEndpoint+0x568>)
 800f726:	4323      	orrs	r3, r4
 800f728:	b29b      	uxth	r3, r3
 800f72a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	4413      	add	r3, r2
 800f736:	881b      	ldrh	r3, [r3, #0]
 800f738:	b29b      	uxth	r3, r3
 800f73a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f73e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f742:	b29c      	uxth	r4, r3
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	441a      	add	r2, r3
 800f74e:	4b56      	ldr	r3, [pc, #344]	; (800f8a8 <USB_ActivateEndpoint+0x568>)
 800f750:	4323      	orrs	r3, r4
 800f752:	b29b      	uxth	r3, r3
 800f754:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	4413      	add	r3, r2
 800f760:	881b      	ldrh	r3, [r3, #0]
 800f762:	b29b      	uxth	r3, r3
 800f764:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f76c:	b29c      	uxth	r4, r3
 800f76e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800f772:	b29c      	uxth	r4, r3
 800f774:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800f778:	b29c      	uxth	r4, r3
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	441a      	add	r2, r3
 800f784:	4b49      	ldr	r3, [pc, #292]	; (800f8ac <USB_ActivateEndpoint+0x56c>)
 800f786:	4323      	orrs	r3, r4
 800f788:	b29b      	uxth	r3, r3
 800f78a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	881b      	ldrh	r3, [r3, #0]
 800f798:	b29b      	uxth	r3, r3
 800f79a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f79e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7a2:	b29c      	uxth	r4, r3
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	009b      	lsls	r3, r3, #2
 800f7ac:	441a      	add	r2, r3
 800f7ae:	4b3f      	ldr	r3, [pc, #252]	; (800f8ac <USB_ActivateEndpoint+0x56c>)
 800f7b0:	4323      	orrs	r3, r4
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	8013      	strh	r3, [r2, #0]
 800f7b6:	e0a5      	b.n	800f904 <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	4413      	add	r3, r2
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	b29c      	uxth	r4, r3
 800f7c6:	4623      	mov	r3, r4
 800f7c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d014      	beq.n	800f7fa <USB_ActivateEndpoint+0x4ba>
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	4413      	add	r3, r2
 800f7da:	881b      	ldrh	r3, [r3, #0]
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7e6:	b29c      	uxth	r4, r3
 800f7e8:	687a      	ldr	r2, [r7, #4]
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	441a      	add	r2, r3
 800f7f2:	4b2c      	ldr	r3, [pc, #176]	; (800f8a4 <USB_ActivateEndpoint+0x564>)
 800f7f4:	4323      	orrs	r3, r4
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	4413      	add	r3, r2
 800f804:	881b      	ldrh	r3, [r3, #0]
 800f806:	b29c      	uxth	r4, r3
 800f808:	4623      	mov	r3, r4
 800f80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d014      	beq.n	800f83c <USB_ActivateEndpoint+0x4fc>
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	009b      	lsls	r3, r3, #2
 800f81a:	4413      	add	r3, r2
 800f81c:	881b      	ldrh	r3, [r3, #0]
 800f81e:	b29b      	uxth	r3, r3
 800f820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f828:	b29c      	uxth	r4, r3
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	441a      	add	r2, r3
 800f834:	4b1c      	ldr	r3, [pc, #112]	; (800f8a8 <USB_ActivateEndpoint+0x568>)
 800f836:	4323      	orrs	r3, r4
 800f838:	b29b      	uxth	r3, r3
 800f83a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	009b      	lsls	r3, r3, #2
 800f844:	4413      	add	r3, r2
 800f846:	881b      	ldrh	r3, [r3, #0]
 800f848:	b29b      	uxth	r3, r3
 800f84a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f852:	b29c      	uxth	r4, r3
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	441a      	add	r2, r3
 800f85e:	4b11      	ldr	r3, [pc, #68]	; (800f8a4 <USB_ActivateEndpoint+0x564>)
 800f860:	4323      	orrs	r3, r4
 800f862:	b29b      	uxth	r3, r3
 800f864:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	78db      	ldrb	r3, [r3, #3]
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d020      	beq.n	800f8b0 <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	009b      	lsls	r3, r3, #2
 800f876:	4413      	add	r3, r2
 800f878:	881b      	ldrh	r3, [r3, #0]
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f884:	b29c      	uxth	r4, r3
 800f886:	f084 0320 	eor.w	r3, r4, #32
 800f88a:	b29c      	uxth	r4, r3
 800f88c:	687a      	ldr	r2, [r7, #4]
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	009b      	lsls	r3, r3, #2
 800f894:	441a      	add	r2, r3
 800f896:	4b05      	ldr	r3, [pc, #20]	; (800f8ac <USB_ActivateEndpoint+0x56c>)
 800f898:	4323      	orrs	r3, r4
 800f89a:	b29b      	uxth	r3, r3
 800f89c:	8013      	strh	r3, [r2, #0]
 800f89e:	e01c      	b.n	800f8da <USB_ActivateEndpoint+0x59a>
 800f8a0:	ffff8180 	.word	0xffff8180
 800f8a4:	ffffc080 	.word	0xffffc080
 800f8a8:	ffff80c0 	.word	0xffff80c0
 800f8ac:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	881b      	ldrh	r3, [r3, #0]
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8c6:	b29c      	uxth	r4, r3
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	441a      	add	r2, r3
 800f8d2:	4b0f      	ldr	r3, [pc, #60]	; (800f910 <USB_ActivateEndpoint+0x5d0>)
 800f8d4:	4323      	orrs	r3, r4
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f8da:	687a      	ldr	r2, [r7, #4]
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	4413      	add	r3, r2
 800f8e4:	881b      	ldrh	r3, [r3, #0]
 800f8e6:	b29b      	uxth	r3, r3
 800f8e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f8ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8f0:	b29c      	uxth	r4, r3
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	441a      	add	r2, r3
 800f8fc:	4b04      	ldr	r3, [pc, #16]	; (800f910 <USB_ActivateEndpoint+0x5d0>)
 800f8fe:	4323      	orrs	r3, r4
 800f900:	b29b      	uxth	r3, r3
 800f902:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800f904:	7dfb      	ldrb	r3, [r7, #23]
}
 800f906:	4618      	mov	r0, r3
 800f908:	3718      	adds	r7, #24
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bc90      	pop	{r4, r7}
 800f90e:	4770      	bx	lr
 800f910:	ffff8080 	.word	0xffff8080

0800f914 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f914:	b490      	push	{r4, r7}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	7b1b      	ldrb	r3, [r3, #12]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d171      	bne.n	800fa0a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	785b      	ldrb	r3, [r3, #1]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d036      	beq.n	800f99c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	4413      	add	r3, r2
 800f938:	881b      	ldrh	r3, [r3, #0]
 800f93a:	b29c      	uxth	r4, r3
 800f93c:	4623      	mov	r3, r4
 800f93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f942:	2b00      	cmp	r3, #0
 800f944:	d014      	beq.n	800f970 <USB_DeactivateEndpoint+0x5c>
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	009b      	lsls	r3, r3, #2
 800f94e:	4413      	add	r3, r2
 800f950:	881b      	ldrh	r3, [r3, #0]
 800f952:	b29b      	uxth	r3, r3
 800f954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f95c:	b29c      	uxth	r4, r3
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	441a      	add	r2, r3
 800f968:	4b6b      	ldr	r3, [pc, #428]	; (800fb18 <USB_DeactivateEndpoint+0x204>)
 800f96a:	4323      	orrs	r3, r4
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	4413      	add	r3, r2
 800f97a:	881b      	ldrh	r3, [r3, #0]
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f986:	b29c      	uxth	r4, r3
 800f988:	687a      	ldr	r2, [r7, #4]
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	441a      	add	r2, r3
 800f992:	4b62      	ldr	r3, [pc, #392]	; (800fb1c <USB_DeactivateEndpoint+0x208>)
 800f994:	4323      	orrs	r3, r4
 800f996:	b29b      	uxth	r3, r3
 800f998:	8013      	strh	r3, [r2, #0]
 800f99a:	e144      	b.n	800fc26 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	4413      	add	r3, r2
 800f9a6:	881b      	ldrh	r3, [r3, #0]
 800f9a8:	b29c      	uxth	r4, r3
 800f9aa:	4623      	mov	r3, r4
 800f9ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d014      	beq.n	800f9de <USB_DeactivateEndpoint+0xca>
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	009b      	lsls	r3, r3, #2
 800f9bc:	4413      	add	r3, r2
 800f9be:	881b      	ldrh	r3, [r3, #0]
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9ca:	b29c      	uxth	r4, r3
 800f9cc:	687a      	ldr	r2, [r7, #4]
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	009b      	lsls	r3, r3, #2
 800f9d4:	441a      	add	r2, r3
 800f9d6:	4b52      	ldr	r3, [pc, #328]	; (800fb20 <USB_DeactivateEndpoint+0x20c>)
 800f9d8:	4323      	orrs	r3, r4
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	009b      	lsls	r3, r3, #2
 800f9e6:	4413      	add	r3, r2
 800f9e8:	881b      	ldrh	r3, [r3, #0]
 800f9ea:	b29b      	uxth	r3, r3
 800f9ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f9f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9f4:	b29c      	uxth	r4, r3
 800f9f6:	687a      	ldr	r2, [r7, #4]
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	009b      	lsls	r3, r3, #2
 800f9fe:	441a      	add	r2, r3
 800fa00:	4b46      	ldr	r3, [pc, #280]	; (800fb1c <USB_DeactivateEndpoint+0x208>)
 800fa02:	4323      	orrs	r3, r4
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	8013      	strh	r3, [r2, #0]
 800fa08:	e10d      	b.n	800fc26 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	785b      	ldrb	r3, [r3, #1]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	f040 8088 	bne.w	800fb24 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	009b      	lsls	r3, r3, #2
 800fa1c:	4413      	add	r3, r2
 800fa1e:	881b      	ldrh	r3, [r3, #0]
 800fa20:	b29c      	uxth	r4, r3
 800fa22:	4623      	mov	r3, r4
 800fa24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d014      	beq.n	800fa56 <USB_DeactivateEndpoint+0x142>
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	009b      	lsls	r3, r3, #2
 800fa34:	4413      	add	r3, r2
 800fa36:	881b      	ldrh	r3, [r3, #0]
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa42:	b29c      	uxth	r4, r3
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	441a      	add	r2, r3
 800fa4e:	4b34      	ldr	r3, [pc, #208]	; (800fb20 <USB_DeactivateEndpoint+0x20c>)
 800fa50:	4323      	orrs	r3, r4
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	4413      	add	r3, r2
 800fa60:	881b      	ldrh	r3, [r3, #0]
 800fa62:	b29c      	uxth	r4, r3
 800fa64:	4623      	mov	r3, r4
 800fa66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d014      	beq.n	800fa98 <USB_DeactivateEndpoint+0x184>
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	4413      	add	r3, r2
 800fa78:	881b      	ldrh	r3, [r3, #0]
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa84:	b29c      	uxth	r4, r3
 800fa86:	687a      	ldr	r2, [r7, #4]
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	009b      	lsls	r3, r3, #2
 800fa8e:	441a      	add	r2, r3
 800fa90:	4b21      	ldr	r3, [pc, #132]	; (800fb18 <USB_DeactivateEndpoint+0x204>)
 800fa92:	4323      	orrs	r3, r4
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	009b      	lsls	r3, r3, #2
 800faa0:	4413      	add	r3, r2
 800faa2:	881b      	ldrh	r3, [r3, #0]
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800faaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800faae:	b29c      	uxth	r4, r3
 800fab0:	687a      	ldr	r2, [r7, #4]
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	441a      	add	r2, r3
 800faba:	4b17      	ldr	r3, [pc, #92]	; (800fb18 <USB_DeactivateEndpoint+0x204>)
 800fabc:	4323      	orrs	r3, r4
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	4413      	add	r3, r2
 800facc:	881b      	ldrh	r3, [r3, #0]
 800face:	b29b      	uxth	r3, r3
 800fad0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fad8:	b29c      	uxth	r4, r3
 800fada:	687a      	ldr	r2, [r7, #4]
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	781b      	ldrb	r3, [r3, #0]
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	441a      	add	r2, r3
 800fae4:	4b0d      	ldr	r3, [pc, #52]	; (800fb1c <USB_DeactivateEndpoint+0x208>)
 800fae6:	4323      	orrs	r3, r4
 800fae8:	b29b      	uxth	r3, r3
 800faea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	4413      	add	r3, r2
 800faf6:	881b      	ldrh	r3, [r3, #0]
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fafe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb02:	b29c      	uxth	r4, r3
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	009b      	lsls	r3, r3, #2
 800fb0c:	441a      	add	r2, r3
 800fb0e:	4b03      	ldr	r3, [pc, #12]	; (800fb1c <USB_DeactivateEndpoint+0x208>)
 800fb10:	4323      	orrs	r3, r4
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	8013      	strh	r3, [r2, #0]
 800fb16:	e086      	b.n	800fc26 <USB_DeactivateEndpoint+0x312>
 800fb18:	ffff80c0 	.word	0xffff80c0
 800fb1c:	ffff8080 	.word	0xffff8080
 800fb20:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	4413      	add	r3, r2
 800fb2e:	881b      	ldrh	r3, [r3, #0]
 800fb30:	b29c      	uxth	r4, r3
 800fb32:	4623      	mov	r3, r4
 800fb34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d014      	beq.n	800fb66 <USB_DeactivateEndpoint+0x252>
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	4413      	add	r3, r2
 800fb46:	881b      	ldrh	r3, [r3, #0]
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb52:	b29c      	uxth	r4, r3
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	781b      	ldrb	r3, [r3, #0]
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	441a      	add	r2, r3
 800fb5e:	4b35      	ldr	r3, [pc, #212]	; (800fc34 <USB_DeactivateEndpoint+0x320>)
 800fb60:	4323      	orrs	r3, r4
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	4413      	add	r3, r2
 800fb70:	881b      	ldrh	r3, [r3, #0]
 800fb72:	b29c      	uxth	r4, r3
 800fb74:	4623      	mov	r3, r4
 800fb76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d014      	beq.n	800fba8 <USB_DeactivateEndpoint+0x294>
 800fb7e:	687a      	ldr	r2, [r7, #4]
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	009b      	lsls	r3, r3, #2
 800fb86:	4413      	add	r3, r2
 800fb88:	881b      	ldrh	r3, [r3, #0]
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb94:	b29c      	uxth	r4, r3
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	009b      	lsls	r3, r3, #2
 800fb9e:	441a      	add	r2, r3
 800fba0:	4b25      	ldr	r3, [pc, #148]	; (800fc38 <USB_DeactivateEndpoint+0x324>)
 800fba2:	4323      	orrs	r3, r4
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	781b      	ldrb	r3, [r3, #0]
 800fbae:	009b      	lsls	r3, r3, #2
 800fbb0:	4413      	add	r3, r2
 800fbb2:	881b      	ldrh	r3, [r3, #0]
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbbe:	b29c      	uxth	r4, r3
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	441a      	add	r2, r3
 800fbca:	4b1a      	ldr	r3, [pc, #104]	; (800fc34 <USB_DeactivateEndpoint+0x320>)
 800fbcc:	4323      	orrs	r3, r4
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fbd2:	687a      	ldr	r2, [r7, #4]
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	009b      	lsls	r3, r3, #2
 800fbda:	4413      	add	r3, r2
 800fbdc:	881b      	ldrh	r3, [r3, #0]
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbe8:	b29c      	uxth	r4, r3
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	009b      	lsls	r3, r3, #2
 800fbf2:	441a      	add	r2, r3
 800fbf4:	4b11      	ldr	r3, [pc, #68]	; (800fc3c <USB_DeactivateEndpoint+0x328>)
 800fbf6:	4323      	orrs	r3, r4
 800fbf8:	b29b      	uxth	r3, r3
 800fbfa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	4413      	add	r3, r2
 800fc06:	881b      	ldrh	r3, [r3, #0]
 800fc08:	b29b      	uxth	r3, r3
 800fc0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fc0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc12:	b29c      	uxth	r4, r3
 800fc14:	687a      	ldr	r2, [r7, #4]
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	441a      	add	r2, r3
 800fc1e:	4b07      	ldr	r3, [pc, #28]	; (800fc3c <USB_DeactivateEndpoint+0x328>)
 800fc20:	4323      	orrs	r3, r4
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800fc26:	2300      	movs	r3, #0
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bc90      	pop	{r4, r7}
 800fc30:	4770      	bx	lr
 800fc32:	bf00      	nop
 800fc34:	ffffc080 	.word	0xffffc080
 800fc38:	ffff80c0 	.word	0xffff80c0
 800fc3c:	ffff8080 	.word	0xffff8080

0800fc40 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fc40:	b590      	push	{r4, r7, lr}
 800fc42:	b095      	sub	sp, #84	; 0x54
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	785b      	ldrb	r3, [r3, #1]
 800fc4e:	2b01      	cmp	r3, #1
 800fc50:	f040 815d 	bne.w	800ff0e <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	699a      	ldr	r2, [r3, #24]
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	691b      	ldr	r3, [r3, #16]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d909      	bls.n	800fc74 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	691b      	ldr	r3, [r3, #16]
 800fc64:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	699a      	ldr	r2, [r3, #24]
 800fc6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc6c:	1ad2      	subs	r2, r2, r3
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	619a      	str	r2, [r3, #24]
 800fc72:	e005      	b.n	800fc80 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	699b      	ldr	r3, [r3, #24]
 800fc78:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	7b1b      	ldrb	r3, [r3, #12]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d11a      	bne.n	800fcbe <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	6959      	ldr	r1, [r3, #20]
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	88da      	ldrh	r2, [r3, #6]
 800fc90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 fbb3 	bl	8010400 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fc9a:	687c      	ldr	r4, [r7, #4]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	441c      	add	r4, r3
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	00db      	lsls	r3, r3, #3
 800fcac:	4423      	add	r3, r4
 800fcae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fcb2:	60fb      	str	r3, [r7, #12]
 800fcb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcb6:	b29a      	uxth	r2, r3
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	801a      	strh	r2, [r3, #0]
 800fcbc:	e10b      	b.n	800fed6 <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	4413      	add	r3, r2
 800fcc8:	881b      	ldrh	r3, [r3, #0]
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d062      	beq.n	800fd9a <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fcd4:	687c      	ldr	r4, [r7, #4]
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	785b      	ldrb	r3, [r3, #1]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d144      	bne.n	800fd68 <USB_EPStartXfer+0x128>
 800fcde:	687c      	ldr	r4, [r7, #4]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	441c      	add	r4, r3
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	00db      	lsls	r3, r3, #3
 800fcf0:	4423      	add	r3, r4
 800fcf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fcf6:	613b      	str	r3, [r7, #16]
 800fcf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d110      	bne.n	800fd20 <USB_EPStartXfer+0xe0>
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	881b      	ldrh	r3, [r3, #0]
 800fd02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	801a      	strh	r2, [r3, #0]
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	881b      	ldrh	r3, [r3, #0]
 800fd10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	801a      	strh	r2, [r3, #0]
 800fd1e:	e037      	b.n	800fd90 <USB_EPStartXfer+0x150>
 800fd20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd22:	2b3d      	cmp	r3, #61	; 0x3d
 800fd24:	d811      	bhi.n	800fd4a <USB_EPStartXfer+0x10a>
 800fd26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd28:	085b      	lsrs	r3, r3, #1
 800fd2a:	647b      	str	r3, [r7, #68]	; 0x44
 800fd2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd2e:	f003 0301 	and.w	r3, r3, #1
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d002      	beq.n	800fd3c <USB_EPStartXfer+0xfc>
 800fd36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd38:	3301      	adds	r3, #1
 800fd3a:	647b      	str	r3, [r7, #68]	; 0x44
 800fd3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	029b      	lsls	r3, r3, #10
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	801a      	strh	r2, [r3, #0]
 800fd48:	e022      	b.n	800fd90 <USB_EPStartXfer+0x150>
 800fd4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd4c:	095b      	lsrs	r3, r3, #5
 800fd4e:	647b      	str	r3, [r7, #68]	; 0x44
 800fd50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	029b      	lsls	r3, r3, #10
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	801a      	strh	r2, [r3, #0]
 800fd66:	e013      	b.n	800fd90 <USB_EPStartXfer+0x150>
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	785b      	ldrb	r3, [r3, #1]
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	d10f      	bne.n	800fd90 <USB_EPStartXfer+0x150>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd76:	b29b      	uxth	r3, r3
 800fd78:	441c      	add	r4, r3
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	00db      	lsls	r3, r3, #3
 800fd80:	4423      	add	r3, r4
 800fd82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fd86:	617b      	str	r3, [r7, #20]
 800fd88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd8a:	b29a      	uxth	r2, r3
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	895b      	ldrh	r3, [r3, #10]
 800fd94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800fd98:	e061      	b.n	800fe5e <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	785b      	ldrb	r3, [r3, #1]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d144      	bne.n	800fe2c <USB_EPStartXfer+0x1ec>
 800fda2:	687c      	ldr	r4, [r7, #4]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	441c      	add	r4, r3
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	00db      	lsls	r3, r3, #3
 800fdb4:	4423      	add	r3, r4
 800fdb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fdba:	61bb      	str	r3, [r7, #24]
 800fdbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d110      	bne.n	800fde4 <USB_EPStartXfer+0x1a4>
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	881b      	ldrh	r3, [r3, #0]
 800fdc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fdca:	b29a      	uxth	r2, r3
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	801a      	strh	r2, [r3, #0]
 800fdd0:	69bb      	ldr	r3, [r7, #24]
 800fdd2:	881b      	ldrh	r3, [r3, #0]
 800fdd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fdd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fddc:	b29a      	uxth	r2, r3
 800fdde:	69bb      	ldr	r3, [r7, #24]
 800fde0:	801a      	strh	r2, [r3, #0]
 800fde2:	e038      	b.n	800fe56 <USB_EPStartXfer+0x216>
 800fde4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fde6:	2b3d      	cmp	r3, #61	; 0x3d
 800fde8:	d811      	bhi.n	800fe0e <USB_EPStartXfer+0x1ce>
 800fdea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdec:	085b      	lsrs	r3, r3, #1
 800fdee:	643b      	str	r3, [r7, #64]	; 0x40
 800fdf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdf2:	f003 0301 	and.w	r3, r3, #1
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d002      	beq.n	800fe00 <USB_EPStartXfer+0x1c0>
 800fdfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	643b      	str	r3, [r7, #64]	; 0x40
 800fe00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe02:	b29b      	uxth	r3, r3
 800fe04:	029b      	lsls	r3, r3, #10
 800fe06:	b29a      	uxth	r2, r3
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	801a      	strh	r2, [r3, #0]
 800fe0c:	e023      	b.n	800fe56 <USB_EPStartXfer+0x216>
 800fe0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe10:	095b      	lsrs	r3, r3, #5
 800fe12:	643b      	str	r3, [r7, #64]	; 0x40
 800fe14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe16:	b29b      	uxth	r3, r3
 800fe18:	029b      	lsls	r3, r3, #10
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	69bb      	ldr	r3, [r7, #24]
 800fe28:	801a      	strh	r2, [r3, #0]
 800fe2a:	e014      	b.n	800fe56 <USB_EPStartXfer+0x216>
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	785b      	ldrb	r3, [r3, #1]
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d110      	bne.n	800fe56 <USB_EPStartXfer+0x216>
 800fe34:	687c      	ldr	r4, [r7, #4]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	441c      	add	r4, r3
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	00db      	lsls	r3, r3, #3
 800fe46:	4423      	add	r3, r4
 800fe48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fe4c:	61fb      	str	r3, [r7, #28]
 800fe4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe50:	b29a      	uxth	r2, r3
 800fe52:	69fb      	ldr	r3, [r7, #28]
 800fe54:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	891b      	ldrh	r3, [r3, #8]
 800fe5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	6959      	ldr	r1, [r3, #20]
 800fe62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f000 fac8 	bl	8010400 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	785b      	ldrb	r3, [r3, #1]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d115      	bne.n	800fea4 <USB_EPStartXfer+0x264>
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	009b      	lsls	r3, r3, #2
 800fe80:	4413      	add	r3, r2
 800fe82:	881b      	ldrh	r3, [r3, #0]
 800fe84:	b29b      	uxth	r3, r3
 800fe86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe8e:	b29c      	uxth	r4, r3
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	441a      	add	r2, r3
 800fe9a:	4b99      	ldr	r3, [pc, #612]	; (8010100 <USB_EPStartXfer+0x4c0>)
 800fe9c:	4323      	orrs	r3, r4
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	8013      	strh	r3, [r2, #0]
 800fea2:	e018      	b.n	800fed6 <USB_EPStartXfer+0x296>
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	785b      	ldrb	r3, [r3, #1]
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d114      	bne.n	800fed6 <USB_EPStartXfer+0x296>
 800feac:	687a      	ldr	r2, [r7, #4]
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	009b      	lsls	r3, r3, #2
 800feb4:	4413      	add	r3, r2
 800feb6:	881b      	ldrh	r3, [r3, #0]
 800feb8:	b29b      	uxth	r3, r3
 800feba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800febe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fec2:	b29c      	uxth	r4, r3
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	009b      	lsls	r3, r3, #2
 800fecc:	441a      	add	r2, r3
 800fece:	4b8d      	ldr	r3, [pc, #564]	; (8010104 <USB_EPStartXfer+0x4c4>)
 800fed0:	4323      	orrs	r3, r4
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fed6:	687a      	ldr	r2, [r7, #4]
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	4413      	add	r3, r2
 800fee0:	881b      	ldrh	r3, [r3, #0]
 800fee2:	b29b      	uxth	r3, r3
 800fee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800feec:	b29c      	uxth	r4, r3
 800feee:	f084 0310 	eor.w	r3, r4, #16
 800fef2:	b29c      	uxth	r4, r3
 800fef4:	f084 0320 	eor.w	r3, r4, #32
 800fef8:	b29c      	uxth	r4, r3
 800fefa:	687a      	ldr	r2, [r7, #4]
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	009b      	lsls	r3, r3, #2
 800ff02:	441a      	add	r2, r3
 800ff04:	4b80      	ldr	r3, [pc, #512]	; (8010108 <USB_EPStartXfer+0x4c8>)
 800ff06:	4323      	orrs	r3, r4
 800ff08:	b29b      	uxth	r3, r3
 800ff0a:	8013      	strh	r3, [r2, #0]
 800ff0c:	e13c      	b.n	8010188 <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	699a      	ldr	r2, [r3, #24]
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	691b      	ldr	r3, [r3, #16]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d909      	bls.n	800ff2e <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	691b      	ldr	r3, [r3, #16]
 800ff1e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	699a      	ldr	r2, [r3, #24]
 800ff24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff26:	1ad2      	subs	r2, r2, r3
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	619a      	str	r2, [r3, #24]
 800ff2c:	e005      	b.n	800ff3a <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	699b      	ldr	r3, [r3, #24]
 800ff32:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	2200      	movs	r2, #0
 800ff38:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	7b1b      	ldrb	r3, [r3, #12]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d144      	bne.n	800ffcc <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ff42:	687c      	ldr	r4, [r7, #4]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	441c      	add	r4, r3
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	00db      	lsls	r3, r3, #3
 800ff54:	4423      	add	r3, r4
 800ff56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ff5a:	623b      	str	r3, [r7, #32]
 800ff5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d110      	bne.n	800ff84 <USB_EPStartXfer+0x344>
 800ff62:	6a3b      	ldr	r3, [r7, #32]
 800ff64:	881b      	ldrh	r3, [r3, #0]
 800ff66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ff6a:	b29a      	uxth	r2, r3
 800ff6c:	6a3b      	ldr	r3, [r7, #32]
 800ff6e:	801a      	strh	r2, [r3, #0]
 800ff70:	6a3b      	ldr	r3, [r7, #32]
 800ff72:	881b      	ldrh	r3, [r3, #0]
 800ff74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff7c:	b29a      	uxth	r2, r3
 800ff7e:	6a3b      	ldr	r3, [r7, #32]
 800ff80:	801a      	strh	r2, [r3, #0]
 800ff82:	e0e6      	b.n	8010152 <USB_EPStartXfer+0x512>
 800ff84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff86:	2b3d      	cmp	r3, #61	; 0x3d
 800ff88:	d811      	bhi.n	800ffae <USB_EPStartXfer+0x36e>
 800ff8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff8c:	085b      	lsrs	r3, r3, #1
 800ff8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff92:	f003 0301 	and.w	r3, r3, #1
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d002      	beq.n	800ffa0 <USB_EPStartXfer+0x360>
 800ff9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffa2:	b29b      	uxth	r3, r3
 800ffa4:	029b      	lsls	r3, r3, #10
 800ffa6:	b29a      	uxth	r2, r3
 800ffa8:	6a3b      	ldr	r3, [r7, #32]
 800ffaa:	801a      	strh	r2, [r3, #0]
 800ffac:	e0d1      	b.n	8010152 <USB_EPStartXfer+0x512>
 800ffae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffb0:	095b      	lsrs	r3, r3, #5
 800ffb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	029b      	lsls	r3, r3, #10
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ffc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ffc4:	b29a      	uxth	r2, r3
 800ffc6:	6a3b      	ldr	r3, [r7, #32]
 800ffc8:	801a      	strh	r2, [r3, #0]
 800ffca:	e0c2      	b.n	8010152 <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	785b      	ldrb	r3, [r3, #1]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d144      	bne.n	801005e <USB_EPStartXfer+0x41e>
 800ffd4:	687c      	ldr	r4, [r7, #4]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	441c      	add	r4, r3
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	00db      	lsls	r3, r3, #3
 800ffe6:	4423      	add	r3, r4
 800ffe8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ffec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d110      	bne.n	8010016 <USB_EPStartXfer+0x3d6>
 800fff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff6:	881b      	ldrh	r3, [r3, #0]
 800fff8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fffc:	b29a      	uxth	r2, r3
 800fffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010000:	801a      	strh	r2, [r3, #0]
 8010002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010004:	881b      	ldrh	r3, [r3, #0]
 8010006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801000a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801000e:	b29a      	uxth	r2, r3
 8010010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010012:	801a      	strh	r2, [r3, #0]
 8010014:	e038      	b.n	8010088 <USB_EPStartXfer+0x448>
 8010016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010018:	2b3d      	cmp	r3, #61	; 0x3d
 801001a:	d811      	bhi.n	8010040 <USB_EPStartXfer+0x400>
 801001c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801001e:	085b      	lsrs	r3, r3, #1
 8010020:	63bb      	str	r3, [r7, #56]	; 0x38
 8010022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010024:	f003 0301 	and.w	r3, r3, #1
 8010028:	2b00      	cmp	r3, #0
 801002a:	d002      	beq.n	8010032 <USB_EPStartXfer+0x3f2>
 801002c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002e:	3301      	adds	r3, #1
 8010030:	63bb      	str	r3, [r7, #56]	; 0x38
 8010032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010034:	b29b      	uxth	r3, r3
 8010036:	029b      	lsls	r3, r3, #10
 8010038:	b29a      	uxth	r2, r3
 801003a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801003c:	801a      	strh	r2, [r3, #0]
 801003e:	e023      	b.n	8010088 <USB_EPStartXfer+0x448>
 8010040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010042:	095b      	lsrs	r3, r3, #5
 8010044:	63bb      	str	r3, [r7, #56]	; 0x38
 8010046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010048:	b29b      	uxth	r3, r3
 801004a:	029b      	lsls	r3, r3, #10
 801004c:	b29b      	uxth	r3, r3
 801004e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010056:	b29a      	uxth	r2, r3
 8010058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005a:	801a      	strh	r2, [r3, #0]
 801005c:	e014      	b.n	8010088 <USB_EPStartXfer+0x448>
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	785b      	ldrb	r3, [r3, #1]
 8010062:	2b01      	cmp	r3, #1
 8010064:	d110      	bne.n	8010088 <USB_EPStartXfer+0x448>
 8010066:	687c      	ldr	r4, [r7, #4]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801006e:	b29b      	uxth	r3, r3
 8010070:	441c      	add	r4, r3
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	00db      	lsls	r3, r3, #3
 8010078:	4423      	add	r3, r4
 801007a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801007e:	633b      	str	r3, [r7, #48]	; 0x30
 8010080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010082:	b29a      	uxth	r2, r3
 8010084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010086:	801a      	strh	r2, [r3, #0]
 8010088:	687c      	ldr	r4, [r7, #4]
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	785b      	ldrb	r3, [r3, #1]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d14b      	bne.n	801012a <USB_EPStartXfer+0x4ea>
 8010092:	687c      	ldr	r4, [r7, #4]
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801009a:	b29b      	uxth	r3, r3
 801009c:	441c      	add	r4, r3
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	00db      	lsls	r3, r3, #3
 80100a4:	4423      	add	r3, r4
 80100a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80100aa:	627b      	str	r3, [r7, #36]	; 0x24
 80100ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d110      	bne.n	80100d4 <USB_EPStartXfer+0x494>
 80100b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b4:	881b      	ldrh	r3, [r3, #0]
 80100b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100be:	801a      	strh	r2, [r3, #0]
 80100c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c2:	881b      	ldrh	r3, [r3, #0]
 80100c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80100c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80100cc:	b29a      	uxth	r2, r3
 80100ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d0:	801a      	strh	r2, [r3, #0]
 80100d2:	e03e      	b.n	8010152 <USB_EPStartXfer+0x512>
 80100d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100d6:	2b3d      	cmp	r3, #61	; 0x3d
 80100d8:	d818      	bhi.n	801010c <USB_EPStartXfer+0x4cc>
 80100da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100dc:	085b      	lsrs	r3, r3, #1
 80100de:	637b      	str	r3, [r7, #52]	; 0x34
 80100e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100e2:	f003 0301 	and.w	r3, r3, #1
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d002      	beq.n	80100f0 <USB_EPStartXfer+0x4b0>
 80100ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ec:	3301      	adds	r3, #1
 80100ee:	637b      	str	r3, [r7, #52]	; 0x34
 80100f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	029b      	lsls	r3, r3, #10
 80100f6:	b29a      	uxth	r2, r3
 80100f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fa:	801a      	strh	r2, [r3, #0]
 80100fc:	e029      	b.n	8010152 <USB_EPStartXfer+0x512>
 80100fe:	bf00      	nop
 8010100:	ffff80c0 	.word	0xffff80c0
 8010104:	ffffc080 	.word	0xffffc080
 8010108:	ffff8080 	.word	0xffff8080
 801010c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801010e:	095b      	lsrs	r3, r3, #5
 8010110:	637b      	str	r3, [r7, #52]	; 0x34
 8010112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010114:	b29b      	uxth	r3, r3
 8010116:	029b      	lsls	r3, r3, #10
 8010118:	b29b      	uxth	r3, r3
 801011a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801011e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010122:	b29a      	uxth	r2, r3
 8010124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010126:	801a      	strh	r2, [r3, #0]
 8010128:	e013      	b.n	8010152 <USB_EPStartXfer+0x512>
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	785b      	ldrb	r3, [r3, #1]
 801012e:	2b01      	cmp	r3, #1
 8010130:	d10f      	bne.n	8010152 <USB_EPStartXfer+0x512>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010138:	b29b      	uxth	r3, r3
 801013a:	441c      	add	r4, r3
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	00db      	lsls	r3, r3, #3
 8010142:	4423      	add	r3, r4
 8010144:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010148:	62bb      	str	r3, [r7, #40]	; 0x28
 801014a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801014c:	b29a      	uxth	r2, r3
 801014e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010150:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	009b      	lsls	r3, r3, #2
 801015a:	4413      	add	r3, r2
 801015c:	881b      	ldrh	r3, [r3, #0]
 801015e:	b29b      	uxth	r3, r3
 8010160:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010168:	b29c      	uxth	r4, r3
 801016a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 801016e:	b29c      	uxth	r4, r3
 8010170:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8010174:	b29c      	uxth	r4, r3
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	009b      	lsls	r3, r3, #2
 801017e:	441a      	add	r2, r3
 8010180:	4b04      	ldr	r3, [pc, #16]	; (8010194 <USB_EPStartXfer+0x554>)
 8010182:	4323      	orrs	r3, r4
 8010184:	b29b      	uxth	r3, r3
 8010186:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	3754      	adds	r7, #84	; 0x54
 801018e:	46bd      	mov	sp, r7
 8010190:	bd90      	pop	{r4, r7, pc}
 8010192:	bf00      	nop
 8010194:	ffff8080 	.word	0xffff8080

08010198 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010198:	b490      	push	{r4, r7}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	785b      	ldrb	r3, [r3, #1]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d018      	beq.n	80101dc <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	009b      	lsls	r3, r3, #2
 80101b2:	4413      	add	r3, r2
 80101b4:	881b      	ldrh	r3, [r3, #0]
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80101bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101c0:	b29c      	uxth	r4, r3
 80101c2:	f084 0310 	eor.w	r3, r4, #16
 80101c6:	b29c      	uxth	r4, r3
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	441a      	add	r2, r3
 80101d2:	4b11      	ldr	r3, [pc, #68]	; (8010218 <USB_EPSetStall+0x80>)
 80101d4:	4323      	orrs	r3, r4
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	8013      	strh	r3, [r2, #0]
 80101da:	e017      	b.n	801020c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	4413      	add	r3, r2
 80101e6:	881b      	ldrh	r3, [r3, #0]
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80101ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101f2:	b29c      	uxth	r4, r3
 80101f4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80101f8:	b29c      	uxth	r4, r3
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	009b      	lsls	r3, r3, #2
 8010202:	441a      	add	r2, r3
 8010204:	4b04      	ldr	r3, [pc, #16]	; (8010218 <USB_EPSetStall+0x80>)
 8010206:	4323      	orrs	r3, r4
 8010208:	b29b      	uxth	r3, r3
 801020a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801020c:	2300      	movs	r3, #0
}
 801020e:	4618      	mov	r0, r3
 8010210:	3708      	adds	r7, #8
 8010212:	46bd      	mov	sp, r7
 8010214:	bc90      	pop	{r4, r7}
 8010216:	4770      	bx	lr
 8010218:	ffff8080 	.word	0xffff8080

0801021c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801021c:	b490      	push	{r4, r7}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	7b1b      	ldrb	r3, [r3, #12]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d17d      	bne.n	801032a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	785b      	ldrb	r3, [r3, #1]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d03d      	beq.n	80102b2 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	4413      	add	r3, r2
 8010240:	881b      	ldrh	r3, [r3, #0]
 8010242:	b29c      	uxth	r4, r3
 8010244:	4623      	mov	r3, r4
 8010246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801024a:	2b00      	cmp	r3, #0
 801024c:	d014      	beq.n	8010278 <USB_EPClearStall+0x5c>
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	009b      	lsls	r3, r3, #2
 8010256:	4413      	add	r3, r2
 8010258:	881b      	ldrh	r3, [r3, #0]
 801025a:	b29b      	uxth	r3, r3
 801025c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010264:	b29c      	uxth	r4, r3
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	009b      	lsls	r3, r3, #2
 801026e:	441a      	add	r2, r3
 8010270:	4b31      	ldr	r3, [pc, #196]	; (8010338 <USB_EPClearStall+0x11c>)
 8010272:	4323      	orrs	r3, r4
 8010274:	b29b      	uxth	r3, r3
 8010276:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	78db      	ldrb	r3, [r3, #3]
 801027c:	2b01      	cmp	r3, #1
 801027e:	d054      	beq.n	801032a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010280:	687a      	ldr	r2, [r7, #4]
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	4413      	add	r3, r2
 801028a:	881b      	ldrh	r3, [r3, #0]
 801028c:	b29b      	uxth	r3, r3
 801028e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010296:	b29c      	uxth	r4, r3
 8010298:	f084 0320 	eor.w	r3, r4, #32
 801029c:	b29c      	uxth	r4, r3
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	441a      	add	r2, r3
 80102a8:	4b24      	ldr	r3, [pc, #144]	; (801033c <USB_EPClearStall+0x120>)
 80102aa:	4323      	orrs	r3, r4
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	8013      	strh	r3, [r2, #0]
 80102b0:	e03b      	b.n	801032a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	4413      	add	r3, r2
 80102bc:	881b      	ldrh	r3, [r3, #0]
 80102be:	b29c      	uxth	r4, r3
 80102c0:	4623      	mov	r3, r4
 80102c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d014      	beq.n	80102f4 <USB_EPClearStall+0xd8>
 80102ca:	687a      	ldr	r2, [r7, #4]
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	009b      	lsls	r3, r3, #2
 80102d2:	4413      	add	r3, r2
 80102d4:	881b      	ldrh	r3, [r3, #0]
 80102d6:	b29b      	uxth	r3, r3
 80102d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102e0:	b29c      	uxth	r4, r3
 80102e2:	687a      	ldr	r2, [r7, #4]
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	009b      	lsls	r3, r3, #2
 80102ea:	441a      	add	r2, r3
 80102ec:	4b14      	ldr	r3, [pc, #80]	; (8010340 <USB_EPClearStall+0x124>)
 80102ee:	4323      	orrs	r3, r4
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80102f4:	687a      	ldr	r2, [r7, #4]
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	009b      	lsls	r3, r3, #2
 80102fc:	4413      	add	r3, r2
 80102fe:	881b      	ldrh	r3, [r3, #0]
 8010300:	b29b      	uxth	r3, r3
 8010302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801030a:	b29c      	uxth	r4, r3
 801030c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8010310:	b29c      	uxth	r4, r3
 8010312:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8010316:	b29c      	uxth	r4, r3
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	781b      	ldrb	r3, [r3, #0]
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	441a      	add	r2, r3
 8010322:	4b06      	ldr	r3, [pc, #24]	; (801033c <USB_EPClearStall+0x120>)
 8010324:	4323      	orrs	r3, r4
 8010326:	b29b      	uxth	r3, r3
 8010328:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801032a:	2300      	movs	r3, #0
}
 801032c:	4618      	mov	r0, r3
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bc90      	pop	{r4, r7}
 8010334:	4770      	bx	lr
 8010336:	bf00      	nop
 8010338:	ffff80c0 	.word	0xffff80c0
 801033c:	ffff8080 	.word	0xffff8080
 8010340:	ffffc080 	.word	0xffffc080

08010344 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2201      	movs	r2, #1
 8010350:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2203      	movs	r2, #3
 8010360:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010364:	2300      	movs	r3, #0
}
 8010366:	4618      	mov	r0, r3
 8010368:	370c      	adds	r7, #12
 801036a:	46bd      	mov	sp, r7
 801036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010370:	4770      	bx	lr

08010372 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010372:	b480      	push	{r7}
 8010374:	b083      	sub	sp, #12
 8010376:	af00      	add	r7, sp, #0
 8010378:	6078      	str	r0, [r7, #4]
 801037a:	460b      	mov	r3, r1
 801037c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801037e:	78fb      	ldrb	r3, [r7, #3]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d103      	bne.n	801038c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2280      	movs	r2, #128	; 0x80
 8010388:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 801038c:	2300      	movs	r3, #0
}
 801038e:	4618      	mov	r0, r3
 8010390:	370c      	adds	r7, #12
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr

0801039a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801039a:	b480      	push	{r7}
 801039c:	b083      	sub	sp, #12
 801039e:	af00      	add	r7, sp, #0
 80103a0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80103ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80103b2:	b29a      	uxth	r2, r3
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80103ba:	2300      	movs	r3, #0
}
 80103bc:	4618      	mov	r0, r3
 80103be:	370c      	adds	r7, #12
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr

080103c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b085      	sub	sp, #20
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80103da:	68fb      	ldr	r3, [r7, #12]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3714      	adds	r7, #20
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80103f2:	2300      	movs	r3, #0
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr

08010400 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010400:	b480      	push	{r7}
 8010402:	b08d      	sub	sp, #52	; 0x34
 8010404:	af00      	add	r7, sp, #0
 8010406:	60f8      	str	r0, [r7, #12]
 8010408:	60b9      	str	r1, [r7, #8]
 801040a:	4611      	mov	r1, r2
 801040c:	461a      	mov	r2, r3
 801040e:	460b      	mov	r3, r1
 8010410:	80fb      	strh	r3, [r7, #6]
 8010412:	4613      	mov	r3, r2
 8010414:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8010416:	88bb      	ldrh	r3, [r7, #4]
 8010418:	3301      	adds	r3, #1
 801041a:	085b      	lsrs	r3, r3, #1
 801041c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010426:	88fa      	ldrh	r2, [r7, #6]
 8010428:	69fb      	ldr	r3, [r7, #28]
 801042a:	4413      	add	r3, r2
 801042c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010430:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8010432:	6a3b      	ldr	r3, [r7, #32]
 8010434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010436:	e01b      	b.n	8010470 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 801043e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010440:	3301      	adds	r3, #1
 8010442:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8010444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	b29b      	uxth	r3, r3
 801044a:	021b      	lsls	r3, r3, #8
 801044c:	b29b      	uxth	r3, r3
 801044e:	461a      	mov	r2, r3
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	4313      	orrs	r3, r2
 8010454:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	b29a      	uxth	r2, r3
 801045a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801045e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010460:	3302      	adds	r3, #2
 8010462:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8010464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010466:	3301      	adds	r3, #1
 8010468:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 801046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046c:	3b01      	subs	r3, #1
 801046e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1e0      	bne.n	8010438 <USB_WritePMA+0x38>
  }
}
 8010476:	bf00      	nop
 8010478:	3734      	adds	r7, #52	; 0x34
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr

08010482 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010482:	b480      	push	{r7}
 8010484:	b08b      	sub	sp, #44	; 0x2c
 8010486:	af00      	add	r7, sp, #0
 8010488:	60f8      	str	r0, [r7, #12]
 801048a:	60b9      	str	r1, [r7, #8]
 801048c:	4611      	mov	r1, r2
 801048e:	461a      	mov	r2, r3
 8010490:	460b      	mov	r3, r1
 8010492:	80fb      	strh	r3, [r7, #6]
 8010494:	4613      	mov	r3, r2
 8010496:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010498:	88bb      	ldrh	r3, [r7, #4]
 801049a:	085b      	lsrs	r3, r3, #1
 801049c:	b29b      	uxth	r3, r3
 801049e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80104a8:	88fa      	ldrh	r2, [r7, #6]
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	4413      	add	r3, r2
 80104ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80104b2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	627b      	str	r3, [r7, #36]	; 0x24
 80104b8:	e018      	b.n	80104ec <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80104ba:	6a3b      	ldr	r3, [r7, #32]
 80104bc:	881b      	ldrh	r3, [r3, #0]
 80104be:	b29b      	uxth	r3, r3
 80104c0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80104c2:	6a3b      	ldr	r3, [r7, #32]
 80104c4:	3302      	adds	r3, #2
 80104c6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80104c8:	693b      	ldr	r3, [r7, #16]
 80104ca:	b2da      	uxtb	r2, r3
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	3301      	adds	r3, #1
 80104d4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	0a1b      	lsrs	r3, r3, #8
 80104da:	b2da      	uxtb	r2, r3
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80104e0:	69fb      	ldr	r3, [r7, #28]
 80104e2:	3301      	adds	r3, #1
 80104e4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80104e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e8:	3b01      	subs	r3, #1
 80104ea:	627b      	str	r3, [r7, #36]	; 0x24
 80104ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d1e3      	bne.n	80104ba <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80104f2:	88bb      	ldrh	r3, [r7, #4]
 80104f4:	f003 0301 	and.w	r3, r3, #1
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d007      	beq.n	801050e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80104fe:	6a3b      	ldr	r3, [r7, #32]
 8010500:	881b      	ldrh	r3, [r3, #0]
 8010502:	b29b      	uxth	r3, r3
 8010504:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	b2da      	uxtb	r2, r3
 801050a:	69fb      	ldr	r3, [r7, #28]
 801050c:	701a      	strb	r2, [r3, #0]
  }
}
 801050e:	bf00      	nop
 8010510:	372c      	adds	r7, #44	; 0x2c
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr
	...

0801051c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801051c:	b480      	push	{r7}
 801051e:	b085      	sub	sp, #20
 8010520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010522:	f3ef 8305 	mrs	r3, IPSR
 8010526:	60bb      	str	r3, [r7, #8]
  return(result);
 8010528:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801052a:	2b00      	cmp	r3, #0
 801052c:	d10f      	bne.n	801054e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801052e:	f3ef 8310 	mrs	r3, PRIMASK
 8010532:	607b      	str	r3, [r7, #4]
  return(result);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d109      	bne.n	801054e <osKernelInitialize+0x32>
 801053a:	4b11      	ldr	r3, [pc, #68]	; (8010580 <osKernelInitialize+0x64>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	2b02      	cmp	r3, #2
 8010540:	d109      	bne.n	8010556 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010542:	f3ef 8311 	mrs	r3, BASEPRI
 8010546:	603b      	str	r3, [r7, #0]
  return(result);
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d003      	beq.n	8010556 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801054e:	f06f 0305 	mvn.w	r3, #5
 8010552:	60fb      	str	r3, [r7, #12]
 8010554:	e00c      	b.n	8010570 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010556:	4b0a      	ldr	r3, [pc, #40]	; (8010580 <osKernelInitialize+0x64>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d105      	bne.n	801056a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 801055e:	4b08      	ldr	r3, [pc, #32]	; (8010580 <osKernelInitialize+0x64>)
 8010560:	2201      	movs	r2, #1
 8010562:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010564:	2300      	movs	r3, #0
 8010566:	60fb      	str	r3, [r7, #12]
 8010568:	e002      	b.n	8010570 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801056a:	f04f 33ff 	mov.w	r3, #4294967295
 801056e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010570:	68fb      	ldr	r3, [r7, #12]
}
 8010572:	4618      	mov	r0, r3
 8010574:	3714      	adds	r7, #20
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr
 801057e:	bf00      	nop
 8010580:	20000cb8 	.word	0x20000cb8

08010584 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010584:	b580      	push	{r7, lr}
 8010586:	b084      	sub	sp, #16
 8010588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801058a:	f3ef 8305 	mrs	r3, IPSR
 801058e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010590:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010592:	2b00      	cmp	r3, #0
 8010594:	d10f      	bne.n	80105b6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010596:	f3ef 8310 	mrs	r3, PRIMASK
 801059a:	607b      	str	r3, [r7, #4]
  return(result);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d109      	bne.n	80105b6 <osKernelStart+0x32>
 80105a2:	4b11      	ldr	r3, [pc, #68]	; (80105e8 <osKernelStart+0x64>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	2b02      	cmp	r3, #2
 80105a8:	d109      	bne.n	80105be <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80105aa:	f3ef 8311 	mrs	r3, BASEPRI
 80105ae:	603b      	str	r3, [r7, #0]
  return(result);
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d003      	beq.n	80105be <osKernelStart+0x3a>
    stat = osErrorISR;
 80105b6:	f06f 0305 	mvn.w	r3, #5
 80105ba:	60fb      	str	r3, [r7, #12]
 80105bc:	e00e      	b.n	80105dc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80105be:	4b0a      	ldr	r3, [pc, #40]	; (80105e8 <osKernelStart+0x64>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d107      	bne.n	80105d6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80105c6:	4b08      	ldr	r3, [pc, #32]	; (80105e8 <osKernelStart+0x64>)
 80105c8:	2202      	movs	r2, #2
 80105ca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80105cc:	f002 fee2 	bl	8013394 <vTaskStartScheduler>
      stat = osOK;
 80105d0:	2300      	movs	r3, #0
 80105d2:	60fb      	str	r3, [r7, #12]
 80105d4:	e002      	b.n	80105dc <osKernelStart+0x58>
    } else {
      stat = osError;
 80105d6:	f04f 33ff 	mov.w	r3, #4294967295
 80105da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80105dc:	68fb      	ldr	r3, [r7, #12]
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3710      	adds	r7, #16
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
 80105e6:	bf00      	nop
 80105e8:	20000cb8 	.word	0x20000cb8

080105ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b092      	sub	sp, #72	; 0x48
 80105f0:	af04      	add	r7, sp, #16
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80105f8:	2300      	movs	r3, #0
 80105fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105fc:	f3ef 8305 	mrs	r3, IPSR
 8010600:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8010602:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8010604:	2b00      	cmp	r3, #0
 8010606:	f040 8095 	bne.w	8010734 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801060a:	f3ef 8310 	mrs	r3, PRIMASK
 801060e:	623b      	str	r3, [r7, #32]
  return(result);
 8010610:	6a3b      	ldr	r3, [r7, #32]
 8010612:	2b00      	cmp	r3, #0
 8010614:	f040 808e 	bne.w	8010734 <osThreadNew+0x148>
 8010618:	4b49      	ldr	r3, [pc, #292]	; (8010740 <osThreadNew+0x154>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b02      	cmp	r3, #2
 801061e:	d106      	bne.n	801062e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010620:	f3ef 8311 	mrs	r3, BASEPRI
 8010624:	61fb      	str	r3, [r7, #28]
  return(result);
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	2b00      	cmp	r3, #0
 801062a:	f040 8083 	bne.w	8010734 <osThreadNew+0x148>
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d07f      	beq.n	8010734 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8010634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010638:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 801063a:	2318      	movs	r3, #24
 801063c:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 801063e:	2300      	movs	r3, #0
 8010640:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8010642:	f107 031b 	add.w	r3, r7, #27
 8010646:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8010648:	f04f 33ff 	mov.w	r3, #4294967295
 801064c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d045      	beq.n	80106e0 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d002      	beq.n	8010662 <osThreadNew+0x76>
        name = attr->name;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	699b      	ldr	r3, [r3, #24]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d002      	beq.n	8010670 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	699b      	ldr	r3, [r3, #24]
 801066e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010672:	2b00      	cmp	r3, #0
 8010674:	d008      	beq.n	8010688 <osThreadNew+0x9c>
 8010676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010678:	2b38      	cmp	r3, #56	; 0x38
 801067a:	d805      	bhi.n	8010688 <osThreadNew+0x9c>
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	f003 0301 	and.w	r3, r3, #1
 8010684:	2b00      	cmp	r3, #0
 8010686:	d001      	beq.n	801068c <osThreadNew+0xa0>
        return (NULL);
 8010688:	2300      	movs	r3, #0
 801068a:	e054      	b.n	8010736 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	695b      	ldr	r3, [r3, #20]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d003      	beq.n	801069c <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	695b      	ldr	r3, [r3, #20]
 8010698:	089b      	lsrs	r3, r3, #2
 801069a:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	689b      	ldr	r3, [r3, #8]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00e      	beq.n	80106c2 <osThreadNew+0xd6>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	2b63      	cmp	r3, #99	; 0x63
 80106aa:	d90a      	bls.n	80106c2 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d006      	beq.n	80106c2 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	695b      	ldr	r3, [r3, #20]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d002      	beq.n	80106c2 <osThreadNew+0xd6>
        mem = 1;
 80106bc:	2301      	movs	r3, #1
 80106be:	62bb      	str	r3, [r7, #40]	; 0x28
 80106c0:	e010      	b.n	80106e4 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d10c      	bne.n	80106e4 <osThreadNew+0xf8>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	68db      	ldr	r3, [r3, #12]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d108      	bne.n	80106e4 <osThreadNew+0xf8>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	691b      	ldr	r3, [r3, #16]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d104      	bne.n	80106e4 <osThreadNew+0xf8>
          mem = 0;
 80106da:	2300      	movs	r3, #0
 80106dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80106de:	e001      	b.n	80106e4 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 80106e0:	2300      	movs	r3, #0
 80106e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80106e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d110      	bne.n	801070c <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80106ee:	687a      	ldr	r2, [r7, #4]
 80106f0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80106f2:	9202      	str	r2, [sp, #8]
 80106f4:	9301      	str	r3, [sp, #4]
 80106f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f8:	9300      	str	r3, [sp, #0]
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010700:	68f8      	ldr	r0, [r7, #12]
 8010702:	f002 fc79 	bl	8012ff8 <xTaskCreateStatic>
 8010706:	4603      	mov	r3, r0
 8010708:	617b      	str	r3, [r7, #20]
 801070a:	e013      	b.n	8010734 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 801070c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801070e:	2b00      	cmp	r3, #0
 8010710:	d110      	bne.n	8010734 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010714:	b29a      	uxth	r2, r3
 8010716:	f107 0314 	add.w	r3, r7, #20
 801071a:	9301      	str	r3, [sp, #4]
 801071c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071e:	9300      	str	r3, [sp, #0]
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010724:	68f8      	ldr	r0, [r7, #12]
 8010726:	f002 fcc0 	bl	80130aa <xTaskCreate>
 801072a:	4603      	mov	r3, r0
 801072c:	2b01      	cmp	r3, #1
 801072e:	d001      	beq.n	8010734 <osThreadNew+0x148>
          hTask = NULL;
 8010730:	2300      	movs	r3, #0
 8010732:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010734:	697b      	ldr	r3, [r7, #20]
}
 8010736:	4618      	mov	r0, r3
 8010738:	3738      	adds	r7, #56	; 0x38
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	20000cb8 	.word	0x20000cb8

08010744 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8010744:	b580      	push	{r7, lr}
 8010746:	b08a      	sub	sp, #40	; 0x28
 8010748:	af02      	add	r7, sp, #8
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8010752:	69fb      	ldr	r3, [r7, #28]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d002      	beq.n	801075e <osThreadFlagsSet+0x1a>
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	da03      	bge.n	8010766 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 801075e:	f06f 0303 	mvn.w	r3, #3
 8010762:	60fb      	str	r3, [r7, #12]
 8010764:	e046      	b.n	80107f4 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 8010766:	f04f 33ff 	mov.w	r3, #4294967295
 801076a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801076c:	f3ef 8305 	mrs	r3, IPSR
 8010770:	61bb      	str	r3, [r7, #24]
  return(result);
 8010772:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8010774:	2b00      	cmp	r3, #0
 8010776:	d10f      	bne.n	8010798 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010778:	f3ef 8310 	mrs	r3, PRIMASK
 801077c:	617b      	str	r3, [r7, #20]
  return(result);
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d109      	bne.n	8010798 <osThreadFlagsSet+0x54>
 8010784:	4b1e      	ldr	r3, [pc, #120]	; (8010800 <osThreadFlagsSet+0xbc>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2b02      	cmp	r3, #2
 801078a:	d126      	bne.n	80107da <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801078c:	f3ef 8311 	mrs	r3, BASEPRI
 8010790:	613b      	str	r3, [r7, #16]
  return(result);
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d020      	beq.n	80107da <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8010798:	2300      	movs	r3, #0
 801079a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 801079c:	f107 0308 	add.w	r3, r7, #8
 80107a0:	9300      	str	r3, [sp, #0]
 80107a2:	2300      	movs	r3, #0
 80107a4:	2201      	movs	r2, #1
 80107a6:	6839      	ldr	r1, [r7, #0]
 80107a8:	69f8      	ldr	r0, [r7, #28]
 80107aa:	f003 fdbd 	bl	8014328 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80107ae:	f107 020c 	add.w	r2, r7, #12
 80107b2:	2300      	movs	r3, #0
 80107b4:	9300      	str	r3, [sp, #0]
 80107b6:	4613      	mov	r3, r2
 80107b8:	2200      	movs	r2, #0
 80107ba:	2100      	movs	r1, #0
 80107bc:	69f8      	ldr	r0, [r7, #28]
 80107be:	f003 fdb3 	bl	8014328 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d015      	beq.n	80107f4 <osThreadFlagsSet+0xb0>
 80107c8:	4b0e      	ldr	r3, [pc, #56]	; (8010804 <osThreadFlagsSet+0xc0>)
 80107ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107ce:	601a      	str	r2, [r3, #0]
 80107d0:	f3bf 8f4f 	dsb	sy
 80107d4:	f3bf 8f6f 	isb	sy
 80107d8:	e00c      	b.n	80107f4 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80107da:	2300      	movs	r3, #0
 80107dc:	2201      	movs	r2, #1
 80107de:	6839      	ldr	r1, [r7, #0]
 80107e0:	69f8      	ldr	r0, [r7, #28]
 80107e2:	f003 fcfd 	bl	80141e0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80107e6:	f107 030c 	add.w	r3, r7, #12
 80107ea:	2200      	movs	r2, #0
 80107ec:	2100      	movs	r1, #0
 80107ee:	69f8      	ldr	r0, [r7, #28]
 80107f0:	f003 fcf6 	bl	80141e0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80107f4:	68fb      	ldr	r3, [r7, #12]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3720      	adds	r7, #32
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	20000cb8 	.word	0x20000cb8
 8010804:	e000ed04 	.word	0xe000ed04

08010808 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8010808:	b580      	push	{r7, lr}
 801080a:	b088      	sub	sp, #32
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010810:	f3ef 8305 	mrs	r3, IPSR
 8010814:	617b      	str	r3, [r7, #20]
  return(result);
 8010816:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8010818:	2b00      	cmp	r3, #0
 801081a:	d10f      	bne.n	801083c <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801081c:	f3ef 8310 	mrs	r3, PRIMASK
 8010820:	613b      	str	r3, [r7, #16]
  return(result);
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d109      	bne.n	801083c <osThreadFlagsClear+0x34>
 8010828:	4b1e      	ldr	r3, [pc, #120]	; (80108a4 <osThreadFlagsClear+0x9c>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	2b02      	cmp	r3, #2
 801082e:	d109      	bne.n	8010844 <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010830:	f3ef 8311 	mrs	r3, BASEPRI
 8010834:	60fb      	str	r3, [r7, #12]
  return(result);
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d003      	beq.n	8010844 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 801083c:	f06f 0305 	mvn.w	r3, #5
 8010840:	61fb      	str	r3, [r7, #28]
 8010842:	e02a      	b.n	801089a <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2b00      	cmp	r3, #0
 8010848:	da03      	bge.n	8010852 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 801084a:	f06f 0303 	mvn.w	r3, #3
 801084e:	61fb      	str	r3, [r7, #28]
 8010850:	e023      	b.n	801089a <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8010852:	f003 facb 	bl	8013dec <xTaskGetCurrentTaskHandle>
 8010856:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8010858:	f107 0308 	add.w	r3, r7, #8
 801085c:	2200      	movs	r2, #0
 801085e:	2100      	movs	r1, #0
 8010860:	69b8      	ldr	r0, [r7, #24]
 8010862:	f003 fcbd 	bl	80141e0 <xTaskGenericNotify>
 8010866:	4603      	mov	r3, r0
 8010868:	2b01      	cmp	r3, #1
 801086a:	d113      	bne.n	8010894 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	43da      	mvns	r2, r3
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	4013      	ands	r3, r2
 8010878:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 801087a:	68b9      	ldr	r1, [r7, #8]
 801087c:	2300      	movs	r3, #0
 801087e:	2203      	movs	r2, #3
 8010880:	69b8      	ldr	r0, [r7, #24]
 8010882:	f003 fcad 	bl	80141e0 <xTaskGenericNotify>
 8010886:	4603      	mov	r3, r0
 8010888:	2b01      	cmp	r3, #1
 801088a:	d006      	beq.n	801089a <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 801088c:	f04f 33ff 	mov.w	r3, #4294967295
 8010890:	61fb      	str	r3, [r7, #28]
 8010892:	e002      	b.n	801089a <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 8010894:	f04f 33ff 	mov.w	r3, #4294967295
 8010898:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 801089a:	69fb      	ldr	r3, [r7, #28]
}
 801089c:	4618      	mov	r0, r3
 801089e:	3720      	adds	r7, #32
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}
 80108a4:	20000cb8 	.word	0x20000cb8

080108a8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b08e      	sub	sp, #56	; 0x38
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	60f8      	str	r0, [r7, #12]
 80108b0:	60b9      	str	r1, [r7, #8]
 80108b2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108b4:	f3ef 8305 	mrs	r3, IPSR
 80108b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80108ba:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d10f      	bne.n	80108e0 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108c0:	f3ef 8310 	mrs	r3, PRIMASK
 80108c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80108c6:	69bb      	ldr	r3, [r7, #24]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d109      	bne.n	80108e0 <osThreadFlagsWait+0x38>
 80108cc:	4b3f      	ldr	r3, [pc, #252]	; (80109cc <osThreadFlagsWait+0x124>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	2b02      	cmp	r3, #2
 80108d2:	d109      	bne.n	80108e8 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80108d4:	f3ef 8311 	mrs	r3, BASEPRI
 80108d8:	617b      	str	r3, [r7, #20]
  return(result);
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d003      	beq.n	80108e8 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80108e0:	f06f 0305 	mvn.w	r3, #5
 80108e4:	637b      	str	r3, [r7, #52]	; 0x34
 80108e6:	e06b      	b.n	80109c0 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	da03      	bge.n	80108f6 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80108ee:	f06f 0303 	mvn.w	r3, #3
 80108f2:	637b      	str	r3, [r7, #52]	; 0x34
 80108f4:	e064      	b.n	80109c0 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	f003 0302 	and.w	r3, r3, #2
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d002      	beq.n	8010906 <osThreadFlagsWait+0x5e>
      clear = 0U;
 8010900:	2300      	movs	r3, #0
 8010902:	633b      	str	r3, [r7, #48]	; 0x30
 8010904:	e001      	b.n	801090a <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 801090a:	2300      	movs	r3, #0
 801090c:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8010912:	f002 fe87 	bl	8013624 <xTaskGetTickCount>
 8010916:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8010918:	f107 0210 	add.w	r2, r7, #16
 801091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010920:	2000      	movs	r0, #0
 8010922:	f003 fc03 	bl	801412c <xTaskNotifyWait>
 8010926:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8010928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092a:	2b01      	cmp	r3, #1
 801092c:	d137      	bne.n	801099e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 801092e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	4013      	ands	r3, r2
 8010934:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801093a:	4313      	orrs	r3, r2
 801093c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	f003 0301 	and.w	r3, r3, #1
 8010944:	2b00      	cmp	r3, #0
 8010946:	d00c      	beq.n	8010962 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8010948:	68fa      	ldr	r2, [r7, #12]
 801094a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801094c:	4013      	ands	r3, r2
 801094e:	68fa      	ldr	r2, [r7, #12]
 8010950:	429a      	cmp	r2, r3
 8010952:	d032      	beq.n	80109ba <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d10f      	bne.n	801097a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 801095a:	f06f 0302 	mvn.w	r3, #2
 801095e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8010960:	e02e      	b.n	80109c0 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8010962:	68fa      	ldr	r2, [r7, #12]
 8010964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010966:	4013      	ands	r3, r2
 8010968:	2b00      	cmp	r3, #0
 801096a:	d128      	bne.n	80109be <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d103      	bne.n	801097a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8010972:	f06f 0302 	mvn.w	r3, #2
 8010976:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8010978:	e022      	b.n	80109c0 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 801097a:	f002 fe53 	bl	8013624 <xTaskGetTickCount>
 801097e:	4602      	mov	r2, r0
 8010980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010982:	1ad3      	subs	r3, r2, r3
 8010984:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8010986:	6a3a      	ldr	r2, [r7, #32]
 8010988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098a:	429a      	cmp	r2, r3
 801098c:	d902      	bls.n	8010994 <osThreadFlagsWait+0xec>
          tout  = 0;
 801098e:	2300      	movs	r3, #0
 8010990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010992:	e00e      	b.n	80109b2 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8010994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010996:	6a3b      	ldr	r3, [r7, #32]
 8010998:	1ad3      	subs	r3, r2, r3
 801099a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801099c:	e009      	b.n	80109b2 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d103      	bne.n	80109ac <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 80109a4:	f06f 0302 	mvn.w	r3, #2
 80109a8:	637b      	str	r3, [r7, #52]	; 0x34
 80109aa:	e002      	b.n	80109b2 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80109ac:	f06f 0301 	mvn.w	r3, #1
 80109b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 80109b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d1af      	bne.n	8010918 <osThreadFlagsWait+0x70>
 80109b8:	e002      	b.n	80109c0 <osThreadFlagsWait+0x118>
            break;
 80109ba:	bf00      	nop
 80109bc:	e000      	b.n	80109c0 <osThreadFlagsWait+0x118>
            break;
 80109be:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80109c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3738      	adds	r7, #56	; 0x38
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
 80109ca:	bf00      	nop
 80109cc:	20000cb8 	.word	0x20000cb8

080109d0 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b086      	sub	sp, #24
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109d8:	f3ef 8305 	mrs	r3, IPSR
 80109dc:	613b      	str	r3, [r7, #16]
  return(result);
 80109de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d10f      	bne.n	8010a04 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109e4:	f3ef 8310 	mrs	r3, PRIMASK
 80109e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d109      	bne.n	8010a04 <osDelay+0x34>
 80109f0:	4b0d      	ldr	r3, [pc, #52]	; (8010a28 <osDelay+0x58>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2b02      	cmp	r3, #2
 80109f6:	d109      	bne.n	8010a0c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80109f8:	f3ef 8311 	mrs	r3, BASEPRI
 80109fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d003      	beq.n	8010a0c <osDelay+0x3c>
    stat = osErrorISR;
 8010a04:	f06f 0305 	mvn.w	r3, #5
 8010a08:	617b      	str	r3, [r7, #20]
 8010a0a:	e007      	b.n	8010a1c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d002      	beq.n	8010a1c <osDelay+0x4c>
      vTaskDelay(ticks);
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f002 fc88 	bl	801332c <vTaskDelay>
    }
  }

  return (stat);
 8010a1c:	697b      	ldr	r3, [r7, #20]
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3718      	adds	r7, #24
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	20000cb8 	.word	0x20000cb8

08010a2c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b084      	sub	sp, #16
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f004 f94f 	bl	8014cd8 <pvTimerGetTimerID>
 8010a3a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d005      	beq.n	8010a4e <TimerCallback+0x22>
    callb->func (callb->arg);
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	68fa      	ldr	r2, [r7, #12]
 8010a48:	6852      	ldr	r2, [r2, #4]
 8010a4a:	4610      	mov	r0, r2
 8010a4c:	4798      	blx	r3
  }
}
 8010a4e:	bf00      	nop
 8010a50:	3710      	adds	r7, #16
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
	...

08010a58 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b08e      	sub	sp, #56	; 0x38
 8010a5c:	af02      	add	r7, sp, #8
 8010a5e:	60f8      	str	r0, [r7, #12]
 8010a60:	607a      	str	r2, [r7, #4]
 8010a62:	603b      	str	r3, [r7, #0]
 8010a64:	460b      	mov	r3, r1
 8010a66:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a6c:	f3ef 8305 	mrs	r3, IPSR
 8010a70:	61bb      	str	r3, [r7, #24]
  return(result);
 8010a72:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d16a      	bne.n	8010b4e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a78:	f3ef 8310 	mrs	r3, PRIMASK
 8010a7c:	617b      	str	r3, [r7, #20]
  return(result);
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d164      	bne.n	8010b4e <osTimerNew+0xf6>
 8010a84:	4b34      	ldr	r3, [pc, #208]	; (8010b58 <osTimerNew+0x100>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2b02      	cmp	r3, #2
 8010a8a:	d105      	bne.n	8010a98 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8010a90:	613b      	str	r3, [r7, #16]
  return(result);
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d15a      	bne.n	8010b4e <osTimerNew+0xf6>
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d057      	beq.n	8010b4e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8010a9e:	2008      	movs	r0, #8
 8010aa0:	f000 fd60 	bl	8011564 <pvPortMalloc>
 8010aa4:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d050      	beq.n	8010b4e <osTimerNew+0xf6>
      callb->func = func;
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	687a      	ldr	r2, [r7, #4]
 8010ab6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8010ab8:	7afb      	ldrb	r3, [r7, #11]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d102      	bne.n	8010ac4 <osTimerNew+0x6c>
        reload = pdFALSE;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8010ac2:	e001      	b.n	8010ac8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8010ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8010acc:	623b      	str	r3, [r7, #32]
      name = NULL;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d01c      	beq.n	8010b12 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d002      	beq.n	8010ae6 <osTimerNew+0x8e>
          name = attr->name;
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d006      	beq.n	8010afc <osTimerNew+0xa4>
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	68db      	ldr	r3, [r3, #12]
 8010af2:	2b2f      	cmp	r3, #47	; 0x2f
 8010af4:	d902      	bls.n	8010afc <osTimerNew+0xa4>
          mem = 1;
 8010af6:	2301      	movs	r3, #1
 8010af8:	623b      	str	r3, [r7, #32]
 8010afa:	e00c      	b.n	8010b16 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	689b      	ldr	r3, [r3, #8]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d108      	bne.n	8010b16 <osTimerNew+0xbe>
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d104      	bne.n	8010b16 <osTimerNew+0xbe>
            mem = 0;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	623b      	str	r3, [r7, #32]
 8010b10:	e001      	b.n	8010b16 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8010b12:	2300      	movs	r3, #0
 8010b14:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8010b16:	6a3b      	ldr	r3, [r7, #32]
 8010b18:	2b01      	cmp	r3, #1
 8010b1a:	d10c      	bne.n	8010b36 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	689b      	ldr	r3, [r3, #8]
 8010b20:	9301      	str	r3, [sp, #4]
 8010b22:	4b0e      	ldr	r3, [pc, #56]	; (8010b5c <osTimerNew+0x104>)
 8010b24:	9300      	str	r3, [sp, #0]
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b2a:	2101      	movs	r1, #1
 8010b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b2e:	f003 fd80 	bl	8014632 <xTimerCreateStatic>
 8010b32:	62b8      	str	r0, [r7, #40]	; 0x28
 8010b34:	e00b      	b.n	8010b4e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8010b36:	6a3b      	ldr	r3, [r7, #32]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d108      	bne.n	8010b4e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8010b3c:	4b07      	ldr	r3, [pc, #28]	; (8010b5c <osTimerNew+0x104>)
 8010b3e:	9300      	str	r3, [sp, #0]
 8010b40:	69fb      	ldr	r3, [r7, #28]
 8010b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b44:	2101      	movs	r1, #1
 8010b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b48:	f003 fd52 	bl	80145f0 <xTimerCreate>
 8010b4c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8010b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3730      	adds	r7, #48	; 0x30
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	20000cb8 	.word	0x20000cb8
 8010b5c:	08010a2d 	.word	0x08010a2d

08010b60 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b08a      	sub	sp, #40	; 0x28
 8010b64:	af02      	add	r7, sp, #8
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b6e:	f3ef 8305 	mrs	r3, IPSR
 8010b72:	617b      	str	r3, [r7, #20]
  return(result);
 8010b74:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d10f      	bne.n	8010b9a <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8010b7e:	613b      	str	r3, [r7, #16]
  return(result);
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d109      	bne.n	8010b9a <osTimerStart+0x3a>
 8010b86:	4b15      	ldr	r3, [pc, #84]	; (8010bdc <osTimerStart+0x7c>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	2b02      	cmp	r3, #2
 8010b8c:	d109      	bne.n	8010ba2 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8010b92:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d003      	beq.n	8010ba2 <osTimerStart+0x42>
    stat = osErrorISR;
 8010b9a:	f06f 0305 	mvn.w	r3, #5
 8010b9e:	61fb      	str	r3, [r7, #28]
 8010ba0:	e017      	b.n	8010bd2 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d103      	bne.n	8010bb0 <osTimerStart+0x50>
    stat = osErrorParameter;
 8010ba8:	f06f 0303 	mvn.w	r3, #3
 8010bac:	61fb      	str	r3, [r7, #28]
 8010bae:	e010      	b.n	8010bd2 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	9300      	str	r3, [sp, #0]
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	683a      	ldr	r2, [r7, #0]
 8010bb8:	2104      	movs	r1, #4
 8010bba:	69b8      	ldr	r0, [r7, #24]
 8010bbc:	f003 fda6 	bl	801470c <xTimerGenericCommand>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	d102      	bne.n	8010bcc <osTimerStart+0x6c>
      stat = osOK;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	61fb      	str	r3, [r7, #28]
 8010bca:	e002      	b.n	8010bd2 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8010bcc:	f06f 0302 	mvn.w	r3, #2
 8010bd0:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8010bd2:	69fb      	ldr	r3, [r7, #28]
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3720      	adds	r7, #32
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	20000cb8 	.word	0x20000cb8

08010be0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b08a      	sub	sp, #40	; 0x28
 8010be4:	af02      	add	r7, sp, #8
 8010be6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010bec:	f3ef 8305 	mrs	r3, IPSR
 8010bf0:	617b      	str	r3, [r7, #20]
  return(result);
 8010bf2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d10f      	bne.n	8010c18 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8010bfc:	613b      	str	r3, [r7, #16]
  return(result);
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d109      	bne.n	8010c18 <osTimerStop+0x38>
 8010c04:	4b1a      	ldr	r3, [pc, #104]	; (8010c70 <osTimerStop+0x90>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2b02      	cmp	r3, #2
 8010c0a:	d109      	bne.n	8010c20 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8010c10:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d003      	beq.n	8010c20 <osTimerStop+0x40>
    stat = osErrorISR;
 8010c18:	f06f 0305 	mvn.w	r3, #5
 8010c1c:	61fb      	str	r3, [r7, #28]
 8010c1e:	e021      	b.n	8010c64 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d103      	bne.n	8010c2e <osTimerStop+0x4e>
    stat = osErrorParameter;
 8010c26:	f06f 0303 	mvn.w	r3, #3
 8010c2a:	61fb      	str	r3, [r7, #28]
 8010c2c:	e01a      	b.n	8010c64 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8010c2e:	69b8      	ldr	r0, [r7, #24]
 8010c30:	f004 f82e 	bl	8014c90 <xTimerIsTimerActive>
 8010c34:	4603      	mov	r3, r0
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d103      	bne.n	8010c42 <osTimerStop+0x62>
      stat = osErrorResource;
 8010c3a:	f06f 0302 	mvn.w	r3, #2
 8010c3e:	61fb      	str	r3, [r7, #28]
 8010c40:	e010      	b.n	8010c64 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8010c42:	2300      	movs	r3, #0
 8010c44:	9300      	str	r3, [sp, #0]
 8010c46:	2300      	movs	r3, #0
 8010c48:	2200      	movs	r2, #0
 8010c4a:	2103      	movs	r1, #3
 8010c4c:	69b8      	ldr	r0, [r7, #24]
 8010c4e:	f003 fd5d 	bl	801470c <xTimerGenericCommand>
 8010c52:	4603      	mov	r3, r0
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d102      	bne.n	8010c5e <osTimerStop+0x7e>
        stat = osOK;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	61fb      	str	r3, [r7, #28]
 8010c5c:	e002      	b.n	8010c64 <osTimerStop+0x84>
      } else {
        stat = osError;
 8010c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c62:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010c64:	69fb      	ldr	r3, [r7, #28]
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3720      	adds	r7, #32
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	20000cb8 	.word	0x20000cb8

08010c74 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b08a      	sub	sp, #40	; 0x28
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c80:	f3ef 8305 	mrs	r3, IPSR
 8010c84:	613b      	str	r3, [r7, #16]
  return(result);
 8010c86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	f040 8085 	bne.w	8010d98 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8010c92:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d17e      	bne.n	8010d98 <osMutexNew+0x124>
 8010c9a:	4b42      	ldr	r3, [pc, #264]	; (8010da4 <osMutexNew+0x130>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b02      	cmp	r3, #2
 8010ca0:	d105      	bne.n	8010cae <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ca2:	f3ef 8311 	mrs	r3, BASEPRI
 8010ca6:	60bb      	str	r3, [r7, #8]
  return(result);
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d174      	bne.n	8010d98 <osMutexNew+0x124>
    if (attr != NULL) {
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d003      	beq.n	8010cbc <osMutexNew+0x48>
      type = attr->attr_bits;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	623b      	str	r3, [r7, #32]
 8010cba:	e001      	b.n	8010cc0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010cc0:	6a3b      	ldr	r3, [r7, #32]
 8010cc2:	f003 0301 	and.w	r3, r3, #1
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d002      	beq.n	8010cd0 <osMutexNew+0x5c>
      rmtx = 1U;
 8010cca:	2301      	movs	r3, #1
 8010ccc:	61fb      	str	r3, [r7, #28]
 8010cce:	e001      	b.n	8010cd4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8010cd4:	6a3b      	ldr	r3, [r7, #32]
 8010cd6:	f003 0308 	and.w	r3, r3, #8
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d15c      	bne.n	8010d98 <osMutexNew+0x124>
      mem = -1;
 8010cde:	f04f 33ff 	mov.w	r3, #4294967295
 8010ce2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d015      	beq.n	8010d16 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	689b      	ldr	r3, [r3, #8]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d006      	beq.n	8010d00 <osMutexNew+0x8c>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	68db      	ldr	r3, [r3, #12]
 8010cf6:	2b4f      	cmp	r3, #79	; 0x4f
 8010cf8:	d902      	bls.n	8010d00 <osMutexNew+0x8c>
          mem = 1;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	61bb      	str	r3, [r7, #24]
 8010cfe:	e00c      	b.n	8010d1a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	689b      	ldr	r3, [r3, #8]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d108      	bne.n	8010d1a <osMutexNew+0xa6>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d104      	bne.n	8010d1a <osMutexNew+0xa6>
            mem = 0;
 8010d10:	2300      	movs	r3, #0
 8010d12:	61bb      	str	r3, [r7, #24]
 8010d14:	e001      	b.n	8010d1a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8010d16:	2300      	movs	r3, #0
 8010d18:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8010d1a:	69bb      	ldr	r3, [r7, #24]
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d112      	bne.n	8010d46 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8010d20:	69fb      	ldr	r3, [r7, #28]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d007      	beq.n	8010d36 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	689b      	ldr	r3, [r3, #8]
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	2004      	movs	r0, #4
 8010d2e:	f001 fa2f 	bl	8012190 <xQueueCreateMutexStatic>
 8010d32:	6278      	str	r0, [r7, #36]	; 0x24
 8010d34:	e016      	b.n	8010d64 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	689b      	ldr	r3, [r3, #8]
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	2001      	movs	r0, #1
 8010d3e:	f001 fa27 	bl	8012190 <xQueueCreateMutexStatic>
 8010d42:	6278      	str	r0, [r7, #36]	; 0x24
 8010d44:	e00e      	b.n	8010d64 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8010d46:	69bb      	ldr	r3, [r7, #24]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d10b      	bne.n	8010d64 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8010d4c:	69fb      	ldr	r3, [r7, #28]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d004      	beq.n	8010d5c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8010d52:	2004      	movs	r0, #4
 8010d54:	f001 fa04 	bl	8012160 <xQueueCreateMutex>
 8010d58:	6278      	str	r0, [r7, #36]	; 0x24
 8010d5a:	e003      	b.n	8010d64 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8010d5c:	2001      	movs	r0, #1
 8010d5e:	f001 f9ff 	bl	8012160 <xQueueCreateMutex>
 8010d62:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8010d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d00c      	beq.n	8010d84 <osMutexNew+0x110>
        if (attr != NULL) {
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d003      	beq.n	8010d78 <osMutexNew+0x104>
          name = attr->name;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	617b      	str	r3, [r7, #20]
 8010d76:	e001      	b.n	8010d7c <osMutexNew+0x108>
        } else {
          name = NULL;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8010d7c:	6979      	ldr	r1, [r7, #20]
 8010d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d80:	f002 f8b4 	bl	8012eec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d006      	beq.n	8010d98 <osMutexNew+0x124>
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d003      	beq.n	8010d98 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d92:	f043 0301 	orr.w	r3, r3, #1
 8010d96:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8010d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3728      	adds	r7, #40	; 0x28
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	bf00      	nop
 8010da4:	20000cb8 	.word	0x20000cb8

08010da8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b088      	sub	sp, #32
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f023 0301 	bic.w	r3, r3, #1
 8010db8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f003 0301 	and.w	r3, r3, #1
 8010dc0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dc6:	f3ef 8305 	mrs	r3, IPSR
 8010dca:	613b      	str	r3, [r7, #16]
  return(result);
 8010dcc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d10f      	bne.n	8010df2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8010dd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d109      	bne.n	8010df2 <osMutexAcquire+0x4a>
 8010dde:	4b20      	ldr	r3, [pc, #128]	; (8010e60 <osMutexAcquire+0xb8>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	2b02      	cmp	r3, #2
 8010de4:	d109      	bne.n	8010dfa <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010de6:	f3ef 8311 	mrs	r3, BASEPRI
 8010dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d003      	beq.n	8010dfa <osMutexAcquire+0x52>
    stat = osErrorISR;
 8010df2:	f06f 0305 	mvn.w	r3, #5
 8010df6:	61fb      	str	r3, [r7, #28]
 8010df8:	e02c      	b.n	8010e54 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8010dfa:	69bb      	ldr	r3, [r7, #24]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d103      	bne.n	8010e08 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8010e00:	f06f 0303 	mvn.w	r3, #3
 8010e04:	61fb      	str	r3, [r7, #28]
 8010e06:	e025      	b.n	8010e54 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d011      	beq.n	8010e32 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010e0e:	6839      	ldr	r1, [r7, #0]
 8010e10:	69b8      	ldr	r0, [r7, #24]
 8010e12:	f001 fa0b 	bl	801222c <xQueueTakeMutexRecursive>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	d01b      	beq.n	8010e54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d003      	beq.n	8010e2a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8010e22:	f06f 0301 	mvn.w	r3, #1
 8010e26:	61fb      	str	r3, [r7, #28]
 8010e28:	e014      	b.n	8010e54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010e2a:	f06f 0302 	mvn.w	r3, #2
 8010e2e:	61fb      	str	r3, [r7, #28]
 8010e30:	e010      	b.n	8010e54 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010e32:	6839      	ldr	r1, [r7, #0]
 8010e34:	69b8      	ldr	r0, [r7, #24]
 8010e36:	f001 fd89 	bl	801294c <xQueueSemaphoreTake>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b01      	cmp	r3, #1
 8010e3e:	d009      	beq.n	8010e54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d003      	beq.n	8010e4e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8010e46:	f06f 0301 	mvn.w	r3, #1
 8010e4a:	61fb      	str	r3, [r7, #28]
 8010e4c:	e002      	b.n	8010e54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010e4e:	f06f 0302 	mvn.w	r3, #2
 8010e52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010e54:	69fb      	ldr	r3, [r7, #28]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3720      	adds	r7, #32
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	20000cb8 	.word	0x20000cb8

08010e64 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b088      	sub	sp, #32
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f023 0301 	bic.w	r3, r3, #1
 8010e72:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f003 0301 	and.w	r3, r3, #1
 8010e7a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e80:	f3ef 8305 	mrs	r3, IPSR
 8010e84:	613b      	str	r3, [r7, #16]
  return(result);
 8010e86:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d10f      	bne.n	8010eac <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8010e90:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d109      	bne.n	8010eac <osMutexRelease+0x48>
 8010e98:	4b19      	ldr	r3, [pc, #100]	; (8010f00 <osMutexRelease+0x9c>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	2b02      	cmp	r3, #2
 8010e9e:	d109      	bne.n	8010eb4 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8010ea4:	60bb      	str	r3, [r7, #8]
  return(result);
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d003      	beq.n	8010eb4 <osMutexRelease+0x50>
    stat = osErrorISR;
 8010eac:	f06f 0305 	mvn.w	r3, #5
 8010eb0:	61fb      	str	r3, [r7, #28]
 8010eb2:	e01f      	b.n	8010ef4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8010eb4:	69bb      	ldr	r3, [r7, #24]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d103      	bne.n	8010ec2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8010eba:	f06f 0303 	mvn.w	r3, #3
 8010ebe:	61fb      	str	r3, [r7, #28]
 8010ec0:	e018      	b.n	8010ef4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d009      	beq.n	8010edc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010ec8:	69b8      	ldr	r0, [r7, #24]
 8010eca:	f001 f97c 	bl	80121c6 <xQueueGiveMutexRecursive>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b01      	cmp	r3, #1
 8010ed2:	d00f      	beq.n	8010ef4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010ed4:	f06f 0302 	mvn.w	r3, #2
 8010ed8:	61fb      	str	r3, [r7, #28]
 8010eda:	e00b      	b.n	8010ef4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010edc:	2300      	movs	r3, #0
 8010ede:	2200      	movs	r2, #0
 8010ee0:	2100      	movs	r1, #0
 8010ee2:	69b8      	ldr	r0, [r7, #24]
 8010ee4:	f001 fa3e 	bl	8012364 <xQueueGenericSend>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	2b01      	cmp	r3, #1
 8010eec:	d002      	beq.n	8010ef4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010eee:	f06f 0302 	mvn.w	r3, #2
 8010ef2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010ef4:	69fb      	ldr	r3, [r7, #28]
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3720      	adds	r7, #32
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}
 8010efe:	bf00      	nop
 8010f00:	20000cb8 	.word	0x20000cb8

08010f04 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b08c      	sub	sp, #48	; 0x30
 8010f08:	af02      	add	r7, sp, #8
 8010f0a:	60f8      	str	r0, [r7, #12]
 8010f0c:	60b9      	str	r1, [r7, #8]
 8010f0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010f10:	2300      	movs	r3, #0
 8010f12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f14:	f3ef 8305 	mrs	r3, IPSR
 8010f18:	61bb      	str	r3, [r7, #24]
  return(result);
 8010f1a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	f040 8088 	bne.w	8011032 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f22:	f3ef 8310 	mrs	r3, PRIMASK
 8010f26:	617b      	str	r3, [r7, #20]
  return(result);
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	f040 8081 	bne.w	8011032 <osSemaphoreNew+0x12e>
 8010f30:	4b42      	ldr	r3, [pc, #264]	; (801103c <osSemaphoreNew+0x138>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b02      	cmp	r3, #2
 8010f36:	d105      	bne.n	8010f44 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f38:	f3ef 8311 	mrs	r3, BASEPRI
 8010f3c:	613b      	str	r3, [r7, #16]
  return(result);
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d176      	bne.n	8011032 <osSemaphoreNew+0x12e>
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d073      	beq.n	8011032 <osSemaphoreNew+0x12e>
 8010f4a:	68ba      	ldr	r2, [r7, #8]
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	d86f      	bhi.n	8011032 <osSemaphoreNew+0x12e>
    mem = -1;
 8010f52:	f04f 33ff 	mov.w	r3, #4294967295
 8010f56:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d015      	beq.n	8010f8a <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	689b      	ldr	r3, [r3, #8]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d006      	beq.n	8010f74 <osSemaphoreNew+0x70>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	2b4f      	cmp	r3, #79	; 0x4f
 8010f6c:	d902      	bls.n	8010f74 <osSemaphoreNew+0x70>
        mem = 1;
 8010f6e:	2301      	movs	r3, #1
 8010f70:	623b      	str	r3, [r7, #32]
 8010f72:	e00c      	b.n	8010f8e <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	689b      	ldr	r3, [r3, #8]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d108      	bne.n	8010f8e <osSemaphoreNew+0x8a>
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	68db      	ldr	r3, [r3, #12]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d104      	bne.n	8010f8e <osSemaphoreNew+0x8a>
          mem = 0;
 8010f84:	2300      	movs	r3, #0
 8010f86:	623b      	str	r3, [r7, #32]
 8010f88:	e001      	b.n	8010f8e <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8010f8e:	6a3b      	ldr	r3, [r7, #32]
 8010f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f94:	d04d      	beq.n	8011032 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	2b01      	cmp	r3, #1
 8010f9a:	d129      	bne.n	8010ff0 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8010f9c:	6a3b      	ldr	r3, [r7, #32]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d10b      	bne.n	8010fba <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	689a      	ldr	r2, [r3, #8]
 8010fa6:	2303      	movs	r3, #3
 8010fa8:	9300      	str	r3, [sp, #0]
 8010faa:	4613      	mov	r3, r2
 8010fac:	2200      	movs	r2, #0
 8010fae:	2100      	movs	r1, #0
 8010fb0:	2001      	movs	r0, #1
 8010fb2:	f000 ffe9 	bl	8011f88 <xQueueGenericCreateStatic>
 8010fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8010fb8:	e005      	b.n	8010fc6 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010fba:	2203      	movs	r2, #3
 8010fbc:	2100      	movs	r1, #0
 8010fbe:	2001      	movs	r0, #1
 8010fc0:	f001 f854 	bl	801206c <xQueueGenericCreate>
 8010fc4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d022      	beq.n	8011012 <osSemaphoreNew+0x10e>
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d01f      	beq.n	8011012 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	2100      	movs	r1, #0
 8010fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fda:	f001 f9c3 	bl	8012364 <xQueueGenericSend>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d016      	beq.n	8011012 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8010fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fe6:	f001 fe36 	bl	8012c56 <vQueueDelete>
            hSemaphore = NULL;
 8010fea:	2300      	movs	r3, #0
 8010fec:	627b      	str	r3, [r7, #36]	; 0x24
 8010fee:	e010      	b.n	8011012 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8010ff0:	6a3b      	ldr	r3, [r7, #32]
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d108      	bne.n	8011008 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	689b      	ldr	r3, [r3, #8]
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	68b9      	ldr	r1, [r7, #8]
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	f001 f949 	bl	8012296 <xQueueCreateCountingSemaphoreStatic>
 8011004:	6278      	str	r0, [r7, #36]	; 0x24
 8011006:	e004      	b.n	8011012 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011008:	68b9      	ldr	r1, [r7, #8]
 801100a:	68f8      	ldr	r0, [r7, #12]
 801100c:	f001 f978 	bl	8012300 <xQueueCreateCountingSemaphore>
 8011010:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011014:	2b00      	cmp	r3, #0
 8011016:	d00c      	beq.n	8011032 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d003      	beq.n	8011026 <osSemaphoreNew+0x122>
          name = attr->name;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	61fb      	str	r3, [r7, #28]
 8011024:	e001      	b.n	801102a <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8011026:	2300      	movs	r3, #0
 8011028:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801102a:	69f9      	ldr	r1, [r7, #28]
 801102c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801102e:	f001 ff5d 	bl	8012eec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011034:	4618      	mov	r0, r3
 8011036:	3728      	adds	r7, #40	; 0x28
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	20000cb8 	.word	0x20000cb8

08011040 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011040:	b580      	push	{r7, lr}
 8011042:	b088      	sub	sp, #32
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801104e:	2300      	movs	r3, #0
 8011050:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d103      	bne.n	8011060 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011058:	f06f 0303 	mvn.w	r3, #3
 801105c:	61fb      	str	r3, [r7, #28]
 801105e:	e04b      	b.n	80110f8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011060:	f3ef 8305 	mrs	r3, IPSR
 8011064:	617b      	str	r3, [r7, #20]
  return(result);
 8011066:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011068:	2b00      	cmp	r3, #0
 801106a:	d10f      	bne.n	801108c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801106c:	f3ef 8310 	mrs	r3, PRIMASK
 8011070:	613b      	str	r3, [r7, #16]
  return(result);
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d109      	bne.n	801108c <osSemaphoreAcquire+0x4c>
 8011078:	4b22      	ldr	r3, [pc, #136]	; (8011104 <osSemaphoreAcquire+0xc4>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	2b02      	cmp	r3, #2
 801107e:	d128      	bne.n	80110d2 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011080:	f3ef 8311 	mrs	r3, BASEPRI
 8011084:	60fb      	str	r3, [r7, #12]
  return(result);
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d022      	beq.n	80110d2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d003      	beq.n	801109a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8011092:	f06f 0303 	mvn.w	r3, #3
 8011096:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011098:	e02d      	b.n	80110f6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801109a:	2300      	movs	r3, #0
 801109c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801109e:	f107 0308 	add.w	r3, r7, #8
 80110a2:	461a      	mov	r2, r3
 80110a4:	2100      	movs	r1, #0
 80110a6:	69b8      	ldr	r0, [r7, #24]
 80110a8:	f001 fd58 	bl	8012b5c <xQueueReceiveFromISR>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	d003      	beq.n	80110ba <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80110b2:	f06f 0302 	mvn.w	r3, #2
 80110b6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80110b8:	e01d      	b.n	80110f6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d01a      	beq.n	80110f6 <osSemaphoreAcquire+0xb6>
 80110c0:	4b11      	ldr	r3, [pc, #68]	; (8011108 <osSemaphoreAcquire+0xc8>)
 80110c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110c6:	601a      	str	r2, [r3, #0]
 80110c8:	f3bf 8f4f 	dsb	sy
 80110cc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80110d0:	e011      	b.n	80110f6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80110d2:	6839      	ldr	r1, [r7, #0]
 80110d4:	69b8      	ldr	r0, [r7, #24]
 80110d6:	f001 fc39 	bl	801294c <xQueueSemaphoreTake>
 80110da:	4603      	mov	r3, r0
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d00b      	beq.n	80110f8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d003      	beq.n	80110ee <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80110e6:	f06f 0301 	mvn.w	r3, #1
 80110ea:	61fb      	str	r3, [r7, #28]
 80110ec:	e004      	b.n	80110f8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80110ee:	f06f 0302 	mvn.w	r3, #2
 80110f2:	61fb      	str	r3, [r7, #28]
 80110f4:	e000      	b.n	80110f8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80110f6:	bf00      	nop
      }
    }
  }

  return (stat);
 80110f8:	69fb      	ldr	r3, [r7, #28]
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3720      	adds	r7, #32
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	20000cb8 	.word	0x20000cb8
 8011108:	e000ed04 	.word	0xe000ed04

0801110c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801110c:	b580      	push	{r7, lr}
 801110e:	b088      	sub	sp, #32
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011118:	2300      	movs	r3, #0
 801111a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801111c:	69bb      	ldr	r3, [r7, #24]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d103      	bne.n	801112a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011122:	f06f 0303 	mvn.w	r3, #3
 8011126:	61fb      	str	r3, [r7, #28]
 8011128:	e03e      	b.n	80111a8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801112a:	f3ef 8305 	mrs	r3, IPSR
 801112e:	617b      	str	r3, [r7, #20]
  return(result);
 8011130:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011132:	2b00      	cmp	r3, #0
 8011134:	d10f      	bne.n	8011156 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011136:	f3ef 8310 	mrs	r3, PRIMASK
 801113a:	613b      	str	r3, [r7, #16]
  return(result);
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d109      	bne.n	8011156 <osSemaphoreRelease+0x4a>
 8011142:	4b1c      	ldr	r3, [pc, #112]	; (80111b4 <osSemaphoreRelease+0xa8>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	2b02      	cmp	r3, #2
 8011148:	d120      	bne.n	801118c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801114a:	f3ef 8311 	mrs	r3, BASEPRI
 801114e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d01a      	beq.n	801118c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8011156:	2300      	movs	r3, #0
 8011158:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801115a:	f107 0308 	add.w	r3, r7, #8
 801115e:	4619      	mov	r1, r3
 8011160:	69b8      	ldr	r0, [r7, #24]
 8011162:	f001 fa8d 	bl	8012680 <xQueueGiveFromISR>
 8011166:	4603      	mov	r3, r0
 8011168:	2b01      	cmp	r3, #1
 801116a:	d003      	beq.n	8011174 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 801116c:	f06f 0302 	mvn.w	r3, #2
 8011170:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011172:	e018      	b.n	80111a6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d015      	beq.n	80111a6 <osSemaphoreRelease+0x9a>
 801117a:	4b0f      	ldr	r3, [pc, #60]	; (80111b8 <osSemaphoreRelease+0xac>)
 801117c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011180:	601a      	str	r2, [r3, #0]
 8011182:	f3bf 8f4f 	dsb	sy
 8011186:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801118a:	e00c      	b.n	80111a6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801118c:	2300      	movs	r3, #0
 801118e:	2200      	movs	r2, #0
 8011190:	2100      	movs	r1, #0
 8011192:	69b8      	ldr	r0, [r7, #24]
 8011194:	f001 f8e6 	bl	8012364 <xQueueGenericSend>
 8011198:	4603      	mov	r3, r0
 801119a:	2b01      	cmp	r3, #1
 801119c:	d004      	beq.n	80111a8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801119e:	f06f 0302 	mvn.w	r3, #2
 80111a2:	61fb      	str	r3, [r7, #28]
 80111a4:	e000      	b.n	80111a8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80111a6:	bf00      	nop
    }
  }

  return (stat);
 80111a8:	69fb      	ldr	r3, [r7, #28]
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3720      	adds	r7, #32
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	20000cb8 	.word	0x20000cb8
 80111b8:	e000ed04 	.word	0xe000ed04

080111bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80111bc:	b580      	push	{r7, lr}
 80111be:	b08c      	sub	sp, #48	; 0x30
 80111c0:	af02      	add	r7, sp, #8
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	60b9      	str	r1, [r7, #8]
 80111c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80111c8:	2300      	movs	r3, #0
 80111ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111cc:	f3ef 8305 	mrs	r3, IPSR
 80111d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80111d2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d170      	bne.n	80112ba <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111d8:	f3ef 8310 	mrs	r3, PRIMASK
 80111dc:	617b      	str	r3, [r7, #20]
  return(result);
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d16a      	bne.n	80112ba <osMessageQueueNew+0xfe>
 80111e4:	4b37      	ldr	r3, [pc, #220]	; (80112c4 <osMessageQueueNew+0x108>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	2b02      	cmp	r3, #2
 80111ea:	d105      	bne.n	80111f8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80111ec:	f3ef 8311 	mrs	r3, BASEPRI
 80111f0:	613b      	str	r3, [r7, #16]
  return(result);
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d160      	bne.n	80112ba <osMessageQueueNew+0xfe>
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d05d      	beq.n	80112ba <osMessageQueueNew+0xfe>
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d05a      	beq.n	80112ba <osMessageQueueNew+0xfe>
    mem = -1;
 8011204:	f04f 33ff 	mov.w	r3, #4294967295
 8011208:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d029      	beq.n	8011264 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d012      	beq.n	801123e <osMessageQueueNew+0x82>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	2b4f      	cmp	r3, #79	; 0x4f
 801121e:	d90e      	bls.n	801123e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011224:	2b00      	cmp	r3, #0
 8011226:	d00a      	beq.n	801123e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	695a      	ldr	r2, [r3, #20]
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	68b9      	ldr	r1, [r7, #8]
 8011230:	fb01 f303 	mul.w	r3, r1, r3
 8011234:	429a      	cmp	r2, r3
 8011236:	d302      	bcc.n	801123e <osMessageQueueNew+0x82>
        mem = 1;
 8011238:	2301      	movs	r3, #1
 801123a:	623b      	str	r3, [r7, #32]
 801123c:	e014      	b.n	8011268 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	689b      	ldr	r3, [r3, #8]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d110      	bne.n	8011268 <osMessageQueueNew+0xac>
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d10c      	bne.n	8011268 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011252:	2b00      	cmp	r3, #0
 8011254:	d108      	bne.n	8011268 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	695b      	ldr	r3, [r3, #20]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d104      	bne.n	8011268 <osMessageQueueNew+0xac>
          mem = 0;
 801125e:	2300      	movs	r3, #0
 8011260:	623b      	str	r3, [r7, #32]
 8011262:	e001      	b.n	8011268 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8011264:	2300      	movs	r3, #0
 8011266:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011268:	6a3b      	ldr	r3, [r7, #32]
 801126a:	2b01      	cmp	r3, #1
 801126c:	d10c      	bne.n	8011288 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	691a      	ldr	r2, [r3, #16]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	6899      	ldr	r1, [r3, #8]
 8011276:	2300      	movs	r3, #0
 8011278:	9300      	str	r3, [sp, #0]
 801127a:	460b      	mov	r3, r1
 801127c:	68b9      	ldr	r1, [r7, #8]
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f000 fe82 	bl	8011f88 <xQueueGenericCreateStatic>
 8011284:	6278      	str	r0, [r7, #36]	; 0x24
 8011286:	e008      	b.n	801129a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8011288:	6a3b      	ldr	r3, [r7, #32]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d105      	bne.n	801129a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801128e:	2200      	movs	r2, #0
 8011290:	68b9      	ldr	r1, [r7, #8]
 8011292:	68f8      	ldr	r0, [r7, #12]
 8011294:	f000 feea 	bl	801206c <xQueueGenericCreate>
 8011298:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129c:	2b00      	cmp	r3, #0
 801129e:	d00c      	beq.n	80112ba <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d003      	beq.n	80112ae <osMessageQueueNew+0xf2>
        name = attr->name;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	61fb      	str	r3, [r7, #28]
 80112ac:	e001      	b.n	80112b2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80112ae:	2300      	movs	r3, #0
 80112b0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80112b2:	69f9      	ldr	r1, [r7, #28]
 80112b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112b6:	f001 fe19 	bl	8012eec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80112ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3728      	adds	r7, #40	; 0x28
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	20000cb8 	.word	0x20000cb8

080112c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b08a      	sub	sp, #40	; 0x28
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	603b      	str	r3, [r7, #0]
 80112d4:	4613      	mov	r3, r2
 80112d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80112dc:	2300      	movs	r3, #0
 80112de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112e0:	f3ef 8305 	mrs	r3, IPSR
 80112e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80112e6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d10f      	bne.n	801130c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112ec:	f3ef 8310 	mrs	r3, PRIMASK
 80112f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80112f2:	69bb      	ldr	r3, [r7, #24]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d109      	bne.n	801130c <osMessageQueuePut+0x44>
 80112f8:	4b2b      	ldr	r3, [pc, #172]	; (80113a8 <osMessageQueuePut+0xe0>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	2b02      	cmp	r3, #2
 80112fe:	d12e      	bne.n	801135e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011300:	f3ef 8311 	mrs	r3, BASEPRI
 8011304:	617b      	str	r3, [r7, #20]
  return(result);
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d028      	beq.n	801135e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801130c:	6a3b      	ldr	r3, [r7, #32]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d005      	beq.n	801131e <osMessageQueuePut+0x56>
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d002      	beq.n	801131e <osMessageQueuePut+0x56>
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d003      	beq.n	8011326 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801131e:	f06f 0303 	mvn.w	r3, #3
 8011322:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011324:	e039      	b.n	801139a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8011326:	2300      	movs	r3, #0
 8011328:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801132a:	f107 0210 	add.w	r2, r7, #16
 801132e:	2300      	movs	r3, #0
 8011330:	68b9      	ldr	r1, [r7, #8]
 8011332:	6a38      	ldr	r0, [r7, #32]
 8011334:	f001 f910 	bl	8012558 <xQueueGenericSendFromISR>
 8011338:	4603      	mov	r3, r0
 801133a:	2b01      	cmp	r3, #1
 801133c:	d003      	beq.n	8011346 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801133e:	f06f 0302 	mvn.w	r3, #2
 8011342:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011344:	e029      	b.n	801139a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d026      	beq.n	801139a <osMessageQueuePut+0xd2>
 801134c:	4b17      	ldr	r3, [pc, #92]	; (80113ac <osMessageQueuePut+0xe4>)
 801134e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011352:	601a      	str	r2, [r3, #0]
 8011354:	f3bf 8f4f 	dsb	sy
 8011358:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801135c:	e01d      	b.n	801139a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801135e:	6a3b      	ldr	r3, [r7, #32]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d002      	beq.n	801136a <osMessageQueuePut+0xa2>
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d103      	bne.n	8011372 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801136a:	f06f 0303 	mvn.w	r3, #3
 801136e:	627b      	str	r3, [r7, #36]	; 0x24
 8011370:	e014      	b.n	801139c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011372:	2300      	movs	r3, #0
 8011374:	683a      	ldr	r2, [r7, #0]
 8011376:	68b9      	ldr	r1, [r7, #8]
 8011378:	6a38      	ldr	r0, [r7, #32]
 801137a:	f000 fff3 	bl	8012364 <xQueueGenericSend>
 801137e:	4603      	mov	r3, r0
 8011380:	2b01      	cmp	r3, #1
 8011382:	d00b      	beq.n	801139c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d003      	beq.n	8011392 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801138a:	f06f 0301 	mvn.w	r3, #1
 801138e:	627b      	str	r3, [r7, #36]	; 0x24
 8011390:	e004      	b.n	801139c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8011392:	f06f 0302 	mvn.w	r3, #2
 8011396:	627b      	str	r3, [r7, #36]	; 0x24
 8011398:	e000      	b.n	801139c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801139a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3728      	adds	r7, #40	; 0x28
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	bf00      	nop
 80113a8:	20000cb8 	.word	0x20000cb8
 80113ac:	e000ed04 	.word	0xe000ed04

080113b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b08a      	sub	sp, #40	; 0x28
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	60f8      	str	r0, [r7, #12]
 80113b8:	60b9      	str	r1, [r7, #8]
 80113ba:	607a      	str	r2, [r7, #4]
 80113bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80113c2:	2300      	movs	r3, #0
 80113c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113c6:	f3ef 8305 	mrs	r3, IPSR
 80113ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80113cc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d10f      	bne.n	80113f2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113d2:	f3ef 8310 	mrs	r3, PRIMASK
 80113d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80113d8:	69bb      	ldr	r3, [r7, #24]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d109      	bne.n	80113f2 <osMessageQueueGet+0x42>
 80113de:	4b2b      	ldr	r3, [pc, #172]	; (801148c <osMessageQueueGet+0xdc>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	2b02      	cmp	r3, #2
 80113e4:	d12e      	bne.n	8011444 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80113e6:	f3ef 8311 	mrs	r3, BASEPRI
 80113ea:	617b      	str	r3, [r7, #20]
  return(result);
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d028      	beq.n	8011444 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80113f2:	6a3b      	ldr	r3, [r7, #32]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d005      	beq.n	8011404 <osMessageQueueGet+0x54>
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d002      	beq.n	8011404 <osMessageQueueGet+0x54>
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d003      	beq.n	801140c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8011404:	f06f 0303 	mvn.w	r3, #3
 8011408:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801140a:	e038      	b.n	801147e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801140c:	2300      	movs	r3, #0
 801140e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011410:	f107 0310 	add.w	r3, r7, #16
 8011414:	461a      	mov	r2, r3
 8011416:	68b9      	ldr	r1, [r7, #8]
 8011418:	6a38      	ldr	r0, [r7, #32]
 801141a:	f001 fb9f 	bl	8012b5c <xQueueReceiveFromISR>
 801141e:	4603      	mov	r3, r0
 8011420:	2b01      	cmp	r3, #1
 8011422:	d003      	beq.n	801142c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8011424:	f06f 0302 	mvn.w	r3, #2
 8011428:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801142a:	e028      	b.n	801147e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d025      	beq.n	801147e <osMessageQueueGet+0xce>
 8011432:	4b17      	ldr	r3, [pc, #92]	; (8011490 <osMessageQueueGet+0xe0>)
 8011434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011438:	601a      	str	r2, [r3, #0]
 801143a:	f3bf 8f4f 	dsb	sy
 801143e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011442:	e01c      	b.n	801147e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011444:	6a3b      	ldr	r3, [r7, #32]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d002      	beq.n	8011450 <osMessageQueueGet+0xa0>
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d103      	bne.n	8011458 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8011450:	f06f 0303 	mvn.w	r3, #3
 8011454:	627b      	str	r3, [r7, #36]	; 0x24
 8011456:	e013      	b.n	8011480 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011458:	683a      	ldr	r2, [r7, #0]
 801145a:	68b9      	ldr	r1, [r7, #8]
 801145c:	6a38      	ldr	r0, [r7, #32]
 801145e:	f001 f999 	bl	8012794 <xQueueReceive>
 8011462:	4603      	mov	r3, r0
 8011464:	2b01      	cmp	r3, #1
 8011466:	d00b      	beq.n	8011480 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d003      	beq.n	8011476 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801146e:	f06f 0301 	mvn.w	r3, #1
 8011472:	627b      	str	r3, [r7, #36]	; 0x24
 8011474:	e004      	b.n	8011480 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8011476:	f06f 0302 	mvn.w	r3, #2
 801147a:	627b      	str	r3, [r7, #36]	; 0x24
 801147c:	e000      	b.n	8011480 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801147e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8011480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011482:	4618      	mov	r0, r3
 8011484:	3728      	adds	r7, #40	; 0x28
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	20000cb8 	.word	0x20000cb8
 8011490:	e000ed04 	.word	0xe000ed04

08011494 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8011494:	b580      	push	{r7, lr}
 8011496:	b088      	sub	sp, #32
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114a0:	f3ef 8305 	mrs	r3, IPSR
 80114a4:	617b      	str	r3, [r7, #20]
  return(result);
 80114a6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d10f      	bne.n	80114cc <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114ac:	f3ef 8310 	mrs	r3, PRIMASK
 80114b0:	613b      	str	r3, [r7, #16]
  return(result);
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d109      	bne.n	80114cc <osMessageQueueReset+0x38>
 80114b8:	4b0f      	ldr	r3, [pc, #60]	; (80114f8 <osMessageQueueReset+0x64>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	2b02      	cmp	r3, #2
 80114be:	d109      	bne.n	80114d4 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80114c0:	f3ef 8311 	mrs	r3, BASEPRI
 80114c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d003      	beq.n	80114d4 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 80114cc:	f06f 0305 	mvn.w	r3, #5
 80114d0:	61fb      	str	r3, [r7, #28]
 80114d2:	e00c      	b.n	80114ee <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 80114d4:	69bb      	ldr	r3, [r7, #24]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d103      	bne.n	80114e2 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 80114da:	f06f 0303 	mvn.w	r3, #3
 80114de:	61fb      	str	r3, [r7, #28]
 80114e0:	e005      	b.n	80114ee <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 80114e2:	2300      	movs	r3, #0
 80114e4:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 80114e6:	2100      	movs	r1, #0
 80114e8:	69b8      	ldr	r0, [r7, #24]
 80114ea:	f000 fce5 	bl	8011eb8 <xQueueGenericReset>
  }

  return (stat);
 80114ee:	69fb      	ldr	r3, [r7, #28]
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3720      	adds	r7, #32
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	20000cb8 	.word	0x20000cb8

080114fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80114fc:	b480      	push	{r7}
 80114fe:	b085      	sub	sp, #20
 8011500:	af00      	add	r7, sp, #0
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	4a07      	ldr	r2, [pc, #28]	; (8011528 <vApplicationGetIdleTaskMemory+0x2c>)
 801150c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	4a06      	ldr	r2, [pc, #24]	; (801152c <vApplicationGetIdleTaskMemory+0x30>)
 8011512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f44f 7200 	mov.w	r2, #512	; 0x200
 801151a:	601a      	str	r2, [r3, #0]
}
 801151c:	bf00      	nop
 801151e:	3714      	adds	r7, #20
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr
 8011528:	20000cbc 	.word	0x20000cbc
 801152c:	20000d20 	.word	0x20000d20

08011530 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011530:	b480      	push	{r7}
 8011532:	b085      	sub	sp, #20
 8011534:	af00      	add	r7, sp, #0
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	4a07      	ldr	r2, [pc, #28]	; (801155c <vApplicationGetTimerTaskMemory+0x2c>)
 8011540:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	4a06      	ldr	r2, [pc, #24]	; (8011560 <vApplicationGetTimerTaskMemory+0x30>)
 8011546:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801154e:	601a      	str	r2, [r3, #0]
}
 8011550:	bf00      	nop
 8011552:	3714      	adds	r7, #20
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr
 801155c:	20001520 	.word	0x20001520
 8011560:	20001584 	.word	0x20001584

08011564 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b08a      	sub	sp, #40	; 0x28
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801156c:	2300      	movs	r3, #0
 801156e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011570:	f001 ff76 	bl	8013460 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011574:	4b59      	ldr	r3, [pc, #356]	; (80116dc <pvPortMalloc+0x178>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d101      	bne.n	8011580 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801157c:	f000 f910 	bl	80117a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011580:	4b57      	ldr	r3, [pc, #348]	; (80116e0 <pvPortMalloc+0x17c>)
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	4013      	ands	r3, r2
 8011588:	2b00      	cmp	r3, #0
 801158a:	f040 808c 	bne.w	80116a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d01c      	beq.n	80115ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011594:	2208      	movs	r2, #8
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	4413      	add	r3, r2
 801159a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f003 0307 	and.w	r3, r3, #7
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d013      	beq.n	80115ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f023 0307 	bic.w	r3, r3, #7
 80115ac:	3308      	adds	r3, #8
 80115ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f003 0307 	and.w	r3, r3, #7
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d009      	beq.n	80115ce <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80115ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115be:	f383 8811 	msr	BASEPRI, r3
 80115c2:	f3bf 8f6f 	isb	sy
 80115c6:	f3bf 8f4f 	dsb	sy
 80115ca:	617b      	str	r3, [r7, #20]
 80115cc:	e7fe      	b.n	80115cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d068      	beq.n	80116a6 <pvPortMalloc+0x142>
 80115d4:	4b43      	ldr	r3, [pc, #268]	; (80116e4 <pvPortMalloc+0x180>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d863      	bhi.n	80116a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80115de:	4b42      	ldr	r3, [pc, #264]	; (80116e8 <pvPortMalloc+0x184>)
 80115e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80115e2:	4b41      	ldr	r3, [pc, #260]	; (80116e8 <pvPortMalloc+0x184>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115e8:	e004      	b.n	80115f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80115ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80115ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f6:	685b      	ldr	r3, [r3, #4]
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d903      	bls.n	8011606 <pvPortMalloc+0xa2>
 80115fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1f1      	bne.n	80115ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011606:	4b35      	ldr	r3, [pc, #212]	; (80116dc <pvPortMalloc+0x178>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801160c:	429a      	cmp	r2, r3
 801160e:	d04a      	beq.n	80116a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011610:	6a3b      	ldr	r3, [r7, #32]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	2208      	movs	r2, #8
 8011616:	4413      	add	r3, r2
 8011618:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161c:	681a      	ldr	r2, [r3, #0]
 801161e:	6a3b      	ldr	r3, [r7, #32]
 8011620:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011624:	685a      	ldr	r2, [r3, #4]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	1ad2      	subs	r2, r2, r3
 801162a:	2308      	movs	r3, #8
 801162c:	005b      	lsls	r3, r3, #1
 801162e:	429a      	cmp	r2, r3
 8011630:	d91e      	bls.n	8011670 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	4413      	add	r3, r2
 8011638:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801163a:	69bb      	ldr	r3, [r7, #24]
 801163c:	f003 0307 	and.w	r3, r3, #7
 8011640:	2b00      	cmp	r3, #0
 8011642:	d009      	beq.n	8011658 <pvPortMalloc+0xf4>
 8011644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011648:	f383 8811 	msr	BASEPRI, r3
 801164c:	f3bf 8f6f 	isb	sy
 8011650:	f3bf 8f4f 	dsb	sy
 8011654:	613b      	str	r3, [r7, #16]
 8011656:	e7fe      	b.n	8011656 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	1ad2      	subs	r2, r2, r3
 8011660:	69bb      	ldr	r3, [r7, #24]
 8011662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011666:	687a      	ldr	r2, [r7, #4]
 8011668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801166a:	69b8      	ldr	r0, [r7, #24]
 801166c:	f000 f8fc 	bl	8011868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011670:	4b1c      	ldr	r3, [pc, #112]	; (80116e4 <pvPortMalloc+0x180>)
 8011672:	681a      	ldr	r2, [r3, #0]
 8011674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	1ad3      	subs	r3, r2, r3
 801167a:	4a1a      	ldr	r2, [pc, #104]	; (80116e4 <pvPortMalloc+0x180>)
 801167c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801167e:	4b19      	ldr	r3, [pc, #100]	; (80116e4 <pvPortMalloc+0x180>)
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	4b1a      	ldr	r3, [pc, #104]	; (80116ec <pvPortMalloc+0x188>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	429a      	cmp	r2, r3
 8011688:	d203      	bcs.n	8011692 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801168a:	4b16      	ldr	r3, [pc, #88]	; (80116e4 <pvPortMalloc+0x180>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	4a17      	ldr	r2, [pc, #92]	; (80116ec <pvPortMalloc+0x188>)
 8011690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011694:	685a      	ldr	r2, [r3, #4]
 8011696:	4b12      	ldr	r3, [pc, #72]	; (80116e0 <pvPortMalloc+0x17c>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	431a      	orrs	r2, r3
 801169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80116a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a2:	2200      	movs	r2, #0
 80116a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80116a6:	f001 ff21 	bl	80134ec <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d101      	bne.n	80116b4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80116b0:	f7ef fde8 	bl	8001284 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	f003 0307 	and.w	r3, r3, #7
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d009      	beq.n	80116d2 <pvPortMalloc+0x16e>
 80116be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c2:	f383 8811 	msr	BASEPRI, r3
 80116c6:	f3bf 8f6f 	isb	sy
 80116ca:	f3bf 8f4f 	dsb	sy
 80116ce:	60fb      	str	r3, [r7, #12]
 80116d0:	e7fe      	b.n	80116d0 <pvPortMalloc+0x16c>
	return pvReturn;
 80116d2:	69fb      	ldr	r3, [r7, #28]
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	3728      	adds	r7, #40	; 0x28
 80116d8:	46bd      	mov	sp, r7
 80116da:	bd80      	pop	{r7, pc}
 80116dc:	20026f7c 	.word	0x20026f7c
 80116e0:	20026f88 	.word	0x20026f88
 80116e4:	20026f80 	.word	0x20026f80
 80116e8:	20026f74 	.word	0x20026f74
 80116ec:	20026f84 	.word	0x20026f84

080116f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b086      	sub	sp, #24
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d046      	beq.n	8011790 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011702:	2308      	movs	r3, #8
 8011704:	425b      	negs	r3, r3
 8011706:	697a      	ldr	r2, [r7, #20]
 8011708:	4413      	add	r3, r2
 801170a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	685a      	ldr	r2, [r3, #4]
 8011714:	4b20      	ldr	r3, [pc, #128]	; (8011798 <vPortFree+0xa8>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	4013      	ands	r3, r2
 801171a:	2b00      	cmp	r3, #0
 801171c:	d109      	bne.n	8011732 <vPortFree+0x42>
 801171e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011722:	f383 8811 	msr	BASEPRI, r3
 8011726:	f3bf 8f6f 	isb	sy
 801172a:	f3bf 8f4f 	dsb	sy
 801172e:	60fb      	str	r3, [r7, #12]
 8011730:	e7fe      	b.n	8011730 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d009      	beq.n	801174e <vPortFree+0x5e>
 801173a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801173e:	f383 8811 	msr	BASEPRI, r3
 8011742:	f3bf 8f6f 	isb	sy
 8011746:	f3bf 8f4f 	dsb	sy
 801174a:	60bb      	str	r3, [r7, #8]
 801174c:	e7fe      	b.n	801174c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	685a      	ldr	r2, [r3, #4]
 8011752:	4b11      	ldr	r3, [pc, #68]	; (8011798 <vPortFree+0xa8>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	4013      	ands	r3, r2
 8011758:	2b00      	cmp	r3, #0
 801175a:	d019      	beq.n	8011790 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d115      	bne.n	8011790 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	685a      	ldr	r2, [r3, #4]
 8011768:	4b0b      	ldr	r3, [pc, #44]	; (8011798 <vPortFree+0xa8>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	43db      	mvns	r3, r3
 801176e:	401a      	ands	r2, r3
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011774:	f001 fe74 	bl	8013460 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	685a      	ldr	r2, [r3, #4]
 801177c:	4b07      	ldr	r3, [pc, #28]	; (801179c <vPortFree+0xac>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	4413      	add	r3, r2
 8011782:	4a06      	ldr	r2, [pc, #24]	; (801179c <vPortFree+0xac>)
 8011784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011786:	6938      	ldr	r0, [r7, #16]
 8011788:	f000 f86e 	bl	8011868 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801178c:	f001 feae 	bl	80134ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011790:	bf00      	nop
 8011792:	3718      	adds	r7, #24
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}
 8011798:	20026f88 	.word	0x20026f88
 801179c:	20026f80 	.word	0x20026f80

080117a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80117a0:	b480      	push	{r7}
 80117a2:	b085      	sub	sp, #20
 80117a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80117a6:	4b29      	ldr	r3, [pc, #164]	; (801184c <prvHeapInit+0xac>)
 80117a8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80117aa:	4b29      	ldr	r3, [pc, #164]	; (8011850 <prvHeapInit+0xb0>)
 80117ac:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	f003 0307 	and.w	r3, r3, #7
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d00c      	beq.n	80117d2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	3307      	adds	r3, #7
 80117bc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f023 0307 	bic.w	r3, r3, #7
 80117c4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80117c6:	68ba      	ldr	r2, [r7, #8]
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	1ad3      	subs	r3, r2, r3
 80117cc:	4a20      	ldr	r2, [pc, #128]	; (8011850 <prvHeapInit+0xb0>)
 80117ce:	4413      	add	r3, r2
 80117d0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80117d6:	4a1f      	ldr	r2, [pc, #124]	; (8011854 <prvHeapInit+0xb4>)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80117dc:	4b1d      	ldr	r3, [pc, #116]	; (8011854 <prvHeapInit+0xb4>)
 80117de:	2200      	movs	r2, #0
 80117e0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	68ba      	ldr	r2, [r7, #8]
 80117e6:	4413      	add	r3, r2
 80117e8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80117ea:	2208      	movs	r2, #8
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	1a9b      	subs	r3, r3, r2
 80117f0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	f023 0307 	bic.w	r3, r3, #7
 80117f8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	4a16      	ldr	r2, [pc, #88]	; (8011858 <prvHeapInit+0xb8>)
 80117fe:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011800:	4b15      	ldr	r3, [pc, #84]	; (8011858 <prvHeapInit+0xb8>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	2200      	movs	r2, #0
 8011806:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011808:	4b13      	ldr	r3, [pc, #76]	; (8011858 <prvHeapInit+0xb8>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2200      	movs	r2, #0
 801180e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	68fa      	ldr	r2, [r7, #12]
 8011818:	1ad2      	subs	r2, r2, r3
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801181e:	4b0e      	ldr	r3, [pc, #56]	; (8011858 <prvHeapInit+0xb8>)
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	4a0c      	ldr	r2, [pc, #48]	; (801185c <prvHeapInit+0xbc>)
 801182c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	4a0b      	ldr	r2, [pc, #44]	; (8011860 <prvHeapInit+0xc0>)
 8011834:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011836:	4b0b      	ldr	r3, [pc, #44]	; (8011864 <prvHeapInit+0xc4>)
 8011838:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801183c:	601a      	str	r2, [r3, #0]
}
 801183e:	bf00      	nop
 8011840:	3714      	adds	r7, #20
 8011842:	46bd      	mov	sp, r7
 8011844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	000249f0 	.word	0x000249f0
 8011850:	20002584 	.word	0x20002584
 8011854:	20026f74 	.word	0x20026f74
 8011858:	20026f7c 	.word	0x20026f7c
 801185c:	20026f84 	.word	0x20026f84
 8011860:	20026f80 	.word	0x20026f80
 8011864:	20026f88 	.word	0x20026f88

08011868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011868:	b480      	push	{r7}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011870:	4b28      	ldr	r3, [pc, #160]	; (8011914 <prvInsertBlockIntoFreeList+0xac>)
 8011872:	60fb      	str	r3, [r7, #12]
 8011874:	e002      	b.n	801187c <prvInsertBlockIntoFreeList+0x14>
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	60fb      	str	r3, [r7, #12]
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	687a      	ldr	r2, [r7, #4]
 8011882:	429a      	cmp	r2, r3
 8011884:	d8f7      	bhi.n	8011876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	68ba      	ldr	r2, [r7, #8]
 8011890:	4413      	add	r3, r2
 8011892:	687a      	ldr	r2, [r7, #4]
 8011894:	429a      	cmp	r2, r3
 8011896:	d108      	bne.n	80118aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	685a      	ldr	r2, [r3, #4]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	441a      	add	r2, r3
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	68ba      	ldr	r2, [r7, #8]
 80118b4:	441a      	add	r2, r3
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d118      	bne.n	80118f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	681a      	ldr	r2, [r3, #0]
 80118c2:	4b15      	ldr	r3, [pc, #84]	; (8011918 <prvInsertBlockIntoFreeList+0xb0>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d00d      	beq.n	80118e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	685a      	ldr	r2, [r3, #4]
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	441a      	add	r2, r3
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	681a      	ldr	r2, [r3, #0]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	601a      	str	r2, [r3, #0]
 80118e4:	e008      	b.n	80118f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80118e6:	4b0c      	ldr	r3, [pc, #48]	; (8011918 <prvInsertBlockIntoFreeList+0xb0>)
 80118e8:	681a      	ldr	r2, [r3, #0]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	601a      	str	r2, [r3, #0]
 80118ee:	e003      	b.n	80118f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	681a      	ldr	r2, [r3, #0]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80118f8:	68fa      	ldr	r2, [r7, #12]
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d002      	beq.n	8011906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	687a      	ldr	r2, [r7, #4]
 8011904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011906:	bf00      	nop
 8011908:	3714      	adds	r7, #20
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr
 8011912:	bf00      	nop
 8011914:	20026f74 	.word	0x20026f74
 8011918:	20026f7c 	.word	0x20026f7c

0801191c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801191c:	b480      	push	{r7}
 801191e:	b083      	sub	sp, #12
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f103 0208 	add.w	r2, r3, #8
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f04f 32ff 	mov.w	r2, #4294967295
 8011934:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f103 0208 	add.w	r2, r3, #8
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f103 0208 	add.w	r2, r3, #8
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2200      	movs	r2, #0
 801194e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011950:	bf00      	nop
 8011952:	370c      	adds	r7, #12
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr

0801195c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801195c:	b480      	push	{r7}
 801195e:	b083      	sub	sp, #12
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2200      	movs	r2, #0
 8011968:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801196a:	bf00      	nop
 801196c:	370c      	adds	r7, #12
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr

08011976 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011976:	b480      	push	{r7}
 8011978:	b085      	sub	sp, #20
 801197a:	af00      	add	r7, sp, #0
 801197c:	6078      	str	r0, [r7, #4]
 801197e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	685b      	ldr	r3, [r3, #4]
 8011984:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	68fa      	ldr	r2, [r7, #12]
 801198a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	689a      	ldr	r2, [r3, #8]
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	689b      	ldr	r3, [r3, #8]
 8011998:	683a      	ldr	r2, [r7, #0]
 801199a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	683a      	ldr	r2, [r7, #0]
 80119a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	1c5a      	adds	r2, r3, #1
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	601a      	str	r2, [r3, #0]
}
 80119b2:	bf00      	nop
 80119b4:	3714      	adds	r7, #20
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr

080119be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80119be:	b480      	push	{r7}
 80119c0:	b085      	sub	sp, #20
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
 80119c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119d4:	d103      	bne.n	80119de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	691b      	ldr	r3, [r3, #16]
 80119da:	60fb      	str	r3, [r7, #12]
 80119dc:	e00c      	b.n	80119f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	3308      	adds	r3, #8
 80119e2:	60fb      	str	r3, [r7, #12]
 80119e4:	e002      	b.n	80119ec <vListInsert+0x2e>
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	60fb      	str	r3, [r7, #12]
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	68ba      	ldr	r2, [r7, #8]
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d2f6      	bcs.n	80119e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	685a      	ldr	r2, [r3, #4]
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	683a      	ldr	r2, [r7, #0]
 8011a06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	68fa      	ldr	r2, [r7, #12]
 8011a0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	683a      	ldr	r2, [r7, #0]
 8011a12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	687a      	ldr	r2, [r7, #4]
 8011a18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	1c5a      	adds	r2, r3, #1
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	601a      	str	r2, [r3, #0]
}
 8011a24:	bf00      	nop
 8011a26:	3714      	adds	r7, #20
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr

08011a30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011a30:	b480      	push	{r7}
 8011a32:	b085      	sub	sp, #20
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	691b      	ldr	r3, [r3, #16]
 8011a3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	687a      	ldr	r2, [r7, #4]
 8011a44:	6892      	ldr	r2, [r2, #8]
 8011a46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	687a      	ldr	r2, [r7, #4]
 8011a4e:	6852      	ldr	r2, [r2, #4]
 8011a50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	685b      	ldr	r3, [r3, #4]
 8011a56:	687a      	ldr	r2, [r7, #4]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d103      	bne.n	8011a64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	689a      	ldr	r2, [r3, #8]
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2200      	movs	r2, #0
 8011a68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	1e5a      	subs	r2, r3, #1
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	681b      	ldr	r3, [r3, #0]
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3714      	adds	r7, #20
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr

08011a84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011a84:	b480      	push	{r7}
 8011a86:	b085      	sub	sp, #20
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	60f8      	str	r0, [r7, #12]
 8011a8c:	60b9      	str	r1, [r7, #8]
 8011a8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	3b04      	subs	r3, #4
 8011a94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	3b04      	subs	r3, #4
 8011aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	f023 0201 	bic.w	r2, r3, #1
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	3b04      	subs	r3, #4
 8011ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011ab4:	4a0c      	ldr	r2, [pc, #48]	; (8011ae8 <pxPortInitialiseStack+0x64>)
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	3b14      	subs	r3, #20
 8011abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011ac0:	687a      	ldr	r2, [r7, #4]
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	3b04      	subs	r3, #4
 8011aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	f06f 0202 	mvn.w	r2, #2
 8011ad2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	3b20      	subs	r3, #32
 8011ad8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011ada:	68fb      	ldr	r3, [r7, #12]
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	3714      	adds	r7, #20
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae6:	4770      	bx	lr
 8011ae8:	08011aed 	.word	0x08011aed

08011aec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011aec:	b480      	push	{r7}
 8011aee:	b085      	sub	sp, #20
 8011af0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011af2:	2300      	movs	r3, #0
 8011af4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011af6:	4b11      	ldr	r3, [pc, #68]	; (8011b3c <prvTaskExitError+0x50>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011afe:	d009      	beq.n	8011b14 <prvTaskExitError+0x28>
 8011b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b04:	f383 8811 	msr	BASEPRI, r3
 8011b08:	f3bf 8f6f 	isb	sy
 8011b0c:	f3bf 8f4f 	dsb	sy
 8011b10:	60fb      	str	r3, [r7, #12]
 8011b12:	e7fe      	b.n	8011b12 <prvTaskExitError+0x26>
 8011b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b18:	f383 8811 	msr	BASEPRI, r3
 8011b1c:	f3bf 8f6f 	isb	sy
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011b26:	bf00      	nop
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d0fc      	beq.n	8011b28 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011b2e:	bf00      	nop
 8011b30:	3714      	adds	r7, #20
 8011b32:	46bd      	mov	sp, r7
 8011b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b38:	4770      	bx	lr
 8011b3a:	bf00      	nop
 8011b3c:	20000084 	.word	0x20000084

08011b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011b40:	4b07      	ldr	r3, [pc, #28]	; (8011b60 <pxCurrentTCBConst2>)
 8011b42:	6819      	ldr	r1, [r3, #0]
 8011b44:	6808      	ldr	r0, [r1, #0]
 8011b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b4a:	f380 8809 	msr	PSP, r0
 8011b4e:	f3bf 8f6f 	isb	sy
 8011b52:	f04f 0000 	mov.w	r0, #0
 8011b56:	f380 8811 	msr	BASEPRI, r0
 8011b5a:	4770      	bx	lr
 8011b5c:	f3af 8000 	nop.w

08011b60 <pxCurrentTCBConst2>:
 8011b60:	20026f94 	.word	0x20026f94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011b64:	bf00      	nop
 8011b66:	bf00      	nop

08011b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011b68:	4808      	ldr	r0, [pc, #32]	; (8011b8c <prvPortStartFirstTask+0x24>)
 8011b6a:	6800      	ldr	r0, [r0, #0]
 8011b6c:	6800      	ldr	r0, [r0, #0]
 8011b6e:	f380 8808 	msr	MSP, r0
 8011b72:	f04f 0000 	mov.w	r0, #0
 8011b76:	f380 8814 	msr	CONTROL, r0
 8011b7a:	b662      	cpsie	i
 8011b7c:	b661      	cpsie	f
 8011b7e:	f3bf 8f4f 	dsb	sy
 8011b82:	f3bf 8f6f 	isb	sy
 8011b86:	df00      	svc	0
 8011b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011b8a:	bf00      	nop
 8011b8c:	e000ed08 	.word	0xe000ed08

08011b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b086      	sub	sp, #24
 8011b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011b96:	4b44      	ldr	r3, [pc, #272]	; (8011ca8 <xPortStartScheduler+0x118>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	4a44      	ldr	r2, [pc, #272]	; (8011cac <xPortStartScheduler+0x11c>)
 8011b9c:	4293      	cmp	r3, r2
 8011b9e:	d109      	bne.n	8011bb4 <xPortStartScheduler+0x24>
 8011ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ba4:	f383 8811 	msr	BASEPRI, r3
 8011ba8:	f3bf 8f6f 	isb	sy
 8011bac:	f3bf 8f4f 	dsb	sy
 8011bb0:	613b      	str	r3, [r7, #16]
 8011bb2:	e7fe      	b.n	8011bb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011bb4:	4b3c      	ldr	r3, [pc, #240]	; (8011ca8 <xPortStartScheduler+0x118>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	4a3d      	ldr	r2, [pc, #244]	; (8011cb0 <xPortStartScheduler+0x120>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d109      	bne.n	8011bd2 <xPortStartScheduler+0x42>
 8011bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bc2:	f383 8811 	msr	BASEPRI, r3
 8011bc6:	f3bf 8f6f 	isb	sy
 8011bca:	f3bf 8f4f 	dsb	sy
 8011bce:	60fb      	str	r3, [r7, #12]
 8011bd0:	e7fe      	b.n	8011bd0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011bd2:	4b38      	ldr	r3, [pc, #224]	; (8011cb4 <xPortStartScheduler+0x124>)
 8011bd4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	781b      	ldrb	r3, [r3, #0]
 8011bda:	b2db      	uxtb	r3, r3
 8011bdc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	22ff      	movs	r2, #255	; 0xff
 8011be2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011bec:	78fb      	ldrb	r3, [r7, #3]
 8011bee:	b2db      	uxtb	r3, r3
 8011bf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011bf4:	b2da      	uxtb	r2, r3
 8011bf6:	4b30      	ldr	r3, [pc, #192]	; (8011cb8 <xPortStartScheduler+0x128>)
 8011bf8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011bfa:	4b30      	ldr	r3, [pc, #192]	; (8011cbc <xPortStartScheduler+0x12c>)
 8011bfc:	2207      	movs	r2, #7
 8011bfe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011c00:	e009      	b.n	8011c16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011c02:	4b2e      	ldr	r3, [pc, #184]	; (8011cbc <xPortStartScheduler+0x12c>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	3b01      	subs	r3, #1
 8011c08:	4a2c      	ldr	r2, [pc, #176]	; (8011cbc <xPortStartScheduler+0x12c>)
 8011c0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011c0c:	78fb      	ldrb	r3, [r7, #3]
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	005b      	lsls	r3, r3, #1
 8011c12:	b2db      	uxtb	r3, r3
 8011c14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011c16:	78fb      	ldrb	r3, [r7, #3]
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c1e:	2b80      	cmp	r3, #128	; 0x80
 8011c20:	d0ef      	beq.n	8011c02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011c22:	4b26      	ldr	r3, [pc, #152]	; (8011cbc <xPortStartScheduler+0x12c>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	f1c3 0307 	rsb	r3, r3, #7
 8011c2a:	2b04      	cmp	r3, #4
 8011c2c:	d009      	beq.n	8011c42 <xPortStartScheduler+0xb2>
 8011c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c32:	f383 8811 	msr	BASEPRI, r3
 8011c36:	f3bf 8f6f 	isb	sy
 8011c3a:	f3bf 8f4f 	dsb	sy
 8011c3e:	60bb      	str	r3, [r7, #8]
 8011c40:	e7fe      	b.n	8011c40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011c42:	4b1e      	ldr	r3, [pc, #120]	; (8011cbc <xPortStartScheduler+0x12c>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	021b      	lsls	r3, r3, #8
 8011c48:	4a1c      	ldr	r2, [pc, #112]	; (8011cbc <xPortStartScheduler+0x12c>)
 8011c4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011c4c:	4b1b      	ldr	r3, [pc, #108]	; (8011cbc <xPortStartScheduler+0x12c>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011c54:	4a19      	ldr	r2, [pc, #100]	; (8011cbc <xPortStartScheduler+0x12c>)
 8011c56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	b2da      	uxtb	r2, r3
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011c60:	4b17      	ldr	r3, [pc, #92]	; (8011cc0 <xPortStartScheduler+0x130>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	4a16      	ldr	r2, [pc, #88]	; (8011cc0 <xPortStartScheduler+0x130>)
 8011c66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011c6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011c6c:	4b14      	ldr	r3, [pc, #80]	; (8011cc0 <xPortStartScheduler+0x130>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	4a13      	ldr	r2, [pc, #76]	; (8011cc0 <xPortStartScheduler+0x130>)
 8011c72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011c76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011c78:	f7f0 fc94 	bl	80025a4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011c7c:	4b11      	ldr	r3, [pc, #68]	; (8011cc4 <xPortStartScheduler+0x134>)
 8011c7e:	2200      	movs	r2, #0
 8011c80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011c82:	f000 f8d1 	bl	8011e28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011c86:	4b10      	ldr	r3, [pc, #64]	; (8011cc8 <xPortStartScheduler+0x138>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	4a0f      	ldr	r2, [pc, #60]	; (8011cc8 <xPortStartScheduler+0x138>)
 8011c8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011c90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011c92:	f7ff ff69 	bl	8011b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011c96:	f001 fdc1 	bl	801381c <vTaskSwitchContext>
	prvTaskExitError();
 8011c9a:	f7ff ff27 	bl	8011aec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011c9e:	2300      	movs	r3, #0
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3718      	adds	r7, #24
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	e000ed00 	.word	0xe000ed00
 8011cac:	410fc271 	.word	0x410fc271
 8011cb0:	410fc270 	.word	0x410fc270
 8011cb4:	e000e400 	.word	0xe000e400
 8011cb8:	20026f8c 	.word	0x20026f8c
 8011cbc:	20026f90 	.word	0x20026f90
 8011cc0:	e000ed20 	.word	0xe000ed20
 8011cc4:	20000084 	.word	0x20000084
 8011cc8:	e000ef34 	.word	0xe000ef34

08011ccc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b083      	sub	sp, #12
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd6:	f383 8811 	msr	BASEPRI, r3
 8011cda:	f3bf 8f6f 	isb	sy
 8011cde:	f3bf 8f4f 	dsb	sy
 8011ce2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011ce4:	4b0e      	ldr	r3, [pc, #56]	; (8011d20 <vPortEnterCritical+0x54>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	3301      	adds	r3, #1
 8011cea:	4a0d      	ldr	r2, [pc, #52]	; (8011d20 <vPortEnterCritical+0x54>)
 8011cec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011cee:	4b0c      	ldr	r3, [pc, #48]	; (8011d20 <vPortEnterCritical+0x54>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	d10e      	bne.n	8011d14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011cf6:	4b0b      	ldr	r3, [pc, #44]	; (8011d24 <vPortEnterCritical+0x58>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	b2db      	uxtb	r3, r3
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d009      	beq.n	8011d14 <vPortEnterCritical+0x48>
 8011d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d04:	f383 8811 	msr	BASEPRI, r3
 8011d08:	f3bf 8f6f 	isb	sy
 8011d0c:	f3bf 8f4f 	dsb	sy
 8011d10:	603b      	str	r3, [r7, #0]
 8011d12:	e7fe      	b.n	8011d12 <vPortEnterCritical+0x46>
	}
}
 8011d14:	bf00      	nop
 8011d16:	370c      	adds	r7, #12
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr
 8011d20:	20000084 	.word	0x20000084
 8011d24:	e000ed04 	.word	0xe000ed04

08011d28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011d2e:	4b11      	ldr	r3, [pc, #68]	; (8011d74 <vPortExitCritical+0x4c>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d109      	bne.n	8011d4a <vPortExitCritical+0x22>
 8011d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d3a:	f383 8811 	msr	BASEPRI, r3
 8011d3e:	f3bf 8f6f 	isb	sy
 8011d42:	f3bf 8f4f 	dsb	sy
 8011d46:	607b      	str	r3, [r7, #4]
 8011d48:	e7fe      	b.n	8011d48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8011d4a:	4b0a      	ldr	r3, [pc, #40]	; (8011d74 <vPortExitCritical+0x4c>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	3b01      	subs	r3, #1
 8011d50:	4a08      	ldr	r2, [pc, #32]	; (8011d74 <vPortExitCritical+0x4c>)
 8011d52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011d54:	4b07      	ldr	r3, [pc, #28]	; (8011d74 <vPortExitCritical+0x4c>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d104      	bne.n	8011d66 <vPortExitCritical+0x3e>
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011d66:	bf00      	nop
 8011d68:	370c      	adds	r7, #12
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d70:	4770      	bx	lr
 8011d72:	bf00      	nop
 8011d74:	20000084 	.word	0x20000084
	...

08011d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011d80:	f3ef 8009 	mrs	r0, PSP
 8011d84:	f3bf 8f6f 	isb	sy
 8011d88:	4b15      	ldr	r3, [pc, #84]	; (8011de0 <pxCurrentTCBConst>)
 8011d8a:	681a      	ldr	r2, [r3, #0]
 8011d8c:	f01e 0f10 	tst.w	lr, #16
 8011d90:	bf08      	it	eq
 8011d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d9a:	6010      	str	r0, [r2, #0]
 8011d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011da4:	f380 8811 	msr	BASEPRI, r0
 8011da8:	f3bf 8f4f 	dsb	sy
 8011dac:	f3bf 8f6f 	isb	sy
 8011db0:	f001 fd34 	bl	801381c <vTaskSwitchContext>
 8011db4:	f04f 0000 	mov.w	r0, #0
 8011db8:	f380 8811 	msr	BASEPRI, r0
 8011dbc:	bc09      	pop	{r0, r3}
 8011dbe:	6819      	ldr	r1, [r3, #0]
 8011dc0:	6808      	ldr	r0, [r1, #0]
 8011dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc6:	f01e 0f10 	tst.w	lr, #16
 8011dca:	bf08      	it	eq
 8011dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011dd0:	f380 8809 	msr	PSP, r0
 8011dd4:	f3bf 8f6f 	isb	sy
 8011dd8:	4770      	bx	lr
 8011dda:	bf00      	nop
 8011ddc:	f3af 8000 	nop.w

08011de0 <pxCurrentTCBConst>:
 8011de0:	20026f94 	.word	0x20026f94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011de4:	bf00      	nop
 8011de6:	bf00      	nop

08011de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
	__asm volatile
 8011dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df2:	f383 8811 	msr	BASEPRI, r3
 8011df6:	f3bf 8f6f 	isb	sy
 8011dfa:	f3bf 8f4f 	dsb	sy
 8011dfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011e00:	f001 fc46 	bl	8013690 <xTaskIncrementTick>
 8011e04:	4603      	mov	r3, r0
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d003      	beq.n	8011e12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011e0a:	4b06      	ldr	r3, [pc, #24]	; (8011e24 <SysTick_Handler+0x3c>)
 8011e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e10:	601a      	str	r2, [r3, #0]
 8011e12:	2300      	movs	r3, #0
 8011e14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011e1c:	bf00      	nop
 8011e1e:	3708      	adds	r7, #8
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}
 8011e24:	e000ed04 	.word	0xe000ed04

08011e28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011e28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011e38 <vPortEnableVFP+0x10>
 8011e2c:	6801      	ldr	r1, [r0, #0]
 8011e2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011e32:	6001      	str	r1, [r0, #0]
 8011e34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011e36:	bf00      	nop
 8011e38:	e000ed88 	.word	0xe000ed88

08011e3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b085      	sub	sp, #20
 8011e40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011e42:	f3ef 8305 	mrs	r3, IPSR
 8011e46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	2b0f      	cmp	r3, #15
 8011e4c:	d913      	bls.n	8011e76 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011e4e:	4a16      	ldr	r2, [pc, #88]	; (8011ea8 <vPortValidateInterruptPriority+0x6c>)
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	4413      	add	r3, r2
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011e58:	4b14      	ldr	r3, [pc, #80]	; (8011eac <vPortValidateInterruptPriority+0x70>)
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	7afa      	ldrb	r2, [r7, #11]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d209      	bcs.n	8011e76 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8011e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e66:	f383 8811 	msr	BASEPRI, r3
 8011e6a:	f3bf 8f6f 	isb	sy
 8011e6e:	f3bf 8f4f 	dsb	sy
 8011e72:	607b      	str	r3, [r7, #4]
 8011e74:	e7fe      	b.n	8011e74 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011e76:	4b0e      	ldr	r3, [pc, #56]	; (8011eb0 <vPortValidateInterruptPriority+0x74>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011e7e:	4b0d      	ldr	r3, [pc, #52]	; (8011eb4 <vPortValidateInterruptPriority+0x78>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d909      	bls.n	8011e9a <vPortValidateInterruptPriority+0x5e>
 8011e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e8a:	f383 8811 	msr	BASEPRI, r3
 8011e8e:	f3bf 8f6f 	isb	sy
 8011e92:	f3bf 8f4f 	dsb	sy
 8011e96:	603b      	str	r3, [r7, #0]
 8011e98:	e7fe      	b.n	8011e98 <vPortValidateInterruptPriority+0x5c>
	}
 8011e9a:	bf00      	nop
 8011e9c:	3714      	adds	r7, #20
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea4:	4770      	bx	lr
 8011ea6:	bf00      	nop
 8011ea8:	e000e3f0 	.word	0xe000e3f0
 8011eac:	20026f8c 	.word	0x20026f8c
 8011eb0:	e000ed0c 	.word	0xe000ed0c
 8011eb4:	20026f90 	.word	0x20026f90

08011eb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d109      	bne.n	8011ee0 <xQueueGenericReset+0x28>
 8011ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ed0:	f383 8811 	msr	BASEPRI, r3
 8011ed4:	f3bf 8f6f 	isb	sy
 8011ed8:	f3bf 8f4f 	dsb	sy
 8011edc:	60bb      	str	r3, [r7, #8]
 8011ede:	e7fe      	b.n	8011ede <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8011ee0:	f7ff fef4 	bl	8011ccc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681a      	ldr	r2, [r3, #0]
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011eec:	68f9      	ldr	r1, [r7, #12]
 8011eee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011ef0:	fb01 f303 	mul.w	r3, r1, r3
 8011ef4:	441a      	add	r2, r3
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	2200      	movs	r2, #0
 8011efe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f10:	3b01      	subs	r3, #1
 8011f12:	68f9      	ldr	r1, [r7, #12]
 8011f14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011f16:	fb01 f303 	mul.w	r3, r1, r3
 8011f1a:	441a      	add	r2, r3
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	22ff      	movs	r2, #255	; 0xff
 8011f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	22ff      	movs	r2, #255	; 0xff
 8011f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d114      	bne.n	8011f60 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	691b      	ldr	r3, [r3, #16]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d01a      	beq.n	8011f74 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	3310      	adds	r3, #16
 8011f42:	4618      	mov	r0, r3
 8011f44:	f001 fd40 	bl	80139c8 <xTaskRemoveFromEventList>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d012      	beq.n	8011f74 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011f4e:	4b0d      	ldr	r3, [pc, #52]	; (8011f84 <xQueueGenericReset+0xcc>)
 8011f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f54:	601a      	str	r2, [r3, #0]
 8011f56:	f3bf 8f4f 	dsb	sy
 8011f5a:	f3bf 8f6f 	isb	sy
 8011f5e:	e009      	b.n	8011f74 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	3310      	adds	r3, #16
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7ff fcd9 	bl	801191c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	3324      	adds	r3, #36	; 0x24
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7ff fcd4 	bl	801191c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011f74:	f7ff fed8 	bl	8011d28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011f78:	2301      	movs	r3, #1
}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	3710      	adds	r7, #16
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	e000ed04 	.word	0xe000ed04

08011f88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b08e      	sub	sp, #56	; 0x38
 8011f8c:	af02      	add	r7, sp, #8
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	607a      	str	r2, [r7, #4]
 8011f94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d109      	bne.n	8011fb0 <xQueueGenericCreateStatic+0x28>
 8011f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa0:	f383 8811 	msr	BASEPRI, r3
 8011fa4:	f3bf 8f6f 	isb	sy
 8011fa8:	f3bf 8f4f 	dsb	sy
 8011fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8011fae:	e7fe      	b.n	8011fae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d109      	bne.n	8011fca <xQueueGenericCreateStatic+0x42>
 8011fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fba:	f383 8811 	msr	BASEPRI, r3
 8011fbe:	f3bf 8f6f 	isb	sy
 8011fc2:	f3bf 8f4f 	dsb	sy
 8011fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8011fc8:	e7fe      	b.n	8011fc8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d002      	beq.n	8011fd6 <xQueueGenericCreateStatic+0x4e>
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d001      	beq.n	8011fda <xQueueGenericCreateStatic+0x52>
 8011fd6:	2301      	movs	r3, #1
 8011fd8:	e000      	b.n	8011fdc <xQueueGenericCreateStatic+0x54>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d109      	bne.n	8011ff4 <xQueueGenericCreateStatic+0x6c>
 8011fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe4:	f383 8811 	msr	BASEPRI, r3
 8011fe8:	f3bf 8f6f 	isb	sy
 8011fec:	f3bf 8f4f 	dsb	sy
 8011ff0:	623b      	str	r3, [r7, #32]
 8011ff2:	e7fe      	b.n	8011ff2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d102      	bne.n	8012000 <xQueueGenericCreateStatic+0x78>
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d101      	bne.n	8012004 <xQueueGenericCreateStatic+0x7c>
 8012000:	2301      	movs	r3, #1
 8012002:	e000      	b.n	8012006 <xQueueGenericCreateStatic+0x7e>
 8012004:	2300      	movs	r3, #0
 8012006:	2b00      	cmp	r3, #0
 8012008:	d109      	bne.n	801201e <xQueueGenericCreateStatic+0x96>
 801200a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801200e:	f383 8811 	msr	BASEPRI, r3
 8012012:	f3bf 8f6f 	isb	sy
 8012016:	f3bf 8f4f 	dsb	sy
 801201a:	61fb      	str	r3, [r7, #28]
 801201c:	e7fe      	b.n	801201c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801201e:	2350      	movs	r3, #80	; 0x50
 8012020:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	2b50      	cmp	r3, #80	; 0x50
 8012026:	d009      	beq.n	801203c <xQueueGenericCreateStatic+0xb4>
 8012028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801202c:	f383 8811 	msr	BASEPRI, r3
 8012030:	f3bf 8f6f 	isb	sy
 8012034:	f3bf 8f4f 	dsb	sy
 8012038:	61bb      	str	r3, [r7, #24]
 801203a:	e7fe      	b.n	801203a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012042:	2b00      	cmp	r3, #0
 8012044:	d00d      	beq.n	8012062 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012048:	2201      	movs	r2, #1
 801204a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801204e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012054:	9300      	str	r3, [sp, #0]
 8012056:	4613      	mov	r3, r2
 8012058:	687a      	ldr	r2, [r7, #4]
 801205a:	68b9      	ldr	r1, [r7, #8]
 801205c:	68f8      	ldr	r0, [r7, #12]
 801205e:	f000 f842 	bl	80120e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012064:	4618      	mov	r0, r3
 8012066:	3730      	adds	r7, #48	; 0x30
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801206c:	b580      	push	{r7, lr}
 801206e:	b08a      	sub	sp, #40	; 0x28
 8012070:	af02      	add	r7, sp, #8
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	60b9      	str	r1, [r7, #8]
 8012076:	4613      	mov	r3, r2
 8012078:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d109      	bne.n	8012094 <xQueueGenericCreate+0x28>
 8012080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012084:	f383 8811 	msr	BASEPRI, r3
 8012088:	f3bf 8f6f 	isb	sy
 801208c:	f3bf 8f4f 	dsb	sy
 8012090:	613b      	str	r3, [r7, #16]
 8012092:	e7fe      	b.n	8012092 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d102      	bne.n	80120a0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801209a:	2300      	movs	r3, #0
 801209c:	61fb      	str	r3, [r7, #28]
 801209e:	e004      	b.n	80120aa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	68ba      	ldr	r2, [r7, #8]
 80120a4:	fb02 f303 	mul.w	r3, r2, r3
 80120a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	3350      	adds	r3, #80	; 0x50
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7ff fa58 	bl	8011564 <pvPortMalloc>
 80120b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80120b6:	69bb      	ldr	r3, [r7, #24]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d00f      	beq.n	80120dc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80120bc:	69bb      	ldr	r3, [r7, #24]
 80120be:	3350      	adds	r3, #80	; 0x50
 80120c0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80120c2:	69bb      	ldr	r3, [r7, #24]
 80120c4:	2200      	movs	r2, #0
 80120c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80120ca:	79fa      	ldrb	r2, [r7, #7]
 80120cc:	69bb      	ldr	r3, [r7, #24]
 80120ce:	9300      	str	r3, [sp, #0]
 80120d0:	4613      	mov	r3, r2
 80120d2:	697a      	ldr	r2, [r7, #20]
 80120d4:	68b9      	ldr	r1, [r7, #8]
 80120d6:	68f8      	ldr	r0, [r7, #12]
 80120d8:	f000 f805 	bl	80120e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80120dc:	69bb      	ldr	r3, [r7, #24]
	}
 80120de:	4618      	mov	r0, r3
 80120e0:	3720      	adds	r7, #32
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}

080120e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80120e6:	b580      	push	{r7, lr}
 80120e8:	b084      	sub	sp, #16
 80120ea:	af00      	add	r7, sp, #0
 80120ec:	60f8      	str	r0, [r7, #12]
 80120ee:	60b9      	str	r1, [r7, #8]
 80120f0:	607a      	str	r2, [r7, #4]
 80120f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d103      	bne.n	8012102 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80120fa:	69bb      	ldr	r3, [r7, #24]
 80120fc:	69ba      	ldr	r2, [r7, #24]
 80120fe:	601a      	str	r2, [r3, #0]
 8012100:	e002      	b.n	8012108 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012108:	69bb      	ldr	r3, [r7, #24]
 801210a:	68fa      	ldr	r2, [r7, #12]
 801210c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	68ba      	ldr	r2, [r7, #8]
 8012112:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012114:	2101      	movs	r1, #1
 8012116:	69b8      	ldr	r0, [r7, #24]
 8012118:	f7ff fece 	bl	8011eb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801211c:	69bb      	ldr	r3, [r7, #24]
 801211e:	78fa      	ldrb	r2, [r7, #3]
 8012120:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012124:	bf00      	nop
 8012126:	3710      	adds	r7, #16
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d00e      	beq.n	8012158 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2200      	movs	r2, #0
 801213e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2200      	movs	r2, #0
 8012144:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2200      	movs	r2, #0
 801214a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801214c:	2300      	movs	r3, #0
 801214e:	2200      	movs	r2, #0
 8012150:	2100      	movs	r1, #0
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f000 f906 	bl	8012364 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012158:	bf00      	nop
 801215a:	3708      	adds	r7, #8
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012160:	b580      	push	{r7, lr}
 8012162:	b086      	sub	sp, #24
 8012164:	af00      	add	r7, sp, #0
 8012166:	4603      	mov	r3, r0
 8012168:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801216a:	2301      	movs	r3, #1
 801216c:	617b      	str	r3, [r7, #20]
 801216e:	2300      	movs	r3, #0
 8012170:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012172:	79fb      	ldrb	r3, [r7, #7]
 8012174:	461a      	mov	r2, r3
 8012176:	6939      	ldr	r1, [r7, #16]
 8012178:	6978      	ldr	r0, [r7, #20]
 801217a:	f7ff ff77 	bl	801206c <xQueueGenericCreate>
 801217e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8012180:	68f8      	ldr	r0, [r7, #12]
 8012182:	f7ff ffd3 	bl	801212c <prvInitialiseMutex>

		return pxNewQueue;
 8012186:	68fb      	ldr	r3, [r7, #12]
	}
 8012188:	4618      	mov	r0, r3
 801218a:	3718      	adds	r7, #24
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012190:	b580      	push	{r7, lr}
 8012192:	b088      	sub	sp, #32
 8012194:	af02      	add	r7, sp, #8
 8012196:	4603      	mov	r3, r0
 8012198:	6039      	str	r1, [r7, #0]
 801219a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801219c:	2301      	movs	r3, #1
 801219e:	617b      	str	r3, [r7, #20]
 80121a0:	2300      	movs	r3, #0
 80121a2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80121a4:	79fb      	ldrb	r3, [r7, #7]
 80121a6:	9300      	str	r3, [sp, #0]
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	2200      	movs	r2, #0
 80121ac:	6939      	ldr	r1, [r7, #16]
 80121ae:	6978      	ldr	r0, [r7, #20]
 80121b0:	f7ff feea 	bl	8011f88 <xQueueGenericCreateStatic>
 80121b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80121b6:	68f8      	ldr	r0, [r7, #12]
 80121b8:	f7ff ffb8 	bl	801212c <prvInitialiseMutex>

		return pxNewQueue;
 80121bc:	68fb      	ldr	r3, [r7, #12]
	}
 80121be:	4618      	mov	r0, r3
 80121c0:	3718      	adds	r7, #24
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}

080121c6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80121c6:	b590      	push	{r4, r7, lr}
 80121c8:	b087      	sub	sp, #28
 80121ca:	af00      	add	r7, sp, #0
 80121cc:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d109      	bne.n	80121ec <xQueueGiveMutexRecursive+0x26>
 80121d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121dc:	f383 8811 	msr	BASEPRI, r3
 80121e0:	f3bf 8f6f 	isb	sy
 80121e4:	f3bf 8f4f 	dsb	sy
 80121e8:	60fb      	str	r3, [r7, #12]
 80121ea:	e7fe      	b.n	80121ea <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	685c      	ldr	r4, [r3, #4]
 80121f0:	f001 fdfc 	bl	8013dec <xTaskGetCurrentTaskHandle>
 80121f4:	4603      	mov	r3, r0
 80121f6:	429c      	cmp	r4, r3
 80121f8:	d111      	bne.n	801221e <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	68db      	ldr	r3, [r3, #12]
 80121fe:	1e5a      	subs	r2, r3, #1
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8012204:	693b      	ldr	r3, [r7, #16]
 8012206:	68db      	ldr	r3, [r3, #12]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d105      	bne.n	8012218 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801220c:	2300      	movs	r3, #0
 801220e:	2200      	movs	r2, #0
 8012210:	2100      	movs	r1, #0
 8012212:	6938      	ldr	r0, [r7, #16]
 8012214:	f000 f8a6 	bl	8012364 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8012218:	2301      	movs	r3, #1
 801221a:	617b      	str	r3, [r7, #20]
 801221c:	e001      	b.n	8012222 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801221e:	2300      	movs	r3, #0
 8012220:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8012222:	697b      	ldr	r3, [r7, #20]
	}
 8012224:	4618      	mov	r0, r3
 8012226:	371c      	adds	r7, #28
 8012228:	46bd      	mov	sp, r7
 801222a:	bd90      	pop	{r4, r7, pc}

0801222c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801222c:	b590      	push	{r4, r7, lr}
 801222e:	b087      	sub	sp, #28
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d109      	bne.n	8012254 <xQueueTakeMutexRecursive+0x28>
 8012240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012244:	f383 8811 	msr	BASEPRI, r3
 8012248:	f3bf 8f6f 	isb	sy
 801224c:	f3bf 8f4f 	dsb	sy
 8012250:	60fb      	str	r3, [r7, #12]
 8012252:	e7fe      	b.n	8012252 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012254:	693b      	ldr	r3, [r7, #16]
 8012256:	685c      	ldr	r4, [r3, #4]
 8012258:	f001 fdc8 	bl	8013dec <xTaskGetCurrentTaskHandle>
 801225c:	4603      	mov	r3, r0
 801225e:	429c      	cmp	r4, r3
 8012260:	d107      	bne.n	8012272 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	1c5a      	adds	r2, r3, #1
 8012268:	693b      	ldr	r3, [r7, #16]
 801226a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801226c:	2301      	movs	r3, #1
 801226e:	617b      	str	r3, [r7, #20]
 8012270:	e00c      	b.n	801228c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8012272:	6839      	ldr	r1, [r7, #0]
 8012274:	6938      	ldr	r0, [r7, #16]
 8012276:	f000 fb69 	bl	801294c <xQueueSemaphoreTake>
 801227a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d004      	beq.n	801228c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	68db      	ldr	r3, [r3, #12]
 8012286:	1c5a      	adds	r2, r3, #1
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801228c:	697b      	ldr	r3, [r7, #20]
	}
 801228e:	4618      	mov	r0, r3
 8012290:	371c      	adds	r7, #28
 8012292:	46bd      	mov	sp, r7
 8012294:	bd90      	pop	{r4, r7, pc}

08012296 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012296:	b580      	push	{r7, lr}
 8012298:	b08a      	sub	sp, #40	; 0x28
 801229a:	af02      	add	r7, sp, #8
 801229c:	60f8      	str	r0, [r7, #12]
 801229e:	60b9      	str	r1, [r7, #8]
 80122a0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d109      	bne.n	80122bc <xQueueCreateCountingSemaphoreStatic+0x26>
 80122a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ac:	f383 8811 	msr	BASEPRI, r3
 80122b0:	f3bf 8f6f 	isb	sy
 80122b4:	f3bf 8f4f 	dsb	sy
 80122b8:	61bb      	str	r3, [r7, #24]
 80122ba:	e7fe      	b.n	80122ba <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80122bc:	68ba      	ldr	r2, [r7, #8]
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d909      	bls.n	80122d8 <xQueueCreateCountingSemaphoreStatic+0x42>
 80122c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c8:	f383 8811 	msr	BASEPRI, r3
 80122cc:	f3bf 8f6f 	isb	sy
 80122d0:	f3bf 8f4f 	dsb	sy
 80122d4:	617b      	str	r3, [r7, #20]
 80122d6:	e7fe      	b.n	80122d6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80122d8:	2302      	movs	r3, #2
 80122da:	9300      	str	r3, [sp, #0]
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2200      	movs	r2, #0
 80122e0:	2100      	movs	r1, #0
 80122e2:	68f8      	ldr	r0, [r7, #12]
 80122e4:	f7ff fe50 	bl	8011f88 <xQueueGenericCreateStatic>
 80122e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80122ea:	69fb      	ldr	r3, [r7, #28]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d002      	beq.n	80122f6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80122f0:	69fb      	ldr	r3, [r7, #28]
 80122f2:	68ba      	ldr	r2, [r7, #8]
 80122f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80122f6:	69fb      	ldr	r3, [r7, #28]
	}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3720      	adds	r7, #32
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012300:	b580      	push	{r7, lr}
 8012302:	b086      	sub	sp, #24
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d109      	bne.n	8012324 <xQueueCreateCountingSemaphore+0x24>
 8012310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012314:	f383 8811 	msr	BASEPRI, r3
 8012318:	f3bf 8f6f 	isb	sy
 801231c:	f3bf 8f4f 	dsb	sy
 8012320:	613b      	str	r3, [r7, #16]
 8012322:	e7fe      	b.n	8012322 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012324:	683a      	ldr	r2, [r7, #0]
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	429a      	cmp	r2, r3
 801232a:	d909      	bls.n	8012340 <xQueueCreateCountingSemaphore+0x40>
 801232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012330:	f383 8811 	msr	BASEPRI, r3
 8012334:	f3bf 8f6f 	isb	sy
 8012338:	f3bf 8f4f 	dsb	sy
 801233c:	60fb      	str	r3, [r7, #12]
 801233e:	e7fe      	b.n	801233e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012340:	2202      	movs	r2, #2
 8012342:	2100      	movs	r1, #0
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f7ff fe91 	bl	801206c <xQueueGenericCreate>
 801234a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d002      	beq.n	8012358 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	683a      	ldr	r2, [r7, #0]
 8012356:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012358:	697b      	ldr	r3, [r7, #20]
	}
 801235a:	4618      	mov	r0, r3
 801235c:	3718      	adds	r7, #24
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}
	...

08012364 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b08e      	sub	sp, #56	; 0x38
 8012368:	af00      	add	r7, sp, #0
 801236a:	60f8      	str	r0, [r7, #12]
 801236c:	60b9      	str	r1, [r7, #8]
 801236e:	607a      	str	r2, [r7, #4]
 8012370:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012372:	2300      	movs	r3, #0
 8012374:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801237c:	2b00      	cmp	r3, #0
 801237e:	d109      	bne.n	8012394 <xQueueGenericSend+0x30>
 8012380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012384:	f383 8811 	msr	BASEPRI, r3
 8012388:	f3bf 8f6f 	isb	sy
 801238c:	f3bf 8f4f 	dsb	sy
 8012390:	62bb      	str	r3, [r7, #40]	; 0x28
 8012392:	e7fe      	b.n	8012392 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d103      	bne.n	80123a2 <xQueueGenericSend+0x3e>
 801239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d101      	bne.n	80123a6 <xQueueGenericSend+0x42>
 80123a2:	2301      	movs	r3, #1
 80123a4:	e000      	b.n	80123a8 <xQueueGenericSend+0x44>
 80123a6:	2300      	movs	r3, #0
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d109      	bne.n	80123c0 <xQueueGenericSend+0x5c>
 80123ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b0:	f383 8811 	msr	BASEPRI, r3
 80123b4:	f3bf 8f6f 	isb	sy
 80123b8:	f3bf 8f4f 	dsb	sy
 80123bc:	627b      	str	r3, [r7, #36]	; 0x24
 80123be:	e7fe      	b.n	80123be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	2b02      	cmp	r3, #2
 80123c4:	d103      	bne.n	80123ce <xQueueGenericSend+0x6a>
 80123c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123ca:	2b01      	cmp	r3, #1
 80123cc:	d101      	bne.n	80123d2 <xQueueGenericSend+0x6e>
 80123ce:	2301      	movs	r3, #1
 80123d0:	e000      	b.n	80123d4 <xQueueGenericSend+0x70>
 80123d2:	2300      	movs	r3, #0
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d109      	bne.n	80123ec <xQueueGenericSend+0x88>
 80123d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123dc:	f383 8811 	msr	BASEPRI, r3
 80123e0:	f3bf 8f6f 	isb	sy
 80123e4:	f3bf 8f4f 	dsb	sy
 80123e8:	623b      	str	r3, [r7, #32]
 80123ea:	e7fe      	b.n	80123ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80123ec:	f001 fd0e 	bl	8013e0c <xTaskGetSchedulerState>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d102      	bne.n	80123fc <xQueueGenericSend+0x98>
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d101      	bne.n	8012400 <xQueueGenericSend+0x9c>
 80123fc:	2301      	movs	r3, #1
 80123fe:	e000      	b.n	8012402 <xQueueGenericSend+0x9e>
 8012400:	2300      	movs	r3, #0
 8012402:	2b00      	cmp	r3, #0
 8012404:	d109      	bne.n	801241a <xQueueGenericSend+0xb6>
 8012406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801240a:	f383 8811 	msr	BASEPRI, r3
 801240e:	f3bf 8f6f 	isb	sy
 8012412:	f3bf 8f4f 	dsb	sy
 8012416:	61fb      	str	r3, [r7, #28]
 8012418:	e7fe      	b.n	8012418 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801241a:	f7ff fc57 	bl	8011ccc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012426:	429a      	cmp	r2, r3
 8012428:	d302      	bcc.n	8012430 <xQueueGenericSend+0xcc>
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	2b02      	cmp	r3, #2
 801242e:	d129      	bne.n	8012484 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012430:	683a      	ldr	r2, [r7, #0]
 8012432:	68b9      	ldr	r1, [r7, #8]
 8012434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012436:	f000 fc48 	bl	8012cca <prvCopyDataToQueue>
 801243a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012440:	2b00      	cmp	r3, #0
 8012442:	d010      	beq.n	8012466 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012446:	3324      	adds	r3, #36	; 0x24
 8012448:	4618      	mov	r0, r3
 801244a:	f001 fabd 	bl	80139c8 <xTaskRemoveFromEventList>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d013      	beq.n	801247c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012454:	4b3f      	ldr	r3, [pc, #252]	; (8012554 <xQueueGenericSend+0x1f0>)
 8012456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801245a:	601a      	str	r2, [r3, #0]
 801245c:	f3bf 8f4f 	dsb	sy
 8012460:	f3bf 8f6f 	isb	sy
 8012464:	e00a      	b.n	801247c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012468:	2b00      	cmp	r3, #0
 801246a:	d007      	beq.n	801247c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801246c:	4b39      	ldr	r3, [pc, #228]	; (8012554 <xQueueGenericSend+0x1f0>)
 801246e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012472:	601a      	str	r2, [r3, #0]
 8012474:	f3bf 8f4f 	dsb	sy
 8012478:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801247c:	f7ff fc54 	bl	8011d28 <vPortExitCritical>
				return pdPASS;
 8012480:	2301      	movs	r3, #1
 8012482:	e063      	b.n	801254c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d103      	bne.n	8012492 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801248a:	f7ff fc4d 	bl	8011d28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801248e:	2300      	movs	r3, #0
 8012490:	e05c      	b.n	801254c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012494:	2b00      	cmp	r3, #0
 8012496:	d106      	bne.n	80124a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012498:	f107 0314 	add.w	r3, r7, #20
 801249c:	4618      	mov	r0, r3
 801249e:	f001 faf7 	bl	8013a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80124a2:	2301      	movs	r3, #1
 80124a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80124a6:	f7ff fc3f 	bl	8011d28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80124aa:	f000 ffd9 	bl	8013460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80124ae:	f7ff fc0d 	bl	8011ccc <vPortEnterCritical>
 80124b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124b8:	b25b      	sxtb	r3, r3
 80124ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124be:	d103      	bne.n	80124c8 <xQueueGenericSend+0x164>
 80124c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c2:	2200      	movs	r2, #0
 80124c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80124c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124ce:	b25b      	sxtb	r3, r3
 80124d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124d4:	d103      	bne.n	80124de <xQueueGenericSend+0x17a>
 80124d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d8:	2200      	movs	r2, #0
 80124da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80124de:	f7ff fc23 	bl	8011d28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80124e2:	1d3a      	adds	r2, r7, #4
 80124e4:	f107 0314 	add.w	r3, r7, #20
 80124e8:	4611      	mov	r1, r2
 80124ea:	4618      	mov	r0, r3
 80124ec:	f001 fae6 	bl	8013abc <xTaskCheckForTimeOut>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d124      	bne.n	8012540 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80124f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124f8:	f000 fcdf 	bl	8012eba <prvIsQueueFull>
 80124fc:	4603      	mov	r3, r0
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d018      	beq.n	8012534 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012504:	3310      	adds	r3, #16
 8012506:	687a      	ldr	r2, [r7, #4]
 8012508:	4611      	mov	r1, r2
 801250a:	4618      	mov	r0, r3
 801250c:	f001 fa0e 	bl	801392c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012512:	f000 fc6a 	bl	8012dea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012516:	f000 ffe9 	bl	80134ec <xTaskResumeAll>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	f47f af7c 	bne.w	801241a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8012522:	4b0c      	ldr	r3, [pc, #48]	; (8012554 <xQueueGenericSend+0x1f0>)
 8012524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012528:	601a      	str	r2, [r3, #0]
 801252a:	f3bf 8f4f 	dsb	sy
 801252e:	f3bf 8f6f 	isb	sy
 8012532:	e772      	b.n	801241a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012536:	f000 fc58 	bl	8012dea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801253a:	f000 ffd7 	bl	80134ec <xTaskResumeAll>
 801253e:	e76c      	b.n	801241a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012542:	f000 fc52 	bl	8012dea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012546:	f000 ffd1 	bl	80134ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801254a:	2300      	movs	r3, #0
		}
	}
}
 801254c:	4618      	mov	r0, r3
 801254e:	3738      	adds	r7, #56	; 0x38
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}
 8012554:	e000ed04 	.word	0xe000ed04

08012558 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b08e      	sub	sp, #56	; 0x38
 801255c:	af00      	add	r7, sp, #0
 801255e:	60f8      	str	r0, [r7, #12]
 8012560:	60b9      	str	r1, [r7, #8]
 8012562:	607a      	str	r2, [r7, #4]
 8012564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801256c:	2b00      	cmp	r3, #0
 801256e:	d109      	bne.n	8012584 <xQueueGenericSendFromISR+0x2c>
 8012570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012574:	f383 8811 	msr	BASEPRI, r3
 8012578:	f3bf 8f6f 	isb	sy
 801257c:	f3bf 8f4f 	dsb	sy
 8012580:	627b      	str	r3, [r7, #36]	; 0x24
 8012582:	e7fe      	b.n	8012582 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d103      	bne.n	8012592 <xQueueGenericSendFromISR+0x3a>
 801258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801258e:	2b00      	cmp	r3, #0
 8012590:	d101      	bne.n	8012596 <xQueueGenericSendFromISR+0x3e>
 8012592:	2301      	movs	r3, #1
 8012594:	e000      	b.n	8012598 <xQueueGenericSendFromISR+0x40>
 8012596:	2300      	movs	r3, #0
 8012598:	2b00      	cmp	r3, #0
 801259a:	d109      	bne.n	80125b0 <xQueueGenericSendFromISR+0x58>
 801259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a0:	f383 8811 	msr	BASEPRI, r3
 80125a4:	f3bf 8f6f 	isb	sy
 80125a8:	f3bf 8f4f 	dsb	sy
 80125ac:	623b      	str	r3, [r7, #32]
 80125ae:	e7fe      	b.n	80125ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	2b02      	cmp	r3, #2
 80125b4:	d103      	bne.n	80125be <xQueueGenericSendFromISR+0x66>
 80125b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125ba:	2b01      	cmp	r3, #1
 80125bc:	d101      	bne.n	80125c2 <xQueueGenericSendFromISR+0x6a>
 80125be:	2301      	movs	r3, #1
 80125c0:	e000      	b.n	80125c4 <xQueueGenericSendFromISR+0x6c>
 80125c2:	2300      	movs	r3, #0
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d109      	bne.n	80125dc <xQueueGenericSendFromISR+0x84>
 80125c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125cc:	f383 8811 	msr	BASEPRI, r3
 80125d0:	f3bf 8f6f 	isb	sy
 80125d4:	f3bf 8f4f 	dsb	sy
 80125d8:	61fb      	str	r3, [r7, #28]
 80125da:	e7fe      	b.n	80125da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80125dc:	f7ff fc2e 	bl	8011e3c <vPortValidateInterruptPriority>
	__asm volatile
 80125e0:	f3ef 8211 	mrs	r2, BASEPRI
 80125e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e8:	f383 8811 	msr	BASEPRI, r3
 80125ec:	f3bf 8f6f 	isb	sy
 80125f0:	f3bf 8f4f 	dsb	sy
 80125f4:	61ba      	str	r2, [r7, #24]
 80125f6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80125f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80125fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80125fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012604:	429a      	cmp	r2, r3
 8012606:	d302      	bcc.n	801260e <xQueueGenericSendFromISR+0xb6>
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	2b02      	cmp	r3, #2
 801260c:	d12c      	bne.n	8012668 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012618:	683a      	ldr	r2, [r7, #0]
 801261a:	68b9      	ldr	r1, [r7, #8]
 801261c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801261e:	f000 fb54 	bl	8012cca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012622:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801262a:	d112      	bne.n	8012652 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012630:	2b00      	cmp	r3, #0
 8012632:	d016      	beq.n	8012662 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012636:	3324      	adds	r3, #36	; 0x24
 8012638:	4618      	mov	r0, r3
 801263a:	f001 f9c5 	bl	80139c8 <xTaskRemoveFromEventList>
 801263e:	4603      	mov	r3, r0
 8012640:	2b00      	cmp	r3, #0
 8012642:	d00e      	beq.n	8012662 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d00b      	beq.n	8012662 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	2201      	movs	r2, #1
 801264e:	601a      	str	r2, [r3, #0]
 8012650:	e007      	b.n	8012662 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012652:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012656:	3301      	adds	r3, #1
 8012658:	b2db      	uxtb	r3, r3
 801265a:	b25a      	sxtb	r2, r3
 801265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012662:	2301      	movs	r3, #1
 8012664:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012666:	e001      	b.n	801266c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012668:	2300      	movs	r3, #0
 801266a:	637b      	str	r3, [r7, #52]	; 0x34
 801266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801266e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012670:	693b      	ldr	r3, [r7, #16]
 8012672:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012678:	4618      	mov	r0, r3
 801267a:	3738      	adds	r7, #56	; 0x38
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b08e      	sub	sp, #56	; 0x38
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012690:	2b00      	cmp	r3, #0
 8012692:	d109      	bne.n	80126a8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8012694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012698:	f383 8811 	msr	BASEPRI, r3
 801269c:	f3bf 8f6f 	isb	sy
 80126a0:	f3bf 8f4f 	dsb	sy
 80126a4:	623b      	str	r3, [r7, #32]
 80126a6:	e7fe      	b.n	80126a6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80126a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d009      	beq.n	80126c4 <xQueueGiveFromISR+0x44>
 80126b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b4:	f383 8811 	msr	BASEPRI, r3
 80126b8:	f3bf 8f6f 	isb	sy
 80126bc:	f3bf 8f4f 	dsb	sy
 80126c0:	61fb      	str	r3, [r7, #28]
 80126c2:	e7fe      	b.n	80126c2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80126c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d103      	bne.n	80126d4 <xQueueGiveFromISR+0x54>
 80126cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d101      	bne.n	80126d8 <xQueueGiveFromISR+0x58>
 80126d4:	2301      	movs	r3, #1
 80126d6:	e000      	b.n	80126da <xQueueGiveFromISR+0x5a>
 80126d8:	2300      	movs	r3, #0
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d109      	bne.n	80126f2 <xQueueGiveFromISR+0x72>
 80126de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e2:	f383 8811 	msr	BASEPRI, r3
 80126e6:	f3bf 8f6f 	isb	sy
 80126ea:	f3bf 8f4f 	dsb	sy
 80126ee:	61bb      	str	r3, [r7, #24]
 80126f0:	e7fe      	b.n	80126f0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80126f2:	f7ff fba3 	bl	8011e3c <vPortValidateInterruptPriority>
	__asm volatile
 80126f6:	f3ef 8211 	mrs	r2, BASEPRI
 80126fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126fe:	f383 8811 	msr	BASEPRI, r3
 8012702:	f3bf 8f6f 	isb	sy
 8012706:	f3bf 8f4f 	dsb	sy
 801270a:	617a      	str	r2, [r7, #20]
 801270c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801270e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012710:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012716:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801271c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801271e:	429a      	cmp	r2, r3
 8012720:	d22b      	bcs.n	801277a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272e:	1c5a      	adds	r2, r3, #1
 8012730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012732:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012734:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012738:	f1b3 3fff 	cmp.w	r3, #4294967295
 801273c:	d112      	bne.n	8012764 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012742:	2b00      	cmp	r3, #0
 8012744:	d016      	beq.n	8012774 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012748:	3324      	adds	r3, #36	; 0x24
 801274a:	4618      	mov	r0, r3
 801274c:	f001 f93c 	bl	80139c8 <xTaskRemoveFromEventList>
 8012750:	4603      	mov	r3, r0
 8012752:	2b00      	cmp	r3, #0
 8012754:	d00e      	beq.n	8012774 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d00b      	beq.n	8012774 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	2201      	movs	r2, #1
 8012760:	601a      	str	r2, [r3, #0]
 8012762:	e007      	b.n	8012774 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012768:	3301      	adds	r3, #1
 801276a:	b2db      	uxtb	r3, r3
 801276c:	b25a      	sxtb	r2, r3
 801276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012774:	2301      	movs	r3, #1
 8012776:	637b      	str	r3, [r7, #52]	; 0x34
 8012778:	e001      	b.n	801277e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801277a:	2300      	movs	r3, #0
 801277c:	637b      	str	r3, [r7, #52]	; 0x34
 801277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012780:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801278a:	4618      	mov	r0, r3
 801278c:	3738      	adds	r7, #56	; 0x38
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
	...

08012794 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b08c      	sub	sp, #48	; 0x30
 8012798:	af00      	add	r7, sp, #0
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	60b9      	str	r1, [r7, #8]
 801279e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80127a0:	2300      	movs	r3, #0
 80127a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80127a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d109      	bne.n	80127c2 <xQueueReceive+0x2e>
	__asm volatile
 80127ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b2:	f383 8811 	msr	BASEPRI, r3
 80127b6:	f3bf 8f6f 	isb	sy
 80127ba:	f3bf 8f4f 	dsb	sy
 80127be:	623b      	str	r3, [r7, #32]
 80127c0:	e7fe      	b.n	80127c0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d103      	bne.n	80127d0 <xQueueReceive+0x3c>
 80127c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d101      	bne.n	80127d4 <xQueueReceive+0x40>
 80127d0:	2301      	movs	r3, #1
 80127d2:	e000      	b.n	80127d6 <xQueueReceive+0x42>
 80127d4:	2300      	movs	r3, #0
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d109      	bne.n	80127ee <xQueueReceive+0x5a>
 80127da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127de:	f383 8811 	msr	BASEPRI, r3
 80127e2:	f3bf 8f6f 	isb	sy
 80127e6:	f3bf 8f4f 	dsb	sy
 80127ea:	61fb      	str	r3, [r7, #28]
 80127ec:	e7fe      	b.n	80127ec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80127ee:	f001 fb0d 	bl	8013e0c <xTaskGetSchedulerState>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d102      	bne.n	80127fe <xQueueReceive+0x6a>
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d101      	bne.n	8012802 <xQueueReceive+0x6e>
 80127fe:	2301      	movs	r3, #1
 8012800:	e000      	b.n	8012804 <xQueueReceive+0x70>
 8012802:	2300      	movs	r3, #0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d109      	bne.n	801281c <xQueueReceive+0x88>
 8012808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801280c:	f383 8811 	msr	BASEPRI, r3
 8012810:	f3bf 8f6f 	isb	sy
 8012814:	f3bf 8f4f 	dsb	sy
 8012818:	61bb      	str	r3, [r7, #24]
 801281a:	e7fe      	b.n	801281a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801281c:	f7ff fa56 	bl	8011ccc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012824:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012828:	2b00      	cmp	r3, #0
 801282a:	d01f      	beq.n	801286c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801282c:	68b9      	ldr	r1, [r7, #8]
 801282e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012830:	f000 fab5 	bl	8012d9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012836:	1e5a      	subs	r2, r3, #1
 8012838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801283a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801283e:	691b      	ldr	r3, [r3, #16]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d00f      	beq.n	8012864 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012846:	3310      	adds	r3, #16
 8012848:	4618      	mov	r0, r3
 801284a:	f001 f8bd 	bl	80139c8 <xTaskRemoveFromEventList>
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d007      	beq.n	8012864 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012854:	4b3c      	ldr	r3, [pc, #240]	; (8012948 <xQueueReceive+0x1b4>)
 8012856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801285a:	601a      	str	r2, [r3, #0]
 801285c:	f3bf 8f4f 	dsb	sy
 8012860:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012864:	f7ff fa60 	bl	8011d28 <vPortExitCritical>
				return pdPASS;
 8012868:	2301      	movs	r3, #1
 801286a:	e069      	b.n	8012940 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d103      	bne.n	801287a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012872:	f7ff fa59 	bl	8011d28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012876:	2300      	movs	r3, #0
 8012878:	e062      	b.n	8012940 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287c:	2b00      	cmp	r3, #0
 801287e:	d106      	bne.n	801288e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012880:	f107 0310 	add.w	r3, r7, #16
 8012884:	4618      	mov	r0, r3
 8012886:	f001 f903 	bl	8013a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801288a:	2301      	movs	r3, #1
 801288c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801288e:	f7ff fa4b 	bl	8011d28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012892:	f000 fde5 	bl	8013460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012896:	f7ff fa19 	bl	8011ccc <vPortEnterCritical>
 801289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801289c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128a0:	b25b      	sxtb	r3, r3
 80128a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128a6:	d103      	bne.n	80128b0 <xQueueReceive+0x11c>
 80128a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128aa:	2200      	movs	r2, #0
 80128ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80128b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128b6:	b25b      	sxtb	r3, r3
 80128b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128bc:	d103      	bne.n	80128c6 <xQueueReceive+0x132>
 80128be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128c0:	2200      	movs	r2, #0
 80128c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80128c6:	f7ff fa2f 	bl	8011d28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80128ca:	1d3a      	adds	r2, r7, #4
 80128cc:	f107 0310 	add.w	r3, r7, #16
 80128d0:	4611      	mov	r1, r2
 80128d2:	4618      	mov	r0, r3
 80128d4:	f001 f8f2 	bl	8013abc <xTaskCheckForTimeOut>
 80128d8:	4603      	mov	r3, r0
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d123      	bne.n	8012926 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80128de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128e0:	f000 fad5 	bl	8012e8e <prvIsQueueEmpty>
 80128e4:	4603      	mov	r3, r0
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d017      	beq.n	801291a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80128ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ec:	3324      	adds	r3, #36	; 0x24
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	4611      	mov	r1, r2
 80128f2:	4618      	mov	r0, r3
 80128f4:	f001 f81a 	bl	801392c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80128f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128fa:	f000 fa76 	bl	8012dea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80128fe:	f000 fdf5 	bl	80134ec <xTaskResumeAll>
 8012902:	4603      	mov	r3, r0
 8012904:	2b00      	cmp	r3, #0
 8012906:	d189      	bne.n	801281c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012908:	4b0f      	ldr	r3, [pc, #60]	; (8012948 <xQueueReceive+0x1b4>)
 801290a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801290e:	601a      	str	r2, [r3, #0]
 8012910:	f3bf 8f4f 	dsb	sy
 8012914:	f3bf 8f6f 	isb	sy
 8012918:	e780      	b.n	801281c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801291a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801291c:	f000 fa65 	bl	8012dea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012920:	f000 fde4 	bl	80134ec <xTaskResumeAll>
 8012924:	e77a      	b.n	801281c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012928:	f000 fa5f 	bl	8012dea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801292c:	f000 fdde 	bl	80134ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012932:	f000 faac 	bl	8012e8e <prvIsQueueEmpty>
 8012936:	4603      	mov	r3, r0
 8012938:	2b00      	cmp	r3, #0
 801293a:	f43f af6f 	beq.w	801281c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801293e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012940:	4618      	mov	r0, r3
 8012942:	3730      	adds	r7, #48	; 0x30
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}
 8012948:	e000ed04 	.word	0xe000ed04

0801294c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b08e      	sub	sp, #56	; 0x38
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012956:	2300      	movs	r3, #0
 8012958:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801295e:	2300      	movs	r3, #0
 8012960:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012964:	2b00      	cmp	r3, #0
 8012966:	d109      	bne.n	801297c <xQueueSemaphoreTake+0x30>
 8012968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801296c:	f383 8811 	msr	BASEPRI, r3
 8012970:	f3bf 8f6f 	isb	sy
 8012974:	f3bf 8f4f 	dsb	sy
 8012978:	623b      	str	r3, [r7, #32]
 801297a:	e7fe      	b.n	801297a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012980:	2b00      	cmp	r3, #0
 8012982:	d009      	beq.n	8012998 <xQueueSemaphoreTake+0x4c>
 8012984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012988:	f383 8811 	msr	BASEPRI, r3
 801298c:	f3bf 8f6f 	isb	sy
 8012990:	f3bf 8f4f 	dsb	sy
 8012994:	61fb      	str	r3, [r7, #28]
 8012996:	e7fe      	b.n	8012996 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012998:	f001 fa38 	bl	8013e0c <xTaskGetSchedulerState>
 801299c:	4603      	mov	r3, r0
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d102      	bne.n	80129a8 <xQueueSemaphoreTake+0x5c>
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d101      	bne.n	80129ac <xQueueSemaphoreTake+0x60>
 80129a8:	2301      	movs	r3, #1
 80129aa:	e000      	b.n	80129ae <xQueueSemaphoreTake+0x62>
 80129ac:	2300      	movs	r3, #0
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d109      	bne.n	80129c6 <xQueueSemaphoreTake+0x7a>
 80129b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b6:	f383 8811 	msr	BASEPRI, r3
 80129ba:	f3bf 8f6f 	isb	sy
 80129be:	f3bf 8f4f 	dsb	sy
 80129c2:	61bb      	str	r3, [r7, #24]
 80129c4:	e7fe      	b.n	80129c4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80129c6:	f7ff f981 	bl	8011ccc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80129ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129ce:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80129d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d024      	beq.n	8012a20 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80129d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129d8:	1e5a      	subs	r2, r3, #1
 80129da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129dc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80129de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d104      	bne.n	80129f0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80129e6:	f001 fb8d 	bl	8014104 <pvTaskIncrementMutexHeldCount>
 80129ea:	4602      	mov	r2, r0
 80129ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ee:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f2:	691b      	ldr	r3, [r3, #16]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d00f      	beq.n	8012a18 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fa:	3310      	adds	r3, #16
 80129fc:	4618      	mov	r0, r3
 80129fe:	f000 ffe3 	bl	80139c8 <xTaskRemoveFromEventList>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d007      	beq.n	8012a18 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012a08:	4b53      	ldr	r3, [pc, #332]	; (8012b58 <xQueueSemaphoreTake+0x20c>)
 8012a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a0e:	601a      	str	r2, [r3, #0]
 8012a10:	f3bf 8f4f 	dsb	sy
 8012a14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012a18:	f7ff f986 	bl	8011d28 <vPortExitCritical>
				return pdPASS;
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	e096      	b.n	8012b4e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d110      	bne.n	8012a48 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d009      	beq.n	8012a40 <xQueueSemaphoreTake+0xf4>
 8012a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a30:	f383 8811 	msr	BASEPRI, r3
 8012a34:	f3bf 8f6f 	isb	sy
 8012a38:	f3bf 8f4f 	dsb	sy
 8012a3c:	617b      	str	r3, [r7, #20]
 8012a3e:	e7fe      	b.n	8012a3e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012a40:	f7ff f972 	bl	8011d28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012a44:	2300      	movs	r3, #0
 8012a46:	e082      	b.n	8012b4e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d106      	bne.n	8012a5c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012a4e:	f107 030c 	add.w	r3, r7, #12
 8012a52:	4618      	mov	r0, r3
 8012a54:	f001 f81c 	bl	8013a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012a58:	2301      	movs	r3, #1
 8012a5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012a5c:	f7ff f964 	bl	8011d28 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012a60:	f000 fcfe 	bl	8013460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012a64:	f7ff f932 	bl	8011ccc <vPortEnterCritical>
 8012a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a6e:	b25b      	sxtb	r3, r3
 8012a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a74:	d103      	bne.n	8012a7e <xQueueSemaphoreTake+0x132>
 8012a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a78:	2200      	movs	r2, #0
 8012a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a84:	b25b      	sxtb	r3, r3
 8012a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a8a:	d103      	bne.n	8012a94 <xQueueSemaphoreTake+0x148>
 8012a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8e:	2200      	movs	r2, #0
 8012a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a94:	f7ff f948 	bl	8011d28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a98:	463a      	mov	r2, r7
 8012a9a:	f107 030c 	add.w	r3, r7, #12
 8012a9e:	4611      	mov	r1, r2
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f001 f80b 	bl	8013abc <xTaskCheckForTimeOut>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d132      	bne.n	8012b12 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012aac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012aae:	f000 f9ee 	bl	8012e8e <prvIsQueueEmpty>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d026      	beq.n	8012b06 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d109      	bne.n	8012ad4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8012ac0:	f7ff f904 	bl	8011ccc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f001 f9bd 	bl	8013e48 <xTaskPriorityInherit>
 8012ace:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012ad0:	f7ff f92a 	bl	8011d28 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad6:	3324      	adds	r3, #36	; 0x24
 8012ad8:	683a      	ldr	r2, [r7, #0]
 8012ada:	4611      	mov	r1, r2
 8012adc:	4618      	mov	r0, r3
 8012ade:	f000 ff25 	bl	801392c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012ae2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ae4:	f000 f981 	bl	8012dea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012ae8:	f000 fd00 	bl	80134ec <xTaskResumeAll>
 8012aec:	4603      	mov	r3, r0
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	f47f af69 	bne.w	80129c6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8012af4:	4b18      	ldr	r3, [pc, #96]	; (8012b58 <xQueueSemaphoreTake+0x20c>)
 8012af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012afa:	601a      	str	r2, [r3, #0]
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	f3bf 8f6f 	isb	sy
 8012b04:	e75f      	b.n	80129c6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012b06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b08:	f000 f96f 	bl	8012dea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012b0c:	f000 fcee 	bl	80134ec <xTaskResumeAll>
 8012b10:	e759      	b.n	80129c6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012b12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b14:	f000 f969 	bl	8012dea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012b18:	f000 fce8 	bl	80134ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b1e:	f000 f9b6 	bl	8012e8e <prvIsQueueEmpty>
 8012b22:	4603      	mov	r3, r0
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	f43f af4e 	beq.w	80129c6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d00d      	beq.n	8012b4c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8012b30:	f7ff f8cc 	bl	8011ccc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012b34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b36:	f000 f8b0 	bl	8012c9a <prvGetDisinheritPriorityAfterTimeout>
 8012b3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8012b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b42:	4618      	mov	r0, r3
 8012b44:	f001 fa5a 	bl	8013ffc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012b48:	f7ff f8ee 	bl	8011d28 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3738      	adds	r7, #56	; 0x38
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	e000ed04 	.word	0xe000ed04

08012b5c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b08e      	sub	sp, #56	; 0x38
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	60f8      	str	r0, [r7, #12]
 8012b64:	60b9      	str	r1, [r7, #8]
 8012b66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d109      	bne.n	8012b86 <xQueueReceiveFromISR+0x2a>
 8012b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b76:	f383 8811 	msr	BASEPRI, r3
 8012b7a:	f3bf 8f6f 	isb	sy
 8012b7e:	f3bf 8f4f 	dsb	sy
 8012b82:	623b      	str	r3, [r7, #32]
 8012b84:	e7fe      	b.n	8012b84 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d103      	bne.n	8012b94 <xQueueReceiveFromISR+0x38>
 8012b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d101      	bne.n	8012b98 <xQueueReceiveFromISR+0x3c>
 8012b94:	2301      	movs	r3, #1
 8012b96:	e000      	b.n	8012b9a <xQueueReceiveFromISR+0x3e>
 8012b98:	2300      	movs	r3, #0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d109      	bne.n	8012bb2 <xQueueReceiveFromISR+0x56>
 8012b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba2:	f383 8811 	msr	BASEPRI, r3
 8012ba6:	f3bf 8f6f 	isb	sy
 8012baa:	f3bf 8f4f 	dsb	sy
 8012bae:	61fb      	str	r3, [r7, #28]
 8012bb0:	e7fe      	b.n	8012bb0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012bb2:	f7ff f943 	bl	8011e3c <vPortValidateInterruptPriority>
	__asm volatile
 8012bb6:	f3ef 8211 	mrs	r2, BASEPRI
 8012bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bbe:	f383 8811 	msr	BASEPRI, r3
 8012bc2:	f3bf 8f6f 	isb	sy
 8012bc6:	f3bf 8f4f 	dsb	sy
 8012bca:	61ba      	str	r2, [r7, #24]
 8012bcc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012bce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d02f      	beq.n	8012c3e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012be8:	68b9      	ldr	r1, [r7, #8]
 8012bea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bec:	f000 f8d7 	bl	8012d9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf2:	1e5a      	subs	r2, r3, #1
 8012bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012bf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c00:	d112      	bne.n	8012c28 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c04:	691b      	ldr	r3, [r3, #16]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d016      	beq.n	8012c38 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c0c:	3310      	adds	r3, #16
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f000 feda 	bl	80139c8 <xTaskRemoveFromEventList>
 8012c14:	4603      	mov	r3, r0
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d00e      	beq.n	8012c38 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d00b      	beq.n	8012c38 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2201      	movs	r2, #1
 8012c24:	601a      	str	r2, [r3, #0]
 8012c26:	e007      	b.n	8012c38 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	b2db      	uxtb	r3, r3
 8012c30:	b25a      	sxtb	r2, r3
 8012c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8012c3c:	e001      	b.n	8012c42 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	637b      	str	r3, [r7, #52]	; 0x34
 8012c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3738      	adds	r7, #56	; 0x38
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}

08012c56 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012c56:	b580      	push	{r7, lr}
 8012c58:	b084      	sub	sp, #16
 8012c5a:	af00      	add	r7, sp, #0
 8012c5c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d109      	bne.n	8012c7c <vQueueDelete+0x26>
	__asm volatile
 8012c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c6c:	f383 8811 	msr	BASEPRI, r3
 8012c70:	f3bf 8f6f 	isb	sy
 8012c74:	f3bf 8f4f 	dsb	sy
 8012c78:	60bb      	str	r3, [r7, #8]
 8012c7a:	e7fe      	b.n	8012c7a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012c7c:	68f8      	ldr	r0, [r7, #12]
 8012c7e:	f000 f95d 	bl	8012f3c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d102      	bne.n	8012c92 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8012c8c:	68f8      	ldr	r0, [r7, #12]
 8012c8e:	f7fe fd2f 	bl	80116f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012c92:	bf00      	nop
 8012c94:	3710      	adds	r7, #16
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}

08012c9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012c9a:	b480      	push	{r7}
 8012c9c:	b085      	sub	sp, #20
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d006      	beq.n	8012cb8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012cb4:	60fb      	str	r3, [r7, #12]
 8012cb6:	e001      	b.n	8012cbc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
	}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3714      	adds	r7, #20
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc8:	4770      	bx	lr

08012cca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012cca:	b580      	push	{r7, lr}
 8012ccc:	b086      	sub	sp, #24
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	60f8      	str	r0, [r7, #12]
 8012cd2:	60b9      	str	r1, [r7, #8]
 8012cd4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cde:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d10d      	bne.n	8012d04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d14d      	bne.n	8012d8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	685b      	ldr	r3, [r3, #4]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f001 f915 	bl	8013f24 <xTaskPriorityDisinherit>
 8012cfa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2200      	movs	r2, #0
 8012d00:	605a      	str	r2, [r3, #4]
 8012d02:	e043      	b.n	8012d8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d119      	bne.n	8012d3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	6898      	ldr	r0, [r3, #8]
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d12:	461a      	mov	r2, r3
 8012d14:	68b9      	ldr	r1, [r7, #8]
 8012d16:	f007 fc8f 	bl	801a638 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	689a      	ldr	r2, [r3, #8]
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d22:	441a      	add	r2, r3
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	689a      	ldr	r2, [r3, #8]
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d32b      	bcc.n	8012d8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	681a      	ldr	r2, [r3, #0]
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	609a      	str	r2, [r3, #8]
 8012d3c:	e026      	b.n	8012d8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	68d8      	ldr	r0, [r3, #12]
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d46:	461a      	mov	r2, r3
 8012d48:	68b9      	ldr	r1, [r7, #8]
 8012d4a:	f007 fc75 	bl	801a638 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	68da      	ldr	r2, [r3, #12]
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d56:	425b      	negs	r3, r3
 8012d58:	441a      	add	r2, r3
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	68da      	ldr	r2, [r3, #12]
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d207      	bcs.n	8012d7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	685a      	ldr	r2, [r3, #4]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d72:	425b      	negs	r3, r3
 8012d74:	441a      	add	r2, r3
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2b02      	cmp	r3, #2
 8012d7e:	d105      	bne.n	8012d8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d002      	beq.n	8012d8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	3b01      	subs	r3, #1
 8012d8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012d8c:	693b      	ldr	r3, [r7, #16]
 8012d8e:	1c5a      	adds	r2, r3, #1
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012d94:	697b      	ldr	r3, [r7, #20]
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3718      	adds	r7, #24
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}

08012d9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012d9e:	b580      	push	{r7, lr}
 8012da0:	b082      	sub	sp, #8
 8012da2:	af00      	add	r7, sp, #0
 8012da4:	6078      	str	r0, [r7, #4]
 8012da6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d018      	beq.n	8012de2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	68da      	ldr	r2, [r3, #12]
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012db8:	441a      	add	r2, r3
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	68da      	ldr	r2, [r3, #12]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	685b      	ldr	r3, [r3, #4]
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	d303      	bcc.n	8012dd2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681a      	ldr	r2, [r3, #0]
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	68d9      	ldr	r1, [r3, #12]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dda:	461a      	mov	r2, r3
 8012ddc:	6838      	ldr	r0, [r7, #0]
 8012dde:	f007 fc2b 	bl	801a638 <memcpy>
	}
}
 8012de2:	bf00      	nop
 8012de4:	3708      	adds	r7, #8
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}

08012dea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012dea:	b580      	push	{r7, lr}
 8012dec:	b084      	sub	sp, #16
 8012dee:	af00      	add	r7, sp, #0
 8012df0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012df2:	f7fe ff6b 	bl	8011ccc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012dfc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012dfe:	e011      	b.n	8012e24 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d012      	beq.n	8012e2e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	3324      	adds	r3, #36	; 0x24
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f000 fddb 	bl	80139c8 <xTaskRemoveFromEventList>
 8012e12:	4603      	mov	r3, r0
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d001      	beq.n	8012e1c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012e18:	f000 feb0 	bl	8013b7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012e1c:	7bfb      	ldrb	r3, [r7, #15]
 8012e1e:	3b01      	subs	r3, #1
 8012e20:	b2db      	uxtb	r3, r3
 8012e22:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	dce9      	bgt.n	8012e00 <prvUnlockQueue+0x16>
 8012e2c:	e000      	b.n	8012e30 <prvUnlockQueue+0x46>
					break;
 8012e2e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	22ff      	movs	r2, #255	; 0xff
 8012e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012e38:	f7fe ff76 	bl	8011d28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012e3c:	f7fe ff46 	bl	8011ccc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e46:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e48:	e011      	b.n	8012e6e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	691b      	ldr	r3, [r3, #16]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d012      	beq.n	8012e78 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	3310      	adds	r3, #16
 8012e56:	4618      	mov	r0, r3
 8012e58:	f000 fdb6 	bl	80139c8 <xTaskRemoveFromEventList>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d001      	beq.n	8012e66 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012e62:	f000 fe8b 	bl	8013b7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012e66:	7bbb      	ldrb	r3, [r7, #14]
 8012e68:	3b01      	subs	r3, #1
 8012e6a:	b2db      	uxtb	r3, r3
 8012e6c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	dce9      	bgt.n	8012e4a <prvUnlockQueue+0x60>
 8012e76:	e000      	b.n	8012e7a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012e78:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	22ff      	movs	r2, #255	; 0xff
 8012e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012e82:	f7fe ff51 	bl	8011d28 <vPortExitCritical>
}
 8012e86:	bf00      	nop
 8012e88:	3710      	adds	r7, #16
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}

08012e8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012e8e:	b580      	push	{r7, lr}
 8012e90:	b084      	sub	sp, #16
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012e96:	f7fe ff19 	bl	8011ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d102      	bne.n	8012ea8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	60fb      	str	r3, [r7, #12]
 8012ea6:	e001      	b.n	8012eac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012eac:	f7fe ff3c 	bl	8011d28 <vPortExitCritical>

	return xReturn;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3710      	adds	r7, #16
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}

08012eba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012eba:	b580      	push	{r7, lr}
 8012ebc:	b084      	sub	sp, #16
 8012ebe:	af00      	add	r7, sp, #0
 8012ec0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012ec2:	f7fe ff03 	bl	8011ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d102      	bne.n	8012ed8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	60fb      	str	r3, [r7, #12]
 8012ed6:	e001      	b.n	8012edc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012edc:	f7fe ff24 	bl	8011d28 <vPortExitCritical>

	return xReturn;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	3710      	adds	r7, #16
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}
	...

08012eec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012eec:	b480      	push	{r7}
 8012eee:	b085      	sub	sp, #20
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
 8012ef4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	60fb      	str	r3, [r7, #12]
 8012efa:	e014      	b.n	8012f26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012efc:	4a0e      	ldr	r2, [pc, #56]	; (8012f38 <vQueueAddToRegistry+0x4c>)
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d10b      	bne.n	8012f20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012f08:	490b      	ldr	r1, [pc, #44]	; (8012f38 <vQueueAddToRegistry+0x4c>)
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	683a      	ldr	r2, [r7, #0]
 8012f0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012f12:	4a09      	ldr	r2, [pc, #36]	; (8012f38 <vQueueAddToRegistry+0x4c>)
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	00db      	lsls	r3, r3, #3
 8012f18:	4413      	add	r3, r2
 8012f1a:	687a      	ldr	r2, [r7, #4]
 8012f1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012f1e:	e005      	b.n	8012f2c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	3301      	adds	r3, #1
 8012f24:	60fb      	str	r3, [r7, #12]
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2b0b      	cmp	r3, #11
 8012f2a:	d9e7      	bls.n	8012efc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012f2c:	bf00      	nop
 8012f2e:	3714      	adds	r7, #20
 8012f30:	46bd      	mov	sp, r7
 8012f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f36:	4770      	bx	lr
 8012f38:	2002895c 	.word	0x2002895c

08012f3c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012f3c:	b480      	push	{r7}
 8012f3e:	b085      	sub	sp, #20
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012f44:	2300      	movs	r3, #0
 8012f46:	60fb      	str	r3, [r7, #12]
 8012f48:	e016      	b.n	8012f78 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012f4a:	4a10      	ldr	r2, [pc, #64]	; (8012f8c <vQueueUnregisterQueue+0x50>)
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	00db      	lsls	r3, r3, #3
 8012f50:	4413      	add	r3, r2
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	687a      	ldr	r2, [r7, #4]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d10b      	bne.n	8012f72 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012f5a:	4a0c      	ldr	r2, [pc, #48]	; (8012f8c <vQueueUnregisterQueue+0x50>)
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	2100      	movs	r1, #0
 8012f60:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012f64:	4a09      	ldr	r2, [pc, #36]	; (8012f8c <vQueueUnregisterQueue+0x50>)
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	00db      	lsls	r3, r3, #3
 8012f6a:	4413      	add	r3, r2
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	605a      	str	r2, [r3, #4]
				break;
 8012f70:	e005      	b.n	8012f7e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	3301      	adds	r3, #1
 8012f76:	60fb      	str	r3, [r7, #12]
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	2b0b      	cmp	r3, #11
 8012f7c:	d9e5      	bls.n	8012f4a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012f7e:	bf00      	nop
 8012f80:	3714      	adds	r7, #20
 8012f82:	46bd      	mov	sp, r7
 8012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f88:	4770      	bx	lr
 8012f8a:	bf00      	nop
 8012f8c:	2002895c 	.word	0x2002895c

08012f90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b086      	sub	sp, #24
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	60f8      	str	r0, [r7, #12]
 8012f98:	60b9      	str	r1, [r7, #8]
 8012f9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012fa0:	f7fe fe94 	bl	8011ccc <vPortEnterCritical>
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012faa:	b25b      	sxtb	r3, r3
 8012fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fb0:	d103      	bne.n	8012fba <vQueueWaitForMessageRestricted+0x2a>
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012fc0:	b25b      	sxtb	r3, r3
 8012fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fc6:	d103      	bne.n	8012fd0 <vQueueWaitForMessageRestricted+0x40>
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012fd0:	f7fe feaa 	bl	8011d28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d106      	bne.n	8012fea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012fdc:	697b      	ldr	r3, [r7, #20]
 8012fde:	3324      	adds	r3, #36	; 0x24
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	68b9      	ldr	r1, [r7, #8]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f000 fcc5 	bl	8013974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012fea:	6978      	ldr	r0, [r7, #20]
 8012fec:	f7ff fefd 	bl	8012dea <prvUnlockQueue>
	}
 8012ff0:	bf00      	nop
 8012ff2:	3718      	adds	r7, #24
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}

08012ff8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b08e      	sub	sp, #56	; 0x38
 8012ffc:	af04      	add	r7, sp, #16
 8012ffe:	60f8      	str	r0, [r7, #12]
 8013000:	60b9      	str	r1, [r7, #8]
 8013002:	607a      	str	r2, [r7, #4]
 8013004:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013008:	2b00      	cmp	r3, #0
 801300a:	d109      	bne.n	8013020 <xTaskCreateStatic+0x28>
 801300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013010:	f383 8811 	msr	BASEPRI, r3
 8013014:	f3bf 8f6f 	isb	sy
 8013018:	f3bf 8f4f 	dsb	sy
 801301c:	623b      	str	r3, [r7, #32]
 801301e:	e7fe      	b.n	801301e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8013020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013022:	2b00      	cmp	r3, #0
 8013024:	d109      	bne.n	801303a <xTaskCreateStatic+0x42>
 8013026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801302a:	f383 8811 	msr	BASEPRI, r3
 801302e:	f3bf 8f6f 	isb	sy
 8013032:	f3bf 8f4f 	dsb	sy
 8013036:	61fb      	str	r3, [r7, #28]
 8013038:	e7fe      	b.n	8013038 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801303a:	2364      	movs	r3, #100	; 0x64
 801303c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	2b64      	cmp	r3, #100	; 0x64
 8013042:	d009      	beq.n	8013058 <xTaskCreateStatic+0x60>
 8013044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013048:	f383 8811 	msr	BASEPRI, r3
 801304c:	f3bf 8f6f 	isb	sy
 8013050:	f3bf 8f4f 	dsb	sy
 8013054:	61bb      	str	r3, [r7, #24]
 8013056:	e7fe      	b.n	8013056 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305a:	2b00      	cmp	r3, #0
 801305c:	d01e      	beq.n	801309c <xTaskCreateStatic+0xa4>
 801305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013060:	2b00      	cmp	r3, #0
 8013062:	d01b      	beq.n	801309c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013066:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801306c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013070:	2202      	movs	r2, #2
 8013072:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013076:	2300      	movs	r3, #0
 8013078:	9303      	str	r3, [sp, #12]
 801307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801307c:	9302      	str	r3, [sp, #8]
 801307e:	f107 0314 	add.w	r3, r7, #20
 8013082:	9301      	str	r3, [sp, #4]
 8013084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	687a      	ldr	r2, [r7, #4]
 801308c:	68b9      	ldr	r1, [r7, #8]
 801308e:	68f8      	ldr	r0, [r7, #12]
 8013090:	f000 f850 	bl	8013134 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013096:	f000 f8d9 	bl	801324c <prvAddNewTaskToReadyList>
 801309a:	e001      	b.n	80130a0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 801309c:	2300      	movs	r3, #0
 801309e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80130a0:	697b      	ldr	r3, [r7, #20]
	}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3728      	adds	r7, #40	; 0x28
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}

080130aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80130aa:	b580      	push	{r7, lr}
 80130ac:	b08c      	sub	sp, #48	; 0x30
 80130ae:	af04      	add	r7, sp, #16
 80130b0:	60f8      	str	r0, [r7, #12]
 80130b2:	60b9      	str	r1, [r7, #8]
 80130b4:	603b      	str	r3, [r7, #0]
 80130b6:	4613      	mov	r3, r2
 80130b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130ba:	88fb      	ldrh	r3, [r7, #6]
 80130bc:	009b      	lsls	r3, r3, #2
 80130be:	4618      	mov	r0, r3
 80130c0:	f7fe fa50 	bl	8011564 <pvPortMalloc>
 80130c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d00e      	beq.n	80130ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80130cc:	2064      	movs	r0, #100	; 0x64
 80130ce:	f7fe fa49 	bl	8011564 <pvPortMalloc>
 80130d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80130d4:	69fb      	ldr	r3, [r7, #28]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d003      	beq.n	80130e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	697a      	ldr	r2, [r7, #20]
 80130de:	631a      	str	r2, [r3, #48]	; 0x30
 80130e0:	e005      	b.n	80130ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80130e2:	6978      	ldr	r0, [r7, #20]
 80130e4:	f7fe fb04 	bl	80116f0 <vPortFree>
 80130e8:	e001      	b.n	80130ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80130ea:	2300      	movs	r3, #0
 80130ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80130ee:	69fb      	ldr	r3, [r7, #28]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d017      	beq.n	8013124 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80130f4:	69fb      	ldr	r3, [r7, #28]
 80130f6:	2200      	movs	r2, #0
 80130f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80130fc:	88fa      	ldrh	r2, [r7, #6]
 80130fe:	2300      	movs	r3, #0
 8013100:	9303      	str	r3, [sp, #12]
 8013102:	69fb      	ldr	r3, [r7, #28]
 8013104:	9302      	str	r3, [sp, #8]
 8013106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013108:	9301      	str	r3, [sp, #4]
 801310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310c:	9300      	str	r3, [sp, #0]
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	68b9      	ldr	r1, [r7, #8]
 8013112:	68f8      	ldr	r0, [r7, #12]
 8013114:	f000 f80e 	bl	8013134 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013118:	69f8      	ldr	r0, [r7, #28]
 801311a:	f000 f897 	bl	801324c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801311e:	2301      	movs	r3, #1
 8013120:	61bb      	str	r3, [r7, #24]
 8013122:	e002      	b.n	801312a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013124:	f04f 33ff 	mov.w	r3, #4294967295
 8013128:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801312a:	69bb      	ldr	r3, [r7, #24]
	}
 801312c:	4618      	mov	r0, r3
 801312e:	3720      	adds	r7, #32
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}

08013134 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b088      	sub	sp, #32
 8013138:	af00      	add	r7, sp, #0
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	60b9      	str	r1, [r7, #8]
 801313e:	607a      	str	r2, [r7, #4]
 8013140:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013144:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	009b      	lsls	r3, r3, #2
 801314a:	461a      	mov	r2, r3
 801314c:	21a5      	movs	r1, #165	; 0xa5
 801314e:	f007 fa7e 	bl	801a64e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801315c:	3b01      	subs	r3, #1
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	4413      	add	r3, r2
 8013162:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013164:	69bb      	ldr	r3, [r7, #24]
 8013166:	f023 0307 	bic.w	r3, r3, #7
 801316a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801316c:	69bb      	ldr	r3, [r7, #24]
 801316e:	f003 0307 	and.w	r3, r3, #7
 8013172:	2b00      	cmp	r3, #0
 8013174:	d009      	beq.n	801318a <prvInitialiseNewTask+0x56>
 8013176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801317a:	f383 8811 	msr	BASEPRI, r3
 801317e:	f3bf 8f6f 	isb	sy
 8013182:	f3bf 8f4f 	dsb	sy
 8013186:	617b      	str	r3, [r7, #20]
 8013188:	e7fe      	b.n	8013188 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 801318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801318c:	69ba      	ldr	r2, [r7, #24]
 801318e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013190:	2300      	movs	r3, #0
 8013192:	61fb      	str	r3, [r7, #28]
 8013194:	e012      	b.n	80131bc <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013196:	68ba      	ldr	r2, [r7, #8]
 8013198:	69fb      	ldr	r3, [r7, #28]
 801319a:	4413      	add	r3, r2
 801319c:	7819      	ldrb	r1, [r3, #0]
 801319e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131a0:	69fb      	ldr	r3, [r7, #28]
 80131a2:	4413      	add	r3, r2
 80131a4:	3334      	adds	r3, #52	; 0x34
 80131a6:	460a      	mov	r2, r1
 80131a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80131aa:	68ba      	ldr	r2, [r7, #8]
 80131ac:	69fb      	ldr	r3, [r7, #28]
 80131ae:	4413      	add	r3, r2
 80131b0:	781b      	ldrb	r3, [r3, #0]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d006      	beq.n	80131c4 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80131b6:	69fb      	ldr	r3, [r7, #28]
 80131b8:	3301      	adds	r3, #1
 80131ba:	61fb      	str	r3, [r7, #28]
 80131bc:	69fb      	ldr	r3, [r7, #28]
 80131be:	2b0f      	cmp	r3, #15
 80131c0:	d9e9      	bls.n	8013196 <prvInitialiseNewTask+0x62>
 80131c2:	e000      	b.n	80131c6 <prvInitialiseNewTask+0x92>
		{
			break;
 80131c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80131c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c8:	2200      	movs	r2, #0
 80131ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80131ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d0:	2b37      	cmp	r3, #55	; 0x37
 80131d2:	d901      	bls.n	80131d8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80131d4:	2337      	movs	r3, #55	; 0x37
 80131d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80131d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80131de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131e2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80131e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e6:	2200      	movs	r2, #0
 80131e8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80131ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ec:	3304      	adds	r3, #4
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7fe fbb4 	bl	801195c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80131f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f6:	3318      	adds	r3, #24
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7fe fbaf 	bl	801195c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80131fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013202:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013206:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013212:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013216:	2200      	movs	r2, #0
 8013218:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801321c:	2200      	movs	r2, #0
 801321e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013222:	2200      	movs	r2, #0
 8013224:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013228:	683a      	ldr	r2, [r7, #0]
 801322a:	68f9      	ldr	r1, [r7, #12]
 801322c:	69b8      	ldr	r0, [r7, #24]
 801322e:	f7fe fc29 	bl	8011a84 <pxPortInitialiseStack>
 8013232:	4602      	mov	r2, r0
 8013234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013236:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8013238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801323a:	2b00      	cmp	r3, #0
 801323c:	d002      	beq.n	8013244 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013242:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013244:	bf00      	nop
 8013246:	3720      	adds	r7, #32
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}

0801324c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b082      	sub	sp, #8
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013254:	f7fe fd3a 	bl	8011ccc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013258:	4b2d      	ldr	r3, [pc, #180]	; (8013310 <prvAddNewTaskToReadyList+0xc4>)
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	3301      	adds	r3, #1
 801325e:	4a2c      	ldr	r2, [pc, #176]	; (8013310 <prvAddNewTaskToReadyList+0xc4>)
 8013260:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013262:	4b2c      	ldr	r3, [pc, #176]	; (8013314 <prvAddNewTaskToReadyList+0xc8>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d109      	bne.n	801327e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801326a:	4a2a      	ldr	r2, [pc, #168]	; (8013314 <prvAddNewTaskToReadyList+0xc8>)
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013270:	4b27      	ldr	r3, [pc, #156]	; (8013310 <prvAddNewTaskToReadyList+0xc4>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	2b01      	cmp	r3, #1
 8013276:	d110      	bne.n	801329a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013278:	f000 fcf8 	bl	8013c6c <prvInitialiseTaskLists>
 801327c:	e00d      	b.n	801329a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801327e:	4b26      	ldr	r3, [pc, #152]	; (8013318 <prvAddNewTaskToReadyList+0xcc>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d109      	bne.n	801329a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013286:	4b23      	ldr	r3, [pc, #140]	; (8013314 <prvAddNewTaskToReadyList+0xc8>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013290:	429a      	cmp	r2, r3
 8013292:	d802      	bhi.n	801329a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013294:	4a1f      	ldr	r2, [pc, #124]	; (8013314 <prvAddNewTaskToReadyList+0xc8>)
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801329a:	4b20      	ldr	r3, [pc, #128]	; (801331c <prvAddNewTaskToReadyList+0xd0>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	3301      	adds	r3, #1
 80132a0:	4a1e      	ldr	r2, [pc, #120]	; (801331c <prvAddNewTaskToReadyList+0xd0>)
 80132a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80132a4:	4b1d      	ldr	r3, [pc, #116]	; (801331c <prvAddNewTaskToReadyList+0xd0>)
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132b0:	4b1b      	ldr	r3, [pc, #108]	; (8013320 <prvAddNewTaskToReadyList+0xd4>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d903      	bls.n	80132c0 <prvAddNewTaskToReadyList+0x74>
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132bc:	4a18      	ldr	r2, [pc, #96]	; (8013320 <prvAddNewTaskToReadyList+0xd4>)
 80132be:	6013      	str	r3, [r2, #0]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132c4:	4613      	mov	r3, r2
 80132c6:	009b      	lsls	r3, r3, #2
 80132c8:	4413      	add	r3, r2
 80132ca:	009b      	lsls	r3, r3, #2
 80132cc:	4a15      	ldr	r2, [pc, #84]	; (8013324 <prvAddNewTaskToReadyList+0xd8>)
 80132ce:	441a      	add	r2, r3
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	3304      	adds	r3, #4
 80132d4:	4619      	mov	r1, r3
 80132d6:	4610      	mov	r0, r2
 80132d8:	f7fe fb4d 	bl	8011976 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80132dc:	f7fe fd24 	bl	8011d28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80132e0:	4b0d      	ldr	r3, [pc, #52]	; (8013318 <prvAddNewTaskToReadyList+0xcc>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d00e      	beq.n	8013306 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80132e8:	4b0a      	ldr	r3, [pc, #40]	; (8013314 <prvAddNewTaskToReadyList+0xc8>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d207      	bcs.n	8013306 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80132f6:	4b0c      	ldr	r3, [pc, #48]	; (8013328 <prvAddNewTaskToReadyList+0xdc>)
 80132f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132fc:	601a      	str	r2, [r3, #0]
 80132fe:	f3bf 8f4f 	dsb	sy
 8013302:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013306:	bf00      	nop
 8013308:	3708      	adds	r7, #8
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}
 801330e:	bf00      	nop
 8013310:	20027468 	.word	0x20027468
 8013314:	20026f94 	.word	0x20026f94
 8013318:	20027474 	.word	0x20027474
 801331c:	20027484 	.word	0x20027484
 8013320:	20027470 	.word	0x20027470
 8013324:	20026f98 	.word	0x20026f98
 8013328:	e000ed04 	.word	0xe000ed04

0801332c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013334:	2300      	movs	r3, #0
 8013336:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d016      	beq.n	801336c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801333e:	4b13      	ldr	r3, [pc, #76]	; (801338c <vTaskDelay+0x60>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d009      	beq.n	801335a <vTaskDelay+0x2e>
 8013346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334a:	f383 8811 	msr	BASEPRI, r3
 801334e:	f3bf 8f6f 	isb	sy
 8013352:	f3bf 8f4f 	dsb	sy
 8013356:	60bb      	str	r3, [r7, #8]
 8013358:	e7fe      	b.n	8013358 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801335a:	f000 f881 	bl	8013460 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801335e:	2100      	movs	r1, #0
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f001 f8a9 	bl	80144b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013366:	f000 f8c1 	bl	80134ec <xTaskResumeAll>
 801336a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d107      	bne.n	8013382 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8013372:	4b07      	ldr	r3, [pc, #28]	; (8013390 <vTaskDelay+0x64>)
 8013374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013378:	601a      	str	r2, [r3, #0]
 801337a:	f3bf 8f4f 	dsb	sy
 801337e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013382:	bf00      	nop
 8013384:	3710      	adds	r7, #16
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	20027490 	.word	0x20027490
 8013390:	e000ed04 	.word	0xe000ed04

08013394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b08a      	sub	sp, #40	; 0x28
 8013398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801339a:	2300      	movs	r3, #0
 801339c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801339e:	2300      	movs	r3, #0
 80133a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80133a2:	463a      	mov	r2, r7
 80133a4:	1d39      	adds	r1, r7, #4
 80133a6:	f107 0308 	add.w	r3, r7, #8
 80133aa:	4618      	mov	r0, r3
 80133ac:	f7fe f8a6 	bl	80114fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80133b0:	6839      	ldr	r1, [r7, #0]
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	68ba      	ldr	r2, [r7, #8]
 80133b6:	9202      	str	r2, [sp, #8]
 80133b8:	9301      	str	r3, [sp, #4]
 80133ba:	2300      	movs	r3, #0
 80133bc:	9300      	str	r3, [sp, #0]
 80133be:	2300      	movs	r3, #0
 80133c0:	460a      	mov	r2, r1
 80133c2:	4921      	ldr	r1, [pc, #132]	; (8013448 <vTaskStartScheduler+0xb4>)
 80133c4:	4821      	ldr	r0, [pc, #132]	; (801344c <vTaskStartScheduler+0xb8>)
 80133c6:	f7ff fe17 	bl	8012ff8 <xTaskCreateStatic>
 80133ca:	4602      	mov	r2, r0
 80133cc:	4b20      	ldr	r3, [pc, #128]	; (8013450 <vTaskStartScheduler+0xbc>)
 80133ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80133d0:	4b1f      	ldr	r3, [pc, #124]	; (8013450 <vTaskStartScheduler+0xbc>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d002      	beq.n	80133de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80133d8:	2301      	movs	r3, #1
 80133da:	617b      	str	r3, [r7, #20]
 80133dc:	e001      	b.n	80133e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80133de:	2300      	movs	r3, #0
 80133e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	2b01      	cmp	r3, #1
 80133e6:	d102      	bne.n	80133ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80133e8:	f001 f8ba 	bl	8014560 <xTimerCreateTimerTask>
 80133ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	2b01      	cmp	r3, #1
 80133f2:	d117      	bne.n	8013424 <vTaskStartScheduler+0x90>
 80133f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133f8:	f383 8811 	msr	BASEPRI, r3
 80133fc:	f3bf 8f6f 	isb	sy
 8013400:	f3bf 8f4f 	dsb	sy
 8013404:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013406:	4b13      	ldr	r3, [pc, #76]	; (8013454 <vTaskStartScheduler+0xc0>)
 8013408:	f04f 32ff 	mov.w	r2, #4294967295
 801340c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801340e:	4b12      	ldr	r3, [pc, #72]	; (8013458 <vTaskStartScheduler+0xc4>)
 8013410:	2201      	movs	r2, #1
 8013412:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8013414:	4b11      	ldr	r3, [pc, #68]	; (801345c <vTaskStartScheduler+0xc8>)
 8013416:	2200      	movs	r2, #0
 8013418:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801341a:	f7ed ff0a 	bl	8001232 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801341e:	f7fe fbb7 	bl	8011b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013422:	e00d      	b.n	8013440 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013424:	697b      	ldr	r3, [r7, #20]
 8013426:	f1b3 3fff 	cmp.w	r3, #4294967295
 801342a:	d109      	bne.n	8013440 <vTaskStartScheduler+0xac>
 801342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013430:	f383 8811 	msr	BASEPRI, r3
 8013434:	f3bf 8f6f 	isb	sy
 8013438:	f3bf 8f4f 	dsb	sy
 801343c:	60fb      	str	r3, [r7, #12]
 801343e:	e7fe      	b.n	801343e <vTaskStartScheduler+0xaa>
}
 8013440:	bf00      	nop
 8013442:	3718      	adds	r7, #24
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}
 8013448:	0801ba18 	.word	0x0801ba18
 801344c:	08013b95 	.word	0x08013b95
 8013450:	2002748c 	.word	0x2002748c
 8013454:	20027488 	.word	0x20027488
 8013458:	20027474 	.word	0x20027474
 801345c:	2002746c 	.word	0x2002746c

08013460 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013460:	b480      	push	{r7}
 8013462:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013464:	4b04      	ldr	r3, [pc, #16]	; (8013478 <vTaskSuspendAll+0x18>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	3301      	adds	r3, #1
 801346a:	4a03      	ldr	r2, [pc, #12]	; (8013478 <vTaskSuspendAll+0x18>)
 801346c:	6013      	str	r3, [r2, #0]
}
 801346e:	bf00      	nop
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr
 8013478:	20027490 	.word	0x20027490

0801347c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8013482:	2300      	movs	r3, #0
 8013484:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8013486:	4b14      	ldr	r3, [pc, #80]	; (80134d8 <prvGetExpectedIdleTime+0x5c>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d001      	beq.n	8013492 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 801348e:	2301      	movs	r3, #1
 8013490:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8013492:	4b12      	ldr	r3, [pc, #72]	; (80134dc <prvGetExpectedIdleTime+0x60>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013498:	2b00      	cmp	r3, #0
 801349a:	d002      	beq.n	80134a2 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 801349c:	2300      	movs	r3, #0
 801349e:	607b      	str	r3, [r7, #4]
 80134a0:	e012      	b.n	80134c8 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80134a2:	4b0f      	ldr	r3, [pc, #60]	; (80134e0 <prvGetExpectedIdleTime+0x64>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d902      	bls.n	80134b0 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 80134aa:	2300      	movs	r3, #0
 80134ac:	607b      	str	r3, [r7, #4]
 80134ae:	e00b      	b.n	80134c8 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d002      	beq.n	80134bc <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 80134b6:	2300      	movs	r3, #0
 80134b8:	607b      	str	r3, [r7, #4]
 80134ba:	e005      	b.n	80134c8 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 80134bc:	4b09      	ldr	r3, [pc, #36]	; (80134e4 <prvGetExpectedIdleTime+0x68>)
 80134be:	681a      	ldr	r2, [r3, #0]
 80134c0:	4b09      	ldr	r3, [pc, #36]	; (80134e8 <prvGetExpectedIdleTime+0x6c>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	1ad3      	subs	r3, r2, r3
 80134c6:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80134c8:	687b      	ldr	r3, [r7, #4]
	}
 80134ca:	4618      	mov	r0, r3
 80134cc:	370c      	adds	r7, #12
 80134ce:	46bd      	mov	sp, r7
 80134d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d4:	4770      	bx	lr
 80134d6:	bf00      	nop
 80134d8:	20027470 	.word	0x20027470
 80134dc:	20026f94 	.word	0x20026f94
 80134e0:	20026f98 	.word	0x20026f98
 80134e4:	20027488 	.word	0x20027488
 80134e8:	2002746c 	.word	0x2002746c

080134ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b084      	sub	sp, #16
 80134f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80134f2:	2300      	movs	r3, #0
 80134f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80134f6:	2300      	movs	r3, #0
 80134f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80134fa:	4b41      	ldr	r3, [pc, #260]	; (8013600 <xTaskResumeAll+0x114>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d109      	bne.n	8013516 <xTaskResumeAll+0x2a>
 8013502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013506:	f383 8811 	msr	BASEPRI, r3
 801350a:	f3bf 8f6f 	isb	sy
 801350e:	f3bf 8f4f 	dsb	sy
 8013512:	603b      	str	r3, [r7, #0]
 8013514:	e7fe      	b.n	8013514 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013516:	f7fe fbd9 	bl	8011ccc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801351a:	4b39      	ldr	r3, [pc, #228]	; (8013600 <xTaskResumeAll+0x114>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	3b01      	subs	r3, #1
 8013520:	4a37      	ldr	r2, [pc, #220]	; (8013600 <xTaskResumeAll+0x114>)
 8013522:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013524:	4b36      	ldr	r3, [pc, #216]	; (8013600 <xTaskResumeAll+0x114>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d162      	bne.n	80135f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801352c:	4b35      	ldr	r3, [pc, #212]	; (8013604 <xTaskResumeAll+0x118>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d05e      	beq.n	80135f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013534:	e02f      	b.n	8013596 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8013536:	4b34      	ldr	r3, [pc, #208]	; (8013608 <xTaskResumeAll+0x11c>)
 8013538:	68db      	ldr	r3, [r3, #12]
 801353a:	68db      	ldr	r3, [r3, #12]
 801353c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	3318      	adds	r3, #24
 8013542:	4618      	mov	r0, r3
 8013544:	f7fe fa74 	bl	8011a30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	3304      	adds	r3, #4
 801354c:	4618      	mov	r0, r3
 801354e:	f7fe fa6f 	bl	8011a30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013556:	4b2d      	ldr	r3, [pc, #180]	; (801360c <xTaskResumeAll+0x120>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	429a      	cmp	r2, r3
 801355c:	d903      	bls.n	8013566 <xTaskResumeAll+0x7a>
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013562:	4a2a      	ldr	r2, [pc, #168]	; (801360c <xTaskResumeAll+0x120>)
 8013564:	6013      	str	r3, [r2, #0]
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801356a:	4613      	mov	r3, r2
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	4413      	add	r3, r2
 8013570:	009b      	lsls	r3, r3, #2
 8013572:	4a27      	ldr	r2, [pc, #156]	; (8013610 <xTaskResumeAll+0x124>)
 8013574:	441a      	add	r2, r3
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	3304      	adds	r3, #4
 801357a:	4619      	mov	r1, r3
 801357c:	4610      	mov	r0, r2
 801357e:	f7fe f9fa 	bl	8011976 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013586:	4b23      	ldr	r3, [pc, #140]	; (8013614 <xTaskResumeAll+0x128>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801358c:	429a      	cmp	r2, r3
 801358e:	d302      	bcc.n	8013596 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013590:	4b21      	ldr	r3, [pc, #132]	; (8013618 <xTaskResumeAll+0x12c>)
 8013592:	2201      	movs	r2, #1
 8013594:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013596:	4b1c      	ldr	r3, [pc, #112]	; (8013608 <xTaskResumeAll+0x11c>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d1cb      	bne.n	8013536 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d001      	beq.n	80135a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80135a4:	f000 fbfc 	bl	8013da0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80135a8:	4b1c      	ldr	r3, [pc, #112]	; (801361c <xTaskResumeAll+0x130>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d010      	beq.n	80135d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80135b4:	f000 f86c 	bl	8013690 <xTaskIncrementTick>
 80135b8:	4603      	mov	r3, r0
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d002      	beq.n	80135c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80135be:	4b16      	ldr	r3, [pc, #88]	; (8013618 <xTaskResumeAll+0x12c>)
 80135c0:	2201      	movs	r2, #1
 80135c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	3b01      	subs	r3, #1
 80135c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d1f1      	bne.n	80135b4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80135d0:	4b12      	ldr	r3, [pc, #72]	; (801361c <xTaskResumeAll+0x130>)
 80135d2:	2200      	movs	r2, #0
 80135d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80135d6:	4b10      	ldr	r3, [pc, #64]	; (8013618 <xTaskResumeAll+0x12c>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d009      	beq.n	80135f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80135de:	2301      	movs	r3, #1
 80135e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80135e2:	4b0f      	ldr	r3, [pc, #60]	; (8013620 <xTaskResumeAll+0x134>)
 80135e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135e8:	601a      	str	r2, [r3, #0]
 80135ea:	f3bf 8f4f 	dsb	sy
 80135ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80135f2:	f7fe fb99 	bl	8011d28 <vPortExitCritical>

	return xAlreadyYielded;
 80135f6:	68bb      	ldr	r3, [r7, #8]
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	3710      	adds	r7, #16
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}
 8013600:	20027490 	.word	0x20027490
 8013604:	20027468 	.word	0x20027468
 8013608:	20027428 	.word	0x20027428
 801360c:	20027470 	.word	0x20027470
 8013610:	20026f98 	.word	0x20026f98
 8013614:	20026f94 	.word	0x20026f94
 8013618:	2002747c 	.word	0x2002747c
 801361c:	20027478 	.word	0x20027478
 8013620:	e000ed04 	.word	0xe000ed04

08013624 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013624:	b480      	push	{r7}
 8013626:	b083      	sub	sp, #12
 8013628:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801362a:	4b05      	ldr	r3, [pc, #20]	; (8013640 <xTaskGetTickCount+0x1c>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013630:	687b      	ldr	r3, [r7, #4]
}
 8013632:	4618      	mov	r0, r3
 8013634:	370c      	adds	r7, #12
 8013636:	46bd      	mov	sp, r7
 8013638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363c:	4770      	bx	lr
 801363e:	bf00      	nop
 8013640:	2002746c 	.word	0x2002746c

08013644 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8013644:	b480      	push	{r7}
 8013646:	b085      	sub	sp, #20
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 801364c:	4b0e      	ldr	r3, [pc, #56]	; (8013688 <vTaskStepTick+0x44>)
 801364e:	681a      	ldr	r2, [r3, #0]
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	441a      	add	r2, r3
 8013654:	4b0d      	ldr	r3, [pc, #52]	; (801368c <vTaskStepTick+0x48>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	429a      	cmp	r2, r3
 801365a:	d909      	bls.n	8013670 <vTaskStepTick+0x2c>
 801365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013660:	f383 8811 	msr	BASEPRI, r3
 8013664:	f3bf 8f6f 	isb	sy
 8013668:	f3bf 8f4f 	dsb	sy
 801366c:	60fb      	str	r3, [r7, #12]
 801366e:	e7fe      	b.n	801366e <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 8013670:	4b05      	ldr	r3, [pc, #20]	; (8013688 <vTaskStepTick+0x44>)
 8013672:	681a      	ldr	r2, [r3, #0]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	4413      	add	r3, r2
 8013678:	4a03      	ldr	r2, [pc, #12]	; (8013688 <vTaskStepTick+0x44>)
 801367a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 801367c:	bf00      	nop
 801367e:	3714      	adds	r7, #20
 8013680:	46bd      	mov	sp, r7
 8013682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013686:	4770      	bx	lr
 8013688:	2002746c 	.word	0x2002746c
 801368c:	20027488 	.word	0x20027488

08013690 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b086      	sub	sp, #24
 8013694:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013696:	2300      	movs	r3, #0
 8013698:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801369a:	4b55      	ldr	r3, [pc, #340]	; (80137f0 <xTaskIncrementTick+0x160>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	f040 8093 	bne.w	80137ca <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80136a4:	4b53      	ldr	r3, [pc, #332]	; (80137f4 <xTaskIncrementTick+0x164>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	3301      	adds	r3, #1
 80136aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80136ac:	4a51      	ldr	r2, [pc, #324]	; (80137f4 <xTaskIncrementTick+0x164>)
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d11f      	bne.n	80136f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80136b8:	4b4f      	ldr	r3, [pc, #316]	; (80137f8 <xTaskIncrementTick+0x168>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d009      	beq.n	80136d6 <xTaskIncrementTick+0x46>
 80136c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136c6:	f383 8811 	msr	BASEPRI, r3
 80136ca:	f3bf 8f6f 	isb	sy
 80136ce:	f3bf 8f4f 	dsb	sy
 80136d2:	603b      	str	r3, [r7, #0]
 80136d4:	e7fe      	b.n	80136d4 <xTaskIncrementTick+0x44>
 80136d6:	4b48      	ldr	r3, [pc, #288]	; (80137f8 <xTaskIncrementTick+0x168>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	60fb      	str	r3, [r7, #12]
 80136dc:	4b47      	ldr	r3, [pc, #284]	; (80137fc <xTaskIncrementTick+0x16c>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	4a45      	ldr	r2, [pc, #276]	; (80137f8 <xTaskIncrementTick+0x168>)
 80136e2:	6013      	str	r3, [r2, #0]
 80136e4:	4a45      	ldr	r2, [pc, #276]	; (80137fc <xTaskIncrementTick+0x16c>)
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	6013      	str	r3, [r2, #0]
 80136ea:	4b45      	ldr	r3, [pc, #276]	; (8013800 <xTaskIncrementTick+0x170>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	3301      	adds	r3, #1
 80136f0:	4a43      	ldr	r2, [pc, #268]	; (8013800 <xTaskIncrementTick+0x170>)
 80136f2:	6013      	str	r3, [r2, #0]
 80136f4:	f000 fb54 	bl	8013da0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80136f8:	4b42      	ldr	r3, [pc, #264]	; (8013804 <xTaskIncrementTick+0x174>)
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	693a      	ldr	r2, [r7, #16]
 80136fe:	429a      	cmp	r2, r3
 8013700:	d34e      	bcc.n	80137a0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013702:	4b3d      	ldr	r3, [pc, #244]	; (80137f8 <xTaskIncrementTick+0x168>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d101      	bne.n	8013710 <xTaskIncrementTick+0x80>
 801370c:	2301      	movs	r3, #1
 801370e:	e000      	b.n	8013712 <xTaskIncrementTick+0x82>
 8013710:	2300      	movs	r3, #0
 8013712:	2b00      	cmp	r3, #0
 8013714:	d004      	beq.n	8013720 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013716:	4b3b      	ldr	r3, [pc, #236]	; (8013804 <xTaskIncrementTick+0x174>)
 8013718:	f04f 32ff 	mov.w	r2, #4294967295
 801371c:	601a      	str	r2, [r3, #0]
					break;
 801371e:	e03f      	b.n	80137a0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013720:	4b35      	ldr	r3, [pc, #212]	; (80137f8 <xTaskIncrementTick+0x168>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	68db      	ldr	r3, [r3, #12]
 8013726:	68db      	ldr	r3, [r3, #12]
 8013728:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013730:	693a      	ldr	r2, [r7, #16]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	429a      	cmp	r2, r3
 8013736:	d203      	bcs.n	8013740 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013738:	4a32      	ldr	r2, [pc, #200]	; (8013804 <xTaskIncrementTick+0x174>)
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6013      	str	r3, [r2, #0]
						break;
 801373e:	e02f      	b.n	80137a0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	3304      	adds	r3, #4
 8013744:	4618      	mov	r0, r3
 8013746:	f7fe f973 	bl	8011a30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801374e:	2b00      	cmp	r3, #0
 8013750:	d004      	beq.n	801375c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	3318      	adds	r3, #24
 8013756:	4618      	mov	r0, r3
 8013758:	f7fe f96a 	bl	8011a30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013760:	4b29      	ldr	r3, [pc, #164]	; (8013808 <xTaskIncrementTick+0x178>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	429a      	cmp	r2, r3
 8013766:	d903      	bls.n	8013770 <xTaskIncrementTick+0xe0>
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801376c:	4a26      	ldr	r2, [pc, #152]	; (8013808 <xTaskIncrementTick+0x178>)
 801376e:	6013      	str	r3, [r2, #0]
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013774:	4613      	mov	r3, r2
 8013776:	009b      	lsls	r3, r3, #2
 8013778:	4413      	add	r3, r2
 801377a:	009b      	lsls	r3, r3, #2
 801377c:	4a23      	ldr	r2, [pc, #140]	; (801380c <xTaskIncrementTick+0x17c>)
 801377e:	441a      	add	r2, r3
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	3304      	adds	r3, #4
 8013784:	4619      	mov	r1, r3
 8013786:	4610      	mov	r0, r2
 8013788:	f7fe f8f5 	bl	8011976 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013790:	4b1f      	ldr	r3, [pc, #124]	; (8013810 <xTaskIncrementTick+0x180>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013796:	429a      	cmp	r2, r3
 8013798:	d3b3      	bcc.n	8013702 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801379a:	2301      	movs	r3, #1
 801379c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801379e:	e7b0      	b.n	8013702 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80137a0:	4b1b      	ldr	r3, [pc, #108]	; (8013810 <xTaskIncrementTick+0x180>)
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137a6:	4919      	ldr	r1, [pc, #100]	; (801380c <xTaskIncrementTick+0x17c>)
 80137a8:	4613      	mov	r3, r2
 80137aa:	009b      	lsls	r3, r3, #2
 80137ac:	4413      	add	r3, r2
 80137ae:	009b      	lsls	r3, r3, #2
 80137b0:	440b      	add	r3, r1
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2b01      	cmp	r3, #1
 80137b6:	d901      	bls.n	80137bc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80137b8:	2301      	movs	r3, #1
 80137ba:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80137bc:	4b15      	ldr	r3, [pc, #84]	; (8013814 <xTaskIncrementTick+0x184>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d109      	bne.n	80137d8 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 80137c4:	f7ed fd43 	bl	800124e <vApplicationTickHook>
 80137c8:	e006      	b.n	80137d8 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80137ca:	4b12      	ldr	r3, [pc, #72]	; (8013814 <xTaskIncrementTick+0x184>)
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	3301      	adds	r3, #1
 80137d0:	4a10      	ldr	r2, [pc, #64]	; (8013814 <xTaskIncrementTick+0x184>)
 80137d2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80137d4:	f7ed fd3b 	bl	800124e <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80137d8:	4b0f      	ldr	r3, [pc, #60]	; (8013818 <xTaskIncrementTick+0x188>)
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d001      	beq.n	80137e4 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 80137e0:	2301      	movs	r3, #1
 80137e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80137e4:	697b      	ldr	r3, [r7, #20]
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3718      	adds	r7, #24
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	20027490 	.word	0x20027490
 80137f4:	2002746c 	.word	0x2002746c
 80137f8:	20027420 	.word	0x20027420
 80137fc:	20027424 	.word	0x20027424
 8013800:	20027480 	.word	0x20027480
 8013804:	20027488 	.word	0x20027488
 8013808:	20027470 	.word	0x20027470
 801380c:	20026f98 	.word	0x20026f98
 8013810:	20026f94 	.word	0x20026f94
 8013814:	20027478 	.word	0x20027478
 8013818:	2002747c 	.word	0x2002747c

0801381c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b084      	sub	sp, #16
 8013820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013822:	4b3b      	ldr	r3, [pc, #236]	; (8013910 <vTaskSwitchContext+0xf4>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d003      	beq.n	8013832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801382a:	4b3a      	ldr	r3, [pc, #232]	; (8013914 <vTaskSwitchContext+0xf8>)
 801382c:	2201      	movs	r2, #1
 801382e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013830:	e06a      	b.n	8013908 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 8013832:	4b38      	ldr	r3, [pc, #224]	; (8013914 <vTaskSwitchContext+0xf8>)
 8013834:	2200      	movs	r2, #0
 8013836:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013838:	f7ed fd02 	bl	8001240 <getRunTimeCounterValue>
 801383c:	4602      	mov	r2, r0
 801383e:	4b36      	ldr	r3, [pc, #216]	; (8013918 <vTaskSwitchContext+0xfc>)
 8013840:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8013842:	4b35      	ldr	r3, [pc, #212]	; (8013918 <vTaskSwitchContext+0xfc>)
 8013844:	681a      	ldr	r2, [r3, #0]
 8013846:	4b35      	ldr	r3, [pc, #212]	; (801391c <vTaskSwitchContext+0x100>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	429a      	cmp	r2, r3
 801384c:	d909      	bls.n	8013862 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801384e:	4b34      	ldr	r3, [pc, #208]	; (8013920 <vTaskSwitchContext+0x104>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013854:	4a30      	ldr	r2, [pc, #192]	; (8013918 <vTaskSwitchContext+0xfc>)
 8013856:	6810      	ldr	r0, [r2, #0]
 8013858:	4a30      	ldr	r2, [pc, #192]	; (801391c <vTaskSwitchContext+0x100>)
 801385a:	6812      	ldr	r2, [r2, #0]
 801385c:	1a82      	subs	r2, r0, r2
 801385e:	440a      	add	r2, r1
 8013860:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8013862:	4b2d      	ldr	r3, [pc, #180]	; (8013918 <vTaskSwitchContext+0xfc>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	4a2d      	ldr	r2, [pc, #180]	; (801391c <vTaskSwitchContext+0x100>)
 8013868:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801386a:	4b2d      	ldr	r3, [pc, #180]	; (8013920 <vTaskSwitchContext+0x104>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	4b2b      	ldr	r3, [pc, #172]	; (8013920 <vTaskSwitchContext+0x104>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013876:	429a      	cmp	r2, r3
 8013878:	d808      	bhi.n	801388c <vTaskSwitchContext+0x70>
 801387a:	4b29      	ldr	r3, [pc, #164]	; (8013920 <vTaskSwitchContext+0x104>)
 801387c:	681a      	ldr	r2, [r3, #0]
 801387e:	4b28      	ldr	r3, [pc, #160]	; (8013920 <vTaskSwitchContext+0x104>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	3334      	adds	r3, #52	; 0x34
 8013884:	4619      	mov	r1, r3
 8013886:	4610      	mov	r0, r2
 8013888:	f7ed fce8 	bl	800125c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801388c:	4b25      	ldr	r3, [pc, #148]	; (8013924 <vTaskSwitchContext+0x108>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	60fb      	str	r3, [r7, #12]
 8013892:	e00f      	b.n	80138b4 <vTaskSwitchContext+0x98>
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d109      	bne.n	80138ae <vTaskSwitchContext+0x92>
 801389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801389e:	f383 8811 	msr	BASEPRI, r3
 80138a2:	f3bf 8f6f 	isb	sy
 80138a6:	f3bf 8f4f 	dsb	sy
 80138aa:	607b      	str	r3, [r7, #4]
 80138ac:	e7fe      	b.n	80138ac <vTaskSwitchContext+0x90>
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	3b01      	subs	r3, #1
 80138b2:	60fb      	str	r3, [r7, #12]
 80138b4:	491c      	ldr	r1, [pc, #112]	; (8013928 <vTaskSwitchContext+0x10c>)
 80138b6:	68fa      	ldr	r2, [r7, #12]
 80138b8:	4613      	mov	r3, r2
 80138ba:	009b      	lsls	r3, r3, #2
 80138bc:	4413      	add	r3, r2
 80138be:	009b      	lsls	r3, r3, #2
 80138c0:	440b      	add	r3, r1
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d0e5      	beq.n	8013894 <vTaskSwitchContext+0x78>
 80138c8:	68fa      	ldr	r2, [r7, #12]
 80138ca:	4613      	mov	r3, r2
 80138cc:	009b      	lsls	r3, r3, #2
 80138ce:	4413      	add	r3, r2
 80138d0:	009b      	lsls	r3, r3, #2
 80138d2:	4a15      	ldr	r2, [pc, #84]	; (8013928 <vTaskSwitchContext+0x10c>)
 80138d4:	4413      	add	r3, r2
 80138d6:	60bb      	str	r3, [r7, #8]
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	685b      	ldr	r3, [r3, #4]
 80138dc:	685a      	ldr	r2, [r3, #4]
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	605a      	str	r2, [r3, #4]
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	685a      	ldr	r2, [r3, #4]
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	3308      	adds	r3, #8
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d104      	bne.n	80138f8 <vTaskSwitchContext+0xdc>
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	685b      	ldr	r3, [r3, #4]
 80138f2:	685a      	ldr	r2, [r3, #4]
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	605a      	str	r2, [r3, #4]
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	685b      	ldr	r3, [r3, #4]
 80138fc:	68db      	ldr	r3, [r3, #12]
 80138fe:	4a08      	ldr	r2, [pc, #32]	; (8013920 <vTaskSwitchContext+0x104>)
 8013900:	6013      	str	r3, [r2, #0]
 8013902:	4a08      	ldr	r2, [pc, #32]	; (8013924 <vTaskSwitchContext+0x108>)
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	6013      	str	r3, [r2, #0]
}
 8013908:	bf00      	nop
 801390a:	3710      	adds	r7, #16
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}
 8013910:	20027490 	.word	0x20027490
 8013914:	2002747c 	.word	0x2002747c
 8013918:	20027498 	.word	0x20027498
 801391c:	20027494 	.word	0x20027494
 8013920:	20026f94 	.word	0x20026f94
 8013924:	20027470 	.word	0x20027470
 8013928:	20026f98 	.word	0x20026f98

0801392c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b084      	sub	sp, #16
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
 8013934:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d109      	bne.n	8013950 <vTaskPlaceOnEventList+0x24>
 801393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013940:	f383 8811 	msr	BASEPRI, r3
 8013944:	f3bf 8f6f 	isb	sy
 8013948:	f3bf 8f4f 	dsb	sy
 801394c:	60fb      	str	r3, [r7, #12]
 801394e:	e7fe      	b.n	801394e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013950:	4b07      	ldr	r3, [pc, #28]	; (8013970 <vTaskPlaceOnEventList+0x44>)
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	3318      	adds	r3, #24
 8013956:	4619      	mov	r1, r3
 8013958:	6878      	ldr	r0, [r7, #4]
 801395a:	f7fe f830 	bl	80119be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801395e:	2101      	movs	r1, #1
 8013960:	6838      	ldr	r0, [r7, #0]
 8013962:	f000 fda9 	bl	80144b8 <prvAddCurrentTaskToDelayedList>
}
 8013966:	bf00      	nop
 8013968:	3710      	adds	r7, #16
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}
 801396e:	bf00      	nop
 8013970:	20026f94 	.word	0x20026f94

08013974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013974:	b580      	push	{r7, lr}
 8013976:	b086      	sub	sp, #24
 8013978:	af00      	add	r7, sp, #0
 801397a:	60f8      	str	r0, [r7, #12]
 801397c:	60b9      	str	r1, [r7, #8]
 801397e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d109      	bne.n	801399a <vTaskPlaceOnEventListRestricted+0x26>
 8013986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801398a:	f383 8811 	msr	BASEPRI, r3
 801398e:	f3bf 8f6f 	isb	sy
 8013992:	f3bf 8f4f 	dsb	sy
 8013996:	617b      	str	r3, [r7, #20]
 8013998:	e7fe      	b.n	8013998 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801399a:	4b0a      	ldr	r3, [pc, #40]	; (80139c4 <vTaskPlaceOnEventListRestricted+0x50>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	3318      	adds	r3, #24
 80139a0:	4619      	mov	r1, r3
 80139a2:	68f8      	ldr	r0, [r7, #12]
 80139a4:	f7fd ffe7 	bl	8011976 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d002      	beq.n	80139b4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80139ae:	f04f 33ff 	mov.w	r3, #4294967295
 80139b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80139b4:	6879      	ldr	r1, [r7, #4]
 80139b6:	68b8      	ldr	r0, [r7, #8]
 80139b8:	f000 fd7e 	bl	80144b8 <prvAddCurrentTaskToDelayedList>
	}
 80139bc:	bf00      	nop
 80139be:	3718      	adds	r7, #24
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd80      	pop	{r7, pc}
 80139c4:	20026f94 	.word	0x20026f94

080139c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b086      	sub	sp, #24
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	68db      	ldr	r3, [r3, #12]
 80139d4:	68db      	ldr	r3, [r3, #12]
 80139d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d109      	bne.n	80139f2 <xTaskRemoveFromEventList+0x2a>
 80139de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e2:	f383 8811 	msr	BASEPRI, r3
 80139e6:	f3bf 8f6f 	isb	sy
 80139ea:	f3bf 8f4f 	dsb	sy
 80139ee:	60fb      	str	r3, [r7, #12]
 80139f0:	e7fe      	b.n	80139f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	3318      	adds	r3, #24
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7fe f81a 	bl	8011a30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80139fc:	4b1e      	ldr	r3, [pc, #120]	; (8013a78 <xTaskRemoveFromEventList+0xb0>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d11d      	bne.n	8013a40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	3304      	adds	r3, #4
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7fe f811 	bl	8011a30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a12:	4b1a      	ldr	r3, [pc, #104]	; (8013a7c <xTaskRemoveFromEventList+0xb4>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d903      	bls.n	8013a22 <xTaskRemoveFromEventList+0x5a>
 8013a1a:	693b      	ldr	r3, [r7, #16]
 8013a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a1e:	4a17      	ldr	r2, [pc, #92]	; (8013a7c <xTaskRemoveFromEventList+0xb4>)
 8013a20:	6013      	str	r3, [r2, #0]
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a26:	4613      	mov	r3, r2
 8013a28:	009b      	lsls	r3, r3, #2
 8013a2a:	4413      	add	r3, r2
 8013a2c:	009b      	lsls	r3, r3, #2
 8013a2e:	4a14      	ldr	r2, [pc, #80]	; (8013a80 <xTaskRemoveFromEventList+0xb8>)
 8013a30:	441a      	add	r2, r3
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	3304      	adds	r3, #4
 8013a36:	4619      	mov	r1, r3
 8013a38:	4610      	mov	r0, r2
 8013a3a:	f7fd ff9c 	bl	8011976 <vListInsertEnd>
 8013a3e:	e005      	b.n	8013a4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	3318      	adds	r3, #24
 8013a44:	4619      	mov	r1, r3
 8013a46:	480f      	ldr	r0, [pc, #60]	; (8013a84 <xTaskRemoveFromEventList+0xbc>)
 8013a48:	f7fd ff95 	bl	8011976 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013a4c:	693b      	ldr	r3, [r7, #16]
 8013a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a50:	4b0d      	ldr	r3, [pc, #52]	; (8013a88 <xTaskRemoveFromEventList+0xc0>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d905      	bls.n	8013a66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013a5e:	4b0b      	ldr	r3, [pc, #44]	; (8013a8c <xTaskRemoveFromEventList+0xc4>)
 8013a60:	2201      	movs	r2, #1
 8013a62:	601a      	str	r2, [r3, #0]
 8013a64:	e001      	b.n	8013a6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8013a66:	2300      	movs	r3, #0
 8013a68:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 8013a6a:	f000 f999 	bl	8013da0 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 8013a6e:	697b      	ldr	r3, [r7, #20]
}
 8013a70:	4618      	mov	r0, r3
 8013a72:	3718      	adds	r7, #24
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}
 8013a78:	20027490 	.word	0x20027490
 8013a7c:	20027470 	.word	0x20027470
 8013a80:	20026f98 	.word	0x20026f98
 8013a84:	20027428 	.word	0x20027428
 8013a88:	20026f94 	.word	0x20026f94
 8013a8c:	2002747c 	.word	0x2002747c

08013a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013a90:	b480      	push	{r7}
 8013a92:	b083      	sub	sp, #12
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013a98:	4b06      	ldr	r3, [pc, #24]	; (8013ab4 <vTaskInternalSetTimeOutState+0x24>)
 8013a9a:	681a      	ldr	r2, [r3, #0]
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013aa0:	4b05      	ldr	r3, [pc, #20]	; (8013ab8 <vTaskInternalSetTimeOutState+0x28>)
 8013aa2:	681a      	ldr	r2, [r3, #0]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	605a      	str	r2, [r3, #4]
}
 8013aa8:	bf00      	nop
 8013aaa:	370c      	adds	r7, #12
 8013aac:	46bd      	mov	sp, r7
 8013aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab2:	4770      	bx	lr
 8013ab4:	20027480 	.word	0x20027480
 8013ab8:	2002746c 	.word	0x2002746c

08013abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b088      	sub	sp, #32
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
 8013ac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d109      	bne.n	8013ae0 <xTaskCheckForTimeOut+0x24>
 8013acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad0:	f383 8811 	msr	BASEPRI, r3
 8013ad4:	f3bf 8f6f 	isb	sy
 8013ad8:	f3bf 8f4f 	dsb	sy
 8013adc:	613b      	str	r3, [r7, #16]
 8013ade:	e7fe      	b.n	8013ade <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d109      	bne.n	8013afa <xTaskCheckForTimeOut+0x3e>
 8013ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aea:	f383 8811 	msr	BASEPRI, r3
 8013aee:	f3bf 8f6f 	isb	sy
 8013af2:	f3bf 8f4f 	dsb	sy
 8013af6:	60fb      	str	r3, [r7, #12]
 8013af8:	e7fe      	b.n	8013af8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8013afa:	f7fe f8e7 	bl	8011ccc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013afe:	4b1d      	ldr	r3, [pc, #116]	; (8013b74 <xTaskCheckForTimeOut+0xb8>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	685b      	ldr	r3, [r3, #4]
 8013b08:	69ba      	ldr	r2, [r7, #24]
 8013b0a:	1ad3      	subs	r3, r2, r3
 8013b0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b16:	d102      	bne.n	8013b1e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	61fb      	str	r3, [r7, #28]
 8013b1c:	e023      	b.n	8013b66 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681a      	ldr	r2, [r3, #0]
 8013b22:	4b15      	ldr	r3, [pc, #84]	; (8013b78 <xTaskCheckForTimeOut+0xbc>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d007      	beq.n	8013b3a <xTaskCheckForTimeOut+0x7e>
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	685b      	ldr	r3, [r3, #4]
 8013b2e:	69ba      	ldr	r2, [r7, #24]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d302      	bcc.n	8013b3a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013b34:	2301      	movs	r3, #1
 8013b36:	61fb      	str	r3, [r7, #28]
 8013b38:	e015      	b.n	8013b66 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	697a      	ldr	r2, [r7, #20]
 8013b40:	429a      	cmp	r2, r3
 8013b42:	d20b      	bcs.n	8013b5c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	681a      	ldr	r2, [r3, #0]
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	1ad2      	subs	r2, r2, r3
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f7ff ff9d 	bl	8013a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013b56:	2300      	movs	r3, #0
 8013b58:	61fb      	str	r3, [r7, #28]
 8013b5a:	e004      	b.n	8013b66 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013b5c:	683b      	ldr	r3, [r7, #0]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013b62:	2301      	movs	r3, #1
 8013b64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013b66:	f7fe f8df 	bl	8011d28 <vPortExitCritical>

	return xReturn;
 8013b6a:	69fb      	ldr	r3, [r7, #28]
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3720      	adds	r7, #32
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	2002746c 	.word	0x2002746c
 8013b78:	20027480 	.word	0x20027480

08013b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013b7c:	b480      	push	{r7}
 8013b7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013b80:	4b03      	ldr	r3, [pc, #12]	; (8013b90 <vTaskMissedYield+0x14>)
 8013b82:	2201      	movs	r2, #1
 8013b84:	601a      	str	r2, [r3, #0]
}
 8013b86:	bf00      	nop
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8e:	4770      	bx	lr
 8013b90:	2002747c 	.word	0x2002747c

08013b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b084      	sub	sp, #16
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013b9c:	f000 f8a6 	bl	8013cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013ba0:	4b17      	ldr	r3, [pc, #92]	; (8013c00 <prvIdleTask+0x6c>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	2b01      	cmp	r3, #1
 8013ba6:	d907      	bls.n	8013bb8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013ba8:	4b16      	ldr	r3, [pc, #88]	; (8013c04 <prvIdleTask+0x70>)
 8013baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bae:	601a      	str	r2, [r3, #0]
 8013bb0:	f3bf 8f4f 	dsb	sy
 8013bb4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8013bb8:	f7ff fc60 	bl	801347c <prvGetExpectedIdleTime>
 8013bbc:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	2b01      	cmp	r3, #1
 8013bc2:	d9eb      	bls.n	8013b9c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8013bc4:	f7ff fc4c 	bl	8013460 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8013bc8:	4b0f      	ldr	r3, [pc, #60]	; (8013c08 <prvIdleTask+0x74>)
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	4b0f      	ldr	r3, [pc, #60]	; (8013c0c <prvIdleTask+0x78>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	429a      	cmp	r2, r3
 8013bd2:	d209      	bcs.n	8013be8 <prvIdleTask+0x54>
 8013bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bd8:	f383 8811 	msr	BASEPRI, r3
 8013bdc:	f3bf 8f6f 	isb	sy
 8013be0:	f3bf 8f4f 	dsb	sy
 8013be4:	60bb      	str	r3, [r7, #8]
 8013be6:	e7fe      	b.n	8013be6 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8013be8:	f7ff fc48 	bl	801347c <prvGetExpectedIdleTime>
 8013bec:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d902      	bls.n	8013bfa <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8013bf4:	68f8      	ldr	r0, [r7, #12]
 8013bf6:	f7ee fc8b 	bl	8002510 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8013bfa:	f7ff fc77 	bl	80134ec <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8013bfe:	e7cd      	b.n	8013b9c <prvIdleTask+0x8>
 8013c00:	20026f98 	.word	0x20026f98
 8013c04:	e000ed04 	.word	0xe000ed04
 8013c08:	20027488 	.word	0x20027488
 8013c0c:	2002746c 	.word	0x2002746c

08013c10 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8013c10:	b480      	push	{r7}
 8013c12:	b083      	sub	sp, #12
 8013c14:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8013c16:	2301      	movs	r3, #1
 8013c18:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8013c1e:	4b0f      	ldr	r3, [pc, #60]	; (8013c5c <eTaskConfirmSleepModeStatus+0x4c>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d002      	beq.n	8013c2c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8013c26:	2300      	movs	r3, #0
 8013c28:	71fb      	strb	r3, [r7, #7]
 8013c2a:	e010      	b.n	8013c4e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8013c2c:	4b0c      	ldr	r3, [pc, #48]	; (8013c60 <eTaskConfirmSleepModeStatus+0x50>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d002      	beq.n	8013c3a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8013c34:	2300      	movs	r3, #0
 8013c36:	71fb      	strb	r3, [r7, #7]
 8013c38:	e009      	b.n	8013c4e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8013c3a:	4b0a      	ldr	r3, [pc, #40]	; (8013c64 <eTaskConfirmSleepModeStatus+0x54>)
 8013c3c:	681a      	ldr	r2, [r3, #0]
 8013c3e:	4b0a      	ldr	r3, [pc, #40]	; (8013c68 <eTaskConfirmSleepModeStatus+0x58>)
 8013c40:	6819      	ldr	r1, [r3, #0]
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	1acb      	subs	r3, r1, r3
 8013c46:	429a      	cmp	r2, r3
 8013c48:	d101      	bne.n	8013c4e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8013c4a:	2302      	movs	r3, #2
 8013c4c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8013c4e:	79fb      	ldrb	r3, [r7, #7]
	}
 8013c50:	4618      	mov	r0, r3
 8013c52:	370c      	adds	r7, #12
 8013c54:	46bd      	mov	sp, r7
 8013c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5a:	4770      	bx	lr
 8013c5c:	20027428 	.word	0x20027428
 8013c60:	2002747c 	.word	0x2002747c
 8013c64:	20027454 	.word	0x20027454
 8013c68:	20027468 	.word	0x20027468

08013c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b082      	sub	sp, #8
 8013c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013c72:	2300      	movs	r3, #0
 8013c74:	607b      	str	r3, [r7, #4]
 8013c76:	e00c      	b.n	8013c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	4613      	mov	r3, r2
 8013c7c:	009b      	lsls	r3, r3, #2
 8013c7e:	4413      	add	r3, r2
 8013c80:	009b      	lsls	r3, r3, #2
 8013c82:	4a12      	ldr	r2, [pc, #72]	; (8013ccc <prvInitialiseTaskLists+0x60>)
 8013c84:	4413      	add	r3, r2
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7fd fe48 	bl	801191c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	607b      	str	r3, [r7, #4]
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	2b37      	cmp	r3, #55	; 0x37
 8013c96:	d9ef      	bls.n	8013c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013c98:	480d      	ldr	r0, [pc, #52]	; (8013cd0 <prvInitialiseTaskLists+0x64>)
 8013c9a:	f7fd fe3f 	bl	801191c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013c9e:	480d      	ldr	r0, [pc, #52]	; (8013cd4 <prvInitialiseTaskLists+0x68>)
 8013ca0:	f7fd fe3c 	bl	801191c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013ca4:	480c      	ldr	r0, [pc, #48]	; (8013cd8 <prvInitialiseTaskLists+0x6c>)
 8013ca6:	f7fd fe39 	bl	801191c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013caa:	480c      	ldr	r0, [pc, #48]	; (8013cdc <prvInitialiseTaskLists+0x70>)
 8013cac:	f7fd fe36 	bl	801191c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013cb0:	480b      	ldr	r0, [pc, #44]	; (8013ce0 <prvInitialiseTaskLists+0x74>)
 8013cb2:	f7fd fe33 	bl	801191c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013cb6:	4b0b      	ldr	r3, [pc, #44]	; (8013ce4 <prvInitialiseTaskLists+0x78>)
 8013cb8:	4a05      	ldr	r2, [pc, #20]	; (8013cd0 <prvInitialiseTaskLists+0x64>)
 8013cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013cbc:	4b0a      	ldr	r3, [pc, #40]	; (8013ce8 <prvInitialiseTaskLists+0x7c>)
 8013cbe:	4a05      	ldr	r2, [pc, #20]	; (8013cd4 <prvInitialiseTaskLists+0x68>)
 8013cc0:	601a      	str	r2, [r3, #0]
}
 8013cc2:	bf00      	nop
 8013cc4:	3708      	adds	r7, #8
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}
 8013cca:	bf00      	nop
 8013ccc:	20026f98 	.word	0x20026f98
 8013cd0:	200273f8 	.word	0x200273f8
 8013cd4:	2002740c 	.word	0x2002740c
 8013cd8:	20027428 	.word	0x20027428
 8013cdc:	2002743c 	.word	0x2002743c
 8013ce0:	20027454 	.word	0x20027454
 8013ce4:	20027420 	.word	0x20027420
 8013ce8:	20027424 	.word	0x20027424

08013cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013cf2:	e019      	b.n	8013d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013cf4:	f7fd ffea 	bl	8011ccc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013cf8:	4b0f      	ldr	r3, [pc, #60]	; (8013d38 <prvCheckTasksWaitingTermination+0x4c>)
 8013cfa:	68db      	ldr	r3, [r3, #12]
 8013cfc:	68db      	ldr	r3, [r3, #12]
 8013cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	3304      	adds	r3, #4
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7fd fe93 	bl	8011a30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013d0a:	4b0c      	ldr	r3, [pc, #48]	; (8013d3c <prvCheckTasksWaitingTermination+0x50>)
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	3b01      	subs	r3, #1
 8013d10:	4a0a      	ldr	r2, [pc, #40]	; (8013d3c <prvCheckTasksWaitingTermination+0x50>)
 8013d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013d14:	4b0a      	ldr	r3, [pc, #40]	; (8013d40 <prvCheckTasksWaitingTermination+0x54>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	3b01      	subs	r3, #1
 8013d1a:	4a09      	ldr	r2, [pc, #36]	; (8013d40 <prvCheckTasksWaitingTermination+0x54>)
 8013d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013d1e:	f7fe f803 	bl	8011d28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f000 f80e 	bl	8013d44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013d28:	4b05      	ldr	r3, [pc, #20]	; (8013d40 <prvCheckTasksWaitingTermination+0x54>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d1e1      	bne.n	8013cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013d30:	bf00      	nop
 8013d32:	3708      	adds	r7, #8
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	2002743c 	.word	0x2002743c
 8013d3c:	20027468 	.word	0x20027468
 8013d40:	20027450 	.word	0x20027450

08013d44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b084      	sub	sp, #16
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d108      	bne.n	8013d68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7fd fcc8 	bl	80116f0 <vPortFree>
				vPortFree( pxTCB );
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f7fd fcc5 	bl	80116f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013d66:	e017      	b.n	8013d98 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013d6e:	2b01      	cmp	r3, #1
 8013d70:	d103      	bne.n	8013d7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f7fd fcbc 	bl	80116f0 <vPortFree>
	}
 8013d78:	e00e      	b.n	8013d98 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013d80:	2b02      	cmp	r3, #2
 8013d82:	d009      	beq.n	8013d98 <prvDeleteTCB+0x54>
 8013d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d88:	f383 8811 	msr	BASEPRI, r3
 8013d8c:	f3bf 8f6f 	isb	sy
 8013d90:	f3bf 8f4f 	dsb	sy
 8013d94:	60fb      	str	r3, [r7, #12]
 8013d96:	e7fe      	b.n	8013d96 <prvDeleteTCB+0x52>
	}
 8013d98:	bf00      	nop
 8013d9a:	3710      	adds	r7, #16
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}

08013da0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013da0:	b480      	push	{r7}
 8013da2:	b083      	sub	sp, #12
 8013da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013da6:	4b0f      	ldr	r3, [pc, #60]	; (8013de4 <prvResetNextTaskUnblockTime+0x44>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d101      	bne.n	8013db4 <prvResetNextTaskUnblockTime+0x14>
 8013db0:	2301      	movs	r3, #1
 8013db2:	e000      	b.n	8013db6 <prvResetNextTaskUnblockTime+0x16>
 8013db4:	2300      	movs	r3, #0
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d004      	beq.n	8013dc4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013dba:	4b0b      	ldr	r3, [pc, #44]	; (8013de8 <prvResetNextTaskUnblockTime+0x48>)
 8013dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8013dc0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013dc2:	e008      	b.n	8013dd6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013dc4:	4b07      	ldr	r3, [pc, #28]	; (8013de4 <prvResetNextTaskUnblockTime+0x44>)
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	68db      	ldr	r3, [r3, #12]
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	685b      	ldr	r3, [r3, #4]
 8013dd2:	4a05      	ldr	r2, [pc, #20]	; (8013de8 <prvResetNextTaskUnblockTime+0x48>)
 8013dd4:	6013      	str	r3, [r2, #0]
}
 8013dd6:	bf00      	nop
 8013dd8:	370c      	adds	r7, #12
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de0:	4770      	bx	lr
 8013de2:	bf00      	nop
 8013de4:	20027420 	.word	0x20027420
 8013de8:	20027488 	.word	0x20027488

08013dec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8013dec:	b480      	push	{r7}
 8013dee:	b083      	sub	sp, #12
 8013df0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8013df2:	4b05      	ldr	r3, [pc, #20]	; (8013e08 <xTaskGetCurrentTaskHandle+0x1c>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8013df8:	687b      	ldr	r3, [r7, #4]
	}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	370c      	adds	r7, #12
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop
 8013e08:	20026f94 	.word	0x20026f94

08013e0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013e0c:	b480      	push	{r7}
 8013e0e:	b083      	sub	sp, #12
 8013e10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013e12:	4b0b      	ldr	r3, [pc, #44]	; (8013e40 <xTaskGetSchedulerState+0x34>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d102      	bne.n	8013e20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013e1a:	2301      	movs	r3, #1
 8013e1c:	607b      	str	r3, [r7, #4]
 8013e1e:	e008      	b.n	8013e32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e20:	4b08      	ldr	r3, [pc, #32]	; (8013e44 <xTaskGetSchedulerState+0x38>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d102      	bne.n	8013e2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013e28:	2302      	movs	r3, #2
 8013e2a:	607b      	str	r3, [r7, #4]
 8013e2c:	e001      	b.n	8013e32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013e32:	687b      	ldr	r3, [r7, #4]
	}
 8013e34:	4618      	mov	r0, r3
 8013e36:	370c      	adds	r7, #12
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3e:	4770      	bx	lr
 8013e40:	20027474 	.word	0x20027474
 8013e44:	20027490 	.word	0x20027490

08013e48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b084      	sub	sp, #16
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013e54:	2300      	movs	r3, #0
 8013e56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d056      	beq.n	8013f0c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e62:	4b2d      	ldr	r3, [pc, #180]	; (8013f18 <xTaskPriorityInherit+0xd0>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d246      	bcs.n	8013efa <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013e6c:	68bb      	ldr	r3, [r7, #8]
 8013e6e:	699b      	ldr	r3, [r3, #24]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	db06      	blt.n	8013e82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e74:	4b28      	ldr	r3, [pc, #160]	; (8013f18 <xTaskPriorityInherit+0xd0>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013e82:	68bb      	ldr	r3, [r7, #8]
 8013e84:	6959      	ldr	r1, [r3, #20]
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e8a:	4613      	mov	r3, r2
 8013e8c:	009b      	lsls	r3, r3, #2
 8013e8e:	4413      	add	r3, r2
 8013e90:	009b      	lsls	r3, r3, #2
 8013e92:	4a22      	ldr	r2, [pc, #136]	; (8013f1c <xTaskPriorityInherit+0xd4>)
 8013e94:	4413      	add	r3, r2
 8013e96:	4299      	cmp	r1, r3
 8013e98:	d101      	bne.n	8013e9e <xTaskPriorityInherit+0x56>
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	e000      	b.n	8013ea0 <xTaskPriorityInherit+0x58>
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d022      	beq.n	8013eea <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	3304      	adds	r3, #4
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7fd fdc1 	bl	8011a30 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013eae:	4b1a      	ldr	r3, [pc, #104]	; (8013f18 <xTaskPriorityInherit+0xd0>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ebc:	4b18      	ldr	r3, [pc, #96]	; (8013f20 <xTaskPriorityInherit+0xd8>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d903      	bls.n	8013ecc <xTaskPriorityInherit+0x84>
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ec8:	4a15      	ldr	r2, [pc, #84]	; (8013f20 <xTaskPriorityInherit+0xd8>)
 8013eca:	6013      	str	r3, [r2, #0]
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ed0:	4613      	mov	r3, r2
 8013ed2:	009b      	lsls	r3, r3, #2
 8013ed4:	4413      	add	r3, r2
 8013ed6:	009b      	lsls	r3, r3, #2
 8013ed8:	4a10      	ldr	r2, [pc, #64]	; (8013f1c <xTaskPriorityInherit+0xd4>)
 8013eda:	441a      	add	r2, r3
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	3304      	adds	r3, #4
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	4610      	mov	r0, r2
 8013ee4:	f7fd fd47 	bl	8011976 <vListInsertEnd>
 8013ee8:	e004      	b.n	8013ef4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013eea:	4b0b      	ldr	r3, [pc, #44]	; (8013f18 <xTaskPriorityInherit+0xd0>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	60fb      	str	r3, [r7, #12]
 8013ef8:	e008      	b.n	8013f0c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013efa:	68bb      	ldr	r3, [r7, #8]
 8013efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013efe:	4b06      	ldr	r3, [pc, #24]	; (8013f18 <xTaskPriorityInherit+0xd0>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d201      	bcs.n	8013f0c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013f08:	2301      	movs	r3, #1
 8013f0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013f0c:	68fb      	ldr	r3, [r7, #12]
	}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3710      	adds	r7, #16
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}
 8013f16:	bf00      	nop
 8013f18:	20026f94 	.word	0x20026f94
 8013f1c:	20026f98 	.word	0x20026f98
 8013f20:	20027470 	.word	0x20027470

08013f24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b086      	sub	sp, #24
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013f30:	2300      	movs	r3, #0
 8013f32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d054      	beq.n	8013fe4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013f3a:	4b2d      	ldr	r3, [pc, #180]	; (8013ff0 <xTaskPriorityDisinherit+0xcc>)
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	693a      	ldr	r2, [r7, #16]
 8013f40:	429a      	cmp	r2, r3
 8013f42:	d009      	beq.n	8013f58 <xTaskPriorityDisinherit+0x34>
 8013f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f48:	f383 8811 	msr	BASEPRI, r3
 8013f4c:	f3bf 8f6f 	isb	sy
 8013f50:	f3bf 8f4f 	dsb	sy
 8013f54:	60fb      	str	r3, [r7, #12]
 8013f56:	e7fe      	b.n	8013f56 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013f58:	693b      	ldr	r3, [r7, #16]
 8013f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d109      	bne.n	8013f74 <xTaskPriorityDisinherit+0x50>
 8013f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f64:	f383 8811 	msr	BASEPRI, r3
 8013f68:	f3bf 8f6f 	isb	sy
 8013f6c:	f3bf 8f4f 	dsb	sy
 8013f70:	60bb      	str	r3, [r7, #8]
 8013f72:	e7fe      	b.n	8013f72 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f78:	1e5a      	subs	r2, r3, #1
 8013f7a:	693b      	ldr	r3, [r7, #16]
 8013f7c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013f7e:	693b      	ldr	r3, [r7, #16]
 8013f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f82:	693b      	ldr	r3, [r7, #16]
 8013f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d02c      	beq.n	8013fe4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013f8a:	693b      	ldr	r3, [r7, #16]
 8013f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d128      	bne.n	8013fe4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f92:	693b      	ldr	r3, [r7, #16]
 8013f94:	3304      	adds	r3, #4
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7fd fd4a 	bl	8011a30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013f9c:	693b      	ldr	r3, [r7, #16]
 8013f9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fa8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013fac:	693b      	ldr	r3, [r7, #16]
 8013fae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013fb0:	693b      	ldr	r3, [r7, #16]
 8013fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fb4:	4b0f      	ldr	r3, [pc, #60]	; (8013ff4 <xTaskPriorityDisinherit+0xd0>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d903      	bls.n	8013fc4 <xTaskPriorityDisinherit+0xa0>
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fc0:	4a0c      	ldr	r2, [pc, #48]	; (8013ff4 <xTaskPriorityDisinherit+0xd0>)
 8013fc2:	6013      	str	r3, [r2, #0]
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fc8:	4613      	mov	r3, r2
 8013fca:	009b      	lsls	r3, r3, #2
 8013fcc:	4413      	add	r3, r2
 8013fce:	009b      	lsls	r3, r3, #2
 8013fd0:	4a09      	ldr	r2, [pc, #36]	; (8013ff8 <xTaskPriorityDisinherit+0xd4>)
 8013fd2:	441a      	add	r2, r3
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	3304      	adds	r3, #4
 8013fd8:	4619      	mov	r1, r3
 8013fda:	4610      	mov	r0, r2
 8013fdc:	f7fd fccb 	bl	8011976 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013fe4:	697b      	ldr	r3, [r7, #20]
	}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3718      	adds	r7, #24
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
 8013fee:	bf00      	nop
 8013ff0:	20026f94 	.word	0x20026f94
 8013ff4:	20027470 	.word	0x20027470
 8013ff8:	20026f98 	.word	0x20026f98

08013ffc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b088      	sub	sp, #32
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801400a:	2301      	movs	r3, #1
 801400c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d06d      	beq.n	80140f0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014014:	69bb      	ldr	r3, [r7, #24]
 8014016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014018:	2b00      	cmp	r3, #0
 801401a:	d109      	bne.n	8014030 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014020:	f383 8811 	msr	BASEPRI, r3
 8014024:	f3bf 8f6f 	isb	sy
 8014028:	f3bf 8f4f 	dsb	sy
 801402c:	60fb      	str	r3, [r7, #12]
 801402e:	e7fe      	b.n	801402e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014030:	69bb      	ldr	r3, [r7, #24]
 8014032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014034:	683a      	ldr	r2, [r7, #0]
 8014036:	429a      	cmp	r2, r3
 8014038:	d902      	bls.n	8014040 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	61fb      	str	r3, [r7, #28]
 801403e:	e002      	b.n	8014046 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014040:	69bb      	ldr	r3, [r7, #24]
 8014042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014044:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014046:	69bb      	ldr	r3, [r7, #24]
 8014048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801404a:	69fa      	ldr	r2, [r7, #28]
 801404c:	429a      	cmp	r2, r3
 801404e:	d04f      	beq.n	80140f0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014050:	69bb      	ldr	r3, [r7, #24]
 8014052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014054:	697a      	ldr	r2, [r7, #20]
 8014056:	429a      	cmp	r2, r3
 8014058:	d14a      	bne.n	80140f0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801405a:	4b27      	ldr	r3, [pc, #156]	; (80140f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	69ba      	ldr	r2, [r7, #24]
 8014060:	429a      	cmp	r2, r3
 8014062:	d109      	bne.n	8014078 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8014064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014068:	f383 8811 	msr	BASEPRI, r3
 801406c:	f3bf 8f6f 	isb	sy
 8014070:	f3bf 8f4f 	dsb	sy
 8014074:	60bb      	str	r3, [r7, #8]
 8014076:	e7fe      	b.n	8014076 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014078:	69bb      	ldr	r3, [r7, #24]
 801407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801407c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801407e:	69bb      	ldr	r3, [r7, #24]
 8014080:	69fa      	ldr	r2, [r7, #28]
 8014082:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	699b      	ldr	r3, [r3, #24]
 8014088:	2b00      	cmp	r3, #0
 801408a:	db04      	blt.n	8014096 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801408c:	69fb      	ldr	r3, [r7, #28]
 801408e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014092:	69bb      	ldr	r3, [r7, #24]
 8014094:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014096:	69bb      	ldr	r3, [r7, #24]
 8014098:	6959      	ldr	r1, [r3, #20]
 801409a:	693a      	ldr	r2, [r7, #16]
 801409c:	4613      	mov	r3, r2
 801409e:	009b      	lsls	r3, r3, #2
 80140a0:	4413      	add	r3, r2
 80140a2:	009b      	lsls	r3, r3, #2
 80140a4:	4a15      	ldr	r2, [pc, #84]	; (80140fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80140a6:	4413      	add	r3, r2
 80140a8:	4299      	cmp	r1, r3
 80140aa:	d101      	bne.n	80140b0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80140ac:	2301      	movs	r3, #1
 80140ae:	e000      	b.n	80140b2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80140b0:	2300      	movs	r3, #0
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d01c      	beq.n	80140f0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80140b6:	69bb      	ldr	r3, [r7, #24]
 80140b8:	3304      	adds	r3, #4
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7fd fcb8 	bl	8011a30 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80140c0:	69bb      	ldr	r3, [r7, #24]
 80140c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140c4:	4b0e      	ldr	r3, [pc, #56]	; (8014100 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d903      	bls.n	80140d4 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80140cc:	69bb      	ldr	r3, [r7, #24]
 80140ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140d0:	4a0b      	ldr	r2, [pc, #44]	; (8014100 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80140d2:	6013      	str	r3, [r2, #0]
 80140d4:	69bb      	ldr	r3, [r7, #24]
 80140d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140d8:	4613      	mov	r3, r2
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	4413      	add	r3, r2
 80140de:	009b      	lsls	r3, r3, #2
 80140e0:	4a06      	ldr	r2, [pc, #24]	; (80140fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80140e2:	441a      	add	r2, r3
 80140e4:	69bb      	ldr	r3, [r7, #24]
 80140e6:	3304      	adds	r3, #4
 80140e8:	4619      	mov	r1, r3
 80140ea:	4610      	mov	r0, r2
 80140ec:	f7fd fc43 	bl	8011976 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80140f0:	bf00      	nop
 80140f2:	3720      	adds	r7, #32
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}
 80140f8:	20026f94 	.word	0x20026f94
 80140fc:	20026f98 	.word	0x20026f98
 8014100:	20027470 	.word	0x20027470

08014104 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8014104:	b480      	push	{r7}
 8014106:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014108:	4b07      	ldr	r3, [pc, #28]	; (8014128 <pvTaskIncrementMutexHeldCount+0x24>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d004      	beq.n	801411a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014110:	4b05      	ldr	r3, [pc, #20]	; (8014128 <pvTaskIncrementMutexHeldCount+0x24>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014116:	3201      	adds	r2, #1
 8014118:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 801411a:	4b03      	ldr	r3, [pc, #12]	; (8014128 <pvTaskIncrementMutexHeldCount+0x24>)
 801411c:	681b      	ldr	r3, [r3, #0]
	}
 801411e:	4618      	mov	r0, r3
 8014120:	46bd      	mov	sp, r7
 8014122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014126:	4770      	bx	lr
 8014128:	20026f94 	.word	0x20026f94

0801412c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801412c:	b580      	push	{r7, lr}
 801412e:	b086      	sub	sp, #24
 8014130:	af00      	add	r7, sp, #0
 8014132:	60f8      	str	r0, [r7, #12]
 8014134:	60b9      	str	r1, [r7, #8]
 8014136:	607a      	str	r2, [r7, #4]
 8014138:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801413a:	f7fd fdc7 	bl	8011ccc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801413e:	4b26      	ldr	r3, [pc, #152]	; (80141d8 <xTaskNotifyWait+0xac>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8014146:	b2db      	uxtb	r3, r3
 8014148:	2b02      	cmp	r3, #2
 801414a:	d01a      	beq.n	8014182 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801414c:	4b22      	ldr	r3, [pc, #136]	; (80141d8 <xTaskNotifyWait+0xac>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014152:	68fa      	ldr	r2, [r7, #12]
 8014154:	43d2      	mvns	r2, r2
 8014156:	400a      	ands	r2, r1
 8014158:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801415a:	4b1f      	ldr	r3, [pc, #124]	; (80141d8 <xTaskNotifyWait+0xac>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	2201      	movs	r2, #1
 8014160:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d00b      	beq.n	8014182 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801416a:	2101      	movs	r1, #1
 801416c:	6838      	ldr	r0, [r7, #0]
 801416e:	f000 f9a3 	bl	80144b8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014172:	4b1a      	ldr	r3, [pc, #104]	; (80141dc <xTaskNotifyWait+0xb0>)
 8014174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014178:	601a      	str	r2, [r3, #0]
 801417a:	f3bf 8f4f 	dsb	sy
 801417e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014182:	f7fd fdd1 	bl	8011d28 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014186:	f7fd fda1 	bl	8011ccc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d004      	beq.n	801419a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014190:	4b11      	ldr	r3, [pc, #68]	; (80141d8 <xTaskNotifyWait+0xac>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801419a:	4b0f      	ldr	r3, [pc, #60]	; (80141d8 <xTaskNotifyWait+0xac>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80141a2:	b2db      	uxtb	r3, r3
 80141a4:	2b02      	cmp	r3, #2
 80141a6:	d002      	beq.n	80141ae <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80141a8:	2300      	movs	r3, #0
 80141aa:	617b      	str	r3, [r7, #20]
 80141ac:	e008      	b.n	80141c0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80141ae:	4b0a      	ldr	r3, [pc, #40]	; (80141d8 <xTaskNotifyWait+0xac>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80141b4:	68ba      	ldr	r2, [r7, #8]
 80141b6:	43d2      	mvns	r2, r2
 80141b8:	400a      	ands	r2, r1
 80141ba:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 80141bc:	2301      	movs	r3, #1
 80141be:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80141c0:	4b05      	ldr	r3, [pc, #20]	; (80141d8 <xTaskNotifyWait+0xac>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	2200      	movs	r2, #0
 80141c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 80141ca:	f7fd fdad 	bl	8011d28 <vPortExitCritical>

		return xReturn;
 80141ce:	697b      	ldr	r3, [r7, #20]
	}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3718      	adds	r7, #24
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}
 80141d8:	20026f94 	.word	0x20026f94
 80141dc:	e000ed04 	.word	0xe000ed04

080141e0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b08a      	sub	sp, #40	; 0x28
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	60f8      	str	r0, [r7, #12]
 80141e8:	60b9      	str	r1, [r7, #8]
 80141ea:	603b      	str	r3, [r7, #0]
 80141ec:	4613      	mov	r3, r2
 80141ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80141f0:	2301      	movs	r3, #1
 80141f2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d109      	bne.n	801420e <xTaskGenericNotify+0x2e>
 80141fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fe:	f383 8811 	msr	BASEPRI, r3
 8014202:	f3bf 8f6f 	isb	sy
 8014206:	f3bf 8f4f 	dsb	sy
 801420a:	61bb      	str	r3, [r7, #24]
 801420c:	e7fe      	b.n	801420c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014212:	f7fd fd5b 	bl	8011ccc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014216:	683b      	ldr	r3, [r7, #0]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d003      	beq.n	8014224 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801421c:	6a3b      	ldr	r3, [r7, #32]
 801421e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014224:	6a3b      	ldr	r3, [r7, #32]
 8014226:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801422a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801422c:	6a3b      	ldr	r3, [r7, #32]
 801422e:	2202      	movs	r2, #2
 8014230:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8014234:	79fb      	ldrb	r3, [r7, #7]
 8014236:	2b04      	cmp	r3, #4
 8014238:	d827      	bhi.n	801428a <xTaskGenericNotify+0xaa>
 801423a:	a201      	add	r2, pc, #4	; (adr r2, 8014240 <xTaskGenericNotify+0x60>)
 801423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014240:	0801428b 	.word	0x0801428b
 8014244:	08014255 	.word	0x08014255
 8014248:	08014263 	.word	0x08014263
 801424c:	0801426f 	.word	0x0801426f
 8014250:	08014277 	.word	0x08014277
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014254:	6a3b      	ldr	r3, [r7, #32]
 8014256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	431a      	orrs	r2, r3
 801425c:	6a3b      	ldr	r3, [r7, #32]
 801425e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8014260:	e013      	b.n	801428a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014262:	6a3b      	ldr	r3, [r7, #32]
 8014264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014266:	1c5a      	adds	r2, r3, #1
 8014268:	6a3b      	ldr	r3, [r7, #32]
 801426a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 801426c:	e00d      	b.n	801428a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801426e:	6a3b      	ldr	r3, [r7, #32]
 8014270:	68ba      	ldr	r2, [r7, #8]
 8014272:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8014274:	e009      	b.n	801428a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014276:	7ffb      	ldrb	r3, [r7, #31]
 8014278:	2b02      	cmp	r3, #2
 801427a:	d003      	beq.n	8014284 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801427c:	6a3b      	ldr	r3, [r7, #32]
 801427e:	68ba      	ldr	r2, [r7, #8]
 8014280:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014282:	e001      	b.n	8014288 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8014284:	2300      	movs	r3, #0
 8014286:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014288:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801428a:	7ffb      	ldrb	r3, [r7, #31]
 801428c:	2b01      	cmp	r3, #1
 801428e:	d13b      	bne.n	8014308 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014290:	6a3b      	ldr	r3, [r7, #32]
 8014292:	3304      	adds	r3, #4
 8014294:	4618      	mov	r0, r3
 8014296:	f7fd fbcb 	bl	8011a30 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801429a:	6a3b      	ldr	r3, [r7, #32]
 801429c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801429e:	4b1e      	ldr	r3, [pc, #120]	; (8014318 <xTaskGenericNotify+0x138>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d903      	bls.n	80142ae <xTaskGenericNotify+0xce>
 80142a6:	6a3b      	ldr	r3, [r7, #32]
 80142a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142aa:	4a1b      	ldr	r2, [pc, #108]	; (8014318 <xTaskGenericNotify+0x138>)
 80142ac:	6013      	str	r3, [r2, #0]
 80142ae:	6a3b      	ldr	r3, [r7, #32]
 80142b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142b2:	4613      	mov	r3, r2
 80142b4:	009b      	lsls	r3, r3, #2
 80142b6:	4413      	add	r3, r2
 80142b8:	009b      	lsls	r3, r3, #2
 80142ba:	4a18      	ldr	r2, [pc, #96]	; (801431c <xTaskGenericNotify+0x13c>)
 80142bc:	441a      	add	r2, r3
 80142be:	6a3b      	ldr	r3, [r7, #32]
 80142c0:	3304      	adds	r3, #4
 80142c2:	4619      	mov	r1, r3
 80142c4:	4610      	mov	r0, r2
 80142c6:	f7fd fb56 	bl	8011976 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80142ca:	6a3b      	ldr	r3, [r7, #32]
 80142cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d009      	beq.n	80142e6 <xTaskGenericNotify+0x106>
 80142d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142d6:	f383 8811 	msr	BASEPRI, r3
 80142da:	f3bf 8f6f 	isb	sy
 80142de:	f3bf 8f4f 	dsb	sy
 80142e2:	617b      	str	r3, [r7, #20]
 80142e4:	e7fe      	b.n	80142e4 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 80142e6:	f7ff fd5b 	bl	8013da0 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80142ea:	6a3b      	ldr	r3, [r7, #32]
 80142ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142ee:	4b0c      	ldr	r3, [pc, #48]	; (8014320 <xTaskGenericNotify+0x140>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d907      	bls.n	8014308 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80142f8:	4b0a      	ldr	r3, [pc, #40]	; (8014324 <xTaskGenericNotify+0x144>)
 80142fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142fe:	601a      	str	r2, [r3, #0]
 8014300:	f3bf 8f4f 	dsb	sy
 8014304:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014308:	f7fd fd0e 	bl	8011d28 <vPortExitCritical>

		return xReturn;
 801430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801430e:	4618      	mov	r0, r3
 8014310:	3728      	adds	r7, #40	; 0x28
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}
 8014316:	bf00      	nop
 8014318:	20027470 	.word	0x20027470
 801431c:	20026f98 	.word	0x20026f98
 8014320:	20026f94 	.word	0x20026f94
 8014324:	e000ed04 	.word	0xe000ed04

08014328 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014328:	b580      	push	{r7, lr}
 801432a:	b08e      	sub	sp, #56	; 0x38
 801432c:	af00      	add	r7, sp, #0
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	603b      	str	r3, [r7, #0]
 8014334:	4613      	mov	r3, r2
 8014336:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014338:	2301      	movs	r3, #1
 801433a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d109      	bne.n	8014356 <xTaskGenericNotifyFromISR+0x2e>
 8014342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014346:	f383 8811 	msr	BASEPRI, r3
 801434a:	f3bf 8f6f 	isb	sy
 801434e:	f3bf 8f4f 	dsb	sy
 8014352:	627b      	str	r3, [r7, #36]	; 0x24
 8014354:	e7fe      	b.n	8014354 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014356:	f7fd fd71 	bl	8011e3c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801435e:	f3ef 8211 	mrs	r2, BASEPRI
 8014362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014366:	f383 8811 	msr	BASEPRI, r3
 801436a:	f3bf 8f6f 	isb	sy
 801436e:	f3bf 8f4f 	dsb	sy
 8014372:	623a      	str	r2, [r7, #32]
 8014374:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014376:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014378:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801437a:	683b      	ldr	r3, [r7, #0]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d003      	beq.n	8014388 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014382:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801438a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801438e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014394:	2202      	movs	r2, #2
 8014396:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 801439a:	79fb      	ldrb	r3, [r7, #7]
 801439c:	2b04      	cmp	r3, #4
 801439e:	d829      	bhi.n	80143f4 <xTaskGenericNotifyFromISR+0xcc>
 80143a0:	a201      	add	r2, pc, #4	; (adr r2, 80143a8 <xTaskGenericNotifyFromISR+0x80>)
 80143a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143a6:	bf00      	nop
 80143a8:	080143f5 	.word	0x080143f5
 80143ac:	080143bd 	.word	0x080143bd
 80143b0:	080143cb 	.word	0x080143cb
 80143b4:	080143d7 	.word	0x080143d7
 80143b8:	080143df 	.word	0x080143df
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80143bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	431a      	orrs	r2, r3
 80143c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c6:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80143c8:	e014      	b.n	80143f4 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80143ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80143ce:	1c5a      	adds	r2, r3, #1
 80143d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80143d4:	e00e      	b.n	80143f4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80143d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d8:	68ba      	ldr	r2, [r7, #8]
 80143da:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80143dc:	e00a      	b.n	80143f4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80143de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80143e2:	2b02      	cmp	r3, #2
 80143e4:	d003      	beq.n	80143ee <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80143e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e8:	68ba      	ldr	r2, [r7, #8]
 80143ea:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80143ec:	e001      	b.n	80143f2 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 80143ee:	2300      	movs	r3, #0
 80143f0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80143f2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80143f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80143f8:	2b01      	cmp	r3, #1
 80143fa:	d146      	bne.n	801448a <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80143fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014400:	2b00      	cmp	r3, #0
 8014402:	d009      	beq.n	8014418 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8014404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014408:	f383 8811 	msr	BASEPRI, r3
 801440c:	f3bf 8f6f 	isb	sy
 8014410:	f3bf 8f4f 	dsb	sy
 8014414:	61bb      	str	r3, [r7, #24]
 8014416:	e7fe      	b.n	8014416 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014418:	4b21      	ldr	r3, [pc, #132]	; (80144a0 <xTaskGenericNotifyFromISR+0x178>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d11d      	bne.n	801445c <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014422:	3304      	adds	r3, #4
 8014424:	4618      	mov	r0, r3
 8014426:	f7fd fb03 	bl	8011a30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801442c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801442e:	4b1d      	ldr	r3, [pc, #116]	; (80144a4 <xTaskGenericNotifyFromISR+0x17c>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	429a      	cmp	r2, r3
 8014434:	d903      	bls.n	801443e <xTaskGenericNotifyFromISR+0x116>
 8014436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801443a:	4a1a      	ldr	r2, [pc, #104]	; (80144a4 <xTaskGenericNotifyFromISR+0x17c>)
 801443c:	6013      	str	r3, [r2, #0]
 801443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014442:	4613      	mov	r3, r2
 8014444:	009b      	lsls	r3, r3, #2
 8014446:	4413      	add	r3, r2
 8014448:	009b      	lsls	r3, r3, #2
 801444a:	4a17      	ldr	r2, [pc, #92]	; (80144a8 <xTaskGenericNotifyFromISR+0x180>)
 801444c:	441a      	add	r2, r3
 801444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014450:	3304      	adds	r3, #4
 8014452:	4619      	mov	r1, r3
 8014454:	4610      	mov	r0, r2
 8014456:	f7fd fa8e 	bl	8011976 <vListInsertEnd>
 801445a:	e005      	b.n	8014468 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445e:	3318      	adds	r3, #24
 8014460:	4619      	mov	r1, r3
 8014462:	4812      	ldr	r0, [pc, #72]	; (80144ac <xTaskGenericNotifyFromISR+0x184>)
 8014464:	f7fd fa87 	bl	8011976 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801446c:	4b10      	ldr	r3, [pc, #64]	; (80144b0 <xTaskGenericNotifyFromISR+0x188>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014472:	429a      	cmp	r2, r3
 8014474:	d909      	bls.n	801448a <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014478:	2b00      	cmp	r3, #0
 801447a:	d003      	beq.n	8014484 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801447c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801447e:	2201      	movs	r2, #1
 8014480:	601a      	str	r2, [r3, #0]
 8014482:	e002      	b.n	801448a <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8014484:	4b0b      	ldr	r3, [pc, #44]	; (80144b4 <xTaskGenericNotifyFromISR+0x18c>)
 8014486:	2201      	movs	r2, #1
 8014488:	601a      	str	r2, [r3, #0]
 801448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801448c:	617b      	str	r3, [r7, #20]
	__asm volatile
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014496:	4618      	mov	r0, r3
 8014498:	3738      	adds	r7, #56	; 0x38
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}
 801449e:	bf00      	nop
 80144a0:	20027490 	.word	0x20027490
 80144a4:	20027470 	.word	0x20027470
 80144a8:	20026f98 	.word	0x20026f98
 80144ac:	20027428 	.word	0x20027428
 80144b0:	20026f94 	.word	0x20026f94
 80144b4:	2002747c 	.word	0x2002747c

080144b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b084      	sub	sp, #16
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80144c2:	4b21      	ldr	r3, [pc, #132]	; (8014548 <prvAddCurrentTaskToDelayedList+0x90>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144c8:	4b20      	ldr	r3, [pc, #128]	; (801454c <prvAddCurrentTaskToDelayedList+0x94>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	3304      	adds	r3, #4
 80144ce:	4618      	mov	r0, r3
 80144d0:	f7fd faae 	bl	8011a30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144da:	d10a      	bne.n	80144f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d007      	beq.n	80144f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80144e2:	4b1a      	ldr	r3, [pc, #104]	; (801454c <prvAddCurrentTaskToDelayedList+0x94>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	3304      	adds	r3, #4
 80144e8:	4619      	mov	r1, r3
 80144ea:	4819      	ldr	r0, [pc, #100]	; (8014550 <prvAddCurrentTaskToDelayedList+0x98>)
 80144ec:	f7fd fa43 	bl	8011976 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80144f0:	e026      	b.n	8014540 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80144f2:	68fa      	ldr	r2, [r7, #12]
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	4413      	add	r3, r2
 80144f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80144fa:	4b14      	ldr	r3, [pc, #80]	; (801454c <prvAddCurrentTaskToDelayedList+0x94>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	68ba      	ldr	r2, [r7, #8]
 8014500:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014502:	68ba      	ldr	r2, [r7, #8]
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	429a      	cmp	r2, r3
 8014508:	d209      	bcs.n	801451e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801450a:	4b12      	ldr	r3, [pc, #72]	; (8014554 <prvAddCurrentTaskToDelayedList+0x9c>)
 801450c:	681a      	ldr	r2, [r3, #0]
 801450e:	4b0f      	ldr	r3, [pc, #60]	; (801454c <prvAddCurrentTaskToDelayedList+0x94>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	3304      	adds	r3, #4
 8014514:	4619      	mov	r1, r3
 8014516:	4610      	mov	r0, r2
 8014518:	f7fd fa51 	bl	80119be <vListInsert>
}
 801451c:	e010      	b.n	8014540 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801451e:	4b0e      	ldr	r3, [pc, #56]	; (8014558 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014520:	681a      	ldr	r2, [r3, #0]
 8014522:	4b0a      	ldr	r3, [pc, #40]	; (801454c <prvAddCurrentTaskToDelayedList+0x94>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	3304      	adds	r3, #4
 8014528:	4619      	mov	r1, r3
 801452a:	4610      	mov	r0, r2
 801452c:	f7fd fa47 	bl	80119be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014530:	4b0a      	ldr	r3, [pc, #40]	; (801455c <prvAddCurrentTaskToDelayedList+0xa4>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	68ba      	ldr	r2, [r7, #8]
 8014536:	429a      	cmp	r2, r3
 8014538:	d202      	bcs.n	8014540 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801453a:	4a08      	ldr	r2, [pc, #32]	; (801455c <prvAddCurrentTaskToDelayedList+0xa4>)
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	6013      	str	r3, [r2, #0]
}
 8014540:	bf00      	nop
 8014542:	3710      	adds	r7, #16
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}
 8014548:	2002746c 	.word	0x2002746c
 801454c:	20026f94 	.word	0x20026f94
 8014550:	20027454 	.word	0x20027454
 8014554:	20027424 	.word	0x20027424
 8014558:	20027420 	.word	0x20027420
 801455c:	20027488 	.word	0x20027488

08014560 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b08a      	sub	sp, #40	; 0x28
 8014564:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014566:	2300      	movs	r3, #0
 8014568:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801456a:	f000 fb51 	bl	8014c10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801456e:	4b1c      	ldr	r3, [pc, #112]	; (80145e0 <xTimerCreateTimerTask+0x80>)
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d021      	beq.n	80145ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014576:	2300      	movs	r3, #0
 8014578:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801457a:	2300      	movs	r3, #0
 801457c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801457e:	1d3a      	adds	r2, r7, #4
 8014580:	f107 0108 	add.w	r1, r7, #8
 8014584:	f107 030c 	add.w	r3, r7, #12
 8014588:	4618      	mov	r0, r3
 801458a:	f7fc ffd1 	bl	8011530 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801458e:	6879      	ldr	r1, [r7, #4]
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	68fa      	ldr	r2, [r7, #12]
 8014594:	9202      	str	r2, [sp, #8]
 8014596:	9301      	str	r3, [sp, #4]
 8014598:	2302      	movs	r3, #2
 801459a:	9300      	str	r3, [sp, #0]
 801459c:	2300      	movs	r3, #0
 801459e:	460a      	mov	r2, r1
 80145a0:	4910      	ldr	r1, [pc, #64]	; (80145e4 <xTimerCreateTimerTask+0x84>)
 80145a2:	4811      	ldr	r0, [pc, #68]	; (80145e8 <xTimerCreateTimerTask+0x88>)
 80145a4:	f7fe fd28 	bl	8012ff8 <xTaskCreateStatic>
 80145a8:	4602      	mov	r2, r0
 80145aa:	4b10      	ldr	r3, [pc, #64]	; (80145ec <xTimerCreateTimerTask+0x8c>)
 80145ac:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80145ae:	4b0f      	ldr	r3, [pc, #60]	; (80145ec <xTimerCreateTimerTask+0x8c>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d001      	beq.n	80145ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80145b6:	2301      	movs	r3, #1
 80145b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d109      	bne.n	80145d4 <xTimerCreateTimerTask+0x74>
	__asm volatile
 80145c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c4:	f383 8811 	msr	BASEPRI, r3
 80145c8:	f3bf 8f6f 	isb	sy
 80145cc:	f3bf 8f4f 	dsb	sy
 80145d0:	613b      	str	r3, [r7, #16]
 80145d2:	e7fe      	b.n	80145d2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80145d4:	697b      	ldr	r3, [r7, #20]
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	3718      	adds	r7, #24
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	200274cc 	.word	0x200274cc
 80145e4:	0801ba20 	.word	0x0801ba20
 80145e8:	08014825 	.word	0x08014825
 80145ec:	200274d0 	.word	0x200274d0

080145f0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b088      	sub	sp, #32
 80145f4:	af02      	add	r7, sp, #8
 80145f6:	60f8      	str	r0, [r7, #12]
 80145f8:	60b9      	str	r1, [r7, #8]
 80145fa:	607a      	str	r2, [r7, #4]
 80145fc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80145fe:	2030      	movs	r0, #48	; 0x30
 8014600:	f7fc ffb0 	bl	8011564 <pvPortMalloc>
 8014604:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8014606:	697b      	ldr	r3, [r7, #20]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d00d      	beq.n	8014628 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	9301      	str	r3, [sp, #4]
 8014610:	6a3b      	ldr	r3, [r7, #32]
 8014612:	9300      	str	r3, [sp, #0]
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	687a      	ldr	r2, [r7, #4]
 8014618:	68b9      	ldr	r1, [r7, #8]
 801461a:	68f8      	ldr	r0, [r7, #12]
 801461c:	f000 f844 	bl	80146a8 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	2200      	movs	r2, #0
 8014624:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8014628:	697b      	ldr	r3, [r7, #20]
	}
 801462a:	4618      	mov	r0, r3
 801462c:	3718      	adds	r7, #24
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}

08014632 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8014632:	b580      	push	{r7, lr}
 8014634:	b08a      	sub	sp, #40	; 0x28
 8014636:	af02      	add	r7, sp, #8
 8014638:	60f8      	str	r0, [r7, #12]
 801463a:	60b9      	str	r1, [r7, #8]
 801463c:	607a      	str	r2, [r7, #4]
 801463e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8014640:	2330      	movs	r3, #48	; 0x30
 8014642:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	2b30      	cmp	r3, #48	; 0x30
 8014648:	d009      	beq.n	801465e <xTimerCreateStatic+0x2c>
 801464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801464e:	f383 8811 	msr	BASEPRI, r3
 8014652:	f3bf 8f6f 	isb	sy
 8014656:	f3bf 8f4f 	dsb	sy
 801465a:	61bb      	str	r3, [r7, #24]
 801465c:	e7fe      	b.n	801465c <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014660:	2b00      	cmp	r3, #0
 8014662:	d109      	bne.n	8014678 <xTimerCreateStatic+0x46>
 8014664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014668:	f383 8811 	msr	BASEPRI, r3
 801466c:	f3bf 8f6f 	isb	sy
 8014670:	f3bf 8f4f 	dsb	sy
 8014674:	617b      	str	r3, [r7, #20]
 8014676:	e7fe      	b.n	8014676 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801467a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801467c:	69fb      	ldr	r3, [r7, #28]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d00d      	beq.n	801469e <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8014682:	69fb      	ldr	r3, [r7, #28]
 8014684:	9301      	str	r3, [sp, #4]
 8014686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014688:	9300      	str	r3, [sp, #0]
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	687a      	ldr	r2, [r7, #4]
 801468e:	68b9      	ldr	r1, [r7, #8]
 8014690:	68f8      	ldr	r0, [r7, #12]
 8014692:	f000 f809 	bl	80146a8 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	2201      	movs	r2, #1
 801469a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 801469e:	69fb      	ldr	r3, [r7, #28]
	}
 80146a0:	4618      	mov	r0, r3
 80146a2:	3720      	adds	r7, #32
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b086      	sub	sp, #24
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	60f8      	str	r0, [r7, #12]
 80146b0:	60b9      	str	r1, [r7, #8]
 80146b2:	607a      	str	r2, [r7, #4]
 80146b4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d109      	bne.n	80146d0 <prvInitialiseNewTimer+0x28>
 80146bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c0:	f383 8811 	msr	BASEPRI, r3
 80146c4:	f3bf 8f6f 	isb	sy
 80146c8:	f3bf 8f4f 	dsb	sy
 80146cc:	617b      	str	r3, [r7, #20]
 80146ce:	e7fe      	b.n	80146ce <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80146d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d015      	beq.n	8014702 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80146d6:	f000 fa9b 	bl	8014c10 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80146da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146dc:	68fa      	ldr	r2, [r7, #12]
 80146de:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80146e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e2:	68ba      	ldr	r2, [r7, #8]
 80146e4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80146e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e8:	687a      	ldr	r2, [r7, #4]
 80146ea:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80146ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ee:	683a      	ldr	r2, [r7, #0]
 80146f0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80146f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f4:	6a3a      	ldr	r2, [r7, #32]
 80146f6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80146f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146fa:	3304      	adds	r3, #4
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7fd f92d 	bl	801195c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8014702:	bf00      	nop
 8014704:	3718      	adds	r7, #24
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
	...

0801470c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b08a      	sub	sp, #40	; 0x28
 8014710:	af00      	add	r7, sp, #0
 8014712:	60f8      	str	r0, [r7, #12]
 8014714:	60b9      	str	r1, [r7, #8]
 8014716:	607a      	str	r2, [r7, #4]
 8014718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801471a:	2300      	movs	r3, #0
 801471c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d109      	bne.n	8014738 <xTimerGenericCommand+0x2c>
 8014724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014728:	f383 8811 	msr	BASEPRI, r3
 801472c:	f3bf 8f6f 	isb	sy
 8014730:	f3bf 8f4f 	dsb	sy
 8014734:	623b      	str	r3, [r7, #32]
 8014736:	e7fe      	b.n	8014736 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014738:	4b19      	ldr	r3, [pc, #100]	; (80147a0 <xTimerGenericCommand+0x94>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d02a      	beq.n	8014796 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	2b05      	cmp	r3, #5
 8014750:	dc18      	bgt.n	8014784 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014752:	f7ff fb5b 	bl	8013e0c <xTaskGetSchedulerState>
 8014756:	4603      	mov	r3, r0
 8014758:	2b02      	cmp	r3, #2
 801475a:	d109      	bne.n	8014770 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801475c:	4b10      	ldr	r3, [pc, #64]	; (80147a0 <xTimerGenericCommand+0x94>)
 801475e:	6818      	ldr	r0, [r3, #0]
 8014760:	f107 0110 	add.w	r1, r7, #16
 8014764:	2300      	movs	r3, #0
 8014766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014768:	f7fd fdfc 	bl	8012364 <xQueueGenericSend>
 801476c:	6278      	str	r0, [r7, #36]	; 0x24
 801476e:	e012      	b.n	8014796 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014770:	4b0b      	ldr	r3, [pc, #44]	; (80147a0 <xTimerGenericCommand+0x94>)
 8014772:	6818      	ldr	r0, [r3, #0]
 8014774:	f107 0110 	add.w	r1, r7, #16
 8014778:	2300      	movs	r3, #0
 801477a:	2200      	movs	r2, #0
 801477c:	f7fd fdf2 	bl	8012364 <xQueueGenericSend>
 8014780:	6278      	str	r0, [r7, #36]	; 0x24
 8014782:	e008      	b.n	8014796 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014784:	4b06      	ldr	r3, [pc, #24]	; (80147a0 <xTimerGenericCommand+0x94>)
 8014786:	6818      	ldr	r0, [r3, #0]
 8014788:	f107 0110 	add.w	r1, r7, #16
 801478c:	2300      	movs	r3, #0
 801478e:	683a      	ldr	r2, [r7, #0]
 8014790:	f7fd fee2 	bl	8012558 <xQueueGenericSendFromISR>
 8014794:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014798:	4618      	mov	r0, r3
 801479a:	3728      	adds	r7, #40	; 0x28
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	200274cc 	.word	0x200274cc

080147a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b088      	sub	sp, #32
 80147a8:	af02      	add	r7, sp, #8
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80147ae:	4b1c      	ldr	r3, [pc, #112]	; (8014820 <prvProcessExpiredTimer+0x7c>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	68db      	ldr	r3, [r3, #12]
 80147b4:	68db      	ldr	r3, [r3, #12]
 80147b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80147b8:	697b      	ldr	r3, [r7, #20]
 80147ba:	3304      	adds	r3, #4
 80147bc:	4618      	mov	r0, r3
 80147be:	f7fd f937 	bl	8011a30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80147c2:	697b      	ldr	r3, [r7, #20]
 80147c4:	69db      	ldr	r3, [r3, #28]
 80147c6:	2b01      	cmp	r3, #1
 80147c8:	d121      	bne.n	801480e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80147ca:	697b      	ldr	r3, [r7, #20]
 80147cc:	699a      	ldr	r2, [r3, #24]
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	18d1      	adds	r1, r2, r3
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	683a      	ldr	r2, [r7, #0]
 80147d6:	6978      	ldr	r0, [r7, #20]
 80147d8:	f000 f8c8 	bl	801496c <prvInsertTimerInActiveList>
 80147dc:	4603      	mov	r3, r0
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d015      	beq.n	801480e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80147e2:	2300      	movs	r3, #0
 80147e4:	9300      	str	r3, [sp, #0]
 80147e6:	2300      	movs	r3, #0
 80147e8:	687a      	ldr	r2, [r7, #4]
 80147ea:	2100      	movs	r1, #0
 80147ec:	6978      	ldr	r0, [r7, #20]
 80147ee:	f7ff ff8d 	bl	801470c <xTimerGenericCommand>
 80147f2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80147f4:	693b      	ldr	r3, [r7, #16]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d109      	bne.n	801480e <prvProcessExpiredTimer+0x6a>
 80147fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fe:	f383 8811 	msr	BASEPRI, r3
 8014802:	f3bf 8f6f 	isb	sy
 8014806:	f3bf 8f4f 	dsb	sy
 801480a:	60fb      	str	r3, [r7, #12]
 801480c:	e7fe      	b.n	801480c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801480e:	697b      	ldr	r3, [r7, #20]
 8014810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014812:	6978      	ldr	r0, [r7, #20]
 8014814:	4798      	blx	r3
}
 8014816:	bf00      	nop
 8014818:	3718      	adds	r7, #24
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}
 801481e:	bf00      	nop
 8014820:	200274c4 	.word	0x200274c4

08014824 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b084      	sub	sp, #16
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801482c:	f107 0308 	add.w	r3, r7, #8
 8014830:	4618      	mov	r0, r3
 8014832:	f000 f857 	bl	80148e4 <prvGetNextExpireTime>
 8014836:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	4619      	mov	r1, r3
 801483c:	68f8      	ldr	r0, [r7, #12]
 801483e:	f000 f803 	bl	8014848 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014842:	f000 f8d5 	bl	80149f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014846:	e7f1      	b.n	801482c <prvTimerTask+0x8>

08014848 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b084      	sub	sp, #16
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014852:	f7fe fe05 	bl	8013460 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014856:	f107 0308 	add.w	r3, r7, #8
 801485a:	4618      	mov	r0, r3
 801485c:	f000 f866 	bl	801492c <prvSampleTimeNow>
 8014860:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d130      	bne.n	80148ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d10a      	bne.n	8014884 <prvProcessTimerOrBlockTask+0x3c>
 801486e:	687a      	ldr	r2, [r7, #4]
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	429a      	cmp	r2, r3
 8014874:	d806      	bhi.n	8014884 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014876:	f7fe fe39 	bl	80134ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801487a:	68f9      	ldr	r1, [r7, #12]
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f7ff ff91 	bl	80147a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014882:	e024      	b.n	80148ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d008      	beq.n	801489c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801488a:	4b13      	ldr	r3, [pc, #76]	; (80148d8 <prvProcessTimerOrBlockTask+0x90>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	2b00      	cmp	r3, #0
 8014892:	bf0c      	ite	eq
 8014894:	2301      	moveq	r3, #1
 8014896:	2300      	movne	r3, #0
 8014898:	b2db      	uxtb	r3, r3
 801489a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801489c:	4b0f      	ldr	r3, [pc, #60]	; (80148dc <prvProcessTimerOrBlockTask+0x94>)
 801489e:	6818      	ldr	r0, [r3, #0]
 80148a0:	687a      	ldr	r2, [r7, #4]
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	1ad3      	subs	r3, r2, r3
 80148a6:	683a      	ldr	r2, [r7, #0]
 80148a8:	4619      	mov	r1, r3
 80148aa:	f7fe fb71 	bl	8012f90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80148ae:	f7fe fe1d 	bl	80134ec <xTaskResumeAll>
 80148b2:	4603      	mov	r3, r0
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d10a      	bne.n	80148ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80148b8:	4b09      	ldr	r3, [pc, #36]	; (80148e0 <prvProcessTimerOrBlockTask+0x98>)
 80148ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148be:	601a      	str	r2, [r3, #0]
 80148c0:	f3bf 8f4f 	dsb	sy
 80148c4:	f3bf 8f6f 	isb	sy
}
 80148c8:	e001      	b.n	80148ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80148ca:	f7fe fe0f 	bl	80134ec <xTaskResumeAll>
}
 80148ce:	bf00      	nop
 80148d0:	3710      	adds	r7, #16
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}
 80148d6:	bf00      	nop
 80148d8:	200274c8 	.word	0x200274c8
 80148dc:	200274cc 	.word	0x200274cc
 80148e0:	e000ed04 	.word	0xe000ed04

080148e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80148e4:	b480      	push	{r7}
 80148e6:	b085      	sub	sp, #20
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80148ec:	4b0e      	ldr	r3, [pc, #56]	; (8014928 <prvGetNextExpireTime+0x44>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	bf0c      	ite	eq
 80148f6:	2301      	moveq	r3, #1
 80148f8:	2300      	movne	r3, #0
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	461a      	mov	r2, r3
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d105      	bne.n	8014916 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801490a:	4b07      	ldr	r3, [pc, #28]	; (8014928 <prvGetNextExpireTime+0x44>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	68db      	ldr	r3, [r3, #12]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	60fb      	str	r3, [r7, #12]
 8014914:	e001      	b.n	801491a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014916:	2300      	movs	r3, #0
 8014918:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801491a:	68fb      	ldr	r3, [r7, #12]
}
 801491c:	4618      	mov	r0, r3
 801491e:	3714      	adds	r7, #20
 8014920:	46bd      	mov	sp, r7
 8014922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014926:	4770      	bx	lr
 8014928:	200274c4 	.word	0x200274c4

0801492c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b084      	sub	sp, #16
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014934:	f7fe fe76 	bl	8013624 <xTaskGetTickCount>
 8014938:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801493a:	4b0b      	ldr	r3, [pc, #44]	; (8014968 <prvSampleTimeNow+0x3c>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	68fa      	ldr	r2, [r7, #12]
 8014940:	429a      	cmp	r2, r3
 8014942:	d205      	bcs.n	8014950 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014944:	f000 f904 	bl	8014b50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2201      	movs	r2, #1
 801494c:	601a      	str	r2, [r3, #0]
 801494e:	e002      	b.n	8014956 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2200      	movs	r2, #0
 8014954:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014956:	4a04      	ldr	r2, [pc, #16]	; (8014968 <prvSampleTimeNow+0x3c>)
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801495c:	68fb      	ldr	r3, [r7, #12]
}
 801495e:	4618      	mov	r0, r3
 8014960:	3710      	adds	r7, #16
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}
 8014966:	bf00      	nop
 8014968:	200274d4 	.word	0x200274d4

0801496c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b086      	sub	sp, #24
 8014970:	af00      	add	r7, sp, #0
 8014972:	60f8      	str	r0, [r7, #12]
 8014974:	60b9      	str	r1, [r7, #8]
 8014976:	607a      	str	r2, [r7, #4]
 8014978:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801497a:	2300      	movs	r3, #0
 801497c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	68ba      	ldr	r2, [r7, #8]
 8014982:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	68fa      	ldr	r2, [r7, #12]
 8014988:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801498a:	68ba      	ldr	r2, [r7, #8]
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	429a      	cmp	r2, r3
 8014990:	d812      	bhi.n	80149b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014992:	687a      	ldr	r2, [r7, #4]
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	1ad2      	subs	r2, r2, r3
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	699b      	ldr	r3, [r3, #24]
 801499c:	429a      	cmp	r2, r3
 801499e:	d302      	bcc.n	80149a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80149a0:	2301      	movs	r3, #1
 80149a2:	617b      	str	r3, [r7, #20]
 80149a4:	e01b      	b.n	80149de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80149a6:	4b10      	ldr	r3, [pc, #64]	; (80149e8 <prvInsertTimerInActiveList+0x7c>)
 80149a8:	681a      	ldr	r2, [r3, #0]
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	3304      	adds	r3, #4
 80149ae:	4619      	mov	r1, r3
 80149b0:	4610      	mov	r0, r2
 80149b2:	f7fd f804 	bl	80119be <vListInsert>
 80149b6:	e012      	b.n	80149de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80149b8:	687a      	ldr	r2, [r7, #4]
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	429a      	cmp	r2, r3
 80149be:	d206      	bcs.n	80149ce <prvInsertTimerInActiveList+0x62>
 80149c0:	68ba      	ldr	r2, [r7, #8]
 80149c2:	683b      	ldr	r3, [r7, #0]
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d302      	bcc.n	80149ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80149c8:	2301      	movs	r3, #1
 80149ca:	617b      	str	r3, [r7, #20]
 80149cc:	e007      	b.n	80149de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80149ce:	4b07      	ldr	r3, [pc, #28]	; (80149ec <prvInsertTimerInActiveList+0x80>)
 80149d0:	681a      	ldr	r2, [r3, #0]
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	3304      	adds	r3, #4
 80149d6:	4619      	mov	r1, r3
 80149d8:	4610      	mov	r0, r2
 80149da:	f7fc fff0 	bl	80119be <vListInsert>
		}
	}

	return xProcessTimerNow;
 80149de:	697b      	ldr	r3, [r7, #20]
}
 80149e0:	4618      	mov	r0, r3
 80149e2:	3718      	adds	r7, #24
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}
 80149e8:	200274c8 	.word	0x200274c8
 80149ec:	200274c4 	.word	0x200274c4

080149f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b08e      	sub	sp, #56	; 0x38
 80149f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80149f6:	e099      	b.n	8014b2c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	da17      	bge.n	8014a2e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80149fe:	1d3b      	adds	r3, r7, #4
 8014a00:	3304      	adds	r3, #4
 8014a02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d109      	bne.n	8014a1e <prvProcessReceivedCommands+0x2e>
 8014a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a0e:	f383 8811 	msr	BASEPRI, r3
 8014a12:	f3bf 8f6f 	isb	sy
 8014a16:	f3bf 8f4f 	dsb	sy
 8014a1a:	61fb      	str	r3, [r7, #28]
 8014a1c:	e7fe      	b.n	8014a1c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a24:	6850      	ldr	r0, [r2, #4]
 8014a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a28:	6892      	ldr	r2, [r2, #8]
 8014a2a:	4611      	mov	r1, r2
 8014a2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	db7a      	blt.n	8014b2a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a3a:	695b      	ldr	r3, [r3, #20]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d004      	beq.n	8014a4a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a42:	3304      	adds	r3, #4
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7fc fff3 	bl	8011a30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014a4a:	463b      	mov	r3, r7
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7ff ff6d 	bl	801492c <prvSampleTimeNow>
 8014a52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2b09      	cmp	r3, #9
 8014a58:	d868      	bhi.n	8014b2c <prvProcessReceivedCommands+0x13c>
 8014a5a:	a201      	add	r2, pc, #4	; (adr r2, 8014a60 <prvProcessReceivedCommands+0x70>)
 8014a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a60:	08014a89 	.word	0x08014a89
 8014a64:	08014a89 	.word	0x08014a89
 8014a68:	08014a89 	.word	0x08014a89
 8014a6c:	08014b2d 	.word	0x08014b2d
 8014a70:	08014ae3 	.word	0x08014ae3
 8014a74:	08014b19 	.word	0x08014b19
 8014a78:	08014a89 	.word	0x08014a89
 8014a7c:	08014a89 	.word	0x08014a89
 8014a80:	08014b2d 	.word	0x08014b2d
 8014a84:	08014ae3 	.word	0x08014ae3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014a88:	68ba      	ldr	r2, [r7, #8]
 8014a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8c:	699b      	ldr	r3, [r3, #24]
 8014a8e:	18d1      	adds	r1, r2, r3
 8014a90:	68bb      	ldr	r3, [r7, #8]
 8014a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a96:	f7ff ff69 	bl	801496c <prvInsertTimerInActiveList>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d045      	beq.n	8014b2c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014aa6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8014aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aaa:	69db      	ldr	r3, [r3, #28]
 8014aac:	2b01      	cmp	r3, #1
 8014aae:	d13d      	bne.n	8014b2c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014ab0:	68ba      	ldr	r2, [r7, #8]
 8014ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab4:	699b      	ldr	r3, [r3, #24]
 8014ab6:	441a      	add	r2, r3
 8014ab8:	2300      	movs	r3, #0
 8014aba:	9300      	str	r3, [sp, #0]
 8014abc:	2300      	movs	r3, #0
 8014abe:	2100      	movs	r1, #0
 8014ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ac2:	f7ff fe23 	bl	801470c <xTimerGenericCommand>
 8014ac6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014ac8:	6a3b      	ldr	r3, [r7, #32]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d12e      	bne.n	8014b2c <prvProcessReceivedCommands+0x13c>
 8014ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad2:	f383 8811 	msr	BASEPRI, r3
 8014ad6:	f3bf 8f6f 	isb	sy
 8014ada:	f3bf 8f4f 	dsb	sy
 8014ade:	61bb      	str	r3, [r7, #24]
 8014ae0:	e7fe      	b.n	8014ae0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014ae2:	68ba      	ldr	r2, [r7, #8]
 8014ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aea:	699b      	ldr	r3, [r3, #24]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d109      	bne.n	8014b04 <prvProcessReceivedCommands+0x114>
 8014af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014af4:	f383 8811 	msr	BASEPRI, r3
 8014af8:	f3bf 8f6f 	isb	sy
 8014afc:	f3bf 8f4f 	dsb	sy
 8014b00:	617b      	str	r3, [r7, #20]
 8014b02:	e7fe      	b.n	8014b02 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b06:	699a      	ldr	r2, [r3, #24]
 8014b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b0a:	18d1      	adds	r1, r2, r3
 8014b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b12:	f7ff ff2b 	bl	801496c <prvInsertTimerInActiveList>
					break;
 8014b16:	e009      	b.n	8014b2c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d104      	bne.n	8014b2c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8014b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b24:	f7fc fde4 	bl	80116f0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014b28:	e000      	b.n	8014b2c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014b2a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014b2c:	4b07      	ldr	r3, [pc, #28]	; (8014b4c <prvProcessReceivedCommands+0x15c>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	1d39      	adds	r1, r7, #4
 8014b32:	2200      	movs	r2, #0
 8014b34:	4618      	mov	r0, r3
 8014b36:	f7fd fe2d 	bl	8012794 <xQueueReceive>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	f47f af5b 	bne.w	80149f8 <prvProcessReceivedCommands+0x8>
	}
}
 8014b42:	bf00      	nop
 8014b44:	3730      	adds	r7, #48	; 0x30
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}
 8014b4a:	bf00      	nop
 8014b4c:	200274cc 	.word	0x200274cc

08014b50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b088      	sub	sp, #32
 8014b54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014b56:	e044      	b.n	8014be2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014b58:	4b2b      	ldr	r3, [pc, #172]	; (8014c08 <prvSwitchTimerLists+0xb8>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	68db      	ldr	r3, [r3, #12]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014b62:	4b29      	ldr	r3, [pc, #164]	; (8014c08 <prvSwitchTimerLists+0xb8>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	68db      	ldr	r3, [r3, #12]
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	3304      	adds	r3, #4
 8014b70:	4618      	mov	r0, r3
 8014b72:	f7fc ff5d 	bl	8011a30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b7a:	68f8      	ldr	r0, [r7, #12]
 8014b7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	69db      	ldr	r3, [r3, #28]
 8014b82:	2b01      	cmp	r3, #1
 8014b84:	d12d      	bne.n	8014be2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	699b      	ldr	r3, [r3, #24]
 8014b8a:	693a      	ldr	r2, [r7, #16]
 8014b8c:	4413      	add	r3, r2
 8014b8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014b90:	68ba      	ldr	r2, [r7, #8]
 8014b92:	693b      	ldr	r3, [r7, #16]
 8014b94:	429a      	cmp	r2, r3
 8014b96:	d90e      	bls.n	8014bb6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	68ba      	ldr	r2, [r7, #8]
 8014b9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	68fa      	ldr	r2, [r7, #12]
 8014ba2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014ba4:	4b18      	ldr	r3, [pc, #96]	; (8014c08 <prvSwitchTimerLists+0xb8>)
 8014ba6:	681a      	ldr	r2, [r3, #0]
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	3304      	adds	r3, #4
 8014bac:	4619      	mov	r1, r3
 8014bae:	4610      	mov	r0, r2
 8014bb0:	f7fc ff05 	bl	80119be <vListInsert>
 8014bb4:	e015      	b.n	8014be2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	9300      	str	r3, [sp, #0]
 8014bba:	2300      	movs	r3, #0
 8014bbc:	693a      	ldr	r2, [r7, #16]
 8014bbe:	2100      	movs	r1, #0
 8014bc0:	68f8      	ldr	r0, [r7, #12]
 8014bc2:	f7ff fda3 	bl	801470c <xTimerGenericCommand>
 8014bc6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d109      	bne.n	8014be2 <prvSwitchTimerLists+0x92>
 8014bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd2:	f383 8811 	msr	BASEPRI, r3
 8014bd6:	f3bf 8f6f 	isb	sy
 8014bda:	f3bf 8f4f 	dsb	sy
 8014bde:	603b      	str	r3, [r7, #0]
 8014be0:	e7fe      	b.n	8014be0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014be2:	4b09      	ldr	r3, [pc, #36]	; (8014c08 <prvSwitchTimerLists+0xb8>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d1b5      	bne.n	8014b58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014bec:	4b06      	ldr	r3, [pc, #24]	; (8014c08 <prvSwitchTimerLists+0xb8>)
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014bf2:	4b06      	ldr	r3, [pc, #24]	; (8014c0c <prvSwitchTimerLists+0xbc>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	4a04      	ldr	r2, [pc, #16]	; (8014c08 <prvSwitchTimerLists+0xb8>)
 8014bf8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014bfa:	4a04      	ldr	r2, [pc, #16]	; (8014c0c <prvSwitchTimerLists+0xbc>)
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	6013      	str	r3, [r2, #0]
}
 8014c00:	bf00      	nop
 8014c02:	3718      	adds	r7, #24
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}
 8014c08:	200274c4 	.word	0x200274c4
 8014c0c:	200274c8 	.word	0x200274c8

08014c10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014c16:	f7fd f859 	bl	8011ccc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014c1a:	4b15      	ldr	r3, [pc, #84]	; (8014c70 <prvCheckForValidListAndQueue+0x60>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d120      	bne.n	8014c64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014c22:	4814      	ldr	r0, [pc, #80]	; (8014c74 <prvCheckForValidListAndQueue+0x64>)
 8014c24:	f7fc fe7a 	bl	801191c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014c28:	4813      	ldr	r0, [pc, #76]	; (8014c78 <prvCheckForValidListAndQueue+0x68>)
 8014c2a:	f7fc fe77 	bl	801191c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014c2e:	4b13      	ldr	r3, [pc, #76]	; (8014c7c <prvCheckForValidListAndQueue+0x6c>)
 8014c30:	4a10      	ldr	r2, [pc, #64]	; (8014c74 <prvCheckForValidListAndQueue+0x64>)
 8014c32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014c34:	4b12      	ldr	r3, [pc, #72]	; (8014c80 <prvCheckForValidListAndQueue+0x70>)
 8014c36:	4a10      	ldr	r2, [pc, #64]	; (8014c78 <prvCheckForValidListAndQueue+0x68>)
 8014c38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	9300      	str	r3, [sp, #0]
 8014c3e:	4b11      	ldr	r3, [pc, #68]	; (8014c84 <prvCheckForValidListAndQueue+0x74>)
 8014c40:	4a11      	ldr	r2, [pc, #68]	; (8014c88 <prvCheckForValidListAndQueue+0x78>)
 8014c42:	2110      	movs	r1, #16
 8014c44:	200a      	movs	r0, #10
 8014c46:	f7fd f99f 	bl	8011f88 <xQueueGenericCreateStatic>
 8014c4a:	4602      	mov	r2, r0
 8014c4c:	4b08      	ldr	r3, [pc, #32]	; (8014c70 <prvCheckForValidListAndQueue+0x60>)
 8014c4e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014c50:	4b07      	ldr	r3, [pc, #28]	; (8014c70 <prvCheckForValidListAndQueue+0x60>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d005      	beq.n	8014c64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014c58:	4b05      	ldr	r3, [pc, #20]	; (8014c70 <prvCheckForValidListAndQueue+0x60>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	490b      	ldr	r1, [pc, #44]	; (8014c8c <prvCheckForValidListAndQueue+0x7c>)
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7fe f944 	bl	8012eec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014c64:	f7fd f860 	bl	8011d28 <vPortExitCritical>
}
 8014c68:	bf00      	nop
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	200274cc 	.word	0x200274cc
 8014c74:	2002749c 	.word	0x2002749c
 8014c78:	200274b0 	.word	0x200274b0
 8014c7c:	200274c4 	.word	0x200274c4
 8014c80:	200274c8 	.word	0x200274c8
 8014c84:	20027578 	.word	0x20027578
 8014c88:	200274d8 	.word	0x200274d8
 8014c8c:	0801ba28 	.word	0x0801ba28

08014c90 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b086      	sub	sp, #24
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d109      	bne.n	8014cb6 <xTimerIsTimerActive+0x26>
 8014ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ca6:	f383 8811 	msr	BASEPRI, r3
 8014caa:	f3bf 8f6f 	isb	sy
 8014cae:	f3bf 8f4f 	dsb	sy
 8014cb2:	60fb      	str	r3, [r7, #12]
 8014cb4:	e7fe      	b.n	8014cb4 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8014cb6:	f7fd f809 	bl	8011ccc <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8014cba:	697b      	ldr	r3, [r7, #20]
 8014cbc:	695b      	ldr	r3, [r3, #20]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	bf14      	ite	ne
 8014cc2:	2301      	movne	r3, #1
 8014cc4:	2300      	moveq	r3, #0
 8014cc6:	b2db      	uxtb	r3, r3
 8014cc8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8014cca:	f7fd f82d 	bl	8011d28 <vPortExitCritical>

	return xTimerIsInActiveList;
 8014cce:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3718      	adds	r7, #24
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b086      	sub	sp, #24
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d109      	bne.n	8014cfe <pvTimerGetTimerID+0x26>
 8014cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cee:	f383 8811 	msr	BASEPRI, r3
 8014cf2:	f3bf 8f6f 	isb	sy
 8014cf6:	f3bf 8f4f 	dsb	sy
 8014cfa:	60fb      	str	r3, [r7, #12]
 8014cfc:	e7fe      	b.n	8014cfc <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8014cfe:	f7fc ffe5 	bl	8011ccc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	6a1b      	ldr	r3, [r3, #32]
 8014d06:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8014d08:	f7fd f80e 	bl	8011d28 <vPortExitCritical>

	return pvReturn;
 8014d0c:	693b      	ldr	r3, [r7, #16]
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	3718      	adds	r7, #24
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd80      	pop	{r7, pc}

08014d16 <otChildSupervisionSetInterval>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetInterval(otInstance *aInstance, uint16_t aInterval)
{
 8014d16:	b580      	push	{r7, lr}
 8014d18:	b084      	sub	sp, #16
 8014d1a:	af00      	add	r7, sp, #0
 8014d1c:	6078      	str	r0, [r7, #4]
 8014d1e:	460b      	mov	r3, r1
 8014d20:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014d22:	f004 f851 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014d26:	f003 ffed 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8014d2a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_INTERVAL;
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8014d34:	701a      	strb	r2, [r3, #0]
 8014d36:	2200      	movs	r2, #0
 8014d38:	f042 0201 	orr.w	r2, r2, #1
 8014d3c:	705a      	strb	r2, [r3, #1]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	709a      	strb	r2, [r3, #2]
 8014d42:	2200      	movs	r2, #0
 8014d44:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	2200      	movs	r2, #0
 8014d4a:	f042 0201 	orr.w	r2, r2, #1
 8014d4e:	711a      	strb	r2, [r3, #4]
 8014d50:	2200      	movs	r2, #0
 8014d52:	715a      	strb	r2, [r3, #5]
 8014d54:	2200      	movs	r2, #0
 8014d56:	719a      	strb	r2, [r3, #6]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aInterval;
 8014d5c:	887a      	ldrh	r2, [r7, #2]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014d62:	f003 fff3 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014d66:	f003 ffd9 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014d6a:	60f8      	str	r0, [r7, #12]
}
 8014d6c:	bf00      	nop
 8014d6e:	3710      	adds	r7, #16
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <otChildSupervisionSetCheckTimeout>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetCheckTimeout(otInstance *aInstance, uint16_t aTimeout)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b084      	sub	sp, #16
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	460b      	mov	r3, r1
 8014d7e:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014d80:	f004 f822 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014d84:	f003 ffbe 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8014d88:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_CHECK_TIMEOUT;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8014d92:	701a      	strb	r2, [r3, #0]
 8014d94:	2200      	movs	r2, #0
 8014d96:	f042 0201 	orr.w	r2, r2, #1
 8014d9a:	705a      	strb	r2, [r3, #1]
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	709a      	strb	r2, [r3, #2]
 8014da0:	2200      	movs	r2, #0
 8014da2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	2200      	movs	r2, #0
 8014da8:	f042 0201 	orr.w	r2, r2, #1
 8014dac:	711a      	strb	r2, [r3, #4]
 8014dae:	2200      	movs	r2, #0
 8014db0:	715a      	strb	r2, [r3, #5]
 8014db2:	2200      	movs	r2, #0
 8014db4:	719a      	strb	r2, [r3, #6]
 8014db6:	2200      	movs	r2, #0
 8014db8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aTimeout;
 8014dba:	887a      	ldrh	r2, [r7, #2]
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014dc0:	f003 ffc4 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014dc4:	f003 ffaa 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014dc8:	60f8      	str	r0, [r7, #12]
}
 8014dca:	bf00      	nop
 8014dcc:	3710      	adds	r7, #16
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}

08014dd2 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8014dd2:	b580      	push	{r7, lr}
 8014dd4:	b084      	sub	sp, #16
 8014dd6:	af00      	add	r7, sp, #0
 8014dd8:	6078      	str	r0, [r7, #4]
 8014dda:	460b      	mov	r3, r1
 8014ddc:	70fb      	strb	r3, [r7, #3]
 8014dde:	4613      	mov	r3, r2
 8014de0:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014de2:	f003 fff1 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014de6:	f003 ff8d 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8014dea:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	2200      	movs	r2, #0
 8014df0:	f062 0260 	orn	r2, r2, #96	; 0x60
 8014df4:	701a      	strb	r2, [r3, #0]
 8014df6:	2200      	movs	r2, #0
 8014df8:	705a      	strb	r2, [r3, #1]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	709a      	strb	r2, [r3, #2]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	2200      	movs	r2, #0
 8014e06:	f042 0203 	orr.w	r2, r2, #3
 8014e0a:	711a      	strb	r2, [r3, #4]
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	715a      	strb	r2, [r3, #5]
 8014e10:	2200      	movs	r2, #0
 8014e12:	719a      	strb	r2, [r3, #6]
 8014e14:	2200      	movs	r2, #0
 8014e16:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014e18:	687a      	ldr	r2, [r7, #4]
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 8014e1e:	78fa      	ldrb	r2, [r7, #3]
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8014e24:	78ba      	ldrb	r2, [r7, #2]
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8014e2a:	f003 ff8f 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014e2e:	f003 ff75 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014e32:	60f8      	str	r0, [r7, #12]
}
 8014e34:	bf00      	nop
 8014e36:	3710      	adds	r7, #16
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}

08014e3c <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b086      	sub	sp, #24
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	60f8      	str	r0, [r7, #12]
 8014e44:	60b9      	str	r1, [r7, #8]
 8014e46:	4613      	mov	r3, r2
 8014e48:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 8014e4a:	f003 ffbd 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014e4e:	f003 ff59 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8014e52:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	2200      	movs	r2, #0
 8014e58:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8014e5c:	701a      	strb	r2, [r3, #0]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	705a      	strb	r2, [r3, #1]
 8014e62:	2200      	movs	r2, #0
 8014e64:	709a      	strb	r2, [r3, #2]
 8014e66:	2200      	movs	r2, #0
 8014e68:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	f042 0203 	orr.w	r2, r2, #3
 8014e72:	711a      	strb	r2, [r3, #4]
 8014e74:	2200      	movs	r2, #0
 8014e76:	715a      	strb	r2, [r3, #5]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	719a      	strb	r2, [r3, #6]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014e80:	68fa      	ldr	r2, [r7, #12]
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8014e86:	68ba      	ldr	r2, [r7, #8]
 8014e88:	697b      	ldr	r3, [r7, #20]
 8014e8a:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 8014e8c:	79fa      	ldrb	r2, [r7, #7]
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8014e92:	f003 ff5b 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014e96:	f003 ff41 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014e9a:	6178      	str	r0, [r7, #20]
}
 8014e9c:	bf00      	nop
 8014e9e:	3718      	adds	r7, #24
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}

08014ea4 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	460b      	mov	r3, r1
 8014eae:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8014eb0:	f003 ff8a 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014eb4:	f003 ff26 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8014eb8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8014ec2:	701a      	strb	r2, [r3, #0]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	705a      	strb	r2, [r3, #1]
 8014ec8:	2200      	movs	r2, #0
 8014eca:	709a      	strb	r2, [r3, #2]
 8014ecc:	2200      	movs	r2, #0
 8014ece:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	f042 0202 	orr.w	r2, r2, #2
 8014ed8:	711a      	strb	r2, [r3, #4]
 8014eda:	2200      	movs	r2, #0
 8014edc:	715a      	strb	r2, [r3, #5]
 8014ede:	2200      	movs	r2, #0
 8014ee0:	719a      	strb	r2, [r3, #6]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8014eec:	78fa      	ldrb	r2, [r7, #3]
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014ef2:	f003 ff2b 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014ef6:	f003 ff11 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014efa:	60f8      	str	r0, [r7, #12]
}
 8014efc:	bf00      	nop
 8014efe:	3710      	adds	r7, #16
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}

08014f04 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b084      	sub	sp, #16
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
 8014f0c:	460b      	mov	r3, r1
 8014f0e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8014f10:	f003 ff5a 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014f14:	f003 fef6 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8014f18:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	f062 025d 	orn	r2, r2, #93	; 0x5d
 8014f22:	701a      	strb	r2, [r3, #0]
 8014f24:	2200      	movs	r2, #0
 8014f26:	705a      	strb	r2, [r3, #1]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	709a      	strb	r2, [r3, #2]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	2200      	movs	r2, #0
 8014f34:	f042 0202 	orr.w	r2, r2, #2
 8014f38:	711a      	strb	r2, [r3, #4]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	715a      	strb	r2, [r3, #5]
 8014f3e:	2200      	movs	r2, #0
 8014f40:	719a      	strb	r2, [r3, #6]
 8014f42:	2200      	movs	r2, #0
 8014f44:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014f46:	687a      	ldr	r2, [r7, #4]
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 8014f4c:	78fa      	ldrb	r2, [r7, #3]
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014f52:	f003 fefb 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014f56:	f003 fee1 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014f5a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	689b      	ldr	r3, [r3, #8]
 8014f60:	b2db      	uxtb	r3, r3
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3710      	adds	r7, #16
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}

08014f6a <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 8014f6a:	b580      	push	{r7, lr}
 8014f6c:	b084      	sub	sp, #16
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	6078      	str	r0, [r7, #4]
 8014f72:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8014f74:	f003 ff28 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014f78:	f003 fec4 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8014f7c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	2200      	movs	r2, #0
 8014f82:	f062 0250 	orn	r2, r2, #80	; 0x50
 8014f86:	701a      	strb	r2, [r3, #0]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	705a      	strb	r2, [r3, #1]
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	709a      	strb	r2, [r3, #2]
 8014f90:	2200      	movs	r2, #0
 8014f92:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	2200      	movs	r2, #0
 8014f98:	f042 0202 	orr.w	r2, r2, #2
 8014f9c:	711a      	strb	r2, [r3, #4]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	715a      	strb	r2, [r3, #5]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	719a      	strb	r2, [r3, #6]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014faa:	687a      	ldr	r2, [r7, #4]
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8014fb0:	683a      	ldr	r2, [r7, #0]
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014fb6:	f003 fec9 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014fba:	f003 feaf 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014fbe:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	689b      	ldr	r3, [r3, #8]
 8014fc4:	b2db      	uxtb	r3, r3
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	3710      	adds	r7, #16
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}

08014fce <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8014fce:	b580      	push	{r7, lr}
 8014fd0:	b084      	sub	sp, #16
 8014fd2:	af00      	add	r7, sp, #0
 8014fd4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014fd6:	f003 fef7 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014fda:	f003 fe93 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8014fde:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8014fe8:	701a      	strb	r2, [r3, #0]
 8014fea:	2200      	movs	r2, #0
 8014fec:	705a      	strb	r2, [r3, #1]
 8014fee:	2200      	movs	r2, #0
 8014ff0:	709a      	strb	r2, [r3, #2]
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	f042 0201 	orr.w	r2, r2, #1
 8014ffe:	711a      	strb	r2, [r3, #4]
 8015000:	2200      	movs	r2, #0
 8015002:	715a      	strb	r2, [r3, #5]
 8015004:	2200      	movs	r2, #0
 8015006:	719a      	strb	r2, [r3, #6]
 8015008:	2200      	movs	r2, #0
 801500a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801500c:	687a      	ldr	r2, [r7, #4]
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8015012:	f003 fe9b 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015016:	f003 fe81 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 801501a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	689b      	ldr	r3, [r3, #8]
 8015020:	b2db      	uxtb	r3, r3
}
 8015022:	4618      	mov	r0, r3
 8015024:	3710      	adds	r7, #16
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}

0801502a <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 801502a:	b580      	push	{r7, lr}
 801502c:	b084      	sub	sp, #16
 801502e:	af00      	add	r7, sp, #0
 8015030:	6078      	str	r0, [r7, #4]
 8015032:	460b      	mov	r3, r1
 8015034:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8015036:	f003 fec7 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801503a:	f003 fe63 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 801503e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	2200      	movs	r2, #0
 8015044:	f062 0256 	orn	r2, r2, #86	; 0x56
 8015048:	701a      	strb	r2, [r3, #0]
 801504a:	2200      	movs	r2, #0
 801504c:	705a      	strb	r2, [r3, #1]
 801504e:	2200      	movs	r2, #0
 8015050:	709a      	strb	r2, [r3, #2]
 8015052:	2200      	movs	r2, #0
 8015054:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	2200      	movs	r2, #0
 801505a:	f042 0202 	orr.w	r2, r2, #2
 801505e:	711a      	strb	r2, [r3, #4]
 8015060:	2200      	movs	r2, #0
 8015062:	715a      	strb	r2, [r3, #5]
 8015064:	2200      	movs	r2, #0
 8015066:	719a      	strb	r2, [r3, #6]
 8015068:	2200      	movs	r2, #0
 801506a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801506c:	687a      	ldr	r2, [r7, #4]
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8015072:	887a      	ldrh	r2, [r7, #2]
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8015078:	f003 fe68 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801507c:	f003 fe4e 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015080:	60f8      	str	r0, [r7, #12]
}
 8015082:	bf00      	nop
 8015084:	3710      	adds	r7, #16
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}

0801508a <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 801508a:	b580      	push	{r7, lr}
 801508c:	b084      	sub	sp, #16
 801508e:	af00      	add	r7, sp, #0
 8015090:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8015092:	f003 fe99 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015096:	f003 fe35 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 801509a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	2200      	movs	r2, #0
 80150a0:	f062 0261 	orn	r2, r2, #97	; 0x61
 80150a4:	701a      	strb	r2, [r3, #0]
 80150a6:	2200      	movs	r2, #0
 80150a8:	705a      	strb	r2, [r3, #1]
 80150aa:	2200      	movs	r2, #0
 80150ac:	709a      	strb	r2, [r3, #2]
 80150ae:	2200      	movs	r2, #0
 80150b0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	2200      	movs	r2, #0
 80150b6:	f042 0201 	orr.w	r2, r2, #1
 80150ba:	711a      	strb	r2, [r3, #4]
 80150bc:	2200      	movs	r2, #0
 80150be:	715a      	strb	r2, [r3, #5]
 80150c0:	2200      	movs	r2, #0
 80150c2:	719a      	strb	r2, [r3, #6]
 80150c4:	2200      	movs	r2, #0
 80150c6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80150c8:	687a      	ldr	r2, [r7, #4]
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80150ce:	f003 fe3d 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80150d2:	f003 fe23 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 80150d6:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	689b      	ldr	r3, [r3, #8]
 80150dc:	b2db      	uxtb	r3, r3
}
 80150de:	4618      	mov	r0, r3
 80150e0:	3710      	adds	r7, #16
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}

080150e6 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 80150e6:	b580      	push	{r7, lr}
 80150e8:	b084      	sub	sp, #16
 80150ea:	af00      	add	r7, sp, #0
 80150ec:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80150ee:	f003 fe6b 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80150f2:	f003 fe07 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80150f6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	2200      	movs	r2, #0
 80150fc:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8015100:	701a      	strb	r2, [r3, #0]
 8015102:	2200      	movs	r2, #0
 8015104:	705a      	strb	r2, [r3, #1]
 8015106:	2200      	movs	r2, #0
 8015108:	709a      	strb	r2, [r3, #2]
 801510a:	2200      	movs	r2, #0
 801510c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	2200      	movs	r2, #0
 8015112:	f042 0201 	orr.w	r2, r2, #1
 8015116:	711a      	strb	r2, [r3, #4]
 8015118:	2200      	movs	r2, #0
 801511a:	715a      	strb	r2, [r3, #5]
 801511c:	2200      	movs	r2, #0
 801511e:	719a      	strb	r2, [r3, #6]
 8015120:	2200      	movs	r2, #0
 8015122:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8015124:	687a      	ldr	r2, [r7, #4]
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801512a:	f003 fe0f 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801512e:	f003 fdf5 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015132:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	689b      	ldr	r3, [r3, #8]
 8015138:	b2db      	uxtb	r3, r3
}
 801513a:	4618      	mov	r0, r3
 801513c:	3710      	adds	r7, #16
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}

08015142 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8015142:	b580      	push	{r7, lr}
 8015144:	b084      	sub	sp, #16
 8015146:	af00      	add	r7, sp, #0
 8015148:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801514a:	f003 fe3d 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801514e:	f003 fdd9 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8015152:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	2200      	movs	r2, #0
 8015158:	f062 0255 	orn	r2, r2, #85	; 0x55
 801515c:	701a      	strb	r2, [r3, #0]
 801515e:	2200      	movs	r2, #0
 8015160:	705a      	strb	r2, [r3, #1]
 8015162:	2200      	movs	r2, #0
 8015164:	709a      	strb	r2, [r3, #2]
 8015166:	2200      	movs	r2, #0
 8015168:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2200      	movs	r2, #0
 801516e:	f042 0201 	orr.w	r2, r2, #1
 8015172:	711a      	strb	r2, [r3, #4]
 8015174:	2200      	movs	r2, #0
 8015176:	715a      	strb	r2, [r3, #5]
 8015178:	2200      	movs	r2, #0
 801517a:	719a      	strb	r2, [r3, #6]
 801517c:	2200      	movs	r2, #0
 801517e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8015180:	687a      	ldr	r2, [r7, #4]
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8015186:	f003 fde1 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801518a:	f003 fdc7 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 801518e:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	689b      	ldr	r3, [r3, #8]
 8015194:	b29b      	uxth	r3, r3
}
 8015196:	4618      	mov	r0, r3
 8015198:	3710      	adds	r7, #16
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}

0801519e <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 801519e:	b580      	push	{r7, lr}
 80151a0:	b084      	sub	sp, #16
 80151a2:	af00      	add	r7, sp, #0
 80151a4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80151a6:	f003 fe0f 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80151aa:	f003 fdab 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80151ae:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	2200      	movs	r2, #0
 80151b4:	f062 0254 	orn	r2, r2, #84	; 0x54
 80151b8:	701a      	strb	r2, [r3, #0]
 80151ba:	2200      	movs	r2, #0
 80151bc:	705a      	strb	r2, [r3, #1]
 80151be:	2200      	movs	r2, #0
 80151c0:	709a      	strb	r2, [r3, #2]
 80151c2:	2200      	movs	r2, #0
 80151c4:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	2200      	movs	r2, #0
 80151ca:	f042 0201 	orr.w	r2, r2, #1
 80151ce:	711a      	strb	r2, [r3, #4]
 80151d0:	2200      	movs	r2, #0
 80151d2:	715a      	strb	r2, [r3, #5]
 80151d4:	2200      	movs	r2, #0
 80151d6:	719a      	strb	r2, [r3, #6]
 80151d8:	2200      	movs	r2, #0
 80151da:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 80151dc:	687a      	ldr	r2, [r7, #4]
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80151e2:	f003 fdb3 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80151e6:	f003 fd99 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 80151ea:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	689b      	ldr	r3, [r3, #8]
 80151f0:	b2db      	uxtb	r3, r3
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	3710      	adds	r7, #16
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}

080151fa <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 80151fa:	b580      	push	{r7, lr}
 80151fc:	b084      	sub	sp, #16
 80151fe:	af00      	add	r7, sp, #0
 8015200:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8015202:	f003 fde1 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015206:	f003 fd7d 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 801520a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	2200      	movs	r2, #0
 8015210:	f062 0253 	orn	r2, r2, #83	; 0x53
 8015214:	701a      	strb	r2, [r3, #0]
 8015216:	2200      	movs	r2, #0
 8015218:	705a      	strb	r2, [r3, #1]
 801521a:	2200      	movs	r2, #0
 801521c:	709a      	strb	r2, [r3, #2]
 801521e:	2200      	movs	r2, #0
 8015220:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	2200      	movs	r2, #0
 8015226:	f042 0201 	orr.w	r2, r2, #1
 801522a:	711a      	strb	r2, [r3, #4]
 801522c:	2200      	movs	r2, #0
 801522e:	715a      	strb	r2, [r3, #5]
 8015230:	2200      	movs	r2, #0
 8015232:	719a      	strb	r2, [r3, #6]
 8015234:	2200      	movs	r2, #0
 8015236:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8015238:	687a      	ldr	r2, [r7, #4]
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801523e:	f003 fd85 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015242:	f003 fd6b 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015246:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	689b      	ldr	r3, [r3, #8]
}
 801524c:	4618      	mov	r0, r3
 801524e:	3710      	adds	r7, #16
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}

08015254 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b084      	sub	sp, #16
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 801525e:	f003 fdb3 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015262:	f003 fd4f 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8015266:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	2200      	movs	r2, #0
 801526c:	f062 0259 	orn	r2, r2, #89	; 0x59
 8015270:	701a      	strb	r2, [r3, #0]
 8015272:	2200      	movs	r2, #0
 8015274:	705a      	strb	r2, [r3, #1]
 8015276:	2200      	movs	r2, #0
 8015278:	709a      	strb	r2, [r3, #2]
 801527a:	2200      	movs	r2, #0
 801527c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	2200      	movs	r2, #0
 8015282:	f042 0201 	orr.w	r2, r2, #1
 8015286:	711a      	strb	r2, [r3, #4]
 8015288:	2200      	movs	r2, #0
 801528a:	715a      	strb	r2, [r3, #5]
 801528c:	2200      	movs	r2, #0
 801528e:	719a      	strb	r2, [r3, #6]
 8015290:	2200      	movs	r2, #0
 8015292:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8015294:	683a      	ldr	r2, [r7, #0]
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801529a:	f003 fd57 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801529e:	f003 fd3d 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 80152a2:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	689b      	ldr	r3, [r3, #8]

}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3710      	adds	r7, #16
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}

080152b0 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b086      	sub	sp, #24
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	60f8      	str	r0, [r7, #12]
 80152b8:	60b9      	str	r1, [r7, #8]
 80152ba:	607a      	str	r2, [r7, #4]
 80152bc:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 80152be:	f003 fd83 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80152c2:	f003 fd1f 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80152c6:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	2200      	movs	r2, #0
 80152cc:	f062 0258 	orn	r2, r2, #88	; 0x58
 80152d0:	701a      	strb	r2, [r3, #0]
 80152d2:	2200      	movs	r2, #0
 80152d4:	705a      	strb	r2, [r3, #1]
 80152d6:	2200      	movs	r2, #0
 80152d8:	709a      	strb	r2, [r3, #2]
 80152da:	2200      	movs	r2, #0
 80152dc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	2200      	movs	r2, #0
 80152e2:	f042 0203 	orr.w	r2, r2, #3
 80152e6:	711a      	strb	r2, [r3, #4]
 80152e8:	2200      	movs	r2, #0
 80152ea:	715a      	strb	r2, [r3, #5]
 80152ec:	2200      	movs	r2, #0
 80152ee:	719a      	strb	r2, [r3, #6]
 80152f0:	2200      	movs	r2, #0
 80152f2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80152f4:	68ba      	ldr	r2, [r7, #8]
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8015300:	683a      	ldr	r2, [r7, #0]
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8015306:	6a3a      	ldr	r2, [r7, #32]
 8015308:	697b      	ldr	r3, [r7, #20]
 801530a:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 801530c:	f003 fd1e 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015310:	f003 fd04 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015314:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8015316:	697b      	ldr	r3, [r7, #20]
 8015318:	689b      	ldr	r3, [r3, #8]
 801531a:	b2db      	uxtb	r3, r3
}
 801531c:	4618      	mov	r0, r3
 801531e:	3718      	adds	r7, #24
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b084      	sub	sp, #16
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	460b      	mov	r3, r1
 801532e:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8015330:	f003 fd4a 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015334:	f003 fce6 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8015338:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	2200      	movs	r2, #0
 801533e:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8015342:	701a      	strb	r2, [r3, #0]
 8015344:	2200      	movs	r2, #0
 8015346:	705a      	strb	r2, [r3, #1]
 8015348:	2200      	movs	r2, #0
 801534a:	709a      	strb	r2, [r3, #2]
 801534c:	2200      	movs	r2, #0
 801534e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	2200      	movs	r2, #0
 8015354:	f042 0201 	orr.w	r2, r2, #1
 8015358:	711a      	strb	r2, [r3, #4]
 801535a:	2200      	movs	r2, #0
 801535c:	715a      	strb	r2, [r3, #5]
 801535e:	2200      	movs	r2, #0
 8015360:	719a      	strb	r2, [r3, #6]
 8015362:	2200      	movs	r2, #0
 8015364:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 8015366:	887a      	ldrh	r2, [r7, #2]
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801536c:	f003 fcee 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015370:	f003 fcd4 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015374:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	689b      	ldr	r3, [r3, #8]
 801537a:	b2db      	uxtb	r3, r3
}
 801537c:	4618      	mov	r0, r3
 801537e:	3710      	adds	r7, #16
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}

08015384 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b084      	sub	sp, #16
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 801538e:	f003 fd1b 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015392:	f003 fcb7 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8015396:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	2200      	movs	r2, #0
 801539c:	f062 0249 	orn	r2, r2, #73	; 0x49
 80153a0:	701a      	strb	r2, [r3, #0]
 80153a2:	2200      	movs	r2, #0
 80153a4:	705a      	strb	r2, [r3, #1]
 80153a6:	2200      	movs	r2, #0
 80153a8:	709a      	strb	r2, [r3, #2]
 80153aa:	2200      	movs	r2, #0
 80153ac:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	2200      	movs	r2, #0
 80153b2:	f042 0201 	orr.w	r2, r2, #1
 80153b6:	711a      	strb	r2, [r3, #4]
 80153b8:	2200      	movs	r2, #0
 80153ba:	715a      	strb	r2, [r3, #5]
 80153bc:	2200      	movs	r2, #0
 80153be:	719a      	strb	r2, [r3, #6]
 80153c0:	2200      	movs	r2, #0
 80153c2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 80153c4:	683a      	ldr	r2, [r7, #0]
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80153ca:	f003 fcbf 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80153ce:	f003 fca5 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 80153d2:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	689b      	ldr	r3, [r3, #8]
 80153d8:	b2db      	uxtb	r3, r3
}
 80153da:	4618      	mov	r0, r3
 80153dc:	3710      	adds	r7, #16
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}

080153e2 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 80153e2:	b580      	push	{r7, lr}
 80153e4:	b086      	sub	sp, #24
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	60f8      	str	r0, [r7, #12]
 80153ea:	60b9      	str	r1, [r7, #8]
 80153ec:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 80153ee:	f003 fceb 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80153f2:	f003 fc87 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80153f6:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	2200      	movs	r2, #0
 80153fc:	f062 0257 	orn	r2, r2, #87	; 0x57
 8015400:	701a      	strb	r2, [r3, #0]
 8015402:	2200      	movs	r2, #0
 8015404:	705a      	strb	r2, [r3, #1]
 8015406:	2200      	movs	r2, #0
 8015408:	709a      	strb	r2, [r3, #2]
 801540a:	2200      	movs	r2, #0
 801540c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	2200      	movs	r2, #0
 8015412:	f042 0202 	orr.w	r2, r2, #2
 8015416:	711a      	strb	r2, [r3, #4]
 8015418:	2200      	movs	r2, #0
 801541a:	715a      	strb	r2, [r3, #5]
 801541c:	2200      	movs	r2, #0
 801541e:	719a      	strb	r2, [r3, #6]
 8015420:	2200      	movs	r2, #0
 8015422:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015424:	68ba      	ldr	r2, [r7, #8]
 8015426:	697b      	ldr	r3, [r7, #20]
 8015428:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 801542a:	687a      	ldr	r2, [r7, #4]
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8015430:	f003 fc8c 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015434:	f003 fc72 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015438:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	689b      	ldr	r3, [r3, #8]
 801543e:	b2db      	uxtb	r3, r3
}
 8015440:	4618      	mov	r0, r3
 8015442:	3718      	adds	r7, #24
 8015444:	46bd      	mov	sp, r7
 8015446:	bd80      	pop	{r7, pc}

08015448 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b082      	sub	sp, #8
 801544c:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 801544e:	f003 fcbb 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015452:	f003 fc57 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8015456:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2200      	movs	r2, #0
 801545c:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8015460:	701a      	strb	r2, [r3, #0]
 8015462:	2200      	movs	r2, #0
 8015464:	705a      	strb	r2, [r3, #1]
 8015466:	2200      	movs	r2, #0
 8015468:	709a      	strb	r2, [r3, #2]
 801546a:	2200      	movs	r2, #0
 801546c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	2200      	movs	r2, #0
 8015472:	711a      	strb	r2, [r3, #4]
 8015474:	2200      	movs	r2, #0
 8015476:	715a      	strb	r2, [r3, #5]
 8015478:	2200      	movs	r2, #0
 801547a:	719a      	strb	r2, [r3, #6]
 801547c:	2200      	movs	r2, #0
 801547e:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8015480:	f003 fc64 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015484:	f003 fc4a 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015488:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	689b      	ldr	r3, [r3, #8]
}
 801548e:	4618      	mov	r0, r3
 8015490:	3708      	adds	r7, #8
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}

08015496 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8015496:	b580      	push	{r7, lr}
 8015498:	b084      	sub	sp, #16
 801549a:	af00      	add	r7, sp, #0
 801549c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801549e:	f003 fc93 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80154a2:	f003 fc2f 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80154a6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	2200      	movs	r2, #0
 80154ac:	f062 0269 	orn	r2, r2, #105	; 0x69
 80154b0:	701a      	strb	r2, [r3, #0]
 80154b2:	2200      	movs	r2, #0
 80154b4:	705a      	strb	r2, [r3, #1]
 80154b6:	2200      	movs	r2, #0
 80154b8:	709a      	strb	r2, [r3, #2]
 80154ba:	2200      	movs	r2, #0
 80154bc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2200      	movs	r2, #0
 80154c2:	711a      	strb	r2, [r3, #4]
 80154c4:	2200      	movs	r2, #0
 80154c6:	715a      	strb	r2, [r3, #5]
 80154c8:	2200      	movs	r2, #0
 80154ca:	719a      	strb	r2, [r3, #6]
 80154cc:	2200      	movs	r2, #0
 80154ce:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 80154d0:	f003 fc3c 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80154d4:	f003 fc22 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 80154d8:	60f8      	str	r0, [r7, #12]
}
 80154da:	bf00      	nop
 80154dc:	3710      	adds	r7, #16
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}
	...

080154e4 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b086      	sub	sp, #24
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	60b9      	str	r1, [r7, #8]
 80154ee:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 80154f0:	f003 fc6a 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 80154f4:	4a15      	ldr	r2, [pc, #84]	; (801554c <otSetStateChangedCallback+0x68>)
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80154fa:	f003 fc03 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80154fe:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	2200      	movs	r2, #0
 8015504:	f062 0268 	orn	r2, r2, #104	; 0x68
 8015508:	701a      	strb	r2, [r3, #0]
 801550a:	2200      	movs	r2, #0
 801550c:	705a      	strb	r2, [r3, #1]
 801550e:	2200      	movs	r2, #0
 8015510:	709a      	strb	r2, [r3, #2]
 8015512:	2200      	movs	r2, #0
 8015514:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	2200      	movs	r2, #0
 801551a:	f042 0201 	orr.w	r2, r2, #1
 801551e:	711a      	strb	r2, [r3, #4]
 8015520:	2200      	movs	r2, #0
 8015522:	715a      	strb	r2, [r3, #5]
 8015524:	2200      	movs	r2, #0
 8015526:	719a      	strb	r2, [r3, #6]
 8015528:	2200      	movs	r2, #0
 801552a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 801552c:	687a      	ldr	r2, [r7, #4]
 801552e:	697b      	ldr	r3, [r7, #20]
 8015530:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8015532:	f003 fc0b 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015536:	f003 fbf1 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 801553a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	689b      	ldr	r3, [r3, #8]
 8015540:	b2db      	uxtb	r3, r3
}
 8015542:	4618      	mov	r0, r3
 8015544:	3718      	adds	r7, #24
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}
 801554a:	bf00      	nop
 801554c:	200275c8 	.word	0x200275c8

08015550 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b084      	sub	sp, #16
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8015558:	f003 fc36 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801555c:	f003 fbd2 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8015560:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	2200      	movs	r2, #0
 8015566:	f062 0264 	orn	r2, r2, #100	; 0x64
 801556a:	701a      	strb	r2, [r3, #0]
 801556c:	2200      	movs	r2, #0
 801556e:	705a      	strb	r2, [r3, #1]
 8015570:	2200      	movs	r2, #0
 8015572:	709a      	strb	r2, [r3, #2]
 8015574:	2200      	movs	r2, #0
 8015576:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	2200      	movs	r2, #0
 801557c:	711a      	strb	r2, [r3, #4]
 801557e:	2200      	movs	r2, #0
 8015580:	715a      	strb	r2, [r3, #5]
 8015582:	2200      	movs	r2, #0
 8015584:	719a      	strb	r2, [r3, #6]
 8015586:	2200      	movs	r2, #0
 8015588:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 801558a:	f003 fbdf 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801558e:	f003 fbc5 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015592:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	689b      	ldr	r3, [r3, #8]
 8015598:	b2db      	uxtb	r3, r3
}
 801559a:	4618      	mov	r0, r3
 801559c:	3710      	adds	r7, #16
 801559e:	46bd      	mov	sp, r7
 80155a0:	bd80      	pop	{r7, pc}

080155a2 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 80155a2:	b580      	push	{r7, lr}
 80155a4:	b084      	sub	sp, #16
 80155a6:	af00      	add	r7, sp, #0
 80155a8:	6078      	str	r0, [r7, #4]
 80155aa:	460b      	mov	r3, r1
 80155ac:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80155ae:	f003 fc0b 	bl	8018dc8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80155b2:	f003 fba7 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80155b6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	2200      	movs	r2, #0
 80155bc:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80155c0:	701a      	strb	r2, [r3, #0]
 80155c2:	2200      	movs	r2, #0
 80155c4:	705a      	strb	r2, [r3, #1]
 80155c6:	2200      	movs	r2, #0
 80155c8:	709a      	strb	r2, [r3, #2]
 80155ca:	2200      	movs	r2, #0
 80155cc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	2200      	movs	r2, #0
 80155d2:	f042 0201 	orr.w	r2, r2, #1
 80155d6:	711a      	strb	r2, [r3, #4]
 80155d8:	2200      	movs	r2, #0
 80155da:	715a      	strb	r2, [r3, #5]
 80155dc:	2200      	movs	r2, #0
 80155de:	719a      	strb	r2, [r3, #6]
 80155e0:	2200      	movs	r2, #0
 80155e2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 80155e4:	78fa      	ldrb	r2, [r7, #3]
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80155ea:	f003 fbaf 	bl	8018d4c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80155ee:	f003 fb95 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 80155f2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	689b      	ldr	r3, [r3, #8]
 80155f8:	b2db      	uxtb	r3, r3
}
 80155fa:	4618      	mov	r0, r3
 80155fc:	3710      	adds	r7, #16
 80155fe:	46bd      	mov	sp, r7
 8015600:	bd80      	pop	{r7, pc}

08015602 <otIp6IsAddressEqual>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t *)p_ot_req->Data[0];
}

OTAPI bool OTCALL otIp6IsAddressEqual(const otIp6Address *a, const otIp6Address *b)
{
 8015602:	b580      	push	{r7, lr}
 8015604:	b084      	sub	sp, #16
 8015606:	af00      	add	r7, sp, #0
 8015608:	6078      	str	r0, [r7, #4]
 801560a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801560c:	f003 fbdc 	bl	8018dc8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015610:	f003 fb78 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8015614:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ADDRESS_EQUAL;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	2200      	movs	r2, #0
 801561a:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 801561e:	701a      	strb	r2, [r3, #0]
 8015620:	2200      	movs	r2, #0
 8015622:	705a      	strb	r2, [r3, #1]
 8015624:	2200      	movs	r2, #0
 8015626:	709a      	strb	r2, [r3, #2]
 8015628:	2200      	movs	r2, #0
 801562a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	2200      	movs	r2, #0
 8015630:	f042 0202 	orr.w	r2, r2, #2
 8015634:	711a      	strb	r2, [r3, #4]
 8015636:	2200      	movs	r2, #0
 8015638:	715a      	strb	r2, [r3, #5]
 801563a:	2200      	movs	r2, #0
 801563c:	719a      	strb	r2, [r3, #6]
 801563e:	2200      	movs	r2, #0
 8015640:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)a;
 8015642:	687a      	ldr	r2, [r7, #4]
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)b;
 8015648:	683a      	ldr	r2, [r7, #0]
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 801564e:	f003 fb7d 	bl	8018d4c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015652:	f003 fb63 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015656:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	689b      	ldr	r3, [r3, #8]
 801565c:	2b00      	cmp	r3, #0
 801565e:	bf14      	ite	ne
 8015660:	2301      	movne	r3, #1
 8015662:	2300      	moveq	r3, #0
 8015664:	b2db      	uxtb	r3, r3
}
 8015666:	4618      	mov	r0, r3
 8015668:	3710      	adds	r7, #16
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}

0801566e <otIp6AddressFromString>:

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 801566e:	b580      	push	{r7, lr}
 8015670:	b084      	sub	sp, #16
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]
 8015676:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8015678:	f003 fba6 	bl	8018dc8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801567c:	f003 fb42 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8015680:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	2200      	movs	r2, #0
 8015686:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 801568a:	701a      	strb	r2, [r3, #0]
 801568c:	2200      	movs	r2, #0
 801568e:	705a      	strb	r2, [r3, #1]
 8015690:	2200      	movs	r2, #0
 8015692:	709a      	strb	r2, [r3, #2]
 8015694:	2200      	movs	r2, #0
 8015696:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	2200      	movs	r2, #0
 801569c:	f042 0202 	orr.w	r2, r2, #2
 80156a0:	711a      	strb	r2, [r3, #4]
 80156a2:	2200      	movs	r2, #0
 80156a4:	715a      	strb	r2, [r3, #5]
 80156a6:	2200      	movs	r2, #0
 80156a8:	719a      	strb	r2, [r3, #6]
 80156aa:	2200      	movs	r2, #0
 80156ac:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 80156ae:	687a      	ldr	r2, [r7, #4]
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 80156b4:	683a      	ldr	r2, [r7, #0]
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80156ba:	f003 fb47 	bl	8018d4c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80156be:	f003 fb2d 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 80156c2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	689b      	ldr	r3, [r3, #8]
 80156c8:	b2db      	uxtb	r3, r3
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3710      	adds	r7, #16
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}

080156d2 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 80156d2:	b580      	push	{r7, lr}
 80156d4:	b084      	sub	sp, #16
 80156d6:	af00      	add	r7, sp, #0
 80156d8:	6078      	str	r0, [r7, #4]
 80156da:	460b      	mov	r3, r1
 80156dc:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80156de:	f003 fb73 	bl	8018dc8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80156e2:	f003 fb0f 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80156e6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	2200      	movs	r2, #0
 80156ec:	f042 0208 	orr.w	r2, r2, #8
 80156f0:	701a      	strb	r2, [r3, #0]
 80156f2:	2200      	movs	r2, #0
 80156f4:	705a      	strb	r2, [r3, #1]
 80156f6:	2200      	movs	r2, #0
 80156f8:	709a      	strb	r2, [r3, #2]
 80156fa:	2200      	movs	r2, #0
 80156fc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	2200      	movs	r2, #0
 8015702:	f042 0201 	orr.w	r2, r2, #1
 8015706:	711a      	strb	r2, [r3, #4]
 8015708:	2200      	movs	r2, #0
 801570a:	715a      	strb	r2, [r3, #5]
 801570c:	2200      	movs	r2, #0
 801570e:	719a      	strb	r2, [r3, #6]
 8015710:	2200      	movs	r2, #0
 8015712:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8015714:	78fa      	ldrb	r2, [r7, #3]
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801571a:	f003 fb17 	bl	8018d4c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801571e:	f003 fafd 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015722:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	689b      	ldr	r3, [r3, #8]
 8015728:	b2db      	uxtb	r3, r3
}
 801572a:	4618      	mov	r0, r3
 801572c:	3710      	adds	r7, #16
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}

08015732 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8015732:	b580      	push	{r7, lr}
 8015734:	b084      	sub	sp, #16
 8015736:	af00      	add	r7, sp, #0
 8015738:	6078      	str	r0, [r7, #4]
 801573a:	460b      	mov	r3, r1
 801573c:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 801573e:	f003 fb43 	bl	8018dc8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015742:	f003 fadf 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8015746:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	2200      	movs	r2, #0
 801574c:	f042 020f 	orr.w	r2, r2, #15
 8015750:	701a      	strb	r2, [r3, #0]
 8015752:	2200      	movs	r2, #0
 8015754:	705a      	strb	r2, [r3, #1]
 8015756:	2200      	movs	r2, #0
 8015758:	709a      	strb	r2, [r3, #2]
 801575a:	2200      	movs	r2, #0
 801575c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	2200      	movs	r2, #0
 8015762:	f042 0201 	orr.w	r2, r2, #1
 8015766:	711a      	strb	r2, [r3, #4]
 8015768:	2200      	movs	r2, #0
 801576a:	715a      	strb	r2, [r3, #5]
 801576c:	2200      	movs	r2, #0
 801576e:	719a      	strb	r2, [r3, #6]
 8015770:	2200      	movs	r2, #0
 8015772:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8015774:	887a      	ldrh	r2, [r7, #2]
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801577a:	f003 fae7 	bl	8018d4c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801577e:	f003 facd 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015782:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	689b      	ldr	r3, [r3, #8]
 8015788:	b2db      	uxtb	r3, r3
}
 801578a:	4618      	mov	r0, r3
 801578c:	3710      	adds	r7, #16
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}

08015792 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8015792:	b580      	push	{r7, lr}
 8015794:	b084      	sub	sp, #16
 8015796:	af00      	add	r7, sp, #0
 8015798:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801579a:	f003 fb15 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801579e:	f003 fab1 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80157a2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	2200      	movs	r2, #0
 80157a8:	f062 0246 	orn	r2, r2, #70	; 0x46
 80157ac:	701a      	strb	r2, [r3, #0]
 80157ae:	2200      	movs	r2, #0
 80157b0:	705a      	strb	r2, [r3, #1]
 80157b2:	2200      	movs	r2, #0
 80157b4:	709a      	strb	r2, [r3, #2]
 80157b6:	2200      	movs	r2, #0
 80157b8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	2200      	movs	r2, #0
 80157be:	f042 0201 	orr.w	r2, r2, #1
 80157c2:	711a      	strb	r2, [r3, #4]
 80157c4:	2200      	movs	r2, #0
 80157c6:	715a      	strb	r2, [r3, #5]
 80157c8:	2200      	movs	r2, #0
 80157ca:	719a      	strb	r2, [r3, #6]
 80157cc:	2200      	movs	r2, #0
 80157ce:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80157d0:	687a      	ldr	r2, [r7, #4]
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80157d6:	f003 fab9 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80157da:	f003 fa9f 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 80157de:	60f8      	str	r0, [r7, #12]
}
 80157e0:	bf00      	nop
 80157e2:	3710      	adds	r7, #16
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b084      	sub	sp, #16
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80157f0:	f003 faea 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80157f4:	f003 fa86 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80157f8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	2200      	movs	r2, #0
 80157fe:	f062 0243 	orn	r2, r2, #67	; 0x43
 8015802:	701a      	strb	r2, [r3, #0]
 8015804:	2200      	movs	r2, #0
 8015806:	705a      	strb	r2, [r3, #1]
 8015808:	2200      	movs	r2, #0
 801580a:	709a      	strb	r2, [r3, #2]
 801580c:	2200      	movs	r2, #0
 801580e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	2200      	movs	r2, #0
 8015814:	f042 0201 	orr.w	r2, r2, #1
 8015818:	711a      	strb	r2, [r3, #4]
 801581a:	2200      	movs	r2, #0
 801581c:	715a      	strb	r2, [r3, #5]
 801581e:	2200      	movs	r2, #0
 8015820:	719a      	strb	r2, [r3, #6]
 8015822:	2200      	movs	r2, #0
 8015824:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015826:	687a      	ldr	r2, [r7, #4]
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801582c:	f003 fa8e 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015830:	f003 fa74 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015834:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	689b      	ldr	r3, [r3, #8]
 801583a:	b29b      	uxth	r3, r3
}
 801583c:	4618      	mov	r0, r3
 801583e:	3710      	adds	r7, #16
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b086      	sub	sp, #24
 8015848:	af00      	add	r7, sp, #0
 801584a:	60f8      	str	r0, [r7, #12]
 801584c:	60b9      	str	r1, [r7, #8]
 801584e:	4613      	mov	r3, r2
 8015850:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 8015852:	f003 fab9 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015856:	f003 fa55 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 801585a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 801585c:	697b      	ldr	r3, [r7, #20]
 801585e:	2200      	movs	r2, #0
 8015860:	f062 023e 	orn	r2, r2, #62	; 0x3e
 8015864:	701a      	strb	r2, [r3, #0]
 8015866:	2200      	movs	r2, #0
 8015868:	705a      	strb	r2, [r3, #1]
 801586a:	2200      	movs	r2, #0
 801586c:	709a      	strb	r2, [r3, #2]
 801586e:	2200      	movs	r2, #0
 8015870:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8015872:	697b      	ldr	r3, [r7, #20]
 8015874:	2200      	movs	r2, #0
 8015876:	f042 0203 	orr.w	r2, r2, #3
 801587a:	711a      	strb	r2, [r3, #4]
 801587c:	2200      	movs	r2, #0
 801587e:	715a      	strb	r2, [r3, #5]
 8015880:	2200      	movs	r2, #0
 8015882:	719a      	strb	r2, [r3, #6]
 8015884:	2200      	movs	r2, #0
 8015886:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015888:	68fa      	ldr	r2, [r7, #12]
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 801588e:	68ba      	ldr	r2, [r7, #8]
 8015890:	697b      	ldr	r3, [r7, #20]
 8015892:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 8015894:	88fa      	ldrh	r2, [r7, #6]
 8015896:	697b      	ldr	r3, [r7, #20]
 8015898:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 801589a:	f003 fa57 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801589e:	f003 fa3d 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 80158a2:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80158a4:	697b      	ldr	r3, [r7, #20]
 80158a6:	689b      	ldr	r3, [r3, #8]
 80158a8:	b2db      	uxtb	r3, r3
}
 80158aa:	4618      	mov	r0, r3
 80158ac:	3718      	adds	r7, #24
 80158ae:	46bd      	mov	sp, r7
 80158b0:	bd80      	pop	{r7, pc}

080158b2 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 80158b2:	b580      	push	{r7, lr}
 80158b4:	b086      	sub	sp, #24
 80158b6:	af00      	add	r7, sp, #0
 80158b8:	60f8      	str	r0, [r7, #12]
 80158ba:	607a      	str	r2, [r7, #4]
 80158bc:	461a      	mov	r2, r3
 80158be:	460b      	mov	r3, r1
 80158c0:	817b      	strh	r3, [r7, #10]
 80158c2:	4613      	mov	r3, r2
 80158c4:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 80158c6:	f003 fa7f 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80158ca:	f003 fa1b 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80158ce:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	2200      	movs	r2, #0
 80158d4:	f062 023d 	orn	r2, r2, #61	; 0x3d
 80158d8:	701a      	strb	r2, [r3, #0]
 80158da:	2200      	movs	r2, #0
 80158dc:	705a      	strb	r2, [r3, #1]
 80158de:	2200      	movs	r2, #0
 80158e0:	709a      	strb	r2, [r3, #2]
 80158e2:	2200      	movs	r2, #0
 80158e4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 80158e6:	697b      	ldr	r3, [r7, #20]
 80158e8:	2200      	movs	r2, #0
 80158ea:	f042 0204 	orr.w	r2, r2, #4
 80158ee:	711a      	strb	r2, [r3, #4]
 80158f0:	2200      	movs	r2, #0
 80158f2:	715a      	strb	r2, [r3, #5]
 80158f4:	2200      	movs	r2, #0
 80158f6:	719a      	strb	r2, [r3, #6]
 80158f8:	2200      	movs	r2, #0
 80158fa:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80158fc:	68fa      	ldr	r2, [r7, #12]
 80158fe:	697b      	ldr	r3, [r7, #20]
 8015900:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8015902:	897a      	ldrh	r2, [r7, #10]
 8015904:	697b      	ldr	r3, [r7, #20]
 8015906:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 8015908:	687a      	ldr	r2, [r7, #4]
 801590a:	697b      	ldr	r3, [r7, #20]
 801590c:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 801590e:	893a      	ldrh	r2, [r7, #8]
 8015910:	697b      	ldr	r3, [r7, #20]
 8015912:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8015914:	f003 fa1a 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015918:	f003 fa00 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 801591c:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 801591e:	697b      	ldr	r3, [r7, #20]
 8015920:	689b      	ldr	r3, [r3, #8]
}
 8015922:	4618      	mov	r0, r3
 8015924:	3718      	adds	r7, #24
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}
	...

0801592c <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 801592c:	b5b0      	push	{r4, r5, r7, lr}
 801592e:	b084      	sub	sp, #16
 8015930:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8015932:	2300      	movs	r3, #0
 8015934:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8015936:	f003 f9fd 	bl	8018d34 <THREAD_Get_NotificationPayloadBuffer>
 801593a:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 801593c:	683b      	ldr	r3, [r7, #0]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	3b01      	subs	r3, #1
 8015942:	2b14      	cmp	r3, #20
 8015944:	f200 8172 	bhi.w	8015c2c <OpenThread_CallBack_Processing+0x300>
 8015948:	a201      	add	r2, pc, #4	; (adr r2, 8015950 <OpenThread_CallBack_Processing+0x24>)
 801594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801594e:	bf00      	nop
 8015950:	080159a5 	.word	0x080159a5
 8015954:	080159c1 	.word	0x080159c1
 8015958:	080159ed 	.word	0x080159ed
 801595c:	08015a21 	.word	0x08015a21
 8015960:	08015a2d 	.word	0x08015a2d
 8015964:	08015a4b 	.word	0x08015a4b
 8015968:	08015a69 	.word	0x08015a69
 801596c:	08015a87 	.word	0x08015a87
 8015970:	08015aa5 	.word	0x08015aa5
 8015974:	08015ac3 	.word	0x08015ac3
 8015978:	08015ae5 	.word	0x08015ae5
 801597c:	08015b03 	.word	0x08015b03
 8015980:	08015c2d 	.word	0x08015c2d
 8015984:	08015b29 	.word	0x08015b29
 8015988:	08015b5d 	.word	0x08015b5d
 801598c:	08015b85 	.word	0x08015b85
 8015990:	08015ba3 	.word	0x08015ba3
 8015994:	08015bc7 	.word	0x08015bc7
 8015998:	08015bef 	.word	0x08015bef
 801599c:	08015c2d 	.word	0x08015c2d
 80159a0:	08015c0d 	.word	0x08015c0d
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 80159a4:	4ba3      	ldr	r3, [pc, #652]	; (8015c34 <OpenThread_CallBack_Processing+0x308>)
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	f000 8167 	beq.w	8015c7c <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 80159ae:	4ba1      	ldr	r3, [pc, #644]	; (8015c34 <OpenThread_CallBack_Processing+0x308>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	683a      	ldr	r2, [r7, #0]
 80159b4:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 80159b6:	683a      	ldr	r2, [r7, #0]
 80159b8:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 80159ba:	4611      	mov	r1, r2
 80159bc:	4798      	blx	r3
        }
        break;
 80159be:	e15d      	b.n	8015c7c <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	689b      	ldr	r3, [r3, #8]
 80159c4:	461a      	mov	r2, r3
 80159c6:	4b9c      	ldr	r3, [pc, #624]	; (8015c38 <OpenThread_CallBack_Processing+0x30c>)
 80159c8:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 80159ca:	4b9b      	ldr	r3, [pc, #620]	; (8015c38 <OpenThread_CallBack_Processing+0x30c>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	f000 8156 	beq.w	8015c80 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80159d4:	4b98      	ldr	r3, [pc, #608]	; (8015c38 <OpenThread_CallBack_Processing+0x30c>)
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	683a      	ldr	r2, [r7, #0]
 80159da:	68d2      	ldr	r2, [r2, #12]
 80159dc:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 80159de:	683a      	ldr	r2, [r7, #0]
 80159e0:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80159e2:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 80159e4:	683a      	ldr	r2, [r7, #0]
 80159e6:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80159e8:	4798      	blx	r3
        }
        break;
 80159ea:	e149      	b.n	8015c80 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	689b      	ldr	r3, [r3, #8]
 80159f0:	461a      	mov	r2, r3
 80159f2:	4b92      	ldr	r3, [pc, #584]	; (8015c3c <OpenThread_CallBack_Processing+0x310>)
 80159f4:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 80159f6:	4b91      	ldr	r3, [pc, #580]	; (8015c3c <OpenThread_CallBack_Processing+0x310>)
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	f000 8142 	beq.w	8015c84 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015a00:	4b8e      	ldr	r3, [pc, #568]	; (8015c3c <OpenThread_CallBack_Processing+0x310>)
 8015a02:	681c      	ldr	r4, [r3, #0]
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	68db      	ldr	r3, [r3, #12]
 8015a08:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015a0e:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015a14:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 8015a16:	683b      	ldr	r3, [r7, #0]
 8015a18:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015a1a:	b2db      	uxtb	r3, r3
 8015a1c:	47a0      	blx	r4
        }
        break;
 8015a1e:	e131      	b.n	8015c84 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 8015a20:	2001      	movs	r0, #1
 8015a22:	f000 f99b 	bl	8015d5c <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 8015a26:	f7f2 fd7a 	bl	800851e <HAL_NVIC_SystemReset>
        break;
 8015a2a:	e14a      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 8015a2c:	4b84      	ldr	r3, [pc, #528]	; (8015c40 <OpenThread_CallBack_Processing+0x314>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	f000 8129 	beq.w	8015c88 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8015a36:	4b82      	ldr	r3, [pc, #520]	; (8015c40 <OpenThread_CallBack_Processing+0x314>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	683a      	ldr	r2, [r7, #0]
 8015a3c:	6892      	ldr	r2, [r2, #8]
 8015a3e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8015a40:	683a      	ldr	r2, [r7, #0]
 8015a42:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8015a44:	4611      	mov	r1, r2
 8015a46:	4798      	blx	r3
        }
        break;
 8015a48:	e11e      	b.n	8015c88 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 8015a4a:	4b7e      	ldr	r3, [pc, #504]	; (8015c44 <OpenThread_CallBack_Processing+0x318>)
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	f000 811c 	beq.w	8015c8c <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8015a54:	4b7b      	ldr	r3, [pc, #492]	; (8015c44 <OpenThread_CallBack_Processing+0x318>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	683a      	ldr	r2, [r7, #0]
 8015a5a:	6892      	ldr	r2, [r2, #8]
 8015a5c:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 8015a5e:	683a      	ldr	r2, [r7, #0]
 8015a60:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8015a62:	2000      	movs	r0, #0
 8015a64:	4798      	blx	r3
        }
        break;
 8015a66:	e111      	b.n	8015c8c <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 8015a68:	4b77      	ldr	r3, [pc, #476]	; (8015c48 <OpenThread_CallBack_Processing+0x31c>)
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	f000 810f 	beq.w	8015c90 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8015a72:	4b75      	ldr	r3, [pc, #468]	; (8015c48 <OpenThread_CallBack_Processing+0x31c>)
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	683a      	ldr	r2, [r7, #0]
 8015a78:	6892      	ldr	r2, [r2, #8]
 8015a7a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8015a7c:	683a      	ldr	r2, [r7, #0]
 8015a7e:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8015a80:	4611      	mov	r1, r2
 8015a82:	4798      	blx	r3
        }
        break;
 8015a84:	e104      	b.n	8015c90 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 8015a86:	4b71      	ldr	r3, [pc, #452]	; (8015c4c <OpenThread_CallBack_Processing+0x320>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	f000 8102 	beq.w	8015c94 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8015a90:	4b6e      	ldr	r3, [pc, #440]	; (8015c4c <OpenThread_CallBack_Processing+0x320>)
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	683a      	ldr	r2, [r7, #0]
 8015a96:	6892      	ldr	r2, [r2, #8]
 8015a98:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8015a9a:	683a      	ldr	r2, [r7, #0]
 8015a9c:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8015a9e:	4611      	mov	r1, r2
 8015aa0:	4798      	blx	r3
        }
        break;
 8015aa2:	e0f7      	b.n	8015c94 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 8015aa4:	4b6a      	ldr	r3, [pc, #424]	; (8015c50 <OpenThread_CallBack_Processing+0x324>)
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	f000 80f5 	beq.w	8015c98 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8015aae:	4b68      	ldr	r3, [pc, #416]	; (8015c50 <OpenThread_CallBack_Processing+0x324>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	683a      	ldr	r2, [r7, #0]
 8015ab4:	6892      	ldr	r2, [r2, #8]
 8015ab6:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8015ab8:	683a      	ldr	r2, [r7, #0]
 8015aba:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8015abc:	4611      	mov	r1, r2
 8015abe:	4798      	blx	r3
        }
        break;
 8015ac0:	e0ea      	b.n	8015c98 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8015ac2:	4b64      	ldr	r3, [pc, #400]	; (8015c54 <OpenThread_CallBack_Processing+0x328>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	f000 80e8 	beq.w	8015c9c <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8015acc:	4b61      	ldr	r3, [pc, #388]	; (8015c54 <OpenThread_CallBack_Processing+0x328>)
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	683a      	ldr	r2, [r7, #0]
 8015ad2:	6892      	ldr	r2, [r2, #8]
 8015ad4:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8015ad6:	683a      	ldr	r2, [r7, #0]
 8015ad8:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8015ada:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 8015adc:	683a      	ldr	r2, [r7, #0]
 8015ade:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8015ae0:	4798      	blx	r3
        }
        break;
 8015ae2:	e0db      	b.n	8015c9c <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 8015ae4:	4b5c      	ldr	r3, [pc, #368]	; (8015c58 <OpenThread_CallBack_Processing+0x32c>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	f000 80d9 	beq.w	8015ca0 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8015aee:	4b5a      	ldr	r3, [pc, #360]	; (8015c58 <OpenThread_CallBack_Processing+0x32c>)
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	683a      	ldr	r2, [r7, #0]
 8015af4:	6892      	ldr	r2, [r2, #8]
 8015af6:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8015af8:	683a      	ldr	r2, [r7, #0]
 8015afa:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8015afc:	4611      	mov	r1, r2
 8015afe:	4798      	blx	r3
        }
        break;
 8015b00:	e0ce      	b.n	8015ca0 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 8015b02:	4b56      	ldr	r3, [pc, #344]	; (8015c5c <OpenThread_CallBack_Processing+0x330>)
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	f000 80cc 	beq.w	8015ca4 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8015b0c:	4b53      	ldr	r3, [pc, #332]	; (8015c5c <OpenThread_CallBack_Processing+0x330>)
 8015b0e:	681c      	ldr	r4, [r3, #0]
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 8015b14:	683b      	ldr	r3, [r7, #0]
 8015b16:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8015b18:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 8015b1a:	683b      	ldr	r3, [r7, #0]
 8015b1c:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8015b1e:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 8015b20:	683b      	ldr	r3, [r7, #0]
 8015b22:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8015b24:	47a0      	blx	r4
        }
        break;
 8015b26:	e0bd      	b.n	8015ca4 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 8015b28:	4b4d      	ldr	r3, [pc, #308]	; (8015c60 <OpenThread_CallBack_Processing+0x334>)
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	f000 80bb 	beq.w	8015ca8 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8015b32:	4b4b      	ldr	r3, [pc, #300]	; (8015c60 <OpenThread_CallBack_Processing+0x334>)
 8015b34:	681c      	ldr	r4, [r3, #0]
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	689b      	ldr	r3, [r3, #8]
 8015b3a:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 8015b3c:	683b      	ldr	r3, [r7, #0]
 8015b3e:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8015b40:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 8015b42:	683b      	ldr	r3, [r7, #0]
 8015b44:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8015b46:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 8015b4c:	683b      	ldr	r3, [r7, #0]
 8015b4e:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8015b50:	b2db      	uxtb	r3, r3
 8015b52:	9300      	str	r3, [sp, #0]
 8015b54:	4613      	mov	r3, r2
 8015b56:	462a      	mov	r2, r5
 8015b58:	47a0      	blx	r4
        }
        break;
 8015b5a:	e0a5      	b.n	8015ca8 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 8015b5c:	4b41      	ldr	r3, [pc, #260]	; (8015c64 <OpenThread_CallBack_Processing+0x338>)
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	f000 80a3 	beq.w	8015cac <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8015b66:	4b3f      	ldr	r3, [pc, #252]	; (8015c64 <OpenThread_CallBack_Processing+0x338>)
 8015b68:	681c      	ldr	r4, [r3, #0]
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	689b      	ldr	r3, [r3, #8]
 8015b6e:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8015b74:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8015b7a:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 8015b7c:	683b      	ldr	r3, [r7, #0]
 8015b7e:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8015b80:	47a0      	blx	r4
        }
        break;
 8015b82:	e093      	b.n	8015cac <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 8015b84:	4b38      	ldr	r3, [pc, #224]	; (8015c68 <OpenThread_CallBack_Processing+0x33c>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	f000 8091 	beq.w	8015cb0 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 8015b8e:	4b36      	ldr	r3, [pc, #216]	; (8015c68 <OpenThread_CallBack_Processing+0x33c>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	683a      	ldr	r2, [r7, #0]
 8015b94:	6892      	ldr	r2, [r2, #8]
 8015b96:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8015b98:	683a      	ldr	r2, [r7, #0]
 8015b9a:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 8015b9c:	4611      	mov	r1, r2
 8015b9e:	4798      	blx	r3
        }
        break;
 8015ba0:	e086      	b.n	8015cb0 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8015ba2:	4b32      	ldr	r3, [pc, #200]	; (8015c6c <OpenThread_CallBack_Processing+0x340>)
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	f000 8084 	beq.w	8015cb4 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8015bac:	4b2f      	ldr	r3, [pc, #188]	; (8015c6c <OpenThread_CallBack_Processing+0x340>)
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	683a      	ldr	r2, [r7, #0]
 8015bb2:	6892      	ldr	r2, [r2, #8]
 8015bb4:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8015bb6:	683a      	ldr	r2, [r7, #0]
 8015bb8:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8015bba:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 8015bbc:	683a      	ldr	r2, [r7, #0]
 8015bbe:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8015bc0:	b2d2      	uxtb	r2, r2
 8015bc2:	4798      	blx	r3
        }
        break;
 8015bc4:	e076      	b.n	8015cb4 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8015bc6:	4b2a      	ldr	r3, [pc, #168]	; (8015c70 <OpenThread_CallBack_Processing+0x344>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d074      	beq.n	8015cb8 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8015bce:	4b28      	ldr	r3, [pc, #160]	; (8015c70 <OpenThread_CallBack_Processing+0x344>)
 8015bd0:	681c      	ldr	r4, [r3, #0]
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	689b      	ldr	r3, [r3, #8]
 8015bd6:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8015bdc:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8015be2:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8015be8:	b2db      	uxtb	r3, r3
 8015bea:	47a0      	blx	r4
        }
        break;
 8015bec:	e064      	b.n	8015cb8 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 8015bee:	4b21      	ldr	r3, [pc, #132]	; (8015c74 <OpenThread_CallBack_Processing+0x348>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d062      	beq.n	8015cbc <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8015bf6:	4b1f      	ldr	r3, [pc, #124]	; (8015c74 <OpenThread_CallBack_Processing+0x348>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	683a      	ldr	r2, [r7, #0]
 8015bfc:	6892      	ldr	r2, [r2, #8]
 8015bfe:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8015c00:	683a      	ldr	r2, [r7, #0]
 8015c02:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8015c04:	b252      	sxtb	r2, r2
 8015c06:	4611      	mov	r1, r2
 8015c08:	4798      	blx	r3
        }
        break;
 8015c0a:	e057      	b.n	8015cbc <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 8015c0c:	4b1a      	ldr	r3, [pc, #104]	; (8015c78 <OpenThread_CallBack_Processing+0x34c>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d055      	beq.n	8015cc0 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 8015c14:	4b18      	ldr	r3, [pc, #96]	; (8015c78 <OpenThread_CallBack_Processing+0x34c>)
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	683a      	ldr	r2, [r7, #0]
 8015c1a:	6892      	ldr	r2, [r2, #8]
 8015c1c:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 8015c1e:	683a      	ldr	r2, [r7, #0]
 8015c20:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8015c22:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 8015c24:	683a      	ldr	r2, [r7, #0]
 8015c26:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8015c28:	4798      	blx	r3
        }
        break;
 8015c2a:	e049      	b.n	8015cc0 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 8015c2c:	2301      	movs	r3, #1
 8015c2e:	71fb      	strb	r3, [r7, #7]
        break;
 8015c30:	e047      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
 8015c32:	bf00      	nop
 8015c34:	200275c8 	.word	0x200275c8
 8015c38:	20027608 	.word	0x20027608
 8015c3c:	2002760c 	.word	0x2002760c
 8015c40:	200275d0 	.word	0x200275d0
 8015c44:	200275cc 	.word	0x200275cc
 8015c48:	200275d4 	.word	0x200275d4
 8015c4c:	200275d8 	.word	0x200275d8
 8015c50:	200275dc 	.word	0x200275dc
 8015c54:	200275e0 	.word	0x200275e0
 8015c58:	200275e4 	.word	0x200275e4
 8015c5c:	200275e8 	.word	0x200275e8
 8015c60:	200275ec 	.word	0x200275ec
 8015c64:	200275f0 	.word	0x200275f0
 8015c68:	200275f4 	.word	0x200275f4
 8015c6c:	200275f8 	.word	0x200275f8
 8015c70:	200275fc 	.word	0x200275fc
 8015c74:	20027600 	.word	0x20027600
 8015c78:	20027604 	.word	0x20027604
        break;
 8015c7c:	bf00      	nop
 8015c7e:	e020      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015c80:	bf00      	nop
 8015c82:	e01e      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015c84:	bf00      	nop
 8015c86:	e01c      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015c88:	bf00      	nop
 8015c8a:	e01a      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015c8c:	bf00      	nop
 8015c8e:	e018      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015c90:	bf00      	nop
 8015c92:	e016      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015c94:	bf00      	nop
 8015c96:	e014      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015c98:	bf00      	nop
 8015c9a:	e012      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015c9c:	bf00      	nop
 8015c9e:	e010      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015ca0:	bf00      	nop
 8015ca2:	e00e      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015ca4:	bf00      	nop
 8015ca6:	e00c      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015ca8:	bf00      	nop
 8015caa:	e00a      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015cac:	bf00      	nop
 8015cae:	e008      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015cb0:	bf00      	nop
 8015cb2:	e006      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015cb4:	bf00      	nop
 8015cb6:	e004      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015cb8:	bf00      	nop
 8015cba:	e002      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015cbc:	bf00      	nop
 8015cbe:	e000      	b.n	8015cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8015cc0:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8015cc2:	f000 fcc1 	bl	8016648 <TL_THREAD_SendAck>
    return status;
 8015cc6:	79fb      	ldrb	r3, [r7, #7]

}
 8015cc8:	4618      	mov	r0, r3
 8015cca:	3708      	adds	r7, #8
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bdb0      	pop	{r4, r5, r7, pc}

08015cd0 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b084      	sub	sp, #16
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
 8015cd8:	460b      	mov	r3, r1
 8015cda:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8015cdc:	f003 f874 	bl	8018dc8 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015ce0:	f003 f810 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8015ce4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	2200      	movs	r2, #0
 8015cea:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8015cee:	701a      	strb	r2, [r3, #0]
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	f042 0201 	orr.w	r2, r2, #1
 8015cf6:	705a      	strb	r2, [r3, #1]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	709a      	strb	r2, [r3, #2]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	2200      	movs	r2, #0
 8015d04:	f042 0201 	orr.w	r2, r2, #1
 8015d08:	711a      	strb	r2, [r3, #4]
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	715a      	strb	r2, [r3, #5]
 8015d0e:	2200      	movs	r2, #0
 8015d10:	719a      	strb	r2, [r3, #6]
 8015d12:	2200      	movs	r2, #0
 8015d14:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 8015d16:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8015d1e:	f003 f815 	bl	8018d4c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015d22:	f002 fffb 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015d26:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	689b      	ldr	r3, [r3, #8]
 8015d2c:	b2db      	uxtb	r3, r3
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3710      	adds	r7, #16
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}

08015d36 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8015d36:	b580      	push	{r7, lr}
 8015d38:	b086      	sub	sp, #24
 8015d3a:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015d3c:	1d3b      	adds	r3, r7, #4
 8015d3e:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8015d40:	697b      	ldr	r3, [r7, #20]
 8015d42:	2200      	movs	r2, #0
 8015d44:	2100      	movs	r1, #0
 8015d46:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8015d4a:	f000 f915 	bl	8015f78 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	330b      	adds	r3, #11
 8015d52:	78db      	ldrb	r3, [r3, #3]
}
 8015d54:	4618      	mov	r0, r3
 8015d56:	3718      	adds	r7, #24
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}

08015d5c <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b088      	sub	sp, #32
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	4603      	mov	r3, r0
 8015d64:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015d66:	f107 030c 	add.w	r3, r7, #12
 8015d6a:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8015d6c:	79fb      	ldrb	r3, [r7, #7]
 8015d6e:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8015d70:	f107 020c 	add.w	r2, r7, #12
 8015d74:	69fb      	ldr	r3, [r7, #28]
 8015d76:	2101      	movs	r1, #1
 8015d78:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8015d7c:	f000 f8fc 	bl	8015f78 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015d80:	69fb      	ldr	r3, [r7, #28]
 8015d82:	330b      	adds	r3, #11
 8015d84:	78db      	ldrb	r3, [r3, #3]
}
 8015d86:	4618      	mov	r0, r3
 8015d88:	3720      	adds	r7, #32
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	bd80      	pop	{r7, pc}
	...

08015d90 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8015d90:	b480      	push	{r7}
 8015d92:	b089      	sub	sp, #36	; 0x24
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 8015da0:	2300      	movs	r3, #0
 8015da2:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 8015da4:	2300      	movs	r3, #0
 8015da6:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 8015da8:	2300      	movs	r3, #0
 8015daa:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8015dac:	4b3c      	ldr	r3, [pc, #240]	; (8015ea0 <SHCI_GetWirelessFwInfo+0x110>)
 8015dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015db0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015db4:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8015db6:	69fb      	ldr	r3, [r7, #28]
 8015db8:	009b      	lsls	r3, r3, #2
 8015dba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015dbe:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8015dc2:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8015dc4:	69bb      	ldr	r3, [r7, #24]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	691b      	ldr	r3, [r3, #16]
 8015dca:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015dcc:	697b      	ldr	r3, [r7, #20]
 8015dce:	0e1b      	lsrs	r3, r3, #24
 8015dd0:	b2da      	uxtb	r2, r3
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015dd6:	697b      	ldr	r3, [r7, #20]
 8015dd8:	0c1b      	lsrs	r3, r3, #16
 8015dda:	b2da      	uxtb	r2, r3
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015de0:	697b      	ldr	r3, [r7, #20]
 8015de2:	0a1b      	lsrs	r3, r3, #8
 8015de4:	b2da      	uxtb	r2, r3
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	091b      	lsrs	r3, r3, #4
 8015dee:	b2db      	uxtb	r3, r3
 8015df0:	f003 030f 	and.w	r3, r3, #15
 8015df4:	b2da      	uxtb	r2, r3
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8015dfa:	697b      	ldr	r3, [r7, #20]
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	f003 030f 	and.w	r3, r3, #15
 8015e02:	b2da      	uxtb	r2, r3
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8015e08:	69bb      	ldr	r3, [r7, #24]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	695b      	ldr	r3, [r3, #20]
 8015e0e:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015e10:	693b      	ldr	r3, [r7, #16]
 8015e12:	0e1b      	lsrs	r3, r3, #24
 8015e14:	b2da      	uxtb	r2, r3
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	0c1b      	lsrs	r3, r3, #16
 8015e1e:	b2da      	uxtb	r2, r3
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8015e24:	693b      	ldr	r3, [r7, #16]
 8015e26:	0a1b      	lsrs	r3, r3, #8
 8015e28:	b2da      	uxtb	r2, r3
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015e2e:	693b      	ldr	r3, [r7, #16]
 8015e30:	b2da      	uxtb	r2, r3
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8015e36:	69bb      	ldr	r3, [r7, #24]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	699b      	ldr	r3, [r3, #24]
 8015e3c:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	b2da      	uxtb	r2, r3
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8015e46:	69bb      	ldr	r3, [r7, #24]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	685b      	ldr	r3, [r3, #4]
 8015e4c:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015e4e:	697b      	ldr	r3, [r7, #20]
 8015e50:	0e1b      	lsrs	r3, r3, #24
 8015e52:	b2da      	uxtb	r2, r3
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015e58:	697b      	ldr	r3, [r7, #20]
 8015e5a:	0c1b      	lsrs	r3, r3, #16
 8015e5c:	b2da      	uxtb	r2, r3
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015e62:	697b      	ldr	r3, [r7, #20]
 8015e64:	0a1b      	lsrs	r3, r3, #8
 8015e66:	b2da      	uxtb	r2, r3
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8015e6c:	69bb      	ldr	r3, [r7, #24]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	689b      	ldr	r3, [r3, #8]
 8015e72:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015e74:	693b      	ldr	r3, [r7, #16]
 8015e76:	0e1b      	lsrs	r3, r3, #24
 8015e78:	b2da      	uxtb	r2, r3
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015e7e:	693b      	ldr	r3, [r7, #16]
 8015e80:	0c1b      	lsrs	r3, r3, #16
 8015e82:	b2da      	uxtb	r2, r3
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015e88:	693b      	ldr	r3, [r7, #16]
 8015e8a:	b2da      	uxtb	r2, r3
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8015e90:	2300      	movs	r3, #0
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3724      	adds	r7, #36	; 0x24
 8015e96:	46bd      	mov	sp, r7
 8015e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9c:	4770      	bx	lr
 8015e9e:	bf00      	nop
 8015ea0:	58004000 	.word	0x58004000

08015ea4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b082      	sub	sp, #8
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	4a08      	ldr	r2, [pc, #32]	; (8015ed4 <shci_init+0x30>)
 8015eb4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8015eb6:	4a08      	ldr	r2, [pc, #32]	; (8015ed8 <shci_init+0x34>)
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8015ebc:	4806      	ldr	r0, [pc, #24]	; (8015ed8 <shci_init+0x34>)
 8015ebe:	f000 f911 	bl	80160e4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8015ec2:	683b      	ldr	r3, [r7, #0]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f000 f894 	bl	8015ff4 <TlInit>

  return;
 8015ecc:	bf00      	nop
}
 8015ece:	3708      	adds	r7, #8
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	bd80      	pop	{r7, pc}
 8015ed4:	20027630 	.word	0x20027630
 8015ed8:	20027610 	.word	0x20027610

08015edc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b084      	sub	sp, #16
 8015ee0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8015ee2:	4822      	ldr	r0, [pc, #136]	; (8015f6c <shci_user_evt_proc+0x90>)
 8015ee4:	f000 f922 	bl	801612c <LST_is_empty>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d12b      	bne.n	8015f46 <shci_user_evt_proc+0x6a>
 8015eee:	4b20      	ldr	r3, [pc, #128]	; (8015f70 <shci_user_evt_proc+0x94>)
 8015ef0:	781b      	ldrb	r3, [r3, #0]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d027      	beq.n	8015f46 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8015ef6:	f107 030c 	add.w	r3, r7, #12
 8015efa:	4619      	mov	r1, r3
 8015efc:	481b      	ldr	r0, [pc, #108]	; (8015f6c <shci_user_evt_proc+0x90>)
 8015efe:	f000 f99c 	bl	801623a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8015f02:	4b1c      	ldr	r3, [pc, #112]	; (8015f74 <shci_user_evt_proc+0x98>)
 8015f04:	69db      	ldr	r3, [r3, #28]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d00c      	beq.n	8015f24 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8015f0e:	2301      	movs	r3, #1
 8015f10:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8015f12:	4b18      	ldr	r3, [pc, #96]	; (8015f74 <shci_user_evt_proc+0x98>)
 8015f14:	69db      	ldr	r3, [r3, #28]
 8015f16:	1d3a      	adds	r2, r7, #4
 8015f18:	4610      	mov	r0, r2
 8015f1a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8015f1c:	793a      	ldrb	r2, [r7, #4]
 8015f1e:	4b14      	ldr	r3, [pc, #80]	; (8015f70 <shci_user_evt_proc+0x94>)
 8015f20:	701a      	strb	r2, [r3, #0]
 8015f22:	e002      	b.n	8015f2a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8015f24:	4b12      	ldr	r3, [pc, #72]	; (8015f70 <shci_user_evt_proc+0x94>)
 8015f26:	2201      	movs	r2, #1
 8015f28:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8015f2a:	4b11      	ldr	r3, [pc, #68]	; (8015f70 <shci_user_evt_proc+0x94>)
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d004      	beq.n	8015f3c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	4618      	mov	r0, r3
 8015f36:	f000 fc03 	bl	8016740 <TL_MM_EvtDone>
 8015f3a:	e004      	b.n	8015f46 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	4619      	mov	r1, r3
 8015f40:	480a      	ldr	r0, [pc, #40]	; (8015f6c <shci_user_evt_proc+0x90>)
 8015f42:	f000 f913 	bl	801616c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8015f46:	4809      	ldr	r0, [pc, #36]	; (8015f6c <shci_user_evt_proc+0x90>)
 8015f48:	f000 f8f0 	bl	801612c <LST_is_empty>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d107      	bne.n	8015f62 <shci_user_evt_proc+0x86>
 8015f52:	4b07      	ldr	r3, [pc, #28]	; (8015f70 <shci_user_evt_proc+0x94>)
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d003      	beq.n	8015f62 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8015f5a:	4804      	ldr	r0, [pc, #16]	; (8015f6c <shci_user_evt_proc+0x90>)
 8015f5c:	f7eb f92c 	bl	80011b8 <shci_notify_asynch_evt>
  }


  return;
 8015f60:	bf00      	nop
 8015f62:	bf00      	nop
}
 8015f64:	3710      	adds	r7, #16
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}
 8015f6a:	bf00      	nop
 8015f6c:	20000370 	.word	0x20000370
 8015f70:	20000380 	.word	0x20000380
 8015f74:	20027610 	.word	0x20027610

08015f78 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b084      	sub	sp, #16
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	60ba      	str	r2, [r7, #8]
 8015f80:	607b      	str	r3, [r7, #4]
 8015f82:	4603      	mov	r3, r0
 8015f84:	81fb      	strh	r3, [r7, #14]
 8015f86:	460b      	mov	r3, r1
 8015f88:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8015f8a:	2000      	movs	r0, #0
 8015f8c:	f000 f864 	bl	8016058 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8015f90:	4b16      	ldr	r3, [pc, #88]	; (8015fec <shci_send+0x74>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	89fa      	ldrh	r2, [r7, #14]
 8015f96:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8015f9a:	4b14      	ldr	r3, [pc, #80]	; (8015fec <shci_send+0x74>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	7b7a      	ldrb	r2, [r7, #13]
 8015fa0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8015fa2:	4b12      	ldr	r3, [pc, #72]	; (8015fec <shci_send+0x74>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	330c      	adds	r3, #12
 8015fa8:	7b7a      	ldrb	r2, [r7, #13]
 8015faa:	68b9      	ldr	r1, [r7, #8]
 8015fac:	4618      	mov	r0, r3
 8015fae:	f004 fb43 	bl	801a638 <memcpy>

  shciContext.io.Send(0,0);
 8015fb2:	4b0f      	ldr	r3, [pc, #60]	; (8015ff0 <shci_send+0x78>)
 8015fb4:	691b      	ldr	r3, [r3, #16]
 8015fb6:	2100      	movs	r1, #0
 8015fb8:	2000      	movs	r0, #0
 8015fba:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8015fbc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8015fc0:	f7eb f91a 	bl	80011f8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f103 0008 	add.w	r0, r3, #8
 8015fca:	4b08      	ldr	r3, [pc, #32]	; (8015fec <shci_send+0x74>)
 8015fcc:	6819      	ldr	r1, [r3, #0]
 8015fce:	4b07      	ldr	r3, [pc, #28]	; (8015fec <shci_send+0x74>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	789b      	ldrb	r3, [r3, #2]
 8015fd4:	3303      	adds	r3, #3
 8015fd6:	461a      	mov	r2, r3
 8015fd8:	f004 fb2e 	bl	801a638 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8015fdc:	2001      	movs	r0, #1
 8015fde:	f000 f83b 	bl	8016058 <Cmd_SetStatus>

  return;
 8015fe2:	bf00      	nop
}
 8015fe4:	3710      	adds	r7, #16
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	bd80      	pop	{r7, pc}
 8015fea:	bf00      	nop
 8015fec:	2000037c 	.word	0x2000037c
 8015ff0:	20027610 	.word	0x20027610

08015ff4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b086      	sub	sp, #24
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8015ffc:	4a10      	ldr	r2, [pc, #64]	; (8016040 <TlInit+0x4c>)
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8016002:	4810      	ldr	r0, [pc, #64]	; (8016044 <TlInit+0x50>)
 8016004:	f000 f882 	bl	801610c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8016008:	2001      	movs	r0, #1
 801600a:	f000 f825 	bl	8016058 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801600e:	4b0e      	ldr	r3, [pc, #56]	; (8016048 <TlInit+0x54>)
 8016010:	2201      	movs	r2, #1
 8016012:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8016014:	4b0d      	ldr	r3, [pc, #52]	; (801604c <TlInit+0x58>)
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d00c      	beq.n	8016036 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8016020:	4b0b      	ldr	r3, [pc, #44]	; (8016050 <TlInit+0x5c>)
 8016022:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8016024:	4b0b      	ldr	r3, [pc, #44]	; (8016054 <TlInit+0x60>)
 8016026:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8016028:	4b08      	ldr	r3, [pc, #32]	; (801604c <TlInit+0x58>)
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	f107 020c 	add.w	r2, r7, #12
 8016030:	4610      	mov	r0, r2
 8016032:	4798      	blx	r3
  }

  return;
 8016034:	bf00      	nop
 8016036:	bf00      	nop
}
 8016038:	3718      	adds	r7, #24
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}
 801603e:	bf00      	nop
 8016040:	2000037c 	.word	0x2000037c
 8016044:	20000370 	.word	0x20000370
 8016048:	20000380 	.word	0x20000380
 801604c:	20027610 	.word	0x20027610
 8016050:	080160a9 	.word	0x080160a9
 8016054:	080160c1 	.word	0x080160c1

08016058 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b082      	sub	sp, #8
 801605c:	af00      	add	r7, sp, #0
 801605e:	4603      	mov	r3, r0
 8016060:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8016062:	79fb      	ldrb	r3, [r7, #7]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d10b      	bne.n	8016080 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8016068:	4b0d      	ldr	r3, [pc, #52]	; (80160a0 <Cmd_SetStatus+0x48>)
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d003      	beq.n	8016078 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8016070:	4b0b      	ldr	r3, [pc, #44]	; (80160a0 <Cmd_SetStatus+0x48>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	2000      	movs	r0, #0
 8016076:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8016078:	4b0a      	ldr	r3, [pc, #40]	; (80160a4 <Cmd_SetStatus+0x4c>)
 801607a:	2200      	movs	r2, #0
 801607c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 801607e:	e00b      	b.n	8016098 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8016080:	4b08      	ldr	r3, [pc, #32]	; (80160a4 <Cmd_SetStatus+0x4c>)
 8016082:	2201      	movs	r2, #1
 8016084:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8016086:	4b06      	ldr	r3, [pc, #24]	; (80160a0 <Cmd_SetStatus+0x48>)
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d004      	beq.n	8016098 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 801608e:	4b04      	ldr	r3, [pc, #16]	; (80160a0 <Cmd_SetStatus+0x48>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	2001      	movs	r0, #1
 8016094:	4798      	blx	r3
  return;
 8016096:	bf00      	nop
 8016098:	bf00      	nop
}
 801609a:	3708      	adds	r7, #8
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}
 80160a0:	20027630 	.word	0x20027630
 80160a4:	20000378 	.word	0x20000378

080160a8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b082      	sub	sp, #8
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80160b0:	2000      	movs	r0, #0
 80160b2:	f7eb f891 	bl	80011d8 <shci_cmd_resp_release>

  return;
 80160b6:	bf00      	nop
}
 80160b8:	3708      	adds	r7, #8
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd80      	pop	{r7, pc}
	...

080160c0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b082      	sub	sp, #8
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80160c8:	6879      	ldr	r1, [r7, #4]
 80160ca:	4805      	ldr	r0, [pc, #20]	; (80160e0 <TlUserEvtReceived+0x20>)
 80160cc:	f000 f872 	bl	80161b4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80160d0:	4803      	ldr	r0, [pc, #12]	; (80160e0 <TlUserEvtReceived+0x20>)
 80160d2:	f7eb f871 	bl	80011b8 <shci_notify_asynch_evt>

  return;
 80160d6:	bf00      	nop
}
 80160d8:	3708      	adds	r7, #8
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}
 80160de:	bf00      	nop
 80160e0:	20000370 	.word	0x20000370

080160e4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80160e4:	b480      	push	{r7}
 80160e6:	b083      	sub	sp, #12
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	4a05      	ldr	r2, [pc, #20]	; (8016104 <shci_register_io_bus+0x20>)
 80160f0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	4a04      	ldr	r2, [pc, #16]	; (8016108 <shci_register_io_bus+0x24>)
 80160f6:	611a      	str	r2, [r3, #16]

  return;
 80160f8:	bf00      	nop
}
 80160fa:	370c      	adds	r7, #12
 80160fc:	46bd      	mov	sp, r7
 80160fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016102:	4770      	bx	lr
 8016104:	08016505 	.word	0x08016505
 8016108:	08016559 	.word	0x08016559

0801610c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 801610c:	b480      	push	{r7}
 801610e:	b083      	sub	sp, #12
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	687a      	ldr	r2, [r7, #4]
 8016118:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	687a      	ldr	r2, [r7, #4]
 801611e:	605a      	str	r2, [r3, #4]
}
 8016120:	bf00      	nop
 8016122:	370c      	adds	r7, #12
 8016124:	46bd      	mov	sp, r7
 8016126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612a:	4770      	bx	lr

0801612c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 801612c:	b480      	push	{r7}
 801612e:	b087      	sub	sp, #28
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016134:	f3ef 8310 	mrs	r3, PRIMASK
 8016138:	60fb      	str	r3, [r7, #12]
  return(result);
 801613a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801613c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801613e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	687a      	ldr	r2, [r7, #4]
 8016146:	429a      	cmp	r2, r3
 8016148:	d102      	bne.n	8016150 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 801614a:	2301      	movs	r3, #1
 801614c:	75fb      	strb	r3, [r7, #23]
 801614e:	e001      	b.n	8016154 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8016150:	2300      	movs	r3, #0
 8016152:	75fb      	strb	r3, [r7, #23]
 8016154:	693b      	ldr	r3, [r7, #16]
 8016156:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016158:	68bb      	ldr	r3, [r7, #8]
 801615a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801615e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016160:	4618      	mov	r0, r3
 8016162:	371c      	adds	r7, #28
 8016164:	46bd      	mov	sp, r7
 8016166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616a:	4770      	bx	lr

0801616c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 801616c:	b480      	push	{r7}
 801616e:	b087      	sub	sp, #28
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
 8016174:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016176:	f3ef 8310 	mrs	r3, PRIMASK
 801617a:	60fb      	str	r3, [r7, #12]
  return(result);
 801617c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801617e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016180:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	681a      	ldr	r2, [r3, #0]
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	687a      	ldr	r2, [r7, #4]
 801618e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	683a      	ldr	r2, [r7, #0]
 8016194:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	683a      	ldr	r2, [r7, #0]
 801619c:	605a      	str	r2, [r3, #4]
 801619e:	697b      	ldr	r3, [r7, #20]
 80161a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80161a2:	693b      	ldr	r3, [r7, #16]
 80161a4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80161a8:	bf00      	nop
 80161aa:	371c      	adds	r7, #28
 80161ac:	46bd      	mov	sp, r7
 80161ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b2:	4770      	bx	lr

080161b4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80161b4:	b480      	push	{r7}
 80161b6:	b087      	sub	sp, #28
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
 80161bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80161be:	f3ef 8310 	mrs	r3, PRIMASK
 80161c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80161c4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80161c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80161c8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	687a      	ldr	r2, [r7, #4]
 80161ce:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	685a      	ldr	r2, [r3, #4]
 80161d4:	683b      	ldr	r3, [r7, #0]
 80161d6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	683a      	ldr	r2, [r7, #0]
 80161dc:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	683a      	ldr	r2, [r7, #0]
 80161e4:	601a      	str	r2, [r3, #0]
 80161e6:	697b      	ldr	r3, [r7, #20]
 80161e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80161ea:	693b      	ldr	r3, [r7, #16]
 80161ec:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80161f0:	bf00      	nop
 80161f2:	371c      	adds	r7, #28
 80161f4:	46bd      	mov	sp, r7
 80161f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fa:	4770      	bx	lr

080161fc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80161fc:	b480      	push	{r7}
 80161fe:	b087      	sub	sp, #28
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016204:	f3ef 8310 	mrs	r3, PRIMASK
 8016208:	60fb      	str	r3, [r7, #12]
  return(result);
 801620a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801620c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801620e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	685b      	ldr	r3, [r3, #4]
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	6812      	ldr	r2, [r2, #0]
 8016218:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	687a      	ldr	r2, [r7, #4]
 8016220:	6852      	ldr	r2, [r2, #4]
 8016222:	605a      	str	r2, [r3, #4]
 8016224:	697b      	ldr	r3, [r7, #20]
 8016226:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801622e:	bf00      	nop
 8016230:	371c      	adds	r7, #28
 8016232:	46bd      	mov	sp, r7
 8016234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016238:	4770      	bx	lr

0801623a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 801623a:	b580      	push	{r7, lr}
 801623c:	b086      	sub	sp, #24
 801623e:	af00      	add	r7, sp, #0
 8016240:	6078      	str	r0, [r7, #4]
 8016242:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016244:	f3ef 8310 	mrs	r3, PRIMASK
 8016248:	60fb      	str	r3, [r7, #12]
  return(result);
 801624a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801624c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801624e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	681a      	ldr	r2, [r3, #0]
 8016254:	683b      	ldr	r3, [r7, #0]
 8016256:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	4618      	mov	r0, r3
 801625e:	f7ff ffcd 	bl	80161fc <LST_remove_node>
 8016262:	697b      	ldr	r3, [r7, #20]
 8016264:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016266:	693b      	ldr	r3, [r7, #16]
 8016268:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801626c:	bf00      	nop
 801626e:	3718      	adds	r7, #24
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}

08016274 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b084      	sub	sp, #16
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
 801627c:	460b      	mov	r3, r1
 801627e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8016280:	f002 fda2 	bl	8018dc8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8016284:	f002 fd3e 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8016288:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	2200      	movs	r2, #0
 801628e:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8016292:	701a      	strb	r2, [r3, #0]
 8016294:	2200      	movs	r2, #0
 8016296:	705a      	strb	r2, [r3, #1]
 8016298:	2200      	movs	r2, #0
 801629a:	709a      	strb	r2, [r3, #2]
 801629c:	2200      	movs	r2, #0
 801629e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2200      	movs	r2, #0
 80162a4:	f042 0201 	orr.w	r2, r2, #1
 80162a8:	711a      	strb	r2, [r3, #4]
 80162aa:	2200      	movs	r2, #0
 80162ac:	715a      	strb	r2, [r3, #5]
 80162ae:	2200      	movs	r2, #0
 80162b0:	719a      	strb	r2, [r3, #6]
 80162b2:	2200      	movs	r2, #0
 80162b4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 80162b6:	78fa      	ldrb	r2, [r7, #3]
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80162bc:	f002 fd46 	bl	8018d4c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80162c0:	f002 fd2c 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 80162c4:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	689b      	ldr	r3, [r3, #8]
 80162ca:	b2db      	uxtb	r3, r3
}
 80162cc:	4618      	mov	r0, r3
 80162ce:	3710      	adds	r7, #16
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bd80      	pop	{r7, pc}

080162d4 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b084      	sub	sp, #16
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
 80162dc:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80162de:	f002 fd73 	bl	8018dc8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80162e2:	f002 fd0f 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80162e6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	2200      	movs	r2, #0
 80162ec:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 80162f0:	701a      	strb	r2, [r3, #0]
 80162f2:	2200      	movs	r2, #0
 80162f4:	705a      	strb	r2, [r3, #1]
 80162f6:	2200      	movs	r2, #0
 80162f8:	709a      	strb	r2, [r3, #2]
 80162fa:	2200      	movs	r2, #0
 80162fc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	2200      	movs	r2, #0
 8016302:	f042 0201 	orr.w	r2, r2, #1
 8016306:	711a      	strb	r2, [r3, #4]
 8016308:	2200      	movs	r2, #0
 801630a:	715a      	strb	r2, [r3, #5]
 801630c:	2200      	movs	r2, #0
 801630e:	719a      	strb	r2, [r3, #6]
 8016310:	2200      	movs	r2, #0
 8016312:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 8016314:	683a      	ldr	r2, [r7, #0]
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801631a:	f002 fd17 	bl	8018d4c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801631e:	f002 fcfd 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8016322:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	689b      	ldr	r3, [r3, #8]
 8016328:	b2db      	uxtb	r3, r3
}
 801632a:	4618      	mov	r0, r3
 801632c:	3710      	adds	r7, #16
 801632e:	46bd      	mov	sp, r7
 8016330:	bd80      	pop	{r7, pc}

08016332 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 8016332:	b580      	push	{r7, lr}
 8016334:	b084      	sub	sp, #16
 8016336:	af00      	add	r7, sp, #0
 8016338:	6078      	str	r0, [r7, #4]
 801633a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801633c:	f002 fd44 	bl	8018dc8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8016340:	f002 fce0 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 8016344:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	2200      	movs	r2, #0
 801634a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 801634e:	701a      	strb	r2, [r3, #0]
 8016350:	2200      	movs	r2, #0
 8016352:	705a      	strb	r2, [r3, #1]
 8016354:	2200      	movs	r2, #0
 8016356:	709a      	strb	r2, [r3, #2]
 8016358:	2200      	movs	r2, #0
 801635a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	2200      	movs	r2, #0
 8016360:	f042 0201 	orr.w	r2, r2, #1
 8016364:	711a      	strb	r2, [r3, #4]
 8016366:	2200      	movs	r2, #0
 8016368:	715a      	strb	r2, [r3, #5]
 801636a:	2200      	movs	r2, #0
 801636c:	719a      	strb	r2, [r3, #6]
 801636e:	2200      	movs	r2, #0
 8016370:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 8016372:	683a      	ldr	r2, [r7, #0]
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8016378:	f002 fce8 	bl	8018d4c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801637c:	f002 fcce 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8016380:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	689b      	ldr	r3, [r3, #8]
 8016386:	b2db      	uxtb	r3, r3
}
 8016388:	4618      	mov	r0, r3
 801638a:	3710      	adds	r7, #16
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}

08016390 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b084      	sub	sp, #16
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
 8016398:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801639a:	f002 fd15 	bl	8018dc8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801639e:	f002 fcb1 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80163a2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	2200      	movs	r2, #0
 80163a8:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 80163ac:	701a      	strb	r2, [r3, #0]
 80163ae:	2200      	movs	r2, #0
 80163b0:	705a      	strb	r2, [r3, #1]
 80163b2:	2200      	movs	r2, #0
 80163b4:	709a      	strb	r2, [r3, #2]
 80163b6:	2200      	movs	r2, #0
 80163b8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	2200      	movs	r2, #0
 80163be:	f042 0201 	orr.w	r2, r2, #1
 80163c2:	711a      	strb	r2, [r3, #4]
 80163c4:	2200      	movs	r2, #0
 80163c6:	715a      	strb	r2, [r3, #5]
 80163c8:	2200      	movs	r2, #0
 80163ca:	719a      	strb	r2, [r3, #6]
 80163cc:	2200      	movs	r2, #0
 80163ce:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 80163d0:	683a      	ldr	r2, [r7, #0]
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80163d6:	f002 fcb9 	bl	8018d4c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80163da:	f002 fc9f 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 80163de:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	689b      	ldr	r3, [r3, #8]
 80163e4:	b2db      	uxtb	r3, r3
}
 80163e6:	4618      	mov	r0, r3
 80163e8:	3710      	adds	r7, #16
 80163ea:	46bd      	mov	sp, r7
 80163ec:	bd80      	pop	{r7, pc}

080163ee <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 80163ee:	b580      	push	{r7, lr}
 80163f0:	b084      	sub	sp, #16
 80163f2:	af00      	add	r7, sp, #0
 80163f4:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80163f6:	f002 fce7 	bl	8018dc8 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80163fa:	f002 fc83 	bl	8018d04 <THREAD_Get_OTCmdPayloadBuffer>
 80163fe:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	2200      	movs	r2, #0
 8016404:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8016408:	701a      	strb	r2, [r3, #0]
 801640a:	2200      	movs	r2, #0
 801640c:	705a      	strb	r2, [r3, #1]
 801640e:	2200      	movs	r2, #0
 8016410:	709a      	strb	r2, [r3, #2]
 8016412:	2200      	movs	r2, #0
 8016414:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	2200      	movs	r2, #0
 801641a:	711a      	strb	r2, [r3, #4]
 801641c:	2200      	movs	r2, #0
 801641e:	715a      	strb	r2, [r3, #5]
 8016420:	2200      	movs	r2, #0
 8016422:	719a      	strb	r2, [r3, #6]
 8016424:	2200      	movs	r2, #0
 8016426:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8016428:	f002 fc90 	bl	8018d4c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801642c:	f002 fc76 	bl	8018d1c <THREAD_Get_OTCmdRspPayloadBuffer>
 8016430:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	689b      	ldr	r3, [r3, #8]
 8016436:	b2db      	uxtb	r3, r3
}
 8016438:	4618      	mov	r0, r3
 801643a:	3710      	adds	r7, #16
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}

08016440 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8016440:	b580      	push	{r7, lr}
 8016442:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8016444:	f002 ff44 	bl	80192d0 <HW_IPCC_Enable>

  return;
 8016448:	bf00      	nop
}
 801644a:	bd80      	pop	{r7, pc}

0801644c <TL_Init>:


void TL_Init( void )
{
 801644c:	b580      	push	{r7, lr}
 801644e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8016450:	4b0f      	ldr	r3, [pc, #60]	; (8016490 <TL_Init+0x44>)
 8016452:	4a10      	ldr	r2, [pc, #64]	; (8016494 <TL_Init+0x48>)
 8016454:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8016456:	4b0e      	ldr	r3, [pc, #56]	; (8016490 <TL_Init+0x44>)
 8016458:	4a0f      	ldr	r2, [pc, #60]	; (8016498 <TL_Init+0x4c>)
 801645a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 801645c:	4b0c      	ldr	r3, [pc, #48]	; (8016490 <TL_Init+0x44>)
 801645e:	4a0f      	ldr	r2, [pc, #60]	; (801649c <TL_Init+0x50>)
 8016460:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8016462:	4b0b      	ldr	r3, [pc, #44]	; (8016490 <TL_Init+0x44>)
 8016464:	4a0e      	ldr	r2, [pc, #56]	; (80164a0 <TL_Init+0x54>)
 8016466:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8016468:	4b09      	ldr	r3, [pc, #36]	; (8016490 <TL_Init+0x44>)
 801646a:	4a0e      	ldr	r2, [pc, #56]	; (80164a4 <TL_Init+0x58>)
 801646c:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 801646e:	4b08      	ldr	r3, [pc, #32]	; (8016490 <TL_Init+0x44>)
 8016470:	4a0d      	ldr	r2, [pc, #52]	; (80164a8 <TL_Init+0x5c>)
 8016472:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8016474:	4b06      	ldr	r3, [pc, #24]	; (8016490 <TL_Init+0x44>)
 8016476:	4a0d      	ldr	r2, [pc, #52]	; (80164ac <TL_Init+0x60>)
 8016478:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 801647a:	4b05      	ldr	r3, [pc, #20]	; (8016490 <TL_Init+0x44>)
 801647c:	4a0c      	ldr	r2, [pc, #48]	; (80164b0 <TL_Init+0x64>)
 801647e:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8016480:	4b03      	ldr	r3, [pc, #12]	; (8016490 <TL_Init+0x44>)
 8016482:	4a0c      	ldr	r2, [pc, #48]	; (80164b4 <TL_Init+0x68>)
 8016484:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8016486:	f002 ff33 	bl	80192f0 <HW_IPCC_Init>

  return;
 801648a:	bf00      	nop
}
 801648c:	bd80      	pop	{r7, pc}
 801648e:	bf00      	nop
 8016490:	20030000 	.word	0x20030000
 8016494:	20030024 	.word	0x20030024
 8016498:	20030044 	.word	0x20030044
 801649c:	20030054 	.word	0x20030054
 80164a0:	20030060 	.word	0x20030060
 80164a4:	20030068 	.word	0x20030068
 80164a8:	20030070 	.word	0x20030070
 80164ac:	2003008c 	.word	0x2003008c
 80164b0:	20030090 	.word	0x20030090
 80164b4:	2003009c 	.word	0x2003009c

080164b8 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80164be:	e009      	b.n	80164d4 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80164c0:	1d3b      	adds	r3, r7, #4
 80164c2:	4619      	mov	r1, r3
 80164c4:	4808      	ldr	r0, [pc, #32]	; (80164e8 <HW_IPCC_BLE_RxEvtNot+0x30>)
 80164c6:	f7ff feb8 	bl	801623a <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 80164ca:	4b08      	ldr	r3, [pc, #32]	; (80164ec <HW_IPCC_BLE_RxEvtNot+0x34>)
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	4610      	mov	r0, r2
 80164d2:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80164d4:	4804      	ldr	r0, [pc, #16]	; (80164e8 <HW_IPCC_BLE_RxEvtNot+0x30>)
 80164d6:	f7ff fe29 	bl	801612c <LST_is_empty>
 80164da:	4603      	mov	r3, r0
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d0ef      	beq.n	80164c0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80164e0:	bf00      	nop
}
 80164e2:	3708      	adds	r7, #8
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	20030828 	.word	0x20030828
 80164ec:	2002763c 	.word	0x2002763c

080164f0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80164f4:	4b02      	ldr	r3, [pc, #8]	; (8016500 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	4798      	blx	r3

  return;
 80164fa:	bf00      	nop
}
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop
 8016500:	20027640 	.word	0x20027640

08016504 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b084      	sub	sp, #16
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016510:	480d      	ldr	r0, [pc, #52]	; (8016548 <TL_SYS_Init+0x44>)
 8016512:	f7ff fdfb 	bl	801610c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016516:	4b0d      	ldr	r3, [pc, #52]	; (801654c <TL_SYS_Init+0x48>)
 8016518:	68db      	ldr	r3, [r3, #12]
 801651a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	689a      	ldr	r2, [r3, #8]
 8016520:	68bb      	ldr	r3, [r7, #8]
 8016522:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016524:	68bb      	ldr	r3, [r7, #8]
 8016526:	4a08      	ldr	r2, [pc, #32]	; (8016548 <TL_SYS_Init+0x44>)
 8016528:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801652a:	f002 ff0f 	bl	801934c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	4a07      	ldr	r2, [pc, #28]	; (8016550 <TL_SYS_Init+0x4c>)
 8016534:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	685b      	ldr	r3, [r3, #4]
 801653a:	4a06      	ldr	r2, [pc, #24]	; (8016554 <TL_SYS_Init+0x50>)
 801653c:	6013      	str	r3, [r2, #0]

  return 0;
 801653e:	2300      	movs	r3, #0
}
 8016540:	4618      	mov	r0, r3
 8016542:	3710      	adds	r7, #16
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}
 8016548:	20030830 	.word	0x20030830
 801654c:	20030000 	.word	0x20030000
 8016550:	20027644 	.word	0x20027644
 8016554:	20027648 	.word	0x20027648

08016558 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b082      	sub	sp, #8
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
 8016560:	460b      	mov	r3, r1
 8016562:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8016564:	4b05      	ldr	r3, [pc, #20]	; (801657c <TL_SYS_SendCmd+0x24>)
 8016566:	68db      	ldr	r3, [r3, #12]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	2210      	movs	r2, #16
 801656c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 801656e:	f002 fef7 	bl	8019360 <HW_IPCC_SYS_SendCmd>

  return 0;
 8016572:	2300      	movs	r3, #0
}
 8016574:	4618      	mov	r0, r3
 8016576:	3708      	adds	r7, #8
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}
 801657c:	20030000 	.word	0x20030000

08016580 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016584:	4b04      	ldr	r3, [pc, #16]	; (8016598 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	4a04      	ldr	r2, [pc, #16]	; (801659c <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 801658a:	68d2      	ldr	r2, [r2, #12]
 801658c:	6812      	ldr	r2, [r2, #0]
 801658e:	4610      	mov	r0, r2
 8016590:	4798      	blx	r3

  return;
 8016592:	bf00      	nop
}
 8016594:	bd80      	pop	{r7, pc}
 8016596:	bf00      	nop
 8016598:	20027644 	.word	0x20027644
 801659c:	20030000 	.word	0x20030000

080165a0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b082      	sub	sp, #8
 80165a4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80165a6:	e009      	b.n	80165bc <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80165a8:	1d3b      	adds	r3, r7, #4
 80165aa:	4619      	mov	r1, r3
 80165ac:	4808      	ldr	r0, [pc, #32]	; (80165d0 <HW_IPCC_SYS_EvtNot+0x30>)
 80165ae:	f7ff fe44 	bl	801623a <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 80165b2:	4b08      	ldr	r3, [pc, #32]	; (80165d4 <HW_IPCC_SYS_EvtNot+0x34>)
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	687a      	ldr	r2, [r7, #4]
 80165b8:	4610      	mov	r0, r2
 80165ba:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80165bc:	4804      	ldr	r0, [pc, #16]	; (80165d0 <HW_IPCC_SYS_EvtNot+0x30>)
 80165be:	f7ff fdb5 	bl	801612c <LST_is_empty>
 80165c2:	4603      	mov	r3, r0
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d0ef      	beq.n	80165a8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80165c8:	bf00      	nop
}
 80165ca:	3708      	adds	r7, #8
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}
 80165d0:	20030830 	.word	0x20030830
 80165d4:	20027648 	.word	0x20027648

080165d8 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b084      	sub	sp, #16
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 80165e0:	4b0a      	ldr	r3, [pc, #40]	; (801660c <TL_THREAD_Init+0x34>)
 80165e2:	689b      	ldr	r3, [r3, #8]
 80165e4:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	685a      	ldr	r2, [r3, #4]
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681a      	ldr	r2, [r3, #0]
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	689a      	ldr	r2, [r3, #8]
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 80165fe:	f002 fed5 	bl	80193ac <HW_IPCC_THREAD_Init>

  return;
 8016602:	bf00      	nop
}
 8016604:	3710      	adds	r7, #16
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
 801660a:	bf00      	nop
 801660c:	20030000 	.word	0x20030000

08016610 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8016610:	b580      	push	{r7, lr}
 8016612:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8016614:	4b04      	ldr	r3, [pc, #16]	; (8016628 <TL_OT_SendCmd+0x18>)
 8016616:	689b      	ldr	r3, [r3, #8]
 8016618:	689b      	ldr	r3, [r3, #8]
 801661a:	2208      	movs	r2, #8
 801661c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 801661e:	f002 fed3 	bl	80193c8 <HW_IPCC_OT_SendCmd>

  return;
 8016622:	bf00      	nop
}
 8016624:	bd80      	pop	{r7, pc}
 8016626:	bf00      	nop
 8016628:	20030000 	.word	0x20030000

0801662c <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 801662c:	b580      	push	{r7, lr}
 801662e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8016630:	4b04      	ldr	r3, [pc, #16]	; (8016644 <TL_CLI_SendCmd+0x18>)
 8016632:	689b      	ldr	r3, [r3, #8]
 8016634:	685b      	ldr	r3, [r3, #4]
 8016636:	220a      	movs	r2, #10
 8016638:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 801663a:	f002 fed3 	bl	80193e4 <HW_IPCC_CLI_SendCmd>

  return;
 801663e:	bf00      	nop
}
 8016640:	bd80      	pop	{r7, pc}
 8016642:	bf00      	nop
 8016644:	20030000 	.word	0x20030000

08016648 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 8016648:	b580      	push	{r7, lr}
 801664a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 801664c:	4b04      	ldr	r3, [pc, #16]	; (8016660 <TL_THREAD_SendAck+0x18>)
 801664e:	689b      	ldr	r3, [r3, #8]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	220d      	movs	r2, #13
 8016654:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8016656:	f002 fecf 	bl	80193f8 <HW_IPCC_THREAD_SendAck>

  return;
 801665a:	bf00      	nop
}
 801665c:	bd80      	pop	{r7, pc}
 801665e:	bf00      	nop
 8016660:	20030000 	.word	0x20030000

08016664 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8016664:	b580      	push	{r7, lr}
 8016666:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8016668:	4b04      	ldr	r3, [pc, #16]	; (801667c <TL_THREAD_CliSendAck+0x18>)
 801666a:	689b      	ldr	r3, [r3, #8]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	220d      	movs	r2, #13
 8016670:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8016672:	f002 fecf 	bl	8019414 <HW_IPCC_THREAD_CliSendAck>

  return;
 8016676:	bf00      	nop
}
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop
 801667c:	20030000 	.word	0x20030000

08016680 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8016684:	4b03      	ldr	r3, [pc, #12]	; (8016694 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8016686:	689b      	ldr	r3, [r3, #8]
 8016688:	689b      	ldr	r3, [r3, #8]
 801668a:	4618      	mov	r0, r3
 801668c:	f002 fb82 	bl	8018d94 <TL_OT_CmdEvtReceived>

  return;
 8016690:	bf00      	nop
}
 8016692:	bd80      	pop	{r7, pc}
 8016694:	20030000 	.word	0x20030000

08016698 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8016698:	b580      	push	{r7, lr}
 801669a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 801669c:	4b03      	ldr	r3, [pc, #12]	; (80166ac <HW_IPCC_THREAD_EvtNot+0x14>)
 801669e:	689b      	ldr	r3, [r3, #8]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	4618      	mov	r0, r3
 80166a4:	f002 fb80 	bl	8018da8 <TL_THREAD_NotReceived>

  return;
 80166a8:	bf00      	nop
}
 80166aa:	bd80      	pop	{r7, pc}
 80166ac:	20030000 	.word	0x20030000

080166b0 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 80166b4:	4b03      	ldr	r3, [pc, #12]	; (80166c4 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 80166b6:	689b      	ldr	r3, [r3, #8]
 80166b8:	685b      	ldr	r3, [r3, #4]
 80166ba:	4618      	mov	r0, r3
 80166bc:	f002 fc22 	bl	8018f04 <TL_THREAD_CliNotReceived>

  return;
 80166c0:	bf00      	nop
}
 80166c2:	bd80      	pop	{r7, pc}
 80166c4:	20030000 	.word	0x20030000

080166c8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b082      	sub	sp, #8
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80166d0:	4817      	ldr	r0, [pc, #92]	; (8016730 <TL_MM_Init+0x68>)
 80166d2:	f7ff fd1b 	bl	801610c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80166d6:	4817      	ldr	r0, [pc, #92]	; (8016734 <TL_MM_Init+0x6c>)
 80166d8:	f7ff fd18 	bl	801610c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80166dc:	4b16      	ldr	r3, [pc, #88]	; (8016738 <TL_MM_Init+0x70>)
 80166de:	691b      	ldr	r3, [r3, #16]
 80166e0:	4a16      	ldr	r2, [pc, #88]	; (801673c <TL_MM_Init+0x74>)
 80166e2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80166e4:	4b15      	ldr	r3, [pc, #84]	; (801673c <TL_MM_Init+0x74>)
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	687a      	ldr	r2, [r7, #4]
 80166ea:	6892      	ldr	r2, [r2, #8]
 80166ec:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80166ee:	4b13      	ldr	r3, [pc, #76]	; (801673c <TL_MM_Init+0x74>)
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	687a      	ldr	r2, [r7, #4]
 80166f4:	68d2      	ldr	r2, [r2, #12]
 80166f6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80166f8:	4b10      	ldr	r3, [pc, #64]	; (801673c <TL_MM_Init+0x74>)
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	4a0c      	ldr	r2, [pc, #48]	; (8016730 <TL_MM_Init+0x68>)
 80166fe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016700:	4b0e      	ldr	r3, [pc, #56]	; (801673c <TL_MM_Init+0x74>)
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	687a      	ldr	r2, [r7, #4]
 8016706:	6812      	ldr	r2, [r2, #0]
 8016708:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801670a:	4b0c      	ldr	r3, [pc, #48]	; (801673c <TL_MM_Init+0x74>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	6852      	ldr	r2, [r2, #4]
 8016712:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8016714:	4b09      	ldr	r3, [pc, #36]	; (801673c <TL_MM_Init+0x74>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	687a      	ldr	r2, [r7, #4]
 801671a:	6912      	ldr	r2, [r2, #16]
 801671c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801671e:	4b07      	ldr	r3, [pc, #28]	; (801673c <TL_MM_Init+0x74>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	687a      	ldr	r2, [r7, #4]
 8016724:	6952      	ldr	r2, [r2, #20]
 8016726:	619a      	str	r2, [r3, #24]

  return;
 8016728:	bf00      	nop
}
 801672a:	3708      	adds	r7, #8
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}
 8016730:	200300a8 	.word	0x200300a8
 8016734:	20027634 	.word	0x20027634
 8016738:	20030000 	.word	0x20030000
 801673c:	2002764c 	.word	0x2002764c

08016740 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8016748:	6879      	ldr	r1, [r7, #4]
 801674a:	4805      	ldr	r0, [pc, #20]	; (8016760 <TL_MM_EvtDone+0x20>)
 801674c:	f7ff fd32 	bl	80161b4 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8016750:	4804      	ldr	r0, [pc, #16]	; (8016764 <TL_MM_EvtDone+0x24>)
 8016752:	f002 fe91 	bl	8019478 <HW_IPCC_MM_SendFreeBuf>

  return;
 8016756:	bf00      	nop
}
 8016758:	3708      	adds	r7, #8
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}
 801675e:	bf00      	nop
 8016760:	20027634 	.word	0x20027634
 8016764:	08016769 	.word	0x08016769

08016768 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b082      	sub	sp, #8
 801676c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801676e:	e00c      	b.n	801678a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8016770:	1d3b      	adds	r3, r7, #4
 8016772:	4619      	mov	r1, r3
 8016774:	480a      	ldr	r0, [pc, #40]	; (80167a0 <SendFreeBuf+0x38>)
 8016776:	f7ff fd60 	bl	801623a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801677a:	4b0a      	ldr	r3, [pc, #40]	; (80167a4 <SendFreeBuf+0x3c>)
 801677c:	691b      	ldr	r3, [r3, #16]
 801677e:	691b      	ldr	r3, [r3, #16]
 8016780:	687a      	ldr	r2, [r7, #4]
 8016782:	4611      	mov	r1, r2
 8016784:	4618      	mov	r0, r3
 8016786:	f7ff fd15 	bl	80161b4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801678a:	4805      	ldr	r0, [pc, #20]	; (80167a0 <SendFreeBuf+0x38>)
 801678c:	f7ff fcce 	bl	801612c <LST_is_empty>
 8016790:	4603      	mov	r3, r0
 8016792:	2b00      	cmp	r3, #0
 8016794:	d0ec      	beq.n	8016770 <SendFreeBuf+0x8>
  }

  return;
 8016796:	bf00      	nop
}
 8016798:	3708      	adds	r7, #8
 801679a:	46bd      	mov	sp, r7
 801679c:	bd80      	pop	{r7, pc}
 801679e:	bf00      	nop
 80167a0:	20027634 	.word	0x20027634
 80167a4:	20030000 	.word	0x20030000

080167a8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80167ac:	4805      	ldr	r0, [pc, #20]	; (80167c4 <TL_TRACES_Init+0x1c>)
 80167ae:	f7ff fcad 	bl	801610c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80167b2:	4b05      	ldr	r3, [pc, #20]	; (80167c8 <TL_TRACES_Init+0x20>)
 80167b4:	695b      	ldr	r3, [r3, #20]
 80167b6:	4a03      	ldr	r2, [pc, #12]	; (80167c4 <TL_TRACES_Init+0x1c>)
 80167b8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80167ba:	f002 fe93 	bl	80194e4 <HW_IPCC_TRACES_Init>

  return;
 80167be:	bf00      	nop
}
 80167c0:	bd80      	pop	{r7, pc}
 80167c2:	bf00      	nop
 80167c4:	200300b0 	.word	0x200300b0
 80167c8:	20030000 	.word	0x20030000

080167cc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b082      	sub	sp, #8
 80167d0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80167d2:	e008      	b.n	80167e6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80167d4:	1d3b      	adds	r3, r7, #4
 80167d6:	4619      	mov	r1, r3
 80167d8:	4808      	ldr	r0, [pc, #32]	; (80167fc <HW_IPCC_TRACES_EvtNot+0x30>)
 80167da:	f7ff fd2e 	bl	801623a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	4618      	mov	r0, r3
 80167e2:	f7ea fd1b 	bl	800121c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80167e6:	4805      	ldr	r0, [pc, #20]	; (80167fc <HW_IPCC_TRACES_EvtNot+0x30>)
 80167e8:	f7ff fca0 	bl	801612c <LST_is_empty>
 80167ec:	4603      	mov	r3, r0
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d0f0      	beq.n	80167d4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80167f2:	bf00      	nop
}
 80167f4:	3708      	adds	r7, #8
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}
 80167fa:	bf00      	nop
 80167fc:	200300b0 	.word	0x200300b0

08016800 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b084      	sub	sp, #16
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
 8016808:	460b      	mov	r3, r1
 801680a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801680c:	2300      	movs	r3, #0
 801680e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	7c1b      	ldrb	r3, [r3, #16]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d115      	bne.n	8016844 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016818:	f44f 7300 	mov.w	r3, #512	; 0x200
 801681c:	2202      	movs	r2, #2
 801681e:	2181      	movs	r1, #129	; 0x81
 8016820:	6878      	ldr	r0, [r7, #4]
 8016822:	f003 fa37 	bl	8019c94 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	2201      	movs	r2, #1
 801682a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801682c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016830:	2202      	movs	r2, #2
 8016832:	2101      	movs	r1, #1
 8016834:	6878      	ldr	r0, [r7, #4]
 8016836:	f003 fa2d 	bl	8019c94 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2201      	movs	r2, #1
 801683e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8016842:	e012      	b.n	801686a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016844:	2340      	movs	r3, #64	; 0x40
 8016846:	2202      	movs	r2, #2
 8016848:	2181      	movs	r1, #129	; 0x81
 801684a:	6878      	ldr	r0, [r7, #4]
 801684c:	f003 fa22 	bl	8019c94 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	2201      	movs	r2, #1
 8016854:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016856:	2340      	movs	r3, #64	; 0x40
 8016858:	2202      	movs	r2, #2
 801685a:	2101      	movs	r1, #1
 801685c:	6878      	ldr	r0, [r7, #4]
 801685e:	f003 fa19 	bl	8019c94 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	2201      	movs	r2, #1
 8016866:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801686a:	2308      	movs	r3, #8
 801686c:	2203      	movs	r2, #3
 801686e:	2182      	movs	r1, #130	; 0x82
 8016870:	6878      	ldr	r0, [r7, #4]
 8016872:	f003 fa0f 	bl	8019c94 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	2201      	movs	r2, #1
 801687a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801687c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8016880:	f003 fb60 	bl	8019f44 <USBD_static_malloc>
 8016884:	4602      	mov	r2, r0
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016892:	2b00      	cmp	r3, #0
 8016894:	d102      	bne.n	801689c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8016896:	2301      	movs	r3, #1
 8016898:	73fb      	strb	r3, [r7, #15]
 801689a:	e026      	b.n	80168ea <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168a2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	2200      	movs	r2, #0
 80168b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80168b6:	68bb      	ldr	r3, [r7, #8]
 80168b8:	2200      	movs	r2, #0
 80168ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	7c1b      	ldrb	r3, [r3, #16]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d109      	bne.n	80168da <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80168c6:	68bb      	ldr	r3, [r7, #8]
 80168c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80168cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80168d0:	2101      	movs	r1, #1
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	f003 fac9 	bl	8019e6a <USBD_LL_PrepareReceive>
 80168d8:	e007      	b.n	80168ea <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80168da:	68bb      	ldr	r3, [r7, #8]
 80168dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80168e0:	2340      	movs	r3, #64	; 0x40
 80168e2:	2101      	movs	r1, #1
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f003 fac0 	bl	8019e6a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80168ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80168ec:	4618      	mov	r0, r3
 80168ee:	3710      	adds	r7, #16
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}

080168f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b084      	sub	sp, #16
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	460b      	mov	r3, r1
 80168fe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8016900:	2300      	movs	r3, #0
 8016902:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8016904:	2181      	movs	r1, #129	; 0x81
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f003 f9ea 	bl	8019ce0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	2200      	movs	r2, #0
 8016910:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8016912:	2101      	movs	r1, #1
 8016914:	6878      	ldr	r0, [r7, #4]
 8016916:	f003 f9e3 	bl	8019ce0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	2200      	movs	r2, #0
 801691e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8016922:	2182      	movs	r1, #130	; 0x82
 8016924:	6878      	ldr	r0, [r7, #4]
 8016926:	f003 f9db 	bl	8019ce0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2200      	movs	r2, #0
 801692e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016936:	2b00      	cmp	r3, #0
 8016938:	d00e      	beq.n	8016958 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016940:	685b      	ldr	r3, [r3, #4]
 8016942:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801694a:	4618      	mov	r0, r3
 801694c:	f003 fb08 	bl	8019f60 <USBD_static_free>
    pdev->pClassData = NULL;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2200      	movs	r2, #0
 8016954:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8016958:	7bfb      	ldrb	r3, [r7, #15]
}
 801695a:	4618      	mov	r0, r3
 801695c:	3710      	adds	r7, #16
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}

08016962 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8016962:	b580      	push	{r7, lr}
 8016964:	b086      	sub	sp, #24
 8016966:	af00      	add	r7, sp, #0
 8016968:	6078      	str	r0, [r7, #4]
 801696a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016972:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8016974:	2300      	movs	r3, #0
 8016976:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8016978:	2300      	movs	r3, #0
 801697a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 801697c:	2300      	movs	r3, #0
 801697e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016980:	683b      	ldr	r3, [r7, #0]
 8016982:	781b      	ldrb	r3, [r3, #0]
 8016984:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016988:	2b00      	cmp	r3, #0
 801698a:	d039      	beq.n	8016a00 <USBD_CDC_Setup+0x9e>
 801698c:	2b20      	cmp	r3, #32
 801698e:	d17c      	bne.n	8016a8a <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8016990:	683b      	ldr	r3, [r7, #0]
 8016992:	88db      	ldrh	r3, [r3, #6]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d029      	beq.n	80169ec <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8016998:	683b      	ldr	r3, [r7, #0]
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	b25b      	sxtb	r3, r3
 801699e:	2b00      	cmp	r3, #0
 80169a0:	da11      	bge.n	80169c6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80169a8:	689b      	ldr	r3, [r3, #8]
 80169aa:	683a      	ldr	r2, [r7, #0]
 80169ac:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80169ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80169b0:	683a      	ldr	r2, [r7, #0]
 80169b2:	88d2      	ldrh	r2, [r2, #6]
 80169b4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80169b6:	6939      	ldr	r1, [r7, #16]
 80169b8:	683b      	ldr	r3, [r7, #0]
 80169ba:	88db      	ldrh	r3, [r3, #6]
 80169bc:	461a      	mov	r2, r3
 80169be:	6878      	ldr	r0, [r7, #4]
 80169c0:	f001 fa10 	bl	8017de4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80169c4:	e068      	b.n	8016a98 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	785a      	ldrb	r2, [r3, #1]
 80169ca:	693b      	ldr	r3, [r7, #16]
 80169cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	88db      	ldrh	r3, [r3, #6]
 80169d4:	b2da      	uxtb	r2, r3
 80169d6:	693b      	ldr	r3, [r7, #16]
 80169d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80169dc:	6939      	ldr	r1, [r7, #16]
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	88db      	ldrh	r3, [r3, #6]
 80169e2:	461a      	mov	r2, r3
 80169e4:	6878      	ldr	r0, [r7, #4]
 80169e6:	f001 fa2b 	bl	8017e40 <USBD_CtlPrepareRx>
      break;
 80169ea:	e055      	b.n	8016a98 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80169f2:	689b      	ldr	r3, [r3, #8]
 80169f4:	683a      	ldr	r2, [r7, #0]
 80169f6:	7850      	ldrb	r0, [r2, #1]
 80169f8:	2200      	movs	r2, #0
 80169fa:	6839      	ldr	r1, [r7, #0]
 80169fc:	4798      	blx	r3
      break;
 80169fe:	e04b      	b.n	8016a98 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016a00:	683b      	ldr	r3, [r7, #0]
 8016a02:	785b      	ldrb	r3, [r3, #1]
 8016a04:	2b0a      	cmp	r3, #10
 8016a06:	d017      	beq.n	8016a38 <USBD_CDC_Setup+0xd6>
 8016a08:	2b0b      	cmp	r3, #11
 8016a0a:	d029      	beq.n	8016a60 <USBD_CDC_Setup+0xfe>
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d133      	bne.n	8016a78 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a16:	2b03      	cmp	r3, #3
 8016a18:	d107      	bne.n	8016a2a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8016a1a:	f107 030c 	add.w	r3, r7, #12
 8016a1e:	2202      	movs	r2, #2
 8016a20:	4619      	mov	r1, r3
 8016a22:	6878      	ldr	r0, [r7, #4]
 8016a24:	f001 f9de 	bl	8017de4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016a28:	e02e      	b.n	8016a88 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8016a2a:	6839      	ldr	r1, [r7, #0]
 8016a2c:	6878      	ldr	r0, [r7, #4]
 8016a2e:	f001 f96e 	bl	8017d0e <USBD_CtlError>
            ret = USBD_FAIL;
 8016a32:	2302      	movs	r3, #2
 8016a34:	75fb      	strb	r3, [r7, #23]
          break;
 8016a36:	e027      	b.n	8016a88 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a3e:	2b03      	cmp	r3, #3
 8016a40:	d107      	bne.n	8016a52 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8016a42:	f107 030f 	add.w	r3, r7, #15
 8016a46:	2201      	movs	r2, #1
 8016a48:	4619      	mov	r1, r3
 8016a4a:	6878      	ldr	r0, [r7, #4]
 8016a4c:	f001 f9ca 	bl	8017de4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016a50:	e01a      	b.n	8016a88 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8016a52:	6839      	ldr	r1, [r7, #0]
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f001 f95a 	bl	8017d0e <USBD_CtlError>
            ret = USBD_FAIL;
 8016a5a:	2302      	movs	r3, #2
 8016a5c:	75fb      	strb	r3, [r7, #23]
          break;
 8016a5e:	e013      	b.n	8016a88 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a66:	2b03      	cmp	r3, #3
 8016a68:	d00d      	beq.n	8016a86 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8016a6a:	6839      	ldr	r1, [r7, #0]
 8016a6c:	6878      	ldr	r0, [r7, #4]
 8016a6e:	f001 f94e 	bl	8017d0e <USBD_CtlError>
            ret = USBD_FAIL;
 8016a72:	2302      	movs	r3, #2
 8016a74:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016a76:	e006      	b.n	8016a86 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8016a78:	6839      	ldr	r1, [r7, #0]
 8016a7a:	6878      	ldr	r0, [r7, #4]
 8016a7c:	f001 f947 	bl	8017d0e <USBD_CtlError>
          ret = USBD_FAIL;
 8016a80:	2302      	movs	r3, #2
 8016a82:	75fb      	strb	r3, [r7, #23]
          break;
 8016a84:	e000      	b.n	8016a88 <USBD_CDC_Setup+0x126>
          break;
 8016a86:	bf00      	nop
      }
      break;
 8016a88:	e006      	b.n	8016a98 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8016a8a:	6839      	ldr	r1, [r7, #0]
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	f001 f93e 	bl	8017d0e <USBD_CtlError>
      ret = USBD_FAIL;
 8016a92:	2302      	movs	r3, #2
 8016a94:	75fb      	strb	r3, [r7, #23]
      break;
 8016a96:	bf00      	nop
  }

  return ret;
 8016a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3718      	adds	r7, #24
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}

08016aa2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016aa2:	b580      	push	{r7, lr}
 8016aa4:	b084      	sub	sp, #16
 8016aa6:	af00      	add	r7, sp, #0
 8016aa8:	6078      	str	r0, [r7, #4]
 8016aaa:	460b      	mov	r3, r1
 8016aac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ab4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016abc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d037      	beq.n	8016b38 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8016ac8:	78fa      	ldrb	r2, [r7, #3]
 8016aca:	6879      	ldr	r1, [r7, #4]
 8016acc:	4613      	mov	r3, r2
 8016ace:	009b      	lsls	r3, r3, #2
 8016ad0:	4413      	add	r3, r2
 8016ad2:	009b      	lsls	r3, r3, #2
 8016ad4:	440b      	add	r3, r1
 8016ad6:	331c      	adds	r3, #28
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d026      	beq.n	8016b2c <USBD_CDC_DataIn+0x8a>
 8016ade:	78fa      	ldrb	r2, [r7, #3]
 8016ae0:	6879      	ldr	r1, [r7, #4]
 8016ae2:	4613      	mov	r3, r2
 8016ae4:	009b      	lsls	r3, r3, #2
 8016ae6:	4413      	add	r3, r2
 8016ae8:	009b      	lsls	r3, r3, #2
 8016aea:	440b      	add	r3, r1
 8016aec:	331c      	adds	r3, #28
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	78fa      	ldrb	r2, [r7, #3]
 8016af2:	68b9      	ldr	r1, [r7, #8]
 8016af4:	0152      	lsls	r2, r2, #5
 8016af6:	440a      	add	r2, r1
 8016af8:	3238      	adds	r2, #56	; 0x38
 8016afa:	6812      	ldr	r2, [r2, #0]
 8016afc:	fbb3 f1f2 	udiv	r1, r3, r2
 8016b00:	fb02 f201 	mul.w	r2, r2, r1
 8016b04:	1a9b      	subs	r3, r3, r2
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d110      	bne.n	8016b2c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8016b0a:	78fa      	ldrb	r2, [r7, #3]
 8016b0c:	6879      	ldr	r1, [r7, #4]
 8016b0e:	4613      	mov	r3, r2
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	4413      	add	r3, r2
 8016b14:	009b      	lsls	r3, r3, #2
 8016b16:	440b      	add	r3, r1
 8016b18:	331c      	adds	r3, #28
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016b1e:	78f9      	ldrb	r1, [r7, #3]
 8016b20:	2300      	movs	r3, #0
 8016b22:	2200      	movs	r2, #0
 8016b24:	6878      	ldr	r0, [r7, #4]
 8016b26:	f003 f97d 	bl	8019e24 <USBD_LL_Transmit>
 8016b2a:	e003      	b.n	8016b34 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	2200      	movs	r2, #0
 8016b30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8016b34:	2300      	movs	r3, #0
 8016b36:	e000      	b.n	8016b3a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8016b38:	2302      	movs	r3, #2
  }
}
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	3710      	adds	r7, #16
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}

08016b42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016b42:	b580      	push	{r7, lr}
 8016b44:	b084      	sub	sp, #16
 8016b46:	af00      	add	r7, sp, #0
 8016b48:	6078      	str	r0, [r7, #4]
 8016b4a:	460b      	mov	r3, r1
 8016b4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b54:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016b56:	78fb      	ldrb	r3, [r7, #3]
 8016b58:	4619      	mov	r1, r3
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	f003 f9a8 	bl	8019eb0 <USBD_LL_GetRxDataSize>
 8016b60:	4602      	mov	r2, r0
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d00d      	beq.n	8016b8e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016b78:	68db      	ldr	r3, [r3, #12]
 8016b7a:	68fa      	ldr	r2, [r7, #12]
 8016b7c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8016b80:	68fa      	ldr	r2, [r7, #12]
 8016b82:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8016b86:	4611      	mov	r1, r2
 8016b88:	4798      	blx	r3

    return USBD_OK;
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	e000      	b.n	8016b90 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8016b8e:	2302      	movs	r3, #2
  }
}
 8016b90:	4618      	mov	r0, r3
 8016b92:	3710      	adds	r7, #16
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bd80      	pop	{r7, pc}

08016b98 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b084      	sub	sp, #16
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ba6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d015      	beq.n	8016bde <USBD_CDC_EP0_RxReady+0x46>
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8016bb8:	2bff      	cmp	r3, #255	; 0xff
 8016bba:	d010      	beq.n	8016bde <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016bc2:	689b      	ldr	r3, [r3, #8]
 8016bc4:	68fa      	ldr	r2, [r7, #12]
 8016bc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8016bca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8016bcc:	68fa      	ldr	r2, [r7, #12]
 8016bce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016bd2:	b292      	uxth	r2, r2
 8016bd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	22ff      	movs	r2, #255	; 0xff
 8016bda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8016bde:	2300      	movs	r3, #0
}
 8016be0:	4618      	mov	r0, r3
 8016be2:	3710      	adds	r7, #16
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}

08016be8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016be8:	b480      	push	{r7}
 8016bea:	b083      	sub	sp, #12
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	2243      	movs	r2, #67	; 0x43
 8016bf4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8016bf6:	4b03      	ldr	r3, [pc, #12]	; (8016c04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	370c      	adds	r7, #12
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c02:	4770      	bx	lr
 8016c04:	20000110 	.word	0x20000110

08016c08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016c08:	b480      	push	{r7}
 8016c0a:	b083      	sub	sp, #12
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2243      	movs	r2, #67	; 0x43
 8016c14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8016c16:	4b03      	ldr	r3, [pc, #12]	; (8016c24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	370c      	adds	r7, #12
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c22:	4770      	bx	lr
 8016c24:	200000cc 	.word	0x200000cc

08016c28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016c28:	b480      	push	{r7}
 8016c2a:	b083      	sub	sp, #12
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	2243      	movs	r2, #67	; 0x43
 8016c34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8016c36:	4b03      	ldr	r3, [pc, #12]	; (8016c44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	370c      	adds	r7, #12
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c42:	4770      	bx	lr
 8016c44:	20000154 	.word	0x20000154

08016c48 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016c48:	b480      	push	{r7}
 8016c4a:	b083      	sub	sp, #12
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	220a      	movs	r2, #10
 8016c54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8016c56:	4b03      	ldr	r3, [pc, #12]	; (8016c64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	370c      	adds	r7, #12
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c62:	4770      	bx	lr
 8016c64:	20000088 	.word	0x20000088

08016c68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8016c68:	b480      	push	{r7}
 8016c6a:	b085      	sub	sp, #20
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8016c72:	2302      	movs	r3, #2
 8016c74:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8016c76:	683b      	ldr	r3, [r7, #0]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d005      	beq.n	8016c88 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	683a      	ldr	r2, [r7, #0]
 8016c80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8016c84:	2300      	movs	r3, #0
 8016c86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8016c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	3714      	adds	r7, #20
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c94:	4770      	bx	lr

08016c96 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8016c96:	b480      	push	{r7}
 8016c98:	b087      	sub	sp, #28
 8016c9a:	af00      	add	r7, sp, #0
 8016c9c:	60f8      	str	r0, [r7, #12]
 8016c9e:	60b9      	str	r1, [r7, #8]
 8016ca0:	4613      	mov	r3, r2
 8016ca2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016caa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8016cac:	697b      	ldr	r3, [r7, #20]
 8016cae:	68ba      	ldr	r2, [r7, #8]
 8016cb0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8016cb4:	88fa      	ldrh	r2, [r7, #6]
 8016cb6:	697b      	ldr	r3, [r7, #20]
 8016cb8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8016cbc:	2300      	movs	r3, #0
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	371c      	adds	r7, #28
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc8:	4770      	bx	lr

08016cca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8016cca:	b480      	push	{r7}
 8016ccc:	b085      	sub	sp, #20
 8016cce:	af00      	add	r7, sp, #0
 8016cd0:	6078      	str	r0, [r7, #4]
 8016cd2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016cda:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	683a      	ldr	r2, [r7, #0]
 8016ce0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8016ce4:	2300      	movs	r3, #0
}
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	3714      	adds	r7, #20
 8016cea:	46bd      	mov	sp, r7
 8016cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf0:	4770      	bx	lr

08016cf2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016cf2:	b580      	push	{r7, lr}
 8016cf4:	b084      	sub	sp, #16
 8016cf6:	af00      	add	r7, sp, #0
 8016cf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d00:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d017      	beq.n	8016d3c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	7c1b      	ldrb	r3, [r3, #16]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d109      	bne.n	8016d28 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016d1e:	2101      	movs	r1, #1
 8016d20:	6878      	ldr	r0, [r7, #4]
 8016d22:	f003 f8a2 	bl	8019e6a <USBD_LL_PrepareReceive>
 8016d26:	e007      	b.n	8016d38 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016d2e:	2340      	movs	r3, #64	; 0x40
 8016d30:	2101      	movs	r1, #1
 8016d32:	6878      	ldr	r0, [r7, #4]
 8016d34:	f003 f899 	bl	8019e6a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8016d38:	2300      	movs	r3, #0
 8016d3a:	e000      	b.n	8016d3e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8016d3c:	2302      	movs	r3, #2
  }
}
 8016d3e:	4618      	mov	r0, r3
 8016d40:	3710      	adds	r7, #16
 8016d42:	46bd      	mov	sp, r7
 8016d44:	bd80      	pop	{r7, pc}

08016d46 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016d46:	b580      	push	{r7, lr}
 8016d48:	b084      	sub	sp, #16
 8016d4a:	af00      	add	r7, sp, #0
 8016d4c:	60f8      	str	r0, [r7, #12]
 8016d4e:	60b9      	str	r1, [r7, #8]
 8016d50:	4613      	mov	r3, r2
 8016d52:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d101      	bne.n	8016d5e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016d5a:	2302      	movs	r3, #2
 8016d5c:	e01a      	b.n	8016d94 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d003      	beq.n	8016d70 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016d70:	68bb      	ldr	r3, [r7, #8]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d003      	beq.n	8016d7e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	68ba      	ldr	r2, [r7, #8]
 8016d7a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	2201      	movs	r2, #1
 8016d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	79fa      	ldrb	r2, [r7, #7]
 8016d8a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8016d8c:	68f8      	ldr	r0, [r7, #12]
 8016d8e:	f002 fee9 	bl	8019b64 <USBD_LL_Init>

  return USBD_OK;
 8016d92:	2300      	movs	r3, #0
}
 8016d94:	4618      	mov	r0, r3
 8016d96:	3710      	adds	r7, #16
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}

08016d9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016d9c:	b480      	push	{r7}
 8016d9e:	b085      	sub	sp, #20
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
 8016da4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8016da6:	2300      	movs	r3, #0
 8016da8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d006      	beq.n	8016dbe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	683a      	ldr	r2, [r7, #0]
 8016db4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8016db8:	2300      	movs	r3, #0
 8016dba:	73fb      	strb	r3, [r7, #15]
 8016dbc:	e001      	b.n	8016dc2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8016dbe:	2302      	movs	r3, #2
 8016dc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	3714      	adds	r7, #20
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dce:	4770      	bx	lr

08016dd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b082      	sub	sp, #8
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8016dd8:	6878      	ldr	r0, [r7, #4]
 8016dda:	f002 ff25 	bl	8019c28 <USBD_LL_Start>

  return USBD_OK;
 8016dde:	2300      	movs	r3, #0
}
 8016de0:	4618      	mov	r0, r3
 8016de2:	3708      	adds	r7, #8
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd80      	pop	{r7, pc}

08016de8 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b082      	sub	sp, #8
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016df6:	685b      	ldr	r3, [r3, #4]
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	6852      	ldr	r2, [r2, #4]
 8016dfc:	b2d2      	uxtb	r2, r2
 8016dfe:	4611      	mov	r1, r2
 8016e00:	6878      	ldr	r0, [r7, #4]
 8016e02:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8016e04:	6878      	ldr	r0, [r7, #4]
 8016e06:	f002 ff2a 	bl	8019c5e <USBD_LL_Stop>

  return USBD_OK;
 8016e0a:	2300      	movs	r3, #0
}
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	3708      	adds	r7, #8
 8016e10:	46bd      	mov	sp, r7
 8016e12:	bd80      	pop	{r7, pc}

08016e14 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016e14:	b480      	push	{r7}
 8016e16:	b083      	sub	sp, #12
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016e1c:	2300      	movs	r3, #0
}
 8016e1e:	4618      	mov	r0, r3
 8016e20:	370c      	adds	r7, #12
 8016e22:	46bd      	mov	sp, r7
 8016e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e28:	4770      	bx	lr

08016e2a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8016e2a:	b580      	push	{r7, lr}
 8016e2c:	b084      	sub	sp, #16
 8016e2e:	af00      	add	r7, sp, #0
 8016e30:	6078      	str	r0, [r7, #4]
 8016e32:	460b      	mov	r3, r1
 8016e34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016e36:	2302      	movs	r3, #2
 8016e38:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d00c      	beq.n	8016e5e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	78fa      	ldrb	r2, [r7, #3]
 8016e4e:	4611      	mov	r1, r2
 8016e50:	6878      	ldr	r0, [r7, #4]
 8016e52:	4798      	blx	r3
 8016e54:	4603      	mov	r3, r0
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d101      	bne.n	8016e5e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8016e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e60:	4618      	mov	r0, r3
 8016e62:	3710      	adds	r7, #16
 8016e64:	46bd      	mov	sp, r7
 8016e66:	bd80      	pop	{r7, pc}

08016e68 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	460b      	mov	r3, r1
 8016e72:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e7a:	685b      	ldr	r3, [r3, #4]
 8016e7c:	78fa      	ldrb	r2, [r7, #3]
 8016e7e:	4611      	mov	r1, r2
 8016e80:	6878      	ldr	r0, [r7, #4]
 8016e82:	4798      	blx	r3

  return USBD_OK;
 8016e84:	2300      	movs	r3, #0
}
 8016e86:	4618      	mov	r0, r3
 8016e88:	3708      	adds	r7, #8
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	bd80      	pop	{r7, pc}

08016e8e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016e8e:	b580      	push	{r7, lr}
 8016e90:	b082      	sub	sp, #8
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	6078      	str	r0, [r7, #4]
 8016e96:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016e9e:	6839      	ldr	r1, [r7, #0]
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f000 fef7 	bl	8017c94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	2201      	movs	r2, #1
 8016eaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8016ec2:	f003 031f 	and.w	r3, r3, #31
 8016ec6:	2b01      	cmp	r3, #1
 8016ec8:	d00c      	beq.n	8016ee4 <USBD_LL_SetupStage+0x56>
 8016eca:	2b01      	cmp	r3, #1
 8016ecc:	d302      	bcc.n	8016ed4 <USBD_LL_SetupStage+0x46>
 8016ece:	2b02      	cmp	r3, #2
 8016ed0:	d010      	beq.n	8016ef4 <USBD_LL_SetupStage+0x66>
 8016ed2:	e017      	b.n	8016f04 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016eda:	4619      	mov	r1, r3
 8016edc:	6878      	ldr	r0, [r7, #4]
 8016ede:	f000 f9cd 	bl	801727c <USBD_StdDevReq>
      break;
 8016ee2:	e01a      	b.n	8016f1a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016eea:	4619      	mov	r1, r3
 8016eec:	6878      	ldr	r0, [r7, #4]
 8016eee:	f000 fa2f 	bl	8017350 <USBD_StdItfReq>
      break;
 8016ef2:	e012      	b.n	8016f1a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016efa:	4619      	mov	r1, r3
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f000 fa6d 	bl	80173dc <USBD_StdEPReq>
      break;
 8016f02:	e00a      	b.n	8016f1a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8016f0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016f0e:	b2db      	uxtb	r3, r3
 8016f10:	4619      	mov	r1, r3
 8016f12:	6878      	ldr	r0, [r7, #4]
 8016f14:	f002 ff03 	bl	8019d1e <USBD_LL_StallEP>
      break;
 8016f18:	bf00      	nop
  }

  return USBD_OK;
 8016f1a:	2300      	movs	r3, #0
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	3708      	adds	r7, #8
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bd80      	pop	{r7, pc}

08016f24 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016f24:	b580      	push	{r7, lr}
 8016f26:	b086      	sub	sp, #24
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	60f8      	str	r0, [r7, #12]
 8016f2c:	460b      	mov	r3, r1
 8016f2e:	607a      	str	r2, [r7, #4]
 8016f30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8016f32:	7afb      	ldrb	r3, [r7, #11]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d14b      	bne.n	8016fd0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016f3e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016f46:	2b03      	cmp	r3, #3
 8016f48:	d134      	bne.n	8016fb4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8016f4a:	697b      	ldr	r3, [r7, #20]
 8016f4c:	68da      	ldr	r2, [r3, #12]
 8016f4e:	697b      	ldr	r3, [r7, #20]
 8016f50:	691b      	ldr	r3, [r3, #16]
 8016f52:	429a      	cmp	r2, r3
 8016f54:	d919      	bls.n	8016f8a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8016f56:	697b      	ldr	r3, [r7, #20]
 8016f58:	68da      	ldr	r2, [r3, #12]
 8016f5a:	697b      	ldr	r3, [r7, #20]
 8016f5c:	691b      	ldr	r3, [r3, #16]
 8016f5e:	1ad2      	subs	r2, r2, r3
 8016f60:	697b      	ldr	r3, [r7, #20]
 8016f62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016f64:	697b      	ldr	r3, [r7, #20]
 8016f66:	68da      	ldr	r2, [r3, #12]
 8016f68:	697b      	ldr	r3, [r7, #20]
 8016f6a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8016f6c:	429a      	cmp	r2, r3
 8016f6e:	d203      	bcs.n	8016f78 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016f70:	697b      	ldr	r3, [r7, #20]
 8016f72:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8016f74:	b29b      	uxth	r3, r3
 8016f76:	e002      	b.n	8016f7e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016f78:	697b      	ldr	r3, [r7, #20]
 8016f7a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8016f7c:	b29b      	uxth	r3, r3
 8016f7e:	461a      	mov	r2, r3
 8016f80:	6879      	ldr	r1, [r7, #4]
 8016f82:	68f8      	ldr	r0, [r7, #12]
 8016f84:	f000 ff7a 	bl	8017e7c <USBD_CtlContinueRx>
 8016f88:	e038      	b.n	8016ffc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f90:	691b      	ldr	r3, [r3, #16]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d00a      	beq.n	8016fac <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8016f9c:	2b03      	cmp	r3, #3
 8016f9e:	d105      	bne.n	8016fac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fa6:	691b      	ldr	r3, [r3, #16]
 8016fa8:	68f8      	ldr	r0, [r7, #12]
 8016faa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8016fac:	68f8      	ldr	r0, [r7, #12]
 8016fae:	f000 ff77 	bl	8017ea0 <USBD_CtlSendStatus>
 8016fb2:	e023      	b.n	8016ffc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016fba:	2b05      	cmp	r3, #5
 8016fbc:	d11e      	bne.n	8016ffc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8016fc6:	2100      	movs	r1, #0
 8016fc8:	68f8      	ldr	r0, [r7, #12]
 8016fca:	f002 fea8 	bl	8019d1e <USBD_LL_StallEP>
 8016fce:	e015      	b.n	8016ffc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fd6:	699b      	ldr	r3, [r3, #24]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d00d      	beq.n	8016ff8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8016fe2:	2b03      	cmp	r3, #3
 8016fe4:	d108      	bne.n	8016ff8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fec:	699b      	ldr	r3, [r3, #24]
 8016fee:	7afa      	ldrb	r2, [r7, #11]
 8016ff0:	4611      	mov	r1, r2
 8016ff2:	68f8      	ldr	r0, [r7, #12]
 8016ff4:	4798      	blx	r3
 8016ff6:	e001      	b.n	8016ffc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8016ff8:	2302      	movs	r3, #2
 8016ffa:	e000      	b.n	8016ffe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8016ffc:	2300      	movs	r3, #0
}
 8016ffe:	4618      	mov	r0, r3
 8017000:	3718      	adds	r7, #24
 8017002:	46bd      	mov	sp, r7
 8017004:	bd80      	pop	{r7, pc}

08017006 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017006:	b580      	push	{r7, lr}
 8017008:	b086      	sub	sp, #24
 801700a:	af00      	add	r7, sp, #0
 801700c:	60f8      	str	r0, [r7, #12]
 801700e:	460b      	mov	r3, r1
 8017010:	607a      	str	r2, [r7, #4]
 8017012:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8017014:	7afb      	ldrb	r3, [r7, #11]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d17f      	bne.n	801711a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	3314      	adds	r3, #20
 801701e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017026:	2b02      	cmp	r3, #2
 8017028:	d15c      	bne.n	80170e4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 801702a:	697b      	ldr	r3, [r7, #20]
 801702c:	68da      	ldr	r2, [r3, #12]
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	691b      	ldr	r3, [r3, #16]
 8017032:	429a      	cmp	r2, r3
 8017034:	d915      	bls.n	8017062 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8017036:	697b      	ldr	r3, [r7, #20]
 8017038:	68da      	ldr	r2, [r3, #12]
 801703a:	697b      	ldr	r3, [r7, #20]
 801703c:	691b      	ldr	r3, [r3, #16]
 801703e:	1ad2      	subs	r2, r2, r3
 8017040:	697b      	ldr	r3, [r7, #20]
 8017042:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8017044:	697b      	ldr	r3, [r7, #20]
 8017046:	68db      	ldr	r3, [r3, #12]
 8017048:	b29b      	uxth	r3, r3
 801704a:	461a      	mov	r2, r3
 801704c:	6879      	ldr	r1, [r7, #4]
 801704e:	68f8      	ldr	r0, [r7, #12]
 8017050:	f000 fee4 	bl	8017e1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017054:	2300      	movs	r3, #0
 8017056:	2200      	movs	r2, #0
 8017058:	2100      	movs	r1, #0
 801705a:	68f8      	ldr	r0, [r7, #12]
 801705c:	f002 ff05 	bl	8019e6a <USBD_LL_PrepareReceive>
 8017060:	e04e      	b.n	8017100 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8017062:	697b      	ldr	r3, [r7, #20]
 8017064:	689b      	ldr	r3, [r3, #8]
 8017066:	697a      	ldr	r2, [r7, #20]
 8017068:	6912      	ldr	r2, [r2, #16]
 801706a:	fbb3 f1f2 	udiv	r1, r3, r2
 801706e:	fb02 f201 	mul.w	r2, r2, r1
 8017072:	1a9b      	subs	r3, r3, r2
 8017074:	2b00      	cmp	r3, #0
 8017076:	d11c      	bne.n	80170b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	689a      	ldr	r2, [r3, #8]
 801707c:	697b      	ldr	r3, [r7, #20]
 801707e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8017080:	429a      	cmp	r2, r3
 8017082:	d316      	bcc.n	80170b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	689a      	ldr	r2, [r3, #8]
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801708e:	429a      	cmp	r2, r3
 8017090:	d20f      	bcs.n	80170b2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017092:	2200      	movs	r2, #0
 8017094:	2100      	movs	r1, #0
 8017096:	68f8      	ldr	r0, [r7, #12]
 8017098:	f000 fec0 	bl	8017e1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	2200      	movs	r2, #0
 80170a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80170a4:	2300      	movs	r3, #0
 80170a6:	2200      	movs	r2, #0
 80170a8:	2100      	movs	r1, #0
 80170aa:	68f8      	ldr	r0, [r7, #12]
 80170ac:	f002 fedd 	bl	8019e6a <USBD_LL_PrepareReceive>
 80170b0:	e026      	b.n	8017100 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80170b8:	68db      	ldr	r3, [r3, #12]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d00a      	beq.n	80170d4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80170c4:	2b03      	cmp	r3, #3
 80170c6:	d105      	bne.n	80170d4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80170ce:	68db      	ldr	r3, [r3, #12]
 80170d0:	68f8      	ldr	r0, [r7, #12]
 80170d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80170d4:	2180      	movs	r1, #128	; 0x80
 80170d6:	68f8      	ldr	r0, [r7, #12]
 80170d8:	f002 fe21 	bl	8019d1e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80170dc:	68f8      	ldr	r0, [r7, #12]
 80170de:	f000 fef2 	bl	8017ec6 <USBD_CtlReceiveStatus>
 80170e2:	e00d      	b.n	8017100 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80170ea:	2b04      	cmp	r3, #4
 80170ec:	d004      	beq.n	80170f8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d103      	bne.n	8017100 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80170f8:	2180      	movs	r1, #128	; 0x80
 80170fa:	68f8      	ldr	r0, [r7, #12]
 80170fc:	f002 fe0f 	bl	8019d1e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8017106:	2b01      	cmp	r3, #1
 8017108:	d11d      	bne.n	8017146 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 801710a:	68f8      	ldr	r0, [r7, #12]
 801710c:	f7ff fe82 	bl	8016e14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	2200      	movs	r2, #0
 8017114:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8017118:	e015      	b.n	8017146 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017120:	695b      	ldr	r3, [r3, #20]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d00d      	beq.n	8017142 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801712c:	2b03      	cmp	r3, #3
 801712e:	d108      	bne.n	8017142 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017136:	695b      	ldr	r3, [r3, #20]
 8017138:	7afa      	ldrb	r2, [r7, #11]
 801713a:	4611      	mov	r1, r2
 801713c:	68f8      	ldr	r0, [r7, #12]
 801713e:	4798      	blx	r3
 8017140:	e001      	b.n	8017146 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8017142:	2302      	movs	r3, #2
 8017144:	e000      	b.n	8017148 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8017146:	2300      	movs	r3, #0
}
 8017148:	4618      	mov	r0, r3
 801714a:	3718      	adds	r7, #24
 801714c:	46bd      	mov	sp, r7
 801714e:	bd80      	pop	{r7, pc}

08017150 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b082      	sub	sp, #8
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017158:	2340      	movs	r3, #64	; 0x40
 801715a:	2200      	movs	r2, #0
 801715c:	2100      	movs	r1, #0
 801715e:	6878      	ldr	r0, [r7, #4]
 8017160:	f002 fd98 	bl	8019c94 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	2201      	movs	r2, #1
 8017168:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	2240      	movs	r2, #64	; 0x40
 8017170:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017174:	2340      	movs	r3, #64	; 0x40
 8017176:	2200      	movs	r2, #0
 8017178:	2180      	movs	r1, #128	; 0x80
 801717a:	6878      	ldr	r0, [r7, #4]
 801717c:	f002 fd8a 	bl	8019c94 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	2201      	movs	r2, #1
 8017184:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	2240      	movs	r2, #64	; 0x40
 801718a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	2201      	movs	r2, #1
 8017190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	2200      	movs	r2, #0
 8017198:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	2200      	movs	r2, #0
 80171a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	2200      	movs	r2, #0
 80171a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d009      	beq.n	80171c8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171ba:	685b      	ldr	r3, [r3, #4]
 80171bc:	687a      	ldr	r2, [r7, #4]
 80171be:	6852      	ldr	r2, [r2, #4]
 80171c0:	b2d2      	uxtb	r2, r2
 80171c2:	4611      	mov	r1, r2
 80171c4:	6878      	ldr	r0, [r7, #4]
 80171c6:	4798      	blx	r3
  }

  return USBD_OK;
 80171c8:	2300      	movs	r3, #0
}
 80171ca:	4618      	mov	r0, r3
 80171cc:	3708      	adds	r7, #8
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bd80      	pop	{r7, pc}

080171d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80171d2:	b480      	push	{r7}
 80171d4:	b083      	sub	sp, #12
 80171d6:	af00      	add	r7, sp, #0
 80171d8:	6078      	str	r0, [r7, #4]
 80171da:	460b      	mov	r3, r1
 80171dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	78fa      	ldrb	r2, [r7, #3]
 80171e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80171e4:	2300      	movs	r3, #0
}
 80171e6:	4618      	mov	r0, r3
 80171e8:	370c      	adds	r7, #12
 80171ea:	46bd      	mov	sp, r7
 80171ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f0:	4770      	bx	lr

080171f2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80171f2:	b480      	push	{r7}
 80171f4:	b083      	sub	sp, #12
 80171f6:	af00      	add	r7, sp, #0
 80171f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	2204      	movs	r2, #4
 801720a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801720e:	2300      	movs	r3, #0
}
 8017210:	4618      	mov	r0, r3
 8017212:	370c      	adds	r7, #12
 8017214:	46bd      	mov	sp, r7
 8017216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721a:	4770      	bx	lr

0801721c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801721c:	b480      	push	{r7}
 801721e:	b083      	sub	sp, #12
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801722a:	2b04      	cmp	r3, #4
 801722c:	d105      	bne.n	801723a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801723a:	2300      	movs	r3, #0
}
 801723c:	4618      	mov	r0, r3
 801723e:	370c      	adds	r7, #12
 8017240:	46bd      	mov	sp, r7
 8017242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017246:	4770      	bx	lr

08017248 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017248:	b580      	push	{r7, lr}
 801724a:	b082      	sub	sp, #8
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017256:	2b03      	cmp	r3, #3
 8017258:	d10b      	bne.n	8017272 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017260:	69db      	ldr	r3, [r3, #28]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d005      	beq.n	8017272 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801726c:	69db      	ldr	r3, [r3, #28]
 801726e:	6878      	ldr	r0, [r7, #4]
 8017270:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017272:	2300      	movs	r3, #0
}
 8017274:	4618      	mov	r0, r3
 8017276:	3708      	adds	r7, #8
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}

0801727c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801727c:	b580      	push	{r7, lr}
 801727e:	b084      	sub	sp, #16
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]
 8017284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017286:	2300      	movs	r3, #0
 8017288:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801728a:	683b      	ldr	r3, [r7, #0]
 801728c:	781b      	ldrb	r3, [r3, #0]
 801728e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017292:	2b20      	cmp	r3, #32
 8017294:	d004      	beq.n	80172a0 <USBD_StdDevReq+0x24>
 8017296:	2b40      	cmp	r3, #64	; 0x40
 8017298:	d002      	beq.n	80172a0 <USBD_StdDevReq+0x24>
 801729a:	2b00      	cmp	r3, #0
 801729c:	d008      	beq.n	80172b0 <USBD_StdDevReq+0x34>
 801729e:	e04c      	b.n	801733a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80172a6:	689b      	ldr	r3, [r3, #8]
 80172a8:	6839      	ldr	r1, [r7, #0]
 80172aa:	6878      	ldr	r0, [r7, #4]
 80172ac:	4798      	blx	r3
      break;
 80172ae:	e049      	b.n	8017344 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80172b0:	683b      	ldr	r3, [r7, #0]
 80172b2:	785b      	ldrb	r3, [r3, #1]
 80172b4:	2b09      	cmp	r3, #9
 80172b6:	d83a      	bhi.n	801732e <USBD_StdDevReq+0xb2>
 80172b8:	a201      	add	r2, pc, #4	; (adr r2, 80172c0 <USBD_StdDevReq+0x44>)
 80172ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172be:	bf00      	nop
 80172c0:	08017311 	.word	0x08017311
 80172c4:	08017325 	.word	0x08017325
 80172c8:	0801732f 	.word	0x0801732f
 80172cc:	0801731b 	.word	0x0801731b
 80172d0:	0801732f 	.word	0x0801732f
 80172d4:	080172f3 	.word	0x080172f3
 80172d8:	080172e9 	.word	0x080172e9
 80172dc:	0801732f 	.word	0x0801732f
 80172e0:	08017307 	.word	0x08017307
 80172e4:	080172fd 	.word	0x080172fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80172e8:	6839      	ldr	r1, [r7, #0]
 80172ea:	6878      	ldr	r0, [r7, #4]
 80172ec:	f000 f9d4 	bl	8017698 <USBD_GetDescriptor>
          break;
 80172f0:	e022      	b.n	8017338 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80172f2:	6839      	ldr	r1, [r7, #0]
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f000 fb61 	bl	80179bc <USBD_SetAddress>
          break;
 80172fa:	e01d      	b.n	8017338 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80172fc:	6839      	ldr	r1, [r7, #0]
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f000 fb9e 	bl	8017a40 <USBD_SetConfig>
          break;
 8017304:	e018      	b.n	8017338 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017306:	6839      	ldr	r1, [r7, #0]
 8017308:	6878      	ldr	r0, [r7, #4]
 801730a:	f000 fc27 	bl	8017b5c <USBD_GetConfig>
          break;
 801730e:	e013      	b.n	8017338 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017310:	6839      	ldr	r1, [r7, #0]
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f000 fc56 	bl	8017bc4 <USBD_GetStatus>
          break;
 8017318:	e00e      	b.n	8017338 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801731a:	6839      	ldr	r1, [r7, #0]
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f000 fc84 	bl	8017c2a <USBD_SetFeature>
          break;
 8017322:	e009      	b.n	8017338 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017324:	6839      	ldr	r1, [r7, #0]
 8017326:	6878      	ldr	r0, [r7, #4]
 8017328:	f000 fc93 	bl	8017c52 <USBD_ClrFeature>
          break;
 801732c:	e004      	b.n	8017338 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801732e:	6839      	ldr	r1, [r7, #0]
 8017330:	6878      	ldr	r0, [r7, #4]
 8017332:	f000 fcec 	bl	8017d0e <USBD_CtlError>
          break;
 8017336:	bf00      	nop
      }
      break;
 8017338:	e004      	b.n	8017344 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 801733a:	6839      	ldr	r1, [r7, #0]
 801733c:	6878      	ldr	r0, [r7, #4]
 801733e:	f000 fce6 	bl	8017d0e <USBD_CtlError>
      break;
 8017342:	bf00      	nop
  }

  return ret;
 8017344:	7bfb      	ldrb	r3, [r7, #15]
}
 8017346:	4618      	mov	r0, r3
 8017348:	3710      	adds	r7, #16
 801734a:	46bd      	mov	sp, r7
 801734c:	bd80      	pop	{r7, pc}
 801734e:	bf00      	nop

08017350 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b084      	sub	sp, #16
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
 8017358:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801735a:	2300      	movs	r3, #0
 801735c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801735e:	683b      	ldr	r3, [r7, #0]
 8017360:	781b      	ldrb	r3, [r3, #0]
 8017362:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017366:	2b20      	cmp	r3, #32
 8017368:	d003      	beq.n	8017372 <USBD_StdItfReq+0x22>
 801736a:	2b40      	cmp	r3, #64	; 0x40
 801736c:	d001      	beq.n	8017372 <USBD_StdItfReq+0x22>
 801736e:	2b00      	cmp	r3, #0
 8017370:	d12a      	bne.n	80173c8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017378:	3b01      	subs	r3, #1
 801737a:	2b02      	cmp	r3, #2
 801737c:	d81d      	bhi.n	80173ba <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	889b      	ldrh	r3, [r3, #4]
 8017382:	b2db      	uxtb	r3, r3
 8017384:	2b01      	cmp	r3, #1
 8017386:	d813      	bhi.n	80173b0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801738e:	689b      	ldr	r3, [r3, #8]
 8017390:	6839      	ldr	r1, [r7, #0]
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	4798      	blx	r3
 8017396:	4603      	mov	r3, r0
 8017398:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801739a:	683b      	ldr	r3, [r7, #0]
 801739c:	88db      	ldrh	r3, [r3, #6]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d110      	bne.n	80173c4 <USBD_StdItfReq+0x74>
 80173a2:	7bfb      	ldrb	r3, [r7, #15]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d10d      	bne.n	80173c4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80173a8:	6878      	ldr	r0, [r7, #4]
 80173aa:	f000 fd79 	bl	8017ea0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80173ae:	e009      	b.n	80173c4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80173b0:	6839      	ldr	r1, [r7, #0]
 80173b2:	6878      	ldr	r0, [r7, #4]
 80173b4:	f000 fcab 	bl	8017d0e <USBD_CtlError>
          break;
 80173b8:	e004      	b.n	80173c4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80173ba:	6839      	ldr	r1, [r7, #0]
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	f000 fca6 	bl	8017d0e <USBD_CtlError>
          break;
 80173c2:	e000      	b.n	80173c6 <USBD_StdItfReq+0x76>
          break;
 80173c4:	bf00      	nop
      }
      break;
 80173c6:	e004      	b.n	80173d2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80173c8:	6839      	ldr	r1, [r7, #0]
 80173ca:	6878      	ldr	r0, [r7, #4]
 80173cc:	f000 fc9f 	bl	8017d0e <USBD_CtlError>
      break;
 80173d0:	bf00      	nop
  }

  return USBD_OK;
 80173d2:	2300      	movs	r3, #0
}
 80173d4:	4618      	mov	r0, r3
 80173d6:	3710      	adds	r7, #16
 80173d8:	46bd      	mov	sp, r7
 80173da:	bd80      	pop	{r7, pc}

080173dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b084      	sub	sp, #16
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
 80173e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80173e6:	2300      	movs	r3, #0
 80173e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80173ea:	683b      	ldr	r3, [r7, #0]
 80173ec:	889b      	ldrh	r3, [r3, #4]
 80173ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80173f0:	683b      	ldr	r3, [r7, #0]
 80173f2:	781b      	ldrb	r3, [r3, #0]
 80173f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80173f8:	2b20      	cmp	r3, #32
 80173fa:	d004      	beq.n	8017406 <USBD_StdEPReq+0x2a>
 80173fc:	2b40      	cmp	r3, #64	; 0x40
 80173fe:	d002      	beq.n	8017406 <USBD_StdEPReq+0x2a>
 8017400:	2b00      	cmp	r3, #0
 8017402:	d008      	beq.n	8017416 <USBD_StdEPReq+0x3a>
 8017404:	e13d      	b.n	8017682 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801740c:	689b      	ldr	r3, [r3, #8]
 801740e:	6839      	ldr	r1, [r7, #0]
 8017410:	6878      	ldr	r0, [r7, #4]
 8017412:	4798      	blx	r3
      break;
 8017414:	e13a      	b.n	801768c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8017416:	683b      	ldr	r3, [r7, #0]
 8017418:	781b      	ldrb	r3, [r3, #0]
 801741a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801741e:	2b20      	cmp	r3, #32
 8017420:	d10a      	bne.n	8017438 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017428:	689b      	ldr	r3, [r3, #8]
 801742a:	6839      	ldr	r1, [r7, #0]
 801742c:	6878      	ldr	r0, [r7, #4]
 801742e:	4798      	blx	r3
 8017430:	4603      	mov	r3, r0
 8017432:	73fb      	strb	r3, [r7, #15]

        return ret;
 8017434:	7bfb      	ldrb	r3, [r7, #15]
 8017436:	e12a      	b.n	801768e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8017438:	683b      	ldr	r3, [r7, #0]
 801743a:	785b      	ldrb	r3, [r3, #1]
 801743c:	2b01      	cmp	r3, #1
 801743e:	d03e      	beq.n	80174be <USBD_StdEPReq+0xe2>
 8017440:	2b03      	cmp	r3, #3
 8017442:	d002      	beq.n	801744a <USBD_StdEPReq+0x6e>
 8017444:	2b00      	cmp	r3, #0
 8017446:	d070      	beq.n	801752a <USBD_StdEPReq+0x14e>
 8017448:	e115      	b.n	8017676 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017450:	2b02      	cmp	r3, #2
 8017452:	d002      	beq.n	801745a <USBD_StdEPReq+0x7e>
 8017454:	2b03      	cmp	r3, #3
 8017456:	d015      	beq.n	8017484 <USBD_StdEPReq+0xa8>
 8017458:	e02b      	b.n	80174b2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801745a:	7bbb      	ldrb	r3, [r7, #14]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d00c      	beq.n	801747a <USBD_StdEPReq+0x9e>
 8017460:	7bbb      	ldrb	r3, [r7, #14]
 8017462:	2b80      	cmp	r3, #128	; 0x80
 8017464:	d009      	beq.n	801747a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8017466:	7bbb      	ldrb	r3, [r7, #14]
 8017468:	4619      	mov	r1, r3
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	f002 fc57 	bl	8019d1e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8017470:	2180      	movs	r1, #128	; 0x80
 8017472:	6878      	ldr	r0, [r7, #4]
 8017474:	f002 fc53 	bl	8019d1e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017478:	e020      	b.n	80174bc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 801747a:	6839      	ldr	r1, [r7, #0]
 801747c:	6878      	ldr	r0, [r7, #4]
 801747e:	f000 fc46 	bl	8017d0e <USBD_CtlError>
              break;
 8017482:	e01b      	b.n	80174bc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017484:	683b      	ldr	r3, [r7, #0]
 8017486:	885b      	ldrh	r3, [r3, #2]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d10e      	bne.n	80174aa <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 801748c:	7bbb      	ldrb	r3, [r7, #14]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d00b      	beq.n	80174aa <USBD_StdEPReq+0xce>
 8017492:	7bbb      	ldrb	r3, [r7, #14]
 8017494:	2b80      	cmp	r3, #128	; 0x80
 8017496:	d008      	beq.n	80174aa <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017498:	683b      	ldr	r3, [r7, #0]
 801749a:	88db      	ldrh	r3, [r3, #6]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d104      	bne.n	80174aa <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80174a0:	7bbb      	ldrb	r3, [r7, #14]
 80174a2:	4619      	mov	r1, r3
 80174a4:	6878      	ldr	r0, [r7, #4]
 80174a6:	f002 fc3a 	bl	8019d1e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f000 fcf8 	bl	8017ea0 <USBD_CtlSendStatus>

              break;
 80174b0:	e004      	b.n	80174bc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80174b2:	6839      	ldr	r1, [r7, #0]
 80174b4:	6878      	ldr	r0, [r7, #4]
 80174b6:	f000 fc2a 	bl	8017d0e <USBD_CtlError>
              break;
 80174ba:	bf00      	nop
          }
          break;
 80174bc:	e0e0      	b.n	8017680 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80174c4:	2b02      	cmp	r3, #2
 80174c6:	d002      	beq.n	80174ce <USBD_StdEPReq+0xf2>
 80174c8:	2b03      	cmp	r3, #3
 80174ca:	d015      	beq.n	80174f8 <USBD_StdEPReq+0x11c>
 80174cc:	e026      	b.n	801751c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80174ce:	7bbb      	ldrb	r3, [r7, #14]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d00c      	beq.n	80174ee <USBD_StdEPReq+0x112>
 80174d4:	7bbb      	ldrb	r3, [r7, #14]
 80174d6:	2b80      	cmp	r3, #128	; 0x80
 80174d8:	d009      	beq.n	80174ee <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80174da:	7bbb      	ldrb	r3, [r7, #14]
 80174dc:	4619      	mov	r1, r3
 80174de:	6878      	ldr	r0, [r7, #4]
 80174e0:	f002 fc1d 	bl	8019d1e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80174e4:	2180      	movs	r1, #128	; 0x80
 80174e6:	6878      	ldr	r0, [r7, #4]
 80174e8:	f002 fc19 	bl	8019d1e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80174ec:	e01c      	b.n	8017528 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80174ee:	6839      	ldr	r1, [r7, #0]
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	f000 fc0c 	bl	8017d0e <USBD_CtlError>
              break;
 80174f6:	e017      	b.n	8017528 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80174f8:	683b      	ldr	r3, [r7, #0]
 80174fa:	885b      	ldrh	r3, [r3, #2]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d112      	bne.n	8017526 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017500:	7bbb      	ldrb	r3, [r7, #14]
 8017502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017506:	2b00      	cmp	r3, #0
 8017508:	d004      	beq.n	8017514 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801750a:	7bbb      	ldrb	r3, [r7, #14]
 801750c:	4619      	mov	r1, r3
 801750e:	6878      	ldr	r0, [r7, #4]
 8017510:	f002 fc24 	bl	8019d5c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8017514:	6878      	ldr	r0, [r7, #4]
 8017516:	f000 fcc3 	bl	8017ea0 <USBD_CtlSendStatus>
              }
              break;
 801751a:	e004      	b.n	8017526 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 801751c:	6839      	ldr	r1, [r7, #0]
 801751e:	6878      	ldr	r0, [r7, #4]
 8017520:	f000 fbf5 	bl	8017d0e <USBD_CtlError>
              break;
 8017524:	e000      	b.n	8017528 <USBD_StdEPReq+0x14c>
              break;
 8017526:	bf00      	nop
          }
          break;
 8017528:	e0aa      	b.n	8017680 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017530:	2b02      	cmp	r3, #2
 8017532:	d002      	beq.n	801753a <USBD_StdEPReq+0x15e>
 8017534:	2b03      	cmp	r3, #3
 8017536:	d032      	beq.n	801759e <USBD_StdEPReq+0x1c2>
 8017538:	e097      	b.n	801766a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801753a:	7bbb      	ldrb	r3, [r7, #14]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d007      	beq.n	8017550 <USBD_StdEPReq+0x174>
 8017540:	7bbb      	ldrb	r3, [r7, #14]
 8017542:	2b80      	cmp	r3, #128	; 0x80
 8017544:	d004      	beq.n	8017550 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8017546:	6839      	ldr	r1, [r7, #0]
 8017548:	6878      	ldr	r0, [r7, #4]
 801754a:	f000 fbe0 	bl	8017d0e <USBD_CtlError>
                break;
 801754e:	e091      	b.n	8017674 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017554:	2b00      	cmp	r3, #0
 8017556:	da0b      	bge.n	8017570 <USBD_StdEPReq+0x194>
 8017558:	7bbb      	ldrb	r3, [r7, #14]
 801755a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801755e:	4613      	mov	r3, r2
 8017560:	009b      	lsls	r3, r3, #2
 8017562:	4413      	add	r3, r2
 8017564:	009b      	lsls	r3, r3, #2
 8017566:	3310      	adds	r3, #16
 8017568:	687a      	ldr	r2, [r7, #4]
 801756a:	4413      	add	r3, r2
 801756c:	3304      	adds	r3, #4
 801756e:	e00b      	b.n	8017588 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017570:	7bbb      	ldrb	r3, [r7, #14]
 8017572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017576:	4613      	mov	r3, r2
 8017578:	009b      	lsls	r3, r3, #2
 801757a:	4413      	add	r3, r2
 801757c:	009b      	lsls	r3, r3, #2
 801757e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017582:	687a      	ldr	r2, [r7, #4]
 8017584:	4413      	add	r3, r2
 8017586:	3304      	adds	r3, #4
 8017588:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801758a:	68bb      	ldr	r3, [r7, #8]
 801758c:	2200      	movs	r2, #0
 801758e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8017590:	68bb      	ldr	r3, [r7, #8]
 8017592:	2202      	movs	r2, #2
 8017594:	4619      	mov	r1, r3
 8017596:	6878      	ldr	r0, [r7, #4]
 8017598:	f000 fc24 	bl	8017de4 <USBD_CtlSendData>
              break;
 801759c:	e06a      	b.n	8017674 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801759e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	da11      	bge.n	80175ca <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80175a6:	7bbb      	ldrb	r3, [r7, #14]
 80175a8:	f003 020f 	and.w	r2, r3, #15
 80175ac:	6879      	ldr	r1, [r7, #4]
 80175ae:	4613      	mov	r3, r2
 80175b0:	009b      	lsls	r3, r3, #2
 80175b2:	4413      	add	r3, r2
 80175b4:	009b      	lsls	r3, r3, #2
 80175b6:	440b      	add	r3, r1
 80175b8:	3318      	adds	r3, #24
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d117      	bne.n	80175f0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80175c0:	6839      	ldr	r1, [r7, #0]
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f000 fba3 	bl	8017d0e <USBD_CtlError>
                  break;
 80175c8:	e054      	b.n	8017674 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80175ca:	7bbb      	ldrb	r3, [r7, #14]
 80175cc:	f003 020f 	and.w	r2, r3, #15
 80175d0:	6879      	ldr	r1, [r7, #4]
 80175d2:	4613      	mov	r3, r2
 80175d4:	009b      	lsls	r3, r3, #2
 80175d6:	4413      	add	r3, r2
 80175d8:	009b      	lsls	r3, r3, #2
 80175da:	440b      	add	r3, r1
 80175dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d104      	bne.n	80175f0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80175e6:	6839      	ldr	r1, [r7, #0]
 80175e8:	6878      	ldr	r0, [r7, #4]
 80175ea:	f000 fb90 	bl	8017d0e <USBD_CtlError>
                  break;
 80175ee:	e041      	b.n	8017674 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80175f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	da0b      	bge.n	8017610 <USBD_StdEPReq+0x234>
 80175f8:	7bbb      	ldrb	r3, [r7, #14]
 80175fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80175fe:	4613      	mov	r3, r2
 8017600:	009b      	lsls	r3, r3, #2
 8017602:	4413      	add	r3, r2
 8017604:	009b      	lsls	r3, r3, #2
 8017606:	3310      	adds	r3, #16
 8017608:	687a      	ldr	r2, [r7, #4]
 801760a:	4413      	add	r3, r2
 801760c:	3304      	adds	r3, #4
 801760e:	e00b      	b.n	8017628 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017610:	7bbb      	ldrb	r3, [r7, #14]
 8017612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017616:	4613      	mov	r3, r2
 8017618:	009b      	lsls	r3, r3, #2
 801761a:	4413      	add	r3, r2
 801761c:	009b      	lsls	r3, r3, #2
 801761e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017622:	687a      	ldr	r2, [r7, #4]
 8017624:	4413      	add	r3, r2
 8017626:	3304      	adds	r3, #4
 8017628:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801762a:	7bbb      	ldrb	r3, [r7, #14]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d002      	beq.n	8017636 <USBD_StdEPReq+0x25a>
 8017630:	7bbb      	ldrb	r3, [r7, #14]
 8017632:	2b80      	cmp	r3, #128	; 0x80
 8017634:	d103      	bne.n	801763e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8017636:	68bb      	ldr	r3, [r7, #8]
 8017638:	2200      	movs	r2, #0
 801763a:	601a      	str	r2, [r3, #0]
 801763c:	e00e      	b.n	801765c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801763e:	7bbb      	ldrb	r3, [r7, #14]
 8017640:	4619      	mov	r1, r3
 8017642:	6878      	ldr	r0, [r7, #4]
 8017644:	f002 fba9 	bl	8019d9a <USBD_LL_IsStallEP>
 8017648:	4603      	mov	r3, r0
 801764a:	2b00      	cmp	r3, #0
 801764c:	d003      	beq.n	8017656 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 801764e:	68bb      	ldr	r3, [r7, #8]
 8017650:	2201      	movs	r2, #1
 8017652:	601a      	str	r2, [r3, #0]
 8017654:	e002      	b.n	801765c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8017656:	68bb      	ldr	r3, [r7, #8]
 8017658:	2200      	movs	r2, #0
 801765a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801765c:	68bb      	ldr	r3, [r7, #8]
 801765e:	2202      	movs	r2, #2
 8017660:	4619      	mov	r1, r3
 8017662:	6878      	ldr	r0, [r7, #4]
 8017664:	f000 fbbe 	bl	8017de4 <USBD_CtlSendData>
              break;
 8017668:	e004      	b.n	8017674 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 801766a:	6839      	ldr	r1, [r7, #0]
 801766c:	6878      	ldr	r0, [r7, #4]
 801766e:	f000 fb4e 	bl	8017d0e <USBD_CtlError>
              break;
 8017672:	bf00      	nop
          }
          break;
 8017674:	e004      	b.n	8017680 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8017676:	6839      	ldr	r1, [r7, #0]
 8017678:	6878      	ldr	r0, [r7, #4]
 801767a:	f000 fb48 	bl	8017d0e <USBD_CtlError>
          break;
 801767e:	bf00      	nop
      }
      break;
 8017680:	e004      	b.n	801768c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8017682:	6839      	ldr	r1, [r7, #0]
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f000 fb42 	bl	8017d0e <USBD_CtlError>
      break;
 801768a:	bf00      	nop
  }

  return ret;
 801768c:	7bfb      	ldrb	r3, [r7, #15]
}
 801768e:	4618      	mov	r0, r3
 8017690:	3710      	adds	r7, #16
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
	...

08017698 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b084      	sub	sp, #16
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
 80176a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80176a2:	2300      	movs	r3, #0
 80176a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80176a6:	2300      	movs	r3, #0
 80176a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80176aa:	2300      	movs	r3, #0
 80176ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80176ae:	683b      	ldr	r3, [r7, #0]
 80176b0:	885b      	ldrh	r3, [r3, #2]
 80176b2:	0a1b      	lsrs	r3, r3, #8
 80176b4:	b29b      	uxth	r3, r3
 80176b6:	3b01      	subs	r3, #1
 80176b8:	2b0e      	cmp	r3, #14
 80176ba:	f200 8152 	bhi.w	8017962 <USBD_GetDescriptor+0x2ca>
 80176be:	a201      	add	r2, pc, #4	; (adr r2, 80176c4 <USBD_GetDescriptor+0x2c>)
 80176c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176c4:	08017735 	.word	0x08017735
 80176c8:	0801774d 	.word	0x0801774d
 80176cc:	0801778d 	.word	0x0801778d
 80176d0:	08017963 	.word	0x08017963
 80176d4:	08017963 	.word	0x08017963
 80176d8:	08017903 	.word	0x08017903
 80176dc:	0801792f 	.word	0x0801792f
 80176e0:	08017963 	.word	0x08017963
 80176e4:	08017963 	.word	0x08017963
 80176e8:	08017963 	.word	0x08017963
 80176ec:	08017963 	.word	0x08017963
 80176f0:	08017963 	.word	0x08017963
 80176f4:	08017963 	.word	0x08017963
 80176f8:	08017963 	.word	0x08017963
 80176fc:	08017701 	.word	0x08017701
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017706:	69db      	ldr	r3, [r3, #28]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d00b      	beq.n	8017724 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017712:	69db      	ldr	r3, [r3, #28]
 8017714:	687a      	ldr	r2, [r7, #4]
 8017716:	7c12      	ldrb	r2, [r2, #16]
 8017718:	f107 0108 	add.w	r1, r7, #8
 801771c:	4610      	mov	r0, r2
 801771e:	4798      	blx	r3
 8017720:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017722:	e126      	b.n	8017972 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017724:	6839      	ldr	r1, [r7, #0]
 8017726:	6878      	ldr	r0, [r7, #4]
 8017728:	f000 faf1 	bl	8017d0e <USBD_CtlError>
        err++;
 801772c:	7afb      	ldrb	r3, [r7, #11]
 801772e:	3301      	adds	r3, #1
 8017730:	72fb      	strb	r3, [r7, #11]
      break;
 8017732:	e11e      	b.n	8017972 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	687a      	ldr	r2, [r7, #4]
 801773e:	7c12      	ldrb	r2, [r2, #16]
 8017740:	f107 0108 	add.w	r1, r7, #8
 8017744:	4610      	mov	r0, r2
 8017746:	4798      	blx	r3
 8017748:	60f8      	str	r0, [r7, #12]
      break;
 801774a:	e112      	b.n	8017972 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	7c1b      	ldrb	r3, [r3, #16]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d10d      	bne.n	8017770 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801775c:	f107 0208 	add.w	r2, r7, #8
 8017760:	4610      	mov	r0, r2
 8017762:	4798      	blx	r3
 8017764:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	3301      	adds	r3, #1
 801776a:	2202      	movs	r2, #2
 801776c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801776e:	e100      	b.n	8017972 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017778:	f107 0208 	add.w	r2, r7, #8
 801777c:	4610      	mov	r0, r2
 801777e:	4798      	blx	r3
 8017780:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	3301      	adds	r3, #1
 8017786:	2202      	movs	r2, #2
 8017788:	701a      	strb	r2, [r3, #0]
      break;
 801778a:	e0f2      	b.n	8017972 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801778c:	683b      	ldr	r3, [r7, #0]
 801778e:	885b      	ldrh	r3, [r3, #2]
 8017790:	b2db      	uxtb	r3, r3
 8017792:	2b05      	cmp	r3, #5
 8017794:	f200 80ac 	bhi.w	80178f0 <USBD_GetDescriptor+0x258>
 8017798:	a201      	add	r2, pc, #4	; (adr r2, 80177a0 <USBD_GetDescriptor+0x108>)
 801779a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801779e:	bf00      	nop
 80177a0:	080177b9 	.word	0x080177b9
 80177a4:	080177ed 	.word	0x080177ed
 80177a8:	08017821 	.word	0x08017821
 80177ac:	08017855 	.word	0x08017855
 80177b0:	08017889 	.word	0x08017889
 80177b4:	080178bd 	.word	0x080178bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80177be:	685b      	ldr	r3, [r3, #4]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d00b      	beq.n	80177dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80177ca:	685b      	ldr	r3, [r3, #4]
 80177cc:	687a      	ldr	r2, [r7, #4]
 80177ce:	7c12      	ldrb	r2, [r2, #16]
 80177d0:	f107 0108 	add.w	r1, r7, #8
 80177d4:	4610      	mov	r0, r2
 80177d6:	4798      	blx	r3
 80177d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80177da:	e091      	b.n	8017900 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80177dc:	6839      	ldr	r1, [r7, #0]
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	f000 fa95 	bl	8017d0e <USBD_CtlError>
            err++;
 80177e4:	7afb      	ldrb	r3, [r7, #11]
 80177e6:	3301      	adds	r3, #1
 80177e8:	72fb      	strb	r3, [r7, #11]
          break;
 80177ea:	e089      	b.n	8017900 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80177f2:	689b      	ldr	r3, [r3, #8]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d00b      	beq.n	8017810 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80177fe:	689b      	ldr	r3, [r3, #8]
 8017800:	687a      	ldr	r2, [r7, #4]
 8017802:	7c12      	ldrb	r2, [r2, #16]
 8017804:	f107 0108 	add.w	r1, r7, #8
 8017808:	4610      	mov	r0, r2
 801780a:	4798      	blx	r3
 801780c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801780e:	e077      	b.n	8017900 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017810:	6839      	ldr	r1, [r7, #0]
 8017812:	6878      	ldr	r0, [r7, #4]
 8017814:	f000 fa7b 	bl	8017d0e <USBD_CtlError>
            err++;
 8017818:	7afb      	ldrb	r3, [r7, #11]
 801781a:	3301      	adds	r3, #1
 801781c:	72fb      	strb	r3, [r7, #11]
          break;
 801781e:	e06f      	b.n	8017900 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017826:	68db      	ldr	r3, [r3, #12]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d00b      	beq.n	8017844 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017832:	68db      	ldr	r3, [r3, #12]
 8017834:	687a      	ldr	r2, [r7, #4]
 8017836:	7c12      	ldrb	r2, [r2, #16]
 8017838:	f107 0108 	add.w	r1, r7, #8
 801783c:	4610      	mov	r0, r2
 801783e:	4798      	blx	r3
 8017840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017842:	e05d      	b.n	8017900 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017844:	6839      	ldr	r1, [r7, #0]
 8017846:	6878      	ldr	r0, [r7, #4]
 8017848:	f000 fa61 	bl	8017d0e <USBD_CtlError>
            err++;
 801784c:	7afb      	ldrb	r3, [r7, #11]
 801784e:	3301      	adds	r3, #1
 8017850:	72fb      	strb	r3, [r7, #11]
          break;
 8017852:	e055      	b.n	8017900 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801785a:	691b      	ldr	r3, [r3, #16]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d00b      	beq.n	8017878 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017866:	691b      	ldr	r3, [r3, #16]
 8017868:	687a      	ldr	r2, [r7, #4]
 801786a:	7c12      	ldrb	r2, [r2, #16]
 801786c:	f107 0108 	add.w	r1, r7, #8
 8017870:	4610      	mov	r0, r2
 8017872:	4798      	blx	r3
 8017874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017876:	e043      	b.n	8017900 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017878:	6839      	ldr	r1, [r7, #0]
 801787a:	6878      	ldr	r0, [r7, #4]
 801787c:	f000 fa47 	bl	8017d0e <USBD_CtlError>
            err++;
 8017880:	7afb      	ldrb	r3, [r7, #11]
 8017882:	3301      	adds	r3, #1
 8017884:	72fb      	strb	r3, [r7, #11]
          break;
 8017886:	e03b      	b.n	8017900 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801788e:	695b      	ldr	r3, [r3, #20]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d00b      	beq.n	80178ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801789a:	695b      	ldr	r3, [r3, #20]
 801789c:	687a      	ldr	r2, [r7, #4]
 801789e:	7c12      	ldrb	r2, [r2, #16]
 80178a0:	f107 0108 	add.w	r1, r7, #8
 80178a4:	4610      	mov	r0, r2
 80178a6:	4798      	blx	r3
 80178a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80178aa:	e029      	b.n	8017900 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80178ac:	6839      	ldr	r1, [r7, #0]
 80178ae:	6878      	ldr	r0, [r7, #4]
 80178b0:	f000 fa2d 	bl	8017d0e <USBD_CtlError>
            err++;
 80178b4:	7afb      	ldrb	r3, [r7, #11]
 80178b6:	3301      	adds	r3, #1
 80178b8:	72fb      	strb	r3, [r7, #11]
          break;
 80178ba:	e021      	b.n	8017900 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80178c2:	699b      	ldr	r3, [r3, #24]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d00b      	beq.n	80178e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80178ce:	699b      	ldr	r3, [r3, #24]
 80178d0:	687a      	ldr	r2, [r7, #4]
 80178d2:	7c12      	ldrb	r2, [r2, #16]
 80178d4:	f107 0108 	add.w	r1, r7, #8
 80178d8:	4610      	mov	r0, r2
 80178da:	4798      	blx	r3
 80178dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80178de:	e00f      	b.n	8017900 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80178e0:	6839      	ldr	r1, [r7, #0]
 80178e2:	6878      	ldr	r0, [r7, #4]
 80178e4:	f000 fa13 	bl	8017d0e <USBD_CtlError>
            err++;
 80178e8:	7afb      	ldrb	r3, [r7, #11]
 80178ea:	3301      	adds	r3, #1
 80178ec:	72fb      	strb	r3, [r7, #11]
          break;
 80178ee:	e007      	b.n	8017900 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80178f0:	6839      	ldr	r1, [r7, #0]
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f000 fa0b 	bl	8017d0e <USBD_CtlError>
          err++;
 80178f8:	7afb      	ldrb	r3, [r7, #11]
 80178fa:	3301      	adds	r3, #1
 80178fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80178fe:	e038      	b.n	8017972 <USBD_GetDescriptor+0x2da>
 8017900:	e037      	b.n	8017972 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	7c1b      	ldrb	r3, [r3, #16]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d109      	bne.n	801791e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017912:	f107 0208 	add.w	r2, r7, #8
 8017916:	4610      	mov	r0, r2
 8017918:	4798      	blx	r3
 801791a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801791c:	e029      	b.n	8017972 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801791e:	6839      	ldr	r1, [r7, #0]
 8017920:	6878      	ldr	r0, [r7, #4]
 8017922:	f000 f9f4 	bl	8017d0e <USBD_CtlError>
        err++;
 8017926:	7afb      	ldrb	r3, [r7, #11]
 8017928:	3301      	adds	r3, #1
 801792a:	72fb      	strb	r3, [r7, #11]
      break;
 801792c:	e021      	b.n	8017972 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	7c1b      	ldrb	r3, [r3, #16]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d10d      	bne.n	8017952 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801793e:	f107 0208 	add.w	r2, r7, #8
 8017942:	4610      	mov	r0, r2
 8017944:	4798      	blx	r3
 8017946:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	3301      	adds	r3, #1
 801794c:	2207      	movs	r2, #7
 801794e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017950:	e00f      	b.n	8017972 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017952:	6839      	ldr	r1, [r7, #0]
 8017954:	6878      	ldr	r0, [r7, #4]
 8017956:	f000 f9da 	bl	8017d0e <USBD_CtlError>
        err++;
 801795a:	7afb      	ldrb	r3, [r7, #11]
 801795c:	3301      	adds	r3, #1
 801795e:	72fb      	strb	r3, [r7, #11]
      break;
 8017960:	e007      	b.n	8017972 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8017962:	6839      	ldr	r1, [r7, #0]
 8017964:	6878      	ldr	r0, [r7, #4]
 8017966:	f000 f9d2 	bl	8017d0e <USBD_CtlError>
      err++;
 801796a:	7afb      	ldrb	r3, [r7, #11]
 801796c:	3301      	adds	r3, #1
 801796e:	72fb      	strb	r3, [r7, #11]
      break;
 8017970:	bf00      	nop
  }

  if (err != 0U)
 8017972:	7afb      	ldrb	r3, [r7, #11]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d11c      	bne.n	80179b2 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8017978:	893b      	ldrh	r3, [r7, #8]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d011      	beq.n	80179a2 <USBD_GetDescriptor+0x30a>
 801797e:	683b      	ldr	r3, [r7, #0]
 8017980:	88db      	ldrh	r3, [r3, #6]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d00d      	beq.n	80179a2 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	88da      	ldrh	r2, [r3, #6]
 801798a:	893b      	ldrh	r3, [r7, #8]
 801798c:	4293      	cmp	r3, r2
 801798e:	bf28      	it	cs
 8017990:	4613      	movcs	r3, r2
 8017992:	b29b      	uxth	r3, r3
 8017994:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017996:	893b      	ldrh	r3, [r7, #8]
 8017998:	461a      	mov	r2, r3
 801799a:	68f9      	ldr	r1, [r7, #12]
 801799c:	6878      	ldr	r0, [r7, #4]
 801799e:	f000 fa21 	bl	8017de4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	88db      	ldrh	r3, [r3, #6]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d104      	bne.n	80179b4 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 80179aa:	6878      	ldr	r0, [r7, #4]
 80179ac:	f000 fa78 	bl	8017ea0 <USBD_CtlSendStatus>
 80179b0:	e000      	b.n	80179b4 <USBD_GetDescriptor+0x31c>
    return;
 80179b2:	bf00      	nop
    }
  }
}
 80179b4:	3710      	adds	r7, #16
 80179b6:	46bd      	mov	sp, r7
 80179b8:	bd80      	pop	{r7, pc}
 80179ba:	bf00      	nop

080179bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b084      	sub	sp, #16
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	6078      	str	r0, [r7, #4]
 80179c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	889b      	ldrh	r3, [r3, #4]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d130      	bne.n	8017a30 <USBD_SetAddress+0x74>
 80179ce:	683b      	ldr	r3, [r7, #0]
 80179d0:	88db      	ldrh	r3, [r3, #6]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d12c      	bne.n	8017a30 <USBD_SetAddress+0x74>
 80179d6:	683b      	ldr	r3, [r7, #0]
 80179d8:	885b      	ldrh	r3, [r3, #2]
 80179da:	2b7f      	cmp	r3, #127	; 0x7f
 80179dc:	d828      	bhi.n	8017a30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80179de:	683b      	ldr	r3, [r7, #0]
 80179e0:	885b      	ldrh	r3, [r3, #2]
 80179e2:	b2db      	uxtb	r3, r3
 80179e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80179e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80179f0:	2b03      	cmp	r3, #3
 80179f2:	d104      	bne.n	80179fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80179f4:	6839      	ldr	r1, [r7, #0]
 80179f6:	6878      	ldr	r0, [r7, #4]
 80179f8:	f000 f989 	bl	8017d0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80179fc:	e01c      	b.n	8017a38 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	7bfa      	ldrb	r2, [r7, #15]
 8017a02:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017a06:	7bfb      	ldrb	r3, [r7, #15]
 8017a08:	4619      	mov	r1, r3
 8017a0a:	6878      	ldr	r0, [r7, #4]
 8017a0c:	f002 f9eb 	bl	8019de6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8017a10:	6878      	ldr	r0, [r7, #4]
 8017a12:	f000 fa45 	bl	8017ea0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017a16:	7bfb      	ldrb	r3, [r7, #15]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d004      	beq.n	8017a26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	2202      	movs	r2, #2
 8017a20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017a24:	e008      	b.n	8017a38 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	2201      	movs	r2, #1
 8017a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017a2e:	e003      	b.n	8017a38 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017a30:	6839      	ldr	r1, [r7, #0]
 8017a32:	6878      	ldr	r0, [r7, #4]
 8017a34:	f000 f96b 	bl	8017d0e <USBD_CtlError>
  }
}
 8017a38:	bf00      	nop
 8017a3a:	3710      	adds	r7, #16
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}

08017a40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b082      	sub	sp, #8
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
 8017a48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017a4a:	683b      	ldr	r3, [r7, #0]
 8017a4c:	885b      	ldrh	r3, [r3, #2]
 8017a4e:	b2da      	uxtb	r2, r3
 8017a50:	4b41      	ldr	r3, [pc, #260]	; (8017b58 <USBD_SetConfig+0x118>)
 8017a52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017a54:	4b40      	ldr	r3, [pc, #256]	; (8017b58 <USBD_SetConfig+0x118>)
 8017a56:	781b      	ldrb	r3, [r3, #0]
 8017a58:	2b01      	cmp	r3, #1
 8017a5a:	d904      	bls.n	8017a66 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8017a5c:	6839      	ldr	r1, [r7, #0]
 8017a5e:	6878      	ldr	r0, [r7, #4]
 8017a60:	f000 f955 	bl	8017d0e <USBD_CtlError>
 8017a64:	e075      	b.n	8017b52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017a6c:	2b02      	cmp	r3, #2
 8017a6e:	d002      	beq.n	8017a76 <USBD_SetConfig+0x36>
 8017a70:	2b03      	cmp	r3, #3
 8017a72:	d023      	beq.n	8017abc <USBD_SetConfig+0x7c>
 8017a74:	e062      	b.n	8017b3c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8017a76:	4b38      	ldr	r3, [pc, #224]	; (8017b58 <USBD_SetConfig+0x118>)
 8017a78:	781b      	ldrb	r3, [r3, #0]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d01a      	beq.n	8017ab4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8017a7e:	4b36      	ldr	r3, [pc, #216]	; (8017b58 <USBD_SetConfig+0x118>)
 8017a80:	781b      	ldrb	r3, [r3, #0]
 8017a82:	461a      	mov	r2, r3
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2203      	movs	r2, #3
 8017a8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8017a90:	4b31      	ldr	r3, [pc, #196]	; (8017b58 <USBD_SetConfig+0x118>)
 8017a92:	781b      	ldrb	r3, [r3, #0]
 8017a94:	4619      	mov	r1, r3
 8017a96:	6878      	ldr	r0, [r7, #4]
 8017a98:	f7ff f9c7 	bl	8016e2a <USBD_SetClassConfig>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	2b02      	cmp	r3, #2
 8017aa0:	d104      	bne.n	8017aac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8017aa2:	6839      	ldr	r1, [r7, #0]
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f000 f932 	bl	8017d0e <USBD_CtlError>
            return;
 8017aaa:	e052      	b.n	8017b52 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8017aac:	6878      	ldr	r0, [r7, #4]
 8017aae:	f000 f9f7 	bl	8017ea0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8017ab2:	e04e      	b.n	8017b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8017ab4:	6878      	ldr	r0, [r7, #4]
 8017ab6:	f000 f9f3 	bl	8017ea0 <USBD_CtlSendStatus>
        break;
 8017aba:	e04a      	b.n	8017b52 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8017abc:	4b26      	ldr	r3, [pc, #152]	; (8017b58 <USBD_SetConfig+0x118>)
 8017abe:	781b      	ldrb	r3, [r3, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d112      	bne.n	8017aea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	2202      	movs	r2, #2
 8017ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8017acc:	4b22      	ldr	r3, [pc, #136]	; (8017b58 <USBD_SetConfig+0x118>)
 8017ace:	781b      	ldrb	r3, [r3, #0]
 8017ad0:	461a      	mov	r2, r3
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8017ad6:	4b20      	ldr	r3, [pc, #128]	; (8017b58 <USBD_SetConfig+0x118>)
 8017ad8:	781b      	ldrb	r3, [r3, #0]
 8017ada:	4619      	mov	r1, r3
 8017adc:	6878      	ldr	r0, [r7, #4]
 8017ade:	f7ff f9c3 	bl	8016e68 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8017ae2:	6878      	ldr	r0, [r7, #4]
 8017ae4:	f000 f9dc 	bl	8017ea0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8017ae8:	e033      	b.n	8017b52 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8017aea:	4b1b      	ldr	r3, [pc, #108]	; (8017b58 <USBD_SetConfig+0x118>)
 8017aec:	781b      	ldrb	r3, [r3, #0]
 8017aee:	461a      	mov	r2, r3
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	685b      	ldr	r3, [r3, #4]
 8017af4:	429a      	cmp	r2, r3
 8017af6:	d01d      	beq.n	8017b34 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	685b      	ldr	r3, [r3, #4]
 8017afc:	b2db      	uxtb	r3, r3
 8017afe:	4619      	mov	r1, r3
 8017b00:	6878      	ldr	r0, [r7, #4]
 8017b02:	f7ff f9b1 	bl	8016e68 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8017b06:	4b14      	ldr	r3, [pc, #80]	; (8017b58 <USBD_SetConfig+0x118>)
 8017b08:	781b      	ldrb	r3, [r3, #0]
 8017b0a:	461a      	mov	r2, r3
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8017b10:	4b11      	ldr	r3, [pc, #68]	; (8017b58 <USBD_SetConfig+0x118>)
 8017b12:	781b      	ldrb	r3, [r3, #0]
 8017b14:	4619      	mov	r1, r3
 8017b16:	6878      	ldr	r0, [r7, #4]
 8017b18:	f7ff f987 	bl	8016e2a <USBD_SetClassConfig>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	2b02      	cmp	r3, #2
 8017b20:	d104      	bne.n	8017b2c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8017b22:	6839      	ldr	r1, [r7, #0]
 8017b24:	6878      	ldr	r0, [r7, #4]
 8017b26:	f000 f8f2 	bl	8017d0e <USBD_CtlError>
            return;
 8017b2a:	e012      	b.n	8017b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8017b2c:	6878      	ldr	r0, [r7, #4]
 8017b2e:	f000 f9b7 	bl	8017ea0 <USBD_CtlSendStatus>
        break;
 8017b32:	e00e      	b.n	8017b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8017b34:	6878      	ldr	r0, [r7, #4]
 8017b36:	f000 f9b3 	bl	8017ea0 <USBD_CtlSendStatus>
        break;
 8017b3a:	e00a      	b.n	8017b52 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8017b3c:	6839      	ldr	r1, [r7, #0]
 8017b3e:	6878      	ldr	r0, [r7, #4]
 8017b40:	f000 f8e5 	bl	8017d0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8017b44:	4b04      	ldr	r3, [pc, #16]	; (8017b58 <USBD_SetConfig+0x118>)
 8017b46:	781b      	ldrb	r3, [r3, #0]
 8017b48:	4619      	mov	r1, r3
 8017b4a:	6878      	ldr	r0, [r7, #4]
 8017b4c:	f7ff f98c 	bl	8016e68 <USBD_ClrClassConfig>
        break;
 8017b50:	bf00      	nop
    }
  }
}
 8017b52:	3708      	adds	r7, #8
 8017b54:	46bd      	mov	sp, r7
 8017b56:	bd80      	pop	{r7, pc}
 8017b58:	20027650 	.word	0x20027650

08017b5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b082      	sub	sp, #8
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
 8017b64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017b66:	683b      	ldr	r3, [r7, #0]
 8017b68:	88db      	ldrh	r3, [r3, #6]
 8017b6a:	2b01      	cmp	r3, #1
 8017b6c:	d004      	beq.n	8017b78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017b6e:	6839      	ldr	r1, [r7, #0]
 8017b70:	6878      	ldr	r0, [r7, #4]
 8017b72:	f000 f8cc 	bl	8017d0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017b76:	e021      	b.n	8017bbc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017b7e:	2b01      	cmp	r3, #1
 8017b80:	db17      	blt.n	8017bb2 <USBD_GetConfig+0x56>
 8017b82:	2b02      	cmp	r3, #2
 8017b84:	dd02      	ble.n	8017b8c <USBD_GetConfig+0x30>
 8017b86:	2b03      	cmp	r3, #3
 8017b88:	d00b      	beq.n	8017ba2 <USBD_GetConfig+0x46>
 8017b8a:	e012      	b.n	8017bb2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	2200      	movs	r2, #0
 8017b90:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	3308      	adds	r3, #8
 8017b96:	2201      	movs	r2, #1
 8017b98:	4619      	mov	r1, r3
 8017b9a:	6878      	ldr	r0, [r7, #4]
 8017b9c:	f000 f922 	bl	8017de4 <USBD_CtlSendData>
        break;
 8017ba0:	e00c      	b.n	8017bbc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	3304      	adds	r3, #4
 8017ba6:	2201      	movs	r2, #1
 8017ba8:	4619      	mov	r1, r3
 8017baa:	6878      	ldr	r0, [r7, #4]
 8017bac:	f000 f91a 	bl	8017de4 <USBD_CtlSendData>
        break;
 8017bb0:	e004      	b.n	8017bbc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8017bb2:	6839      	ldr	r1, [r7, #0]
 8017bb4:	6878      	ldr	r0, [r7, #4]
 8017bb6:	f000 f8aa 	bl	8017d0e <USBD_CtlError>
        break;
 8017bba:	bf00      	nop
}
 8017bbc:	bf00      	nop
 8017bbe:	3708      	adds	r7, #8
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd80      	pop	{r7, pc}

08017bc4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b082      	sub	sp, #8
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
 8017bcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017bd4:	3b01      	subs	r3, #1
 8017bd6:	2b02      	cmp	r3, #2
 8017bd8:	d81e      	bhi.n	8017c18 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017bda:	683b      	ldr	r3, [r7, #0]
 8017bdc:	88db      	ldrh	r3, [r3, #6]
 8017bde:	2b02      	cmp	r3, #2
 8017be0:	d004      	beq.n	8017bec <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8017be2:	6839      	ldr	r1, [r7, #0]
 8017be4:	6878      	ldr	r0, [r7, #4]
 8017be6:	f000 f892 	bl	8017d0e <USBD_CtlError>
        break;
 8017bea:	e01a      	b.n	8017c22 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	2201      	movs	r2, #1
 8017bf0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d005      	beq.n	8017c08 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	68db      	ldr	r3, [r3, #12]
 8017c00:	f043 0202 	orr.w	r2, r3, #2
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	330c      	adds	r3, #12
 8017c0c:	2202      	movs	r2, #2
 8017c0e:	4619      	mov	r1, r3
 8017c10:	6878      	ldr	r0, [r7, #4]
 8017c12:	f000 f8e7 	bl	8017de4 <USBD_CtlSendData>
      break;
 8017c16:	e004      	b.n	8017c22 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8017c18:	6839      	ldr	r1, [r7, #0]
 8017c1a:	6878      	ldr	r0, [r7, #4]
 8017c1c:	f000 f877 	bl	8017d0e <USBD_CtlError>
      break;
 8017c20:	bf00      	nop
  }
}
 8017c22:	bf00      	nop
 8017c24:	3708      	adds	r7, #8
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}

08017c2a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8017c2a:	b580      	push	{r7, lr}
 8017c2c:	b082      	sub	sp, #8
 8017c2e:	af00      	add	r7, sp, #0
 8017c30:	6078      	str	r0, [r7, #4]
 8017c32:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017c34:	683b      	ldr	r3, [r7, #0]
 8017c36:	885b      	ldrh	r3, [r3, #2]
 8017c38:	2b01      	cmp	r3, #1
 8017c3a:	d106      	bne.n	8017c4a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	2201      	movs	r2, #1
 8017c40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8017c44:	6878      	ldr	r0, [r7, #4]
 8017c46:	f000 f92b 	bl	8017ea0 <USBD_CtlSendStatus>
  }
}
 8017c4a:	bf00      	nop
 8017c4c:	3708      	adds	r7, #8
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	bd80      	pop	{r7, pc}

08017c52 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8017c52:	b580      	push	{r7, lr}
 8017c54:	b082      	sub	sp, #8
 8017c56:	af00      	add	r7, sp, #0
 8017c58:	6078      	str	r0, [r7, #4]
 8017c5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017c62:	3b01      	subs	r3, #1
 8017c64:	2b02      	cmp	r3, #2
 8017c66:	d80b      	bhi.n	8017c80 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017c68:	683b      	ldr	r3, [r7, #0]
 8017c6a:	885b      	ldrh	r3, [r3, #2]
 8017c6c:	2b01      	cmp	r3, #1
 8017c6e:	d10c      	bne.n	8017c8a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	2200      	movs	r2, #0
 8017c74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8017c78:	6878      	ldr	r0, [r7, #4]
 8017c7a:	f000 f911 	bl	8017ea0 <USBD_CtlSendStatus>
      }
      break;
 8017c7e:	e004      	b.n	8017c8a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8017c80:	6839      	ldr	r1, [r7, #0]
 8017c82:	6878      	ldr	r0, [r7, #4]
 8017c84:	f000 f843 	bl	8017d0e <USBD_CtlError>
      break;
 8017c88:	e000      	b.n	8017c8c <USBD_ClrFeature+0x3a>
      break;
 8017c8a:	bf00      	nop
  }
}
 8017c8c:	bf00      	nop
 8017c8e:	3708      	adds	r7, #8
 8017c90:	46bd      	mov	sp, r7
 8017c92:	bd80      	pop	{r7, pc}

08017c94 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017c94:	b480      	push	{r7}
 8017c96:	b083      	sub	sp, #12
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	6078      	str	r0, [r7, #4]
 8017c9c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	781a      	ldrb	r2, [r3, #0]
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8017ca6:	683b      	ldr	r3, [r7, #0]
 8017ca8:	785a      	ldrb	r2, [r3, #1]
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8017cae:	683b      	ldr	r3, [r7, #0]
 8017cb0:	3302      	adds	r3, #2
 8017cb2:	781b      	ldrb	r3, [r3, #0]
 8017cb4:	b29a      	uxth	r2, r3
 8017cb6:	683b      	ldr	r3, [r7, #0]
 8017cb8:	3303      	adds	r3, #3
 8017cba:	781b      	ldrb	r3, [r3, #0]
 8017cbc:	b29b      	uxth	r3, r3
 8017cbe:	021b      	lsls	r3, r3, #8
 8017cc0:	b29b      	uxth	r3, r3
 8017cc2:	4413      	add	r3, r2
 8017cc4:	b29a      	uxth	r2, r3
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8017cca:	683b      	ldr	r3, [r7, #0]
 8017ccc:	3304      	adds	r3, #4
 8017cce:	781b      	ldrb	r3, [r3, #0]
 8017cd0:	b29a      	uxth	r2, r3
 8017cd2:	683b      	ldr	r3, [r7, #0]
 8017cd4:	3305      	adds	r3, #5
 8017cd6:	781b      	ldrb	r3, [r3, #0]
 8017cd8:	b29b      	uxth	r3, r3
 8017cda:	021b      	lsls	r3, r3, #8
 8017cdc:	b29b      	uxth	r3, r3
 8017cde:	4413      	add	r3, r2
 8017ce0:	b29a      	uxth	r2, r3
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8017ce6:	683b      	ldr	r3, [r7, #0]
 8017ce8:	3306      	adds	r3, #6
 8017cea:	781b      	ldrb	r3, [r3, #0]
 8017cec:	b29a      	uxth	r2, r3
 8017cee:	683b      	ldr	r3, [r7, #0]
 8017cf0:	3307      	adds	r3, #7
 8017cf2:	781b      	ldrb	r3, [r3, #0]
 8017cf4:	b29b      	uxth	r3, r3
 8017cf6:	021b      	lsls	r3, r3, #8
 8017cf8:	b29b      	uxth	r3, r3
 8017cfa:	4413      	add	r3, r2
 8017cfc:	b29a      	uxth	r2, r3
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	80da      	strh	r2, [r3, #6]

}
 8017d02:	bf00      	nop
 8017d04:	370c      	adds	r7, #12
 8017d06:	46bd      	mov	sp, r7
 8017d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0c:	4770      	bx	lr

08017d0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8017d0e:	b580      	push	{r7, lr}
 8017d10:	b082      	sub	sp, #8
 8017d12:	af00      	add	r7, sp, #0
 8017d14:	6078      	str	r0, [r7, #4]
 8017d16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8017d18:	2180      	movs	r1, #128	; 0x80
 8017d1a:	6878      	ldr	r0, [r7, #4]
 8017d1c:	f001 ffff 	bl	8019d1e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8017d20:	2100      	movs	r1, #0
 8017d22:	6878      	ldr	r0, [r7, #4]
 8017d24:	f001 fffb 	bl	8019d1e <USBD_LL_StallEP>
}
 8017d28:	bf00      	nop
 8017d2a:	3708      	adds	r7, #8
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}

08017d30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b086      	sub	sp, #24
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	60f8      	str	r0, [r7, #12]
 8017d38:	60b9      	str	r1, [r7, #8]
 8017d3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d032      	beq.n	8017dac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8017d46:	68f8      	ldr	r0, [r7, #12]
 8017d48:	f000 f834 	bl	8017db4 <USBD_GetLen>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	3301      	adds	r3, #1
 8017d50:	b29b      	uxth	r3, r3
 8017d52:	005b      	lsls	r3, r3, #1
 8017d54:	b29a      	uxth	r2, r3
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8017d5a:	7dfb      	ldrb	r3, [r7, #23]
 8017d5c:	1c5a      	adds	r2, r3, #1
 8017d5e:	75fa      	strb	r2, [r7, #23]
 8017d60:	461a      	mov	r2, r3
 8017d62:	68bb      	ldr	r3, [r7, #8]
 8017d64:	4413      	add	r3, r2
 8017d66:	687a      	ldr	r2, [r7, #4]
 8017d68:	7812      	ldrb	r2, [r2, #0]
 8017d6a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8017d6c:	7dfb      	ldrb	r3, [r7, #23]
 8017d6e:	1c5a      	adds	r2, r3, #1
 8017d70:	75fa      	strb	r2, [r7, #23]
 8017d72:	461a      	mov	r2, r3
 8017d74:	68bb      	ldr	r3, [r7, #8]
 8017d76:	4413      	add	r3, r2
 8017d78:	2203      	movs	r2, #3
 8017d7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8017d7c:	e012      	b.n	8017da4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	1c5a      	adds	r2, r3, #1
 8017d82:	60fa      	str	r2, [r7, #12]
 8017d84:	7dfa      	ldrb	r2, [r7, #23]
 8017d86:	1c51      	adds	r1, r2, #1
 8017d88:	75f9      	strb	r1, [r7, #23]
 8017d8a:	4611      	mov	r1, r2
 8017d8c:	68ba      	ldr	r2, [r7, #8]
 8017d8e:	440a      	add	r2, r1
 8017d90:	781b      	ldrb	r3, [r3, #0]
 8017d92:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8017d94:	7dfb      	ldrb	r3, [r7, #23]
 8017d96:	1c5a      	adds	r2, r3, #1
 8017d98:	75fa      	strb	r2, [r7, #23]
 8017d9a:	461a      	mov	r2, r3
 8017d9c:	68bb      	ldr	r3, [r7, #8]
 8017d9e:	4413      	add	r3, r2
 8017da0:	2200      	movs	r2, #0
 8017da2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	781b      	ldrb	r3, [r3, #0]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d1e8      	bne.n	8017d7e <USBD_GetString+0x4e>
    }
  }
}
 8017dac:	bf00      	nop
 8017dae:	3718      	adds	r7, #24
 8017db0:	46bd      	mov	sp, r7
 8017db2:	bd80      	pop	{r7, pc}

08017db4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017db4:	b480      	push	{r7}
 8017db6:	b085      	sub	sp, #20
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8017dc0:	e005      	b.n	8017dce <USBD_GetLen+0x1a>
  {
    len++;
 8017dc2:	7bfb      	ldrb	r3, [r7, #15]
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	3301      	adds	r3, #1
 8017dcc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	781b      	ldrb	r3, [r3, #0]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d1f5      	bne.n	8017dc2 <USBD_GetLen+0xe>
  }

  return len;
 8017dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017dd8:	4618      	mov	r0, r3
 8017dda:	3714      	adds	r7, #20
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de2:	4770      	bx	lr

08017de4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b084      	sub	sp, #16
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	60f8      	str	r0, [r7, #12]
 8017dec:	60b9      	str	r1, [r7, #8]
 8017dee:	4613      	mov	r3, r2
 8017df0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	2202      	movs	r2, #2
 8017df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017dfa:	88fa      	ldrh	r2, [r7, #6]
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8017e00:	88fa      	ldrh	r2, [r7, #6]
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017e06:	88fb      	ldrh	r3, [r7, #6]
 8017e08:	68ba      	ldr	r2, [r7, #8]
 8017e0a:	2100      	movs	r1, #0
 8017e0c:	68f8      	ldr	r0, [r7, #12]
 8017e0e:	f002 f809 	bl	8019e24 <USBD_LL_Transmit>

  return USBD_OK;
 8017e12:	2300      	movs	r3, #0
}
 8017e14:	4618      	mov	r0, r3
 8017e16:	3710      	adds	r7, #16
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	bd80      	pop	{r7, pc}

08017e1c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8017e1c:	b580      	push	{r7, lr}
 8017e1e:	b084      	sub	sp, #16
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	60f8      	str	r0, [r7, #12]
 8017e24:	60b9      	str	r1, [r7, #8]
 8017e26:	4613      	mov	r3, r2
 8017e28:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017e2a:	88fb      	ldrh	r3, [r7, #6]
 8017e2c:	68ba      	ldr	r2, [r7, #8]
 8017e2e:	2100      	movs	r1, #0
 8017e30:	68f8      	ldr	r0, [r7, #12]
 8017e32:	f001 fff7 	bl	8019e24 <USBD_LL_Transmit>

  return USBD_OK;
 8017e36:	2300      	movs	r3, #0
}
 8017e38:	4618      	mov	r0, r3
 8017e3a:	3710      	adds	r7, #16
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}

08017e40 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b084      	sub	sp, #16
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	60f8      	str	r0, [r7, #12]
 8017e48:	60b9      	str	r1, [r7, #8]
 8017e4a:	4613      	mov	r3, r2
 8017e4c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	2203      	movs	r2, #3
 8017e52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017e56:	88fa      	ldrh	r2, [r7, #6]
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8017e5e:	88fa      	ldrh	r2, [r7, #6]
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017e66:	88fb      	ldrh	r3, [r7, #6]
 8017e68:	68ba      	ldr	r2, [r7, #8]
 8017e6a:	2100      	movs	r1, #0
 8017e6c:	68f8      	ldr	r0, [r7, #12]
 8017e6e:	f001 fffc 	bl	8019e6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017e72:	2300      	movs	r3, #0
}
 8017e74:	4618      	mov	r0, r3
 8017e76:	3710      	adds	r7, #16
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd80      	pop	{r7, pc}

08017e7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b084      	sub	sp, #16
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	4613      	mov	r3, r2
 8017e88:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017e8a:	88fb      	ldrh	r3, [r7, #6]
 8017e8c:	68ba      	ldr	r2, [r7, #8]
 8017e8e:	2100      	movs	r1, #0
 8017e90:	68f8      	ldr	r0, [r7, #12]
 8017e92:	f001 ffea 	bl	8019e6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017e96:	2300      	movs	r3, #0
}
 8017e98:	4618      	mov	r0, r3
 8017e9a:	3710      	adds	r7, #16
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	bd80      	pop	{r7, pc}

08017ea0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b082      	sub	sp, #8
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	2204      	movs	r2, #4
 8017eac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	2100      	movs	r1, #0
 8017eb6:	6878      	ldr	r0, [r7, #4]
 8017eb8:	f001 ffb4 	bl	8019e24 <USBD_LL_Transmit>

  return USBD_OK;
 8017ebc:	2300      	movs	r3, #0
}
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	3708      	adds	r7, #8
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	bd80      	pop	{r7, pc}

08017ec6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017ec6:	b580      	push	{r7, lr}
 8017ec8:	b082      	sub	sp, #8
 8017eca:	af00      	add	r7, sp, #0
 8017ecc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	2205      	movs	r2, #5
 8017ed2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	2200      	movs	r2, #0
 8017eda:	2100      	movs	r1, #0
 8017edc:	6878      	ldr	r0, [r7, #4]
 8017ede:	f001 ffc4 	bl	8019e6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017ee2:	2300      	movs	r3, #0
}
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	3708      	adds	r7, #8
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	bd80      	pop	{r7, pc}

08017eec <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b082      	sub	sp, #8
 8017ef0:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8017ef2:	f000 fa21 	bl	8018338 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8017ef6:	480e      	ldr	r0, [pc, #56]	; (8017f30 <APP_THREAD_Init+0x44>)
 8017ef8:	f000 fef4 	bl	8018ce4 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8017efc:	2101      	movs	r1, #1
 8017efe:	2002      	movs	r0, #2
 8017f00:	f002 f87c 	bl	8019ffc <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8017f04:	f000 ffe6 	bl	8018ed4 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8017f08:	f000 ffd2 	bl	8018eb0 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8017f0c:	f7fd ff13 	bl	8015d36 <SHCI_C2_THREAD_Init>
 8017f10:	4603      	mov	r3, r0
 8017f12:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8017f14:	4a07      	ldr	r2, [pc, #28]	; (8017f34 <APP_THREAD_Init+0x48>)
 8017f16:	2100      	movs	r1, #0
 8017f18:	4807      	ldr	r0, [pc, #28]	; (8017f38 <APP_THREAD_Init+0x4c>)
 8017f1a:	f7f8 fb67 	bl	80105ec <osThreadNew>
 8017f1e:	4602      	mov	r2, r0
 8017f20:	4b06      	ldr	r3, [pc, #24]	; (8017f3c <APP_THREAD_Init+0x50>)
 8017f22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8017f24:	f000 f892 	bl	801804c <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8017f28:	bf00      	nop
 8017f2a:	3708      	adds	r7, #8
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	bd80      	pop	{r7, pc}
 8017f30:	20030838 	.word	0x20030838
 8017f34:	0801c128 	.word	0x0801c128
 8017f38:	080183f5 	.word	0x080183f5
 8017f3c:	20027768 	.word	0x20027768

08017f40 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b082      	sub	sp, #8
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
 8017f48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	2b1a      	cmp	r3, #26
 8017f4e:	d861      	bhi.n	8018014 <APP_THREAD_Error+0xd4>
 8017f50:	a201      	add	r2, pc, #4	; (adr r2, 8017f58 <APP_THREAD_Error+0x18>)
 8017f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f56:	bf00      	nop
 8017f58:	08017fc5 	.word	0x08017fc5
 8017f5c:	08017fcf 	.word	0x08017fcf
 8017f60:	08017fd9 	.word	0x08017fd9
 8017f64:	08017fe3 	.word	0x08017fe3
 8017f68:	08017fed 	.word	0x08017fed
 8017f6c:	08017ff7 	.word	0x08017ff7
 8017f70:	08018001 	.word	0x08018001
 8017f74:	08018015 	.word	0x08018015
 8017f78:	08018015 	.word	0x08018015
 8017f7c:	08018015 	.word	0x08018015
 8017f80:	08018015 	.word	0x08018015
 8017f84:	08018015 	.word	0x08018015
 8017f88:	08018015 	.word	0x08018015
 8017f8c:	08018015 	.word	0x08018015
 8017f90:	08018015 	.word	0x08018015
 8017f94:	08018015 	.word	0x08018015
 8017f98:	08018015 	.word	0x08018015
 8017f9c:	08018015 	.word	0x08018015
 8017fa0:	08018015 	.word	0x08018015
 8017fa4:	08018015 	.word	0x08018015
 8017fa8:	08018015 	.word	0x08018015
 8017fac:	08018015 	.word	0x08018015
 8017fb0:	08018015 	.word	0x08018015
 8017fb4:	08018015 	.word	0x08018015
 8017fb8:	08018015 	.word	0x08018015
 8017fbc:	08018015 	.word	0x08018015
 8017fc0:	0801800b 	.word	0x0801800b
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8017fc4:	6839      	ldr	r1, [r7, #0]
 8017fc6:	4818      	ldr	r0, [pc, #96]	; (8018028 <APP_THREAD_Error+0xe8>)
 8017fc8:	f000 f9aa 	bl	8018320 <APP_THREAD_TraceError>
    break;
 8017fcc:	e027      	b.n	801801e <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8017fce:	6839      	ldr	r1, [r7, #0]
 8017fd0:	4816      	ldr	r0, [pc, #88]	; (801802c <APP_THREAD_Error+0xec>)
 8017fd2:	f000 f9a5 	bl	8018320 <APP_THREAD_TraceError>
    break;
 8017fd6:	e022      	b.n	801801e <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8017fd8:	6839      	ldr	r1, [r7, #0]
 8017fda:	4815      	ldr	r0, [pc, #84]	; (8018030 <APP_THREAD_Error+0xf0>)
 8017fdc:	f000 f9a0 	bl	8018320 <APP_THREAD_TraceError>
    break;
 8017fe0:	e01d      	b.n	801801e <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8017fe2:	6839      	ldr	r1, [r7, #0]
 8017fe4:	4813      	ldr	r0, [pc, #76]	; (8018034 <APP_THREAD_Error+0xf4>)
 8017fe6:	f000 f99b 	bl	8018320 <APP_THREAD_TraceError>
    break;
 8017fea:	e018      	b.n	801801e <APP_THREAD_Error+0xde>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8017fec:	6839      	ldr	r1, [r7, #0]
 8017fee:	4812      	ldr	r0, [pc, #72]	; (8018038 <APP_THREAD_Error+0xf8>)
 8017ff0:	f000 f996 	bl	8018320 <APP_THREAD_TraceError>
    break;
 8017ff4:	e013      	b.n	801801e <APP_THREAD_Error+0xde>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8017ff6:	6839      	ldr	r1, [r7, #0]
 8017ff8:	4810      	ldr	r0, [pc, #64]	; (801803c <APP_THREAD_Error+0xfc>)
 8017ffa:	f000 f991 	bl	8018320 <APP_THREAD_TraceError>
    break;
 8017ffe:	e00e      	b.n	801801e <APP_THREAD_Error+0xde>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8018000:	6839      	ldr	r1, [r7, #0]
 8018002:	480f      	ldr	r0, [pc, #60]	; (8018040 <APP_THREAD_Error+0x100>)
 8018004:	f000 f98c 	bl	8018320 <APP_THREAD_TraceError>
    break;
 8018008:	e009      	b.n	801801e <APP_THREAD_Error+0xde>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 801800a:	6839      	ldr	r1, [r7, #0]
 801800c:	480d      	ldr	r0, [pc, #52]	; (8018044 <APP_THREAD_Error+0x104>)
 801800e:	f000 f987 	bl	8018320 <APP_THREAD_TraceError>
    break;
 8018012:	e004      	b.n	801801e <APP_THREAD_Error+0xde>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8018014:	2100      	movs	r1, #0
 8018016:	480c      	ldr	r0, [pc, #48]	; (8018048 <APP_THREAD_Error+0x108>)
 8018018:	f000 f982 	bl	8018320 <APP_THREAD_TraceError>
    break;
 801801c:	bf00      	nop
  }
}
 801801e:	bf00      	nop
 8018020:	3708      	adds	r7, #8
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}
 8018026:	bf00      	nop
 8018028:	0801ba90 	.word	0x0801ba90
 801802c:	0801bab4 	.word	0x0801bab4
 8018030:	0801bad8 	.word	0x0801bad8
 8018034:	0801baf8 	.word	0x0801baf8
 8018038:	0801bb18 	.word	0x0801bb18
 801803c:	0801bb38 	.word	0x0801bb38
 8018040:	0801bb54 	.word	0x0801bb54
 8018044:	0801bb80 	.word	0x0801bb80
 8018048:	0801bba4 	.word	0x0801bba4

0801804c <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 801804c:	b590      	push	{r4, r7, lr}
 801804e:	b083      	sub	sp, #12
 8018050:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8018052:	2000      	movs	r0, #0
 8018054:	f7fd fa7c 	bl	8015550 <otInstanceErasePersistentInfo>
 8018058:	4603      	mov	r3, r0
 801805a:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801805c:	79fb      	ldrb	r3, [r7, #7]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d004      	beq.n	801806c <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8018062:	79fb      	ldrb	r3, [r7, #7]
 8018064:	4619      	mov	r1, r3
 8018066:	2006      	movs	r0, #6
 8018068:	f7ff ff6a 	bl	8017f40 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 801806c:	2000      	movs	r0, #0
 801806e:	f7fd fa12 	bl	8015496 <otInstanceFinalize>
  otInstanceInitSingle();
 8018072:	f7fd f9e9 	bl	8015448 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8018076:	2200      	movs	r2, #0
 8018078:	497b      	ldr	r1, [pc, #492]	; (8018268 <APP_THREAD_DeviceConfig+0x21c>)
 801807a:	2000      	movs	r0, #0
 801807c:	f7fd fa32 	bl	80154e4 <otSetStateChangedCallback>
 8018080:	4603      	mov	r3, r0
 8018082:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8018084:	79fb      	ldrb	r3, [r7, #7]
 8018086:	2b00      	cmp	r3, #0
 8018088:	d004      	beq.n	8018094 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 801808a:	79fb      	ldrb	r3, [r7, #7]
 801808c:	4619      	mov	r1, r3
 801808e:	2001      	movs	r0, #1
 8018090:	f7ff ff56 	bl	8017f40 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8018094:	2117      	movs	r1, #23
 8018096:	2000      	movs	r0, #0
 8018098:	f7fd fb1b 	bl	80156d2 <otLinkSetChannel>
 801809c:	4603      	mov	r3, r0
 801809e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80180a0:	79fb      	ldrb	r3, [r7, #7]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d004      	beq.n	80180b0 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80180a6:	79fb      	ldrb	r3, [r7, #7]
 80180a8:	4619      	mov	r1, r3
 80180aa:	2002      	movs	r0, #2
 80180ac:	f7ff ff48 	bl	8017f40 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 80180b0:	f241 2134 	movw	r1, #4660	; 0x1234
 80180b4:	2000      	movs	r0, #0
 80180b6:	f7fd fb3c 	bl	8015732 <otLinkSetPanId>
 80180ba:	4603      	mov	r3, r0
 80180bc:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80180be:	79fb      	ldrb	r3, [r7, #7]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d004      	beq.n	80180ce <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 80180c4:	79fb      	ldrb	r3, [r7, #7]
 80180c6:	4619      	mov	r1, r3
 80180c8:	2003      	movs	r0, #3
 80180ca:	f7ff ff39 	bl	8017f40 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 80180ce:	2101      	movs	r1, #1
 80180d0:	2000      	movs	r0, #0
 80180d2:	f7fd fa66 	bl	80155a2 <otIp6SetEnabled>
 80180d6:	4603      	mov	r3, r0
 80180d8:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80180da:	79fb      	ldrb	r3, [r7, #7]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d004      	beq.n	80180ea <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 80180e0:	79fb      	ldrb	r3, [r7, #7]
 80180e2:	4619      	mov	r1, r3
 80180e4:	2004      	movs	r0, #4
 80180e6:	f7ff ff2b 	bl	8017f40 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 80180ea:	2101      	movs	r1, #1
 80180ec:	2000      	movs	r0, #0
 80180ee:	f7fe f8c1 	bl	8016274 <otThreadSetEnabled>
 80180f2:	4603      	mov	r3, r0
 80180f4:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80180f6:	79fb      	ldrb	r3, [r7, #7]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d004      	beq.n	8018106 <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 80180fc:	79fb      	ldrb	r3, [r7, #7]
 80180fe:	4619      	mov	r1, r3
 8018100:	2005      	movs	r0, #5
 8018102:	f7ff ff1d 	bl	8017f40 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
	error = otThreadSetEnabled(NULL, false);
 8018106:	2100      	movs	r1, #0
 8018108:	2000      	movs	r0, #0
 801810a:	f7fe f8b3 	bl	8016274 <otThreadSetEnabled>
 801810e:	4603      	mov	r3, r0
 8018110:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018112:	79fb      	ldrb	r3, [r7, #7]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d004      	beq.n	8018122 <APP_THREAD_DeviceConfig+0xd6>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8018118:	79fb      	ldrb	r3, [r7, #7]
 801811a:	4619      	mov	r1, r3
 801811c:	2005      	movs	r0, #5
 801811e:	f7ff ff0f 	bl	8017f40 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, false);
 8018122:	2100      	movs	r1, #0
 8018124:	2000      	movs	r0, #0
 8018126:	f7fd fa3c 	bl	80155a2 <otIp6SetEnabled>
 801812a:	4603      	mov	r3, r0
 801812c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801812e:	79fb      	ldrb	r3, [r7, #7]
 8018130:	2b00      	cmp	r3, #0
 8018132:	d004      	beq.n	801813e <APP_THREAD_DeviceConfig+0xf2>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8018134:	79fb      	ldrb	r3, [r7, #7]
 8018136:	4619      	mov	r1, r3
 8018138:	2004      	movs	r0, #4
 801813a:	f7ff ff01 	bl	8017f40 <APP_THREAD_Error>
	}

	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 801813e:	2106      	movs	r1, #6
 8018140:	2000      	movs	r0, #0
 8018142:	f7fd fdc5 	bl	8015cd0 <otPlatRadioSetTransmitPower>
 8018146:	4603      	mov	r3, r0
 8018148:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801814a:	79fb      	ldrb	r3, [r7, #7]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d004      	beq.n	801815a <APP_THREAD_DeviceConfig+0x10e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8018150:	79fb      	ldrb	r3, [r7, #7]
 8018152:	4619      	mov	r1, r3
 8018154:	2002      	movs	r0, #2
 8018156:	f7ff fef3 	bl	8017f40 <APP_THREAD_Error>
	}

	otChildSupervisionSetCheckTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 801815a:	2103      	movs	r1, #3
 801815c:	2000      	movs	r0, #0
 801815e:	f7fc fe09 	bl	8014d74 <otChildSupervisionSetCheckTimeout>
	otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);
 8018162:	2102      	movs	r1, #2
 8018164:	2000      	movs	r0, #0
 8018166:	f7fc fdd6 	bl	8014d16 <otChildSupervisionSetInterval>

//   error = otIp6AddressFromString("ff12::1", &multicastAddr);
//   error = otIp6SubscribeMulticastAddress(NULL, &multicastAddr);

	error = otThreadSetMasterKey(NULL, &masterKey);
 801816a:	4940      	ldr	r1, [pc, #256]	; (801826c <APP_THREAD_DeviceConfig+0x220>)
 801816c:	2000      	movs	r0, #0
 801816e:	f7fe f8e0 	bl	8016332 <otThreadSetMasterKey>
 8018172:	4603      	mov	r3, r0
 8018174:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018176:	79fb      	ldrb	r3, [r7, #7]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d004      	beq.n	8018186 <APP_THREAD_DeviceConfig+0x13a>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 801817c:	79fb      	ldrb	r3, [r7, #7]
 801817e:	4619      	mov	r1, r3
 8018180:	2002      	movs	r0, #2
 8018182:	f7ff fedd 	bl	8017f40 <APP_THREAD_Error>
	}

	error = otThreadSetNetworkName(NULL, networkName);
 8018186:	493a      	ldr	r1, [pc, #232]	; (8018270 <APP_THREAD_DeviceConfig+0x224>)
 8018188:	2000      	movs	r0, #0
 801818a:	f7fe f901 	bl	8016390 <otThreadSetNetworkName>
 801818e:	4603      	mov	r3, r0
 8018190:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018192:	79fb      	ldrb	r3, [r7, #7]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d004      	beq.n	80181a2 <APP_THREAD_DeviceConfig+0x156>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8018198:	79fb      	ldrb	r3, [r7, #7]
 801819a:	4619      	mov	r1, r3
 801819c:	2002      	movs	r0, #2
 801819e:	f7ff fecf 	bl	8017f40 <APP_THREAD_Error>
	}
	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
 80181a2:	4934      	ldr	r1, [pc, #208]	; (8018274 <APP_THREAD_DeviceConfig+0x228>)
 80181a4:	2000      	movs	r0, #0
 80181a6:	f7fe f895 	bl	80162d4 <otThreadSetExtendedPanId>
 80181aa:	4603      	mov	r3, r0
 80181ac:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80181ae:	79fb      	ldrb	r3, [r7, #7]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d004      	beq.n	80181be <APP_THREAD_DeviceConfig+0x172>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80181b4:	79fb      	ldrb	r3, [r7, #7]
 80181b6:	4619      	mov	r1, r3
 80181b8:	2002      	movs	r0, #2
 80181ba:	f7ff fec1 	bl	8017f40 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, true);
 80181be:	2101      	movs	r1, #1
 80181c0:	2000      	movs	r0, #0
 80181c2:	f7fd f9ee 	bl	80155a2 <otIp6SetEnabled>
 80181c6:	4603      	mov	r3, r0
 80181c8:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80181ca:	79fb      	ldrb	r3, [r7, #7]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d004      	beq.n	80181da <APP_THREAD_DeviceConfig+0x18e>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 80181d0:	79fb      	ldrb	r3, [r7, #7]
 80181d2:	4619      	mov	r1, r3
 80181d4:	2004      	movs	r0, #4
 80181d6:	f7ff feb3 	bl	8017f40 <APP_THREAD_Error>
	}

	error = otThreadSetEnabled(NULL, true);
 80181da:	2101      	movs	r1, #1
 80181dc:	2000      	movs	r0, #0
 80181de:	f7fe f849 	bl	8016274 <otThreadSetEnabled>
 80181e2:	4603      	mov	r3, r0
 80181e4:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80181e6:	79fb      	ldrb	r3, [r7, #7]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d004      	beq.n	80181f6 <APP_THREAD_DeviceConfig+0x1aa>
		APP_THREAD_Error(ERR_THREAD_START, error);
 80181ec:	79fb      	ldrb	r3, [r7, #7]
 80181ee:	4619      	mov	r1, r3
 80181f0:	2005      	movs	r0, #5
 80181f2:	f7ff fea5 	bl	8017f40 <APP_THREAD_Error>
	}

	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 80181f6:	f241 6133 	movw	r1, #5683	; 0x1633
 80181fa:	2000      	movs	r0, #0
 80181fc:	f7fd f892 	bl	8015324 <otCoapStart>
 8018200:	4603      	mov	r3, r0
 8018202:	71fb      	strb	r3, [r7, #7]
	//  error = otCoapAddResource(NULL, &OT_Light_Ressource);
	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8018204:	491c      	ldr	r1, [pc, #112]	; (8018278 <APP_THREAD_DeviceConfig+0x22c>)
 8018206:	2000      	movs	r0, #0
 8018208:	f7fd f8bc 	bl	8015384 <otCoapAddResource>
 801820c:	4603      	mov	r3, r0
 801820e:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 8018210:	491a      	ldr	r1, [pc, #104]	; (801827c <APP_THREAD_DeviceConfig+0x230>)
 8018212:	2000      	movs	r0, #0
 8018214:	f7fd f8b6 	bl	8015384 <otCoapAddResource>
 8018218:	4603      	mov	r3, r0
 801821a:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 801821c:	4918      	ldr	r1, [pc, #96]	; (8018280 <APP_THREAD_DeviceConfig+0x234>)
 801821e:	2000      	movs	r0, #0
 8018220:	f7fd f8b0 	bl	8015384 <otCoapAddResource>
 8018224:	4603      	mov	r3, r0
 8018226:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);
 8018228:	4916      	ldr	r1, [pc, #88]	; (8018284 <APP_THREAD_DeviceConfig+0x238>)
 801822a:	2000      	movs	r0, #0
 801822c:	f7fd f8aa 	bl	8015384 <otCoapAddResource>
 8018230:	4603      	mov	r3, r0
 8018232:	71fb      	strb	r3, [r7, #7]
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaProvisioning);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaParameters);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaSend);
#endif
#ifndef DONGLE_CODE
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 8018234:	4914      	ldr	r1, [pc, #80]	; (8018288 <APP_THREAD_DeviceConfig+0x23c>)
 8018236:	2000      	movs	r0, #0
 8018238:	f7fd f8a4 	bl	8015384 <otCoapAddResource>
 801823c:	4603      	mov	r3, r0
 801823e:	71fb      	strb	r3, [r7, #7]
#endif
	// set default multicast address for border router
//    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
	otIp6AddressFromString("ff03::1", &multicastAddr);
 8018240:	4912      	ldr	r1, [pc, #72]	; (801828c <APP_THREAD_DeviceConfig+0x240>)
 8018242:	4813      	ldr	r0, [pc, #76]	; (8018290 <APP_THREAD_DeviceConfig+0x244>)
 8018244:	f7fd fa13 	bl	801566e <otIp6AddressFromString>
	memcpy(&borderRouter.ipv6, &multicastAddr, sizeof(multicastAddr));
 8018248:	4a12      	ldr	r2, [pc, #72]	; (8018294 <APP_THREAD_DeviceConfig+0x248>)
 801824a:	4b10      	ldr	r3, [pc, #64]	; (801828c <APP_THREAD_DeviceConfig+0x240>)
 801824c:	4614      	mov	r4, r2
 801824e:	6818      	ldr	r0, [r3, #0]
 8018250:	6859      	ldr	r1, [r3, #4]
 8018252:	689a      	ldr	r2, [r3, #8]
 8018254:	68db      	ldr	r3, [r3, #12]
 8018256:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// set UID in local state variable
//	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
//	 = UID64_BASE;
	stm32UID(msgSendMyIP.uid);
 8018258:	480f      	ldr	r0, [pc, #60]	; (8018298 <APP_THREAD_DeviceConfig+0x24c>)
 801825a:	f000 f8e5 	bl	8018428 <stm32UID>

  /* USER CODE END DEVICECONFIG */
}
 801825e:	bf00      	nop
 8018260:	370c      	adds	r7, #12
 8018262:	46bd      	mov	sp, r7
 8018264:	bd90      	pop	{r4, r7, pc}
 8018266:	bf00      	nop
 8018268:	0801829d 	.word	0x0801829d
 801826c:	0801c1a0 	.word	0x0801c1a0
 8018270:	0801c1b8 	.word	0x0801c1b8
 8018274:	0801c1b0 	.word	0x0801c1b0
 8018278:	20000198 	.word	0x20000198
 801827c:	200001a8 	.word	0x200001a8
 8018280:	200001b8 	.word	0x200001b8
 8018284:	200001c8 	.word	0x200001c8
 8018288:	200001d8 	.word	0x200001d8
 801828c:	20028a00 	.word	0x20028a00
 8018290:	0801bbb4 	.word	0x0801bbb4
 8018294:	20027838 	.word	0x20027838
 8018298:	20000200 	.word	0x20000200

0801829c <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 801829c:	b590      	push	{r4, r7, lr}
 801829e:	b083      	sub	sp, #12
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
 80182a4:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	f003 0304 	and.w	r3, r3, #4
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d02f      	beq.n	8018310 <APP_THREAD_StateNotif+0x74>
  {
    switch (otThreadGetDeviceRole(NULL))
 80182b0:	2000      	movs	r0, #0
 80182b2:	f7fe f89c 	bl	80163ee <otThreadGetDeviceRole>
 80182b6:	4603      	mov	r3, r0
 80182b8:	2b04      	cmp	r3, #4
 80182ba:	d826      	bhi.n	801830a <APP_THREAD_StateNotif+0x6e>
 80182bc:	a201      	add	r2, pc, #4	; (adr r2, 80182c4 <APP_THREAD_StateNotif+0x28>)
 80182be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182c2:	bf00      	nop
 80182c4:	080182d9 	.word	0x080182d9
 80182c8:	080182e9 	.word	0x080182e9
 80182cc:	080182f9 	.word	0x080182f9
 80182d0:	080182ff 	.word	0x080182ff
 80182d4:	08018305 	.word	0x08018305
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
			borderRouter.epoch = 0;
 80182d8:	4a10      	ldr	r2, [pc, #64]	; (801831c <APP_THREAD_StateNotif+0x80>)
 80182da:	f04f 0300 	mov.w	r3, #0
 80182de:	f04f 0400 	mov.w	r4, #0
 80182e2:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 80182e6:	e014      	b.n	8018312 <APP_THREAD_StateNotif+0x76>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
			borderRouter.epoch = 0;
 80182e8:	4a0c      	ldr	r2, [pc, #48]	; (801831c <APP_THREAD_StateNotif+0x80>)
 80182ea:	f04f 0300 	mov.w	r3, #0
 80182ee:	f04f 0400 	mov.w	r4, #0
 80182f2:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 80182f6:	e00c      	b.n	8018312 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_Off(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 80182f8:	f000 f90a 	bl	8018510 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 80182fc:	e009      	b.n	8018312 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_Off(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 80182fe:	f000 f907 	bl	8018510 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 8018302:	e006      	b.n	8018312 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8018304:	f000 f904 	bl	8018510 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 8018308:	e003      	b.n	8018312 <APP_THREAD_StateNotif+0x76>
    default:
      /* USER CODE BEGIN DEFAULT */
			APP_THREAD_UpdateBorderRouter();
 801830a:	f000 f901 	bl	8018510 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END DEFAULT */
      break;
 801830e:	e000      	b.n	8018312 <APP_THREAD_StateNotif+0x76>
    }
  }
 8018310:	bf00      	nop
}
 8018312:	bf00      	nop
 8018314:	370c      	adds	r7, #12
 8018316:	46bd      	mov	sp, r7
 8018318:	bd90      	pop	{r4, r7, pc}
 801831a:	bf00      	nop
 801831c:	20027838 	.word	0x20027838

08018320 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8018320:	b480      	push	{r7}
 8018322:	b083      	sub	sp, #12
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
 8018328:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 801832a:	bf00      	nop
 801832c:	370c      	adds	r7, #12
 801832e:	46bd      	mov	sp, r7
 8018330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018334:	4770      	bx	lr
	...

08018338 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8018338:	b580      	push	{r7, lr}
 801833a:	b088      	sub	sp, #32
 801833c:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 801833e:	1d3b      	adds	r3, r7, #4
 8018340:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8018342:	6978      	ldr	r0, [r7, #20]
 8018344:	f7fd fd24 	bl	8015d90 <SHCI_GetWirelessFwInfo>
 8018348:	4603      	mov	r3, r0
 801834a:	2b00      	cmp	r3, #0
 801834c:	d004      	beq.n	8018358 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 801834e:	2101      	movs	r1, #1
 8018350:	201a      	movs	r0, #26
 8018352:	f7ff fdf5 	bl	8017f40 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8018356:	e03d      	b.n	80183d4 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8018358:	4a20      	ldr	r2, [pc, #128]	; (80183dc <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 801835a:	2101      	movs	r1, #1
 801835c:	2000      	movs	r0, #0
 801835e:	f7ed fc71 	bl	8005c44 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8018362:	4a1f      	ldr	r2, [pc, #124]	; (80183e0 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8018364:	2101      	movs	r1, #1
 8018366:	2000      	movs	r0, #0
 8018368:	f7ed fc6c 	bl	8005c44 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 801836c:	697b      	ldr	r3, [r7, #20]
 801836e:	781b      	ldrb	r3, [r3, #0]
 8018370:	4619      	mov	r1, r3
 8018372:	697b      	ldr	r3, [r7, #20]
 8018374:	785b      	ldrb	r3, [r3, #1]
 8018376:	461a      	mov	r2, r3
 8018378:	697b      	ldr	r3, [r7, #20]
 801837a:	789b      	ldrb	r3, [r3, #2]
 801837c:	9301      	str	r3, [sp, #4]
 801837e:	9200      	str	r2, [sp, #0]
 8018380:	460b      	mov	r3, r1
 8018382:	4a18      	ldr	r2, [pc, #96]	; (80183e4 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8018384:	2101      	movs	r1, #1
 8018386:	2000      	movs	r0, #0
 8018388:	f7ed fc5c 	bl	8005c44 <logApplication>
    switch(p_wireless_info->StackType)
 801838c:	697b      	ldr	r3, [r7, #20]
 801838e:	7a5b      	ldrb	r3, [r3, #9]
 8018390:	2b11      	cmp	r3, #17
 8018392:	d009      	beq.n	80183a8 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8018394:	2b50      	cmp	r3, #80	; 0x50
 8018396:	d00d      	beq.n	80183b4 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8018398:	2b10      	cmp	r3, #16
 801839a:	d111      	bne.n	80183c0 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 801839c:	4a12      	ldr	r2, [pc, #72]	; (80183e8 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 801839e:	2101      	movs	r1, #1
 80183a0:	2000      	movs	r0, #0
 80183a2:	f7ed fc4f 	bl	8005c44 <logApplication>
      break;
 80183a6:	e010      	b.n	80183ca <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 80183a8:	4a10      	ldr	r2, [pc, #64]	; (80183ec <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 80183aa:	2101      	movs	r1, #1
 80183ac:	2000      	movs	r0, #0
 80183ae:	f7ed fc49 	bl	8005c44 <logApplication>
      break;
 80183b2:	e00a      	b.n	80183ca <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 80183b4:	4a0e      	ldr	r2, [pc, #56]	; (80183f0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 80183b6:	2101      	movs	r1, #1
 80183b8:	2000      	movs	r0, #0
 80183ba:	f7ed fc43 	bl	8005c44 <logApplication>
      break;
 80183be:	e004      	b.n	80183ca <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80183c0:	2101      	movs	r1, #1
 80183c2:	201a      	movs	r0, #26
 80183c4:	f7ff fdbc 	bl	8017f40 <APP_THREAD_Error>
      break;
 80183c8:	bf00      	nop
    APP_DBG("**********************************************************");
 80183ca:	4a04      	ldr	r2, [pc, #16]	; (80183dc <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80183cc:	2101      	movs	r1, #1
 80183ce:	2000      	movs	r0, #0
 80183d0:	f7ed fc38 	bl	8005c44 <logApplication>
}
 80183d4:	bf00      	nop
 80183d6:	3718      	adds	r7, #24
 80183d8:	46bd      	mov	sp, r7
 80183da:	bd80      	pop	{r7, pc}
 80183dc:	0801bbbc 	.word	0x0801bbbc
 80183e0:	0801bbf8 	.word	0x0801bbf8
 80183e4:	0801bc14 	.word	0x0801bc14
 80183e8:	0801bc2c 	.word	0x0801bc2c
 80183ec:	0801bc44 	.word	0x0801bc44
 80183f0:	0801bc5c 	.word	0x0801bc5c

080183f4 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	b082      	sub	sp, #8
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80183fc:	f04f 32ff 	mov.w	r2, #4294967295
 8018400:	2101      	movs	r1, #1
 8018402:	2001      	movs	r0, #1
 8018404:	f7f8 fa50 	bl	80108a8 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8018408:	f000 fd96 	bl	8018f38 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801840c:	e7f6      	b.n	80183fc <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

0801840e <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 801840e:	b580      	push	{r7, lr}
 8018410:	b082      	sub	sp, #8
 8018412:	af00      	add	r7, sp, #0
 8018414:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8018416:	f04f 32ff 	mov.w	r2, #4294967295
 801841a:	2101      	movs	r1, #1
 801841c:	2001      	movs	r0, #1
 801841e:	f7f8 fa43 	bl	80108a8 <osThreadFlagsWait>
    Send_CLI_To_M0();
 8018422:	f000 fd0b 	bl	8018e3c <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8018426:	e7f6      	b.n	8018416 <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08018428 <stm32UID>:
  }
}
#endif /* (CFG_FULL_LOW_POWER == 0) */

/* USER CODE BEGIN FREERTOS_WRAPPER_FUNCTIONS */
void stm32UID(uint8_t* uid) {
 8018428:	b480      	push	{r7}
 801842a:	b085      	sub	sp, #20
 801842c:	af00      	add	r7, sp, #0
 801842e:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < 12; i++) {
 8018430:	2300      	movs	r3, #0
 8018432:	73fb      	strb	r3, [r7, #15]
 8018434:	e00c      	b.n	8018450 <stm32UID+0x28>
    uid[i] = *(volatile uint8_t *)(UID_BASE + i);
 8018436:	7bfa      	ldrb	r2, [r7, #15]
 8018438:	4b0a      	ldr	r3, [pc, #40]	; (8018464 <stm32UID+0x3c>)
 801843a:	4413      	add	r3, r2
 801843c:	4619      	mov	r1, r3
 801843e:	7bfb      	ldrb	r3, [r7, #15]
 8018440:	687a      	ldr	r2, [r7, #4]
 8018442:	4413      	add	r3, r2
 8018444:	780a      	ldrb	r2, [r1, #0]
 8018446:	b2d2      	uxtb	r2, r2
 8018448:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 12; i++) {
 801844a:	7bfb      	ldrb	r3, [r7, #15]
 801844c:	3301      	adds	r3, #1
 801844e:	73fb      	strb	r3, [r7, #15]
 8018450:	7bfb      	ldrb	r3, [r7, #15]
 8018452:	2b0b      	cmp	r3, #11
 8018454:	d9ef      	bls.n	8018436 <stm32UID+0xe>
    }
  }
 8018456:	bf00      	nop
 8018458:	3714      	adds	r7, #20
 801845a:	46bd      	mov	sp, r7
 801845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018460:	4770      	bx	lr
 8018462:	bf00      	nop
 8018464:	1fff7590 	.word	0x1fff7590

08018468 <APP_THREAD_DummyRespHandler>:
  return;
}
#endif

static void APP_THREAD_DummyRespHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 8018468:	b480      	push	{r7}
 801846a:	b085      	sub	sp, #20
 801846c:	af00      	add	r7, sp, #0
 801846e:	60f8      	str	r0, [r7, #12]
 8018470:	60b9      	str	r1, [r7, #8]
 8018472:	607a      	str	r2, [r7, #4]
 8018474:	603b      	str	r3, [r7, #0]
	UNUSED(p_context);
	UNUSED(pHeader);
	UNUSED(pMessage);
	UNUSED(pMessageInfo);
	UNUSED(Result);
}
 8018476:	bf00      	nop
 8018478:	3714      	adds	r7, #20
 801847a:	46bd      	mov	sp, r7
 801847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018480:	4770      	bx	lr
	...

08018484 <APP_THREAD_CoapRespHandler_UpdateBorderRouter>:

volatile uint16_t test_num;
static void APP_THREAD_CoapRespHandler_UpdateBorderRouter(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 8018484:	b5b0      	push	{r4, r5, r7, lr}
 8018486:	b084      	sub	sp, #16
 8018488:	af00      	add	r7, sp, #0
 801848a:	60f8      	str	r0, [r7, #12]
 801848c:	60b9      	str	r1, [r7, #8]
 801848e:	607a      	str	r2, [r7, #4]
 8018490:	70fb      	strb	r3, [r7, #3]

//	taskENTER_CRITICAL();
//	test_num = otMessageGetLength(pMessage);
//	test_num = otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal));

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8018492:	68b8      	ldr	r0, [r7, #8]
 8018494:	f7fd f9a8 	bl	80157e8 <otMessageGetOffset>
 8018498:	4603      	mov	r3, r0
 801849a:	4619      	mov	r1, r3
 801849c:	2318      	movs	r3, #24
 801849e:	4a0e      	ldr	r2, [pc, #56]	; (80184d8 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 80184a0:	68b8      	ldr	r0, [r7, #8]
 80184a2:	f7fd fa06 	bl	80158b2 <otMessageRead>
 80184a6:	4603      	mov	r3, r0
 80184a8:	2b18      	cmp	r3, #24
 80184aa:	d110      	bne.n	80184ce <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x4a>
			== sizeof(receivedSystemCal)) {

			// if successful, update border router state variable
			memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 80184ac:	4a0b      	ldr	r2, [pc, #44]	; (80184dc <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 80184ae:	4b0a      	ldr	r3, [pc, #40]	; (80184d8 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 80184b0:	4614      	mov	r4, r2
 80184b2:	461d      	mov	r5, r3
 80184b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80184bc:	e884 0003 	stmia.w	r4, {r0, r1}

			// update the onboard RTC unix time
			updateRTC(borderRouter.epoch);
 80184c0:	4b06      	ldr	r3, [pc, #24]	; (80184dc <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 80184c2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80184c6:	4618      	mov	r0, r3
 80184c8:	4621      	mov	r1, r4
 80184ca:	f000 f9af 	bl	801882c <updateRTC>
	}
//	taskEXIT_CRITICAL();
}
 80184ce:	bf00      	nop
 80184d0:	3710      	adds	r7, #16
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bdb0      	pop	{r4, r5, r7, pc}
 80184d6:	bf00      	nop
 80184d8:	20027850 	.word	0x20027850
 80184dc:	20027838 	.word	0x20027838

080184e0 <APP_THREAD_DummyReqHandler>:
 * @brief Dummy request handler
 * @param
 * @retval None
 */
static void APP_THREAD_DummyReqHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80184e0:	b480      	push	{r7}
 80184e2:	b085      	sub	sp, #20
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	60f8      	str	r0, [r7, #12]
 80184e8:	60b9      	str	r1, [r7, #8]
 80184ea:	607a      	str	r2, [r7, #4]
 80184ec:	603b      	str	r3, [r7, #0]
	tempMessageInfo = pMessageInfo;
 80184ee:	4a06      	ldr	r2, [pc, #24]	; (8018508 <APP_THREAD_DummyReqHandler+0x28>)
 80184f0:	683b      	ldr	r3, [r7, #0]
 80184f2:	6013      	str	r3, [r2, #0]
	receivedMessage = (otMessageInfo*) pMessage;
 80184f4:	4a05      	ldr	r2, [pc, #20]	; (801850c <APP_THREAD_DummyReqHandler+0x2c>)
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	6013      	str	r3, [r2, #0]
}
 80184fa:	bf00      	nop
 80184fc:	3714      	adds	r7, #20
 80184fe:	46bd      	mov	sp, r7
 8018500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018504:	4770      	bx	lr
 8018506:	bf00      	nop
 8018508:	200289bc 	.word	0x200289bc
 801850c:	20028a14 	.word	0x20028a14

08018510 <APP_THREAD_UpdateBorderRouter>:
//volatile otNetifMulticastAddress *test_addr;
//volatile otExtAddress *test_ext_addr;
//volatile otExtAddress test_1;
//volatile otExtAddress test_2;

void APP_THREAD_UpdateBorderRouter() {
 8018510:	b580      	push	{r7, lr}
 8018512:	af00      	add	r7, sp, #0

	// if border router IP is still multicast (ff03::1), attempt to sync
	if (otIp6IsAddressEqual(&multicastAddr, &borderRouter.ipv6)) {
 8018514:	4906      	ldr	r1, [pc, #24]	; (8018530 <APP_THREAD_UpdateBorderRouter+0x20>)
 8018516:	4807      	ldr	r0, [pc, #28]	; (8018534 <APP_THREAD_UpdateBorderRouter+0x24>)
 8018518:	f7fd f873 	bl	8015602 <otIp6IsAddressEqual>
 801851c:	4603      	mov	r3, r0
 801851e:	2b00      	cmp	r3, #0
 8018520:	d003      	beq.n	801852a <APP_THREAD_UpdateBorderRouter+0x1a>
		APP_THREAD_SyncWithBorderRouter();
 8018522:	f000 f809 	bl	8018538 <APP_THREAD_SyncWithBorderRouter>
		APP_THREAD_SendMyInfo();
 8018526:	f000 f81d 	bl	8018564 <APP_THREAD_SendMyInfo>
	}

	// send IP to border router
	//APP_THREAD_SendMyInfo();
}
 801852a:	bf00      	nop
 801852c:	bd80      	pop	{r7, pc}
 801852e:	bf00      	nop
 8018530:	20027838 	.word	0x20027838
 8018534:	20028a00 	.word	0x20028a00

08018538 <APP_THREAD_SyncWithBorderRouter>:

// send a GET request to border router via multicast
void APP_THREAD_SyncWithBorderRouter() {
 8018538:	b580      	push	{r7, lr}
 801853a:	b084      	sub	sp, #16
 801853c:	af04      	add	r7, sp, #16
	APP_THREAD_SendCoapMsgForBorderSync(NULL, 0, &multicastAddr, borderSyncResource, NO_ACK, OT_COAP_CODE_GET, 1U);
 801853e:	2301      	movs	r3, #1
 8018540:	9302      	str	r3, [sp, #8]
 8018542:	2301      	movs	r3, #1
 8018544:	9301      	str	r3, [sp, #4]
 8018546:	2300      	movs	r3, #0
 8018548:	9300      	str	r3, [sp, #0]
 801854a:	4b04      	ldr	r3, [pc, #16]	; (801855c <APP_THREAD_SyncWithBorderRouter+0x24>)
 801854c:	4a04      	ldr	r2, [pc, #16]	; (8018560 <APP_THREAD_SyncWithBorderRouter+0x28>)
 801854e:	2100      	movs	r1, #0
 8018550:	2000      	movs	r0, #0
 8018552:	f000 fab3 	bl	8018abc <APP_THREAD_SendCoapMsgForBorderSync>
}
 8018556:	bf00      	nop
 8018558:	46bd      	mov	sp, r7
 801855a:	bd80      	pop	{r7, pc}
 801855c:	0801c170 	.word	0x0801c170
 8018560:	20028a00 	.word	0x20028a00

08018564 <APP_THREAD_SendMyInfo>:

void APP_THREAD_SendMyInfo() {
 8018564:	b580      	push	{r7, lr}
 8018566:	b084      	sub	sp, #16
 8018568:	af04      	add	r7, sp, #16
////	test_1 = test_ext_addr[0];
////	test_2 = &test_ext_addr;
//
//	error = otThreadGetNextNeighborInfo(NULL, &test_neighbor_iterator, &test_info_neighbor);
	// TODO: does this need an ACK
	APP_THREAD_SendCoapMsg(&msgSendMyIP, sizeof(msgSendMyIP), &borderRouter.ipv6, nodeInfoResource, NO_ACK,
 801856a:	2301      	movs	r3, #1
 801856c:	9302      	str	r3, [sp, #8]
 801856e:	2303      	movs	r3, #3
 8018570:	9301      	str	r3, [sp, #4]
 8018572:	2300      	movs	r3, #0
 8018574:	9300      	str	r3, [sp, #0]
 8018576:	4b04      	ldr	r3, [pc, #16]	; (8018588 <APP_THREAD_SendMyInfo+0x24>)
 8018578:	4a04      	ldr	r2, [pc, #16]	; (801858c <APP_THREAD_SendMyInfo+0x28>)
 801857a:	2120      	movs	r1, #32
 801857c:	4804      	ldr	r0, [pc, #16]	; (8018590 <APP_THREAD_SendMyInfo+0x2c>)
 801857e:	f000 f9bf 	bl	8018900 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 8018582:	bf00      	nop
 8018584:	46bd      	mov	sp, r7
 8018586:	bd80      	pop	{r7, pc}
 8018588:	0801c190 	.word	0x0801c190
 801858c:	20027838 	.word	0x20027838
 8018590:	200001e8 	.word	0x200001e8

08018594 <APP_THREAD_SendBorderMessage>:

void APP_THREAD_SendBorderMessage(void *packet, uint8_t len, char *resource) {
 8018594:	b580      	push	{r7, lr}
 8018596:	b088      	sub	sp, #32
 8018598:	af04      	add	r7, sp, #16
 801859a:	60f8      	str	r0, [r7, #12]
 801859c:	460b      	mov	r3, r1
 801859e:	607a      	str	r2, [r7, #4]
 80185a0:	72fb      	strb	r3, [r7, #11]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(packet, len, &borderRouter.ipv6, resource, NO_ACK, OT_COAP_CODE_PUT, 1U);
 80185a2:	7afb      	ldrb	r3, [r7, #11]
 80185a4:	b299      	uxth	r1, r3
 80185a6:	2301      	movs	r3, #1
 80185a8:	9302      	str	r3, [sp, #8]
 80185aa:	2303      	movs	r3, #3
 80185ac:	9301      	str	r3, [sp, #4]
 80185ae:	2300      	movs	r3, #0
 80185b0:	9300      	str	r3, [sp, #0]
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	4a03      	ldr	r2, [pc, #12]	; (80185c4 <APP_THREAD_SendBorderMessage+0x30>)
 80185b6:	68f8      	ldr	r0, [r7, #12]
 80185b8:	f000 f9a2 	bl	8018900 <APP_THREAD_SendCoapMsg>
}
 80185bc:	bf00      	nop
 80185be:	3710      	adds	r7, #16
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bd80      	pop	{r7, pc}
 80185c4:	20027838 	.word	0x20027838

080185c8 <APP_THREAD_SendBorderPacket>:

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket) {
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b086      	sub	sp, #24
 80185cc:	af04      	add	r7, sp, #16
 80185ce:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(sensorPacket, sizeof(struct LogPacket), &borderRouter.ipv6, borderPacket, NO_ACK,
 80185d0:	2301      	movs	r3, #1
 80185d2:	9302      	str	r3, [sp, #8]
 80185d4:	2303      	movs	r3, #3
 80185d6:	9301      	str	r3, [sp, #4]
 80185d8:	2300      	movs	r3, #0
 80185da:	9300      	str	r3, [sp, #0]
 80185dc:	4b04      	ldr	r3, [pc, #16]	; (80185f0 <APP_THREAD_SendBorderPacket+0x28>)
 80185de:	4a05      	ldr	r2, [pc, #20]	; (80185f4 <APP_THREAD_SendBorderPacket+0x2c>)
 80185e0:	21cc      	movs	r1, #204	; 0xcc
 80185e2:	6878      	ldr	r0, [r7, #4]
 80185e4:	f000 f98c 	bl	8018900 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);

}
 80185e8:	bf00      	nop
 80185ea:	3708      	adds	r7, #8
 80185ec:	46bd      	mov	sp, r7
 80185ee:	bd80      	pop	{r7, pc}
 80185f0:	0801c180 	.word	0x0801c180
 80185f4:	20027838 	.word	0x20027838

080185f8 <APP_THREAD_CoapLightsSimpleRequestHandler>:

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b084      	sub	sp, #16
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	60f8      	str	r0, [r7, #12]
 8018600:	60b9      	str	r1, [r7, #8]
 8018602:	607a      	str	r2, [r7, #4]
	do {

		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8018604:	68f8      	ldr	r0, [r7, #12]
 8018606:	f7fc fd6e 	bl	80150e6 <otCoapHeaderGetCode>
 801860a:	4603      	mov	r3, r0
 801860c:	2b01      	cmp	r3, #1
 801860e:	d107      	bne.n	8018620 <APP_THREAD_CoapLightsSimpleRequestHandler+0x28>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &lightsSimpleMessage, sizeof(lightsSimpleMessage));
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	b299      	uxth	r1, r3
 8018614:	2304      	movs	r3, #4
 8018616:	4a23      	ldr	r2, [pc, #140]	; (80186a4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 8018618:	68f8      	ldr	r0, [r7, #12]
 801861a:	f000 fb05 	bl	8018c28 <APP_THREAD_SendDataResponse>
			break;
 801861e:	e03d      	b.n	801869c <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage))
 8018620:	68b8      	ldr	r0, [r7, #8]
 8018622:	f7fd f8e1 	bl	80157e8 <otMessageGetOffset>
 8018626:	4603      	mov	r3, r0
 8018628:	4619      	mov	r1, r3
 801862a:	2304      	movs	r3, #4
 801862c:	4a1d      	ldr	r2, [pc, #116]	; (80186a4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 801862e:	68b8      	ldr	r0, [r7, #8]
 8018630:	f7fd f93f 	bl	80158b2 <otMessageRead>
 8018634:	4603      	mov	r3, r0
 8018636:	2b04      	cmp	r3, #4
 8018638:	d112      	bne.n	8018660 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				== 4U) {
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 801863a:	68f8      	ldr	r0, [r7, #12]
 801863c:	f7fc fd53 	bl	80150e6 <otCoapHeaderGetCode>
 8018640:	4603      	mov	r3, r0
 8018642:	2b03      	cmp	r3, #3
 8018644:	d005      	beq.n	8018652 <APP_THREAD_CoapLightsSimpleRequestHandler+0x5a>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8018646:	68f8      	ldr	r0, [r7, #12]
 8018648:	f7fc fd4d 	bl	80150e6 <otCoapHeaderGetCode>
 801864c:	4603      	mov	r3, r0
 801864e:	2b02      	cmp	r3, #2
 8018650:	d106      	bne.n	8018660 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 8018652:	4b15      	ldr	r3, [pc, #84]	; (80186a8 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb0>)
 8018654:	6818      	ldr	r0, [r3, #0]
 8018656:	2300      	movs	r3, #0
 8018658:	2200      	movs	r2, #0
 801865a:	4912      	ldr	r1, [pc, #72]	; (80186a4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 801865c:	f7f8 fe34 	bl	80112c8 <osMessageQueuePut>
			}

		}

		tempMessageInfo = pMessageInfo;
 8018660:	4a12      	ldr	r2, [pc, #72]	; (80186ac <APP_THREAD_CoapLightsSimpleRequestHandler+0xb4>)
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8018666:	4a12      	ldr	r2, [pc, #72]	; (80186b0 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb8>)
 8018668:	68bb      	ldr	r3, [r7, #8]
 801866a:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 801866c:	68f8      	ldr	r0, [r7, #12]
 801866e:	f7fc fd0c 	bl	801508a <otCoapHeaderGetType>
 8018672:	4603      	mov	r3, r0
 8018674:	2b00      	cmp	r3, #0
 8018676:	d107      	bne.n	8018688 <APP_THREAD_CoapLightsSimpleRequestHandler+0x90>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	b299      	uxth	r1, r3
 801867c:	2300      	movs	r3, #0
 801867e:	2200      	movs	r2, #0
 8018680:	68f8      	ldr	r0, [r7, #12]
 8018682:	f000 fad1 	bl	8018c28 <APP_THREAD_SendDataResponse>
			break;
 8018686:	e009      	b.n	801869c <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8018688:	68b8      	ldr	r0, [r7, #8]
 801868a:	f7fd f8ad 	bl	80157e8 <otMessageGetOffset>
 801868e:	4603      	mov	r3, r0
 8018690:	4619      	mov	r1, r3
 8018692:	2301      	movs	r3, #1
 8018694:	4a07      	ldr	r2, [pc, #28]	; (80186b4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xbc>)
 8018696:	68b8      	ldr	r0, [r7, #8]
 8018698:	f7fd f90b 	bl	80158b2 <otMessageRead>

		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}
	} while (false);
}
 801869c:	bf00      	nop
 801869e:	3710      	adds	r7, #16
 80186a0:	46bd      	mov	sp, r7
 80186a2:	bd80      	pop	{r7, pc}
 80186a4:	200280b8 	.word	0x200280b8
 80186a8:	20027c70 	.word	0x20027c70
 80186ac:	200289bc 	.word	0x200289bc
 80186b0:	20028a14 	.word	0x20028a14
 80186b4:	20027831 	.word	0x20027831

080186b8 <APP_THREAD_CoapToggleLoggingRequestHandler>:

#ifndef DONGLE_CODE
// request handler for when receiving a message directed at the data logging resource
static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b084      	sub	sp, #16
 80186bc:	af00      	add	r7, sp, #0
 80186be:	60f8      	str	r0, [r7, #12]
 80186c0:	60b9      	str	r1, [r7, #8]
 80186c2:	607a      	str	r2, [r7, #4]
	do {
		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80186c4:	68f8      	ldr	r0, [r7, #12]
 80186c6:	f7fc fd0e 	bl	80150e6 <otCoapHeaderGetCode>
 80186ca:	4603      	mov	r3, r0
 80186cc:	2b01      	cmp	r3, #1
 80186ce:	d106      	bne.n	80186de <APP_THREAD_CoapToggleLoggingRequestHandler+0x26>
			APP_THREAD_SendDataResponse(&logMessage, sizeof(logMessage), pHeader, pMessageInfo);
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	68fa      	ldr	r2, [r7, #12]
 80186d4:	2106      	movs	r1, #6
 80186d6:	481a      	ldr	r0, [pc, #104]	; (8018740 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 80186d8:	f000 faa6 	bl	8018c28 <APP_THREAD_SendDataResponse>
			break;
 80186dc:	e02c      	b.n	8018738 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
		}

		// TODO : this will overwrite log message so maybe add a safer method
		if ( otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage)){
 80186de:	68b8      	ldr	r0, [r7, #8]
 80186e0:	f7fd f882 	bl	80157e8 <otMessageGetOffset>
 80186e4:	4603      	mov	r3, r0
 80186e6:	4619      	mov	r1, r3
 80186e8:	2306      	movs	r3, #6
 80186ea:	4a15      	ldr	r2, [pc, #84]	; (8018740 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 80186ec:	68b8      	ldr	r0, [r7, #8]
 80186ee:	f7fd f8e0 	bl	80158b2 <otMessageRead>
 80186f2:	4603      	mov	r3, r0
 80186f4:	2b06      	cmp	r3, #6
 80186f6:	d112      	bne.n	801871e <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
//			otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage));
			// if post or put, add to queue for masterthread processing
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 80186f8:	68f8      	ldr	r0, [r7, #12]
 80186fa:	f7fc fcf4 	bl	80150e6 <otCoapHeaderGetCode>
 80186fe:	4603      	mov	r3, r0
 8018700:	2b03      	cmp	r3, #3
 8018702:	d005      	beq.n	8018710 <APP_THREAD_CoapToggleLoggingRequestHandler+0x58>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8018704:	68f8      	ldr	r0, [r7, #12]
 8018706:	f7fc fcee 	bl	80150e6 <otCoapHeaderGetCode>
 801870a:	4603      	mov	r3, r0
 801870c:	2b02      	cmp	r3, #2
 801870e:	d106      	bne.n	801871e <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
				osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 8018710:	4b0c      	ldr	r3, [pc, #48]	; (8018744 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8c>)
 8018712:	6818      	ldr	r0, [r3, #0]
 8018714:	2300      	movs	r3, #0
 8018716:	2200      	movs	r2, #0
 8018718:	4909      	ldr	r1, [pc, #36]	; (8018740 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 801871a:	f7f8 fdd5 	bl	80112c8 <osMessageQueuePut>
			}
		}


		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 801871e:	68f8      	ldr	r0, [r7, #12]
 8018720:	f7fc fcb3 	bl	801508a <otCoapHeaderGetType>
 8018724:	4603      	mov	r3, r0
 8018726:	2b00      	cmp	r3, #0
 8018728:	d106      	bne.n	8018738 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	68fa      	ldr	r2, [r7, #12]
 801872e:	2100      	movs	r1, #0
 8018730:	2000      	movs	r0, #0
 8018732:	f000 fa79 	bl	8018c28 <APP_THREAD_SendDataResponse>
			break;
 8018736:	bf00      	nop
		}

	} while (false);
}
 8018738:	bf00      	nop
 801873a:	3710      	adds	r7, #16
 801873c:	46bd      	mov	sp, r7
 801873e:	bd80      	pop	{r7, pc}
 8018740:	200289d4 	.word	0x200289d4
 8018744:	200280a0 	.word	0x200280a0

08018748 <APP_THREAD_CoapBorderTimeRequestHandler>:
#endif


// request handler for when receiving a message directed at the border router synchronizing resource
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8018748:	b5b0      	push	{r4, r5, r7, lr}
 801874a:	b084      	sub	sp, #16
 801874c:	af00      	add	r7, sp, #0
 801874e:	60f8      	str	r0, [r7, #12]
 8018750:	60b9      	str	r1, [r7, #8]
 8018752:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8018754:	68b8      	ldr	r0, [r7, #8]
 8018756:	f7fd f847 	bl	80157e8 <otMessageGetOffset>
 801875a:	4603      	mov	r3, r0
 801875c:	4619      	mov	r1, r3
 801875e:	2318      	movs	r3, #24
 8018760:	4a1f      	ldr	r2, [pc, #124]	; (80187e0 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 8018762:	68b8      	ldr	r0, [r7, #8]
 8018764:	f7fd f8a5 	bl	80158b2 <otMessageRead>
 8018768:	4603      	mov	r3, r0
 801876a:	2b18      	cmp	r3, #24
 801876c:	d11c      	bne.n	80187a8 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
				== sizeof(receivedSystemCal)) {
			// if the message was a put request, copy message over to border router info struct
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 801876e:	68f8      	ldr	r0, [r7, #12]
 8018770:	f7fc fcb9 	bl	80150e6 <otCoapHeaderGetCode>
 8018774:	4603      	mov	r3, r0
 8018776:	2b03      	cmp	r3, #3
 8018778:	d005      	beq.n	8018786 <APP_THREAD_CoapBorderTimeRequestHandler+0x3e>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 801877a:	68f8      	ldr	r0, [r7, #12]
 801877c:	f7fc fcb3 	bl	80150e6 <otCoapHeaderGetCode>
 8018780:	4603      	mov	r3, r0
 8018782:	2b02      	cmp	r3, #2
 8018784:	d110      	bne.n	80187a8 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>

				memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8018786:	4a17      	ldr	r2, [pc, #92]	; (80187e4 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 8018788:	4b15      	ldr	r3, [pc, #84]	; (80187e0 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 801878a:	4614      	mov	r4, r2
 801878c:	461d      	mov	r5, r3
 801878e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018796:	e884 0003 	stmia.w	r4, {r0, r1}

				// update the onboard RTC unix time
				updateRTC(borderRouter.epoch);
 801879a:	4b12      	ldr	r3, [pc, #72]	; (80187e4 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 801879c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80187a0:	4618      	mov	r0, r3
 80187a2:	4621      	mov	r1, r4
 80187a4:	f000 f842 	bl	801882c <updateRTC>
			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 80187a8:	4a0f      	ldr	r2, [pc, #60]	; (80187e8 <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 80187aa:	68bb      	ldr	r3, [r7, #8]
 80187ac:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80187ae:	68f8      	ldr	r0, [r7, #12]
 80187b0:	f7fc fc99 	bl	80150e6 <otCoapHeaderGetCode>
 80187b4:	4603      	mov	r3, r0
 80187b6:	2b01      	cmp	r3, #1
 80187b8:	d00c      	beq.n	80187d4 <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>
			//APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);

			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 80187ba:	68f8      	ldr	r0, [r7, #12]
 80187bc:	f7fc fc65 	bl	801508a <otCoapHeaderGetType>
 80187c0:	4603      	mov	r3, r0
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d107      	bne.n	80187d6 <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			APP_THREAD_SendDataResponse(NULL, 0 , pHeader, pMessageInfo);
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	68fa      	ldr	r2, [r7, #12]
 80187ca:	2100      	movs	r1, #0
 80187cc:	2000      	movs	r0, #0
 80187ce:	f000 fa2b 	bl	8018c28 <APP_THREAD_SendDataResponse>
			break;
 80187d2:	e000      	b.n	80187d6 <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			break;
 80187d4:	bf00      	nop
		}

	} while (false);
}
 80187d6:	bf00      	nop
 80187d8:	3710      	adds	r7, #16
 80187da:	46bd      	mov	sp, r7
 80187dc:	bdb0      	pop	{r4, r5, r7, pc}
 80187de:	bf00      	nop
 80187e0:	20027850 	.word	0x20027850
 80187e4:	20027838 	.word	0x20027838
 80187e8:	20028a14 	.word	0x20028a14

080187ec <APP_THREAD_CoapNodeInfoRequestHandler>:

// Only get requests allowed for this resource
struct sendIP_struct tempVar = {"test","test",0};
//char test_string[200] = "test";
static void APP_THREAD_CoapNodeInfoRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b084      	sub	sp, #16
 80187f0:	af00      	add	r7, sp, #0
 80187f2:	60f8      	str	r0, [r7, #12]
 80187f4:	60b9      	str	r1, [r7, #8]
 80187f6:	607a      	str	r2, [r7, #4]
//		}

//		receivedMessage = (otMessageInfo*) pMessage;

		// send info if requested
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80187f8:	68f8      	ldr	r0, [r7, #12]
 80187fa:	f7fc fc74 	bl	80150e6 <otCoapHeaderGetCode>
 80187fe:	4603      	mov	r3, r0
 8018800:	2b01      	cmp	r3, #1
 8018802:	d103      	bne.n	801880c <APP_THREAD_CoapNodeInfoRequestHandler+0x20>
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
//			APP_THREAD_SendDataResponse(&msgSendMyIP, sizeof(msgSendMyIP), pHeader, pMessageInfo);
			APP_THREAD_SendMyInfo();
 8018804:	f7ff feae 	bl	8018564 <APP_THREAD_SendMyInfo>

			break;
 8018808:	bf00      	nop
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
		}

	} while (false);
}
 801880a:	e00b      	b.n	8018824 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 801880c:	68f8      	ldr	r0, [r7, #12]
 801880e:	f7fc fc3c 	bl	801508a <otCoapHeaderGetType>
 8018812:	4603      	mov	r3, r0
 8018814:	2b00      	cmp	r3, #0
 8018816:	d105      	bne.n	8018824 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	68fa      	ldr	r2, [r7, #12]
 801881c:	2100      	movs	r1, #0
 801881e:	2000      	movs	r0, #0
 8018820:	f000 fa02 	bl	8018c28 <APP_THREAD_SendDataResponse>
}
 8018824:	bf00      	nop
 8018826:	3710      	adds	r7, #16
 8018828:	46bd      	mov	sp, r7
 801882a:	bd80      	pop	{r7, pc}

0801882c <updateRTC>:

void updateRTC(time_t now) {
 801882c:	b580      	push	{r7, lr}
 801882e:	b088      	sub	sp, #32
 8018830:	af00      	add	r7, sp, #0
 8018832:	e9c7 0100 	strd	r0, r1, [r7]
	RTC_DateTypeDef sDate;

	// https://www.st.com/content/ccc/resource/technical/document/application_note/2a/c2/6f/74/fa/0d/46/3a/CD00015424.pdf/files/CD00015424.pdf/jcr:content/translations/en.CD00015424.pdf
//	struct tm *time_tm;

	RTC_FromEpoch(now, &sTime, &sDate);
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	f107 0208 	add.w	r2, r7, #8
 801883c:	f107 010c 	add.w	r1, r7, #12
 8018840:	4618      	mov	r0, r3
 8018842:	f7ec fdcb 	bl	80053dc <RTC_FromEpoch>

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8018846:	f107 030c 	add.w	r3, r7, #12
 801884a:	2200      	movs	r2, #0
 801884c:	4619      	mov	r1, r3
 801884e:	480a      	ldr	r0, [pc, #40]	; (8018878 <updateRTC+0x4c>)
 8018850:	f7f5 f8ed 	bl	800da2e <HAL_RTC_SetTime>
	}

	/*
	 * update the RTC
	 */
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8018854:	f107 0308 	add.w	r3, r7, #8
 8018858:	2200      	movs	r2, #0
 801885a:	4619      	mov	r1, r3
 801885c:	4806      	ldr	r0, [pc, #24]	; (8018878 <updateRTC+0x4c>)
 801885e:	f7f5 fa06 	bl	800dc6e <HAL_RTC_SetDate>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // lock it in with the backup registers
 8018862:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8018866:	2100      	movs	r1, #0
 8018868:	4803      	ldr	r0, [pc, #12]	; (8018878 <updateRTC+0x4c>)
 801886a:	f7f5 fb87 	bl	800df7c <HAL_RTCEx_BKUPWrite>
}
 801886e:	bf00      	nop
 8018870:	3720      	adds	r7, #32
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}
 8018876:	bf00      	nop
 8018878:	200287fc 	.word	0x200287fc

0801887c <APP_THREAD_CoapLightsComplexRequestHandler>:

static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 801887c:	b580      	push	{r7, lr}
 801887e:	b084      	sub	sp, #16
 8018880:	af00      	add	r7, sp, #0
 8018882:	60f8      	str	r0, [r7, #12]
 8018884:	60b9      	str	r1, [r7, #8]
 8018886:	607a      	str	r2, [r7, #4]
	do {
		//APP_THREAD_SendCoapUnicastRequest();

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex))
 8018888:	68b8      	ldr	r0, [r7, #8]
 801888a:	f7fc ffad 	bl	80157e8 <otMessageGetOffset>
 801888e:	4603      	mov	r3, r0
 8018890:	4619      	mov	r1, r3
 8018892:	2312      	movs	r3, #18
 8018894:	4a16      	ldr	r2, [pc, #88]	; (80188f0 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8018896:	68b8      	ldr	r0, [r7, #8]
 8018898:	f7fd f80b 	bl	80158b2 <otMessageRead>
 801889c:	4603      	mov	r3, r0
 801889e:	2b12      	cmp	r3, #18
 80188a0:	d102      	bne.n	80188a8 <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
				== sizeof(lightMessageComplex)) {
			FrontLightsSet(&lightMessageComplex);
 80188a2:	4813      	ldr	r0, [pc, #76]	; (80188f0 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 80188a4:	f7eb fcc2 	bl	800422c <FrontLightsSet>
		}

		tempMessageInfo = pMessageInfo;
 80188a8:	4a12      	ldr	r2, [pc, #72]	; (80188f4 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 80188ae:	4a12      	ldr	r2, [pc, #72]	; (80188f8 <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 80188b0:	68bb      	ldr	r3, [r7, #8]
 80188b2:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE) {
 80188b4:	68f8      	ldr	r0, [r7, #12]
 80188b6:	f7fc fbe8 	bl	801508a <otCoapHeaderGetType>
 80188ba:	4603      	mov	r3, r0
 80188bc:	2b10      	cmp	r3, #16
 80188be:	d110      	bne.n	80188e2 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
			break;
		}

		if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT) {
 80188c0:	68f8      	ldr	r0, [r7, #12]
 80188c2:	f7fc fc10 	bl	80150e6 <otCoapHeaderGetCode>
 80188c6:	4603      	mov	r3, r0
 80188c8:	2b03      	cmp	r3, #3
 80188ca:	d10c      	bne.n	80188e6 <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
			break;
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 80188cc:	68b8      	ldr	r0, [r7, #8]
 80188ce:	f7fc ff8b 	bl	80157e8 <otMessageGetOffset>
 80188d2:	4603      	mov	r3, r0
 80188d4:	4619      	mov	r1, r3
 80188d6:	2301      	movs	r3, #1
 80188d8:	4a08      	ldr	r2, [pc, #32]	; (80188fc <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 80188da:	68b8      	ldr	r0, [r7, #8]
 80188dc:	f7fc ffe9 	bl	80158b2 <otMessageRead>
		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}

	} while (false);
}
 80188e0:	e002      	b.n	80188e8 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 80188e2:	bf00      	nop
 80188e4:	e000      	b.n	80188e8 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 80188e6:	bf00      	nop
}
 80188e8:	bf00      	nop
 80188ea:	3710      	adds	r7, #16
 80188ec:	46bd      	mov	sp, r7
 80188ee:	bd80      	pop	{r7, pc}
 80188f0:	200289ec 	.word	0x200289ec
 80188f4:	200289bc 	.word	0x200289bc
 80188f8:	20028a14 	.word	0x20028a14
 80188fc:	20027831 	.word	0x20027831

08018900 <APP_THREAD_SendCoapMsg>:
}


static char empty_message[10] = "";
void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8018900:	b590      	push	{r4, r7, lr}
 8018902:	b087      	sub	sp, #28
 8018904:	af02      	add	r7, sp, #8
 8018906:	60f8      	str	r0, [r7, #12]
 8018908:	607a      	str	r2, [r7, #4]
 801890a:	603b      	str	r3, [r7, #0]
 801890c:	460b      	mov	r3, r1
 801890e:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8018910:	222c      	movs	r2, #44	; 0x2c
 8018912:	2100      	movs	r1, #0
 8018914:	4862      	ldr	r0, [pc, #392]	; (8018aa0 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018916:	f001 fe9a 	bl	801a64e <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 801891a:	897b      	ldrh	r3, [r7, #10]
 801891c:	2b64      	cmp	r3, #100	; 0x64
 801891e:	d90c      	bls.n	801893a <APP_THREAD_SendCoapMsg+0x3a>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8018920:	4b5f      	ldr	r3, [pc, #380]	; (8018aa0 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018922:	4a60      	ldr	r2, [pc, #384]	; (8018aa4 <APP_THREAD_SendCoapMsg+0x1a4>)
 8018924:	f103 0410 	add.w	r4, r3, #16
 8018928:	4613      	mov	r3, r2
 801892a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801892c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
 8018930:	495b      	ldr	r1, [pc, #364]	; (8018aa0 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018932:	485d      	ldr	r0, [pc, #372]	; (8018aa8 <APP_THREAD_SendCoapMsg+0x1a8>)
 8018934:	f7fc fe9b 	bl	801566e <otIp6AddressFromString>
 8018938:	e009      	b.n	801894e <APP_THREAD_SendCoapMsg+0x4e>
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 801893a:	4b59      	ldr	r3, [pc, #356]	; (8018aa0 <APP_THREAD_SendCoapMsg+0x1a0>)
 801893c:	4a5b      	ldr	r2, [pc, #364]	; (8018aac <APP_THREAD_SendCoapMsg+0x1ac>)
 801893e:	f103 0410 	add.w	r4, r3, #16
 8018942:	4613      	mov	r3, r2
 8018944:	6818      	ldr	r0, [r3, #0]
 8018946:	6859      	ldr	r1, [r3, #4]
 8018948:	689a      	ldr	r2, [r3, #8]
 801894a:	68db      	ldr	r3, [r3, #12]
 801894c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 801894e:	4b54      	ldr	r3, [pc, #336]	; (8018aa0 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018950:	2201      	movs	r2, #1
 8018952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8018956:	4b52      	ldr	r3, [pc, #328]	; (8018aa0 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018958:	f241 6233 	movw	r2, #5683	; 0x1633
 801895c:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 801895e:	4b50      	ldr	r3, [pc, #320]	; (8018aa0 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018960:	2240      	movs	r2, #64	; 0x40
 8018962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8018966:	f897 3020 	ldrb.w	r3, [r7, #32]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d009      	beq.n	8018982 <APP_THREAD_SendCoapMsg+0x82>
 801896e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018972:	2b03      	cmp	r3, #3
 8018974:	d105      	bne.n	8018982 <APP_THREAD_SendCoapMsg+0x82>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8018976:	2203      	movs	r2, #3
 8018978:	2100      	movs	r1, #0
 801897a:	484d      	ldr	r0, [pc, #308]	; (8018ab0 <APP_THREAD_SendCoapMsg+0x1b0>)
 801897c:	f7fc fa29 	bl	8014dd2 <otCoapHeaderInit>
 8018980:	e04a      	b.n	8018a18 <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8018982:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018986:	2b00      	cmp	r3, #0
 8018988:	d009      	beq.n	801899e <APP_THREAD_SendCoapMsg+0x9e>
 801898a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801898e:	2b01      	cmp	r3, #1
 8018990:	d105      	bne.n	801899e <APP_THREAD_SendCoapMsg+0x9e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8018992:	2201      	movs	r2, #1
 8018994:	2100      	movs	r1, #0
 8018996:	4846      	ldr	r0, [pc, #280]	; (8018ab0 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018998:	f7fc fa1b 	bl	8014dd2 <otCoapHeaderInit>
 801899c:	e03c      	b.n	8018a18 <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 801899e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d009      	beq.n	80189ba <APP_THREAD_SendCoapMsg+0xba>
 80189a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80189aa:	2b02      	cmp	r3, #2
 80189ac:	d105      	bne.n	80189ba <APP_THREAD_SendCoapMsg+0xba>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 80189ae:	2202      	movs	r2, #2
 80189b0:	2100      	movs	r1, #0
 80189b2:	483f      	ldr	r0, [pc, #252]	; (8018ab0 <APP_THREAD_SendCoapMsg+0x1b0>)
 80189b4:	f7fc fa0d 	bl	8014dd2 <otCoapHeaderInit>
 80189b8:	e02e      	b.n	8018a18 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 80189ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d109      	bne.n	80189d6 <APP_THREAD_SendCoapMsg+0xd6>
 80189c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80189c6:	2b03      	cmp	r3, #3
 80189c8:	d105      	bne.n	80189d6 <APP_THREAD_SendCoapMsg+0xd6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 80189ca:	2203      	movs	r2, #3
 80189cc:	2110      	movs	r1, #16
 80189ce:	4838      	ldr	r0, [pc, #224]	; (8018ab0 <APP_THREAD_SendCoapMsg+0x1b0>)
 80189d0:	f7fc f9ff 	bl	8014dd2 <otCoapHeaderInit>
 80189d4:	e020      	b.n	8018a18 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 80189d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d109      	bne.n	80189f2 <APP_THREAD_SendCoapMsg+0xf2>
 80189de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80189e2:	2b01      	cmp	r3, #1
 80189e4:	d105      	bne.n	80189f2 <APP_THREAD_SendCoapMsg+0xf2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 80189e6:	2201      	movs	r2, #1
 80189e8:	2110      	movs	r1, #16
 80189ea:	4831      	ldr	r0, [pc, #196]	; (8018ab0 <APP_THREAD_SendCoapMsg+0x1b0>)
 80189ec:	f7fc f9f1 	bl	8014dd2 <otCoapHeaderInit>
 80189f0:	e012      	b.n	8018a18 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 80189f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d109      	bne.n	8018a0e <APP_THREAD_SendCoapMsg+0x10e>
 80189fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80189fe:	2b02      	cmp	r3, #2
 8018a00:	d105      	bne.n	8018a0e <APP_THREAD_SendCoapMsg+0x10e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8018a02:	2202      	movs	r2, #2
 8018a04:	2110      	movs	r1, #16
 8018a06:	482a      	ldr	r0, [pc, #168]	; (8018ab0 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018a08:	f7fc f9e3 	bl	8014dd2 <otCoapHeaderInit>
 8018a0c:	e004      	b.n	8018a18 <APP_THREAD_SendCoapMsg+0x118>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8018a0e:	2102      	movs	r1, #2
 8018a10:	4827      	ldr	r0, [pc, #156]	; (8018ab0 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018a12:	f7fc fa47 	bl	8014ea4 <otCoapHeaderGenerateToken>
 8018a16:	e040      	b.n	8018a9a <APP_THREAD_SendCoapMsg+0x19a>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8018a18:	6839      	ldr	r1, [r7, #0]
 8018a1a:	4825      	ldr	r0, [pc, #148]	; (8018ab0 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018a1c:	f7fc faa5 	bl	8014f6a <otCoapHeaderAppendUriPathOptions>
 8018a20:	4603      	mov	r3, r0
 8018a22:	461a      	mov	r2, r3
 8018a24:	4b23      	ldr	r3, [pc, #140]	; (8018ab4 <APP_THREAD_SendCoapMsg+0x1b4>)
 8018a26:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8018a28:	212a      	movs	r1, #42	; 0x2a
 8018a2a:	4821      	ldr	r0, [pc, #132]	; (8018ab0 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018a2c:	f7fc fa6a 	bl	8014f04 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 8018a30:	897b      	ldrh	r3, [r7, #10]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d002      	beq.n	8018a3c <APP_THREAD_SendCoapMsg+0x13c>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8018a36:	481e      	ldr	r0, [pc, #120]	; (8018ab0 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018a38:	f7fc fac9 	bl	8014fce <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018a3c:	491c      	ldr	r1, [pc, #112]	; (8018ab0 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018a3e:	2000      	movs	r0, #0
 8018a40:	f7fc fc08 	bl	8015254 <otCoapNewMessage>
 8018a44:	4602      	mov	r2, r0
 8018a46:	4b1c      	ldr	r3, [pc, #112]	; (8018ab8 <APP_THREAD_SendCoapMsg+0x1b8>)
 8018a48:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 8018a4a:	897b      	ldrh	r3, [r7, #10]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d00a      	beq.n	8018a66 <APP_THREAD_SendCoapMsg+0x166>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8018a50:	4b19      	ldr	r3, [pc, #100]	; (8018ab8 <APP_THREAD_SendCoapMsg+0x1b8>)
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	897a      	ldrh	r2, [r7, #10]
 8018a56:	68f9      	ldr	r1, [r7, #12]
 8018a58:	4618      	mov	r0, r3
 8018a5a:	f7fc fef3 	bl	8015844 <otMessageAppend>
 8018a5e:	4603      	mov	r3, r0
 8018a60:	461a      	mov	r2, r3
 8018a62:	4b14      	ldr	r3, [pc, #80]	; (8018ab4 <APP_THREAD_SendCoapMsg+0x1b4>)
 8018a64:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 8018a66:	4b14      	ldr	r3, [pc, #80]	; (8018ab8 <APP_THREAD_SendCoapMsg+0x1b8>)
 8018a68:	6819      	ldr	r1, [r3, #0]
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	9300      	str	r3, [sp, #0]
 8018a6e:	2300      	movs	r3, #0
 8018a70:	4a0b      	ldr	r2, [pc, #44]	; (8018aa0 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018a72:	2000      	movs	r0, #0
 8018a74:	f7fc fc1c 	bl	80152b0 <otCoapSendRequest>
 8018a78:	4603      	mov	r3, r0
 8018a7a:	461a      	mov	r2, r3
 8018a7c:	4b0d      	ldr	r3, [pc, #52]	; (8018ab4 <APP_THREAD_SendCoapMsg+0x1b4>)
 8018a7e:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8018a80:	4b0c      	ldr	r3, [pc, #48]	; (8018ab4 <APP_THREAD_SendCoapMsg+0x1b4>)
 8018a82:	781b      	ldrb	r3, [r3, #0]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d008      	beq.n	8018a9a <APP_THREAD_SendCoapMsg+0x19a>
 8018a88:	4b0b      	ldr	r3, [pc, #44]	; (8018ab8 <APP_THREAD_SendCoapMsg+0x1b8>)
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d004      	beq.n	8018a9a <APP_THREAD_SendCoapMsg+0x19a>
			otMessageFree(pOT_Message);
 8018a90:	4b09      	ldr	r3, [pc, #36]	; (8018ab8 <APP_THREAD_SendCoapMsg+0x1b8>)
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	4618      	mov	r0, r3
 8018a96:	f7fc fe7c 	bl	8015792 <otMessageFree>
		}

	} while (false);
}
 8018a9a:	3714      	adds	r7, #20
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	bd90      	pop	{r4, r7, pc}
 8018aa0:	20027770 	.word	0x20027770
 8018aa4:	20027838 	.word	0x20027838
 8018aa8:	0801bc88 	.word	0x0801bc88
 8018aac:	20028a00 	.word	0x20028a00
 8018ab0:	2002779c 	.word	0x2002779c
 8018ab4:	20027830 	.word	0x20027830
 8018ab8:	2002782c 	.word	0x2002782c

08018abc <APP_THREAD_SendCoapMsgForBorderSync>:

static void APP_THREAD_SendCoapMsgForBorderSync(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8018abc:	b590      	push	{r4, r7, lr}
 8018abe:	b087      	sub	sp, #28
 8018ac0:	af02      	add	r7, sp, #8
 8018ac2:	60f8      	str	r0, [r7, #12]
 8018ac4:	607a      	str	r2, [r7, #4]
 8018ac6:	603b      	str	r3, [r7, #0]
 8018ac8:	460b      	mov	r3, r1
 8018aca:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8018acc:	222c      	movs	r2, #44	; 0x2c
 8018ace:	2100      	movs	r1, #0
 8018ad0:	484e      	ldr	r0, [pc, #312]	; (8018c0c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018ad2:	f001 fdbc 	bl	801a64e <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed


		memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8018ad6:	4b4d      	ldr	r3, [pc, #308]	; (8018c0c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018ad8:	4a4d      	ldr	r2, [pc, #308]	; (8018c10 <APP_THREAD_SendCoapMsgForBorderSync+0x154>)
 8018ada:	f103 0410 	add.w	r4, r3, #16
 8018ade:	4613      	mov	r3, r2
 8018ae0:	6818      	ldr	r0, [r3, #0]
 8018ae2:	6859      	ldr	r1, [r3, #4]
 8018ae4:	689a      	ldr	r2, [r3, #8]
 8018ae6:	68db      	ldr	r3, [r3, #12]
 8018ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8018aea:	4b48      	ldr	r3, [pc, #288]	; (8018c0c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018aec:	2201      	movs	r2, #1
 8018aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8018af2:	4b46      	ldr	r3, [pc, #280]	; (8018c0c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018af4:	f241 6233 	movw	r2, #5683	; 0x1633
 8018af8:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8018afa:	4b44      	ldr	r3, [pc, #272]	; (8018c0c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018afc:	2240      	movs	r2, #64	; 0x40
 8018afe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8018b02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d009      	beq.n	8018b1e <APP_THREAD_SendCoapMsgForBorderSync+0x62>
 8018b0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018b0e:	2b03      	cmp	r3, #3
 8018b10:	d105      	bne.n	8018b1e <APP_THREAD_SendCoapMsgForBorderSync+0x62>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8018b12:	2203      	movs	r2, #3
 8018b14:	2100      	movs	r1, #0
 8018b16:	483f      	ldr	r0, [pc, #252]	; (8018c14 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018b18:	f7fc f95b 	bl	8014dd2 <otCoapHeaderInit>
 8018b1c:	e04a      	b.n	8018bb4 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8018b1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d009      	beq.n	8018b3a <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
 8018b26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018b2a:	2b01      	cmp	r3, #1
 8018b2c:	d105      	bne.n	8018b3a <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8018b2e:	2201      	movs	r2, #1
 8018b30:	2100      	movs	r1, #0
 8018b32:	4838      	ldr	r0, [pc, #224]	; (8018c14 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018b34:	f7fc f94d 	bl	8014dd2 <otCoapHeaderInit>
 8018b38:	e03c      	b.n	8018bb4 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8018b3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d009      	beq.n	8018b56 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
 8018b42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018b46:	2b02      	cmp	r3, #2
 8018b48:	d105      	bne.n	8018b56 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8018b4a:	2202      	movs	r2, #2
 8018b4c:	2100      	movs	r1, #0
 8018b4e:	4831      	ldr	r0, [pc, #196]	; (8018c14 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018b50:	f7fc f93f 	bl	8014dd2 <otCoapHeaderInit>
 8018b54:	e02e      	b.n	8018bb4 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8018b56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d109      	bne.n	8018b72 <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
 8018b5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018b62:	2b03      	cmp	r3, #3
 8018b64:	d105      	bne.n	8018b72 <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8018b66:	2203      	movs	r2, #3
 8018b68:	2110      	movs	r1, #16
 8018b6a:	482a      	ldr	r0, [pc, #168]	; (8018c14 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018b6c:	f7fc f931 	bl	8014dd2 <otCoapHeaderInit>
 8018b70:	e020      	b.n	8018bb4 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8018b72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d109      	bne.n	8018b8e <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
 8018b7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018b7e:	2b01      	cmp	r3, #1
 8018b80:	d105      	bne.n	8018b8e <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8018b82:	2201      	movs	r2, #1
 8018b84:	2110      	movs	r1, #16
 8018b86:	4823      	ldr	r0, [pc, #140]	; (8018c14 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018b88:	f7fc f923 	bl	8014dd2 <otCoapHeaderInit>
 8018b8c:	e012      	b.n	8018bb4 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8018b8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d109      	bne.n	8018baa <APP_THREAD_SendCoapMsgForBorderSync+0xee>
 8018b96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018b9a:	2b02      	cmp	r3, #2
 8018b9c:	d105      	bne.n	8018baa <APP_THREAD_SendCoapMsgForBorderSync+0xee>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8018b9e:	2202      	movs	r2, #2
 8018ba0:	2110      	movs	r1, #16
 8018ba2:	481c      	ldr	r0, [pc, #112]	; (8018c14 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018ba4:	f7fc f915 	bl	8014dd2 <otCoapHeaderInit>
 8018ba8:	e004      	b.n	8018bb4 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8018baa:	2102      	movs	r1, #2
 8018bac:	4819      	ldr	r0, [pc, #100]	; (8018c14 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018bae:	f7fc f979 	bl	8014ea4 <otCoapHeaderGenerateToken>
 8018bb2:	e028      	b.n	8018c06 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8018bb4:	6839      	ldr	r1, [r7, #0]
 8018bb6:	4817      	ldr	r0, [pc, #92]	; (8018c14 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018bb8:	f7fc f9d7 	bl	8014f6a <otCoapHeaderAppendUriPathOptions>
 8018bbc:	4603      	mov	r3, r0
 8018bbe:	461a      	mov	r2, r3
 8018bc0:	4b15      	ldr	r3, [pc, #84]	; (8018c18 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8018bc2:	701a      	strb	r2, [r3, #0]

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
//		otCoapHeaderSetPayloadMarker(&OT_Header);

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018bc4:	4913      	ldr	r1, [pc, #76]	; (8018c14 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018bc6:	2000      	movs	r0, #0
 8018bc8:	f7fc fb44 	bl	8015254 <otCoapNewMessage>
 8018bcc:	4602      	mov	r2, r0
 8018bce:	4b13      	ldr	r3, [pc, #76]	; (8018c1c <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018bd0:	601a      	str	r2, [r3, #0]
			 // if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL, pOT_Message, &OT_MessageInfo, &APP_THREAD_DummyRespHandler,
 8018bd2:	4b12      	ldr	r3, [pc, #72]	; (8018c1c <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018bd4:	6819      	ldr	r1, [r3, #0]
 8018bd6:	4b12      	ldr	r3, [pc, #72]	; (8018c20 <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8018bd8:	9300      	str	r3, [sp, #0]
 8018bda:	4b12      	ldr	r3, [pc, #72]	; (8018c24 <APP_THREAD_SendCoapMsgForBorderSync+0x168>)
 8018bdc:	4a0b      	ldr	r2, [pc, #44]	; (8018c0c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018bde:	2000      	movs	r0, #0
 8018be0:	f7fc fb66 	bl	80152b0 <otCoapSendRequest>
 8018be4:	4603      	mov	r3, r0
 8018be6:	461a      	mov	r2, r3
 8018be8:	4b0b      	ldr	r3, [pc, #44]	; (8018c18 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8018bea:	701a      	strb	r2, [r3, #0]
				(void*) &APP_THREAD_CoapRespHandler_UpdateBorderRouter);



		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8018bec:	4b0a      	ldr	r3, [pc, #40]	; (8018c18 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8018bee:	781b      	ldrb	r3, [r3, #0]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d008      	beq.n	8018c06 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
 8018bf4:	4b09      	ldr	r3, [pc, #36]	; (8018c1c <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d004      	beq.n	8018c06 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
			otMessageFree(pOT_Message);
 8018bfc:	4b07      	ldr	r3, [pc, #28]	; (8018c1c <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	4618      	mov	r0, r3
 8018c02:	f7fc fdc6 	bl	8015792 <otMessageFree>
		}

	} while (false);

}
 8018c06:	3714      	adds	r7, #20
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	bd90      	pop	{r4, r7, pc}
 8018c0c:	20027770 	.word	0x20027770
 8018c10:	20028a00 	.word	0x20028a00
 8018c14:	2002779c 	.word	0x2002779c
 8018c18:	20027830 	.word	0x20027830
 8018c1c:	2002782c 	.word	0x2002782c
 8018c20:	08018485 	.word	0x08018485
 8018c24:	08018469 	.word	0x08018469

08018c28 <APP_THREAD_SendDataResponse>:
request and the Acknowledgement MUST match, and the tokens of the
response and original request MUST match.  In a separate
response, just the tokens of the response and original request
MUST match.*/

static void APP_THREAD_SendDataResponse(void *message, uint16_t msgSize, otCoapHeader *pRequestHeader, const otMessageInfo *pMessageInfo) {
 8018c28:	b590      	push	{r4, r7, lr}
 8018c2a:	b087      	sub	sp, #28
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	60f8      	str	r0, [r7, #12]
 8018c30:	607a      	str	r2, [r7, #4]
 8018c32:	603b      	str	r3, [r7, #0]
 8018c34:	460b      	mov	r3, r1
 8018c36:	817b      	strh	r3, [r7, #10]
	otError error = OT_ERROR_NONE;
 8018c38:	2300      	movs	r3, #0
 8018c3a:	75fb      	strb	r3, [r7, #23]

	//APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
	otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8018c3c:	2244      	movs	r2, #68	; 0x44
 8018c3e:	2120      	movs	r1, #32
 8018c40:	4826      	ldr	r0, [pc, #152]	; (8018cdc <APP_THREAD_SendDataResponse+0xb4>)
 8018c42:	f7fc f8c6 	bl	8014dd2 <otCoapHeaderInit>
	otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8018c46:	6878      	ldr	r0, [r7, #4]
 8018c48:	f7fc fa7b 	bl	8015142 <otCoapHeaderGetMessageId>
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	4619      	mov	r1, r3
 8018c50:	4822      	ldr	r0, [pc, #136]	; (8018cdc <APP_THREAD_SendDataResponse+0xb4>)
 8018c52:	f7fc f9ea 	bl	801502a <otCoapHeaderSetMessageId>
	otCoapHeaderSetToken(&OT_Header, otCoapHeaderGetToken(pRequestHeader), otCoapHeaderGetTokenLength(pRequestHeader));
 8018c56:	6878      	ldr	r0, [r7, #4]
 8018c58:	f7fc facf 	bl	80151fa <otCoapHeaderGetToken>
 8018c5c:	4604      	mov	r4, r0
 8018c5e:	6878      	ldr	r0, [r7, #4]
 8018c60:	f7fc fa9d 	bl	801519e <otCoapHeaderGetTokenLength>
 8018c64:	4603      	mov	r3, r0
 8018c66:	461a      	mov	r2, r3
 8018c68:	4621      	mov	r1, r4
 8018c6a:	481c      	ldr	r0, [pc, #112]	; (8018cdc <APP_THREAD_SendDataResponse+0xb4>)
 8018c6c:	f7fc f8e6 	bl	8014e3c <otCoapHeaderSetToken>

	if (msgSize > 0){
 8018c70:	897b      	ldrh	r3, [r7, #10]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d006      	beq.n	8018c84 <APP_THREAD_SendDataResponse+0x5c>
		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8018c76:	212a      	movs	r1, #42	; 0x2a
 8018c78:	4818      	ldr	r0, [pc, #96]	; (8018cdc <APP_THREAD_SendDataResponse+0xb4>)
 8018c7a:	f7fc f943 	bl	8014f04 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8018c7e:	4817      	ldr	r0, [pc, #92]	; (8018cdc <APP_THREAD_SendDataResponse+0xb4>)
 8018c80:	f7fc f9a5 	bl	8014fce <otCoapHeaderSetPayloadMarker>
	}

	pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018c84:	4915      	ldr	r1, [pc, #84]	; (8018cdc <APP_THREAD_SendDataResponse+0xb4>)
 8018c86:	2000      	movs	r0, #0
 8018c88:	f7fc fae4 	bl	8015254 <otCoapNewMessage>
 8018c8c:	4602      	mov	r2, r0
 8018c8e:	4b14      	ldr	r3, [pc, #80]	; (8018ce0 <APP_THREAD_SendDataResponse+0xb8>)
 8018c90:	601a      	str	r2, [r3, #0]
	if (pOT_Message == NULL) {
		//APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
	}

	// append message if there was one given
	if (msgSize > 0) {
 8018c92:	897b      	ldrh	r3, [r7, #10]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d008      	beq.n	8018caa <APP_THREAD_SendDataResponse+0x82>
		error = otMessageAppend(pOT_Message, message, msgSize);
 8018c98:	4b11      	ldr	r3, [pc, #68]	; (8018ce0 <APP_THREAD_SendDataResponse+0xb8>)
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	897a      	ldrh	r2, [r7, #10]
 8018c9e:	68f9      	ldr	r1, [r7, #12]
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7fc fdcf 	bl	8015844 <otMessageAppend>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	75fb      	strb	r3, [r7, #23]
	}

	error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8018caa:	4b0d      	ldr	r3, [pc, #52]	; (8018ce0 <APP_THREAD_SendDataResponse+0xb8>)
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	683a      	ldr	r2, [r7, #0]
 8018cb0:	4619      	mov	r1, r3
 8018cb2:	2000      	movs	r0, #0
 8018cb4:	f7fc fb95 	bl	80153e2 <otCoapSendResponse>
 8018cb8:	4603      	mov	r3, r0
 8018cba:	75fb      	strb	r3, [r7, #23]
	if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8018cbc:	7dfb      	ldrb	r3, [r7, #23]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d008      	beq.n	8018cd4 <APP_THREAD_SendDataResponse+0xac>
 8018cc2:	4b07      	ldr	r3, [pc, #28]	; (8018ce0 <APP_THREAD_SendDataResponse+0xb8>)
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d004      	beq.n	8018cd4 <APP_THREAD_SendDataResponse+0xac>
		otMessageFree(pOT_Message);
 8018cca:	4b05      	ldr	r3, [pc, #20]	; (8018ce0 <APP_THREAD_SendDataResponse+0xb8>)
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	4618      	mov	r0, r3
 8018cd0:	f7fc fd5f 	bl	8015792 <otMessageFree>
		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
	}
}
 8018cd4:	bf00      	nop
 8018cd6:	371c      	adds	r7, #28
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	bd90      	pop	{r4, r7, pc}
 8018cdc:	2002779c 	.word	0x2002779c
 8018ce0:	2002782c 	.word	0x2002782c

08018ce4 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8018ce4:	b480      	push	{r7}
 8018ce6:	b083      	sub	sp, #12
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8018cec:	4a04      	ldr	r2, [pc, #16]	; (8018d00 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	6013      	str	r3, [r2, #0]
}
 8018cf2:	bf00      	nop
 8018cf4:	370c      	adds	r7, #12
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfc:	4770      	bx	lr
 8018cfe:	bf00      	nop
 8018d00:	20027758 	.word	0x20027758

08018d04 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8018d04:	b480      	push	{r7}
 8018d06:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8018d08:	4b03      	ldr	r3, [pc, #12]	; (8018d18 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	330c      	adds	r3, #12
}
 8018d0e:	4618      	mov	r0, r3
 8018d10:	46bd      	mov	sp, r7
 8018d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d16:	4770      	bx	lr
 8018d18:	20027758 	.word	0x20027758

08018d1c <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8018d1c:	b480      	push	{r7}
 8018d1e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8018d20:	4b03      	ldr	r3, [pc, #12]	; (8018d30 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	330b      	adds	r3, #11
}
 8018d26:	4618      	mov	r0, r3
 8018d28:	46bd      	mov	sp, r7
 8018d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2e:	4770      	bx	lr
 8018d30:	20027758 	.word	0x20027758

08018d34 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8018d34:	b480      	push	{r7}
 8018d36:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8018d38:	4b03      	ldr	r3, [pc, #12]	; (8018d48 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	330b      	adds	r3, #11
}
 8018d3e:	4618      	mov	r0, r3
 8018d40:	46bd      	mov	sp, r7
 8018d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d46:	4770      	bx	lr
 8018d48:	2002775c 	.word	0x2002775c

08018d4c <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b082      	sub	sp, #8
 8018d50:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8018d52:	4b0f      	ldr	r3, [pc, #60]	; (8018d90 <Ot_Cmd_Transfer+0x44>)
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	2200      	movs	r2, #0
 8018d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018d5c:	725a      	strb	r2, [r3, #9]
 8018d5e:	2200      	movs	r2, #0
 8018d60:	f042 0202 	orr.w	r2, r2, #2
 8018d64:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8018d66:	4b0a      	ldr	r3, [pc, #40]	; (8018d90 <Ot_Cmd_Transfer+0x44>)
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	330c      	adds	r3, #12
 8018d6c:	685b      	ldr	r3, [r3, #4]
 8018d6e:	3302      	adds	r3, #2
 8018d70:	009b      	lsls	r3, r3, #2
 8018d72:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8018d74:	4b06      	ldr	r3, [pc, #24]	; (8018d90 <Ot_Cmd_Transfer+0x44>)
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	687a      	ldr	r2, [r7, #4]
 8018d7a:	b2d2      	uxtb	r2, r2
 8018d7c:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8018d7e:	f7fd fc47 	bl	8016610 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8018d82:	f000 f829 	bl	8018dd8 <Wait_Getting_Ack_From_M0>
}
 8018d86:	bf00      	nop
 8018d88:	3708      	adds	r7, #8
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bd80      	pop	{r7, pc}
 8018d8e:	bf00      	nop
 8018d90:	20027758 	.word	0x20027758

08018d94 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b082      	sub	sp, #8
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8018d9c:	f000 f82e 	bl	8018dfc <Receive_Ack_From_M0>
}
 8018da0:	bf00      	nop
 8018da2:	3708      	adds	r7, #8
 8018da4:	46bd      	mov	sp, r7
 8018da6:	bd80      	pop	{r7, pc}

08018da8 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b082      	sub	sp, #8
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8018db0:	4a04      	ldr	r2, [pc, #16]	; (8018dc4 <TL_THREAD_NotReceived+0x1c>)
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8018db6:	f000 f82d 	bl	8018e14 <Receive_Notification_From_M0>
}
 8018dba:	bf00      	nop
 8018dbc:	3708      	adds	r7, #8
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	bd80      	pop	{r7, pc}
 8018dc2:	bf00      	nop
 8018dc4:	2002775c 	.word	0x2002775c

08018dc8 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8018dc8:	b480      	push	{r7}
 8018dca:	af00      	add	r7, sp, #0

}
 8018dcc:	bf00      	nop
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd4:	4770      	bx	lr
	...

08018dd8 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8018dd8:	b480      	push	{r7}
 8018dda:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8018ddc:	bf00      	nop
 8018dde:	4b06      	ldr	r3, [pc, #24]	; (8018df8 <Wait_Getting_Ack_From_M0+0x20>)
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d0fb      	beq.n	8018dde <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8018de6:	4b04      	ldr	r3, [pc, #16]	; (8018df8 <Wait_Getting_Ack_From_M0+0x20>)
 8018de8:	2200      	movs	r2, #0
 8018dea:	601a      	str	r2, [r3, #0]
}
 8018dec:	bf00      	nop
 8018dee:	46bd      	mov	sp, r7
 8018df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df4:	4770      	bx	lr
 8018df6:	bf00      	nop
 8018df8:	20027764 	.word	0x20027764

08018dfc <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8018dfc:	b480      	push	{r7}
 8018dfe:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8018e00:	4b03      	ldr	r3, [pc, #12]	; (8018e10 <Receive_Ack_From_M0+0x14>)
 8018e02:	2201      	movs	r2, #1
 8018e04:	601a      	str	r2, [r3, #0]
}
 8018e06:	bf00      	nop
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0e:	4770      	bx	lr
 8018e10:	20027764 	.word	0x20027764

08018e14 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8018e18:	4b06      	ldr	r3, [pc, #24]	; (8018e34 <Receive_Notification_From_M0+0x20>)
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	3301      	adds	r3, #1
 8018e1e:	4a05      	ldr	r2, [pc, #20]	; (8018e34 <Receive_Notification_From_M0+0x20>)
 8018e20:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 8018e22:	4b05      	ldr	r3, [pc, #20]	; (8018e38 <Receive_Notification_From_M0+0x24>)
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	2101      	movs	r1, #1
 8018e28:	4618      	mov	r0, r3
 8018e2a:	f7f7 fc8b 	bl	8010744 <osThreadFlagsSet>
}
 8018e2e:	bf00      	nop
 8018e30:	bd80      	pop	{r7, pc}
 8018e32:	bf00      	nop
 8018e34:	20027760 	.word	0x20027760
 8018e38:	20027768 	.word	0x20027768

08018e3c <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8018e40:	22ff      	movs	r2, #255	; 0xff
 8018e42:	2100      	movs	r1, #0
 8018e44:	4812      	ldr	r0, [pc, #72]	; (8018e90 <Send_CLI_To_M0+0x54>)
 8018e46:	f001 fc02 	bl	801a64e <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8018e4a:	4b12      	ldr	r3, [pc, #72]	; (8018e94 <Send_CLI_To_M0+0x58>)
 8018e4c:	881b      	ldrh	r3, [r3, #0]
 8018e4e:	b29b      	uxth	r3, r3
 8018e50:	461a      	mov	r2, r3
 8018e52:	4911      	ldr	r1, [pc, #68]	; (8018e98 <Send_CLI_To_M0+0x5c>)
 8018e54:	480e      	ldr	r0, [pc, #56]	; (8018e90 <Send_CLI_To_M0+0x54>)
 8018e56:	f001 fbef 	bl	801a638 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8018e5a:	4b0e      	ldr	r3, [pc, #56]	; (8018e94 <Send_CLI_To_M0+0x58>)
 8018e5c:	881b      	ldrh	r3, [r3, #0]
 8018e5e:	b29b      	uxth	r3, r3
 8018e60:	b2da      	uxtb	r2, r3
 8018e62:	4b0e      	ldr	r3, [pc, #56]	; (8018e9c <Send_CLI_To_M0+0x60>)
 8018e64:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8018e66:	4b0d      	ldr	r3, [pc, #52]	; (8018e9c <Send_CLI_To_M0+0x60>)
 8018e68:	2200      	movs	r2, #0
 8018e6a:	725a      	strb	r2, [r3, #9]
 8018e6c:	2200      	movs	r2, #0
 8018e6e:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8018e70:	4b0b      	ldr	r3, [pc, #44]	; (8018ea0 <Send_CLI_To_M0+0x64>)
 8018e72:	2200      	movs	r2, #0
 8018e74:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8018e76:	4b07      	ldr	r3, [pc, #28]	; (8018e94 <Send_CLI_To_M0+0x58>)
 8018e78:	2200      	movs	r2, #0
 8018e7a:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8018e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018e80:	2100      	movs	r1, #0
 8018e82:	4805      	ldr	r0, [pc, #20]	; (8018e98 <Send_CLI_To_M0+0x5c>)
 8018e84:	f001 fbe3 	bl	801a64e <memset>

  TL_CLI_SendCmd();
 8018e88:	f7fd fbd0 	bl	801662c <TL_CLI_SendCmd>
}
 8018e8c:	bf00      	nop
 8018e8e:	bd80      	pop	{r7, pc}
 8018e90:	20030a5c 	.word	0x20030a5c
 8018e94:	20027754 	.word	0x20027754
 8018e98:	20027654 	.word	0x20027654
 8018e9c:	20030a50 	.word	0x20030a50
 8018ea0:	20027756 	.word	0x20027756

08018ea4 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8018ea8:	f7fd fbdc 	bl	8016664 <TL_THREAD_CliSendAck>
}
 8018eac:	bf00      	nop
 8018eae:	bd80      	pop	{r7, pc}

08018eb0 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8018eb4:	4a04      	ldr	r2, [pc, #16]	; (8018ec8 <APP_THREAD_Init_UART_CLI+0x18>)
 8018eb6:	2100      	movs	r1, #0
 8018eb8:	4804      	ldr	r0, [pc, #16]	; (8018ecc <APP_THREAD_Init_UART_CLI+0x1c>)
 8018eba:	f7f7 fb97 	bl	80105ec <osThreadNew>
 8018ebe:	4602      	mov	r2, r0
 8018ec0:	4b03      	ldr	r3, [pc, #12]	; (8018ed0 <APP_THREAD_Init_UART_CLI+0x20>)
 8018ec2:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8018ec4:	bf00      	nop
 8018ec6:	bd80      	pop	{r7, pc}
 8018ec8:	0801c14c 	.word	0x0801c14c
 8018ecc:	0801840f 	.word	0x0801840f
 8018ed0:	2002776c 	.word	0x2002776c

08018ed4 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8018ed8:	4b06      	ldr	r3, [pc, #24]	; (8018ef4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018eda:	4a07      	ldr	r2, [pc, #28]	; (8018ef8 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8018edc:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8018ede:	4b05      	ldr	r3, [pc, #20]	; (8018ef4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018ee0:	4a06      	ldr	r2, [pc, #24]	; (8018efc <APP_THREAD_TL_THREAD_INIT+0x28>)
 8018ee2:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8018ee4:	4b03      	ldr	r3, [pc, #12]	; (8018ef4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018ee6:	4a06      	ldr	r2, [pc, #24]	; (8018f00 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8018ee8:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8018eea:	4802      	ldr	r0, [pc, #8]	; (8018ef4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018eec:	f7fd fb74 	bl	80165d8 <TL_THREAD_Init>
}
 8018ef0:	bf00      	nop
 8018ef2:	bd80      	pop	{r7, pc}
 8018ef4:	200300b8 	.word	0x200300b8
 8018ef8:	20030838 	.word	0x20030838
 8018efc:	20030944 	.word	0x20030944
 8018f00:	20030a50 	.word	0x20030a50

08018f04 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8018f04:	b580      	push	{r7, lr}
 8018f06:	b084      	sub	sp, #16
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	7adb      	ldrb	r3, [r3, #11]
 8018f14:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	330c      	adds	r3, #12
 8018f1a:	4906      	ldr	r1, [pc, #24]	; (8018f34 <TL_THREAD_CliNotReceived+0x30>)
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	f7e7 f92f 	bl	8000180 <strcmp>
 8018f22:	4603      	mov	r3, r0
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d101      	bne.n	8018f2c <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8018f28:	f7ff ffbc 	bl	8018ea4 <Send_CLI_Ack_For_OT>
  }
}
 8018f2c:	bf00      	nop
 8018f2e:	3710      	adds	r7, #16
 8018f30:	46bd      	mov	sp, r7
 8018f32:	bd80      	pop	{r7, pc}
 8018f34:	0801bca8 	.word	0x0801bca8

08018f38 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8018f3c:	4b09      	ldr	r3, [pc, #36]	; (8018f64 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d00d      	beq.n	8018f60 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8018f44:	4b07      	ldr	r3, [pc, #28]	; (8018f64 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	2b01      	cmp	r3, #1
 8018f4a:	d904      	bls.n	8018f56 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8018f4c:	2100      	movs	r1, #0
 8018f4e:	2000      	movs	r0, #0
 8018f50:	f7fe fff6 	bl	8017f40 <APP_THREAD_Error>
 8018f54:	e001      	b.n	8018f5a <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8018f56:	f7fc fce9 	bl	801592c <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8018f5a:	4b02      	ldr	r3, [pc, #8]	; (8018f64 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8018f5c:	2200      	movs	r2, #0
 8018f5e:	601a      	str	r2, [r3, #0]
  }
}
 8018f60:	bf00      	nop
 8018f62:	bd80      	pop	{r7, pc}
 8018f64:	20027760 	.word	0x20027760

08018f68 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8018f68:	b480      	push	{r7}
 8018f6a:	b083      	sub	sp, #12
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8018f70:	4b06      	ldr	r3, [pc, #24]	; (8018f8c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018f72:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8018f76:	4905      	ldr	r1, [pc, #20]	; (8018f8c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	4313      	orrs	r3, r2
 8018f7c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8018f80:	bf00      	nop
 8018f82:	370c      	adds	r7, #12
 8018f84:	46bd      	mov	sp, r7
 8018f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f8a:	4770      	bx	lr
 8018f8c:	58000800 	.word	0x58000800

08018f90 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8018f90:	b480      	push	{r7}
 8018f92:	b083      	sub	sp, #12
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8018f98:	4b05      	ldr	r3, [pc, #20]	; (8018fb0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8018f9a:	6a1a      	ldr	r2, [r3, #32]
 8018f9c:	4904      	ldr	r1, [pc, #16]	; (8018fb0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	4313      	orrs	r3, r2
 8018fa2:	620b      	str	r3, [r1, #32]
}
 8018fa4:	bf00      	nop
 8018fa6:	370c      	adds	r7, #12
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fae:	4770      	bx	lr
 8018fb0:	58000800 	.word	0x58000800

08018fb4 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8018fb4:	b480      	push	{r7}
 8018fb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8018fb8:	4b05      	ldr	r3, [pc, #20]	; (8018fd0 <LL_PWR_EnableBootC2+0x1c>)
 8018fba:	68db      	ldr	r3, [r3, #12]
 8018fbc:	4a04      	ldr	r2, [pc, #16]	; (8018fd0 <LL_PWR_EnableBootC2+0x1c>)
 8018fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018fc2:	60d3      	str	r3, [r2, #12]
}
 8018fc4:	bf00      	nop
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fcc:	4770      	bx	lr
 8018fce:	bf00      	nop
 8018fd0:	58000400 	.word	0x58000400

08018fd4 <LL_AHB3_GRP1_EnableClock>:
{
 8018fd4:	b480      	push	{r7}
 8018fd6:	b085      	sub	sp, #20
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8018fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	4313      	orrs	r3, r2
 8018fea:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8018fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	4013      	ands	r3, r2
 8018ff6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018ff8:	68fb      	ldr	r3, [r7, #12]
}
 8018ffa:	bf00      	nop
 8018ffc:	3714      	adds	r7, #20
 8018ffe:	46bd      	mov	sp, r7
 8019000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019004:	4770      	bx	lr

08019006 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8019006:	b480      	push	{r7}
 8019008:	b083      	sub	sp, #12
 801900a:	af00      	add	r7, sp, #0
 801900c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	601a      	str	r2, [r3, #0]
}
 801901a:	bf00      	nop
 801901c:	370c      	adds	r7, #12
 801901e:	46bd      	mov	sp, r7
 8019020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019024:	4770      	bx	lr

08019026 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8019026:	b480      	push	{r7}
 8019028:	b083      	sub	sp, #12
 801902a:	af00      	add	r7, sp, #0
 801902c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	f043 0201 	orr.w	r2, r3, #1
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	601a      	str	r2, [r3, #0]
}
 801903a:	bf00      	nop
 801903c:	370c      	adds	r7, #12
 801903e:	46bd      	mov	sp, r7
 8019040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019044:	4770      	bx	lr

08019046 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019046:	b480      	push	{r7}
 8019048:	b083      	sub	sp, #12
 801904a:	af00      	add	r7, sp, #0
 801904c:	6078      	str	r0, [r7, #4]
 801904e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	685a      	ldr	r2, [r3, #4]
 8019054:	683b      	ldr	r3, [r7, #0]
 8019056:	041b      	lsls	r3, r3, #16
 8019058:	43db      	mvns	r3, r3
 801905a:	401a      	ands	r2, r3
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	605a      	str	r2, [r3, #4]
}
 8019060:	bf00      	nop
 8019062:	370c      	adds	r7, #12
 8019064:	46bd      	mov	sp, r7
 8019066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801906a:	4770      	bx	lr

0801906c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801906c:	b480      	push	{r7}
 801906e:	b083      	sub	sp, #12
 8019070:	af00      	add	r7, sp, #0
 8019072:	6078      	str	r0, [r7, #4]
 8019074:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	685a      	ldr	r2, [r3, #4]
 801907a:	683b      	ldr	r3, [r7, #0]
 801907c:	041b      	lsls	r3, r3, #16
 801907e:	431a      	orrs	r2, r3
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	605a      	str	r2, [r3, #4]
}
 8019084:	bf00      	nop
 8019086:	370c      	adds	r7, #12
 8019088:	46bd      	mov	sp, r7
 801908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801908e:	4770      	bx	lr

08019090 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019090:	b480      	push	{r7}
 8019092:	b083      	sub	sp, #12
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
 8019098:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	685a      	ldr	r2, [r3, #4]
 801909e:	683b      	ldr	r3, [r7, #0]
 80190a0:	43db      	mvns	r3, r3
 80190a2:	401a      	ands	r2, r3
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	605a      	str	r2, [r3, #4]
}
 80190a8:	bf00      	nop
 80190aa:	370c      	adds	r7, #12
 80190ac:	46bd      	mov	sp, r7
 80190ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b2:	4770      	bx	lr

080190b4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80190b4:	b480      	push	{r7}
 80190b6:	b083      	sub	sp, #12
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	6078      	str	r0, [r7, #4]
 80190bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	685a      	ldr	r2, [r3, #4]
 80190c2:	683b      	ldr	r3, [r7, #0]
 80190c4:	431a      	orrs	r2, r3
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	605a      	str	r2, [r3, #4]
}
 80190ca:	bf00      	nop
 80190cc:	370c      	adds	r7, #12
 80190ce:	46bd      	mov	sp, r7
 80190d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d4:	4770      	bx	lr

080190d6 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80190d6:	b480      	push	{r7}
 80190d8:	b083      	sub	sp, #12
 80190da:	af00      	add	r7, sp, #0
 80190dc:	6078      	str	r0, [r7, #4]
 80190de:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	683a      	ldr	r2, [r7, #0]
 80190e4:	609a      	str	r2, [r3, #8]
}
 80190e6:	bf00      	nop
 80190e8:	370c      	adds	r7, #12
 80190ea:	46bd      	mov	sp, r7
 80190ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f0:	4770      	bx	lr

080190f2 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80190f2:	b480      	push	{r7}
 80190f4:	b083      	sub	sp, #12
 80190f6:	af00      	add	r7, sp, #0
 80190f8:	6078      	str	r0, [r7, #4]
 80190fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80190fc:	683b      	ldr	r3, [r7, #0]
 80190fe:	041a      	lsls	r2, r3, #16
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	609a      	str	r2, [r3, #8]
}
 8019104:	bf00      	nop
 8019106:	370c      	adds	r7, #12
 8019108:	46bd      	mov	sp, r7
 801910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910e:	4770      	bx	lr

08019110 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8019110:	b480      	push	{r7}
 8019112:	b083      	sub	sp, #12
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]
 8019118:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	68da      	ldr	r2, [r3, #12]
 801911e:	683b      	ldr	r3, [r7, #0]
 8019120:	4013      	ands	r3, r2
 8019122:	683a      	ldr	r2, [r7, #0]
 8019124:	429a      	cmp	r2, r3
 8019126:	d101      	bne.n	801912c <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8019128:	2301      	movs	r3, #1
 801912a:	e000      	b.n	801912e <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801912c:	2300      	movs	r3, #0
}
 801912e:	4618      	mov	r0, r3
 8019130:	370c      	adds	r7, #12
 8019132:	46bd      	mov	sp, r7
 8019134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019138:	4770      	bx	lr

0801913a <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801913a:	b480      	push	{r7}
 801913c:	b083      	sub	sp, #12
 801913e:	af00      	add	r7, sp, #0
 8019140:	6078      	str	r0, [r7, #4]
 8019142:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	69da      	ldr	r2, [r3, #28]
 8019148:	683b      	ldr	r3, [r7, #0]
 801914a:	4013      	ands	r3, r2
 801914c:	683a      	ldr	r2, [r7, #0]
 801914e:	429a      	cmp	r2, r3
 8019150:	d101      	bne.n	8019156 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8019152:	2301      	movs	r3, #1
 8019154:	e000      	b.n	8019158 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8019156:	2300      	movs	r3, #0
}
 8019158:	4618      	mov	r0, r3
 801915a:	370c      	adds	r7, #12
 801915c:	46bd      	mov	sp, r7
 801915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019162:	4770      	bx	lr

08019164 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8019164:	b580      	push	{r7, lr}
 8019166:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8019168:	2102      	movs	r1, #2
 801916a:	482a      	ldr	r0, [pc, #168]	; (8019214 <HW_IPCC_Rx_Handler+0xb0>)
 801916c:	f7ff ffe5 	bl	801913a <LL_C2_IPCC_IsActiveFlag_CHx>
 8019170:	4603      	mov	r3, r0
 8019172:	2b00      	cmp	r3, #0
 8019174:	d009      	beq.n	801918a <HW_IPCC_Rx_Handler+0x26>
 8019176:	4b27      	ldr	r3, [pc, #156]	; (8019214 <HW_IPCC_Rx_Handler+0xb0>)
 8019178:	685b      	ldr	r3, [r3, #4]
 801917a:	43db      	mvns	r3, r3
 801917c:	f003 0302 	and.w	r3, r3, #2
 8019180:	2b00      	cmp	r3, #0
 8019182:	d002      	beq.n	801918a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8019184:	f000 f906 	bl	8019394 <HW_IPCC_SYS_EvtHandler>
 8019188:	e041      	b.n	801920e <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 801918a:	2104      	movs	r1, #4
 801918c:	4821      	ldr	r0, [pc, #132]	; (8019214 <HW_IPCC_Rx_Handler+0xb0>)
 801918e:	f7ff ffd4 	bl	801913a <LL_C2_IPCC_IsActiveFlag_CHx>
 8019192:	4603      	mov	r3, r0
 8019194:	2b00      	cmp	r3, #0
 8019196:	d009      	beq.n	80191ac <HW_IPCC_Rx_Handler+0x48>
 8019198:	4b1e      	ldr	r3, [pc, #120]	; (8019214 <HW_IPCC_Rx_Handler+0xb0>)
 801919a:	685b      	ldr	r3, [r3, #4]
 801919c:	43db      	mvns	r3, r3
 801919e:	f003 0304 	and.w	r3, r3, #4
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d002      	beq.n	80191ac <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 80191a6:	f000 f94f 	bl	8019448 <HW_IPCC_THREAD_NotEvtHandler>
 80191aa:	e030      	b.n	801920e <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 80191ac:	2110      	movs	r1, #16
 80191ae:	4819      	ldr	r0, [pc, #100]	; (8019214 <HW_IPCC_Rx_Handler+0xb0>)
 80191b0:	f7ff ffc3 	bl	801913a <LL_C2_IPCC_IsActiveFlag_CHx>
 80191b4:	4603      	mov	r3, r0
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d009      	beq.n	80191ce <HW_IPCC_Rx_Handler+0x6a>
 80191ba:	4b16      	ldr	r3, [pc, #88]	; (8019214 <HW_IPCC_Rx_Handler+0xb0>)
 80191bc:	685b      	ldr	r3, [r3, #4]
 80191be:	43db      	mvns	r3, r3
 80191c0:	f003 0310 	and.w	r3, r3, #16
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d002      	beq.n	80191ce <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 80191c8:	f000 f94a 	bl	8019460 <HW_IPCC_THREAD_CliNotEvtHandler>
 80191cc:	e01f      	b.n	801920e <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80191ce:	2101      	movs	r1, #1
 80191d0:	4810      	ldr	r0, [pc, #64]	; (8019214 <HW_IPCC_Rx_Handler+0xb0>)
 80191d2:	f7ff ffb2 	bl	801913a <LL_C2_IPCC_IsActiveFlag_CHx>
 80191d6:	4603      	mov	r3, r0
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d008      	beq.n	80191ee <HW_IPCC_Rx_Handler+0x8a>
 80191dc:	4b0d      	ldr	r3, [pc, #52]	; (8019214 <HW_IPCC_Rx_Handler+0xb0>)
 80191de:	685b      	ldr	r3, [r3, #4]
 80191e0:	f003 0301 	and.w	r3, r3, #1
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d102      	bne.n	80191ee <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 80191e8:	f000 f898 	bl	801931c <HW_IPCC_BLE_EvtHandler>
 80191ec:	e00f      	b.n	801920e <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80191ee:	2108      	movs	r1, #8
 80191f0:	4808      	ldr	r0, [pc, #32]	; (8019214 <HW_IPCC_Rx_Handler+0xb0>)
 80191f2:	f7ff ffa2 	bl	801913a <LL_C2_IPCC_IsActiveFlag_CHx>
 80191f6:	4603      	mov	r3, r0
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d009      	beq.n	8019210 <HW_IPCC_Rx_Handler+0xac>
 80191fc:	4b05      	ldr	r3, [pc, #20]	; (8019214 <HW_IPCC_Rx_Handler+0xb0>)
 80191fe:	685b      	ldr	r3, [r3, #4]
 8019200:	43db      	mvns	r3, r3
 8019202:	f003 0308 	and.w	r3, r3, #8
 8019206:	2b00      	cmp	r3, #0
 8019208:	d002      	beq.n	8019210 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 801920a:	f000 f975 	bl	80194f8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801920e:	bf00      	nop
 8019210:	bf00      	nop
}
 8019212:	bd80      	pop	{r7, pc}
 8019214:	58000c00 	.word	0x58000c00

08019218 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8019218:	b580      	push	{r7, lr}
 801921a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801921c:	2102      	movs	r1, #2
 801921e:	482b      	ldr	r0, [pc, #172]	; (80192cc <HW_IPCC_Tx_Handler+0xb4>)
 8019220:	f7ff ff76 	bl	8019110 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019224:	4603      	mov	r3, r0
 8019226:	2b00      	cmp	r3, #0
 8019228:	d109      	bne.n	801923e <HW_IPCC_Tx_Handler+0x26>
 801922a:	4b28      	ldr	r3, [pc, #160]	; (80192cc <HW_IPCC_Tx_Handler+0xb4>)
 801922c:	685b      	ldr	r3, [r3, #4]
 801922e:	43db      	mvns	r3, r3
 8019230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019234:	2b00      	cmp	r3, #0
 8019236:	d002      	beq.n	801923e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8019238:	f000 f8a0 	bl	801937c <HW_IPCC_SYS_CmdEvtHandler>
 801923c:	e042      	b.n	80192c4 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 801923e:	2104      	movs	r1, #4
 8019240:	4822      	ldr	r0, [pc, #136]	; (80192cc <HW_IPCC_Tx_Handler+0xb4>)
 8019242:	f7ff ff65 	bl	8019110 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019246:	4603      	mov	r3, r0
 8019248:	2b00      	cmp	r3, #0
 801924a:	d109      	bne.n	8019260 <HW_IPCC_Tx_Handler+0x48>
 801924c:	4b1f      	ldr	r3, [pc, #124]	; (80192cc <HW_IPCC_Tx_Handler+0xb4>)
 801924e:	685b      	ldr	r3, [r3, #4]
 8019250:	43db      	mvns	r3, r3
 8019252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019256:	2b00      	cmp	r3, #0
 8019258:	d002      	beq.n	8019260 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 801925a:	f000 f8e9 	bl	8019430 <HW_IPCC_OT_CmdEvtHandler>
 801925e:	e031      	b.n	80192c4 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8019260:	2102      	movs	r1, #2
 8019262:	481a      	ldr	r0, [pc, #104]	; (80192cc <HW_IPCC_Tx_Handler+0xb4>)
 8019264:	f7ff ff54 	bl	8019110 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019268:	4603      	mov	r3, r0
 801926a:	2b00      	cmp	r3, #0
 801926c:	d109      	bne.n	8019282 <HW_IPCC_Tx_Handler+0x6a>
 801926e:	4b17      	ldr	r3, [pc, #92]	; (80192cc <HW_IPCC_Tx_Handler+0xb4>)
 8019270:	685b      	ldr	r3, [r3, #4]
 8019272:	43db      	mvns	r3, r3
 8019274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019278:	2b00      	cmp	r3, #0
 801927a:	d002      	beq.n	8019282 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801927c:	f000 f87e 	bl	801937c <HW_IPCC_SYS_CmdEvtHandler>
 8019280:	e020      	b.n	80192c4 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8019282:	2108      	movs	r1, #8
 8019284:	4811      	ldr	r0, [pc, #68]	; (80192cc <HW_IPCC_Tx_Handler+0xb4>)
 8019286:	f7ff ff43 	bl	8019110 <LL_C1_IPCC_IsActiveFlag_CHx>
 801928a:	4603      	mov	r3, r0
 801928c:	2b00      	cmp	r3, #0
 801928e:	d109      	bne.n	80192a4 <HW_IPCC_Tx_Handler+0x8c>
 8019290:	4b0e      	ldr	r3, [pc, #56]	; (80192cc <HW_IPCC_Tx_Handler+0xb4>)
 8019292:	685b      	ldr	r3, [r3, #4]
 8019294:	43db      	mvns	r3, r3
 8019296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801929a:	2b00      	cmp	r3, #0
 801929c:	d002      	beq.n	80192a4 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 801929e:	f000 f90d 	bl	80194bc <HW_IPCC_MM_FreeBufHandler>
 80192a2:	e00f      	b.n	80192c4 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80192a4:	2120      	movs	r1, #32
 80192a6:	4809      	ldr	r0, [pc, #36]	; (80192cc <HW_IPCC_Tx_Handler+0xb4>)
 80192a8:	f7ff ff32 	bl	8019110 <LL_C1_IPCC_IsActiveFlag_CHx>
 80192ac:	4603      	mov	r3, r0
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d109      	bne.n	80192c6 <HW_IPCC_Tx_Handler+0xae>
 80192b2:	4b06      	ldr	r3, [pc, #24]	; (80192cc <HW_IPCC_Tx_Handler+0xb4>)
 80192b4:	685b      	ldr	r3, [r3, #4]
 80192b6:	43db      	mvns	r3, r3
 80192b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d002      	beq.n	80192c6 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80192c0:	f000 f838 	bl	8019334 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80192c4:	bf00      	nop
 80192c6:	bf00      	nop
}
 80192c8:	bd80      	pop	{r7, pc}
 80192ca:	bf00      	nop
 80192cc:	58000c00 	.word	0x58000c00

080192d0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80192d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80192d8:	f7ff fe46 	bl	8018f68 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80192dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80192e0:	f7ff fe56 	bl	8018f90 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80192e4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80192e6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80192e8:	f7ff fe64 	bl	8018fb4 <LL_PWR_EnableBootC2>

  return;
 80192ec:	bf00      	nop
}
 80192ee:	bd80      	pop	{r7, pc}

080192f0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80192f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80192f8:	f7ff fe6c 	bl	8018fd4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80192fc:	4806      	ldr	r0, [pc, #24]	; (8019318 <HW_IPCC_Init+0x28>)
 80192fe:	f7ff fe92 	bl	8019026 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8019302:	4805      	ldr	r0, [pc, #20]	; (8019318 <HW_IPCC_Init+0x28>)
 8019304:	f7ff fe7f 	bl	8019006 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8019308:	202c      	movs	r0, #44	; 0x2c
 801930a:	f7ef f8ec 	bl	80084e6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801930e:	202d      	movs	r0, #45	; 0x2d
 8019310:	f7ef f8e9 	bl	80084e6 <HAL_NVIC_EnableIRQ>

  return;
 8019314:	bf00      	nop
}
 8019316:	bd80      	pop	{r7, pc}
 8019318:	58000c00 	.word	0x58000c00

0801931c <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 801931c:	b580      	push	{r7, lr}
 801931e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8019320:	f7fd f8ca 	bl	80164b8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8019324:	2101      	movs	r1, #1
 8019326:	4802      	ldr	r0, [pc, #8]	; (8019330 <HW_IPCC_BLE_EvtHandler+0x14>)
 8019328:	f7ff fed5 	bl	80190d6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801932c:	bf00      	nop
}
 801932e:	bd80      	pop	{r7, pc}
 8019330:	58000c00 	.word	0x58000c00

08019334 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8019334:	b580      	push	{r7, lr}
 8019336:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8019338:	2120      	movs	r1, #32
 801933a:	4803      	ldr	r0, [pc, #12]	; (8019348 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 801933c:	f7ff fe96 	bl	801906c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8019340:	f7fd f8d6 	bl	80164f0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8019344:	bf00      	nop
}
 8019346:	bd80      	pop	{r7, pc}
 8019348:	58000c00 	.word	0x58000c00

0801934c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801934c:	b580      	push	{r7, lr}
 801934e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8019350:	2102      	movs	r1, #2
 8019352:	4802      	ldr	r0, [pc, #8]	; (801935c <HW_IPCC_SYS_Init+0x10>)
 8019354:	f7ff fe9c 	bl	8019090 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019358:	bf00      	nop
}
 801935a:	bd80      	pop	{r7, pc}
 801935c:	58000c00 	.word	0x58000c00

08019360 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8019360:	b580      	push	{r7, lr}
 8019362:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019364:	2102      	movs	r1, #2
 8019366:	4804      	ldr	r0, [pc, #16]	; (8019378 <HW_IPCC_SYS_SendCmd+0x18>)
 8019368:	f7ff fec3 	bl	80190f2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801936c:	2102      	movs	r1, #2
 801936e:	4802      	ldr	r0, [pc, #8]	; (8019378 <HW_IPCC_SYS_SendCmd+0x18>)
 8019370:	f7ff fe69 	bl	8019046 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8019374:	bf00      	nop
}
 8019376:	bd80      	pop	{r7, pc}
 8019378:	58000c00 	.word	0x58000c00

0801937c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 801937c:	b580      	push	{r7, lr}
 801937e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019380:	2102      	movs	r1, #2
 8019382:	4803      	ldr	r0, [pc, #12]	; (8019390 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8019384:	f7ff fe72 	bl	801906c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8019388:	f7fd f8fa 	bl	8016580 <HW_IPCC_SYS_CmdEvtNot>

  return;
 801938c:	bf00      	nop
}
 801938e:	bd80      	pop	{r7, pc}
 8019390:	58000c00 	.word	0x58000c00

08019394 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8019394:	b580      	push	{r7, lr}
 8019396:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8019398:	f7fd f902 	bl	80165a0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801939c:	2102      	movs	r1, #2
 801939e:	4802      	ldr	r0, [pc, #8]	; (80193a8 <HW_IPCC_SYS_EvtHandler+0x14>)
 80193a0:	f7ff fe99 	bl	80190d6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80193a4:	bf00      	nop
}
 80193a6:	bd80      	pop	{r7, pc}
 80193a8:	58000c00 	.word	0x58000c00

080193ac <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80193b0:	2104      	movs	r1, #4
 80193b2:	4804      	ldr	r0, [pc, #16]	; (80193c4 <HW_IPCC_THREAD_Init+0x18>)
 80193b4:	f7ff fe6c 	bl	8019090 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80193b8:	2110      	movs	r1, #16
 80193ba:	4802      	ldr	r0, [pc, #8]	; (80193c4 <HW_IPCC_THREAD_Init+0x18>)
 80193bc:	f7ff fe68 	bl	8019090 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80193c0:	bf00      	nop
}
 80193c2:	bd80      	pop	{r7, pc}
 80193c4:	58000c00 	.word	0x58000c00

080193c8 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 80193c8:	b580      	push	{r7, lr}
 80193ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80193cc:	2104      	movs	r1, #4
 80193ce:	4804      	ldr	r0, [pc, #16]	; (80193e0 <HW_IPCC_OT_SendCmd+0x18>)
 80193d0:	f7ff fe8f 	bl	80190f2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80193d4:	2104      	movs	r1, #4
 80193d6:	4802      	ldr	r0, [pc, #8]	; (80193e0 <HW_IPCC_OT_SendCmd+0x18>)
 80193d8:	f7ff fe35 	bl	8019046 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80193dc:	bf00      	nop
}
 80193de:	bd80      	pop	{r7, pc}
 80193e0:	58000c00 	.word	0x58000c00

080193e4 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 80193e4:	b580      	push	{r7, lr}
 80193e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 80193e8:	2110      	movs	r1, #16
 80193ea:	4802      	ldr	r0, [pc, #8]	; (80193f4 <HW_IPCC_CLI_SendCmd+0x10>)
 80193ec:	f7ff fe81 	bl	80190f2 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80193f0:	bf00      	nop
}
 80193f2:	bd80      	pop	{r7, pc}
 80193f4:	58000c00 	.word	0x58000c00

080193f8 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80193fc:	2104      	movs	r1, #4
 80193fe:	4804      	ldr	r0, [pc, #16]	; (8019410 <HW_IPCC_THREAD_SendAck+0x18>)
 8019400:	f7ff fe69 	bl	80190d6 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8019404:	2104      	movs	r1, #4
 8019406:	4802      	ldr	r0, [pc, #8]	; (8019410 <HW_IPCC_THREAD_SendAck+0x18>)
 8019408:	f7ff fe42 	bl	8019090 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801940c:	bf00      	nop
}
 801940e:	bd80      	pop	{r7, pc}
 8019410:	58000c00 	.word	0x58000c00

08019414 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8019414:	b580      	push	{r7, lr}
 8019416:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8019418:	2110      	movs	r1, #16
 801941a:	4804      	ldr	r0, [pc, #16]	; (801942c <HW_IPCC_THREAD_CliSendAck+0x18>)
 801941c:	f7ff fe5b 	bl	80190d6 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8019420:	2110      	movs	r1, #16
 8019422:	4802      	ldr	r0, [pc, #8]	; (801942c <HW_IPCC_THREAD_CliSendAck+0x18>)
 8019424:	f7ff fe34 	bl	8019090 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019428:	bf00      	nop
}
 801942a:	bd80      	pop	{r7, pc}
 801942c:	58000c00 	.word	0x58000c00

08019430 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8019430:	b580      	push	{r7, lr}
 8019432:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8019434:	2104      	movs	r1, #4
 8019436:	4803      	ldr	r0, [pc, #12]	; (8019444 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8019438:	f7ff fe18 	bl	801906c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 801943c:	f7fd f920 	bl	8016680 <HW_IPCC_OT_CmdEvtNot>

  return;
 8019440:	bf00      	nop
}
 8019442:	bd80      	pop	{r7, pc}
 8019444:	58000c00 	.word	0x58000c00

08019448 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8019448:	b580      	push	{r7, lr}
 801944a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801944c:	2104      	movs	r1, #4
 801944e:	4803      	ldr	r0, [pc, #12]	; (801945c <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8019450:	f7ff fe30 	bl	80190b4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8019454:	f7fd f920 	bl	8016698 <HW_IPCC_THREAD_EvtNot>

  return;
 8019458:	bf00      	nop
}
 801945a:	bd80      	pop	{r7, pc}
 801945c:	58000c00 	.word	0x58000c00

08019460 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8019460:	b580      	push	{r7, lr}
 8019462:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8019464:	2110      	movs	r1, #16
 8019466:	4803      	ldr	r0, [pc, #12]	; (8019474 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8019468:	f7ff fe24 	bl	80190b4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 801946c:	f7fd f920 	bl	80166b0 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8019470:	bf00      	nop
}
 8019472:	bd80      	pop	{r7, pc}
 8019474:	58000c00 	.word	0x58000c00

08019478 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8019478:	b580      	push	{r7, lr}
 801947a:	b082      	sub	sp, #8
 801947c:	af00      	add	r7, sp, #0
 801947e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8019480:	2108      	movs	r1, #8
 8019482:	480c      	ldr	r0, [pc, #48]	; (80194b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019484:	f7ff fe44 	bl	8019110 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019488:	4603      	mov	r3, r0
 801948a:	2b00      	cmp	r3, #0
 801948c:	d007      	beq.n	801949e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801948e:	4a0a      	ldr	r2, [pc, #40]	; (80194b8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019494:	2108      	movs	r1, #8
 8019496:	4807      	ldr	r0, [pc, #28]	; (80194b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019498:	f7ff fdd5 	bl	8019046 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 801949c:	e006      	b.n	80194ac <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80194a2:	2108      	movs	r1, #8
 80194a4:	4803      	ldr	r0, [pc, #12]	; (80194b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80194a6:	f7ff fe24 	bl	80190f2 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80194aa:	bf00      	nop
}
 80194ac:	3708      	adds	r7, #8
 80194ae:	46bd      	mov	sp, r7
 80194b0:	bd80      	pop	{r7, pc}
 80194b2:	bf00      	nop
 80194b4:	58000c00 	.word	0x58000c00
 80194b8:	20027868 	.word	0x20027868

080194bc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80194bc:	b580      	push	{r7, lr}
 80194be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80194c0:	2108      	movs	r1, #8
 80194c2:	4806      	ldr	r0, [pc, #24]	; (80194dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80194c4:	f7ff fdd2 	bl	801906c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80194c8:	4b05      	ldr	r3, [pc, #20]	; (80194e0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80194ce:	2108      	movs	r1, #8
 80194d0:	4802      	ldr	r0, [pc, #8]	; (80194dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80194d2:	f7ff fe0e 	bl	80190f2 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80194d6:	bf00      	nop
}
 80194d8:	bd80      	pop	{r7, pc}
 80194da:	bf00      	nop
 80194dc:	58000c00 	.word	0x58000c00
 80194e0:	20027868 	.word	0x20027868

080194e4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80194e8:	2108      	movs	r1, #8
 80194ea:	4802      	ldr	r0, [pc, #8]	; (80194f4 <HW_IPCC_TRACES_Init+0x10>)
 80194ec:	f7ff fdd0 	bl	8019090 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80194f0:	bf00      	nop
}
 80194f2:	bd80      	pop	{r7, pc}
 80194f4:	58000c00 	.word	0x58000c00

080194f8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80194f8:	b580      	push	{r7, lr}
 80194fa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80194fc:	f7fd f966 	bl	80167cc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8019500:	2108      	movs	r1, #8
 8019502:	4802      	ldr	r0, [pc, #8]	; (801950c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8019504:	f7ff fde7 	bl	80190d6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019508:	bf00      	nop
}
 801950a:	bd80      	pop	{r7, pc}
 801950c:	58000c00 	.word	0x58000c00

08019510 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8019510:	b580      	push	{r7, lr}
 8019512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8019514:	2200      	movs	r2, #0
 8019516:	4912      	ldr	r1, [pc, #72]	; (8019560 <MX_USB_Device_Init+0x50>)
 8019518:	4812      	ldr	r0, [pc, #72]	; (8019564 <MX_USB_Device_Init+0x54>)
 801951a:	f7fd fc14 	bl	8016d46 <USBD_Init>
 801951e:	4603      	mov	r3, r0
 8019520:	2b00      	cmp	r3, #0
 8019522:	d001      	beq.n	8019528 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8019524:	f7eb f834 	bl	8004590 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8019528:	490f      	ldr	r1, [pc, #60]	; (8019568 <MX_USB_Device_Init+0x58>)
 801952a:	480e      	ldr	r0, [pc, #56]	; (8019564 <MX_USB_Device_Init+0x54>)
 801952c:	f7fd fc36 	bl	8016d9c <USBD_RegisterClass>
 8019530:	4603      	mov	r3, r0
 8019532:	2b00      	cmp	r3, #0
 8019534:	d001      	beq.n	801953a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8019536:	f7eb f82b 	bl	8004590 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801953a:	490c      	ldr	r1, [pc, #48]	; (801956c <MX_USB_Device_Init+0x5c>)
 801953c:	4809      	ldr	r0, [pc, #36]	; (8019564 <MX_USB_Device_Init+0x54>)
 801953e:	f7fd fb93 	bl	8016c68 <USBD_CDC_RegisterInterface>
 8019542:	4603      	mov	r3, r0
 8019544:	2b00      	cmp	r3, #0
 8019546:	d001      	beq.n	801954c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8019548:	f7eb f822 	bl	8004590 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801954c:	4805      	ldr	r0, [pc, #20]	; (8019564 <MX_USB_Device_Init+0x54>)
 801954e:	f7fd fc3f 	bl	8016dd0 <USBD_Start>
 8019552:	4603      	mov	r3, r0
 8019554:	2b00      	cmp	r3, #0
 8019556:	d001      	beq.n	801955c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8019558:	f7eb f81a 	bl	8004590 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801955c:	bf00      	nop
 801955e:	bd80      	pop	{r7, pc}
 8019560:	20000218 	.word	0x20000218
 8019564:	20028a38 	.word	0x20028a38
 8019568:	20000094 	.word	0x20000094
 801956c:	20000208 	.word	0x20000208

08019570 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019570:	b580      	push	{r7, lr}
 8019572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019574:	2200      	movs	r2, #0
 8019576:	4905      	ldr	r1, [pc, #20]	; (801958c <CDC_Init_FS+0x1c>)
 8019578:	4805      	ldr	r0, [pc, #20]	; (8019590 <CDC_Init_FS+0x20>)
 801957a:	f7fd fb8c 	bl	8016c96 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801957e:	4905      	ldr	r1, [pc, #20]	; (8019594 <CDC_Init_FS+0x24>)
 8019580:	4803      	ldr	r0, [pc, #12]	; (8019590 <CDC_Init_FS+0x20>)
 8019582:	f7fd fba2 	bl	8016cca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019586:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019588:	4618      	mov	r0, r3
 801958a:	bd80      	pop	{r7, pc}
 801958c:	200294fc 	.word	0x200294fc
 8019590:	20028a38 	.word	0x20028a38
 8019594:	20028cfc 	.word	0x20028cfc

08019598 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019598:	b480      	push	{r7}
 801959a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801959c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801959e:	4618      	mov	r0, r3
 80195a0:	46bd      	mov	sp, r7
 80195a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a6:	4770      	bx	lr

080195a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80195a8:	b480      	push	{r7}
 80195aa:	b083      	sub	sp, #12
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	4603      	mov	r3, r0
 80195b0:	6039      	str	r1, [r7, #0]
 80195b2:	71fb      	strb	r3, [r7, #7]
 80195b4:	4613      	mov	r3, r2
 80195b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80195b8:	79fb      	ldrb	r3, [r7, #7]
 80195ba:	2b23      	cmp	r3, #35	; 0x23
 80195bc:	d84a      	bhi.n	8019654 <CDC_Control_FS+0xac>
 80195be:	a201      	add	r2, pc, #4	; (adr r2, 80195c4 <CDC_Control_FS+0x1c>)
 80195c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195c4:	08019655 	.word	0x08019655
 80195c8:	08019655 	.word	0x08019655
 80195cc:	08019655 	.word	0x08019655
 80195d0:	08019655 	.word	0x08019655
 80195d4:	08019655 	.word	0x08019655
 80195d8:	08019655 	.word	0x08019655
 80195dc:	08019655 	.word	0x08019655
 80195e0:	08019655 	.word	0x08019655
 80195e4:	08019655 	.word	0x08019655
 80195e8:	08019655 	.word	0x08019655
 80195ec:	08019655 	.word	0x08019655
 80195f0:	08019655 	.word	0x08019655
 80195f4:	08019655 	.word	0x08019655
 80195f8:	08019655 	.word	0x08019655
 80195fc:	08019655 	.word	0x08019655
 8019600:	08019655 	.word	0x08019655
 8019604:	08019655 	.word	0x08019655
 8019608:	08019655 	.word	0x08019655
 801960c:	08019655 	.word	0x08019655
 8019610:	08019655 	.word	0x08019655
 8019614:	08019655 	.word	0x08019655
 8019618:	08019655 	.word	0x08019655
 801961c:	08019655 	.word	0x08019655
 8019620:	08019655 	.word	0x08019655
 8019624:	08019655 	.word	0x08019655
 8019628:	08019655 	.word	0x08019655
 801962c:	08019655 	.word	0x08019655
 8019630:	08019655 	.word	0x08019655
 8019634:	08019655 	.word	0x08019655
 8019638:	08019655 	.word	0x08019655
 801963c:	08019655 	.word	0x08019655
 8019640:	08019655 	.word	0x08019655
 8019644:	08019655 	.word	0x08019655
 8019648:	08019655 	.word	0x08019655
 801964c:	08019655 	.word	0x08019655
 8019650:	08019655 	.word	0x08019655
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019654:	bf00      	nop
  }

  return (USBD_OK);
 8019656:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019658:	4618      	mov	r0, r3
 801965a:	370c      	adds	r7, #12
 801965c:	46bd      	mov	sp, r7
 801965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019662:	4770      	bx	lr

08019664 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b082      	sub	sp, #8
 8019668:	af00      	add	r7, sp, #0
 801966a:	6078      	str	r0, [r7, #4]
 801966c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if(*Len == 6){
 801966e:	683b      	ldr	r3, [r7, #0]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	2b06      	cmp	r3, #6
 8019674:	d133      	bne.n	80196de <CDC_Receive_FS+0x7a>
	  receivedMsgPacket.len = 6;
 8019676:	4b2a      	ldr	r3, [pc, #168]	; (8019720 <CDC_Receive_FS+0xbc>)
 8019678:	2206      	movs	r2, #6
 801967a:	701a      	strb	r2, [r3, #0]

	  receivedMsgPacket.buf[0] = Buf[0] - '0';
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	781b      	ldrb	r3, [r3, #0]
 8019680:	3b30      	subs	r3, #48	; 0x30
 8019682:	b2da      	uxtb	r2, r3
 8019684:	4b26      	ldr	r3, [pc, #152]	; (8019720 <CDC_Receive_FS+0xbc>)
 8019686:	705a      	strb	r2, [r3, #1]
	  receivedMsgPacket.buf[1] = Buf[1] - '0';
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	3301      	adds	r3, #1
 801968c:	781b      	ldrb	r3, [r3, #0]
 801968e:	3b30      	subs	r3, #48	; 0x30
 8019690:	b2da      	uxtb	r2, r3
 8019692:	4b23      	ldr	r3, [pc, #140]	; (8019720 <CDC_Receive_FS+0xbc>)
 8019694:	709a      	strb	r2, [r3, #2]
	  receivedMsgPacket.buf[2] = Buf[2] - '0';
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	3302      	adds	r3, #2
 801969a:	781b      	ldrb	r3, [r3, #0]
 801969c:	3b30      	subs	r3, #48	; 0x30
 801969e:	b2da      	uxtb	r2, r3
 80196a0:	4b1f      	ldr	r3, [pc, #124]	; (8019720 <CDC_Receive_FS+0xbc>)
 80196a2:	70da      	strb	r2, [r3, #3]
	  receivedMsgPacket.buf[3] = Buf[3] - '0';
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	3303      	adds	r3, #3
 80196a8:	781b      	ldrb	r3, [r3, #0]
 80196aa:	3b30      	subs	r3, #48	; 0x30
 80196ac:	b2da      	uxtb	r2, r3
 80196ae:	4b1c      	ldr	r3, [pc, #112]	; (8019720 <CDC_Receive_FS+0xbc>)
 80196b0:	711a      	strb	r2, [r3, #4]
	  receivedMsgPacket.buf[4] = Buf[4] - '0';
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	3304      	adds	r3, #4
 80196b6:	781b      	ldrb	r3, [r3, #0]
 80196b8:	3b30      	subs	r3, #48	; 0x30
 80196ba:	b2da      	uxtb	r2, r3
 80196bc:	4b18      	ldr	r3, [pc, #96]	; (8019720 <CDC_Receive_FS+0xbc>)
 80196be:	715a      	strb	r2, [r3, #5]
	  receivedMsgPacket.buf[5]  = Buf[5] - '0';
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	3305      	adds	r3, #5
 80196c4:	781b      	ldrb	r3, [r3, #0]
 80196c6:	3b30      	subs	r3, #48	; 0x30
 80196c8:	b2da      	uxtb	r2, r3
 80196ca:	4b15      	ldr	r3, [pc, #84]	; (8019720 <CDC_Receive_FS+0xbc>)
 80196cc:	719a      	strb	r2, [r3, #6]

	  osMessageQueuePut(msgPasssingUSB_QueueHandle, &receivedMsgPacket, 0, 0);
 80196ce:	4b15      	ldr	r3, [pc, #84]	; (8019724 <CDC_Receive_FS+0xc0>)
 80196d0:	6818      	ldr	r0, [r3, #0]
 80196d2:	2300      	movs	r3, #0
 80196d4:	2200      	movs	r2, #0
 80196d6:	4912      	ldr	r1, [pc, #72]	; (8019720 <CDC_Receive_FS+0xbc>)
 80196d8:	f7f7 fdf6 	bl	80112c8 <osMessageQueuePut>
 80196dc:	e013      	b.n	8019706 <CDC_Receive_FS+0xa2>

//	  APP_THREAD_SendCoapMsg(&logReceivedMessage, sizeof(struct LogMessage), &multicastAddr, "togLog", NO_ACK, OT_COAP_CODE_PUT, 1U);
  }
  else if(*Len == 4){
 80196de:	683b      	ldr	r3, [r7, #0]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	2b04      	cmp	r3, #4
 80196e4:	d10f      	bne.n	8019706 <CDC_Receive_FS+0xa2>
	  receivedMsgPacket.len = 1;
 80196e6:	4b0e      	ldr	r3, [pc, #56]	; (8019720 <CDC_Receive_FS+0xbc>)
 80196e8:	2201      	movs	r2, #1
 80196ea:	701a      	strb	r2, [r3, #0]

	  receivedMsgPacket.buf[0] = Buf[0] - '0';
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	781b      	ldrb	r3, [r3, #0]
 80196f0:	3b30      	subs	r3, #48	; 0x30
 80196f2:	b2da      	uxtb	r2, r3
 80196f4:	4b0a      	ldr	r3, [pc, #40]	; (8019720 <CDC_Receive_FS+0xbc>)
 80196f6:	705a      	strb	r2, [r3, #1]

	  osMessageQueuePut(msgPasssingUSB_QueueHandle, &receivedMsgPacket, 0, 0);
 80196f8:	4b0a      	ldr	r3, [pc, #40]	; (8019724 <CDC_Receive_FS+0xc0>)
 80196fa:	6818      	ldr	r0, [r3, #0]
 80196fc:	2300      	movs	r3, #0
 80196fe:	2200      	movs	r2, #0
 8019700:	4907      	ldr	r1, [pc, #28]	; (8019720 <CDC_Receive_FS+0xbc>)
 8019702:	f7f7 fde1 	bl	80112c8 <osMessageQueuePut>

//	  APP_THREAD_SendCoapMsg(&lightsSimpleReceivedMessage, sizeof(lightsSimpleReceivedMessage), &multicastAddr, "lightS", NO_ACK, OT_COAP_CODE_PUT, 1U);
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019706:	6879      	ldr	r1, [r7, #4]
 8019708:	4807      	ldr	r0, [pc, #28]	; (8019728 <CDC_Receive_FS+0xc4>)
 801970a:	f7fd fade 	bl	8016cca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801970e:	4806      	ldr	r0, [pc, #24]	; (8019728 <CDC_Receive_FS+0xc4>)
 8019710:	f7fd faef 	bl	8016cf2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019714:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019716:	4618      	mov	r0, r3
 8019718:	3708      	adds	r7, #8
 801971a:	46bd      	mov	sp, r7
 801971c:	bd80      	pop	{r7, pc}
 801971e:	bf00      	nop
 8019720:	20029cfc 	.word	0x20029cfc
 8019724:	20027c64 	.word	0x20027c64
 8019728:	20028a38 	.word	0x20028a38

0801972c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801972c:	b480      	push	{r7}
 801972e:	b083      	sub	sp, #12
 8019730:	af00      	add	r7, sp, #0
 8019732:	4603      	mov	r3, r0
 8019734:	6039      	str	r1, [r7, #0]
 8019736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8019738:	683b      	ldr	r3, [r7, #0]
 801973a:	2212      	movs	r2, #18
 801973c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801973e:	4b03      	ldr	r3, [pc, #12]	; (801974c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8019740:	4618      	mov	r0, r3
 8019742:	370c      	adds	r7, #12
 8019744:	46bd      	mov	sp, r7
 8019746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974a:	4770      	bx	lr
 801974c:	20000238 	.word	0x20000238

08019750 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019750:	b480      	push	{r7}
 8019752:	b083      	sub	sp, #12
 8019754:	af00      	add	r7, sp, #0
 8019756:	4603      	mov	r3, r0
 8019758:	6039      	str	r1, [r7, #0]
 801975a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801975c:	683b      	ldr	r3, [r7, #0]
 801975e:	2204      	movs	r2, #4
 8019760:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019762:	4b03      	ldr	r3, [pc, #12]	; (8019770 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8019764:	4618      	mov	r0, r3
 8019766:	370c      	adds	r7, #12
 8019768:	46bd      	mov	sp, r7
 801976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976e:	4770      	bx	lr
 8019770:	2000024c 	.word	0x2000024c

08019774 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019774:	b580      	push	{r7, lr}
 8019776:	b082      	sub	sp, #8
 8019778:	af00      	add	r7, sp, #0
 801977a:	4603      	mov	r3, r0
 801977c:	6039      	str	r1, [r7, #0]
 801977e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019780:	79fb      	ldrb	r3, [r7, #7]
 8019782:	2b00      	cmp	r3, #0
 8019784:	d105      	bne.n	8019792 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8019786:	683a      	ldr	r2, [r7, #0]
 8019788:	4907      	ldr	r1, [pc, #28]	; (80197a8 <USBD_CDC_ProductStrDescriptor+0x34>)
 801978a:	4808      	ldr	r0, [pc, #32]	; (80197ac <USBD_CDC_ProductStrDescriptor+0x38>)
 801978c:	f7fe fad0 	bl	8017d30 <USBD_GetString>
 8019790:	e004      	b.n	801979c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8019792:	683a      	ldr	r2, [r7, #0]
 8019794:	4904      	ldr	r1, [pc, #16]	; (80197a8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8019796:	4805      	ldr	r0, [pc, #20]	; (80197ac <USBD_CDC_ProductStrDescriptor+0x38>)
 8019798:	f7fe faca 	bl	8017d30 <USBD_GetString>
  }
  return USBD_StrDesc;
 801979c:	4b02      	ldr	r3, [pc, #8]	; (80197a8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801979e:	4618      	mov	r0, r3
 80197a0:	3708      	adds	r7, #8
 80197a2:	46bd      	mov	sp, r7
 80197a4:	bd80      	pop	{r7, pc}
 80197a6:	bf00      	nop
 80197a8:	20029d08 	.word	0x20029d08
 80197ac:	0801bcac 	.word	0x0801bcac

080197b0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b082      	sub	sp, #8
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	4603      	mov	r3, r0
 80197b8:	6039      	str	r1, [r7, #0]
 80197ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80197bc:	683a      	ldr	r2, [r7, #0]
 80197be:	4904      	ldr	r1, [pc, #16]	; (80197d0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80197c0:	4804      	ldr	r0, [pc, #16]	; (80197d4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80197c2:	f7fe fab5 	bl	8017d30 <USBD_GetString>
  return USBD_StrDesc;
 80197c6:	4b02      	ldr	r3, [pc, #8]	; (80197d0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80197c8:	4618      	mov	r0, r3
 80197ca:	3708      	adds	r7, #8
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bd80      	pop	{r7, pc}
 80197d0:	20029d08 	.word	0x20029d08
 80197d4:	0801bcc4 	.word	0x0801bcc4

080197d8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b082      	sub	sp, #8
 80197dc:	af00      	add	r7, sp, #0
 80197de:	4603      	mov	r3, r0
 80197e0:	6039      	str	r1, [r7, #0]
 80197e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80197e4:	683b      	ldr	r3, [r7, #0]
 80197e6:	221a      	movs	r2, #26
 80197e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80197ea:	f000 f843 	bl	8019874 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80197ee:	4b02      	ldr	r3, [pc, #8]	; (80197f8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80197f0:	4618      	mov	r0, r3
 80197f2:	3708      	adds	r7, #8
 80197f4:	46bd      	mov	sp, r7
 80197f6:	bd80      	pop	{r7, pc}
 80197f8:	20000250 	.word	0x20000250

080197fc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80197fc:	b580      	push	{r7, lr}
 80197fe:	b082      	sub	sp, #8
 8019800:	af00      	add	r7, sp, #0
 8019802:	4603      	mov	r3, r0
 8019804:	6039      	str	r1, [r7, #0]
 8019806:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019808:	79fb      	ldrb	r3, [r7, #7]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d105      	bne.n	801981a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801980e:	683a      	ldr	r2, [r7, #0]
 8019810:	4907      	ldr	r1, [pc, #28]	; (8019830 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8019812:	4808      	ldr	r0, [pc, #32]	; (8019834 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8019814:	f7fe fa8c 	bl	8017d30 <USBD_GetString>
 8019818:	e004      	b.n	8019824 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801981a:	683a      	ldr	r2, [r7, #0]
 801981c:	4904      	ldr	r1, [pc, #16]	; (8019830 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801981e:	4805      	ldr	r0, [pc, #20]	; (8019834 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8019820:	f7fe fa86 	bl	8017d30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019824:	4b02      	ldr	r3, [pc, #8]	; (8019830 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8019826:	4618      	mov	r0, r3
 8019828:	3708      	adds	r7, #8
 801982a:	46bd      	mov	sp, r7
 801982c:	bd80      	pop	{r7, pc}
 801982e:	bf00      	nop
 8019830:	20029d08 	.word	0x20029d08
 8019834:	0801bcd8 	.word	0x0801bcd8

08019838 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b082      	sub	sp, #8
 801983c:	af00      	add	r7, sp, #0
 801983e:	4603      	mov	r3, r0
 8019840:	6039      	str	r1, [r7, #0]
 8019842:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019844:	79fb      	ldrb	r3, [r7, #7]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d105      	bne.n	8019856 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801984a:	683a      	ldr	r2, [r7, #0]
 801984c:	4907      	ldr	r1, [pc, #28]	; (801986c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801984e:	4808      	ldr	r0, [pc, #32]	; (8019870 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8019850:	f7fe fa6e 	bl	8017d30 <USBD_GetString>
 8019854:	e004      	b.n	8019860 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8019856:	683a      	ldr	r2, [r7, #0]
 8019858:	4904      	ldr	r1, [pc, #16]	; (801986c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801985a:	4805      	ldr	r0, [pc, #20]	; (8019870 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801985c:	f7fe fa68 	bl	8017d30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019860:	4b02      	ldr	r3, [pc, #8]	; (801986c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8019862:	4618      	mov	r0, r3
 8019864:	3708      	adds	r7, #8
 8019866:	46bd      	mov	sp, r7
 8019868:	bd80      	pop	{r7, pc}
 801986a:	bf00      	nop
 801986c:	20029d08 	.word	0x20029d08
 8019870:	0801bce4 	.word	0x0801bce4

08019874 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019874:	b580      	push	{r7, lr}
 8019876:	b084      	sub	sp, #16
 8019878:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801987a:	4b0f      	ldr	r3, [pc, #60]	; (80198b8 <Get_SerialNum+0x44>)
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019880:	4b0e      	ldr	r3, [pc, #56]	; (80198bc <Get_SerialNum+0x48>)
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019886:	4b0e      	ldr	r3, [pc, #56]	; (80198c0 <Get_SerialNum+0x4c>)
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801988c:	68fa      	ldr	r2, [r7, #12]
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	4413      	add	r3, r2
 8019892:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d009      	beq.n	80198ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801989a:	2208      	movs	r2, #8
 801989c:	4909      	ldr	r1, [pc, #36]	; (80198c4 <Get_SerialNum+0x50>)
 801989e:	68f8      	ldr	r0, [r7, #12]
 80198a0:	f000 f814 	bl	80198cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80198a4:	2204      	movs	r2, #4
 80198a6:	4908      	ldr	r1, [pc, #32]	; (80198c8 <Get_SerialNum+0x54>)
 80198a8:	68b8      	ldr	r0, [r7, #8]
 80198aa:	f000 f80f 	bl	80198cc <IntToUnicode>
  }
}
 80198ae:	bf00      	nop
 80198b0:	3710      	adds	r7, #16
 80198b2:	46bd      	mov	sp, r7
 80198b4:	bd80      	pop	{r7, pc}
 80198b6:	bf00      	nop
 80198b8:	1fff7590 	.word	0x1fff7590
 80198bc:	1fff7594 	.word	0x1fff7594
 80198c0:	1fff7598 	.word	0x1fff7598
 80198c4:	20000252 	.word	0x20000252
 80198c8:	20000262 	.word	0x20000262

080198cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80198cc:	b480      	push	{r7}
 80198ce:	b087      	sub	sp, #28
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	60f8      	str	r0, [r7, #12]
 80198d4:	60b9      	str	r1, [r7, #8]
 80198d6:	4613      	mov	r3, r2
 80198d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80198da:	2300      	movs	r3, #0
 80198dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80198de:	2300      	movs	r3, #0
 80198e0:	75fb      	strb	r3, [r7, #23]
 80198e2:	e027      	b.n	8019934 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	0f1b      	lsrs	r3, r3, #28
 80198e8:	2b09      	cmp	r3, #9
 80198ea:	d80b      	bhi.n	8019904 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	0f1b      	lsrs	r3, r3, #28
 80198f0:	b2da      	uxtb	r2, r3
 80198f2:	7dfb      	ldrb	r3, [r7, #23]
 80198f4:	005b      	lsls	r3, r3, #1
 80198f6:	4619      	mov	r1, r3
 80198f8:	68bb      	ldr	r3, [r7, #8]
 80198fa:	440b      	add	r3, r1
 80198fc:	3230      	adds	r2, #48	; 0x30
 80198fe:	b2d2      	uxtb	r2, r2
 8019900:	701a      	strb	r2, [r3, #0]
 8019902:	e00a      	b.n	801991a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	0f1b      	lsrs	r3, r3, #28
 8019908:	b2da      	uxtb	r2, r3
 801990a:	7dfb      	ldrb	r3, [r7, #23]
 801990c:	005b      	lsls	r3, r3, #1
 801990e:	4619      	mov	r1, r3
 8019910:	68bb      	ldr	r3, [r7, #8]
 8019912:	440b      	add	r3, r1
 8019914:	3237      	adds	r2, #55	; 0x37
 8019916:	b2d2      	uxtb	r2, r2
 8019918:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	011b      	lsls	r3, r3, #4
 801991e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019920:	7dfb      	ldrb	r3, [r7, #23]
 8019922:	005b      	lsls	r3, r3, #1
 8019924:	3301      	adds	r3, #1
 8019926:	68ba      	ldr	r2, [r7, #8]
 8019928:	4413      	add	r3, r2
 801992a:	2200      	movs	r2, #0
 801992c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801992e:	7dfb      	ldrb	r3, [r7, #23]
 8019930:	3301      	adds	r3, #1
 8019932:	75fb      	strb	r3, [r7, #23]
 8019934:	7dfa      	ldrb	r2, [r7, #23]
 8019936:	79fb      	ldrb	r3, [r7, #7]
 8019938:	429a      	cmp	r2, r3
 801993a:	d3d3      	bcc.n	80198e4 <IntToUnicode+0x18>
  }
}
 801993c:	bf00      	nop
 801993e:	371c      	adds	r7, #28
 8019940:	46bd      	mov	sp, r7
 8019942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019946:	4770      	bx	lr

08019948 <LL_AHB2_GRP1_EnableClock>:
{
 8019948:	b480      	push	{r7}
 801994a:	b085      	sub	sp, #20
 801994c:	af00      	add	r7, sp, #0
 801994e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8019950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	4313      	orrs	r3, r2
 801995e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8019960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019964:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	4013      	ands	r3, r2
 801996a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801996c:	68fb      	ldr	r3, [r7, #12]
}
 801996e:	bf00      	nop
 8019970:	3714      	adds	r7, #20
 8019972:	46bd      	mov	sp, r7
 8019974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019978:	4770      	bx	lr

0801997a <LL_APB1_GRP1_EnableClock>:
{
 801997a:	b480      	push	{r7}
 801997c:	b085      	sub	sp, #20
 801997e:	af00      	add	r7, sp, #0
 8019980:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8019982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019986:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	4313      	orrs	r3, r2
 8019990:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8019992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019996:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	4013      	ands	r3, r2
 801999c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801999e:	68fb      	ldr	r3, [r7, #12]
}
 80199a0:	bf00      	nop
 80199a2:	3714      	adds	r7, #20
 80199a4:	46bd      	mov	sp, r7
 80199a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199aa:	4770      	bx	lr

080199ac <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b088      	sub	sp, #32
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80199b4:	f107 030c 	add.w	r3, r7, #12
 80199b8:	2200      	movs	r2, #0
 80199ba:	601a      	str	r2, [r3, #0]
 80199bc:	605a      	str	r2, [r3, #4]
 80199be:	609a      	str	r2, [r3, #8]
 80199c0:	60da      	str	r2, [r3, #12]
 80199c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	4a13      	ldr	r2, [pc, #76]	; (8019a18 <HAL_PCD_MspInit+0x6c>)
 80199ca:	4293      	cmp	r3, r2
 80199cc:	d120      	bne.n	8019a10 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80199ce:	2001      	movs	r0, #1
 80199d0:	f7ff ffba 	bl	8019948 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80199d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80199d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80199da:	2302      	movs	r3, #2
 80199dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80199de:	2300      	movs	r3, #0
 80199e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80199e2:	2300      	movs	r3, #0
 80199e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80199e6:	230a      	movs	r3, #10
 80199e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80199ea:	f107 030c 	add.w	r3, r7, #12
 80199ee:	4619      	mov	r1, r3
 80199f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80199f4:	f7ef f8e4 	bl	8008bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80199f8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80199fc:	f7ff ffbd 	bl	801997a <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8019a00:	2200      	movs	r2, #0
 8019a02:	2105      	movs	r1, #5
 8019a04:	2014      	movs	r0, #20
 8019a06:	f7ee fd54 	bl	80084b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8019a0a:	2014      	movs	r0, #20
 8019a0c:	f7ee fd6b 	bl	80084e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8019a10:	bf00      	nop
 8019a12:	3720      	adds	r7, #32
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd80      	pop	{r7, pc}
 8019a18:	40006800 	.word	0x40006800

08019a1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b082      	sub	sp, #8
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8019a30:	4619      	mov	r1, r3
 8019a32:	4610      	mov	r0, r2
 8019a34:	f7fd fa2b 	bl	8016e8e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8019a38:	bf00      	nop
 8019a3a:	3708      	adds	r7, #8
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	bd80      	pop	{r7, pc}

08019a40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b082      	sub	sp, #8
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
 8019a48:	460b      	mov	r3, r1
 8019a4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8019a52:	78fb      	ldrb	r3, [r7, #3]
 8019a54:	687a      	ldr	r2, [r7, #4]
 8019a56:	015b      	lsls	r3, r3, #5
 8019a58:	4413      	add	r3, r2
 8019a5a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8019a5e:	681a      	ldr	r2, [r3, #0]
 8019a60:	78fb      	ldrb	r3, [r7, #3]
 8019a62:	4619      	mov	r1, r3
 8019a64:	f7fd fa5e 	bl	8016f24 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8019a68:	bf00      	nop
 8019a6a:	3708      	adds	r7, #8
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	bd80      	pop	{r7, pc}

08019a70 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b082      	sub	sp, #8
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	6078      	str	r0, [r7, #4]
 8019a78:	460b      	mov	r3, r1
 8019a7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8019a82:	78fb      	ldrb	r3, [r7, #3]
 8019a84:	687a      	ldr	r2, [r7, #4]
 8019a86:	015b      	lsls	r3, r3, #5
 8019a88:	4413      	add	r3, r2
 8019a8a:	333c      	adds	r3, #60	; 0x3c
 8019a8c:	681a      	ldr	r2, [r3, #0]
 8019a8e:	78fb      	ldrb	r3, [r7, #3]
 8019a90:	4619      	mov	r1, r3
 8019a92:	f7fd fab8 	bl	8017006 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8019a96:	bf00      	nop
 8019a98:	3708      	adds	r7, #8
 8019a9a:	46bd      	mov	sp, r7
 8019a9c:	bd80      	pop	{r7, pc}

08019a9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019a9e:	b580      	push	{r7, lr}
 8019aa0:	b082      	sub	sp, #8
 8019aa2:	af00      	add	r7, sp, #0
 8019aa4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019aac:	4618      	mov	r0, r3
 8019aae:	f7fd fbcb 	bl	8017248 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8019ab2:	bf00      	nop
 8019ab4:	3708      	adds	r7, #8
 8019ab6:	46bd      	mov	sp, r7
 8019ab8:	bd80      	pop	{r7, pc}

08019aba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8019aba:	b580      	push	{r7, lr}
 8019abc:	b084      	sub	sp, #16
 8019abe:	af00      	add	r7, sp, #0
 8019ac0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019ac2:	2301      	movs	r3, #1
 8019ac4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	689b      	ldr	r3, [r3, #8]
 8019aca:	2b02      	cmp	r3, #2
 8019acc:	d001      	beq.n	8019ad2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8019ace:	f7ea fd5f 	bl	8004590 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019ad8:	7bfa      	ldrb	r2, [r7, #15]
 8019ada:	4611      	mov	r1, r2
 8019adc:	4618      	mov	r0, r3
 8019ade:	f7fd fb78 	bl	80171d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019ae8:	4618      	mov	r0, r3
 8019aea:	f7fd fb31 	bl	8017150 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8019aee:	bf00      	nop
 8019af0:	3710      	adds	r7, #16
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bd80      	pop	{r7, pc}
	...

08019af8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019af8:	b580      	push	{r7, lr}
 8019afa:	b082      	sub	sp, #8
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019b06:	4618      	mov	r0, r3
 8019b08:	f7fd fb73 	bl	80171f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	699b      	ldr	r3, [r3, #24]
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d005      	beq.n	8019b20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019b14:	4b04      	ldr	r3, [pc, #16]	; (8019b28 <HAL_PCD_SuspendCallback+0x30>)
 8019b16:	691b      	ldr	r3, [r3, #16]
 8019b18:	4a03      	ldr	r2, [pc, #12]	; (8019b28 <HAL_PCD_SuspendCallback+0x30>)
 8019b1a:	f043 0306 	orr.w	r3, r3, #6
 8019b1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8019b20:	bf00      	nop
 8019b22:	3708      	adds	r7, #8
 8019b24:	46bd      	mov	sp, r7
 8019b26:	bd80      	pop	{r7, pc}
 8019b28:	e000ed00 	.word	0xe000ed00

08019b2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b082      	sub	sp, #8
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	699b      	ldr	r3, [r3, #24]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d007      	beq.n	8019b4c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019b3c:	4b08      	ldr	r3, [pc, #32]	; (8019b60 <HAL_PCD_ResumeCallback+0x34>)
 8019b3e:	691b      	ldr	r3, [r3, #16]
 8019b40:	4a07      	ldr	r2, [pc, #28]	; (8019b60 <HAL_PCD_ResumeCallback+0x34>)
 8019b42:	f023 0306 	bic.w	r3, r3, #6
 8019b46:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019b48:	f000 fa14 	bl	8019f74 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019b52:	4618      	mov	r0, r3
 8019b54:	f7fd fb62 	bl	801721c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8019b58:	bf00      	nop
 8019b5a:	3708      	adds	r7, #8
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	bd80      	pop	{r7, pc}
 8019b60:	e000ed00 	.word	0xe000ed00

08019b64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b082      	sub	sp, #8
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8019b6c:	4a2c      	ldr	r2, [pc, #176]	; (8019c20 <USBD_LL_Init+0xbc>)
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	4a2a      	ldr	r2, [pc, #168]	; (8019c20 <USBD_LL_Init+0xbc>)
 8019b78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8019b7c:	f7f2 f8ce 	bl	800bd1c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8019b80:	4b27      	ldr	r3, [pc, #156]	; (8019c20 <USBD_LL_Init+0xbc>)
 8019b82:	4a28      	ldr	r2, [pc, #160]	; (8019c24 <USBD_LL_Init+0xc0>)
 8019b84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8019b86:	4b26      	ldr	r3, [pc, #152]	; (8019c20 <USBD_LL_Init+0xbc>)
 8019b88:	2208      	movs	r2, #8
 8019b8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8019b8c:	4b24      	ldr	r3, [pc, #144]	; (8019c20 <USBD_LL_Init+0xbc>)
 8019b8e:	2202      	movs	r2, #2
 8019b90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019b92:	4b23      	ldr	r3, [pc, #140]	; (8019c20 <USBD_LL_Init+0xbc>)
 8019b94:	2202      	movs	r2, #2
 8019b96:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8019b98:	4b21      	ldr	r3, [pc, #132]	; (8019c20 <USBD_LL_Init+0xbc>)
 8019b9a:	2200      	movs	r2, #0
 8019b9c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8019b9e:	4b20      	ldr	r3, [pc, #128]	; (8019c20 <USBD_LL_Init+0xbc>)
 8019ba0:	2200      	movs	r2, #0
 8019ba2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8019ba4:	4b1e      	ldr	r3, [pc, #120]	; (8019c20 <USBD_LL_Init+0xbc>)
 8019ba6:	2200      	movs	r2, #0
 8019ba8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8019baa:	4b1d      	ldr	r3, [pc, #116]	; (8019c20 <USBD_LL_Init+0xbc>)
 8019bac:	2200      	movs	r2, #0
 8019bae:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8019bb0:	481b      	ldr	r0, [pc, #108]	; (8019c20 <USBD_LL_Init+0xbc>)
 8019bb2:	f7f1 f955 	bl	800ae60 <HAL_PCD_Init>
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d001      	beq.n	8019bc0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8019bbc:	f7ea fce8 	bl	8004590 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019bc6:	2318      	movs	r3, #24
 8019bc8:	2200      	movs	r2, #0
 8019bca:	2100      	movs	r1, #0
 8019bcc:	f7f2 f820 	bl	800bc10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019bd6:	2358      	movs	r3, #88	; 0x58
 8019bd8:	2200      	movs	r2, #0
 8019bda:	2180      	movs	r1, #128	; 0x80
 8019bdc:	f7f2 f818 	bl	800bc10 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019be6:	23c0      	movs	r3, #192	; 0xc0
 8019be8:	2200      	movs	r2, #0
 8019bea:	2181      	movs	r1, #129	; 0x81
 8019bec:	f7f2 f810 	bl	800bc10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019bf6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019bfa:	2200      	movs	r2, #0
 8019bfc:	2101      	movs	r1, #1
 8019bfe:	f7f2 f807 	bl	800bc10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019c0c:	2200      	movs	r2, #0
 8019c0e:	2182      	movs	r1, #130	; 0x82
 8019c10:	f7f1 fffe 	bl	800bc10 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8019c14:	2300      	movs	r3, #0
}
 8019c16:	4618      	mov	r0, r3
 8019c18:	3708      	adds	r7, #8
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	bd80      	pop	{r7, pc}
 8019c1e:	bf00      	nop
 8019c20:	20029f08 	.word	0x20029f08
 8019c24:	40006800 	.word	0x40006800

08019c28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	b084      	sub	sp, #16
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c30:	2300      	movs	r3, #0
 8019c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c34:	2300      	movs	r3, #0
 8019c36:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f7f1 f9c9 	bl	800afd6 <HAL_PCD_Start>
 8019c44:	4603      	mov	r3, r0
 8019c46:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019c48:	7bfb      	ldrb	r3, [r7, #15]
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f000 f998 	bl	8019f80 <USBD_Get_USB_Status>
 8019c50:	4603      	mov	r3, r0
 8019c52:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c56:	4618      	mov	r0, r3
 8019c58:	3710      	adds	r7, #16
 8019c5a:	46bd      	mov	sp, r7
 8019c5c:	bd80      	pop	{r7, pc}

08019c5e <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8019c5e:	b580      	push	{r7, lr}
 8019c60:	b084      	sub	sp, #16
 8019c62:	af00      	add	r7, sp, #0
 8019c64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c66:	2300      	movs	r3, #0
 8019c68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c6a:	2300      	movs	r3, #0
 8019c6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019c74:	4618      	mov	r0, r3
 8019c76:	f7f1 f9d0 	bl	800b01a <HAL_PCD_Stop>
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019c7e:	7bfb      	ldrb	r3, [r7, #15]
 8019c80:	4618      	mov	r0, r3
 8019c82:	f000 f97d 	bl	8019f80 <USBD_Get_USB_Status>
 8019c86:	4603      	mov	r3, r0
 8019c88:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c8c:	4618      	mov	r0, r3
 8019c8e:	3710      	adds	r7, #16
 8019c90:	46bd      	mov	sp, r7
 8019c92:	bd80      	pop	{r7, pc}

08019c94 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019c94:	b580      	push	{r7, lr}
 8019c96:	b084      	sub	sp, #16
 8019c98:	af00      	add	r7, sp, #0
 8019c9a:	6078      	str	r0, [r7, #4]
 8019c9c:	4608      	mov	r0, r1
 8019c9e:	4611      	mov	r1, r2
 8019ca0:	461a      	mov	r2, r3
 8019ca2:	4603      	mov	r3, r0
 8019ca4:	70fb      	strb	r3, [r7, #3]
 8019ca6:	460b      	mov	r3, r1
 8019ca8:	70bb      	strb	r3, [r7, #2]
 8019caa:	4613      	mov	r3, r2
 8019cac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019cae:	2300      	movs	r3, #0
 8019cb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019cbc:	78bb      	ldrb	r3, [r7, #2]
 8019cbe:	883a      	ldrh	r2, [r7, #0]
 8019cc0:	78f9      	ldrb	r1, [r7, #3]
 8019cc2:	f7f1 fb4a 	bl	800b35a <HAL_PCD_EP_Open>
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019cca:	7bfb      	ldrb	r3, [r7, #15]
 8019ccc:	4618      	mov	r0, r3
 8019cce:	f000 f957 	bl	8019f80 <USBD_Get_USB_Status>
 8019cd2:	4603      	mov	r3, r0
 8019cd4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8019cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8019cd8:	4618      	mov	r0, r3
 8019cda:	3710      	adds	r7, #16
 8019cdc:	46bd      	mov	sp, r7
 8019cde:	bd80      	pop	{r7, pc}

08019ce0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b084      	sub	sp, #16
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	6078      	str	r0, [r7, #4]
 8019ce8:	460b      	mov	r3, r1
 8019cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019cec:	2300      	movs	r3, #0
 8019cee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019cf0:	2300      	movs	r3, #0
 8019cf2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019cfa:	78fa      	ldrb	r2, [r7, #3]
 8019cfc:	4611      	mov	r1, r2
 8019cfe:	4618      	mov	r0, r3
 8019d00:	f7f1 fb8b 	bl	800b41a <HAL_PCD_EP_Close>
 8019d04:	4603      	mov	r3, r0
 8019d06:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019d08:	7bfb      	ldrb	r3, [r7, #15]
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	f000 f938 	bl	8019f80 <USBD_Get_USB_Status>
 8019d10:	4603      	mov	r3, r0
 8019d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8019d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8019d16:	4618      	mov	r0, r3
 8019d18:	3710      	adds	r7, #16
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	bd80      	pop	{r7, pc}

08019d1e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019d1e:	b580      	push	{r7, lr}
 8019d20:	b084      	sub	sp, #16
 8019d22:	af00      	add	r7, sp, #0
 8019d24:	6078      	str	r0, [r7, #4]
 8019d26:	460b      	mov	r3, r1
 8019d28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d2e:	2300      	movs	r3, #0
 8019d30:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019d38:	78fa      	ldrb	r2, [r7, #3]
 8019d3a:	4611      	mov	r1, r2
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	f7f1 fc36 	bl	800b5ae <HAL_PCD_EP_SetStall>
 8019d42:	4603      	mov	r3, r0
 8019d44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019d46:	7bfb      	ldrb	r3, [r7, #15]
 8019d48:	4618      	mov	r0, r3
 8019d4a:	f000 f919 	bl	8019f80 <USBD_Get_USB_Status>
 8019d4e:	4603      	mov	r3, r0
 8019d50:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8019d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8019d54:	4618      	mov	r0, r3
 8019d56:	3710      	adds	r7, #16
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bd80      	pop	{r7, pc}

08019d5c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	b084      	sub	sp, #16
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	6078      	str	r0, [r7, #4]
 8019d64:	460b      	mov	r3, r1
 8019d66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d68:	2300      	movs	r3, #0
 8019d6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d6c:	2300      	movs	r3, #0
 8019d6e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019d76:	78fa      	ldrb	r2, [r7, #3]
 8019d78:	4611      	mov	r1, r2
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	f7f1 fc71 	bl	800b662 <HAL_PCD_EP_ClrStall>
 8019d80:	4603      	mov	r3, r0
 8019d82:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019d84:	7bfb      	ldrb	r3, [r7, #15]
 8019d86:	4618      	mov	r0, r3
 8019d88:	f000 f8fa 	bl	8019f80 <USBD_Get_USB_Status>
 8019d8c:	4603      	mov	r3, r0
 8019d8e:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8019d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8019d92:	4618      	mov	r0, r3
 8019d94:	3710      	adds	r7, #16
 8019d96:	46bd      	mov	sp, r7
 8019d98:	bd80      	pop	{r7, pc}

08019d9a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019d9a:	b480      	push	{r7}
 8019d9c:	b085      	sub	sp, #20
 8019d9e:	af00      	add	r7, sp, #0
 8019da0:	6078      	str	r0, [r7, #4]
 8019da2:	460b      	mov	r3, r1
 8019da4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019dac:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8019dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	da08      	bge.n	8019dc8 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8019db6:	78fb      	ldrb	r3, [r7, #3]
 8019db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019dbc:	68fa      	ldr	r2, [r7, #12]
 8019dbe:	015b      	lsls	r3, r3, #5
 8019dc0:	4413      	add	r3, r2
 8019dc2:	332a      	adds	r3, #42	; 0x2a
 8019dc4:	781b      	ldrb	r3, [r3, #0]
 8019dc6:	e008      	b.n	8019dda <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8019dc8:	78fb      	ldrb	r3, [r7, #3]
 8019dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019dce:	68fa      	ldr	r2, [r7, #12]
 8019dd0:	015b      	lsls	r3, r3, #5
 8019dd2:	4413      	add	r3, r2
 8019dd4:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8019dd8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019dda:	4618      	mov	r0, r3
 8019ddc:	3714      	adds	r7, #20
 8019dde:	46bd      	mov	sp, r7
 8019de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019de4:	4770      	bx	lr

08019de6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019de6:	b580      	push	{r7, lr}
 8019de8:	b084      	sub	sp, #16
 8019dea:	af00      	add	r7, sp, #0
 8019dec:	6078      	str	r0, [r7, #4]
 8019dee:	460b      	mov	r3, r1
 8019df0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019df2:	2300      	movs	r3, #0
 8019df4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019df6:	2300      	movs	r3, #0
 8019df8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019e00:	78fa      	ldrb	r2, [r7, #3]
 8019e02:	4611      	mov	r1, r2
 8019e04:	4618      	mov	r0, r3
 8019e06:	f7f1 fa83 	bl	800b310 <HAL_PCD_SetAddress>
 8019e0a:	4603      	mov	r3, r0
 8019e0c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019e0e:	7bfb      	ldrb	r3, [r7, #15]
 8019e10:	4618      	mov	r0, r3
 8019e12:	f000 f8b5 	bl	8019f80 <USBD_Get_USB_Status>
 8019e16:	4603      	mov	r3, r0
 8019e18:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8019e1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	3710      	adds	r7, #16
 8019e20:	46bd      	mov	sp, r7
 8019e22:	bd80      	pop	{r7, pc}

08019e24 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b086      	sub	sp, #24
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	60f8      	str	r0, [r7, #12]
 8019e2c:	607a      	str	r2, [r7, #4]
 8019e2e:	461a      	mov	r2, r3
 8019e30:	460b      	mov	r3, r1
 8019e32:	72fb      	strb	r3, [r7, #11]
 8019e34:	4613      	mov	r3, r2
 8019e36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e38:	2300      	movs	r3, #0
 8019e3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e3c:	2300      	movs	r3, #0
 8019e3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019e40:	68fb      	ldr	r3, [r7, #12]
 8019e42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019e46:	893b      	ldrh	r3, [r7, #8]
 8019e48:	7af9      	ldrb	r1, [r7, #11]
 8019e4a:	687a      	ldr	r2, [r7, #4]
 8019e4c:	f7f1 fb76 	bl	800b53c <HAL_PCD_EP_Transmit>
 8019e50:	4603      	mov	r3, r0
 8019e52:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019e54:	7dfb      	ldrb	r3, [r7, #23]
 8019e56:	4618      	mov	r0, r3
 8019e58:	f000 f892 	bl	8019f80 <USBD_Get_USB_Status>
 8019e5c:	4603      	mov	r3, r0
 8019e5e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8019e60:	7dbb      	ldrb	r3, [r7, #22]
}
 8019e62:	4618      	mov	r0, r3
 8019e64:	3718      	adds	r7, #24
 8019e66:	46bd      	mov	sp, r7
 8019e68:	bd80      	pop	{r7, pc}

08019e6a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019e6a:	b580      	push	{r7, lr}
 8019e6c:	b086      	sub	sp, #24
 8019e6e:	af00      	add	r7, sp, #0
 8019e70:	60f8      	str	r0, [r7, #12]
 8019e72:	607a      	str	r2, [r7, #4]
 8019e74:	461a      	mov	r2, r3
 8019e76:	460b      	mov	r3, r1
 8019e78:	72fb      	strb	r3, [r7, #11]
 8019e7a:	4613      	mov	r3, r2
 8019e7c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e7e:	2300      	movs	r3, #0
 8019e80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e82:	2300      	movs	r3, #0
 8019e84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019e8c:	893b      	ldrh	r3, [r7, #8]
 8019e8e:	7af9      	ldrb	r1, [r7, #11]
 8019e90:	687a      	ldr	r2, [r7, #4]
 8019e92:	f7f1 fb04 	bl	800b49e <HAL_PCD_EP_Receive>
 8019e96:	4603      	mov	r3, r0
 8019e98:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019e9a:	7dfb      	ldrb	r3, [r7, #23]
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f000 f86f 	bl	8019f80 <USBD_Get_USB_Status>
 8019ea2:	4603      	mov	r3, r0
 8019ea4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8019ea6:	7dbb      	ldrb	r3, [r7, #22]
}
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	3718      	adds	r7, #24
 8019eac:	46bd      	mov	sp, r7
 8019eae:	bd80      	pop	{r7, pc}

08019eb0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	b082      	sub	sp, #8
 8019eb4:	af00      	add	r7, sp, #0
 8019eb6:	6078      	str	r0, [r7, #4]
 8019eb8:	460b      	mov	r3, r1
 8019eba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019ec2:	78fa      	ldrb	r2, [r7, #3]
 8019ec4:	4611      	mov	r1, r2
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f7f1 fb23 	bl	800b512 <HAL_PCD_EP_GetRxCount>
 8019ecc:	4603      	mov	r3, r0
}
 8019ece:	4618      	mov	r0, r3
 8019ed0:	3708      	adds	r7, #8
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	bd80      	pop	{r7, pc}
	...

08019ed8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	b082      	sub	sp, #8
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	6078      	str	r0, [r7, #4]
 8019ee0:	460b      	mov	r3, r1
 8019ee2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8019ee4:	78fb      	ldrb	r3, [r7, #3]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d002      	beq.n	8019ef0 <HAL_PCDEx_LPM_Callback+0x18>
 8019eea:	2b01      	cmp	r3, #1
 8019eec:	d013      	beq.n	8019f16 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 8019eee:	e023      	b.n	8019f38 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	699b      	ldr	r3, [r3, #24]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d007      	beq.n	8019f08 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019ef8:	f000 f83c 	bl	8019f74 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019efc:	4b10      	ldr	r3, [pc, #64]	; (8019f40 <HAL_PCDEx_LPM_Callback+0x68>)
 8019efe:	691b      	ldr	r3, [r3, #16]
 8019f00:	4a0f      	ldr	r2, [pc, #60]	; (8019f40 <HAL_PCDEx_LPM_Callback+0x68>)
 8019f02:	f023 0306 	bic.w	r3, r3, #6
 8019f06:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f7fd f984 	bl	801721c <USBD_LL_Resume>
    break;
 8019f14:	e010      	b.n	8019f38 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	f7fd f968 	bl	80171f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	699b      	ldr	r3, [r3, #24]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d005      	beq.n	8019f36 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019f2a:	4b05      	ldr	r3, [pc, #20]	; (8019f40 <HAL_PCDEx_LPM_Callback+0x68>)
 8019f2c:	691b      	ldr	r3, [r3, #16]
 8019f2e:	4a04      	ldr	r2, [pc, #16]	; (8019f40 <HAL_PCDEx_LPM_Callback+0x68>)
 8019f30:	f043 0306 	orr.w	r3, r3, #6
 8019f34:	6113      	str	r3, [r2, #16]
    break;   
 8019f36:	bf00      	nop
}
 8019f38:	bf00      	nop
 8019f3a:	3708      	adds	r7, #8
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	bd80      	pop	{r7, pc}
 8019f40:	e000ed00 	.word	0xe000ed00

08019f44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019f44:	b480      	push	{r7}
 8019f46:	b083      	sub	sp, #12
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019f4c:	4b03      	ldr	r3, [pc, #12]	; (8019f5c <USBD_static_malloc+0x18>)
}
 8019f4e:	4618      	mov	r0, r3
 8019f50:	370c      	adds	r7, #12
 8019f52:	46bd      	mov	sp, r7
 8019f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f58:	4770      	bx	lr
 8019f5a:	bf00      	nop
 8019f5c:	2002786c 	.word	0x2002786c

08019f60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019f60:	b480      	push	{r7}
 8019f62:	b083      	sub	sp, #12
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]

}
 8019f68:	bf00      	nop
 8019f6a:	370c      	adds	r7, #12
 8019f6c:	46bd      	mov	sp, r7
 8019f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f72:	4770      	bx	lr

08019f74 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019f74:	b580      	push	{r7, lr}
 8019f76:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019f78:	f7ea fa52 	bl	8004420 <SystemClock_Config>
}
 8019f7c:	bf00      	nop
 8019f7e:	bd80      	pop	{r7, pc}

08019f80 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019f80:	b480      	push	{r7}
 8019f82:	b085      	sub	sp, #20
 8019f84:	af00      	add	r7, sp, #0
 8019f86:	4603      	mov	r3, r0
 8019f88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f8a:	2300      	movs	r3, #0
 8019f8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019f8e:	79fb      	ldrb	r3, [r7, #7]
 8019f90:	2b03      	cmp	r3, #3
 8019f92:	d817      	bhi.n	8019fc4 <USBD_Get_USB_Status+0x44>
 8019f94:	a201      	add	r2, pc, #4	; (adr r2, 8019f9c <USBD_Get_USB_Status+0x1c>)
 8019f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f9a:	bf00      	nop
 8019f9c:	08019fad 	.word	0x08019fad
 8019fa0:	08019fb3 	.word	0x08019fb3
 8019fa4:	08019fb9 	.word	0x08019fb9
 8019fa8:	08019fbf 	.word	0x08019fbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019fac:	2300      	movs	r3, #0
 8019fae:	73fb      	strb	r3, [r7, #15]
    break;
 8019fb0:	e00b      	b.n	8019fca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019fb2:	2302      	movs	r3, #2
 8019fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8019fb6:	e008      	b.n	8019fca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019fb8:	2301      	movs	r3, #1
 8019fba:	73fb      	strb	r3, [r7, #15]
    break;
 8019fbc:	e005      	b.n	8019fca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019fbe:	2302      	movs	r3, #2
 8019fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8019fc2:	e002      	b.n	8019fca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019fc4:	2302      	movs	r3, #2
 8019fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8019fc8:	bf00      	nop
  }
  return usb_status;
 8019fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8019fcc:	4618      	mov	r0, r3
 8019fce:	3714      	adds	r7, #20
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd6:	4770      	bx	lr

08019fd8 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8019fd8:	b480      	push	{r7}
 8019fda:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019fdc:	4b05      	ldr	r3, [pc, #20]	; (8019ff4 <UTIL_LPM_Init+0x1c>)
 8019fde:	2200      	movs	r2, #0
 8019fe0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019fe2:	4b05      	ldr	r3, [pc, #20]	; (8019ff8 <UTIL_LPM_Init+0x20>)
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019fe8:	bf00      	nop
 8019fea:	46bd      	mov	sp, r7
 8019fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ff0:	4770      	bx	lr
 8019ff2:	bf00      	nop
 8019ff4:	20027a8c 	.word	0x20027a8c
 8019ff8:	20027a90 	.word	0x20027a90

08019ffc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019ffc:	b480      	push	{r7}
 8019ffe:	b087      	sub	sp, #28
 801a000:	af00      	add	r7, sp, #0
 801a002:	6078      	str	r0, [r7, #4]
 801a004:	460b      	mov	r3, r1
 801a006:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a008:	f3ef 8310 	mrs	r3, PRIMASK
 801a00c:	613b      	str	r3, [r7, #16]
  return(result);
 801a00e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a010:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a012:	b672      	cpsid	i
  
  switch(state)
 801a014:	78fb      	ldrb	r3, [r7, #3]
 801a016:	2b00      	cmp	r3, #0
 801a018:	d009      	beq.n	801a02e <UTIL_LPM_SetOffMode+0x32>
 801a01a:	2b01      	cmp	r3, #1
 801a01c:	d000      	beq.n	801a020 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 801a01e:	e00e      	b.n	801a03e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 801a020:	4b0c      	ldr	r3, [pc, #48]	; (801a054 <UTIL_LPM_SetOffMode+0x58>)
 801a022:	681a      	ldr	r2, [r3, #0]
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	4313      	orrs	r3, r2
 801a028:	4a0a      	ldr	r2, [pc, #40]	; (801a054 <UTIL_LPM_SetOffMode+0x58>)
 801a02a:	6013      	str	r3, [r2, #0]
      break;
 801a02c:	e007      	b.n	801a03e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	43da      	mvns	r2, r3
 801a032:	4b08      	ldr	r3, [pc, #32]	; (801a054 <UTIL_LPM_SetOffMode+0x58>)
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	4013      	ands	r3, r2
 801a038:	4a06      	ldr	r2, [pc, #24]	; (801a054 <UTIL_LPM_SetOffMode+0x58>)
 801a03a:	6013      	str	r3, [r2, #0]
      break;
 801a03c:	bf00      	nop
 801a03e:	697b      	ldr	r3, [r7, #20]
 801a040:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a048:	bf00      	nop
 801a04a:	371c      	adds	r7, #28
 801a04c:	46bd      	mov	sp, r7
 801a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a052:	4770      	bx	lr
 801a054:	20027a90 	.word	0x20027a90

0801a058 <arm_power_f32>:
 801a058:	b430      	push	{r4, r5}
 801a05a:	088d      	lsrs	r5, r1, #2
 801a05c:	eddf 5a20 	vldr	s11, [pc, #128]	; 801a0e0 <arm_power_f32+0x88>
 801a060:	d020      	beq.n	801a0a4 <arm_power_f32+0x4c>
 801a062:	f100 0310 	add.w	r3, r0, #16
 801a066:	462c      	mov	r4, r5
 801a068:	ed53 6a04 	vldr	s13, [r3, #-16]
 801a06c:	ed13 7a03 	vldr	s14, [r3, #-12]
 801a070:	ed53 7a02 	vldr	s15, [r3, #-8]
 801a074:	ed13 6a01 	vldr	s12, [r3, #-4]
 801a078:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801a07c:	ee27 7a07 	vmul.f32	s14, s14, s14
 801a080:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a084:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a088:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a08c:	ee26 6a06 	vmul.f32	s12, s12, s12
 801a090:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a094:	3c01      	subs	r4, #1
 801a096:	f103 0310 	add.w	r3, r3, #16
 801a09a:	ee76 5a27 	vadd.f32	s11, s12, s15
 801a09e:	d1e3      	bne.n	801a068 <arm_power_f32+0x10>
 801a0a0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801a0a4:	f011 0103 	ands.w	r1, r1, #3
 801a0a8:	d015      	beq.n	801a0d6 <arm_power_f32+0x7e>
 801a0aa:	edd0 7a00 	vldr	s15, [r0]
 801a0ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a0b2:	3901      	subs	r1, #1
 801a0b4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a0b8:	d00d      	beq.n	801a0d6 <arm_power_f32+0x7e>
 801a0ba:	edd0 7a01 	vldr	s15, [r0, #4]
 801a0be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a0c2:	2901      	cmp	r1, #1
 801a0c4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a0c8:	d005      	beq.n	801a0d6 <arm_power_f32+0x7e>
 801a0ca:	edd0 7a02 	vldr	s15, [r0, #8]
 801a0ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a0d2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a0d6:	edc2 5a00 	vstr	s11, [r2]
 801a0da:	bc30      	pop	{r4, r5}
 801a0dc:	4770      	bx	lr
 801a0de:	bf00      	nop
 801a0e0:	00000000 	.word	0x00000000

0801a0e4 <arm_mat_mult_f32>:
 801a0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0e8:	8845      	ldrh	r5, [r0, #2]
 801a0ea:	880b      	ldrh	r3, [r1, #0]
 801a0ec:	8806      	ldrh	r6, [r0, #0]
 801a0ee:	6847      	ldr	r7, [r0, #4]
 801a0f0:	6854      	ldr	r4, [r2, #4]
 801a0f2:	6848      	ldr	r0, [r1, #4]
 801a0f4:	b08b      	sub	sp, #44	; 0x2c
 801a0f6:	42ab      	cmp	r3, r5
 801a0f8:	9109      	str	r1, [sp, #36]	; 0x24
 801a0fa:	9604      	str	r6, [sp, #16]
 801a0fc:	8849      	ldrh	r1, [r1, #2]
 801a0fe:	f040 808a 	bne.w	801a216 <arm_mat_mult_f32+0x132>
 801a102:	8815      	ldrh	r5, [r2, #0]
 801a104:	42b5      	cmp	r5, r6
 801a106:	f040 8086 	bne.w	801a216 <arm_mat_mult_f32+0x132>
 801a10a:	8852      	ldrh	r2, [r2, #2]
 801a10c:	428a      	cmp	r2, r1
 801a10e:	f040 8082 	bne.w	801a216 <arm_mat_mult_f32+0x132>
 801a112:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801a116:	1d01      	adds	r1, r0, #4
 801a118:	0116      	lsls	r6, r2, #4
 801a11a:	9108      	str	r1, [sp, #32]
 801a11c:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 801a120:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 801a124:	9101      	str	r1, [sp, #4]
 801a126:	fb06 f108 	mul.w	r1, r6, r8
 801a12a:	0095      	lsls	r5, r2, #2
 801a12c:	9103      	str	r1, [sp, #12]
 801a12e:	00d2      	lsls	r2, r2, #3
 801a130:	ea4f 018c 	mov.w	r1, ip, lsl #2
 801a134:	f003 0903 	and.w	r9, r3, #3
 801a138:	009b      	lsls	r3, r3, #2
 801a13a:	f107 0b10 	add.w	fp, r7, #16
 801a13e:	eb04 0a05 	add.w	sl, r4, r5
 801a142:	9107      	str	r1, [sp, #28]
 801a144:	9202      	str	r2, [sp, #8]
 801a146:	9306      	str	r3, [sp, #24]
 801a148:	f1ab 0310 	sub.w	r3, fp, #16
 801a14c:	9305      	str	r3, [sp, #20]
 801a14e:	9b07      	ldr	r3, [sp, #28]
 801a150:	f8dd e020 	ldr.w	lr, [sp, #32]
 801a154:	eb03 0c0a 	add.w	ip, r3, sl
 801a158:	eddf 7a31 	vldr	s15, [pc, #196]	; 801a220 <arm_mat_mult_f32+0x13c>
 801a15c:	f1b8 0f00 	cmp.w	r8, #0
 801a160:	d053      	beq.n	801a20a <arm_mat_mult_f32+0x126>
 801a162:	9b02      	ldr	r3, [sp, #8]
 801a164:	4644      	mov	r4, r8
 801a166:	18c1      	adds	r1, r0, r3
 801a168:	4602      	mov	r2, r0
 801a16a:	465b      	mov	r3, fp
 801a16c:	ed92 6a00 	vldr	s12, [r2]
 801a170:	ed13 7a04 	vldr	s14, [r3, #-16]
 801a174:	ed53 4a03 	vldr	s9, [r3, #-12]
 801a178:	ed53 6a02 	vldr	s13, [r3, #-8]
 801a17c:	ed91 5a00 	vldr	s10, [r1]
 801a180:	ed53 5a01 	vldr	s11, [r3, #-4]
 801a184:	1957      	adds	r7, r2, r5
 801a186:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a18a:	ed97 6a00 	vldr	s12, [r7]
 801a18e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a192:	ee26 6a24 	vmul.f32	s12, s12, s9
 801a196:	194f      	adds	r7, r1, r5
 801a198:	ee36 6a27 	vadd.f32	s12, s12, s15
 801a19c:	ee26 7a85 	vmul.f32	s14, s13, s10
 801a1a0:	edd7 7a00 	vldr	s15, [r7]
 801a1a4:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a1a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801a1ac:	3c01      	subs	r4, #1
 801a1ae:	4432      	add	r2, r6
 801a1b0:	4431      	add	r1, r6
 801a1b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a1b6:	f103 0310 	add.w	r3, r3, #16
 801a1ba:	d1d7      	bne.n	801a16c <arm_mat_mult_f32+0x88>
 801a1bc:	9b03      	ldr	r3, [sp, #12]
 801a1be:	9a01      	ldr	r2, [sp, #4]
 801a1c0:	4418      	add	r0, r3
 801a1c2:	f1b9 0f00 	cmp.w	r9, #0
 801a1c6:	d00b      	beq.n	801a1e0 <arm_mat_mult_f32+0xfc>
 801a1c8:	464b      	mov	r3, r9
 801a1ca:	edd0 6a00 	vldr	s13, [r0]
 801a1ce:	ecb2 7a01 	vldmia	r2!, {s14}
 801a1d2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a1d6:	3b01      	subs	r3, #1
 801a1d8:	4428      	add	r0, r5
 801a1da:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a1de:	d1f4      	bne.n	801a1ca <arm_mat_mult_f32+0xe6>
 801a1e0:	ecec 7a01 	vstmia	ip!, {s15}
 801a1e4:	45d4      	cmp	ip, sl
 801a1e6:	4670      	mov	r0, lr
 801a1e8:	f10e 0e04 	add.w	lr, lr, #4
 801a1ec:	d1b4      	bne.n	801a158 <arm_mat_mult_f32+0x74>
 801a1ee:	9a01      	ldr	r2, [sp, #4]
 801a1f0:	9b06      	ldr	r3, [sp, #24]
 801a1f2:	4611      	mov	r1, r2
 801a1f4:	4419      	add	r1, r3
 801a1f6:	449b      	add	fp, r3
 801a1f8:	9b04      	ldr	r3, [sp, #16]
 801a1fa:	9101      	str	r1, [sp, #4]
 801a1fc:	3b01      	subs	r3, #1
 801a1fe:	44aa      	add	sl, r5
 801a200:	9304      	str	r3, [sp, #16]
 801a202:	d004      	beq.n	801a20e <arm_mat_mult_f32+0x12a>
 801a204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a206:	6858      	ldr	r0, [r3, #4]
 801a208:	e79e      	b.n	801a148 <arm_mat_mult_f32+0x64>
 801a20a:	9a05      	ldr	r2, [sp, #20]
 801a20c:	e7d9      	b.n	801a1c2 <arm_mat_mult_f32+0xde>
 801a20e:	4618      	mov	r0, r3
 801a210:	b00b      	add	sp, #44	; 0x2c
 801a212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a216:	f06f 0002 	mvn.w	r0, #2
 801a21a:	b00b      	add	sp, #44	; 0x2c
 801a21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a220:	00000000 	.word	0x00000000

0801a224 <arm_sin_f32>:
 801a224:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a2a4 <arm_sin_f32+0x80>
 801a228:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a22c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a234:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a238:	d504      	bpl.n	801a244 <arm_sin_f32+0x20>
 801a23a:	ee17 3a90 	vmov	r3, s15
 801a23e:	3b01      	subs	r3, #1
 801a240:	ee07 3a90 	vmov	s15, r3
 801a244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a248:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801a2a8 <arm_sin_f32+0x84>
 801a24c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a250:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a254:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a258:	ee17 3a90 	vmov	r3, s15
 801a25c:	b29b      	uxth	r3, r3
 801a25e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a262:	d21a      	bcs.n	801a29a <arm_sin_f32+0x76>
 801a264:	ee07 3a90 	vmov	s15, r3
 801a268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a26c:	1c59      	adds	r1, r3, #1
 801a26e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a272:	4a0e      	ldr	r2, [pc, #56]	; (801a2ac <arm_sin_f32+0x88>)
 801a274:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a278:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a27c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801a280:	ed93 7a00 	vldr	s14, [r3]
 801a284:	edd2 6a00 	vldr	s13, [r2]
 801a288:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a28c:	ee20 0a26 	vmul.f32	s0, s0, s13
 801a290:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a294:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a298:	4770      	bx	lr
 801a29a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a29e:	2101      	movs	r1, #1
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	e7e6      	b.n	801a272 <arm_sin_f32+0x4e>
 801a2a4:	3e22f983 	.word	0x3e22f983
 801a2a8:	44000000 	.word	0x44000000
 801a2ac:	0801c1cc 	.word	0x0801c1cc

0801a2b0 <arm_cos_f32>:
 801a2b0:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a338 <arm_cos_f32+0x88>
 801a2b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a2b8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801a2bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a2c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2c8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a2cc:	d504      	bpl.n	801a2d8 <arm_cos_f32+0x28>
 801a2ce:	ee17 3a90 	vmov	r3, s15
 801a2d2:	3b01      	subs	r3, #1
 801a2d4:	ee07 3a90 	vmov	s15, r3
 801a2d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a2dc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801a33c <arm_cos_f32+0x8c>
 801a2e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a2e4:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a2e8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a2ec:	ee17 3a90 	vmov	r3, s15
 801a2f0:	b29b      	uxth	r3, r3
 801a2f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a2f6:	d21a      	bcs.n	801a32e <arm_cos_f32+0x7e>
 801a2f8:	ee07 3a90 	vmov	s15, r3
 801a2fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a300:	1c59      	adds	r1, r3, #1
 801a302:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a306:	4a0e      	ldr	r2, [pc, #56]	; (801a340 <arm_cos_f32+0x90>)
 801a308:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a30c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a310:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801a314:	ed93 7a00 	vldr	s14, [r3]
 801a318:	edd2 6a00 	vldr	s13, [r2]
 801a31c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a320:	ee20 0a26 	vmul.f32	s0, s0, s13
 801a324:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a328:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a32c:	4770      	bx	lr
 801a32e:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a332:	2101      	movs	r1, #1
 801a334:	2300      	movs	r3, #0
 801a336:	e7e6      	b.n	801a306 <arm_cos_f32+0x56>
 801a338:	3e22f983 	.word	0x3e22f983
 801a33c:	44000000 	.word	0x44000000
 801a340:	0801c1cc 	.word	0x0801c1cc

0801a344 <arm_sub_f32>:
 801a344:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801a348:	b4f0      	push	{r4, r5, r6, r7}
 801a34a:	d033      	beq.n	801a3b4 <arm_sub_f32+0x70>
 801a34c:	f100 0610 	add.w	r6, r0, #16
 801a350:	f101 0510 	add.w	r5, r1, #16
 801a354:	f102 0410 	add.w	r4, r2, #16
 801a358:	4667      	mov	r7, ip
 801a35a:	ed15 7a04 	vldr	s14, [r5, #-16]
 801a35e:	ed56 7a04 	vldr	s15, [r6, #-16]
 801a362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a366:	3f01      	subs	r7, #1
 801a368:	ed44 7a04 	vstr	s15, [r4, #-16]
 801a36c:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a370:	ed56 7a03 	vldr	s15, [r6, #-12]
 801a374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a378:	f106 0610 	add.w	r6, r6, #16
 801a37c:	ed44 7a03 	vstr	s15, [r4, #-12]
 801a380:	ed15 7a02 	vldr	s14, [r5, #-8]
 801a384:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801a388:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a38c:	f105 0510 	add.w	r5, r5, #16
 801a390:	ed44 7a02 	vstr	s15, [r4, #-8]
 801a394:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 801a398:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801a39c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3a0:	f104 0410 	add.w	r4, r4, #16
 801a3a4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 801a3a8:	d1d7      	bne.n	801a35a <arm_sub_f32+0x16>
 801a3aa:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801a3ae:	4420      	add	r0, r4
 801a3b0:	4421      	add	r1, r4
 801a3b2:	4422      	add	r2, r4
 801a3b4:	f013 0303 	ands.w	r3, r3, #3
 801a3b8:	d01b      	beq.n	801a3f2 <arm_sub_f32+0xae>
 801a3ba:	edd0 7a00 	vldr	s15, [r0]
 801a3be:	ed91 7a00 	vldr	s14, [r1]
 801a3c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3c6:	3b01      	subs	r3, #1
 801a3c8:	edc2 7a00 	vstr	s15, [r2]
 801a3cc:	d011      	beq.n	801a3f2 <arm_sub_f32+0xae>
 801a3ce:	edd0 7a01 	vldr	s15, [r0, #4]
 801a3d2:	ed91 7a01 	vldr	s14, [r1, #4]
 801a3d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3da:	2b01      	cmp	r3, #1
 801a3dc:	edc2 7a01 	vstr	s15, [r2, #4]
 801a3e0:	d007      	beq.n	801a3f2 <arm_sub_f32+0xae>
 801a3e2:	edd0 7a02 	vldr	s15, [r0, #8]
 801a3e6:	ed91 7a02 	vldr	s14, [r1, #8]
 801a3ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3ee:	edc2 7a02 	vstr	s15, [r2, #8]
 801a3f2:	bcf0      	pop	{r4, r5, r6, r7}
 801a3f4:	4770      	bx	lr
 801a3f6:	bf00      	nop

0801a3f8 <arm_scale_f32>:
 801a3f8:	b470      	push	{r4, r5, r6}
 801a3fa:	0896      	lsrs	r6, r2, #2
 801a3fc:	d025      	beq.n	801a44a <arm_scale_f32+0x52>
 801a3fe:	f100 0410 	add.w	r4, r0, #16
 801a402:	f101 0310 	add.w	r3, r1, #16
 801a406:	4635      	mov	r5, r6
 801a408:	ed54 7a04 	vldr	s15, [r4, #-16]
 801a40c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a410:	3d01      	subs	r5, #1
 801a412:	ed43 7a04 	vstr	s15, [r3, #-16]
 801a416:	ed54 7a03 	vldr	s15, [r4, #-12]
 801a41a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a41e:	f104 0410 	add.w	r4, r4, #16
 801a422:	ed43 7a03 	vstr	s15, [r3, #-12]
 801a426:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801a42a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a42e:	f103 0310 	add.w	r3, r3, #16
 801a432:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 801a436:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 801a43a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a43e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 801a442:	d1e1      	bne.n	801a408 <arm_scale_f32+0x10>
 801a444:	0136      	lsls	r6, r6, #4
 801a446:	4430      	add	r0, r6
 801a448:	4431      	add	r1, r6
 801a44a:	f012 0203 	ands.w	r2, r2, #3
 801a44e:	d015      	beq.n	801a47c <arm_scale_f32+0x84>
 801a450:	edd0 7a00 	vldr	s15, [r0]
 801a454:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a458:	3a01      	subs	r2, #1
 801a45a:	edc1 7a00 	vstr	s15, [r1]
 801a45e:	d00d      	beq.n	801a47c <arm_scale_f32+0x84>
 801a460:	edd0 7a01 	vldr	s15, [r0, #4]
 801a464:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a468:	2a01      	cmp	r2, #1
 801a46a:	edc1 7a01 	vstr	s15, [r1, #4]
 801a46e:	d005      	beq.n	801a47c <arm_scale_f32+0x84>
 801a470:	edd0 7a02 	vldr	s15, [r0, #8]
 801a474:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a478:	ed81 0a02 	vstr	s0, [r1, #8]
 801a47c:	bc70      	pop	{r4, r5, r6}
 801a47e:	4770      	bx	lr

0801a480 <arm_dot_prod_f32>:
 801a480:	b4f0      	push	{r4, r5, r6, r7}
 801a482:	0897      	lsrs	r7, r2, #2
 801a484:	eddf 5a29 	vldr	s11, [pc, #164]	; 801a52c <arm_dot_prod_f32+0xac>
 801a488:	d02d      	beq.n	801a4e6 <arm_dot_prod_f32+0x66>
 801a48a:	f100 0510 	add.w	r5, r0, #16
 801a48e:	f101 0410 	add.w	r4, r1, #16
 801a492:	463e      	mov	r6, r7
 801a494:	ed55 6a04 	vldr	s13, [r5, #-16]
 801a498:	ed54 3a04 	vldr	s7, [r4, #-16]
 801a49c:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a4a0:	ed14 4a03 	vldr	s8, [r4, #-12]
 801a4a4:	ed55 7a02 	vldr	s15, [r5, #-8]
 801a4a8:	ed54 4a02 	vldr	s9, [r4, #-8]
 801a4ac:	ed15 6a01 	vldr	s12, [r5, #-4]
 801a4b0:	ed14 5a01 	vldr	s10, [r4, #-4]
 801a4b4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801a4b8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a4bc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a4c0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801a4c4:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a4c8:	ee66 6a05 	vmul.f32	s13, s12, s10
 801a4cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a4d0:	3e01      	subs	r6, #1
 801a4d2:	f105 0510 	add.w	r5, r5, #16
 801a4d6:	ee76 5aa7 	vadd.f32	s11, s13, s15
 801a4da:	f104 0410 	add.w	r4, r4, #16
 801a4de:	d1d9      	bne.n	801a494 <arm_dot_prod_f32+0x14>
 801a4e0:	013f      	lsls	r7, r7, #4
 801a4e2:	4438      	add	r0, r7
 801a4e4:	4439      	add	r1, r7
 801a4e6:	f012 0203 	ands.w	r2, r2, #3
 801a4ea:	d01b      	beq.n	801a524 <arm_dot_prod_f32+0xa4>
 801a4ec:	edd1 7a00 	vldr	s15, [r1]
 801a4f0:	ed90 7a00 	vldr	s14, [r0]
 801a4f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a4f8:	3a01      	subs	r2, #1
 801a4fa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a4fe:	d011      	beq.n	801a524 <arm_dot_prod_f32+0xa4>
 801a500:	edd1 7a01 	vldr	s15, [r1, #4]
 801a504:	ed90 7a01 	vldr	s14, [r0, #4]
 801a508:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a50c:	2a01      	cmp	r2, #1
 801a50e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a512:	d007      	beq.n	801a524 <arm_dot_prod_f32+0xa4>
 801a514:	edd0 7a02 	vldr	s15, [r0, #8]
 801a518:	ed91 7a02 	vldr	s14, [r1, #8]
 801a51c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a520:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a524:	edc3 5a00 	vstr	s11, [r3]
 801a528:	bcf0      	pop	{r4, r5, r6, r7}
 801a52a:	4770      	bx	lr
 801a52c:	00000000 	.word	0x00000000

0801a530 <arm_add_f32>:
 801a530:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801a534:	b4f0      	push	{r4, r5, r6, r7}
 801a536:	d033      	beq.n	801a5a0 <arm_add_f32+0x70>
 801a538:	f100 0610 	add.w	r6, r0, #16
 801a53c:	f101 0510 	add.w	r5, r1, #16
 801a540:	f102 0410 	add.w	r4, r2, #16
 801a544:	4667      	mov	r7, ip
 801a546:	ed15 7a04 	vldr	s14, [r5, #-16]
 801a54a:	ed56 7a04 	vldr	s15, [r6, #-16]
 801a54e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a552:	3f01      	subs	r7, #1
 801a554:	ed44 7a04 	vstr	s15, [r4, #-16]
 801a558:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a55c:	ed56 7a03 	vldr	s15, [r6, #-12]
 801a560:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a564:	f106 0610 	add.w	r6, r6, #16
 801a568:	ed44 7a03 	vstr	s15, [r4, #-12]
 801a56c:	ed15 7a02 	vldr	s14, [r5, #-8]
 801a570:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801a574:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a578:	f105 0510 	add.w	r5, r5, #16
 801a57c:	ed44 7a02 	vstr	s15, [r4, #-8]
 801a580:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 801a584:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801a588:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a58c:	f104 0410 	add.w	r4, r4, #16
 801a590:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 801a594:	d1d7      	bne.n	801a546 <arm_add_f32+0x16>
 801a596:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801a59a:	4420      	add	r0, r4
 801a59c:	4421      	add	r1, r4
 801a59e:	4422      	add	r2, r4
 801a5a0:	f013 0303 	ands.w	r3, r3, #3
 801a5a4:	d01b      	beq.n	801a5de <arm_add_f32+0xae>
 801a5a6:	edd1 7a00 	vldr	s15, [r1]
 801a5aa:	ed90 7a00 	vldr	s14, [r0]
 801a5ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a5b2:	3b01      	subs	r3, #1
 801a5b4:	edc2 7a00 	vstr	s15, [r2]
 801a5b8:	d011      	beq.n	801a5de <arm_add_f32+0xae>
 801a5ba:	edd0 7a01 	vldr	s15, [r0, #4]
 801a5be:	ed91 7a01 	vldr	s14, [r1, #4]
 801a5c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a5c6:	2b01      	cmp	r3, #1
 801a5c8:	edc2 7a01 	vstr	s15, [r2, #4]
 801a5cc:	d007      	beq.n	801a5de <arm_add_f32+0xae>
 801a5ce:	edd0 7a02 	vldr	s15, [r0, #8]
 801a5d2:	ed91 7a02 	vldr	s14, [r1, #8]
 801a5d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a5da:	edc2 7a02 	vstr	s15, [r2, #8]
 801a5de:	bcf0      	pop	{r4, r5, r6, r7}
 801a5e0:	4770      	bx	lr
 801a5e2:	bf00      	nop

0801a5e4 <__errno>:
 801a5e4:	4b01      	ldr	r3, [pc, #4]	; (801a5ec <__errno+0x8>)
 801a5e6:	6818      	ldr	r0, [r3, #0]
 801a5e8:	4770      	bx	lr
 801a5ea:	bf00      	nop
 801a5ec:	2000026c 	.word	0x2000026c

0801a5f0 <__libc_init_array>:
 801a5f0:	b570      	push	{r4, r5, r6, lr}
 801a5f2:	4e0d      	ldr	r6, [pc, #52]	; (801a628 <__libc_init_array+0x38>)
 801a5f4:	4c0d      	ldr	r4, [pc, #52]	; (801a62c <__libc_init_array+0x3c>)
 801a5f6:	1ba4      	subs	r4, r4, r6
 801a5f8:	10a4      	asrs	r4, r4, #2
 801a5fa:	2500      	movs	r5, #0
 801a5fc:	42a5      	cmp	r5, r4
 801a5fe:	d109      	bne.n	801a614 <__libc_init_array+0x24>
 801a600:	4e0b      	ldr	r6, [pc, #44]	; (801a630 <__libc_init_array+0x40>)
 801a602:	4c0c      	ldr	r4, [pc, #48]	; (801a634 <__libc_init_array+0x44>)
 801a604:	f001 f8d2 	bl	801b7ac <_init>
 801a608:	1ba4      	subs	r4, r4, r6
 801a60a:	10a4      	asrs	r4, r4, #2
 801a60c:	2500      	movs	r5, #0
 801a60e:	42a5      	cmp	r5, r4
 801a610:	d105      	bne.n	801a61e <__libc_init_array+0x2e>
 801a612:	bd70      	pop	{r4, r5, r6, pc}
 801a614:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a618:	4798      	blx	r3
 801a61a:	3501      	adds	r5, #1
 801a61c:	e7ee      	b.n	801a5fc <__libc_init_array+0xc>
 801a61e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a622:	4798      	blx	r3
 801a624:	3501      	adds	r5, #1
 801a626:	e7f2      	b.n	801a60e <__libc_init_array+0x1e>
 801a628:	0801ca88 	.word	0x0801ca88
 801a62c:	0801ca88 	.word	0x0801ca88
 801a630:	0801ca88 	.word	0x0801ca88
 801a634:	0801ca8c 	.word	0x0801ca8c

0801a638 <memcpy>:
 801a638:	b510      	push	{r4, lr}
 801a63a:	1e43      	subs	r3, r0, #1
 801a63c:	440a      	add	r2, r1
 801a63e:	4291      	cmp	r1, r2
 801a640:	d100      	bne.n	801a644 <memcpy+0xc>
 801a642:	bd10      	pop	{r4, pc}
 801a644:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a648:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a64c:	e7f7      	b.n	801a63e <memcpy+0x6>

0801a64e <memset>:
 801a64e:	4402      	add	r2, r0
 801a650:	4603      	mov	r3, r0
 801a652:	4293      	cmp	r3, r2
 801a654:	d100      	bne.n	801a658 <memset+0xa>
 801a656:	4770      	bx	lr
 801a658:	f803 1b01 	strb.w	r1, [r3], #1
 801a65c:	e7f9      	b.n	801a652 <memset+0x4>
	...

0801a660 <pow>:
 801a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a664:	ed2d 8b04 	vpush	{d8-d9}
 801a668:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801a93c <pow+0x2dc>
 801a66c:	b08d      	sub	sp, #52	; 0x34
 801a66e:	ec57 6b10 	vmov	r6, r7, d0
 801a672:	ec55 4b11 	vmov	r4, r5, d1
 801a676:	f000 f9b3 	bl	801a9e0 <__ieee754_pow>
 801a67a:	f999 3000 	ldrsb.w	r3, [r9]
 801a67e:	9300      	str	r3, [sp, #0]
 801a680:	3301      	adds	r3, #1
 801a682:	eeb0 8a40 	vmov.f32	s16, s0
 801a686:	eef0 8a60 	vmov.f32	s17, s1
 801a68a:	46c8      	mov	r8, r9
 801a68c:	d05f      	beq.n	801a74e <pow+0xee>
 801a68e:	4622      	mov	r2, r4
 801a690:	462b      	mov	r3, r5
 801a692:	4620      	mov	r0, r4
 801a694:	4629      	mov	r1, r5
 801a696:	f7e6 f9d3 	bl	8000a40 <__aeabi_dcmpun>
 801a69a:	4683      	mov	fp, r0
 801a69c:	2800      	cmp	r0, #0
 801a69e:	d156      	bne.n	801a74e <pow+0xee>
 801a6a0:	4632      	mov	r2, r6
 801a6a2:	463b      	mov	r3, r7
 801a6a4:	4630      	mov	r0, r6
 801a6a6:	4639      	mov	r1, r7
 801a6a8:	f7e6 f9ca 	bl	8000a40 <__aeabi_dcmpun>
 801a6ac:	9001      	str	r0, [sp, #4]
 801a6ae:	b1e8      	cbz	r0, 801a6ec <pow+0x8c>
 801a6b0:	2200      	movs	r2, #0
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	4620      	mov	r0, r4
 801a6b6:	4629      	mov	r1, r5
 801a6b8:	f7e6 f990 	bl	80009dc <__aeabi_dcmpeq>
 801a6bc:	2800      	cmp	r0, #0
 801a6be:	d046      	beq.n	801a74e <pow+0xee>
 801a6c0:	2301      	movs	r3, #1
 801a6c2:	9302      	str	r3, [sp, #8]
 801a6c4:	4b96      	ldr	r3, [pc, #600]	; (801a920 <pow+0x2c0>)
 801a6c6:	9303      	str	r3, [sp, #12]
 801a6c8:	4b96      	ldr	r3, [pc, #600]	; (801a924 <pow+0x2c4>)
 801a6ca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a6d4:	9b00      	ldr	r3, [sp, #0]
 801a6d6:	2b02      	cmp	r3, #2
 801a6d8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a6dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a6e0:	d033      	beq.n	801a74a <pow+0xea>
 801a6e2:	a802      	add	r0, sp, #8
 801a6e4:	f000 ff4e 	bl	801b584 <matherr>
 801a6e8:	bb48      	cbnz	r0, 801a73e <pow+0xde>
 801a6ea:	e05d      	b.n	801a7a8 <pow+0x148>
 801a6ec:	f04f 0a00 	mov.w	sl, #0
 801a6f0:	f04f 0b00 	mov.w	fp, #0
 801a6f4:	4652      	mov	r2, sl
 801a6f6:	465b      	mov	r3, fp
 801a6f8:	4630      	mov	r0, r6
 801a6fa:	4639      	mov	r1, r7
 801a6fc:	f7e6 f96e 	bl	80009dc <__aeabi_dcmpeq>
 801a700:	ec4b ab19 	vmov	d9, sl, fp
 801a704:	2800      	cmp	r0, #0
 801a706:	d054      	beq.n	801a7b2 <pow+0x152>
 801a708:	4652      	mov	r2, sl
 801a70a:	465b      	mov	r3, fp
 801a70c:	4620      	mov	r0, r4
 801a70e:	4629      	mov	r1, r5
 801a710:	f7e6 f964 	bl	80009dc <__aeabi_dcmpeq>
 801a714:	4680      	mov	r8, r0
 801a716:	b318      	cbz	r0, 801a760 <pow+0x100>
 801a718:	2301      	movs	r3, #1
 801a71a:	9302      	str	r3, [sp, #8]
 801a71c:	4b80      	ldr	r3, [pc, #512]	; (801a920 <pow+0x2c0>)
 801a71e:	9303      	str	r3, [sp, #12]
 801a720:	9b01      	ldr	r3, [sp, #4]
 801a722:	930a      	str	r3, [sp, #40]	; 0x28
 801a724:	9b00      	ldr	r3, [sp, #0]
 801a726:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a72a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a72e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d0d5      	beq.n	801a6e2 <pow+0x82>
 801a736:	4b7b      	ldr	r3, [pc, #492]	; (801a924 <pow+0x2c4>)
 801a738:	2200      	movs	r2, #0
 801a73a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a740:	b11b      	cbz	r3, 801a74a <pow+0xea>
 801a742:	f7ff ff4f 	bl	801a5e4 <__errno>
 801a746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a748:	6003      	str	r3, [r0, #0]
 801a74a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801a74e:	eeb0 0a48 	vmov.f32	s0, s16
 801a752:	eef0 0a68 	vmov.f32	s1, s17
 801a756:	b00d      	add	sp, #52	; 0x34
 801a758:	ecbd 8b04 	vpop	{d8-d9}
 801a75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a760:	ec45 4b10 	vmov	d0, r4, r5
 801a764:	f000 ff06 	bl	801b574 <finite>
 801a768:	2800      	cmp	r0, #0
 801a76a:	d0f0      	beq.n	801a74e <pow+0xee>
 801a76c:	4652      	mov	r2, sl
 801a76e:	465b      	mov	r3, fp
 801a770:	4620      	mov	r0, r4
 801a772:	4629      	mov	r1, r5
 801a774:	f7e6 f93c 	bl	80009f0 <__aeabi_dcmplt>
 801a778:	2800      	cmp	r0, #0
 801a77a:	d0e8      	beq.n	801a74e <pow+0xee>
 801a77c:	2301      	movs	r3, #1
 801a77e:	9302      	str	r3, [sp, #8]
 801a780:	4b67      	ldr	r3, [pc, #412]	; (801a920 <pow+0x2c0>)
 801a782:	9303      	str	r3, [sp, #12]
 801a784:	f999 3000 	ldrsb.w	r3, [r9]
 801a788:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801a78c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a790:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a794:	b913      	cbnz	r3, 801a79c <pow+0x13c>
 801a796:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801a79a:	e7a2      	b.n	801a6e2 <pow+0x82>
 801a79c:	4962      	ldr	r1, [pc, #392]	; (801a928 <pow+0x2c8>)
 801a79e:	2000      	movs	r0, #0
 801a7a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a7a4:	2b02      	cmp	r3, #2
 801a7a6:	d19c      	bne.n	801a6e2 <pow+0x82>
 801a7a8:	f7ff ff1c 	bl	801a5e4 <__errno>
 801a7ac:	2321      	movs	r3, #33	; 0x21
 801a7ae:	6003      	str	r3, [r0, #0]
 801a7b0:	e7c5      	b.n	801a73e <pow+0xde>
 801a7b2:	eeb0 0a48 	vmov.f32	s0, s16
 801a7b6:	eef0 0a68 	vmov.f32	s1, s17
 801a7ba:	f000 fedb 	bl	801b574 <finite>
 801a7be:	9000      	str	r0, [sp, #0]
 801a7c0:	2800      	cmp	r0, #0
 801a7c2:	f040 8081 	bne.w	801a8c8 <pow+0x268>
 801a7c6:	ec47 6b10 	vmov	d0, r6, r7
 801a7ca:	f000 fed3 	bl	801b574 <finite>
 801a7ce:	2800      	cmp	r0, #0
 801a7d0:	d07a      	beq.n	801a8c8 <pow+0x268>
 801a7d2:	ec45 4b10 	vmov	d0, r4, r5
 801a7d6:	f000 fecd 	bl	801b574 <finite>
 801a7da:	2800      	cmp	r0, #0
 801a7dc:	d074      	beq.n	801a8c8 <pow+0x268>
 801a7de:	ec53 2b18 	vmov	r2, r3, d8
 801a7e2:	ee18 0a10 	vmov	r0, s16
 801a7e6:	4619      	mov	r1, r3
 801a7e8:	f7e6 f92a 	bl	8000a40 <__aeabi_dcmpun>
 801a7ec:	f999 9000 	ldrsb.w	r9, [r9]
 801a7f0:	4b4b      	ldr	r3, [pc, #300]	; (801a920 <pow+0x2c0>)
 801a7f2:	b1b0      	cbz	r0, 801a822 <pow+0x1c2>
 801a7f4:	2201      	movs	r2, #1
 801a7f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a7fa:	9b00      	ldr	r3, [sp, #0]
 801a7fc:	930a      	str	r3, [sp, #40]	; 0x28
 801a7fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a802:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a806:	f1b9 0f00 	cmp.w	r9, #0
 801a80a:	d0c4      	beq.n	801a796 <pow+0x136>
 801a80c:	4652      	mov	r2, sl
 801a80e:	465b      	mov	r3, fp
 801a810:	4650      	mov	r0, sl
 801a812:	4659      	mov	r1, fp
 801a814:	f7e5 ffa4 	bl	8000760 <__aeabi_ddiv>
 801a818:	f1b9 0f02 	cmp.w	r9, #2
 801a81c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a820:	e7c1      	b.n	801a7a6 <pow+0x146>
 801a822:	2203      	movs	r2, #3
 801a824:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a828:	900a      	str	r0, [sp, #40]	; 0x28
 801a82a:	4629      	mov	r1, r5
 801a82c:	4620      	mov	r0, r4
 801a82e:	2200      	movs	r2, #0
 801a830:	4b3e      	ldr	r3, [pc, #248]	; (801a92c <pow+0x2cc>)
 801a832:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a836:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a83a:	f7e5 fe67 	bl	800050c <__aeabi_dmul>
 801a83e:	4604      	mov	r4, r0
 801a840:	460d      	mov	r5, r1
 801a842:	f1b9 0f00 	cmp.w	r9, #0
 801a846:	d124      	bne.n	801a892 <pow+0x232>
 801a848:	4b39      	ldr	r3, [pc, #228]	; (801a930 <pow+0x2d0>)
 801a84a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a84e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a852:	4630      	mov	r0, r6
 801a854:	4652      	mov	r2, sl
 801a856:	465b      	mov	r3, fp
 801a858:	4639      	mov	r1, r7
 801a85a:	f7e6 f8c9 	bl	80009f0 <__aeabi_dcmplt>
 801a85e:	2800      	cmp	r0, #0
 801a860:	d056      	beq.n	801a910 <pow+0x2b0>
 801a862:	ec45 4b10 	vmov	d0, r4, r5
 801a866:	f000 fe97 	bl	801b598 <rint>
 801a86a:	4622      	mov	r2, r4
 801a86c:	462b      	mov	r3, r5
 801a86e:	ec51 0b10 	vmov	r0, r1, d0
 801a872:	f7e6 f8b3 	bl	80009dc <__aeabi_dcmpeq>
 801a876:	b920      	cbnz	r0, 801a882 <pow+0x222>
 801a878:	4b2e      	ldr	r3, [pc, #184]	; (801a934 <pow+0x2d4>)
 801a87a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a87e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a882:	f998 3000 	ldrsb.w	r3, [r8]
 801a886:	2b02      	cmp	r3, #2
 801a888:	d142      	bne.n	801a910 <pow+0x2b0>
 801a88a:	f7ff feab 	bl	801a5e4 <__errno>
 801a88e:	2322      	movs	r3, #34	; 0x22
 801a890:	e78d      	b.n	801a7ae <pow+0x14e>
 801a892:	4b29      	ldr	r3, [pc, #164]	; (801a938 <pow+0x2d8>)
 801a894:	2200      	movs	r2, #0
 801a896:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a89a:	4630      	mov	r0, r6
 801a89c:	4652      	mov	r2, sl
 801a89e:	465b      	mov	r3, fp
 801a8a0:	4639      	mov	r1, r7
 801a8a2:	f7e6 f8a5 	bl	80009f0 <__aeabi_dcmplt>
 801a8a6:	2800      	cmp	r0, #0
 801a8a8:	d0eb      	beq.n	801a882 <pow+0x222>
 801a8aa:	ec45 4b10 	vmov	d0, r4, r5
 801a8ae:	f000 fe73 	bl	801b598 <rint>
 801a8b2:	4622      	mov	r2, r4
 801a8b4:	462b      	mov	r3, r5
 801a8b6:	ec51 0b10 	vmov	r0, r1, d0
 801a8ba:	f7e6 f88f 	bl	80009dc <__aeabi_dcmpeq>
 801a8be:	2800      	cmp	r0, #0
 801a8c0:	d1df      	bne.n	801a882 <pow+0x222>
 801a8c2:	2200      	movs	r2, #0
 801a8c4:	4b18      	ldr	r3, [pc, #96]	; (801a928 <pow+0x2c8>)
 801a8c6:	e7da      	b.n	801a87e <pow+0x21e>
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	ec51 0b18 	vmov	r0, r1, d8
 801a8d0:	f7e6 f884 	bl	80009dc <__aeabi_dcmpeq>
 801a8d4:	2800      	cmp	r0, #0
 801a8d6:	f43f af3a 	beq.w	801a74e <pow+0xee>
 801a8da:	ec47 6b10 	vmov	d0, r6, r7
 801a8de:	f000 fe49 	bl	801b574 <finite>
 801a8e2:	2800      	cmp	r0, #0
 801a8e4:	f43f af33 	beq.w	801a74e <pow+0xee>
 801a8e8:	ec45 4b10 	vmov	d0, r4, r5
 801a8ec:	f000 fe42 	bl	801b574 <finite>
 801a8f0:	2800      	cmp	r0, #0
 801a8f2:	f43f af2c 	beq.w	801a74e <pow+0xee>
 801a8f6:	2304      	movs	r3, #4
 801a8f8:	9302      	str	r3, [sp, #8]
 801a8fa:	4b09      	ldr	r3, [pc, #36]	; (801a920 <pow+0x2c0>)
 801a8fc:	9303      	str	r3, [sp, #12]
 801a8fe:	2300      	movs	r3, #0
 801a900:	930a      	str	r3, [sp, #40]	; 0x28
 801a902:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a906:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a90a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801a90e:	e7b8      	b.n	801a882 <pow+0x222>
 801a910:	a802      	add	r0, sp, #8
 801a912:	f000 fe37 	bl	801b584 <matherr>
 801a916:	2800      	cmp	r0, #0
 801a918:	f47f af11 	bne.w	801a73e <pow+0xde>
 801a91c:	e7b5      	b.n	801a88a <pow+0x22a>
 801a91e:	bf00      	nop
 801a920:	0801ca30 	.word	0x0801ca30
 801a924:	3ff00000 	.word	0x3ff00000
 801a928:	fff00000 	.word	0xfff00000
 801a92c:	3fe00000 	.word	0x3fe00000
 801a930:	47efffff 	.word	0x47efffff
 801a934:	c7efffff 	.word	0xc7efffff
 801a938:	7ff00000 	.word	0x7ff00000
 801a93c:	200002d0 	.word	0x200002d0

0801a940 <sqrtf>:
 801a940:	b510      	push	{r4, lr}
 801a942:	ed2d 8b02 	vpush	{d8}
 801a946:	b08a      	sub	sp, #40	; 0x28
 801a948:	eeb0 8a40 	vmov.f32	s16, s0
 801a94c:	f000 fe06 	bl	801b55c <__ieee754_sqrtf>
 801a950:	4b21      	ldr	r3, [pc, #132]	; (801a9d8 <sqrtf+0x98>)
 801a952:	f993 4000 	ldrsb.w	r4, [r3]
 801a956:	1c63      	adds	r3, r4, #1
 801a958:	d02c      	beq.n	801a9b4 <sqrtf+0x74>
 801a95a:	eeb4 8a48 	vcmp.f32	s16, s16
 801a95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a962:	d627      	bvs.n	801a9b4 <sqrtf+0x74>
 801a964:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a96c:	d522      	bpl.n	801a9b4 <sqrtf+0x74>
 801a96e:	2301      	movs	r3, #1
 801a970:	9300      	str	r3, [sp, #0]
 801a972:	4b1a      	ldr	r3, [pc, #104]	; (801a9dc <sqrtf+0x9c>)
 801a974:	9301      	str	r3, [sp, #4]
 801a976:	ee18 0a10 	vmov	r0, s16
 801a97a:	2300      	movs	r3, #0
 801a97c:	9308      	str	r3, [sp, #32]
 801a97e:	f7e5 fd6d 	bl	800045c <__aeabi_f2d>
 801a982:	2200      	movs	r2, #0
 801a984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a98c:	2300      	movs	r3, #0
 801a98e:	b9ac      	cbnz	r4, 801a9bc <sqrtf+0x7c>
 801a990:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a994:	4668      	mov	r0, sp
 801a996:	f000 fdf5 	bl	801b584 <matherr>
 801a99a:	b1b8      	cbz	r0, 801a9cc <sqrtf+0x8c>
 801a99c:	9b08      	ldr	r3, [sp, #32]
 801a99e:	b11b      	cbz	r3, 801a9a8 <sqrtf+0x68>
 801a9a0:	f7ff fe20 	bl	801a5e4 <__errno>
 801a9a4:	9b08      	ldr	r3, [sp, #32]
 801a9a6:	6003      	str	r3, [r0, #0]
 801a9a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a9ac:	f7e6 f85e 	bl	8000a6c <__aeabi_d2f>
 801a9b0:	ee00 0a10 	vmov	s0, r0
 801a9b4:	b00a      	add	sp, #40	; 0x28
 801a9b6:	ecbd 8b02 	vpop	{d8}
 801a9ba:	bd10      	pop	{r4, pc}
 801a9bc:	4610      	mov	r0, r2
 801a9be:	4619      	mov	r1, r3
 801a9c0:	f7e5 fece 	bl	8000760 <__aeabi_ddiv>
 801a9c4:	2c02      	cmp	r4, #2
 801a9c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a9ca:	d1e3      	bne.n	801a994 <sqrtf+0x54>
 801a9cc:	f7ff fe0a 	bl	801a5e4 <__errno>
 801a9d0:	2321      	movs	r3, #33	; 0x21
 801a9d2:	6003      	str	r3, [r0, #0]
 801a9d4:	e7e2      	b.n	801a99c <sqrtf+0x5c>
 801a9d6:	bf00      	nop
 801a9d8:	200002d0 	.word	0x200002d0
 801a9dc:	0801ca34 	.word	0x0801ca34

0801a9e0 <__ieee754_pow>:
 801a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9e4:	b091      	sub	sp, #68	; 0x44
 801a9e6:	ed8d 1b00 	vstr	d1, [sp]
 801a9ea:	e9dd 2900 	ldrd	r2, r9, [sp]
 801a9ee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801a9f2:	ea58 0302 	orrs.w	r3, r8, r2
 801a9f6:	ec57 6b10 	vmov	r6, r7, d0
 801a9fa:	f000 84be 	beq.w	801b37a <__ieee754_pow+0x99a>
 801a9fe:	4b7a      	ldr	r3, [pc, #488]	; (801abe8 <__ieee754_pow+0x208>)
 801aa00:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801aa04:	429c      	cmp	r4, r3
 801aa06:	463d      	mov	r5, r7
 801aa08:	ee10 aa10 	vmov	sl, s0
 801aa0c:	dc09      	bgt.n	801aa22 <__ieee754_pow+0x42>
 801aa0e:	d103      	bne.n	801aa18 <__ieee754_pow+0x38>
 801aa10:	b93e      	cbnz	r6, 801aa22 <__ieee754_pow+0x42>
 801aa12:	45a0      	cmp	r8, r4
 801aa14:	dc0d      	bgt.n	801aa32 <__ieee754_pow+0x52>
 801aa16:	e001      	b.n	801aa1c <__ieee754_pow+0x3c>
 801aa18:	4598      	cmp	r8, r3
 801aa1a:	dc02      	bgt.n	801aa22 <__ieee754_pow+0x42>
 801aa1c:	4598      	cmp	r8, r3
 801aa1e:	d10e      	bne.n	801aa3e <__ieee754_pow+0x5e>
 801aa20:	b16a      	cbz	r2, 801aa3e <__ieee754_pow+0x5e>
 801aa22:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801aa26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801aa2a:	ea54 030a 	orrs.w	r3, r4, sl
 801aa2e:	f000 84a4 	beq.w	801b37a <__ieee754_pow+0x99a>
 801aa32:	486e      	ldr	r0, [pc, #440]	; (801abec <__ieee754_pow+0x20c>)
 801aa34:	b011      	add	sp, #68	; 0x44
 801aa36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa3a:	f000 bda5 	b.w	801b588 <nan>
 801aa3e:	2d00      	cmp	r5, #0
 801aa40:	da53      	bge.n	801aaea <__ieee754_pow+0x10a>
 801aa42:	4b6b      	ldr	r3, [pc, #428]	; (801abf0 <__ieee754_pow+0x210>)
 801aa44:	4598      	cmp	r8, r3
 801aa46:	dc4d      	bgt.n	801aae4 <__ieee754_pow+0x104>
 801aa48:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801aa4c:	4598      	cmp	r8, r3
 801aa4e:	dd4c      	ble.n	801aaea <__ieee754_pow+0x10a>
 801aa50:	ea4f 5328 	mov.w	r3, r8, asr #20
 801aa54:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801aa58:	2b14      	cmp	r3, #20
 801aa5a:	dd26      	ble.n	801aaaa <__ieee754_pow+0xca>
 801aa5c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801aa60:	fa22 f103 	lsr.w	r1, r2, r3
 801aa64:	fa01 f303 	lsl.w	r3, r1, r3
 801aa68:	4293      	cmp	r3, r2
 801aa6a:	d13e      	bne.n	801aaea <__ieee754_pow+0x10a>
 801aa6c:	f001 0101 	and.w	r1, r1, #1
 801aa70:	f1c1 0b02 	rsb	fp, r1, #2
 801aa74:	2a00      	cmp	r2, #0
 801aa76:	d15b      	bne.n	801ab30 <__ieee754_pow+0x150>
 801aa78:	4b5b      	ldr	r3, [pc, #364]	; (801abe8 <__ieee754_pow+0x208>)
 801aa7a:	4598      	cmp	r8, r3
 801aa7c:	d124      	bne.n	801aac8 <__ieee754_pow+0xe8>
 801aa7e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801aa82:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801aa86:	ea53 030a 	orrs.w	r3, r3, sl
 801aa8a:	f000 8476 	beq.w	801b37a <__ieee754_pow+0x99a>
 801aa8e:	4b59      	ldr	r3, [pc, #356]	; (801abf4 <__ieee754_pow+0x214>)
 801aa90:	429c      	cmp	r4, r3
 801aa92:	dd2d      	ble.n	801aaf0 <__ieee754_pow+0x110>
 801aa94:	f1b9 0f00 	cmp.w	r9, #0
 801aa98:	f280 8473 	bge.w	801b382 <__ieee754_pow+0x9a2>
 801aa9c:	2000      	movs	r0, #0
 801aa9e:	2100      	movs	r1, #0
 801aaa0:	ec41 0b10 	vmov	d0, r0, r1
 801aaa4:	b011      	add	sp, #68	; 0x44
 801aaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaaa:	2a00      	cmp	r2, #0
 801aaac:	d13e      	bne.n	801ab2c <__ieee754_pow+0x14c>
 801aaae:	f1c3 0314 	rsb	r3, r3, #20
 801aab2:	fa48 f103 	asr.w	r1, r8, r3
 801aab6:	fa01 f303 	lsl.w	r3, r1, r3
 801aaba:	4543      	cmp	r3, r8
 801aabc:	f040 8469 	bne.w	801b392 <__ieee754_pow+0x9b2>
 801aac0:	f001 0101 	and.w	r1, r1, #1
 801aac4:	f1c1 0b02 	rsb	fp, r1, #2
 801aac8:	4b4b      	ldr	r3, [pc, #300]	; (801abf8 <__ieee754_pow+0x218>)
 801aaca:	4598      	cmp	r8, r3
 801aacc:	d118      	bne.n	801ab00 <__ieee754_pow+0x120>
 801aace:	f1b9 0f00 	cmp.w	r9, #0
 801aad2:	f280 845a 	bge.w	801b38a <__ieee754_pow+0x9aa>
 801aad6:	4948      	ldr	r1, [pc, #288]	; (801abf8 <__ieee754_pow+0x218>)
 801aad8:	4632      	mov	r2, r6
 801aada:	463b      	mov	r3, r7
 801aadc:	2000      	movs	r0, #0
 801aade:	f7e5 fe3f 	bl	8000760 <__aeabi_ddiv>
 801aae2:	e7dd      	b.n	801aaa0 <__ieee754_pow+0xc0>
 801aae4:	f04f 0b02 	mov.w	fp, #2
 801aae8:	e7c4      	b.n	801aa74 <__ieee754_pow+0x94>
 801aaea:	f04f 0b00 	mov.w	fp, #0
 801aaee:	e7c1      	b.n	801aa74 <__ieee754_pow+0x94>
 801aaf0:	f1b9 0f00 	cmp.w	r9, #0
 801aaf4:	dad2      	bge.n	801aa9c <__ieee754_pow+0xbc>
 801aaf6:	e9dd 0300 	ldrd	r0, r3, [sp]
 801aafa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801aafe:	e7cf      	b.n	801aaa0 <__ieee754_pow+0xc0>
 801ab00:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801ab04:	d106      	bne.n	801ab14 <__ieee754_pow+0x134>
 801ab06:	4632      	mov	r2, r6
 801ab08:	463b      	mov	r3, r7
 801ab0a:	4610      	mov	r0, r2
 801ab0c:	4619      	mov	r1, r3
 801ab0e:	f7e5 fcfd 	bl	800050c <__aeabi_dmul>
 801ab12:	e7c5      	b.n	801aaa0 <__ieee754_pow+0xc0>
 801ab14:	4b39      	ldr	r3, [pc, #228]	; (801abfc <__ieee754_pow+0x21c>)
 801ab16:	4599      	cmp	r9, r3
 801ab18:	d10a      	bne.n	801ab30 <__ieee754_pow+0x150>
 801ab1a:	2d00      	cmp	r5, #0
 801ab1c:	db08      	blt.n	801ab30 <__ieee754_pow+0x150>
 801ab1e:	ec47 6b10 	vmov	d0, r6, r7
 801ab22:	b011      	add	sp, #68	; 0x44
 801ab24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab28:	f000 bc68 	b.w	801b3fc <__ieee754_sqrt>
 801ab2c:	f04f 0b00 	mov.w	fp, #0
 801ab30:	ec47 6b10 	vmov	d0, r6, r7
 801ab34:	f000 fd15 	bl	801b562 <fabs>
 801ab38:	ec51 0b10 	vmov	r0, r1, d0
 801ab3c:	f1ba 0f00 	cmp.w	sl, #0
 801ab40:	d127      	bne.n	801ab92 <__ieee754_pow+0x1b2>
 801ab42:	b124      	cbz	r4, 801ab4e <__ieee754_pow+0x16e>
 801ab44:	4b2c      	ldr	r3, [pc, #176]	; (801abf8 <__ieee754_pow+0x218>)
 801ab46:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801ab4a:	429a      	cmp	r2, r3
 801ab4c:	d121      	bne.n	801ab92 <__ieee754_pow+0x1b2>
 801ab4e:	f1b9 0f00 	cmp.w	r9, #0
 801ab52:	da05      	bge.n	801ab60 <__ieee754_pow+0x180>
 801ab54:	4602      	mov	r2, r0
 801ab56:	460b      	mov	r3, r1
 801ab58:	2000      	movs	r0, #0
 801ab5a:	4927      	ldr	r1, [pc, #156]	; (801abf8 <__ieee754_pow+0x218>)
 801ab5c:	f7e5 fe00 	bl	8000760 <__aeabi_ddiv>
 801ab60:	2d00      	cmp	r5, #0
 801ab62:	da9d      	bge.n	801aaa0 <__ieee754_pow+0xc0>
 801ab64:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ab68:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ab6c:	ea54 030b 	orrs.w	r3, r4, fp
 801ab70:	d108      	bne.n	801ab84 <__ieee754_pow+0x1a4>
 801ab72:	4602      	mov	r2, r0
 801ab74:	460b      	mov	r3, r1
 801ab76:	4610      	mov	r0, r2
 801ab78:	4619      	mov	r1, r3
 801ab7a:	f7e5 fb0f 	bl	800019c <__aeabi_dsub>
 801ab7e:	4602      	mov	r2, r0
 801ab80:	460b      	mov	r3, r1
 801ab82:	e7ac      	b.n	801aade <__ieee754_pow+0xfe>
 801ab84:	f1bb 0f01 	cmp.w	fp, #1
 801ab88:	d18a      	bne.n	801aaa0 <__ieee754_pow+0xc0>
 801ab8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ab8e:	4619      	mov	r1, r3
 801ab90:	e786      	b.n	801aaa0 <__ieee754_pow+0xc0>
 801ab92:	0fed      	lsrs	r5, r5, #31
 801ab94:	1e6b      	subs	r3, r5, #1
 801ab96:	930d      	str	r3, [sp, #52]	; 0x34
 801ab98:	ea5b 0303 	orrs.w	r3, fp, r3
 801ab9c:	d102      	bne.n	801aba4 <__ieee754_pow+0x1c4>
 801ab9e:	4632      	mov	r2, r6
 801aba0:	463b      	mov	r3, r7
 801aba2:	e7e8      	b.n	801ab76 <__ieee754_pow+0x196>
 801aba4:	4b16      	ldr	r3, [pc, #88]	; (801ac00 <__ieee754_pow+0x220>)
 801aba6:	4598      	cmp	r8, r3
 801aba8:	f340 80fe 	ble.w	801ada8 <__ieee754_pow+0x3c8>
 801abac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801abb0:	4598      	cmp	r8, r3
 801abb2:	dd0a      	ble.n	801abca <__ieee754_pow+0x1ea>
 801abb4:	4b0f      	ldr	r3, [pc, #60]	; (801abf4 <__ieee754_pow+0x214>)
 801abb6:	429c      	cmp	r4, r3
 801abb8:	dc0d      	bgt.n	801abd6 <__ieee754_pow+0x1f6>
 801abba:	f1b9 0f00 	cmp.w	r9, #0
 801abbe:	f6bf af6d 	bge.w	801aa9c <__ieee754_pow+0xbc>
 801abc2:	a307      	add	r3, pc, #28	; (adr r3, 801abe0 <__ieee754_pow+0x200>)
 801abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abc8:	e79f      	b.n	801ab0a <__ieee754_pow+0x12a>
 801abca:	4b0e      	ldr	r3, [pc, #56]	; (801ac04 <__ieee754_pow+0x224>)
 801abcc:	429c      	cmp	r4, r3
 801abce:	ddf4      	ble.n	801abba <__ieee754_pow+0x1da>
 801abd0:	4b09      	ldr	r3, [pc, #36]	; (801abf8 <__ieee754_pow+0x218>)
 801abd2:	429c      	cmp	r4, r3
 801abd4:	dd18      	ble.n	801ac08 <__ieee754_pow+0x228>
 801abd6:	f1b9 0f00 	cmp.w	r9, #0
 801abda:	dcf2      	bgt.n	801abc2 <__ieee754_pow+0x1e2>
 801abdc:	e75e      	b.n	801aa9c <__ieee754_pow+0xbc>
 801abde:	bf00      	nop
 801abe0:	8800759c 	.word	0x8800759c
 801abe4:	7e37e43c 	.word	0x7e37e43c
 801abe8:	7ff00000 	.word	0x7ff00000
 801abec:	0801ca39 	.word	0x0801ca39
 801abf0:	433fffff 	.word	0x433fffff
 801abf4:	3fefffff 	.word	0x3fefffff
 801abf8:	3ff00000 	.word	0x3ff00000
 801abfc:	3fe00000 	.word	0x3fe00000
 801ac00:	41e00000 	.word	0x41e00000
 801ac04:	3feffffe 	.word	0x3feffffe
 801ac08:	2200      	movs	r2, #0
 801ac0a:	4b63      	ldr	r3, [pc, #396]	; (801ad98 <__ieee754_pow+0x3b8>)
 801ac0c:	f7e5 fac6 	bl	800019c <__aeabi_dsub>
 801ac10:	a355      	add	r3, pc, #340	; (adr r3, 801ad68 <__ieee754_pow+0x388>)
 801ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac16:	4604      	mov	r4, r0
 801ac18:	460d      	mov	r5, r1
 801ac1a:	f7e5 fc77 	bl	800050c <__aeabi_dmul>
 801ac1e:	a354      	add	r3, pc, #336	; (adr r3, 801ad70 <__ieee754_pow+0x390>)
 801ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac24:	4606      	mov	r6, r0
 801ac26:	460f      	mov	r7, r1
 801ac28:	4620      	mov	r0, r4
 801ac2a:	4629      	mov	r1, r5
 801ac2c:	f7e5 fc6e 	bl	800050c <__aeabi_dmul>
 801ac30:	2200      	movs	r2, #0
 801ac32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ac36:	4b59      	ldr	r3, [pc, #356]	; (801ad9c <__ieee754_pow+0x3bc>)
 801ac38:	4620      	mov	r0, r4
 801ac3a:	4629      	mov	r1, r5
 801ac3c:	f7e5 fc66 	bl	800050c <__aeabi_dmul>
 801ac40:	4602      	mov	r2, r0
 801ac42:	460b      	mov	r3, r1
 801ac44:	a14c      	add	r1, pc, #304	; (adr r1, 801ad78 <__ieee754_pow+0x398>)
 801ac46:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac4a:	f7e5 faa7 	bl	800019c <__aeabi_dsub>
 801ac4e:	4622      	mov	r2, r4
 801ac50:	462b      	mov	r3, r5
 801ac52:	f7e5 fc5b 	bl	800050c <__aeabi_dmul>
 801ac56:	4602      	mov	r2, r0
 801ac58:	460b      	mov	r3, r1
 801ac5a:	2000      	movs	r0, #0
 801ac5c:	4950      	ldr	r1, [pc, #320]	; (801ada0 <__ieee754_pow+0x3c0>)
 801ac5e:	f7e5 fa9d 	bl	800019c <__aeabi_dsub>
 801ac62:	4622      	mov	r2, r4
 801ac64:	462b      	mov	r3, r5
 801ac66:	4680      	mov	r8, r0
 801ac68:	4689      	mov	r9, r1
 801ac6a:	4620      	mov	r0, r4
 801ac6c:	4629      	mov	r1, r5
 801ac6e:	f7e5 fc4d 	bl	800050c <__aeabi_dmul>
 801ac72:	4602      	mov	r2, r0
 801ac74:	460b      	mov	r3, r1
 801ac76:	4640      	mov	r0, r8
 801ac78:	4649      	mov	r1, r9
 801ac7a:	f7e5 fc47 	bl	800050c <__aeabi_dmul>
 801ac7e:	a340      	add	r3, pc, #256	; (adr r3, 801ad80 <__ieee754_pow+0x3a0>)
 801ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac84:	f7e5 fc42 	bl	800050c <__aeabi_dmul>
 801ac88:	4602      	mov	r2, r0
 801ac8a:	460b      	mov	r3, r1
 801ac8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ac90:	f7e5 fa84 	bl	800019c <__aeabi_dsub>
 801ac94:	4602      	mov	r2, r0
 801ac96:	460b      	mov	r3, r1
 801ac98:	4604      	mov	r4, r0
 801ac9a:	460d      	mov	r5, r1
 801ac9c:	4630      	mov	r0, r6
 801ac9e:	4639      	mov	r1, r7
 801aca0:	f7e5 fa7e 	bl	80001a0 <__adddf3>
 801aca4:	2000      	movs	r0, #0
 801aca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801acaa:	4632      	mov	r2, r6
 801acac:	463b      	mov	r3, r7
 801acae:	f7e5 fa75 	bl	800019c <__aeabi_dsub>
 801acb2:	4602      	mov	r2, r0
 801acb4:	460b      	mov	r3, r1
 801acb6:	4620      	mov	r0, r4
 801acb8:	4629      	mov	r1, r5
 801acba:	f7e5 fa6f 	bl	800019c <__aeabi_dsub>
 801acbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801acc0:	f10b 33ff 	add.w	r3, fp, #4294967295
 801acc4:	4313      	orrs	r3, r2
 801acc6:	4606      	mov	r6, r0
 801acc8:	460f      	mov	r7, r1
 801acca:	f040 81eb 	bne.w	801b0a4 <__ieee754_pow+0x6c4>
 801acce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ad88 <__ieee754_pow+0x3a8>
 801acd2:	e9dd 4500 	ldrd	r4, r5, [sp]
 801acd6:	2400      	movs	r4, #0
 801acd8:	4622      	mov	r2, r4
 801acda:	462b      	mov	r3, r5
 801acdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ace0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ace4:	f7e5 fa5a 	bl	800019c <__aeabi_dsub>
 801ace8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801acec:	f7e5 fc0e 	bl	800050c <__aeabi_dmul>
 801acf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801acf4:	4680      	mov	r8, r0
 801acf6:	4689      	mov	r9, r1
 801acf8:	4630      	mov	r0, r6
 801acfa:	4639      	mov	r1, r7
 801acfc:	f7e5 fc06 	bl	800050c <__aeabi_dmul>
 801ad00:	4602      	mov	r2, r0
 801ad02:	460b      	mov	r3, r1
 801ad04:	4640      	mov	r0, r8
 801ad06:	4649      	mov	r1, r9
 801ad08:	f7e5 fa4a 	bl	80001a0 <__adddf3>
 801ad0c:	4622      	mov	r2, r4
 801ad0e:	462b      	mov	r3, r5
 801ad10:	4680      	mov	r8, r0
 801ad12:	4689      	mov	r9, r1
 801ad14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ad18:	f7e5 fbf8 	bl	800050c <__aeabi_dmul>
 801ad1c:	460b      	mov	r3, r1
 801ad1e:	4604      	mov	r4, r0
 801ad20:	460d      	mov	r5, r1
 801ad22:	4602      	mov	r2, r0
 801ad24:	4649      	mov	r1, r9
 801ad26:	4640      	mov	r0, r8
 801ad28:	e9cd 4500 	strd	r4, r5, [sp]
 801ad2c:	f7e5 fa38 	bl	80001a0 <__adddf3>
 801ad30:	4b1c      	ldr	r3, [pc, #112]	; (801ada4 <__ieee754_pow+0x3c4>)
 801ad32:	4299      	cmp	r1, r3
 801ad34:	4606      	mov	r6, r0
 801ad36:	460f      	mov	r7, r1
 801ad38:	468b      	mov	fp, r1
 801ad3a:	f340 82f7 	ble.w	801b32c <__ieee754_pow+0x94c>
 801ad3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ad42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ad46:	4303      	orrs	r3, r0
 801ad48:	f000 81ea 	beq.w	801b120 <__ieee754_pow+0x740>
 801ad4c:	a310      	add	r3, pc, #64	; (adr r3, 801ad90 <__ieee754_pow+0x3b0>)
 801ad4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ad56:	f7e5 fbd9 	bl	800050c <__aeabi_dmul>
 801ad5a:	a30d      	add	r3, pc, #52	; (adr r3, 801ad90 <__ieee754_pow+0x3b0>)
 801ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad60:	e6d5      	b.n	801ab0e <__ieee754_pow+0x12e>
 801ad62:	bf00      	nop
 801ad64:	f3af 8000 	nop.w
 801ad68:	60000000 	.word	0x60000000
 801ad6c:	3ff71547 	.word	0x3ff71547
 801ad70:	f85ddf44 	.word	0xf85ddf44
 801ad74:	3e54ae0b 	.word	0x3e54ae0b
 801ad78:	55555555 	.word	0x55555555
 801ad7c:	3fd55555 	.word	0x3fd55555
 801ad80:	652b82fe 	.word	0x652b82fe
 801ad84:	3ff71547 	.word	0x3ff71547
 801ad88:	00000000 	.word	0x00000000
 801ad8c:	bff00000 	.word	0xbff00000
 801ad90:	8800759c 	.word	0x8800759c
 801ad94:	7e37e43c 	.word	0x7e37e43c
 801ad98:	3ff00000 	.word	0x3ff00000
 801ad9c:	3fd00000 	.word	0x3fd00000
 801ada0:	3fe00000 	.word	0x3fe00000
 801ada4:	408fffff 	.word	0x408fffff
 801ada8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801adac:	f04f 0200 	mov.w	r2, #0
 801adb0:	da05      	bge.n	801adbe <__ieee754_pow+0x3de>
 801adb2:	4bd3      	ldr	r3, [pc, #844]	; (801b100 <__ieee754_pow+0x720>)
 801adb4:	f7e5 fbaa 	bl	800050c <__aeabi_dmul>
 801adb8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801adbc:	460c      	mov	r4, r1
 801adbe:	1523      	asrs	r3, r4, #20
 801adc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801adc4:	4413      	add	r3, r2
 801adc6:	9309      	str	r3, [sp, #36]	; 0x24
 801adc8:	4bce      	ldr	r3, [pc, #824]	; (801b104 <__ieee754_pow+0x724>)
 801adca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801adce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801add2:	429c      	cmp	r4, r3
 801add4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801add8:	dd08      	ble.n	801adec <__ieee754_pow+0x40c>
 801adda:	4bcb      	ldr	r3, [pc, #812]	; (801b108 <__ieee754_pow+0x728>)
 801addc:	429c      	cmp	r4, r3
 801adde:	f340 815e 	ble.w	801b09e <__ieee754_pow+0x6be>
 801ade2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ade4:	3301      	adds	r3, #1
 801ade6:	9309      	str	r3, [sp, #36]	; 0x24
 801ade8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801adec:	f04f 0a00 	mov.w	sl, #0
 801adf0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801adf4:	930c      	str	r3, [sp, #48]	; 0x30
 801adf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801adf8:	4bc4      	ldr	r3, [pc, #784]	; (801b10c <__ieee754_pow+0x72c>)
 801adfa:	4413      	add	r3, r2
 801adfc:	ed93 7b00 	vldr	d7, [r3]
 801ae00:	4629      	mov	r1, r5
 801ae02:	ec53 2b17 	vmov	r2, r3, d7
 801ae06:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ae0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801ae0e:	f7e5 f9c5 	bl	800019c <__aeabi_dsub>
 801ae12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ae16:	4606      	mov	r6, r0
 801ae18:	460f      	mov	r7, r1
 801ae1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ae1e:	f7e5 f9bf 	bl	80001a0 <__adddf3>
 801ae22:	4602      	mov	r2, r0
 801ae24:	460b      	mov	r3, r1
 801ae26:	2000      	movs	r0, #0
 801ae28:	49b9      	ldr	r1, [pc, #740]	; (801b110 <__ieee754_pow+0x730>)
 801ae2a:	f7e5 fc99 	bl	8000760 <__aeabi_ddiv>
 801ae2e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801ae32:	4602      	mov	r2, r0
 801ae34:	460b      	mov	r3, r1
 801ae36:	4630      	mov	r0, r6
 801ae38:	4639      	mov	r1, r7
 801ae3a:	f7e5 fb67 	bl	800050c <__aeabi_dmul>
 801ae3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ae42:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801ae46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801ae4a:	2300      	movs	r3, #0
 801ae4c:	9302      	str	r3, [sp, #8]
 801ae4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ae52:	106d      	asrs	r5, r5, #1
 801ae54:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801ae58:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801ae5c:	2200      	movs	r2, #0
 801ae5e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801ae62:	4640      	mov	r0, r8
 801ae64:	4649      	mov	r1, r9
 801ae66:	4614      	mov	r4, r2
 801ae68:	461d      	mov	r5, r3
 801ae6a:	f7e5 fb4f 	bl	800050c <__aeabi_dmul>
 801ae6e:	4602      	mov	r2, r0
 801ae70:	460b      	mov	r3, r1
 801ae72:	4630      	mov	r0, r6
 801ae74:	4639      	mov	r1, r7
 801ae76:	f7e5 f991 	bl	800019c <__aeabi_dsub>
 801ae7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ae7e:	4606      	mov	r6, r0
 801ae80:	460f      	mov	r7, r1
 801ae82:	4620      	mov	r0, r4
 801ae84:	4629      	mov	r1, r5
 801ae86:	f7e5 f989 	bl	800019c <__aeabi_dsub>
 801ae8a:	4602      	mov	r2, r0
 801ae8c:	460b      	mov	r3, r1
 801ae8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ae92:	f7e5 f983 	bl	800019c <__aeabi_dsub>
 801ae96:	4642      	mov	r2, r8
 801ae98:	464b      	mov	r3, r9
 801ae9a:	f7e5 fb37 	bl	800050c <__aeabi_dmul>
 801ae9e:	4602      	mov	r2, r0
 801aea0:	460b      	mov	r3, r1
 801aea2:	4630      	mov	r0, r6
 801aea4:	4639      	mov	r1, r7
 801aea6:	f7e5 f979 	bl	800019c <__aeabi_dsub>
 801aeaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801aeae:	f7e5 fb2d 	bl	800050c <__aeabi_dmul>
 801aeb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aeb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801aeba:	4610      	mov	r0, r2
 801aebc:	4619      	mov	r1, r3
 801aebe:	f7e5 fb25 	bl	800050c <__aeabi_dmul>
 801aec2:	a37b      	add	r3, pc, #492	; (adr r3, 801b0b0 <__ieee754_pow+0x6d0>)
 801aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aec8:	4604      	mov	r4, r0
 801aeca:	460d      	mov	r5, r1
 801aecc:	f7e5 fb1e 	bl	800050c <__aeabi_dmul>
 801aed0:	a379      	add	r3, pc, #484	; (adr r3, 801b0b8 <__ieee754_pow+0x6d8>)
 801aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aed6:	f7e5 f963 	bl	80001a0 <__adddf3>
 801aeda:	4622      	mov	r2, r4
 801aedc:	462b      	mov	r3, r5
 801aede:	f7e5 fb15 	bl	800050c <__aeabi_dmul>
 801aee2:	a377      	add	r3, pc, #476	; (adr r3, 801b0c0 <__ieee754_pow+0x6e0>)
 801aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aee8:	f7e5 f95a 	bl	80001a0 <__adddf3>
 801aeec:	4622      	mov	r2, r4
 801aeee:	462b      	mov	r3, r5
 801aef0:	f7e5 fb0c 	bl	800050c <__aeabi_dmul>
 801aef4:	a374      	add	r3, pc, #464	; (adr r3, 801b0c8 <__ieee754_pow+0x6e8>)
 801aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aefa:	f7e5 f951 	bl	80001a0 <__adddf3>
 801aefe:	4622      	mov	r2, r4
 801af00:	462b      	mov	r3, r5
 801af02:	f7e5 fb03 	bl	800050c <__aeabi_dmul>
 801af06:	a372      	add	r3, pc, #456	; (adr r3, 801b0d0 <__ieee754_pow+0x6f0>)
 801af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af0c:	f7e5 f948 	bl	80001a0 <__adddf3>
 801af10:	4622      	mov	r2, r4
 801af12:	462b      	mov	r3, r5
 801af14:	f7e5 fafa 	bl	800050c <__aeabi_dmul>
 801af18:	a36f      	add	r3, pc, #444	; (adr r3, 801b0d8 <__ieee754_pow+0x6f8>)
 801af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af1e:	f7e5 f93f 	bl	80001a0 <__adddf3>
 801af22:	4622      	mov	r2, r4
 801af24:	4606      	mov	r6, r0
 801af26:	460f      	mov	r7, r1
 801af28:	462b      	mov	r3, r5
 801af2a:	4620      	mov	r0, r4
 801af2c:	4629      	mov	r1, r5
 801af2e:	f7e5 faed 	bl	800050c <__aeabi_dmul>
 801af32:	4602      	mov	r2, r0
 801af34:	460b      	mov	r3, r1
 801af36:	4630      	mov	r0, r6
 801af38:	4639      	mov	r1, r7
 801af3a:	f7e5 fae7 	bl	800050c <__aeabi_dmul>
 801af3e:	4642      	mov	r2, r8
 801af40:	4604      	mov	r4, r0
 801af42:	460d      	mov	r5, r1
 801af44:	464b      	mov	r3, r9
 801af46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801af4a:	f7e5 f929 	bl	80001a0 <__adddf3>
 801af4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801af52:	f7e5 fadb 	bl	800050c <__aeabi_dmul>
 801af56:	4622      	mov	r2, r4
 801af58:	462b      	mov	r3, r5
 801af5a:	f7e5 f921 	bl	80001a0 <__adddf3>
 801af5e:	4642      	mov	r2, r8
 801af60:	4606      	mov	r6, r0
 801af62:	460f      	mov	r7, r1
 801af64:	464b      	mov	r3, r9
 801af66:	4640      	mov	r0, r8
 801af68:	4649      	mov	r1, r9
 801af6a:	f7e5 facf 	bl	800050c <__aeabi_dmul>
 801af6e:	2200      	movs	r2, #0
 801af70:	4b68      	ldr	r3, [pc, #416]	; (801b114 <__ieee754_pow+0x734>)
 801af72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801af76:	f7e5 f913 	bl	80001a0 <__adddf3>
 801af7a:	4632      	mov	r2, r6
 801af7c:	463b      	mov	r3, r7
 801af7e:	f7e5 f90f 	bl	80001a0 <__adddf3>
 801af82:	9802      	ldr	r0, [sp, #8]
 801af84:	460d      	mov	r5, r1
 801af86:	4604      	mov	r4, r0
 801af88:	4602      	mov	r2, r0
 801af8a:	460b      	mov	r3, r1
 801af8c:	4640      	mov	r0, r8
 801af8e:	4649      	mov	r1, r9
 801af90:	f7e5 fabc 	bl	800050c <__aeabi_dmul>
 801af94:	2200      	movs	r2, #0
 801af96:	4680      	mov	r8, r0
 801af98:	4689      	mov	r9, r1
 801af9a:	4b5e      	ldr	r3, [pc, #376]	; (801b114 <__ieee754_pow+0x734>)
 801af9c:	4620      	mov	r0, r4
 801af9e:	4629      	mov	r1, r5
 801afa0:	f7e5 f8fc 	bl	800019c <__aeabi_dsub>
 801afa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801afa8:	f7e5 f8f8 	bl	800019c <__aeabi_dsub>
 801afac:	4602      	mov	r2, r0
 801afae:	460b      	mov	r3, r1
 801afb0:	4630      	mov	r0, r6
 801afb2:	4639      	mov	r1, r7
 801afb4:	f7e5 f8f2 	bl	800019c <__aeabi_dsub>
 801afb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801afbc:	f7e5 faa6 	bl	800050c <__aeabi_dmul>
 801afc0:	4622      	mov	r2, r4
 801afc2:	4606      	mov	r6, r0
 801afc4:	460f      	mov	r7, r1
 801afc6:	462b      	mov	r3, r5
 801afc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801afcc:	f7e5 fa9e 	bl	800050c <__aeabi_dmul>
 801afd0:	4602      	mov	r2, r0
 801afd2:	460b      	mov	r3, r1
 801afd4:	4630      	mov	r0, r6
 801afd6:	4639      	mov	r1, r7
 801afd8:	f7e5 f8e2 	bl	80001a0 <__adddf3>
 801afdc:	4606      	mov	r6, r0
 801afde:	460f      	mov	r7, r1
 801afe0:	4602      	mov	r2, r0
 801afe2:	460b      	mov	r3, r1
 801afe4:	4640      	mov	r0, r8
 801afe6:	4649      	mov	r1, r9
 801afe8:	f7e5 f8da 	bl	80001a0 <__adddf3>
 801afec:	9802      	ldr	r0, [sp, #8]
 801afee:	a33c      	add	r3, pc, #240	; (adr r3, 801b0e0 <__ieee754_pow+0x700>)
 801aff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aff4:	4604      	mov	r4, r0
 801aff6:	460d      	mov	r5, r1
 801aff8:	f7e5 fa88 	bl	800050c <__aeabi_dmul>
 801affc:	4642      	mov	r2, r8
 801affe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b002:	464b      	mov	r3, r9
 801b004:	4620      	mov	r0, r4
 801b006:	4629      	mov	r1, r5
 801b008:	f7e5 f8c8 	bl	800019c <__aeabi_dsub>
 801b00c:	4602      	mov	r2, r0
 801b00e:	460b      	mov	r3, r1
 801b010:	4630      	mov	r0, r6
 801b012:	4639      	mov	r1, r7
 801b014:	f7e5 f8c2 	bl	800019c <__aeabi_dsub>
 801b018:	a333      	add	r3, pc, #204	; (adr r3, 801b0e8 <__ieee754_pow+0x708>)
 801b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b01e:	f7e5 fa75 	bl	800050c <__aeabi_dmul>
 801b022:	a333      	add	r3, pc, #204	; (adr r3, 801b0f0 <__ieee754_pow+0x710>)
 801b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b028:	4606      	mov	r6, r0
 801b02a:	460f      	mov	r7, r1
 801b02c:	4620      	mov	r0, r4
 801b02e:	4629      	mov	r1, r5
 801b030:	f7e5 fa6c 	bl	800050c <__aeabi_dmul>
 801b034:	4602      	mov	r2, r0
 801b036:	460b      	mov	r3, r1
 801b038:	4630      	mov	r0, r6
 801b03a:	4639      	mov	r1, r7
 801b03c:	f7e5 f8b0 	bl	80001a0 <__adddf3>
 801b040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b042:	4b35      	ldr	r3, [pc, #212]	; (801b118 <__ieee754_pow+0x738>)
 801b044:	4413      	add	r3, r2
 801b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b04a:	f7e5 f8a9 	bl	80001a0 <__adddf3>
 801b04e:	4604      	mov	r4, r0
 801b050:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b052:	460d      	mov	r5, r1
 801b054:	f7e5 f9f0 	bl	8000438 <__aeabi_i2d>
 801b058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b05a:	4b30      	ldr	r3, [pc, #192]	; (801b11c <__ieee754_pow+0x73c>)
 801b05c:	4413      	add	r3, r2
 801b05e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b062:	4606      	mov	r6, r0
 801b064:	460f      	mov	r7, r1
 801b066:	4622      	mov	r2, r4
 801b068:	462b      	mov	r3, r5
 801b06a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b06e:	f7e5 f897 	bl	80001a0 <__adddf3>
 801b072:	4642      	mov	r2, r8
 801b074:	464b      	mov	r3, r9
 801b076:	f7e5 f893 	bl	80001a0 <__adddf3>
 801b07a:	4632      	mov	r2, r6
 801b07c:	463b      	mov	r3, r7
 801b07e:	f7e5 f88f 	bl	80001a0 <__adddf3>
 801b082:	9802      	ldr	r0, [sp, #8]
 801b084:	4632      	mov	r2, r6
 801b086:	463b      	mov	r3, r7
 801b088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b08c:	f7e5 f886 	bl	800019c <__aeabi_dsub>
 801b090:	4642      	mov	r2, r8
 801b092:	464b      	mov	r3, r9
 801b094:	f7e5 f882 	bl	800019c <__aeabi_dsub>
 801b098:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b09c:	e607      	b.n	801acae <__ieee754_pow+0x2ce>
 801b09e:	f04f 0a01 	mov.w	sl, #1
 801b0a2:	e6a5      	b.n	801adf0 <__ieee754_pow+0x410>
 801b0a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801b0f8 <__ieee754_pow+0x718>
 801b0a8:	e613      	b.n	801acd2 <__ieee754_pow+0x2f2>
 801b0aa:	bf00      	nop
 801b0ac:	f3af 8000 	nop.w
 801b0b0:	4a454eef 	.word	0x4a454eef
 801b0b4:	3fca7e28 	.word	0x3fca7e28
 801b0b8:	93c9db65 	.word	0x93c9db65
 801b0bc:	3fcd864a 	.word	0x3fcd864a
 801b0c0:	a91d4101 	.word	0xa91d4101
 801b0c4:	3fd17460 	.word	0x3fd17460
 801b0c8:	518f264d 	.word	0x518f264d
 801b0cc:	3fd55555 	.word	0x3fd55555
 801b0d0:	db6fabff 	.word	0xdb6fabff
 801b0d4:	3fdb6db6 	.word	0x3fdb6db6
 801b0d8:	33333303 	.word	0x33333303
 801b0dc:	3fe33333 	.word	0x3fe33333
 801b0e0:	e0000000 	.word	0xe0000000
 801b0e4:	3feec709 	.word	0x3feec709
 801b0e8:	dc3a03fd 	.word	0xdc3a03fd
 801b0ec:	3feec709 	.word	0x3feec709
 801b0f0:	145b01f5 	.word	0x145b01f5
 801b0f4:	be3e2fe0 	.word	0xbe3e2fe0
 801b0f8:	00000000 	.word	0x00000000
 801b0fc:	3ff00000 	.word	0x3ff00000
 801b100:	43400000 	.word	0x43400000
 801b104:	0003988e 	.word	0x0003988e
 801b108:	000bb679 	.word	0x000bb679
 801b10c:	0801ca40 	.word	0x0801ca40
 801b110:	3ff00000 	.word	0x3ff00000
 801b114:	40080000 	.word	0x40080000
 801b118:	0801ca60 	.word	0x0801ca60
 801b11c:	0801ca50 	.word	0x0801ca50
 801b120:	a3b4      	add	r3, pc, #720	; (adr r3, 801b3f4 <__ieee754_pow+0xa14>)
 801b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b126:	4640      	mov	r0, r8
 801b128:	4649      	mov	r1, r9
 801b12a:	f7e5 f839 	bl	80001a0 <__adddf3>
 801b12e:	4622      	mov	r2, r4
 801b130:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b134:	462b      	mov	r3, r5
 801b136:	4630      	mov	r0, r6
 801b138:	4639      	mov	r1, r7
 801b13a:	f7e5 f82f 	bl	800019c <__aeabi_dsub>
 801b13e:	4602      	mov	r2, r0
 801b140:	460b      	mov	r3, r1
 801b142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b146:	f7e5 fc71 	bl	8000a2c <__aeabi_dcmpgt>
 801b14a:	2800      	cmp	r0, #0
 801b14c:	f47f adfe 	bne.w	801ad4c <__ieee754_pow+0x36c>
 801b150:	4aa3      	ldr	r2, [pc, #652]	; (801b3e0 <__ieee754_pow+0xa00>)
 801b152:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b156:	4293      	cmp	r3, r2
 801b158:	f340 810a 	ble.w	801b370 <__ieee754_pow+0x990>
 801b15c:	151b      	asrs	r3, r3, #20
 801b15e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801b162:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801b166:	fa4a f303 	asr.w	r3, sl, r3
 801b16a:	445b      	add	r3, fp
 801b16c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801b170:	4e9c      	ldr	r6, [pc, #624]	; (801b3e4 <__ieee754_pow+0xa04>)
 801b172:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801b176:	4116      	asrs	r6, r2
 801b178:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801b17c:	2000      	movs	r0, #0
 801b17e:	ea23 0106 	bic.w	r1, r3, r6
 801b182:	f1c2 0214 	rsb	r2, r2, #20
 801b186:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801b18a:	fa4a fa02 	asr.w	sl, sl, r2
 801b18e:	f1bb 0f00 	cmp.w	fp, #0
 801b192:	4602      	mov	r2, r0
 801b194:	460b      	mov	r3, r1
 801b196:	4620      	mov	r0, r4
 801b198:	4629      	mov	r1, r5
 801b19a:	bfb8      	it	lt
 801b19c:	f1ca 0a00 	rsblt	sl, sl, #0
 801b1a0:	f7e4 fffc 	bl	800019c <__aeabi_dsub>
 801b1a4:	e9cd 0100 	strd	r0, r1, [sp]
 801b1a8:	4642      	mov	r2, r8
 801b1aa:	464b      	mov	r3, r9
 801b1ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b1b0:	f7e4 fff6 	bl	80001a0 <__adddf3>
 801b1b4:	2000      	movs	r0, #0
 801b1b6:	a378      	add	r3, pc, #480	; (adr r3, 801b398 <__ieee754_pow+0x9b8>)
 801b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1bc:	4604      	mov	r4, r0
 801b1be:	460d      	mov	r5, r1
 801b1c0:	f7e5 f9a4 	bl	800050c <__aeabi_dmul>
 801b1c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b1c8:	4606      	mov	r6, r0
 801b1ca:	460f      	mov	r7, r1
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	4629      	mov	r1, r5
 801b1d0:	f7e4 ffe4 	bl	800019c <__aeabi_dsub>
 801b1d4:	4602      	mov	r2, r0
 801b1d6:	460b      	mov	r3, r1
 801b1d8:	4640      	mov	r0, r8
 801b1da:	4649      	mov	r1, r9
 801b1dc:	f7e4 ffde 	bl	800019c <__aeabi_dsub>
 801b1e0:	a36f      	add	r3, pc, #444	; (adr r3, 801b3a0 <__ieee754_pow+0x9c0>)
 801b1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e6:	f7e5 f991 	bl	800050c <__aeabi_dmul>
 801b1ea:	a36f      	add	r3, pc, #444	; (adr r3, 801b3a8 <__ieee754_pow+0x9c8>)
 801b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1f0:	4680      	mov	r8, r0
 801b1f2:	4689      	mov	r9, r1
 801b1f4:	4620      	mov	r0, r4
 801b1f6:	4629      	mov	r1, r5
 801b1f8:	f7e5 f988 	bl	800050c <__aeabi_dmul>
 801b1fc:	4602      	mov	r2, r0
 801b1fe:	460b      	mov	r3, r1
 801b200:	4640      	mov	r0, r8
 801b202:	4649      	mov	r1, r9
 801b204:	f7e4 ffcc 	bl	80001a0 <__adddf3>
 801b208:	4604      	mov	r4, r0
 801b20a:	460d      	mov	r5, r1
 801b20c:	4602      	mov	r2, r0
 801b20e:	460b      	mov	r3, r1
 801b210:	4630      	mov	r0, r6
 801b212:	4639      	mov	r1, r7
 801b214:	f7e4 ffc4 	bl	80001a0 <__adddf3>
 801b218:	4632      	mov	r2, r6
 801b21a:	463b      	mov	r3, r7
 801b21c:	4680      	mov	r8, r0
 801b21e:	4689      	mov	r9, r1
 801b220:	f7e4 ffbc 	bl	800019c <__aeabi_dsub>
 801b224:	4602      	mov	r2, r0
 801b226:	460b      	mov	r3, r1
 801b228:	4620      	mov	r0, r4
 801b22a:	4629      	mov	r1, r5
 801b22c:	f7e4 ffb6 	bl	800019c <__aeabi_dsub>
 801b230:	4642      	mov	r2, r8
 801b232:	4606      	mov	r6, r0
 801b234:	460f      	mov	r7, r1
 801b236:	464b      	mov	r3, r9
 801b238:	4640      	mov	r0, r8
 801b23a:	4649      	mov	r1, r9
 801b23c:	f7e5 f966 	bl	800050c <__aeabi_dmul>
 801b240:	a35b      	add	r3, pc, #364	; (adr r3, 801b3b0 <__ieee754_pow+0x9d0>)
 801b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b246:	4604      	mov	r4, r0
 801b248:	460d      	mov	r5, r1
 801b24a:	f7e5 f95f 	bl	800050c <__aeabi_dmul>
 801b24e:	a35a      	add	r3, pc, #360	; (adr r3, 801b3b8 <__ieee754_pow+0x9d8>)
 801b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b254:	f7e4 ffa2 	bl	800019c <__aeabi_dsub>
 801b258:	4622      	mov	r2, r4
 801b25a:	462b      	mov	r3, r5
 801b25c:	f7e5 f956 	bl	800050c <__aeabi_dmul>
 801b260:	a357      	add	r3, pc, #348	; (adr r3, 801b3c0 <__ieee754_pow+0x9e0>)
 801b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b266:	f7e4 ff9b 	bl	80001a0 <__adddf3>
 801b26a:	4622      	mov	r2, r4
 801b26c:	462b      	mov	r3, r5
 801b26e:	f7e5 f94d 	bl	800050c <__aeabi_dmul>
 801b272:	a355      	add	r3, pc, #340	; (adr r3, 801b3c8 <__ieee754_pow+0x9e8>)
 801b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b278:	f7e4 ff90 	bl	800019c <__aeabi_dsub>
 801b27c:	4622      	mov	r2, r4
 801b27e:	462b      	mov	r3, r5
 801b280:	f7e5 f944 	bl	800050c <__aeabi_dmul>
 801b284:	a352      	add	r3, pc, #328	; (adr r3, 801b3d0 <__ieee754_pow+0x9f0>)
 801b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b28a:	f7e4 ff89 	bl	80001a0 <__adddf3>
 801b28e:	4622      	mov	r2, r4
 801b290:	462b      	mov	r3, r5
 801b292:	f7e5 f93b 	bl	800050c <__aeabi_dmul>
 801b296:	4602      	mov	r2, r0
 801b298:	460b      	mov	r3, r1
 801b29a:	4640      	mov	r0, r8
 801b29c:	4649      	mov	r1, r9
 801b29e:	f7e4 ff7d 	bl	800019c <__aeabi_dsub>
 801b2a2:	4604      	mov	r4, r0
 801b2a4:	460d      	mov	r5, r1
 801b2a6:	4602      	mov	r2, r0
 801b2a8:	460b      	mov	r3, r1
 801b2aa:	4640      	mov	r0, r8
 801b2ac:	4649      	mov	r1, r9
 801b2ae:	f7e5 f92d 	bl	800050c <__aeabi_dmul>
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	e9cd 0100 	strd	r0, r1, [sp]
 801b2b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b2bc:	4620      	mov	r0, r4
 801b2be:	4629      	mov	r1, r5
 801b2c0:	f7e4 ff6c 	bl	800019c <__aeabi_dsub>
 801b2c4:	4602      	mov	r2, r0
 801b2c6:	460b      	mov	r3, r1
 801b2c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b2cc:	f7e5 fa48 	bl	8000760 <__aeabi_ddiv>
 801b2d0:	4632      	mov	r2, r6
 801b2d2:	4604      	mov	r4, r0
 801b2d4:	460d      	mov	r5, r1
 801b2d6:	463b      	mov	r3, r7
 801b2d8:	4640      	mov	r0, r8
 801b2da:	4649      	mov	r1, r9
 801b2dc:	f7e5 f916 	bl	800050c <__aeabi_dmul>
 801b2e0:	4632      	mov	r2, r6
 801b2e2:	463b      	mov	r3, r7
 801b2e4:	f7e4 ff5c 	bl	80001a0 <__adddf3>
 801b2e8:	4602      	mov	r2, r0
 801b2ea:	460b      	mov	r3, r1
 801b2ec:	4620      	mov	r0, r4
 801b2ee:	4629      	mov	r1, r5
 801b2f0:	f7e4 ff54 	bl	800019c <__aeabi_dsub>
 801b2f4:	4642      	mov	r2, r8
 801b2f6:	464b      	mov	r3, r9
 801b2f8:	f7e4 ff50 	bl	800019c <__aeabi_dsub>
 801b2fc:	4602      	mov	r2, r0
 801b2fe:	460b      	mov	r3, r1
 801b300:	2000      	movs	r0, #0
 801b302:	4939      	ldr	r1, [pc, #228]	; (801b3e8 <__ieee754_pow+0xa08>)
 801b304:	f7e4 ff4a 	bl	800019c <__aeabi_dsub>
 801b308:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801b30c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801b310:	4602      	mov	r2, r0
 801b312:	460b      	mov	r3, r1
 801b314:	da2f      	bge.n	801b376 <__ieee754_pow+0x996>
 801b316:	4650      	mov	r0, sl
 801b318:	ec43 2b10 	vmov	d0, r2, r3
 801b31c:	f000 f9c0 	bl	801b6a0 <scalbn>
 801b320:	ec51 0b10 	vmov	r0, r1, d0
 801b324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b328:	f7ff bbf1 	b.w	801ab0e <__ieee754_pow+0x12e>
 801b32c:	4b2f      	ldr	r3, [pc, #188]	; (801b3ec <__ieee754_pow+0xa0c>)
 801b32e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b332:	429e      	cmp	r6, r3
 801b334:	f77f af0c 	ble.w	801b150 <__ieee754_pow+0x770>
 801b338:	4b2d      	ldr	r3, [pc, #180]	; (801b3f0 <__ieee754_pow+0xa10>)
 801b33a:	440b      	add	r3, r1
 801b33c:	4303      	orrs	r3, r0
 801b33e:	d00b      	beq.n	801b358 <__ieee754_pow+0x978>
 801b340:	a325      	add	r3, pc, #148	; (adr r3, 801b3d8 <__ieee754_pow+0x9f8>)
 801b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b34a:	f7e5 f8df 	bl	800050c <__aeabi_dmul>
 801b34e:	a322      	add	r3, pc, #136	; (adr r3, 801b3d8 <__ieee754_pow+0x9f8>)
 801b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b354:	f7ff bbdb 	b.w	801ab0e <__ieee754_pow+0x12e>
 801b358:	4622      	mov	r2, r4
 801b35a:	462b      	mov	r3, r5
 801b35c:	f7e4 ff1e 	bl	800019c <__aeabi_dsub>
 801b360:	4642      	mov	r2, r8
 801b362:	464b      	mov	r3, r9
 801b364:	f7e5 fb58 	bl	8000a18 <__aeabi_dcmpge>
 801b368:	2800      	cmp	r0, #0
 801b36a:	f43f aef1 	beq.w	801b150 <__ieee754_pow+0x770>
 801b36e:	e7e7      	b.n	801b340 <__ieee754_pow+0x960>
 801b370:	f04f 0a00 	mov.w	sl, #0
 801b374:	e718      	b.n	801b1a8 <__ieee754_pow+0x7c8>
 801b376:	4621      	mov	r1, r4
 801b378:	e7d4      	b.n	801b324 <__ieee754_pow+0x944>
 801b37a:	2000      	movs	r0, #0
 801b37c:	491a      	ldr	r1, [pc, #104]	; (801b3e8 <__ieee754_pow+0xa08>)
 801b37e:	f7ff bb8f 	b.w	801aaa0 <__ieee754_pow+0xc0>
 801b382:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b386:	f7ff bb8b 	b.w	801aaa0 <__ieee754_pow+0xc0>
 801b38a:	4630      	mov	r0, r6
 801b38c:	4639      	mov	r1, r7
 801b38e:	f7ff bb87 	b.w	801aaa0 <__ieee754_pow+0xc0>
 801b392:	4693      	mov	fp, r2
 801b394:	f7ff bb98 	b.w	801aac8 <__ieee754_pow+0xe8>
 801b398:	00000000 	.word	0x00000000
 801b39c:	3fe62e43 	.word	0x3fe62e43
 801b3a0:	fefa39ef 	.word	0xfefa39ef
 801b3a4:	3fe62e42 	.word	0x3fe62e42
 801b3a8:	0ca86c39 	.word	0x0ca86c39
 801b3ac:	be205c61 	.word	0xbe205c61
 801b3b0:	72bea4d0 	.word	0x72bea4d0
 801b3b4:	3e663769 	.word	0x3e663769
 801b3b8:	c5d26bf1 	.word	0xc5d26bf1
 801b3bc:	3ebbbd41 	.word	0x3ebbbd41
 801b3c0:	af25de2c 	.word	0xaf25de2c
 801b3c4:	3f11566a 	.word	0x3f11566a
 801b3c8:	16bebd93 	.word	0x16bebd93
 801b3cc:	3f66c16c 	.word	0x3f66c16c
 801b3d0:	5555553e 	.word	0x5555553e
 801b3d4:	3fc55555 	.word	0x3fc55555
 801b3d8:	c2f8f359 	.word	0xc2f8f359
 801b3dc:	01a56e1f 	.word	0x01a56e1f
 801b3e0:	3fe00000 	.word	0x3fe00000
 801b3e4:	000fffff 	.word	0x000fffff
 801b3e8:	3ff00000 	.word	0x3ff00000
 801b3ec:	4090cbff 	.word	0x4090cbff
 801b3f0:	3f6f3400 	.word	0x3f6f3400
 801b3f4:	652b82fe 	.word	0x652b82fe
 801b3f8:	3c971547 	.word	0x3c971547

0801b3fc <__ieee754_sqrt>:
 801b3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b400:	4955      	ldr	r1, [pc, #340]	; (801b558 <__ieee754_sqrt+0x15c>)
 801b402:	ec55 4b10 	vmov	r4, r5, d0
 801b406:	43a9      	bics	r1, r5
 801b408:	462b      	mov	r3, r5
 801b40a:	462a      	mov	r2, r5
 801b40c:	d112      	bne.n	801b434 <__ieee754_sqrt+0x38>
 801b40e:	ee10 2a10 	vmov	r2, s0
 801b412:	ee10 0a10 	vmov	r0, s0
 801b416:	4629      	mov	r1, r5
 801b418:	f7e5 f878 	bl	800050c <__aeabi_dmul>
 801b41c:	4602      	mov	r2, r0
 801b41e:	460b      	mov	r3, r1
 801b420:	4620      	mov	r0, r4
 801b422:	4629      	mov	r1, r5
 801b424:	f7e4 febc 	bl	80001a0 <__adddf3>
 801b428:	4604      	mov	r4, r0
 801b42a:	460d      	mov	r5, r1
 801b42c:	ec45 4b10 	vmov	d0, r4, r5
 801b430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b434:	2d00      	cmp	r5, #0
 801b436:	ee10 0a10 	vmov	r0, s0
 801b43a:	4621      	mov	r1, r4
 801b43c:	dc0f      	bgt.n	801b45e <__ieee754_sqrt+0x62>
 801b43e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b442:	4330      	orrs	r0, r6
 801b444:	d0f2      	beq.n	801b42c <__ieee754_sqrt+0x30>
 801b446:	b155      	cbz	r5, 801b45e <__ieee754_sqrt+0x62>
 801b448:	ee10 2a10 	vmov	r2, s0
 801b44c:	4620      	mov	r0, r4
 801b44e:	4629      	mov	r1, r5
 801b450:	f7e4 fea4 	bl	800019c <__aeabi_dsub>
 801b454:	4602      	mov	r2, r0
 801b456:	460b      	mov	r3, r1
 801b458:	f7e5 f982 	bl	8000760 <__aeabi_ddiv>
 801b45c:	e7e4      	b.n	801b428 <__ieee754_sqrt+0x2c>
 801b45e:	151b      	asrs	r3, r3, #20
 801b460:	d073      	beq.n	801b54a <__ieee754_sqrt+0x14e>
 801b462:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b466:	07dd      	lsls	r5, r3, #31
 801b468:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b46c:	bf48      	it	mi
 801b46e:	0fc8      	lsrmi	r0, r1, #31
 801b470:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801b474:	bf44      	itt	mi
 801b476:	0049      	lslmi	r1, r1, #1
 801b478:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801b47c:	2500      	movs	r5, #0
 801b47e:	1058      	asrs	r0, r3, #1
 801b480:	0fcb      	lsrs	r3, r1, #31
 801b482:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801b486:	0049      	lsls	r1, r1, #1
 801b488:	2316      	movs	r3, #22
 801b48a:	462c      	mov	r4, r5
 801b48c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801b490:	19a7      	adds	r7, r4, r6
 801b492:	4297      	cmp	r7, r2
 801b494:	bfde      	ittt	le
 801b496:	19bc      	addle	r4, r7, r6
 801b498:	1bd2      	suble	r2, r2, r7
 801b49a:	19ad      	addle	r5, r5, r6
 801b49c:	0fcf      	lsrs	r7, r1, #31
 801b49e:	3b01      	subs	r3, #1
 801b4a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801b4a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b4a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b4ac:	d1f0      	bne.n	801b490 <__ieee754_sqrt+0x94>
 801b4ae:	f04f 0c20 	mov.w	ip, #32
 801b4b2:	469e      	mov	lr, r3
 801b4b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801b4b8:	42a2      	cmp	r2, r4
 801b4ba:	eb06 070e 	add.w	r7, r6, lr
 801b4be:	dc02      	bgt.n	801b4c6 <__ieee754_sqrt+0xca>
 801b4c0:	d112      	bne.n	801b4e8 <__ieee754_sqrt+0xec>
 801b4c2:	428f      	cmp	r7, r1
 801b4c4:	d810      	bhi.n	801b4e8 <__ieee754_sqrt+0xec>
 801b4c6:	2f00      	cmp	r7, #0
 801b4c8:	eb07 0e06 	add.w	lr, r7, r6
 801b4cc:	da42      	bge.n	801b554 <__ieee754_sqrt+0x158>
 801b4ce:	f1be 0f00 	cmp.w	lr, #0
 801b4d2:	db3f      	blt.n	801b554 <__ieee754_sqrt+0x158>
 801b4d4:	f104 0801 	add.w	r8, r4, #1
 801b4d8:	1b12      	subs	r2, r2, r4
 801b4da:	428f      	cmp	r7, r1
 801b4dc:	bf88      	it	hi
 801b4de:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b4e2:	1bc9      	subs	r1, r1, r7
 801b4e4:	4433      	add	r3, r6
 801b4e6:	4644      	mov	r4, r8
 801b4e8:	0052      	lsls	r2, r2, #1
 801b4ea:	f1bc 0c01 	subs.w	ip, ip, #1
 801b4ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801b4f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b4f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b4fa:	d1dd      	bne.n	801b4b8 <__ieee754_sqrt+0xbc>
 801b4fc:	430a      	orrs	r2, r1
 801b4fe:	d006      	beq.n	801b50e <__ieee754_sqrt+0x112>
 801b500:	1c5c      	adds	r4, r3, #1
 801b502:	bf13      	iteet	ne
 801b504:	3301      	addne	r3, #1
 801b506:	3501      	addeq	r5, #1
 801b508:	4663      	moveq	r3, ip
 801b50a:	f023 0301 	bicne.w	r3, r3, #1
 801b50e:	106a      	asrs	r2, r5, #1
 801b510:	085b      	lsrs	r3, r3, #1
 801b512:	07e9      	lsls	r1, r5, #31
 801b514:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801b518:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801b51c:	bf48      	it	mi
 801b51e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801b522:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801b526:	461c      	mov	r4, r3
 801b528:	e780      	b.n	801b42c <__ieee754_sqrt+0x30>
 801b52a:	0aca      	lsrs	r2, r1, #11
 801b52c:	3815      	subs	r0, #21
 801b52e:	0549      	lsls	r1, r1, #21
 801b530:	2a00      	cmp	r2, #0
 801b532:	d0fa      	beq.n	801b52a <__ieee754_sqrt+0x12e>
 801b534:	02d6      	lsls	r6, r2, #11
 801b536:	d50a      	bpl.n	801b54e <__ieee754_sqrt+0x152>
 801b538:	f1c3 0420 	rsb	r4, r3, #32
 801b53c:	fa21 f404 	lsr.w	r4, r1, r4
 801b540:	1e5d      	subs	r5, r3, #1
 801b542:	4099      	lsls	r1, r3
 801b544:	4322      	orrs	r2, r4
 801b546:	1b43      	subs	r3, r0, r5
 801b548:	e78b      	b.n	801b462 <__ieee754_sqrt+0x66>
 801b54a:	4618      	mov	r0, r3
 801b54c:	e7f0      	b.n	801b530 <__ieee754_sqrt+0x134>
 801b54e:	0052      	lsls	r2, r2, #1
 801b550:	3301      	adds	r3, #1
 801b552:	e7ef      	b.n	801b534 <__ieee754_sqrt+0x138>
 801b554:	46a0      	mov	r8, r4
 801b556:	e7bf      	b.n	801b4d8 <__ieee754_sqrt+0xdc>
 801b558:	7ff00000 	.word	0x7ff00000

0801b55c <__ieee754_sqrtf>:
 801b55c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801b560:	4770      	bx	lr

0801b562 <fabs>:
 801b562:	ec51 0b10 	vmov	r0, r1, d0
 801b566:	ee10 2a10 	vmov	r2, s0
 801b56a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b56e:	ec43 2b10 	vmov	d0, r2, r3
 801b572:	4770      	bx	lr

0801b574 <finite>:
 801b574:	ee10 3a90 	vmov	r3, s1
 801b578:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801b57c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801b580:	0fc0      	lsrs	r0, r0, #31
 801b582:	4770      	bx	lr

0801b584 <matherr>:
 801b584:	2000      	movs	r0, #0
 801b586:	4770      	bx	lr

0801b588 <nan>:
 801b588:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b590 <nan+0x8>
 801b58c:	4770      	bx	lr
 801b58e:	bf00      	nop
 801b590:	00000000 	.word	0x00000000
 801b594:	7ff80000 	.word	0x7ff80000

0801b598 <rint>:
 801b598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b59a:	ec51 0b10 	vmov	r0, r1, d0
 801b59e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b5a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801b5a6:	2e13      	cmp	r6, #19
 801b5a8:	460b      	mov	r3, r1
 801b5aa:	ee10 4a10 	vmov	r4, s0
 801b5ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801b5b2:	dc56      	bgt.n	801b662 <rint+0xca>
 801b5b4:	2e00      	cmp	r6, #0
 801b5b6:	da2b      	bge.n	801b610 <rint+0x78>
 801b5b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801b5bc:	4302      	orrs	r2, r0
 801b5be:	d023      	beq.n	801b608 <rint+0x70>
 801b5c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801b5c4:	4302      	orrs	r2, r0
 801b5c6:	4254      	negs	r4, r2
 801b5c8:	4314      	orrs	r4, r2
 801b5ca:	0c4b      	lsrs	r3, r1, #17
 801b5cc:	0b24      	lsrs	r4, r4, #12
 801b5ce:	045b      	lsls	r3, r3, #17
 801b5d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801b5d4:	ea44 0103 	orr.w	r1, r4, r3
 801b5d8:	460b      	mov	r3, r1
 801b5da:	492f      	ldr	r1, [pc, #188]	; (801b698 <rint+0x100>)
 801b5dc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801b5e0:	e9d1 6700 	ldrd	r6, r7, [r1]
 801b5e4:	4602      	mov	r2, r0
 801b5e6:	4639      	mov	r1, r7
 801b5e8:	4630      	mov	r0, r6
 801b5ea:	f7e4 fdd9 	bl	80001a0 <__adddf3>
 801b5ee:	e9cd 0100 	strd	r0, r1, [sp]
 801b5f2:	463b      	mov	r3, r7
 801b5f4:	4632      	mov	r2, r6
 801b5f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b5fa:	f7e4 fdcf 	bl	800019c <__aeabi_dsub>
 801b5fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b602:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801b606:	4639      	mov	r1, r7
 801b608:	ec41 0b10 	vmov	d0, r0, r1
 801b60c:	b003      	add	sp, #12
 801b60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b610:	4a22      	ldr	r2, [pc, #136]	; (801b69c <rint+0x104>)
 801b612:	4132      	asrs	r2, r6
 801b614:	ea01 0702 	and.w	r7, r1, r2
 801b618:	4307      	orrs	r7, r0
 801b61a:	d0f5      	beq.n	801b608 <rint+0x70>
 801b61c:	0852      	lsrs	r2, r2, #1
 801b61e:	4011      	ands	r1, r2
 801b620:	430c      	orrs	r4, r1
 801b622:	d00b      	beq.n	801b63c <rint+0xa4>
 801b624:	ea23 0202 	bic.w	r2, r3, r2
 801b628:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b62c:	2e13      	cmp	r6, #19
 801b62e:	fa43 f306 	asr.w	r3, r3, r6
 801b632:	bf0c      	ite	eq
 801b634:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801b638:	2400      	movne	r4, #0
 801b63a:	4313      	orrs	r3, r2
 801b63c:	4916      	ldr	r1, [pc, #88]	; (801b698 <rint+0x100>)
 801b63e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801b642:	4622      	mov	r2, r4
 801b644:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b648:	4620      	mov	r0, r4
 801b64a:	4629      	mov	r1, r5
 801b64c:	f7e4 fda8 	bl	80001a0 <__adddf3>
 801b650:	e9cd 0100 	strd	r0, r1, [sp]
 801b654:	4622      	mov	r2, r4
 801b656:	462b      	mov	r3, r5
 801b658:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b65c:	f7e4 fd9e 	bl	800019c <__aeabi_dsub>
 801b660:	e7d2      	b.n	801b608 <rint+0x70>
 801b662:	2e33      	cmp	r6, #51	; 0x33
 801b664:	dd07      	ble.n	801b676 <rint+0xde>
 801b666:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b66a:	d1cd      	bne.n	801b608 <rint+0x70>
 801b66c:	ee10 2a10 	vmov	r2, s0
 801b670:	f7e4 fd96 	bl	80001a0 <__adddf3>
 801b674:	e7c8      	b.n	801b608 <rint+0x70>
 801b676:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801b67a:	f04f 32ff 	mov.w	r2, #4294967295
 801b67e:	40f2      	lsrs	r2, r6
 801b680:	4210      	tst	r0, r2
 801b682:	d0c1      	beq.n	801b608 <rint+0x70>
 801b684:	0852      	lsrs	r2, r2, #1
 801b686:	4210      	tst	r0, r2
 801b688:	bf1f      	itttt	ne
 801b68a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801b68e:	ea20 0202 	bicne.w	r2, r0, r2
 801b692:	4134      	asrne	r4, r6
 801b694:	4314      	orrne	r4, r2
 801b696:	e7d1      	b.n	801b63c <rint+0xa4>
 801b698:	0801ca70 	.word	0x0801ca70
 801b69c:	000fffff 	.word	0x000fffff

0801b6a0 <scalbn>:
 801b6a0:	b570      	push	{r4, r5, r6, lr}
 801b6a2:	ec55 4b10 	vmov	r4, r5, d0
 801b6a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b6aa:	4606      	mov	r6, r0
 801b6ac:	462b      	mov	r3, r5
 801b6ae:	b9aa      	cbnz	r2, 801b6dc <scalbn+0x3c>
 801b6b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b6b4:	4323      	orrs	r3, r4
 801b6b6:	d03b      	beq.n	801b730 <scalbn+0x90>
 801b6b8:	4b31      	ldr	r3, [pc, #196]	; (801b780 <scalbn+0xe0>)
 801b6ba:	4629      	mov	r1, r5
 801b6bc:	2200      	movs	r2, #0
 801b6be:	ee10 0a10 	vmov	r0, s0
 801b6c2:	f7e4 ff23 	bl	800050c <__aeabi_dmul>
 801b6c6:	4b2f      	ldr	r3, [pc, #188]	; (801b784 <scalbn+0xe4>)
 801b6c8:	429e      	cmp	r6, r3
 801b6ca:	4604      	mov	r4, r0
 801b6cc:	460d      	mov	r5, r1
 801b6ce:	da12      	bge.n	801b6f6 <scalbn+0x56>
 801b6d0:	a327      	add	r3, pc, #156	; (adr r3, 801b770 <scalbn+0xd0>)
 801b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d6:	f7e4 ff19 	bl	800050c <__aeabi_dmul>
 801b6da:	e009      	b.n	801b6f0 <scalbn+0x50>
 801b6dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b6e0:	428a      	cmp	r2, r1
 801b6e2:	d10c      	bne.n	801b6fe <scalbn+0x5e>
 801b6e4:	ee10 2a10 	vmov	r2, s0
 801b6e8:	4620      	mov	r0, r4
 801b6ea:	4629      	mov	r1, r5
 801b6ec:	f7e4 fd58 	bl	80001a0 <__adddf3>
 801b6f0:	4604      	mov	r4, r0
 801b6f2:	460d      	mov	r5, r1
 801b6f4:	e01c      	b.n	801b730 <scalbn+0x90>
 801b6f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b6fa:	460b      	mov	r3, r1
 801b6fc:	3a36      	subs	r2, #54	; 0x36
 801b6fe:	4432      	add	r2, r6
 801b700:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b704:	428a      	cmp	r2, r1
 801b706:	dd0b      	ble.n	801b720 <scalbn+0x80>
 801b708:	ec45 4b11 	vmov	d1, r4, r5
 801b70c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b778 <scalbn+0xd8>
 801b710:	f000 f83c 	bl	801b78c <copysign>
 801b714:	a318      	add	r3, pc, #96	; (adr r3, 801b778 <scalbn+0xd8>)
 801b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b71a:	ec51 0b10 	vmov	r0, r1, d0
 801b71e:	e7da      	b.n	801b6d6 <scalbn+0x36>
 801b720:	2a00      	cmp	r2, #0
 801b722:	dd08      	ble.n	801b736 <scalbn+0x96>
 801b724:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b728:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b72c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b730:	ec45 4b10 	vmov	d0, r4, r5
 801b734:	bd70      	pop	{r4, r5, r6, pc}
 801b736:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b73a:	da0d      	bge.n	801b758 <scalbn+0xb8>
 801b73c:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b740:	429e      	cmp	r6, r3
 801b742:	ec45 4b11 	vmov	d1, r4, r5
 801b746:	dce1      	bgt.n	801b70c <scalbn+0x6c>
 801b748:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b770 <scalbn+0xd0>
 801b74c:	f000 f81e 	bl	801b78c <copysign>
 801b750:	a307      	add	r3, pc, #28	; (adr r3, 801b770 <scalbn+0xd0>)
 801b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b756:	e7e0      	b.n	801b71a <scalbn+0x7a>
 801b758:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b75c:	3236      	adds	r2, #54	; 0x36
 801b75e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b762:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b766:	4620      	mov	r0, r4
 801b768:	4629      	mov	r1, r5
 801b76a:	2200      	movs	r2, #0
 801b76c:	4b06      	ldr	r3, [pc, #24]	; (801b788 <scalbn+0xe8>)
 801b76e:	e7b2      	b.n	801b6d6 <scalbn+0x36>
 801b770:	c2f8f359 	.word	0xc2f8f359
 801b774:	01a56e1f 	.word	0x01a56e1f
 801b778:	8800759c 	.word	0x8800759c
 801b77c:	7e37e43c 	.word	0x7e37e43c
 801b780:	43500000 	.word	0x43500000
 801b784:	ffff3cb0 	.word	0xffff3cb0
 801b788:	3c900000 	.word	0x3c900000

0801b78c <copysign>:
 801b78c:	ec51 0b10 	vmov	r0, r1, d0
 801b790:	ee11 0a90 	vmov	r0, s3
 801b794:	ee10 2a10 	vmov	r2, s0
 801b798:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b79c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b7a0:	ea41 0300 	orr.w	r3, r1, r0
 801b7a4:	ec43 2b10 	vmov	d0, r2, r3
 801b7a8:	4770      	bx	lr
	...

0801b7ac <_init>:
 801b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7ae:	bf00      	nop
 801b7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7b2:	bc08      	pop	{r3}
 801b7b4:	469e      	mov	lr, r3
 801b7b6:	4770      	bx	lr

0801b7b8 <_fini>:
 801b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7ba:	bf00      	nop
 801b7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7be:	bc08      	pop	{r3}
 801b7c0:	469e      	mov	lr, r3
 801b7c2:	4770      	bx	lr
