
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001779c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b0  080178e0  080178e0  000278e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018a90  08018a90  00028a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018a98  08018a98  00028a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018a9c  08018a9c  00028a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000134  20000004  08018aa0  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000138  08018bd4  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001d4  08018c6d  000301d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000285a0  200001e8  08018c7e  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20028788  08018c7e  00038788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e5  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   000619bd  00000000  00000000  00030215  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000ad5c  00000000  00000000  00091bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003b80  00000000  00000000  0009c930  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000036a8  00000000  00000000  000a04b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000266f2  00000000  00000000  000a3b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000181fe  00000000  00000000  000ca24a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  000e2448  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f600  00000000  00000000  000e2538  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  000f1b38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	080178c4 	.word	0x080178c4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	080178c4 	.word	0x080178c4

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ec0:	f004 feea 	bl	8005c98 <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f003 fa9d 	bl	8004408 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_ADC1_Init+0xcc>)
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eda:	237f      	movs	r3, #127	; 0x7f
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eec:	f005 f900 	bl	80060f0 <HAL_ADC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000ef6:	f003 fa87 	bl	8004408 <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200277a4 	.word	0x200277a4
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	14f00020 	.word	0x14f00020

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_ADC_MspInit+0xa4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d13c      	bne.n	8000fac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f36:	f7ff ff69 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff66 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f006 fd15 	bl	8007984 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f62:	2205      	movs	r2, #5
 8000f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f86:	2220      	movs	r2, #32
 8000f88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f92:	f006 f9c7 	bl	8007324 <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000f9c:	f003 fa34 	bl	8004408 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	20027808 	.word	0x20027808
 8000fbc:	40020008 	.word	0x40020008

08000fc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000fec:	f000 f80a 	bl	8001004 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ff0:	4903      	ldr	r1, [pc, #12]	; (8001000 <APPE_Init+0x18>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 f948 	bl	8003288 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ff8:	f000 f80e 	bl	8001018 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000ffc:	bf00      	nop
}
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200284ec 	.word	0x200284ec

08001004 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800100c:	f7ff ffd8 	bl	8000fc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001010:	f015 f86c 	bl	80160ec <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}

08001018 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800101e:	f013 fd13 	bl	8014a48 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001022:	2000      	movs	r0, #0
 8001024:	f00e f8da 	bl	800f1dc <osMutexNew>
 8001028:	4602      	mov	r2, r0
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <appe_Tl_Init+0x70>)
 800102c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00e fa1a 	bl	800f46c <osSemaphoreNew>
 8001038:	4602      	mov	r2, r0
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <appe_Tl_Init+0x74>)
 800103c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <appe_Tl_Init+0x78>)
 8001040:	2100      	movs	r1, #0
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <appe_Tl_Init+0x7c>)
 8001044:	f00d fd86 	bl	800eb54 <osThreadNew>
 8001048:	4602      	mov	r2, r0
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <appe_Tl_Init+0x80>)
 800104c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <appe_Tl_Init+0x84>)
 8001050:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <appe_Tl_Init+0x88>)
 8001054:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <appe_Tl_Init+0x8c>)
 800105c:	f013 f9ce 	bl	80143fc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <appe_Tl_Init+0x90>)
 8001066:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <appe_Tl_Init+0x94>)
 800106a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800106c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001070:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f013 fe24 	bl	8014cc4 <TL_MM_Init>

  TL_Enable();
 800107c:	f013 fcdd 	bl	8014a3a <TL_Enable>

  return;
 8001080:	bf00      	nop
}
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20027868 	.word	0x20027868
 800108c:	20027880 	.word	0x20027880
 8001090:	08017d70 	.word	0x08017d70
 8001094:	08001199 	.word	0x08001199
 8001098:	2002786c 	.word	0x2002786c
 800109c:	20030600 	.word	0x20030600
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	2003070c 	.word	0x2003070c
 80010ac:	200300c4 	.word	0x200300c4

080010b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <APPE_SysStatusNot+0x16>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d008      	beq.n	80010d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010c4:	e00d      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00e f91e 	bl	800f310 <osMutexAcquire>
      break;
 80010d4:	e005      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00e f976 	bl	800f3cc <osMutexRelease>
      break;
 80010e0:	bf00      	nop
  }
  return;
 80010e2:	bf00      	nop
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20027868 	.word	0x20027868

080010f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	330b      	adds	r3, #11
 80010fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800110a:	d004      	beq.n	8001116 <APPE_SysUserEvtRx+0x26>
 800110c:	f249 2201 	movw	r2, #37377	; 0x9201
 8001110:	4293      	cmp	r3, r2
 8001112:	d003      	beq.n	800111c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001114:	e008      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001116:	f000 f833 	bl	8001180 <APPE_SysEvtReadyProcessing>
         break;
 800111a:	e005      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f805 	bl	8001130 <APPE_SysEvtError>
         break;
 8001126:	bf00      	nop
  }
  return;
 8001128:	bf00      	nop
}
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b7d      	cmp	r3, #125	; 0x7d
 800113e:	d002      	beq.n	8001146 <APPE_SysEvtError+0x16>
 8001140:	2b7e      	cmp	r3, #126	; 0x7e
 8001142:	d006      	beq.n	8001152 <APPE_SysEvtError+0x22>
 8001144:	e00b      	b.n	800115e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <APPE_SysEvtError+0x44>)
 8001148:	2101      	movs	r1, #1
 800114a:	2000      	movs	r0, #0
 800114c:	f004 f812 	bl	8005174 <logApplication>
       break;
 8001150:	e00c      	b.n	800116c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <APPE_SysEvtError+0x48>)
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f004 f80c 	bl	8005174 <logApplication>
       break;
 800115c:	e006      	b.n	800116c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <APPE_SysEvtError+0x4c>)
 8001162:	2101      	movs	r1, #1
 8001164:	2000      	movs	r0, #0
 8001166:	f004 f805 	bl	8005174 <logApplication>
       break;
 800116a:	bf00      	nop
  }
  return;
 800116c:	bf00      	nop
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	080178f8 	.word	0x080178f8
 8001178:	0801791c 	.word	0x0801791c
 800117c:	0801793c 	.word	0x0801793c

08001180 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001184:	f013 fe0e 	bl	8014da4 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001188:	f013 fe38 	bl	8014dfc <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800118c:	2100      	movs	r1, #0
 800118e:	2001      	movs	r0, #1
 8001190:	f014 ffbe 	bl	8016110 <UTIL_LPM_SetOffMode>
  return;
 8001194:	bf00      	nop
}
 8001196:	bd80      	pop	{r7, pc}

08001198 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	2100      	movs	r1, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	f00d fe32 	bl	800ee10 <osThreadFlagsWait>
     shci_user_evt_proc();
 80011ac:	f013 f942 	bl	8014434 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011b0:	e7f6      	b.n	80011a0 <ShciUserEvtProcess+0x8>
	...

080011b4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <shci_notify_asynch_evt+0x1c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00d fd72 	bl	800ecac <osThreadFlagsSet>
  return;
 80011c8:	bf00      	nop
}
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2002786c 	.word	0x2002786c

080011d4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <shci_cmd_resp_release+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00e fa47 	bl	800f674 <osSemaphoreRelease>
  return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20027880 	.word	0x20027880

080011f4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <shci_cmd_resp_wait+0x20>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	4618      	mov	r0, r3
 8001206:	f00e f9cf 	bl	800f5a8 <osSemaphoreAcquire>
  return;
 800120a:	bf00      	nop
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20027880 	.word	0x20027880

08001218 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f013 fd8b 	bl	8014d3c <TL_MM_EvtDone>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001240:	f004 faf0 	bl	8005824 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}

0800124a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <vApplicationStackOverflowHook+0x24>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <vApplicationStackOverflowHook+0x24>)
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000204 	.word	0x20000204

08001280 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001290:	701a      	strb	r2, [r3, #0]

}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000204 	.word	0x20000204

080012a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012a4:	4a5c      	ldr	r2, [pc, #368]	; (8001418 <MX_FREERTOS_Init+0x178>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	2001      	movs	r0, #1
 80012aa:	f00e f8df 	bl	800f46c <osSemaphoreNew>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b5a      	ldr	r3, [pc, #360]	; (800141c <MX_FREERTOS_Init+0x17c>)
 80012b2:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80012b4:	4a5a      	ldr	r2, [pc, #360]	; (8001420 <MX_FREERTOS_Init+0x180>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	2001      	movs	r0, #1
 80012ba:	f00e f8d7 	bl	800f46c <osSemaphoreNew>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b58      	ldr	r3, [pc, #352]	; (8001424 <MX_FREERTOS_Init+0x184>)
 80012c2:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80012c4:	4a58      	ldr	r2, [pc, #352]	; (8001428 <MX_FREERTOS_Init+0x188>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	f00e f8cf 	bl	800f46c <osSemaphoreNew>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b56      	ldr	r3, [pc, #344]	; (800142c <MX_FREERTOS_Init+0x18c>)
 80012d2:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, NULL, &viveTimer_attributes);
 80012d4:	4b56      	ldr	r3, [pc, #344]	; (8001430 <MX_FREERTOS_Init+0x190>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	4856      	ldr	r0, [pc, #344]	; (8001434 <MX_FREERTOS_Init+0x194>)
 80012dc:	f00d fe70 	bl	800efc0 <osTimerNew>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b55      	ldr	r3, [pc, #340]	; (8001438 <MX_FREERTOS_Init+0x198>)
 80012e4:	601a      	str	r2, [r3, #0]
//  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 80012e6:	4a55      	ldr	r2, [pc, #340]	; (800143c <MX_FREERTOS_Init+0x19c>)
 80012e8:	216c      	movs	r1, #108	; 0x6c
 80012ea:	200a      	movs	r0, #10
 80012ec:	f00e fa1a 	bl	800f724 <osMessageQueueNew>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b53      	ldr	r3, [pc, #332]	; (8001440 <MX_FREERTOS_Init+0x1a0>)
 80012f4:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 80012f6:	4a53      	ldr	r2, [pc, #332]	; (8001444 <MX_FREERTOS_Init+0x1a4>)
 80012f8:	2104      	movs	r1, #4
 80012fa:	2003      	movs	r0, #3
 80012fc:	f00e fa12 	bl	800f724 <osMessageQueueNew>
 8001300:	4602      	mov	r2, r0
 8001302:	4b51      	ldr	r3, [pc, #324]	; (8001448 <MX_FREERTOS_Init+0x1a8>)
 8001304:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 8001306:	4a51      	ldr	r2, [pc, #324]	; (800144c <MX_FREERTOS_Init+0x1ac>)
 8001308:	2106      	movs	r1, #6
 800130a:	2004      	movs	r0, #4
 800130c:	f00e fa0a 	bl	800f724 <osMessageQueueNew>
 8001310:	4602      	mov	r2, r0
 8001312:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <MX_FREERTOS_Init+0x1b0>)
 8001314:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 8001316:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <MX_FREERTOS_Init+0x1b4>)
 8001318:	2118      	movs	r1, #24
 800131a:	200a      	movs	r0, #10
 800131c:	f00e fa02 	bl	800f724 <osMessageQueueNew>
 8001320:	4602      	mov	r2, r0
 8001322:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <MX_FREERTOS_Init+0x1b8>)
 8001324:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 8001326:	4a4d      	ldr	r2, [pc, #308]	; (800145c <MX_FREERTOS_Init+0x1bc>)
 8001328:	2128      	movs	r1, #40	; 0x28
 800132a:	200a      	movs	r0, #10
 800132c:	f00e f9fa 	bl	800f724 <osMessageQueueNew>
 8001330:	4602      	mov	r2, r0
 8001332:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <MX_FREERTOS_Init+0x1c0>)
 8001334:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8001336:	4a4b      	ldr	r2, [pc, #300]	; (8001464 <MX_FREERTOS_Init+0x1c4>)
 8001338:	2110      	movs	r1, #16
 800133a:	200a      	movs	r0, #10
 800133c:	f00e f9f2 	bl	800f724 <osMessageQueueNew>
 8001340:	4602      	mov	r2, r0
 8001342:	4b49      	ldr	r3, [pc, #292]	; (8001468 <MX_FREERTOS_Init+0x1c8>)
 8001344:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 8001346:	4a49      	ldr	r2, [pc, #292]	; (800146c <MX_FREERTOS_Init+0x1cc>)
 8001348:	2118      	movs	r1, #24
 800134a:	2003      	movs	r0, #3
 800134c:	f00e f9ea 	bl	800f724 <osMessageQueueNew>
 8001350:	4602      	mov	r2, r0
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <MX_FREERTOS_Init+0x1d0>)
 8001354:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 8001356:	4a47      	ldr	r2, [pc, #284]	; (8001474 <MX_FREERTOS_Init+0x1d4>)
 8001358:	2106      	movs	r1, #6
 800135a:	200a      	movs	r0, #10
 800135c:	f00e f9e2 	bl	800f724 <osMessageQueueNew>
 8001360:	4602      	mov	r2, r0
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <MX_FREERTOS_Init+0x1d8>)
 8001364:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 8001366:	4a45      	ldr	r2, [pc, #276]	; (800147c <MX_FREERTOS_Init+0x1dc>)
 8001368:	2118      	movs	r1, #24
 800136a:	200a      	movs	r0, #10
 800136c:	f00e f9da 	bl	800f724 <osMessageQueueNew>
 8001370:	4602      	mov	r2, r0
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <MX_FREERTOS_Init+0x1e0>)
 8001374:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 8001376:	4a43      	ldr	r2, [pc, #268]	; (8001484 <MX_FREERTOS_Init+0x1e4>)
 8001378:	2104      	movs	r1, #4
 800137a:	2001      	movs	r0, #1
 800137c:	f00e f9d2 	bl	800f724 <osMessageQueueNew>
 8001380:	4602      	mov	r2, r0
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <MX_FREERTOS_Init+0x1e8>)
 8001384:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8001386:	4a41      	ldr	r2, [pc, #260]	; (800148c <MX_FREERTOS_Init+0x1ec>)
 8001388:	2100      	movs	r1, #0
 800138a:	4841      	ldr	r0, [pc, #260]	; (8001490 <MX_FREERTOS_Init+0x1f0>)
 800138c:	f00d fbe2 	bl	800eb54 <osThreadNew>
 8001390:	4602      	mov	r2, r0
 8001392:	4b40      	ldr	r3, [pc, #256]	; (8001494 <MX_FREERTOS_Init+0x1f4>)
 8001394:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <MX_FREERTOS_Init+0x1f8>)
 8001398:	2100      	movs	r1, #0
 800139a:	4840      	ldr	r0, [pc, #256]	; (800149c <MX_FREERTOS_Init+0x1fc>)
 800139c:	f00d fbda 	bl	800eb54 <osThreadNew>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <MX_FREERTOS_Init+0x200>)
 80013a4:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80013a6:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <MX_FREERTOS_Init+0x204>)
 80013a8:	2100      	movs	r1, #0
 80013aa:	483f      	ldr	r0, [pc, #252]	; (80014a8 <MX_FREERTOS_Init+0x208>)
 80013ac:	f00d fbd2 	bl	800eb54 <osThreadNew>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <MX_FREERTOS_Init+0x20c>)
 80013b4:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <MX_FREERTOS_Init+0x210>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	483e      	ldr	r0, [pc, #248]	; (80014b4 <MX_FREERTOS_Init+0x214>)
 80013bc:	f00d fbca 	bl	800eb54 <osThreadNew>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MX_FREERTOS_Init+0x218>)
 80013c4:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 80013c6:	4a3d      	ldr	r2, [pc, #244]	; (80014bc <MX_FREERTOS_Init+0x21c>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	483d      	ldr	r0, [pc, #244]	; (80014c0 <MX_FREERTOS_Init+0x220>)
 80013cc:	f00d fbc2 	bl	800eb54 <osThreadNew>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <MX_FREERTOS_Init+0x224>)
 80013d4:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 80013d6:	4a3c      	ldr	r2, [pc, #240]	; (80014c8 <MX_FREERTOS_Init+0x228>)
 80013d8:	2100      	movs	r1, #0
 80013da:	483c      	ldr	r0, [pc, #240]	; (80014cc <MX_FREERTOS_Init+0x22c>)
 80013dc:	f00d fbba 	bl	800eb54 <osThreadNew>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <MX_FREERTOS_Init+0x230>)
 80013e4:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 80013e6:	4a3b      	ldr	r2, [pc, #236]	; (80014d4 <MX_FREERTOS_Init+0x234>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	483b      	ldr	r0, [pc, #236]	; (80014d8 <MX_FREERTOS_Init+0x238>)
 80013ec:	f00d fbb2 	bl	800eb54 <osThreadNew>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <MX_FREERTOS_Init+0x23c>)
 80013f4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_FREERTOS_Init+0x184>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f00e f8d3 	bl	800f5a8 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_FREERTOS_Init+0x18c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00e f8cd 	bl	800f5a8 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 800140e:	f7ff fdeb 	bl	8000fe8 <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	08017f90 	.word	0x08017f90
 800141c:	20027970 	.word	0x20027970
 8001420:	08017fa0 	.word	0x08017fa0
 8001424:	20027db4 	.word	0x20027db4
 8001428:	08017fb0 	.word	0x08017fb0
 800142c:	20027dac 	.word	0x20027dac
 8001430:	08017f80 	.word	0x08017f80
 8001434:	08003bdd 	.word	0x08003bdd
 8001438:	20027960 	.word	0x20027960
 800143c:	08017e90 	.word	0x08017e90
 8001440:	20027dc0 	.word	0x20027dc0
 8001444:	08017ea8 	.word	0x08017ea8
 8001448:	20027978 	.word	0x20027978
 800144c:	08017ec0 	.word	0x08017ec0
 8001450:	20027da4 	.word	0x20027da4
 8001454:	08017ed8 	.word	0x08017ed8
 8001458:	2002797c 	.word	0x2002797c
 800145c:	08017ef0 	.word	0x08017ef0
 8001460:	20027974 	.word	0x20027974
 8001464:	08017f08 	.word	0x08017f08
 8001468:	20027968 	.word	0x20027968
 800146c:	08017f20 	.word	0x08017f20
 8001470:	20027984 	.word	0x20027984
 8001474:	08017f38 	.word	0x08017f38
 8001478:	20027870 	.word	0x20027870
 800147c:	08017f50 	.word	0x08017f50
 8001480:	20027874 	.word	0x20027874
 8001484:	08017f68 	.word	0x08017f68
 8001488:	20027980 	.word	0x20027980
 800148c:	08017d94 	.word	0x08017d94
 8001490:	080014e1 	.word	0x080014e1
 8001494:	20027958 	.word	0x20027958
 8001498:	08017db8 	.word	0x08017db8
 800149c:	080040b9 	.word	0x080040b9
 80014a0:	20027964 	.word	0x20027964
 80014a4:	08017ddc 	.word	0x08017ddc
 80014a8:	08004419 	.word	0x08004419
 80014ac:	20027da8 	.word	0x20027da8
 80014b0:	08017e00 	.word	0x08017e00
 80014b4:	080039d5 	.word	0x080039d5
 80014b8:	20027dc4 	.word	0x20027dc4
 80014bc:	08017e24 	.word	0x08017e24
 80014c0:	08003b4d 	.word	0x08003b4d
 80014c4:	20027db8 	.word	0x20027db8
 80014c8:	08017e48 	.word	0x08017e48
 80014cc:	08003d29 	.word	0x08003d29
 80014d0:	20027db0 	.word	0x20027db0
 80014d4:	08017e6c 	.word	0x08017e6c
 80014d8:	080014f1 	.word	0x080014f1
 80014dc:	2002795c 	.word	0x2002795c

080014e0 <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f00d fd25 	bl	800ef38 <osDelay>
 80014ee:	e7fb      	b.n	80014e8 <DefaultTask+0x8>

080014f0 <BlinkTask>:
float previousTick_ms = 0;
float tick_ms_diff = 0;

struct LogMessage statusMessage;

void BlinkTask(void *argument){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while(1){
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	2100      	movs	r1, #0
 80014fe:	2001      	movs	r0, #1
 8001500:	f00d fc86 	bl	800ee10 <osThreadFlagsWait>
 8001504:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if (evt == 0x00000001U)  {
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d1f5      	bne.n	80014f8 <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800150c:	4b62      	ldr	r3, [pc, #392]	; (8001698 <BlinkTask+0x1a8>)
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	2200      	movs	r2, #0
 8001516:	4961      	ldr	r1, [pc, #388]	; (800169c <BlinkTask+0x1ac>)
 8001518:	f00e f9fe 	bl	800f918 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 800151c:	4b5f      	ldr	r3, [pc, #380]	; (800169c <BlinkTask+0x1ac>)
 800151e:	2201      	movs	r2, #1
 8001520:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <BlinkTask+0x1a8>)
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	2300      	movs	r3, #0
 8001528:	2200      	movs	r2, #0
 800152a:	495c      	ldr	r1, [pc, #368]	; (800169c <BlinkTask+0x1ac>)
 800152c:	f00e f980 	bl	800f830 <osMessageQueuePut>

			// start timer and PWM channel for blink LED
			HAL_TIM_Base_Start(&htim2);
 8001530:	485b      	ldr	r0, [pc, #364]	; (80016a0 <BlinkTask+0x1b0>)
 8001532:	f00a fa87 	bl	800ba44 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001536:	2104      	movs	r1, #4
 8001538:	4859      	ldr	r0, [pc, #356]	; (80016a0 <BlinkTask+0x1b0>)
 800153a:	f00a fb39 	bl	800bbb0 <HAL_TIM_PWM_Start>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 800153e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001542:	4958      	ldr	r1, [pc, #352]	; (80016a4 <BlinkTask+0x1b4>)
 8001544:	4858      	ldr	r0, [pc, #352]	; (80016a8 <BlinkTask+0x1b8>)
 8001546:	f004 fced 	bl	8005f24 <HAL_ADC_Start_DMA>
//				buffer_pointer = &blinkMsgBuffer_1;
//		    	osMessageQueuePut(blinkMsgQueueHandle, &buffer_pointer, 0U, 0U);
				//osMessageQueuePut(blinkMsgQueueHandle, &blinkMsgBuffer_2, 0U, 0U);
//				osMessageQueuePut(blinkMsgQueueHandle, (void *) &blinkMsgBuffer_1, 0U, 0);

				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 800154a:	f04f 32ff 	mov.w	r2, #4294967295
 800154e:	2100      	movs	r1, #0
 8001550:	2006      	movs	r0, #6
 8001552:	f00d fc5d 	bl	800ee10 <osThreadFlagsWait>
 8001556:	60f8      	str	r0, [r7, #12]

				if( (evt & 0x00000004U) == 0x00000004U){
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	2b00      	cmp	r3, #0
 8001560:	d064      	beq.n	800162c <BlinkTask+0x13c>

					// interpolate timestamps for blink packets
					if(previousTick_ms == 0){
 8001562:	4b52      	ldr	r3, [pc, #328]	; (80016ac <BlinkTask+0x1bc>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	eef5 7a40 	vcmp.f32	s15, #0.0
 800156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001570:	d108      	bne.n	8001584 <BlinkTask+0x94>
						previousTick_ms = HAL_GetTick();
 8001572:	f004 f957 	bl	8005824 <HAL_GetTick>
 8001576:	ee07 0a90 	vmov	s15, r0
 800157a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157e:	4b4b      	ldr	r3, [pc, #300]	; (80016ac <BlinkTask+0x1bc>)
 8001580:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 8001584:	f004 f94e 	bl	8005824 <HAL_GetTick>
 8001588:	ee07 0a90 	vmov	s15, r0
 800158c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001590:	4b46      	ldr	r3, [pc, #280]	; (80016ac <BlinkTask+0x1bc>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ee37 7a67 	vsub.f32	s14, s14, s15
 800159a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <BlinkTask+0x1c0>)
 80015a4:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 80015a8:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <BlinkTask+0x1c4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e039      	b.n	8001624 <BlinkTask+0x134>

						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator*BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80015b0:	4b40      	ldr	r3, [pc, #256]	; (80016b4 <BlinkTask+0x1c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2264      	movs	r2, #100	; 0x64
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	4a3a      	ldr	r2, [pc, #232]	; (80016a4 <BlinkTask+0x1b4>)
 80015bc:	4413      	add	r3, r2
 80015be:	4a3e      	ldr	r2, [pc, #248]	; (80016b8 <BlinkTask+0x1c8>)
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	2364      	movs	r3, #100	; 0x64
 80015c6:	461a      	mov	r2, r3
 80015c8:	f015 f8c0 	bl	801674c <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80015cc:	4b37      	ldr	r3, [pc, #220]	; (80016ac <BlinkTask+0x1bc>)
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <BlinkTask+0x1c0>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e0:	ee17 2a90 	vmov	r2, s15
 80015e4:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <BlinkTask+0x1c8>)
 80015e6:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 80015e8:	4b34      	ldr	r3, [pc, #208]	; (80016bc <BlinkTask+0x1cc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a32      	ldr	r2, [pc, #200]	; (80016b8 <BlinkTask+0x1c8>)
 80015ee:	6693      	str	r3, [r2, #104]	; 0x68

						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 80015f0:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <BlinkTask+0x1c8>)
 80015f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <BlinkTask+0x1bc>)
 80015fe:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <BlinkTask+0x1cc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	4a2c      	ldr	r2, [pc, #176]	; (80016bc <BlinkTask+0x1cc>)
 800160a:	6013      	str	r3, [r2, #0]

						osMessageQueuePut(blinkMsgQueueHandle, (void *) &blinkMsgBuffer_1, 0U, 0);
 800160c:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <BlinkTask+0x1d0>)
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	2200      	movs	r2, #0
 8001614:	4928      	ldr	r1, [pc, #160]	; (80016b8 <BlinkTask+0x1c8>)
 8001616:	f00e f90b 	bl	800f830 <osMessageQueuePut>
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <BlinkTask+0x1c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <BlinkTask+0x1c4>)
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <BlinkTask+0x1c4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b09      	cmp	r3, #9
 800162a:	d9c1      	bls.n	80015b0 <BlinkTask+0xc0>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if( (evt & 0x00000002U) == 0x00000002U){
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d089      	beq.n	800154a <BlinkTask+0x5a>

					HAL_ADC_Stop_DMA(&hadc1);
 8001636:	481c      	ldr	r0, [pc, #112]	; (80016a8 <BlinkTask+0x1b8>)
 8001638:	f004 fcf8 	bl	800602c <HAL_ADC_Stop_DMA>
//					while(HAL_ADC_Stop(&hadc1) != HAL_OK)
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800163c:	2104      	movs	r1, #4
 800163e:	4818      	ldr	r0, [pc, #96]	; (80016a0 <BlinkTask+0x1b0>)
 8001640:	f00a fb00 	bl	800bc44 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8001644:	4816      	ldr	r0, [pc, #88]	; (80016a0 <BlinkTask+0x1b0>)
 8001646:	f00a fa27 	bl	800ba98 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <BlinkTask+0x1bc>)
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <BlinkTask+0x1a8>)
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	2200      	movs	r2, #0
 800165c:	490f      	ldr	r1, [pc, #60]	; (800169c <BlinkTask+0x1ac>)
 800165e:	f00e f95b 	bl	800f918 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <BlinkTask+0x1ac>)
 8001664:	2200      	movs	r2, #0
 8001666:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if(statusMessage.positionEnabled == 1){
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <BlinkTask+0x1ac>)
 800166a:	795b      	ldrb	r3, [r3, #5]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d104      	bne.n	800167a <BlinkTask+0x18a>
						osSemaphoreRelease(locNotifyHandle);
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <BlinkTask+0x1d4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f00d fffd 	bl	800f674 <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <BlinkTask+0x1a8>)
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	2300      	movs	r3, #0
 8001680:	2200      	movs	r2, #0
 8001682:	4906      	ldr	r1, [pc, #24]	; (800169c <BlinkTask+0x1ac>)
 8001684:	f00e f8d4 	bl	800f830 <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <BlinkTask+0x1d0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f00e f9e7 	bl	800fa60 <osMessageQueueReset>

					break;
 8001692:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8001694:	e730      	b.n	80014f8 <BlinkTask+0x8>
 8001696:	bf00      	nop
 8001698:	20027980 	.word	0x20027980
 800169c:	20027dcc 	.word	0x20027dcc
 80016a0:	20028550 	.word	0x20028550
 80016a4:	20000274 	.word	0x20000274
 80016a8:	200277a4 	.word	0x200277a4
 80016ac:	20000a4c 	.word	0x20000a4c
 80016b0:	20000a50 	.word	0x20000a50
 80016b4:	20000a48 	.word	0x20000a48
 80016b8:	20000208 	.word	0x20000208
 80016bc:	20000a44 	.word	0x20000a44
 80016c0:	20027dc0 	.word	0x20027dc0
 80016c4:	20027db4 	.word	0x20027db4

080016c8 <HAL_ADC_ErrorCallback>:
//    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//}

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  i++;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_ADC_ErrorCallback+0x24>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	3301      	adds	r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <HAL_ADC_ErrorCallback+0x24>)
 80016dc:	701a      	strb	r2, [r3, #0]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000a54 	.word	0x20000a54

080016f0 <HAL_ADC_ConvCpltCallback>:

//volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer[100]), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_ADC_ConvCpltCallback+0x24>)
 80016fa:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_ADC_ConvCpltCallback+0x28>)
 80016fc:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2104      	movs	r1, #4
 8001704:	4618      	mov	r0, r3
 8001706:	f00d fad1 	bl	800ecac <osThreadFlagsSet>

}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20027dc8 	.word	0x20027dc8
 8001718:	2000065c 	.word	0x2000065c
 800171c:	2002795c 	.word	0x2002795c

08001720 <HAL_ADC_ConvHalfCpltCallback>:

//volatile uint8_t half = 0;
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = blink_buffer;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800172a:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800172c:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2104      	movs	r1, #4
 8001734:	4618      	mov	r0, r3
 8001736:	f00d fab9 	bl	800ecac <osThreadFlagsSet>

}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20027dc8 	.word	0x20027dc8
 8001748:	20000274 	.word	0x20000274
 800174c:	2002795c 	.word	0x2002795c

08001750 <LL_AHB2_GRP1_EnableClock>:
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800175e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4313      	orrs	r3, r2
 8001766:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001774:	68fb      	ldr	r3, [r7, #12]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_COMP1_Init+0x50>)
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <MX_COMP1_Init+0x54>)
 800178c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_3_4VREFINT;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_COMP1_Init+0x50>)
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_COMP1_Init+0x58>)
 8001792:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_COMP1_Init+0x50>)
 8001796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <MX_COMP1_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_COMP1_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <MX_COMP1_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_COMP1_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <MX_COMP1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_COMP1_Init+0x50>)
 80017bc:	2231      	movs	r2, #49	; 0x31
 80017be:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <MX_COMP1_Init+0x50>)
 80017c2:	f005 fa8f 	bl	8006ce4 <HAL_COMP_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80017cc:	f002 fe1c 	bl	8004408 <Error_Handler>
  }

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20027dd4 	.word	0x20027dd4
 80017d8:	40010200 	.word	0x40010200
 80017dc:	00c00020 	.word	0x00c00020

080017e0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_COMP_MspInit+0x5c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d117      	bne.n	8001832 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2001      	movs	r0, #1
 8001804:	f7ff ffa4 	bl	8001750 <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 8001808:	2302      	movs	r3, #2
 800180a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180c:	2303      	movs	r3, #3
 800180e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f006 f8b1 	bl	8007984 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2105      	movs	r1, #5
 8001826:	2016      	movs	r0, #22
 8001828:	f005 fd25 	bl	8007276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800182c:	2016      	movs	r0, #22
 800182e:	f005 fd3c 	bl	80072aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001832:	bf00      	nop
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40010200 	.word	0x40010200

08001840 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d02a      	beq.n	80018b0 <process_pulse_lengths+0x70>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3302      	adds	r3, #2
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d025      	beq.n	80018b0 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3302      	adds	r3, #2
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	bf8c      	ite	hi
 8001872:	2301      	movhi	r3, #1
 8001874:	2300      	movls	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	429a      	cmp	r2, r3
 8001884:	d10e      	bne.n	80018a4 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	005a      	lsls	r2, r3, #1
 800188c:	7efb      	ldrb	r3, [r7, #27]
 800188e:	431a      	orrs	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	4a1c      	ldr	r2, [pc, #112]	; (8001910 <process_pulse_lengths+0xd0>)
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e002      	b.n	80018aa <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 80018a4:	7efa      	ldrb	r2, [r7, #27]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db26      	blt.n	8001904 <process_pulse_lengths+0xc4>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b0f      	cmp	r3, #15
 80018bc:	dc22      	bgt.n	8001904 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2201      	movs	r2, #1
 80018ca:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f003 0203 	and.w	r2, r3, #3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 80018da:	e013      	b.n	8001904 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4413      	add	r3, r2
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	69f9      	ldr	r1, [r7, #28]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4291      	cmp	r1, r2
 80018f4:	d101      	bne.n	80018fa <process_pulse_lengths+0xba>
 80018f6:	2201      	movs	r2, #1
 80018f8:	e001      	b.n	80018fe <process_pulse_lengths+0xbe>
 80018fa:	f04f 32ff 	mov.w	r2, #4294967295
 80018fe:	441a      	add	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	609a      	str	r2, [r3, #8]
}
 8001904:	bf00      	nop
 8001906:	3724      	adds	r7, #36	; 0x24
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	08017fc0 	.word	0x08017fc0

08001914 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b03      	cmp	r3, #3
 8001924:	dd06      	ble.n	8001934 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	4413      	add	r3, r2
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	e001      	b.n	8001938 <get_phase+0x24>
    } else {
        return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <reset>:

void reset(CyclePhaseClassifier * self) {
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a05      	ldr	r2, [pc, #20]	; (8001974 <reset+0x30>)
 800195e:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	427a0000 	.word	0x427a0000

08001978 <LL_AHB1_GRP1_EnableClock>:
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001984:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4313      	orrs	r3, r2
 800198e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800199c:	68fb      	ldr	r3, [r7, #12]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019ae:	2004      	movs	r0, #4
 80019b0:	f7ff ffe2 	bl	8001978 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b4:	2001      	movs	r0, #1
 80019b6:	f7ff ffdf 	bl	8001978 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	200b      	movs	r0, #11
 80019c0:	f005 fc59 	bl	8007276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019c4:	200b      	movs	r0, #11
 80019c6:	f005 fc70 	bl	80072aa <HAL_NVIC_EnableIRQ>

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	603a      	str	r2, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	460b      	mov	r3, r1
 80019de:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <IMU_begin+0x60>)
 80019e8:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <IMU_begin+0x64>)
 80019ec:	79bb      	ldrb	r3, [r7, #6]
 80019ee:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <IMU_begin+0x68>)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 80019f6:	f000 fa85 	bl	8001f04 <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <IMU_begin+0x6c>)
 80019fc:	22f9      	movs	r2, #249	; 0xf9
 80019fe:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <IMU_begin+0x6c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 8001a06:	2302      	movs	r3, #2
 8001a08:	2102      	movs	r1, #2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fc14 	bl	8002238 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 8001a10:	f000 fb6a 	bl	80020e8 <IMU_receivePacket>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <IMU_begin+0x6c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2bf8      	cmp	r3, #248	; 0xf8
 8001a20:	d101      	bne.n	8001a26 <IMU_begin+0x56>
		{
			return (true);
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000006 	.word	0x20000006
 8001a34:	20027e56 	.word	0x20027e56
 8001a38:	20027f1c 	.word	0x20027f1c
 8001a3c:	20027e94 	.word	0x20027e94

08001a40 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <IMU_dataAvailable+0x64>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2bff      	cmp	r3, #255	; 0xff
 8001a4a:	d00d      	beq.n	8001a68 <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <IMU_dataAvailable+0x68>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <IMU_dataAvailable+0x64>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f006 f903 	bl	8007c64 <HAL_GPIO_ReadPin>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <IMU_dataAvailable+0x28>
			return (false);
 8001a64:	2300      	movs	r3, #0
 8001a66:	e01b      	b.n	8001aa0 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001a68:	f000 fb3e 	bl	80020e8 <IMU_receivePacket>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d015      	beq.n	8001a9e <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <IMU_dataAvailable+0x6c>)
 8001a74:	789b      	ldrb	r3, [r3, #2]
 8001a76:	2203      	movs	r2, #3
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d107      	bne.n	8001a8c <IMU_dataAvailable+0x4c>
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <IMU_dataAvailable+0x70>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2bfb      	cmp	r3, #251	; 0xfb
 8001a82:	d103      	bne.n	8001a8c <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001a84:	f000 f832 	bl	8001aec <IMU_parseInputReport>
			return (true);
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e009      	b.n	8001aa0 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <IMU_dataAvailable+0x6c>)
 8001a8e:	789b      	ldrb	r3, [r3, #2]
 8001a90:	2202      	movs	r2, #2
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d103      	bne.n	8001a9e <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001a96:	f000 f80d 	bl	8001ab4 <IMU_parseCommandReport>
			return (true);
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20027e56 	.word	0x20027e56
 8001aa8:	20027f1c 	.word	0x20027f1c
 8001aac:	20027e04 	.word	0x20027e04
 8001ab0:	20027e94 	.word	0x20027e94

08001ab4 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <IMU_parseCommandReport+0x30>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2bf1      	cmp	r3, #241	; 0xf1
 8001ac0:	d109      	bne.n	8001ad6 <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <IMU_parseCommandReport+0x30>)
 8001ac4:	789b      	ldrb	r3, [r3, #2]
 8001ac6:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	2b07      	cmp	r3, #7
 8001acc:	d103      	bne.n	8001ad6 <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <IMU_parseCommandReport+0x30>)
 8001ad0:	795a      	ldrb	r2, [r3, #5]
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <IMU_parseCommandReport+0x34>)
 8001ad4:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20027e94 	.word	0x20027e94
 8001ae8:	20027f47 	.word	0x20027f47

08001aec <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001af2:	4b96      	ldr	r3, [pc, #600]	; (8001d4c <IMU_parseInputReport+0x260>)
 8001af4:	785b      	ldrb	r3, [r3, #1]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	4b94      	ldr	r3, [pc, #592]	; (8001d4c <IMU_parseInputReport+0x260>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001b04:	8a3b      	ldrh	r3, [r7, #16]
 8001b06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b0a:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001b0c:	8a3b      	ldrh	r3, [r7, #16]
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001b14:	4b8e      	ldr	r3, [pc, #568]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b16:	791b      	ldrb	r3, [r3, #4]
 8001b18:	061a      	lsls	r2, r3, #24
 8001b1a:	4b8d      	ldr	r3, [pc, #564]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b1c:	78db      	ldrb	r3, [r3, #3]
 8001b1e:	041b      	lsls	r3, r3, #16
 8001b20:	431a      	orrs	r2, r3
 8001b22:	4b8b      	ldr	r3, [pc, #556]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b24:	789b      	ldrb	r3, [r3, #2]
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	4a89      	ldr	r2, [pc, #548]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b2c:	7852      	ldrb	r2, [r2, #1]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	4a88      	ldr	r2, [pc, #544]	; (8001d54 <IMU_parseInputReport+0x268>)
 8001b32:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001b34:	4b86      	ldr	r3, [pc, #536]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b36:	79db      	ldrb	r3, [r3, #7]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001b3e:	4b84      	ldr	r3, [pc, #528]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b40:	7a9b      	ldrb	r3, [r3, #10]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	4b82      	ldr	r3, [pc, #520]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b48:	7a5b      	ldrb	r3, [r3, #9]
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001b52:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b54:	7b1b      	ldrb	r3, [r3, #12]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	b21a      	sxth	r2, r3
 8001b5a:	4b7d      	ldr	r3, [pc, #500]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b5c:	7adb      	ldrb	r3, [r3, #11]
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	4313      	orrs	r3, r2
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001b66:	4b7a      	ldr	r3, [pc, #488]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b68:	7b9b      	ldrb	r3, [r3, #14]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	4b78      	ldr	r3, [pc, #480]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b70:	7b5b      	ldrb	r3, [r3, #13]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001b7e:	2300      	movs	r3, #0
 8001b80:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001b82:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b86:	3b05      	subs	r3, #5
 8001b88:	2b09      	cmp	r3, #9
 8001b8a:	dd09      	ble.n	8001ba0 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001b8c:	4b70      	ldr	r3, [pc, #448]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b8e:	7c1b      	ldrb	r3, [r3, #16]
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	b21a      	sxth	r2, r3
 8001b94:	4b6e      	ldr	r3, [pc, #440]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001b96:	7bdb      	ldrb	r3, [r3, #15]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	b21b      	sxth	r3, r3
 8001b9e:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001ba0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ba4:	3b05      	subs	r3, #5
 8001ba6:	2b0b      	cmp	r3, #11
 8001ba8:	dd09      	ble.n	8001bbe <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001baa:	4b69      	ldr	r3, [pc, #420]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001bac:	7c9b      	ldrb	r3, [r3, #18]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001bb4:	7c5b      	ldrb	r3, [r3, #17]
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001bbe:	4b64      	ldr	r3, [pc, #400]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001bc0:	795b      	ldrb	r3, [r3, #5]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d10d      	bne.n	8001be2 <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <IMU_parseInputReport+0x26c>)
 8001bcc:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001bce:	4a63      	ldr	r2, [pc, #396]	; (8001d5c <IMU_parseInputReport+0x270>)
 8001bd0:	89bb      	ldrh	r3, [r7, #12]
 8001bd2:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001bd4:	4a62      	ldr	r2, [pc, #392]	; (8001d60 <IMU_parseInputReport+0x274>)
 8001bd6:	897b      	ldrh	r3, [r7, #10]
 8001bd8:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001bda:	4a62      	ldr	r2, [pc, #392]	; (8001d64 <IMU_parseInputReport+0x278>)
 8001bdc:	893b      	ldrh	r3, [r7, #8]
 8001bde:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001be0:	e16a      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001be2:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001be4:	795b      	ldrb	r3, [r3, #5]
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d10d      	bne.n	8001c06 <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b5e      	ldr	r3, [pc, #376]	; (8001d68 <IMU_parseInputReport+0x27c>)
 8001bf0:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001bf2:	4a5e      	ldr	r2, [pc, #376]	; (8001d6c <IMU_parseInputReport+0x280>)
 8001bf4:	89bb      	ldrh	r3, [r7, #12]
 8001bf6:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001bf8:	4a5d      	ldr	r2, [pc, #372]	; (8001d70 <IMU_parseInputReport+0x284>)
 8001bfa:	897b      	ldrh	r3, [r7, #10]
 8001bfc:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001bfe:	4a5d      	ldr	r2, [pc, #372]	; (8001d74 <IMU_parseInputReport+0x288>)
 8001c00:	893b      	ldrh	r3, [r7, #8]
 8001c02:	8013      	strh	r3, [r2, #0]
}
 8001c04:	e158      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001c06:	4b52      	ldr	r3, [pc, #328]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001c08:	795b      	ldrb	r3, [r3, #5]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d10d      	bne.n	8001c2a <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <IMU_parseInputReport+0x28c>)
 8001c14:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001c16:	4a59      	ldr	r2, [pc, #356]	; (8001d7c <IMU_parseInputReport+0x290>)
 8001c18:	89bb      	ldrh	r3, [r7, #12]
 8001c1a:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001c1c:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <IMU_parseInputReport+0x294>)
 8001c1e:	897b      	ldrh	r3, [r7, #10]
 8001c20:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001c22:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <IMU_parseInputReport+0x298>)
 8001c24:	893b      	ldrh	r3, [r7, #8]
 8001c26:	8013      	strh	r3, [r2, #0]
}
 8001c28:	e146      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001c2a:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001c2c:	795b      	ldrb	r3, [r3, #5]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d10d      	bne.n	8001c4e <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	4b54      	ldr	r3, [pc, #336]	; (8001d88 <IMU_parseInputReport+0x29c>)
 8001c38:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001c3a:	4a54      	ldr	r2, [pc, #336]	; (8001d8c <IMU_parseInputReport+0x2a0>)
 8001c3c:	89bb      	ldrh	r3, [r7, #12]
 8001c3e:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001c40:	4a53      	ldr	r2, [pc, #332]	; (8001d90 <IMU_parseInputReport+0x2a4>)
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001c46:	4a53      	ldr	r2, [pc, #332]	; (8001d94 <IMU_parseInputReport+0x2a8>)
 8001c48:	893b      	ldrh	r3, [r7, #8]
 8001c4a:	8013      	strh	r3, [r2, #0]
}
 8001c4c:	e134      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001c4e:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001c50:	795b      	ldrb	r3, [r3, #5]
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d003      	beq.n	8001c5e <IMU_parseInputReport+0x172>
 8001c56:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001c58:	795b      	ldrb	r3, [r3, #5]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d166      	bne.n	8001d2c <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001c5e:	f003 fde1 	bl	8005824 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b4c      	ldr	r3, [pc, #304]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001c66:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001c68:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <IMU_parseInputReport+0x2b0>)
 8001c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	4619      	mov	r1, r3
 8001c76:	4610      	mov	r0, r2
 8001c78:	f000 f966 	bl	8001f48 <IMU_qToFloat>
 8001c7c:	eef0 7a40 	vmov.f32	s15, s0
 8001c80:	4b45      	ldr	r3, [pc, #276]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001c82:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001c86:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <IMU_parseInputReport+0x2b0>)
 8001c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	4610      	mov	r0, r2
 8001c96:	f000 f957 	bl	8001f48 <IMU_qToFloat>
 8001c9a:	eef0 7a40 	vmov.f32	s15, s0
 8001c9e:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001ca0:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001ca4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ca8:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <IMU_parseInputReport+0x2b0>)
 8001caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f000 f948 	bl	8001f48 <IMU_qToFloat>
 8001cb8:	eef0 7a40 	vmov.f32	s15, s0
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001cbe:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001cc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cc6:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <IMU_parseInputReport+0x2b0>)
 8001cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f000 f939 	bl	8001f48 <IMU_qToFloat>
 8001cd6:	eef0 7a40 	vmov.f32	s15, s0
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001cdc:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001ce0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ce4:	210c      	movs	r1, #12
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f92e 	bl	8001f48 <IMU_qToFloat>
 8001cec:	eef0 7a40 	vmov.f32	s15, s0
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001cf2:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <IMU_parseInputReport+0x2b4>)
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4926      	ldr	r1, [pc, #152]	; (8001d98 <IMU_parseInputReport+0x2ac>)
 8001d00:	f00d fd96 	bl	800f830 <osMessageQueuePut>
		quatAccuracy = status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <IMU_parseInputReport+0x2b8>)
 8001d0a:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001d0c:	4a26      	ldr	r2, [pc, #152]	; (8001da8 <IMU_parseInputReport+0x2bc>)
 8001d0e:	89bb      	ldrh	r3, [r7, #12]
 8001d10:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001d12:	4a26      	ldr	r2, [pc, #152]	; (8001dac <IMU_parseInputReport+0x2c0>)
 8001d14:	897b      	ldrh	r3, [r7, #10]
 8001d16:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001d18:	4a25      	ldr	r2, [pc, #148]	; (8001db0 <IMU_parseInputReport+0x2c4>)
 8001d1a:	893b      	ldrh	r3, [r7, #8]
 8001d1c:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001d1e:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <IMU_parseInputReport+0x2c8>)
 8001d20:	8afb      	ldrh	r3, [r7, #22]
 8001d22:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001d24:	4a24      	ldr	r2, [pc, #144]	; (8001db8 <IMU_parseInputReport+0x2cc>)
 8001d26:	8abb      	ldrh	r3, [r7, #20]
 8001d28:	8013      	strh	r3, [r2, #0]
}
 8001d2a:	e0c5      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <IMU_parseInputReport+0x264>)
 8001d2e:	795b      	ldrb	r3, [r3, #5]
 8001d30:	2b11      	cmp	r3, #17
 8001d32:	d147      	bne.n	8001dc4 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001d34:	f003 fd76 	bl	8005824 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <IMU_parseInputReport+0x2d0>)
 8001d3c:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <IMU_parseInputReport+0x2d0>)
 8001d40:	893b      	ldrh	r3, [r7, #8]
 8001d42:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <IMU_parseInputReport+0x2d4>)
 8001d46:	893b      	ldrh	r3, [r7, #8]
 8001d48:	8013      	strh	r3, [r2, #0]
}
 8001d4a:	e0b5      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
 8001d4c:	20027e04 	.word	0x20027e04
 8001d50:	20027e94 	.word	0x20027e94
 8001d54:	20027e20 	.word	0x20027e20
 8001d58:	20027f5c 	.word	0x20027f5c
 8001d5c:	20027f44 	.word	0x20027f44
 8001d60:	20027f60 	.word	0x20027f60
 8001d64:	20027e5c 	.word	0x20027e5c
 8001d68:	20027e58 	.word	0x20027e58
 8001d6c:	20027e2a 	.word	0x20027e2a
 8001d70:	20027f48 	.word	0x20027f48
 8001d74:	20027e86 	.word	0x20027e86
 8001d78:	20027e88 	.word	0x20027e88
 8001d7c:	20027e8a 	.word	0x20027e8a
 8001d80:	20027e52 	.word	0x20027e52
 8001d84:	20027e50 	.word	0x20027e50
 8001d88:	20027e08 	.word	0x20027e08
 8001d8c:	20027e54 	.word	0x20027e54
 8001d90:	20027f4a 	.word	0x20027f4a
 8001d94:	20027e5a 	.word	0x20027e5a
 8001d98:	20027e6c 	.word	0x20027e6c
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	20027984 	.word	0x20027984
 8001da4:	20027e26 	.word	0x20027e26
 8001da8:	20027f5e 	.word	0x20027f5e
 8001dac:	20027e84 	.word	0x20027e84
 8001db0:	20027e00 	.word	0x20027e00
 8001db4:	20027e1c 	.word	0x20027e1c
 8001db8:	20027e5e 	.word	0x20027e5e
 8001dbc:	20027e0c 	.word	0x20027e0c
 8001dc0:	20027f62 	.word	0x20027f62
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001dc6:	795b      	ldrb	r3, [r3, #5]
 8001dc8:	2b13      	cmp	r3, #19
 8001dca:	d10d      	bne.n	8001de8 <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001dcc:	f003 fd2a 	bl	8005824 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <IMU_parseInputReport+0x3d8>)
 8001dd4:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001dd8:	7a5a      	ldrb	r2, [r3, #9]
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <IMU_parseInputReport+0x3d8>)
 8001ddc:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001de0:	7a5a      	ldrb	r2, [r3, #9]
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <IMU_parseInputReport+0x3dc>)
 8001de4:	701a      	strb	r2, [r3, #0]
}
 8001de6:	e067      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001de8:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001dea:	795b      	ldrb	r3, [r3, #5]
 8001dec:	2b1e      	cmp	r3, #30
 8001dee:	d12b      	bne.n	8001e48 <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001df0:	f003 fd18 	bl	8005824 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <IMU_parseInputReport+0x3e0>)
 8001df8:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	74fb      	strb	r3, [r7, #19]
 8001dfe:	e00c      	b.n	8001e1a <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001e00:	7cfb      	ldrb	r3, [r7, #19]
 8001e02:	f103 020b 	add.w	r2, r3, #11
 8001e06:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <IMU_parseInputReport+0x3e4>)
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	7cfb      	ldrb	r3, [r7, #19]
 8001e0c:	440b      	add	r3, r1
 8001e0e:	492c      	ldr	r1, [pc, #176]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001e10:	5c8a      	ldrb	r2, [r1, r2]
 8001e12:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	3301      	adds	r3, #1
 8001e18:	74fb      	strb	r3, [r7, #19]
 8001e1a:	7cfb      	ldrb	r3, [r7, #19]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d9ef      	bls.n	8001e00 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001e22:	7a9a      	ldrb	r2, [r3, #10]
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <IMU_parseInputReport+0x3e8>)
 8001e26:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001e28:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <IMU_parseInputReport+0x3e4>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <IMU_parseInputReport+0x3e0>)
 8001e2e:	6810      	ldr	r0, [r2, #0]
 8001e30:	6851      	ldr	r1, [r2, #4]
 8001e32:	c303      	stmia	r3!, {r0, r1}
 8001e34:	7a12      	ldrb	r2, [r2, #8]
 8001e36:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <IMU_parseInputReport+0x3ec>)
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2200      	movs	r2, #0
 8001e40:	4922      	ldr	r1, [pc, #136]	; (8001ecc <IMU_parseInputReport+0x3e0>)
 8001e42:	f00d fcf5 	bl	800f830 <osMessageQueuePut>
}
 8001e46:	e037      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001e4a:	795b      	ldrb	r3, [r3, #5]
 8001e4c:	2b14      	cmp	r3, #20
 8001e4e:	d109      	bne.n	8001e64 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001e50:	4a22      	ldr	r2, [pc, #136]	; (8001edc <IMU_parseInputReport+0x3f0>)
 8001e52:	89bb      	ldrh	r3, [r7, #12]
 8001e54:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001e56:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <IMU_parseInputReport+0x3f4>)
 8001e58:	897b      	ldrh	r3, [r7, #10]
 8001e5a:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001e5c:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <IMU_parseInputReport+0x3f8>)
 8001e5e:	893b      	ldrh	r3, [r7, #8]
 8001e60:	8013      	strh	r3, [r2, #0]
}
 8001e62:	e029      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001e66:	795b      	ldrb	r3, [r3, #5]
 8001e68:	2b15      	cmp	r3, #21
 8001e6a:	d109      	bne.n	8001e80 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001e6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <IMU_parseInputReport+0x3fc>)
 8001e6e:	89bb      	ldrh	r3, [r7, #12]
 8001e70:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001e72:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <IMU_parseInputReport+0x400>)
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001e78:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <IMU_parseInputReport+0x404>)
 8001e7a:	893b      	ldrh	r3, [r7, #8]
 8001e7c:	8013      	strh	r3, [r2, #0]
}
 8001e7e:	e01b      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001e82:	795b      	ldrb	r3, [r3, #5]
 8001e84:	2b16      	cmp	r3, #22
 8001e86:	d109      	bne.n	8001e9c <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001e88:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <IMU_parseInputReport+0x408>)
 8001e8a:	89bb      	ldrh	r3, [r7, #12]
 8001e8c:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001e8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <IMU_parseInputReport+0x40c>)
 8001e90:	897b      	ldrh	r3, [r7, #10]
 8001e92:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001e94:	4a19      	ldr	r2, [pc, #100]	; (8001efc <IMU_parseInputReport+0x410>)
 8001e96:	893b      	ldrh	r3, [r7, #8]
 8001e98:	8013      	strh	r3, [r2, #0]
}
 8001e9a:	e00d      	b.n	8001eb8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001e9e:	795b      	ldrb	r3, [r3, #5]
 8001ea0:	2bf1      	cmp	r3, #241	; 0xf1
 8001ea2:	d109      	bne.n	8001eb8 <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001ea6:	79db      	ldrb	r3, [r3, #7]
 8001ea8:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	2b07      	cmp	r3, #7
 8001eae:	d103      	bne.n	8001eb8 <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <IMU_parseInputReport+0x3d4>)
 8001eb2:	7a9a      	ldrb	r2, [r3, #10]
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <IMU_parseInputReport+0x414>)
 8001eb6:	701a      	strb	r2, [r3, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20027e94 	.word	0x20027e94
 8001ec4:	20027e14 	.word	0x20027e14
 8001ec8:	20027e8e 	.word	0x20027e8e
 8001ecc:	20027f4c 	.word	0x20027f4c
 8001ed0:	20027e68 	.word	0x20027e68
 8001ed4:	20027f46 	.word	0x20027f46
 8001ed8:	20027968 	.word	0x20027968
 8001edc:	20027e8c 	.word	0x20027e8c
 8001ee0:	20027e66 	.word	0x20027e66
 8001ee4:	20027f16 	.word	0x20027f16
 8001ee8:	20027e0a 	.word	0x20027e0a
 8001eec:	20027e90 	.word	0x20027e90
 8001ef0:	20027e60 	.word	0x20027e60
 8001ef4:	20027e64 	.word	0x20027e64
 8001ef8:	20027e62 	.word	0x20027e62
 8001efc:	20027e28 	.word	0x20027e28
 8001f00:	20027f47 	.word	0x20027f47

08001f04 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <IMU_softReset+0x3c>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8001f0e:	2301      	movs	r3, #1
 8001f10:	2101      	movs	r1, #1
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f990 	bl	8002238 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8001f18:	20c8      	movs	r0, #200	; 0xc8
 8001f1a:	f003 fc9b 	bl	8005854 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f1e:	bf00      	nop
 8001f20:	f000 f8e2 	bl	80020e8 <IMU_receivePacket>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1fa      	bne.n	8001f20 <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 8001f2a:	20c8      	movs	r0, #200	; 0xc8
 8001f2c:	f003 fc92 	bl	8005854 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f30:	bf00      	nop
 8001f32:	f000 f8d9 	bl	80020e8 <IMU_receivePacket>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1fa      	bne.n	8001f32 <IMU_softReset+0x2e>
		;
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20027e94 	.word	0x20027e94
 8001f44:	00000000 	.word	0x00000000

08001f48 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	460a      	mov	r2, r1
 8001f52:	80fb      	strh	r3, [r7, #6]
 8001f54:	4613      	mov	r3, r2
 8001f56:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8001f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f64:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8001f68:	797b      	ldrb	r3, [r7, #5]
 8001f6a:	425b      	negs	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fa63 	bl	8000438 <__aeabi_i2d>
 8001f72:	4603      	mov	r3, r0
 8001f74:	460c      	mov	r4, r1
 8001f76:	ec44 3b11 	vmov	d1, r3, r4
 8001f7a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001fc0 <IMU_qToFloat+0x78>
 8001f7e:	f014 fbf9 	bl	8016774 <pow>
 8001f82:	ec56 5b10 	vmov	r5, r6, d0
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f7fe fa68 	bl	800045c <__aeabi_f2d>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	4628      	mov	r0, r5
 8001f96:	4631      	mov	r1, r6
 8001f98:	f7fe fab8 	bl	800050c <__aeabi_dmul>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	f7fe fd62 	bl	8000a6c <__aeabi_d2f>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	ee07 3a90 	vmov	s15, r3
}
 8001fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	40000000 	.word	0x40000000

08001fc8 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	2005      	movs	r0, #5
 8001fd8:	f000 f81a 	bl	8002010 <IMU_setFeatureCommand_2>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 8001ff2:	4a06      	ldr	r2, [pc, #24]	; (800200c <IMU_enableActivityClassifier+0x28>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8001ff8:	89fb      	ldrh	r3, [r7, #14]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	201e      	movs	r0, #30
 8002000:	f000 f818 	bl	8002034 <IMU_setFeatureCommand_3>
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20027e68 	.word	0x20027e68

08002010 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	460a      	mov	r2, r1
 800201a:	71fb      	strb	r3, [r7, #7]
 800201c:	4613      	mov	r3, r2
 800201e:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8002020:	88b9      	ldrh	r1, [r7, #4]
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2200      	movs	r2, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f804 	bl	8002034 <IMU_setFeatureCommand_3>
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	603a      	str	r2, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
 8002040:	460b      	mov	r3, r1
 8002042:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 8002044:	88bb      	ldrh	r3, [r7, #4]
 8002046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002052:	22fd      	movs	r2, #253	; 0xfd
 8002054:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8002056:	4a23      	ldr	r2, [pc, #140]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 800205e:	2200      	movs	r2, #0
 8002060:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002064:	2200      	movs	r2, #0
 8002066:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 800206a:	2200      	movs	r2, #0
 800206c:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002074:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	121b      	asrs	r3, r3, #8
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 800207e:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	141b      	asrs	r3, r3, #16
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002088:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	0e1b      	lsrs	r3, r3, #24
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002092:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 8002096:	2200      	movs	r2, #0
 8002098:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 800209c:	2200      	movs	r2, #0
 800209e:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 80020b2:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 80020bc:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 80020c6:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	0e1b      	lsrs	r3, r3, #24
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <IMU_setFeatureCommand_3+0xb0>)
 80020d0:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 80020d2:	2302      	movs	r3, #2
 80020d4:	2111      	movs	r1, #17
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f8ae 	bl	8002238 <IMU_sendPacket>
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20027e94 	.word	0x20027e94

080020e8 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 80020ee:	4b22      	ldr	r3, [pc, #136]	; (8002178 <IMU_receivePacket+0x90>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <IMU_receivePacket+0x94>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f005 fdb2 	bl	8007c64 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <IMU_receivePacket+0x22>
		return (false);
 8002106:	2300      	movs	r3, #0
 8002108:	e031      	b.n	800216e <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <IMU_receivePacket+0x98>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f04f 31ff 	mov.w	r1, #4294967295
 8002112:	4618      	mov	r0, r3
 8002114:	f00d fa48 	bl	800f5a8 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <IMU_receivePacket+0x9c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b299      	uxth	r1, r3
 800211e:	2364      	movs	r3, #100	; 0x64
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2304      	movs	r3, #4
 8002124:	4a18      	ldr	r2, [pc, #96]	; (8002188 <IMU_receivePacket+0xa0>)
 8002126:	4819      	ldr	r0, [pc, #100]	; (800218c <IMU_receivePacket+0xa4>)
 8002128:	f005 ff50 	bl	8007fcc <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <IMU_receivePacket+0x98>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f00d fa9f 	bl	800f674 <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <IMU_receivePacket+0xa0>)
 8002138:	785b      	ldrb	r3, [r3, #1]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	b21a      	sxth	r2, r3
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <IMU_receivePacket+0xa0>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b21b      	sxth	r3, r3
 8002144:	4313      	orrs	r3, r2
 8002146:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800214e:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002158:	2300      	movs	r3, #0
 800215a:	e008      	b.n	800216e <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	3b04      	subs	r3, #4
 8002160:	b29b      	uxth	r3, r3
 8002162:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f812 	bl	8002190 <IMU_getData>


	return (true); //We're done!
 800216c:	2301      	movs	r3, #1
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20027f1c 	.word	0x20027f1c
 800217c:	20027e56 	.word	0x20027e56
 8002180:	20027970 	.word	0x20027970
 8002184:	20000006 	.word	0x20000006
 8002188:	20027e04 	.word	0x20027e04
 800218c:	20027f6c 	.word	0x20027f6c

08002190 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af02      	add	r7, sp, #8
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 800219a:	2300      	movs	r3, #0
 800219c:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 800219e:	e036      	b.n	800220e <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 80021a4:	89bb      	ldrh	r3, [r7, #12]
 80021a6:	2b1c      	cmp	r3, #28
 80021a8:	d901      	bls.n	80021ae <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 80021aa:	231c      	movs	r3, #28
 80021ac:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <IMU_getData+0x90>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f04f 31ff 	mov.w	r1, #4294967295
 80021b6:	4618      	mov	r0, r3
 80021b8:	f00d f9f6 	bl	800f5a8 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <IMU_getData+0x94>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b299      	uxth	r1, r3
 80021c2:	89bb      	ldrh	r3, [r7, #12]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	3304      	adds	r3, #4
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	2364      	movs	r3, #100	; 0x64
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	4a15      	ldr	r2, [pc, #84]	; (8002228 <IMU_getData+0x98>)
 80021d4:	4815      	ldr	r0, [pc, #84]	; (800222c <IMU_getData+0x9c>)
 80021d6:	f005 fef9 	bl	8007fcc <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <IMU_getData+0x90>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f00d fa48 	bl	800f674 <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 80021e4:	89fa      	ldrh	r2, [r7, #14]
 80021e6:	89bb      	ldrh	r3, [r7, #12]
 80021e8:	4413      	add	r3, r2
 80021ea:	2b7f      	cmp	r3, #127	; 0x7f
 80021ec:	dc07      	bgt.n	80021fe <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 80021ee:	89fb      	ldrh	r3, [r7, #14]
 80021f0:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <IMU_getData+0xa0>)
 80021f2:	4413      	add	r3, r2
 80021f4:	89ba      	ldrh	r2, [r7, #12]
 80021f6:	490f      	ldr	r1, [pc, #60]	; (8002234 <IMU_getData+0xa4>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	f014 faa7 	bl	801674c <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 80021fe:	89fa      	ldrh	r2, [r7, #14]
 8002200:	89bb      	ldrh	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 8002206:	88fa      	ldrh	r2, [r7, #6]
 8002208:	89bb      	ldrh	r3, [r7, #12]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1c5      	bne.n	80021a0 <IMU_getData+0x10>
	}
	return (true); //Done!
 8002214:	2301      	movs	r3, #1
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20027970 	.word	0x20027970
 8002224:	20000006 	.word	0x20000006
 8002228:	20000a60 	.word	0x20000a60
 800222c:	20027f6c 	.word	0x20027f6c
 8002230:	20027e94 	.word	0x20027e94
 8002234:	20000a64 	.word	0x20000a64

08002238 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af02      	add	r7, sp, #8
 800223e:	4603      	mov	r3, r0
 8002240:	460a      	mov	r2, r1
 8002242:	71fb      	strb	r3, [r7, #7]
 8002244:	4613      	mov	r3, r2
 8002246:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002248:	79bb      	ldrb	r3, [r7, #6]
 800224a:	3304      	adds	r3, #4
 800224c:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <IMU_sendPacket+0x84>)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	121b      	asrs	r3, r3, #8
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <IMU_sendPacket+0x84>)
 800225c:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 800225e:	4a17      	ldr	r2, [pc, #92]	; (80022bc <IMU_sendPacket+0x84>)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <IMU_sendPacket+0x88>)
 8002268:	5cd2      	ldrb	r2, [r2, r3]
 800226a:	1c51      	adds	r1, r2, #1
 800226c:	b2c8      	uxtb	r0, r1
 800226e:	4914      	ldr	r1, [pc, #80]	; (80022c0 <IMU_sendPacket+0x88>)
 8002270:	54c8      	strb	r0, [r1, r3]
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <IMU_sendPacket+0x84>)
 8002274:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 8002276:	79bb      	ldrb	r3, [r7, #6]
 8002278:	461a      	mov	r2, r3
 800227a:	4912      	ldr	r1, [pc, #72]	; (80022c4 <IMU_sendPacket+0x8c>)
 800227c:	4812      	ldr	r0, [pc, #72]	; (80022c8 <IMU_sendPacket+0x90>)
 800227e:	f014 fa65 	bl	801674c <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <IMU_sendPacket+0x94>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f04f 31ff 	mov.w	r1, #4294967295
 800228a:	4618      	mov	r0, r3
 800228c:	f00d f98c 	bl	800f5a8 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <IMU_sendPacket+0x98>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b299      	uxth	r1, r3
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	b29a      	uxth	r2, r3
 800229a:	2364      	movs	r3, #100	; 0x64
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	4a06      	ldr	r2, [pc, #24]	; (80022bc <IMU_sendPacket+0x84>)
 80022a2:	480c      	ldr	r0, [pc, #48]	; (80022d4 <IMU_sendPacket+0x9c>)
 80022a4:	f005 fd9e 	bl	8007de4 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <IMU_sendPacket+0x94>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f00d f9e1 	bl	800f674 <osSemaphoreRelease>

	return (true);
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20027f20 	.word	0x20027f20
 80022c0:	20000a58 	.word	0x20000a58
 80022c4:	20027e94 	.word	0x20027e94
 80022c8:	20027f24 	.word	0x20027f24
 80022cc:	20027970 	.word	0x20027970
 80022d0:	20000006 	.word	0x20000006
 80022d4:	20027f6c 	.word	0x20027f6c

080022d8 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <vPortSuppressTicksAndSleep+0x84>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <vPortSuppressTicksAndSleep+0x84>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022f2:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80022f6:	f00f ffab 	bl	8012250 <eTaskConfirmSleepModeStatus>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d107      	bne.n	8002310 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <vPortSuppressTicksAndSleep+0x84>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a15      	ldr	r2, [pc, #84]	; (800235c <vPortSuppressTicksAndSleep+0x84>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800230c:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 800230e:	e021      	b.n	8002354 <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d002      	beq.n	800231e <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f869 	bl	80023f0 <LpTimerStart>
    LpEnter( );
 800231e:	f000 f8cb 	bl	80024b8 <LpEnter>
    if (xExpectedIdleTime != (~0))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 800232a:	f000 f8cd 	bl	80024c8 <LpGetElapsedTime>
 800232e:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f00f fca7 	bl	8011c84 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <vPortSuppressTicksAndSleep+0x88>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800233c:	4b07      	ldr	r3, [pc, #28]	; (800235c <vPortSuppressTicksAndSleep+0x84>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a06      	ldr	r2, [pc, #24]	; (800235c <vPortSuppressTicksAndSleep+0x84>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <vPortSuppressTicksAndSleep+0x8c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a06      	ldr	r2, [pc, #24]	; (8002368 <vPortSuppressTicksAndSleep+0x90>)
 800234e:	3b01      	subs	r3, #1
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	b662      	cpsie	i
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	e000e010 	.word	0xe000e010
 8002360:	e000e018 	.word	0xe000e018
 8002364:	20000a80 	.word	0x20000a80
 8002368:	e000e014 	.word	0xe000e014

0800236c <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  LpTimerInit( );
 8002370:	f000 f828 	bl	80023c4 <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <vPortSetupTimerInterrupt+0x40>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <vPortSetupTimerInterrupt+0x44>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <vPortSetupTimerInterrupt+0x48>)
 8002382:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <vPortSetupTimerInterrupt+0x4c>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <vPortSetupTimerInterrupt+0x50>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <vPortSetupTimerInterrupt+0x40>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <vPortSetupTimerInterrupt+0x44>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <vPortSetupTimerInterrupt+0x54>)
 800239e:	3b01      	subs	r3, #1
 80023a0:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <vPortSetupTimerInterrupt+0x4c>)
 80023a4:	2207      	movs	r2, #7
 80023a6:	601a      	str	r2, [r3, #0]
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000078 	.word	0x20000078
 80023b0:	10624dd3 	.word	0x10624dd3
 80023b4:	20000a80 	.word	0x20000a80
 80023b8:	e000e010 	.word	0xe000e010
 80023bc:	e000e018 	.word	0xe000e018
 80023c0:	e000e014 	.word	0xe000e014

080023c4 <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <LpTimerInit+0x14>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	4903      	ldr	r1, [pc, #12]	; (80023dc <LpTimerInit+0x18>)
 80023ce:	2000      	movs	r0, #0
 80023d0:	f001 f83a 	bl	8003448 <HW_TS_Create>

  return;
 80023d4:	bf00      	nop
}
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	080023e1 	.word	0x080023e1
 80023dc:	20000a88 	.word	0x20000a88

080023e0 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 80023e4:	bf00      	nop
}
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f241 02c6 	movw	r2, #4294	; 0x10c6
 80023fe:	4293      	cmp	r3, r2
 8002400:	d80c      	bhi.n	800241c <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <LpTimerStart+0xb8>)
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	099b      	lsrs	r3, r3, #6
 8002410:	4a26      	ldr	r2, [pc, #152]	; (80024ac <LpTimerStart+0xbc>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	e034      	b.n	8002486 <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a24      	ldr	r2, [pc, #144]	; (80024b0 <LpTimerStart+0xc0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d81b      	bhi.n	800245c <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	099b      	lsrs	r3, r3, #6
 8002434:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <LpTimerStart+0xbc>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <LpTimerStart+0xc0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d806      	bhi.n	8002454 <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	e018      	b.n	8002486 <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	e014      	b.n	8002486 <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	099b      	lsrs	r3, r3, #6
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <LpTimerStart+0xbc>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8002470:	4293      	cmp	r3, r2
 8002472:	d805      	bhi.n	8002480 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <LpTimerStart+0xb8>)
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	e002      	b.n	8002486 <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 8002480:	f04f 33ff 	mov.w	r3, #4294967295
 8002484:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <LpTimerStart+0xc4>)
 8002488:	791b      	ldrb	r3, [r3, #4]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4618      	mov	r0, r3
 800248e:	f001 f8db 	bl	8003648 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 8002492:	f001 f95f 	bl	8003754 <HW_TS_RTC_ReadLeftTicksToCount>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <LpTimerStart+0xc4>)
 800249c:	601a      	str	r2, [r3, #0]

  return;
 800249e:	bf00      	nop
}
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	000f4240 	.word	0x000f4240
 80024ac:	0113094d 	.word	0x0113094d
 80024b0:	00418937 	.word	0x00418937
 80024b4:	20000a84 	.word	0x20000a84

080024b8 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 80024bc:	bf00      	nop
}
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 80024ce:	4b16      	ldr	r3, [pc, #88]	; (8002528 <LpGetElapsedTime+0x60>)
 80024d0:	681c      	ldr	r4, [r3, #0]
 80024d2:	f001 f93f 	bl	8003754 <HW_TS_RTC_ReadLeftTicksToCount>
 80024d6:	4603      	mov	r3, r0
 80024d8:	1ae3      	subs	r3, r4, r3
 80024da:	f04f 0400 	mov.w	r4, #0
 80024de:	4a13      	ldr	r2, [pc, #76]	; (800252c <LpGetElapsedTime+0x64>)
 80024e0:	fb02 f104 	mul.w	r1, r2, r4
 80024e4:	2200      	movs	r2, #0
 80024e6:	fb02 f203 	mul.w	r2, r2, r3
 80024ea:	440a      	add	r2, r1
 80024ec:	490f      	ldr	r1, [pc, #60]	; (800252c <LpGetElapsedTime+0x64>)
 80024ee:	fba3 3401 	umull	r3, r4, r3, r1
 80024f2:	4422      	add	r2, r4
 80024f4:	4614      	mov	r4, r2
 80024f6:	e9c7 3400 	strd	r3, r4, [r7]
 80024fa:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 80024fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002502:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <LpGetElapsedTime+0x68>)
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	f7fe fb00 	bl	8000b0c <__aeabi_uldivmod>
 800250c:	4603      	mov	r3, r0
 800250e:	460c      	mov	r4, r1
 8002510:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <LpGetElapsedTime+0x60>)
 8002516:	791b      	ldrb	r3, [r3, #4]
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f80b 	bl	8003534 <HW_TS_Stop>

  return (uint32_t)return_value;
 800251e:	683b      	ldr	r3, [r7, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	20000a84 	.word	0x20000a84
 800252c:	00077240 	.word	0x00077240
 8002530:	000f4240 	.word	0x000f4240

08002534 <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{0.780941, 2.300994, -0.204002},
							  {-0.184830, -0.411017, 0.892694, 0.104180, 0.895032, 0.433664, -0.977233, 0.173155, -0.122609}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 8002534:	b4b0      	push	{r4, r5, r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a12      	ldr	r2, [pc, #72]	; (8002588 <_GeometryBuilder+0x54>)
 8002540:	461c      	mov	r4, r3
 8002542:	4615      	mov	r5, r2
 8002544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a0d      	ldr	r2, [pc, #52]	; (800258c <_GeometryBuilder+0x58>)
 8002558:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800255c:	4615      	mov	r5, r2
 800255e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002566:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800256a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <_GeometryBuilder+0x5c>)
 8002572:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8002576:	4613      	mov	r3, r2
 8002578:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800257a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bcb0      	pop	{r4, r5, r7}
 8002586:	4770      	bx	lr
 8002588:	20000008 	.word	0x20000008
 800258c:	20000038 	.word	0x20000038
 8002590:	20000a8c 	.word	0x20000a8c

08002594 <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 8002594:	b5b0      	push	{r4, r5, r7, lr}
 8002596:	b096      	sub	sp, #88	; 0x58
 8002598:	af02      	add	r7, sp, #8
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2bc7      	cmp	r3, #199	; 0xc7
 80025a4:	f340 8093 	ble.w	80026ce <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3360      	adds	r3, #96	; 0x60
 80025ac:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 80025ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	015b      	lsls	r3, r3, #5
 80025b4:	3310      	adds	r3, #16
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80025c0:	2300      	movs	r3, #0
 80025c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025c4:	e011      	b.n	80025ea <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80025ce:	3104      	adds	r1, #4
 80025d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 80025d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025dc:	4293      	cmp	r3, r2
 80025de:	bf38      	it	cc
 80025e0:	4613      	movcc	r3, r2
 80025e2:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80025e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e6:	3301      	adds	r3, #1
 80025e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80025ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	ddea      	ble.n	80025c6 <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 80025f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f2:	2b0b      	cmp	r3, #11
 80025f4:	d86b      	bhi.n	80026ce <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002600:	ed93 7a01 	vldr	s14, [r3, #4]
 8002604:	f107 0214 	add.w	r2, r7, #20
 8002608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800260c:	4619      	mov	r1, r3
 800260e:	eef0 0a47 	vmov.f32	s1, s14
 8002612:	eeb0 0a67 	vmov.f32	s0, s15
 8002616:	f000 f8e5 	bl	80027e4 <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002622:	edd3 7a02 	vldr	s15, [r3, #8]
 8002626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002628:	ed93 7a03 	vldr	s14, [r3, #12]
 800262c:	f107 0208 	add.w	r2, r7, #8
 8002630:	f107 0320 	add.w	r3, r7, #32
 8002634:	4619      	mov	r1, r3
 8002636:	eef0 0a47 	vmov.f32	s1, s14
 800263a:	eeb0 0a67 	vmov.f32	s0, s15
 800263e:	f000 f8d1 	bl	80027e4 <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3370      	adds	r3, #112	; 0x70
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	327c      	adds	r2, #124	; 0x7c
 800264a:	f107 0520 	add.w	r5, r7, #32
 800264e:	f107 0408 	add.w	r4, r7, #8
 8002652:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002656:	f107 0014 	add.w	r0, r7, #20
 800265a:	9201      	str	r2, [sp, #4]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	462b      	mov	r3, r5
 8002660:	4622      	mov	r2, r4
 8002662:	f000 f945 	bl	80028f0 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 8002666:	2300      	movs	r3, #0
 8002668:	647b      	str	r3, [r7, #68]	; 0x44
 800266a:	e019      	b.n	80026a0 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002670:	331c      	adds	r3, #28
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	ed93 7a00 	vldr	s14, [r3]
 800267a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	3304      	adds	r3, #4
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002690:	331c      	adds	r3, #28
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 800269a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269c:	3301      	adds	r3, #1
 800269e:	647b      	str	r3, [r7, #68]	; 0x44
 80026a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	dde2      	ble.n	800266c <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 80026a6:	f003 f8bd 	bl	8005824 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <consume_angles+0x144>)
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80026bc:	2300      	movs	r3, #0
 80026be:	2200      	movs	r2, #0
 80026c0:	f00d f8b6 	bl	800f830 <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <consume_angles+0x148>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f00c ffd3 	bl	800f674 <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 80026ce:	bf00      	nop
 80026d0:	3750      	adds	r7, #80	; 0x50
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bdb0      	pop	{r4, r5, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20027874 	.word	0x20027874
 80026dc:	20027dac 	.word	0x20027dac

080026e0 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3304      	adds	r3, #4
 80026f0:	ed93 7a00 	vldr	s14, [r3]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	3308      	adds	r3, #8
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3308      	adds	r3, #8
 8002704:	edd3 6a00 	vldr	s13, [r3]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	3304      	adds	r3, #4
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3308      	adds	r3, #8
 8002722:	ed93 7a00 	vldr	s14, [r3]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	edd3 6a00 	vldr	s13, [r3]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3308      	adds	r3, #8
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800274a:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	ed93 7a00 	vldr	s14, [r3]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3304      	adds	r3, #4
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3304      	adds	r3, #4
 8002764:	edd3 6a00 	vldr	s13, [r3]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3308      	adds	r3, #8
 8002776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800277a:	edc3 7a00 	vstr	s15, [r3]
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <vec_length>:

float vec_length(float *vec) {
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	461a      	mov	r2, r3
 8002798:	2103      	movs	r1, #3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f013 fce6 	bl	801616c <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	f107 0308 	add.w	r3, r7, #8
 80027a8:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80027aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80027ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b6:	db09      	blt.n	80027cc <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80027b8:	ed97 0a05 	vldr	s0, [r7, #20]
 80027bc:	f014 f94a 	bl	8016a54 <sqrtf>
 80027c0:	eef0 7a40 	vmov.f32	s15, s0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	edc3 7a00 	vstr	s15, [r3]
 80027ca:	e003      	b.n	80027d4 <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

    return res;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	ee07 3a90 	vmov	s15, r3
}
 80027da:	eeb0 0a67 	vmov.f32	s0, s15
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b09a      	sub	sp, #104	; 0x68
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6178      	str	r0, [r7, #20]
 80027ec:	ed87 0a04 	vstr	s0, [r7, #16]
 80027f0:	edc7 0a03 	vstr	s1, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 80027f8:	ed97 0a04 	vldr	s0, [r7, #16]
 80027fc:	f013 fde2 	bl	80163c4 <arm_cos_f32>
 8002800:	eef0 7a40 	vmov.f32	s15, s0
 8002804:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800280e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002812:	f013 fd91 	bl	8016338 <arm_sin_f32>
 8002816:	eef0 7a40 	vmov.f32	s15, s0
 800281a:	eef1 7a67 	vneg.f32	s15, s15
 800281e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002828:	ed97 0a03 	vldr	s0, [r7, #12]
 800282c:	f013 fdca 	bl	80163c4 <arm_cos_f32>
 8002830:	eef0 7a40 	vmov.f32	s15, s0
 8002834:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002838:	ed97 0a03 	vldr	s0, [r7, #12]
 800283c:	f013 fd7c 	bl	8016338 <arm_sin_f32>
 8002840:	eef0 7a40 	vmov.f32	s15, s0
 8002844:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8002848:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 8002854:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002858:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800285c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff3d 	bl	80026e0 <vec_cross_product>
    float len = vec_length(ray);
 8002866:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff8d 	bl	800278a <vec_length>
 8002870:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 8002874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002878:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800287c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002880:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002888:	2203      	movs	r2, #3
 800288a:	eeb0 0a66 	vmov.f32	s0, s13
 800288e:	4618      	mov	r0, r3
 8002890:	f013 fe3c 	bl	801650c <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 8002894:	2303      	movs	r3, #3
 8002896:	873b      	strh	r3, [r7, #56]	; 0x38
 8002898:	2303      	movs	r3, #3
 800289a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	330c      	adds	r3, #12
 80028a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 80028a2:	2303      	movs	r3, #3
 80028a4:	863b      	strh	r3, [r7, #48]	; 0x30
 80028a6:	2301      	movs	r3, #1
 80028a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80028aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028ae:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 80028b0:	2303      	movs	r3, #3
 80028b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80028b4:	2301      	movs	r3, #1
 80028b6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 80028bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028c0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80028c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028c8:	4618      	mov	r0, r3
 80028ca:	f013 fc95 	bl	80161f8 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 80028ce:	f107 031c 	add.w	r3, r7, #28
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f107 011c 	add.w	r1, r7, #28
 80028e0:	2303      	movs	r3, #3
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	f013 feae 	bl	8016644 <arm_add_f32>
}
 80028e8:	bf00      	nop
 80028ea:	3768      	adds	r7, #104	; 0x68
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b098      	sub	sp, #96	; 0x60
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 80028fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 800290a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800290e:	2303      	movs	r3, #3
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f013 fda0 	bl	8016458 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 8002918:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800291c:	2203      	movs	r2, #3
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68b8      	ldr	r0, [r7, #8]
 8002922:	f013 fe37 	bl	8016594 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 8002926:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800292a:	2203      	movs	r2, #3
 800292c:	6839      	ldr	r1, [r7, #0]
 800292e:	68b8      	ldr	r0, [r7, #8]
 8002930:	f013 fe30 	bl	8016594 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 8002934:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002938:	2203      	movs	r2, #3
 800293a:	6839      	ldr	r1, [r7, #0]
 800293c:	6838      	ldr	r0, [r7, #0]
 800293e:	f013 fe29 	bl	8016594 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 8002942:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002946:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800294a:	2203      	movs	r2, #3
 800294c:	68b8      	ldr	r0, [r7, #8]
 800294e:	f013 fe21 	bl	8016594 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 8002952:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002956:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800295a:	2203      	movs	r2, #3
 800295c:	6838      	ldr	r0, [r7, #0]
 800295e:	f013 fe19 	bl	8016594 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 8002962:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002966:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800296a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800296e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002972:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800297a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800297e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 8002982:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002986:	eef0 7ae7 	vabs.f32	s15, s15
 800298a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002aa8 <intersect_lines+0x1b8>
 800298e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	d501      	bpl.n	800299c <intersect_lines+0xac>
        return 0;
 8002998:	2300      	movs	r3, #0
 800299a:	e081      	b.n	8002aa0 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 800299c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80029a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80029ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029b8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80029bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 80029c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 80029d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029d4:	2203      	movs	r2, #3
 80029d6:	4619      	mov	r1, r3
 80029d8:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80029dc:	68b8      	ldr	r0, [r7, #8]
 80029de:	f013 fd95 	bl	801650c <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 80029e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029e6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80029ea:	2303      	movs	r3, #3
 80029ec:	68f9      	ldr	r1, [r7, #12]
 80029ee:	f013 fe29 	bl	8016644 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 80029f2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80029f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fe:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002a02:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a0e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a16:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8002a1a:	f107 031c 	add.w	r3, r7, #28
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002a32:	6838      	ldr	r0, [r7, #0]
 8002a34:	f013 fd6a 	bl	801650c <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002a38:	f107 021c 	add.w	r2, r7, #28
 8002a3c:	f107 001c 	add.w	r0, r7, #28
 8002a40:	2303      	movs	r3, #3
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	f013 fdfe 	bl	8016644 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a54:	f107 0210 	add.w	r2, r7, #16
 8002a58:	f107 011c 	add.w	r1, r7, #28
 8002a5c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a60:	2303      	movs	r3, #3
 8002a62:	f013 fdef 	bl	8016644 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a6e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002a72:	4618      	mov	r0, r3
 8002a74:	f013 fd4a 	bl	801650c <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a78:	f107 0210 	add.w	r2, r7, #16
 8002a7c:	f107 011c 	add.w	r1, r7, #28
 8002a80:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a84:	2303      	movs	r3, #3
 8002a86:	f013 fce7 	bl	8016458 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fe7b 	bl	800278a <vec_length>
 8002a94:	eef0 7a40 	vmov.f32	s15, s0
 8002a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9a:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3760      	adds	r7, #96	; 0x60
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	3727c5ac 	.word	0x3727c5ac

08002aac <LL_AHB2_GRP1_EnableClock>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af4:	2004      	movs	r0, #4
 8002af6:	f7ff ffd9 	bl	8002aac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002afa:	2080      	movs	r0, #128	; 0x80
 8002afc:	f7ff ffd6 	bl	8002aac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b00:	2002      	movs	r0, #2
 8002b02:	f7ff ffd3 	bl	8002aac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	2001      	movs	r0, #1
 8002b08:	f7ff ffd0 	bl	8002aac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b0c:	2010      	movs	r0, #16
 8002b0e:	f7ff ffcd 	bl	8002aac <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b12:	2308      	movs	r3, #8
 8002b14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b16:	2303      	movs	r3, #3
 8002b18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4829      	ldr	r0, [pc, #164]	; (8002bc8 <MX_GPIO_Init+0xe8>)
 8002b24:	f004 ff2e 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8002b28:	f240 3333 	movw	r3, #819	; 0x333
 8002b2c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4824      	ldr	r0, [pc, #144]	; (8002bcc <MX_GPIO_Init+0xec>)
 8002b3c:	f004 ff22 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8002b40:	f649 13dc 	movw	r3, #39388	; 0x99dc
 8002b44:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b46:	2303      	movs	r3, #3
 8002b48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	4619      	mov	r1, r3
 8002b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b56:	f004 ff15 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <MX_GPIO_Init+0xf0>)
 8002b60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b62:	2301      	movs	r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6e:	f004 ff09 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002b72:	2304      	movs	r3, #4
 8002b74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b76:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <MX_GPIO_Init+0xf4>)
 8002b78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4812      	ldr	r0, [pc, #72]	; (8002bcc <MX_GPIO_Init+0xec>)
 8002b84:	f004 fefe 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b88:	2310      	movs	r3, #16
 8002b8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	480f      	ldr	r0, [pc, #60]	; (8002bd8 <MX_GPIO_Init+0xf8>)
 8002b9a:	f004 fef3 	bl	8007984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2105      	movs	r1, #5
 8002ba2:	2008      	movs	r0, #8
 8002ba4:	f004 fb67 	bl	8007276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002ba8:	2008      	movs	r0, #8
 8002baa:	f004 fb7e 	bl	80072aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2105      	movs	r1, #5
 8002bb2:	2017      	movs	r0, #23
 8002bb4:	f004 fb5f 	bl	8007276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002bb8:	2017      	movs	r0, #23
 8002bba:	f004 fb76 	bl	80072aa <HAL_NVIC_EnableIRQ>

}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	48001c00 	.word	0x48001c00
 8002bcc:	48000400 	.word	0x48000400
 8002bd0:	10210000 	.word	0x10210000
 8002bd4:	10110000 	.word	0x10110000
 8002bd8:	48001000 	.word	0x48001000

08002bdc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <LL_EXTI_EnableIT_0_31+0x24>)
 8002be6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002bea:	4905      	ldr	r1, [pc, #20]	; (8002c00 <LL_EXTI_EnableIT_0_31+0x24>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	58000800 	.word	0x58000800

08002c04 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4904      	ldr	r1, [pc, #16]	; (8002c24 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]

}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	58000800 	.word	0x58000800

08002c28 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <ReadRtcSsrValue+0x3c>)
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <ReadRtcSsrValue+0x3c>)
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002c3e:	e005      	b.n	8002c4c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c44:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <ReadRtcSsrValue+0x3c>)
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d1f5      	bne.n	8002c40 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002c54:	683b      	ldr	r3, [r7, #0]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40002800 	.word	0x40002800

08002c68 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	460a      	mov	r2, r1
 8002c72:	71fb      	strb	r3, [r7, #7]
 8002c74:	4613      	mov	r3, r2
 8002c76:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002c78:	79ba      	ldrb	r2, [r7, #6]
 8002c7a:	491d      	ldr	r1, [pc, #116]	; (8002cf0 <LinkTimerAfter+0x88>)
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	3315      	adds	r3, #21
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d009      	beq.n	8002ca6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	4916      	ldr	r1, [pc, #88]	; (8002cf0 <LinkTimerAfter+0x88>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	79fa      	ldrb	r2, [r7, #7]
 8002ca4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002ca6:	79fa      	ldrb	r2, [r7, #7]
 8002ca8:	4911      	ldr	r1, [pc, #68]	; (8002cf0 <LinkTimerAfter+0x88>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3315      	adds	r3, #21
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002cba:	79fa      	ldrb	r2, [r7, #7]
 8002cbc:	490c      	ldr	r1, [pc, #48]	; (8002cf0 <LinkTimerAfter+0x88>)
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3314      	adds	r3, #20
 8002cca:	79ba      	ldrb	r2, [r7, #6]
 8002ccc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002cce:	79ba      	ldrb	r2, [r7, #6]
 8002cd0:	4907      	ldr	r1, [pc, #28]	; (8002cf0 <LinkTimerAfter+0x88>)
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	3315      	adds	r3, #21
 8002cde:	79fa      	ldrb	r2, [r7, #7]
 8002ce0:	701a      	strb	r2, [r3, #0]

  return;
 8002ce2:	bf00      	nop
}
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000138 	.word	0x20000138

08002cf4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460a      	mov	r2, r1
 8002cfe:	71fb      	strb	r3, [r7, #7]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002d04:	4b29      	ldr	r3, [pc, #164]	; (8002dac <LinkTimerBefore+0xb8>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	79ba      	ldrb	r2, [r7, #6]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d032      	beq.n	8002d76 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002d10:	79ba      	ldrb	r2, [r7, #6]
 8002d12:	4927      	ldr	r1, [pc, #156]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3314      	adds	r3, #20
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	4922      	ldr	r1, [pc, #136]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3315      	adds	r3, #21
 8002d34:	79fa      	ldrb	r2, [r7, #7]
 8002d36:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002d38:	79fa      	ldrb	r2, [r7, #7]
 8002d3a:	491d      	ldr	r1, [pc, #116]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	3315      	adds	r3, #21
 8002d48:	79ba      	ldrb	r2, [r7, #6]
 8002d4a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002d4c:	79fa      	ldrb	r2, [r7, #7]
 8002d4e:	4918      	ldr	r1, [pc, #96]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	3314      	adds	r3, #20
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002d60:	79ba      	ldrb	r2, [r7, #6]
 8002d62:	4913      	ldr	r1, [pc, #76]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3314      	adds	r3, #20
 8002d70:	79fa      	ldrb	r2, [r7, #7]
 8002d72:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002d74:	e014      	b.n	8002da0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002d76:	79fa      	ldrb	r2, [r7, #7]
 8002d78:	490d      	ldr	r1, [pc, #52]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	440b      	add	r3, r1
 8002d84:	3315      	adds	r3, #21
 8002d86:	79ba      	ldrb	r2, [r7, #6]
 8002d88:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002d8a:	79ba      	ldrb	r2, [r7, #6]
 8002d8c:	4908      	ldr	r1, [pc, #32]	; (8002db0 <LinkTimerBefore+0xbc>)
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	3314      	adds	r3, #20
 8002d9a:	79fa      	ldrb	r2, [r7, #7]
 8002d9c:	701a      	strb	r2, [r3, #0]
  return;
 8002d9e:	bf00      	nop
}
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	200001c8 	.word	0x200001c8
 8002db0:	20000138 	.word	0x20000138

08002db4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002dbe:	4b4e      	ldr	r3, [pc, #312]	; (8002ef8 <linkTimer+0x144>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d118      	bne.n	8002dfa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002dc8:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <linkTimer+0x144>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4b4b      	ldr	r3, [pc, #300]	; (8002efc <linkTimer+0x148>)
 8002dd0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002dd2:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <linkTimer+0x144>)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002dd8:	79fa      	ldrb	r2, [r7, #7]
 8002dda:	4949      	ldr	r1, [pc, #292]	; (8002f00 <linkTimer+0x14c>)
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	3315      	adds	r3, #21
 8002de8:	2206      	movs	r2, #6
 8002dea:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002dec:	4b45      	ldr	r3, [pc, #276]	; (8002f04 <linkTimer+0x150>)
 8002dee:	f04f 32ff 	mov.w	r2, #4294967295
 8002df2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	81fb      	strh	r3, [r7, #14]
 8002df8:	e078      	b.n	8002eec <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002dfa:	f000 f909 	bl	8003010 <ReturnTimeElapsed>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	493e      	ldr	r1, [pc, #248]	; (8002f00 <linkTimer+0x14c>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	3308      	adds	r3, #8
 8002e12:	6819      	ldr	r1, [r3, #0]
 8002e14:	89fb      	ldrh	r3, [r7, #14]
 8002e16:	79fa      	ldrb	r2, [r7, #7]
 8002e18:	4419      	add	r1, r3
 8002e1a:	4839      	ldr	r0, [pc, #228]	; (8002f00 <linkTimer+0x14c>)
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4403      	add	r3, r0
 8002e26:	3308      	adds	r3, #8
 8002e28:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002e2a:	79fa      	ldrb	r2, [r7, #7]
 8002e2c:	4934      	ldr	r1, [pc, #208]	; (8002f00 <linkTimer+0x14c>)
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	440b      	add	r3, r1
 8002e38:	3308      	adds	r3, #8
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002e3e:	4b2e      	ldr	r3, [pc, #184]	; (8002ef8 <linkTimer+0x144>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4619      	mov	r1, r3
 8002e46:	4a2e      	ldr	r2, [pc, #184]	; (8002f00 <linkTimer+0x14c>)
 8002e48:	460b      	mov	r3, r1
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	440b      	add	r3, r1
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	3308      	adds	r3, #8
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d337      	bcc.n	8002ecc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002e5c:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <linkTimer+0x144>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002e62:	7b7a      	ldrb	r2, [r7, #13]
 8002e64:	4926      	ldr	r1, [pc, #152]	; (8002f00 <linkTimer+0x14c>)
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	3315      	adds	r3, #21
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002e76:	e013      	b.n	8002ea0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002e78:	7b7a      	ldrb	r2, [r7, #13]
 8002e7a:	4921      	ldr	r1, [pc, #132]	; (8002f00 <linkTimer+0x14c>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	3315      	adds	r3, #21
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002e8c:	7b7a      	ldrb	r2, [r7, #13]
 8002e8e:	491c      	ldr	r1, [pc, #112]	; (8002f00 <linkTimer+0x14c>)
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	3315      	adds	r3, #21
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002ea0:	7b3b      	ldrb	r3, [r7, #12]
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d00b      	beq.n	8002ebe <linkTimer+0x10a>
 8002ea6:	7b3a      	ldrb	r2, [r7, #12]
 8002ea8:	4915      	ldr	r1, [pc, #84]	; (8002f00 <linkTimer+0x14c>)
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d2dc      	bcs.n	8002e78 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002ebe:	7b7a      	ldrb	r2, [r7, #13]
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fecf 	bl	8002c68 <LinkTimerAfter>
 8002eca:	e00f      	b.n	8002eec <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <linkTimer+0x144>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff0c 	bl	8002cf4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <linkTimer+0x144>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <linkTimer+0x148>)
 8002ee4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002ee6:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <linkTimer+0x144>)
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002eec:	89fb      	ldrh	r3, [r7, #14]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200001c8 	.word	0x200001c8
 8002efc:	200001c9 	.word	0x200001c9
 8002f00:	20000138 	.word	0x20000138
 8002f04:	200001cc 	.word	0x200001cc

08002f08 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	460a      	mov	r2, r1
 8002f12:	71fb      	strb	r3, [r7, #7]
 8002f14:	4613      	mov	r3, r2
 8002f16:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002f18:	4b39      	ldr	r3, [pc, #228]	; (8003000 <UnlinkTimer+0xf8>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	79fa      	ldrb	r2, [r7, #7]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d111      	bne.n	8002f48 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002f24:	4b36      	ldr	r3, [pc, #216]	; (8003000 <UnlinkTimer+0xf8>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4b36      	ldr	r3, [pc, #216]	; (8003004 <UnlinkTimer+0xfc>)
 8002f2c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002f2e:	79fa      	ldrb	r2, [r7, #7]
 8002f30:	4935      	ldr	r1, [pc, #212]	; (8003008 <UnlinkTimer+0x100>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3315      	adds	r3, #21
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <UnlinkTimer+0xf8>)
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	e03e      	b.n	8002fc6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002f48:	79fa      	ldrb	r2, [r7, #7]
 8002f4a:	492f      	ldr	r1, [pc, #188]	; (8003008 <UnlinkTimer+0x100>)
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	440b      	add	r3, r1
 8002f56:	3314      	adds	r3, #20
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002f5c:	79fa      	ldrb	r2, [r7, #7]
 8002f5e:	492a      	ldr	r1, [pc, #168]	; (8003008 <UnlinkTimer+0x100>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	3315      	adds	r3, #21
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002f70:	79f9      	ldrb	r1, [r7, #7]
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	4824      	ldr	r0, [pc, #144]	; (8003008 <UnlinkTimer+0x100>)
 8002f76:	460b      	mov	r3, r1
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	440b      	add	r3, r1
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4403      	add	r3, r0
 8002f80:	3315      	adds	r3, #21
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b2d8      	uxtb	r0, r3
 8002f86:	4920      	ldr	r1, [pc, #128]	; (8003008 <UnlinkTimer+0x100>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	3315      	adds	r3, #21
 8002f94:	4602      	mov	r2, r0
 8002f96:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f98:	7bbb      	ldrb	r3, [r7, #14]
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d013      	beq.n	8002fc6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002f9e:	79f9      	ldrb	r1, [r7, #7]
 8002fa0:	7bba      	ldrb	r2, [r7, #14]
 8002fa2:	4819      	ldr	r0, [pc, #100]	; (8003008 <UnlinkTimer+0x100>)
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	440b      	add	r3, r1
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4403      	add	r3, r0
 8002fae:	3314      	adds	r3, #20
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	b2d8      	uxtb	r0, r3
 8002fb4:	4914      	ldr	r1, [pc, #80]	; (8003008 <UnlinkTimer+0x100>)
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3314      	adds	r3, #20
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002fc6:	79fa      	ldrb	r2, [r7, #7]
 8002fc8:	490f      	ldr	r1, [pc, #60]	; (8003008 <UnlinkTimer+0x100>)
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <UnlinkTimer+0xf8>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b06      	cmp	r3, #6
 8002fe2:	d107      	bne.n	8002ff4 <UnlinkTimer+0xec>
 8002fe4:	79bb      	ldrb	r3, [r7, #6]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <UnlinkTimer+0x104>)
 8002fec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  return;
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
}
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	200001c8 	.word	0x200001c8
 8003004:	200001c9 	.word	0x200001c9
 8003008:	20000138 	.word	0x20000138
 800300c:	200001cc 	.word	0x200001cc

08003010 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <ReturnTimeElapsed+0x70>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d026      	beq.n	800306e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003020:	f7ff fe02 	bl	8002c28 <ReadRtcSsrValue>
 8003024:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8003026:	4b16      	ldr	r3, [pc, #88]	; (8003080 <ReturnTimeElapsed+0x70>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	429a      	cmp	r2, r3
 800302e:	d805      	bhi.n	800303c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003030:	4b13      	ldr	r3, [pc, #76]	; (8003080 <ReturnTimeElapsed+0x70>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	e00a      	b.n	8003052 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <ReturnTimeElapsed+0x74>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <ReturnTimeElapsed+0x70>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	4413      	add	r3, r2
 8003050:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <ReturnTimeElapsed+0x78>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <ReturnTimeElapsed+0x7c>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	40d3      	lsrs	r3, r2
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	e001      	b.n	8003072 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	b29b      	uxth	r3, r3
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200001cc 	.word	0x200001cc
 8003084:	20000aa2 	.word	0x20000aa2
 8003088:	20000aa1 	.word	0x20000aa1
 800308c:	20000aa0 	.word	0x20000aa0

08003090 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d108      	bne.n	80030b2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80030a0:	f7ff fdc2 	bl	8002c28 <ReadRtcSsrValue>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <RestartWakeupCounter+0xa8>)
 80030a8:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80030aa:	2003      	movs	r0, #3
 80030ac:	f004 f91d 	bl	80072ea <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80030b0:	e03e      	b.n	8003130 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d803      	bhi.n	80030c0 <RestartWakeupCounter+0x30>
 80030b8:	4b20      	ldr	r3, [pc, #128]	; (800313c <RestartWakeupCounter+0xac>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d002      	beq.n	80030c6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80030c6:	bf00      	nop
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <RestartWakeupCounter+0xb0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f7      	beq.n	80030c8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80030d8:	4b19      	ldr	r3, [pc, #100]	; (8003140 <RestartWakeupCounter+0xb0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <RestartWakeupCounter+0xb0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80030ec:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <RestartWakeupCounter+0xb4>)
 80030f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80030f4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80030f6:	2003      	movs	r0, #3
 80030f8:	f004 f905 	bl	8007306 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <RestartWakeupCounter+0xb8>)
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	041b      	lsls	r3, r3, #16
 8003104:	88fa      	ldrh	r2, [r7, #6]
 8003106:	4910      	ldr	r1, [pc, #64]	; (8003148 <RestartWakeupCounter+0xb8>)
 8003108:	4313      	orrs	r3, r2
 800310a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800310c:	f7ff fd8c 	bl	8002c28 <ReadRtcSsrValue>
 8003110:	4602      	mov	r2, r0
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <RestartWakeupCounter+0xa8>)
 8003114:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <RestartWakeupCounter+0xb0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <RestartWakeupCounter+0xb0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003128:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800312a:	f3af 8000 	nop.w
  return ;
 800312e:	bf00      	nop
}
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	200001cc 	.word	0x200001cc
 800313c:	20000aa0 	.word	0x20000aa0
 8003140:	20000a9c 	.word	0x20000a9c
 8003144:	58000800 	.word	0x58000800
 8003148:	40002800 	.word	0x40002800

0800314c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <RescheduleTimerList+0x124>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d108      	bne.n	8003172 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003160:	bf00      	nop
 8003162:	4b44      	ldr	r3, [pc, #272]	; (8003274 <RescheduleTimerList+0x128>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f7      	bne.n	8003162 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8003172:	4b40      	ldr	r3, [pc, #256]	; (8003274 <RescheduleTimerList+0x128>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <RescheduleTimerList+0x128>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8003186:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <RescheduleTimerList+0x12c>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	493b      	ldr	r1, [pc, #236]	; (800327c <RescheduleTimerList+0x130>)
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	3308      	adds	r3, #8
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80031a0:	f7ff ff36 	bl	8003010 <ReturnTimeElapsed>
 80031a4:	4603      	mov	r3, r0
 80031a6:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d205      	bcs.n	80031bc <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <RescheduleTimerList+0x134>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e04d      	b.n	8003258 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	4a31      	ldr	r2, [pc, #196]	; (8003284 <RescheduleTimerList+0x138>)
 80031c0:	8812      	ldrh	r2, [r2, #0]
 80031c2:	b292      	uxth	r2, r2
 80031c4:	4413      	add	r3, r2
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d906      	bls.n	80031dc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80031ce:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <RescheduleTimerList+0x138>)
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80031d4:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <RescheduleTimerList+0x134>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	e03d      	b.n	8003258 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	b29a      	uxth	r2, r3
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80031e6:	4b26      	ldr	r3, [pc, #152]	; (8003280 <RescheduleTimerList+0x134>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031ec:	e034      	b.n	8003258 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80031ee:	7bfa      	ldrb	r2, [r7, #15]
 80031f0:	4922      	ldr	r1, [pc, #136]	; (800327c <RescheduleTimerList+0x130>)
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	3308      	adds	r3, #8
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	429a      	cmp	r2, r3
 8003204:	d20a      	bcs.n	800321c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	491c      	ldr	r1, [pc, #112]	; (800327c <RescheduleTimerList+0x130>)
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	440b      	add	r3, r1
 8003214:	3308      	adds	r3, #8
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e013      	b.n	8003244 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	4917      	ldr	r1, [pc, #92]	; (800327c <RescheduleTimerList+0x130>)
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	3308      	adds	r3, #8
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	7bfa      	ldrb	r2, [r7, #15]
 8003232:	1ac9      	subs	r1, r1, r3
 8003234:	4811      	ldr	r0, [pc, #68]	; (800327c <RescheduleTimerList+0x130>)
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4403      	add	r3, r0
 8003240:	3308      	adds	r3, #8
 8003242:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	490d      	ldr	r1, [pc, #52]	; (800327c <RescheduleTimerList+0x130>)
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	440b      	add	r3, r1
 8003252:	3315      	adds	r3, #21
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b06      	cmp	r3, #6
 800325c:	d1c7      	bne.n	80031ee <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800325e:	89bb      	ldrh	r3, [r7, #12]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff15 	bl	8003090 <RestartWakeupCounter>

  return ;
 8003266:	bf00      	nop
}
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40002800 	.word	0x40002800
 8003274:	20000a9c 	.word	0x20000a9c
 8003278:	200001c8 	.word	0x200001c8
 800327c:	20000138 	.word	0x20000138
 8003280:	200001d0 	.word	0x200001d0
 8003284:	20000aa4 	.word	0x20000aa4

08003288 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8003294:	4a61      	ldr	r2, [pc, #388]	; (800341c <HW_TS_Init+0x194>)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800329a:	4b60      	ldr	r3, [pc, #384]	; (800341c <HW_TS_Init+0x194>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	22ca      	movs	r2, #202	; 0xca
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24
 80032a4:	4b5d      	ldr	r3, [pc, #372]	; (800341c <HW_TS_Init+0x194>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2253      	movs	r2, #83	; 0x53
 80032ac:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032ae:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <HW_TS_Init+0x198>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4a5b      	ldr	r2, [pc, #364]	; (8003420 <HW_TS_Init+0x198>)
 80032b4:	f043 0320 	orr.w	r3, r3, #32
 80032b8:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80032ba:	4b59      	ldr	r3, [pc, #356]	; (8003420 <HW_TS_Init+0x198>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f1c3 0304 	rsb	r3, r3, #4
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b55      	ldr	r3, [pc, #340]	; (8003424 <HW_TS_Init+0x19c>)
 80032ce:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HW_TS_Init+0x198>)
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032d8:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80032dc:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	fa92 f2a2 	rbit	r2, r2
 80032e4:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	fab2 f282 	clz	r2, r2
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	40d3      	lsrs	r3, r2
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4b4c      	ldr	r3, [pc, #304]	; (8003428 <HW_TS_Init+0x1a0>)
 80032f8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80032fa:	4b49      	ldr	r3, [pc, #292]	; (8003420 <HW_TS_Init+0x198>)
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003304:	b29b      	uxth	r3, r3
 8003306:	3301      	adds	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	4b48      	ldr	r3, [pc, #288]	; (800342c <HW_TS_Init+0x1a4>)
 800330c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800330e:	4b47      	ldr	r3, [pc, #284]	; (800342c <HW_TS_Init+0x1a4>)
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	3b01      	subs	r3, #1
 8003314:	4a44      	ldr	r2, [pc, #272]	; (8003428 <HW_TS_Init+0x1a0>)
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	fb02 f303 	mul.w	r3, r2, r3
 800331c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003320:	4a40      	ldr	r2, [pc, #256]	; (8003424 <HW_TS_Init+0x19c>)
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	40d3      	lsrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800332e:	4293      	cmp	r3, r2
 8003330:	d904      	bls.n	800333c <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003332:	4b3f      	ldr	r3, [pc, #252]	; (8003430 <HW_TS_Init+0x1a8>)
 8003334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003338:	801a      	strh	r2, [r3, #0]
 800333a:	e003      	b.n	8003344 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	b29a      	uxth	r2, r3
 8003340:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HW_TS_Init+0x1a8>)
 8003342:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003344:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003348:	f7ff fc5c 	bl	8002c04 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800334c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003350:	f7ff fc44 	bl	8002bdc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d143      	bne.n	80033e2 <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800335a:	4b36      	ldr	r3, [pc, #216]	; (8003434 <HW_TS_Init+0x1ac>)
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003360:	4b35      	ldr	r3, [pc, #212]	; (8003438 <HW_TS_Init+0x1b0>)
 8003362:	f04f 32ff 	mov.w	r2, #4294967295
 8003366:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003368:	2300      	movs	r3, #0
 800336a:	75fb      	strb	r3, [r7, #23]
 800336c:	e00c      	b.n	8003388 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800336e:	7dfa      	ldrb	r2, [r7, #23]
 8003370:	4932      	ldr	r1, [pc, #200]	; (800343c <HW_TS_Init+0x1b4>)
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	330c      	adds	r3, #12
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003382:	7dfb      	ldrb	r3, [r7, #23]
 8003384:	3301      	adds	r3, #1
 8003386:	75fb      	strb	r3, [r7, #23]
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d9ef      	bls.n	800336e <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HW_TS_Init+0x1b8>)
 8003390:	2206      	movs	r2, #6
 8003392:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <HW_TS_Init+0x194>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4b1f      	ldr	r3, [pc, #124]	; (800341c <HW_TS_Init+0x194>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80033a8:	4b1c      	ldr	r3, [pc, #112]	; (800341c <HW_TS_Init+0x194>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HW_TS_Init+0x194>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80033bc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80033be:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HW_TS_Init+0x1bc>)
 80033c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033c4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80033c6:	2003      	movs	r0, #3
 80033c8:	f003 ff9d 	bl	8007306 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80033cc:	4b13      	ldr	r3, [pc, #76]	; (800341c <HW_TS_Init+0x194>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HW_TS_Init+0x194>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	e00a      	b.n	80033f8 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HW_TS_Init+0x194>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80033f2:	2003      	movs	r0, #3
 80033f4:	f003 ff79 	bl	80072ea <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HW_TS_Init+0x194>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	22ff      	movs	r2, #255	; 0xff
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003402:	2200      	movs	r2, #0
 8003404:	2106      	movs	r1, #6
 8003406:	2003      	movs	r0, #3
 8003408:	f003 ff35 	bl	8007276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800340c:	2003      	movs	r0, #3
 800340e:	f003 ff4c 	bl	80072aa <HAL_NVIC_EnableIRQ>

  return;
 8003412:	bf00      	nop
}
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000a9c 	.word	0x20000a9c
 8003420:	40002800 	.word	0x40002800
 8003424:	20000aa0 	.word	0x20000aa0
 8003428:	20000aa1 	.word	0x20000aa1
 800342c:	20000aa2 	.word	0x20000aa2
 8003430:	20000aa4 	.word	0x20000aa4
 8003434:	200001d0 	.word	0x200001d0
 8003438:	200001cc 	.word	0x200001cc
 800343c:	20000138 	.word	0x20000138
 8003440:	200001c8 	.word	0x200001c8
 8003444:	58000800 	.word	0x58000800

08003448 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003448:	b480      	push	{r7}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345e:	f3ef 8310 	mrs	r3, PRIMASK
 8003462:	61fb      	str	r3, [r7, #28]
  return(result);
 8003464:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003466:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003468:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800346a:	e004      	b.n	8003476 <HW_TS_Create+0x2e>
  {
    loop++;
 800346c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003470:	3301      	adds	r3, #1
 8003472:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800347a:	2b05      	cmp	r3, #5
 800347c:	d80c      	bhi.n	8003498 <HW_TS_Create+0x50>
 800347e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003482:	492b      	ldr	r1, [pc, #172]	; (8003530 <HW_TS_Create+0xe8>)
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	330c      	adds	r3, #12
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e9      	bne.n	800346c <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003498:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800349c:	2b06      	cmp	r3, #6
 800349e:	d037      	beq.n	8003510 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80034a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034a4:	4922      	ldr	r1, [pc, #136]	; (8003530 <HW_TS_Create+0xe8>)
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	330c      	adds	r3, #12
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80034c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034c4:	491a      	ldr	r1, [pc, #104]	; (8003530 <HW_TS_Create+0xe8>)
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	3310      	adds	r3, #16
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80034d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034da:	4915      	ldr	r1, [pc, #84]	; (8003530 <HW_TS_Create+0xe8>)
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	440b      	add	r3, r1
 80034e6:	330d      	adds	r3, #13
 80034e8:	79fa      	ldrb	r2, [r7, #7]
 80034ea:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80034ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034f0:	490f      	ldr	r1, [pc, #60]	; (8003530 <HW_TS_Create+0xe8>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003506:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003508:	2300      	movs	r3, #0
 800350a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800350e:	e007      	b.n	8003520 <HW_TS_Create+0xd8>
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003524:	4618      	mov	r0, r3
 8003526:	372c      	adds	r7, #44	; 0x2c
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	20000138 	.word	0x20000138

08003534 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	60fb      	str	r3, [r7, #12]
  return(result);
 8003544:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003548:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800354a:	2003      	movs	r0, #3
 800354c:	f003 febb 	bl	80072c6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HW_TS_Stop+0xfc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	22ca      	movs	r2, #202	; 0xca
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
 800355a:	4b35      	ldr	r3, [pc, #212]	; (8003630 <HW_TS_Stop+0xfc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2253      	movs	r2, #83	; 0x53
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003564:	79fa      	ldrb	r2, [r7, #7]
 8003566:	4933      	ldr	r1, [pc, #204]	; (8003634 <HW_TS_Stop+0x100>)
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	330c      	adds	r3, #12
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d148      	bne.n	800360e <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fcc1 	bl	8002f08 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003586:	4b2c      	ldr	r3, [pc, #176]	; (8003638 <HW_TS_Stop+0x104>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	2b06      	cmp	r3, #6
 8003590:	d135      	bne.n	80035fe <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003592:	4b2a      	ldr	r3, [pc, #168]	; (800363c <HW_TS_Stop+0x108>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359e:	d108      	bne.n	80035b2 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80035a0:	bf00      	nop
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HW_TS_Stop+0xfc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f7      	bne.n	80035a2 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80035b2:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <HW_TS_Stop+0xfc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HW_TS_Stop+0xfc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80035c6:	bf00      	nop
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HW_TS_Stop+0xfc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f7      	beq.n	80035c8 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HW_TS_Stop+0xfc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HW_TS_Stop+0xfc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80035ec:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HW_TS_Stop+0x10c>)
 80035f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035f4:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80035f6:	2003      	movs	r0, #3
 80035f8:	f003 fe85 	bl	8007306 <HAL_NVIC_ClearPendingIRQ>
 80035fc:	e007      	b.n	800360e <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HW_TS_Stop+0x110>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	7cfa      	ldrb	r2, [r7, #19]
 8003606:	429a      	cmp	r2, r3
 8003608:	d001      	beq.n	800360e <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 800360a:	f7ff fd9f 	bl	800314c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800360e:	4b08      	ldr	r3, [pc, #32]	; (8003630 <HW_TS_Stop+0xfc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	22ff      	movs	r2, #255	; 0xff
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003618:	2003      	movs	r0, #3
 800361a:	f003 fe46 	bl	80072aa <HAL_NVIC_EnableIRQ>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003628:	bf00      	nop
}
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000a9c 	.word	0x20000a9c
 8003634:	20000138 	.word	0x20000138
 8003638:	200001c8 	.word	0x200001c8
 800363c:	40002800 	.word	0x40002800
 8003640:	58000800 	.word	0x58000800
 8003644:	200001c9 	.word	0x200001c9

08003648 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003654:	79fa      	ldrb	r2, [r7, #7]
 8003656:	493b      	ldr	r1, [pc, #236]	; (8003744 <HW_TS_Start+0xfc>)
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	330c      	adds	r3, #12
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d103      	bne.n	8003674 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff ff60 	bl	8003534 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003674:	f3ef 8310 	mrs	r3, PRIMASK
 8003678:	60fb      	str	r3, [r7, #12]
  return(result);
 800367a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800367c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800367e:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003680:	2003      	movs	r0, #3
 8003682:	f003 fe20 	bl	80072c6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003686:	4b30      	ldr	r3, [pc, #192]	; (8003748 <HW_TS_Start+0x100>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	22ca      	movs	r2, #202	; 0xca
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
 8003690:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HW_TS_Start+0x100>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2253      	movs	r2, #83	; 0x53
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800369a:	79fa      	ldrb	r2, [r7, #7]
 800369c:	4929      	ldr	r1, [pc, #164]	; (8003744 <HW_TS_Start+0xfc>)
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	330c      	adds	r3, #12
 80036aa:	2202      	movs	r2, #2
 80036ac:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80036ae:	79fa      	ldrb	r2, [r7, #7]
 80036b0:	4924      	ldr	r1, [pc, #144]	; (8003744 <HW_TS_Start+0xfc>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	440b      	add	r3, r1
 80036bc:	3308      	adds	r3, #8
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80036c2:	79fa      	ldrb	r2, [r7, #7]
 80036c4:	491f      	ldr	r1, [pc, #124]	; (8003744 <HW_TS_Start+0xfc>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	3304      	adds	r3, #4
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fb6b 	bl	8002db4 <linkTimer>
 80036de:	4603      	mov	r3, r0
 80036e0:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HW_TS_Start+0x104>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HW_TS_Start+0x108>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	7c7a      	ldrb	r2, [r7, #17]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d002      	beq.n	80036fa <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80036f4:	f7ff fd2a 	bl	800314c <RescheduleTimerList>
 80036f8:	e013      	b.n	8003722 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80036fa:	79fa      	ldrb	r2, [r7, #7]
 80036fc:	4911      	ldr	r1, [pc, #68]	; (8003744 <HW_TS_Start+0xfc>)
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	3308      	adds	r3, #8
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	8a7b      	ldrh	r3, [r7, #18]
 800370e:	79fa      	ldrb	r2, [r7, #7]
 8003710:	1ac9      	subs	r1, r1, r3
 8003712:	480c      	ldr	r0, [pc, #48]	; (8003744 <HW_TS_Start+0xfc>)
 8003714:	4613      	mov	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4403      	add	r3, r0
 800371e:	3308      	adds	r3, #8
 8003720:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HW_TS_Start+0x100>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	22ff      	movs	r2, #255	; 0xff
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800372c:	2003      	movs	r0, #3
 800372e:	f003 fdbc 	bl	80072aa <HAL_NVIC_EnableIRQ>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800373c:	bf00      	nop
}
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000138 	.word	0x20000138
 8003748:	20000a9c 	.word	0x20000a9c
 800374c:	200001c8 	.word	0x200001c8
 8003750:	200001c9 	.word	0x200001c9

08003754 <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375a:	f3ef 8310 	mrs	r3, PRIMASK
 800375e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003760:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003762:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003764:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003766:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003772:	d112      	bne.n	800379a <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 8003774:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 800377a:	f7ff fc49 	bl	8003010 <ReturnTimeElapsed>
 800377e:	4603      	mov	r3, r0
 8003780:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 8003782:	89fa      	ldrh	r2, [r7, #14]
 8003784:	89bb      	ldrh	r3, [r7, #12]
 8003786:	429a      	cmp	r2, r3
 8003788:	d904      	bls.n	8003794 <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 800378a:	89fa      	ldrh	r2, [r7, #14]
 800378c:	89bb      	ldrh	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	82fb      	strh	r3, [r7, #22]
 8003792:	e005      	b.n	80037a0 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	82fb      	strh	r3, [r7, #22]
 8003798:	e002      	b.n	80037a0 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 800379a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800379e:	82fb      	strh	r3, [r7, #22]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 80037aa:	8afb      	ldrh	r3, [r7, #22]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40002800 	.word	0x40002800

080037b8 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	4603      	mov	r3, r0
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	4613      	mov	r3, r2
 80037c8:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d000      	beq.n	80037d2 <HW_UART_Receive_IT+0x1a>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80037d0:	e00c      	b.n	80037ec <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(huart1, USART1);
 80037d2:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <HW_UART_Receive_IT+0x3c>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <HW_UART_Receive_IT+0x40>)
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <HW_UART_Receive_IT+0x44>)
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	89bb      	ldrh	r3, [r7, #12]
 80037e0:	461a      	mov	r2, r3
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	4804      	ldr	r0, [pc, #16]	; (80037f8 <HW_UART_Receive_IT+0x40>)
 80037e6:	f009 fabd 	bl	800cd64 <HAL_UART_Receive_IT>
            break;
 80037ea:	bf00      	nop
    }

    return;
 80037ec:	bf00      	nop
}
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20027f64 	.word	0x20027f64
 80037f8:	200285d0 	.word	0x200285d0
 80037fc:	40013800 	.word	0x40013800

08003800 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	4603      	mov	r3, r0
 800380c:	73fb      	strb	r3, [r7, #15]
 800380e:	4613      	mov	r3, r2
 8003810:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d000      	beq.n	800381a <HW_UART_Transmit_IT+0x1a>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8003818:	e00c      	b.n	8003834 <HW_UART_Transmit_IT+0x34>
            HW_UART_TX_IT(huart1, USART1);
 800381a:	4a08      	ldr	r2, [pc, #32]	; (800383c <HW_UART_Transmit_IT+0x3c>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b07      	ldr	r3, [pc, #28]	; (8003840 <HW_UART_Transmit_IT+0x40>)
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <HW_UART_Transmit_IT+0x44>)
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	89bb      	ldrh	r3, [r7, #12]
 8003828:	461a      	mov	r2, r3
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	4804      	ldr	r0, [pc, #16]	; (8003840 <HW_UART_Transmit_IT+0x40>)
 800382e:	f009 fa15 	bl	800cc5c <HAL_UART_Transmit_IT>
            break;
 8003832:	bf00      	nop
    }

    return;
 8003834:	bf00      	nop
}
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20027f68 	.word	0x20027f68
 8003840:	200285d0 	.word	0x200285d0
 8003844:	40013800 	.word	0x40013800

08003848 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HAL_UART_RxCpltCallback+0x30>)
 8003858:	429a      	cmp	r2, r3
 800385a:	d000      	beq.n	800385e <HAL_UART_RxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 800385c:	e007      	b.n	800386e <HAL_UART_RxCpltCallback+0x26>
            if(HW_huart1RxCb)
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <HAL_UART_RxCpltCallback+0x34>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_UART_RxCpltCallback+0x24>
                HW_huart1RxCb();
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_UART_RxCpltCallback+0x34>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4798      	blx	r3
            break;
 800386c:	bf00      	nop
    }

    return;
 800386e:	bf00      	nop
}
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40013800 	.word	0x40013800
 800387c:	20027f64 	.word	0x20027f64

08003880 <LL_AHB2_GRP1_EnableClock>:
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800388e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4313      	orrs	r3, r2
 8003896:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4013      	ands	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038a4:	68fb      	ldr	r3, [r7, #12]
}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80038ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4013      	ands	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038d6:	68fb      	ldr	r3, [r7, #12]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <MX_I2C1_Init+0x74>)
 80038ea:	4a1c      	ldr	r2, [pc, #112]	; (800395c <MX_I2C1_Init+0x78>)
 80038ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 80038ee:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <MX_I2C1_Init+0x74>)
 80038f0:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <MX_I2C1_Init+0x7c>)
 80038f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <MX_I2C1_Init+0x74>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <MX_I2C1_Init+0x74>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003900:	4b15      	ldr	r3, [pc, #84]	; (8003958 <MX_I2C1_Init+0x74>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003906:	4b14      	ldr	r3, [pc, #80]	; (8003958 <MX_I2C1_Init+0x74>)
 8003908:	2200      	movs	r2, #0
 800390a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <MX_I2C1_Init+0x74>)
 800390e:	2200      	movs	r2, #0
 8003910:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <MX_I2C1_Init+0x74>)
 8003914:	2200      	movs	r2, #0
 8003916:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <MX_I2C1_Init+0x74>)
 800391a:	2200      	movs	r2, #0
 800391c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800391e:	480e      	ldr	r0, [pc, #56]	; (8003958 <MX_I2C1_Init+0x74>)
 8003920:	f004 f9d0 	bl	8007cc4 <HAL_I2C_Init>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800392a:	f000 fd6d 	bl	8004408 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800392e:	2100      	movs	r1, #0
 8003930:	4809      	ldr	r0, [pc, #36]	; (8003958 <MX_I2C1_Init+0x74>)
 8003932:	f006 f8c8 	bl	8009ac6 <HAL_I2CEx_ConfigAnalogFilter>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800393c:	f000 fd64 	bl	8004408 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003940:	2100      	movs	r1, #0
 8003942:	4805      	ldr	r0, [pc, #20]	; (8003958 <MX_I2C1_Init+0x74>)
 8003944:	f006 f90a 	bl	8009b5c <HAL_I2CEx_ConfigDigitalFilter>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800394e:	f000 fd5b 	bl	8004408 <Error_Handler>
  }

}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20027f6c 	.word	0x20027f6c
 800395c:	40005400 	.word	0x40005400
 8003960:	00e27cae 	.word	0x00e27cae

08003964 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <HAL_I2C_MspInit+0x6c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d120      	bne.n	80039c8 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003986:	2001      	movs	r0, #1
 8003988:	f7ff ff7a 	bl	8003880 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800398c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003990:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003992:	2312      	movs	r3, #18
 8003994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800399e:	2304      	movs	r3, #4
 80039a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a2:	f107 030c 	add.w	r3, r7, #12
 80039a6:	4619      	mov	r1, r3
 80039a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ac:	f003 ffea 	bl	8007984 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039b0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80039b4:	f7ff ff7d 	bl	80038b2 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80039b8:	2200      	movs	r2, #0
 80039ba:	2105      	movs	r1, #5
 80039bc:	201e      	movs	r0, #30
 80039be:	f003 fc5a 	bl	8007276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80039c2:	201e      	movs	r0, #30
 80039c4:	f003 fc71 	bl	80072aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80039c8:	bf00      	nop
 80039ca:	3720      	adds	r7, #32
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40005400 	.word	0x40005400

080039d4 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 80039dc:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <InertialSensingTask+0xec>)
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 80039e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80039e6:	2120      	movs	r1, #32
 80039e8:	204a      	movs	r0, #74	; 0x4a
 80039ea:	f7fd fff1 	bl	80019d0 <IMU_begin>

	uint32_t evt = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80039f2:	f04f 32ff 	mov.w	r2, #4294967295
 80039f6:	2100      	movs	r1, #0
 80039f8:	2001      	movs	r0, #1
 80039fa:	f00b fa09 	bl	800ee10 <osThreadFlagsWait>
		//evt = 0x00000001U;

	//			// configure IMU
		osDelay(500);
 80039fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a02:	f00b fa99 	bl	800ef38 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 8003a06:	2064      	movs	r0, #100	; 0x64
 8003a08:	f7fe fade 	bl	8001fc8 <IMU_enableRotationVector>
		osDelay(100);
 8003a0c:	2064      	movs	r0, #100	; 0x64
 8003a0e:	f00b fa93 	bl	800ef38 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <InertialSensingTask+0xf0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <InertialSensingTask+0xf4>)
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a1e:	f7fe fae1 	bl	8001fe4 <IMU_enableActivityClassifier>

		// give some time for things to buffer
		osDelay(400);
 8003a22:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003a26:	f00b fa87 	bl	800ef38 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 8003a2a:	2064      	movs	r0, #100	; 0x64
 8003a2c:	f00b fa84 	bl	800ef38 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8003a30:	4b26      	ldr	r3, [pc, #152]	; (8003acc <InertialSensingTask+0xf8>)
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	2364      	movs	r3, #100	; 0x64
 8003a36:	2200      	movs	r2, #0
 8003a38:	4925      	ldr	r1, [pc, #148]	; (8003ad0 <InertialSensingTask+0xfc>)
 8003a3a:	f00b ff6d 	bl	800f918 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 8003a3e:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <InertialSensingTask+0x100>)
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	2300      	movs	r3, #0
 8003a44:	2200      	movs	r2, #0
 8003a46:	4924      	ldr	r1, [pc, #144]	; (8003ad8 <InertialSensingTask+0x104>)
 8003a48:	f00b ff66 	bl	800f918 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 8003a4c:	4b23      	ldr	r3, [pc, #140]	; (8003adc <InertialSensingTask+0x108>)
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	2200      	movs	r2, #0
 8003a54:	491e      	ldr	r1, [pc, #120]	; (8003ad0 <InertialSensingTask+0xfc>)
 8003a56:	f00b feeb 	bl	800f830 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 8003a5a:	2120      	movs	r1, #32
 8003a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a60:	f004 f900 	bl	8007c64 <HAL_GPIO_ReadPin>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <InertialSensingTask+0x9a>
 8003a6a:	f7fd ffe9 	bl	8001a40 <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2100      	movs	r1, #0
 8003a72:	2002      	movs	r0, #2
 8003a74:	f00b f9cc 	bl	800ee10 <osThreadFlagsWait>
 8003a78:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0d2      	beq.n	8003a2a <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 8003a84:	f7fe fa3e 	bl	8001f04 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 8003a88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a8c:	f00b fa54 	bl	800ef38 <osDelay>

				inertialEnabled = 0;
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <InertialSensingTask+0xec>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <InertialSensingTask+0x108>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f00b ffe0 	bl	800fa60 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <InertialSensingTask+0x100>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f00b ffdb 	bl	800fa60 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <InertialSensingTask+0xf8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f00b ffd6 	bl	800fa60 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8003ab4:	200e      	movs	r0, #14
 8003ab6:	f00b f95b 	bl	800ed70 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 8003aba:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003abc:	e799      	b.n	80039f2 <InertialSensingTask+0x1e>
 8003abe:	bf00      	nop
 8003ac0:	20000aa6 	.word	0x20000aa6
 8003ac4:	20000068 	.word	0x20000068
 8003ac8:	20027ffc 	.word	0x20027ffc
 8003acc:	20027984 	.word	0x20027984
 8003ad0:	20027fc0 	.word	0x20027fc0
 8003ad4:	20027968 	.word	0x20027968
 8003ad8:	20027fd8 	.word	0x20027fd8
 8003adc:	20027974 	.word	0x20027974

08003ae0 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d105      	bne.n	8003afc <HAL_GPIO_EXTI_Callback+0x1c>
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <HAL_GPIO_EXTI_Callback+0x24>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003af8:	f7fd ffa2 	bl	8001a40 <IMU_dataAvailable>
	}
}
 8003afc:	bf00      	nop
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000aa6 	.word	0x20000aa6

08003b08 <_Input>:
//#include "UART_Print.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003b14:	480b      	ldr	r0, [pc, #44]	; (8003b44 <_Input+0x3c>)
 8003b16:	f7fe fd0d 	bl	8002534 <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	480a      	ldr	r0, [pc, #40]	; (8003b48 <_Input+0x40>)
 8003b1e:	f000 feb3 	bl	8004888 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <_Input+0x40>)
 8003b24:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <_Input+0x3c>)
 8003b26:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a06      	ldr	r2, [pc, #24]	; (8003b48 <_Input+0x40>)
 8003b2e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20028028 	.word	0x20028028
 8003b48:	200280b0 	.word	0x200280b0

08003b4c <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f00b f956 	bl	800ee10 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003b64:	4818      	ldr	r0, [pc, #96]	; (8003bc8 <PulseHandlerTask+0x7c>)
 8003b66:	f007 ff6d 	bl	800ba44 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8003b6a:	4818      	ldr	r0, [pc, #96]	; (8003bcc <PulseHandlerTask+0x80>)
 8003b6c:	f003 f99c 	bl	8006ea8 <HAL_COMP_Start>
		_Input(&input0, 0);
 8003b70:	2100      	movs	r1, #0
 8003b72:	4817      	ldr	r0, [pc, #92]	; (8003bd0 <PulseHandlerTask+0x84>)
 8003b74:	f7ff ffc8 	bl	8003b08 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003b78:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <PulseHandlerTask+0x88>)
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b80:	2200      	movs	r2, #0
 8003b82:	4915      	ldr	r1, [pc, #84]	; (8003bd8 <PulseHandlerTask+0x8c>)
 8003b84:	f00b fec8 	bl	800f918 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <PulseHandlerTask+0x84>)
 8003b8a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003b8e:	4912      	ldr	r1, [pc, #72]	; (8003bd8 <PulseHandlerTask+0x8c>)
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fead 	bl	80048f0 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	2002      	movs	r0, #2
 8003b9c:	f00b f938 	bl	800ee10 <osThreadFlagsWait>
 8003ba0:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0e5      	beq.n	8003b78 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003bac:	4807      	ldr	r0, [pc, #28]	; (8003bcc <PulseHandlerTask+0x80>)
 8003bae:	f003 f9c5 	bl	8006f3c <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003bb2:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <PulseHandlerTask+0x7c>)
 8003bb4:	f007 ff70 	bl	800ba98 <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <PulseHandlerTask+0x88>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f00b ff4f 	bl	800fa60 <osMessageQueueReset>
				break;
 8003bc2:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003bc4:	e7c8      	b.n	8003b58 <PulseHandlerTask+0xc>
 8003bc6:	bf00      	nop
 8003bc8:	20028590 	.word	0x20028590
 8003bcc:	20027dd4 	.word	0x20027dd4
 8003bd0:	20027988 	.word	0x20027988
 8003bd4:	20027870 	.word	0x20027870
 8003bd8:	20028008 	.word	0x20028008

08003bdc <get3D_location>:
//}

struct LogMessage statusMessage;


void get3D_location(void *arguments){
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
//	uint32_t startTime = HAL_GetTick();
//	volatile uint32_t deltaTime;

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8003be8:	4b33      	ldr	r3, [pc, #204]	; (8003cb8 <get3D_location+0xdc>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f00b fcda 	bl	800f5a8 <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 8003bf4:	4b31      	ldr	r3, [pc, #196]	; (8003cbc <get3D_location+0xe0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f00b fcd4 	bl	800f5a8 <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003c00:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <get3D_location+0xe4>)
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295
 8003c08:	2200      	movs	r2, #0
 8003c0a:	492e      	ldr	r1, [pc, #184]	; (8003cc4 <get3D_location+0xe8>)
 8003c0c:	f00b fe84 	bl	800f918 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8003c10:	4b2c      	ldr	r3, [pc, #176]	; (8003cc4 <get3D_location+0xe8>)
 8003c12:	789b      	ldrb	r3, [r3, #2]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d116      	bne.n	8003c46 <get3D_location+0x6a>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003c18:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <get3D_location+0xe4>)
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2200      	movs	r2, #0
 8003c20:	4928      	ldr	r1, [pc, #160]	; (8003cc4 <get3D_location+0xe8>)
 8003c22:	f00b fe05 	bl	800f830 <osMessageQueuePut>

		blinkActive = 1;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003c2a:	4b27      	ldr	r3, [pc, #156]	; (8003cc8 <get3D_location+0xec>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f00b f83b 	bl	800ecac <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8003c36:	4b21      	ldr	r3, [pc, #132]	; (8003cbc <get3D_location+0xe0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f00b fcb2 	bl	800f5a8 <osSemaphoreAcquire>
 8003c44:	e006      	b.n	8003c54 <get3D_location+0x78>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <get3D_location+0xe4>)
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	491d      	ldr	r1, [pc, #116]	; (8003cc4 <get3D_location+0xe8>)
 8003c50:	f00b fdee 	bl	800f830 <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <get3D_location+0xf0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f04f 31ff 	mov.w	r1, #4294967295
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f00b fca3 	bl	800f5a8 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8003c62:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <get3D_location+0xf4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2101      	movs	r1, #1
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f00b f81f 	bl	800ecac <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <get3D_location+0xdc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c76:	4618      	mov	r0, r3
 8003c78:	f00b fc96 	bl	800f5a8 <osSemaphoreAcquire>

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <get3D_location+0xf0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f00b fcf7 	bl	800f674 <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <get3D_location+0xf4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f00b f80d 	bl	800ecac <osThreadFlagsSet>

	// empty queue
	osMessageQueueReset(viveQueueHandle);
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <get3D_location+0xf8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f00b fee2 	bl	800fa60 <osMessageQueueReset>

	if(blinkActive){
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <get3D_location+0xd2>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <get3D_location+0xec>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f00a ffff 	bl	800ecac <osThreadFlagsSet>
	}

}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20027dac 	.word	0x20027dac
 8003cbc:	20027db4 	.word	0x20027db4
 8003cc0:	20027980 	.word	0x20027980
 8003cc4:	20027dcc 	.word	0x20027dcc
 8003cc8:	2002795c 	.word	0x2002795c
 8003ccc:	20027970 	.word	0x20027970
 8003cd0:	20027db8 	.word	0x20027db8
 8003cd4:	20027874 	.word	0x20027874

08003cd8 <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003cee:	723b      	strb	r3, [r7, #8]
 8003cf0:	887b      	ldrh	r3, [r7, #2]
 8003cf2:	817b      	strh	r3, [r7, #10]
 8003cf4:	883b      	ldrh	r3, [r7, #0]
 8003cf6:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <enqueue_pulse+0x48>)
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	f107 0108 	add.w	r1, r7, #8
 8003d00:	2300      	movs	r3, #0
 8003d02:	2200      	movs	r2, #0
 8003d04:	f00b fd94 	bl	800f830 <osMessageQueuePut>
	count = osMessageQueueGetCount(pulseQueueHandle);
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <enqueue_pulse+0x48>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f00b fe75 	bl	800f9fc <osMessageQueueGetCount>
 8003d12:	4602      	mov	r2, r0
 8003d14:	4b03      	ldr	r3, [pc, #12]	; (8003d24 <enqueue_pulse+0x4c>)
 8003d16:	601a      	str	r2, [r3, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20027870 	.word	0x20027870
 8003d24:	20000aa8 	.word	0x20000aa8

08003d28 <InterProcessorTask>:
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};

struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]

	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d34:	4b68      	ldr	r3, [pc, #416]	; (8003ed8 <InterProcessorTask+0x1b0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f04f 31ff 	mov.w	r1, #4294967295
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f00b fc33 	bl	800f5a8 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003d42:	bf00      	nop
 8003d44:	2364      	movs	r3, #100	; 0x64
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	2306      	movs	r3, #6
 8003d4a:	4a64      	ldr	r2, [pc, #400]	; (8003edc <InterProcessorTask+0x1b4>)
 8003d4c:	21e6      	movs	r1, #230	; 0xe6
 8003d4e:	4864      	ldr	r0, [pc, #400]	; (8003ee0 <InterProcessorTask+0x1b8>)
 8003d50:	f004 f848 	bl	8007de4 <HAL_I2C_Master_Transmit>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f4      	bne.n	8003d44 <InterProcessorTask+0x1c>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003d5a:	4b5f      	ldr	r3, [pc, #380]	; (8003ed8 <InterProcessorTask+0x1b0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f00b fc88 	bl	800f674 <osSemaphoreRelease>

	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003d64:	f04f 32ff 	mov.w	r2, #4294967295
 8003d68:	2100      	movs	r1, #0
 8003d6a:	2001      	movs	r0, #1
 8003d6c:	f00b f850 	bl	800ee10 <osThreadFlagsWait>
 8003d70:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f3      	beq.n	8003d64 <InterProcessorTask+0x3c>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003d7c:	4b59      	ldr	r3, [pc, #356]	; (8003ee4 <InterProcessorTask+0x1bc>)
 8003d7e:	4a5a      	ldr	r2, [pc, #360]	; (8003ee8 <InterProcessorTask+0x1c0>)
 8003d80:	6811      	ldr	r1, [r2, #0]
 8003d82:	6019      	str	r1, [r3, #0]
 8003d84:	8892      	ldrh	r2, [r2, #4]
 8003d86:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d88:	4b53      	ldr	r3, [pc, #332]	; (8003ed8 <InterProcessorTask+0x1b0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d90:	4618      	mov	r0, r3
 8003d92:	f00b fc09 	bl	800f5a8 <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003d96:	bf00      	nop
 8003d98:	2364      	movs	r3, #100	; 0x64
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2306      	movs	r3, #6
 8003d9e:	4a51      	ldr	r2, [pc, #324]	; (8003ee4 <InterProcessorTask+0x1bc>)
 8003da0:	21e6      	movs	r1, #230	; 0xe6
 8003da2:	484f      	ldr	r0, [pc, #316]	; (8003ee0 <InterProcessorTask+0x1b8>)
 8003da4:	f004 f81e 	bl	8007de4 <HAL_I2C_Master_Transmit>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f4      	bne.n	8003d98 <InterProcessorTask+0x70>
			osDelay(100);
 8003dae:	2064      	movs	r0, #100	; 0x64
 8003db0:	f00b f8c2 	bl	800ef38 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003db4:	4b48      	ldr	r3, [pc, #288]	; (8003ed8 <InterProcessorTask+0x1b0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f00b fc5b 	bl	800f674 <osSemaphoreRelease>
			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8003dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	2006      	movs	r0, #6
 8003dc6:	f00b f823 	bl	800ee10 <osThreadFlagsWait>
 8003dca:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d05b      	beq.n	8003e8e <InterProcessorTask+0x166>
 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003dd6:	4b40      	ldr	r3, [pc, #256]	; (8003ed8 <InterProcessorTask+0x1b0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f04f 31ff 	mov.w	r1, #4294967295
 8003dde:	4618      	mov	r0, r3
 8003de0:	f00b fbe2 	bl	800f5a8 <osSemaphoreAcquire>
// 					taskENTER_CRITICAL();
 					// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003de4:	bf00      	nop
 8003de6:	2364      	movs	r3, #100	; 0x64
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	2306      	movs	r3, #6
 8003dec:	4a3d      	ldr	r2, [pc, #244]	; (8003ee4 <InterProcessorTask+0x1bc>)
 8003dee:	21e6      	movs	r1, #230	; 0xe6
 8003df0:	483b      	ldr	r0, [pc, #236]	; (8003ee0 <InterProcessorTask+0x1b8>)
 8003df2:	f003 fff7 	bl	8007de4 <HAL_I2C_Master_Transmit>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f4      	bne.n	8003de6 <InterProcessorTask+0xbe>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003dfc:	2008      	movs	r0, #8
 8003dfe:	f00a ffb7 	bl	800ed70 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003e02:	bf00      	nop
 8003e04:	2358      	movs	r3, #88	; 0x58
 8003e06:	4a39      	ldr	r2, [pc, #228]	; (8003eec <InterProcessorTask+0x1c4>)
 8003e08:	21e6      	movs	r1, #230	; 0xe6
 8003e0a:	4835      	ldr	r0, [pc, #212]	; (8003ee0 <InterProcessorTask+0x1b8>)
 8003e0c:	f004 f9d4 	bl	80081b8 <HAL_I2C_Master_Receive_IT>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f6      	bne.n	8003e04 <InterProcessorTask+0xdc>
// 						osDelay(100);
// 						osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8003e16:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	200a      	movs	r0, #10
 8003e1e:	f00a fff7 	bl	800ee10 <osThreadFlagsWait>
 8003e22:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8003e24:	4b2c      	ldr	r3, [pc, #176]	; (8003ed8 <InterProcessorTask+0x1b0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f00b fc23 	bl	800f674 <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d14d      	bne.n	8003ed4 <InterProcessorTask+0x1ac>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8003e38:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <InterProcessorTask+0x1c4>)
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3c:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <InterProcessorTask+0x1c8>)
 8003e3e:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003e40:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <InterProcessorTask+0x1c4>)
 8003e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e44:	4a2a      	ldr	r2, [pc, #168]	; (8003ef0 <InterProcessorTask+0x1c8>)
 8003e46:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	e01c      	b.n	8003e88 <InterProcessorTask+0x160>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4a26      	ldr	r2, [pc, #152]	; (8003eec <InterProcessorTask+0x1c4>)
 8003e54:	4413      	add	r3, r2
 8003e56:	2208      	movs	r2, #8
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4825      	ldr	r0, [pc, #148]	; (8003ef0 <InterProcessorTask+0x1c8>)
 8003e5c:	f012 fc76 	bl	801674c <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	3305      	adds	r3, #5
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4a21      	ldr	r2, [pc, #132]	; (8003eec <InterProcessorTask+0x1c4>)
 8003e68:	4413      	add	r3, r2
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4821      	ldr	r0, [pc, #132]	; (8003ef4 <InterProcessorTask+0x1cc>)
 8003e70:	f012 fc6c 	bl	801674c <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8003e74:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <InterProcessorTask+0x1d0>)
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	491c      	ldr	r1, [pc, #112]	; (8003ef0 <InterProcessorTask+0x1c8>)
 8003e7e:	f00b fcd7 	bl	800f830 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	3301      	adds	r3, #1
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	dddf      	ble.n	8003e4e <InterProcessorTask+0x126>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d092      	beq.n	8003dbe <InterProcessorTask+0x96>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <InterProcessorTask+0x1b0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f00b fb81 	bl	800f5a8 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003ea6:	bf00      	nop
 8003ea8:	2364      	movs	r3, #100	; 0x64
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2306      	movs	r3, #6
 8003eae:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <InterProcessorTask+0x1b4>)
 8003eb0:	21e6      	movs	r1, #230	; 0xe6
 8003eb2:	480b      	ldr	r0, [pc, #44]	; (8003ee0 <InterProcessorTask+0x1b8>)
 8003eb4:	f003 ff96 	bl	8007de4 <HAL_I2C_Master_Transmit>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f4      	bne.n	8003ea8 <InterProcessorTask+0x180>
					osSemaphoreRelease(messageI2C_LockHandle);
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <InterProcessorTask+0x1b0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f00b fbd6 	bl	800f674 <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <InterProcessorTask+0x1d0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f00b fdc7 	bl	800fa60 <osMessageQueueReset>

					break;
 8003ed2:	e000      	b.n	8003ed6 <InterProcessorTask+0x1ae>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003ed4:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003ed6:	e745      	b.n	8003d64 <InterProcessorTask+0x3c>
 8003ed8:	20027970 	.word	0x20027970
 8003edc:	08017fc4 	.word	0x08017fc4
 8003ee0:	20027f6c 	.word	0x20027f6c
 8003ee4:	200283d8 	.word	0x200283d8
 8003ee8:	20027878 	.word	0x20027878
 8003eec:	20028380 	.word	0x20028380
 8003ef0:	200283e0 	.word	0x200283e0
 8003ef4:	200283e8 	.word	0x200283e8
 8003ef8:	2002797c 	.word	0x2002797c

08003efc <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2110      	movs	r1, #16
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f00a fece 	bl	800ecac <osThreadFlagsSet>
	test_1 = 1;
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20027db0 	.word	0x20027db0
 8003f24:	20000aac 	.word	0x20000aac

08003f28 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2108      	movs	r1, #8
 8003f36:	4618      	mov	r0, r3
 8003f38:	f00a feb8 	bl	800ecac <osThreadFlagsSet>
}
 8003f3c:	bf00      	nop
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20027db0 	.word	0x20027db0

08003f48 <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af04      	add	r7, sp, #16
 8003f4e:	4603      	mov	r3, r0
 8003f50:	71fb      	strb	r3, [r7, #7]

	deviceAddress = ADDR << 1;
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	4b2e      	ldr	r3, [pc, #184]	; (8004014 <setup_LP5523+0xcc>)
 8003f5a:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f5c:	4b2e      	ldr	r3, [pc, #184]	; (8004018 <setup_LP5523+0xd0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f04f 31ff 	mov.w	r1, #4294967295
 8003f64:	4618      	mov	r0, r3
 8003f66:	f00b fb1f 	bl	800f5a8 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8003f6a:	4b2c      	ldr	r3, [pc, #176]	; (800401c <setup_LP5523+0xd4>)
 8003f6c:	2240      	movs	r2, #64	; 0x40
 8003f6e:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003f70:	4b28      	ldr	r3, [pc, #160]	; (8004014 <setup_LP5523+0xcc>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	b299      	uxth	r1, r3
 8003f76:	2364      	movs	r3, #100	; 0x64
 8003f78:	9302      	str	r3, [sp, #8]
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	4b27      	ldr	r3, [pc, #156]	; (800401c <setup_LP5523+0xd4>)
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	2301      	movs	r3, #1
 8003f84:	2200      	movs	r2, #0
 8003f86:	4826      	ldr	r0, [pc, #152]	; (8004020 <setup_LP5523+0xd8>)
 8003f88:	f004 f986 	bl	8008298 <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8003f8c:	4b23      	ldr	r3, [pc, #140]	; (800401c <setup_LP5523+0xd4>)
 8003f8e:	224f      	movs	r2, #79	; 0x4f
 8003f90:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003f92:	4b20      	ldr	r3, [pc, #128]	; (8004014 <setup_LP5523+0xcc>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b299      	uxth	r1, r3
 8003f98:	2364      	movs	r3, #100	; 0x64
 8003f9a:	9302      	str	r3, [sp, #8]
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	4b1e      	ldr	r3, [pc, #120]	; (800401c <setup_LP5523+0xd4>)
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	2236      	movs	r2, #54	; 0x36
 8003fa8:	481d      	ldr	r0, [pc, #116]	; (8004020 <setup_LP5523+0xd8>)
 8003faa:	f004 f975 	bl	8008298 <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 8003fae:	4b19      	ldr	r3, [pc, #100]	; (8004014 <setup_LP5523+0xcc>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	b299      	uxth	r1, r3
 8003fb4:	2364      	movs	r3, #100	; 0x64
 8003fb6:	9302      	str	r3, [sp, #8]
 8003fb8:	2309      	movs	r3, #9
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <setup_LP5523+0xdc>)
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	2216      	movs	r2, #22
 8003fc4:	4816      	ldr	r0, [pc, #88]	; (8004020 <setup_LP5523+0xd8>)
 8003fc6:	f004 f967 	bl	8008298 <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <setup_LP5523+0xcc>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b299      	uxth	r1, r3
 8003fd0:	2364      	movs	r3, #100	; 0x64
 8003fd2:	9302      	str	r3, [sp, #8]
 8003fd4:	2309      	movs	r3, #9
 8003fd6:	9301      	str	r3, [sp, #4]
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <setup_LP5523+0xe0>)
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2301      	movs	r3, #1
 8003fde:	2226      	movs	r2, #38	; 0x26
 8003fe0:	480f      	ldr	r0, [pc, #60]	; (8004020 <setup_LP5523+0xd8>)
 8003fe2:	f004 f959 	bl	8008298 <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <setup_LP5523+0xcc>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	b299      	uxth	r1, r3
 8003fec:	2364      	movs	r3, #100	; 0x64
 8003fee:	9302      	str	r3, [sp, #8]
 8003ff0:	2309      	movs	r3, #9
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	; (800402c <setup_LP5523+0xe4>)
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	2206      	movs	r2, #6
 8003ffc:	4808      	ldr	r0, [pc, #32]	; (8004020 <setup_LP5523+0xd8>)
 8003ffe:	f004 f94b 	bl	8008298 <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <setup_LP5523+0xd0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f00b fb34 	bl	800f674 <osSemaphoreRelease>
}
 800400c:	bf00      	nop
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	200283f9 	.word	0x200283f9
 8004018:	20027970 	.word	0x20027970
 800401c:	200283f8 	.word	0x200283f8
 8004020:	20027f6c 	.word	0x20027f6c
 8004024:	20000ac8 	.word	0x20000ac8
 8004028:	2000006c 	.word	0x2000006c
 800402c:	08017fcc 	.word	0x08017fcc

08004030 <FrontLightsSet>:
//
//
//  return true;
//}

void FrontLightsSet(union ColorComplex *setColors){
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af04      	add	r7, sp, #16
 8004036:	6078      	str	r0, [r7, #4]
	memcpy(led_left_PWM, setColors, 9);
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <FrontLightsSet+0x78>)
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6810      	ldr	r0, [r2, #0]
 800403e:	6851      	ldr	r1, [r2, #4]
 8004040:	c303      	stmia	r3!, {r0, r1}
 8004042:	7a12      	ldrb	r2, [r2, #8]
 8004044:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f103 0209 	add.w	r2, r3, #9
 800404c:	4b17      	ldr	r3, [pc, #92]	; (80040ac <FrontLightsSet+0x7c>)
 800404e:	6810      	ldr	r0, [r2, #0]
 8004050:	6851      	ldr	r1, [r2, #4]
 8004052:	c303      	stmia	r3!, {r0, r1}
 8004054:	7a12      	ldrb	r2, [r2, #8]
 8004056:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004058:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <FrontLightsSet+0x80>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f04f 31ff 	mov.w	r1, #4294967295
 8004060:	4618      	mov	r0, r3
 8004062:	f00b faa1 	bl	800f5a8 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8004066:	2364      	movs	r3, #100	; 0x64
 8004068:	9302      	str	r3, [sp, #8]
 800406a:	2309      	movs	r3, #9
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <FrontLightsSet+0x78>)
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2301      	movs	r3, #1
 8004074:	2216      	movs	r2, #22
 8004076:	2168      	movs	r1, #104	; 0x68
 8004078:	480e      	ldr	r0, [pc, #56]	; (80040b4 <FrontLightsSet+0x84>)
 800407a:	f004 f90d 	bl	8008298 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 800407e:	2364      	movs	r3, #100	; 0x64
 8004080:	9302      	str	r3, [sp, #8]
 8004082:	2309      	movs	r3, #9
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <FrontLightsSet+0x7c>)
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2301      	movs	r3, #1
 800408c:	2216      	movs	r2, #22
 800408e:	216a      	movs	r1, #106	; 0x6a
 8004090:	4808      	ldr	r0, [pc, #32]	; (80040b4 <FrontLightsSet+0x84>)
 8004092:	f004 f901 	bl	8008298 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <FrontLightsSet+0x80>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f00b faea 	bl	800f674 <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000ab0 	.word	0x20000ab0
 80040ac:	20000abc 	.word	0x20000abc
 80040b0:	20027970 	.word	0x20027970
 80040b4:	20027f6c 	.word	0x20027f6c

080040b8 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08a      	sub	sp, #40	; 0x28
 80040bc:	af04      	add	r7, sp, #16
 80040be:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 80040c0:	2034      	movs	r0, #52	; 0x34
 80040c2:	f7ff ff41 	bl	8003f48 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 80040c6:	2035      	movs	r0, #53	; 0x35
 80040c8:	f7ff ff3e 	bl	8003f48 <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 80040d0:	2001      	movs	r0, #1
 80040d2:	f00a ff31 	bl	800ef38 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 80040d6:	4b2f      	ldr	r3, [pc, #188]	; (8004194 <ThreadFrontLightsTask+0xdc>)
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	f107 010c 	add.w	r1, r7, #12
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
 80040e2:	2200      	movs	r2, #0
 80040e4:	f00b fc18 	bl	800f918 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	e011      	b.n	8004112 <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	425b      	negs	r3, r3
 80040fa:	b2d9      	uxtb	r1, r3
 80040fc:	4a26      	ldr	r2, [pc, #152]	; (8004198 <ThreadFrontLightsTask+0xe0>)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	4413      	add	r3, r2
 8004102:	460a      	mov	r2, r1
 8004104:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	3301      	adds	r3, #1
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b08      	cmp	r3, #8
 8004116:	ddea      	ble.n	80040ee <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e011      	b.n	8004142 <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	425b      	negs	r3, r3
 800412a:	b2d9      	uxtb	r1, r3
 800412c:	4a1b      	ldr	r2, [pc, #108]	; (800419c <ThreadFrontLightsTask+0xe4>)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4413      	add	r3, r2
 8004132:	460a      	mov	r2, r1
 8004134:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	3301      	adds	r3, #1
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b08      	cmp	r3, #8
 8004146:	ddea      	ble.n	800411e <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004148:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <ThreadFrontLightsTask+0xe8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f04f 31ff 	mov.w	r1, #4294967295
 8004150:	4618      	mov	r0, r3
 8004152:	f00b fa29 	bl	800f5a8 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8004156:	2364      	movs	r3, #100	; 0x64
 8004158:	9302      	str	r3, [sp, #8]
 800415a:	2309      	movs	r3, #9
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <ThreadFrontLightsTask+0xe0>)
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	2301      	movs	r3, #1
 8004164:	2216      	movs	r2, #22
 8004166:	2168      	movs	r1, #104	; 0x68
 8004168:	480e      	ldr	r0, [pc, #56]	; (80041a4 <ThreadFrontLightsTask+0xec>)
 800416a:	f004 f895 	bl	8008298 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 800416e:	2364      	movs	r3, #100	; 0x64
 8004170:	9302      	str	r3, [sp, #8]
 8004172:	2309      	movs	r3, #9
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <ThreadFrontLightsTask+0xe4>)
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	2301      	movs	r3, #1
 800417c:	2216      	movs	r2, #22
 800417e:	216a      	movs	r1, #106	; 0x6a
 8004180:	4808      	ldr	r0, [pc, #32]	; (80041a4 <ThreadFrontLightsTask+0xec>)
 8004182:	f004 f889 	bl	8008298 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <ThreadFrontLightsTask+0xe8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f00b fa72 	bl	800f674 <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 8004190:	e79c      	b.n	80040cc <ThreadFrontLightsTask+0x14>
 8004192:	bf00      	nop
 8004194:	20027978 	.word	0x20027978
 8004198:	20000ab0 	.word	0x20000ab0
 800419c:	20000abc 	.word	0x20000abc
 80041a0:	20027970 	.word	0x20027970
 80041a4:	20027f6c 	.word	0x20027f6c

080041a8 <LL_RCC_LSE_SetDriveCapability>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80041b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b8:	f023 0218 	bic.w	r2, r3, #24
 80041bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041d8:	f001 faf2 	bl	80057c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041dc:	f000 f81c 	bl	8004218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041e0:	f7fe fc7e 	bl	8002ae0 <MX_GPIO_Init>
  MX_DMA_Init();
 80041e4:	f7fd fbe1 	bl	80019aa <MX_DMA_Init>
  MX_ADC1_Init();
 80041e8:	f7fc fe2a 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 80041ec:	f000 fe92 	bl	8004f14 <MX_RTC_Init>
  MX_TIM2_Init();
 80041f0:	f001 f914 	bl	800541c <MX_TIM2_Init>
  MX_RF_Init();
 80041f4:	f000 fe76 	bl	8004ee4 <MX_RF_Init>
  MX_USART1_UART_Init();
 80041f8:	f001 fa2c 	bl	8005654 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80041fc:	f7ff fb72 	bl	80038e4 <MX_I2C1_Init>
  MX_COMP1_Init();
 8004200:	f7fd fac0 	bl	8001784 <MX_COMP1_Init>
  MX_TIM16_Init();
 8004204:	f001 f980 	bl	8005508 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8004208:	f00a fc3c 	bl	800ea84 <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800420c:	f7fd f848 	bl	80012a0 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 8004210:	f00a fc6c 	bl	800eaec <osKernelStart>
//
//  for(int i = 0; i<1000; i++){
//	  test_packet[i] = i;
//  }

  while (1)
 8004214:	e7fe      	b.n	8004214 <main+0x40>
	...

08004218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b0ae      	sub	sp, #184	; 0xb8
 800421c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800421e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004222:	2248      	movs	r2, #72	; 0x48
 8004224:	2100      	movs	r1, #0
 8004226:	4618      	mov	r0, r3
 8004228:	f012 fa9b 	bl	8016762 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800422c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	611a      	str	r2, [r3, #16]
 800423c:	615a      	str	r2, [r3, #20]
 800423e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004240:	1d3b      	adds	r3, r7, #4
 8004242:	2250      	movs	r2, #80	; 0x50
 8004244:	2100      	movs	r1, #0
 8004246:	4618      	mov	r0, r3
 8004248:	f012 fa8b 	bl	8016762 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800425a:	f043 0310 	orr.w	r3, r3, #16
 800425e:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800426a:	f043 0303 	orr.w	r3, r3, #3
 800426e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004270:	2000      	movs	r0, #0
 8004272:	f7ff ff99 	bl	80041a8 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004276:	4b3a      	ldr	r3, [pc, #232]	; (8004360 <SystemClock_Config+0x148>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800427e:	4a38      	ldr	r2, [pc, #224]	; (8004360 <SystemClock_Config+0x148>)
 8004280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b36      	ldr	r3, [pc, #216]	; (8004360 <SystemClock_Config+0x148>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8004292:	230f      	movs	r3, #15
 8004294:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800429a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800429c:	2301      	movs	r3, #1
 800429e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80042a6:	2340      	movs	r3, #64	; 0x40
 80042a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80042ac:	2305      	movs	r3, #5
 80042ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80042bc:	4618      	mov	r0, r3
 80042be:	f006 f857 	bl	800a370 <HAL_RCC_OscConfig>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80042c8:	f000 f89e 	bl	8004408 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80042cc:	236f      	movs	r3, #111	; 0x6f
 80042ce:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80042d0:	2302      	movs	r3, #2
 80042d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042d4:	2300      	movs	r3, #0
 80042d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042d8:	2300      	movs	r3, #0
 80042da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042dc:	2300      	movs	r3, #0
 80042de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80042e0:	2300      	movs	r3, #0
 80042e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80042e4:	2300      	movs	r3, #0
 80042e6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80042e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80042ec:	2101      	movs	r1, #1
 80042ee:	4618      	mov	r0, r3
 80042f0:	f006 fb9c 	bl	800aa2c <HAL_RCC_ClockConfig>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80042fa:	f000 f885 	bl	8004408 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80042fe:	f643 4305 	movw	r3, #15365	; 0x3c05
 8004302:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8004304:	2306      	movs	r3, #6
 8004306:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800430c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800430e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004312:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004314:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004318:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 800431a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800431e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004320:	2300      	movs	r3, #0
 8004322:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004324:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800432a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800432e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004334:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8004336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800433c:	2302      	movs	r3, #2
 800433e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8004340:	2300      	movs	r3, #0
 8004342:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004344:	1d3b      	adds	r3, r7, #4
 8004346:	4618      	mov	r0, r3
 8004348:	f006 ffdd 	bl	800b306 <HAL_RCCEx_PeriphCLKConfig>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <SystemClock_Config+0x13e>
  {
    Error_Handler();
 8004352:	f000 f859 	bl	8004408 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004356:	bf00      	nop
 8004358:	37b8      	adds	r7, #184	; 0xb8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	58000400 	.word	0x58000400

08004364 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <HAL_COMP_TriggerCallback+0x74>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	b29a      	uxth	r2, r3
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <HAL_COMP_TriggerCallback+0x78>)
 8004376:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f002 fe41 	bl	8007000 <HAL_COMP_GetOutputLevel>
 800437e:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d109      	bne.n	800439a <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 8004386:	4b15      	ldr	r3, [pc, #84]	; (80043dc <HAL_COMP_TriggerCallback+0x78>)
 8004388:	881a      	ldrh	r2, [r3, #0]
 800438a:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <HAL_COMP_TriggerCallback+0x7c>)
 800438c:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <HAL_COMP_TriggerCallback+0x7c>)
 8004392:	2201      	movs	r2, #1
 8004394:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8004398:	e019      	b.n	80043ce <HAL_COMP_TriggerCallback+0x6a>
	else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 800439a:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <HAL_COMP_TriggerCallback+0x7c>)
 800439c:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d014      	beq.n	80043ce <HAL_COMP_TriggerCallback+0x6a>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d111      	bne.n	80043ce <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_COMP_TriggerCallback+0x7c>)
 80043ac:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <HAL_COMP_TriggerCallback+0x78>)
 80043b2:	881a      	ldrh	r2, [r3, #0]
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <HAL_COMP_TriggerCallback+0x7c>)
 80043b6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	b29b      	uxth	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	4807      	ldr	r0, [pc, #28]	; (80043e0 <HAL_COMP_TriggerCallback+0x7c>)
 80043c2:	f7ff fc89 	bl	8003cd8 <enqueue_pulse>
		input0.rise_valid_ = 0;
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_COMP_TriggerCallback+0x7c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20028590 	.word	0x20028590
 80043dc:	20000ad2 	.word	0x20000ad2
 80043e0:	20027988 	.word	0x20027988

080043e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a04      	ldr	r2, [pc, #16]	; (8004404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d101      	bne.n	80043fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80043f6:	f001 fa03 	bl	8005800 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40012c00 	.word	0x40012c00

08004408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <MasterThreadTask>:
struct SystemStatus systemStatus = {0};

uint32_t startTime = 0;

void MasterThreadTask(void *argument)
{
 8004418:	b590      	push	{r4, r7, lr}
 800441a:	b087      	sub	sp, #28
 800441c:	af02      	add	r7, sp, #8
 800441e:	6078      	str	r0, [r7, #4]
	// wait for STM32_WPAN to initialize
//	osThreadFlagsWait (0x00000008U, osFlagsWaitAny, osWaitForever);

//	startSensorThreads();

	uint8_t test = sizeof(struct SystemStatus);
 8004420:	2304      	movs	r3, #4
 8004422:	73fb      	strb	r3, [r7, #15]
//			get3D_location(&vive_loc);
//			osDelay(1000);
//		}
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever);
 8004424:	4b54      	ldr	r3, [pc, #336]	; (8004578 <MasterThreadTask+0x160>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	f04f 33ff 	mov.w	r3, #4294967295
 800442c:	2200      	movs	r2, #0
 800442e:	4953      	ldr	r1, [pc, #332]	; (800457c <MasterThreadTask+0x164>)
 8004430:	f00b fa72 	bl	800f918 <osMessageQueueGet>

//		togLogMessageReceived.status = 0;
//		togLogMessageReceived.logStatus = 0;
		togLogMessageReceived.blinkEnabled = 1;
 8004434:	4b51      	ldr	r3, [pc, #324]	; (800457c <MasterThreadTask+0x164>)
 8004436:	2201      	movs	r2, #1
 8004438:	709a      	strb	r2, [r3, #2]
		togLogMessageReceived.tempEnabled = 1;
 800443a:	4b50      	ldr	r3, [pc, #320]	; (800457c <MasterThreadTask+0x164>)
 800443c:	2201      	movs	r2, #1
 800443e:	70da      	strb	r2, [r3, #3]
		togLogMessageReceived.intertialEnabled = 1;
 8004440:	4b4e      	ldr	r3, [pc, #312]	; (800457c <MasterThreadTask+0x164>)
 8004442:	2201      	movs	r2, #1
 8004444:	711a      	strb	r2, [r3, #4]
		togLogMessageReceived.positionEnabled = 1;
 8004446:	4b4d      	ldr	r3, [pc, #308]	; (800457c <MasterThreadTask+0x164>)
 8004448:	2201      	movs	r2, #1
 800444a:	715a      	strb	r2, [r3, #5]

		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 800444c:	4b4c      	ldr	r3, [pc, #304]	; (8004580 <MasterThreadTask+0x168>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f00b fb05 	bl	800fa60 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void *) &nullStatusMessage, 0U, 0);
 8004456:	4b4a      	ldr	r3, [pc, #296]	; (8004580 <MasterThreadTask+0x168>)
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	2300      	movs	r3, #0
 800445c:	2200      	movs	r2, #0
 800445e:	4949      	ldr	r1, [pc, #292]	; (8004584 <MasterThreadTask+0x16c>)
 8004460:	f00b f9e6 	bl	800f830 <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if(togLogMessageReceived.logStatus == ENABLE_LOG)
 8004464:	4b45      	ldr	r3, [pc, #276]	; (800457c <MasterThreadTask+0x164>)
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d175      	bne.n	8004558 <MasterThreadTask+0x140>
		{
			logEnabled = 1;
 800446c:	4b46      	ldr	r3, [pc, #280]	; (8004588 <MasterThreadTask+0x170>)
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8004472:	4b46      	ldr	r3, [pc, #280]	; (800458c <MasterThreadTask+0x174>)
 8004474:	4a41      	ldr	r2, [pc, #260]	; (800457c <MasterThreadTask+0x164>)
 8004476:	6811      	ldr	r1, [r2, #0]
 8004478:	6019      	str	r1, [r3, #0]
 800447a:	8892      	ldrh	r2, [r2, #4]
 800447c:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 800447e:	4b43      	ldr	r3, [pc, #268]	; (800458c <MasterThreadTask+0x174>)
 8004480:	789b      	ldrb	r3, [r3, #2]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d105      	bne.n	8004492 <MasterThreadTask+0x7a>
			{
				osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8004486:	4b42      	ldr	r3, [pc, #264]	; (8004590 <MasterThreadTask+0x178>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2101      	movs	r1, #1
 800448c:	4618      	mov	r0, r3
 800448e:	f00a fc0d 	bl	800ecac <osThreadFlagsSet>
			}

			if(togLogMessageReceived.positionEnabled == SENSOR_ENABLE)
 8004492:	4b3a      	ldr	r3, [pc, #232]	; (800457c <MasterThreadTask+0x164>)
 8004494:	795b      	ldrb	r3, [r3, #5]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d118      	bne.n	80044cc <MasterThreadTask+0xb4>
			{
				// update status queue to notify other threads position is active
				osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800449a:	4b39      	ldr	r3, [pc, #228]	; (8004580 <MasterThreadTask+0x168>)
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	f04f 33ff 	mov.w	r3, #4294967295
 80044a2:	2200      	movs	r2, #0
 80044a4:	493b      	ldr	r1, [pc, #236]	; (8004594 <MasterThreadTask+0x17c>)
 80044a6:	f00b fa37 	bl	800f918 <osMessageQueueGet>
				statusMessage.positionEnabled = 1;
 80044aa:	4b3a      	ldr	r3, [pc, #232]	; (8004594 <MasterThreadTask+0x17c>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	715a      	strb	r2, [r3, #5]
				osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 80044b0:	4b33      	ldr	r3, [pc, #204]	; (8004580 <MasterThreadTask+0x168>)
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	2200      	movs	r2, #0
 80044b8:	4936      	ldr	r1, [pc, #216]	; (8004594 <MasterThreadTask+0x17c>)
 80044ba:	f00b f9b9 	bl	800f830 <osMessageQueuePut>

				// start timer for 3D position sample to be taken
				osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 80044be:	4b36      	ldr	r3, [pc, #216]	; (8004598 <MasterThreadTask+0x180>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f241 3188 	movw	r1, #5000	; 0x1388
 80044c6:	4618      	mov	r0, r3
 80044c8:	f00a fdfe 	bl	800f0c8 <osTimerStart>
			}

			if( (prevLogMessage.tempEnabled == SENSOR_ENABLE))
 80044cc:	4b2f      	ldr	r3, [pc, #188]	; (800458c <MasterThreadTask+0x174>)
 80044ce:	78db      	ldrb	r3, [r3, #3]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d105      	bne.n	80044e0 <MasterThreadTask+0xc8>
			{
				osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 80044d4:	4b31      	ldr	r3, [pc, #196]	; (800459c <MasterThreadTask+0x184>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2101      	movs	r1, #1
 80044da:	4618      	mov	r0, r3
 80044dc:	f00a fbe6 	bl	800ecac <osThreadFlagsSet>
			}

			if( (prevLogMessage.intertialEnabled == SENSOR_ENABLE))
 80044e0:	4b2a      	ldr	r3, [pc, #168]	; (800458c <MasterThreadTask+0x174>)
 80044e2:	791b      	ldrb	r3, [r3, #4]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d105      	bne.n	80044f4 <MasterThreadTask+0xdc>
			{
				osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 80044e8:	4b2d      	ldr	r3, [pc, #180]	; (80045a0 <MasterThreadTask+0x188>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f00a fbdc 	bl	800ecac <osThreadFlagsSet>
			}

			osDelay(500);
 80044f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044f8:	f00a fd1e 	bl	800ef38 <osDelay>

			while(1)
			{
				startTime = HAL_GetTick();
 80044fc:	f001 f992 	bl	8005824 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	4b28      	ldr	r3, [pc, #160]	; (80045a4 <MasterThreadTask+0x18c>)
 8004504:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 8004506:	f000 f859 	bl	80045bc <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived, &vive_loc);
 800450a:	4b27      	ldr	r3, [pc, #156]	; (80045a8 <MasterThreadTask+0x190>)
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	4b27      	ldr	r3, [pc, #156]	; (80045ac <MasterThreadTask+0x194>)
 8004510:	4a27      	ldr	r2, [pc, #156]	; (80045b0 <MasterThreadTask+0x198>)
 8004512:	4928      	ldr	r1, [pc, #160]	; (80045b4 <MasterThreadTask+0x19c>)
 8004514:	4828      	ldr	r0, [pc, #160]	; (80045b8 <MasterThreadTask+0x1a0>)
 8004516:	f000 f905 	bl	8004724 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 800451a:	4827      	ldr	r0, [pc, #156]	; (80045b8 <MasterThreadTask+0x1a0>)
 800451c:	f010 feb6 	bl	801528c <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if(osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK)
 8004520:	4b15      	ldr	r3, [pc, #84]	; (8004578 <MasterThreadTask+0x160>)
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	2300      	movs	r3, #0
 8004526:	2200      	movs	r2, #0
 8004528:	4914      	ldr	r1, [pc, #80]	; (800457c <MasterThreadTask+0x164>)
 800452a:	f00b f9f5 	bl	800f918 <osMessageQueueGet>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <MasterThreadTask+0x12a>
				{
					// disable threads
					if(togLogMessageReceived.status == DISABLE_SENSING){
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <MasterThreadTask+0x164>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <MasterThreadTask+0x12a>

						masterExitRoutine();
 800453c:	f000 f8bc 	bl	80046b8 <masterExitRoutine>

						// break out of first while loop and wait until told to start logging again
						break;
 8004540:	e019      	b.n	8004576 <MasterThreadTask+0x15e>
					}
				}

				// add delay to wait for next transmission period
				osDelay(PACKET_SEND_PERIOD - (HAL_GetTick() - startTime));
 8004542:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <MasterThreadTask+0x18c>)
 8004544:	681c      	ldr	r4, [r3, #0]
 8004546:	f001 f96d 	bl	8005824 <HAL_GetTick>
 800454a:	4603      	mov	r3, r0
 800454c:	1ae3      	subs	r3, r4, r3
 800454e:	3364      	adds	r3, #100	; 0x64
 8004550:	4618      	mov	r0, r3
 8004552:	f00a fcf1 	bl	800ef38 <osDelay>
				startTime = HAL_GetTick();
 8004556:	e7d1      	b.n	80044fc <MasterThreadTask+0xe4>

			}
		}
		else if( logEnabled==1 && togLogMessageReceived.logStatus == DISABLE_LOG)
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <MasterThreadTask+0x170>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	f47f af61 	bne.w	8004424 <MasterThreadTask+0xc>
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <MasterThreadTask+0x164>)
 8004564:	785b      	ldrb	r3, [r3, #1]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f47f af5c 	bne.w	8004424 <MasterThreadTask+0xc>
		{
			logEnabled = 0;
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <MasterThreadTask+0x170>)
 800456e:	2200      	movs	r2, #0
 8004570:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 8004572:	f000 f8a1 	bl	80046b8 <masterExitRoutine>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever);
 8004576:	e755      	b.n	8004424 <MasterThreadTask+0xc>
 8004578:	20027da4 	.word	0x20027da4
 800457c:	20027878 	.word	0x20027878
 8004580:	20027980 	.word	0x20027980
 8004584:	08017fd8 	.word	0x08017fd8
 8004588:	20000ad4 	.word	0x20000ad4
 800458c:	20027950 	.word	0x20027950
 8004590:	2002795c 	.word	0x2002795c
 8004594:	20027dcc 	.word	0x20027dcc
 8004598:	20027960 	.word	0x20027960
 800459c:	20027db0 	.word	0x20027db0
 80045a0:	20027dc4 	.word	0x20027dc4
 80045a4:	20000ad8 	.word	0x20000ad8
 80045a8:	2002847c 	.word	0x2002847c
 80045ac:	20028494 	.word	0x20028494
 80045b0:	200284d0 	.word	0x200284d0
 80045b4:	20028410 	.word	0x20028410
 80045b8:	20027884 	.word	0x20027884

080045bc <grabSensorData>:


	}
}

void grabSensorData(void){
 80045bc:	b5b0      	push	{r4, r5, r7, lr}
 80045be:	af00      	add	r7, sp, #0
	if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 80045c0:	4b30      	ldr	r3, [pc, #192]	; (8004684 <grabSensorData+0xc8>)
 80045c2:	789b      	ldrb	r3, [r3, #2]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d111      	bne.n	80045ec <grabSensorData+0x30>
	{
		if(osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)){
 80045c8:	4b2f      	ldr	r3, [pc, #188]	; (8004688 <grabSensorData+0xcc>)
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	2300      	movs	r3, #0
 80045ce:	2200      	movs	r2, #0
 80045d0:	492e      	ldr	r1, [pc, #184]	; (800468c <grabSensorData+0xd0>)
 80045d2:	f00b f9a1 	bl	800f918 <osMessageQueueGet>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 80045dc:	4a2b      	ldr	r2, [pc, #172]	; (800468c <grabSensorData+0xd0>)
 80045de:	4b2c      	ldr	r3, [pc, #176]	; (8004690 <grabSensorData+0xd4>)
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	236c      	movs	r3, #108	; 0x6c
 80045e6:	461a      	mov	r2, r3
 80045e8:	f012 f8b0 	bl	801674c <memcpy>
		}
	}

	if( (prevLogMessage.tempEnabled == SENSOR_ENABLE))
 80045ec:	4b25      	ldr	r3, [pc, #148]	; (8004684 <grabSensorData+0xc8>)
 80045ee:	78db      	ldrb	r3, [r3, #3]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d113      	bne.n	800461c <grabSensorData+0x60>
	{
		if(osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)){
 80045f4:	4b27      	ldr	r3, [pc, #156]	; (8004694 <grabSensorData+0xd8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	2300      	movs	r3, #0
 80045fa:	2200      	movs	r2, #0
 80045fc:	4926      	ldr	r1, [pc, #152]	; (8004698 <grabSensorData+0xdc>)
 80045fe:	f00b f98b 	bl	800f918 <osMessageQueueGet>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d009      	beq.n	800461c <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived, sizeof(struct parsedSecondaryProcessorPacket));
 8004608:	4a23      	ldr	r2, [pc, #140]	; (8004698 <grabSensorData+0xdc>)
 800460a:	4b24      	ldr	r3, [pc, #144]	; (800469c <grabSensorData+0xe0>)
 800460c:	4614      	mov	r4, r2
 800460e:	461d      	mov	r5, r3
 8004610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004614:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004618:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}

	if( (prevLogMessage.positionEnabled == SENSOR_ENABLE))
 800461c:	4b19      	ldr	r3, [pc, #100]	; (8004684 <grabSensorData+0xc8>)
 800461e:	795b      	ldrb	r3, [r3, #5]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d113      	bne.n	800464c <grabSensorData+0x90>
		{
		if(osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)){
 8004624:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <grabSensorData+0xe4>)
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	2300      	movs	r3, #0
 800462a:	2200      	movs	r2, #0
 800462c:	491d      	ldr	r1, [pc, #116]	; (80046a4 <grabSensorData+0xe8>)
 800462e:	f00b f973 	bl	800f918 <osMessageQueueGet>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d009      	beq.n	800464c <grabSensorData+0x90>
				memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 8004638:	4a1a      	ldr	r2, [pc, #104]	; (80046a4 <grabSensorData+0xe8>)
 800463a:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <grabSensorData+0xec>)
 800463c:	4614      	mov	r4, r2
 800463e:	461d      	mov	r5, r3
 8004640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004644:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004648:	e884 0003 	stmia.w	r4, {r0, r1}
			}
		}

	if( (prevLogMessage.intertialEnabled == SENSOR_ENABLE))
 800464c:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <grabSensorData+0xc8>)
 800464e:	791b      	ldrb	r3, [r3, #4]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d115      	bne.n	8004680 <grabSensorData+0xc4>
	{
		if(osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)){
 8004654:	4b15      	ldr	r3, [pc, #84]	; (80046ac <grabSensorData+0xf0>)
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	2300      	movs	r3, #0
 800465a:	2200      	movs	r2, #0
 800465c:	4914      	ldr	r1, [pc, #80]	; (80046b0 <grabSensorData+0xf4>)
 800465e:	f00b f95b 	bl	800f918 <osMessageQueueGet>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 8004668:	4a11      	ldr	r2, [pc, #68]	; (80046b0 <grabSensorData+0xf4>)
 800466a:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <grabSensorData+0xf8>)
 800466c:	4614      	mov	r4, r2
 800466e:	461d      	mov	r5, r3
 8004670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004678:	e895 0003 	ldmia.w	r5, {r0, r1}
 800467c:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 8004680:	bf00      	nop
 8004682:	bdb0      	pop	{r4, r5, r7, pc}
 8004684:	20027950 	.word	0x20027950
 8004688:	20027dc0 	.word	0x20027dc0
 800468c:	20028410 	.word	0x20028410
 8004690:	08017fe0 	.word	0x08017fe0
 8004694:	2002797c 	.word	0x2002797c
 8004698:	200284d0 	.word	0x200284d0
 800469c:	0801804c 	.word	0x0801804c
 80046a0:	20027874 	.word	0x20027874
 80046a4:	2002847c 	.word	0x2002847c
 80046a8:	0801808c 	.word	0x0801808c
 80046ac:	20027974 	.word	0x20027974
 80046b0:	20028494 	.word	0x20028494
 80046b4:	08018064 	.word	0x08018064

080046b8 <masterExitRoutine>:



void masterExitRoutine(void){
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
	if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 80046bc:	4b14      	ldr	r3, [pc, #80]	; (8004710 <masterExitRoutine+0x58>)
 80046be:	789b      	ldrb	r3, [r3, #2]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d105      	bne.n	80046d0 <masterExitRoutine+0x18>
	{
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 80046c4:	4b13      	ldr	r3, [pc, #76]	; (8004714 <masterExitRoutine+0x5c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2102      	movs	r1, #2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f00a faee 	bl	800ecac <osThreadFlagsSet>
	}

	if(prevLogMessage.positionEnabled == SENSOR_ENABLE)
 80046d0:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <masterExitRoutine+0x58>)
 80046d2:	795b      	ldrb	r3, [r3, #5]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d104      	bne.n	80046e2 <masterExitRoutine+0x2a>
	{
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 80046d8:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <masterExitRoutine+0x60>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f00a fd33 	bl	800f148 <osTimerStop>
	}

	if( (prevLogMessage.tempEnabled == SENSOR_ENABLE))
 80046e2:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <masterExitRoutine+0x58>)
 80046e4:	78db      	ldrb	r3, [r3, #3]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d105      	bne.n	80046f6 <masterExitRoutine+0x3e>
	{
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <masterExitRoutine+0x64>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2102      	movs	r1, #2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f00a fadb 	bl	800ecac <osThreadFlagsSet>
	}

	if( (prevLogMessage.intertialEnabled == SENSOR_ENABLE))
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <masterExitRoutine+0x58>)
 80046f8:	791b      	ldrb	r3, [r3, #4]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <masterExitRoutine+0x52>
	{
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <masterExitRoutine+0x68>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2102      	movs	r1, #2
 8004704:	4618      	mov	r0, r3
 8004706:	f00a fad1 	bl	800ecac <osThreadFlagsSet>
	}

}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20027950 	.word	0x20027950
 8004714:	2002795c 	.word	0x2002795c
 8004718:	20027960 	.word	0x20027960
 800471c:	20027db0 	.word	0x20027db0
 8004720:	20027dc4 	.word	0x20027dc4

08004724 <packetizeData>:
void packetizeData(struct LogPacket *packet,
		struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg,
		struct inertialData *inertialMsg,
		VIVEVars *posMsg)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 8004732:	f001 f877 	bl	8005824 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
//	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
//	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
//	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);

	// add sensor data
	memcpy ( &(packet->blink), blink, sizeof(struct blinkData) );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	226c      	movs	r2, #108	; 0x6c
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f012 f801 	bl	801674c <memcpy>
	memcpy ( &(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket) );
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	336c      	adds	r3, #108	; 0x6c
 800474e:	2218      	movs	r2, #24
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4618      	mov	r0, r3
 8004754:	f011 fffa 	bl	801674c <memcpy>
	memcpy ( &(packet->inertial), inertialMsg, sizeof(struct inertialData) );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3384      	adds	r3, #132	; 0x84
 800475c:	2228      	movs	r2, #40	; 0x28
 800475e:	6839      	ldr	r1, [r7, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f011 fff3 	bl	801674c <memcpy>
	memcpy ( &(packet->pos), posMsg, sizeof(struct VIVEVars) );
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	33ac      	adds	r3, #172	; 0xac
 800476a:	2218      	movs	r2, #24
 800476c:	69b9      	ldr	r1, [r7, #24]
 800476e:	4618      	mov	r0, r3
 8004770:	f011 ffec 	bl	801674c <memcpy>
}
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478a:	2b0f      	cmp	r3, #15
 800478c:	d80f      	bhi.n	80047ae <vector_push+0x32>
    	self->items[self->count++] = *item;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004792:	1c51      	adds	r1, r2, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6619      	str	r1, [r3, #96]	; 0x60
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	440b      	add	r3, r1
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	6811      	ldr	r1, [r2, #0]
 80047a8:	6019      	str	r1, [r3, #0]
 80047aa:	8892      	ldrh	r2, [r2, #4]
 80047ac:	809a      	strh	r2, [r3, #4]
    }
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <vector_pop>:

Pulse vector_pop(vector *self){
 80047ba:	b480      	push	{r7}
 80047bc:	b085      	sub	sp, #20
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01c      	beq.n	8004806 <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d0:	1e5a      	subs	r2, r3, #1
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	4413      	add	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	18ca      	adds	r2, r1, r3
 80047de:	f107 0308 	add.w	r3, r7, #8
 80047e2:	6810      	ldr	r0, [r2, #0]
 80047e4:	6018      	str	r0, [r3, #0]
 80047e6:	8892      	ldrh	r2, [r2, #4]
 80047e8:	809a      	strh	r2, [r3, #4]
		self->count--;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ee:	1e5a      	subs	r2, r3, #1
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f107 0308 	add.w	r3, r7, #8
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	6010      	str	r0, [r2, #0]
 8004800:	889b      	ldrh	r3, [r3, #4]
 8004802:	8093      	strh	r3, [r2, #4]
 8004804:	e005      	b.n	8004812 <vector_pop+0x58>
	}
	return self->items[0];
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	6810      	ldr	r0, [r2, #0]
 800480c:	6018      	str	r0, [r3, #0]
 800480e:	8892      	ldrh	r2, [r2, #4]
 8004810:	809a      	strh	r2, [r3, #4]
}
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <vector_get>:

Pulse vector_get(vector *self, int index)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	db12      	blt.n	8004856 <vector_get+0x38>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	429a      	cmp	r2, r3
 8004838:	d90d      	bls.n	8004856 <vector_get+0x38>
    	return self->items[index];
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	4413      	add	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	18ca      	adds	r2, r1, r3
 800484a:	4603      	mov	r3, r0
 800484c:	6811      	ldr	r1, [r2, #0]
 800484e:	6019      	str	r1, [r3, #0]
 8004850:	8892      	ldrh	r2, [r2, #4]
 8004852:	809a      	strh	r2, [r3, #4]
 8004854:	e005      	b.n	8004862 <vector_get+0x44>
    }
    return self->items[0];
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	6810      	ldr	r0, [r2, #0]
 800485c:	6018      	str	r0, [r3, #0]
 800485e:	8892      	ldrh	r2, [r2, #4]
 8004860:	809a      	strh	r2, [r3, #4]
}
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <vector_clear>:

void vector_clear(vector *self){
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
	self->count = 0;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e00c      	b.n	80048c4 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2264      	movs	r2, #100	; 0x64
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	3310      	adds	r3, #16
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff ffd8 	bl	800486e <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3301      	adds	r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	ddef      	ble.n	80048aa <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	33d8      	adds	r3, #216	; 0xd8
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff ffcd 	bl	800486e <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ffc7 	bl	800486e <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <consume_pulse>:

void consume_pulse(PulseProcessor *self, Pulse* p){
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	889b      	ldrh	r3, [r3, #4]
 80048fe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004902:	d20c      	bcs.n	800491e <consume_pulse+0x2e>
		//Ignore very long pulses
	}
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	889b      	ldrh	r3, [r3, #4]
 8004908:	2b27      	cmp	r3, #39	; 0x27
 800490a:	d904      	bls.n	8004916 <consume_pulse+0x26>
		process_long_pulse(self, p);
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f80a 	bl	8004928 <process_long_pulse>
	}
	else{	//Short pulse -likely laser sweep
		process_short_pulse(self, p);
	}
}
 8004914:	e003      	b.n	800491e <consume_pulse+0x2e>
		process_short_pulse(self, p);
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f897 	bl	8004a4c <process_short_pulse>
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d144      	bne.n	80049c4 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d03f      	beq.n	80049c4 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 800494a:	f107 0308 	add.w	r3, r7, #8
 800494e:	4611      	mov	r1, r2
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff ff32 	bl	80047ba <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	885a      	ldrh	r2, [r3, #2]
 800495a:	897b      	ldrh	r3, [r7, #10]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	b29a      	uxth	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 800496c:	461a      	mov	r2, r3
 800496e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8004972:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 8004976:	330d      	adds	r3, #13
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f113 0f1e 	cmn.w	r3, #30
 8004982:	db1c      	blt.n	80049be <process_long_pulse+0x96>
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b1d      	cmp	r3, #29
 8004988:	dc19      	bgt.n	80049be <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	885a      	ldrh	r2, [r3, #2]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fc ffcd 	bl	8001944 <reset>

                reset_cycle_long_pulses(self);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa64 	bl	8004e78 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fa7c 	bl	8004eae <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa87 	bl	8004eca <reset_cycle_short_pulses>
 80049bc:	e002      	b.n	80049c4 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa75 	bl	8004eae <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02d      	beq.n	8004a2c <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	885a      	ldrh	r2, [r3, #2]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	891b      	ldrh	r3, [r3, #8]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 80049dc:	2300      	movs	r3, #0
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	e021      	b.n	8004a26 <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 80049e2:	4a19      	ldr	r2, [pc, #100]	; (8004a48 <process_long_pulse+0x120>)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ea:	8a7a      	ldrh	r2, [r7, #18]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 80049f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049f6:	f113 0f1e 	cmn.w	r3, #30
 80049fa:	db11      	blt.n	8004a20 <process_long_pulse+0xf8>
 80049fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a00:	2b1d      	cmp	r3, #29
 8004a02:	dc0d      	bgt.n	8004a20 <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	3310      	adds	r3, #16
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	4413      	add	r3, r2
 8004a12:	6839      	ldr	r1, [r7, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff feb1 	bl	800477c <vector_push>
                pulse_classified = 1;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	77fb      	strb	r3, [r7, #31]
                break;
 8004a1e:	e005      	b.n	8004a2c <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	3301      	adds	r3, #1
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	ddda      	ble.n	80049e2 <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 8004a2c:	7ffb      	ldrb	r3, [r7, #31]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004a38:	6839      	ldr	r1, [r7, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fe9e 	bl	800477c <vector_push>
    }
}
 8004a40:	bf00      	nop
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	080180a4 	.word	0x080180a4

08004a4c <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00f      	beq.n	8004a7e <process_short_pulse+0x32>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d208      	bcs.n	8004a7e <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	33d8      	adds	r3, #216	; 0xd8
 8004a70:	6839      	ldr	r1, [r7, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fe82 	bl	800477c <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f805 	bl	8004a88 <process_cycle_fix>
	}
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b0a2      	sub	sp, #136	; 0x88
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8004a90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d105      	bne.n	8004ab2 <process_cycle_fix+0x2a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80b7 	beq.w	8004c20 <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b09      	cmp	r3, #9
 8004ab8:	d80d      	bhi.n	8004ad6 <process_cycle_fix+0x4e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <process_cycle_fix+0x4e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d004      	beq.n	8004ad6 <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004adc:	e090      	b.n	8004c00 <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae4:	2164      	movs	r1, #100	; 0x64
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	3370      	adds	r3, #112	; 0x70
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 8004af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d07e      	beq.n	8004bf6 <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	891a      	ldrh	r2, [r3, #8]
 8004afc:	49c0      	ldr	r1, [pc, #768]	; (8004e00 <process_cycle_fix+0x378>)
 8004afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004b06:	4413      	add	r3, r2
 8004b08:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b12:	e03e      	b.n	8004b92 <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8004b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b18:	2264      	movs	r2, #100	; 0x64
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	3310      	adds	r3, #16
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	18d1      	adds	r1, r2, r3
 8004b24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff fe76 	bl	800481e <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 8004b32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004b42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b46:	4619      	mov	r1, r3
 8004b48:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8004b4c:	1acb      	subs	r3, r1, r3
 8004b4e:	441a      	add	r2, r3
 8004b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004b5a:	440b      	add	r3, r1
 8004b5c:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 8004b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004b70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b74:	4413      	add	r3, r2
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004b82:	440b      	add	r3, r1
 8004b84:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d3bb      	bcc.n	8004b14 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d929      	bls.n	8004bf6 <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8004ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bac:	4413      	add	r3, r2
 8004bae:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004bf0:	440b      	add	r3, r1
 8004bf2:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	f77f af6a 	ble.w	8004ade <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f7fc fe11 	bl	8001840 <process_pulse_lengths>
 8004c1e:	e008      	b.n	8004c32 <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	1e5a      	subs	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	f7fc fe68 	bl	8001914 <get_phase>
 8004c44:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8004c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f2c0 80b5 	blt.w	8004db8 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8004c4e:	f107 030c 	add.w	r3, r7, #12
 8004c52:	2220      	movs	r2, #32
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f011 fd83 	bl	8016762 <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8004c5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8004c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c6c:	105b      	asrs	r3, r3, #1
 8004c6e:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	891a      	ldrh	r2, [r3, #8]
 8004c74:	4962      	ldr	r1, [pc, #392]	; (8004e00 <process_cycle_fix+0x378>)
 8004c76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004c88:	440b      	add	r3, r1
 8004c8a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004c96:	2300      	movs	r3, #0
 8004c98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c9a:	e04a      	b.n	8004d32 <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004ca2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff fdb8 	bl	800481e <vector_get>
            uint32_t input_idx = p.input_idx;
 8004cae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004cb2:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004cb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004cb6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004cca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004cce:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8004cd2:	d32b      	bcc.n	8004d2c <process_cycle_fix+0x2a4>
 8004cd4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004cd8:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d825      	bhi.n	8004d2c <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8004ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ce8:	4413      	add	r3, r2
 8004cea:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <process_cycle_fix+0x280>
 8004cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004d00:	889a      	ldrh	r2, [r3, #4]
 8004d02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d211      	bcs.n	8004d2c <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8004d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d10:	4413      	add	r3, r2
 8004d12:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004d16:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8004d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d22:	4413      	add	r3, r2
 8004d24:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004d28:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004d2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d2e:	3301      	adds	r3, #1
 8004d30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004d38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d3ae      	bcc.n	8004c9c <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004d3e:	2300      	movs	r3, #0
 8004d40:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d42:	e034      	b.n	8004dae <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8004d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d028      	beq.n	8004da8 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8004d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d58:	015b      	lsls	r3, r3, #5
 8004d5a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8004d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8004d72:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d7e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004e04 <process_cycle_fix+0x37c>
 8004d82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d86:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004e08 <process_cycle_fix+0x380>
 8004d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68d9      	ldr	r1, [r3, #12]
 8004d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004da2:	3204      	adds	r2, #4
 8004da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004daa:	3301      	adds	r3, #1
 8004dac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d3c5      	bcc.n	8004d44 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8004db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	db06      	blt.n	8004dcc <process_cycle_fix+0x344>
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e008      	b.n	8004dde <process_cycle_fix+0x356>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2301      	moveq	r3, #1
 8004dda:	2300      	movne	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d02b      	beq.n	8004e3a <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	891a      	ldrh	r2, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8004dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	db0c      	blt.n	8004e0c <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d908      	bls.n	8004e0c <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8004dfa:	22c8      	movs	r2, #200	; 0xc8
 8004dfc:	e007      	b.n	8004e0e <process_cycle_fix+0x386>
 8004dfe:	bf00      	nop
 8004e00:	080180a4 	.word	0x080180a4
 8004e04:	40490fdb 	.word	0x40490fdb
 8004e08:	46023400 	.word	0x46023400
 8004e0c:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e22:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f7fd fbad 	bl	8002594 <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f81c 	bl	8004e78 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f834 	bl	8004eae <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f83f 	bl	8004eca <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	891a      	ldrh	r2, [r3, #8]
 8004e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	4413      	add	r3, r2
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004e5c:	330d      	adds	r3, #13
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60da      	str	r2, [r3, #12]
}
 8004e6e:	bf00      	nop
 8004e70:	3788      	adds	r7, #136	; 0x88
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop

08004e78 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e00c      	b.n	8004ea0 <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2264      	movs	r2, #100	; 0x64
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	3310      	adds	r3, #16
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	4413      	add	r3, r2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fcea 	bl	800486e <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	ddef      	ble.n	8004e86 <reset_cycle_long_pulses+0xe>
	}
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff fcd6 	bl	800486e <vector_clear>
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	33d8      	adds	r3, #216	; 0xd8
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fcc9 	bl	800486e <vector_clear>
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0

}
 8004ee8:	bf00      	nop
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f0a:	bf00      	nop
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <MX_RTC_Init+0x34>)
 8004f1a:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <MX_RTC_Init+0x38>)
 8004f1c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <MX_RTC_Init+0x34>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8004f24:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <MX_RTC_Init+0x34>)
 8004f26:	220f      	movs	r2, #15
 8004f28:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <MX_RTC_Init+0x34>)
 8004f2c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004f30:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004f32:	4805      	ldr	r0, [pc, #20]	; (8004f48 <MX_RTC_Init+0x34>)
 8004f34:	f006 fc6d 	bl	800b812 <HAL_RTC_Init>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8004f3e:	f7ff fa63 	bl	8004408 <Error_Handler>
  }

}
 8004f42:	bf00      	nop
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	200284ec 	.word	0x200284ec
 8004f4c:	40002800 	.word	0x40002800

08004f50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <HAL_RTC_MspInit+0x20>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d101      	bne.n	8004f66 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004f62:	f7ff ffc6 	bl	8004ef2 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40002800 	.word	0x40002800

08004f74 <LL_AHB3_GRP1_EnableClock>:
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4013      	ands	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f98:	68fb      	ldr	r3, [r7, #12]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8004faa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004fae:	f7ff ffe1 	bl	8004f74 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	210f      	movs	r1, #15
 8004fb6:	f06f 0001 	mvn.w	r0, #1
 8004fba:	f002 f95c 	bl	8007276 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	210f      	movs	r1, #15
 8004fc2:	202c      	movs	r0, #44	; 0x2c
 8004fc4:	f002 f957 	bl	8007276 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8004fc8:	2200      	movs	r2, #0
 8004fca:	210f      	movs	r1, #15
 8004fcc:	202d      	movs	r0, #45	; 0x2d
 8004fce:	f002 f952 	bl	8007276 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	; 0x30
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8005018:	2200      	movs	r2, #0
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	2019      	movs	r0, #25
 800501e:	f002 f92a 	bl	8007276 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8005022:	2019      	movs	r0, #25
 8005024:	f002 f941 	bl	80072aa <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005028:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800502c:	f7ff ffd3 	bl	8004fd6 <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005030:	f107 0208 	add.w	r2, r7, #8
 8005034:	f107 030c 	add.w	r3, r7, #12
 8005038:	4611      	mov	r1, r2
 800503a:	4618      	mov	r0, r3
 800503c:	f005 fedc 	bl	800adf8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005040:	f005 fec4 	bl	800adcc <HAL_RCC_GetPCLK2Freq>
 8005044:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	4a12      	ldr	r2, [pc, #72]	; (8005094 <HAL_InitTick+0x8c>)
 800504a:	fba2 2303 	umull	r2, r3, r2, r3
 800504e:	0c9b      	lsrs	r3, r3, #18
 8005050:	3b01      	subs	r3, #1
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005054:	4b10      	ldr	r3, [pc, #64]	; (8005098 <HAL_InitTick+0x90>)
 8005056:	4a11      	ldr	r2, [pc, #68]	; (800509c <HAL_InitTick+0x94>)
 8005058:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800505a:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <HAL_InitTick+0x90>)
 800505c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005060:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005062:	4a0d      	ldr	r2, [pc, #52]	; (8005098 <HAL_InitTick+0x90>)
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_InitTick+0x90>)
 800506a:	2200      	movs	r2, #0
 800506c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <HAL_InitTick+0x90>)
 8005070:	2200      	movs	r2, #0
 8005072:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005074:	4808      	ldr	r0, [pc, #32]	; (8005098 <HAL_InitTick+0x90>)
 8005076:	f006 fcba 	bl	800b9ee <HAL_TIM_Base_Init>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005080:	4805      	ldr	r0, [pc, #20]	; (8005098 <HAL_InitTick+0x90>)
 8005082:	f006 fd35 	bl	800baf0 <HAL_TIM_Base_Start_IT>
 8005086:	4603      	mov	r3, r0
 8005088:	e000      	b.n	800508c <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
}
 800508c:	4618      	mov	r0, r3
 800508e:	3730      	adds	r7, #48	; 0x30
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	431bde83 	.word	0x431bde83
 8005098:	20028510 	.word	0x20028510
 800509c:	40012c00 	.word	0x40012c00

080050a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050a4:	bf00      	nop
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050ae:	b480      	push	{r7}
 80050b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050b2:	e7fe      	b.n	80050b2 <HardFault_Handler+0x4>

080050b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050b8:	e7fe      	b.n	80050b8 <MemManage_Handler+0x4>

080050ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050ba:	b480      	push	{r7}
 80050bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050be:	e7fe      	b.n	80050be <BusFault_Handler+0x4>

080050c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050c4:	e7fe      	b.n	80050c4 <UsageFault_Handler+0x4>

080050c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050c6:	b480      	push	{r7}
 80050c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050ca:	bf00      	nop
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80050d8:	2004      	movs	r0, #4
 80050da:	f002 fddb 	bl	8007c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 80050de:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <EXTI2_IRQHandler+0x1c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2104      	movs	r1, #4
 80050e4:	4618      	mov	r0, r3
 80050e6:	f009 fde1 	bl	800ecac <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 80050ea:	bf00      	nop
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20027db0 	.word	0x20027db0

080050f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80050f8:	4802      	ldr	r0, [pc, #8]	; (8005104 <DMA1_Channel1_IRQHandler+0x10>)
 80050fa:	f002 faf4 	bl	80076e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20027808 	.word	0x20027808

08005108 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 800510c:	4802      	ldr	r0, [pc, #8]	; (8005118 <COMP_IRQHandler+0x10>)
 800510e:	f001 ff49 	bl	8006fa4 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20027dd4 	.word	0x20027dd4

0800511c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005120:	2020      	movs	r0, #32
 8005122:	f002 fdb7 	bl	8007c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005130:	4803      	ldr	r0, [pc, #12]	; (8005140 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005132:	f006 fde7 	bl	800bd04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005136:	4803      	ldr	r0, [pc, #12]	; (8005144 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005138:	f006 fde4 	bl	800bd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800513c:	bf00      	nop
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20028510 	.word	0x20028510
 8005144:	20028590 	.word	0x20028590

08005148 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800514c:	4802      	ldr	r0, [pc, #8]	; (8005158 <I2C1_EV_IRQHandler+0x10>)
 800514e:	f003 f9b7 	bl	80084c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20027f6c 	.word	0x20027f6c

0800515c <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005160:	f010 fe48 	bl	8015df4 <HW_IPCC_Tx_Handler>

  return;
 8005164:	bf00      	nop
}
 8005166:	bd80      	pop	{r7, pc}

08005168 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 800516c:	f010 fde8 	bl	8015d40 <HW_IPCC_Rx_Handler>
  return;
 8005170:	bf00      	nop
}
 8005172:	bd80      	pop	{r7, pc}

08005174 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8005174:	b40c      	push	{r2, r3}
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	4603      	mov	r3, r0
 800517e:	460a      	mov	r2, r1
 8005180:	71fb      	strb	r3, [r7, #7]
 8005182:	4613      	mov	r3, r2
 8005184:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	b002      	add	sp, #8
 8005192:	4770      	bx	lr

08005194 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005198:	4b26      	ldr	r3, [pc, #152]	; (8005234 <SystemInit+0xa0>)
 800519a:	2200      	movs	r2, #0
 800519c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800519e:	4b25      	ldr	r3, [pc, #148]	; (8005234 <SystemInit+0xa0>)
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a4:	4a23      	ldr	r2, [pc, #140]	; (8005234 <SystemInit+0xa0>)
 80051a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80051ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b8:	f043 0301 	orr.w	r3, r3, #1
 80051bc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80051be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80051c6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80051c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d2:	4b19      	ldr	r3, [pc, #100]	; (8005238 <SystemInit+0xa4>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80051d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051e4:	f023 0305 	bic.w	r3, r3, #5
 80051e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80051ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005204:	4a0d      	ldr	r2, [pc, #52]	; (800523c <SystemInit+0xa8>)
 8005206:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	4a0b      	ldr	r2, [pc, #44]	; (800523c <SystemInit+0xa8>)
 800520e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800521a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800521e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005224:	2200      	movs	r2, #0
 8005226:	619a      	str	r2, [r3, #24]
}
 8005228:	bf00      	nop
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	e000ed00 	.word	0xe000ed00
 8005238:	faf6fefb 	.word	0xfaf6fefb
 800523c:	22041000 	.word	0x22041000

08005240 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	091b      	lsrs	r3, r3, #4
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	4a47      	ldr	r2, [pc, #284]	; (8005370 <SystemCoreClockUpdate+0x130>)
 8005254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005258:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800525a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 030c 	and.w	r3, r3, #12
 8005264:	2b0c      	cmp	r3, #12
 8005266:	d867      	bhi.n	8005338 <SystemCoreClockUpdate+0xf8>
 8005268:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <SystemCoreClockUpdate+0x30>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	080052a5 	.word	0x080052a5
 8005274:	08005339 	.word	0x08005339
 8005278:	08005339 	.word	0x08005339
 800527c:	08005339 	.word	0x08005339
 8005280:	080052ad 	.word	0x080052ad
 8005284:	08005339 	.word	0x08005339
 8005288:	08005339 	.word	0x08005339
 800528c:	08005339 	.word	0x08005339
 8005290:	080052b5 	.word	0x080052b5
 8005294:	08005339 	.word	0x08005339
 8005298:	08005339 	.word	0x08005339
 800529c:	08005339 	.word	0x08005339
 80052a0:	080052bd 	.word	0x080052bd
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80052a4:	4a33      	ldr	r2, [pc, #204]	; (8005374 <SystemCoreClockUpdate+0x134>)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	6013      	str	r3, [r2, #0]
      break;
 80052aa:	e049      	b.n	8005340 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80052ac:	4b31      	ldr	r3, [pc, #196]	; (8005374 <SystemCoreClockUpdate+0x134>)
 80052ae:	4a32      	ldr	r2, [pc, #200]	; (8005378 <SystemCoreClockUpdate+0x138>)
 80052b0:	601a      	str	r2, [r3, #0]
      break;
 80052b2:	e045      	b.n	8005340 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80052b4:	4b2f      	ldr	r3, [pc, #188]	; (8005374 <SystemCoreClockUpdate+0x134>)
 80052b6:	4a31      	ldr	r2, [pc, #196]	; (800537c <SystemCoreClockUpdate+0x13c>)
 80052b8:	601a      	str	r2, [r3, #0]
      break;
 80052ba:	e041      	b.n	8005340 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80052bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	091b      	lsrs	r3, r3, #4
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	3301      	adds	r3, #1
 80052d6:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d105      	bne.n	80052ea <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80052de:	4a26      	ldr	r2, [pc, #152]	; (8005378 <SystemCoreClockUpdate+0x138>)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	e00d      	b.n	8005306 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d105      	bne.n	80052fc <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80052f0:	4a22      	ldr	r2, [pc, #136]	; (800537c <SystemCoreClockUpdate+0x13c>)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e004      	b.n	8005306 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	0a1b      	lsrs	r3, r3, #8
 800530e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	fb02 f303 	mul.w	r3, r2, r3
 8005318:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800531a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	0f5b      	lsrs	r3, r3, #29
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	3301      	adds	r3, #1
 8005328:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005332:	4a10      	ldr	r2, [pc, #64]	; (8005374 <SystemCoreClockUpdate+0x134>)
 8005334:	6013      	str	r3, [r2, #0]
      break;
 8005336:	e003      	b.n	8005340 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8005338:	4a0e      	ldr	r2, [pc, #56]	; (8005374 <SystemCoreClockUpdate+0x134>)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	6013      	str	r3, [r2, #0]
      break;
 800533e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	091b      	lsrs	r3, r3, #4
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	4a0c      	ldr	r2, [pc, #48]	; (8005380 <SystemCoreClockUpdate+0x140>)
 800534e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005352:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8005354:	4b07      	ldr	r3, [pc, #28]	; (8005374 <SystemCoreClockUpdate+0x134>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	fbb2 f3f3 	udiv	r3, r2, r3
 800535e:	4a05      	ldr	r2, [pc, #20]	; (8005374 <SystemCoreClockUpdate+0x134>)
 8005360:	6013      	str	r3, [r2, #0]

}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	08018108 	.word	0x08018108
 8005374:	20000078 	.word	0x20000078
 8005378:	00f42400 	.word	0x00f42400
 800537c:	01e84800 	.word	0x01e84800
 8005380:	080180a8 	.word	0x080180a8

08005384 <LL_AHB2_GRP1_EnableClock>:
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005390:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4313      	orrs	r3, r2
 800539a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800539c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4013      	ands	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80053a8:	68fb      	ldr	r3, [r7, #12]
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <LL_APB1_GRP1_EnableClock>:
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80053be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80053ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4013      	ands	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80053da:	68fb      	ldr	r3, [r7, #12]
}
 80053dc:	bf00      	nop
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <LL_APB2_GRP1_EnableClock>:
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80053f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005404:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4013      	ands	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800540c:	68fb      	ldr	r3, [r7, #12]
}
 800540e:	bf00      	nop
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08e      	sub	sp, #56	; 0x38
 8005420:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	609a      	str	r2, [r3, #8]
 800542e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005430:	f107 031c 	add.w	r3, r7, #28
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	605a      	str	r2, [r3, #4]
 800543a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800543c:	463b      	mov	r3, r7
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	605a      	str	r2, [r3, #4]
 8005444:	609a      	str	r2, [r3, #8]
 8005446:	60da      	str	r2, [r3, #12]
 8005448:	611a      	str	r2, [r3, #16]
 800544a:	615a      	str	r2, [r3, #20]
 800544c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800544e:	4b2d      	ldr	r3, [pc, #180]	; (8005504 <MX_TIM2_Init+0xe8>)
 8005450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005454:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8005456:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <MX_TIM2_Init+0xe8>)
 8005458:	f240 227f 	movw	r2, #639	; 0x27f
 800545c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800545e:	4b29      	ldr	r3, [pc, #164]	; (8005504 <MX_TIM2_Init+0xe8>)
 8005460:	2200      	movs	r2, #0
 8005462:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8005464:	4b27      	ldr	r3, [pc, #156]	; (8005504 <MX_TIM2_Init+0xe8>)
 8005466:	2209      	movs	r2, #9
 8005468:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800546a:	4b26      	ldr	r3, [pc, #152]	; (8005504 <MX_TIM2_Init+0xe8>)
 800546c:	2200      	movs	r2, #0
 800546e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005470:	4b24      	ldr	r3, [pc, #144]	; (8005504 <MX_TIM2_Init+0xe8>)
 8005472:	2200      	movs	r2, #0
 8005474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005476:	4823      	ldr	r0, [pc, #140]	; (8005504 <MX_TIM2_Init+0xe8>)
 8005478:	f006 fab9 	bl	800b9ee <HAL_TIM_Base_Init>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005482:	f7fe ffc1 	bl	8004408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800548c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005490:	4619      	mov	r1, r3
 8005492:	481c      	ldr	r0, [pc, #112]	; (8005504 <MX_TIM2_Init+0xe8>)
 8005494:	f006 fe6e 	bl	800c174 <HAL_TIM_ConfigClockSource>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800549e:	f7fe ffb3 	bl	8004408 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80054a2:	4818      	ldr	r0, [pc, #96]	; (8005504 <MX_TIM2_Init+0xe8>)
 80054a4:	f006 fb4e 	bl	800bb44 <HAL_TIM_PWM_Init>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80054ae:	f7fe ffab 	bl	8004408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80054b2:	2320      	movs	r3, #32
 80054b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054ba:	f107 031c 	add.w	r3, r7, #28
 80054be:	4619      	mov	r1, r3
 80054c0:	4810      	ldr	r0, [pc, #64]	; (8005504 <MX_TIM2_Init+0xe8>)
 80054c2:	f007 fadd 	bl	800ca80 <HAL_TIMEx_MasterConfigSynchronization>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80054cc:	f7fe ff9c 	bl	8004408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054d0:	2360      	movs	r3, #96	; 0x60
 80054d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 80054d4:	2309      	movs	r3, #9
 80054d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054d8:	2300      	movs	r3, #0
 80054da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80054e0:	463b      	mov	r3, r7
 80054e2:	2204      	movs	r2, #4
 80054e4:	4619      	mov	r1, r3
 80054e6:	4807      	ldr	r0, [pc, #28]	; (8005504 <MX_TIM2_Init+0xe8>)
 80054e8:	f006 fd2c 	bl	800bf44 <HAL_TIM_PWM_ConfigChannel>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80054f2:	f7fe ff89 	bl	8004408 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80054f6:	4803      	ldr	r0, [pc, #12]	; (8005504 <MX_TIM2_Init+0xe8>)
 80054f8:	f000 f850 	bl	800559c <HAL_TIM_MspPostInit>

}
 80054fc:	bf00      	nop
 80054fe:	3738      	adds	r7, #56	; 0x38
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	20028550 	.word	0x20028550

08005508 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800550c:	4b0f      	ldr	r3, [pc, #60]	; (800554c <MX_TIM16_Init+0x44>)
 800550e:	4a10      	ldr	r2, [pc, #64]	; (8005550 <MX_TIM16_Init+0x48>)
 8005510:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8005512:	4b0e      	ldr	r3, [pc, #56]	; (800554c <MX_TIM16_Init+0x44>)
 8005514:	221f      	movs	r2, #31
 8005516:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <MX_TIM16_Init+0x44>)
 800551a:	2200      	movs	r2, #0
 800551c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800551e:	4b0b      	ldr	r3, [pc, #44]	; (800554c <MX_TIM16_Init+0x44>)
 8005520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005524:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005526:	4b09      	ldr	r3, [pc, #36]	; (800554c <MX_TIM16_Init+0x44>)
 8005528:	2200      	movs	r2, #0
 800552a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800552c:	4b07      	ldr	r3, [pc, #28]	; (800554c <MX_TIM16_Init+0x44>)
 800552e:	2200      	movs	r2, #0
 8005530:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005532:	4b06      	ldr	r3, [pc, #24]	; (800554c <MX_TIM16_Init+0x44>)
 8005534:	2200      	movs	r2, #0
 8005536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005538:	4804      	ldr	r0, [pc, #16]	; (800554c <MX_TIM16_Init+0x44>)
 800553a:	f006 fa58 	bl	800b9ee <HAL_TIM_Base_Init>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005544:	f7fe ff60 	bl	8004408 <Error_Handler>
  }

}
 8005548:	bf00      	nop
 800554a:	bd80      	pop	{r7, pc}
 800554c:	20028590 	.word	0x20028590
 8005550:	40014400 	.word	0x40014400

08005554 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005564:	d103      	bne.n	800556e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005566:	2001      	movs	r0, #1
 8005568:	f7ff ff25 	bl	80053b6 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800556c:	e010      	b.n	8005590 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a09      	ldr	r2, [pc, #36]	; (8005598 <HAL_TIM_Base_MspInit+0x44>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d10b      	bne.n	8005590 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005578:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800557c:	f7ff ff34 	bl	80053e8 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005580:	2200      	movs	r2, #0
 8005582:	2100      	movs	r1, #0
 8005584:	2019      	movs	r0, #25
 8005586:	f001 fe76 	bl	8007276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800558a:	2019      	movs	r0, #25
 800558c:	f001 fe8d 	bl	80072aa <HAL_NVIC_EnableIRQ>
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40014400 	.word	0x40014400

0800559c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a4:	f107 030c 	add.w	r3, r7, #12
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	609a      	str	r2, [r3, #8]
 80055b0:	60da      	str	r2, [r3, #12]
 80055b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d112      	bne.n	80055e4 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055be:	2002      	movs	r0, #2
 80055c0:	f7ff fee0 	bl	8005384 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80055c4:	2308      	movs	r3, #8
 80055c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c8:	2302      	movs	r3, #2
 80055ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80055d4:	2301      	movs	r3, #1
 80055d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d8:	f107 030c 	add.w	r3, r7, #12
 80055dc:	4619      	mov	r1, r3
 80055de:	4803      	ldr	r0, [pc, #12]	; (80055ec <HAL_TIM_MspPostInit+0x50>)
 80055e0:	f002 f9d0 	bl	8007984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80055e4:	bf00      	nop
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	48000400 	.word	0x48000400

080055f0 <LL_AHB2_GRP1_EnableClock>:
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80055f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4313      	orrs	r3, r2
 8005606:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4013      	ands	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005614:	68fb      	ldr	r3, [r7, #12]
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <LL_APB2_GRP1_EnableClock>:
{
 8005622:	b480      	push	{r7}
 8005624:	b085      	sub	sp, #20
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800562a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005630:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4313      	orrs	r3, r2
 8005638:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800563a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4013      	ands	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005646:	68fb      	ldr	r3, [r7, #12]
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005658:	4b23      	ldr	r3, [pc, #140]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 800565a:	4a24      	ldr	r2, [pc, #144]	; (80056ec <MX_USART1_UART_Init+0x98>)
 800565c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800565e:	4b22      	ldr	r3, [pc, #136]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 8005660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005666:	4b20      	ldr	r3, [pc, #128]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 8005668:	2200      	movs	r2, #0
 800566a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800566c:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 800566e:	2200      	movs	r2, #0
 8005670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005672:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 8005674:	2200      	movs	r2, #0
 8005676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005678:	4b1b      	ldr	r3, [pc, #108]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 800567a:	220c      	movs	r2, #12
 800567c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800567e:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 8005680:	2200      	movs	r2, #0
 8005682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8005684:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 8005686:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800568a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800568c:	4b16      	ldr	r3, [pc, #88]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 800568e:	2200      	movs	r2, #0
 8005690:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 8005694:	2200      	movs	r2, #0
 8005696:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005698:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 800569a:	2200      	movs	r2, #0
 800569c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800569e:	4812      	ldr	r0, [pc, #72]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 80056a0:	f007 fa8c 	bl	800cbbc <HAL_UART_Init>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80056aa:	f7fe fead 	bl	8004408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056ae:	2100      	movs	r1, #0
 80056b0:	480d      	ldr	r0, [pc, #52]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 80056b2:	f009 f902 	bl	800e8ba <HAL_UARTEx_SetTxFifoThreshold>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80056bc:	f7fe fea4 	bl	8004408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056c0:	2100      	movs	r1, #0
 80056c2:	4809      	ldr	r0, [pc, #36]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 80056c4:	f009 f937 	bl	800e936 <HAL_UARTEx_SetRxFifoThreshold>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80056ce:	f7fe fe9b 	bl	8004408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80056d2:	4805      	ldr	r0, [pc, #20]	; (80056e8 <MX_USART1_UART_Init+0x94>)
 80056d4:	f009 f8b8 	bl	800e848 <HAL_UARTEx_DisableFifoMode>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80056de:	f7fe fe93 	bl	8004408 <Error_Handler>
  }

}
 80056e2:	bf00      	nop
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	200285d0 	.word	0x200285d0
 80056ec:	40013800 	.word	0x40013800

080056f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f8:	f107 030c 	add.w	r3, r7, #12
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	609a      	str	r2, [r3, #8]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a0e      	ldr	r2, [pc, #56]	; (8005748 <HAL_UART_MspInit+0x58>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d116      	bne.n	8005740 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005712:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005716:	f7ff ff84 	bl	8005622 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800571a:	2002      	movs	r0, #2
 800571c:	f7ff ff68 	bl	80055f0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005720:	23c0      	movs	r3, #192	; 0xc0
 8005722:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005724:	2302      	movs	r3, #2
 8005726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800572c:	2300      	movs	r3, #0
 800572e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005730:	2307      	movs	r3, #7
 8005732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005734:	f107 030c 	add.w	r3, r7, #12
 8005738:	4619      	mov	r1, r3
 800573a:	4804      	ldr	r0, [pc, #16]	; (800574c <HAL_UART_MspInit+0x5c>)
 800573c:	f002 f922 	bl	8007984 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005740:	bf00      	nop
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40013800 	.word	0x40013800
 800574c:	48000400 	.word	0x48000400

08005750 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005750:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005752:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005754:	3304      	adds	r3, #4

08005756 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005756:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005758:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800575a:	d3f9      	bcc.n	8005750 <CopyDataInit>
  bx lr
 800575c:	4770      	bx	lr

0800575e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800575e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005760:	3004      	adds	r0, #4

08005762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005762:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005764:	d3fb      	bcc.n	800575e <FillZerobss>
  bx lr
 8005766:	4770      	bx	lr

08005768 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005768:	480c      	ldr	r0, [pc, #48]	; (800579c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800576a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800576c:	480c      	ldr	r0, [pc, #48]	; (80057a0 <LoopForever+0x8>)
 800576e:	490d      	ldr	r1, [pc, #52]	; (80057a4 <LoopForever+0xc>)
 8005770:	4a0d      	ldr	r2, [pc, #52]	; (80057a8 <LoopForever+0x10>)
 8005772:	2300      	movs	r3, #0
 8005774:	f7ff ffef 	bl	8005756 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005778:	480c      	ldr	r0, [pc, #48]	; (80057ac <LoopForever+0x14>)
 800577a:	490d      	ldr	r1, [pc, #52]	; (80057b0 <LoopForever+0x18>)
 800577c:	2300      	movs	r3, #0
 800577e:	f7ff fff0 	bl	8005762 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005782:	480c      	ldr	r0, [pc, #48]	; (80057b4 <LoopForever+0x1c>)
 8005784:	490c      	ldr	r1, [pc, #48]	; (80057b8 <LoopForever+0x20>)
 8005786:	2300      	movs	r3, #0
 8005788:	f7ff ffeb 	bl	8005762 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800578c:	f7ff fd02 	bl	8005194 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005790:	f010 ffb8 	bl	8016704 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8005794:	f7fe fd1e 	bl	80041d4 <main>

08005798 <LoopForever>:

LoopForever:
  b LoopForever
 8005798:	e7fe      	b.n	8005798 <LoopForever>
 800579a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800579c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80057a0:	20000004 	.word	0x20000004
 80057a4:	20000138 	.word	0x20000138
 80057a8:	08018aa0 	.word	0x08018aa0
  INIT_BSS _sbss, _ebss
 80057ac:	200001e8 	.word	0x200001e8
 80057b0:	20028788 	.word	0x20028788
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80057b4:	200300c4 	.word	0x200300c4
 80057b8:	20030b5b 	.word	0x20030b5b

080057bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80057bc:	e7fe      	b.n	80057bc <ADC1_IRQHandler>
	...

080057c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057ca:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <HAL_Init+0x3c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a0b      	ldr	r2, [pc, #44]	; (80057fc <HAL_Init+0x3c>)
 80057d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057d6:	2003      	movs	r0, #3
 80057d8:	f001 fd42 	bl	8007260 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057dc:	2000      	movs	r0, #0
 80057de:	f7ff fc13 	bl	8005008 <HAL_InitTick>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	71fb      	strb	r3, [r7, #7]
 80057ec:	e001      	b.n	80057f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80057ee:	f7ff fbda 	bl	8004fa6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80057f2:	79fb      	ldrb	r3, [r7, #7]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	58004000 	.word	0x58004000

08005800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <HAL_IncTick+0x1c>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <HAL_IncTick+0x20>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4413      	add	r3, r2
 800580e:	4a03      	ldr	r2, [pc, #12]	; (800581c <HAL_IncTick+0x1c>)
 8005810:	6013      	str	r3, [r2, #0]
}
 8005812:	bf00      	nop
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	2002865c 	.word	0x2002865c
 8005820:	20000080 	.word	0x20000080

08005824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  return uwTick;
 8005828:	4b03      	ldr	r3, [pc, #12]	; (8005838 <HAL_GetTick+0x14>)
 800582a:	681b      	ldr	r3, [r3, #0]
}
 800582c:	4618      	mov	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	2002865c 	.word	0x2002865c

0800583c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005840:	4b03      	ldr	r3, [pc, #12]	; (8005850 <HAL_GetTickPrio+0x14>)
 8005842:	681b      	ldr	r3, [r3, #0]
}
 8005844:	4618      	mov	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	2000007c 	.word	0x2000007c

08005854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800585c:	f7ff ffe2 	bl	8005824 <HAL_GetTick>
 8005860:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d004      	beq.n	8005878 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 800586e:	4b09      	ldr	r3, [pc, #36]	; (8005894 <HAL_Delay+0x40>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4413      	add	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8005878:	bf00      	nop
 800587a:	f7ff ffd3 	bl	8005824 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	429a      	cmp	r2, r3
 8005888:	d8f7      	bhi.n	800587a <HAL_Delay+0x26>
    {
    }
  }
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000080 	.word	0x20000080

08005898 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80058f0:	b490      	push	{r4, r7}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3360      	adds	r3, #96	; 0x60
 8005902:	461a      	mov	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800590c:	6822      	ldr	r2, [r4, #0]
 800590e:	4b08      	ldr	r3, [pc, #32]	; (8005930 <LL_ADC_SetOffset+0x40>)
 8005910:	4013      	ands	r3, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	4313      	orrs	r3, r2
 800591e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005922:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bc90      	pop	{r4, r7}
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	03fff000 	.word	0x03fff000

08005934 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005934:	b490      	push	{r4, r7}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3360      	adds	r3, #96	; 0x60
 8005942:	461a      	mov	r2, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bc90      	pop	{r4, r7}
 800595a:	4770      	bx	lr

0800595c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800595c:	b490      	push	{r4, r7}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3360      	adds	r3, #96	; 0x60
 800596c:	461a      	mov	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4313      	orrs	r3, r2
 8005980:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bc90      	pop	{r4, r7}
 800598a:	4770      	bx	lr

0800598c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80059b2:	b490      	push	{r4, r7}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3330      	adds	r3, #48	; 0x30
 80059c2:	461a      	mov	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	4413      	add	r3, r2
 80059d0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80059d2:	6822      	ldr	r2, [r4, #0]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	211f      	movs	r1, #31
 80059dc:	fa01 f303 	lsl.w	r3, r1, r3
 80059e0:	43db      	mvns	r3, r3
 80059e2:	401a      	ands	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	0e9b      	lsrs	r3, r3, #26
 80059e8:	f003 011f 	and.w	r1, r3, #31
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 031f 	and.w	r3, r3, #31
 80059f2:	fa01 f303 	lsl.w	r3, r1, r3
 80059f6:	4313      	orrs	r3, r2
 80059f8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc90      	pop	{r4, r7}
 8005a02:	4770      	bx	lr

08005a04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005a04:	b490      	push	{r4, r7}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3314      	adds	r3, #20
 8005a14:	461a      	mov	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	0e5b      	lsrs	r3, r3, #25
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	4413      	add	r3, r2
 8005a22:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005a24:	6822      	ldr	r2, [r4, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	0d1b      	lsrs	r3, r3, #20
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	2107      	movs	r1, #7
 8005a30:	fa01 f303 	lsl.w	r3, r1, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	401a      	ands	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	0d1b      	lsrs	r3, r3, #20
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	4313      	orrs	r3, r2
 8005a48:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005a4a:	bf00      	nop
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc90      	pop	{r4, r7}
 8005a52:	4770      	bx	lr

08005a54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	401a      	ands	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f003 0318 	and.w	r3, r3, #24
 8005a76:	4908      	ldr	r1, [pc, #32]	; (8005a98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005a78:	40d9      	lsrs	r1, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	400b      	ands	r3, r1
 8005a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a82:	431a      	orrs	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	0007ffff 	.word	0x0007ffff

08005a9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005aac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6093      	str	r3, [r2, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad4:	d101      	bne.n	8005ada <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005afc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b24:	d101      	bne.n	8005b2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b4c:	f043 0201 	orr.w	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b74:	f043 0202 	orr.w	r2, r3, #2
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <LL_ADC_IsEnabled+0x18>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <LL_ADC_IsEnabled+0x1a>
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d101      	bne.n	8005bc6 <LL_ADC_IsDisableOngoing+0x18>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <LL_ADC_IsDisableOngoing+0x1a>
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005be4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005be8:	f043 0204 	orr.w	r2, r3, #4
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c10:	f043 0210 	orr.w	r2, r3, #16
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d101      	bne.n	8005c3c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c5e:	f043 0220 	orr.w	r2, r3, #32
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d101      	bne.n	8005c8a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e12a      	b.n	8005f08 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d109      	bne.n	8005cd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7fb f925 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fef1 	bl	8005ac0 <LL_ADC_IsDeepPowerDownEnabled>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff fed7 	bl	8005a9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff ff0c 	bl	8005b10 <LL_ADC_IsInternalRegulatorEnabled>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d113      	bne.n	8005d26 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff fef0 	bl	8005ae8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005d08:	4b81      	ldr	r3, [pc, #516]	; (8005f10 <HAL_ADC_Init+0x278>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	099b      	lsrs	r3, r3, #6
 8005d0e:	4a81      	ldr	r2, [pc, #516]	; (8005f14 <HAL_ADC_Init+0x27c>)
 8005d10:	fba2 2303 	umull	r2, r3, r2, r3
 8005d14:	099b      	lsrs	r3, r3, #6
 8005d16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005d18:	e002      	b.n	8005d20 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f9      	bne.n	8005d1a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff fef0 	bl	8005b10 <LL_ADC_IsInternalRegulatorEnabled>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10d      	bne.n	8005d52 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3a:	f043 0210 	orr.w	r2, r3, #16
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	f043 0201 	orr.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff ff64 	bl	8005c24 <LL_ADC_REG_IsConversionOngoing>
 8005d5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d62:	f003 0310 	and.w	r3, r3, #16
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f040 80c5 	bne.w	8005ef6 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f040 80c1 	bne.w	8005ef6 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005d7c:	f043 0202 	orr.w	r2, r3, #2
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff fefd 	bl	8005b88 <LL_ADC_IsEnabled>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10b      	bne.n	8005dac <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d94:	4860      	ldr	r0, [pc, #384]	; (8005f18 <HAL_ADC_Init+0x280>)
 8005d96:	f7ff fef7 	bl	8005b88 <LL_ADC_IsEnabled>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d105      	bne.n	8005dac <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	4619      	mov	r1, r3
 8005da6:	485d      	ldr	r0, [pc, #372]	; (8005f1c <HAL_ADC_Init+0x284>)
 8005da8:	f7ff fd76 	bl	8005898 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	7e5b      	ldrb	r3, [r3, #25]
 8005db0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005db6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005dbc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005dc2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d106      	bne.n	8005de8 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	3b01      	subs	r3, #1
 8005de0:	045b      	lsls	r3, r3, #17
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d009      	beq.n	8005e04 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	4b45      	ldr	r3, [pc, #276]	; (8005f20 <HAL_ADC_Init+0x288>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	69b9      	ldr	r1, [r7, #24]
 8005e14:	430b      	orrs	r3, r1
 8005e16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff ff01 	bl	8005c24 <LL_ADC_REG_IsConversionOngoing>
 8005e22:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff ff22 	bl	8005c72 <LL_ADC_INJ_IsConversionOngoing>
 8005e2e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d13d      	bne.n	8005eb2 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d13a      	bne.n	8005eb2 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e40:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e48:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e58:	f023 0302 	bic.w	r3, r3, #2
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6812      	ldr	r2, [r2, #0]
 8005e60:	69b9      	ldr	r1, [r7, #24]
 8005e62:	430b      	orrs	r3, r1
 8005e64:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d118      	bne.n	8005ea2 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e7a:	f023 0304 	bic.w	r3, r3, #4
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e86:	4311      	orrs	r1, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e8c:	4311      	orrs	r1, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e92:	430a      	orrs	r2, r1
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	611a      	str	r2, [r3, #16]
 8005ea0:	e007      	b.n	8005eb2 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0201 	bic.w	r2, r2, #1
 8005eb0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	f023 010f 	bic.w	r1, r3, #15
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	1e5a      	subs	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ed2:	e007      	b.n	8005ee4 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 020f 	bic.w	r2, r2, #15
 8005ee2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee8:	f023 0303 	bic.w	r3, r3, #3
 8005eec:	f043 0201 	orr.w	r2, r3, #1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	655a      	str	r2, [r3, #84]	; 0x54
 8005ef4:	e007      	b.n	8005f06 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	f043 0210 	orr.w	r2, r3, #16
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005f06:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3720      	adds	r7, #32
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000078 	.word	0x20000078
 8005f14:	053e2d63 	.word	0x053e2d63
 8005f18:	50040000 	.word	0x50040000
 8005f1c:	50040300 	.word	0x50040300
 8005f20:	fff0c007 	.word	0xfff0c007

08005f24 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff fe75 	bl	8005c24 <LL_ADC_REG_IsConversionOngoing>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d167      	bne.n	8006010 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_ADC_Start_DMA+0x2a>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e063      	b.n	8006016 <HAL_ADC_Start_DMA+0xf2>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 fcb8 	bl	80068cc <ADC_Enable>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d14f      	bne.n	8006006 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f6e:	f023 0301 	bic.w	r3, r3, #1
 8005f72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d006      	beq.n	8005f94 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8a:	f023 0206 	bic.w	r2, r3, #6
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	659a      	str	r2, [r3, #88]	; 0x58
 8005f92:	e002      	b.n	8005f9a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9e:	4a20      	ldr	r2, [pc, #128]	; (8006020 <HAL_ADC_Start_DMA+0xfc>)
 8005fa0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa6:	4a1f      	ldr	r2, [pc, #124]	; (8006024 <HAL_ADC_Start_DMA+0x100>)
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fae:	4a1e      	ldr	r2, [pc, #120]	; (8006028 <HAL_ADC_Start_DMA+0x104>)
 8005fb0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	221c      	movs	r2, #28
 8005fb8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0210 	orr.w	r2, r2, #16
 8005fd0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0201 	orr.w	r2, r2, #1
 8005fe0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3340      	adds	r3, #64	; 0x40
 8005fec:	4619      	mov	r1, r3
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f001 fa3f 	bl	8007474 <HAL_DMA_Start_IT>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fde8 	bl	8005bd4 <LL_ADC_REG_StartConversion>
 8006004:	e006      	b.n	8006014 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800600e:	e001      	b.n	8006014 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006010:	2302      	movs	r3, #2
 8006012:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	08006a31 	.word	0x08006a31
 8006024:	08006b09 	.word	0x08006b09
 8006028:	08006b25 	.word	0x08006b25

0800602c <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <HAL_ADC_Stop_DMA+0x16>
 800603e:	2302      	movs	r3, #2
 8006040:	e051      	b.n	80060e6 <HAL_ADC_Stop_DMA+0xba>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800604a:	2103      	movs	r1, #3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fb89 	bl	8006764 <ADC_ConversionStop>
 8006052:	4603      	mov	r3, r0
 8006054:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d13f      	bne.n	80060dc <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006070:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d10f      	bne.n	800609a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607e:	4618      	mov	r0, r3
 8006080:	f001 fa73 	bl	800756a <HAL_DMA_Abort>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006092:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0210 	bic.w	r2, r2, #16
 80060a8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d105      	bne.n	80060bc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fc65 	bl	8006980 <ADC_Disable>
 80060b6:	4603      	mov	r3, r0
 80060b8:	73fb      	strb	r3, [r7, #15]
 80060ba:	e002      	b.n	80060c2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fc5f 	bl	8006980 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d109      	bne.n	80060dc <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	f043 0201 	orr.w	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b0a6      	sub	sp, #152	; 0x98
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_ADC_ConfigChannel+0x22>
 800610e:	2302      	movs	r3, #2
 8006110:	e31e      	b.n	8006750 <HAL_ADC_ConfigChannel+0x660>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fd80 	bl	8005c24 <LL_ADC_REG_IsConversionOngoing>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 8303 	bne.w	8006732 <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6818      	ldr	r0, [r3, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	6859      	ldr	r1, [r3, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	f7ff fc3a 	bl	80059b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff fd6e 	bl	8005c24 <LL_ADC_REG_IsConversionOngoing>
 8006148:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fd8e 	bl	8005c72 <LL_ADC_INJ_IsConversionOngoing>
 8006156:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800615a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 8148 	bne.w	80063f4 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006164:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006168:	2b00      	cmp	r3, #0
 800616a:	f040 8143 	bne.w	80063f4 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6819      	ldr	r1, [r3, #0]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	461a      	mov	r2, r3
 800617c:	f7ff fc42 	bl	8005a04 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	08db      	lsrs	r3, r3, #3
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d00a      	beq.n	80061b8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6919      	ldr	r1, [r3, #16]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061b2:	f7ff fb9d 	bl	80058f0 <LL_ADC_SetOffset>
 80061b6:	e11d      	b.n	80063f4 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2100      	movs	r1, #0
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff fbb8 	bl	8005934 <LL_ADC_GetOffsetChannel>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10a      	bne.n	80061e4 <HAL_ADC_ConfigChannel+0xf4>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2100      	movs	r1, #0
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7ff fbad 	bl	8005934 <LL_ADC_GetOffsetChannel>
 80061da:	4603      	mov	r3, r0
 80061dc:	0e9b      	lsrs	r3, r3, #26
 80061de:	f003 021f 	and.w	r2, r3, #31
 80061e2:	e012      	b.n	800620a <HAL_ADC_ConfigChannel+0x11a>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2100      	movs	r1, #0
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff fba2 	bl	8005934 <LL_ADC_GetOffsetChannel>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061fa:	fa93 f3a3 	rbit	r3, r3
 80061fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006200:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006202:	fab3 f383 	clz	r3, r3
 8006206:	b2db      	uxtb	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006212:	2b00      	cmp	r3, #0
 8006214:	d105      	bne.n	8006222 <HAL_ADC_ConfigChannel+0x132>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	0e9b      	lsrs	r3, r3, #26
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	e00a      	b.n	8006238 <HAL_ADC_ConfigChannel+0x148>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800622a:	fa93 f3a3 	rbit	r3, r3
 800622e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8006230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006232:	fab3 f383 	clz	r3, r3
 8006236:	b2db      	uxtb	r3, r3
 8006238:	429a      	cmp	r2, r3
 800623a:	d106      	bne.n	800624a <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2200      	movs	r2, #0
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff fb89 	bl	800595c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2101      	movs	r1, #1
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff fb6f 	bl	8005934 <LL_ADC_GetOffsetChannel>
 8006256:	4603      	mov	r3, r0
 8006258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <HAL_ADC_ConfigChannel+0x186>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2101      	movs	r1, #1
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fb64 	bl	8005934 <LL_ADC_GetOffsetChannel>
 800626c:	4603      	mov	r3, r0
 800626e:	0e9b      	lsrs	r3, r3, #26
 8006270:	f003 021f 	and.w	r2, r3, #31
 8006274:	e010      	b.n	8006298 <HAL_ADC_ConfigChannel+0x1a8>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2101      	movs	r1, #1
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fb59 	bl	8005934 <LL_ADC_GetOffsetChannel>
 8006282:	4603      	mov	r3, r0
 8006284:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006288:	fa93 f3a3 	rbit	r3, r3
 800628c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800628e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006290:	fab3 f383 	clz	r3, r3
 8006294:	b2db      	uxtb	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <HAL_ADC_ConfigChannel+0x1c0>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	0e9b      	lsrs	r3, r3, #26
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	e00a      	b.n	80062c6 <HAL_ADC_ConfigChannel+0x1d6>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062b8:	fa93 f3a3 	rbit	r3, r3
 80062bc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80062be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062c0:	fab3 f383 	clz	r3, r3
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d106      	bne.n	80062d8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2200      	movs	r2, #0
 80062d0:	2101      	movs	r1, #1
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fb42 	bl	800595c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2102      	movs	r1, #2
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff fb28 	bl	8005934 <LL_ADC_GetOffsetChannel>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10a      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x214>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2102      	movs	r1, #2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fb1d 	bl	8005934 <LL_ADC_GetOffsetChannel>
 80062fa:	4603      	mov	r3, r0
 80062fc:	0e9b      	lsrs	r3, r3, #26
 80062fe:	f003 021f 	and.w	r2, r3, #31
 8006302:	e010      	b.n	8006326 <HAL_ADC_ConfigChannel+0x236>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2102      	movs	r1, #2
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff fb12 	bl	8005934 <LL_ADC_GetOffsetChannel>
 8006310:	4603      	mov	r3, r0
 8006312:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006316:	fa93 f3a3 	rbit	r3, r3
 800631a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800631c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800631e:	fab3 f383 	clz	r3, r3
 8006322:	b2db      	uxtb	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800632e:	2b00      	cmp	r3, #0
 8006330:	d105      	bne.n	800633e <HAL_ADC_ConfigChannel+0x24e>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	0e9b      	lsrs	r3, r3, #26
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	e00a      	b.n	8006354 <HAL_ADC_ConfigChannel+0x264>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006346:	fa93 f3a3 	rbit	r3, r3
 800634a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800634c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800634e:	fab3 f383 	clz	r3, r3
 8006352:	b2db      	uxtb	r3, r3
 8006354:	429a      	cmp	r2, r3
 8006356:	d106      	bne.n	8006366 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2200      	movs	r2, #0
 800635e:	2102      	movs	r1, #2
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff fafb 	bl	800595c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2103      	movs	r1, #3
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff fae1 	bl	8005934 <LL_ADC_GetOffsetChannel>
 8006372:	4603      	mov	r3, r0
 8006374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10a      	bne.n	8006392 <HAL_ADC_ConfigChannel+0x2a2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2103      	movs	r1, #3
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff fad6 	bl	8005934 <LL_ADC_GetOffsetChannel>
 8006388:	4603      	mov	r3, r0
 800638a:	0e9b      	lsrs	r3, r3, #26
 800638c:	f003 021f 	and.w	r2, r3, #31
 8006390:	e010      	b.n	80063b4 <HAL_ADC_ConfigChannel+0x2c4>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2103      	movs	r1, #3
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff facb 	bl	8005934 <LL_ADC_GetOffsetChannel>
 800639e:	4603      	mov	r3, r0
 80063a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a4:	fa93 f3a3 	rbit	r3, r3
 80063a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80063aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ac:	fab3 f383 	clz	r3, r3
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	461a      	mov	r2, r3
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d105      	bne.n	80063cc <HAL_ADC_ConfigChannel+0x2dc>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	0e9b      	lsrs	r3, r3, #26
 80063c6:	f003 031f 	and.w	r3, r3, #31
 80063ca:	e00a      	b.n	80063e2 <HAL_ADC_ConfigChannel+0x2f2>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d4:	fa93 f3a3 	rbit	r3, r3
 80063d8:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80063da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063dc:	fab3 f383 	clz	r3, r3
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d106      	bne.n	80063f4 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	2103      	movs	r1, #3
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fab4 	bl	800595c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff fbc5 	bl	8005b88 <LL_ADC_IsEnabled>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	f040 819f 	bne.w	8006744 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6819      	ldr	r1, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	461a      	mov	r2, r3
 8006414:	f7ff fb1e 	bl	8005a54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	4aab      	ldr	r2, [pc, #684]	; (80066cc <HAL_ADC_ConfigChannel+0x5dc>)
 800641e:	4293      	cmp	r3, r2
 8006420:	f040 80fd 	bne.w	800661e <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10b      	bne.n	800644c <HAL_ADC_ConfigChannel+0x35c>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	0e9b      	lsrs	r3, r3, #26
 800643a:	3301      	adds	r3, #1
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	2b09      	cmp	r3, #9
 8006442:	bf94      	ite	ls
 8006444:	2301      	movls	r3, #1
 8006446:	2300      	movhi	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	e012      	b.n	8006472 <HAL_ADC_ConfigChannel+0x382>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006454:	fa93 f3a3 	rbit	r3, r3
 8006458:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800645a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645c:	fab3 f383 	clz	r3, r3
 8006460:	b2db      	uxtb	r3, r3
 8006462:	3301      	adds	r3, #1
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	2b09      	cmp	r3, #9
 800646a:	bf94      	ite	ls
 800646c:	2301      	movls	r3, #1
 800646e:	2300      	movhi	r3, #0
 8006470:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006472:	2b00      	cmp	r3, #0
 8006474:	d064      	beq.n	8006540 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647e:	2b00      	cmp	r3, #0
 8006480:	d107      	bne.n	8006492 <HAL_ADC_ConfigChannel+0x3a2>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	0e9b      	lsrs	r3, r3, #26
 8006488:	3301      	adds	r3, #1
 800648a:	069b      	lsls	r3, r3, #26
 800648c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006490:	e00e      	b.n	80064b0 <HAL_ADC_ConfigChannel+0x3c0>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	fa93 f3a3 	rbit	r3, r3
 800649e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	fab3 f383 	clz	r3, r3
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	3301      	adds	r3, #1
 80064aa:	069b      	lsls	r3, r3, #26
 80064ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d109      	bne.n	80064d0 <HAL_ADC_ConfigChannel+0x3e0>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	0e9b      	lsrs	r3, r3, #26
 80064c2:	3301      	adds	r3, #1
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	2101      	movs	r1, #1
 80064ca:	fa01 f303 	lsl.w	r3, r1, r3
 80064ce:	e010      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x402>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	fa93 f3a3 	rbit	r3, r3
 80064dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	fab3 f383 	clz	r3, r3
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	3301      	adds	r3, #1
 80064e8:	f003 031f 	and.w	r3, r3, #31
 80064ec:	2101      	movs	r1, #1
 80064ee:	fa01 f303 	lsl.w	r3, r1, r3
 80064f2:	ea42 0103 	orr.w	r1, r2, r3
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <HAL_ADC_ConfigChannel+0x428>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	0e9b      	lsrs	r3, r3, #26
 8006508:	3301      	adds	r3, #1
 800650a:	f003 021f 	and.w	r2, r3, #31
 800650e:	4613      	mov	r3, r2
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	4413      	add	r3, r2
 8006514:	051b      	lsls	r3, r3, #20
 8006516:	e011      	b.n	800653c <HAL_ADC_ConfigChannel+0x44c>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	fa93 f3a3 	rbit	r3, r3
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	fab3 f383 	clz	r3, r3
 800652c:	b2db      	uxtb	r3, r3
 800652e:	3301      	adds	r3, #1
 8006530:	f003 021f 	and.w	r2, r3, #31
 8006534:	4613      	mov	r3, r2
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	4413      	add	r3, r2
 800653a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800653c:	430b      	orrs	r3, r1
 800653e:	e069      	b.n	8006614 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006548:	2b00      	cmp	r3, #0
 800654a:	d107      	bne.n	800655c <HAL_ADC_ConfigChannel+0x46c>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	0e9b      	lsrs	r3, r3, #26
 8006552:	3301      	adds	r3, #1
 8006554:	069b      	lsls	r3, r3, #26
 8006556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800655a:	e00e      	b.n	800657a <HAL_ADC_ConfigChannel+0x48a>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	fa93 f3a3 	rbit	r3, r3
 8006568:	61fb      	str	r3, [r7, #28]
  return result;
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	fab3 f383 	clz	r3, r3
 8006570:	b2db      	uxtb	r3, r3
 8006572:	3301      	adds	r3, #1
 8006574:	069b      	lsls	r3, r3, #26
 8006576:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <HAL_ADC_ConfigChannel+0x4aa>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	0e9b      	lsrs	r3, r3, #26
 800658c:	3301      	adds	r3, #1
 800658e:	f003 031f 	and.w	r3, r3, #31
 8006592:	2101      	movs	r1, #1
 8006594:	fa01 f303 	lsl.w	r3, r1, r3
 8006598:	e010      	b.n	80065bc <HAL_ADC_ConfigChannel+0x4cc>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	fa93 f3a3 	rbit	r3, r3
 80065a6:	617b      	str	r3, [r7, #20]
  return result;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	fab3 f383 	clz	r3, r3
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	3301      	adds	r3, #1
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	2101      	movs	r1, #1
 80065b8:	fa01 f303 	lsl.w	r3, r1, r3
 80065bc:	ea42 0103 	orr.w	r1, r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10d      	bne.n	80065e8 <HAL_ADC_ConfigChannel+0x4f8>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	0e9b      	lsrs	r3, r3, #26
 80065d2:	3301      	adds	r3, #1
 80065d4:	f003 021f 	and.w	r2, r3, #31
 80065d8:	4613      	mov	r3, r2
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	4413      	add	r3, r2
 80065de:	3b1e      	subs	r3, #30
 80065e0:	051b      	lsls	r3, r3, #20
 80065e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065e6:	e014      	b.n	8006612 <HAL_ADC_ConfigChannel+0x522>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	fa93 f3a3 	rbit	r3, r3
 80065f4:	60fb      	str	r3, [r7, #12]
  return result;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	fab3 f383 	clz	r3, r3
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	3301      	adds	r3, #1
 8006600:	f003 021f 	and.w	r2, r3, #31
 8006604:	4613      	mov	r3, r2
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	4413      	add	r3, r2
 800660a:	3b1e      	subs	r3, #30
 800660c:	051b      	lsls	r3, r3, #20
 800660e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006612:	430b      	orrs	r3, r1
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	6892      	ldr	r2, [r2, #8]
 8006618:	4619      	mov	r1, r3
 800661a:	f7ff f9f3 	bl	8005a04 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <HAL_ADC_ConfigChannel+0x5e0>)
 8006624:	4013      	ands	r3, r2
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 808c 	beq.w	8006744 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800662c:	4829      	ldr	r0, [pc, #164]	; (80066d4 <HAL_ADC_ConfigChannel+0x5e4>)
 800662e:	f7ff f951 	bl	80058d4 <LL_ADC_GetCommonPathInternalCh>
 8006632:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006636:	4828      	ldr	r0, [pc, #160]	; (80066d8 <HAL_ADC_ConfigChannel+0x5e8>)
 8006638:	f7ff faa6 	bl	8005b88 <LL_ADC_IsEnabled>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d16d      	bne.n	800671e <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a25      	ldr	r2, [pc, #148]	; (80066dc <HAL_ADC_ConfigChannel+0x5ec>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d126      	bne.n	800669a <HAL_ADC_ConfigChannel+0x5aa>
 800664c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d120      	bne.n	800669a <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1e      	ldr	r2, [pc, #120]	; (80066d8 <HAL_ADC_ConfigChannel+0x5e8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d170      	bne.n	8006744 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006666:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800666a:	4619      	mov	r1, r3
 800666c:	4819      	ldr	r0, [pc, #100]	; (80066d4 <HAL_ADC_ConfigChannel+0x5e4>)
 800666e:	f7ff f91e 	bl	80058ae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006672:	4b1b      	ldr	r3, [pc, #108]	; (80066e0 <HAL_ADC_ConfigChannel+0x5f0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	099b      	lsrs	r3, r3, #6
 8006678:	4a1a      	ldr	r2, [pc, #104]	; (80066e4 <HAL_ADC_ConfigChannel+0x5f4>)
 800667a:	fba2 2303 	umull	r2, r3, r2, r3
 800667e:	099a      	lsrs	r2, r3, #6
 8006680:	4613      	mov	r3, r2
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800668a:	e002      	b.n	8006692 <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	3b01      	subs	r3, #1
 8006690:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1f9      	bne.n	800668c <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006698:	e054      	b.n	8006744 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a12      	ldr	r2, [pc, #72]	; (80066e8 <HAL_ADC_ConfigChannel+0x5f8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d123      	bne.n	80066ec <HAL_ADC_ConfigChannel+0x5fc>
 80066a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d11d      	bne.n	80066ec <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a08      	ldr	r2, [pc, #32]	; (80066d8 <HAL_ADC_ConfigChannel+0x5e8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d144      	bne.n	8006744 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80066ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066c2:	4619      	mov	r1, r3
 80066c4:	4803      	ldr	r0, [pc, #12]	; (80066d4 <HAL_ADC_ConfigChannel+0x5e4>)
 80066c6:	f7ff f8f2 	bl	80058ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066ca:	e03b      	b.n	8006744 <HAL_ADC_ConfigChannel+0x654>
 80066cc:	407f0000 	.word	0x407f0000
 80066d0:	80080000 	.word	0x80080000
 80066d4:	50040300 	.word	0x50040300
 80066d8:	50040000 	.word	0x50040000
 80066dc:	c7520000 	.word	0xc7520000
 80066e0:	20000078 	.word	0x20000078
 80066e4:	053e2d63 	.word	0x053e2d63
 80066e8:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a19      	ldr	r2, [pc, #100]	; (8006758 <HAL_ADC_ConfigChannel+0x668>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d126      	bne.n	8006744 <HAL_ADC_ConfigChannel+0x654>
 80066f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d120      	bne.n	8006744 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a15      	ldr	r2, [pc, #84]	; (800675c <HAL_ADC_ConfigChannel+0x66c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d11b      	bne.n	8006744 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800670c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006710:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006714:	4619      	mov	r1, r3
 8006716:	4812      	ldr	r0, [pc, #72]	; (8006760 <HAL_ADC_ConfigChannel+0x670>)
 8006718:	f7ff f8c9 	bl	80058ae <LL_ADC_SetCommonPathInternalCh>
 800671c:	e012      	b.n	8006744 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006722:	f043 0220 	orr.w	r2, r3, #32
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006730:	e008      	b.n	8006744 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006736:	f043 0220 	orr.w	r2, r3, #32
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800674c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8006750:	4618      	mov	r0, r3
 8006752:	3798      	adds	r7, #152	; 0x98
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	80000001 	.word	0x80000001
 800675c:	50040000 	.word	0x50040000
 8006760:	50040300 	.word	0x50040300

08006764 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800676e:	2300      	movs	r3, #0
 8006770:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff fa52 	bl	8005c24 <LL_ADC_REG_IsConversionOngoing>
 8006780:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fa73 	bl	8005c72 <LL_ADC_INJ_IsConversionOngoing>
 800678c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d103      	bne.n	800679c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 8090 	beq.w	80068bc <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d02a      	beq.n	8006800 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	7e5b      	ldrb	r3, [r3, #25]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d126      	bne.n	8006800 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7e1b      	ldrb	r3, [r3, #24]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d122      	bne.n	8006800 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80067ba:	2301      	movs	r3, #1
 80067bc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80067be:	e014      	b.n	80067ea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4a41      	ldr	r2, [pc, #260]	; (80068c8 <ADC_ConversionStop+0x164>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d90d      	bls.n	80067e4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067cc:	f043 0210 	orr.w	r2, r3, #16
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d8:	f043 0201 	orr.w	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e06c      	b.n	80068be <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	3301      	adds	r3, #1
 80067e8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b40      	cmp	r3, #64	; 0x40
 80067f6:	d1e3      	bne.n	80067c0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2240      	movs	r2, #64	; 0x40
 80067fe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	2b02      	cmp	r3, #2
 8006804:	d014      	beq.n	8006830 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff fa0a 	bl	8005c24 <LL_ADC_REG_IsConversionOngoing>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00c      	beq.n	8006830 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff f9c7 	bl	8005bae <LL_ADC_IsDisableOngoing>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff f9e6 	bl	8005bfc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d014      	beq.n	8006860 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff fa19 	bl	8005c72 <LL_ADC_INJ_IsConversionOngoing>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00c      	beq.n	8006860 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff f9af 	bl	8005bae <LL_ADC_IsDisableOngoing>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d104      	bne.n	8006860 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff f9f5 	bl	8005c4a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	2b02      	cmp	r3, #2
 8006864:	d004      	beq.n	8006870 <ADC_ConversionStop+0x10c>
 8006866:	2b03      	cmp	r3, #3
 8006868:	d105      	bne.n	8006876 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800686a:	230c      	movs	r3, #12
 800686c:	617b      	str	r3, [r7, #20]
        break;
 800686e:	e005      	b.n	800687c <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006870:	2308      	movs	r3, #8
 8006872:	617b      	str	r3, [r7, #20]
        break;
 8006874:	e002      	b.n	800687c <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006876:	2304      	movs	r3, #4
 8006878:	617b      	str	r3, [r7, #20]
        break;
 800687a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800687c:	f7fe ffd2 	bl	8005824 <HAL_GetTick>
 8006880:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006882:	e014      	b.n	80068ae <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006884:	f7fe ffce 	bl	8005824 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b05      	cmp	r3, #5
 8006890:	d90d      	bls.n	80068ae <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006896:	f043 0210 	orr.w	r2, r3, #16
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a2:	f043 0201 	orr.w	r2, r3, #1
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e007      	b.n	80068be <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	4013      	ands	r3, r2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e3      	bne.n	8006884 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	a33fffff 	.word	0xa33fffff

080068cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff f955 	bl	8005b88 <LL_ADC_IsEnabled>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d146      	bne.n	8006972 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	4b24      	ldr	r3, [pc, #144]	; (800697c <ADC_Enable+0xb0>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00d      	beq.n	800690e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f6:	f043 0210 	orr.w	r2, r3, #16
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006902:	f043 0201 	orr.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e032      	b.n	8006974 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4618      	mov	r0, r3
 8006914:	f7ff f910 	bl	8005b38 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006918:	f7fe ff84 	bl	8005824 <HAL_GetTick>
 800691c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800691e:	e021      	b.n	8006964 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff f92f 	bl	8005b88 <LL_ADC_IsEnabled>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff f8ff 	bl	8005b38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800693a:	f7fe ff73 	bl	8005824 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d90d      	bls.n	8006964 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694c:	f043 0210 	orr.w	r2, r3, #16
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006958:	f043 0201 	orr.w	r2, r3, #1
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e007      	b.n	8006974 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b01      	cmp	r3, #1
 8006970:	d1d6      	bne.n	8006920 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	8000003f 	.word	0x8000003f

08006980 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff f90e 	bl	8005bae <LL_ADC_IsDisableOngoing>
 8006992:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff f8f5 	bl	8005b88 <LL_ADC_IsEnabled>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d040      	beq.n	8006a26 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d13d      	bne.n	8006a26 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 030d 	and.w	r3, r3, #13
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d10c      	bne.n	80069d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff f8cf 	bl	8005b60 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2203      	movs	r2, #3
 80069c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80069ca:	f7fe ff2b 	bl	8005824 <HAL_GetTick>
 80069ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069d0:	e022      	b.n	8006a18 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d6:	f043 0210 	orr.w	r2, r3, #16
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e2:	f043 0201 	orr.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e01c      	b.n	8006a28 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80069ee:	f7fe ff19 	bl	8005824 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d90d      	bls.n	8006a18 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a00:	f043 0210 	orr.w	r2, r3, #16
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0c:	f043 0201 	orr.w	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e007      	b.n	8006a28 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e3      	bne.n	80069ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d14b      	bne.n	8006ae2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d021      	beq.n	8006aa8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe ff8f 	bl	800598c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d032      	beq.n	8006ada <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d12b      	bne.n	8006ada <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d11f      	bne.n	8006ada <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9e:	f043 0201 	orr.w	r2, r3, #1
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	655a      	str	r2, [r3, #84]	; 0x54
 8006aa6:	e018      	b.n	8006ada <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d111      	bne.n	8006ada <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d105      	bne.n	8006ada <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad2:	f043 0201 	orr.w	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7fa fe08 	bl	80016f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006ae0:	e00e      	b.n	8006b00 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae6:	f003 0310 	and.w	r3, r3, #16
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7fa fdea 	bl	80016c8 <HAL_ADC_ErrorCallback>
}
 8006af4:	e004      	b.n	8006b00 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
}
 8006b00:	bf00      	nop
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7fa fe02 	bl	8001720 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b1c:	bf00      	nop
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b42:	f043 0204 	orr.w	r2, r3, #4
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f7fa fdbc 	bl	80016c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <LL_EXTI_EnableIT_0_31>:
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006b60:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <LL_EXTI_EnableIT_0_31+0x24>)
 8006b62:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006b66:	4905      	ldr	r1, [pc, #20]	; (8006b7c <LL_EXTI_EnableIT_0_31+0x24>)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	58000800 	.word	0x58000800

08006b80 <LL_EXTI_DisableIT_0_31>:
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006b88:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <LL_EXTI_DisableIT_0_31+0x28>)
 8006b8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	43db      	mvns	r3, r3
 8006b92:	4905      	ldr	r1, [pc, #20]	; (8006ba8 <LL_EXTI_DisableIT_0_31+0x28>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	58000800 	.word	0x58000800

08006bac <LL_EXTI_EnableEvent_0_31>:
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006bb4:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <LL_EXTI_EnableEvent_0_31+0x24>)
 8006bb6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006bba:	4905      	ldr	r1, [pc, #20]	; (8006bd0 <LL_EXTI_EnableEvent_0_31+0x24>)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	58000800 	.word	0x58000800

08006bd4 <LL_EXTI_DisableEvent_0_31>:
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006bdc:	4b07      	ldr	r3, [pc, #28]	; (8006bfc <LL_EXTI_DisableEvent_0_31+0x28>)
 8006bde:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	43db      	mvns	r3, r3
 8006be6:	4905      	ldr	r1, [pc, #20]	; (8006bfc <LL_EXTI_DisableEvent_0_31+0x28>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8006bee:	bf00      	nop
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	58000800 	.word	0x58000800

08006c00 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006c08:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	4904      	ldr	r1, [pc, #16]	; (8006c20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	600b      	str	r3, [r1, #0]
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	58000800 	.word	0x58000800

08006c24 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006c2c:	4b06      	ldr	r3, [pc, #24]	; (8006c48 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	43db      	mvns	r3, r3
 8006c34:	4904      	ldr	r1, [pc, #16]	; (8006c48 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	600b      	str	r3, [r1, #0]

}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	58000800 	.word	0x58000800

08006c4c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	4904      	ldr	r1, [pc, #16]	; (8006c6c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	604b      	str	r3, [r1, #4]
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	58000800 	.word	0x58000800

08006c70 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006c78:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	43db      	mvns	r3, r3
 8006c80:	4904      	ldr	r1, [pc, #16]	; (8006c94 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006c82:	4013      	ands	r3, r2
 8006c84:	604b      	str	r3, [r1, #4]
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	58000800 	.word	0x58000800

08006c98 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d101      	bne.n	8006cb2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	58000800 	.word	0x58000800

08006cc4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006ccc:	4a04      	ldr	r2, [pc, #16]	; (8006ce0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	60d3      	str	r3, [r2, #12]
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	58000800 	.word	0x58000800

08006ce4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d102      	bne.n	8006d00 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	77fb      	strb	r3, [r7, #31]
 8006cfe:	e0c4      	b.n	8006e8a <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d0e:	d102      	bne.n	8006d16 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	77fb      	strb	r3, [r7, #31]
 8006d14:	e0b9      	b.n	8006e8a <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7fa fd55 	bl	80017e0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d40:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8006d62:	4313      	orrs	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	4b49      	ldr	r3, [pc, #292]	; (8006e94 <HAL_COMP_Init+0x1b0>)
 8006d6e:	4013      	ands	r3, r2
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	6979      	ldr	r1, [r7, #20]
 8006d76:	430b      	orrs	r3, r1
 8006d78:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d82:	d106      	bne.n	8006d92 <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006d84:	4b44      	ldr	r3, [pc, #272]	; (8006e98 <HAL_COMP_Init+0x1b4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a43      	ldr	r2, [pc, #268]	; (8006e98 <HAL_COMP_Init+0x1b4>)
 8006d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	e005      	b.n	8006d9e <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006d92:	4b41      	ldr	r3, [pc, #260]	; (8006e98 <HAL_COMP_Init+0x1b4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a40      	ldr	r2, [pc, #256]	; (8006e98 <HAL_COMP_Init+0x1b4>)
 8006d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d9c:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d015      	beq.n	8006dd8 <HAL_COMP_Init+0xf4>
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d112      	bne.n	8006dd8 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006db2:	4b3a      	ldr	r3, [pc, #232]	; (8006e9c <HAL_COMP_Init+0x1b8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	099b      	lsrs	r3, r3, #6
 8006db8:	4a39      	ldr	r2, [pc, #228]	; (8006ea0 <HAL_COMP_Init+0x1bc>)
 8006dba:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbe:	099a      	lsrs	r2, r3, #6
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006dca:	e002      	b.n	8006dd2 <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1f9      	bne.n	8006dcc <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a31      	ldr	r2, [pc, #196]	; (8006ea4 <HAL_COMP_Init+0x1c0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d102      	bne.n	8006de8 <HAL_COMP_Init+0x104>
 8006de2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006de6:	e001      	b.n	8006dec <HAL_COMP_Init+0x108>
 8006de8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006dec:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d037      	beq.n	8006e6a <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f003 0310 	and.w	r3, r3, #16
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006e06:	6938      	ldr	r0, [r7, #16]
 8006e08:	f7ff fefa 	bl	8006c00 <LL_EXTI_EnableRisingTrig_0_31>
 8006e0c:	e002      	b.n	8006e14 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006e0e:	6938      	ldr	r0, [r7, #16]
 8006e10:	f7ff ff08 	bl	8006c24 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006e20:	6938      	ldr	r0, [r7, #16]
 8006e22:	f7ff ff13 	bl	8006c4c <LL_EXTI_EnableFallingTrig_0_31>
 8006e26:	e002      	b.n	8006e2e <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006e28:	6938      	ldr	r0, [r7, #16]
 8006e2a:	f7ff ff21 	bl	8006c70 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8006e2e:	6938      	ldr	r0, [r7, #16]
 8006e30:	f7ff ff48 	bl	8006cc4 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8006e40:	6938      	ldr	r0, [r7, #16]
 8006e42:	f7ff feb3 	bl	8006bac <LL_EXTI_EnableEvent_0_31>
 8006e46:	e002      	b.n	8006e4e <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006e48:	6938      	ldr	r0, [r7, #16]
 8006e4a:	f7ff fec3 	bl	8006bd4 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8006e5a:	6938      	ldr	r0, [r7, #16]
 8006e5c:	f7ff fe7c 	bl	8006b58 <LL_EXTI_EnableIT_0_31>
 8006e60:	e009      	b.n	8006e76 <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006e62:	6938      	ldr	r0, [r7, #16]
 8006e64:	f7ff fe8c 	bl	8006b80 <LL_EXTI_DisableIT_0_31>
 8006e68:	e005      	b.n	8006e76 <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8006e6a:	6938      	ldr	r0, [r7, #16]
 8006e6c:	f7ff feb2 	bl	8006bd4 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8006e70:	6938      	ldr	r0, [r7, #16]
 8006e72:	f7ff fe85 	bl	8006b80 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006e8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	f9207c03 	.word	0xf9207c03
 8006e98:	40010204 	.word	0x40010204
 8006e9c:	20000078 	.word	0x20000078
 8006ea0:	053e2d63 	.word	0x053e2d63
 8006ea4:	40010200 	.word	0x40010200

08006ea8 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d102      	bne.n	8006ec4 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	73fb      	strb	r3, [r7, #15]
 8006ec2:	e02f      	b.n	8006f24 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ed2:	d102      	bne.n	8006eda <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	73fb      	strb	r3, [r7, #15]
 8006ed8:	e024      	b.n	8006f24 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d11c      	bne.n	8006f20 <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f042 0201 	orr.w	r2, r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2202      	movs	r2, #2
 8006efa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006efe:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <HAL_COMP_Start+0x8c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	099b      	lsrs	r3, r3, #6
 8006f04:	4a0c      	ldr	r2, [pc, #48]	; (8006f38 <HAL_COMP_Start+0x90>)
 8006f06:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0a:	099b      	lsrs	r3, r3, #6
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006f10:	e002      	b.n	8006f18 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f9      	bne.n	8006f12 <HAL_COMP_Start+0x6a>
 8006f1e:	e001      	b.n	8006f24 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	20000078 	.word	0x20000078
 8006f38:	053e2d63 	.word	0x053e2d63

08006f3c <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d102      	bne.n	8006f54 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	73fb      	strb	r3, [r7, #15]
 8006f52:	e01f      	b.n	8006f94 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f62:	d102      	bne.n	8006f6a <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
 8006f68:	e014      	b.n	8006f94 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00c      	beq.n	8006f90 <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0201 	bic.w	r2, r2, #1
 8006f84:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8006f8e:	e001      	b.n	8006f94 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a11      	ldr	r2, [pc, #68]	; (8006ff8 <HAL_COMP_IRQHandler+0x54>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d102      	bne.n	8006fbc <HAL_COMP_IRQHandler+0x18>
 8006fb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006fba:	e001      	b.n	8006fc0 <HAL_COMP_IRQHandler+0x1c>
 8006fbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff fe68 	bl	8006c98 <LL_EXTI_IsActiveFlag_0_31>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d010      	beq.n	8006ff0 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8006fce:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <HAL_COMP_IRQHandler+0x58>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8006fda:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8006fde:	f7ff fe71 	bl	8006cc4 <LL_EXTI_ClearFlag_0_31>
 8006fe2:	e002      	b.n	8006fea <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f7ff fe6d 	bl	8006cc4 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7fd f9ba 	bl	8004364 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40010200 	.word	0x40010200
 8006ffc:	40010204 	.word	0x40010204

08007000 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	0f9b      	lsrs	r3, r3, #30
 8007010:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007030:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <__NVIC_SetPriorityGrouping+0x44>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800703c:	4013      	ands	r3, r2
 800703e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800704c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007052:	4a04      	ldr	r2, [pc, #16]	; (8007064 <__NVIC_SetPriorityGrouping+0x44>)
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	60d3      	str	r3, [r2, #12]
}
 8007058:	bf00      	nop
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	e000ed00 	.word	0xe000ed00

08007068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800706c:	4b04      	ldr	r3, [pc, #16]	; (8007080 <__NVIC_GetPriorityGrouping+0x18>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	0a1b      	lsrs	r3, r3, #8
 8007072:	f003 0307 	and.w	r3, r3, #7
}
 8007076:	4618      	mov	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	e000ed00 	.word	0xe000ed00

08007084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800708e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007092:	2b00      	cmp	r3, #0
 8007094:	db0b      	blt.n	80070ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	f003 021f 	and.w	r2, r3, #31
 800709c:	4907      	ldr	r1, [pc, #28]	; (80070bc <__NVIC_EnableIRQ+0x38>)
 800709e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a2:	095b      	lsrs	r3, r3, #5
 80070a4:	2001      	movs	r0, #1
 80070a6:	fa00 f202 	lsl.w	r2, r0, r2
 80070aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	e000e100 	.word	0xe000e100

080070c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	db10      	blt.n	80070f4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	f003 021f 	and.w	r2, r3, #31
 80070d8:	4909      	ldr	r1, [pc, #36]	; (8007100 <__NVIC_DisableIRQ+0x40>)
 80070da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	2001      	movs	r0, #1
 80070e2:	fa00 f202 	lsl.w	r2, r0, r2
 80070e6:	3320      	adds	r3, #32
 80070e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80070ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80070f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	e000e100 	.word	0xe000e100

08007104 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800710e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007112:	2b00      	cmp	r3, #0
 8007114:	db0c      	blt.n	8007130 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	f003 021f 	and.w	r2, r3, #31
 800711c:	4907      	ldr	r1, [pc, #28]	; (800713c <__NVIC_SetPendingIRQ+0x38>)
 800711e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007122:	095b      	lsrs	r3, r3, #5
 8007124:	2001      	movs	r0, #1
 8007126:	fa00 f202 	lsl.w	r2, r0, r2
 800712a:	3340      	adds	r3, #64	; 0x40
 800712c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	e000e100 	.word	0xe000e100

08007140 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800714a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714e:	2b00      	cmp	r3, #0
 8007150:	db0c      	blt.n	800716c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	f003 021f 	and.w	r2, r3, #31
 8007158:	4907      	ldr	r1, [pc, #28]	; (8007178 <__NVIC_ClearPendingIRQ+0x38>)
 800715a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	2001      	movs	r0, #1
 8007162:	fa00 f202 	lsl.w	r2, r0, r2
 8007166:	3360      	adds	r3, #96	; 0x60
 8007168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	e000e100 	.word	0xe000e100

0800717c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	4603      	mov	r3, r0
 8007184:	6039      	str	r1, [r7, #0]
 8007186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800718c:	2b00      	cmp	r3, #0
 800718e:	db0a      	blt.n	80071a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	b2da      	uxtb	r2, r3
 8007194:	490c      	ldr	r1, [pc, #48]	; (80071c8 <__NVIC_SetPriority+0x4c>)
 8007196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800719a:	0112      	lsls	r2, r2, #4
 800719c:	b2d2      	uxtb	r2, r2
 800719e:	440b      	add	r3, r1
 80071a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071a4:	e00a      	b.n	80071bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	4908      	ldr	r1, [pc, #32]	; (80071cc <__NVIC_SetPriority+0x50>)
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	f003 030f 	and.w	r3, r3, #15
 80071b2:	3b04      	subs	r3, #4
 80071b4:	0112      	lsls	r2, r2, #4
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	440b      	add	r3, r1
 80071ba:	761a      	strb	r2, [r3, #24]
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	e000e100 	.word	0xe000e100
 80071cc:	e000ed00 	.word	0xe000ed00

080071d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b089      	sub	sp, #36	; 0x24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	f1c3 0307 	rsb	r3, r3, #7
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	bf28      	it	cs
 80071ee:	2304      	movcs	r3, #4
 80071f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	3304      	adds	r3, #4
 80071f6:	2b06      	cmp	r3, #6
 80071f8:	d902      	bls.n	8007200 <NVIC_EncodePriority+0x30>
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	3b03      	subs	r3, #3
 80071fe:	e000      	b.n	8007202 <NVIC_EncodePriority+0x32>
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007204:	f04f 32ff 	mov.w	r2, #4294967295
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	fa02 f303 	lsl.w	r3, r2, r3
 800720e:	43da      	mvns	r2, r3
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	401a      	ands	r2, r3
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007218:	f04f 31ff 	mov.w	r1, #4294967295
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	fa01 f303 	lsl.w	r3, r1, r3
 8007222:	43d9      	mvns	r1, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007228:	4313      	orrs	r3, r2
         );
}
 800722a:	4618      	mov	r0, r3
 800722c:	3724      	adds	r7, #36	; 0x24
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
	...

08007238 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800723c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007240:	4b05      	ldr	r3, [pc, #20]	; (8007258 <__NVIC_SystemReset+0x20>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007248:	4903      	ldr	r1, [pc, #12]	; (8007258 <__NVIC_SystemReset+0x20>)
 800724a:	4b04      	ldr	r3, [pc, #16]	; (800725c <__NVIC_SystemReset+0x24>)
 800724c:	4313      	orrs	r3, r2
 800724e:	60cb      	str	r3, [r1, #12]
 8007250:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007254:	bf00      	nop
 8007256:	e7fd      	b.n	8007254 <__NVIC_SystemReset+0x1c>
 8007258:	e000ed00 	.word	0xe000ed00
 800725c:	05fa0004 	.word	0x05fa0004

08007260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff fed9 	bl	8007020 <__NVIC_SetPriorityGrouping>
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b086      	sub	sp, #24
 800727a:	af00      	add	r7, sp, #0
 800727c:	4603      	mov	r3, r0
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007284:	f7ff fef0 	bl	8007068 <__NVIC_GetPriorityGrouping>
 8007288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	6978      	ldr	r0, [r7, #20]
 8007290:	f7ff ff9e 	bl	80071d0 <NVIC_EncodePriority>
 8007294:	4602      	mov	r2, r0
 8007296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800729a:	4611      	mov	r1, r2
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff ff6d 	bl	800717c <__NVIC_SetPriority>
}
 80072a2:	bf00      	nop
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	4603      	mov	r3, r0
 80072b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff fee3 	bl	8007084 <__NVIC_EnableIRQ>
}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b082      	sub	sp, #8
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	4603      	mov	r3, r0
 80072ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80072d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7ff fef3 	bl	80070c0 <__NVIC_DisableIRQ>
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80072e6:	f7ff ffa7 	bl	8007238 <__NVIC_SystemReset>

080072ea <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	4603      	mov	r3, r0
 80072f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80072f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff ff03 	bl	8007104 <__NVIC_SetPendingIRQ>
}
 80072fe:	bf00      	nop
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b082      	sub	sp, #8
 800730a:	af00      	add	r7, sp, #0
 800730c:	4603      	mov	r3, r0
 800730e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff ff13 	bl	8007140 <__NVIC_ClearPendingIRQ>
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e08d      	b.n	8007452 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	4b47      	ldr	r3, [pc, #284]	; (800745c <HAL_DMA_Init+0x138>)
 800733e:	429a      	cmp	r2, r3
 8007340:	d80f      	bhi.n	8007362 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	4b45      	ldr	r3, [pc, #276]	; (8007460 <HAL_DMA_Init+0x13c>)
 800734a:	4413      	add	r3, r2
 800734c:	4a45      	ldr	r2, [pc, #276]	; (8007464 <HAL_DMA_Init+0x140>)
 800734e:	fba2 2303 	umull	r2, r3, r2, r3
 8007352:	091b      	lsrs	r3, r3, #4
 8007354:	009a      	lsls	r2, r3, #2
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a42      	ldr	r2, [pc, #264]	; (8007468 <HAL_DMA_Init+0x144>)
 800735e:	641a      	str	r2, [r3, #64]	; 0x40
 8007360:	e00e      	b.n	8007380 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	4b40      	ldr	r3, [pc, #256]	; (800746c <HAL_DMA_Init+0x148>)
 800736a:	4413      	add	r3, r2
 800736c:	4a3d      	ldr	r2, [pc, #244]	; (8007464 <HAL_DMA_Init+0x140>)
 800736e:	fba2 2303 	umull	r2, r3, r2, r3
 8007372:	091b      	lsrs	r3, r3, #4
 8007374:	009a      	lsls	r2, r3, #2
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a3c      	ldr	r2, [pc, #240]	; (8007470 <HAL_DMA_Init+0x14c>)
 800737e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2202      	movs	r2, #2
 8007384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80073a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa74 	bl	80078c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073e0:	d102      	bne.n	80073e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80073fc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d010      	beq.n	8007428 <HAL_DMA_Init+0x104>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	2b04      	cmp	r3, #4
 800740c:	d80c      	bhi.n	8007428 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa94 	bl	800793c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007424:	605a      	str	r2, [r3, #4]
 8007426:	e008      	b.n	800743a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	40020407 	.word	0x40020407
 8007460:	bffdfff8 	.word	0xbffdfff8
 8007464:	cccccccd 	.word	0xcccccccd
 8007468:	40020000 	.word	0x40020000
 800746c:	bffdfbf8 	.word	0xbffdfbf8
 8007470:	40020400 	.word	0x40020400

08007474 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_DMA_Start_IT+0x20>
 8007490:	2302      	movs	r3, #2
 8007492:	e066      	b.n	8007562 <HAL_DMA_Start_IT+0xee>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d155      	bne.n	8007554 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 0201 	bic.w	r2, r2, #1
 80074c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	68b9      	ldr	r1, [r7, #8]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f9b9 	bl	8007844 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d008      	beq.n	80074ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 020e 	orr.w	r2, r2, #14
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	e00f      	b.n	800750c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0204 	bic.w	r2, r2, #4
 80074fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 020a 	orr.w	r2, r2, #10
 800750a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d007      	beq.n	800752a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007528:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	2b00      	cmp	r3, #0
 8007530:	d007      	beq.n	8007542 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007540:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f042 0201 	orr.w	r2, r2, #1
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	e005      	b.n	8007560 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800755c:	2302      	movs	r3, #2
 800755e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007560:	7dfb      	ldrb	r3, [r7, #23]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e04f      	b.n	800761c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d008      	beq.n	800759a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2204      	movs	r2, #4
 800758c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e040      	b.n	800761c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 020e 	bic.w	r2, r2, #14
 80075a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0201 	bic.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ce:	f003 021c 	and.w	r2, r3, #28
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	2101      	movs	r1, #1
 80075d8:	fa01 f202 	lsl.w	r2, r1, r2
 80075dc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075e6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00c      	beq.n	800760a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007608:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b02      	cmp	r3, #2
 800763e:	d005      	beq.n	800764c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2204      	movs	r2, #4
 8007644:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]
 800764a:	e047      	b.n	80076dc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 020e 	bic.w	r2, r2, #14
 800765a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0201 	bic.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007676:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800767a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007680:	f003 021c 	and.w	r2, r3, #28
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007688:	2101      	movs	r1, #1
 800768a:	fa01 f202 	lsl.w	r2, r1, r2
 800768e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007698:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00c      	beq.n	80076bc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80076ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	4798      	blx	r3
    }
  }
  return status;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	f003 031c 	and.w	r3, r3, #28
 8007706:	2204      	movs	r2, #4
 8007708:	409a      	lsls	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4013      	ands	r3, r2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d026      	beq.n	8007760 <HAL_DMA_IRQHandler+0x7a>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b00      	cmp	r3, #0
 800771a:	d021      	beq.n	8007760 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d107      	bne.n	800773a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0204 	bic.w	r2, r2, #4
 8007738:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773e:	f003 021c 	and.w	r2, r3, #28
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	2104      	movs	r1, #4
 8007748:	fa01 f202 	lsl.w	r2, r1, r2
 800774c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007752:	2b00      	cmp	r3, #0
 8007754:	d071      	beq.n	800783a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800775e:	e06c      	b.n	800783a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007764:	f003 031c 	and.w	r3, r3, #28
 8007768:	2202      	movs	r2, #2
 800776a:	409a      	lsls	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4013      	ands	r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d02e      	beq.n	80077d2 <HAL_DMA_IRQHandler+0xec>
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b00      	cmp	r3, #0
 800777c:	d029      	beq.n	80077d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0320 	and.w	r3, r3, #32
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10b      	bne.n	80077a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 020a 	bic.w	r2, r2, #10
 800779a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a8:	f003 021c 	and.w	r2, r3, #28
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b0:	2102      	movs	r1, #2
 80077b2:	fa01 f202 	lsl.w	r2, r1, r2
 80077b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d038      	beq.n	800783a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80077d0:	e033      	b.n	800783a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d6:	f003 031c 	and.w	r3, r3, #28
 80077da:	2208      	movs	r2, #8
 80077dc:	409a      	lsls	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4013      	ands	r3, r2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d02a      	beq.n	800783c <HAL_DMA_IRQHandler+0x156>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f003 0308 	and.w	r3, r3, #8
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d025      	beq.n	800783c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 020e 	bic.w	r2, r2, #14
 80077fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007804:	f003 021c 	and.w	r2, r3, #28
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	2101      	movs	r1, #1
 800780e:	fa01 f202 	lsl.w	r2, r1, r2
 8007812:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782e:	2b00      	cmp	r3, #0
 8007830:	d004      	beq.n	800783c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800783a:	bf00      	nop
 800783c:	bf00      	nop
}
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800785a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800786c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007872:	f003 021c 	and.w	r2, r3, #28
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	2101      	movs	r1, #1
 800787c:	fa01 f202 	lsl.w	r2, r1, r2
 8007880:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	2b10      	cmp	r3, #16
 8007890:	d108      	bne.n	80078a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80078a2:	e007      	b.n	80078b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	60da      	str	r2, [r3, #12]
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	461a      	mov	r2, r3
 80078ce:	4b17      	ldr	r3, [pc, #92]	; (800792c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d80a      	bhi.n	80078ea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d8:	089b      	lsrs	r3, r3, #2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078e0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6493      	str	r3, [r2, #72]	; 0x48
 80078e8:	e007      	b.n	80078fa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ee:	089b      	lsrs	r3, r3, #2
 80078f0:	009a      	lsls	r2, r3, #2
 80078f2:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80078f4:	4413      	add	r3, r2
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	3b08      	subs	r3, #8
 8007902:	4a0c      	ldr	r2, [pc, #48]	; (8007934 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007904:	fba2 2303 	umull	r2, r3, r2, r3
 8007908:	091b      	lsrs	r3, r3, #4
 800790a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a0a      	ldr	r2, [pc, #40]	; (8007938 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007910:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f003 031c 	and.w	r3, r3, #28
 8007918:	2201      	movs	r2, #1
 800791a:	409a      	lsls	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007920:	bf00      	nop
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	40020407 	.word	0x40020407
 8007930:	4002081c 	.word	0x4002081c
 8007934:	cccccccd 	.word	0xcccccccd
 8007938:	40020880 	.word	0x40020880

0800793c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4b0b      	ldr	r3, [pc, #44]	; (800797c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	461a      	mov	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a08      	ldr	r2, [pc, #32]	; (8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800795e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3b01      	subs	r3, #1
 8007964:	f003 0303 	and.w	r3, r3, #3
 8007968:	2201      	movs	r2, #1
 800796a:	409a      	lsls	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007970:	bf00      	nop
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	1000823f 	.word	0x1000823f
 8007980:	40020940 	.word	0x40020940

08007984 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800798e:	2300      	movs	r3, #0
 8007990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007992:	e14c      	b.n	8007c2e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	2101      	movs	r1, #1
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	fa01 f303 	lsl.w	r3, r1, r3
 80079a0:	4013      	ands	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 813e 	beq.w	8007c28 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d003      	beq.n	80079bc <HAL_GPIO_Init+0x38>
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2b12      	cmp	r3, #18
 80079ba:	d123      	bne.n	8007a04 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	08da      	lsrs	r2, r3, #3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3208      	adds	r2, #8
 80079c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f003 0307 	and.w	r3, r3, #7
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	220f      	movs	r2, #15
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	43db      	mvns	r3, r3
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4013      	ands	r3, r2
 80079de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	691a      	ldr	r2, [r3, #16]
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	fa02 f303 	lsl.w	r3, r2, r3
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	08da      	lsrs	r2, r3, #3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3208      	adds	r2, #8
 80079fe:	6939      	ldr	r1, [r7, #16]
 8007a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	2203      	movs	r2, #3
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	43db      	mvns	r3, r3
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f003 0203 	and.w	r2, r3, #3
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d00b      	beq.n	8007a58 <HAL_GPIO_Init+0xd4>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d007      	beq.n	8007a58 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a4c:	2b11      	cmp	r3, #17
 8007a4e:	d003      	beq.n	8007a58 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	2b12      	cmp	r3, #18
 8007a56:	d130      	bne.n	8007aba <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	2203      	movs	r2, #3
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	43db      	mvns	r3, r3
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a8e:	2201      	movs	r2, #1
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	fa02 f303 	lsl.w	r3, r2, r3
 8007a96:	43db      	mvns	r3, r3
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	091b      	lsrs	r3, r3, #4
 8007aa4:	f003 0201 	and.w	r2, r3, #1
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	43db      	mvns	r3, r3
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	fa02 f303 	lsl.w	r3, r2, r3
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 8098 	beq.w	8007c28 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007af8:	4a54      	ldr	r2, [pc, #336]	; (8007c4c <HAL_GPIO_Init+0x2c8>)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	089b      	lsrs	r3, r3, #2
 8007afe:	3302      	adds	r3, #2
 8007b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f003 0303 	and.w	r3, r3, #3
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	220f      	movs	r2, #15
 8007b10:	fa02 f303 	lsl.w	r3, r2, r3
 8007b14:	43db      	mvns	r3, r3
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007b22:	d019      	beq.n	8007b58 <HAL_GPIO_Init+0x1d4>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a4a      	ldr	r2, [pc, #296]	; (8007c50 <HAL_GPIO_Init+0x2cc>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d013      	beq.n	8007b54 <HAL_GPIO_Init+0x1d0>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a49      	ldr	r2, [pc, #292]	; (8007c54 <HAL_GPIO_Init+0x2d0>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d00d      	beq.n	8007b50 <HAL_GPIO_Init+0x1cc>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a48      	ldr	r2, [pc, #288]	; (8007c58 <HAL_GPIO_Init+0x2d4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d007      	beq.n	8007b4c <HAL_GPIO_Init+0x1c8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a47      	ldr	r2, [pc, #284]	; (8007c5c <HAL_GPIO_Init+0x2d8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d101      	bne.n	8007b48 <HAL_GPIO_Init+0x1c4>
 8007b44:	2304      	movs	r3, #4
 8007b46:	e008      	b.n	8007b5a <HAL_GPIO_Init+0x1d6>
 8007b48:	2307      	movs	r3, #7
 8007b4a:	e006      	b.n	8007b5a <HAL_GPIO_Init+0x1d6>
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e004      	b.n	8007b5a <HAL_GPIO_Init+0x1d6>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e002      	b.n	8007b5a <HAL_GPIO_Init+0x1d6>
 8007b54:	2301      	movs	r3, #1
 8007b56:	e000      	b.n	8007b5a <HAL_GPIO_Init+0x1d6>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	f002 0203 	and.w	r2, r2, #3
 8007b60:	0092      	lsls	r2, r2, #2
 8007b62:	4093      	lsls	r3, r2
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007b6a:	4938      	ldr	r1, [pc, #224]	; (8007c4c <HAL_GPIO_Init+0x2c8>)
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	089b      	lsrs	r3, r3, #2
 8007b70:	3302      	adds	r3, #2
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007b78:	4b39      	ldr	r3, [pc, #228]	; (8007c60 <HAL_GPIO_Init+0x2dc>)
 8007b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	43db      	mvns	r3, r3
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4013      	ands	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b9e:	4a30      	ldr	r2, [pc, #192]	; (8007c60 <HAL_GPIO_Init+0x2dc>)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8007ba6:	4b2e      	ldr	r3, [pc, #184]	; (8007c60 <HAL_GPIO_Init+0x2dc>)
 8007ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	43db      	mvns	r3, r3
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007bcc:	4a24      	ldr	r2, [pc, #144]	; (8007c60 <HAL_GPIO_Init+0x2dc>)
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007bd4:	4b22      	ldr	r3, [pc, #136]	; (8007c60 <HAL_GPIO_Init+0x2dc>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	43db      	mvns	r3, r3
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	4013      	ands	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007bf8:	4a19      	ldr	r2, [pc, #100]	; (8007c60 <HAL_GPIO_Init+0x2dc>)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007bfe:	4b18      	ldr	r3, [pc, #96]	; (8007c60 <HAL_GPIO_Init+0x2dc>)
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	43db      	mvns	r3, r3
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007c22:	4a0f      	ldr	r2, [pc, #60]	; (8007c60 <HAL_GPIO_Init+0x2dc>)
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	fa22 f303 	lsr.w	r3, r2, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f47f aeab 	bne.w	8007994 <HAL_GPIO_Init+0x10>
  }
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	40010000 	.word	0x40010000
 8007c50:	48000400 	.word	0x48000400
 8007c54:	48000800 	.word	0x48000800
 8007c58:	48000c00 	.word	0x48000c00
 8007c5c:	48001000 	.word	0x48001000
 8007c60:	58000800 	.word	0x58000800

08007c64 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	887b      	ldrh	r3, [r7, #2]
 8007c76:	4013      	ands	r3, r2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
 8007c80:	e001      	b.n	8007c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007c9e:	4b08      	ldr	r3, [pc, #32]	; (8007cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ca0:	68da      	ldr	r2, [r3, #12]
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d006      	beq.n	8007cb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007caa:	4a05      	ldr	r2, [pc, #20]	; (8007cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cac:	88fb      	ldrh	r3, [r7, #6]
 8007cae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fb ff14 	bl	8003ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	58000800 	.word	0x58000800

08007cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e081      	b.n	8007dda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7fb fe3a 	bl	8003964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2224      	movs	r2, #36	; 0x24
 8007cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0201 	bic.w	r2, r2, #1
 8007d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d107      	bne.n	8007d3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	689a      	ldr	r2, [r3, #8]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d3a:	609a      	str	r2, [r3, #8]
 8007d3c:	e006      	b.n	8007d4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689a      	ldr	r2, [r3, #8]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007d4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d104      	bne.n	8007d5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	6812      	ldr	r2, [r2, #0]
 8007d68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691a      	ldr	r2, [r3, #16]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	ea42 0103 	orr.w	r1, r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	021a      	lsls	r2, r3, #8
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	69d9      	ldr	r1, [r3, #28]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a1a      	ldr	r2, [r3, #32]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	430a      	orrs	r2, r1
 8007daa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f042 0201 	orr.w	r2, r2, #1
 8007dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	607a      	str	r2, [r7, #4]
 8007dee:	461a      	mov	r2, r3
 8007df0:	460b      	mov	r3, r1
 8007df2:	817b      	strh	r3, [r7, #10]
 8007df4:	4613      	mov	r3, r2
 8007df6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	f040 80da 	bne.w	8007fba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d101      	bne.n	8007e14 <HAL_I2C_Master_Transmit+0x30>
 8007e10:	2302      	movs	r3, #2
 8007e12:	e0d3      	b.n	8007fbc <HAL_I2C_Master_Transmit+0x1d8>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e1c:	f7fd fd02 	bl	8005824 <HAL_GetTick>
 8007e20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	2319      	movs	r3, #25
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f001 fbba 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e0be      	b.n	8007fbc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2221      	movs	r2, #33	; 0x21
 8007e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2210      	movs	r2, #16
 8007e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	893a      	ldrh	r2, [r7, #8]
 8007e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	2bff      	cmp	r3, #255	; 0xff
 8007e6e:	d90e      	bls.n	8007e8e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	22ff      	movs	r2, #255	; 0xff
 8007e74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	8979      	ldrh	r1, [r7, #10]
 8007e7e:	4b51      	ldr	r3, [pc, #324]	; (8007fc4 <HAL_I2C_Master_Transmit+0x1e0>)
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f001 fd1c 	bl	80098c4 <I2C_TransferConfig>
 8007e8c:	e06c      	b.n	8007f68 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	8979      	ldrh	r1, [r7, #10]
 8007ea0:	4b48      	ldr	r3, [pc, #288]	; (8007fc4 <HAL_I2C_Master_Transmit+0x1e0>)
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f001 fd0b 	bl	80098c4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007eae:	e05b      	b.n	8007f68 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	6a39      	ldr	r1, [r7, #32]
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f001 fbb7 	bl	8009628 <I2C_WaitOnTXISFlagUntilTimeout>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e07b      	b.n	8007fbc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	781a      	ldrb	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d034      	beq.n	8007f68 <HAL_I2C_Master_Transmit+0x184>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d130      	bne.n	8007f68 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2180      	movs	r1, #128	; 0x80
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f001 fb49 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e04d      	b.n	8007fbc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	2bff      	cmp	r3, #255	; 0xff
 8007f28:	d90e      	bls.n	8007f48 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	22ff      	movs	r2, #255	; 0xff
 8007f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	8979      	ldrh	r1, [r7, #10]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f001 fcbf 	bl	80098c4 <I2C_TransferConfig>
 8007f46:	e00f      	b.n	8007f68 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	8979      	ldrh	r1, [r7, #10]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f001 fcae 	bl	80098c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d19e      	bne.n	8007eb0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	6a39      	ldr	r1, [r7, #32]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f001 fb96 	bl	80096a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e01a      	b.n	8007fbc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6859      	ldr	r1, [r3, #4]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <HAL_I2C_Master_Transmit+0x1e4>)
 8007f9a:	400b      	ands	r3, r1
 8007f9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e000      	b.n	8007fbc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007fba:	2302      	movs	r3, #2
  }
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	80002000 	.word	0x80002000
 8007fc8:	fe00e800 	.word	0xfe00e800

08007fcc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b088      	sub	sp, #32
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	607a      	str	r2, [r7, #4]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	460b      	mov	r3, r1
 8007fda:	817b      	strh	r3, [r7, #10]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b20      	cmp	r3, #32
 8007fea:	f040 80db 	bne.w	80081a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d101      	bne.n	8007ffc <HAL_I2C_Master_Receive+0x30>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e0d4      	b.n	80081a6 <HAL_I2C_Master_Receive+0x1da>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008004:	f7fd fc0e 	bl	8005824 <HAL_GetTick>
 8008008:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	2319      	movs	r3, #25
 8008010:	2201      	movs	r2, #1
 8008012:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f001 fac6 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e0bf      	b.n	80081a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2222      	movs	r2, #34	; 0x22
 800802a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2210      	movs	r2, #16
 8008032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	893a      	ldrh	r2, [r7, #8]
 8008046:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008052:	b29b      	uxth	r3, r3
 8008054:	2bff      	cmp	r3, #255	; 0xff
 8008056:	d90e      	bls.n	8008076 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	22ff      	movs	r2, #255	; 0xff
 800805c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008062:	b2da      	uxtb	r2, r3
 8008064:	8979      	ldrh	r1, [r7, #10]
 8008066:	4b52      	ldr	r3, [pc, #328]	; (80081b0 <HAL_I2C_Master_Receive+0x1e4>)
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f001 fc28 	bl	80098c4 <I2C_TransferConfig>
 8008074:	e06d      	b.n	8008152 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807a:	b29a      	uxth	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008084:	b2da      	uxtb	r2, r3
 8008086:	8979      	ldrh	r1, [r7, #10]
 8008088:	4b49      	ldr	r3, [pc, #292]	; (80081b0 <HAL_I2C_Master_Receive+0x1e4>)
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f001 fc17 	bl	80098c4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008096:	e05c      	b.n	8008152 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	6a39      	ldr	r1, [r7, #32]
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f001 fb3f 	bl	8009720 <I2C_WaitOnRXNEFlagUntilTimeout>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e07c      	b.n	80081a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	b2d2      	uxtb	r2, r2
 80080b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d034      	beq.n	8008152 <HAL_I2C_Master_Receive+0x186>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d130      	bne.n	8008152 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	2200      	movs	r2, #0
 80080f8:	2180      	movs	r1, #128	; 0x80
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f001 fa54 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e04d      	b.n	80081a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810e:	b29b      	uxth	r3, r3
 8008110:	2bff      	cmp	r3, #255	; 0xff
 8008112:	d90e      	bls.n	8008132 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	22ff      	movs	r2, #255	; 0xff
 8008118:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800811e:	b2da      	uxtb	r2, r3
 8008120:	8979      	ldrh	r1, [r7, #10]
 8008122:	2300      	movs	r3, #0
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f001 fbca 	bl	80098c4 <I2C_TransferConfig>
 8008130:	e00f      	b.n	8008152 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008136:	b29a      	uxth	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008140:	b2da      	uxtb	r2, r3
 8008142:	8979      	ldrh	r1, [r7, #10]
 8008144:	2300      	movs	r3, #0
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f001 fbb9 	bl	80098c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008156:	b29b      	uxth	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	d19d      	bne.n	8008098 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	6a39      	ldr	r1, [r7, #32]
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f001 faa1 	bl	80096a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e01a      	b.n	80081a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2220      	movs	r2, #32
 8008176:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6859      	ldr	r1, [r3, #4]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <HAL_I2C_Master_Receive+0x1e8>)
 8008184:	400b      	ands	r3, r1
 8008186:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2220      	movs	r2, #32
 800818c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	e000      	b.n	80081a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80081a4:	2302      	movs	r3, #2
  }
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	80002400 	.word	0x80002400
 80081b4:	fe00e800 	.word	0xfe00e800

080081b8 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af02      	add	r7, sp, #8
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	607a      	str	r2, [r7, #4]
 80081c2:	461a      	mov	r2, r3
 80081c4:	460b      	mov	r3, r1
 80081c6:	817b      	strh	r3, [r7, #10]
 80081c8:	4613      	mov	r3, r2
 80081ca:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	d153      	bne.n	8008280 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081e6:	d101      	bne.n	80081ec <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80081e8:	2302      	movs	r3, #2
 80081ea:	e04a      	b.n	8008282 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d101      	bne.n	80081fa <HAL_I2C_Master_Receive_IT+0x42>
 80081f6:	2302      	movs	r3, #2
 80081f8:	e043      	b.n	8008282 <HAL_I2C_Master_Receive_IT+0xca>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2222      	movs	r2, #34	; 0x22
 8008206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2210      	movs	r2, #16
 800820e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	893a      	ldrh	r2, [r7, #8]
 8008222:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4a19      	ldr	r2, [pc, #100]	; (800828c <HAL_I2C_Master_Receive_IT+0xd4>)
 8008228:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	4a18      	ldr	r2, [pc, #96]	; (8008290 <HAL_I2C_Master_Receive_IT+0xd8>)
 800822e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008234:	b29b      	uxth	r3, r3
 8008236:	2bff      	cmp	r3, #255	; 0xff
 8008238:	d906      	bls.n	8008248 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	22ff      	movs	r2, #255	; 0xff
 800823e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008244:	617b      	str	r3, [r7, #20]
 8008246:	e007      	b.n	8008258 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008256:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800825c:	b2da      	uxtb	r2, r3
 800825e:	8979      	ldrh	r1, [r7, #10]
 8008260:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <HAL_I2C_Master_Receive_IT+0xdc>)
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f001 fb2c 	bl	80098c4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008274:	2102      	movs	r1, #2
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f001 fb52 	bl	8009920 <I2C_Enable_IRQ>

    return HAL_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	e000      	b.n	8008282 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008280:	2302      	movs	r3, #2
  }
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	ffff0000 	.word	0xffff0000
 8008290:	0800859d 	.word	0x0800859d
 8008294:	80002400 	.word	0x80002400

08008298 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af02      	add	r7, sp, #8
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	4608      	mov	r0, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	461a      	mov	r2, r3
 80082a6:	4603      	mov	r3, r0
 80082a8:	817b      	strh	r3, [r7, #10]
 80082aa:	460b      	mov	r3, r1
 80082ac:	813b      	strh	r3, [r7, #8]
 80082ae:	4613      	mov	r3, r2
 80082b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b20      	cmp	r3, #32
 80082bc:	f040 80f9 	bne.w	80084b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d002      	beq.n	80082cc <HAL_I2C_Mem_Write+0x34>
 80082c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d105      	bne.n	80082d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e0ed      	b.n	80084b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d101      	bne.n	80082e6 <HAL_I2C_Mem_Write+0x4e>
 80082e2:	2302      	movs	r3, #2
 80082e4:	e0e6      	b.n	80084b4 <HAL_I2C_Mem_Write+0x21c>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80082ee:	f7fd fa99 	bl	8005824 <HAL_GetTick>
 80082f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	2319      	movs	r3, #25
 80082fa:	2201      	movs	r2, #1
 80082fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f001 f951 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e0d1      	b.n	80084b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2221      	movs	r2, #33	; 0x21
 8008314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2240      	movs	r2, #64	; 0x40
 800831c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6a3a      	ldr	r2, [r7, #32]
 800832a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008330:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008338:	88f8      	ldrh	r0, [r7, #6]
 800833a:	893a      	ldrh	r2, [r7, #8]
 800833c:	8979      	ldrh	r1, [r7, #10]
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	9301      	str	r3, [sp, #4]
 8008342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	4603      	mov	r3, r0
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 fd0f 	bl	8008d6c <I2C_RequestMemoryWrite>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e0a9      	b.n	80084b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008364:	b29b      	uxth	r3, r3
 8008366:	2bff      	cmp	r3, #255	; 0xff
 8008368:	d90e      	bls.n	8008388 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	22ff      	movs	r2, #255	; 0xff
 800836e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008374:	b2da      	uxtb	r2, r3
 8008376:	8979      	ldrh	r1, [r7, #10]
 8008378:	2300      	movs	r3, #0
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f001 fa9f 	bl	80098c4 <I2C_TransferConfig>
 8008386:	e00f      	b.n	80083a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800838c:	b29a      	uxth	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008396:	b2da      	uxtb	r2, r3
 8008398:	8979      	ldrh	r1, [r7, #10]
 800839a:	2300      	movs	r3, #0
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f001 fa8e 	bl	80098c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f001 f93b 	bl	8009628 <I2C_WaitOnTXISFlagUntilTimeout>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e07b      	b.n	80084b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	781a      	ldrb	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d034      	beq.n	8008460 <HAL_I2C_Mem_Write+0x1c8>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d130      	bne.n	8008460 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	2200      	movs	r2, #0
 8008406:	2180      	movs	r1, #128	; 0x80
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f001 f8cd 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e04d      	b.n	80084b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800841c:	b29b      	uxth	r3, r3
 800841e:	2bff      	cmp	r3, #255	; 0xff
 8008420:	d90e      	bls.n	8008440 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	22ff      	movs	r2, #255	; 0xff
 8008426:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800842c:	b2da      	uxtb	r2, r3
 800842e:	8979      	ldrh	r1, [r7, #10]
 8008430:	2300      	movs	r3, #0
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f001 fa43 	bl	80098c4 <I2C_TransferConfig>
 800843e:	e00f      	b.n	8008460 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008444:	b29a      	uxth	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800844e:	b2da      	uxtb	r2, r3
 8008450:	8979      	ldrh	r1, [r7, #10]
 8008452:	2300      	movs	r3, #0
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f001 fa32 	bl	80098c4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d19e      	bne.n	80083a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f001 f91a 	bl	80096a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e01a      	b.n	80084b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2220      	movs	r2, #32
 8008484:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6859      	ldr	r1, [r3, #4]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <HAL_I2C_Mem_Write+0x224>)
 8008492:	400b      	ands	r3, r1
 8008494:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2220      	movs	r2, #32
 800849a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	e000      	b.n	80084b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80084b2:	2302      	movs	r3, #2
  }
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	fe00e800 	.word	0xfe00e800

080084c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	68f9      	ldr	r1, [r7, #12]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	4798      	blx	r3
  }
}
 80084ec:	bf00      	nop
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	460b      	mov	r3, r1
 8008526:	70fb      	strb	r3, [r7, #3]
 8008528:	4613      	mov	r3, r2
 800852a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af02      	add	r7, sp, #8
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d101      	bne.n	80085ba <I2C_Master_ISR_IT+0x1e>
 80085b6:	2302      	movs	r3, #2
 80085b8:	e115      	b.n	80087e6 <I2C_Master_ISR_IT+0x24a>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	091b      	lsrs	r3, r3, #4
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d013      	beq.n	80085f6 <I2C_Master_ISR_IT+0x5a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	091b      	lsrs	r3, r3, #4
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00d      	beq.n	80085f6 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2210      	movs	r2, #16
 80085e0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085e6:	f043 0204 	orr.w	r2, r3, #4
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 ff92 	bl	8009518 <I2C_Flush_TXDR>
 80085f4:	e0e2      	b.n	80087bc <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	089b      	lsrs	r3, r3, #2
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d023      	beq.n	800864a <I2C_Master_ISR_IT+0xae>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	089b      	lsrs	r3, r3, #2
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d01d      	beq.n	800864a <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f023 0304 	bic.w	r3, r3, #4
 8008614:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	b2d2      	uxtb	r2, r2
 8008622:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008632:	3b01      	subs	r3, #1
 8008634:	b29a      	uxth	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800863e:	b29b      	uxth	r3, r3
 8008640:	3b01      	subs	r3, #1
 8008642:	b29a      	uxth	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008648:	e0b8      	b.n	80087bc <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	085b      	lsrs	r3, r3, #1
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d01e      	beq.n	8008694 <I2C_Master_ISR_IT+0xf8>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	085b      	lsrs	r3, r3, #1
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d018      	beq.n	8008694 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	781a      	ldrb	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800867c:	3b01      	subs	r3, #1
 800867e:	b29a      	uxth	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008688:	b29b      	uxth	r3, r3
 800868a:	3b01      	subs	r3, #1
 800868c:	b29a      	uxth	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008692:	e093      	b.n	80087bc <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	09db      	lsrs	r3, r3, #7
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	d05e      	beq.n	800875e <I2C_Master_ISR_IT+0x1c2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	099b      	lsrs	r3, r3, #6
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d058      	beq.n	800875e <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d041      	beq.n	800873a <I2C_Master_ISR_IT+0x19e>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d13d      	bne.n	800873a <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086ca:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	2bff      	cmp	r3, #255	; 0xff
 80086d4:	d90e      	bls.n	80086f4 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	22ff      	movs	r2, #255	; 0xff
 80086da:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	8a79      	ldrh	r1, [r7, #18]
 80086e4:	2300      	movs	r3, #0
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f001 f8e9 	bl	80098c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086f2:	e033      	b.n	800875c <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008702:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008706:	d00c      	beq.n	8008722 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800870c:	b2da      	uxtb	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008712:	8a79      	ldrh	r1, [r7, #18]
 8008714:	2300      	movs	r3, #0
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	4603      	mov	r3, r0
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f001 f8d2 	bl	80098c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008720:	e01c      	b.n	800875c <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008726:	b2da      	uxtb	r2, r3
 8008728:	8a79      	ldrh	r1, [r7, #18]
 800872a:	2300      	movs	r3, #0
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f001 f8c6 	bl	80098c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008738:	e010      	b.n	800875c <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008748:	d003      	beq.n	8008752 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 fbe4 	bl	8008f18 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008750:	e034      	b.n	80087bc <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008752:	2140      	movs	r1, #64	; 0x40
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 fe1f 	bl	8009398 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800875a:	e02f      	b.n	80087bc <I2C_Master_ISR_IT+0x220>
 800875c:	e02e      	b.n	80087bc <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	099b      	lsrs	r3, r3, #6
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d028      	beq.n	80087bc <I2C_Master_ISR_IT+0x220>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	099b      	lsrs	r3, r3, #6
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	2b00      	cmp	r3, #0
 8008774:	d022      	beq.n	80087bc <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800877a:	b29b      	uxth	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d119      	bne.n	80087b4 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800878a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800878e:	d015      	beq.n	80087bc <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008798:	d108      	bne.n	80087ac <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087a8:	605a      	str	r2, [r3, #4]
 80087aa:	e007      	b.n	80087bc <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 fbb3 	bl	8008f18 <I2C_ITMasterSeqCplt>
 80087b2:	e003      	b.n	80087bc <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80087b4:	2140      	movs	r1, #64	; 0x40
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 fdee 	bl	8009398 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	095b      	lsrs	r3, r3, #5
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d009      	beq.n	80087dc <I2C_Master_ISR_IT+0x240>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	095b      	lsrs	r3, r3, #5
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80087d4:	6979      	ldr	r1, [r7, #20]
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 fc18 	bl	800900c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b086      	sub	sp, #24
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800880a:	2b01      	cmp	r3, #1
 800880c:	d101      	bne.n	8008812 <I2C_Slave_ISR_IT+0x24>
 800880e:	2302      	movs	r3, #2
 8008810:	e0ec      	b.n	80089ec <I2C_Slave_ISR_IT+0x1fe>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	095b      	lsrs	r3, r3, #5
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d009      	beq.n	800883a <I2C_Slave_ISR_IT+0x4c>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	095b      	lsrs	r3, r3, #5
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008832:	6939      	ldr	r1, [r7, #16]
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 fc85 	bl	8009144 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	091b      	lsrs	r3, r3, #4
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d04d      	beq.n	80088e2 <I2C_Slave_ISR_IT+0xf4>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	091b      	lsrs	r3, r3, #4
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	d047      	beq.n	80088e2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008856:	b29b      	uxth	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	d128      	bne.n	80088ae <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008862:	b2db      	uxtb	r3, r3
 8008864:	2b28      	cmp	r3, #40	; 0x28
 8008866:	d108      	bne.n	800887a <I2C_Slave_ISR_IT+0x8c>
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800886e:	d104      	bne.n	800887a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008870:	6939      	ldr	r1, [r7, #16]
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 fd3c 	bl	80092f0 <I2C_ITListenCplt>
 8008878:	e032      	b.n	80088e0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b29      	cmp	r3, #41	; 0x29
 8008884:	d10e      	bne.n	80088a4 <I2C_Slave_ISR_IT+0xb6>
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800888c:	d00a      	beq.n	80088a4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2210      	movs	r2, #16
 8008894:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 fe3e 	bl	8009518 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 fb78 	bl	8008f92 <I2C_ITSlaveSeqCplt>
 80088a2:	e01d      	b.n	80088e0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2210      	movs	r2, #16
 80088aa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80088ac:	e096      	b.n	80089dc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2210      	movs	r2, #16
 80088b4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ba:	f043 0204 	orr.w	r2, r3, #4
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <I2C_Slave_ISR_IT+0xe4>
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088ce:	f040 8085 	bne.w	80089dc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d6:	4619      	mov	r1, r3
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fd5d 	bl	8009398 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80088de:	e07d      	b.n	80089dc <I2C_Slave_ISR_IT+0x1ee>
 80088e0:	e07c      	b.n	80089dc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	089b      	lsrs	r3, r3, #2
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d030      	beq.n	8008950 <I2C_Slave_ISR_IT+0x162>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	089b      	lsrs	r3, r3, #2
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d02a      	beq.n	8008950 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fe:	b29b      	uxth	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d018      	beq.n	8008936 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	b2d2      	uxtb	r2, r2
 8008910:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	1c5a      	adds	r2, r3, #1
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008920:	3b01      	subs	r3, #1
 8008922:	b29a      	uxth	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800892c:	b29b      	uxth	r3, r3
 800892e:	3b01      	subs	r3, #1
 8008930:	b29a      	uxth	r2, r3
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800893a:	b29b      	uxth	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	d14f      	bne.n	80089e0 <I2C_Slave_ISR_IT+0x1f2>
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008946:	d04b      	beq.n	80089e0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 fb22 	bl	8008f92 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800894e:	e047      	b.n	80089e0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	08db      	lsrs	r3, r3, #3
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <I2C_Slave_ISR_IT+0x184>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	08db      	lsrs	r3, r3, #3
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	2b00      	cmp	r3, #0
 8008966:	d004      	beq.n	8008972 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008968:	6939      	ldr	r1, [r7, #16]
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 fa52 	bl	8008e14 <I2C_ITAddrCplt>
 8008970:	e037      	b.n	80089e2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	085b      	lsrs	r3, r3, #1
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d031      	beq.n	80089e2 <I2C_Slave_ISR_IT+0x1f4>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	085b      	lsrs	r3, r3, #1
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d02b      	beq.n	80089e2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800898e:	b29b      	uxth	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d018      	beq.n	80089c6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	781a      	ldrb	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	3b01      	subs	r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089bc:	3b01      	subs	r3, #1
 80089be:	b29a      	uxth	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	851a      	strh	r2, [r3, #40]	; 0x28
 80089c4:	e00d      	b.n	80089e2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089cc:	d002      	beq.n	80089d4 <I2C_Slave_ISR_IT+0x1e6>
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d106      	bne.n	80089e2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 fadc 	bl	8008f92 <I2C_ITSlaveSeqCplt>
 80089da:	e002      	b.n	80089e2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80089dc:	bf00      	nop
 80089de:	e000      	b.n	80089e2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80089e0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af02      	add	r7, sp, #8
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d101      	bne.n	8008a0e <I2C_Master_ISR_DMA+0x1a>
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	e0e1      	b.n	8008bd2 <I2C_Master_ISR_DMA+0x1de>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	091b      	lsrs	r3, r3, #4
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d017      	beq.n	8008a52 <I2C_Master_ISR_DMA+0x5e>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	091b      	lsrs	r3, r3, #4
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d011      	beq.n	8008a52 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2210      	movs	r2, #16
 8008a34:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a3a:	f043 0204 	orr.w	r2, r3, #4
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008a42:	2112      	movs	r1, #18
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f000 ff6b 	bl	8009920 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 fd64 	bl	8009518 <I2C_Flush_TXDR>
 8008a50:	e0ba      	b.n	8008bc8 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	09db      	lsrs	r3, r3, #7
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d072      	beq.n	8008b44 <I2C_Master_ISR_DMA+0x150>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	099b      	lsrs	r3, r3, #6
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d06c      	beq.n	8008b44 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a78:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d04e      	beq.n	8008b22 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a90:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	2bff      	cmp	r3, #255	; 0xff
 8008a9a:	d906      	bls.n	8008aaa <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	22ff      	movs	r2, #255	; 0xff
 8008aa0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008aa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	e010      	b.n	8008acc <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008abc:	d003      	beq.n	8008ac6 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	e002      	b.n	8008acc <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008aca:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	8a79      	ldrh	r1, [r7, #18]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f000 fef2 	bl	80098c4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b22      	cmp	r3, #34	; 0x22
 8008afc:	d108      	bne.n	8008b10 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b0c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008b0e:	e05b      	b.n	8008bc8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b1e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008b20:	e052      	b.n	8008bc8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b30:	d003      	beq.n	8008b3a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f000 f9f0 	bl	8008f18 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008b38:	e046      	b.n	8008bc8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008b3a:	2140      	movs	r1, #64	; 0x40
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 fc2b 	bl	8009398 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008b42:	e041      	b.n	8008bc8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	099b      	lsrs	r3, r3, #6
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d029      	beq.n	8008ba4 <I2C_Master_ISR_DMA+0x1b0>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	099b      	lsrs	r3, r3, #6
 8008b54:	f003 0301 	and.w	r3, r3, #1
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d023      	beq.n	8008ba4 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d119      	bne.n	8008b9a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b74:	d027      	beq.n	8008bc6 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b7e:	d108      	bne.n	8008b92 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b8e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008b90:	e019      	b.n	8008bc6 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 f9c0 	bl	8008f18 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008b98:	e015      	b.n	8008bc6 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008b9a:	2140      	movs	r1, #64	; 0x40
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 fbfb 	bl	8009398 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008ba2:	e010      	b.n	8008bc6 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	095b      	lsrs	r3, r3, #5
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00b      	beq.n	8008bc8 <I2C_Master_ISR_DMA+0x1d4>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	095b      	lsrs	r3, r3, #5
 8008bb4:	f003 0301 	and.w	r3, r3, #1
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d005      	beq.n	8008bc8 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008bbc:	68b9      	ldr	r1, [r7, #8]
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 fa24 	bl	800900c <I2C_ITMasterCplt>
 8008bc4:	e000      	b.n	8008bc8 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008bc6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b086      	sub	sp, #24
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d101      	bne.n	8008bfe <I2C_Slave_ISR_DMA+0x24>
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	e0b1      	b.n	8008d62 <I2C_Slave_ISR_DMA+0x188>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	095b      	lsrs	r3, r3, #5
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d009      	beq.n	8008c26 <I2C_Slave_ISR_DMA+0x4c>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	095b      	lsrs	r3, r3, #5
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008c1e:	68b9      	ldr	r1, [r7, #8]
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 fa8f 	bl	8009144 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	091b      	lsrs	r3, r3, #4
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 8082 	beq.w	8008d38 <I2C_Slave_ISR_DMA+0x15e>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	091b      	lsrs	r3, r3, #4
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d07b      	beq.n	8008d38 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	0b9b      	lsrs	r3, r3, #14
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d105      	bne.n	8008c58 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	0bdb      	lsrs	r3, r3, #15
 8008c50:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d068      	beq.n	8008d2a <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00d      	beq.n	8008c7c <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	0bdb      	lsrs	r3, r3, #15
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d007      	beq.n	8008c7c <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00d      	beq.n	8008ca0 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	0b9b      	lsrs	r3, r3, #14
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d007      	beq.n	8008ca0 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d128      	bne.n	8008cf8 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b28      	cmp	r3, #40	; 0x28
 8008cb0:	d108      	bne.n	8008cc4 <I2C_Slave_ISR_DMA+0xea>
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cb8:	d104      	bne.n	8008cc4 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fb17 	bl	80092f0 <I2C_ITListenCplt>
 8008cc2:	e031      	b.n	8008d28 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b29      	cmp	r3, #41	; 0x29
 8008cce:	d10e      	bne.n	8008cee <I2C_Slave_ISR_DMA+0x114>
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008cd6:	d00a      	beq.n	8008cee <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2210      	movs	r2, #16
 8008cde:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 fc19 	bl	8009518 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 f953 	bl	8008f92 <I2C_ITSlaveSeqCplt>
 8008cec:	e01c      	b.n	8008d28 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2210      	movs	r2, #16
 8008cf4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008cf6:	e01d      	b.n	8008d34 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2210      	movs	r2, #16
 8008cfe:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d04:	f043 0204 	orr.w	r2, r3, #4
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <I2C_Slave_ISR_DMA+0x140>
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d18:	d10c      	bne.n	8008d34 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d1e:	4619      	mov	r1, r3
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f000 fb39 	bl	8009398 <I2C_ITError>
      if (treatdmanack == 1U)
 8008d26:	e005      	b.n	8008d34 <I2C_Slave_ISR_DMA+0x15a>
 8008d28:	e004      	b.n	8008d34 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2210      	movs	r2, #16
 8008d30:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d32:	e011      	b.n	8008d58 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8008d34:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d36:	e00f      	b.n	8008d58 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	08db      	lsrs	r3, r3, #3
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d009      	beq.n	8008d58 <I2C_Slave_ISR_DMA+0x17e>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	08db      	lsrs	r3, r3, #3
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008d50:	68b9      	ldr	r1, [r7, #8]
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 f85e 	bl	8008e14 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af02      	add	r7, sp, #8
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	4608      	mov	r0, r1
 8008d76:	4611      	mov	r1, r2
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	817b      	strh	r3, [r7, #10]
 8008d7e:	460b      	mov	r3, r1
 8008d80:	813b      	strh	r3, [r7, #8]
 8008d82:	4613      	mov	r3, r2
 8008d84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008d86:	88fb      	ldrh	r3, [r7, #6]
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	8979      	ldrh	r1, [r7, #10]
 8008d8c:	4b20      	ldr	r3, [pc, #128]	; (8008e10 <I2C_RequestMemoryWrite+0xa4>)
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 fd95 	bl	80098c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d9a:	69fa      	ldr	r2, [r7, #28]
 8008d9c:	69b9      	ldr	r1, [r7, #24]
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 fc42 	bl	8009628 <I2C_WaitOnTXISFlagUntilTimeout>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e02c      	b.n	8008e08 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008dae:	88fb      	ldrh	r3, [r7, #6]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d105      	bne.n	8008dc0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008db4:	893b      	ldrh	r3, [r7, #8]
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	629a      	str	r2, [r3, #40]	; 0x28
 8008dbe:	e015      	b.n	8008dec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008dc0:	893b      	ldrh	r3, [r7, #8]
 8008dc2:	0a1b      	lsrs	r3, r3, #8
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	69b9      	ldr	r1, [r7, #24]
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 fc28 	bl	8009628 <I2C_WaitOnTXISFlagUntilTimeout>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e012      	b.n	8008e08 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008de2:	893b      	ldrh	r3, [r7, #8]
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	2200      	movs	r2, #0
 8008df4:	2180      	movs	r1, #128	; 0x80
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f000 fbd6 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e000      	b.n	8008e08 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	80002000 	.word	0x80002000

08008e14 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008e2a:	2b28      	cmp	r3, #40	; 0x28
 8008e2c:	d168      	bne.n	8008f00 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	0c1b      	lsrs	r3, r3, #16
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	0c1b      	lsrs	r3, r3, #16
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008e4c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e5a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008e68:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d137      	bne.n	8008ee2 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8008e72:	897b      	ldrh	r3, [r7, #10]
 8008e74:	09db      	lsrs	r3, r3, #7
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	89bb      	ldrh	r3, [r7, #12]
 8008e7a:	4053      	eors	r3, r2
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	f003 0306 	and.w	r3, r3, #6
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d11c      	bne.n	8008ec0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008e86:	897b      	ldrh	r3, [r7, #10]
 8008e88:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d139      	bne.n	8008f10 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2208      	movs	r2, #8
 8008ea8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008eb2:	89ba      	ldrh	r2, [r7, #12]
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff fb2f 	bl	800851c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008ebe:	e027      	b.n	8008f10 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8008ec0:	893b      	ldrh	r3, [r7, #8]
 8008ec2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008ec4:	2104      	movs	r1, #4
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fd98 	bl	80099fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008ed4:	89ba      	ldrh	r2, [r7, #12]
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7ff fb1e 	bl	800851c <HAL_I2C_AddrCallback>
}
 8008ee0:	e016      	b.n	8008f10 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008ee2:	2104      	movs	r1, #4
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fd89 	bl	80099fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008ef2:	89ba      	ldrh	r2, [r7, #12]
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff fb0f 	bl	800851c <HAL_I2C_AddrCallback>
}
 8008efe:	e007      	b.n	8008f10 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2208      	movs	r2, #8
 8008f06:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008f10:	bf00      	nop
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b21      	cmp	r3, #33	; 0x21
 8008f32:	d115      	bne.n	8008f60 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2220      	movs	r2, #32
 8008f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2211      	movs	r2, #17
 8008f40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008f48:	2101      	movs	r1, #1
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fd56 	bl	80099fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7fa ffcf 	bl	8003efc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f5e:	e014      	b.n	8008f8a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2220      	movs	r2, #32
 8008f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2212      	movs	r2, #18
 8008f6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008f74:	2102      	movs	r1, #2
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fd40 	bl	80099fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7fa ffcf 	bl	8003f28 <HAL_I2C_MasterRxCpltCallback>
}
 8008f8a:	bf00      	nop
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b082      	sub	sp, #8
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b29      	cmp	r3, #41	; 0x29
 8008fac:	d112      	bne.n	8008fd4 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2228      	movs	r2, #40	; 0x28
 8008fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2221      	movs	r2, #33	; 0x21
 8008fba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fd1c 	bl	80099fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff fa91 	bl	80084f4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008fd2:	e017      	b.n	8009004 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8008fde:	d111      	bne.n	8009004 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2228      	movs	r2, #40	; 0x28
 8008fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2222      	movs	r2, #34	; 0x22
 8008fec:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008fee:	2102      	movs	r1, #2
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fd03 	bl	80099fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff fa82 	bl	8008508 <HAL_I2C_SlaveRxCpltCallback>
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2220      	movs	r2, #32
 800901c:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6859      	ldr	r1, [r3, #4]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	4b44      	ldr	r3, [pc, #272]	; (800913c <I2C_ITMasterCplt+0x130>)
 800902a:	400b      	ands	r3, r1
 800902c:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a40      	ldr	r2, [pc, #256]	; (8009140 <I2C_ITMasterCplt+0x134>)
 800903e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	091b      	lsrs	r3, r3, #4
 8009044:	f003 0301 	and.w	r3, r3, #1
 8009048:	2b00      	cmp	r3, #0
 800904a:	d009      	beq.n	8009060 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2210      	movs	r2, #16
 8009052:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009058:	f043 0204 	orr.w	r2, r3, #4
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fa59 	bl	8009518 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009066:	2103      	movs	r1, #3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fcc7 	bl	80099fc <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009072:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b60      	cmp	r3, #96	; 0x60
 800907e:	d002      	beq.n	8009086 <I2C_ITMasterCplt+0x7a>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d006      	beq.n	8009094 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f983 	bl	8009398 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009092:	e04e      	b.n	8009132 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b21      	cmp	r3, #33	; 0x21
 800909e:	d121      	bne.n	80090e4 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2220      	movs	r2, #32
 80090a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b40      	cmp	r3, #64	; 0x40
 80090b2:	d10b      	bne.n	80090cc <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff fa41 	bl	800854c <HAL_I2C_MemTxCpltCallback>
}
 80090ca:	e032      	b.n	8009132 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7fa ff0d 	bl	8003efc <HAL_I2C_MasterTxCpltCallback>
}
 80090e2:	e026      	b.n	8009132 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b22      	cmp	r3, #34	; 0x22
 80090ee:	d120      	bne.n	8009132 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2220      	movs	r2, #32
 80090f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b40      	cmp	r3, #64	; 0x40
 8009102:	d10b      	bne.n	800911c <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7ff fa23 	bl	8008560 <HAL_I2C_MemRxCpltCallback>
}
 800911a:	e00a      	b.n	8009132 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7fa fefb 	bl	8003f28 <HAL_I2C_MasterRxCpltCallback>
}
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	fe00e800 	.word	0xfe00e800
 8009140:	ffff0000 	.word	0xffff0000

08009144 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2220      	movs	r2, #32
 8009160:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009162:	2107      	movs	r1, #7
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fc49 	bl	80099fc <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009178:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6859      	ldr	r1, [r3, #4]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	4b58      	ldr	r3, [pc, #352]	; (80092e8 <I2C_ITSlaveCplt+0x1a4>)
 8009186:	400b      	ands	r3, r1
 8009188:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f9c4 	bl	8009518 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	0b9b      	lsrs	r3, r3, #14
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00b      	beq.n	80091b4 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d018      	beq.n	80091d6 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091b2:	e010      	b.n	80091d6 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	0bdb      	lsrs	r3, r3, #15
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00a      	beq.n	80091d6 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d006      	beq.n	80091d6 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	089b      	lsrs	r3, r3, #2
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d020      	beq.n	8009224 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f023 0304 	bic.w	r3, r3, #4
 80091e8:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	b2d2      	uxtb	r2, r2
 80091f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00c      	beq.n	8009224 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800920e:	3b01      	subs	r3, #1
 8009210:	b29a      	uxth	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800921a:	b29b      	uxth	r3, r3
 800921c:	3b01      	subs	r3, #1
 800921e:	b29a      	uxth	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009228:	b29b      	uxth	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d005      	beq.n	800923a <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009232:	f043 0204 	orr.w	r2, r3, #4
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009252:	2b00      	cmp	r3, #0
 8009254:	d010      	beq.n	8009278 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f89b 	bl	8009398 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b28      	cmp	r3, #40	; 0x28
 800926c:	d138      	bne.n	80092e0 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f83d 	bl	80092f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009276:	e033      	b.n	80092e0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009280:	d011      	beq.n	80092a6 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7ff fe85 	bl	8008f92 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a18      	ldr	r2, [pc, #96]	; (80092ec <I2C_ITSlaveCplt+0x1a8>)
 800928c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2220      	movs	r2, #32
 8009292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff f94a 	bl	8008538 <HAL_I2C_ListenCpltCallback>
}
 80092a4:	e01c      	b.n	80092e0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b22      	cmp	r3, #34	; 0x22
 80092b0:	d10b      	bne.n	80092ca <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2220      	movs	r2, #32
 80092b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7ff f920 	bl	8008508 <HAL_I2C_SlaveRxCpltCallback>
}
 80092c8:	e00a      	b.n	80092e0 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7ff f90a 	bl	80084f4 <HAL_I2C_SlaveTxCpltCallback>
}
 80092e0:	bf00      	nop
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	fe00e800 	.word	0xfe00e800
 80092ec:	ffff0000 	.word	0xffff0000

080092f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a25      	ldr	r2, [pc, #148]	; (8009394 <I2C_ITListenCplt+0xa4>)
 80092fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2220      	movs	r2, #32
 800930a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	089b      	lsrs	r3, r3, #2
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d022      	beq.n	800936e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009332:	b2d2      	uxtb	r2, r2
 8009334:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933a:	1c5a      	adds	r2, r3, #1
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009344:	2b00      	cmp	r3, #0
 8009346:	d012      	beq.n	800936e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800934c:	3b01      	subs	r3, #1
 800934e:	b29a      	uxth	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009358:	b29b      	uxth	r3, r3
 800935a:	3b01      	subs	r3, #1
 800935c:	b29a      	uxth	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009366:	f043 0204 	orr.w	r2, r3, #4
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800936e:	2107      	movs	r1, #7
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fb43 	bl	80099fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2210      	movs	r2, #16
 800937c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7ff f8d6 	bl	8008538 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800938c:	bf00      	nop
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	ffff0000 	.word	0xffff0000

08009398 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093a8:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a55      	ldr	r2, [pc, #340]	; (800950c <I2C_ITError+0x174>)
 80093b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	431a      	orrs	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
 80093cc:	2b28      	cmp	r3, #40	; 0x28
 80093ce:	d005      	beq.n	80093dc <I2C_ITError+0x44>
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	2b29      	cmp	r3, #41	; 0x29
 80093d4:	d002      	beq.n	80093dc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	2b2a      	cmp	r3, #42	; 0x2a
 80093da:	d10e      	bne.n	80093fa <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80093dc:	2103      	movs	r1, #3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fb0c 	bl	80099fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2228      	movs	r2, #40	; 0x28
 80093e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a46      	ldr	r2, [pc, #280]	; (8009510 <I2C_ITError+0x178>)
 80093f6:	635a      	str	r2, [r3, #52]	; 0x34
 80093f8:	e013      	b.n	8009422 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80093fa:	2107      	movs	r1, #7
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fafd 	bl	80099fc <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b60      	cmp	r3, #96	; 0x60
 800940c:	d003      	beq.n	8009416 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2220      	movs	r2, #32
 8009412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800942c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009430:	d123      	bne.n	800947a <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009440:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009446:	2b00      	cmp	r3, #0
 8009448:	d05c      	beq.n	8009504 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	4a31      	ldr	r2, [pc, #196]	; (8009514 <I2C_ITError+0x17c>)
 8009450:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe f8e2 	bl	8007628 <HAL_DMA_Abort_IT>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d04c      	beq.n	8009504 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009474:	4610      	mov	r0, r2
 8009476:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009478:	e044      	b.n	8009504 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009488:	d123      	bne.n	80094d2 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009498:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d030      	beq.n	8009504 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a6:	4a1b      	ldr	r2, [pc, #108]	; (8009514 <I2C_ITError+0x17c>)
 80094a8:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fe f8b6 	bl	8007628 <HAL_DMA_Abort_IT>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d020      	beq.n	8009504 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80094cc:	4610      	mov	r0, r2
 80094ce:	4798      	blx	r3
}
 80094d0:	e018      	b.n	8009504 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b60      	cmp	r3, #96	; 0x60
 80094dc:	d10b      	bne.n	80094f6 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff f84a 	bl	8008588 <HAL_I2C_AbortCpltCallback>
}
 80094f4:	e006      	b.n	8009504 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7ff f838 	bl	8008574 <HAL_I2C_ErrorCallback>
}
 8009504:	bf00      	nop
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	ffff0000 	.word	0xffff0000
 8009510:	080087ef 	.word	0x080087ef
 8009514:	08009561 	.word	0x08009561

08009518 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b02      	cmp	r3, #2
 800952c:	d103      	bne.n	8009536 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2200      	movs	r2, #0
 8009534:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b01      	cmp	r3, #1
 8009542:	d007      	beq.n	8009554 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	699a      	ldr	r2, [r3, #24]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f042 0201 	orr.w	r2, r2, #1
 8009552:	619a      	str	r2, [r3, #24]
  }
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009572:	2200      	movs	r2, #0
 8009574:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800957a:	2200      	movs	r2, #0
 800957c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b60      	cmp	r3, #96	; 0x60
 8009588:	d107      	bne.n	800959a <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2220      	movs	r2, #32
 800958e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f7fe fff8 	bl	8008588 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009598:	e002      	b.n	80095a0 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f7fe ffea 	bl	8008574 <HAL_I2C_ErrorCallback>
}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	4613      	mov	r3, r2
 80095b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095b8:	e022      	b.n	8009600 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c0:	d01e      	beq.n	8009600 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095c2:	f7fc f92f 	bl	8005824 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d302      	bcc.n	80095d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d113      	bne.n	8009600 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095dc:	f043 0220 	orr.w	r2, r3, #32
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2220      	movs	r2, #32
 80095e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e00f      	b.n	8009620 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	699a      	ldr	r2, [r3, #24]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	4013      	ands	r3, r2
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	429a      	cmp	r2, r3
 800960e:	bf0c      	ite	eq
 8009610:	2301      	moveq	r3, #1
 8009612:	2300      	movne	r3, #0
 8009614:	b2db      	uxtb	r3, r3
 8009616:	461a      	mov	r2, r3
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	429a      	cmp	r2, r3
 800961c:	d0cd      	beq.n	80095ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009634:	e02c      	b.n	8009690 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	68b9      	ldr	r1, [r7, #8]
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 f8dc 	bl	80097f8 <I2C_IsAcknowledgeFailed>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e02a      	b.n	80096a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d01e      	beq.n	8009690 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009652:	f7fc f8e7 	bl	8005824 <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	429a      	cmp	r2, r3
 8009660:	d302      	bcc.n	8009668 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d113      	bne.n	8009690 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966c:	f043 0220 	orr.w	r2, r3, #32
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2220      	movs	r2, #32
 8009678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e007      	b.n	80096a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	f003 0302 	and.w	r3, r3, #2
 800969a:	2b02      	cmp	r3, #2
 800969c:	d1cb      	bne.n	8009636 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096b4:	e028      	b.n	8009708 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	68b9      	ldr	r1, [r7, #8]
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 f89c 	bl	80097f8 <I2C_IsAcknowledgeFailed>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e026      	b.n	8009718 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ca:	f7fc f8ab 	bl	8005824 <HAL_GetTick>
 80096ce:	4602      	mov	r2, r0
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d302      	bcc.n	80096e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d113      	bne.n	8009708 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e4:	f043 0220 	orr.w	r2, r3, #32
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e007      	b.n	8009718 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b20      	cmp	r3, #32
 8009714:	d1cf      	bne.n	80096b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800972c:	e055      	b.n	80097da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	68b9      	ldr	r1, [r7, #8]
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 f860 	bl	80097f8 <I2C_IsAcknowledgeFailed>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e053      	b.n	80097ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	f003 0320 	and.w	r3, r3, #32
 800974c:	2b20      	cmp	r3, #32
 800974e:	d129      	bne.n	80097a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	f003 0304 	and.w	r3, r3, #4
 800975a:	2b04      	cmp	r3, #4
 800975c:	d105      	bne.n	800976a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	e03f      	b.n	80097ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2220      	movs	r2, #32
 8009770:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6859      	ldr	r1, [r3, #4]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	4b1d      	ldr	r3, [pc, #116]	; (80097f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800977e:	400b      	ands	r3, r1
 8009780:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2220      	movs	r2, #32
 800978c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e022      	b.n	80097ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097a4:	f7fc f83e 	bl	8005824 <HAL_GetTick>
 80097a8:	4602      	mov	r2, r0
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d302      	bcc.n	80097ba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10f      	bne.n	80097da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097be:	f043 0220 	orr.w	r2, r3, #32
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2220      	movs	r2, #32
 80097ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e007      	b.n	80097ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	f003 0304 	and.w	r3, r3, #4
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	d1a2      	bne.n	800972e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	fe00e800 	.word	0xfe00e800

080097f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	2b10      	cmp	r3, #16
 8009810:	d151      	bne.n	80098b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009812:	e022      	b.n	800985a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d01e      	beq.n	800985a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800981c:	f7fc f802 	bl	8005824 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	429a      	cmp	r2, r3
 800982a:	d302      	bcc.n	8009832 <I2C_IsAcknowledgeFailed+0x3a>
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d113      	bne.n	800985a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009836:	f043 0220 	orr.w	r2, r3, #32
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2220      	movs	r2, #32
 8009842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e02e      	b.n	80098b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	f003 0320 	and.w	r3, r3, #32
 8009864:	2b20      	cmp	r3, #32
 8009866:	d1d5      	bne.n	8009814 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2210      	movs	r2, #16
 800986e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2220      	movs	r2, #32
 8009876:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f7ff fe4d 	bl	8009518 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	6859      	ldr	r1, [r3, #4]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	4b0d      	ldr	r3, [pc, #52]	; (80098c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800988a:	400b      	ands	r3, r1
 800988c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009892:	f043 0204 	orr.w	r2, r3, #4
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2220      	movs	r2, #32
 800989e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e000      	b.n	80098b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	fe00e800 	.word	0xfe00e800

080098c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	607b      	str	r3, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	817b      	strh	r3, [r7, #10]
 80098d2:	4613      	mov	r3, r2
 80098d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	0d5b      	lsrs	r3, r3, #21
 80098e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80098e4:	4b0d      	ldr	r3, [pc, #52]	; (800991c <I2C_TransferConfig+0x58>)
 80098e6:	430b      	orrs	r3, r1
 80098e8:	43db      	mvns	r3, r3
 80098ea:	ea02 0103 	and.w	r1, r2, r3
 80098ee:	897b      	ldrh	r3, [r7, #10]
 80098f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80098f4:	7a7b      	ldrb	r3, [r7, #9]
 80098f6:	041b      	lsls	r3, r3, #16
 80098f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098fc:	431a      	orrs	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	431a      	orrs	r2, r3
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	431a      	orrs	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800990e:	bf00      	nop
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	03ff63ff 	.word	0x03ff63ff

08009920 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009934:	4a2f      	ldr	r2, [pc, #188]	; (80099f4 <I2C_Enable_IRQ+0xd4>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d004      	beq.n	8009944 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800993e:	4a2e      	ldr	r2, [pc, #184]	; (80099f8 <I2C_Enable_IRQ+0xd8>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d124      	bne.n	800998e <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009944:	887b      	ldrh	r3, [r7, #2]
 8009946:	f003 0304 	and.w	r3, r3, #4
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009954:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8009956:	887b      	ldrh	r3, [r7, #2]
 8009958:	f003 0311 	and.w	r3, r3, #17
 800995c:	2b11      	cmp	r3, #17
 800995e:	d103      	bne.n	8009968 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009966:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8009968:	887b      	ldrh	r3, [r7, #2]
 800996a:	f003 0312 	and.w	r3, r3, #18
 800996e:	2b12      	cmp	r3, #18
 8009970:	d103      	bne.n	800997a <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f043 0320 	orr.w	r3, r3, #32
 8009978:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800997a:	887b      	ldrh	r3, [r7, #2]
 800997c:	f003 0312 	and.w	r3, r3, #18
 8009980:	2b12      	cmp	r3, #18
 8009982:	d128      	bne.n	80099d6 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800998a:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800998c:	e023      	b.n	80099d6 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800998e:	887b      	ldrh	r3, [r7, #2]
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b00      	cmp	r3, #0
 8009996:	d003      	beq.n	80099a0 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800999e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80099a0:	887b      	ldrh	r3, [r7, #2]
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d003      	beq.n	80099b2 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80099b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80099b2:	887b      	ldrh	r3, [r7, #2]
 80099b4:	f003 0302 	and.w	r3, r3, #2
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d003      	beq.n	80099c4 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80099c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80099c4:	887b      	ldrh	r3, [r7, #2]
 80099c6:	f003 0312 	and.w	r3, r3, #18
 80099ca:	2b12      	cmp	r3, #18
 80099cc:	d103      	bne.n	80099d6 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f043 0320 	orr.w	r3, r3, #32
 80099d4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6819      	ldr	r1, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	601a      	str	r2, [r3, #0]
}
 80099e6:	bf00      	nop
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	080089f5 	.word	0x080089f5
 80099f8:	08008bdb 	.word	0x08008bdb

080099fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009a0c:	887b      	ldrh	r3, [r7, #2]
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00f      	beq.n	8009a36 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009a1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a2a:	2b28      	cmp	r3, #40	; 0x28
 8009a2c:	d003      	beq.n	8009a36 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009a34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009a36:	887b      	ldrh	r3, [r7, #2]
 8009a38:	f003 0302 	and.w	r3, r3, #2
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00f      	beq.n	8009a60 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009a46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a54:	2b28      	cmp	r3, #40	; 0x28
 8009a56:	d003      	beq.n	8009a60 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009a5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009a60:	887b      	ldrh	r3, [r7, #2]
 8009a62:	f003 0304 	and.w	r3, r3, #4
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d003      	beq.n	8009a72 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009a70:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8009a72:	887b      	ldrh	r3, [r7, #2]
 8009a74:	f003 0311 	and.w	r3, r3, #17
 8009a78:	2b11      	cmp	r3, #17
 8009a7a:	d103      	bne.n	8009a84 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009a82:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8009a84:	887b      	ldrh	r3, [r7, #2]
 8009a86:	f003 0312 	and.w	r3, r3, #18
 8009a8a:	2b12      	cmp	r3, #18
 8009a8c:	d103      	bne.n	8009a96 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f043 0320 	orr.w	r3, r3, #32
 8009a94:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8009a96:	887b      	ldrh	r3, [r7, #2]
 8009a98:	f003 0312 	and.w	r3, r3, #18
 8009a9c:	2b12      	cmp	r3, #18
 8009a9e:	d103      	bne.n	8009aa8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6819      	ldr	r1, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	43da      	mvns	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	400a      	ands	r2, r1
 8009ab8:	601a      	str	r2, [r3, #0]
}
 8009aba:	bf00      	nop
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b20      	cmp	r3, #32
 8009ada:	d138      	bne.n	8009b4e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d101      	bne.n	8009aea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e032      	b.n	8009b50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2224      	movs	r2, #36	; 0x24
 8009af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0201 	bic.w	r2, r2, #1
 8009b08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009b18:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	6819      	ldr	r1, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f042 0201 	orr.w	r2, r2, #1
 8009b38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2220      	movs	r2, #32
 8009b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	e000      	b.n	8009b50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b4e:	2302      	movs	r3, #2
  }
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	d139      	bne.n	8009be6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d101      	bne.n	8009b80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e033      	b.n	8009be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2224      	movs	r2, #36	; 0x24
 8009b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f022 0201 	bic.w	r2, r2, #1
 8009b9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009bae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f042 0201 	orr.w	r2, r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	e000      	b.n	8009be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009be6:	2302      	movs	r3, #2
  }
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bf8:	4b05      	ldr	r3, [pc, #20]	; (8009c10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a04      	ldr	r2, [pc, #16]	; (8009c10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c02:	6013      	str	r3, [r2, #0]
}
 8009c04:	bf00      	nop
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	58000400 	.word	0x58000400

08009c14 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009c14:	b480      	push	{r7}
 8009c16:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009c18:	4b04      	ldr	r3, [pc, #16]	; (8009c2c <HAL_PWREx_GetVoltageRange+0x18>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	58000400 	.word	0x58000400

08009c30 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8009c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c42:	d101      	bne.n	8009c48 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <LL_RCC_HSE_EnableBypass>:
{
 8009c54:	b480      	push	{r7}
 8009c56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8009c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c66:	6013      	str	r3, [r2, #0]
}
 8009c68:	bf00      	nop
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <LL_RCC_HSE_DisableBypass>:
{
 8009c72:	b480      	push	{r7}
 8009c74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8009c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c84:	6013      	str	r3, [r2, #0]
}
 8009c86:	bf00      	nop
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <LL_RCC_HSE_Enable>:
{
 8009c90:	b480      	push	{r7}
 8009c92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ca2:	6013      	str	r3, [r2, #0]
}
 8009ca4:	bf00      	nop
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <LL_RCC_HSE_Disable>:
{
 8009cae:	b480      	push	{r7}
 8009cb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8009cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cc0:	6013      	str	r3, [r2, #0]
}
 8009cc2:	bf00      	nop
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <LL_RCC_HSE_IsReady>:
{
 8009ccc:	b480      	push	{r7}
 8009cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cde:	d101      	bne.n	8009ce4 <LL_RCC_HSE_IsReady+0x18>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e000      	b.n	8009ce6 <LL_RCC_HSE_IsReady+0x1a>
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <LL_RCC_HSI_Enable>:
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d02:	6013      	str	r3, [r2, #0]
}
 8009d04:	bf00      	nop
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <LL_RCC_HSI_Disable>:
{
 8009d0e:	b480      	push	{r7}
 8009d10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8009d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d20:	6013      	str	r3, [r2, #0]
}
 8009d22:	bf00      	nop
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <LL_RCC_HSI_IsReady>:
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d3e:	d101      	bne.n	8009d44 <LL_RCC_HSI_IsReady+0x18>
 8009d40:	2301      	movs	r3, #1
 8009d42:	e000      	b.n	8009d46 <LL_RCC_HSI_IsReady+0x1a>
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <LL_RCC_HSI_SetCalibTrimming>:
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8009d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	061b      	lsls	r3, r3, #24
 8009d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	604b      	str	r3, [r1, #4]
}
 8009d6e:	bf00      	nop
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <LL_RCC_HSI48_Enable>:
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8009d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d8a:	f043 0301 	orr.w	r3, r3, #1
 8009d8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8009d92:	bf00      	nop
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <LL_RCC_HSI48_Disable>:
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8009da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dac:	f023 0301 	bic.w	r3, r3, #1
 8009db0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8009db4:	bf00      	nop
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <LL_RCC_HSI48_IsReady>:
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8009dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009dca:	f003 0302 	and.w	r3, r3, #2
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d101      	bne.n	8009dd6 <LL_RCC_HSI48_IsReady+0x18>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e000      	b.n	8009dd8 <LL_RCC_HSI48_IsReady+0x1a>
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <LL_RCC_LSE_Enable>:
{
 8009de2:	b480      	push	{r7}
 8009de4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009df2:	f043 0301 	orr.w	r3, r3, #1
 8009df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009dfa:	bf00      	nop
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <LL_RCC_LSE_Disable>:
{
 8009e04:	b480      	push	{r7}
 8009e06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e14:	f023 0301 	bic.w	r3, r3, #1
 8009e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009e1c:	bf00      	nop
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <LL_RCC_LSE_EnableBypass>:
{
 8009e26:	b480      	push	{r7}
 8009e28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e36:	f043 0304 	orr.w	r3, r3, #4
 8009e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009e3e:	bf00      	nop
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <LL_RCC_LSE_DisableBypass>:
{
 8009e48:	b480      	push	{r7}
 8009e4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e58:	f023 0304 	bic.w	r3, r3, #4
 8009e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009e60:	bf00      	nop
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <LL_RCC_LSE_IsReady>:
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e76:	f003 0302 	and.w	r3, r3, #2
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d101      	bne.n	8009e82 <LL_RCC_LSE_IsReady+0x18>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e000      	b.n	8009e84 <LL_RCC_LSE_IsReady+0x1a>
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <LL_RCC_LSI1_Enable>:
{
 8009e8e:	b480      	push	{r7}
 8009e90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e9e:	f043 0301 	orr.w	r3, r3, #1
 8009ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009ea6:	bf00      	nop
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <LL_RCC_LSI1_Disable>:
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ec0:	f023 0301 	bic.w	r3, r3, #1
 8009ec4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009ec8:	bf00      	nop
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <LL_RCC_LSI1_IsReady>:
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8009ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ede:	f003 0302 	and.w	r3, r3, #2
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d101      	bne.n	8009eea <LL_RCC_LSI1_IsReady+0x18>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e000      	b.n	8009eec <LL_RCC_LSI1_IsReady+0x1a>
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <LL_RCC_LSI2_Enable>:
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f06:	f043 0304 	orr.w	r3, r3, #4
 8009f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009f0e:	bf00      	nop
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <LL_RCC_LSI2_Disable>:
{
 8009f18:	b480      	push	{r7}
 8009f1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f28:	f023 0304 	bic.w	r3, r3, #4
 8009f2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009f30:	bf00      	nop
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <LL_RCC_LSI2_IsReady>:
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8009f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f46:	f003 0308 	and.w	r3, r3, #8
 8009f4a:	2b08      	cmp	r3, #8
 8009f4c:	d101      	bne.n	8009f52 <LL_RCC_LSI2_IsReady+0x18>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e000      	b.n	8009f54 <LL_RCC_LSI2_IsReady+0x1a>
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <LL_RCC_LSI2_SetTrimming>:
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8009f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	021b      	lsls	r3, r3, #8
 8009f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <LL_RCC_MSI_Enable>:
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8009f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f9a:	f043 0301 	orr.w	r3, r3, #1
 8009f9e:	6013      	str	r3, [r2, #0]
}
 8009fa0:	bf00      	nop
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <LL_RCC_MSI_Disable>:
{
 8009faa:	b480      	push	{r7}
 8009fac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8009fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009fb8:	f023 0301 	bic.w	r3, r3, #1
 8009fbc:	6013      	str	r3, [r2, #0]
}
 8009fbe:	bf00      	nop
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <LL_RCC_MSI_IsReady>:
{
 8009fc8:	b480      	push	{r7}
 8009fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8009fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0302 	and.w	r3, r3, #2
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d101      	bne.n	8009fde <LL_RCC_MSI_IsReady+0x16>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e000      	b.n	8009fe0 <LL_RCC_MSI_IsReady+0x18>
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <LL_RCC_MSI_SetRange>:
{
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8009ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4313      	orrs	r3, r2
 800a004:	600b      	str	r3, [r1, #0]
}
 800a006:	bf00      	nop
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <LL_RCC_MSI_GetRange>:
{
 800a012:	b480      	push	{r7}
 800a014:	b083      	sub	sp, #12
 800a016:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800a018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a022:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2bb0      	cmp	r3, #176	; 0xb0
 800a028:	d901      	bls.n	800a02e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800a02a:	23b0      	movs	r3, #176	; 0xb0
 800a02c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800a02e:	687b      	ldr	r3, [r7, #4]
}
 800a030:	4618      	mov	r0, r3
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <LL_RCC_MSI_SetCalibTrimming>:
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	021b      	lsls	r3, r3, #8
 800a052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a056:	4313      	orrs	r3, r2
 800a058:	604b      	str	r3, [r1, #4]
}
 800a05a:	bf00      	nop
 800a05c:	370c      	adds	r7, #12
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <LL_RCC_SetSysClkSource>:
{
 800a066:	b480      	push	{r7}
 800a068:	b083      	sub	sp, #12
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a06e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	f023 0203 	bic.w	r2, r3, #3
 800a078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4313      	orrs	r3, r2
 800a080:	608b      	str	r3, [r1, #8]
}
 800a082:	bf00      	nop
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <LL_RCC_GetSysClkSource>:
{
 800a08e:	b480      	push	{r7}
 800a090:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f003 030c 	and.w	r3, r3, #12
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <LL_RCC_SetAHBPrescaler>:
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b083      	sub	sp, #12
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a0ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a0b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	608b      	str	r3, [r1, #8]
}
 800a0c2:	bf00      	nop
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <LL_C2_RCC_SetAHBPrescaler>:
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a0d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a0de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a0e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800a0ee:	bf00      	nop
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <LL_RCC_SetAHB4Prescaler>:
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a106:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a10a:	f023 020f 	bic.w	r2, r3, #15
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	091b      	lsrs	r3, r3, #4
 800a112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a116:	4313      	orrs	r3, r2
 800a118:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <LL_RCC_SetAPB1Prescaler>:
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a13a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4313      	orrs	r3, r2
 800a142:	608b      	str	r3, [r1, #8]
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <LL_RCC_SetAPB2Prescaler>:
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a162:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4313      	orrs	r3, r2
 800a16a:	608b      	str	r3, [r1, #8]
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <LL_RCC_GetAHBPrescaler>:
{
 800a178:	b480      	push	{r7}
 800a17a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a17c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a186:	4618      	mov	r0, r3
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <LL_C2_RCC_GetAHBPrescaler>:
{
 800a190:	b480      	push	{r7}
 800a192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800a194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a198:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a19c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <LL_RCC_GetAHB4Prescaler>:
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a1ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a1b6:	011b      	lsls	r3, r3, #4
 800a1b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <LL_RCC_GetAPB1Prescaler>:
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a1ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <LL_RCC_GetAPB2Prescaler>:
{
 800a1de:	b480      	push	{r7}
 800a1e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a1e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a1fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a208:	6013      	str	r3, [r2, #0]
}
 800a20a:	bf00      	nop
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800a214:	b480      	push	{r7}
 800a216:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a226:	6013      	str	r3, [r2, #0]
}
 800a228:	bf00      	nop
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800a232:	b480      	push	{r7}
 800a234:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a244:	d101      	bne.n	800a24a <LL_RCC_PLL_IsReady+0x18>
 800a246:	2301      	movs	r3, #1
 800a248:	e000      	b.n	800a24c <LL_RCC_PLL_IsReady+0x1a>
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a256:	b480      	push	{r7}
 800a258:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a25a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	0a1b      	lsrs	r3, r3, #8
 800a262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800a266:	4618      	mov	r0, r3
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a270:	b480      	push	{r7}
 800a272:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800a27e:	4618      	mov	r0, r3
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a288:	b480      	push	{r7}
 800a28a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a28c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800a296:	4618      	mov	r0, r3
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a2a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f003 0303 	and.w	r3, r3, #3
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a2bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ca:	d101      	bne.n	800a2d0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e000      	b.n	800a2d2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a2e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a2e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2f0:	d101      	bne.n	800a2f6 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e000      	b.n	800a2f8 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800a302:	b480      	push	{r7}
 800a304:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a30a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a30e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a316:	d101      	bne.n	800a31c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a318:	2301      	movs	r3, #1
 800a31a:	e000      	b.n	800a31e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800a328:	b480      	push	{r7}
 800a32a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a32c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a336:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a33a:	d101      	bne.n	800a340 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a33c:	2301      	movs	r3, #1
 800a33e:	e000      	b.n	800a342 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a35a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a35e:	d101      	bne.n	800a364 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a360:	2301      	movs	r3, #1
 800a362:	e000      	b.n	800a366 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a370:	b590      	push	{r4, r7, lr}
 800a372:	b08b      	sub	sp, #44	; 0x2c
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d101      	bne.n	800a382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e34b      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0320 	and.w	r3, r3, #32
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 808f 	beq.w	800a4ae <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a390:	f7ff fe7d 	bl	800a08e <LL_RCC_GetSysClkSource>
 800a394:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a396:	f7ff ff83 	bl	800a2a0 <LL_RCC_PLL_GetMainSource>
 800a39a:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d005      	beq.n	800a3ae <HAL_RCC_OscConfig+0x3e>
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	2b0c      	cmp	r3, #12
 800a3a6:	d149      	bne.n	800a43c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d146      	bne.n	800a43c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a3ae:	f7ff fe0b 	bl	8009fc8 <LL_RCC_MSI_IsReady>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d005      	beq.n	800a3c4 <HAL_RCC_OscConfig+0x54>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	69db      	ldr	r3, [r3, #28]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e32a      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a3c8:	f7ff fe23 	bl	800a012 <LL_RCC_MSI_GetRange>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	429c      	cmp	r4, r3
 800a3d0:	d914      	bls.n	800a3fc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 fd40 	bl	800ae5c <RCC_SetFlashLatencyFromMSIRange>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e319      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff fdfd 	bl	8009fea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a1b      	ldr	r3, [r3, #32]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff fe21 	bl	800a03c <LL_RCC_MSI_SetCalibTrimming>
 800a3fa:	e013      	b.n	800a424 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	4618      	mov	r0, r3
 800a402:	f7ff fdf2 	bl	8009fea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff fe16 	bl	800a03c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	4618      	mov	r0, r3
 800a416:	f000 fd21 	bl	800ae5c <RCC_SetFlashLatencyFromMSIRange>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e2fa      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800a424:	f7fa ff0c 	bl	8005240 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a428:	4bb4      	ldr	r3, [pc, #720]	; (800a6fc <HAL_RCC_OscConfig+0x38c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fa fdeb 	bl	8005008 <HAL_InitTick>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d039      	beq.n	800a4ac <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	e2ee      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	69db      	ldr	r3, [r3, #28]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d01e      	beq.n	800a482 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a444:	f7ff fda2 	bl	8009f8c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a448:	f7fb f9ec 	bl	8005824 <HAL_GetTick>
 800a44c:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800a44e:	e008      	b.n	800a462 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a450:	f7fb f9e8 	bl	8005824 <HAL_GetTick>
 800a454:	4602      	mov	r2, r0
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d901      	bls.n	800a462 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e2db      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800a462:	f7ff fdb1 	bl	8009fc8 <LL_RCC_MSI_IsReady>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d0f1      	beq.n	800a450 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a470:	4618      	mov	r0, r3
 800a472:	f7ff fdba 	bl	8009fea <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7ff fdde 	bl	800a03c <LL_RCC_MSI_SetCalibTrimming>
 800a480:	e015      	b.n	800a4ae <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a482:	f7ff fd92 	bl	8009faa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a486:	f7fb f9cd 	bl	8005824 <HAL_GetTick>
 800a48a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800a48c:	e008      	b.n	800a4a0 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a48e:	f7fb f9c9 	bl	8005824 <HAL_GetTick>
 800a492:	4602      	mov	r2, r0
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d901      	bls.n	800a4a0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e2bc      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800a4a0:	f7ff fd92 	bl	8009fc8 <LL_RCC_MSI_IsReady>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1f1      	bne.n	800a48e <HAL_RCC_OscConfig+0x11e>
 800a4aa:	e000      	b.n	800a4ae <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a4ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d05a      	beq.n	800a570 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4ba:	f7ff fde8 	bl	800a08e <LL_RCC_GetSysClkSource>
 800a4be:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a4c0:	f7ff feee 	bl	800a2a0 <LL_RCC_PLL_GetMainSource>
 800a4c4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	2b08      	cmp	r3, #8
 800a4ca:	d005      	beq.n	800a4d8 <HAL_RCC_OscConfig+0x168>
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	2b0c      	cmp	r3, #12
 800a4d0:	d10d      	bne.n	800a4ee <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2b03      	cmp	r3, #3
 800a4d6:	d10a      	bne.n	800a4ee <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4d8:	f7ff fbf8 	bl	8009ccc <LL_RCC_HSE_IsReady>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d045      	beq.n	800a56e <HAL_RCC_OscConfig+0x1fe>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d141      	bne.n	800a56e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e295      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4f6:	d102      	bne.n	800a4fe <HAL_RCC_OscConfig+0x18e>
 800a4f8:	f7ff fbca 	bl	8009c90 <LL_RCC_HSE_Enable>
 800a4fc:	e00d      	b.n	800a51a <HAL_RCC_OscConfig+0x1aa>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a506:	d104      	bne.n	800a512 <HAL_RCC_OscConfig+0x1a2>
 800a508:	f7ff fba4 	bl	8009c54 <LL_RCC_HSE_EnableBypass>
 800a50c:	f7ff fbc0 	bl	8009c90 <LL_RCC_HSE_Enable>
 800a510:	e003      	b.n	800a51a <HAL_RCC_OscConfig+0x1aa>
 800a512:	f7ff fbcc 	bl	8009cae <LL_RCC_HSE_Disable>
 800a516:	f7ff fbac 	bl	8009c72 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d012      	beq.n	800a548 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a522:	f7fb f97f 	bl	8005824 <HAL_GetTick>
 800a526:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800a528:	e008      	b.n	800a53c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a52a:	f7fb f97b 	bl	8005824 <HAL_GetTick>
 800a52e:	4602      	mov	r2, r0
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	1ad3      	subs	r3, r2, r3
 800a534:	2b64      	cmp	r3, #100	; 0x64
 800a536:	d901      	bls.n	800a53c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a538:	2303      	movs	r3, #3
 800a53a:	e26e      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800a53c:	f7ff fbc6 	bl	8009ccc <LL_RCC_HSE_IsReady>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0f1      	beq.n	800a52a <HAL_RCC_OscConfig+0x1ba>
 800a546:	e013      	b.n	800a570 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a548:	f7fb f96c 	bl	8005824 <HAL_GetTick>
 800a54c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800a54e:	e008      	b.n	800a562 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a550:	f7fb f968 	bl	8005824 <HAL_GetTick>
 800a554:	4602      	mov	r2, r0
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	2b64      	cmp	r3, #100	; 0x64
 800a55c:	d901      	bls.n	800a562 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	e25b      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800a562:	f7ff fbb3 	bl	8009ccc <LL_RCC_HSE_IsReady>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1f1      	bne.n	800a550 <HAL_RCC_OscConfig+0x1e0>
 800a56c:	e000      	b.n	800a570 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a56e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 0302 	and.w	r3, r3, #2
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d051      	beq.n	800a620 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a57c:	f7ff fd87 	bl	800a08e <LL_RCC_GetSysClkSource>
 800a580:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a582:	f7ff fe8d 	bl	800a2a0 <LL_RCC_PLL_GetMainSource>
 800a586:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	2b04      	cmp	r3, #4
 800a58c:	d005      	beq.n	800a59a <HAL_RCC_OscConfig+0x22a>
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	2b0c      	cmp	r3, #12
 800a592:	d113      	bne.n	800a5bc <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2b02      	cmp	r3, #2
 800a598:	d110      	bne.n	800a5bc <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a59a:	f7ff fbc7 	bl	8009d2c <LL_RCC_HSI_IsReady>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d005      	beq.n	800a5b0 <HAL_RCC_OscConfig+0x240>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d101      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e234      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7ff fbcb 	bl	8009d50 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5ba:	e031      	b.n	800a620 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d019      	beq.n	800a5f8 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a5c4:	f7ff fb94 	bl	8009cf0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5c8:	f7fb f92c 	bl	8005824 <HAL_GetTick>
 800a5cc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800a5ce:	e008      	b.n	800a5e2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5d0:	f7fb f928 	bl	8005824 <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d901      	bls.n	800a5e2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e21b      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800a5e2:	f7ff fba3 	bl	8009d2c <LL_RCC_HSI_IsReady>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0f1      	beq.n	800a5d0 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7ff fbad 	bl	8009d50 <LL_RCC_HSI_SetCalibTrimming>
 800a5f6:	e013      	b.n	800a620 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a5f8:	f7ff fb89 	bl	8009d0e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5fc:	f7fb f912 	bl	8005824 <HAL_GetTick>
 800a600:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800a602:	e008      	b.n	800a616 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a604:	f7fb f90e 	bl	8005824 <HAL_GetTick>
 800a608:	4602      	mov	r2, r0
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d901      	bls.n	800a616 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	e201      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800a616:	f7ff fb89 	bl	8009d2c <LL_RCC_HSI_IsReady>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1f1      	bne.n	800a604 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 0308 	and.w	r3, r3, #8
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d106      	bne.n	800a63a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 80a2 	beq.w	800a77e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d075      	beq.n	800a72e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0310 	and.w	r3, r3, #16
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d046      	beq.n	800a6dc <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800a64e:	f7ff fc40 	bl	8009ed2 <LL_RCC_LSI1_IsReady>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d113      	bne.n	800a680 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800a658:	f7ff fc19 	bl	8009e8e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a65c:	f7fb f8e2 	bl	8005824 <HAL_GetTick>
 800a660:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800a662:	e008      	b.n	800a676 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a664:	f7fb f8de 	bl	8005824 <HAL_GetTick>
 800a668:	4602      	mov	r2, r0
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d901      	bls.n	800a676 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	e1d1      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800a676:	f7ff fc2c 	bl	8009ed2 <LL_RCC_LSI1_IsReady>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0f1      	beq.n	800a664 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800a680:	f7ff fc39 	bl	8009ef6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a684:	f7fb f8ce 	bl	8005824 <HAL_GetTick>
 800a688:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800a68a:	e008      	b.n	800a69e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800a68c:	f7fb f8ca 	bl	8005824 <HAL_GetTick>
 800a690:	4602      	mov	r2, r0
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	2b03      	cmp	r3, #3
 800a698:	d901      	bls.n	800a69e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	e1bd      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800a69e:	f7ff fc4c 	bl	8009f3a <LL_RCC_LSI2_IsReady>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d0f1      	beq.n	800a68c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff fc56 	bl	8009f5e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800a6b2:	f7ff fbfd 	bl	8009eb0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b6:	f7fb f8b5 	bl	8005824 <HAL_GetTick>
 800a6ba:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800a6bc:	e008      	b.n	800a6d0 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a6be:	f7fb f8b1 	bl	8005824 <HAL_GetTick>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d901      	bls.n	800a6d0 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	e1a4      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800a6d0:	f7ff fbff 	bl	8009ed2 <LL_RCC_LSI1_IsReady>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1f1      	bne.n	800a6be <HAL_RCC_OscConfig+0x34e>
 800a6da:	e050      	b.n	800a77e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800a6dc:	f7ff fbd7 	bl	8009e8e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e0:	f7fb f8a0 	bl	8005824 <HAL_GetTick>
 800a6e4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800a6e6:	e00b      	b.n	800a700 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a6e8:	f7fb f89c 	bl	8005824 <HAL_GetTick>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d904      	bls.n	800a700 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	e18f      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
 800a6fa:	bf00      	nop
 800a6fc:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 800a700:	f7ff fbe7 	bl	8009ed2 <LL_RCC_LSI1_IsReady>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0ee      	beq.n	800a6e8 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800a70a:	f7ff fc05 	bl	8009f18 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800a70e:	e008      	b.n	800a722 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800a710:	f7fb f888 	bl	8005824 <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d901      	bls.n	800a722 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e17b      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800a722:	f7ff fc0a 	bl	8009f3a <LL_RCC_LSI2_IsReady>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1f1      	bne.n	800a710 <HAL_RCC_OscConfig+0x3a0>
 800a72c:	e027      	b.n	800a77e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800a72e:	f7ff fbf3 	bl	8009f18 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a732:	f7fb f877 	bl	8005824 <HAL_GetTick>
 800a736:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800a738:	e008      	b.n	800a74c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800a73a:	f7fb f873 	bl	8005824 <HAL_GetTick>
 800a73e:	4602      	mov	r2, r0
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	2b03      	cmp	r3, #3
 800a746:	d901      	bls.n	800a74c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800a748:	2303      	movs	r3, #3
 800a74a:	e166      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800a74c:	f7ff fbf5 	bl	8009f3a <LL_RCC_LSI2_IsReady>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1f1      	bne.n	800a73a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800a756:	f7ff fbab 	bl	8009eb0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a75a:	f7fb f863 	bl	8005824 <HAL_GetTick>
 800a75e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800a760:	e008      	b.n	800a774 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a762:	f7fb f85f 	bl	8005824 <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d901      	bls.n	800a774 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e152      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800a774:	f7ff fbad 	bl	8009ed2 <LL_RCC_LSI1_IsReady>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1f1      	bne.n	800a762 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 0304 	and.w	r3, r3, #4
 800a786:	2b00      	cmp	r3, #0
 800a788:	d05b      	beq.n	800a842 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a78a:	4ba6      	ldr	r3, [pc, #664]	; (800aa24 <HAL_RCC_OscConfig+0x6b4>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a792:	2b00      	cmp	r3, #0
 800a794:	d114      	bne.n	800a7c0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a796:	f7ff fa2d 	bl	8009bf4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a79a:	f7fb f843 	bl	8005824 <HAL_GetTick>
 800a79e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7a0:	e008      	b.n	800a7b4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7a2:	f7fb f83f 	bl	8005824 <HAL_GetTick>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d901      	bls.n	800a7b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e132      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7b4:	4b9b      	ldr	r3, [pc, #620]	; (800aa24 <HAL_RCC_OscConfig+0x6b4>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d0f0      	beq.n	800a7a2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d102      	bne.n	800a7ce <HAL_RCC_OscConfig+0x45e>
 800a7c8:	f7ff fb0b 	bl	8009de2 <LL_RCC_LSE_Enable>
 800a7cc:	e00c      	b.n	800a7e8 <HAL_RCC_OscConfig+0x478>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	2b05      	cmp	r3, #5
 800a7d4:	d104      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x470>
 800a7d6:	f7ff fb26 	bl	8009e26 <LL_RCC_LSE_EnableBypass>
 800a7da:	f7ff fb02 	bl	8009de2 <LL_RCC_LSE_Enable>
 800a7de:	e003      	b.n	800a7e8 <HAL_RCC_OscConfig+0x478>
 800a7e0:	f7ff fb10 	bl	8009e04 <LL_RCC_LSE_Disable>
 800a7e4:	f7ff fb30 	bl	8009e48 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d014      	beq.n	800a81a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7f0:	f7fb f818 	bl	8005824 <HAL_GetTick>
 800a7f4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800a7f6:	e00a      	b.n	800a80e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7f8:	f7fb f814 	bl	8005824 <HAL_GetTick>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	f241 3288 	movw	r2, #5000	; 0x1388
 800a806:	4293      	cmp	r3, r2
 800a808:	d901      	bls.n	800a80e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e105      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800a80e:	f7ff fb2c 	bl	8009e6a <LL_RCC_LSE_IsReady>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d0ef      	beq.n	800a7f8 <HAL_RCC_OscConfig+0x488>
 800a818:	e013      	b.n	800a842 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a81a:	f7fb f803 	bl	8005824 <HAL_GetTick>
 800a81e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800a820:	e00a      	b.n	800a838 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a822:	f7fa ffff 	bl	8005824 <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a830:	4293      	cmp	r3, r2
 800a832:	d901      	bls.n	800a838 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e0f0      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 800a838:	f7ff fb17 	bl	8009e6a <LL_RCC_LSE_IsReady>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1ef      	bne.n	800a822 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d02c      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a852:	2b00      	cmp	r3, #0
 800a854:	d014      	beq.n	800a880 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a856:	f7ff fa90 	bl	8009d7a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a85a:	f7fa ffe3 	bl	8005824 <HAL_GetTick>
 800a85e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800a860:	e008      	b.n	800a874 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a862:	f7fa ffdf 	bl	8005824 <HAL_GetTick>
 800a866:	4602      	mov	r2, r0
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d901      	bls.n	800a874 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800a870:	2303      	movs	r3, #3
 800a872:	e0d2      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800a874:	f7ff faa3 	bl	8009dbe <LL_RCC_HSI48_IsReady>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0f1      	beq.n	800a862 <HAL_RCC_OscConfig+0x4f2>
 800a87e:	e013      	b.n	800a8a8 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a880:	f7ff fa8c 	bl	8009d9c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a884:	f7fa ffce 	bl	8005824 <HAL_GetTick>
 800a888:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800a88a:	e008      	b.n	800a89e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a88c:	f7fa ffca 	bl	8005824 <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	2b02      	cmp	r3, #2
 800a898:	d901      	bls.n	800a89e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800a89a:	2303      	movs	r3, #3
 800a89c:	e0bd      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800a89e:	f7ff fa8e 	bl	8009dbe <LL_RCC_HSI48_IsReady>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1f1      	bne.n	800a88c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 80b3 	beq.w	800aa18 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8b2:	f7ff fbec 	bl	800a08e <LL_RCC_GetSysClkSource>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b0c      	cmp	r3, #12
 800a8ba:	d076      	beq.n	800a9aa <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	d14b      	bne.n	800a95c <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8c4:	f7ff fca6 	bl	800a214 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8c8:	f7fa ffac 	bl	8005824 <HAL_GetTick>
 800a8cc:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800a8ce:	e008      	b.n	800a8e2 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8d0:	f7fa ffa8 	bl	8005824 <HAL_GetTick>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	1ad3      	subs	r3, r2, r3
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	d901      	bls.n	800a8e2 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	e09b      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800a8e2:	f7ff fca6 	bl	800a232 <LL_RCC_PLL_IsReady>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1f1      	bne.n	800a8d0 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a8ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8f0:	68da      	ldr	r2, [r3, #12]
 800a8f2:	4b4d      	ldr	r3, [pc, #308]	; (800aa28 <HAL_RCC_OscConfig+0x6b8>)
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a8fe:	4311      	orrs	r1, r2
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a904:	0212      	lsls	r2, r2, #8
 800a906:	4311      	orrs	r1, r2
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a90c:	4311      	orrs	r1, r2
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a912:	4311      	orrs	r1, r2
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a918:	430a      	orrs	r2, r1
 800a91a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a91e:	4313      	orrs	r3, r2
 800a920:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a922:	f7ff fc68 	bl	800a1f6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a934:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a936:	f7fa ff75 	bl	8005824 <HAL_GetTick>
 800a93a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800a93c:	e008      	b.n	800a950 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a93e:	f7fa ff71 	bl	8005824 <HAL_GetTick>
 800a942:	4602      	mov	r2, r0
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d901      	bls.n	800a950 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e064      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800a950:	f7ff fc6f 	bl	800a232 <LL_RCC_PLL_IsReady>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d0f1      	beq.n	800a93e <HAL_RCC_OscConfig+0x5ce>
 800a95a:	e05d      	b.n	800aa18 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a95c:	f7ff fc5a 	bl	800a214 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800a960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a96a:	f023 0303 	bic.w	r3, r3, #3
 800a96e:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800a970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a97a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800a97e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a982:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a984:	f7fa ff4e 	bl	8005824 <HAL_GetTick>
 800a988:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800a98a:	e008      	b.n	800a99e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a98c:	f7fa ff4a 	bl	8005824 <HAL_GetTick>
 800a990:	4602      	mov	r2, r0
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	2b02      	cmp	r3, #2
 800a998:	d901      	bls.n	800a99e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800a99a:	2303      	movs	r3, #3
 800a99c:	e03d      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800a99e:	f7ff fc48 	bl	800a232 <LL_RCC_PLL_IsReady>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1f1      	bne.n	800a98c <HAL_RCC_OscConfig+0x61c>
 800a9a8:	e036      	b.n	800aa18 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d101      	bne.n	800a9b6 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e031      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800a9b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	f003 0203 	and.w	r2, r3, #3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d123      	bne.n	800aa14 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d11c      	bne.n	800aa14 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	0a1b      	lsrs	r3, r3, #8
 800a9de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d114      	bne.n	800aa14 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d10d      	bne.n	800aa14 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d106      	bne.n	800aa14 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d001      	beq.n	800aa18 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e000      	b.n	800aa1a <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	372c      	adds	r7, #44	; 0x2c
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd90      	pop	{r4, r7, pc}
 800aa22:	bf00      	nop
 800aa24:	58000400 	.word	0x58000400
 800aa28:	11c1808c 	.word	0x11c1808c

0800aa2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e12a      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa40:	4b97      	ldr	r3, [pc, #604]	; (800aca0 <HAL_RCC_ClockConfig+0x274>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 0307 	and.w	r3, r3, #7
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d91b      	bls.n	800aa86 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa4e:	4b94      	ldr	r3, [pc, #592]	; (800aca0 <HAL_RCC_ClockConfig+0x274>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f023 0207 	bic.w	r2, r3, #7
 800aa56:	4992      	ldr	r1, [pc, #584]	; (800aca0 <HAL_RCC_ClockConfig+0x274>)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa5e:	f7fa fee1 	bl	8005824 <HAL_GetTick>
 800aa62:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa64:	e008      	b.n	800aa78 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800aa66:	f7fa fedd 	bl	8005824 <HAL_GetTick>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d901      	bls.n	800aa78 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800aa74:	2303      	movs	r3, #3
 800aa76:	e10e      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa78:	4b89      	ldr	r3, [pc, #548]	; (800aca0 <HAL_RCC_ClockConfig+0x274>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0307 	and.w	r3, r3, #7
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d1ef      	bne.n	800aa66 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 0302 	and.w	r3, r3, #2
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d016      	beq.n	800aac0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff fb05 	bl	800a0a6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800aa9c:	f7fa fec2 	bl	8005824 <HAL_GetTick>
 800aaa0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800aaa2:	e008      	b.n	800aab6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800aaa4:	f7fa febe 	bl	8005824 <HAL_GetTick>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d901      	bls.n	800aab6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800aab2:	2303      	movs	r3, #3
 800aab4:	e0ef      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800aab6:	f7ff fbff 	bl	800a2b8 <LL_RCC_IsActiveFlag_HPRE>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d0f1      	beq.n	800aaa4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0320 	and.w	r3, r3, #32
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d016      	beq.n	800aafa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff fafc 	bl	800a0ce <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800aad6:	f7fa fea5 	bl	8005824 <HAL_GetTick>
 800aada:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800aadc:	e008      	b.n	800aaf0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800aade:	f7fa fea1 	bl	8005824 <HAL_GetTick>
 800aae2:	4602      	mov	r2, r0
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d901      	bls.n	800aaf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800aaec:	2303      	movs	r3, #3
 800aaee:	e0d2      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800aaf0:	f7ff fbf4 	bl	800a2dc <LL_RCC_IsActiveFlag_C2HPRE>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0f1      	beq.n	800aade <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d016      	beq.n	800ab34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7ff faf5 	bl	800a0fa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ab10:	f7fa fe88 	bl	8005824 <HAL_GetTick>
 800ab14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ab16:	e008      	b.n	800ab2a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ab18:	f7fa fe84 	bl	8005824 <HAL_GetTick>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d901      	bls.n	800ab2a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800ab26:	2303      	movs	r3, #3
 800ab28:	e0b5      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ab2a:	f7ff fbea 	bl	800a302 <LL_RCC_IsActiveFlag_SHDHPRE>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d0f1      	beq.n	800ab18 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0304 	and.w	r3, r3, #4
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d016      	beq.n	800ab6e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff faef 	bl	800a128 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ab4a:	f7fa fe6b 	bl	8005824 <HAL_GetTick>
 800ab4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ab50:	e008      	b.n	800ab64 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ab52:	f7fa fe67 	bl	8005824 <HAL_GetTick>
 800ab56:	4602      	mov	r2, r0
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d901      	bls.n	800ab64 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e098      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ab64:	f7ff fbe0 	bl	800a328 <LL_RCC_IsActiveFlag_PPRE1>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d0f1      	beq.n	800ab52 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 0308 	and.w	r3, r3, #8
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d017      	beq.n	800abaa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7ff fae5 	bl	800a150 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ab86:	f7fa fe4d 	bl	8005824 <HAL_GetTick>
 800ab8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ab8c:	e008      	b.n	800aba0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ab8e:	f7fa fe49 	bl	8005824 <HAL_GetTick>
 800ab92:	4602      	mov	r2, r0
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d901      	bls.n	800aba0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e07a      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800aba0:	f7ff fbd4 	bl	800a34c <LL_RCC_IsActiveFlag_PPRE2>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d0f1      	beq.n	800ab8e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d043      	beq.n	800ac3e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d106      	bne.n	800abcc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800abbe:	f7ff f885 	bl	8009ccc <LL_RCC_HSE_IsReady>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d11e      	bne.n	800ac06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e064      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d106      	bne.n	800abe2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800abd4:	f7ff fb2d 	bl	800a232 <LL_RCC_PLL_IsReady>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d113      	bne.n	800ac06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e059      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d106      	bne.n	800abf8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800abea:	f7ff f9ed 	bl	8009fc8 <LL_RCC_MSI_IsReady>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d108      	bne.n	800ac06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e04e      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800abf8:	f7ff f898 	bl	8009d2c <LL_RCC_HSI_IsReady>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e047      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff fa2b 	bl	800a066 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac10:	f7fa fe08 	bl	8005824 <HAL_GetTick>
 800ac14:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac16:	e00a      	b.n	800ac2e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac18:	f7fa fe04 	bl	8005824 <HAL_GetTick>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d901      	bls.n	800ac2e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e033      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac2e:	f7ff fa2e 	bl	800a08e <LL_RCC_GetSysClkSource>
 800ac32:	4602      	mov	r2, r0
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d1ec      	bne.n	800ac18 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac3e:	4b18      	ldr	r3, [pc, #96]	; (800aca0 <HAL_RCC_ClockConfig+0x274>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 0307 	and.w	r3, r3, #7
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d21b      	bcs.n	800ac84 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac4c:	4b14      	ldr	r3, [pc, #80]	; (800aca0 <HAL_RCC_ClockConfig+0x274>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f023 0207 	bic.w	r2, r3, #7
 800ac54:	4912      	ldr	r1, [pc, #72]	; (800aca0 <HAL_RCC_ClockConfig+0x274>)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac5c:	f7fa fde2 	bl	8005824 <HAL_GetTick>
 800ac60:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac62:	e008      	b.n	800ac76 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ac64:	f7fa fdde 	bl	8005824 <HAL_GetTick>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d901      	bls.n	800ac76 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e00f      	b.n	800ac96 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac76:	4b0a      	ldr	r3, [pc, #40]	; (800aca0 <HAL_RCC_ClockConfig+0x274>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f003 0307 	and.w	r3, r3, #7
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d1ef      	bne.n	800ac64 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800ac84:	f7fa fadc 	bl	8005240 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800ac88:	f7fa fdd8 	bl	800583c <HAL_GetTickPrio>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fa f9ba 	bl	8005008 <HAL_InitTick>
 800ac94:	4603      	mov	r3, r0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	58004000 	.word	0x58004000

0800aca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aca4:	b590      	push	{r4, r7, lr}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acaa:	f7ff f9f0 	bl	800a08e <LL_RCC_GetSysClkSource>
 800acae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10a      	bne.n	800accc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800acb6:	f7ff f9ac 	bl	800a012 <LL_RCC_MSI_GetRange>
 800acba:	4603      	mov	r3, r0
 800acbc:	091b      	lsrs	r3, r3, #4
 800acbe:	f003 030f 	and.w	r3, r3, #15
 800acc2:	4a2a      	ldr	r2, [pc, #168]	; (800ad6c <HAL_RCC_GetSysClockFreq+0xc8>)
 800acc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acc8:	60fb      	str	r3, [r7, #12]
 800acca:	e04a      	b.n	800ad62 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b04      	cmp	r3, #4
 800acd0:	d102      	bne.n	800acd8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800acd2:	4b27      	ldr	r3, [pc, #156]	; (800ad70 <HAL_RCC_GetSysClockFreq+0xcc>)
 800acd4:	60fb      	str	r3, [r7, #12]
 800acd6:	e044      	b.n	800ad62 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b08      	cmp	r3, #8
 800acdc:	d10a      	bne.n	800acf4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800acde:	f7fe ffa7 	bl	8009c30 <LL_RCC_HSE_IsEnabledDiv2>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d102      	bne.n	800acee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800ace8:	4b21      	ldr	r3, [pc, #132]	; (800ad70 <HAL_RCC_GetSysClockFreq+0xcc>)
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	e039      	b.n	800ad62 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800acee:	4b21      	ldr	r3, [pc, #132]	; (800ad74 <HAL_RCC_GetSysClockFreq+0xd0>)
 800acf0:	60fb      	str	r3, [r7, #12]
 800acf2:	e036      	b.n	800ad62 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800acf4:	f7ff fad4 	bl	800a2a0 <LL_RCC_PLL_GetMainSource>
 800acf8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d002      	beq.n	800ad06 <HAL_RCC_GetSysClockFreq+0x62>
 800ad00:	2b03      	cmp	r3, #3
 800ad02:	d003      	beq.n	800ad0c <HAL_RCC_GetSysClockFreq+0x68>
 800ad04:	e00d      	b.n	800ad22 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800ad06:	4b1a      	ldr	r3, [pc, #104]	; (800ad70 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ad08:	60bb      	str	r3, [r7, #8]
        break;
 800ad0a:	e015      	b.n	800ad38 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ad0c:	f7fe ff90 	bl	8009c30 <LL_RCC_HSE_IsEnabledDiv2>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d102      	bne.n	800ad1c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800ad16:	4b16      	ldr	r3, [pc, #88]	; (800ad70 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ad18:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800ad1a:	e00d      	b.n	800ad38 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800ad1c:	4b15      	ldr	r3, [pc, #84]	; (800ad74 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ad1e:	60bb      	str	r3, [r7, #8]
        break;
 800ad20:	e00a      	b.n	800ad38 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ad22:	f7ff f976 	bl	800a012 <LL_RCC_MSI_GetRange>
 800ad26:	4603      	mov	r3, r0
 800ad28:	091b      	lsrs	r3, r3, #4
 800ad2a:	f003 030f 	and.w	r3, r3, #15
 800ad2e:	4a0f      	ldr	r2, [pc, #60]	; (800ad6c <HAL_RCC_GetSysClockFreq+0xc8>)
 800ad30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad34:	60bb      	str	r3, [r7, #8]
        break;
 800ad36:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800ad38:	f7ff fa8d 	bl	800a256 <LL_RCC_PLL_GetN>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	fb03 f402 	mul.w	r4, r3, r2
 800ad44:	f7ff faa0 	bl	800a288 <LL_RCC_PLL_GetDivider>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	091b      	lsrs	r3, r3, #4
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	fbb4 f4f3 	udiv	r4, r4, r3
 800ad52:	f7ff fa8d 	bl	800a270 <LL_RCC_PLL_GetR>
 800ad56:	4603      	mov	r3, r0
 800ad58:	0f5b      	lsrs	r3, r3, #29
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	fbb4 f3f3 	udiv	r3, r4, r3
 800ad60:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800ad62:	68fb      	ldr	r3, [r7, #12]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd90      	pop	{r4, r7, pc}
 800ad6c:	08018108 	.word	0x08018108
 800ad70:	00f42400 	.word	0x00f42400
 800ad74:	01e84800 	.word	0x01e84800

0800ad78 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad78:	b598      	push	{r3, r4, r7, lr}
 800ad7a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ad7c:	f7ff ff92 	bl	800aca4 <HAL_RCC_GetSysClockFreq>
 800ad80:	4604      	mov	r4, r0
 800ad82:	f7ff f9f9 	bl	800a178 <LL_RCC_GetAHBPrescaler>
 800ad86:	4603      	mov	r3, r0
 800ad88:	091b      	lsrs	r3, r3, #4
 800ad8a:	f003 030f 	and.w	r3, r3, #15
 800ad8e:	4a03      	ldr	r2, [pc, #12]	; (800ad9c <HAL_RCC_GetHCLKFreq+0x24>)
 800ad90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad94:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	bd98      	pop	{r3, r4, r7, pc}
 800ad9c:	080180a8 	.word	0x080180a8

0800ada0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ada0:	b598      	push	{r3, r4, r7, lr}
 800ada2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ada4:	f7ff ffe8 	bl	800ad78 <HAL_RCC_GetHCLKFreq>
 800ada8:	4604      	mov	r4, r0
 800adaa:	f7ff fa0c 	bl	800a1c6 <LL_RCC_GetAPB1Prescaler>
 800adae:	4603      	mov	r3, r0
 800adb0:	0a1b      	lsrs	r3, r3, #8
 800adb2:	f003 0307 	and.w	r3, r3, #7
 800adb6:	4a04      	ldr	r2, [pc, #16]	; (800adc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800adb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adbc:	f003 031f 	and.w	r3, r3, #31
 800adc0:	fa24 f303 	lsr.w	r3, r4, r3
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	bd98      	pop	{r3, r4, r7, pc}
 800adc8:	080180e8 	.word	0x080180e8

0800adcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800adcc:	b598      	push	{r3, r4, r7, lr}
 800adce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800add0:	f7ff ffd2 	bl	800ad78 <HAL_RCC_GetHCLKFreq>
 800add4:	4604      	mov	r4, r0
 800add6:	f7ff fa02 	bl	800a1de <LL_RCC_GetAPB2Prescaler>
 800adda:	4603      	mov	r3, r0
 800addc:	0adb      	lsrs	r3, r3, #11
 800adde:	f003 0307 	and.w	r3, r3, #7
 800ade2:	4a04      	ldr	r2, [pc, #16]	; (800adf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ade4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ade8:	f003 031f 	and.w	r3, r3, #31
 800adec:	fa24 f303 	lsr.w	r3, r4, r3
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	bd98      	pop	{r3, r4, r7, pc}
 800adf4:	080180e8 	.word	0x080180e8

0800adf8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	226f      	movs	r2, #111	; 0x6f
 800ae06:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800ae08:	f7ff f941 	bl	800a08e <LL_RCC_GetSysClkSource>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800ae12:	f7ff f9b1 	bl	800a178 <LL_RCC_GetAHBPrescaler>
 800ae16:	4602      	mov	r2, r0
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800ae1c:	f7ff f9d3 	bl	800a1c6 <LL_RCC_GetAPB1Prescaler>
 800ae20:	4602      	mov	r2, r0
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800ae26:	f7ff f9da 	bl	800a1de <LL_RCC_GetAPB2Prescaler>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800ae30:	f7ff f9ae 	bl	800a190 <LL_C2_RCC_GetAHBPrescaler>
 800ae34:	4602      	mov	r2, r0
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800ae3a:	f7ff f9b6 	bl	800a1aa <LL_RCC_GetAHB4Prescaler>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ae44:	4b04      	ldr	r3, [pc, #16]	; (800ae58 <HAL_RCC_GetClockConfig+0x60>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 0207 	and.w	r2, r3, #7
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	601a      	str	r2, [r3, #0]
}
 800ae50:	bf00      	nop
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	58004000 	.word	0x58004000

0800ae5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ae5c:	b590      	push	{r4, r7, lr}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2bb0      	cmp	r3, #176	; 0xb0
 800ae68:	d903      	bls.n	800ae72 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ae6a:	4b15      	ldr	r3, [pc, #84]	; (800aec0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ae6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	e007      	b.n	800ae82 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	091b      	lsrs	r3, r3, #4
 800ae76:	f003 030f 	and.w	r3, r3, #15
 800ae7a:	4a11      	ldr	r2, [pc, #68]	; (800aec0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ae7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae80:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ae82:	f7ff f992 	bl	800a1aa <LL_RCC_GetAHB4Prescaler>
 800ae86:	4603      	mov	r3, r0
 800ae88:	091b      	lsrs	r3, r3, #4
 800ae8a:	f003 030f 	and.w	r3, r3, #15
 800ae8e:	4a0d      	ldr	r2, [pc, #52]	; (800aec4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800ae90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae9a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	4a0a      	ldr	r2, [pc, #40]	; (800aec8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800aea0:	fba2 2303 	umull	r2, r3, r2, r3
 800aea4:	0c9c      	lsrs	r4, r3, #18
 800aea6:	f7fe feb5 	bl	8009c14 <HAL_PWREx_GetVoltageRange>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	4619      	mov	r1, r3
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 f80c 	bl	800aecc <RCC_SetFlashLatency>
 800aeb4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd90      	pop	{r4, r7, pc}
 800aebe:	bf00      	nop
 800aec0:	08018108 	.word	0x08018108
 800aec4:	080180a8 	.word	0x080180a8
 800aec8:	431bde83 	.word	0x431bde83

0800aecc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800aecc:	b590      	push	{r4, r7, lr}
 800aece:	b093      	sub	sp, #76	; 0x4c
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800aed6:	4b39      	ldr	r3, [pc, #228]	; (800afbc <RCC_SetFlashLatency+0xf0>)
 800aed8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800aedc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aede:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800aee2:	4a37      	ldr	r2, [pc, #220]	; (800afc0 <RCC_SetFlashLatency+0xf4>)
 800aee4:	f107 031c 	add.w	r3, r7, #28
 800aee8:	ca07      	ldmia	r2, {r0, r1, r2}
 800aeea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800aeee:	4b35      	ldr	r3, [pc, #212]	; (800afc4 <RCC_SetFlashLatency+0xf8>)
 800aef0:	f107 040c 	add.w	r4, r7, #12
 800aef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800aefa:	2300      	movs	r3, #0
 800aefc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af04:	d11c      	bne.n	800af40 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800af06:	2300      	movs	r3, #0
 800af08:	643b      	str	r3, [r7, #64]	; 0x40
 800af0a:	e015      	b.n	800af38 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800af0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800af14:	4413      	add	r3, r2
 800af16:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d808      	bhi.n	800af32 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800af20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800af28:	4413      	add	r3, r2
 800af2a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800af2e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800af30:	e022      	b.n	800af78 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800af32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af34:	3301      	adds	r3, #1
 800af36:	643b      	str	r3, [r7, #64]	; 0x40
 800af38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d9e6      	bls.n	800af0c <RCC_SetFlashLatency+0x40>
 800af3e:	e01b      	b.n	800af78 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800af40:	2300      	movs	r3, #0
 800af42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af44:	e015      	b.n	800af72 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800af46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800af4e:	4413      	add	r3, r2
 800af50:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	429a      	cmp	r2, r3
 800af58:	d808      	bhi.n	800af6c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800af5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800af62:	4413      	add	r3, r2
 800af64:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800af68:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800af6a:	e005      	b.n	800af78 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800af6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af6e:	3301      	adds	r3, #1
 800af70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af74:	2b02      	cmp	r3, #2
 800af76:	d9e6      	bls.n	800af46 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800af78:	4b13      	ldr	r3, [pc, #76]	; (800afc8 <RCC_SetFlashLatency+0xfc>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f023 0207 	bic.w	r2, r3, #7
 800af80:	4911      	ldr	r1, [pc, #68]	; (800afc8 <RCC_SetFlashLatency+0xfc>)
 800af82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af84:	4313      	orrs	r3, r2
 800af86:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800af88:	f7fa fc4c 	bl	8005824 <HAL_GetTick>
 800af8c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800af8e:	e008      	b.n	800afa2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800af90:	f7fa fc48 	bl	8005824 <HAL_GetTick>
 800af94:	4602      	mov	r2, r0
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d901      	bls.n	800afa2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e007      	b.n	800afb2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800afa2:	4b09      	ldr	r3, [pc, #36]	; (800afc8 <RCC_SetFlashLatency+0xfc>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 0307 	and.w	r3, r3, #7
 800afaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afac:	429a      	cmp	r2, r3
 800afae:	d1ef      	bne.n	800af90 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	374c      	adds	r7, #76	; 0x4c
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd90      	pop	{r4, r7, pc}
 800afba:	bf00      	nop
 800afbc:	08017aa0 	.word	0x08017aa0
 800afc0:	08017ab0 	.word	0x08017ab0
 800afc4:	08017abc 	.word	0x08017abc
 800afc8:	58004000 	.word	0x58004000

0800afcc <LL_RCC_LSE_IsEnabled>:
{
 800afcc:	b480      	push	{r7}
 800afce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800afd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d101      	bne.n	800afe4 <LL_RCC_LSE_IsEnabled+0x18>
 800afe0:	2301      	movs	r3, #1
 800afe2:	e000      	b.n	800afe6 <LL_RCC_LSE_IsEnabled+0x1a>
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <LL_RCC_LSE_IsReady>:
{
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800aff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800affc:	f003 0302 	and.w	r3, r3, #2
 800b000:	2b02      	cmp	r3, #2
 800b002:	d101      	bne.n	800b008 <LL_RCC_LSE_IsReady+0x18>
 800b004:	2301      	movs	r3, #1
 800b006:	e000      	b.n	800b00a <LL_RCC_LSE_IsReady+0x1a>
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <LL_RCC_SetRFWKPClockSource>:
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800b01c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b024:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4313      	orrs	r3, r2
 800b030:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <LL_RCC_SetSMPSClockSource>:
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04e:	f023 0203 	bic.w	r2, r3, #3
 800b052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4313      	orrs	r3, r2
 800b05a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <LL_RCC_SetSMPSPrescaler>:
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b076:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b07a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4313      	orrs	r3, r2
 800b082:	624b      	str	r3, [r1, #36]	; 0x24
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <LL_RCC_SetUSARTClockSource>:
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0a0:	f023 0203 	bic.w	r2, r3, #3
 800b0a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b0b0:	bf00      	nop
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <LL_RCC_SetLPUARTClockSource>:
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b0c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b0d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <LL_RCC_SetI2CClockSource>:
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b0f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	091b      	lsrs	r3, r3, #4
 800b0fc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800b100:	43db      	mvns	r3, r3
 800b102:	401a      	ands	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	011b      	lsls	r3, r3, #4
 800b108:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800b10c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b110:	4313      	orrs	r3, r2
 800b112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b116:	bf00      	nop
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <LL_RCC_SetLPTIMClockSource>:
{
 800b122:	b480      	push	{r7}
 800b124:	b083      	sub	sp, #12
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b12a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b12e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	0c1b      	lsrs	r3, r3, #16
 800b136:	041b      	lsls	r3, r3, #16
 800b138:	43db      	mvns	r3, r3
 800b13a:	401a      	ands	r2, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	041b      	lsls	r3, r3, #16
 800b140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b144:	4313      	orrs	r3, r2
 800b146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b14a:	bf00      	nop
 800b14c:	370c      	adds	r7, #12
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <LL_RCC_SetSAIClockSource>:
{
 800b156:	b480      	push	{r7}
 800b158:	b083      	sub	sp, #12
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800b15e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b166:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b16a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4313      	orrs	r3, r2
 800b172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b176:	bf00      	nop
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <LL_RCC_SetRNGClockSource>:
{
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b18a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b192:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b1a2:	bf00      	nop
 800b1a4:	370c      	adds	r7, #12
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <LL_RCC_SetCLK48ClockSource>:
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b083      	sub	sp, #12
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800b1b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b1c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b1ce:	bf00      	nop
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <LL_RCC_SetUSBClockSource>:
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b082      	sub	sp, #8
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7ff ffe3 	bl	800b1ae <LL_RCC_SetCLK48ClockSource>
}
 800b1e8:	bf00      	nop
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <LL_RCC_SetADCClockSource>:
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b1f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b200:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <LL_RCC_SetRTCClockSource>:
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b22c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4313      	orrs	r3, r2
 800b238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <LL_RCC_GetRTCClockSource>:
{
 800b248:	b480      	push	{r7}
 800b24a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b24c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b254:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800b258:	4618      	mov	r0, r3
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <LL_RCC_ForceBackupDomainReset>:
{
 800b262:	b480      	push	{r7}
 800b264:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b26e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b27a:	bf00      	nop
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <LL_RCC_ReleaseBackupDomainReset>:
{
 800b284:	b480      	push	{r7}
 800b286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b29c:	bf00      	nop
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <LL_RCC_PLLSAI1_Enable>:
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b2aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b2b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b2b8:	6013      	str	r3, [r2, #0]
}
 800b2ba:	bf00      	nop
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <LL_RCC_PLLSAI1_Disable>:
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b2c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b2d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b2d6:	6013      	str	r3, [r2, #0]
}
 800b2d8:	bf00      	nop
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <LL_RCC_PLLSAI1_IsReady>:
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b2e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2f4:	d101      	bne.n	800b2fa <LL_RCC_PLLSAI1_IsReady+0x18>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e000      	b.n	800b2fc <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b088      	sub	sp, #32
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b30e:	2300      	movs	r3, #0
 800b310:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b312:	2300      	movs	r3, #0
 800b314:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d033      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b32a:	d00c      	beq.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800b32c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b330:	d802      	bhi.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800b332:	2b00      	cmp	r3, #0
 800b334:	d010      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b336:	e017      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800b338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b33c:	d017      	beq.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0x68>
 800b33e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b342:	d016      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800b344:	e010      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b354:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b356:	e00d      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	3304      	adds	r3, #4
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 f947 	bl	800b5f0 <RCCEx_PLLSAI1_ConfigNP>
 800b362:	4603      	mov	r3, r0
 800b364:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b366:	e005      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	77fb      	strb	r3, [r7, #31]
        break;
 800b36c:	e002      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800b36e:	bf00      	nop
 800b370:	e000      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800b372:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b374:	7ffb      	ldrb	r3, [r7, #31]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d105      	bne.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b37e:	4618      	mov	r0, r3
 800b380:	f7ff fee9 	bl	800b156 <LL_RCC_SetSAIClockSource>
 800b384:	e001      	b.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b386:	7ffb      	ldrb	r3, [r7, #31]
 800b388:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b392:	2b00      	cmp	r3, #0
 800b394:	d046      	beq.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b396:	f7ff ff57 	bl	800b248 <LL_RCC_GetRTCClockSource>
 800b39a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a0:	69ba      	ldr	r2, [r7, #24]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d03c      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b3a6:	f7fe fc25 	bl	8009bf4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d105      	bne.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7ff ff31 	bl	800b21c <LL_RCC_SetRTCClockSource>
 800b3ba:	e02e      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800b3bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3c4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800b3c6:	f7ff ff4c 	bl	800b262 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800b3ca:	f7ff ff5b 	bl	800b284 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800b3dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800b3e6:	f7ff fdf1 	bl	800afcc <LL_RCC_LSE_IsEnabled>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d114      	bne.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b3f0:	f7fa fa18 	bl	8005824 <HAL_GetTick>
 800b3f4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800b3f6:	e00b      	b.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3f8:	f7fa fa14 	bl	8005824 <HAL_GetTick>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	f241 3288 	movw	r2, #5000	; 0x1388
 800b406:	4293      	cmp	r3, r2
 800b408:	d902      	bls.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	77fb      	strb	r3, [r7, #31]
              break;
 800b40e:	e004      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800b410:	f7ff fdee 	bl	800aff0 <LL_RCC_LSE_IsReady>
 800b414:	4603      	mov	r3, r0
 800b416:	2b01      	cmp	r3, #1
 800b418:	d1ee      	bne.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800b41a:	7ffb      	ldrb	r3, [r7, #31]
 800b41c:	77bb      	strb	r3, [r7, #30]
 800b41e:	e001      	b.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b420:	7ffb      	ldrb	r3, [r7, #31]
 800b422:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 0301 	and.w	r3, r3, #1
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d004      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	699b      	ldr	r3, [r3, #24]
 800b434:	4618      	mov	r0, r3
 800b436:	f7ff fe2b 	bl	800b090 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 0302 	and.w	r3, r3, #2
 800b442:	2b00      	cmp	r3, #0
 800b444:	d004      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	69db      	ldr	r3, [r3, #28]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7ff fe36 	bl	800b0bc <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0310 	and.w	r3, r3, #16
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d004      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b460:	4618      	mov	r0, r3
 800b462:	f7ff fe5e 	bl	800b122 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0320 	and.w	r3, r3, #32
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d004      	beq.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b476:	4618      	mov	r0, r3
 800b478:	f7ff fe53 	bl	800b122 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 0304 	and.w	r3, r3, #4
 800b484:	2b00      	cmp	r3, #0
 800b486:	d004      	beq.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6a1b      	ldr	r3, [r3, #32]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7ff fe2b 	bl	800b0e8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0308 	and.w	r3, r3, #8
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d004      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff fe20 	bl	800b0e8 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d022      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff fe8e 	bl	800b1da <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4c6:	d107      	bne.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800b4c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b4d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4d6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4e0:	d10b      	bne.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 f8dd 	bl	800b6a6 <RCCEx_PLLSAI1_ConfigNQ>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b4f0:	7ffb      	ldrb	r3, [r7, #31]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800b4f6:	7ffb      	ldrb	r3, [r7, #31]
 800b4f8:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b502:	2b00      	cmp	r3, #0
 800b504:	d02b      	beq.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b50e:	d008      	beq.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b518:	d003      	beq.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d105      	bne.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x228>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b526:	4618      	mov	r0, r3
 800b528:	f7ff fe2b 	bl	800b182 <LL_RCC_SetRNGClockSource>
 800b52c:	e00a      	b.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b536:	60fb      	str	r3, [r7, #12]
 800b538:	2000      	movs	r0, #0
 800b53a:	f7ff fe22 	bl	800b182 <LL_RCC_SetRNGClockSource>
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f7ff fe35 	bl	800b1ae <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b548:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800b54c:	d107      	bne.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800b54e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b55c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b566:	2b00      	cmp	r3, #0
 800b568:	d022      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff fe3e 	bl	800b1f0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b57c:	d107      	bne.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b57e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b58c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b596:	d10b      	bne.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3304      	adds	r3, #4
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 f8dd 	bl	800b75c <RCCEx_PLLSAI1_ConfigNR>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b5a6:	7ffb      	ldrb	r3, [r7, #31]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 800b5ac:	7ffb      	ldrb	r3, [r7, #31]
 800b5ae:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d004      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff fd27 	bl	800b014 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d009      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff fd46 	bl	800b068 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7ff fd2d 	bl	800b040 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800b5e6:	7fbb      	ldrb	r3, [r7, #30]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3720      	adds	r7, #32
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b5fc:	f7ff fe62 	bl	800b2c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b600:	f7fa f910 	bl	8005824 <HAL_GetTick>
 800b604:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b606:	e009      	b.n	800b61c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b608:	f7fa f90c 	bl	8005824 <HAL_GetTick>
 800b60c:	4602      	mov	r2, r0
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	2b02      	cmp	r3, #2
 800b614:	d902      	bls.n	800b61c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800b616:	2303      	movs	r3, #3
 800b618:	73fb      	strb	r3, [r7, #15]
      break;
 800b61a:	e004      	b.n	800b626 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b61c:	f7ff fe61 	bl	800b2e2 <LL_RCC_PLLSAI1_IsReady>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1f0      	bne.n	800b608 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800b626:	7bfb      	ldrb	r3, [r7, #15]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d137      	bne.n	800b69c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800b62c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	021b      	lsls	r3, r3, #8
 800b63c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b640:	4313      	orrs	r3, r2
 800b642:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800b644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b656:	4313      	orrs	r3, r2
 800b658:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800b65a:	f7ff fe24 	bl	800b2a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b65e:	f7fa f8e1 	bl	8005824 <HAL_GetTick>
 800b662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b664:	e009      	b.n	800b67a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b666:	f7fa f8dd 	bl	8005824 <HAL_GetTick>
 800b66a:	4602      	mov	r2, r0
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	2b02      	cmp	r3, #2
 800b672:	d902      	bls.n	800b67a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800b674:	2303      	movs	r3, #3
 800b676:	73fb      	strb	r3, [r7, #15]
        break;
 800b678:	e004      	b.n	800b684 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b67a:	f7ff fe32 	bl	800b2e2 <LL_RCC_PLLSAI1_IsReady>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b01      	cmp	r3, #1
 800b682:	d1f0      	bne.n	800b666 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d108      	bne.n	800b69c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800b68a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b68e:	691a      	ldr	r2, [r3, #16]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b698:	4313      	orrs	r3, r2
 800b69a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b6b2:	f7ff fe07 	bl	800b2c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b6b6:	f7fa f8b5 	bl	8005824 <HAL_GetTick>
 800b6ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b6bc:	e009      	b.n	800b6d2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b6be:	f7fa f8b1 	bl	8005824 <HAL_GetTick>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d902      	bls.n	800b6d2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d0:	e004      	b.n	800b6dc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b6d2:	f7ff fe06 	bl	800b2e2 <LL_RCC_PLLSAI1_IsReady>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1f0      	bne.n	800b6be <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d137      	bne.n	800b752 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800b6e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	021b      	lsls	r3, r3, #8
 800b6f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800b6fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b70c:	4313      	orrs	r3, r2
 800b70e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800b710:	f7ff fdc9 	bl	800b2a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b714:	f7fa f886 	bl	8005824 <HAL_GetTick>
 800b718:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b71a:	e009      	b.n	800b730 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b71c:	f7fa f882 	bl	8005824 <HAL_GetTick>
 800b720:	4602      	mov	r2, r0
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	2b02      	cmp	r3, #2
 800b728:	d902      	bls.n	800b730 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800b72a:	2303      	movs	r3, #3
 800b72c:	73fb      	strb	r3, [r7, #15]
        break;
 800b72e:	e004      	b.n	800b73a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b730:	f7ff fdd7 	bl	800b2e2 <LL_RCC_PLLSAI1_IsReady>
 800b734:	4603      	mov	r3, r0
 800b736:	2b01      	cmp	r3, #1
 800b738:	d1f0      	bne.n	800b71c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d108      	bne.n	800b752 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800b740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b744:	691a      	ldr	r2, [r3, #16]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b74e:	4313      	orrs	r3, r2
 800b750:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800b752:	7bfb      	ldrb	r3, [r7, #15]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b764:	2300      	movs	r3, #0
 800b766:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b768:	f7ff fdac 	bl	800b2c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b76c:	f7fa f85a 	bl	8005824 <HAL_GetTick>
 800b770:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b772:	e009      	b.n	800b788 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b774:	f7fa f856 	bl	8005824 <HAL_GetTick>
 800b778:	4602      	mov	r2, r0
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	1ad3      	subs	r3, r2, r3
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d902      	bls.n	800b788 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800b782:	2303      	movs	r3, #3
 800b784:	73fb      	strb	r3, [r7, #15]
      break;
 800b786:	e004      	b.n	800b792 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b788:	f7ff fdab 	bl	800b2e2 <LL_RCC_PLLSAI1_IsReady>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1f0      	bne.n	800b774 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d137      	bne.n	800b808 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800b798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	021b      	lsls	r3, r3, #8
 800b7a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800b7b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800b7c6:	f7ff fd6e 	bl	800b2a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7ca:	f7fa f82b 	bl	8005824 <HAL_GetTick>
 800b7ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b7d0:	e009      	b.n	800b7e6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b7d2:	f7fa f827 	bl	8005824 <HAL_GetTick>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d902      	bls.n	800b7e6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	73fb      	strb	r3, [r7, #15]
        break;
 800b7e4:	e004      	b.n	800b7f0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b7e6:	f7ff fd7c 	bl	800b2e2 <LL_RCC_PLLSAI1_IsReady>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d1f0      	bne.n	800b7d2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800b7f0:	7bfb      	ldrb	r3, [r7, #15]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d108      	bne.n	800b808 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800b7f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7fa:	691a      	ldr	r2, [r3, #16]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b804:	4313      	orrs	r3, r2
 800b806:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800b808:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b082      	sub	sp, #8
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	e090      	b.n	800b946 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d106      	bne.n	800b83e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7f9 fb89 	bl	8004f50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2202      	movs	r2, #2
 800b842:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	22ca      	movs	r2, #202	; 0xca
 800b84c:	625a      	str	r2, [r3, #36]	; 0x24
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2253      	movs	r2, #83	; 0x53
 800b854:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f89f 	bl	800b99a <RTC_EnterInitMode>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d009      	beq.n	800b876 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	22ff      	movs	r2, #255	; 0xff
 800b868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2204      	movs	r2, #4
 800b86e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	e067      	b.n	800b946 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	6812      	ldr	r2, [r2, #0]
 800b880:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b888:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6899      	ldr	r1, [r3, #8]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	431a      	orrs	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	431a      	orrs	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	430a      	orrs	r2, r1
 800b8a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	68d2      	ldr	r2, [r2, #12]
 800b8b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	6919      	ldr	r1, [r3, #16]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	041a      	lsls	r2, r3, #16
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	430a      	orrs	r2, r1
 800b8c4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68da      	ldr	r2, [r3, #12]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8d4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f022 0203 	bic.w	r2, r2, #3
 800b8e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	69da      	ldr	r2, [r3, #28]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	695b      	ldr	r3, [r3, #20]
 800b8f4:	431a      	orrs	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	f003 0320 	and.w	r3, r3, #32
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d113      	bne.n	800b934 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f81e 	bl	800b94e <HAL_RTC_WaitForSynchro>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00d      	beq.n	800b934 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	22ff      	movs	r2, #255	; 0xff
 800b91e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2204      	movs	r2, #4
 800b924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	e008      	b.n	800b946 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	22ff      	movs	r2, #255	; 0xff
 800b93a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800b944:	2300      	movs	r3, #0
  }
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68da      	ldr	r2, [r3, #12]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b964:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b966:	f7f9 ff5d 	bl	8005824 <HAL_GetTick>
 800b96a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b96c:	e009      	b.n	800b982 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b96e:	f7f9 ff59 	bl	8005824 <HAL_GetTick>
 800b972:	4602      	mov	r2, r0
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b97c:	d901      	bls.n	800b982 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b97e:	2303      	movs	r3, #3
 800b980:	e007      	b.n	800b992 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	f003 0320 	and.w	r3, r3, #32
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d0ee      	beq.n	800b96e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b084      	sub	sp, #16
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d119      	bne.n	800b9e4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b9ba:	f7f9 ff33 	bl	8005824 <HAL_GetTick>
 800b9be:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b9c0:	e009      	b.n	800b9d6 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800b9c2:	f7f9 ff2f 	bl	8005824 <HAL_GetTick>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b9d0:	d901      	bls.n	800b9d6 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	e007      	b.n	800b9e6 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d0ee      	beq.n	800b9c2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b082      	sub	sp, #8
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d101      	bne.n	800ba00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e01d      	b.n	800ba3c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d106      	bne.n	800ba1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7f9 fd9d 	bl	8005554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	f000 fc83 	bl	800c338 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3708      	adds	r7, #8
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	689a      	ldr	r2, [r3, #8]
 800ba5a:	4b0e      	ldr	r3, [pc, #56]	; (800ba94 <HAL_TIM_Base_Start+0x50>)
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b06      	cmp	r3, #6
 800ba64:	d00b      	beq.n	800ba7e <HAL_TIM_Base_Start+0x3a>
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba6c:	d007      	beq.n	800ba7e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f042 0201 	orr.w	r2, r2, #1
 800ba7c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	00010007 	.word	0x00010007

0800ba98 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2202      	movs	r2, #2
 800baa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6a1a      	ldr	r2, [r3, #32]
 800baae:	f241 1311 	movw	r3, #4369	; 0x1111
 800bab2:	4013      	ands	r3, r2
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10f      	bne.n	800bad8 <HAL_TIM_Base_Stop+0x40>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	6a1a      	ldr	r2, [r3, #32]
 800babe:	f240 4344 	movw	r3, #1092	; 0x444
 800bac2:	4013      	ands	r3, r2
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d107      	bne.n	800bad8 <HAL_TIM_Base_Stop+0x40>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f022 0201 	bic.w	r2, r2, #1
 800bad6:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr
	...

0800baf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	68da      	ldr	r2, [r3, #12]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f042 0201 	orr.w	r2, r2, #1
 800bb06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	689a      	ldr	r2, [r3, #8]
 800bb0e:	4b0c      	ldr	r3, [pc, #48]	; (800bb40 <HAL_TIM_Base_Start_IT+0x50>)
 800bb10:	4013      	ands	r3, r2
 800bb12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b06      	cmp	r3, #6
 800bb18:	d00b      	beq.n	800bb32 <HAL_TIM_Base_Start_IT+0x42>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb20:	d007      	beq.n	800bb32 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f042 0201 	orr.w	r2, r2, #1
 800bb30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	00010007 	.word	0x00010007

0800bb44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	e01d      	b.n	800bb92 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d106      	bne.n	800bb70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f815 	bl	800bb9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2202      	movs	r2, #2
 800bb74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	3304      	adds	r3, #4
 800bb80:	4619      	mov	r1, r3
 800bb82:	4610      	mov	r0, r2
 800bb84:	f000 fbd8 	bl	800c338 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b083      	sub	sp, #12
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bba2:	bf00      	nop
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
	...

0800bbb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 ff36 	bl	800ca34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a19      	ldr	r2, [pc, #100]	; (800bc34 <HAL_TIM_PWM_Start+0x84>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d009      	beq.n	800bbe6 <HAL_TIM_PWM_Start+0x36>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a18      	ldr	r2, [pc, #96]	; (800bc38 <HAL_TIM_PWM_Start+0x88>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d004      	beq.n	800bbe6 <HAL_TIM_PWM_Start+0x36>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a16      	ldr	r2, [pc, #88]	; (800bc3c <HAL_TIM_PWM_Start+0x8c>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d101      	bne.n	800bbea <HAL_TIM_PWM_Start+0x3a>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e000      	b.n	800bbec <HAL_TIM_PWM_Start+0x3c>
 800bbea:	2300      	movs	r3, #0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d007      	beq.n	800bc00 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bbfe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	689a      	ldr	r2, [r3, #8]
 800bc06:	4b0e      	ldr	r3, [pc, #56]	; (800bc40 <HAL_TIM_PWM_Start+0x90>)
 800bc08:	4013      	ands	r3, r2
 800bc0a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b06      	cmp	r3, #6
 800bc10:	d00b      	beq.n	800bc2a <HAL_TIM_PWM_Start+0x7a>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc18:	d007      	beq.n	800bc2a <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f042 0201 	orr.w	r2, r2, #1
 800bc28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	40012c00 	.word	0x40012c00
 800bc38:	40014400 	.word	0x40014400
 800bc3c:	40014800 	.word	0x40014800
 800bc40:	00010007 	.word	0x00010007

0800bc44 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2200      	movs	r2, #0
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f000 feec 	bl	800ca34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a25      	ldr	r2, [pc, #148]	; (800bcf8 <HAL_TIM_PWM_Stop+0xb4>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d009      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x36>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a24      	ldr	r2, [pc, #144]	; (800bcfc <HAL_TIM_PWM_Stop+0xb8>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d004      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x36>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a22      	ldr	r2, [pc, #136]	; (800bd00 <HAL_TIM_PWM_Stop+0xbc>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d101      	bne.n	800bc7e <HAL_TIM_PWM_Stop+0x3a>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e000      	b.n	800bc80 <HAL_TIM_PWM_Stop+0x3c>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d017      	beq.n	800bcb4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6a1a      	ldr	r2, [r3, #32]
 800bc8a:	f241 1311 	movw	r3, #4369	; 0x1111
 800bc8e:	4013      	ands	r3, r2
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10f      	bne.n	800bcb4 <HAL_TIM_PWM_Stop+0x70>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6a1a      	ldr	r2, [r3, #32]
 800bc9a:	f240 4344 	movw	r3, #1092	; 0x444
 800bc9e:	4013      	ands	r3, r2
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d107      	bne.n	800bcb4 <HAL_TIM_PWM_Stop+0x70>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bcb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	6a1a      	ldr	r2, [r3, #32]
 800bcba:	f241 1311 	movw	r3, #4369	; 0x1111
 800bcbe:	4013      	ands	r3, r2
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10f      	bne.n	800bce4 <HAL_TIM_PWM_Stop+0xa0>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	6a1a      	ldr	r2, [r3, #32]
 800bcca:	f240 4344 	movw	r3, #1092	; 0x444
 800bcce:	4013      	ands	r3, r2
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d107      	bne.n	800bce4 <HAL_TIM_PWM_Stop+0xa0>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f022 0201 	bic.w	r2, r2, #1
 800bce2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2201      	movs	r2, #1
 800bce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	40012c00 	.word	0x40012c00
 800bcfc:	40014400 	.word	0x40014400
 800bd00:	40014800 	.word	0x40014800

0800bd04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	f003 0302 	and.w	r3, r3, #2
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d122      	bne.n	800bd60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	f003 0302 	and.w	r3, r3, #2
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	d11b      	bne.n	800bd60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f06f 0202 	mvn.w	r2, #2
 800bd30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	699b      	ldr	r3, [r3, #24]
 800bd3e:	f003 0303 	and.w	r3, r3, #3
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d003      	beq.n	800bd4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fad7 	bl	800c2fa <HAL_TIM_IC_CaptureCallback>
 800bd4c:	e005      	b.n	800bd5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fac9 	bl	800c2e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fada 	bl	800c30e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	f003 0304 	and.w	r3, r3, #4
 800bd6a:	2b04      	cmp	r3, #4
 800bd6c:	d122      	bne.n	800bdb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	f003 0304 	and.w	r3, r3, #4
 800bd78:	2b04      	cmp	r3, #4
 800bd7a:	d11b      	bne.n	800bdb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f06f 0204 	mvn.w	r2, #4
 800bd84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2202      	movs	r2, #2
 800bd8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	699b      	ldr	r3, [r3, #24]
 800bd92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d003      	beq.n	800bda2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 faad 	bl	800c2fa <HAL_TIM_IC_CaptureCallback>
 800bda0:	e005      	b.n	800bdae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 fa9f 	bl	800c2e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fab0 	bl	800c30e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	f003 0308 	and.w	r3, r3, #8
 800bdbe:	2b08      	cmp	r3, #8
 800bdc0:	d122      	bne.n	800be08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	f003 0308 	and.w	r3, r3, #8
 800bdcc:	2b08      	cmp	r3, #8
 800bdce:	d11b      	bne.n	800be08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f06f 0208 	mvn.w	r2, #8
 800bdd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2204      	movs	r2, #4
 800bdde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	69db      	ldr	r3, [r3, #28]
 800bde6:	f003 0303 	and.w	r3, r3, #3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d003      	beq.n	800bdf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fa83 	bl	800c2fa <HAL_TIM_IC_CaptureCallback>
 800bdf4:	e005      	b.n	800be02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 fa75 	bl	800c2e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fa86 	bl	800c30e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	f003 0310 	and.w	r3, r3, #16
 800be12:	2b10      	cmp	r3, #16
 800be14:	d122      	bne.n	800be5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	f003 0310 	and.w	r3, r3, #16
 800be20:	2b10      	cmp	r3, #16
 800be22:	d11b      	bne.n	800be5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f06f 0210 	mvn.w	r2, #16
 800be2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2208      	movs	r2, #8
 800be32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	69db      	ldr	r3, [r3, #28]
 800be3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d003      	beq.n	800be4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fa59 	bl	800c2fa <HAL_TIM_IC_CaptureCallback>
 800be48:	e005      	b.n	800be56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fa4b 	bl	800c2e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fa5c 	bl	800c30e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	f003 0301 	and.w	r3, r3, #1
 800be66:	2b01      	cmp	r3, #1
 800be68:	d10e      	bne.n	800be88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	2b01      	cmp	r3, #1
 800be76:	d107      	bne.n	800be88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f06f 0201 	mvn.w	r2, #1
 800be80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7f8 faae 	bl	80043e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be92:	2b80      	cmp	r3, #128	; 0x80
 800be94:	d10e      	bne.n	800beb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bea0:	2b80      	cmp	r3, #128	; 0x80
 800bea2:	d107      	bne.n	800beb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800beac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fe50 	bl	800cb54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	691b      	ldr	r3, [r3, #16]
 800beba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bec2:	d10e      	bne.n	800bee2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bece:	2b80      	cmp	r3, #128	; 0x80
 800bed0:	d107      	bne.n	800bee2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800beda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fe43 	bl	800cb68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beec:	2b40      	cmp	r3, #64	; 0x40
 800beee:	d10e      	bne.n	800bf0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800befa:	2b40      	cmp	r3, #64	; 0x40
 800befc:	d107      	bne.n	800bf0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 fa0a 	bl	800c322 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	f003 0320 	and.w	r3, r3, #32
 800bf18:	2b20      	cmp	r3, #32
 800bf1a:	d10e      	bne.n	800bf3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	f003 0320 	and.w	r3, r3, #32
 800bf26:	2b20      	cmp	r3, #32
 800bf28:	d107      	bne.n	800bf3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f06f 0220 	mvn.w	r2, #32
 800bf32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fe03 	bl	800cb40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf3a:	bf00      	nop
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d101      	bne.n	800bf5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	e105      	b.n	800c16a <HAL_TIM_PWM_ConfigChannel+0x226>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2202      	movs	r2, #2
 800bf6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b14      	cmp	r3, #20
 800bf72:	f200 80f0 	bhi.w	800c156 <HAL_TIM_PWM_ConfigChannel+0x212>
 800bf76:	a201      	add	r2, pc, #4	; (adr r2, 800bf7c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bf78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7c:	0800bfd1 	.word	0x0800bfd1
 800bf80:	0800c157 	.word	0x0800c157
 800bf84:	0800c157 	.word	0x0800c157
 800bf88:	0800c157 	.word	0x0800c157
 800bf8c:	0800c011 	.word	0x0800c011
 800bf90:	0800c157 	.word	0x0800c157
 800bf94:	0800c157 	.word	0x0800c157
 800bf98:	0800c157 	.word	0x0800c157
 800bf9c:	0800c053 	.word	0x0800c053
 800bfa0:	0800c157 	.word	0x0800c157
 800bfa4:	0800c157 	.word	0x0800c157
 800bfa8:	0800c157 	.word	0x0800c157
 800bfac:	0800c093 	.word	0x0800c093
 800bfb0:	0800c157 	.word	0x0800c157
 800bfb4:	0800c157 	.word	0x0800c157
 800bfb8:	0800c157 	.word	0x0800c157
 800bfbc:	0800c0d5 	.word	0x0800c0d5
 800bfc0:	0800c157 	.word	0x0800c157
 800bfc4:	0800c157 	.word	0x0800c157
 800bfc8:	0800c157 	.word	0x0800c157
 800bfcc:	0800c115 	.word	0x0800c115
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68b9      	ldr	r1, [r7, #8]
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f000 fa12 	bl	800c400 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	699a      	ldr	r2, [r3, #24]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f042 0208 	orr.w	r2, r2, #8
 800bfea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	699a      	ldr	r2, [r3, #24]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f022 0204 	bic.w	r2, r2, #4
 800bffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6999      	ldr	r1, [r3, #24]
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	691a      	ldr	r2, [r3, #16]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	430a      	orrs	r2, r1
 800c00c:	619a      	str	r2, [r3, #24]
      break;
 800c00e:	e0a3      	b.n	800c158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68b9      	ldr	r1, [r7, #8]
 800c016:	4618      	mov	r0, r3
 800c018:	f000 fa6e 	bl	800c4f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	699a      	ldr	r2, [r3, #24]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c02a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	699a      	ldr	r2, [r3, #24]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c03a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6999      	ldr	r1, [r3, #24]
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	021a      	lsls	r2, r3, #8
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	430a      	orrs	r2, r1
 800c04e:	619a      	str	r2, [r3, #24]
      break;
 800c050:	e082      	b.n	800c158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68b9      	ldr	r1, [r7, #8]
 800c058:	4618      	mov	r0, r3
 800c05a:	f000 fac7 	bl	800c5ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	69da      	ldr	r2, [r3, #28]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f042 0208 	orr.w	r2, r2, #8
 800c06c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	69da      	ldr	r2, [r3, #28]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f022 0204 	bic.w	r2, r2, #4
 800c07c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	69d9      	ldr	r1, [r3, #28]
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	691a      	ldr	r2, [r3, #16]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	430a      	orrs	r2, r1
 800c08e:	61da      	str	r2, [r3, #28]
      break;
 800c090:	e062      	b.n	800c158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68b9      	ldr	r1, [r7, #8]
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 fb1f 	bl	800c6dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	69da      	ldr	r2, [r3, #28]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	69da      	ldr	r2, [r3, #28]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	69d9      	ldr	r1, [r3, #28]
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	021a      	lsls	r2, r3, #8
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	430a      	orrs	r2, r1
 800c0d0:	61da      	str	r2, [r3, #28]
      break;
 800c0d2:	e041      	b.n	800c158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68b9      	ldr	r1, [r7, #8]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 fb5c 	bl	800c798 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f042 0208 	orr.w	r2, r2, #8
 800c0ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f022 0204 	bic.w	r2, r2, #4
 800c0fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	691a      	ldr	r2, [r3, #16]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	430a      	orrs	r2, r1
 800c110:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c112:	e021      	b.n	800c158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68b9      	ldr	r1, [r7, #8]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 fb94 	bl	800c848 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c12e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c13e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	021a      	lsls	r2, r3, #8
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	430a      	orrs	r2, r1
 800c152:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c154:	e000      	b.n	800c158 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800c156:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop

0800c174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c184:	2b01      	cmp	r3, #1
 800c186:	d101      	bne.n	800c18c <HAL_TIM_ConfigClockSource+0x18>
 800c188:	2302      	movs	r3, #2
 800c18a:	e0a8      	b.n	800c2de <HAL_TIM_ConfigClockSource+0x16a>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2202      	movs	r2, #2
 800c198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c1aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c1ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b40      	cmp	r3, #64	; 0x40
 800c1c6:	d067      	beq.n	800c298 <HAL_TIM_ConfigClockSource+0x124>
 800c1c8:	2b40      	cmp	r3, #64	; 0x40
 800c1ca:	d80b      	bhi.n	800c1e4 <HAL_TIM_ConfigClockSource+0x70>
 800c1cc:	2b10      	cmp	r3, #16
 800c1ce:	d073      	beq.n	800c2b8 <HAL_TIM_ConfigClockSource+0x144>
 800c1d0:	2b10      	cmp	r3, #16
 800c1d2:	d802      	bhi.n	800c1da <HAL_TIM_ConfigClockSource+0x66>
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d06f      	beq.n	800c2b8 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c1d8:	e078      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c1da:	2b20      	cmp	r3, #32
 800c1dc:	d06c      	beq.n	800c2b8 <HAL_TIM_ConfigClockSource+0x144>
 800c1de:	2b30      	cmp	r3, #48	; 0x30
 800c1e0:	d06a      	beq.n	800c2b8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800c1e2:	e073      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c1e4:	2b70      	cmp	r3, #112	; 0x70
 800c1e6:	d00d      	beq.n	800c204 <HAL_TIM_ConfigClockSource+0x90>
 800c1e8:	2b70      	cmp	r3, #112	; 0x70
 800c1ea:	d804      	bhi.n	800c1f6 <HAL_TIM_ConfigClockSource+0x82>
 800c1ec:	2b50      	cmp	r3, #80	; 0x50
 800c1ee:	d033      	beq.n	800c258 <HAL_TIM_ConfigClockSource+0xe4>
 800c1f0:	2b60      	cmp	r3, #96	; 0x60
 800c1f2:	d041      	beq.n	800c278 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800c1f4:	e06a      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c1f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1fa:	d066      	beq.n	800c2ca <HAL_TIM_ConfigClockSource+0x156>
 800c1fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c200:	d017      	beq.n	800c232 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800c202:	e063      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6818      	ldr	r0, [r3, #0]
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	6899      	ldr	r1, [r3, #8]
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	685a      	ldr	r2, [r3, #4]
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	f000 fbee 	bl	800c9f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c226:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	609a      	str	r2, [r3, #8]
      break;
 800c230:	e04c      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6818      	ldr	r0, [r3, #0]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	6899      	ldr	r1, [r3, #8]
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	f000 fbd7 	bl	800c9f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	689a      	ldr	r2, [r3, #8]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c254:	609a      	str	r2, [r3, #8]
      break;
 800c256:	e039      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6818      	ldr	r0, [r3, #0]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	6859      	ldr	r1, [r3, #4]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	461a      	mov	r2, r3
 800c266:	f000 fb49 	bl	800c8fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2150      	movs	r1, #80	; 0x50
 800c270:	4618      	mov	r0, r3
 800c272:	f000 fba2 	bl	800c9ba <TIM_ITRx_SetConfig>
      break;
 800c276:	e029      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6818      	ldr	r0, [r3, #0]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	6859      	ldr	r1, [r3, #4]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	461a      	mov	r2, r3
 800c286:	f000 fb68 	bl	800c95a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	2160      	movs	r1, #96	; 0x60
 800c290:	4618      	mov	r0, r3
 800c292:	f000 fb92 	bl	800c9ba <TIM_ITRx_SetConfig>
      break;
 800c296:	e019      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6818      	ldr	r0, [r3, #0]
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	6859      	ldr	r1, [r3, #4]
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	f000 fb29 	bl	800c8fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2140      	movs	r1, #64	; 0x40
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f000 fb82 	bl	800c9ba <TIM_ITRx_SetConfig>
      break;
 800c2b6:	e009      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	4610      	mov	r0, r2
 800c2c4:	f000 fb79 	bl	800c9ba <TIM_ITRx_SetConfig>
      break;
 800c2c8:	e000      	b.n	800c2cc <HAL_TIM_ConfigClockSource+0x158>
      break;
 800c2ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2e6:	b480      	push	{r7}
 800c2e8:	b083      	sub	sp, #12
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c2ee:	bf00      	nop
 800c2f0:	370c      	adds	r7, #12
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr

0800c2fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c2fa:	b480      	push	{r7}
 800c2fc:	b083      	sub	sp, #12
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c302:	bf00      	nop
 800c304:	370c      	adds	r7, #12
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c30e:	b480      	push	{r7}
 800c310:	b083      	sub	sp, #12
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c316:	bf00      	nop
 800c318:	370c      	adds	r7, #12
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr

0800c322 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c322:	b480      	push	{r7}
 800c324:	b083      	sub	sp, #12
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c32a:	bf00      	nop
 800c32c:	370c      	adds	r7, #12
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
	...

0800c338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	4a2a      	ldr	r2, [pc, #168]	; (800c3f4 <TIM_Base_SetConfig+0xbc>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d003      	beq.n	800c358 <TIM_Base_SetConfig+0x20>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c356:	d108      	bne.n	800c36a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c35e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	4313      	orrs	r3, r2
 800c368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	4a21      	ldr	r2, [pc, #132]	; (800c3f4 <TIM_Base_SetConfig+0xbc>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d00b      	beq.n	800c38a <TIM_Base_SetConfig+0x52>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c378:	d007      	beq.n	800c38a <TIM_Base_SetConfig+0x52>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4a1e      	ldr	r2, [pc, #120]	; (800c3f8 <TIM_Base_SetConfig+0xc0>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d003      	beq.n	800c38a <TIM_Base_SetConfig+0x52>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4a1d      	ldr	r2, [pc, #116]	; (800c3fc <TIM_Base_SetConfig+0xc4>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d108      	bne.n	800c39c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	4313      	orrs	r3, r2
 800c39a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	695b      	ldr	r3, [r3, #20]
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	689a      	ldr	r2, [r3, #8]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a0c      	ldr	r2, [pc, #48]	; (800c3f4 <TIM_Base_SetConfig+0xbc>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d007      	beq.n	800c3d8 <TIM_Base_SetConfig+0xa0>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a0b      	ldr	r2, [pc, #44]	; (800c3f8 <TIM_Base_SetConfig+0xc0>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d003      	beq.n	800c3d8 <TIM_Base_SetConfig+0xa0>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a0a      	ldr	r2, [pc, #40]	; (800c3fc <TIM_Base_SetConfig+0xc4>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d103      	bne.n	800c3e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	691a      	ldr	r2, [r3, #16]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	615a      	str	r2, [r3, #20]
}
 800c3e6:	bf00      	nop
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	40012c00 	.word	0x40012c00
 800c3f8:	40014400 	.word	0x40014400
 800c3fc:	40014800 	.word	0x40014800

0800c400 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c400:	b480      	push	{r7}
 800c402:	b087      	sub	sp, #28
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a1b      	ldr	r3, [r3, #32]
 800c40e:	f023 0201 	bic.w	r2, r3, #1
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c42e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f023 0303 	bic.w	r3, r3, #3
 800c43a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	4313      	orrs	r3, r2
 800c444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	f023 0302 	bic.w	r3, r3, #2
 800c44c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	4313      	orrs	r3, r2
 800c456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a24      	ldr	r2, [pc, #144]	; (800c4ec <TIM_OC1_SetConfig+0xec>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d007      	beq.n	800c470 <TIM_OC1_SetConfig+0x70>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a23      	ldr	r2, [pc, #140]	; (800c4f0 <TIM_OC1_SetConfig+0xf0>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d003      	beq.n	800c470 <TIM_OC1_SetConfig+0x70>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4a22      	ldr	r2, [pc, #136]	; (800c4f4 <TIM_OC1_SetConfig+0xf4>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d10c      	bne.n	800c48a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	f023 0308 	bic.w	r3, r3, #8
 800c476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	4313      	orrs	r3, r2
 800c480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	f023 0304 	bic.w	r3, r3, #4
 800c488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4a17      	ldr	r2, [pc, #92]	; (800c4ec <TIM_OC1_SetConfig+0xec>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d007      	beq.n	800c4a2 <TIM_OC1_SetConfig+0xa2>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a17      	ldr	r2, [pc, #92]	; (800c4f4 <TIM_OC1_SetConfig+0xf4>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d003      	beq.n	800c4a2 <TIM_OC1_SetConfig+0xa2>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a14      	ldr	r2, [pc, #80]	; (800c4f0 <TIM_OC1_SetConfig+0xf0>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d111      	bne.n	800c4c6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	695b      	ldr	r3, [r3, #20]
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	699b      	ldr	r3, [r3, #24]
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	693a      	ldr	r2, [r7, #16]
 800c4ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	685a      	ldr	r2, [r3, #4]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	697a      	ldr	r2, [r7, #20]
 800c4de:	621a      	str	r2, [r3, #32]
}
 800c4e0:	bf00      	nop
 800c4e2:	371c      	adds	r7, #28
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	40012c00 	.word	0x40012c00
 800c4f0:	40014800 	.word	0x40014800
 800c4f4:	40014400 	.word	0x40014400

0800c4f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b087      	sub	sp, #28
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a1b      	ldr	r3, [r3, #32]
 800c506:	f023 0210 	bic.w	r2, r3, #16
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	699b      	ldr	r3, [r3, #24]
 800c51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c52a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	021b      	lsls	r3, r3, #8
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	f023 0320 	bic.w	r3, r3, #32
 800c546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	011b      	lsls	r3, r3, #4
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	4313      	orrs	r3, r2
 800c552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a22      	ldr	r2, [pc, #136]	; (800c5e0 <TIM_OC2_SetConfig+0xe8>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d10d      	bne.n	800c578 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	011b      	lsls	r3, r3, #4
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a19      	ldr	r2, [pc, #100]	; (800c5e0 <TIM_OC2_SetConfig+0xe8>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d007      	beq.n	800c590 <TIM_OC2_SetConfig+0x98>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a18      	ldr	r2, [pc, #96]	; (800c5e4 <TIM_OC2_SetConfig+0xec>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d003      	beq.n	800c590 <TIM_OC2_SetConfig+0x98>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4a17      	ldr	r2, [pc, #92]	; (800c5e8 <TIM_OC2_SetConfig+0xf0>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d113      	bne.n	800c5b8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c59e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	695b      	ldr	r3, [r3, #20]
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	693a      	ldr	r2, [r7, #16]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	699b      	ldr	r3, [r3, #24]
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	693a      	ldr	r2, [r7, #16]
 800c5bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	685a      	ldr	r2, [r3, #4]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	697a      	ldr	r2, [r7, #20]
 800c5d0:	621a      	str	r2, [r3, #32]
}
 800c5d2:	bf00      	nop
 800c5d4:	371c      	adds	r7, #28
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	40012c00 	.word	0x40012c00
 800c5e4:	40014400 	.word	0x40014400
 800c5e8:	40014800 	.word	0x40014800

0800c5ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b087      	sub	sp, #28
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a1b      	ldr	r3, [r3, #32]
 800c5fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	69db      	ldr	r3, [r3, #28]
 800c612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c61a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c61e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f023 0303 	bic.w	r3, r3, #3
 800c626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68fa      	ldr	r2, [r7, #12]
 800c62e:	4313      	orrs	r3, r2
 800c630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	021b      	lsls	r3, r3, #8
 800c640:	697a      	ldr	r2, [r7, #20]
 800c642:	4313      	orrs	r3, r2
 800c644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a21      	ldr	r2, [pc, #132]	; (800c6d0 <TIM_OC3_SetConfig+0xe4>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d10d      	bne.n	800c66a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	021b      	lsls	r3, r3, #8
 800c65c:	697a      	ldr	r2, [r7, #20]
 800c65e:	4313      	orrs	r3, r2
 800c660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a18      	ldr	r2, [pc, #96]	; (800c6d0 <TIM_OC3_SetConfig+0xe4>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d007      	beq.n	800c682 <TIM_OC3_SetConfig+0x96>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a17      	ldr	r2, [pc, #92]	; (800c6d4 <TIM_OC3_SetConfig+0xe8>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d003      	beq.n	800c682 <TIM_OC3_SetConfig+0x96>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a16      	ldr	r2, [pc, #88]	; (800c6d8 <TIM_OC3_SetConfig+0xec>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d113      	bne.n	800c6aa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	695b      	ldr	r3, [r3, #20]
 800c696:	011b      	lsls	r3, r3, #4
 800c698:	693a      	ldr	r2, [r7, #16]
 800c69a:	4313      	orrs	r3, r2
 800c69c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	699b      	ldr	r3, [r3, #24]
 800c6a2:	011b      	lsls	r3, r3, #4
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	693a      	ldr	r2, [r7, #16]
 800c6ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	685a      	ldr	r2, [r3, #4]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	697a      	ldr	r2, [r7, #20]
 800c6c2:	621a      	str	r2, [r3, #32]
}
 800c6c4:	bf00      	nop
 800c6c6:	371c      	adds	r7, #28
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr
 800c6d0:	40012c00 	.word	0x40012c00
 800c6d4:	40014400 	.word	0x40014400
 800c6d8:	40014800 	.word	0x40014800

0800c6dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b087      	sub	sp, #28
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a1b      	ldr	r3, [r3, #32]
 800c6ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	69db      	ldr	r3, [r3, #28]
 800c702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c70a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c70e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	021b      	lsls	r3, r3, #8
 800c71e:	68fa      	ldr	r2, [r7, #12]
 800c720:	4313      	orrs	r3, r2
 800c722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c72a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	031b      	lsls	r3, r3, #12
 800c732:	693a      	ldr	r2, [r7, #16]
 800c734:	4313      	orrs	r3, r2
 800c736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4a14      	ldr	r2, [pc, #80]	; (800c78c <TIM_OC4_SetConfig+0xb0>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d007      	beq.n	800c750 <TIM_OC4_SetConfig+0x74>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a13      	ldr	r2, [pc, #76]	; (800c790 <TIM_OC4_SetConfig+0xb4>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d003      	beq.n	800c750 <TIM_OC4_SetConfig+0x74>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a12      	ldr	r2, [pc, #72]	; (800c794 <TIM_OC4_SetConfig+0xb8>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d109      	bne.n	800c764 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	695b      	ldr	r3, [r3, #20]
 800c75c:	019b      	lsls	r3, r3, #6
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	4313      	orrs	r3, r2
 800c762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	693a      	ldr	r2, [r7, #16]
 800c77c:	621a      	str	r2, [r3, #32]
}
 800c77e:	bf00      	nop
 800c780:	371c      	adds	r7, #28
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	40012c00 	.word	0x40012c00
 800c790:	40014400 	.word	0x40014400
 800c794:	40014800 	.word	0x40014800

0800c798 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c798:	b480      	push	{r7}
 800c79a:	b087      	sub	sp, #28
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a1b      	ldr	r3, [r3, #32]
 800c7a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a1b      	ldr	r3, [r3, #32]
 800c7b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c7dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	041b      	lsls	r3, r3, #16
 800c7e4:	693a      	ldr	r2, [r7, #16]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4a13      	ldr	r2, [pc, #76]	; (800c83c <TIM_OC5_SetConfig+0xa4>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d007      	beq.n	800c802 <TIM_OC5_SetConfig+0x6a>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4a12      	ldr	r2, [pc, #72]	; (800c840 <TIM_OC5_SetConfig+0xa8>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d003      	beq.n	800c802 <TIM_OC5_SetConfig+0x6a>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4a11      	ldr	r2, [pc, #68]	; (800c844 <TIM_OC5_SetConfig+0xac>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d109      	bne.n	800c816 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c808:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	021b      	lsls	r3, r3, #8
 800c810:	697a      	ldr	r2, [r7, #20]
 800c812:	4313      	orrs	r3, r2
 800c814:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	685a      	ldr	r2, [r3, #4]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	621a      	str	r2, [r3, #32]
}
 800c830:	bf00      	nop
 800c832:	371c      	adds	r7, #28
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	40012c00 	.word	0x40012c00
 800c840:	40014400 	.word	0x40014400
 800c844:	40014800 	.word	0x40014800

0800c848 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c848:	b480      	push	{r7}
 800c84a:	b087      	sub	sp, #28
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c87a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	021b      	lsls	r3, r3, #8
 800c882:	68fa      	ldr	r2, [r7, #12]
 800c884:	4313      	orrs	r3, r2
 800c886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c88e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	051b      	lsls	r3, r3, #20
 800c896:	693a      	ldr	r2, [r7, #16]
 800c898:	4313      	orrs	r3, r2
 800c89a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	4a14      	ldr	r2, [pc, #80]	; (800c8f0 <TIM_OC6_SetConfig+0xa8>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d007      	beq.n	800c8b4 <TIM_OC6_SetConfig+0x6c>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a13      	ldr	r2, [pc, #76]	; (800c8f4 <TIM_OC6_SetConfig+0xac>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d003      	beq.n	800c8b4 <TIM_OC6_SetConfig+0x6c>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4a12      	ldr	r2, [pc, #72]	; (800c8f8 <TIM_OC6_SetConfig+0xb0>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d109      	bne.n	800c8c8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c8ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	695b      	ldr	r3, [r3, #20]
 800c8c0:	029b      	lsls	r3, r3, #10
 800c8c2:	697a      	ldr	r2, [r7, #20]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	693a      	ldr	r2, [r7, #16]
 800c8e0:	621a      	str	r2, [r3, #32]
}
 800c8e2:	bf00      	nop
 800c8e4:	371c      	adds	r7, #28
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	40012c00 	.word	0x40012c00
 800c8f4:	40014400 	.word	0x40014400
 800c8f8:	40014800 	.word	0x40014800

0800c8fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b087      	sub	sp, #28
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6a1b      	ldr	r3, [r3, #32]
 800c90c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	f023 0201 	bic.w	r2, r3, #1
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	699b      	ldr	r3, [r3, #24]
 800c91e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	011b      	lsls	r3, r3, #4
 800c92c:	693a      	ldr	r2, [r7, #16]
 800c92e:	4313      	orrs	r3, r2
 800c930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	f023 030a 	bic.w	r3, r3, #10
 800c938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c93a:	697a      	ldr	r2, [r7, #20]
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	4313      	orrs	r3, r2
 800c940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	621a      	str	r2, [r3, #32]
}
 800c94e:	bf00      	nop
 800c950:	371c      	adds	r7, #28
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c95a:	b480      	push	{r7}
 800c95c:	b087      	sub	sp, #28
 800c95e:	af00      	add	r7, sp, #0
 800c960:	60f8      	str	r0, [r7, #12]
 800c962:	60b9      	str	r1, [r7, #8]
 800c964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	f023 0210 	bic.w	r2, r3, #16
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	699b      	ldr	r3, [r3, #24]
 800c976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6a1b      	ldr	r3, [r3, #32]
 800c97c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c984:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	031b      	lsls	r3, r3, #12
 800c98a:	697a      	ldr	r2, [r7, #20]
 800c98c:	4313      	orrs	r3, r2
 800c98e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c996:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	011b      	lsls	r3, r3, #4
 800c99c:	693a      	ldr	r2, [r7, #16]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	697a      	ldr	r2, [r7, #20]
 800c9a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	693a      	ldr	r2, [r7, #16]
 800c9ac:	621a      	str	r2, [r3, #32]
}
 800c9ae:	bf00      	nop
 800c9b0:	371c      	adds	r7, #28
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9ba:	b480      	push	{r7}
 800c9bc:	b085      	sub	sp, #20
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c9d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9d6:	683a      	ldr	r2, [r7, #0]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	f043 0307 	orr.w	r3, r3, #7
 800c9e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	609a      	str	r2, [r3, #8]
}
 800c9e8:	bf00      	nop
 800c9ea:	3714      	adds	r7, #20
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b087      	sub	sp, #28
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	021a      	lsls	r2, r3, #8
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	431a      	orrs	r2, r3
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	697a      	ldr	r2, [r7, #20]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	697a      	ldr	r2, [r7, #20]
 800ca26:	609a      	str	r2, [r3, #8]
}
 800ca28:	bf00      	nop
 800ca2a:	371c      	adds	r7, #28
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b087      	sub	sp, #28
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	f003 031f 	and.w	r3, r3, #31
 800ca46:	2201      	movs	r2, #1
 800ca48:	fa02 f303 	lsl.w	r3, r2, r3
 800ca4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6a1a      	ldr	r2, [r3, #32]
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	43db      	mvns	r3, r3
 800ca56:	401a      	ands	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	6a1a      	ldr	r2, [r3, #32]
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	f003 031f 	and.w	r3, r3, #31
 800ca66:	6879      	ldr	r1, [r7, #4]
 800ca68:	fa01 f303 	lsl.w	r3, r1, r3
 800ca6c:	431a      	orrs	r2, r3
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	621a      	str	r2, [r3, #32]
}
 800ca72:	bf00      	nop
 800ca74:	371c      	adds	r7, #28
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
	...

0800ca80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d101      	bne.n	800ca98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca94:	2302      	movs	r3, #2
 800ca96:	e04a      	b.n	800cb2e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2202      	movs	r2, #2
 800caa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a1f      	ldr	r2, [pc, #124]	; (800cb3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d108      	bne.n	800cad4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cac8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	4313      	orrs	r3, r2
 800cae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a12      	ldr	r2, [pc, #72]	; (800cb3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d004      	beq.n	800cb02 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb00:	d10c      	bne.n	800cb1c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3714      	adds	r7, #20
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	40012c00 	.word	0x40012c00

0800cb40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb70:	bf00      	nop
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <LL_RCC_GetUSARTClockSource>:
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800cb84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4013      	ands	r3, r2
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	370c      	adds	r7, #12
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <LL_RCC_GetLPUARTClockSource>:
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800cba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cba8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4013      	ands	r3, r2
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d101      	bne.n	800cbce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e042      	b.n	800cc54 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d106      	bne.n	800cbe6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7f8 fd85 	bl	80056f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2224      	movs	r2, #36	; 0x24
 800cbea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f022 0201 	bic.w	r2, r2, #1
 800cbfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f98a 	bl	800cf18 <UART_SetConfig>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d101      	bne.n	800cc0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e022      	b.n	800cc54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d002      	beq.n	800cc1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f001 f9e2 	bl	800dfe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	685a      	ldr	r2, [r3, #4]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	689a      	ldr	r2, [r3, #8]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f042 0201 	orr.w	r2, r2, #1
 800cc4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f001 fa69 	bl	800e124 <UART_CheckIdleState>
 800cc52:	4603      	mov	r3, r0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b085      	sub	sp, #20
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	4613      	mov	r3, r2
 800cc68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc70:	2b20      	cmp	r3, #32
 800cc72:	d168      	bne.n	800cd46 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d002      	beq.n	800cc80 <HAL_UART_Transmit_IT+0x24>
 800cc7a:	88fb      	ldrh	r3, [r7, #6]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d101      	bne.n	800cc84 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e061      	b.n	800cd48 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d101      	bne.n	800cc92 <HAL_UART_Transmit_IT+0x36>
 800cc8e:	2302      	movs	r3, #2
 800cc90:	e05a      	b.n	800cd48 <HAL_UART_Transmit_IT+0xec>
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2201      	movs	r2, #1
 800cc96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	88fa      	ldrh	r2, [r7, #6]
 800cca4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	88fa      	ldrh	r2, [r7, #6]
 800ccac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2221      	movs	r2, #33	; 0x21
 800ccc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccce:	d11c      	bne.n	800cd0a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccd8:	d107      	bne.n	800ccea <HAL_UART_Transmit_IT+0x8e>
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d103      	bne.n	800ccea <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	4a1b      	ldr	r2, [pc, #108]	; (800cd54 <HAL_UART_Transmit_IT+0xf8>)
 800cce6:	671a      	str	r2, [r3, #112]	; 0x70
 800cce8:	e002      	b.n	800ccf0 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	4a1a      	ldr	r2, [pc, #104]	; (800cd58 <HAL_UART_Transmit_IT+0xfc>)
 800ccee:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	689a      	ldr	r2, [r3, #8]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800cd06:	609a      	str	r2, [r3, #8]
 800cd08:	e01b      	b.n	800cd42 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	689b      	ldr	r3, [r3, #8]
 800cd0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd12:	d107      	bne.n	800cd24 <HAL_UART_Transmit_IT+0xc8>
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	691b      	ldr	r3, [r3, #16]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d103      	bne.n	800cd24 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	4a0f      	ldr	r2, [pc, #60]	; (800cd5c <HAL_UART_Transmit_IT+0x100>)
 800cd20:	671a      	str	r2, [r3, #112]	; 0x70
 800cd22:	e002      	b.n	800cd2a <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4a0e      	ldr	r2, [pc, #56]	; (800cd60 <HAL_UART_Transmit_IT+0x104>)
 800cd28:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd40:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	e000      	b.n	800cd48 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800cd46:	2302      	movs	r3, #2
  }
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3714      	adds	r7, #20
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr
 800cd54:	0800e441 	.word	0x0800e441
 800cd58:	0800e3a7 	.word	0x0800e3a7
 800cd5c:	0800e329 	.word	0x0800e329
 800cd60:	0800e2b5 	.word	0x0800e2b5

0800cd64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd78:	2b20      	cmp	r3, #32
 800cd7a:	f040 80bc 	bne.w	800cef6 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d002      	beq.n	800cd8a <HAL_UART_Receive_IT+0x26>
 800cd84:	88fb      	ldrh	r3, [r7, #6]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d101      	bne.n	800cd8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e0b4      	b.n	800cef8 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d101      	bne.n	800cd9c <HAL_UART_Receive_IT+0x38>
 800cd98:	2302      	movs	r3, #2
 800cd9a:	e0ad      	b.n	800cef8 <HAL_UART_Receive_IT+0x194>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	88fa      	ldrh	r2, [r7, #6]
 800cdae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	88fa      	ldrh	r2, [r7, #6]
 800cdb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdc8:	d10e      	bne.n	800cde8 <HAL_UART_Receive_IT+0x84>
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d105      	bne.n	800cdde <HAL_UART_Receive_IT+0x7a>
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cdd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cddc:	e02d      	b.n	800ce3a <HAL_UART_Receive_IT+0xd6>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	22ff      	movs	r2, #255	; 0xff
 800cde2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cde6:	e028      	b.n	800ce3a <HAL_UART_Receive_IT+0xd6>
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d10d      	bne.n	800ce0c <HAL_UART_Receive_IT+0xa8>
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	691b      	ldr	r3, [r3, #16]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d104      	bne.n	800ce02 <HAL_UART_Receive_IT+0x9e>
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	22ff      	movs	r2, #255	; 0xff
 800cdfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce00:	e01b      	b.n	800ce3a <HAL_UART_Receive_IT+0xd6>
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	227f      	movs	r2, #127	; 0x7f
 800ce06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce0a:	e016      	b.n	800ce3a <HAL_UART_Receive_IT+0xd6>
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce14:	d10d      	bne.n	800ce32 <HAL_UART_Receive_IT+0xce>
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	691b      	ldr	r3, [r3, #16]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d104      	bne.n	800ce28 <HAL_UART_Receive_IT+0xc4>
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	227f      	movs	r2, #127	; 0x7f
 800ce22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce26:	e008      	b.n	800ce3a <HAL_UART_Receive_IT+0xd6>
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	223f      	movs	r2, #63	; 0x3f
 800ce2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce30:	e003      	b.n	800ce3a <HAL_UART_Receive_IT+0xd6>
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2200      	movs	r2, #0
 800ce36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2222      	movs	r2, #34	; 0x22
 800ce46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	689a      	ldr	r2, [r3, #8]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f042 0201 	orr.w	r2, r2, #1
 800ce58:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce62:	d12a      	bne.n	800ceba <HAL_UART_Receive_IT+0x156>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce6a:	88fa      	ldrh	r2, [r7, #6]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d324      	bcc.n	800ceba <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce78:	d107      	bne.n	800ce8a <HAL_UART_Receive_IT+0x126>
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d103      	bne.n	800ce8a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	4a1f      	ldr	r2, [pc, #124]	; (800cf04 <HAL_UART_Receive_IT+0x1a0>)
 800ce86:	66da      	str	r2, [r3, #108]	; 0x6c
 800ce88:	e002      	b.n	800ce90 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	4a1e      	ldr	r2, [pc, #120]	; (800cf08 <HAL_UART_Receive_IT+0x1a4>)
 800ce8e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cea6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	689a      	ldr	r2, [r3, #8]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ceb6:	609a      	str	r2, [r3, #8]
 800ceb8:	e01b      	b.n	800cef2 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cec2:	d107      	bne.n	800ced4 <HAL_UART_Receive_IT+0x170>
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	691b      	ldr	r3, [r3, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d103      	bne.n	800ced4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	4a0f      	ldr	r2, [pc, #60]	; (800cf0c <HAL_UART_Receive_IT+0x1a8>)
 800ced0:	66da      	str	r2, [r3, #108]	; 0x6c
 800ced2:	e002      	b.n	800ceda <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	4a0e      	ldr	r2, [pc, #56]	; (800cf10 <HAL_UART_Receive_IT+0x1ac>)
 800ced8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2200      	movs	r2, #0
 800cede:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800cef0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800cef2:	2300      	movs	r3, #0
 800cef4:	e000      	b.n	800cef8 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800cef6:	2302      	movs	r3, #2
  }
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3714      	adds	r7, #20
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr
 800cf04:	0800e741 	.word	0x0800e741
 800cf08:	0800e639 	.word	0x0800e639
 800cf0c:	0800e58f 	.word	0x0800e58f
 800cf10:	0800e4e5 	.word	0x0800e4e5
 800cf14:	00000000 	.word	0x00000000

0800cf18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800cf1c:	b08a      	sub	sp, #40	; 0x28
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800cf22:	2300      	movs	r3, #0
 800cf24:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	689a      	ldr	r2, [r3, #8]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	431a      	orrs	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	695b      	ldr	r3, [r3, #20]
 800cf3c:	431a      	orrs	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	69db      	ldr	r3, [r3, #28]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	4ba4      	ldr	r3, [pc, #656]	; (800d1e8 <UART_SetConfig+0x2d0>)
 800cf58:	4013      	ands	r3, r2
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	6812      	ldr	r2, [r2, #0]
 800cf5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf60:	430b      	orrs	r3, r1
 800cf62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68da      	ldr	r2, [r3, #12]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	430a      	orrs	r2, r1
 800cf78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	699b      	ldr	r3, [r3, #24]
 800cf7e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a99      	ldr	r2, [pc, #612]	; (800d1ec <UART_SetConfig+0x2d4>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d004      	beq.n	800cf94 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6a1b      	ldr	r3, [r3, #32]
 800cf8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf90:	4313      	orrs	r3, r2
 800cf92:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800cf9e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	6812      	ldr	r2, [r2, #0]
 800cfa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfa8:	430b      	orrs	r3, r1
 800cfaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb2:	f023 010f 	bic.w	r1, r3, #15
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	430a      	orrs	r2, r1
 800cfc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a8a      	ldr	r2, [pc, #552]	; (800d1f0 <UART_SetConfig+0x2d8>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d126      	bne.n	800d01a <UART_SetConfig+0x102>
 800cfcc:	2003      	movs	r0, #3
 800cfce:	f7ff fdd5 	bl	800cb7c <LL_RCC_GetUSARTClockSource>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b03      	cmp	r3, #3
 800cfd6:	d81b      	bhi.n	800d010 <UART_SetConfig+0xf8>
 800cfd8:	a201      	add	r2, pc, #4	; (adr r2, 800cfe0 <UART_SetConfig+0xc8>)
 800cfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfde:	bf00      	nop
 800cfe0:	0800cff1 	.word	0x0800cff1
 800cfe4:	0800d001 	.word	0x0800d001
 800cfe8:	0800cff9 	.word	0x0800cff9
 800cfec:	0800d009 	.word	0x0800d009
 800cff0:	2301      	movs	r3, #1
 800cff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cff6:	e042      	b.n	800d07e <UART_SetConfig+0x166>
 800cff8:	2302      	movs	r3, #2
 800cffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cffe:	e03e      	b.n	800d07e <UART_SetConfig+0x166>
 800d000:	2304      	movs	r3, #4
 800d002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d006:	e03a      	b.n	800d07e <UART_SetConfig+0x166>
 800d008:	2308      	movs	r3, #8
 800d00a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d00e:	e036      	b.n	800d07e <UART_SetConfig+0x166>
 800d010:	2310      	movs	r3, #16
 800d012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d016:	bf00      	nop
 800d018:	e031      	b.n	800d07e <UART_SetConfig+0x166>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a73      	ldr	r2, [pc, #460]	; (800d1ec <UART_SetConfig+0x2d4>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d129      	bne.n	800d078 <UART_SetConfig+0x160>
 800d024:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800d028:	f7ff fdb8 	bl	800cb9c <LL_RCC_GetLPUARTClockSource>
 800d02c:	4603      	mov	r3, r0
 800d02e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d032:	d014      	beq.n	800d05e <UART_SetConfig+0x146>
 800d034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d038:	d802      	bhi.n	800d040 <UART_SetConfig+0x128>
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d007      	beq.n	800d04e <UART_SetConfig+0x136>
 800d03e:	e016      	b.n	800d06e <UART_SetConfig+0x156>
 800d040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d044:	d007      	beq.n	800d056 <UART_SetConfig+0x13e>
 800d046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d04a:	d00c      	beq.n	800d066 <UART_SetConfig+0x14e>
 800d04c:	e00f      	b.n	800d06e <UART_SetConfig+0x156>
 800d04e:	2300      	movs	r3, #0
 800d050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d054:	e013      	b.n	800d07e <UART_SetConfig+0x166>
 800d056:	2302      	movs	r3, #2
 800d058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d05c:	e00f      	b.n	800d07e <UART_SetConfig+0x166>
 800d05e:	2304      	movs	r3, #4
 800d060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d064:	e00b      	b.n	800d07e <UART_SetConfig+0x166>
 800d066:	2308      	movs	r3, #8
 800d068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d06c:	e007      	b.n	800d07e <UART_SetConfig+0x166>
 800d06e:	2310      	movs	r3, #16
 800d070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d074:	bf00      	nop
 800d076:	e002      	b.n	800d07e <UART_SetConfig+0x166>
 800d078:	2310      	movs	r3, #16
 800d07a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a5a      	ldr	r2, [pc, #360]	; (800d1ec <UART_SetConfig+0x2d4>)
 800d084:	4293      	cmp	r3, r2
 800d086:	f040 8428 	bne.w	800d8da <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d08a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d08e:	2b08      	cmp	r3, #8
 800d090:	f200 8171 	bhi.w	800d376 <UART_SetConfig+0x45e>
 800d094:	a201      	add	r2, pc, #4	; (adr r2, 800d09c <UART_SetConfig+0x184>)
 800d096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d09a:	bf00      	nop
 800d09c:	0800d0c1 	.word	0x0800d0c1
 800d0a0:	0800d377 	.word	0x0800d377
 800d0a4:	0800d163 	.word	0x0800d163
 800d0a8:	0800d377 	.word	0x0800d377
 800d0ac:	0800d227 	.word	0x0800d227
 800d0b0:	0800d377 	.word	0x0800d377
 800d0b4:	0800d377 	.word	0x0800d377
 800d0b8:	0800d377 	.word	0x0800d377
 800d0bc:	0800d2c9 	.word	0x0800d2c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d0c0:	f7fd fe6e 	bl	800ada0 <HAL_RCC_GetPCLK1Freq>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d044      	beq.n	800d158 <UART_SetConfig+0x240>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d03e      	beq.n	800d154 <UART_SetConfig+0x23c>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d038      	beq.n	800d150 <UART_SetConfig+0x238>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e2:	2b03      	cmp	r3, #3
 800d0e4:	d032      	beq.n	800d14c <UART_SetConfig+0x234>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ea:	2b04      	cmp	r3, #4
 800d0ec:	d02c      	beq.n	800d148 <UART_SetConfig+0x230>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f2:	2b05      	cmp	r3, #5
 800d0f4:	d026      	beq.n	800d144 <UART_SetConfig+0x22c>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fa:	2b06      	cmp	r3, #6
 800d0fc:	d020      	beq.n	800d140 <UART_SetConfig+0x228>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d102:	2b07      	cmp	r3, #7
 800d104:	d01a      	beq.n	800d13c <UART_SetConfig+0x224>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10a:	2b08      	cmp	r3, #8
 800d10c:	d014      	beq.n	800d138 <UART_SetConfig+0x220>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d112:	2b09      	cmp	r3, #9
 800d114:	d00e      	beq.n	800d134 <UART_SetConfig+0x21c>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11a:	2b0a      	cmp	r3, #10
 800d11c:	d008      	beq.n	800d130 <UART_SetConfig+0x218>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d122:	2b0b      	cmp	r3, #11
 800d124:	d102      	bne.n	800d12c <UART_SetConfig+0x214>
 800d126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d12a:	e016      	b.n	800d15a <UART_SetConfig+0x242>
 800d12c:	2301      	movs	r3, #1
 800d12e:	e014      	b.n	800d15a <UART_SetConfig+0x242>
 800d130:	2380      	movs	r3, #128	; 0x80
 800d132:	e012      	b.n	800d15a <UART_SetConfig+0x242>
 800d134:	2340      	movs	r3, #64	; 0x40
 800d136:	e010      	b.n	800d15a <UART_SetConfig+0x242>
 800d138:	2320      	movs	r3, #32
 800d13a:	e00e      	b.n	800d15a <UART_SetConfig+0x242>
 800d13c:	2310      	movs	r3, #16
 800d13e:	e00c      	b.n	800d15a <UART_SetConfig+0x242>
 800d140:	230c      	movs	r3, #12
 800d142:	e00a      	b.n	800d15a <UART_SetConfig+0x242>
 800d144:	230a      	movs	r3, #10
 800d146:	e008      	b.n	800d15a <UART_SetConfig+0x242>
 800d148:	2308      	movs	r3, #8
 800d14a:	e006      	b.n	800d15a <UART_SetConfig+0x242>
 800d14c:	2306      	movs	r3, #6
 800d14e:	e004      	b.n	800d15a <UART_SetConfig+0x242>
 800d150:	2304      	movs	r3, #4
 800d152:	e002      	b.n	800d15a <UART_SetConfig+0x242>
 800d154:	2302      	movs	r3, #2
 800d156:	e000      	b.n	800d15a <UART_SetConfig+0x242>
 800d158:	2301      	movs	r3, #1
 800d15a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d15e:	617b      	str	r3, [r7, #20]
        break;
 800d160:	e10c      	b.n	800d37c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d166:	2b00      	cmp	r3, #0
 800d168:	d05a      	beq.n	800d220 <UART_SetConfig+0x308>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d054      	beq.n	800d21c <UART_SetConfig+0x304>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d176:	2b02      	cmp	r3, #2
 800d178:	d04e      	beq.n	800d218 <UART_SetConfig+0x300>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	2b03      	cmp	r3, #3
 800d180:	d048      	beq.n	800d214 <UART_SetConfig+0x2fc>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d186:	2b04      	cmp	r3, #4
 800d188:	d02c      	beq.n	800d1e4 <UART_SetConfig+0x2cc>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18e:	2b05      	cmp	r3, #5
 800d190:	d026      	beq.n	800d1e0 <UART_SetConfig+0x2c8>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d196:	2b06      	cmp	r3, #6
 800d198:	d020      	beq.n	800d1dc <UART_SetConfig+0x2c4>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19e:	2b07      	cmp	r3, #7
 800d1a0:	d01a      	beq.n	800d1d8 <UART_SetConfig+0x2c0>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a6:	2b08      	cmp	r3, #8
 800d1a8:	d014      	beq.n	800d1d4 <UART_SetConfig+0x2bc>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ae:	2b09      	cmp	r3, #9
 800d1b0:	d00e      	beq.n	800d1d0 <UART_SetConfig+0x2b8>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b6:	2b0a      	cmp	r3, #10
 800d1b8:	d008      	beq.n	800d1cc <UART_SetConfig+0x2b4>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1be:	2b0b      	cmp	r3, #11
 800d1c0:	d102      	bne.n	800d1c8 <UART_SetConfig+0x2b0>
 800d1c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800d1c6:	e02c      	b.n	800d222 <UART_SetConfig+0x30a>
 800d1c8:	4b0a      	ldr	r3, [pc, #40]	; (800d1f4 <UART_SetConfig+0x2dc>)
 800d1ca:	e02a      	b.n	800d222 <UART_SetConfig+0x30a>
 800d1cc:	4b0a      	ldr	r3, [pc, #40]	; (800d1f8 <UART_SetConfig+0x2e0>)
 800d1ce:	e028      	b.n	800d222 <UART_SetConfig+0x30a>
 800d1d0:	4b0a      	ldr	r3, [pc, #40]	; (800d1fc <UART_SetConfig+0x2e4>)
 800d1d2:	e026      	b.n	800d222 <UART_SetConfig+0x30a>
 800d1d4:	4b0a      	ldr	r3, [pc, #40]	; (800d200 <UART_SetConfig+0x2e8>)
 800d1d6:	e024      	b.n	800d222 <UART_SetConfig+0x30a>
 800d1d8:	4b0a      	ldr	r3, [pc, #40]	; (800d204 <UART_SetConfig+0x2ec>)
 800d1da:	e022      	b.n	800d222 <UART_SetConfig+0x30a>
 800d1dc:	4b0a      	ldr	r3, [pc, #40]	; (800d208 <UART_SetConfig+0x2f0>)
 800d1de:	e020      	b.n	800d222 <UART_SetConfig+0x30a>
 800d1e0:	4b0a      	ldr	r3, [pc, #40]	; (800d20c <UART_SetConfig+0x2f4>)
 800d1e2:	e01e      	b.n	800d222 <UART_SetConfig+0x30a>
 800d1e4:	4b0a      	ldr	r3, [pc, #40]	; (800d210 <UART_SetConfig+0x2f8>)
 800d1e6:	e01c      	b.n	800d222 <UART_SetConfig+0x30a>
 800d1e8:	cfff69f3 	.word	0xcfff69f3
 800d1ec:	40008000 	.word	0x40008000
 800d1f0:	40013800 	.word	0x40013800
 800d1f4:	00f42400 	.word	0x00f42400
 800d1f8:	0001e848 	.word	0x0001e848
 800d1fc:	0003d090 	.word	0x0003d090
 800d200:	0007a120 	.word	0x0007a120
 800d204:	000f4240 	.word	0x000f4240
 800d208:	00145855 	.word	0x00145855
 800d20c:	00186a00 	.word	0x00186a00
 800d210:	001e8480 	.word	0x001e8480
 800d214:	4ba6      	ldr	r3, [pc, #664]	; (800d4b0 <UART_SetConfig+0x598>)
 800d216:	e004      	b.n	800d222 <UART_SetConfig+0x30a>
 800d218:	4ba6      	ldr	r3, [pc, #664]	; (800d4b4 <UART_SetConfig+0x59c>)
 800d21a:	e002      	b.n	800d222 <UART_SetConfig+0x30a>
 800d21c:	4ba6      	ldr	r3, [pc, #664]	; (800d4b8 <UART_SetConfig+0x5a0>)
 800d21e:	e000      	b.n	800d222 <UART_SetConfig+0x30a>
 800d220:	4ba6      	ldr	r3, [pc, #664]	; (800d4bc <UART_SetConfig+0x5a4>)
 800d222:	617b      	str	r3, [r7, #20]
        break;
 800d224:	e0aa      	b.n	800d37c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d226:	f7fd fd3d 	bl	800aca4 <HAL_RCC_GetSysClockFreq>
 800d22a:	4602      	mov	r2, r0
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d230:	2b00      	cmp	r3, #0
 800d232:	d044      	beq.n	800d2be <UART_SetConfig+0x3a6>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d03e      	beq.n	800d2ba <UART_SetConfig+0x3a2>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d240:	2b02      	cmp	r3, #2
 800d242:	d038      	beq.n	800d2b6 <UART_SetConfig+0x39e>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d248:	2b03      	cmp	r3, #3
 800d24a:	d032      	beq.n	800d2b2 <UART_SetConfig+0x39a>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d250:	2b04      	cmp	r3, #4
 800d252:	d02c      	beq.n	800d2ae <UART_SetConfig+0x396>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d258:	2b05      	cmp	r3, #5
 800d25a:	d026      	beq.n	800d2aa <UART_SetConfig+0x392>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d260:	2b06      	cmp	r3, #6
 800d262:	d020      	beq.n	800d2a6 <UART_SetConfig+0x38e>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d268:	2b07      	cmp	r3, #7
 800d26a:	d01a      	beq.n	800d2a2 <UART_SetConfig+0x38a>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d270:	2b08      	cmp	r3, #8
 800d272:	d014      	beq.n	800d29e <UART_SetConfig+0x386>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d278:	2b09      	cmp	r3, #9
 800d27a:	d00e      	beq.n	800d29a <UART_SetConfig+0x382>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d280:	2b0a      	cmp	r3, #10
 800d282:	d008      	beq.n	800d296 <UART_SetConfig+0x37e>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d288:	2b0b      	cmp	r3, #11
 800d28a:	d102      	bne.n	800d292 <UART_SetConfig+0x37a>
 800d28c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d290:	e016      	b.n	800d2c0 <UART_SetConfig+0x3a8>
 800d292:	2301      	movs	r3, #1
 800d294:	e014      	b.n	800d2c0 <UART_SetConfig+0x3a8>
 800d296:	2380      	movs	r3, #128	; 0x80
 800d298:	e012      	b.n	800d2c0 <UART_SetConfig+0x3a8>
 800d29a:	2340      	movs	r3, #64	; 0x40
 800d29c:	e010      	b.n	800d2c0 <UART_SetConfig+0x3a8>
 800d29e:	2320      	movs	r3, #32
 800d2a0:	e00e      	b.n	800d2c0 <UART_SetConfig+0x3a8>
 800d2a2:	2310      	movs	r3, #16
 800d2a4:	e00c      	b.n	800d2c0 <UART_SetConfig+0x3a8>
 800d2a6:	230c      	movs	r3, #12
 800d2a8:	e00a      	b.n	800d2c0 <UART_SetConfig+0x3a8>
 800d2aa:	230a      	movs	r3, #10
 800d2ac:	e008      	b.n	800d2c0 <UART_SetConfig+0x3a8>
 800d2ae:	2308      	movs	r3, #8
 800d2b0:	e006      	b.n	800d2c0 <UART_SetConfig+0x3a8>
 800d2b2:	2306      	movs	r3, #6
 800d2b4:	e004      	b.n	800d2c0 <UART_SetConfig+0x3a8>
 800d2b6:	2304      	movs	r3, #4
 800d2b8:	e002      	b.n	800d2c0 <UART_SetConfig+0x3a8>
 800d2ba:	2302      	movs	r3, #2
 800d2bc:	e000      	b.n	800d2c0 <UART_SetConfig+0x3a8>
 800d2be:	2301      	movs	r3, #1
 800d2c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2c4:	617b      	str	r3, [r7, #20]
        break;
 800d2c6:	e059      	b.n	800d37c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d04e      	beq.n	800d36e <UART_SetConfig+0x456>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d047      	beq.n	800d368 <UART_SetConfig+0x450>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	d040      	beq.n	800d362 <UART_SetConfig+0x44a>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d039      	beq.n	800d35c <UART_SetConfig+0x444>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ec:	2b04      	cmp	r3, #4
 800d2ee:	d032      	beq.n	800d356 <UART_SetConfig+0x43e>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f4:	2b05      	cmp	r3, #5
 800d2f6:	d02b      	beq.n	800d350 <UART_SetConfig+0x438>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fc:	2b06      	cmp	r3, #6
 800d2fe:	d024      	beq.n	800d34a <UART_SetConfig+0x432>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d304:	2b07      	cmp	r3, #7
 800d306:	d01d      	beq.n	800d344 <UART_SetConfig+0x42c>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d30c:	2b08      	cmp	r3, #8
 800d30e:	d016      	beq.n	800d33e <UART_SetConfig+0x426>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d314:	2b09      	cmp	r3, #9
 800d316:	d00f      	beq.n	800d338 <UART_SetConfig+0x420>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31c:	2b0a      	cmp	r3, #10
 800d31e:	d008      	beq.n	800d332 <UART_SetConfig+0x41a>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d324:	2b0b      	cmp	r3, #11
 800d326:	d101      	bne.n	800d32c <UART_SetConfig+0x414>
 800d328:	2380      	movs	r3, #128	; 0x80
 800d32a:	e022      	b.n	800d372 <UART_SetConfig+0x45a>
 800d32c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d330:	e01f      	b.n	800d372 <UART_SetConfig+0x45a>
 800d332:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d336:	e01c      	b.n	800d372 <UART_SetConfig+0x45a>
 800d338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d33c:	e019      	b.n	800d372 <UART_SetConfig+0x45a>
 800d33e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d342:	e016      	b.n	800d372 <UART_SetConfig+0x45a>
 800d344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d348:	e013      	b.n	800d372 <UART_SetConfig+0x45a>
 800d34a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800d34e:	e010      	b.n	800d372 <UART_SetConfig+0x45a>
 800d350:	f640 43cc 	movw	r3, #3276	; 0xccc
 800d354:	e00d      	b.n	800d372 <UART_SetConfig+0x45a>
 800d356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d35a:	e00a      	b.n	800d372 <UART_SetConfig+0x45a>
 800d35c:	f241 5355 	movw	r3, #5461	; 0x1555
 800d360:	e007      	b.n	800d372 <UART_SetConfig+0x45a>
 800d362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d366:	e004      	b.n	800d372 <UART_SetConfig+0x45a>
 800d368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d36c:	e001      	b.n	800d372 <UART_SetConfig+0x45a>
 800d36e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d372:	617b      	str	r3, [r7, #20]
        break;
 800d374:	e002      	b.n	800d37c <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 800d376:	2301      	movs	r3, #1
 800d378:	76fb      	strb	r3, [r7, #27]
        break;
 800d37a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	f000 8604 	beq.w	800df8c <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685a      	ldr	r2, [r3, #4]
 800d388:	4613      	mov	r3, r2
 800d38a:	005b      	lsls	r3, r3, #1
 800d38c:	4413      	add	r3, r2
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	429a      	cmp	r2, r3
 800d392:	d305      	bcc.n	800d3a0 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d39a:	697a      	ldr	r2, [r7, #20]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d903      	bls.n	800d3a8 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	76fb      	strb	r3, [r7, #27]
 800d3a4:	f000 bdf2 	b.w	800df8c <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 800d3a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d3ac:	2b08      	cmp	r3, #8
 800d3ae:	f200 8281 	bhi.w	800d8b4 <UART_SetConfig+0x99c>
 800d3b2:	a201      	add	r2, pc, #4	; (adr r2, 800d3b8 <UART_SetConfig+0x4a0>)
 800d3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b8:	0800d3dd 	.word	0x0800d3dd
 800d3bc:	0800d8b5 	.word	0x0800d8b5
 800d3c0:	0800d52d 	.word	0x0800d52d
 800d3c4:	0800d8b5 	.word	0x0800d8b5
 800d3c8:	0800d623 	.word	0x0800d623
 800d3cc:	0800d8b5 	.word	0x0800d8b5
 800d3d0:	0800d8b5 	.word	0x0800d8b5
 800d3d4:	0800d8b5 	.word	0x0800d8b5
 800d3d8:	0800d761 	.word	0x0800d761
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800d3dc:	f7fd fce0 	bl	800ada0 <HAL_RCC_GetPCLK1Freq>
 800d3e0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f04f 0100 	mov.w	r1, #0
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d070      	beq.n	800d4d4 <UART_SetConfig+0x5bc>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d067      	beq.n	800d4ca <UART_SetConfig+0x5b2>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fe:	2b02      	cmp	r3, #2
 800d400:	d05e      	beq.n	800d4c0 <UART_SetConfig+0x5a8>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d406:	2b03      	cmp	r3, #3
 800d408:	d04c      	beq.n	800d4a4 <UART_SetConfig+0x58c>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40e:	2b04      	cmp	r3, #4
 800d410:	d043      	beq.n	800d49a <UART_SetConfig+0x582>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d416:	2b05      	cmp	r3, #5
 800d418:	d03a      	beq.n	800d490 <UART_SetConfig+0x578>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41e:	2b06      	cmp	r3, #6
 800d420:	d031      	beq.n	800d486 <UART_SetConfig+0x56e>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d426:	2b07      	cmp	r3, #7
 800d428:	d028      	beq.n	800d47c <UART_SetConfig+0x564>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42e:	2b08      	cmp	r3, #8
 800d430:	d01f      	beq.n	800d472 <UART_SetConfig+0x55a>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d436:	2b09      	cmp	r3, #9
 800d438:	d016      	beq.n	800d468 <UART_SetConfig+0x550>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43e:	2b0a      	cmp	r3, #10
 800d440:	d00d      	beq.n	800d45e <UART_SetConfig+0x546>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d446:	2b0b      	cmp	r3, #11
 800d448:	d104      	bne.n	800d454 <UART_SetConfig+0x53c>
 800d44a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d44e:	f04f 0400 	mov.w	r4, #0
 800d452:	e043      	b.n	800d4dc <UART_SetConfig+0x5c4>
 800d454:	f04f 0301 	mov.w	r3, #1
 800d458:	f04f 0400 	mov.w	r4, #0
 800d45c:	e03e      	b.n	800d4dc <UART_SetConfig+0x5c4>
 800d45e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d462:	f04f 0400 	mov.w	r4, #0
 800d466:	e039      	b.n	800d4dc <UART_SetConfig+0x5c4>
 800d468:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d46c:	f04f 0400 	mov.w	r4, #0
 800d470:	e034      	b.n	800d4dc <UART_SetConfig+0x5c4>
 800d472:	f04f 0320 	mov.w	r3, #32
 800d476:	f04f 0400 	mov.w	r4, #0
 800d47a:	e02f      	b.n	800d4dc <UART_SetConfig+0x5c4>
 800d47c:	f04f 0310 	mov.w	r3, #16
 800d480:	f04f 0400 	mov.w	r4, #0
 800d484:	e02a      	b.n	800d4dc <UART_SetConfig+0x5c4>
 800d486:	f04f 030c 	mov.w	r3, #12
 800d48a:	f04f 0400 	mov.w	r4, #0
 800d48e:	e025      	b.n	800d4dc <UART_SetConfig+0x5c4>
 800d490:	f04f 030a 	mov.w	r3, #10
 800d494:	f04f 0400 	mov.w	r4, #0
 800d498:	e020      	b.n	800d4dc <UART_SetConfig+0x5c4>
 800d49a:	f04f 0308 	mov.w	r3, #8
 800d49e:	f04f 0400 	mov.w	r4, #0
 800d4a2:	e01b      	b.n	800d4dc <UART_SetConfig+0x5c4>
 800d4a4:	f04f 0306 	mov.w	r3, #6
 800d4a8:	f04f 0400 	mov.w	r4, #0
 800d4ac:	e016      	b.n	800d4dc <UART_SetConfig+0x5c4>
 800d4ae:	bf00      	nop
 800d4b0:	0028b0aa 	.word	0x0028b0aa
 800d4b4:	003d0900 	.word	0x003d0900
 800d4b8:	007a1200 	.word	0x007a1200
 800d4bc:	00f42400 	.word	0x00f42400
 800d4c0:	f04f 0304 	mov.w	r3, #4
 800d4c4:	f04f 0400 	mov.w	r4, #0
 800d4c8:	e008      	b.n	800d4dc <UART_SetConfig+0x5c4>
 800d4ca:	f04f 0302 	mov.w	r3, #2
 800d4ce:	f04f 0400 	mov.w	r4, #0
 800d4d2:	e003      	b.n	800d4dc <UART_SetConfig+0x5c4>
 800d4d4:	f04f 0301 	mov.w	r3, #1
 800d4d8:	f04f 0400 	mov.w	r4, #0
 800d4dc:	461a      	mov	r2, r3
 800d4de:	4623      	mov	r3, r4
 800d4e0:	f7f3 fb14 	bl	8000b0c <__aeabi_uldivmod>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	460c      	mov	r4, r1
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4622      	mov	r2, r4
 800d4ec:	f04f 0300 	mov.w	r3, #0
 800d4f0:	f04f 0400 	mov.w	r4, #0
 800d4f4:	0214      	lsls	r4, r2, #8
 800d4f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d4fa:	020b      	lsls	r3, r1, #8
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	6852      	ldr	r2, [r2, #4]
 800d500:	0852      	lsrs	r2, r2, #1
 800d502:	4611      	mov	r1, r2
 800d504:	f04f 0200 	mov.w	r2, #0
 800d508:	eb13 0b01 	adds.w	fp, r3, r1
 800d50c:	eb44 0c02 	adc.w	ip, r4, r2
 800d510:	4658      	mov	r0, fp
 800d512:	4661      	mov	r1, ip
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	f04f 0400 	mov.w	r4, #0
 800d51c:	461a      	mov	r2, r3
 800d51e:	4623      	mov	r3, r4
 800d520:	f7f3 faf4 	bl	8000b0c <__aeabi_uldivmod>
 800d524:	4603      	mov	r3, r0
 800d526:	460c      	mov	r4, r1
 800d528:	61fb      	str	r3, [r7, #28]
            break;
 800d52a:	e1c6      	b.n	800d8ba <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d530:	2b00      	cmp	r3, #0
 800d532:	d05b      	beq.n	800d5ec <UART_SetConfig+0x6d4>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d053      	beq.n	800d5e4 <UART_SetConfig+0x6cc>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d540:	2b02      	cmp	r3, #2
 800d542:	d04b      	beq.n	800d5dc <UART_SetConfig+0x6c4>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d548:	2b03      	cmp	r3, #3
 800d54a:	d043      	beq.n	800d5d4 <UART_SetConfig+0x6bc>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d550:	2b04      	cmp	r3, #4
 800d552:	d03b      	beq.n	800d5cc <UART_SetConfig+0x6b4>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d558:	2b05      	cmp	r3, #5
 800d55a:	d033      	beq.n	800d5c4 <UART_SetConfig+0x6ac>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d560:	2b06      	cmp	r3, #6
 800d562:	d02b      	beq.n	800d5bc <UART_SetConfig+0x6a4>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d568:	2b07      	cmp	r3, #7
 800d56a:	d023      	beq.n	800d5b4 <UART_SetConfig+0x69c>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d570:	2b08      	cmp	r3, #8
 800d572:	d01b      	beq.n	800d5ac <UART_SetConfig+0x694>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d578:	2b09      	cmp	r3, #9
 800d57a:	d013      	beq.n	800d5a4 <UART_SetConfig+0x68c>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d580:	2b0a      	cmp	r3, #10
 800d582:	d00b      	beq.n	800d59c <UART_SetConfig+0x684>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d588:	2b0b      	cmp	r3, #11
 800d58a:	d103      	bne.n	800d594 <UART_SetConfig+0x67c>
 800d58c:	4bae      	ldr	r3, [pc, #696]	; (800d848 <UART_SetConfig+0x930>)
 800d58e:	f04f 0400 	mov.w	r4, #0
 800d592:	e02e      	b.n	800d5f2 <UART_SetConfig+0x6da>
 800d594:	4bad      	ldr	r3, [pc, #692]	; (800d84c <UART_SetConfig+0x934>)
 800d596:	f04f 0400 	mov.w	r4, #0
 800d59a:	e02a      	b.n	800d5f2 <UART_SetConfig+0x6da>
 800d59c:	4bac      	ldr	r3, [pc, #688]	; (800d850 <UART_SetConfig+0x938>)
 800d59e:	f04f 0400 	mov.w	r4, #0
 800d5a2:	e026      	b.n	800d5f2 <UART_SetConfig+0x6da>
 800d5a4:	4bab      	ldr	r3, [pc, #684]	; (800d854 <UART_SetConfig+0x93c>)
 800d5a6:	f04f 0400 	mov.w	r4, #0
 800d5aa:	e022      	b.n	800d5f2 <UART_SetConfig+0x6da>
 800d5ac:	4baa      	ldr	r3, [pc, #680]	; (800d858 <UART_SetConfig+0x940>)
 800d5ae:	f04f 0400 	mov.w	r4, #0
 800d5b2:	e01e      	b.n	800d5f2 <UART_SetConfig+0x6da>
 800d5b4:	4ba9      	ldr	r3, [pc, #676]	; (800d85c <UART_SetConfig+0x944>)
 800d5b6:	f04f 0400 	mov.w	r4, #0
 800d5ba:	e01a      	b.n	800d5f2 <UART_SetConfig+0x6da>
 800d5bc:	a49e      	add	r4, pc, #632	; (adr r4, 800d838 <UART_SetConfig+0x920>)
 800d5be:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d5c2:	e016      	b.n	800d5f2 <UART_SetConfig+0x6da>
 800d5c4:	4ba6      	ldr	r3, [pc, #664]	; (800d860 <UART_SetConfig+0x948>)
 800d5c6:	f04f 0400 	mov.w	r4, #0
 800d5ca:	e012      	b.n	800d5f2 <UART_SetConfig+0x6da>
 800d5cc:	4ba5      	ldr	r3, [pc, #660]	; (800d864 <UART_SetConfig+0x94c>)
 800d5ce:	f04f 0400 	mov.w	r4, #0
 800d5d2:	e00e      	b.n	800d5f2 <UART_SetConfig+0x6da>
 800d5d4:	a49a      	add	r4, pc, #616	; (adr r4, 800d840 <UART_SetConfig+0x928>)
 800d5d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d5da:	e00a      	b.n	800d5f2 <UART_SetConfig+0x6da>
 800d5dc:	4ba2      	ldr	r3, [pc, #648]	; (800d868 <UART_SetConfig+0x950>)
 800d5de:	f04f 0400 	mov.w	r4, #0
 800d5e2:	e006      	b.n	800d5f2 <UART_SetConfig+0x6da>
 800d5e4:	4ba1      	ldr	r3, [pc, #644]	; (800d86c <UART_SetConfig+0x954>)
 800d5e6:	f04f 0400 	mov.w	r4, #0
 800d5ea:	e002      	b.n	800d5f2 <UART_SetConfig+0x6da>
 800d5ec:	4b97      	ldr	r3, [pc, #604]	; (800d84c <UART_SetConfig+0x934>)
 800d5ee:	f04f 0400 	mov.w	r4, #0
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	6852      	ldr	r2, [r2, #4]
 800d5f6:	0852      	lsrs	r2, r2, #1
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	f04f 0200 	mov.w	r2, #0
 800d5fe:	eb13 0b01 	adds.w	fp, r3, r1
 800d602:	eb44 0c02 	adc.w	ip, r4, r2
 800d606:	4658      	mov	r0, fp
 800d608:	4661      	mov	r1, ip
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	f04f 0400 	mov.w	r4, #0
 800d612:	461a      	mov	r2, r3
 800d614:	4623      	mov	r3, r4
 800d616:	f7f3 fa79 	bl	8000b0c <__aeabi_uldivmod>
 800d61a:	4603      	mov	r3, r0
 800d61c:	460c      	mov	r4, r1
 800d61e:	61fb      	str	r3, [r7, #28]
            break;
 800d620:	e14b      	b.n	800d8ba <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800d622:	f7fd fb3f 	bl	800aca4 <HAL_RCC_GetSysClockFreq>
 800d626:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f04f 0100 	mov.w	r1, #0
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d634:	2b00      	cmp	r3, #0
 800d636:	d067      	beq.n	800d708 <UART_SetConfig+0x7f0>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d05e      	beq.n	800d6fe <UART_SetConfig+0x7e6>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d644:	2b02      	cmp	r3, #2
 800d646:	d055      	beq.n	800d6f4 <UART_SetConfig+0x7dc>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64c:	2b03      	cmp	r3, #3
 800d64e:	d04c      	beq.n	800d6ea <UART_SetConfig+0x7d2>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d654:	2b04      	cmp	r3, #4
 800d656:	d043      	beq.n	800d6e0 <UART_SetConfig+0x7c8>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65c:	2b05      	cmp	r3, #5
 800d65e:	d03a      	beq.n	800d6d6 <UART_SetConfig+0x7be>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d664:	2b06      	cmp	r3, #6
 800d666:	d031      	beq.n	800d6cc <UART_SetConfig+0x7b4>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66c:	2b07      	cmp	r3, #7
 800d66e:	d028      	beq.n	800d6c2 <UART_SetConfig+0x7aa>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d674:	2b08      	cmp	r3, #8
 800d676:	d01f      	beq.n	800d6b8 <UART_SetConfig+0x7a0>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67c:	2b09      	cmp	r3, #9
 800d67e:	d016      	beq.n	800d6ae <UART_SetConfig+0x796>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d684:	2b0a      	cmp	r3, #10
 800d686:	d00d      	beq.n	800d6a4 <UART_SetConfig+0x78c>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68c:	2b0b      	cmp	r3, #11
 800d68e:	d104      	bne.n	800d69a <UART_SetConfig+0x782>
 800d690:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d694:	f04f 0400 	mov.w	r4, #0
 800d698:	e03a      	b.n	800d710 <UART_SetConfig+0x7f8>
 800d69a:	f04f 0301 	mov.w	r3, #1
 800d69e:	f04f 0400 	mov.w	r4, #0
 800d6a2:	e035      	b.n	800d710 <UART_SetConfig+0x7f8>
 800d6a4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d6a8:	f04f 0400 	mov.w	r4, #0
 800d6ac:	e030      	b.n	800d710 <UART_SetConfig+0x7f8>
 800d6ae:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d6b2:	f04f 0400 	mov.w	r4, #0
 800d6b6:	e02b      	b.n	800d710 <UART_SetConfig+0x7f8>
 800d6b8:	f04f 0320 	mov.w	r3, #32
 800d6bc:	f04f 0400 	mov.w	r4, #0
 800d6c0:	e026      	b.n	800d710 <UART_SetConfig+0x7f8>
 800d6c2:	f04f 0310 	mov.w	r3, #16
 800d6c6:	f04f 0400 	mov.w	r4, #0
 800d6ca:	e021      	b.n	800d710 <UART_SetConfig+0x7f8>
 800d6cc:	f04f 030c 	mov.w	r3, #12
 800d6d0:	f04f 0400 	mov.w	r4, #0
 800d6d4:	e01c      	b.n	800d710 <UART_SetConfig+0x7f8>
 800d6d6:	f04f 030a 	mov.w	r3, #10
 800d6da:	f04f 0400 	mov.w	r4, #0
 800d6de:	e017      	b.n	800d710 <UART_SetConfig+0x7f8>
 800d6e0:	f04f 0308 	mov.w	r3, #8
 800d6e4:	f04f 0400 	mov.w	r4, #0
 800d6e8:	e012      	b.n	800d710 <UART_SetConfig+0x7f8>
 800d6ea:	f04f 0306 	mov.w	r3, #6
 800d6ee:	f04f 0400 	mov.w	r4, #0
 800d6f2:	e00d      	b.n	800d710 <UART_SetConfig+0x7f8>
 800d6f4:	f04f 0304 	mov.w	r3, #4
 800d6f8:	f04f 0400 	mov.w	r4, #0
 800d6fc:	e008      	b.n	800d710 <UART_SetConfig+0x7f8>
 800d6fe:	f04f 0302 	mov.w	r3, #2
 800d702:	f04f 0400 	mov.w	r4, #0
 800d706:	e003      	b.n	800d710 <UART_SetConfig+0x7f8>
 800d708:	f04f 0301 	mov.w	r3, #1
 800d70c:	f04f 0400 	mov.w	r4, #0
 800d710:	461a      	mov	r2, r3
 800d712:	4623      	mov	r3, r4
 800d714:	f7f3 f9fa 	bl	8000b0c <__aeabi_uldivmod>
 800d718:	4603      	mov	r3, r0
 800d71a:	460c      	mov	r4, r1
 800d71c:	4619      	mov	r1, r3
 800d71e:	4622      	mov	r2, r4
 800d720:	f04f 0300 	mov.w	r3, #0
 800d724:	f04f 0400 	mov.w	r4, #0
 800d728:	0214      	lsls	r4, r2, #8
 800d72a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d72e:	020b      	lsls	r3, r1, #8
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	6852      	ldr	r2, [r2, #4]
 800d734:	0852      	lsrs	r2, r2, #1
 800d736:	4611      	mov	r1, r2
 800d738:	f04f 0200 	mov.w	r2, #0
 800d73c:	eb13 0b01 	adds.w	fp, r3, r1
 800d740:	eb44 0c02 	adc.w	ip, r4, r2
 800d744:	4658      	mov	r0, fp
 800d746:	4661      	mov	r1, ip
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	f04f 0400 	mov.w	r4, #0
 800d750:	461a      	mov	r2, r3
 800d752:	4623      	mov	r3, r4
 800d754:	f7f3 f9da 	bl	8000b0c <__aeabi_uldivmod>
 800d758:	4603      	mov	r3, r0
 800d75a:	460c      	mov	r4, r1
 800d75c:	61fb      	str	r3, [r7, #28]
            break;
 800d75e:	e0ac      	b.n	800d8ba <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d764:	2b00      	cmp	r3, #0
 800d766:	f000 8089 	beq.w	800d87c <UART_SetConfig+0x964>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d05b      	beq.n	800d82a <UART_SetConfig+0x912>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d776:	2b02      	cmp	r3, #2
 800d778:	d052      	beq.n	800d820 <UART_SetConfig+0x908>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77e:	2b03      	cmp	r3, #3
 800d780:	d04a      	beq.n	800d818 <UART_SetConfig+0x900>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d786:	2b04      	cmp	r3, #4
 800d788:	d041      	beq.n	800d80e <UART_SetConfig+0x8f6>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78e:	2b05      	cmp	r3, #5
 800d790:	d039      	beq.n	800d806 <UART_SetConfig+0x8ee>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d796:	2b06      	cmp	r3, #6
 800d798:	d031      	beq.n	800d7fe <UART_SetConfig+0x8e6>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79e:	2b07      	cmp	r3, #7
 800d7a0:	d028      	beq.n	800d7f4 <UART_SetConfig+0x8dc>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a6:	2b08      	cmp	r3, #8
 800d7a8:	d01f      	beq.n	800d7ea <UART_SetConfig+0x8d2>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ae:	2b09      	cmp	r3, #9
 800d7b0:	d016      	beq.n	800d7e0 <UART_SetConfig+0x8c8>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b6:	2b0a      	cmp	r3, #10
 800d7b8:	d00d      	beq.n	800d7d6 <UART_SetConfig+0x8be>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7be:	2b0b      	cmp	r3, #11
 800d7c0:	d104      	bne.n	800d7cc <UART_SetConfig+0x8b4>
 800d7c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7c6:	f04f 0400 	mov.w	r4, #0
 800d7ca:	e05b      	b.n	800d884 <UART_SetConfig+0x96c>
 800d7cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d7d0:	f04f 0400 	mov.w	r4, #0
 800d7d4:	e056      	b.n	800d884 <UART_SetConfig+0x96c>
 800d7d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d7da:	f04f 0400 	mov.w	r4, #0
 800d7de:	e051      	b.n	800d884 <UART_SetConfig+0x96c>
 800d7e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7e4:	f04f 0400 	mov.w	r4, #0
 800d7e8:	e04c      	b.n	800d884 <UART_SetConfig+0x96c>
 800d7ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d7ee:	f04f 0400 	mov.w	r4, #0
 800d7f2:	e047      	b.n	800d884 <UART_SetConfig+0x96c>
 800d7f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d7f8:	f04f 0400 	mov.w	r4, #0
 800d7fc:	e042      	b.n	800d884 <UART_SetConfig+0x96c>
 800d7fe:	4b1c      	ldr	r3, [pc, #112]	; (800d870 <UART_SetConfig+0x958>)
 800d800:	f04f 0400 	mov.w	r4, #0
 800d804:	e03e      	b.n	800d884 <UART_SetConfig+0x96c>
 800d806:	4b1b      	ldr	r3, [pc, #108]	; (800d874 <UART_SetConfig+0x95c>)
 800d808:	f04f 0400 	mov.w	r4, #0
 800d80c:	e03a      	b.n	800d884 <UART_SetConfig+0x96c>
 800d80e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d812:	f04f 0400 	mov.w	r4, #0
 800d816:	e035      	b.n	800d884 <UART_SetConfig+0x96c>
 800d818:	4b17      	ldr	r3, [pc, #92]	; (800d878 <UART_SetConfig+0x960>)
 800d81a:	f04f 0400 	mov.w	r4, #0
 800d81e:	e031      	b.n	800d884 <UART_SetConfig+0x96c>
 800d820:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d824:	f04f 0400 	mov.w	r4, #0
 800d828:	e02c      	b.n	800d884 <UART_SetConfig+0x96c>
 800d82a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d82e:	f04f 0400 	mov.w	r4, #0
 800d832:	e027      	b.n	800d884 <UART_SetConfig+0x96c>
 800d834:	f3af 8000 	nop.w
 800d838:	14585500 	.word	0x14585500
 800d83c:	00000000 	.word	0x00000000
 800d840:	28b0aa00 	.word	0x28b0aa00
 800d844:	00000000 	.word	0x00000000
 800d848:	00f42400 	.word	0x00f42400
 800d84c:	f4240000 	.word	0xf4240000
 800d850:	01e84800 	.word	0x01e84800
 800d854:	03d09000 	.word	0x03d09000
 800d858:	07a12000 	.word	0x07a12000
 800d85c:	0f424000 	.word	0x0f424000
 800d860:	186a0000 	.word	0x186a0000
 800d864:	1e848000 	.word	0x1e848000
 800d868:	3d090000 	.word	0x3d090000
 800d86c:	7a120000 	.word	0x7a120000
 800d870:	000aaa00 	.word	0x000aaa00
 800d874:	000ccc00 	.word	0x000ccc00
 800d878:	00155500 	.word	0x00155500
 800d87c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d880:	f04f 0400 	mov.w	r4, #0
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	6852      	ldr	r2, [r2, #4]
 800d888:	0852      	lsrs	r2, r2, #1
 800d88a:	4611      	mov	r1, r2
 800d88c:	f04f 0200 	mov.w	r2, #0
 800d890:	eb13 0b01 	adds.w	fp, r3, r1
 800d894:	eb44 0c02 	adc.w	ip, r4, r2
 800d898:	4658      	mov	r0, fp
 800d89a:	4661      	mov	r1, ip
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	f04f 0400 	mov.w	r4, #0
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	4623      	mov	r3, r4
 800d8a8:	f7f3 f930 	bl	8000b0c <__aeabi_uldivmod>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	61fb      	str	r3, [r7, #28]
            break;
 800d8b2:	e002      	b.n	800d8ba <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	76fb      	strb	r3, [r7, #27]
            break;
 800d8b8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8c0:	d308      	bcc.n	800d8d4 <UART_SetConfig+0x9bc>
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8c8:	d204      	bcs.n	800d8d4 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	69fa      	ldr	r2, [r7, #28]
 800d8d0:	60da      	str	r2, [r3, #12]
 800d8d2:	e35b      	b.n	800df8c <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	76fb      	strb	r3, [r7, #27]
 800d8d8:	e358      	b.n	800df8c <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	69db      	ldr	r3, [r3, #28]
 800d8de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8e2:	f040 81a6 	bne.w	800dc32 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800d8e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	2b07      	cmp	r3, #7
 800d8ee:	f200 8180 	bhi.w	800dbf2 <UART_SetConfig+0xcda>
 800d8f2:	a201      	add	r2, pc, #4	; (adr r2, 800d8f8 <UART_SetConfig+0x9e0>)
 800d8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f8:	0800d919 	.word	0x0800d919
 800d8fc:	0800d9d1 	.word	0x0800d9d1
 800d900:	0800dbf3 	.word	0x0800dbf3
 800d904:	0800da79 	.word	0x0800da79
 800d908:	0800dbf3 	.word	0x0800dbf3
 800d90c:	0800dbf3 	.word	0x0800dbf3
 800d910:	0800dbf3 	.word	0x0800dbf3
 800d914:	0800db31 	.word	0x0800db31
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d918:	f7fd fa58 	bl	800adcc <HAL_RCC_GetPCLK2Freq>
 800d91c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d922:	2b00      	cmp	r3, #0
 800d924:	d044      	beq.n	800d9b0 <UART_SetConfig+0xa98>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d03e      	beq.n	800d9ac <UART_SetConfig+0xa94>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d932:	2b02      	cmp	r3, #2
 800d934:	d038      	beq.n	800d9a8 <UART_SetConfig+0xa90>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93a:	2b03      	cmp	r3, #3
 800d93c:	d032      	beq.n	800d9a4 <UART_SetConfig+0xa8c>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d942:	2b04      	cmp	r3, #4
 800d944:	d02c      	beq.n	800d9a0 <UART_SetConfig+0xa88>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d94a:	2b05      	cmp	r3, #5
 800d94c:	d026      	beq.n	800d99c <UART_SetConfig+0xa84>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d952:	2b06      	cmp	r3, #6
 800d954:	d020      	beq.n	800d998 <UART_SetConfig+0xa80>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95a:	2b07      	cmp	r3, #7
 800d95c:	d01a      	beq.n	800d994 <UART_SetConfig+0xa7c>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d962:	2b08      	cmp	r3, #8
 800d964:	d014      	beq.n	800d990 <UART_SetConfig+0xa78>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96a:	2b09      	cmp	r3, #9
 800d96c:	d00e      	beq.n	800d98c <UART_SetConfig+0xa74>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d972:	2b0a      	cmp	r3, #10
 800d974:	d008      	beq.n	800d988 <UART_SetConfig+0xa70>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d97a:	2b0b      	cmp	r3, #11
 800d97c:	d102      	bne.n	800d984 <UART_SetConfig+0xa6c>
 800d97e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d982:	e016      	b.n	800d9b2 <UART_SetConfig+0xa9a>
 800d984:	2301      	movs	r3, #1
 800d986:	e014      	b.n	800d9b2 <UART_SetConfig+0xa9a>
 800d988:	2380      	movs	r3, #128	; 0x80
 800d98a:	e012      	b.n	800d9b2 <UART_SetConfig+0xa9a>
 800d98c:	2340      	movs	r3, #64	; 0x40
 800d98e:	e010      	b.n	800d9b2 <UART_SetConfig+0xa9a>
 800d990:	2320      	movs	r3, #32
 800d992:	e00e      	b.n	800d9b2 <UART_SetConfig+0xa9a>
 800d994:	2310      	movs	r3, #16
 800d996:	e00c      	b.n	800d9b2 <UART_SetConfig+0xa9a>
 800d998:	230c      	movs	r3, #12
 800d99a:	e00a      	b.n	800d9b2 <UART_SetConfig+0xa9a>
 800d99c:	230a      	movs	r3, #10
 800d99e:	e008      	b.n	800d9b2 <UART_SetConfig+0xa9a>
 800d9a0:	2308      	movs	r3, #8
 800d9a2:	e006      	b.n	800d9b2 <UART_SetConfig+0xa9a>
 800d9a4:	2306      	movs	r3, #6
 800d9a6:	e004      	b.n	800d9b2 <UART_SetConfig+0xa9a>
 800d9a8:	2304      	movs	r3, #4
 800d9aa:	e002      	b.n	800d9b2 <UART_SetConfig+0xa9a>
 800d9ac:	2302      	movs	r3, #2
 800d9ae:	e000      	b.n	800d9b2 <UART_SetConfig+0xa9a>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	693a      	ldr	r2, [r7, #16]
 800d9b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9b8:	005a      	lsls	r2, r3, #1
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	085b      	lsrs	r3, r3, #1
 800d9c0:	441a      	add	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	61fb      	str	r3, [r7, #28]
        break;
 800d9ce:	e113      	b.n	800dbf8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d043      	beq.n	800da60 <UART_SetConfig+0xb48>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d03d      	beq.n	800da5c <UART_SetConfig+0xb44>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e4:	2b02      	cmp	r3, #2
 800d9e6:	d037      	beq.n	800da58 <UART_SetConfig+0xb40>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ec:	2b03      	cmp	r3, #3
 800d9ee:	d031      	beq.n	800da54 <UART_SetConfig+0xb3c>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f4:	2b04      	cmp	r3, #4
 800d9f6:	d02b      	beq.n	800da50 <UART_SetConfig+0xb38>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fc:	2b05      	cmp	r3, #5
 800d9fe:	d025      	beq.n	800da4c <UART_SetConfig+0xb34>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da04:	2b06      	cmp	r3, #6
 800da06:	d01f      	beq.n	800da48 <UART_SetConfig+0xb30>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0c:	2b07      	cmp	r3, #7
 800da0e:	d019      	beq.n	800da44 <UART_SetConfig+0xb2c>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da14:	2b08      	cmp	r3, #8
 800da16:	d013      	beq.n	800da40 <UART_SetConfig+0xb28>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1c:	2b09      	cmp	r3, #9
 800da1e:	d00d      	beq.n	800da3c <UART_SetConfig+0xb24>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da24:	2b0a      	cmp	r3, #10
 800da26:	d007      	beq.n	800da38 <UART_SetConfig+0xb20>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2c:	2b0b      	cmp	r3, #11
 800da2e:	d101      	bne.n	800da34 <UART_SetConfig+0xb1c>
 800da30:	4b8c      	ldr	r3, [pc, #560]	; (800dc64 <UART_SetConfig+0xd4c>)
 800da32:	e016      	b.n	800da62 <UART_SetConfig+0xb4a>
 800da34:	4b8c      	ldr	r3, [pc, #560]	; (800dc68 <UART_SetConfig+0xd50>)
 800da36:	e014      	b.n	800da62 <UART_SetConfig+0xb4a>
 800da38:	4b8c      	ldr	r3, [pc, #560]	; (800dc6c <UART_SetConfig+0xd54>)
 800da3a:	e012      	b.n	800da62 <UART_SetConfig+0xb4a>
 800da3c:	4b8c      	ldr	r3, [pc, #560]	; (800dc70 <UART_SetConfig+0xd58>)
 800da3e:	e010      	b.n	800da62 <UART_SetConfig+0xb4a>
 800da40:	4b8c      	ldr	r3, [pc, #560]	; (800dc74 <UART_SetConfig+0xd5c>)
 800da42:	e00e      	b.n	800da62 <UART_SetConfig+0xb4a>
 800da44:	4b8c      	ldr	r3, [pc, #560]	; (800dc78 <UART_SetConfig+0xd60>)
 800da46:	e00c      	b.n	800da62 <UART_SetConfig+0xb4a>
 800da48:	4b8c      	ldr	r3, [pc, #560]	; (800dc7c <UART_SetConfig+0xd64>)
 800da4a:	e00a      	b.n	800da62 <UART_SetConfig+0xb4a>
 800da4c:	4b8c      	ldr	r3, [pc, #560]	; (800dc80 <UART_SetConfig+0xd68>)
 800da4e:	e008      	b.n	800da62 <UART_SetConfig+0xb4a>
 800da50:	4b8c      	ldr	r3, [pc, #560]	; (800dc84 <UART_SetConfig+0xd6c>)
 800da52:	e006      	b.n	800da62 <UART_SetConfig+0xb4a>
 800da54:	4b8c      	ldr	r3, [pc, #560]	; (800dc88 <UART_SetConfig+0xd70>)
 800da56:	e004      	b.n	800da62 <UART_SetConfig+0xb4a>
 800da58:	4b8c      	ldr	r3, [pc, #560]	; (800dc8c <UART_SetConfig+0xd74>)
 800da5a:	e002      	b.n	800da62 <UART_SetConfig+0xb4a>
 800da5c:	4b8c      	ldr	r3, [pc, #560]	; (800dc90 <UART_SetConfig+0xd78>)
 800da5e:	e000      	b.n	800da62 <UART_SetConfig+0xb4a>
 800da60:	4b81      	ldr	r3, [pc, #516]	; (800dc68 <UART_SetConfig+0xd50>)
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	6852      	ldr	r2, [r2, #4]
 800da66:	0852      	lsrs	r2, r2, #1
 800da68:	441a      	add	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da72:	b29b      	uxth	r3, r3
 800da74:	61fb      	str	r3, [r7, #28]
        break;
 800da76:	e0bf      	b.n	800dbf8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da78:	f7fd f914 	bl	800aca4 <HAL_RCC_GetSysClockFreq>
 800da7c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da82:	2b00      	cmp	r3, #0
 800da84:	d044      	beq.n	800db10 <UART_SetConfig+0xbf8>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d03e      	beq.n	800db0c <UART_SetConfig+0xbf4>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da92:	2b02      	cmp	r3, #2
 800da94:	d038      	beq.n	800db08 <UART_SetConfig+0xbf0>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d032      	beq.n	800db04 <UART_SetConfig+0xbec>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa2:	2b04      	cmp	r3, #4
 800daa4:	d02c      	beq.n	800db00 <UART_SetConfig+0xbe8>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daaa:	2b05      	cmp	r3, #5
 800daac:	d026      	beq.n	800dafc <UART_SetConfig+0xbe4>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab2:	2b06      	cmp	r3, #6
 800dab4:	d020      	beq.n	800daf8 <UART_SetConfig+0xbe0>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daba:	2b07      	cmp	r3, #7
 800dabc:	d01a      	beq.n	800daf4 <UART_SetConfig+0xbdc>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac2:	2b08      	cmp	r3, #8
 800dac4:	d014      	beq.n	800daf0 <UART_SetConfig+0xbd8>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daca:	2b09      	cmp	r3, #9
 800dacc:	d00e      	beq.n	800daec <UART_SetConfig+0xbd4>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad2:	2b0a      	cmp	r3, #10
 800dad4:	d008      	beq.n	800dae8 <UART_SetConfig+0xbd0>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dada:	2b0b      	cmp	r3, #11
 800dadc:	d102      	bne.n	800dae4 <UART_SetConfig+0xbcc>
 800dade:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dae2:	e016      	b.n	800db12 <UART_SetConfig+0xbfa>
 800dae4:	2301      	movs	r3, #1
 800dae6:	e014      	b.n	800db12 <UART_SetConfig+0xbfa>
 800dae8:	2380      	movs	r3, #128	; 0x80
 800daea:	e012      	b.n	800db12 <UART_SetConfig+0xbfa>
 800daec:	2340      	movs	r3, #64	; 0x40
 800daee:	e010      	b.n	800db12 <UART_SetConfig+0xbfa>
 800daf0:	2320      	movs	r3, #32
 800daf2:	e00e      	b.n	800db12 <UART_SetConfig+0xbfa>
 800daf4:	2310      	movs	r3, #16
 800daf6:	e00c      	b.n	800db12 <UART_SetConfig+0xbfa>
 800daf8:	230c      	movs	r3, #12
 800dafa:	e00a      	b.n	800db12 <UART_SetConfig+0xbfa>
 800dafc:	230a      	movs	r3, #10
 800dafe:	e008      	b.n	800db12 <UART_SetConfig+0xbfa>
 800db00:	2308      	movs	r3, #8
 800db02:	e006      	b.n	800db12 <UART_SetConfig+0xbfa>
 800db04:	2306      	movs	r3, #6
 800db06:	e004      	b.n	800db12 <UART_SetConfig+0xbfa>
 800db08:	2304      	movs	r3, #4
 800db0a:	e002      	b.n	800db12 <UART_SetConfig+0xbfa>
 800db0c:	2302      	movs	r3, #2
 800db0e:	e000      	b.n	800db12 <UART_SetConfig+0xbfa>
 800db10:	2301      	movs	r3, #1
 800db12:	693a      	ldr	r2, [r7, #16]
 800db14:	fbb2 f3f3 	udiv	r3, r2, r3
 800db18:	005a      	lsls	r2, r3, #1
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	085b      	lsrs	r3, r3, #1
 800db20:	441a      	add	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	fbb2 f3f3 	udiv	r3, r2, r3
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	61fb      	str	r3, [r7, #28]
        break;
 800db2e:	e063      	b.n	800dbf8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db34:	2b00      	cmp	r3, #0
 800db36:	d04f      	beq.n	800dbd8 <UART_SetConfig+0xcc0>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d048      	beq.n	800dbd2 <UART_SetConfig+0xcba>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db44:	2b02      	cmp	r3, #2
 800db46:	d041      	beq.n	800dbcc <UART_SetConfig+0xcb4>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db4c:	2b03      	cmp	r3, #3
 800db4e:	d03a      	beq.n	800dbc6 <UART_SetConfig+0xcae>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db54:	2b04      	cmp	r3, #4
 800db56:	d033      	beq.n	800dbc0 <UART_SetConfig+0xca8>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5c:	2b05      	cmp	r3, #5
 800db5e:	d02c      	beq.n	800dbba <UART_SetConfig+0xca2>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db64:	2b06      	cmp	r3, #6
 800db66:	d025      	beq.n	800dbb4 <UART_SetConfig+0xc9c>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db6c:	2b07      	cmp	r3, #7
 800db6e:	d01e      	beq.n	800dbae <UART_SetConfig+0xc96>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db74:	2b08      	cmp	r3, #8
 800db76:	d017      	beq.n	800dba8 <UART_SetConfig+0xc90>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7c:	2b09      	cmp	r3, #9
 800db7e:	d010      	beq.n	800dba2 <UART_SetConfig+0xc8a>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db84:	2b0a      	cmp	r3, #10
 800db86:	d009      	beq.n	800db9c <UART_SetConfig+0xc84>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8c:	2b0b      	cmp	r3, #11
 800db8e:	d102      	bne.n	800db96 <UART_SetConfig+0xc7e>
 800db90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db94:	e022      	b.n	800dbdc <UART_SetConfig+0xcc4>
 800db96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800db9a:	e01f      	b.n	800dbdc <UART_SetConfig+0xcc4>
 800db9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dba0:	e01c      	b.n	800dbdc <UART_SetConfig+0xcc4>
 800dba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dba6:	e019      	b.n	800dbdc <UART_SetConfig+0xcc4>
 800dba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dbac:	e016      	b.n	800dbdc <UART_SetConfig+0xcc4>
 800dbae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbb2:	e013      	b.n	800dbdc <UART_SetConfig+0xcc4>
 800dbb4:	f241 5354 	movw	r3, #5460	; 0x1554
 800dbb8:	e010      	b.n	800dbdc <UART_SetConfig+0xcc4>
 800dbba:	f641 1398 	movw	r3, #6552	; 0x1998
 800dbbe:	e00d      	b.n	800dbdc <UART_SetConfig+0xcc4>
 800dbc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dbc4:	e00a      	b.n	800dbdc <UART_SetConfig+0xcc4>
 800dbc6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800dbca:	e007      	b.n	800dbdc <UART_SetConfig+0xcc4>
 800dbcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dbd0:	e004      	b.n	800dbdc <UART_SetConfig+0xcc4>
 800dbd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbd6:	e001      	b.n	800dbdc <UART_SetConfig+0xcc4>
 800dbd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	6852      	ldr	r2, [r2, #4]
 800dbe0:	0852      	lsrs	r2, r2, #1
 800dbe2:	441a      	add	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	61fb      	str	r3, [r7, #28]
        break;
 800dbf0:	e002      	b.n	800dbf8 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	76fb      	strb	r3, [r7, #27]
        break;
 800dbf6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	2b0f      	cmp	r3, #15
 800dbfc:	d916      	bls.n	800dc2c <UART_SetConfig+0xd14>
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc04:	d212      	bcs.n	800dc2c <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	f023 030f 	bic.w	r3, r3, #15
 800dc0e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	085b      	lsrs	r3, r3, #1
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	f003 0307 	and.w	r3, r3, #7
 800dc1a:	b29a      	uxth	r2, r3
 800dc1c:	89fb      	ldrh	r3, [r7, #14]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	89fa      	ldrh	r2, [r7, #14]
 800dc28:	60da      	str	r2, [r3, #12]
 800dc2a:	e1af      	b.n	800df8c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	76fb      	strb	r3, [r7, #27]
 800dc30:	e1ac      	b.n	800df8c <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 800dc32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc36:	3b01      	subs	r3, #1
 800dc38:	2b07      	cmp	r3, #7
 800dc3a:	f200 8196 	bhi.w	800df6a <UART_SetConfig+0x1052>
 800dc3e:	a201      	add	r2, pc, #4	; (adr r2, 800dc44 <UART_SetConfig+0xd2c>)
 800dc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc44:	0800dc95 	.word	0x0800dc95
 800dc48:	0800dd4b 	.word	0x0800dd4b
 800dc4c:	0800df6b 	.word	0x0800df6b
 800dc50:	0800ddf5 	.word	0x0800ddf5
 800dc54:	0800df6b 	.word	0x0800df6b
 800dc58:	0800df6b 	.word	0x0800df6b
 800dc5c:	0800df6b 	.word	0x0800df6b
 800dc60:	0800deab 	.word	0x0800deab
 800dc64:	0001e848 	.word	0x0001e848
 800dc68:	01e84800 	.word	0x01e84800
 800dc6c:	0003d090 	.word	0x0003d090
 800dc70:	0007a120 	.word	0x0007a120
 800dc74:	000f4240 	.word	0x000f4240
 800dc78:	001e8480 	.word	0x001e8480
 800dc7c:	0028b0aa 	.word	0x0028b0aa
 800dc80:	0030d400 	.word	0x0030d400
 800dc84:	003d0900 	.word	0x003d0900
 800dc88:	00516154 	.word	0x00516154
 800dc8c:	007a1200 	.word	0x007a1200
 800dc90:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc94:	f7fd f89a 	bl	800adcc <HAL_RCC_GetPCLK2Freq>
 800dc98:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d044      	beq.n	800dd2c <UART_SetConfig+0xe14>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d03e      	beq.n	800dd28 <UART_SetConfig+0xe10>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcae:	2b02      	cmp	r3, #2
 800dcb0:	d038      	beq.n	800dd24 <UART_SetConfig+0xe0c>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb6:	2b03      	cmp	r3, #3
 800dcb8:	d032      	beq.n	800dd20 <UART_SetConfig+0xe08>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcbe:	2b04      	cmp	r3, #4
 800dcc0:	d02c      	beq.n	800dd1c <UART_SetConfig+0xe04>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc6:	2b05      	cmp	r3, #5
 800dcc8:	d026      	beq.n	800dd18 <UART_SetConfig+0xe00>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcce:	2b06      	cmp	r3, #6
 800dcd0:	d020      	beq.n	800dd14 <UART_SetConfig+0xdfc>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd6:	2b07      	cmp	r3, #7
 800dcd8:	d01a      	beq.n	800dd10 <UART_SetConfig+0xdf8>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcde:	2b08      	cmp	r3, #8
 800dce0:	d014      	beq.n	800dd0c <UART_SetConfig+0xdf4>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce6:	2b09      	cmp	r3, #9
 800dce8:	d00e      	beq.n	800dd08 <UART_SetConfig+0xdf0>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcee:	2b0a      	cmp	r3, #10
 800dcf0:	d008      	beq.n	800dd04 <UART_SetConfig+0xdec>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf6:	2b0b      	cmp	r3, #11
 800dcf8:	d102      	bne.n	800dd00 <UART_SetConfig+0xde8>
 800dcfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcfe:	e016      	b.n	800dd2e <UART_SetConfig+0xe16>
 800dd00:	2301      	movs	r3, #1
 800dd02:	e014      	b.n	800dd2e <UART_SetConfig+0xe16>
 800dd04:	2380      	movs	r3, #128	; 0x80
 800dd06:	e012      	b.n	800dd2e <UART_SetConfig+0xe16>
 800dd08:	2340      	movs	r3, #64	; 0x40
 800dd0a:	e010      	b.n	800dd2e <UART_SetConfig+0xe16>
 800dd0c:	2320      	movs	r3, #32
 800dd0e:	e00e      	b.n	800dd2e <UART_SetConfig+0xe16>
 800dd10:	2310      	movs	r3, #16
 800dd12:	e00c      	b.n	800dd2e <UART_SetConfig+0xe16>
 800dd14:	230c      	movs	r3, #12
 800dd16:	e00a      	b.n	800dd2e <UART_SetConfig+0xe16>
 800dd18:	230a      	movs	r3, #10
 800dd1a:	e008      	b.n	800dd2e <UART_SetConfig+0xe16>
 800dd1c:	2308      	movs	r3, #8
 800dd1e:	e006      	b.n	800dd2e <UART_SetConfig+0xe16>
 800dd20:	2306      	movs	r3, #6
 800dd22:	e004      	b.n	800dd2e <UART_SetConfig+0xe16>
 800dd24:	2304      	movs	r3, #4
 800dd26:	e002      	b.n	800dd2e <UART_SetConfig+0xe16>
 800dd28:	2302      	movs	r3, #2
 800dd2a:	e000      	b.n	800dd2e <UART_SetConfig+0xe16>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	693a      	ldr	r2, [r7, #16]
 800dd30:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	085b      	lsrs	r3, r3, #1
 800dd3a:	441a      	add	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	61fb      	str	r3, [r7, #28]
        break;
 800dd48:	e112      	b.n	800df70 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d044      	beq.n	800dddc <UART_SetConfig+0xec4>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d03e      	beq.n	800ddd8 <UART_SetConfig+0xec0>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d038      	beq.n	800ddd4 <UART_SetConfig+0xebc>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd66:	2b03      	cmp	r3, #3
 800dd68:	d032      	beq.n	800ddd0 <UART_SetConfig+0xeb8>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6e:	2b04      	cmp	r3, #4
 800dd70:	d02c      	beq.n	800ddcc <UART_SetConfig+0xeb4>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd76:	2b05      	cmp	r3, #5
 800dd78:	d026      	beq.n	800ddc8 <UART_SetConfig+0xeb0>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd7e:	2b06      	cmp	r3, #6
 800dd80:	d020      	beq.n	800ddc4 <UART_SetConfig+0xeac>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd86:	2b07      	cmp	r3, #7
 800dd88:	d01a      	beq.n	800ddc0 <UART_SetConfig+0xea8>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd8e:	2b08      	cmp	r3, #8
 800dd90:	d014      	beq.n	800ddbc <UART_SetConfig+0xea4>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd96:	2b09      	cmp	r3, #9
 800dd98:	d00e      	beq.n	800ddb8 <UART_SetConfig+0xea0>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9e:	2b0a      	cmp	r3, #10
 800dda0:	d008      	beq.n	800ddb4 <UART_SetConfig+0xe9c>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda6:	2b0b      	cmp	r3, #11
 800dda8:	d102      	bne.n	800ddb0 <UART_SetConfig+0xe98>
 800ddaa:	f24f 4324 	movw	r3, #62500	; 0xf424
 800ddae:	e016      	b.n	800ddde <UART_SetConfig+0xec6>
 800ddb0:	4b80      	ldr	r3, [pc, #512]	; (800dfb4 <UART_SetConfig+0x109c>)
 800ddb2:	e014      	b.n	800ddde <UART_SetConfig+0xec6>
 800ddb4:	4b80      	ldr	r3, [pc, #512]	; (800dfb8 <UART_SetConfig+0x10a0>)
 800ddb6:	e012      	b.n	800ddde <UART_SetConfig+0xec6>
 800ddb8:	4b80      	ldr	r3, [pc, #512]	; (800dfbc <UART_SetConfig+0x10a4>)
 800ddba:	e010      	b.n	800ddde <UART_SetConfig+0xec6>
 800ddbc:	4b80      	ldr	r3, [pc, #512]	; (800dfc0 <UART_SetConfig+0x10a8>)
 800ddbe:	e00e      	b.n	800ddde <UART_SetConfig+0xec6>
 800ddc0:	4b80      	ldr	r3, [pc, #512]	; (800dfc4 <UART_SetConfig+0x10ac>)
 800ddc2:	e00c      	b.n	800ddde <UART_SetConfig+0xec6>
 800ddc4:	4b80      	ldr	r3, [pc, #512]	; (800dfc8 <UART_SetConfig+0x10b0>)
 800ddc6:	e00a      	b.n	800ddde <UART_SetConfig+0xec6>
 800ddc8:	4b80      	ldr	r3, [pc, #512]	; (800dfcc <UART_SetConfig+0x10b4>)
 800ddca:	e008      	b.n	800ddde <UART_SetConfig+0xec6>
 800ddcc:	4b80      	ldr	r3, [pc, #512]	; (800dfd0 <UART_SetConfig+0x10b8>)
 800ddce:	e006      	b.n	800ddde <UART_SetConfig+0xec6>
 800ddd0:	4b80      	ldr	r3, [pc, #512]	; (800dfd4 <UART_SetConfig+0x10bc>)
 800ddd2:	e004      	b.n	800ddde <UART_SetConfig+0xec6>
 800ddd4:	4b80      	ldr	r3, [pc, #512]	; (800dfd8 <UART_SetConfig+0x10c0>)
 800ddd6:	e002      	b.n	800ddde <UART_SetConfig+0xec6>
 800ddd8:	4b80      	ldr	r3, [pc, #512]	; (800dfdc <UART_SetConfig+0x10c4>)
 800ddda:	e000      	b.n	800ddde <UART_SetConfig+0xec6>
 800dddc:	4b75      	ldr	r3, [pc, #468]	; (800dfb4 <UART_SetConfig+0x109c>)
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	6852      	ldr	r2, [r2, #4]
 800dde2:	0852      	lsrs	r2, r2, #1
 800dde4:	441a      	add	r2, r3
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	61fb      	str	r3, [r7, #28]
        break;
 800ddf2:	e0bd      	b.n	800df70 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ddf4:	f7fc ff56 	bl	800aca4 <HAL_RCC_GetSysClockFreq>
 800ddf8:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d044      	beq.n	800de8c <UART_SetConfig+0xf74>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de06:	2b01      	cmp	r3, #1
 800de08:	d03e      	beq.n	800de88 <UART_SetConfig+0xf70>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d038      	beq.n	800de84 <UART_SetConfig+0xf6c>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de16:	2b03      	cmp	r3, #3
 800de18:	d032      	beq.n	800de80 <UART_SetConfig+0xf68>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1e:	2b04      	cmp	r3, #4
 800de20:	d02c      	beq.n	800de7c <UART_SetConfig+0xf64>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de26:	2b05      	cmp	r3, #5
 800de28:	d026      	beq.n	800de78 <UART_SetConfig+0xf60>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2e:	2b06      	cmp	r3, #6
 800de30:	d020      	beq.n	800de74 <UART_SetConfig+0xf5c>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de36:	2b07      	cmp	r3, #7
 800de38:	d01a      	beq.n	800de70 <UART_SetConfig+0xf58>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3e:	2b08      	cmp	r3, #8
 800de40:	d014      	beq.n	800de6c <UART_SetConfig+0xf54>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de46:	2b09      	cmp	r3, #9
 800de48:	d00e      	beq.n	800de68 <UART_SetConfig+0xf50>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4e:	2b0a      	cmp	r3, #10
 800de50:	d008      	beq.n	800de64 <UART_SetConfig+0xf4c>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de56:	2b0b      	cmp	r3, #11
 800de58:	d102      	bne.n	800de60 <UART_SetConfig+0xf48>
 800de5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de5e:	e016      	b.n	800de8e <UART_SetConfig+0xf76>
 800de60:	2301      	movs	r3, #1
 800de62:	e014      	b.n	800de8e <UART_SetConfig+0xf76>
 800de64:	2380      	movs	r3, #128	; 0x80
 800de66:	e012      	b.n	800de8e <UART_SetConfig+0xf76>
 800de68:	2340      	movs	r3, #64	; 0x40
 800de6a:	e010      	b.n	800de8e <UART_SetConfig+0xf76>
 800de6c:	2320      	movs	r3, #32
 800de6e:	e00e      	b.n	800de8e <UART_SetConfig+0xf76>
 800de70:	2310      	movs	r3, #16
 800de72:	e00c      	b.n	800de8e <UART_SetConfig+0xf76>
 800de74:	230c      	movs	r3, #12
 800de76:	e00a      	b.n	800de8e <UART_SetConfig+0xf76>
 800de78:	230a      	movs	r3, #10
 800de7a:	e008      	b.n	800de8e <UART_SetConfig+0xf76>
 800de7c:	2308      	movs	r3, #8
 800de7e:	e006      	b.n	800de8e <UART_SetConfig+0xf76>
 800de80:	2306      	movs	r3, #6
 800de82:	e004      	b.n	800de8e <UART_SetConfig+0xf76>
 800de84:	2304      	movs	r3, #4
 800de86:	e002      	b.n	800de8e <UART_SetConfig+0xf76>
 800de88:	2302      	movs	r3, #2
 800de8a:	e000      	b.n	800de8e <UART_SetConfig+0xf76>
 800de8c:	2301      	movs	r3, #1
 800de8e:	693a      	ldr	r2, [r7, #16]
 800de90:	fbb2 f2f3 	udiv	r2, r2, r3
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	085b      	lsrs	r3, r3, #1
 800de9a:	441a      	add	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	61fb      	str	r3, [r7, #28]
        break;
 800dea8:	e062      	b.n	800df70 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d04e      	beq.n	800df50 <UART_SetConfig+0x1038>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d047      	beq.n	800df4a <UART_SetConfig+0x1032>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800debe:	2b02      	cmp	r3, #2
 800dec0:	d040      	beq.n	800df44 <UART_SetConfig+0x102c>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec6:	2b03      	cmp	r3, #3
 800dec8:	d039      	beq.n	800df3e <UART_SetConfig+0x1026>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dece:	2b04      	cmp	r3, #4
 800ded0:	d032      	beq.n	800df38 <UART_SetConfig+0x1020>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded6:	2b05      	cmp	r3, #5
 800ded8:	d02b      	beq.n	800df32 <UART_SetConfig+0x101a>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dede:	2b06      	cmp	r3, #6
 800dee0:	d024      	beq.n	800df2c <UART_SetConfig+0x1014>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee6:	2b07      	cmp	r3, #7
 800dee8:	d01d      	beq.n	800df26 <UART_SetConfig+0x100e>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deee:	2b08      	cmp	r3, #8
 800def0:	d016      	beq.n	800df20 <UART_SetConfig+0x1008>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def6:	2b09      	cmp	r3, #9
 800def8:	d00f      	beq.n	800df1a <UART_SetConfig+0x1002>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800defe:	2b0a      	cmp	r3, #10
 800df00:	d008      	beq.n	800df14 <UART_SetConfig+0xffc>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df06:	2b0b      	cmp	r3, #11
 800df08:	d101      	bne.n	800df0e <UART_SetConfig+0xff6>
 800df0a:	2380      	movs	r3, #128	; 0x80
 800df0c:	e022      	b.n	800df54 <UART_SetConfig+0x103c>
 800df0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df12:	e01f      	b.n	800df54 <UART_SetConfig+0x103c>
 800df14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df18:	e01c      	b.n	800df54 <UART_SetConfig+0x103c>
 800df1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df1e:	e019      	b.n	800df54 <UART_SetConfig+0x103c>
 800df20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df24:	e016      	b.n	800df54 <UART_SetConfig+0x103c>
 800df26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df2a:	e013      	b.n	800df54 <UART_SetConfig+0x103c>
 800df2c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800df30:	e010      	b.n	800df54 <UART_SetConfig+0x103c>
 800df32:	f640 43cc 	movw	r3, #3276	; 0xccc
 800df36:	e00d      	b.n	800df54 <UART_SetConfig+0x103c>
 800df38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df3c:	e00a      	b.n	800df54 <UART_SetConfig+0x103c>
 800df3e:	f241 5355 	movw	r3, #5461	; 0x1555
 800df42:	e007      	b.n	800df54 <UART_SetConfig+0x103c>
 800df44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df48:	e004      	b.n	800df54 <UART_SetConfig+0x103c>
 800df4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800df4e:	e001      	b.n	800df54 <UART_SetConfig+0x103c>
 800df50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	6852      	ldr	r2, [r2, #4]
 800df58:	0852      	lsrs	r2, r2, #1
 800df5a:	441a      	add	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	fbb2 f3f3 	udiv	r3, r2, r3
 800df64:	b29b      	uxth	r3, r3
 800df66:	61fb      	str	r3, [r7, #28]
        break;
 800df68:	e002      	b.n	800df70 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	76fb      	strb	r3, [r7, #27]
        break;
 800df6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	2b0f      	cmp	r3, #15
 800df74:	d908      	bls.n	800df88 <UART_SetConfig+0x1070>
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df7c:	d204      	bcs.n	800df88 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	69fa      	ldr	r2, [r7, #28]
 800df84:	60da      	str	r2, [r3, #12]
 800df86:	e001      	b.n	800df8c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800df88:	2301      	movs	r3, #1
 800df8a:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2201      	movs	r2, #1
 800df90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2201      	movs	r2, #1
 800df98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800dfa8:	7efb      	ldrb	r3, [r7, #27]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3728      	adds	r7, #40	; 0x28
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800dfb4:	00f42400 	.word	0x00f42400
 800dfb8:	0001e848 	.word	0x0001e848
 800dfbc:	0003d090 	.word	0x0003d090
 800dfc0:	0007a120 	.word	0x0007a120
 800dfc4:	000f4240 	.word	0x000f4240
 800dfc8:	00145855 	.word	0x00145855
 800dfcc:	00186a00 	.word	0x00186a00
 800dfd0:	001e8480 	.word	0x001e8480
 800dfd4:	0028b0aa 	.word	0x0028b0aa
 800dfd8:	003d0900 	.word	0x003d0900
 800dfdc:	007a1200 	.word	0x007a1200

0800dfe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfec:	f003 0301 	and.w	r3, r3, #1
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d00a      	beq.n	800e00a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	430a      	orrs	r2, r1
 800e008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e00e:	f003 0302 	and.w	r3, r3, #2
 800e012:	2b00      	cmp	r3, #0
 800e014:	d00a      	beq.n	800e02c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	430a      	orrs	r2, r1
 800e02a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e030:	f003 0304 	and.w	r3, r3, #4
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00a      	beq.n	800e04e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	430a      	orrs	r2, r1
 800e04c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e052:	f003 0308 	and.w	r3, r3, #8
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00a      	beq.n	800e070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	430a      	orrs	r2, r1
 800e06e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e074:	f003 0310 	and.w	r3, r3, #16
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d00a      	beq.n	800e092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	430a      	orrs	r2, r1
 800e090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e096:	f003 0320 	and.w	r3, r3, #32
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00a      	beq.n	800e0b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	430a      	orrs	r2, r1
 800e0b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d01a      	beq.n	800e0f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	430a      	orrs	r2, r1
 800e0d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0de:	d10a      	bne.n	800e0f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	430a      	orrs	r2, r1
 800e0f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00a      	beq.n	800e118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	430a      	orrs	r2, r1
 800e116:	605a      	str	r2, [r3, #4]
  }
}
 800e118:	bf00      	nop
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b086      	sub	sp, #24
 800e128:	af02      	add	r7, sp, #8
 800e12a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800e134:	f7f7 fb76 	bl	8005824 <HAL_GetTick>
 800e138:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f003 0308 	and.w	r3, r3, #8
 800e144:	2b08      	cmp	r3, #8
 800e146:	d10e      	bne.n	800e166 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2200      	movs	r2, #0
 800e152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 f82c 	bl	800e1b4 <UART_WaitOnFlagUntilTimeout>
 800e15c:	4603      	mov	r3, r0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d001      	beq.n	800e166 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e162:	2303      	movs	r3, #3
 800e164:	e022      	b.n	800e1ac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f003 0304 	and.w	r3, r3, #4
 800e170:	2b04      	cmp	r3, #4
 800e172:	d10e      	bne.n	800e192 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 f816 	bl	800e1b4 <UART_WaitOnFlagUntilTimeout>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d001      	beq.n	800e192 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e18e:	2303      	movs	r3, #3
 800e190:	e00c      	b.n	800e1ac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2220      	movs	r2, #32
 800e196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2220      	movs	r2, #32
 800e19e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3710      	adds	r7, #16
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	603b      	str	r3, [r7, #0]
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1c4:	e062      	b.n	800e28c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1cc:	d05e      	beq.n	800e28c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1ce:	f7f7 fb29 	bl	8005824 <HAL_GetTick>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	1ad3      	subs	r3, r2, r3
 800e1d8:	69ba      	ldr	r2, [r7, #24]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d302      	bcc.n	800e1e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d11d      	bne.n	800e220 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e1f2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	689a      	ldr	r2, [r3, #8]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f022 0201 	bic.w	r2, r2, #1
 800e202:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2220      	movs	r2, #32
 800e208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2220      	movs	r2, #32
 800e210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800e21c:	2303      	movs	r3, #3
 800e21e:	e045      	b.n	800e2ac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f003 0304 	and.w	r3, r3, #4
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d02e      	beq.n	800e28c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	69db      	ldr	r3, [r3, #28]
 800e234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e23c:	d126      	bne.n	800e28c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e246:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e256:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	689a      	ldr	r2, [r3, #8]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f022 0201 	bic.w	r2, r2, #1
 800e266:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2220      	movs	r2, #32
 800e26c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2220      	movs	r2, #32
 800e274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2220      	movs	r2, #32
 800e27c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2200      	movs	r2, #0
 800e284:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800e288:	2303      	movs	r3, #3
 800e28a:	e00f      	b.n	800e2ac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	69da      	ldr	r2, [r3, #28]
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	4013      	ands	r3, r2
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	429a      	cmp	r2, r3
 800e29a:	bf0c      	ite	eq
 800e29c:	2301      	moveq	r3, #1
 800e29e:	2300      	movne	r3, #0
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	79fb      	ldrb	r3, [r7, #7]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d08d      	beq.n	800e1c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e2aa:	2300      	movs	r3, #0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2c2:	2b21      	cmp	r3, #33	; 0x21
 800e2c4:	d12a      	bne.n	800e31c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d110      	bne.n	800e2f4 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e2e0:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2f0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e2f2:	e013      	b.n	800e31c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2f8:	781a      	ldrb	r2, [r3, #0]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e304:	1c5a      	adds	r2, r3, #1
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e310:	b29b      	uxth	r3, r3
 800e312:	3b01      	subs	r3, #1
 800e314:	b29a      	uxth	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e31c:	bf00      	nop
 800e31e:	370c      	adds	r7, #12
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e336:	2b21      	cmp	r3, #33	; 0x21
 800e338:	d12f      	bne.n	800e39a <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e340:	b29b      	uxth	r3, r3
 800e342:	2b00      	cmp	r3, #0
 800e344:	d110      	bne.n	800e368 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e354:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e364:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e366:	e018      	b.n	800e39a <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e36c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	881b      	ldrh	r3, [r3, #0]
 800e372:	461a      	mov	r2, r3
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e37c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e382:	1c9a      	adds	r2, r3, #2
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e38e:	b29b      	uxth	r3, r3
 800e390:	3b01      	subs	r3, #1
 800e392:	b29a      	uxth	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e39a:	bf00      	nop
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr

0800e3a6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3a6:	b480      	push	{r7}
 800e3a8:	b085      	sub	sp, #20
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3b4:	2b21      	cmp	r3, #33	; 0x21
 800e3b6:	d13d      	bne.n	800e434 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3be:	81fb      	strh	r3, [r7, #14]
 800e3c0:	e035      	b.n	800e42e <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d111      	bne.n	800e3f2 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	689a      	ldr	r2, [r3, #8]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e3dc:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3ec:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800e3ee:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800e3f0:	e020      	b.n	800e434 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	69db      	ldr	r3, [r3, #28]
 800e3f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d013      	beq.n	800e428 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e404:	781a      	ldrb	r2, [r3, #0]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e410:	1c5a      	adds	r2, r3, #1
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	3b01      	subs	r3, #1
 800e420:	b29a      	uxth	r2, r3
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e428:	89fb      	ldrh	r3, [r7, #14]
 800e42a:	3b01      	subs	r3, #1
 800e42c:	81fb      	strh	r3, [r7, #14]
 800e42e:	89fb      	ldrh	r3, [r7, #14]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d1c6      	bne.n	800e3c2 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800e434:	bf00      	nop
 800e436:	3714      	adds	r7, #20
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e440:	b480      	push	{r7}
 800e442:	b085      	sub	sp, #20
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e44e:	2b21      	cmp	r3, #33	; 0x21
 800e450:	d142      	bne.n	800e4d8 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e458:	81fb      	strh	r3, [r7, #14]
 800e45a:	e03a      	b.n	800e4d2 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e462:	b29b      	uxth	r3, r3
 800e464:	2b00      	cmp	r3, #0
 800e466:	d111      	bne.n	800e48c <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	689a      	ldr	r2, [r3, #8]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e476:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e486:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800e488:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800e48a:	e025      	b.n	800e4d8 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	69db      	ldr	r3, [r3, #28]
 800e492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e496:	2b00      	cmp	r3, #0
 800e498:	d018      	beq.n	800e4cc <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e49e:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	881b      	ldrh	r3, [r3, #0]
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e4ae:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4b4:	1c9a      	adds	r2, r3, #2
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e4cc:	89fb      	ldrh	r3, [r7, #14]
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	81fb      	strh	r3, [r7, #14]
 800e4d2:	89fb      	ldrh	r3, [r7, #14]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1c1      	bne.n	800e45c <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800e4d8:	bf00      	nop
 800e4da:	3714      	adds	r7, #20
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4f2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4fa:	2b22      	cmp	r3, #34	; 0x22
 800e4fc:	d13b      	bne.n	800e576 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e504:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e506:	89bb      	ldrh	r3, [r7, #12]
 800e508:	b2d9      	uxtb	r1, r3
 800e50a:	89fb      	ldrh	r3, [r7, #14]
 800e50c:	b2da      	uxtb	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e512:	400a      	ands	r2, r1
 800e514:	b2d2      	uxtb	r2, r2
 800e516:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e51c:	1c5a      	adds	r2, r3, #1
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e528:	b29b      	uxth	r3, r3
 800e52a:	3b01      	subs	r3, #1
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d122      	bne.n	800e586 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e54e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	689a      	ldr	r2, [r3, #8]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f022 0201 	bic.w	r2, r2, #1
 800e55e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2220      	movs	r2, #32
 800e564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7f5 f96a 	bl	8003848 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e574:	e007      	b.n	800e586 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	699a      	ldr	r2, [r3, #24]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f042 0208 	orr.w	r2, r2, #8
 800e584:	619a      	str	r2, [r3, #24]
}
 800e586:	bf00      	nop
 800e588:	3710      	adds	r7, #16
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b084      	sub	sp, #16
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e59c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5a4:	2b22      	cmp	r3, #34	; 0x22
 800e5a6:	d13b      	bne.n	800e620 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ae:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5b4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800e5b6:	89ba      	ldrh	r2, [r7, #12]
 800e5b8:	89fb      	ldrh	r3, [r7, #14]
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5c6:	1c9a      	adds	r2, r3, #2
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d122      	bne.n	800e630 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e5f8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	689a      	ldr	r2, [r3, #8]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f022 0201 	bic.w	r2, r2, #1
 800e608:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2220      	movs	r2, #32
 800e60e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2200      	movs	r2, #0
 800e616:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7f5 f915 	bl	8003848 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e61e:	e007      	b.n	800e630 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	699a      	ldr	r2, [r3, #24]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f042 0208 	orr.w	r2, r2, #8
 800e62e:	619a      	str	r2, [r3, #24]
}
 800e630:	bf00      	nop
 800e632:	3710      	adds	r7, #16
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e646:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e64e:	2b22      	cmp	r3, #34	; 0x22
 800e650:	d168      	bne.n	800e724 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e658:	81fb      	strh	r3, [r7, #14]
 800e65a:	e03f      	b.n	800e6dc <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e662:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e664:	893b      	ldrh	r3, [r7, #8]
 800e666:	b2d9      	uxtb	r1, r3
 800e668:	89bb      	ldrh	r3, [r7, #12]
 800e66a:	b2da      	uxtb	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e670:	400a      	ands	r2, r1
 800e672:	b2d2      	uxtb	r2, r2
 800e674:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e67a:	1c5a      	adds	r2, r3, #1
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e686:	b29b      	uxth	r3, r3
 800e688:	3b01      	subs	r3, #1
 800e68a:	b29a      	uxth	r2, r3
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e698:	b29b      	uxth	r3, r3
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d11b      	bne.n	800e6d6 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e6ac:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	6812      	ldr	r2, [r2, #0]
 800e6b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e6bc:	f023 0301 	bic.w	r3, r3, #1
 800e6c0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2220      	movs	r2, #32
 800e6c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f7f5 f8b9 	bl	8003848 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e6d6:	89fb      	ldrh	r3, [r7, #14]
 800e6d8:	3b01      	subs	r3, #1
 800e6da:	81fb      	strh	r3, [r7, #14]
 800e6dc:	89fb      	ldrh	r3, [r7, #14]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d1bc      	bne.n	800e65c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6e8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e6ea:	897b      	ldrh	r3, [r7, #10]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d021      	beq.n	800e734 <UART_RxISR_8BIT_FIFOEN+0xfc>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e6f6:	897a      	ldrh	r2, [r7, #10]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d21b      	bcs.n	800e734 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	689a      	ldr	r2, [r3, #8]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e70a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	4a0b      	ldr	r2, [pc, #44]	; (800e73c <UART_RxISR_8BIT_FIFOEN+0x104>)
 800e710:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f042 0220 	orr.w	r2, r2, #32
 800e720:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e722:	e007      	b.n	800e734 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	699a      	ldr	r2, [r3, #24]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f042 0208 	orr.w	r2, r2, #8
 800e732:	619a      	str	r2, [r3, #24]
}
 800e734:	bf00      	nop
 800e736:	3710      	adds	r7, #16
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	0800e4e5 	.word	0x0800e4e5

0800e740 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e74e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e756:	2b22      	cmp	r3, #34	; 0x22
 800e758:	d168      	bne.n	800e82c <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e760:	82fb      	strh	r3, [r7, #22]
 800e762:	e03f      	b.n	800e7e4 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e770:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800e772:	8a3a      	ldrh	r2, [r7, #16]
 800e774:	8abb      	ldrh	r3, [r7, #20]
 800e776:	4013      	ands	r3, r2
 800e778:	b29a      	uxth	r2, r3
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e782:	1c9a      	adds	r2, r3, #2
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e78e:	b29b      	uxth	r3, r3
 800e790:	3b01      	subs	r3, #1
 800e792:	b29a      	uxth	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d11b      	bne.n	800e7de <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e7b4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	6812      	ldr	r2, [r2, #0]
 800e7c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e7c4:	f023 0301 	bic.w	r3, r3, #1
 800e7c8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2220      	movs	r2, #32
 800e7ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f7f5 f835 	bl	8003848 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e7de:	8afb      	ldrh	r3, [r7, #22]
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	82fb      	strh	r3, [r7, #22]
 800e7e4:	8afb      	ldrh	r3, [r7, #22]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d1bc      	bne.n	800e764 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7f0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e7f2:	8a7b      	ldrh	r3, [r7, #18]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d021      	beq.n	800e83c <UART_RxISR_16BIT_FIFOEN+0xfc>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e7fe:	8a7a      	ldrh	r2, [r7, #18]
 800e800:	429a      	cmp	r2, r3
 800e802:	d21b      	bcs.n	800e83c <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	689a      	ldr	r2, [r3, #8]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e812:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4a0b      	ldr	r2, [pc, #44]	; (800e844 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800e818:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f042 0220 	orr.w	r2, r2, #32
 800e828:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e82a:	e007      	b.n	800e83c <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	699a      	ldr	r2, [r3, #24]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f042 0208 	orr.w	r2, r2, #8
 800e83a:	619a      	str	r2, [r3, #24]
}
 800e83c:	bf00      	nop
 800e83e:	3718      	adds	r7, #24
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	0800e58f 	.word	0x0800e58f

0800e848 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e856:	2b01      	cmp	r3, #1
 800e858:	d101      	bne.n	800e85e <HAL_UARTEx_DisableFifoMode+0x16>
 800e85a:	2302      	movs	r3, #2
 800e85c:	e027      	b.n	800e8ae <HAL_UARTEx_DisableFifoMode+0x66>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2201      	movs	r2, #1
 800e862:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2224      	movs	r2, #36	; 0x24
 800e86a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f022 0201 	bic.w	r2, r2, #1
 800e884:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e88c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2220      	movs	r2, #32
 800e8a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3714      	adds	r7, #20
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr

0800e8ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b084      	sub	sp, #16
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
 800e8c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d101      	bne.n	800e8d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e8ce:	2302      	movs	r3, #2
 800e8d0:	e02d      	b.n	800e92e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2224      	movs	r2, #36	; 0x24
 800e8de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f022 0201 	bic.w	r2, r2, #1
 800e8f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	689b      	ldr	r3, [r3, #8]
 800e900:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	683a      	ldr	r2, [r7, #0]
 800e90a:	430a      	orrs	r2, r1
 800e90c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 f850 	bl	800e9b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2220      	movs	r2, #32
 800e920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2200      	movs	r2, #0
 800e928:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e92c:	2300      	movs	r3, #0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3710      	adds	r7, #16
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e936:	b580      	push	{r7, lr}
 800e938:	b084      	sub	sp, #16
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
 800e93e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e946:	2b01      	cmp	r3, #1
 800e948:	d101      	bne.n	800e94e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e94a:	2302      	movs	r3, #2
 800e94c:	e02d      	b.n	800e9aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2201      	movs	r2, #1
 800e952:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2224      	movs	r2, #36	; 0x24
 800e95a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f022 0201 	bic.w	r2, r2, #1
 800e974:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	689b      	ldr	r3, [r3, #8]
 800e97c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	683a      	ldr	r2, [r7, #0]
 800e986:	430a      	orrs	r2, r1
 800e988:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 f812 	bl	800e9b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2220      	movs	r2, #32
 800e99c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e9a8:	2300      	movs	r3, #0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3710      	adds	r7, #16
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
	...

0800e9b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b089      	sub	sp, #36	; 0x24
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800e9bc:	4a2f      	ldr	r2, [pc, #188]	; (800ea7c <UARTEx_SetNbDataToProcess+0xc8>)
 800e9be:	f107 0314 	add.w	r3, r7, #20
 800e9c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9c6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800e9ca:	4a2d      	ldr	r2, [pc, #180]	; (800ea80 <UARTEx_SetNbDataToProcess+0xcc>)
 800e9cc:	f107 030c 	add.w	r3, r7, #12
 800e9d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9d4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d108      	bne.n	800e9f2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e9f0:	e03d      	b.n	800ea6e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e9f2:	2308      	movs	r3, #8
 800e9f4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e9f6:	2308      	movs	r3, #8
 800e9f8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	0e5b      	lsrs	r3, r3, #25
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	f003 0307 	and.w	r3, r3, #7
 800ea08:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	689b      	ldr	r3, [r3, #8]
 800ea10:	0f5b      	lsrs	r3, r3, #29
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	f003 0307 	and.w	r3, r3, #7
 800ea18:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ea1a:	7fbb      	ldrb	r3, [r7, #30]
 800ea1c:	7f3a      	ldrb	r2, [r7, #28]
 800ea1e:	f107 0120 	add.w	r1, r7, #32
 800ea22:	440a      	add	r2, r1
 800ea24:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ea28:	fb02 f303 	mul.w	r3, r2, r3
 800ea2c:	7f3a      	ldrb	r2, [r7, #28]
 800ea2e:	f107 0120 	add.w	r1, r7, #32
 800ea32:	440a      	add	r2, r1
 800ea34:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ea38:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ea44:	7ffb      	ldrb	r3, [r7, #31]
 800ea46:	7f7a      	ldrb	r2, [r7, #29]
 800ea48:	f107 0120 	add.w	r1, r7, #32
 800ea4c:	440a      	add	r2, r1
 800ea4e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ea52:	fb02 f303 	mul.w	r3, r2, r3
 800ea56:	7f7a      	ldrb	r2, [r7, #29]
 800ea58:	f107 0120 	add.w	r1, r7, #32
 800ea5c:	440a      	add	r2, r1
 800ea5e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ea62:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ea6e:	bf00      	nop
 800ea70:	3724      	adds	r7, #36	; 0x24
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	08017acc 	.word	0x08017acc
 800ea80:	08017ad4 	.word	0x08017ad4

0800ea84 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ea84:	b480      	push	{r7}
 800ea86:	b085      	sub	sp, #20
 800ea88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea8a:	f3ef 8305 	mrs	r3, IPSR
 800ea8e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d10f      	bne.n	800eab6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea96:	f3ef 8310 	mrs	r3, PRIMASK
 800ea9a:	607b      	str	r3, [r7, #4]
  return(result);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d109      	bne.n	800eab6 <osKernelInitialize+0x32>
 800eaa2:	4b11      	ldr	r3, [pc, #68]	; (800eae8 <osKernelInitialize+0x64>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d109      	bne.n	800eabe <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eaaa:	f3ef 8311 	mrs	r3, BASEPRI
 800eaae:	603b      	str	r3, [r7, #0]
  return(result);
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d003      	beq.n	800eabe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800eab6:	f06f 0305 	mvn.w	r3, #5
 800eaba:	60fb      	str	r3, [r7, #12]
 800eabc:	e00c      	b.n	800ead8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800eabe:	4b0a      	ldr	r3, [pc, #40]	; (800eae8 <osKernelInitialize+0x64>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d105      	bne.n	800ead2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800eac6:	4b08      	ldr	r3, [pc, #32]	; (800eae8 <osKernelInitialize+0x64>)
 800eac8:	2201      	movs	r2, #1
 800eaca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800eacc:	2300      	movs	r3, #0
 800eace:	60fb      	str	r3, [r7, #12]
 800ead0:	e002      	b.n	800ead8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ead2:	f04f 33ff 	mov.w	r3, #4294967295
 800ead6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ead8:	68fb      	ldr	r3, [r7, #12]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3714      	adds	r7, #20
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	20000adc 	.word	0x20000adc

0800eaec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eaf2:	f3ef 8305 	mrs	r3, IPSR
 800eaf6:	60bb      	str	r3, [r7, #8]
  return(result);
 800eaf8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d10f      	bne.n	800eb1e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eafe:	f3ef 8310 	mrs	r3, PRIMASK
 800eb02:	607b      	str	r3, [r7, #4]
  return(result);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d109      	bne.n	800eb1e <osKernelStart+0x32>
 800eb0a:	4b11      	ldr	r3, [pc, #68]	; (800eb50 <osKernelStart+0x64>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	2b02      	cmp	r3, #2
 800eb10:	d109      	bne.n	800eb26 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb12:	f3ef 8311 	mrs	r3, BASEPRI
 800eb16:	603b      	str	r3, [r7, #0]
  return(result);
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d003      	beq.n	800eb26 <osKernelStart+0x3a>
    stat = osErrorISR;
 800eb1e:	f06f 0305 	mvn.w	r3, #5
 800eb22:	60fb      	str	r3, [r7, #12]
 800eb24:	e00e      	b.n	800eb44 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800eb26:	4b0a      	ldr	r3, [pc, #40]	; (800eb50 <osKernelStart+0x64>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d107      	bne.n	800eb3e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800eb2e:	4b08      	ldr	r3, [pc, #32]	; (800eb50 <osKernelStart+0x64>)
 800eb30:	2202      	movs	r2, #2
 800eb32:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800eb34:	f002 ff4e 	bl	80119d4 <vTaskStartScheduler>
      stat = osOK;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	60fb      	str	r3, [r7, #12]
 800eb3c:	e002      	b.n	800eb44 <osKernelStart+0x58>
    } else {
      stat = osError;
 800eb3e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800eb44:	68fb      	ldr	r3, [r7, #12]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	20000adc 	.word	0x20000adc

0800eb54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b092      	sub	sp, #72	; 0x48
 800eb58:	af04      	add	r7, sp, #16
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eb60:	2300      	movs	r3, #0
 800eb62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb64:	f3ef 8305 	mrs	r3, IPSR
 800eb68:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800eb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f040 8095 	bne.w	800ec9c <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb72:	f3ef 8310 	mrs	r3, PRIMASK
 800eb76:	623b      	str	r3, [r7, #32]
  return(result);
 800eb78:	6a3b      	ldr	r3, [r7, #32]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	f040 808e 	bne.w	800ec9c <osThreadNew+0x148>
 800eb80:	4b49      	ldr	r3, [pc, #292]	; (800eca8 <osThreadNew+0x154>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	d106      	bne.n	800eb96 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb88:	f3ef 8311 	mrs	r3, BASEPRI
 800eb8c:	61fb      	str	r3, [r7, #28]
  return(result);
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	f040 8083 	bne.w	800ec9c <osThreadNew+0x148>
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d07f      	beq.n	800ec9c <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 800eb9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eba0:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800eba2:	2318      	movs	r3, #24
 800eba4:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800eba6:	2300      	movs	r3, #0
 800eba8:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800ebaa:	f107 031b 	add.w	r3, r7, #27
 800ebae:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800ebb0:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb4:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d045      	beq.n	800ec48 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d002      	beq.n	800ebca <osThreadNew+0x76>
        name = attr->name;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	699b      	ldr	r3, [r3, #24]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d002      	beq.n	800ebd8 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	699b      	ldr	r3, [r3, #24]
 800ebd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ebd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d008      	beq.n	800ebf0 <osThreadNew+0x9c>
 800ebde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe0:	2b38      	cmp	r3, #56	; 0x38
 800ebe2:	d805      	bhi.n	800ebf0 <osThreadNew+0x9c>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	f003 0301 	and.w	r3, r3, #1
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d001      	beq.n	800ebf4 <osThreadNew+0xa0>
        return (NULL);
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	e054      	b.n	800ec9e <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	695b      	ldr	r3, [r3, #20]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d003      	beq.n	800ec04 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	695b      	ldr	r3, [r3, #20]
 800ec00:	089b      	lsrs	r3, r3, #2
 800ec02:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	689b      	ldr	r3, [r3, #8]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00e      	beq.n	800ec2a <osThreadNew+0xd6>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	2b63      	cmp	r3, #99	; 0x63
 800ec12:	d90a      	bls.n	800ec2a <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d006      	beq.n	800ec2a <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	695b      	ldr	r3, [r3, #20]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d002      	beq.n	800ec2a <osThreadNew+0xd6>
        mem = 1;
 800ec24:	2301      	movs	r3, #1
 800ec26:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec28:	e010      	b.n	800ec4c <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	689b      	ldr	r3, [r3, #8]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10c      	bne.n	800ec4c <osThreadNew+0xf8>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d108      	bne.n	800ec4c <osThreadNew+0xf8>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	691b      	ldr	r3, [r3, #16]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d104      	bne.n	800ec4c <osThreadNew+0xf8>
          mem = 0;
 800ec42:	2300      	movs	r3, #0
 800ec44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec46:	e001      	b.n	800ec4c <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800ec4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d110      	bne.n	800ec74 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ec5a:	9202      	str	r2, [sp, #8]
 800ec5c:	9301      	str	r3, [sp, #4]
 800ec5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec60:	9300      	str	r3, [sp, #0]
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f002 fce5 	bl	8011638 <xTaskCreateStatic>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	617b      	str	r3, [r7, #20]
 800ec72:	e013      	b.n	800ec9c <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 800ec74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d110      	bne.n	800ec9c <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7c:	b29a      	uxth	r2, r3
 800ec7e:	f107 0314 	add.w	r3, r7, #20
 800ec82:	9301      	str	r3, [sp, #4]
 800ec84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	f002 fd2c 	bl	80116ea <xTaskCreate>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d001      	beq.n	800ec9c <osThreadNew+0x148>
          hTask = NULL;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ec9c:	697b      	ldr	r3, [r7, #20]
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3738      	adds	r7, #56	; 0x38
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	20000adc 	.word	0x20000adc

0800ecac <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b08a      	sub	sp, #40	; 0x28
 800ecb0:	af02      	add	r7, sp, #8
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d002      	beq.n	800ecc6 <osThreadFlagsSet+0x1a>
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	da03      	bge.n	800ecce <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ecc6:	f06f 0303 	mvn.w	r3, #3
 800ecca:	60fb      	str	r3, [r7, #12]
 800eccc:	e046      	b.n	800ed5c <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800ecce:	f04f 33ff 	mov.w	r3, #4294967295
 800ecd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecd4:	f3ef 8305 	mrs	r3, IPSR
 800ecd8:	61bb      	str	r3, [r7, #24]
  return(result);
 800ecda:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10f      	bne.n	800ed00 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ece0:	f3ef 8310 	mrs	r3, PRIMASK
 800ece4:	617b      	str	r3, [r7, #20]
  return(result);
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d109      	bne.n	800ed00 <osThreadFlagsSet+0x54>
 800ecec:	4b1e      	ldr	r3, [pc, #120]	; (800ed68 <osThreadFlagsSet+0xbc>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2b02      	cmp	r3, #2
 800ecf2:	d126      	bne.n	800ed42 <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ecf4:	f3ef 8311 	mrs	r3, BASEPRI
 800ecf8:	613b      	str	r3, [r7, #16]
  return(result);
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d020      	beq.n	800ed42 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800ed00:	2300      	movs	r3, #0
 800ed02:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ed04:	f107 0308 	add.w	r3, r7, #8
 800ed08:	9300      	str	r3, [sp, #0]
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	6839      	ldr	r1, [r7, #0]
 800ed10:	69f8      	ldr	r0, [r7, #28]
 800ed12:	f003 fe29 	bl	8012968 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ed16:	f107 020c 	add.w	r2, r7, #12
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	9300      	str	r3, [sp, #0]
 800ed1e:	4613      	mov	r3, r2
 800ed20:	2200      	movs	r2, #0
 800ed22:	2100      	movs	r1, #0
 800ed24:	69f8      	ldr	r0, [r7, #28]
 800ed26:	f003 fe1f 	bl	8012968 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d015      	beq.n	800ed5c <osThreadFlagsSet+0xb0>
 800ed30:	4b0e      	ldr	r3, [pc, #56]	; (800ed6c <osThreadFlagsSet+0xc0>)
 800ed32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed36:	601a      	str	r2, [r3, #0]
 800ed38:	f3bf 8f4f 	dsb	sy
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	e00c      	b.n	800ed5c <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ed42:	2300      	movs	r3, #0
 800ed44:	2201      	movs	r2, #1
 800ed46:	6839      	ldr	r1, [r7, #0]
 800ed48:	69f8      	ldr	r0, [r7, #28]
 800ed4a:	f003 fd69 	bl	8012820 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ed4e:	f107 030c 	add.w	r3, r7, #12
 800ed52:	2200      	movs	r2, #0
 800ed54:	2100      	movs	r1, #0
 800ed56:	69f8      	ldr	r0, [r7, #28]
 800ed58:	f003 fd62 	bl	8012820 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3720      	adds	r7, #32
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	20000adc 	.word	0x20000adc
 800ed6c:	e000ed04 	.word	0xe000ed04

0800ed70 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b088      	sub	sp, #32
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed78:	f3ef 8305 	mrs	r3, IPSR
 800ed7c:	617b      	str	r3, [r7, #20]
  return(result);
 800ed7e:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d10f      	bne.n	800eda4 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed84:	f3ef 8310 	mrs	r3, PRIMASK
 800ed88:	613b      	str	r3, [r7, #16]
  return(result);
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d109      	bne.n	800eda4 <osThreadFlagsClear+0x34>
 800ed90:	4b1e      	ldr	r3, [pc, #120]	; (800ee0c <osThreadFlagsClear+0x9c>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	2b02      	cmp	r3, #2
 800ed96:	d109      	bne.n	800edac <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed98:	f3ef 8311 	mrs	r3, BASEPRI
 800ed9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d003      	beq.n	800edac <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 800eda4:	f06f 0305 	mvn.w	r3, #5
 800eda8:	61fb      	str	r3, [r7, #28]
 800edaa:	e02a      	b.n	800ee02 <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	da03      	bge.n	800edba <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 800edb2:	f06f 0303 	mvn.w	r3, #3
 800edb6:	61fb      	str	r3, [r7, #28]
 800edb8:	e023      	b.n	800ee02 <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800edba:	f003 fb37 	bl	801242c <xTaskGetCurrentTaskHandle>
 800edbe:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800edc0:	f107 0308 	add.w	r3, r7, #8
 800edc4:	2200      	movs	r2, #0
 800edc6:	2100      	movs	r1, #0
 800edc8:	69b8      	ldr	r0, [r7, #24]
 800edca:	f003 fd29 	bl	8012820 <xTaskGenericNotify>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d113      	bne.n	800edfc <osThreadFlagsClear+0x8c>
      rflags = cflags;
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	43da      	mvns	r2, r3
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	4013      	ands	r3, r2
 800ede0:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800ede2:	68b9      	ldr	r1, [r7, #8]
 800ede4:	2300      	movs	r3, #0
 800ede6:	2203      	movs	r2, #3
 800ede8:	69b8      	ldr	r0, [r7, #24]
 800edea:	f003 fd19 	bl	8012820 <xTaskGenericNotify>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d006      	beq.n	800ee02 <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 800edf4:	f04f 33ff 	mov.w	r3, #4294967295
 800edf8:	61fb      	str	r3, [r7, #28]
 800edfa:	e002      	b.n	800ee02 <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800edfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ee00:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800ee02:	69fb      	ldr	r3, [r7, #28]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3720      	adds	r7, #32
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	20000adc 	.word	0x20000adc

0800ee10 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b08e      	sub	sp, #56	; 0x38
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	60f8      	str	r0, [r7, #12]
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee1c:	f3ef 8305 	mrs	r3, IPSR
 800ee20:	61fb      	str	r3, [r7, #28]
  return(result);
 800ee22:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d10f      	bne.n	800ee48 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee28:	f3ef 8310 	mrs	r3, PRIMASK
 800ee2c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d109      	bne.n	800ee48 <osThreadFlagsWait+0x38>
 800ee34:	4b3f      	ldr	r3, [pc, #252]	; (800ef34 <osThreadFlagsWait+0x124>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	d109      	bne.n	800ee50 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee3c:	f3ef 8311 	mrs	r3, BASEPRI
 800ee40:	617b      	str	r3, [r7, #20]
  return(result);
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d003      	beq.n	800ee50 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800ee48:	f06f 0305 	mvn.w	r3, #5
 800ee4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ee4e:	e06b      	b.n	800ef28 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	da03      	bge.n	800ee5e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800ee56:	f06f 0303 	mvn.w	r3, #3
 800ee5a:	637b      	str	r3, [r7, #52]	; 0x34
 800ee5c:	e064      	b.n	800ef28 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	f003 0302 	and.w	r3, r3, #2
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d002      	beq.n	800ee6e <osThreadFlagsWait+0x5e>
      clear = 0U;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	633b      	str	r3, [r7, #48]	; 0x30
 800ee6c:	e001      	b.n	800ee72 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800ee72:	2300      	movs	r3, #0
 800ee74:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800ee7a:	f002 fef3 	bl	8011c64 <xTaskGetTickCount>
 800ee7e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800ee80:	f107 0210 	add.w	r2, r7, #16
 800ee84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee88:	2000      	movs	r0, #0
 800ee8a:	f003 fc6f 	bl	801276c <xTaskNotifyWait>
 800ee8e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800ee90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	d137      	bne.n	800ef06 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800ee96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	4013      	ands	r3, r2
 800ee9c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eea2:	4313      	orrs	r3, r2
 800eea4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	f003 0301 	and.w	r3, r3, #1
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d00c      	beq.n	800eeca <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800eeb0:	68fa      	ldr	r2, [r7, #12]
 800eeb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb4:	4013      	ands	r3, r2
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d032      	beq.n	800ef22 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d10f      	bne.n	800eee2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800eec2:	f06f 0302 	mvn.w	r3, #2
 800eec6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800eec8:	e02e      	b.n	800ef28 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eece:	4013      	ands	r3, r2
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d128      	bne.n	800ef26 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d103      	bne.n	800eee2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800eeda:	f06f 0302 	mvn.w	r3, #2
 800eede:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800eee0:	e022      	b.n	800ef28 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800eee2:	f002 febf 	bl	8011c64 <xTaskGetTickCount>
 800eee6:	4602      	mov	r2, r0
 800eee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeea:	1ad3      	subs	r3, r2, r3
 800eeec:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800eeee:	6a3a      	ldr	r2, [r7, #32]
 800eef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d902      	bls.n	800eefc <osThreadFlagsWait+0xec>
          tout  = 0;
 800eef6:	2300      	movs	r3, #0
 800eef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eefa:	e00e      	b.n	800ef1a <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800eefc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eefe:	6a3b      	ldr	r3, [r7, #32]
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef04:	e009      	b.n	800ef1a <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d103      	bne.n	800ef14 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800ef0c:	f06f 0302 	mvn.w	r3, #2
 800ef10:	637b      	str	r3, [r7, #52]	; 0x34
 800ef12:	e002      	b.n	800ef1a <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800ef14:	f06f 0301 	mvn.w	r3, #1
 800ef18:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800ef1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d1af      	bne.n	800ee80 <osThreadFlagsWait+0x70>
 800ef20:	e002      	b.n	800ef28 <osThreadFlagsWait+0x118>
            break;
 800ef22:	bf00      	nop
 800ef24:	e000      	b.n	800ef28 <osThreadFlagsWait+0x118>
            break;
 800ef26:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800ef28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3738      	adds	r7, #56	; 0x38
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	20000adc 	.word	0x20000adc

0800ef38 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b086      	sub	sp, #24
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef40:	f3ef 8305 	mrs	r3, IPSR
 800ef44:	613b      	str	r3, [r7, #16]
  return(result);
 800ef46:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d10f      	bne.n	800ef6c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef4c:	f3ef 8310 	mrs	r3, PRIMASK
 800ef50:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d109      	bne.n	800ef6c <osDelay+0x34>
 800ef58:	4b0d      	ldr	r3, [pc, #52]	; (800ef90 <osDelay+0x58>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2b02      	cmp	r3, #2
 800ef5e:	d109      	bne.n	800ef74 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef60:	f3ef 8311 	mrs	r3, BASEPRI
 800ef64:	60bb      	str	r3, [r7, #8]
  return(result);
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d003      	beq.n	800ef74 <osDelay+0x3c>
    stat = osErrorISR;
 800ef6c:	f06f 0305 	mvn.w	r3, #5
 800ef70:	617b      	str	r3, [r7, #20]
 800ef72:	e007      	b.n	800ef84 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d002      	beq.n	800ef84 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f002 fcf4 	bl	801196c <vTaskDelay>
    }
  }

  return (stat);
 800ef84:	697b      	ldr	r3, [r7, #20]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3718      	adds	r7, #24
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	20000adc 	.word	0x20000adc

0800ef94 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f004 f9bb 	bl	8013318 <pvTimerGetTimerID>
 800efa2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d005      	beq.n	800efb6 <TimerCallback+0x22>
    callb->func (callb->arg);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68fa      	ldr	r2, [r7, #12]
 800efb0:	6852      	ldr	r2, [r2, #4]
 800efb2:	4610      	mov	r0, r2
 800efb4:	4798      	blx	r3
  }
}
 800efb6:	bf00      	nop
 800efb8:	3710      	adds	r7, #16
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
	...

0800efc0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b08e      	sub	sp, #56	; 0x38
 800efc4:	af02      	add	r7, sp, #8
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	607a      	str	r2, [r7, #4]
 800efca:	603b      	str	r3, [r7, #0]
 800efcc:	460b      	mov	r3, r1
 800efce:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800efd0:	2300      	movs	r3, #0
 800efd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efd4:	f3ef 8305 	mrs	r3, IPSR
 800efd8:	61bb      	str	r3, [r7, #24]
  return(result);
 800efda:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d16a      	bne.n	800f0b6 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efe0:	f3ef 8310 	mrs	r3, PRIMASK
 800efe4:	617b      	str	r3, [r7, #20]
  return(result);
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d164      	bne.n	800f0b6 <osTimerNew+0xf6>
 800efec:	4b34      	ldr	r3, [pc, #208]	; (800f0c0 <osTimerNew+0x100>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	d105      	bne.n	800f000 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eff4:	f3ef 8311 	mrs	r3, BASEPRI
 800eff8:	613b      	str	r3, [r7, #16]
  return(result);
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d15a      	bne.n	800f0b6 <osTimerNew+0xf6>
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d057      	beq.n	800f0b6 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f006:	2008      	movs	r0, #8
 800f008:	f000 fd92 	bl	800fb30 <pvPortMalloc>
 800f00c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d050      	beq.n	800f0b6 <osTimerNew+0xf6>
      callb->func = func;
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f020:	7afb      	ldrb	r3, [r7, #11]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d102      	bne.n	800f02c <osTimerNew+0x6c>
        reload = pdFALSE;
 800f026:	2300      	movs	r3, #0
 800f028:	627b      	str	r3, [r7, #36]	; 0x24
 800f02a:	e001      	b.n	800f030 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800f02c:	2301      	movs	r3, #1
 800f02e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800f030:	f04f 33ff 	mov.w	r3, #4294967295
 800f034:	623b      	str	r3, [r7, #32]
      name = NULL;
 800f036:	2300      	movs	r3, #0
 800f038:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d01c      	beq.n	800f07a <osTimerNew+0xba>
        if (attr->name != NULL) {
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d002      	beq.n	800f04e <osTimerNew+0x8e>
          name = attr->name;
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d006      	beq.n	800f064 <osTimerNew+0xa4>
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	68db      	ldr	r3, [r3, #12]
 800f05a:	2b2f      	cmp	r3, #47	; 0x2f
 800f05c:	d902      	bls.n	800f064 <osTimerNew+0xa4>
          mem = 1;
 800f05e:	2301      	movs	r3, #1
 800f060:	623b      	str	r3, [r7, #32]
 800f062:	e00c      	b.n	800f07e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d108      	bne.n	800f07e <osTimerNew+0xbe>
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d104      	bne.n	800f07e <osTimerNew+0xbe>
            mem = 0;
 800f074:	2300      	movs	r3, #0
 800f076:	623b      	str	r3, [r7, #32]
 800f078:	e001      	b.n	800f07e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800f07e:	6a3b      	ldr	r3, [r7, #32]
 800f080:	2b01      	cmp	r3, #1
 800f082:	d10c      	bne.n	800f09e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	689b      	ldr	r3, [r3, #8]
 800f088:	9301      	str	r3, [sp, #4]
 800f08a:	4b0e      	ldr	r3, [pc, #56]	; (800f0c4 <osTimerNew+0x104>)
 800f08c:	9300      	str	r3, [sp, #0]
 800f08e:	69fb      	ldr	r3, [r7, #28]
 800f090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f092:	2101      	movs	r1, #1
 800f094:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f096:	f003 fdec 	bl	8012c72 <xTimerCreateStatic>
 800f09a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f09c:	e00b      	b.n	800f0b6 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800f09e:	6a3b      	ldr	r3, [r7, #32]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d108      	bne.n	800f0b6 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f0a4:	4b07      	ldr	r3, [pc, #28]	; (800f0c4 <osTimerNew+0x104>)
 800f0a6:	9300      	str	r3, [sp, #0]
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0ac:	2101      	movs	r1, #1
 800f0ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0b0:	f003 fdbe 	bl	8012c30 <xTimerCreate>
 800f0b4:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3730      	adds	r7, #48	; 0x30
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	20000adc 	.word	0x20000adc
 800f0c4:	0800ef95 	.word	0x0800ef95

0800f0c8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b08a      	sub	sp, #40	; 0x28
 800f0cc:	af02      	add	r7, sp, #8
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0d6:	f3ef 8305 	mrs	r3, IPSR
 800f0da:	617b      	str	r3, [r7, #20]
  return(result);
 800f0dc:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d10f      	bne.n	800f102 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0e2:	f3ef 8310 	mrs	r3, PRIMASK
 800f0e6:	613b      	str	r3, [r7, #16]
  return(result);
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d109      	bne.n	800f102 <osTimerStart+0x3a>
 800f0ee:	4b15      	ldr	r3, [pc, #84]	; (800f144 <osTimerStart+0x7c>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	2b02      	cmp	r3, #2
 800f0f4:	d109      	bne.n	800f10a <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f0f6:	f3ef 8311 	mrs	r3, BASEPRI
 800f0fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d003      	beq.n	800f10a <osTimerStart+0x42>
    stat = osErrorISR;
 800f102:	f06f 0305 	mvn.w	r3, #5
 800f106:	61fb      	str	r3, [r7, #28]
 800f108:	e017      	b.n	800f13a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d103      	bne.n	800f118 <osTimerStart+0x50>
    stat = osErrorParameter;
 800f110:	f06f 0303 	mvn.w	r3, #3
 800f114:	61fb      	str	r3, [r7, #28]
 800f116:	e010      	b.n	800f13a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800f118:	2300      	movs	r3, #0
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	2300      	movs	r3, #0
 800f11e:	683a      	ldr	r2, [r7, #0]
 800f120:	2104      	movs	r1, #4
 800f122:	69b8      	ldr	r0, [r7, #24]
 800f124:	f003 fe12 	bl	8012d4c <xTimerGenericCommand>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d102      	bne.n	800f134 <osTimerStart+0x6c>
      stat = osOK;
 800f12e:	2300      	movs	r3, #0
 800f130:	61fb      	str	r3, [r7, #28]
 800f132:	e002      	b.n	800f13a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800f134:	f06f 0302 	mvn.w	r3, #2
 800f138:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800f13a:	69fb      	ldr	r3, [r7, #28]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3720      	adds	r7, #32
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	20000adc 	.word	0x20000adc

0800f148 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800f148:	b580      	push	{r7, lr}
 800f14a:	b08a      	sub	sp, #40	; 0x28
 800f14c:	af02      	add	r7, sp, #8
 800f14e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f154:	f3ef 8305 	mrs	r3, IPSR
 800f158:	617b      	str	r3, [r7, #20]
  return(result);
 800f15a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10f      	bne.n	800f180 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f160:	f3ef 8310 	mrs	r3, PRIMASK
 800f164:	613b      	str	r3, [r7, #16]
  return(result);
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d109      	bne.n	800f180 <osTimerStop+0x38>
 800f16c:	4b1a      	ldr	r3, [pc, #104]	; (800f1d8 <osTimerStop+0x90>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2b02      	cmp	r3, #2
 800f172:	d109      	bne.n	800f188 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f174:	f3ef 8311 	mrs	r3, BASEPRI
 800f178:	60fb      	str	r3, [r7, #12]
  return(result);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d003      	beq.n	800f188 <osTimerStop+0x40>
    stat = osErrorISR;
 800f180:	f06f 0305 	mvn.w	r3, #5
 800f184:	61fb      	str	r3, [r7, #28]
 800f186:	e021      	b.n	800f1cc <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d103      	bne.n	800f196 <osTimerStop+0x4e>
    stat = osErrorParameter;
 800f18e:	f06f 0303 	mvn.w	r3, #3
 800f192:	61fb      	str	r3, [r7, #28]
 800f194:	e01a      	b.n	800f1cc <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800f196:	69b8      	ldr	r0, [r7, #24]
 800f198:	f004 f89a 	bl	80132d0 <xTimerIsTimerActive>
 800f19c:	4603      	mov	r3, r0
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d103      	bne.n	800f1aa <osTimerStop+0x62>
      stat = osErrorResource;
 800f1a2:	f06f 0302 	mvn.w	r3, #2
 800f1a6:	61fb      	str	r3, [r7, #28]
 800f1a8:	e010      	b.n	800f1cc <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	9300      	str	r3, [sp, #0]
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	2103      	movs	r1, #3
 800f1b4:	69b8      	ldr	r0, [r7, #24]
 800f1b6:	f003 fdc9 	bl	8012d4c <xTimerGenericCommand>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d102      	bne.n	800f1c6 <osTimerStop+0x7e>
        stat = osOK;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	61fb      	str	r3, [r7, #28]
 800f1c4:	e002      	b.n	800f1cc <osTimerStop+0x84>
      } else {
        stat = osError;
 800f1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ca:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800f1cc:	69fb      	ldr	r3, [r7, #28]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3720      	adds	r7, #32
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	20000adc 	.word	0x20000adc

0800f1dc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b08a      	sub	sp, #40	; 0x28
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1e8:	f3ef 8305 	mrs	r3, IPSR
 800f1ec:	613b      	str	r3, [r7, #16]
  return(result);
 800f1ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f040 8085 	bne.w	800f300 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1f6:	f3ef 8310 	mrs	r3, PRIMASK
 800f1fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d17e      	bne.n	800f300 <osMutexNew+0x124>
 800f202:	4b42      	ldr	r3, [pc, #264]	; (800f30c <osMutexNew+0x130>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2b02      	cmp	r3, #2
 800f208:	d105      	bne.n	800f216 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f20a:	f3ef 8311 	mrs	r3, BASEPRI
 800f20e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d174      	bne.n	800f300 <osMutexNew+0x124>
    if (attr != NULL) {
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d003      	beq.n	800f224 <osMutexNew+0x48>
      type = attr->attr_bits;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	623b      	str	r3, [r7, #32]
 800f222:	e001      	b.n	800f228 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800f224:	2300      	movs	r3, #0
 800f226:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f228:	6a3b      	ldr	r3, [r7, #32]
 800f22a:	f003 0301 	and.w	r3, r3, #1
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d002      	beq.n	800f238 <osMutexNew+0x5c>
      rmtx = 1U;
 800f232:	2301      	movs	r3, #1
 800f234:	61fb      	str	r3, [r7, #28]
 800f236:	e001      	b.n	800f23c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800f238:	2300      	movs	r3, #0
 800f23a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f23c:	6a3b      	ldr	r3, [r7, #32]
 800f23e:	f003 0308 	and.w	r3, r3, #8
 800f242:	2b00      	cmp	r3, #0
 800f244:	d15c      	bne.n	800f300 <osMutexNew+0x124>
      mem = -1;
 800f246:	f04f 33ff 	mov.w	r3, #4294967295
 800f24a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d015      	beq.n	800f27e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	689b      	ldr	r3, [r3, #8]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d006      	beq.n	800f268 <osMutexNew+0x8c>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	2b4f      	cmp	r3, #79	; 0x4f
 800f260:	d902      	bls.n	800f268 <osMutexNew+0x8c>
          mem = 1;
 800f262:	2301      	movs	r3, #1
 800f264:	61bb      	str	r3, [r7, #24]
 800f266:	e00c      	b.n	800f282 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d108      	bne.n	800f282 <osMutexNew+0xa6>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	68db      	ldr	r3, [r3, #12]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d104      	bne.n	800f282 <osMutexNew+0xa6>
            mem = 0;
 800f278:	2300      	movs	r3, #0
 800f27a:	61bb      	str	r3, [r7, #24]
 800f27c:	e001      	b.n	800f282 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800f27e:	2300      	movs	r3, #0
 800f280:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f282:	69bb      	ldr	r3, [r7, #24]
 800f284:	2b01      	cmp	r3, #1
 800f286:	d112      	bne.n	800f2ae <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d007      	beq.n	800f29e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	689b      	ldr	r3, [r3, #8]
 800f292:	4619      	mov	r1, r3
 800f294:	2004      	movs	r0, #4
 800f296:	f001 fa63 	bl	8010760 <xQueueCreateMutexStatic>
 800f29a:	6278      	str	r0, [r7, #36]	; 0x24
 800f29c:	e016      	b.n	800f2cc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	689b      	ldr	r3, [r3, #8]
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	2001      	movs	r0, #1
 800f2a6:	f001 fa5b 	bl	8010760 <xQueueCreateMutexStatic>
 800f2aa:	6278      	str	r0, [r7, #36]	; 0x24
 800f2ac:	e00e      	b.n	800f2cc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800f2ae:	69bb      	ldr	r3, [r7, #24]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d10b      	bne.n	800f2cc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d004      	beq.n	800f2c4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800f2ba:	2004      	movs	r0, #4
 800f2bc:	f001 fa38 	bl	8010730 <xQueueCreateMutex>
 800f2c0:	6278      	str	r0, [r7, #36]	; 0x24
 800f2c2:	e003      	b.n	800f2cc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800f2c4:	2001      	movs	r0, #1
 800f2c6:	f001 fa33 	bl	8010730 <xQueueCreateMutex>
 800f2ca:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d00c      	beq.n	800f2ec <osMutexNew+0x110>
        if (attr != NULL) {
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d003      	beq.n	800f2e0 <osMutexNew+0x104>
          name = attr->name;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	617b      	str	r3, [r7, #20]
 800f2de:	e001      	b.n	800f2e4 <osMutexNew+0x108>
        } else {
          name = NULL;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800f2e4:	6979      	ldr	r1, [r7, #20]
 800f2e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2e8:	f002 f920 	bl	801152c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d006      	beq.n	800f300 <osMutexNew+0x124>
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d003      	beq.n	800f300 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fa:	f043 0301 	orr.w	r3, r3, #1
 800f2fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f302:	4618      	mov	r0, r3
 800f304:	3728      	adds	r7, #40	; 0x28
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	20000adc 	.word	0x20000adc

0800f310 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f310:	b580      	push	{r7, lr}
 800f312:	b088      	sub	sp, #32
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f023 0301 	bic.w	r3, r3, #1
 800f320:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f003 0301 	and.w	r3, r3, #1
 800f328:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800f32a:	2300      	movs	r3, #0
 800f32c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f32e:	f3ef 8305 	mrs	r3, IPSR
 800f332:	613b      	str	r3, [r7, #16]
  return(result);
 800f334:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800f336:	2b00      	cmp	r3, #0
 800f338:	d10f      	bne.n	800f35a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f33a:	f3ef 8310 	mrs	r3, PRIMASK
 800f33e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d109      	bne.n	800f35a <osMutexAcquire+0x4a>
 800f346:	4b20      	ldr	r3, [pc, #128]	; (800f3c8 <osMutexAcquire+0xb8>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2b02      	cmp	r3, #2
 800f34c:	d109      	bne.n	800f362 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f34e:	f3ef 8311 	mrs	r3, BASEPRI
 800f352:	60bb      	str	r3, [r7, #8]
  return(result);
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d003      	beq.n	800f362 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800f35a:	f06f 0305 	mvn.w	r3, #5
 800f35e:	61fb      	str	r3, [r7, #28]
 800f360:	e02c      	b.n	800f3bc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800f362:	69bb      	ldr	r3, [r7, #24]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d103      	bne.n	800f370 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800f368:	f06f 0303 	mvn.w	r3, #3
 800f36c:	61fb      	str	r3, [r7, #28]
 800f36e:	e025      	b.n	800f3bc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d011      	beq.n	800f39a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f376:	6839      	ldr	r1, [r7, #0]
 800f378:	69b8      	ldr	r0, [r7, #24]
 800f37a:	f001 fa3f 	bl	80107fc <xQueueTakeMutexRecursive>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b01      	cmp	r3, #1
 800f382:	d01b      	beq.n	800f3bc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d003      	beq.n	800f392 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800f38a:	f06f 0301 	mvn.w	r3, #1
 800f38e:	61fb      	str	r3, [r7, #28]
 800f390:	e014      	b.n	800f3bc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800f392:	f06f 0302 	mvn.w	r3, #2
 800f396:	61fb      	str	r3, [r7, #28]
 800f398:	e010      	b.n	800f3bc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f39a:	6839      	ldr	r1, [r7, #0]
 800f39c:	69b8      	ldr	r0, [r7, #24]
 800f39e:	f001 fdbd 	bl	8010f1c <xQueueSemaphoreTake>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d009      	beq.n	800f3bc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d003      	beq.n	800f3b6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800f3ae:	f06f 0301 	mvn.w	r3, #1
 800f3b2:	61fb      	str	r3, [r7, #28]
 800f3b4:	e002      	b.n	800f3bc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800f3b6:	f06f 0302 	mvn.w	r3, #2
 800f3ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f3bc:	69fb      	ldr	r3, [r7, #28]
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3720      	adds	r7, #32
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	20000adc 	.word	0x20000adc

0800f3cc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b088      	sub	sp, #32
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f023 0301 	bic.w	r3, r3, #1
 800f3da:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f003 0301 	and.w	r3, r3, #1
 800f3e2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3e8:	f3ef 8305 	mrs	r3, IPSR
 800f3ec:	613b      	str	r3, [r7, #16]
  return(result);
 800f3ee:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d10f      	bne.n	800f414 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3f4:	f3ef 8310 	mrs	r3, PRIMASK
 800f3f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d109      	bne.n	800f414 <osMutexRelease+0x48>
 800f400:	4b19      	ldr	r3, [pc, #100]	; (800f468 <osMutexRelease+0x9c>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	2b02      	cmp	r3, #2
 800f406:	d109      	bne.n	800f41c <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f408:	f3ef 8311 	mrs	r3, BASEPRI
 800f40c:	60bb      	str	r3, [r7, #8]
  return(result);
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d003      	beq.n	800f41c <osMutexRelease+0x50>
    stat = osErrorISR;
 800f414:	f06f 0305 	mvn.w	r3, #5
 800f418:	61fb      	str	r3, [r7, #28]
 800f41a:	e01f      	b.n	800f45c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d103      	bne.n	800f42a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800f422:	f06f 0303 	mvn.w	r3, #3
 800f426:	61fb      	str	r3, [r7, #28]
 800f428:	e018      	b.n	800f45c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d009      	beq.n	800f444 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f430:	69b8      	ldr	r0, [r7, #24]
 800f432:	f001 f9b0 	bl	8010796 <xQueueGiveMutexRecursive>
 800f436:	4603      	mov	r3, r0
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d00f      	beq.n	800f45c <osMutexRelease+0x90>
        stat = osErrorResource;
 800f43c:	f06f 0302 	mvn.w	r3, #2
 800f440:	61fb      	str	r3, [r7, #28]
 800f442:	e00b      	b.n	800f45c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f444:	2300      	movs	r3, #0
 800f446:	2200      	movs	r2, #0
 800f448:	2100      	movs	r1, #0
 800f44a:	69b8      	ldr	r0, [r7, #24]
 800f44c:	f001 fa72 	bl	8010934 <xQueueGenericSend>
 800f450:	4603      	mov	r3, r0
 800f452:	2b01      	cmp	r3, #1
 800f454:	d002      	beq.n	800f45c <osMutexRelease+0x90>
        stat = osErrorResource;
 800f456:	f06f 0302 	mvn.w	r3, #2
 800f45a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800f45c:	69fb      	ldr	r3, [r7, #28]
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3720      	adds	r7, #32
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	20000adc 	.word	0x20000adc

0800f46c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b08c      	sub	sp, #48	; 0x30
 800f470:	af02      	add	r7, sp, #8
 800f472:	60f8      	str	r0, [r7, #12]
 800f474:	60b9      	str	r1, [r7, #8]
 800f476:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f478:	2300      	movs	r3, #0
 800f47a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f47c:	f3ef 8305 	mrs	r3, IPSR
 800f480:	61bb      	str	r3, [r7, #24]
  return(result);
 800f482:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f484:	2b00      	cmp	r3, #0
 800f486:	f040 8088 	bne.w	800f59a <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f48a:	f3ef 8310 	mrs	r3, PRIMASK
 800f48e:	617b      	str	r3, [r7, #20]
  return(result);
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	2b00      	cmp	r3, #0
 800f494:	f040 8081 	bne.w	800f59a <osSemaphoreNew+0x12e>
 800f498:	4b42      	ldr	r3, [pc, #264]	; (800f5a4 <osSemaphoreNew+0x138>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2b02      	cmp	r3, #2
 800f49e:	d105      	bne.n	800f4ac <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f4a0:	f3ef 8311 	mrs	r3, BASEPRI
 800f4a4:	613b      	str	r3, [r7, #16]
  return(result);
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d176      	bne.n	800f59a <osSemaphoreNew+0x12e>
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d073      	beq.n	800f59a <osSemaphoreNew+0x12e>
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d86f      	bhi.n	800f59a <osSemaphoreNew+0x12e>
    mem = -1;
 800f4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f4be:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d015      	beq.n	800f4f2 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d006      	beq.n	800f4dc <osSemaphoreNew+0x70>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	2b4f      	cmp	r3, #79	; 0x4f
 800f4d4:	d902      	bls.n	800f4dc <osSemaphoreNew+0x70>
        mem = 1;
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	623b      	str	r3, [r7, #32]
 800f4da:	e00c      	b.n	800f4f6 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d108      	bne.n	800f4f6 <osSemaphoreNew+0x8a>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	68db      	ldr	r3, [r3, #12]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d104      	bne.n	800f4f6 <osSemaphoreNew+0x8a>
          mem = 0;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	623b      	str	r3, [r7, #32]
 800f4f0:	e001      	b.n	800f4f6 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f4f6:	6a3b      	ldr	r3, [r7, #32]
 800f4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4fc:	d04d      	beq.n	800f59a <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2b01      	cmp	r3, #1
 800f502:	d129      	bne.n	800f558 <osSemaphoreNew+0xec>
        if (mem == 1) {
 800f504:	6a3b      	ldr	r3, [r7, #32]
 800f506:	2b01      	cmp	r3, #1
 800f508:	d10b      	bne.n	800f522 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	689a      	ldr	r2, [r3, #8]
 800f50e:	2303      	movs	r3, #3
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	4613      	mov	r3, r2
 800f514:	2200      	movs	r2, #0
 800f516:	2100      	movs	r1, #0
 800f518:	2001      	movs	r0, #1
 800f51a:	f001 f81d 	bl	8010558 <xQueueGenericCreateStatic>
 800f51e:	6278      	str	r0, [r7, #36]	; 0x24
 800f520:	e005      	b.n	800f52e <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f522:	2203      	movs	r2, #3
 800f524:	2100      	movs	r1, #0
 800f526:	2001      	movs	r0, #1
 800f528:	f001 f888 	bl	801063c <xQueueGenericCreate>
 800f52c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f530:	2b00      	cmp	r3, #0
 800f532:	d022      	beq.n	800f57a <osSemaphoreNew+0x10e>
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d01f      	beq.n	800f57a <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f53a:	2300      	movs	r3, #0
 800f53c:	2200      	movs	r2, #0
 800f53e:	2100      	movs	r1, #0
 800f540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f542:	f001 f9f7 	bl	8010934 <xQueueGenericSend>
 800f546:	4603      	mov	r3, r0
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d016      	beq.n	800f57a <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 800f54c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f54e:	f001 fea2 	bl	8011296 <vQueueDelete>
            hSemaphore = NULL;
 800f552:	2300      	movs	r3, #0
 800f554:	627b      	str	r3, [r7, #36]	; 0x24
 800f556:	e010      	b.n	800f57a <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 800f558:	6a3b      	ldr	r3, [r7, #32]
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d108      	bne.n	800f570 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	689b      	ldr	r3, [r3, #8]
 800f562:	461a      	mov	r2, r3
 800f564:	68b9      	ldr	r1, [r7, #8]
 800f566:	68f8      	ldr	r0, [r7, #12]
 800f568:	f001 f97d 	bl	8010866 <xQueueCreateCountingSemaphoreStatic>
 800f56c:	6278      	str	r0, [r7, #36]	; 0x24
 800f56e:	e004      	b.n	800f57a <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f570:	68b9      	ldr	r1, [r7, #8]
 800f572:	68f8      	ldr	r0, [r7, #12]
 800f574:	f001 f9ac 	bl	80108d0 <xQueueCreateCountingSemaphore>
 800f578:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d00c      	beq.n	800f59a <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d003      	beq.n	800f58e <osSemaphoreNew+0x122>
          name = attr->name;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	61fb      	str	r3, [r7, #28]
 800f58c:	e001      	b.n	800f592 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800f58e:	2300      	movs	r3, #0
 800f590:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f592:	69f9      	ldr	r1, [r7, #28]
 800f594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f596:	f001 ffc9 	bl	801152c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3728      	adds	r7, #40	; 0x28
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	20000adc 	.word	0x20000adc

0800f5a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b088      	sub	sp, #32
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d103      	bne.n	800f5c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f5c0:	f06f 0303 	mvn.w	r3, #3
 800f5c4:	61fb      	str	r3, [r7, #28]
 800f5c6:	e04b      	b.n	800f660 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5c8:	f3ef 8305 	mrs	r3, IPSR
 800f5cc:	617b      	str	r3, [r7, #20]
  return(result);
 800f5ce:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d10f      	bne.n	800f5f4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800f5d8:	613b      	str	r3, [r7, #16]
  return(result);
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d109      	bne.n	800f5f4 <osSemaphoreAcquire+0x4c>
 800f5e0:	4b22      	ldr	r3, [pc, #136]	; (800f66c <osSemaphoreAcquire+0xc4>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	2b02      	cmp	r3, #2
 800f5e6:	d128      	bne.n	800f63a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f5e8:	f3ef 8311 	mrs	r3, BASEPRI
 800f5ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d022      	beq.n	800f63a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d003      	beq.n	800f602 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f5fa:	f06f 0303 	mvn.w	r3, #3
 800f5fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f600:	e02d      	b.n	800f65e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f602:	2300      	movs	r3, #0
 800f604:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f606:	f107 0308 	add.w	r3, r7, #8
 800f60a:	461a      	mov	r2, r3
 800f60c:	2100      	movs	r1, #0
 800f60e:	69b8      	ldr	r0, [r7, #24]
 800f610:	f001 fd8c 	bl	801112c <xQueueReceiveFromISR>
 800f614:	4603      	mov	r3, r0
 800f616:	2b01      	cmp	r3, #1
 800f618:	d003      	beq.n	800f622 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f61a:	f06f 0302 	mvn.w	r3, #2
 800f61e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f620:	e01d      	b.n	800f65e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d01a      	beq.n	800f65e <osSemaphoreAcquire+0xb6>
 800f628:	4b11      	ldr	r3, [pc, #68]	; (800f670 <osSemaphoreAcquire+0xc8>)
 800f62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f62e:	601a      	str	r2, [r3, #0]
 800f630:	f3bf 8f4f 	dsb	sy
 800f634:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f638:	e011      	b.n	800f65e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f63a:	6839      	ldr	r1, [r7, #0]
 800f63c:	69b8      	ldr	r0, [r7, #24]
 800f63e:	f001 fc6d 	bl	8010f1c <xQueueSemaphoreTake>
 800f642:	4603      	mov	r3, r0
 800f644:	2b01      	cmp	r3, #1
 800f646:	d00b      	beq.n	800f660 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d003      	beq.n	800f656 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f64e:	f06f 0301 	mvn.w	r3, #1
 800f652:	61fb      	str	r3, [r7, #28]
 800f654:	e004      	b.n	800f660 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f656:	f06f 0302 	mvn.w	r3, #2
 800f65a:	61fb      	str	r3, [r7, #28]
 800f65c:	e000      	b.n	800f660 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f65e:	bf00      	nop
      }
    }
  }

  return (stat);
 800f660:	69fb      	ldr	r3, [r7, #28]
}
 800f662:	4618      	mov	r0, r3
 800f664:	3720      	adds	r7, #32
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	20000adc 	.word	0x20000adc
 800f670:	e000ed04 	.word	0xe000ed04

0800f674 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f674:	b580      	push	{r7, lr}
 800f676:	b088      	sub	sp, #32
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f680:	2300      	movs	r3, #0
 800f682:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d103      	bne.n	800f692 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f68a:	f06f 0303 	mvn.w	r3, #3
 800f68e:	61fb      	str	r3, [r7, #28]
 800f690:	e03e      	b.n	800f710 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f692:	f3ef 8305 	mrs	r3, IPSR
 800f696:	617b      	str	r3, [r7, #20]
  return(result);
 800f698:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d10f      	bne.n	800f6be <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f69e:	f3ef 8310 	mrs	r3, PRIMASK
 800f6a2:	613b      	str	r3, [r7, #16]
  return(result);
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d109      	bne.n	800f6be <osSemaphoreRelease+0x4a>
 800f6aa:	4b1c      	ldr	r3, [pc, #112]	; (800f71c <osSemaphoreRelease+0xa8>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	2b02      	cmp	r3, #2
 800f6b0:	d120      	bne.n	800f6f4 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f6b2:	f3ef 8311 	mrs	r3, BASEPRI
 800f6b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d01a      	beq.n	800f6f4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6c2:	f107 0308 	add.w	r3, r7, #8
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	69b8      	ldr	r0, [r7, #24]
 800f6ca:	f001 fac1 	bl	8010c50 <xQueueGiveFromISR>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d003      	beq.n	800f6dc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f6d4:	f06f 0302 	mvn.w	r3, #2
 800f6d8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6da:	e018      	b.n	800f70e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d015      	beq.n	800f70e <osSemaphoreRelease+0x9a>
 800f6e2:	4b0f      	ldr	r3, [pc, #60]	; (800f720 <osSemaphoreRelease+0xac>)
 800f6e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6e8:	601a      	str	r2, [r3, #0]
 800f6ea:	f3bf 8f4f 	dsb	sy
 800f6ee:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6f2:	e00c      	b.n	800f70e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	2100      	movs	r1, #0
 800f6fa:	69b8      	ldr	r0, [r7, #24]
 800f6fc:	f001 f91a 	bl	8010934 <xQueueGenericSend>
 800f700:	4603      	mov	r3, r0
 800f702:	2b01      	cmp	r3, #1
 800f704:	d004      	beq.n	800f710 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f706:	f06f 0302 	mvn.w	r3, #2
 800f70a:	61fb      	str	r3, [r7, #28]
 800f70c:	e000      	b.n	800f710 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f70e:	bf00      	nop
    }
  }

  return (stat);
 800f710:	69fb      	ldr	r3, [r7, #28]
}
 800f712:	4618      	mov	r0, r3
 800f714:	3720      	adds	r7, #32
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	20000adc 	.word	0x20000adc
 800f720:	e000ed04 	.word	0xe000ed04

0800f724 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f724:	b580      	push	{r7, lr}
 800f726:	b08c      	sub	sp, #48	; 0x30
 800f728:	af02      	add	r7, sp, #8
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f730:	2300      	movs	r3, #0
 800f732:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f734:	f3ef 8305 	mrs	r3, IPSR
 800f738:	61bb      	str	r3, [r7, #24]
  return(result);
 800f73a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d170      	bne.n	800f822 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f740:	f3ef 8310 	mrs	r3, PRIMASK
 800f744:	617b      	str	r3, [r7, #20]
  return(result);
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d16a      	bne.n	800f822 <osMessageQueueNew+0xfe>
 800f74c:	4b37      	ldr	r3, [pc, #220]	; (800f82c <osMessageQueueNew+0x108>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	2b02      	cmp	r3, #2
 800f752:	d105      	bne.n	800f760 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f754:	f3ef 8311 	mrs	r3, BASEPRI
 800f758:	613b      	str	r3, [r7, #16]
  return(result);
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d160      	bne.n	800f822 <osMessageQueueNew+0xfe>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d05d      	beq.n	800f822 <osMessageQueueNew+0xfe>
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d05a      	beq.n	800f822 <osMessageQueueNew+0xfe>
    mem = -1;
 800f76c:	f04f 33ff 	mov.w	r3, #4294967295
 800f770:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d029      	beq.n	800f7cc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d012      	beq.n	800f7a6 <osMessageQueueNew+0x82>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	2b4f      	cmp	r3, #79	; 0x4f
 800f786:	d90e      	bls.n	800f7a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d00a      	beq.n	800f7a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	695a      	ldr	r2, [r3, #20]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	68b9      	ldr	r1, [r7, #8]
 800f798:	fb01 f303 	mul.w	r3, r1, r3
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d302      	bcc.n	800f7a6 <osMessageQueueNew+0x82>
        mem = 1;
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	623b      	str	r3, [r7, #32]
 800f7a4:	e014      	b.n	800f7d0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d110      	bne.n	800f7d0 <osMessageQueueNew+0xac>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	68db      	ldr	r3, [r3, #12]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d10c      	bne.n	800f7d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d108      	bne.n	800f7d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	695b      	ldr	r3, [r3, #20]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d104      	bne.n	800f7d0 <osMessageQueueNew+0xac>
          mem = 0;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	623b      	str	r3, [r7, #32]
 800f7ca:	e001      	b.n	800f7d0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f7d0:	6a3b      	ldr	r3, [r7, #32]
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d10c      	bne.n	800f7f0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	691a      	ldr	r2, [r3, #16]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6899      	ldr	r1, [r3, #8]
 800f7de:	2300      	movs	r3, #0
 800f7e0:	9300      	str	r3, [sp, #0]
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	68b9      	ldr	r1, [r7, #8]
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f000 feb6 	bl	8010558 <xQueueGenericCreateStatic>
 800f7ec:	6278      	str	r0, [r7, #36]	; 0x24
 800f7ee:	e008      	b.n	800f802 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800f7f0:	6a3b      	ldr	r3, [r7, #32]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d105      	bne.n	800f802 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	68b9      	ldr	r1, [r7, #8]
 800f7fa:	68f8      	ldr	r0, [r7, #12]
 800f7fc:	f000 ff1e 	bl	801063c <xQueueGenericCreate>
 800f800:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f804:	2b00      	cmp	r3, #0
 800f806:	d00c      	beq.n	800f822 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d003      	beq.n	800f816 <osMessageQueueNew+0xf2>
        name = attr->name;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	61fb      	str	r3, [r7, #28]
 800f814:	e001      	b.n	800f81a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800f816:	2300      	movs	r3, #0
 800f818:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800f81a:	69f9      	ldr	r1, [r7, #28]
 800f81c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f81e:	f001 fe85 	bl	801152c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f824:	4618      	mov	r0, r3
 800f826:	3728      	adds	r7, #40	; 0x28
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	20000adc 	.word	0x20000adc

0800f830 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f830:	b580      	push	{r7, lr}
 800f832:	b08a      	sub	sp, #40	; 0x28
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	603b      	str	r3, [r7, #0]
 800f83c:	4613      	mov	r3, r2
 800f83e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f844:	2300      	movs	r3, #0
 800f846:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f848:	f3ef 8305 	mrs	r3, IPSR
 800f84c:	61fb      	str	r3, [r7, #28]
  return(result);
 800f84e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f850:	2b00      	cmp	r3, #0
 800f852:	d10f      	bne.n	800f874 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f854:	f3ef 8310 	mrs	r3, PRIMASK
 800f858:	61bb      	str	r3, [r7, #24]
  return(result);
 800f85a:	69bb      	ldr	r3, [r7, #24]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d109      	bne.n	800f874 <osMessageQueuePut+0x44>
 800f860:	4b2b      	ldr	r3, [pc, #172]	; (800f910 <osMessageQueuePut+0xe0>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	2b02      	cmp	r3, #2
 800f866:	d12e      	bne.n	800f8c6 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f868:	f3ef 8311 	mrs	r3, BASEPRI
 800f86c:	617b      	str	r3, [r7, #20]
  return(result);
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d028      	beq.n	800f8c6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f874:	6a3b      	ldr	r3, [r7, #32]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d005      	beq.n	800f886 <osMessageQueuePut+0x56>
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d002      	beq.n	800f886 <osMessageQueuePut+0x56>
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d003      	beq.n	800f88e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800f886:	f06f 0303 	mvn.w	r3, #3
 800f88a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f88c:	e039      	b.n	800f902 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800f88e:	2300      	movs	r3, #0
 800f890:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f892:	f107 0210 	add.w	r2, r7, #16
 800f896:	2300      	movs	r3, #0
 800f898:	68b9      	ldr	r1, [r7, #8]
 800f89a:	6a38      	ldr	r0, [r7, #32]
 800f89c:	f001 f944 	bl	8010b28 <xQueueGenericSendFromISR>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d003      	beq.n	800f8ae <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800f8a6:	f06f 0302 	mvn.w	r3, #2
 800f8aa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f8ac:	e029      	b.n	800f902 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d026      	beq.n	800f902 <osMessageQueuePut+0xd2>
 800f8b4:	4b17      	ldr	r3, [pc, #92]	; (800f914 <osMessageQueuePut+0xe4>)
 800f8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8ba:	601a      	str	r2, [r3, #0]
 800f8bc:	f3bf 8f4f 	dsb	sy
 800f8c0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f8c4:	e01d      	b.n	800f902 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f8c6:	6a3b      	ldr	r3, [r7, #32]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d002      	beq.n	800f8d2 <osMessageQueuePut+0xa2>
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d103      	bne.n	800f8da <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800f8d2:	f06f 0303 	mvn.w	r3, #3
 800f8d6:	627b      	str	r3, [r7, #36]	; 0x24
 800f8d8:	e014      	b.n	800f904 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f8da:	2300      	movs	r3, #0
 800f8dc:	683a      	ldr	r2, [r7, #0]
 800f8de:	68b9      	ldr	r1, [r7, #8]
 800f8e0:	6a38      	ldr	r0, [r7, #32]
 800f8e2:	f001 f827 	bl	8010934 <xQueueGenericSend>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d00b      	beq.n	800f904 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d003      	beq.n	800f8fa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f8f2:	f06f 0301 	mvn.w	r3, #1
 800f8f6:	627b      	str	r3, [r7, #36]	; 0x24
 800f8f8:	e004      	b.n	800f904 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f8fa:	f06f 0302 	mvn.w	r3, #2
 800f8fe:	627b      	str	r3, [r7, #36]	; 0x24
 800f900:	e000      	b.n	800f904 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f902:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f906:	4618      	mov	r0, r3
 800f908:	3728      	adds	r7, #40	; 0x28
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	20000adc 	.word	0x20000adc
 800f914:	e000ed04 	.word	0xe000ed04

0800f918 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f918:	b580      	push	{r7, lr}
 800f91a:	b08a      	sub	sp, #40	; 0x28
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	60f8      	str	r0, [r7, #12]
 800f920:	60b9      	str	r1, [r7, #8]
 800f922:	607a      	str	r2, [r7, #4]
 800f924:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f92a:	2300      	movs	r3, #0
 800f92c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f92e:	f3ef 8305 	mrs	r3, IPSR
 800f932:	61fb      	str	r3, [r7, #28]
  return(result);
 800f934:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f936:	2b00      	cmp	r3, #0
 800f938:	d10f      	bne.n	800f95a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f93a:	f3ef 8310 	mrs	r3, PRIMASK
 800f93e:	61bb      	str	r3, [r7, #24]
  return(result);
 800f940:	69bb      	ldr	r3, [r7, #24]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d109      	bne.n	800f95a <osMessageQueueGet+0x42>
 800f946:	4b2b      	ldr	r3, [pc, #172]	; (800f9f4 <osMessageQueueGet+0xdc>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b02      	cmp	r3, #2
 800f94c:	d12e      	bne.n	800f9ac <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f94e:	f3ef 8311 	mrs	r3, BASEPRI
 800f952:	617b      	str	r3, [r7, #20]
  return(result);
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d028      	beq.n	800f9ac <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f95a:	6a3b      	ldr	r3, [r7, #32]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d005      	beq.n	800f96c <osMessageQueueGet+0x54>
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d002      	beq.n	800f96c <osMessageQueueGet+0x54>
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d003      	beq.n	800f974 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800f96c:	f06f 0303 	mvn.w	r3, #3
 800f970:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f972:	e038      	b.n	800f9e6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800f974:	2300      	movs	r3, #0
 800f976:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f978:	f107 0310 	add.w	r3, r7, #16
 800f97c:	461a      	mov	r2, r3
 800f97e:	68b9      	ldr	r1, [r7, #8]
 800f980:	6a38      	ldr	r0, [r7, #32]
 800f982:	f001 fbd3 	bl	801112c <xQueueReceiveFromISR>
 800f986:	4603      	mov	r3, r0
 800f988:	2b01      	cmp	r3, #1
 800f98a:	d003      	beq.n	800f994 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800f98c:	f06f 0302 	mvn.w	r3, #2
 800f990:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f992:	e028      	b.n	800f9e6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d025      	beq.n	800f9e6 <osMessageQueueGet+0xce>
 800f99a:	4b17      	ldr	r3, [pc, #92]	; (800f9f8 <osMessageQueueGet+0xe0>)
 800f99c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9a0:	601a      	str	r2, [r3, #0]
 800f9a2:	f3bf 8f4f 	dsb	sy
 800f9a6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f9aa:	e01c      	b.n	800f9e6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f9ac:	6a3b      	ldr	r3, [r7, #32]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d002      	beq.n	800f9b8 <osMessageQueueGet+0xa0>
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d103      	bne.n	800f9c0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800f9b8:	f06f 0303 	mvn.w	r3, #3
 800f9bc:	627b      	str	r3, [r7, #36]	; 0x24
 800f9be:	e013      	b.n	800f9e8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f9c0:	683a      	ldr	r2, [r7, #0]
 800f9c2:	68b9      	ldr	r1, [r7, #8]
 800f9c4:	6a38      	ldr	r0, [r7, #32]
 800f9c6:	f001 f9cd 	bl	8010d64 <xQueueReceive>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b01      	cmp	r3, #1
 800f9ce:	d00b      	beq.n	800f9e8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d003      	beq.n	800f9de <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800f9d6:	f06f 0301 	mvn.w	r3, #1
 800f9da:	627b      	str	r3, [r7, #36]	; 0x24
 800f9dc:	e004      	b.n	800f9e8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800f9de:	f06f 0302 	mvn.w	r3, #2
 800f9e2:	627b      	str	r3, [r7, #36]	; 0x24
 800f9e4:	e000      	b.n	800f9e8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f9e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3728      	adds	r7, #40	; 0x28
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	20000adc 	.word	0x20000adc
 800f9f8:	e000ed04 	.word	0xe000ed04

0800f9fc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b088      	sub	sp, #32
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800fa08:	69bb      	ldr	r3, [r7, #24]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d102      	bne.n	800fa14 <osMessageQueueGetCount+0x18>
    count = 0U;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	61fb      	str	r3, [r7, #28]
 800fa12:	e01e      	b.n	800fa52 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa14:	f3ef 8305 	mrs	r3, IPSR
 800fa18:	617b      	str	r3, [r7, #20]
  return(result);
 800fa1a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d10f      	bne.n	800fa40 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa20:	f3ef 8310 	mrs	r3, PRIMASK
 800fa24:	613b      	str	r3, [r7, #16]
  return(result);
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d109      	bne.n	800fa40 <osMessageQueueGetCount+0x44>
 800fa2c:	4b0b      	ldr	r3, [pc, #44]	; (800fa5c <osMessageQueueGetCount+0x60>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2b02      	cmp	r3, #2
 800fa32:	d10a      	bne.n	800fa4a <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fa34:	f3ef 8311 	mrs	r3, BASEPRI
 800fa38:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d004      	beq.n	800fa4a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800fa40:	69b8      	ldr	r0, [r7, #24]
 800fa42:	f001 fc0d 	bl	8011260 <uxQueueMessagesWaitingFromISR>
 800fa46:	61f8      	str	r0, [r7, #28]
 800fa48:	e003      	b.n	800fa52 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800fa4a:	69b8      	ldr	r0, [r7, #24]
 800fa4c:	f001 fbeb 	bl	8011226 <uxQueueMessagesWaiting>
 800fa50:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800fa52:	69fb      	ldr	r3, [r7, #28]
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3720      	adds	r7, #32
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}
 800fa5c:	20000adc 	.word	0x20000adc

0800fa60 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b088      	sub	sp, #32
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa6c:	f3ef 8305 	mrs	r3, IPSR
 800fa70:	617b      	str	r3, [r7, #20]
  return(result);
 800fa72:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d10f      	bne.n	800fa98 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa78:	f3ef 8310 	mrs	r3, PRIMASK
 800fa7c:	613b      	str	r3, [r7, #16]
  return(result);
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d109      	bne.n	800fa98 <osMessageQueueReset+0x38>
 800fa84:	4b0f      	ldr	r3, [pc, #60]	; (800fac4 <osMessageQueueReset+0x64>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	d109      	bne.n	800faa0 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fa8c:	f3ef 8311 	mrs	r3, BASEPRI
 800fa90:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d003      	beq.n	800faa0 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 800fa98:	f06f 0305 	mvn.w	r3, #5
 800fa9c:	61fb      	str	r3, [r7, #28]
 800fa9e:	e00c      	b.n	800faba <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800faa0:	69bb      	ldr	r3, [r7, #24]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d103      	bne.n	800faae <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 800faa6:	f06f 0303 	mvn.w	r3, #3
 800faaa:	61fb      	str	r3, [r7, #28]
 800faac:	e005      	b.n	800faba <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800faae:	2300      	movs	r3, #0
 800fab0:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800fab2:	2100      	movs	r1, #0
 800fab4:	69b8      	ldr	r0, [r7, #24]
 800fab6:	f000 fce7 	bl	8010488 <xQueueGenericReset>
  }

  return (stat);
 800faba:	69fb      	ldr	r3, [r7, #28]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3720      	adds	r7, #32
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	20000adc 	.word	0x20000adc

0800fac8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	4a07      	ldr	r2, [pc, #28]	; (800faf4 <vApplicationGetIdleTaskMemory+0x2c>)
 800fad8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	4a06      	ldr	r2, [pc, #24]	; (800faf8 <vApplicationGetIdleTaskMemory+0x30>)
 800fade:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fae6:	601a      	str	r2, [r3, #0]
}
 800fae8:	bf00      	nop
 800faea:	3714      	adds	r7, #20
 800faec:	46bd      	mov	sp, r7
 800faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf2:	4770      	bx	lr
 800faf4:	20000ae0 	.word	0x20000ae0
 800faf8:	20000b44 	.word	0x20000b44

0800fafc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fafc:	b480      	push	{r7}
 800fafe:	b085      	sub	sp, #20
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	4a07      	ldr	r2, [pc, #28]	; (800fb28 <vApplicationGetTimerTaskMemory+0x2c>)
 800fb0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	4a06      	ldr	r2, [pc, #24]	; (800fb2c <vApplicationGetTimerTaskMemory+0x30>)
 800fb12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fb1a:	601a      	str	r2, [r3, #0]
}
 800fb1c:	bf00      	nop
 800fb1e:	3714      	adds	r7, #20
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr
 800fb28:	20001344 	.word	0x20001344
 800fb2c:	200013a8 	.word	0x200013a8

0800fb30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b08a      	sub	sp, #40	; 0x28
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb3c:	f001 ffb0 	bl	8011aa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb40:	4b59      	ldr	r3, [pc, #356]	; (800fca8 <pvPortMalloc+0x178>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d101      	bne.n	800fb4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb48:	f000 f910 	bl	800fd6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb4c:	4b57      	ldr	r3, [pc, #348]	; (800fcac <pvPortMalloc+0x17c>)
 800fb4e:	681a      	ldr	r2, [r3, #0]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4013      	ands	r3, r2
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f040 808c 	bne.w	800fc72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d01c      	beq.n	800fb9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fb60:	2208      	movs	r2, #8
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4413      	add	r3, r2
 800fb66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f003 0307 	and.w	r3, r3, #7
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d013      	beq.n	800fb9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f023 0307 	bic.w	r3, r3, #7
 800fb78:	3308      	adds	r3, #8
 800fb7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f003 0307 	and.w	r3, r3, #7
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d009      	beq.n	800fb9a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8a:	f383 8811 	msr	BASEPRI, r3
 800fb8e:	f3bf 8f6f 	isb	sy
 800fb92:	f3bf 8f4f 	dsb	sy
 800fb96:	617b      	str	r3, [r7, #20]
 800fb98:	e7fe      	b.n	800fb98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d068      	beq.n	800fc72 <pvPortMalloc+0x142>
 800fba0:	4b43      	ldr	r3, [pc, #268]	; (800fcb0 <pvPortMalloc+0x180>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d863      	bhi.n	800fc72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fbaa:	4b42      	ldr	r3, [pc, #264]	; (800fcb4 <pvPortMalloc+0x184>)
 800fbac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fbae:	4b41      	ldr	r3, [pc, #260]	; (800fcb4 <pvPortMalloc+0x184>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbb4:	e004      	b.n	800fbc0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d903      	bls.n	800fbd2 <pvPortMalloc+0xa2>
 800fbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d1f1      	bne.n	800fbb6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fbd2:	4b35      	ldr	r3, [pc, #212]	; (800fca8 <pvPortMalloc+0x178>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d04a      	beq.n	800fc72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fbdc:	6a3b      	ldr	r3, [r7, #32]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2208      	movs	r2, #8
 800fbe2:	4413      	add	r3, r2
 800fbe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	6a3b      	ldr	r3, [r7, #32]
 800fbec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf0:	685a      	ldr	r2, [r3, #4]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	1ad2      	subs	r2, r2, r3
 800fbf6:	2308      	movs	r3, #8
 800fbf8:	005b      	lsls	r3, r3, #1
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d91e      	bls.n	800fc3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fbfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	4413      	add	r3, r2
 800fc04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	f003 0307 	and.w	r3, r3, #7
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d009      	beq.n	800fc24 <pvPortMalloc+0xf4>
 800fc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc14:	f383 8811 	msr	BASEPRI, r3
 800fc18:	f3bf 8f6f 	isb	sy
 800fc1c:	f3bf 8f4f 	dsb	sy
 800fc20:	613b      	str	r3, [r7, #16]
 800fc22:	e7fe      	b.n	800fc22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc26:	685a      	ldr	r2, [r3, #4]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	1ad2      	subs	r2, r2, r3
 800fc2c:	69bb      	ldr	r3, [r7, #24]
 800fc2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc36:	69b8      	ldr	r0, [r7, #24]
 800fc38:	f000 f8fc 	bl	800fe34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc3c:	4b1c      	ldr	r3, [pc, #112]	; (800fcb0 <pvPortMalloc+0x180>)
 800fc3e:	681a      	ldr	r2, [r3, #0]
 800fc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	1ad3      	subs	r3, r2, r3
 800fc46:	4a1a      	ldr	r2, [pc, #104]	; (800fcb0 <pvPortMalloc+0x180>)
 800fc48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc4a:	4b19      	ldr	r3, [pc, #100]	; (800fcb0 <pvPortMalloc+0x180>)
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	4b1a      	ldr	r3, [pc, #104]	; (800fcb8 <pvPortMalloc+0x188>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d203      	bcs.n	800fc5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fc56:	4b16      	ldr	r3, [pc, #88]	; (800fcb0 <pvPortMalloc+0x180>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4a17      	ldr	r2, [pc, #92]	; (800fcb8 <pvPortMalloc+0x188>)
 800fc5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc60:	685a      	ldr	r2, [r3, #4]
 800fc62:	4b12      	ldr	r3, [pc, #72]	; (800fcac <pvPortMalloc+0x17c>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	431a      	orrs	r2, r3
 800fc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6e:	2200      	movs	r2, #0
 800fc70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fc72:	f001 ff5b 	bl	8011b2c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d101      	bne.n	800fc80 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800fc7c:	f7f1 fb00 	bl	8001280 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	f003 0307 	and.w	r3, r3, #7
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d009      	beq.n	800fc9e <pvPortMalloc+0x16e>
 800fc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8e:	f383 8811 	msr	BASEPRI, r3
 800fc92:	f3bf 8f6f 	isb	sy
 800fc96:	f3bf 8f4f 	dsb	sy
 800fc9a:	60fb      	str	r3, [r7, #12]
 800fc9c:	e7fe      	b.n	800fc9c <pvPortMalloc+0x16c>
	return pvReturn;
 800fc9e:	69fb      	ldr	r3, [r7, #28]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3728      	adds	r7, #40	; 0x28
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	20026da0 	.word	0x20026da0
 800fcac:	20026dac 	.word	0x20026dac
 800fcb0:	20026da4 	.word	0x20026da4
 800fcb4:	20026d98 	.word	0x20026d98
 800fcb8:	20026da8 	.word	0x20026da8

0800fcbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b086      	sub	sp, #24
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d046      	beq.n	800fd5c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fcce:	2308      	movs	r3, #8
 800fcd0:	425b      	negs	r3, r3
 800fcd2:	697a      	ldr	r2, [r7, #20]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	685a      	ldr	r2, [r3, #4]
 800fce0:	4b20      	ldr	r3, [pc, #128]	; (800fd64 <vPortFree+0xa8>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	4013      	ands	r3, r2
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d109      	bne.n	800fcfe <vPortFree+0x42>
 800fcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcee:	f383 8811 	msr	BASEPRI, r3
 800fcf2:	f3bf 8f6f 	isb	sy
 800fcf6:	f3bf 8f4f 	dsb	sy
 800fcfa:	60fb      	str	r3, [r7, #12]
 800fcfc:	e7fe      	b.n	800fcfc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d009      	beq.n	800fd1a <vPortFree+0x5e>
 800fd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0a:	f383 8811 	msr	BASEPRI, r3
 800fd0e:	f3bf 8f6f 	isb	sy
 800fd12:	f3bf 8f4f 	dsb	sy
 800fd16:	60bb      	str	r3, [r7, #8]
 800fd18:	e7fe      	b.n	800fd18 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	685a      	ldr	r2, [r3, #4]
 800fd1e:	4b11      	ldr	r3, [pc, #68]	; (800fd64 <vPortFree+0xa8>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4013      	ands	r3, r2
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d019      	beq.n	800fd5c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d115      	bne.n	800fd5c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	685a      	ldr	r2, [r3, #4]
 800fd34:	4b0b      	ldr	r3, [pc, #44]	; (800fd64 <vPortFree+0xa8>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	43db      	mvns	r3, r3
 800fd3a:	401a      	ands	r2, r3
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd40:	f001 feae 	bl	8011aa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	685a      	ldr	r2, [r3, #4]
 800fd48:	4b07      	ldr	r3, [pc, #28]	; (800fd68 <vPortFree+0xac>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	4a06      	ldr	r2, [pc, #24]	; (800fd68 <vPortFree+0xac>)
 800fd50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fd52:	6938      	ldr	r0, [r7, #16]
 800fd54:	f000 f86e 	bl	800fe34 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fd58:	f001 fee8 	bl	8011b2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fd5c:	bf00      	nop
 800fd5e:	3718      	adds	r7, #24
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	20026dac 	.word	0x20026dac
 800fd68:	20026da4 	.word	0x20026da4

0800fd6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b085      	sub	sp, #20
 800fd70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fd72:	4b29      	ldr	r3, [pc, #164]	; (800fe18 <prvHeapInit+0xac>)
 800fd74:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fd76:	4b29      	ldr	r3, [pc, #164]	; (800fe1c <prvHeapInit+0xb0>)
 800fd78:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	f003 0307 	and.w	r3, r3, #7
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d00c      	beq.n	800fd9e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	3307      	adds	r3, #7
 800fd88:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	f023 0307 	bic.w	r3, r3, #7
 800fd90:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fd92:	68ba      	ldr	r2, [r7, #8]
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	1ad3      	subs	r3, r2, r3
 800fd98:	4a20      	ldr	r2, [pc, #128]	; (800fe1c <prvHeapInit+0xb0>)
 800fd9a:	4413      	add	r3, r2
 800fd9c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fda2:	4a1f      	ldr	r2, [pc, #124]	; (800fe20 <prvHeapInit+0xb4>)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fda8:	4b1d      	ldr	r3, [pc, #116]	; (800fe20 <prvHeapInit+0xb4>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	68ba      	ldr	r2, [r7, #8]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fdb6:	2208      	movs	r2, #8
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	1a9b      	subs	r3, r3, r2
 800fdbc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f023 0307 	bic.w	r3, r3, #7
 800fdc4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	4a16      	ldr	r2, [pc, #88]	; (800fe24 <prvHeapInit+0xb8>)
 800fdca:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fdcc:	4b15      	ldr	r3, [pc, #84]	; (800fe24 <prvHeapInit+0xb8>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fdd4:	4b13      	ldr	r3, [pc, #76]	; (800fe24 <prvHeapInit+0xb8>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	68fa      	ldr	r2, [r7, #12]
 800fde4:	1ad2      	subs	r2, r2, r3
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fdea:	4b0e      	ldr	r3, [pc, #56]	; (800fe24 <prvHeapInit+0xb8>)
 800fdec:	681a      	ldr	r2, [r3, #0]
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	4a0c      	ldr	r2, [pc, #48]	; (800fe28 <prvHeapInit+0xbc>)
 800fdf8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	685b      	ldr	r3, [r3, #4]
 800fdfe:	4a0b      	ldr	r2, [pc, #44]	; (800fe2c <prvHeapInit+0xc0>)
 800fe00:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe02:	4b0b      	ldr	r3, [pc, #44]	; (800fe30 <prvHeapInit+0xc4>)
 800fe04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe08:	601a      	str	r2, [r3, #0]
}
 800fe0a:	bf00      	nop
 800fe0c:	3714      	adds	r7, #20
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr
 800fe16:	bf00      	nop
 800fe18:	000249f0 	.word	0x000249f0
 800fe1c:	200023a8 	.word	0x200023a8
 800fe20:	20026d98 	.word	0x20026d98
 800fe24:	20026da0 	.word	0x20026da0
 800fe28:	20026da8 	.word	0x20026da8
 800fe2c:	20026da4 	.word	0x20026da4
 800fe30:	20026dac 	.word	0x20026dac

0800fe34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe34:	b480      	push	{r7}
 800fe36:	b085      	sub	sp, #20
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe3c:	4b28      	ldr	r3, [pc, #160]	; (800fee0 <prvInsertBlockIntoFreeList+0xac>)
 800fe3e:	60fb      	str	r3, [r7, #12]
 800fe40:	e002      	b.n	800fe48 <prvInsertBlockIntoFreeList+0x14>
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	60fb      	str	r3, [r7, #12]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d8f7      	bhi.n	800fe42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	68ba      	ldr	r2, [r7, #8]
 800fe5c:	4413      	add	r3, r2
 800fe5e:	687a      	ldr	r2, [r7, #4]
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d108      	bne.n	800fe76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	685a      	ldr	r2, [r3, #4]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	441a      	add	r2, r3
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	68ba      	ldr	r2, [r7, #8]
 800fe80:	441a      	add	r2, r3
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d118      	bne.n	800febc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681a      	ldr	r2, [r3, #0]
 800fe8e:	4b15      	ldr	r3, [pc, #84]	; (800fee4 <prvInsertBlockIntoFreeList+0xb0>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d00d      	beq.n	800feb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	685a      	ldr	r2, [r3, #4]
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	441a      	add	r2, r3
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	601a      	str	r2, [r3, #0]
 800feb0:	e008      	b.n	800fec4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800feb2:	4b0c      	ldr	r3, [pc, #48]	; (800fee4 <prvInsertBlockIntoFreeList+0xb0>)
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	601a      	str	r2, [r3, #0]
 800feba:	e003      	b.n	800fec4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fec4:	68fa      	ldr	r2, [r7, #12]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	429a      	cmp	r2, r3
 800feca:	d002      	beq.n	800fed2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fed2:	bf00      	nop
 800fed4:	3714      	adds	r7, #20
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr
 800fede:	bf00      	nop
 800fee0:	20026d98 	.word	0x20026d98
 800fee4:	20026da0 	.word	0x20026da0

0800fee8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f103 0208 	add.w	r2, r3, #8
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f04f 32ff 	mov.w	r2, #4294967295
 800ff00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f103 0208 	add.w	r2, r3, #8
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f103 0208 	add.w	r2, r3, #8
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ff1c:	bf00      	nop
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ff36:	bf00      	nop
 800ff38:	370c      	adds	r7, #12
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr

0800ff42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff42:	b480      	push	{r7}
 800ff44:	b085      	sub	sp, #20
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
 800ff4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	68fa      	ldr	r2, [r7, #12]
 800ff56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	689a      	ldr	r2, [r3, #8]
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	689b      	ldr	r3, [r3, #8]
 800ff64:	683a      	ldr	r2, [r7, #0]
 800ff66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	683a      	ldr	r2, [r7, #0]
 800ff6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	1c5a      	adds	r2, r3, #1
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	601a      	str	r2, [r3, #0]
}
 800ff7e:	bf00      	nop
 800ff80:	3714      	adds	r7, #20
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr

0800ff8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff8a:	b480      	push	{r7}
 800ff8c:	b085      	sub	sp, #20
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	6078      	str	r0, [r7, #4]
 800ff92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa0:	d103      	bne.n	800ffaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	691b      	ldr	r3, [r3, #16]
 800ffa6:	60fb      	str	r3, [r7, #12]
 800ffa8:	e00c      	b.n	800ffc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	3308      	adds	r3, #8
 800ffae:	60fb      	str	r3, [r7, #12]
 800ffb0:	e002      	b.n	800ffb8 <vListInsert+0x2e>
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	60fb      	str	r3, [r7, #12]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	68ba      	ldr	r2, [r7, #8]
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d2f6      	bcs.n	800ffb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	685a      	ldr	r2, [r3, #4]
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	683a      	ldr	r2, [r7, #0]
 800ffd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	68fa      	ldr	r2, [r7, #12]
 800ffd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	683a      	ldr	r2, [r7, #0]
 800ffde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	1c5a      	adds	r2, r3, #1
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	601a      	str	r2, [r3, #0]
}
 800fff0:	bf00      	nop
 800fff2:	3714      	adds	r7, #20
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fffc:	b480      	push	{r7}
 800fffe:	b085      	sub	sp, #20
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	691b      	ldr	r3, [r3, #16]
 8010008:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	6892      	ldr	r2, [r2, #8]
 8010012:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	689b      	ldr	r3, [r3, #8]
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	6852      	ldr	r2, [r2, #4]
 801001c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	429a      	cmp	r2, r3
 8010026:	d103      	bne.n	8010030 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	689a      	ldr	r2, [r3, #8]
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	1e5a      	subs	r2, r3, #1
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
}
 8010044:	4618      	mov	r0, r3
 8010046:	3714      	adds	r7, #20
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010050:	b480      	push	{r7}
 8010052:	b085      	sub	sp, #20
 8010054:	af00      	add	r7, sp, #0
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	60b9      	str	r1, [r7, #8]
 801005a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	3b04      	subs	r3, #4
 8010060:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	3b04      	subs	r3, #4
 801006e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	f023 0201 	bic.w	r2, r3, #1
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	3b04      	subs	r3, #4
 801007e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010080:	4a0c      	ldr	r2, [pc, #48]	; (80100b4 <pxPortInitialiseStack+0x64>)
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	3b14      	subs	r3, #20
 801008a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801008c:	687a      	ldr	r2, [r7, #4]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	3b04      	subs	r3, #4
 8010096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f06f 0202 	mvn.w	r2, #2
 801009e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	3b20      	subs	r3, #32
 80100a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80100a6:	68fb      	ldr	r3, [r7, #12]
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3714      	adds	r7, #20
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr
 80100b4:	080100b9 	.word	0x080100b9

080100b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80100be:	2300      	movs	r3, #0
 80100c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80100c2:	4b11      	ldr	r3, [pc, #68]	; (8010108 <prvTaskExitError+0x50>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ca:	d009      	beq.n	80100e0 <prvTaskExitError+0x28>
 80100cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d0:	f383 8811 	msr	BASEPRI, r3
 80100d4:	f3bf 8f6f 	isb	sy
 80100d8:	f3bf 8f4f 	dsb	sy
 80100dc:	60fb      	str	r3, [r7, #12]
 80100de:	e7fe      	b.n	80100de <prvTaskExitError+0x26>
 80100e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e4:	f383 8811 	msr	BASEPRI, r3
 80100e8:	f3bf 8f6f 	isb	sy
 80100ec:	f3bf 8f4f 	dsb	sy
 80100f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80100f2:	bf00      	nop
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d0fc      	beq.n	80100f4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80100fa:	bf00      	nop
 80100fc:	3714      	adds	r7, #20
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop
 8010108:	20000084 	.word	0x20000084
 801010c:	00000000 	.word	0x00000000

08010110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010110:	4b07      	ldr	r3, [pc, #28]	; (8010130 <pxCurrentTCBConst2>)
 8010112:	6819      	ldr	r1, [r3, #0]
 8010114:	6808      	ldr	r0, [r1, #0]
 8010116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801011a:	f380 8809 	msr	PSP, r0
 801011e:	f3bf 8f6f 	isb	sy
 8010122:	f04f 0000 	mov.w	r0, #0
 8010126:	f380 8811 	msr	BASEPRI, r0
 801012a:	4770      	bx	lr
 801012c:	f3af 8000 	nop.w

08010130 <pxCurrentTCBConst2>:
 8010130:	20026db8 	.word	0x20026db8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010134:	bf00      	nop
 8010136:	bf00      	nop

08010138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010138:	4808      	ldr	r0, [pc, #32]	; (801015c <prvPortStartFirstTask+0x24>)
 801013a:	6800      	ldr	r0, [r0, #0]
 801013c:	6800      	ldr	r0, [r0, #0]
 801013e:	f380 8808 	msr	MSP, r0
 8010142:	f04f 0000 	mov.w	r0, #0
 8010146:	f380 8814 	msr	CONTROL, r0
 801014a:	b662      	cpsie	i
 801014c:	b661      	cpsie	f
 801014e:	f3bf 8f4f 	dsb	sy
 8010152:	f3bf 8f6f 	isb	sy
 8010156:	df00      	svc	0
 8010158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801015a:	bf00      	nop
 801015c:	e000ed08 	.word	0xe000ed08

08010160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b086      	sub	sp, #24
 8010164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010166:	4b44      	ldr	r3, [pc, #272]	; (8010278 <xPortStartScheduler+0x118>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4a44      	ldr	r2, [pc, #272]	; (801027c <xPortStartScheduler+0x11c>)
 801016c:	4293      	cmp	r3, r2
 801016e:	d109      	bne.n	8010184 <xPortStartScheduler+0x24>
 8010170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010174:	f383 8811 	msr	BASEPRI, r3
 8010178:	f3bf 8f6f 	isb	sy
 801017c:	f3bf 8f4f 	dsb	sy
 8010180:	613b      	str	r3, [r7, #16]
 8010182:	e7fe      	b.n	8010182 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010184:	4b3c      	ldr	r3, [pc, #240]	; (8010278 <xPortStartScheduler+0x118>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	4a3d      	ldr	r2, [pc, #244]	; (8010280 <xPortStartScheduler+0x120>)
 801018a:	4293      	cmp	r3, r2
 801018c:	d109      	bne.n	80101a2 <xPortStartScheduler+0x42>
 801018e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010192:	f383 8811 	msr	BASEPRI, r3
 8010196:	f3bf 8f6f 	isb	sy
 801019a:	f3bf 8f4f 	dsb	sy
 801019e:	60fb      	str	r3, [r7, #12]
 80101a0:	e7fe      	b.n	80101a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80101a2:	4b38      	ldr	r3, [pc, #224]	; (8010284 <xPortStartScheduler+0x124>)
 80101a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	22ff      	movs	r2, #255	; 0xff
 80101b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	b2db      	uxtb	r3, r3
 80101ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80101bc:	78fb      	ldrb	r3, [r7, #3]
 80101be:	b2db      	uxtb	r3, r3
 80101c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80101c4:	b2da      	uxtb	r2, r3
 80101c6:	4b30      	ldr	r3, [pc, #192]	; (8010288 <xPortStartScheduler+0x128>)
 80101c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80101ca:	4b30      	ldr	r3, [pc, #192]	; (801028c <xPortStartScheduler+0x12c>)
 80101cc:	2207      	movs	r2, #7
 80101ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101d0:	e009      	b.n	80101e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80101d2:	4b2e      	ldr	r3, [pc, #184]	; (801028c <xPortStartScheduler+0x12c>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	3b01      	subs	r3, #1
 80101d8:	4a2c      	ldr	r2, [pc, #176]	; (801028c <xPortStartScheduler+0x12c>)
 80101da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80101dc:	78fb      	ldrb	r3, [r7, #3]
 80101de:	b2db      	uxtb	r3, r3
 80101e0:	005b      	lsls	r3, r3, #1
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101e6:	78fb      	ldrb	r3, [r7, #3]
 80101e8:	b2db      	uxtb	r3, r3
 80101ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101ee:	2b80      	cmp	r3, #128	; 0x80
 80101f0:	d0ef      	beq.n	80101d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80101f2:	4b26      	ldr	r3, [pc, #152]	; (801028c <xPortStartScheduler+0x12c>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f1c3 0307 	rsb	r3, r3, #7
 80101fa:	2b04      	cmp	r3, #4
 80101fc:	d009      	beq.n	8010212 <xPortStartScheduler+0xb2>
 80101fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010202:	f383 8811 	msr	BASEPRI, r3
 8010206:	f3bf 8f6f 	isb	sy
 801020a:	f3bf 8f4f 	dsb	sy
 801020e:	60bb      	str	r3, [r7, #8]
 8010210:	e7fe      	b.n	8010210 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010212:	4b1e      	ldr	r3, [pc, #120]	; (801028c <xPortStartScheduler+0x12c>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	021b      	lsls	r3, r3, #8
 8010218:	4a1c      	ldr	r2, [pc, #112]	; (801028c <xPortStartScheduler+0x12c>)
 801021a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801021c:	4b1b      	ldr	r3, [pc, #108]	; (801028c <xPortStartScheduler+0x12c>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010224:	4a19      	ldr	r2, [pc, #100]	; (801028c <xPortStartScheduler+0x12c>)
 8010226:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	b2da      	uxtb	r2, r3
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010230:	4b17      	ldr	r3, [pc, #92]	; (8010290 <xPortStartScheduler+0x130>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4a16      	ldr	r2, [pc, #88]	; (8010290 <xPortStartScheduler+0x130>)
 8010236:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801023a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801023c:	4b14      	ldr	r3, [pc, #80]	; (8010290 <xPortStartScheduler+0x130>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a13      	ldr	r2, [pc, #76]	; (8010290 <xPortStartScheduler+0x130>)
 8010242:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010246:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010248:	f7f2 f890 	bl	800236c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801024c:	4b11      	ldr	r3, [pc, #68]	; (8010294 <xPortStartScheduler+0x134>)
 801024e:	2200      	movs	r2, #0
 8010250:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010252:	f000 f8d1 	bl	80103f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010256:	4b10      	ldr	r3, [pc, #64]	; (8010298 <xPortStartScheduler+0x138>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	4a0f      	ldr	r2, [pc, #60]	; (8010298 <xPortStartScheduler+0x138>)
 801025c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010260:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010262:	f7ff ff69 	bl	8010138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010266:	f001 fdf9 	bl	8011e5c <vTaskSwitchContext>
	prvTaskExitError();
 801026a:	f7ff ff25 	bl	80100b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801026e:	2300      	movs	r3, #0
}
 8010270:	4618      	mov	r0, r3
 8010272:	3718      	adds	r7, #24
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}
 8010278:	e000ed00 	.word	0xe000ed00
 801027c:	410fc271 	.word	0x410fc271
 8010280:	410fc270 	.word	0x410fc270
 8010284:	e000e400 	.word	0xe000e400
 8010288:	20026db0 	.word	0x20026db0
 801028c:	20026db4 	.word	0x20026db4
 8010290:	e000ed20 	.word	0xe000ed20
 8010294:	20000084 	.word	0x20000084
 8010298:	e000ef34 	.word	0xe000ef34

0801029c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801029c:	b480      	push	{r7}
 801029e:	b083      	sub	sp, #12
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a6:	f383 8811 	msr	BASEPRI, r3
 80102aa:	f3bf 8f6f 	isb	sy
 80102ae:	f3bf 8f4f 	dsb	sy
 80102b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80102b4:	4b0e      	ldr	r3, [pc, #56]	; (80102f0 <vPortEnterCritical+0x54>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	3301      	adds	r3, #1
 80102ba:	4a0d      	ldr	r2, [pc, #52]	; (80102f0 <vPortEnterCritical+0x54>)
 80102bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80102be:	4b0c      	ldr	r3, [pc, #48]	; (80102f0 <vPortEnterCritical+0x54>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d10e      	bne.n	80102e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80102c6:	4b0b      	ldr	r3, [pc, #44]	; (80102f4 <vPortEnterCritical+0x58>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	b2db      	uxtb	r3, r3
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d009      	beq.n	80102e4 <vPortEnterCritical+0x48>
 80102d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d4:	f383 8811 	msr	BASEPRI, r3
 80102d8:	f3bf 8f6f 	isb	sy
 80102dc:	f3bf 8f4f 	dsb	sy
 80102e0:	603b      	str	r3, [r7, #0]
 80102e2:	e7fe      	b.n	80102e2 <vPortEnterCritical+0x46>
	}
}
 80102e4:	bf00      	nop
 80102e6:	370c      	adds	r7, #12
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr
 80102f0:	20000084 	.word	0x20000084
 80102f4:	e000ed04 	.word	0xe000ed04

080102f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80102f8:	b480      	push	{r7}
 80102fa:	b083      	sub	sp, #12
 80102fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102fe:	4b11      	ldr	r3, [pc, #68]	; (8010344 <vPortExitCritical+0x4c>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d109      	bne.n	801031a <vPortExitCritical+0x22>
 8010306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801030a:	f383 8811 	msr	BASEPRI, r3
 801030e:	f3bf 8f6f 	isb	sy
 8010312:	f3bf 8f4f 	dsb	sy
 8010316:	607b      	str	r3, [r7, #4]
 8010318:	e7fe      	b.n	8010318 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801031a:	4b0a      	ldr	r3, [pc, #40]	; (8010344 <vPortExitCritical+0x4c>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	3b01      	subs	r3, #1
 8010320:	4a08      	ldr	r2, [pc, #32]	; (8010344 <vPortExitCritical+0x4c>)
 8010322:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010324:	4b07      	ldr	r3, [pc, #28]	; (8010344 <vPortExitCritical+0x4c>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d104      	bne.n	8010336 <vPortExitCritical+0x3e>
 801032c:	2300      	movs	r3, #0
 801032e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010336:	bf00      	nop
 8010338:	370c      	adds	r7, #12
 801033a:	46bd      	mov	sp, r7
 801033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop
 8010344:	20000084 	.word	0x20000084
	...

08010350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010350:	f3ef 8009 	mrs	r0, PSP
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	4b15      	ldr	r3, [pc, #84]	; (80103b0 <pxCurrentTCBConst>)
 801035a:	681a      	ldr	r2, [r3, #0]
 801035c:	f01e 0f10 	tst.w	lr, #16
 8010360:	bf08      	it	eq
 8010362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801036a:	6010      	str	r0, [r2, #0]
 801036c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010374:	f380 8811 	msr	BASEPRI, r0
 8010378:	f3bf 8f4f 	dsb	sy
 801037c:	f3bf 8f6f 	isb	sy
 8010380:	f001 fd6c 	bl	8011e5c <vTaskSwitchContext>
 8010384:	f04f 0000 	mov.w	r0, #0
 8010388:	f380 8811 	msr	BASEPRI, r0
 801038c:	bc09      	pop	{r0, r3}
 801038e:	6819      	ldr	r1, [r3, #0]
 8010390:	6808      	ldr	r0, [r1, #0]
 8010392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010396:	f01e 0f10 	tst.w	lr, #16
 801039a:	bf08      	it	eq
 801039c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80103a0:	f380 8809 	msr	PSP, r0
 80103a4:	f3bf 8f6f 	isb	sy
 80103a8:	4770      	bx	lr
 80103aa:	bf00      	nop
 80103ac:	f3af 8000 	nop.w

080103b0 <pxCurrentTCBConst>:
 80103b0:	20026db8 	.word	0x20026db8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80103b4:	bf00      	nop
 80103b6:	bf00      	nop

080103b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
	__asm volatile
 80103be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c2:	f383 8811 	msr	BASEPRI, r3
 80103c6:	f3bf 8f6f 	isb	sy
 80103ca:	f3bf 8f4f 	dsb	sy
 80103ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80103d0:	f001 fc7e 	bl	8011cd0 <xTaskIncrementTick>
 80103d4:	4603      	mov	r3, r0
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d003      	beq.n	80103e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80103da:	4b06      	ldr	r3, [pc, #24]	; (80103f4 <SysTick_Handler+0x3c>)
 80103dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103e0:	601a      	str	r2, [r3, #0]
 80103e2:	2300      	movs	r3, #0
 80103e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80103ec:	bf00      	nop
 80103ee:	3708      	adds	r7, #8
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	e000ed04 	.word	0xe000ed04

080103f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80103f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010408 <vPortEnableVFP+0x10>
 80103fc:	6801      	ldr	r1, [r0, #0]
 80103fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010402:	6001      	str	r1, [r0, #0]
 8010404:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010406:	bf00      	nop
 8010408:	e000ed88 	.word	0xe000ed88

0801040c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801040c:	b480      	push	{r7}
 801040e:	b085      	sub	sp, #20
 8010410:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010412:	f3ef 8305 	mrs	r3, IPSR
 8010416:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2b0f      	cmp	r3, #15
 801041c:	d913      	bls.n	8010446 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801041e:	4a16      	ldr	r2, [pc, #88]	; (8010478 <vPortValidateInterruptPriority+0x6c>)
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	4413      	add	r3, r2
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010428:	4b14      	ldr	r3, [pc, #80]	; (801047c <vPortValidateInterruptPriority+0x70>)
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	7afa      	ldrb	r2, [r7, #11]
 801042e:	429a      	cmp	r2, r3
 8010430:	d209      	bcs.n	8010446 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8010432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010436:	f383 8811 	msr	BASEPRI, r3
 801043a:	f3bf 8f6f 	isb	sy
 801043e:	f3bf 8f4f 	dsb	sy
 8010442:	607b      	str	r3, [r7, #4]
 8010444:	e7fe      	b.n	8010444 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010446:	4b0e      	ldr	r3, [pc, #56]	; (8010480 <vPortValidateInterruptPriority+0x74>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801044e:	4b0d      	ldr	r3, [pc, #52]	; (8010484 <vPortValidateInterruptPriority+0x78>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	429a      	cmp	r2, r3
 8010454:	d909      	bls.n	801046a <vPortValidateInterruptPriority+0x5e>
 8010456:	f04f 0350 	mov.w	r3, #80	; 0x50
 801045a:	f383 8811 	msr	BASEPRI, r3
 801045e:	f3bf 8f6f 	isb	sy
 8010462:	f3bf 8f4f 	dsb	sy
 8010466:	603b      	str	r3, [r7, #0]
 8010468:	e7fe      	b.n	8010468 <vPortValidateInterruptPriority+0x5c>
	}
 801046a:	bf00      	nop
 801046c:	3714      	adds	r7, #20
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop
 8010478:	e000e3f0 	.word	0xe000e3f0
 801047c:	20026db0 	.word	0x20026db0
 8010480:	e000ed0c 	.word	0xe000ed0c
 8010484:	20026db4 	.word	0x20026db4

08010488 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d109      	bne.n	80104b0 <xQueueGenericReset+0x28>
 801049c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a0:	f383 8811 	msr	BASEPRI, r3
 80104a4:	f3bf 8f6f 	isb	sy
 80104a8:	f3bf 8f4f 	dsb	sy
 80104ac:	60bb      	str	r3, [r7, #8]
 80104ae:	e7fe      	b.n	80104ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80104b0:	f7ff fef4 	bl	801029c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104bc:	68f9      	ldr	r1, [r7, #12]
 80104be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80104c0:	fb01 f303 	mul.w	r3, r1, r3
 80104c4:	441a      	add	r2, r3
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2200      	movs	r2, #0
 80104ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	681a      	ldr	r2, [r3, #0]
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104e0:	3b01      	subs	r3, #1
 80104e2:	68f9      	ldr	r1, [r7, #12]
 80104e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80104e6:	fb01 f303 	mul.w	r3, r1, r3
 80104ea:	441a      	add	r2, r3
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	22ff      	movs	r2, #255	; 0xff
 80104f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	22ff      	movs	r2, #255	; 0xff
 80104fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d114      	bne.n	8010530 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	691b      	ldr	r3, [r3, #16]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d01a      	beq.n	8010544 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	3310      	adds	r3, #16
 8010512:	4618      	mov	r0, r3
 8010514:	f001 fd78 	bl	8012008 <xTaskRemoveFromEventList>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d012      	beq.n	8010544 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801051e:	4b0d      	ldr	r3, [pc, #52]	; (8010554 <xQueueGenericReset+0xcc>)
 8010520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010524:	601a      	str	r2, [r3, #0]
 8010526:	f3bf 8f4f 	dsb	sy
 801052a:	f3bf 8f6f 	isb	sy
 801052e:	e009      	b.n	8010544 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	3310      	adds	r3, #16
 8010534:	4618      	mov	r0, r3
 8010536:	f7ff fcd7 	bl	800fee8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	3324      	adds	r3, #36	; 0x24
 801053e:	4618      	mov	r0, r3
 8010540:	f7ff fcd2 	bl	800fee8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010544:	f7ff fed8 	bl	80102f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010548:	2301      	movs	r3, #1
}
 801054a:	4618      	mov	r0, r3
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	e000ed04 	.word	0xe000ed04

08010558 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010558:	b580      	push	{r7, lr}
 801055a:	b08e      	sub	sp, #56	; 0x38
 801055c:	af02      	add	r7, sp, #8
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
 8010564:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d109      	bne.n	8010580 <xQueueGenericCreateStatic+0x28>
 801056c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010570:	f383 8811 	msr	BASEPRI, r3
 8010574:	f3bf 8f6f 	isb	sy
 8010578:	f3bf 8f4f 	dsb	sy
 801057c:	62bb      	str	r3, [r7, #40]	; 0x28
 801057e:	e7fe      	b.n	801057e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d109      	bne.n	801059a <xQueueGenericCreateStatic+0x42>
 8010586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058a:	f383 8811 	msr	BASEPRI, r3
 801058e:	f3bf 8f6f 	isb	sy
 8010592:	f3bf 8f4f 	dsb	sy
 8010596:	627b      	str	r3, [r7, #36]	; 0x24
 8010598:	e7fe      	b.n	8010598 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d002      	beq.n	80105a6 <xQueueGenericCreateStatic+0x4e>
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d001      	beq.n	80105aa <xQueueGenericCreateStatic+0x52>
 80105a6:	2301      	movs	r3, #1
 80105a8:	e000      	b.n	80105ac <xQueueGenericCreateStatic+0x54>
 80105aa:	2300      	movs	r3, #0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d109      	bne.n	80105c4 <xQueueGenericCreateStatic+0x6c>
 80105b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b4:	f383 8811 	msr	BASEPRI, r3
 80105b8:	f3bf 8f6f 	isb	sy
 80105bc:	f3bf 8f4f 	dsb	sy
 80105c0:	623b      	str	r3, [r7, #32]
 80105c2:	e7fe      	b.n	80105c2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d102      	bne.n	80105d0 <xQueueGenericCreateStatic+0x78>
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d101      	bne.n	80105d4 <xQueueGenericCreateStatic+0x7c>
 80105d0:	2301      	movs	r3, #1
 80105d2:	e000      	b.n	80105d6 <xQueueGenericCreateStatic+0x7e>
 80105d4:	2300      	movs	r3, #0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d109      	bne.n	80105ee <xQueueGenericCreateStatic+0x96>
 80105da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105de:	f383 8811 	msr	BASEPRI, r3
 80105e2:	f3bf 8f6f 	isb	sy
 80105e6:	f3bf 8f4f 	dsb	sy
 80105ea:	61fb      	str	r3, [r7, #28]
 80105ec:	e7fe      	b.n	80105ec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80105ee:	2350      	movs	r3, #80	; 0x50
 80105f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	2b50      	cmp	r3, #80	; 0x50
 80105f6:	d009      	beq.n	801060c <xQueueGenericCreateStatic+0xb4>
 80105f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fc:	f383 8811 	msr	BASEPRI, r3
 8010600:	f3bf 8f6f 	isb	sy
 8010604:	f3bf 8f4f 	dsb	sy
 8010608:	61bb      	str	r3, [r7, #24]
 801060a:	e7fe      	b.n	801060a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00d      	beq.n	8010632 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010618:	2201      	movs	r2, #1
 801061a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801061e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010624:	9300      	str	r3, [sp, #0]
 8010626:	4613      	mov	r3, r2
 8010628:	687a      	ldr	r2, [r7, #4]
 801062a:	68b9      	ldr	r1, [r7, #8]
 801062c:	68f8      	ldr	r0, [r7, #12]
 801062e:	f000 f842 	bl	80106b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010634:	4618      	mov	r0, r3
 8010636:	3730      	adds	r7, #48	; 0x30
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801063c:	b580      	push	{r7, lr}
 801063e:	b08a      	sub	sp, #40	; 0x28
 8010640:	af02      	add	r7, sp, #8
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	4613      	mov	r3, r2
 8010648:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d109      	bne.n	8010664 <xQueueGenericCreate+0x28>
 8010650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010654:	f383 8811 	msr	BASEPRI, r3
 8010658:	f3bf 8f6f 	isb	sy
 801065c:	f3bf 8f4f 	dsb	sy
 8010660:	613b      	str	r3, [r7, #16]
 8010662:	e7fe      	b.n	8010662 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d102      	bne.n	8010670 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801066a:	2300      	movs	r3, #0
 801066c:	61fb      	str	r3, [r7, #28]
 801066e:	e004      	b.n	801067a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	68ba      	ldr	r2, [r7, #8]
 8010674:	fb02 f303 	mul.w	r3, r2, r3
 8010678:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801067a:	69fb      	ldr	r3, [r7, #28]
 801067c:	3350      	adds	r3, #80	; 0x50
 801067e:	4618      	mov	r0, r3
 8010680:	f7ff fa56 	bl	800fb30 <pvPortMalloc>
 8010684:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010686:	69bb      	ldr	r3, [r7, #24]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d00f      	beq.n	80106ac <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 801068c:	69bb      	ldr	r3, [r7, #24]
 801068e:	3350      	adds	r3, #80	; 0x50
 8010690:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010692:	69bb      	ldr	r3, [r7, #24]
 8010694:	2200      	movs	r2, #0
 8010696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801069a:	79fa      	ldrb	r2, [r7, #7]
 801069c:	69bb      	ldr	r3, [r7, #24]
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	4613      	mov	r3, r2
 80106a2:	697a      	ldr	r2, [r7, #20]
 80106a4:	68b9      	ldr	r1, [r7, #8]
 80106a6:	68f8      	ldr	r0, [r7, #12]
 80106a8:	f000 f805 	bl	80106b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80106ac:	69bb      	ldr	r3, [r7, #24]
	}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3720      	adds	r7, #32
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b084      	sub	sp, #16
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	60f8      	str	r0, [r7, #12]
 80106be:	60b9      	str	r1, [r7, #8]
 80106c0:	607a      	str	r2, [r7, #4]
 80106c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d103      	bne.n	80106d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	69ba      	ldr	r2, [r7, #24]
 80106ce:	601a      	str	r2, [r3, #0]
 80106d0:	e002      	b.n	80106d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	68fa      	ldr	r2, [r7, #12]
 80106dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80106e4:	2101      	movs	r1, #1
 80106e6:	69b8      	ldr	r0, [r7, #24]
 80106e8:	f7ff fece 	bl	8010488 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80106ec:	69bb      	ldr	r3, [r7, #24]
 80106ee:	78fa      	ldrb	r2, [r7, #3]
 80106f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80106f4:	bf00      	nop
 80106f6:	3710      	adds	r7, #16
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00e      	beq.n	8010728 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2200      	movs	r2, #0
 801070e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2200      	movs	r2, #0
 8010714:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2200      	movs	r2, #0
 801071a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801071c:	2300      	movs	r3, #0
 801071e:	2200      	movs	r2, #0
 8010720:	2100      	movs	r1, #0
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f000 f906 	bl	8010934 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010728:	bf00      	nop
 801072a:	3708      	adds	r7, #8
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010730:	b580      	push	{r7, lr}
 8010732:	b086      	sub	sp, #24
 8010734:	af00      	add	r7, sp, #0
 8010736:	4603      	mov	r3, r0
 8010738:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801073a:	2301      	movs	r3, #1
 801073c:	617b      	str	r3, [r7, #20]
 801073e:	2300      	movs	r3, #0
 8010740:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010742:	79fb      	ldrb	r3, [r7, #7]
 8010744:	461a      	mov	r2, r3
 8010746:	6939      	ldr	r1, [r7, #16]
 8010748:	6978      	ldr	r0, [r7, #20]
 801074a:	f7ff ff77 	bl	801063c <xQueueGenericCreate>
 801074e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8010750:	68f8      	ldr	r0, [r7, #12]
 8010752:	f7ff ffd3 	bl	80106fc <prvInitialiseMutex>

		return pxNewQueue;
 8010756:	68fb      	ldr	r3, [r7, #12]
	}
 8010758:	4618      	mov	r0, r3
 801075a:	3718      	adds	r7, #24
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010760:	b580      	push	{r7, lr}
 8010762:	b088      	sub	sp, #32
 8010764:	af02      	add	r7, sp, #8
 8010766:	4603      	mov	r3, r0
 8010768:	6039      	str	r1, [r7, #0]
 801076a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801076c:	2301      	movs	r3, #1
 801076e:	617b      	str	r3, [r7, #20]
 8010770:	2300      	movs	r3, #0
 8010772:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010774:	79fb      	ldrb	r3, [r7, #7]
 8010776:	9300      	str	r3, [sp, #0]
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	2200      	movs	r2, #0
 801077c:	6939      	ldr	r1, [r7, #16]
 801077e:	6978      	ldr	r0, [r7, #20]
 8010780:	f7ff feea 	bl	8010558 <xQueueGenericCreateStatic>
 8010784:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	f7ff ffb8 	bl	80106fc <prvInitialiseMutex>

		return pxNewQueue;
 801078c:	68fb      	ldr	r3, [r7, #12]
	}
 801078e:	4618      	mov	r0, r3
 8010790:	3718      	adds	r7, #24
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}

08010796 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8010796:	b590      	push	{r4, r7, lr}
 8010798:	b087      	sub	sp, #28
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d109      	bne.n	80107bc <xQueueGiveMutexRecursive+0x26>
 80107a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ac:	f383 8811 	msr	BASEPRI, r3
 80107b0:	f3bf 8f6f 	isb	sy
 80107b4:	f3bf 8f4f 	dsb	sy
 80107b8:	60fb      	str	r3, [r7, #12]
 80107ba:	e7fe      	b.n	80107ba <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	685c      	ldr	r4, [r3, #4]
 80107c0:	f001 fe34 	bl	801242c <xTaskGetCurrentTaskHandle>
 80107c4:	4603      	mov	r3, r0
 80107c6:	429c      	cmp	r4, r3
 80107c8:	d111      	bne.n	80107ee <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	68db      	ldr	r3, [r3, #12]
 80107ce:	1e5a      	subs	r2, r3, #1
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d105      	bne.n	80107e8 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80107dc:	2300      	movs	r3, #0
 80107de:	2200      	movs	r2, #0
 80107e0:	2100      	movs	r1, #0
 80107e2:	6938      	ldr	r0, [r7, #16]
 80107e4:	f000 f8a6 	bl	8010934 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80107e8:	2301      	movs	r3, #1
 80107ea:	617b      	str	r3, [r7, #20]
 80107ec:	e001      	b.n	80107f2 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80107ee:	2300      	movs	r3, #0
 80107f0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80107f2:	697b      	ldr	r3, [r7, #20]
	}
 80107f4:	4618      	mov	r0, r3
 80107f6:	371c      	adds	r7, #28
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd90      	pop	{r4, r7, pc}

080107fc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80107fc:	b590      	push	{r4, r7, lr}
 80107fe:	b087      	sub	sp, #28
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d109      	bne.n	8010824 <xQueueTakeMutexRecursive+0x28>
 8010810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010814:	f383 8811 	msr	BASEPRI, r3
 8010818:	f3bf 8f6f 	isb	sy
 801081c:	f3bf 8f4f 	dsb	sy
 8010820:	60fb      	str	r3, [r7, #12]
 8010822:	e7fe      	b.n	8010822 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	685c      	ldr	r4, [r3, #4]
 8010828:	f001 fe00 	bl	801242c <xTaskGetCurrentTaskHandle>
 801082c:	4603      	mov	r3, r0
 801082e:	429c      	cmp	r4, r3
 8010830:	d107      	bne.n	8010842 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	1c5a      	adds	r2, r3, #1
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801083c:	2301      	movs	r3, #1
 801083e:	617b      	str	r3, [r7, #20]
 8010840:	e00c      	b.n	801085c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010842:	6839      	ldr	r1, [r7, #0]
 8010844:	6938      	ldr	r0, [r7, #16]
 8010846:	f000 fb69 	bl	8010f1c <xQueueSemaphoreTake>
 801084a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d004      	beq.n	801085c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	68db      	ldr	r3, [r3, #12]
 8010856:	1c5a      	adds	r2, r3, #1
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801085c:	697b      	ldr	r3, [r7, #20]
	}
 801085e:	4618      	mov	r0, r3
 8010860:	371c      	adds	r7, #28
 8010862:	46bd      	mov	sp, r7
 8010864:	bd90      	pop	{r4, r7, pc}

08010866 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010866:	b580      	push	{r7, lr}
 8010868:	b08a      	sub	sp, #40	; 0x28
 801086a:	af02      	add	r7, sp, #8
 801086c:	60f8      	str	r0, [r7, #12]
 801086e:	60b9      	str	r1, [r7, #8]
 8010870:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d109      	bne.n	801088c <xQueueCreateCountingSemaphoreStatic+0x26>
 8010878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801087c:	f383 8811 	msr	BASEPRI, r3
 8010880:	f3bf 8f6f 	isb	sy
 8010884:	f3bf 8f4f 	dsb	sy
 8010888:	61bb      	str	r3, [r7, #24]
 801088a:	e7fe      	b.n	801088a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801088c:	68ba      	ldr	r2, [r7, #8]
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	429a      	cmp	r2, r3
 8010892:	d909      	bls.n	80108a8 <xQueueCreateCountingSemaphoreStatic+0x42>
 8010894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010898:	f383 8811 	msr	BASEPRI, r3
 801089c:	f3bf 8f6f 	isb	sy
 80108a0:	f3bf 8f4f 	dsb	sy
 80108a4:	617b      	str	r3, [r7, #20]
 80108a6:	e7fe      	b.n	80108a6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80108a8:	2302      	movs	r3, #2
 80108aa:	9300      	str	r3, [sp, #0]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2200      	movs	r2, #0
 80108b0:	2100      	movs	r1, #0
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	f7ff fe50 	bl	8010558 <xQueueGenericCreateStatic>
 80108b8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80108ba:	69fb      	ldr	r3, [r7, #28]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d002      	beq.n	80108c6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80108c0:	69fb      	ldr	r3, [r7, #28]
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80108c6:	69fb      	ldr	r3, [r7, #28]
	}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3720      	adds	r7, #32
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b086      	sub	sp, #24
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d109      	bne.n	80108f4 <xQueueCreateCountingSemaphore+0x24>
 80108e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e4:	f383 8811 	msr	BASEPRI, r3
 80108e8:	f3bf 8f6f 	isb	sy
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	613b      	str	r3, [r7, #16]
 80108f2:	e7fe      	b.n	80108f2 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80108f4:	683a      	ldr	r2, [r7, #0]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d909      	bls.n	8010910 <xQueueCreateCountingSemaphore+0x40>
 80108fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010900:	f383 8811 	msr	BASEPRI, r3
 8010904:	f3bf 8f6f 	isb	sy
 8010908:	f3bf 8f4f 	dsb	sy
 801090c:	60fb      	str	r3, [r7, #12]
 801090e:	e7fe      	b.n	801090e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010910:	2202      	movs	r2, #2
 8010912:	2100      	movs	r1, #0
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f7ff fe91 	bl	801063c <xQueueGenericCreate>
 801091a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d002      	beq.n	8010928 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	683a      	ldr	r2, [r7, #0]
 8010926:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010928:	697b      	ldr	r3, [r7, #20]
	}
 801092a:	4618      	mov	r0, r3
 801092c:	3718      	adds	r7, #24
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
	...

08010934 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b08e      	sub	sp, #56	; 0x38
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	607a      	str	r2, [r7, #4]
 8010940:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010942:	2300      	movs	r3, #0
 8010944:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801094a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094c:	2b00      	cmp	r3, #0
 801094e:	d109      	bne.n	8010964 <xQueueGenericSend+0x30>
 8010950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010954:	f383 8811 	msr	BASEPRI, r3
 8010958:	f3bf 8f6f 	isb	sy
 801095c:	f3bf 8f4f 	dsb	sy
 8010960:	62bb      	str	r3, [r7, #40]	; 0x28
 8010962:	e7fe      	b.n	8010962 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d103      	bne.n	8010972 <xQueueGenericSend+0x3e>
 801096a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801096e:	2b00      	cmp	r3, #0
 8010970:	d101      	bne.n	8010976 <xQueueGenericSend+0x42>
 8010972:	2301      	movs	r3, #1
 8010974:	e000      	b.n	8010978 <xQueueGenericSend+0x44>
 8010976:	2300      	movs	r3, #0
 8010978:	2b00      	cmp	r3, #0
 801097a:	d109      	bne.n	8010990 <xQueueGenericSend+0x5c>
 801097c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010980:	f383 8811 	msr	BASEPRI, r3
 8010984:	f3bf 8f6f 	isb	sy
 8010988:	f3bf 8f4f 	dsb	sy
 801098c:	627b      	str	r3, [r7, #36]	; 0x24
 801098e:	e7fe      	b.n	801098e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	2b02      	cmp	r3, #2
 8010994:	d103      	bne.n	801099e <xQueueGenericSend+0x6a>
 8010996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801099a:	2b01      	cmp	r3, #1
 801099c:	d101      	bne.n	80109a2 <xQueueGenericSend+0x6e>
 801099e:	2301      	movs	r3, #1
 80109a0:	e000      	b.n	80109a4 <xQueueGenericSend+0x70>
 80109a2:	2300      	movs	r3, #0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d109      	bne.n	80109bc <xQueueGenericSend+0x88>
 80109a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ac:	f383 8811 	msr	BASEPRI, r3
 80109b0:	f3bf 8f6f 	isb	sy
 80109b4:	f3bf 8f4f 	dsb	sy
 80109b8:	623b      	str	r3, [r7, #32]
 80109ba:	e7fe      	b.n	80109ba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80109bc:	f001 fd46 	bl	801244c <xTaskGetSchedulerState>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d102      	bne.n	80109cc <xQueueGenericSend+0x98>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d101      	bne.n	80109d0 <xQueueGenericSend+0x9c>
 80109cc:	2301      	movs	r3, #1
 80109ce:	e000      	b.n	80109d2 <xQueueGenericSend+0x9e>
 80109d0:	2300      	movs	r3, #0
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d109      	bne.n	80109ea <xQueueGenericSend+0xb6>
 80109d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109da:	f383 8811 	msr	BASEPRI, r3
 80109de:	f3bf 8f6f 	isb	sy
 80109e2:	f3bf 8f4f 	dsb	sy
 80109e6:	61fb      	str	r3, [r7, #28]
 80109e8:	e7fe      	b.n	80109e8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80109ea:	f7ff fc57 	bl	801029c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80109ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d302      	bcc.n	8010a00 <xQueueGenericSend+0xcc>
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	2b02      	cmp	r3, #2
 80109fe:	d129      	bne.n	8010a54 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a00:	683a      	ldr	r2, [r7, #0]
 8010a02:	68b9      	ldr	r1, [r7, #8]
 8010a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a06:	f000 fc80 	bl	801130a <prvCopyDataToQueue>
 8010a0a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d010      	beq.n	8010a36 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a16:	3324      	adds	r3, #36	; 0x24
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f001 faf5 	bl	8012008 <xTaskRemoveFromEventList>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d013      	beq.n	8010a4c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010a24:	4b3f      	ldr	r3, [pc, #252]	; (8010b24 <xQueueGenericSend+0x1f0>)
 8010a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a2a:	601a      	str	r2, [r3, #0]
 8010a2c:	f3bf 8f4f 	dsb	sy
 8010a30:	f3bf 8f6f 	isb	sy
 8010a34:	e00a      	b.n	8010a4c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d007      	beq.n	8010a4c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010a3c:	4b39      	ldr	r3, [pc, #228]	; (8010b24 <xQueueGenericSend+0x1f0>)
 8010a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a42:	601a      	str	r2, [r3, #0]
 8010a44:	f3bf 8f4f 	dsb	sy
 8010a48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010a4c:	f7ff fc54 	bl	80102f8 <vPortExitCritical>
				return pdPASS;
 8010a50:	2301      	movs	r3, #1
 8010a52:	e063      	b.n	8010b1c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d103      	bne.n	8010a62 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010a5a:	f7ff fc4d 	bl	80102f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	e05c      	b.n	8010b1c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d106      	bne.n	8010a76 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a68:	f107 0314 	add.w	r3, r7, #20
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f001 fb2f 	bl	80120d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a72:	2301      	movs	r3, #1
 8010a74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a76:	f7ff fc3f 	bl	80102f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a7a:	f001 f811 	bl	8011aa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a7e:	f7ff fc0d 	bl	801029c <vPortEnterCritical>
 8010a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a88:	b25b      	sxtb	r3, r3
 8010a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a8e:	d103      	bne.n	8010a98 <xQueueGenericSend+0x164>
 8010a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a92:	2200      	movs	r2, #0
 8010a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a9e:	b25b      	sxtb	r3, r3
 8010aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aa4:	d103      	bne.n	8010aae <xQueueGenericSend+0x17a>
 8010aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010aae:	f7ff fc23 	bl	80102f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010ab2:	1d3a      	adds	r2, r7, #4
 8010ab4:	f107 0314 	add.w	r3, r7, #20
 8010ab8:	4611      	mov	r1, r2
 8010aba:	4618      	mov	r0, r3
 8010abc:	f001 fb1e 	bl	80120fc <xTaskCheckForTimeOut>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d124      	bne.n	8010b10 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ac8:	f000 fd17 	bl	80114fa <prvIsQueueFull>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d018      	beq.n	8010b04 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad4:	3310      	adds	r3, #16
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	4611      	mov	r1, r2
 8010ada:	4618      	mov	r0, r3
 8010adc:	f001 fa46 	bl	8011f6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ae2:	f000 fca2 	bl	801142a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010ae6:	f001 f821 	bl	8011b2c <xTaskResumeAll>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	f47f af7c 	bne.w	80109ea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010af2:	4b0c      	ldr	r3, [pc, #48]	; (8010b24 <xQueueGenericSend+0x1f0>)
 8010af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010af8:	601a      	str	r2, [r3, #0]
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	f3bf 8f6f 	isb	sy
 8010b02:	e772      	b.n	80109ea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b06:	f000 fc90 	bl	801142a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b0a:	f001 f80f 	bl	8011b2c <xTaskResumeAll>
 8010b0e:	e76c      	b.n	80109ea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b12:	f000 fc8a 	bl	801142a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b16:	f001 f809 	bl	8011b2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010b1a:	2300      	movs	r3, #0
		}
	}
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3738      	adds	r7, #56	; 0x38
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	e000ed04 	.word	0xe000ed04

08010b28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b08e      	sub	sp, #56	; 0x38
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	60b9      	str	r1, [r7, #8]
 8010b32:	607a      	str	r2, [r7, #4]
 8010b34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d109      	bne.n	8010b54 <xQueueGenericSendFromISR+0x2c>
 8010b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b44:	f383 8811 	msr	BASEPRI, r3
 8010b48:	f3bf 8f6f 	isb	sy
 8010b4c:	f3bf 8f4f 	dsb	sy
 8010b50:	627b      	str	r3, [r7, #36]	; 0x24
 8010b52:	e7fe      	b.n	8010b52 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d103      	bne.n	8010b62 <xQueueGenericSendFromISR+0x3a>
 8010b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d101      	bne.n	8010b66 <xQueueGenericSendFromISR+0x3e>
 8010b62:	2301      	movs	r3, #1
 8010b64:	e000      	b.n	8010b68 <xQueueGenericSendFromISR+0x40>
 8010b66:	2300      	movs	r3, #0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d109      	bne.n	8010b80 <xQueueGenericSendFromISR+0x58>
 8010b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b70:	f383 8811 	msr	BASEPRI, r3
 8010b74:	f3bf 8f6f 	isb	sy
 8010b78:	f3bf 8f4f 	dsb	sy
 8010b7c:	623b      	str	r3, [r7, #32]
 8010b7e:	e7fe      	b.n	8010b7e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	2b02      	cmp	r3, #2
 8010b84:	d103      	bne.n	8010b8e <xQueueGenericSendFromISR+0x66>
 8010b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	d101      	bne.n	8010b92 <xQueueGenericSendFromISR+0x6a>
 8010b8e:	2301      	movs	r3, #1
 8010b90:	e000      	b.n	8010b94 <xQueueGenericSendFromISR+0x6c>
 8010b92:	2300      	movs	r3, #0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d109      	bne.n	8010bac <xQueueGenericSendFromISR+0x84>
 8010b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b9c:	f383 8811 	msr	BASEPRI, r3
 8010ba0:	f3bf 8f6f 	isb	sy
 8010ba4:	f3bf 8f4f 	dsb	sy
 8010ba8:	61fb      	str	r3, [r7, #28]
 8010baa:	e7fe      	b.n	8010baa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010bac:	f7ff fc2e 	bl	801040c <vPortValidateInterruptPriority>
	__asm volatile
 8010bb0:	f3ef 8211 	mrs	r2, BASEPRI
 8010bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb8:	f383 8811 	msr	BASEPRI, r3
 8010bbc:	f3bf 8f6f 	isb	sy
 8010bc0:	f3bf 8f4f 	dsb	sy
 8010bc4:	61ba      	str	r2, [r7, #24]
 8010bc6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010bc8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010bca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d302      	bcc.n	8010bde <xQueueGenericSendFromISR+0xb6>
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	2b02      	cmp	r3, #2
 8010bdc:	d12c      	bne.n	8010c38 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010be8:	683a      	ldr	r2, [r7, #0]
 8010bea:	68b9      	ldr	r1, [r7, #8]
 8010bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bee:	f000 fb8c 	bl	801130a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010bf2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bfa:	d112      	bne.n	8010c22 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d016      	beq.n	8010c32 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c06:	3324      	adds	r3, #36	; 0x24
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f001 f9fd 	bl	8012008 <xTaskRemoveFromEventList>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d00e      	beq.n	8010c32 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00b      	beq.n	8010c32 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	601a      	str	r2, [r3, #0]
 8010c20:	e007      	b.n	8010c32 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010c22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010c26:	3301      	adds	r3, #1
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	b25a      	sxtb	r2, r3
 8010c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010c32:	2301      	movs	r3, #1
 8010c34:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010c36:	e001      	b.n	8010c3c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8010c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c3e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3738      	adds	r7, #56	; 0x38
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b08e      	sub	sp, #56	; 0x38
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d109      	bne.n	8010c78 <xQueueGiveFromISR+0x28>
	__asm volatile
 8010c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c68:	f383 8811 	msr	BASEPRI, r3
 8010c6c:	f3bf 8f6f 	isb	sy
 8010c70:	f3bf 8f4f 	dsb	sy
 8010c74:	623b      	str	r3, [r7, #32]
 8010c76:	e7fe      	b.n	8010c76 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d009      	beq.n	8010c94 <xQueueGiveFromISR+0x44>
 8010c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c84:	f383 8811 	msr	BASEPRI, r3
 8010c88:	f3bf 8f6f 	isb	sy
 8010c8c:	f3bf 8f4f 	dsb	sy
 8010c90:	61fb      	str	r3, [r7, #28]
 8010c92:	e7fe      	b.n	8010c92 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d103      	bne.n	8010ca4 <xQueueGiveFromISR+0x54>
 8010c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9e:	685b      	ldr	r3, [r3, #4]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d101      	bne.n	8010ca8 <xQueueGiveFromISR+0x58>
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	e000      	b.n	8010caa <xQueueGiveFromISR+0x5a>
 8010ca8:	2300      	movs	r3, #0
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d109      	bne.n	8010cc2 <xQueueGiveFromISR+0x72>
 8010cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	61bb      	str	r3, [r7, #24]
 8010cc0:	e7fe      	b.n	8010cc0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cc2:	f7ff fba3 	bl	801040c <vPortValidateInterruptPriority>
	__asm volatile
 8010cc6:	f3ef 8211 	mrs	r2, BASEPRI
 8010cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cce:	f383 8811 	msr	BASEPRI, r3
 8010cd2:	f3bf 8f6f 	isb	sy
 8010cd6:	f3bf 8f4f 	dsb	sy
 8010cda:	617a      	str	r2, [r7, #20]
 8010cdc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010cde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ce6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d22b      	bcs.n	8010d4a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfe:	1c5a      	adds	r2, r3, #1
 8010d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d02:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d0c:	d112      	bne.n	8010d34 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d016      	beq.n	8010d44 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d18:	3324      	adds	r3, #36	; 0x24
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f001 f974 	bl	8012008 <xTaskRemoveFromEventList>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00e      	beq.n	8010d44 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d00b      	beq.n	8010d44 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	2201      	movs	r2, #1
 8010d30:	601a      	str	r2, [r3, #0]
 8010d32:	e007      	b.n	8010d44 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d38:	3301      	adds	r3, #1
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	b25a      	sxtb	r2, r3
 8010d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d44:	2301      	movs	r3, #1
 8010d46:	637b      	str	r3, [r7, #52]	; 0x34
 8010d48:	e001      	b.n	8010d4e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8010d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d50:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3738      	adds	r7, #56	; 0x38
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
	...

08010d64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b08c      	sub	sp, #48	; 0x30
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010d70:	2300      	movs	r3, #0
 8010d72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d109      	bne.n	8010d92 <xQueueReceive+0x2e>
	__asm volatile
 8010d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d82:	f383 8811 	msr	BASEPRI, r3
 8010d86:	f3bf 8f6f 	isb	sy
 8010d8a:	f3bf 8f4f 	dsb	sy
 8010d8e:	623b      	str	r3, [r7, #32]
 8010d90:	e7fe      	b.n	8010d90 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d103      	bne.n	8010da0 <xQueueReceive+0x3c>
 8010d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d101      	bne.n	8010da4 <xQueueReceive+0x40>
 8010da0:	2301      	movs	r3, #1
 8010da2:	e000      	b.n	8010da6 <xQueueReceive+0x42>
 8010da4:	2300      	movs	r3, #0
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d109      	bne.n	8010dbe <xQueueReceive+0x5a>
 8010daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dae:	f383 8811 	msr	BASEPRI, r3
 8010db2:	f3bf 8f6f 	isb	sy
 8010db6:	f3bf 8f4f 	dsb	sy
 8010dba:	61fb      	str	r3, [r7, #28]
 8010dbc:	e7fe      	b.n	8010dbc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010dbe:	f001 fb45 	bl	801244c <xTaskGetSchedulerState>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d102      	bne.n	8010dce <xQueueReceive+0x6a>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d101      	bne.n	8010dd2 <xQueueReceive+0x6e>
 8010dce:	2301      	movs	r3, #1
 8010dd0:	e000      	b.n	8010dd4 <xQueueReceive+0x70>
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d109      	bne.n	8010dec <xQueueReceive+0x88>
 8010dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ddc:	f383 8811 	msr	BASEPRI, r3
 8010de0:	f3bf 8f6f 	isb	sy
 8010de4:	f3bf 8f4f 	dsb	sy
 8010de8:	61bb      	str	r3, [r7, #24]
 8010dea:	e7fe      	b.n	8010dea <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010dec:	f7ff fa56 	bl	801029c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010df4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d01f      	beq.n	8010e3c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010dfc:	68b9      	ldr	r1, [r7, #8]
 8010dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e00:	f000 faed 	bl	80113de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e06:	1e5a      	subs	r2, r3, #1
 8010e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0e:	691b      	ldr	r3, [r3, #16]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d00f      	beq.n	8010e34 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e16:	3310      	adds	r3, #16
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f001 f8f5 	bl	8012008 <xTaskRemoveFromEventList>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d007      	beq.n	8010e34 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010e24:	4b3c      	ldr	r3, [pc, #240]	; (8010f18 <xQueueReceive+0x1b4>)
 8010e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e2a:	601a      	str	r2, [r3, #0]
 8010e2c:	f3bf 8f4f 	dsb	sy
 8010e30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010e34:	f7ff fa60 	bl	80102f8 <vPortExitCritical>
				return pdPASS;
 8010e38:	2301      	movs	r3, #1
 8010e3a:	e069      	b.n	8010f10 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d103      	bne.n	8010e4a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010e42:	f7ff fa59 	bl	80102f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010e46:	2300      	movs	r3, #0
 8010e48:	e062      	b.n	8010f10 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d106      	bne.n	8010e5e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e50:	f107 0310 	add.w	r3, r7, #16
 8010e54:	4618      	mov	r0, r3
 8010e56:	f001 f93b 	bl	80120d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e5e:	f7ff fa4b 	bl	80102f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e62:	f000 fe1d 	bl	8011aa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e66:	f7ff fa19 	bl	801029c <vPortEnterCritical>
 8010e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e70:	b25b      	sxtb	r3, r3
 8010e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e76:	d103      	bne.n	8010e80 <xQueueReceive+0x11c>
 8010e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e86:	b25b      	sxtb	r3, r3
 8010e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e8c:	d103      	bne.n	8010e96 <xQueueReceive+0x132>
 8010e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e90:	2200      	movs	r2, #0
 8010e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e96:	f7ff fa2f 	bl	80102f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e9a:	1d3a      	adds	r2, r7, #4
 8010e9c:	f107 0310 	add.w	r3, r7, #16
 8010ea0:	4611      	mov	r1, r2
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f001 f92a 	bl	80120fc <xTaskCheckForTimeOut>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d123      	bne.n	8010ef6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010eb0:	f000 fb0d 	bl	80114ce <prvIsQueueEmpty>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d017      	beq.n	8010eea <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ebc:	3324      	adds	r3, #36	; 0x24
 8010ebe:	687a      	ldr	r2, [r7, #4]
 8010ec0:	4611      	mov	r1, r2
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f001 f852 	bl	8011f6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010eca:	f000 faae 	bl	801142a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010ece:	f000 fe2d 	bl	8011b2c <xTaskResumeAll>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d189      	bne.n	8010dec <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010ed8:	4b0f      	ldr	r3, [pc, #60]	; (8010f18 <xQueueReceive+0x1b4>)
 8010eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ede:	601a      	str	r2, [r3, #0]
 8010ee0:	f3bf 8f4f 	dsb	sy
 8010ee4:	f3bf 8f6f 	isb	sy
 8010ee8:	e780      	b.n	8010dec <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010eec:	f000 fa9d 	bl	801142a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ef0:	f000 fe1c 	bl	8011b2c <xTaskResumeAll>
 8010ef4:	e77a      	b.n	8010dec <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ef8:	f000 fa97 	bl	801142a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010efc:	f000 fe16 	bl	8011b2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f02:	f000 fae4 	bl	80114ce <prvIsQueueEmpty>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	f43f af6f 	beq.w	8010dec <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010f0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3730      	adds	r7, #48	; 0x30
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}
 8010f18:	e000ed04 	.word	0xe000ed04

08010f1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b08e      	sub	sp, #56	; 0x38
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f26:	2300      	movs	r3, #0
 8010f28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d109      	bne.n	8010f4c <xQueueSemaphoreTake+0x30>
 8010f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f3c:	f383 8811 	msr	BASEPRI, r3
 8010f40:	f3bf 8f6f 	isb	sy
 8010f44:	f3bf 8f4f 	dsb	sy
 8010f48:	623b      	str	r3, [r7, #32]
 8010f4a:	e7fe      	b.n	8010f4a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d009      	beq.n	8010f68 <xQueueSemaphoreTake+0x4c>
 8010f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f58:	f383 8811 	msr	BASEPRI, r3
 8010f5c:	f3bf 8f6f 	isb	sy
 8010f60:	f3bf 8f4f 	dsb	sy
 8010f64:	61fb      	str	r3, [r7, #28]
 8010f66:	e7fe      	b.n	8010f66 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f68:	f001 fa70 	bl	801244c <xTaskGetSchedulerState>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d102      	bne.n	8010f78 <xQueueSemaphoreTake+0x5c>
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d101      	bne.n	8010f7c <xQueueSemaphoreTake+0x60>
 8010f78:	2301      	movs	r3, #1
 8010f7a:	e000      	b.n	8010f7e <xQueueSemaphoreTake+0x62>
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d109      	bne.n	8010f96 <xQueueSemaphoreTake+0x7a>
 8010f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f86:	f383 8811 	msr	BASEPRI, r3
 8010f8a:	f3bf 8f6f 	isb	sy
 8010f8e:	f3bf 8f4f 	dsb	sy
 8010f92:	61bb      	str	r3, [r7, #24]
 8010f94:	e7fe      	b.n	8010f94 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f96:	f7ff f981 	bl	801029c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f9e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d024      	beq.n	8010ff0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa8:	1e5a      	subs	r2, r3, #1
 8010faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fac:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d104      	bne.n	8010fc0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010fb6:	f001 fbc5 	bl	8012744 <pvTaskIncrementMutexHeldCount>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fbe:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc2:	691b      	ldr	r3, [r3, #16]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d00f      	beq.n	8010fe8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fca:	3310      	adds	r3, #16
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f001 f81b 	bl	8012008 <xTaskRemoveFromEventList>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d007      	beq.n	8010fe8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010fd8:	4b53      	ldr	r3, [pc, #332]	; (8011128 <xQueueSemaphoreTake+0x20c>)
 8010fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fde:	601a      	str	r2, [r3, #0]
 8010fe0:	f3bf 8f4f 	dsb	sy
 8010fe4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010fe8:	f7ff f986 	bl	80102f8 <vPortExitCritical>
				return pdPASS;
 8010fec:	2301      	movs	r3, #1
 8010fee:	e096      	b.n	801111e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d110      	bne.n	8011018 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d009      	beq.n	8011010 <xQueueSemaphoreTake+0xf4>
 8010ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011000:	f383 8811 	msr	BASEPRI, r3
 8011004:	f3bf 8f6f 	isb	sy
 8011008:	f3bf 8f4f 	dsb	sy
 801100c:	617b      	str	r3, [r7, #20]
 801100e:	e7fe      	b.n	801100e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011010:	f7ff f972 	bl	80102f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011014:	2300      	movs	r3, #0
 8011016:	e082      	b.n	801111e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801101a:	2b00      	cmp	r3, #0
 801101c:	d106      	bne.n	801102c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801101e:	f107 030c 	add.w	r3, r7, #12
 8011022:	4618      	mov	r0, r3
 8011024:	f001 f854 	bl	80120d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011028:	2301      	movs	r3, #1
 801102a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801102c:	f7ff f964 	bl	80102f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011030:	f000 fd36 	bl	8011aa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011034:	f7ff f932 	bl	801029c <vPortEnterCritical>
 8011038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801103e:	b25b      	sxtb	r3, r3
 8011040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011044:	d103      	bne.n	801104e <xQueueSemaphoreTake+0x132>
 8011046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011048:	2200      	movs	r2, #0
 801104a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011054:	b25b      	sxtb	r3, r3
 8011056:	f1b3 3fff 	cmp.w	r3, #4294967295
 801105a:	d103      	bne.n	8011064 <xQueueSemaphoreTake+0x148>
 801105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105e:	2200      	movs	r2, #0
 8011060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011064:	f7ff f948 	bl	80102f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011068:	463a      	mov	r2, r7
 801106a:	f107 030c 	add.w	r3, r7, #12
 801106e:	4611      	mov	r1, r2
 8011070:	4618      	mov	r0, r3
 8011072:	f001 f843 	bl	80120fc <xTaskCheckForTimeOut>
 8011076:	4603      	mov	r3, r0
 8011078:	2b00      	cmp	r3, #0
 801107a:	d132      	bne.n	80110e2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801107c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801107e:	f000 fa26 	bl	80114ce <prvIsQueueEmpty>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	d026      	beq.n	80110d6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d109      	bne.n	80110a4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011090:	f7ff f904 	bl	801029c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011096:	685b      	ldr	r3, [r3, #4]
 8011098:	4618      	mov	r0, r3
 801109a:	f001 f9f5 	bl	8012488 <xTaskPriorityInherit>
 801109e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80110a0:	f7ff f92a 	bl	80102f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80110a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a6:	3324      	adds	r3, #36	; 0x24
 80110a8:	683a      	ldr	r2, [r7, #0]
 80110aa:	4611      	mov	r1, r2
 80110ac:	4618      	mov	r0, r3
 80110ae:	f000 ff5d 	bl	8011f6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110b4:	f000 f9b9 	bl	801142a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110b8:	f000 fd38 	bl	8011b2c <xTaskResumeAll>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	f47f af69 	bne.w	8010f96 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80110c4:	4b18      	ldr	r3, [pc, #96]	; (8011128 <xQueueSemaphoreTake+0x20c>)
 80110c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110ca:	601a      	str	r2, [r3, #0]
 80110cc:	f3bf 8f4f 	dsb	sy
 80110d0:	f3bf 8f6f 	isb	sy
 80110d4:	e75f      	b.n	8010f96 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80110d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110d8:	f000 f9a7 	bl	801142a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80110dc:	f000 fd26 	bl	8011b2c <xTaskResumeAll>
 80110e0:	e759      	b.n	8010f96 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80110e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110e4:	f000 f9a1 	bl	801142a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80110e8:	f000 fd20 	bl	8011b2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110ee:	f000 f9ee 	bl	80114ce <prvIsQueueEmpty>
 80110f2:	4603      	mov	r3, r0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	f43f af4e 	beq.w	8010f96 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80110fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d00d      	beq.n	801111c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011100:	f7ff f8cc 	bl	801029c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011104:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011106:	f000 f8e8 	bl	80112da <prvGetDisinheritPriorityAfterTimeout>
 801110a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011112:	4618      	mov	r0, r3
 8011114:	f001 fa92 	bl	801263c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011118:	f7ff f8ee 	bl	80102f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801111c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801111e:	4618      	mov	r0, r3
 8011120:	3738      	adds	r7, #56	; 0x38
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	e000ed04 	.word	0xe000ed04

0801112c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b08e      	sub	sp, #56	; 0x38
 8011130:	af00      	add	r7, sp, #0
 8011132:	60f8      	str	r0, [r7, #12]
 8011134:	60b9      	str	r1, [r7, #8]
 8011136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801113c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113e:	2b00      	cmp	r3, #0
 8011140:	d109      	bne.n	8011156 <xQueueReceiveFromISR+0x2a>
 8011142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011146:	f383 8811 	msr	BASEPRI, r3
 801114a:	f3bf 8f6f 	isb	sy
 801114e:	f3bf 8f4f 	dsb	sy
 8011152:	623b      	str	r3, [r7, #32]
 8011154:	e7fe      	b.n	8011154 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d103      	bne.n	8011164 <xQueueReceiveFromISR+0x38>
 801115c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011160:	2b00      	cmp	r3, #0
 8011162:	d101      	bne.n	8011168 <xQueueReceiveFromISR+0x3c>
 8011164:	2301      	movs	r3, #1
 8011166:	e000      	b.n	801116a <xQueueReceiveFromISR+0x3e>
 8011168:	2300      	movs	r3, #0
 801116a:	2b00      	cmp	r3, #0
 801116c:	d109      	bne.n	8011182 <xQueueReceiveFromISR+0x56>
 801116e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	61fb      	str	r3, [r7, #28]
 8011180:	e7fe      	b.n	8011180 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011182:	f7ff f943 	bl	801040c <vPortValidateInterruptPriority>
	__asm volatile
 8011186:	f3ef 8211 	mrs	r2, BASEPRI
 801118a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801118e:	f383 8811 	msr	BASEPRI, r3
 8011192:	f3bf 8f6f 	isb	sy
 8011196:	f3bf 8f4f 	dsb	sy
 801119a:	61ba      	str	r2, [r7, #24]
 801119c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801119e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80111a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80111a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d02f      	beq.n	801120e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80111ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80111b8:	68b9      	ldr	r1, [r7, #8]
 80111ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111bc:	f000 f90f 	bl	80113de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80111c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c2:	1e5a      	subs	r2, r3, #1
 80111c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80111c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80111cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d0:	d112      	bne.n	80111f8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	691b      	ldr	r3, [r3, #16]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d016      	beq.n	8011208 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111dc:	3310      	adds	r3, #16
 80111de:	4618      	mov	r0, r3
 80111e0:	f000 ff12 	bl	8012008 <xTaskRemoveFromEventList>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d00e      	beq.n	8011208 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d00b      	beq.n	8011208 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2201      	movs	r2, #1
 80111f4:	601a      	str	r2, [r3, #0]
 80111f6:	e007      	b.n	8011208 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80111f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111fc:	3301      	adds	r3, #1
 80111fe:	b2db      	uxtb	r3, r3
 8011200:	b25a      	sxtb	r2, r3
 8011202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011208:	2301      	movs	r3, #1
 801120a:	637b      	str	r3, [r7, #52]	; 0x34
 801120c:	e001      	b.n	8011212 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801120e:	2300      	movs	r3, #0
 8011210:	637b      	str	r3, [r7, #52]	; 0x34
 8011212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011214:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801121e:	4618      	mov	r0, r3
 8011220:	3738      	adds	r7, #56	; 0x38
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8011226:	b580      	push	{r7, lr}
 8011228:	b084      	sub	sp, #16
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d109      	bne.n	8011248 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8011234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011238:	f383 8811 	msr	BASEPRI, r3
 801123c:	f3bf 8f6f 	isb	sy
 8011240:	f3bf 8f4f 	dsb	sy
 8011244:	60bb      	str	r3, [r7, #8]
 8011246:	e7fe      	b.n	8011246 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8011248:	f7ff f828 	bl	801029c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011250:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8011252:	f7ff f851 	bl	80102f8 <vPortExitCritical>

	return uxReturn;
 8011256:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8011258:	4618      	mov	r0, r3
 801125a:	3710      	adds	r7, #16
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8011260:	b480      	push	{r7}
 8011262:	b085      	sub	sp, #20
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d109      	bne.n	8011282 <uxQueueMessagesWaitingFromISR+0x22>
 801126e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011272:	f383 8811 	msr	BASEPRI, r3
 8011276:	f3bf 8f6f 	isb	sy
 801127a:	f3bf 8f4f 	dsb	sy
 801127e:	60bb      	str	r3, [r7, #8]
 8011280:	e7fe      	b.n	8011280 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011286:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8011288:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801128a:	4618      	mov	r0, r3
 801128c:	3714      	adds	r7, #20
 801128e:	46bd      	mov	sp, r7
 8011290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011294:	4770      	bx	lr

08011296 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011296:	b580      	push	{r7, lr}
 8011298:	b084      	sub	sp, #16
 801129a:	af00      	add	r7, sp, #0
 801129c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d109      	bne.n	80112bc <vQueueDelete+0x26>
 80112a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ac:	f383 8811 	msr	BASEPRI, r3
 80112b0:	f3bf 8f6f 	isb	sy
 80112b4:	f3bf 8f4f 	dsb	sy
 80112b8:	60bb      	str	r3, [r7, #8]
 80112ba:	e7fe      	b.n	80112ba <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80112bc:	68f8      	ldr	r0, [r7, #12]
 80112be:	f000 f95d 	bl	801157c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d102      	bne.n	80112d2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80112cc:	68f8      	ldr	r0, [r7, #12]
 80112ce:	f7fe fcf5 	bl	800fcbc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80112d2:	bf00      	nop
 80112d4:	3710      	adds	r7, #16
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}

080112da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80112da:	b480      	push	{r7}
 80112dc:	b085      	sub	sp, #20
 80112de:	af00      	add	r7, sp, #0
 80112e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d006      	beq.n	80112f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80112f4:	60fb      	str	r3, [r7, #12]
 80112f6:	e001      	b.n	80112fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80112f8:	2300      	movs	r3, #0
 80112fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80112fc:	68fb      	ldr	r3, [r7, #12]
	}
 80112fe:	4618      	mov	r0, r3
 8011300:	3714      	adds	r7, #20
 8011302:	46bd      	mov	sp, r7
 8011304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011308:	4770      	bx	lr

0801130a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801130a:	b580      	push	{r7, lr}
 801130c:	b086      	sub	sp, #24
 801130e:	af00      	add	r7, sp, #0
 8011310:	60f8      	str	r0, [r7, #12]
 8011312:	60b9      	str	r1, [r7, #8]
 8011314:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011316:	2300      	movs	r3, #0
 8011318:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801131e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011324:	2b00      	cmp	r3, #0
 8011326:	d10d      	bne.n	8011344 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d14d      	bne.n	80113cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	4618      	mov	r0, r3
 8011336:	f001 f915 	bl	8012564 <xTaskPriorityDisinherit>
 801133a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2200      	movs	r2, #0
 8011340:	605a      	str	r2, [r3, #4]
 8011342:	e043      	b.n	80113cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d119      	bne.n	801137e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	6898      	ldr	r0, [r3, #8]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011352:	461a      	mov	r2, r3
 8011354:	68b9      	ldr	r1, [r7, #8]
 8011356:	f005 f9f9 	bl	801674c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	689a      	ldr	r2, [r3, #8]
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011362:	441a      	add	r2, r3
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	689a      	ldr	r2, [r3, #8]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	429a      	cmp	r2, r3
 8011372:	d32b      	bcc.n	80113cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681a      	ldr	r2, [r3, #0]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	609a      	str	r2, [r3, #8]
 801137c:	e026      	b.n	80113cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	68d8      	ldr	r0, [r3, #12]
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011386:	461a      	mov	r2, r3
 8011388:	68b9      	ldr	r1, [r7, #8]
 801138a:	f005 f9df 	bl	801674c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	68da      	ldr	r2, [r3, #12]
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011396:	425b      	negs	r3, r3
 8011398:	441a      	add	r2, r3
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	68da      	ldr	r2, [r3, #12]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d207      	bcs.n	80113ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	685a      	ldr	r2, [r3, #4]
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113b2:	425b      	negs	r3, r3
 80113b4:	441a      	add	r2, r3
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2b02      	cmp	r3, #2
 80113be:	d105      	bne.n	80113cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d002      	beq.n	80113cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	3b01      	subs	r3, #1
 80113ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	1c5a      	adds	r2, r3, #1
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80113d4:	697b      	ldr	r3, [r7, #20]
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3718      	adds	r7, #24
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}

080113de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80113de:	b580      	push	{r7, lr}
 80113e0:	b082      	sub	sp, #8
 80113e2:	af00      	add	r7, sp, #0
 80113e4:	6078      	str	r0, [r7, #4]
 80113e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d018      	beq.n	8011422 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	68da      	ldr	r2, [r3, #12]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113f8:	441a      	add	r2, r3
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	68da      	ldr	r2, [r3, #12]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	429a      	cmp	r2, r3
 8011408:	d303      	bcc.n	8011412 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681a      	ldr	r2, [r3, #0]
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	68d9      	ldr	r1, [r3, #12]
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801141a:	461a      	mov	r2, r3
 801141c:	6838      	ldr	r0, [r7, #0]
 801141e:	f005 f995 	bl	801674c <memcpy>
	}
}
 8011422:	bf00      	nop
 8011424:	3708      	adds	r7, #8
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b084      	sub	sp, #16
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011432:	f7fe ff33 	bl	801029c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801143c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801143e:	e011      	b.n	8011464 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011444:	2b00      	cmp	r3, #0
 8011446:	d012      	beq.n	801146e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	3324      	adds	r3, #36	; 0x24
 801144c:	4618      	mov	r0, r3
 801144e:	f000 fddb 	bl	8012008 <xTaskRemoveFromEventList>
 8011452:	4603      	mov	r3, r0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d001      	beq.n	801145c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011458:	f000 feb0 	bl	80121bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801145c:	7bfb      	ldrb	r3, [r7, #15]
 801145e:	3b01      	subs	r3, #1
 8011460:	b2db      	uxtb	r3, r3
 8011462:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011468:	2b00      	cmp	r3, #0
 801146a:	dce9      	bgt.n	8011440 <prvUnlockQueue+0x16>
 801146c:	e000      	b.n	8011470 <prvUnlockQueue+0x46>
					break;
 801146e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	22ff      	movs	r2, #255	; 0xff
 8011474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011478:	f7fe ff3e 	bl	80102f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801147c:	f7fe ff0e 	bl	801029c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011486:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011488:	e011      	b.n	80114ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	691b      	ldr	r3, [r3, #16]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d012      	beq.n	80114b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	3310      	adds	r3, #16
 8011496:	4618      	mov	r0, r3
 8011498:	f000 fdb6 	bl	8012008 <xTaskRemoveFromEventList>
 801149c:	4603      	mov	r3, r0
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d001      	beq.n	80114a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80114a2:	f000 fe8b 	bl	80121bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80114a6:	7bbb      	ldrb	r3, [r7, #14]
 80114a8:	3b01      	subs	r3, #1
 80114aa:	b2db      	uxtb	r3, r3
 80114ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80114ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	dce9      	bgt.n	801148a <prvUnlockQueue+0x60>
 80114b6:	e000      	b.n	80114ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80114b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	22ff      	movs	r2, #255	; 0xff
 80114be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80114c2:	f7fe ff19 	bl	80102f8 <vPortExitCritical>
}
 80114c6:	bf00      	nop
 80114c8:	3710      	adds	r7, #16
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}

080114ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80114ce:	b580      	push	{r7, lr}
 80114d0:	b084      	sub	sp, #16
 80114d2:	af00      	add	r7, sp, #0
 80114d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80114d6:	f7fe fee1 	bl	801029c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d102      	bne.n	80114e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80114e2:	2301      	movs	r3, #1
 80114e4:	60fb      	str	r3, [r7, #12]
 80114e6:	e001      	b.n	80114ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80114e8:	2300      	movs	r3, #0
 80114ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80114ec:	f7fe ff04 	bl	80102f8 <vPortExitCritical>

	return xReturn;
 80114f0:	68fb      	ldr	r3, [r7, #12]
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3710      	adds	r7, #16
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80114fa:	b580      	push	{r7, lr}
 80114fc:	b084      	sub	sp, #16
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011502:	f7fe fecb 	bl	801029c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801150e:	429a      	cmp	r2, r3
 8011510:	d102      	bne.n	8011518 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011512:	2301      	movs	r3, #1
 8011514:	60fb      	str	r3, [r7, #12]
 8011516:	e001      	b.n	801151c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011518:	2300      	movs	r3, #0
 801151a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801151c:	f7fe feec 	bl	80102f8 <vPortExitCritical>

	return xReturn;
 8011520:	68fb      	ldr	r3, [r7, #12]
}
 8011522:	4618      	mov	r0, r3
 8011524:	3710      	adds	r7, #16
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
	...

0801152c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801152c:	b480      	push	{r7}
 801152e:	b085      	sub	sp, #20
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011536:	2300      	movs	r3, #0
 8011538:	60fb      	str	r3, [r7, #12]
 801153a:	e014      	b.n	8011566 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801153c:	4a0e      	ldr	r2, [pc, #56]	; (8011578 <vQueueAddToRegistry+0x4c>)
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d10b      	bne.n	8011560 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011548:	490b      	ldr	r1, [pc, #44]	; (8011578 <vQueueAddToRegistry+0x4c>)
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	683a      	ldr	r2, [r7, #0]
 801154e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011552:	4a09      	ldr	r2, [pc, #36]	; (8011578 <vQueueAddToRegistry+0x4c>)
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	00db      	lsls	r3, r3, #3
 8011558:	4413      	add	r3, r2
 801155a:	687a      	ldr	r2, [r7, #4]
 801155c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801155e:	e005      	b.n	801156c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	3301      	adds	r3, #1
 8011564:	60fb      	str	r3, [r7, #12]
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2b0b      	cmp	r3, #11
 801156a:	d9e7      	bls.n	801153c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801156c:	bf00      	nop
 801156e:	3714      	adds	r7, #20
 8011570:	46bd      	mov	sp, r7
 8011572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011576:	4770      	bx	lr
 8011578:	20028660 	.word	0x20028660

0801157c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801157c:	b480      	push	{r7}
 801157e:	b085      	sub	sp, #20
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011584:	2300      	movs	r3, #0
 8011586:	60fb      	str	r3, [r7, #12]
 8011588:	e016      	b.n	80115b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801158a:	4a10      	ldr	r2, [pc, #64]	; (80115cc <vQueueUnregisterQueue+0x50>)
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	00db      	lsls	r3, r3, #3
 8011590:	4413      	add	r3, r2
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	429a      	cmp	r2, r3
 8011598:	d10b      	bne.n	80115b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801159a:	4a0c      	ldr	r2, [pc, #48]	; (80115cc <vQueueUnregisterQueue+0x50>)
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	2100      	movs	r1, #0
 80115a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80115a4:	4a09      	ldr	r2, [pc, #36]	; (80115cc <vQueueUnregisterQueue+0x50>)
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	00db      	lsls	r3, r3, #3
 80115aa:	4413      	add	r3, r2
 80115ac:	2200      	movs	r2, #0
 80115ae:	605a      	str	r2, [r3, #4]
				break;
 80115b0:	e005      	b.n	80115be <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	3301      	adds	r3, #1
 80115b6:	60fb      	str	r3, [r7, #12]
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2b0b      	cmp	r3, #11
 80115bc:	d9e5      	bls.n	801158a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80115be:	bf00      	nop
 80115c0:	3714      	adds	r7, #20
 80115c2:	46bd      	mov	sp, r7
 80115c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c8:	4770      	bx	lr
 80115ca:	bf00      	nop
 80115cc:	20028660 	.word	0x20028660

080115d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b086      	sub	sp, #24
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80115e0:	f7fe fe5c 	bl	801029c <vPortEnterCritical>
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115ea:	b25b      	sxtb	r3, r3
 80115ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f0:	d103      	bne.n	80115fa <vQueueWaitForMessageRestricted+0x2a>
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	2200      	movs	r2, #0
 80115f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011600:	b25b      	sxtb	r3, r3
 8011602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011606:	d103      	bne.n	8011610 <vQueueWaitForMessageRestricted+0x40>
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	2200      	movs	r2, #0
 801160c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011610:	f7fe fe72 	bl	80102f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011618:	2b00      	cmp	r3, #0
 801161a:	d106      	bne.n	801162a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	3324      	adds	r3, #36	; 0x24
 8011620:	687a      	ldr	r2, [r7, #4]
 8011622:	68b9      	ldr	r1, [r7, #8]
 8011624:	4618      	mov	r0, r3
 8011626:	f000 fcc5 	bl	8011fb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801162a:	6978      	ldr	r0, [r7, #20]
 801162c:	f7ff fefd 	bl	801142a <prvUnlockQueue>
	}
 8011630:	bf00      	nop
 8011632:	3718      	adds	r7, #24
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011638:	b580      	push	{r7, lr}
 801163a:	b08e      	sub	sp, #56	; 0x38
 801163c:	af04      	add	r7, sp, #16
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	607a      	str	r2, [r7, #4]
 8011644:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011648:	2b00      	cmp	r3, #0
 801164a:	d109      	bne.n	8011660 <xTaskCreateStatic+0x28>
 801164c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011650:	f383 8811 	msr	BASEPRI, r3
 8011654:	f3bf 8f6f 	isb	sy
 8011658:	f3bf 8f4f 	dsb	sy
 801165c:	623b      	str	r3, [r7, #32]
 801165e:	e7fe      	b.n	801165e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011662:	2b00      	cmp	r3, #0
 8011664:	d109      	bne.n	801167a <xTaskCreateStatic+0x42>
 8011666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801166a:	f383 8811 	msr	BASEPRI, r3
 801166e:	f3bf 8f6f 	isb	sy
 8011672:	f3bf 8f4f 	dsb	sy
 8011676:	61fb      	str	r3, [r7, #28]
 8011678:	e7fe      	b.n	8011678 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801167a:	2364      	movs	r3, #100	; 0x64
 801167c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	2b64      	cmp	r3, #100	; 0x64
 8011682:	d009      	beq.n	8011698 <xTaskCreateStatic+0x60>
 8011684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011688:	f383 8811 	msr	BASEPRI, r3
 801168c:	f3bf 8f6f 	isb	sy
 8011690:	f3bf 8f4f 	dsb	sy
 8011694:	61bb      	str	r3, [r7, #24]
 8011696:	e7fe      	b.n	8011696 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801169a:	2b00      	cmp	r3, #0
 801169c:	d01e      	beq.n	80116dc <xTaskCreateStatic+0xa4>
 801169e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d01b      	beq.n	80116dc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80116a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80116a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80116ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b0:	2202      	movs	r2, #2
 80116b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80116b6:	2300      	movs	r3, #0
 80116b8:	9303      	str	r3, [sp, #12]
 80116ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116bc:	9302      	str	r3, [sp, #8]
 80116be:	f107 0314 	add.w	r3, r7, #20
 80116c2:	9301      	str	r3, [sp, #4]
 80116c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c6:	9300      	str	r3, [sp, #0]
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	68b9      	ldr	r1, [r7, #8]
 80116ce:	68f8      	ldr	r0, [r7, #12]
 80116d0:	f000 f850 	bl	8011774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116d6:	f000 f8d9 	bl	801188c <prvAddNewTaskToReadyList>
 80116da:	e001      	b.n	80116e0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80116dc:	2300      	movs	r3, #0
 80116de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80116e0:	697b      	ldr	r3, [r7, #20]
	}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3728      	adds	r7, #40	; 0x28
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}

080116ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80116ea:	b580      	push	{r7, lr}
 80116ec:	b08c      	sub	sp, #48	; 0x30
 80116ee:	af04      	add	r7, sp, #16
 80116f0:	60f8      	str	r0, [r7, #12]
 80116f2:	60b9      	str	r1, [r7, #8]
 80116f4:	603b      	str	r3, [r7, #0]
 80116f6:	4613      	mov	r3, r2
 80116f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116fa:	88fb      	ldrh	r3, [r7, #6]
 80116fc:	009b      	lsls	r3, r3, #2
 80116fe:	4618      	mov	r0, r3
 8011700:	f7fe fa16 	bl	800fb30 <pvPortMalloc>
 8011704:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d00e      	beq.n	801172a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801170c:	2064      	movs	r0, #100	; 0x64
 801170e:	f7fe fa0f 	bl	800fb30 <pvPortMalloc>
 8011712:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d003      	beq.n	8011722 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801171a:	69fb      	ldr	r3, [r7, #28]
 801171c:	697a      	ldr	r2, [r7, #20]
 801171e:	631a      	str	r2, [r3, #48]	; 0x30
 8011720:	e005      	b.n	801172e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011722:	6978      	ldr	r0, [r7, #20]
 8011724:	f7fe faca 	bl	800fcbc <vPortFree>
 8011728:	e001      	b.n	801172e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801172a:	2300      	movs	r3, #0
 801172c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d017      	beq.n	8011764 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011734:	69fb      	ldr	r3, [r7, #28]
 8011736:	2200      	movs	r2, #0
 8011738:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801173c:	88fa      	ldrh	r2, [r7, #6]
 801173e:	2300      	movs	r3, #0
 8011740:	9303      	str	r3, [sp, #12]
 8011742:	69fb      	ldr	r3, [r7, #28]
 8011744:	9302      	str	r3, [sp, #8]
 8011746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011748:	9301      	str	r3, [sp, #4]
 801174a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801174c:	9300      	str	r3, [sp, #0]
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	68b9      	ldr	r1, [r7, #8]
 8011752:	68f8      	ldr	r0, [r7, #12]
 8011754:	f000 f80e 	bl	8011774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011758:	69f8      	ldr	r0, [r7, #28]
 801175a:	f000 f897 	bl	801188c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801175e:	2301      	movs	r3, #1
 8011760:	61bb      	str	r3, [r7, #24]
 8011762:	e002      	b.n	801176a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011764:	f04f 33ff 	mov.w	r3, #4294967295
 8011768:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801176a:	69bb      	ldr	r3, [r7, #24]
	}
 801176c:	4618      	mov	r0, r3
 801176e:	3720      	adds	r7, #32
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}

08011774 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b088      	sub	sp, #32
 8011778:	af00      	add	r7, sp, #0
 801177a:	60f8      	str	r0, [r7, #12]
 801177c:	60b9      	str	r1, [r7, #8]
 801177e:	607a      	str	r2, [r7, #4]
 8011780:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011784:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	009b      	lsls	r3, r3, #2
 801178a:	461a      	mov	r2, r3
 801178c:	21a5      	movs	r1, #165	; 0xa5
 801178e:	f004 ffe8 	bl	8016762 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8011792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801179c:	3b01      	subs	r3, #1
 801179e:	009b      	lsls	r3, r3, #2
 80117a0:	4413      	add	r3, r2
 80117a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80117a4:	69bb      	ldr	r3, [r7, #24]
 80117a6:	f023 0307 	bic.w	r3, r3, #7
 80117aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80117ac:	69bb      	ldr	r3, [r7, #24]
 80117ae:	f003 0307 	and.w	r3, r3, #7
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d009      	beq.n	80117ca <prvInitialiseNewTask+0x56>
 80117b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ba:	f383 8811 	msr	BASEPRI, r3
 80117be:	f3bf 8f6f 	isb	sy
 80117c2:	f3bf 8f4f 	dsb	sy
 80117c6:	617b      	str	r3, [r7, #20]
 80117c8:	e7fe      	b.n	80117c8 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80117ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117cc:	69ba      	ldr	r2, [r7, #24]
 80117ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117d0:	2300      	movs	r3, #0
 80117d2:	61fb      	str	r3, [r7, #28]
 80117d4:	e012      	b.n	80117fc <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117d6:	68ba      	ldr	r2, [r7, #8]
 80117d8:	69fb      	ldr	r3, [r7, #28]
 80117da:	4413      	add	r3, r2
 80117dc:	7819      	ldrb	r1, [r3, #0]
 80117de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	4413      	add	r3, r2
 80117e4:	3334      	adds	r3, #52	; 0x34
 80117e6:	460a      	mov	r2, r1
 80117e8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80117ea:	68ba      	ldr	r2, [r7, #8]
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	4413      	add	r3, r2
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d006      	beq.n	8011804 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	3301      	adds	r3, #1
 80117fa:	61fb      	str	r3, [r7, #28]
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	2b0f      	cmp	r3, #15
 8011800:	d9e9      	bls.n	80117d6 <prvInitialiseNewTask+0x62>
 8011802:	e000      	b.n	8011806 <prvInitialiseNewTask+0x92>
		{
			break;
 8011804:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011808:	2200      	movs	r2, #0
 801180a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801180e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011810:	2b37      	cmp	r3, #55	; 0x37
 8011812:	d901      	bls.n	8011818 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011814:	2337      	movs	r3, #55	; 0x37
 8011816:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801181a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801181c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011822:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8011824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011826:	2200      	movs	r2, #0
 8011828:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801182a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182c:	3304      	adds	r3, #4
 801182e:	4618      	mov	r0, r3
 8011830:	f7fe fb7a 	bl	800ff28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011836:	3318      	adds	r3, #24
 8011838:	4618      	mov	r0, r3
 801183a:	f7fe fb75 	bl	800ff28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011842:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011846:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801184e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011852:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8011854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011856:	2200      	movs	r2, #0
 8011858:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801185a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185c:	2200      	movs	r2, #0
 801185e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011862:	2200      	movs	r2, #0
 8011864:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011868:	683a      	ldr	r2, [r7, #0]
 801186a:	68f9      	ldr	r1, [r7, #12]
 801186c:	69b8      	ldr	r0, [r7, #24]
 801186e:	f7fe fbef 	bl	8010050 <pxPortInitialiseStack>
 8011872:	4602      	mov	r2, r0
 8011874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011876:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8011878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801187a:	2b00      	cmp	r3, #0
 801187c:	d002      	beq.n	8011884 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011882:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011884:	bf00      	nop
 8011886:	3720      	adds	r7, #32
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}

0801188c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b082      	sub	sp, #8
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011894:	f7fe fd02 	bl	801029c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011898:	4b2d      	ldr	r3, [pc, #180]	; (8011950 <prvAddNewTaskToReadyList+0xc4>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	3301      	adds	r3, #1
 801189e:	4a2c      	ldr	r2, [pc, #176]	; (8011950 <prvAddNewTaskToReadyList+0xc4>)
 80118a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80118a2:	4b2c      	ldr	r3, [pc, #176]	; (8011954 <prvAddNewTaskToReadyList+0xc8>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d109      	bne.n	80118be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80118aa:	4a2a      	ldr	r2, [pc, #168]	; (8011954 <prvAddNewTaskToReadyList+0xc8>)
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80118b0:	4b27      	ldr	r3, [pc, #156]	; (8011950 <prvAddNewTaskToReadyList+0xc4>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	2b01      	cmp	r3, #1
 80118b6:	d110      	bne.n	80118da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80118b8:	f000 fcf8 	bl	80122ac <prvInitialiseTaskLists>
 80118bc:	e00d      	b.n	80118da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80118be:	4b26      	ldr	r3, [pc, #152]	; (8011958 <prvAddNewTaskToReadyList+0xcc>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d109      	bne.n	80118da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80118c6:	4b23      	ldr	r3, [pc, #140]	; (8011954 <prvAddNewTaskToReadyList+0xc8>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d802      	bhi.n	80118da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80118d4:	4a1f      	ldr	r2, [pc, #124]	; (8011954 <prvAddNewTaskToReadyList+0xc8>)
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80118da:	4b20      	ldr	r3, [pc, #128]	; (801195c <prvAddNewTaskToReadyList+0xd0>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	3301      	adds	r3, #1
 80118e0:	4a1e      	ldr	r2, [pc, #120]	; (801195c <prvAddNewTaskToReadyList+0xd0>)
 80118e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80118e4:	4b1d      	ldr	r3, [pc, #116]	; (801195c <prvAddNewTaskToReadyList+0xd0>)
 80118e6:	681a      	ldr	r2, [r3, #0]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118f0:	4b1b      	ldr	r3, [pc, #108]	; (8011960 <prvAddNewTaskToReadyList+0xd4>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d903      	bls.n	8011900 <prvAddNewTaskToReadyList+0x74>
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118fc:	4a18      	ldr	r2, [pc, #96]	; (8011960 <prvAddNewTaskToReadyList+0xd4>)
 80118fe:	6013      	str	r3, [r2, #0]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011904:	4613      	mov	r3, r2
 8011906:	009b      	lsls	r3, r3, #2
 8011908:	4413      	add	r3, r2
 801190a:	009b      	lsls	r3, r3, #2
 801190c:	4a15      	ldr	r2, [pc, #84]	; (8011964 <prvAddNewTaskToReadyList+0xd8>)
 801190e:	441a      	add	r2, r3
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	3304      	adds	r3, #4
 8011914:	4619      	mov	r1, r3
 8011916:	4610      	mov	r0, r2
 8011918:	f7fe fb13 	bl	800ff42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801191c:	f7fe fcec 	bl	80102f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011920:	4b0d      	ldr	r3, [pc, #52]	; (8011958 <prvAddNewTaskToReadyList+0xcc>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d00e      	beq.n	8011946 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011928:	4b0a      	ldr	r3, [pc, #40]	; (8011954 <prvAddNewTaskToReadyList+0xc8>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011932:	429a      	cmp	r2, r3
 8011934:	d207      	bcs.n	8011946 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011936:	4b0c      	ldr	r3, [pc, #48]	; (8011968 <prvAddNewTaskToReadyList+0xdc>)
 8011938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801193c:	601a      	str	r2, [r3, #0]
 801193e:	f3bf 8f4f 	dsb	sy
 8011942:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011946:	bf00      	nop
 8011948:	3708      	adds	r7, #8
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
 801194e:	bf00      	nop
 8011950:	2002728c 	.word	0x2002728c
 8011954:	20026db8 	.word	0x20026db8
 8011958:	20027298 	.word	0x20027298
 801195c:	200272a8 	.word	0x200272a8
 8011960:	20027294 	.word	0x20027294
 8011964:	20026dbc 	.word	0x20026dbc
 8011968:	e000ed04 	.word	0xe000ed04

0801196c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801196c:	b580      	push	{r7, lr}
 801196e:	b084      	sub	sp, #16
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011974:	2300      	movs	r3, #0
 8011976:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d016      	beq.n	80119ac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801197e:	4b13      	ldr	r3, [pc, #76]	; (80119cc <vTaskDelay+0x60>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d009      	beq.n	801199a <vTaskDelay+0x2e>
 8011986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801198a:	f383 8811 	msr	BASEPRI, r3
 801198e:	f3bf 8f6f 	isb	sy
 8011992:	f3bf 8f4f 	dsb	sy
 8011996:	60bb      	str	r3, [r7, #8]
 8011998:	e7fe      	b.n	8011998 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801199a:	f000 f881 	bl	8011aa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801199e:	2100      	movs	r1, #0
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f001 f8a9 	bl	8012af8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80119a6:	f000 f8c1 	bl	8011b2c <xTaskResumeAll>
 80119aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d107      	bne.n	80119c2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80119b2:	4b07      	ldr	r3, [pc, #28]	; (80119d0 <vTaskDelay+0x64>)
 80119b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119b8:	601a      	str	r2, [r3, #0]
 80119ba:	f3bf 8f4f 	dsb	sy
 80119be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80119c2:	bf00      	nop
 80119c4:	3710      	adds	r7, #16
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	200272b4 	.word	0x200272b4
 80119d0:	e000ed04 	.word	0xe000ed04

080119d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b08a      	sub	sp, #40	; 0x28
 80119d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80119da:	2300      	movs	r3, #0
 80119dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80119de:	2300      	movs	r3, #0
 80119e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80119e2:	463a      	mov	r2, r7
 80119e4:	1d39      	adds	r1, r7, #4
 80119e6:	f107 0308 	add.w	r3, r7, #8
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fe f86c 	bl	800fac8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80119f0:	6839      	ldr	r1, [r7, #0]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	68ba      	ldr	r2, [r7, #8]
 80119f6:	9202      	str	r2, [sp, #8]
 80119f8:	9301      	str	r3, [sp, #4]
 80119fa:	2300      	movs	r3, #0
 80119fc:	9300      	str	r3, [sp, #0]
 80119fe:	2300      	movs	r3, #0
 8011a00:	460a      	mov	r2, r1
 8011a02:	4921      	ldr	r1, [pc, #132]	; (8011a88 <vTaskStartScheduler+0xb4>)
 8011a04:	4821      	ldr	r0, [pc, #132]	; (8011a8c <vTaskStartScheduler+0xb8>)
 8011a06:	f7ff fe17 	bl	8011638 <xTaskCreateStatic>
 8011a0a:	4602      	mov	r2, r0
 8011a0c:	4b20      	ldr	r3, [pc, #128]	; (8011a90 <vTaskStartScheduler+0xbc>)
 8011a0e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011a10:	4b1f      	ldr	r3, [pc, #124]	; (8011a90 <vTaskStartScheduler+0xbc>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d002      	beq.n	8011a1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011a18:	2301      	movs	r3, #1
 8011a1a:	617b      	str	r3, [r7, #20]
 8011a1c:	e001      	b.n	8011a22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	d102      	bne.n	8011a2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011a28:	f001 f8ba 	bl	8012ba0 <xTimerCreateTimerTask>
 8011a2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	2b01      	cmp	r3, #1
 8011a32:	d117      	bne.n	8011a64 <vTaskStartScheduler+0x90>
 8011a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a38:	f383 8811 	msr	BASEPRI, r3
 8011a3c:	f3bf 8f6f 	isb	sy
 8011a40:	f3bf 8f4f 	dsb	sy
 8011a44:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011a46:	4b13      	ldr	r3, [pc, #76]	; (8011a94 <vTaskStartScheduler+0xc0>)
 8011a48:	f04f 32ff 	mov.w	r2, #4294967295
 8011a4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011a4e:	4b12      	ldr	r3, [pc, #72]	; (8011a98 <vTaskStartScheduler+0xc4>)
 8011a50:	2201      	movs	r2, #1
 8011a52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011a54:	4b11      	ldr	r3, [pc, #68]	; (8011a9c <vTaskStartScheduler+0xc8>)
 8011a56:	2200      	movs	r2, #0
 8011a58:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8011a5a:	f7ef fbe8 	bl	800122e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011a5e:	f7fe fb7f 	bl	8010160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011a62:	e00d      	b.n	8011a80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a6a:	d109      	bne.n	8011a80 <vTaskStartScheduler+0xac>
 8011a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a70:	f383 8811 	msr	BASEPRI, r3
 8011a74:	f3bf 8f6f 	isb	sy
 8011a78:	f3bf 8f4f 	dsb	sy
 8011a7c:	60fb      	str	r3, [r7, #12]
 8011a7e:	e7fe      	b.n	8011a7e <vTaskStartScheduler+0xaa>
}
 8011a80:	bf00      	nop
 8011a82:	3718      	adds	r7, #24
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	08017adc 	.word	0x08017adc
 8011a8c:	080121d5 	.word	0x080121d5
 8011a90:	200272b0 	.word	0x200272b0
 8011a94:	200272ac 	.word	0x200272ac
 8011a98:	20027298 	.word	0x20027298
 8011a9c:	20027290 	.word	0x20027290

08011aa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011aa4:	4b04      	ldr	r3, [pc, #16]	; (8011ab8 <vTaskSuspendAll+0x18>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	4a03      	ldr	r2, [pc, #12]	; (8011ab8 <vTaskSuspendAll+0x18>)
 8011aac:	6013      	str	r3, [r2, #0]
}
 8011aae:	bf00      	nop
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr
 8011ab8:	200272b4 	.word	0x200272b4

08011abc <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8011abc:	b480      	push	{r7}
 8011abe:	b083      	sub	sp, #12
 8011ac0:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8011ac6:	4b14      	ldr	r3, [pc, #80]	; (8011b18 <prvGetExpectedIdleTime+0x5c>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d001      	beq.n	8011ad2 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8011ace:	2301      	movs	r3, #1
 8011ad0:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8011ad2:	4b12      	ldr	r3, [pc, #72]	; (8011b1c <prvGetExpectedIdleTime+0x60>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d002      	beq.n	8011ae2 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8011adc:	2300      	movs	r3, #0
 8011ade:	607b      	str	r3, [r7, #4]
 8011ae0:	e012      	b.n	8011b08 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8011ae2:	4b0f      	ldr	r3, [pc, #60]	; (8011b20 <prvGetExpectedIdleTime+0x64>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	2b01      	cmp	r3, #1
 8011ae8:	d902      	bls.n	8011af0 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8011aea:	2300      	movs	r3, #0
 8011aec:	607b      	str	r3, [r7, #4]
 8011aee:	e00b      	b.n	8011b08 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d002      	beq.n	8011afc <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8011af6:	2300      	movs	r3, #0
 8011af8:	607b      	str	r3, [r7, #4]
 8011afa:	e005      	b.n	8011b08 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 8011afc:	4b09      	ldr	r3, [pc, #36]	; (8011b24 <prvGetExpectedIdleTime+0x68>)
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	4b09      	ldr	r3, [pc, #36]	; (8011b28 <prvGetExpectedIdleTime+0x6c>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	1ad3      	subs	r3, r2, r3
 8011b06:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8011b08:	687b      	ldr	r3, [r7, #4]
	}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	370c      	adds	r7, #12
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr
 8011b16:	bf00      	nop
 8011b18:	20027294 	.word	0x20027294
 8011b1c:	20026db8 	.word	0x20026db8
 8011b20:	20026dbc 	.word	0x20026dbc
 8011b24:	200272ac 	.word	0x200272ac
 8011b28:	20027290 	.word	0x20027290

08011b2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b084      	sub	sp, #16
 8011b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011b32:	2300      	movs	r3, #0
 8011b34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011b36:	2300      	movs	r3, #0
 8011b38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011b3a:	4b41      	ldr	r3, [pc, #260]	; (8011c40 <xTaskResumeAll+0x114>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d109      	bne.n	8011b56 <xTaskResumeAll+0x2a>
 8011b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b46:	f383 8811 	msr	BASEPRI, r3
 8011b4a:	f3bf 8f6f 	isb	sy
 8011b4e:	f3bf 8f4f 	dsb	sy
 8011b52:	603b      	str	r3, [r7, #0]
 8011b54:	e7fe      	b.n	8011b54 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011b56:	f7fe fba1 	bl	801029c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011b5a:	4b39      	ldr	r3, [pc, #228]	; (8011c40 <xTaskResumeAll+0x114>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	3b01      	subs	r3, #1
 8011b60:	4a37      	ldr	r2, [pc, #220]	; (8011c40 <xTaskResumeAll+0x114>)
 8011b62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b64:	4b36      	ldr	r3, [pc, #216]	; (8011c40 <xTaskResumeAll+0x114>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d162      	bne.n	8011c32 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011b6c:	4b35      	ldr	r3, [pc, #212]	; (8011c44 <xTaskResumeAll+0x118>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d05e      	beq.n	8011c32 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b74:	e02f      	b.n	8011bd6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8011b76:	4b34      	ldr	r3, [pc, #208]	; (8011c48 <xTaskResumeAll+0x11c>)
 8011b78:	68db      	ldr	r3, [r3, #12]
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	3318      	adds	r3, #24
 8011b82:	4618      	mov	r0, r3
 8011b84:	f7fe fa3a 	bl	800fffc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	3304      	adds	r3, #4
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7fe fa35 	bl	800fffc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b96:	4b2d      	ldr	r3, [pc, #180]	; (8011c4c <xTaskResumeAll+0x120>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d903      	bls.n	8011ba6 <xTaskResumeAll+0x7a>
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba2:	4a2a      	ldr	r2, [pc, #168]	; (8011c4c <xTaskResumeAll+0x120>)
 8011ba4:	6013      	str	r3, [r2, #0]
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011baa:	4613      	mov	r3, r2
 8011bac:	009b      	lsls	r3, r3, #2
 8011bae:	4413      	add	r3, r2
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	4a27      	ldr	r2, [pc, #156]	; (8011c50 <xTaskResumeAll+0x124>)
 8011bb4:	441a      	add	r2, r3
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	3304      	adds	r3, #4
 8011bba:	4619      	mov	r1, r3
 8011bbc:	4610      	mov	r0, r2
 8011bbe:	f7fe f9c0 	bl	800ff42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bc6:	4b23      	ldr	r3, [pc, #140]	; (8011c54 <xTaskResumeAll+0x128>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d302      	bcc.n	8011bd6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011bd0:	4b21      	ldr	r3, [pc, #132]	; (8011c58 <xTaskResumeAll+0x12c>)
 8011bd2:	2201      	movs	r2, #1
 8011bd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011bd6:	4b1c      	ldr	r3, [pc, #112]	; (8011c48 <xTaskResumeAll+0x11c>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d1cb      	bne.n	8011b76 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d001      	beq.n	8011be8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011be4:	f000 fbfc 	bl	80123e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011be8:	4b1c      	ldr	r3, [pc, #112]	; (8011c5c <xTaskResumeAll+0x130>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d010      	beq.n	8011c16 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011bf4:	f000 f86c 	bl	8011cd0 <xTaskIncrementTick>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d002      	beq.n	8011c04 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011bfe:	4b16      	ldr	r3, [pc, #88]	; (8011c58 <xTaskResumeAll+0x12c>)
 8011c00:	2201      	movs	r2, #1
 8011c02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	3b01      	subs	r3, #1
 8011c08:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d1f1      	bne.n	8011bf4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011c10:	4b12      	ldr	r3, [pc, #72]	; (8011c5c <xTaskResumeAll+0x130>)
 8011c12:	2200      	movs	r2, #0
 8011c14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011c16:	4b10      	ldr	r3, [pc, #64]	; (8011c58 <xTaskResumeAll+0x12c>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d009      	beq.n	8011c32 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011c1e:	2301      	movs	r3, #1
 8011c20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011c22:	4b0f      	ldr	r3, [pc, #60]	; (8011c60 <xTaskResumeAll+0x134>)
 8011c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c28:	601a      	str	r2, [r3, #0]
 8011c2a:	f3bf 8f4f 	dsb	sy
 8011c2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011c32:	f7fe fb61 	bl	80102f8 <vPortExitCritical>

	return xAlreadyYielded;
 8011c36:	68bb      	ldr	r3, [r7, #8]
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3710      	adds	r7, #16
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}
 8011c40:	200272b4 	.word	0x200272b4
 8011c44:	2002728c 	.word	0x2002728c
 8011c48:	2002724c 	.word	0x2002724c
 8011c4c:	20027294 	.word	0x20027294
 8011c50:	20026dbc 	.word	0x20026dbc
 8011c54:	20026db8 	.word	0x20026db8
 8011c58:	200272a0 	.word	0x200272a0
 8011c5c:	2002729c 	.word	0x2002729c
 8011c60:	e000ed04 	.word	0xe000ed04

08011c64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011c64:	b480      	push	{r7}
 8011c66:	b083      	sub	sp, #12
 8011c68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011c6a:	4b05      	ldr	r3, [pc, #20]	; (8011c80 <xTaskGetTickCount+0x1c>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011c70:	687b      	ldr	r3, [r7, #4]
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	370c      	adds	r7, #12
 8011c76:	46bd      	mov	sp, r7
 8011c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7c:	4770      	bx	lr
 8011c7e:	bf00      	nop
 8011c80:	20027290 	.word	0x20027290

08011c84 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8011c84:	b480      	push	{r7}
 8011c86:	b085      	sub	sp, #20
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8011c8c:	4b0e      	ldr	r3, [pc, #56]	; (8011cc8 <vTaskStepTick+0x44>)
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	441a      	add	r2, r3
 8011c94:	4b0d      	ldr	r3, [pc, #52]	; (8011ccc <vTaskStepTick+0x48>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d909      	bls.n	8011cb0 <vTaskStepTick+0x2c>
 8011c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca0:	f383 8811 	msr	BASEPRI, r3
 8011ca4:	f3bf 8f6f 	isb	sy
 8011ca8:	f3bf 8f4f 	dsb	sy
 8011cac:	60fb      	str	r3, [r7, #12]
 8011cae:	e7fe      	b.n	8011cae <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 8011cb0:	4b05      	ldr	r3, [pc, #20]	; (8011cc8 <vTaskStepTick+0x44>)
 8011cb2:	681a      	ldr	r2, [r3, #0]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	4413      	add	r3, r2
 8011cb8:	4a03      	ldr	r2, [pc, #12]	; (8011cc8 <vTaskStepTick+0x44>)
 8011cba:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8011cbc:	bf00      	nop
 8011cbe:	3714      	adds	r7, #20
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr
 8011cc8:	20027290 	.word	0x20027290
 8011ccc:	200272ac 	.word	0x200272ac

08011cd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b086      	sub	sp, #24
 8011cd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011cda:	4b55      	ldr	r3, [pc, #340]	; (8011e30 <xTaskIncrementTick+0x160>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	f040 8093 	bne.w	8011e0a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011ce4:	4b53      	ldr	r3, [pc, #332]	; (8011e34 <xTaskIncrementTick+0x164>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	3301      	adds	r3, #1
 8011cea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011cec:	4a51      	ldr	r2, [pc, #324]	; (8011e34 <xTaskIncrementTick+0x164>)
 8011cee:	693b      	ldr	r3, [r7, #16]
 8011cf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d11f      	bne.n	8011d38 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011cf8:	4b4f      	ldr	r3, [pc, #316]	; (8011e38 <xTaskIncrementTick+0x168>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d009      	beq.n	8011d16 <xTaskIncrementTick+0x46>
 8011d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d06:	f383 8811 	msr	BASEPRI, r3
 8011d0a:	f3bf 8f6f 	isb	sy
 8011d0e:	f3bf 8f4f 	dsb	sy
 8011d12:	603b      	str	r3, [r7, #0]
 8011d14:	e7fe      	b.n	8011d14 <xTaskIncrementTick+0x44>
 8011d16:	4b48      	ldr	r3, [pc, #288]	; (8011e38 <xTaskIncrementTick+0x168>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	60fb      	str	r3, [r7, #12]
 8011d1c:	4b47      	ldr	r3, [pc, #284]	; (8011e3c <xTaskIncrementTick+0x16c>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	4a45      	ldr	r2, [pc, #276]	; (8011e38 <xTaskIncrementTick+0x168>)
 8011d22:	6013      	str	r3, [r2, #0]
 8011d24:	4a45      	ldr	r2, [pc, #276]	; (8011e3c <xTaskIncrementTick+0x16c>)
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	6013      	str	r3, [r2, #0]
 8011d2a:	4b45      	ldr	r3, [pc, #276]	; (8011e40 <xTaskIncrementTick+0x170>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	3301      	adds	r3, #1
 8011d30:	4a43      	ldr	r2, [pc, #268]	; (8011e40 <xTaskIncrementTick+0x170>)
 8011d32:	6013      	str	r3, [r2, #0]
 8011d34:	f000 fb54 	bl	80123e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011d38:	4b42      	ldr	r3, [pc, #264]	; (8011e44 <xTaskIncrementTick+0x174>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	693a      	ldr	r2, [r7, #16]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d34e      	bcc.n	8011de0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d42:	4b3d      	ldr	r3, [pc, #244]	; (8011e38 <xTaskIncrementTick+0x168>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d101      	bne.n	8011d50 <xTaskIncrementTick+0x80>
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	e000      	b.n	8011d52 <xTaskIncrementTick+0x82>
 8011d50:	2300      	movs	r3, #0
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d004      	beq.n	8011d60 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d56:	4b3b      	ldr	r3, [pc, #236]	; (8011e44 <xTaskIncrementTick+0x174>)
 8011d58:	f04f 32ff 	mov.w	r2, #4294967295
 8011d5c:	601a      	str	r2, [r3, #0]
					break;
 8011d5e:	e03f      	b.n	8011de0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011d60:	4b35      	ldr	r3, [pc, #212]	; (8011e38 <xTaskIncrementTick+0x168>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	68db      	ldr	r3, [r3, #12]
 8011d66:	68db      	ldr	r3, [r3, #12]
 8011d68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	685b      	ldr	r3, [r3, #4]
 8011d6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011d70:	693a      	ldr	r2, [r7, #16]
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d203      	bcs.n	8011d80 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011d78:	4a32      	ldr	r2, [pc, #200]	; (8011e44 <xTaskIncrementTick+0x174>)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6013      	str	r3, [r2, #0]
						break;
 8011d7e:	e02f      	b.n	8011de0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	3304      	adds	r3, #4
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fe f939 	bl	800fffc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d004      	beq.n	8011d9c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	3318      	adds	r3, #24
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7fe f930 	bl	800fffc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011da0:	4b29      	ldr	r3, [pc, #164]	; (8011e48 <xTaskIncrementTick+0x178>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d903      	bls.n	8011db0 <xTaskIncrementTick+0xe0>
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dac:	4a26      	ldr	r2, [pc, #152]	; (8011e48 <xTaskIncrementTick+0x178>)
 8011dae:	6013      	str	r3, [r2, #0]
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011db4:	4613      	mov	r3, r2
 8011db6:	009b      	lsls	r3, r3, #2
 8011db8:	4413      	add	r3, r2
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	4a23      	ldr	r2, [pc, #140]	; (8011e4c <xTaskIncrementTick+0x17c>)
 8011dbe:	441a      	add	r2, r3
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	3304      	adds	r3, #4
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	4610      	mov	r0, r2
 8011dc8:	f7fe f8bb 	bl	800ff42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dd0:	4b1f      	ldr	r3, [pc, #124]	; (8011e50 <xTaskIncrementTick+0x180>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d3b3      	bcc.n	8011d42 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011dda:	2301      	movs	r3, #1
 8011ddc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dde:	e7b0      	b.n	8011d42 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011de0:	4b1b      	ldr	r3, [pc, #108]	; (8011e50 <xTaskIncrementTick+0x180>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011de6:	4919      	ldr	r1, [pc, #100]	; (8011e4c <xTaskIncrementTick+0x17c>)
 8011de8:	4613      	mov	r3, r2
 8011dea:	009b      	lsls	r3, r3, #2
 8011dec:	4413      	add	r3, r2
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	440b      	add	r3, r1
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d901      	bls.n	8011dfc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8011dfc:	4b15      	ldr	r3, [pc, #84]	; (8011e54 <xTaskIncrementTick+0x184>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d109      	bne.n	8011e18 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8011e04:	f7ef fa21 	bl	800124a <vApplicationTickHook>
 8011e08:	e006      	b.n	8011e18 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011e0a:	4b12      	ldr	r3, [pc, #72]	; (8011e54 <xTaskIncrementTick+0x184>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	3301      	adds	r3, #1
 8011e10:	4a10      	ldr	r2, [pc, #64]	; (8011e54 <xTaskIncrementTick+0x184>)
 8011e12:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8011e14:	f7ef fa19 	bl	800124a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011e18:	4b0f      	ldr	r3, [pc, #60]	; (8011e58 <xTaskIncrementTick+0x188>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d001      	beq.n	8011e24 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8011e20:	2301      	movs	r3, #1
 8011e22:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011e24:	697b      	ldr	r3, [r7, #20]
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	3718      	adds	r7, #24
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	200272b4 	.word	0x200272b4
 8011e34:	20027290 	.word	0x20027290
 8011e38:	20027244 	.word	0x20027244
 8011e3c:	20027248 	.word	0x20027248
 8011e40:	200272a4 	.word	0x200272a4
 8011e44:	200272ac 	.word	0x200272ac
 8011e48:	20027294 	.word	0x20027294
 8011e4c:	20026dbc 	.word	0x20026dbc
 8011e50:	20026db8 	.word	0x20026db8
 8011e54:	2002729c 	.word	0x2002729c
 8011e58:	200272a0 	.word	0x200272a0

08011e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b084      	sub	sp, #16
 8011e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011e62:	4b3b      	ldr	r3, [pc, #236]	; (8011f50 <vTaskSwitchContext+0xf4>)
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d003      	beq.n	8011e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011e6a:	4b3a      	ldr	r3, [pc, #232]	; (8011f54 <vTaskSwitchContext+0xf8>)
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011e70:	e06a      	b.n	8011f48 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 8011e72:	4b38      	ldr	r3, [pc, #224]	; (8011f54 <vTaskSwitchContext+0xf8>)
 8011e74:	2200      	movs	r2, #0
 8011e76:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8011e78:	f7ef f9e0 	bl	800123c <getRunTimeCounterValue>
 8011e7c:	4602      	mov	r2, r0
 8011e7e:	4b36      	ldr	r3, [pc, #216]	; (8011f58 <vTaskSwitchContext+0xfc>)
 8011e80:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8011e82:	4b35      	ldr	r3, [pc, #212]	; (8011f58 <vTaskSwitchContext+0xfc>)
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	4b35      	ldr	r3, [pc, #212]	; (8011f5c <vTaskSwitchContext+0x100>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d909      	bls.n	8011ea2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8011e8e:	4b34      	ldr	r3, [pc, #208]	; (8011f60 <vTaskSwitchContext+0x104>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011e94:	4a30      	ldr	r2, [pc, #192]	; (8011f58 <vTaskSwitchContext+0xfc>)
 8011e96:	6810      	ldr	r0, [r2, #0]
 8011e98:	4a30      	ldr	r2, [pc, #192]	; (8011f5c <vTaskSwitchContext+0x100>)
 8011e9a:	6812      	ldr	r2, [r2, #0]
 8011e9c:	1a82      	subs	r2, r0, r2
 8011e9e:	440a      	add	r2, r1
 8011ea0:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8011ea2:	4b2d      	ldr	r3, [pc, #180]	; (8011f58 <vTaskSwitchContext+0xfc>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	4a2d      	ldr	r2, [pc, #180]	; (8011f5c <vTaskSwitchContext+0x100>)
 8011ea8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011eaa:	4b2d      	ldr	r3, [pc, #180]	; (8011f60 <vTaskSwitchContext+0x104>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	4b2b      	ldr	r3, [pc, #172]	; (8011f60 <vTaskSwitchContext+0x104>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d808      	bhi.n	8011ecc <vTaskSwitchContext+0x70>
 8011eba:	4b29      	ldr	r3, [pc, #164]	; (8011f60 <vTaskSwitchContext+0x104>)
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	4b28      	ldr	r3, [pc, #160]	; (8011f60 <vTaskSwitchContext+0x104>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	3334      	adds	r3, #52	; 0x34
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	4610      	mov	r0, r2
 8011ec8:	f7ef f9c6 	bl	8001258 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011ecc:	4b25      	ldr	r3, [pc, #148]	; (8011f64 <vTaskSwitchContext+0x108>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	60fb      	str	r3, [r7, #12]
 8011ed2:	e00f      	b.n	8011ef4 <vTaskSwitchContext+0x98>
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d109      	bne.n	8011eee <vTaskSwitchContext+0x92>
 8011eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ede:	f383 8811 	msr	BASEPRI, r3
 8011ee2:	f3bf 8f6f 	isb	sy
 8011ee6:	f3bf 8f4f 	dsb	sy
 8011eea:	607b      	str	r3, [r7, #4]
 8011eec:	e7fe      	b.n	8011eec <vTaskSwitchContext+0x90>
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	3b01      	subs	r3, #1
 8011ef2:	60fb      	str	r3, [r7, #12]
 8011ef4:	491c      	ldr	r1, [pc, #112]	; (8011f68 <vTaskSwitchContext+0x10c>)
 8011ef6:	68fa      	ldr	r2, [r7, #12]
 8011ef8:	4613      	mov	r3, r2
 8011efa:	009b      	lsls	r3, r3, #2
 8011efc:	4413      	add	r3, r2
 8011efe:	009b      	lsls	r3, r3, #2
 8011f00:	440b      	add	r3, r1
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d0e5      	beq.n	8011ed4 <vTaskSwitchContext+0x78>
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	4613      	mov	r3, r2
 8011f0c:	009b      	lsls	r3, r3, #2
 8011f0e:	4413      	add	r3, r2
 8011f10:	009b      	lsls	r3, r3, #2
 8011f12:	4a15      	ldr	r2, [pc, #84]	; (8011f68 <vTaskSwitchContext+0x10c>)
 8011f14:	4413      	add	r3, r2
 8011f16:	60bb      	str	r3, [r7, #8]
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	685b      	ldr	r3, [r3, #4]
 8011f1c:	685a      	ldr	r2, [r3, #4]
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	605a      	str	r2, [r3, #4]
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	685a      	ldr	r2, [r3, #4]
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	3308      	adds	r3, #8
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d104      	bne.n	8011f38 <vTaskSwitchContext+0xdc>
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	685a      	ldr	r2, [r3, #4]
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	605a      	str	r2, [r3, #4]
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	4a08      	ldr	r2, [pc, #32]	; (8011f60 <vTaskSwitchContext+0x104>)
 8011f40:	6013      	str	r3, [r2, #0]
 8011f42:	4a08      	ldr	r2, [pc, #32]	; (8011f64 <vTaskSwitchContext+0x108>)
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	6013      	str	r3, [r2, #0]
}
 8011f48:	bf00      	nop
 8011f4a:	3710      	adds	r7, #16
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	200272b4 	.word	0x200272b4
 8011f54:	200272a0 	.word	0x200272a0
 8011f58:	200272bc 	.word	0x200272bc
 8011f5c:	200272b8 	.word	0x200272b8
 8011f60:	20026db8 	.word	0x20026db8
 8011f64:	20027294 	.word	0x20027294
 8011f68:	20026dbc 	.word	0x20026dbc

08011f6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b084      	sub	sp, #16
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d109      	bne.n	8011f90 <vTaskPlaceOnEventList+0x24>
 8011f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f80:	f383 8811 	msr	BASEPRI, r3
 8011f84:	f3bf 8f6f 	isb	sy
 8011f88:	f3bf 8f4f 	dsb	sy
 8011f8c:	60fb      	str	r3, [r7, #12]
 8011f8e:	e7fe      	b.n	8011f8e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011f90:	4b07      	ldr	r3, [pc, #28]	; (8011fb0 <vTaskPlaceOnEventList+0x44>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	3318      	adds	r3, #24
 8011f96:	4619      	mov	r1, r3
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f7fd fff6 	bl	800ff8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011f9e:	2101      	movs	r1, #1
 8011fa0:	6838      	ldr	r0, [r7, #0]
 8011fa2:	f000 fda9 	bl	8012af8 <prvAddCurrentTaskToDelayedList>
}
 8011fa6:	bf00      	nop
 8011fa8:	3710      	adds	r7, #16
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	20026db8 	.word	0x20026db8

08011fb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b086      	sub	sp, #24
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	60f8      	str	r0, [r7, #12]
 8011fbc:	60b9      	str	r1, [r7, #8]
 8011fbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d109      	bne.n	8011fda <vTaskPlaceOnEventListRestricted+0x26>
 8011fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fca:	f383 8811 	msr	BASEPRI, r3
 8011fce:	f3bf 8f6f 	isb	sy
 8011fd2:	f3bf 8f4f 	dsb	sy
 8011fd6:	617b      	str	r3, [r7, #20]
 8011fd8:	e7fe      	b.n	8011fd8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011fda:	4b0a      	ldr	r3, [pc, #40]	; (8012004 <vTaskPlaceOnEventListRestricted+0x50>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	3318      	adds	r3, #24
 8011fe0:	4619      	mov	r1, r3
 8011fe2:	68f8      	ldr	r0, [r7, #12]
 8011fe4:	f7fd ffad 	bl	800ff42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d002      	beq.n	8011ff4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8011fee:	f04f 33ff 	mov.w	r3, #4294967295
 8011ff2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011ff4:	6879      	ldr	r1, [r7, #4]
 8011ff6:	68b8      	ldr	r0, [r7, #8]
 8011ff8:	f000 fd7e 	bl	8012af8 <prvAddCurrentTaskToDelayedList>
	}
 8011ffc:	bf00      	nop
 8011ffe:	3718      	adds	r7, #24
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}
 8012004:	20026db8 	.word	0x20026db8

08012008 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b086      	sub	sp, #24
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	68db      	ldr	r3, [r3, #12]
 8012016:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d109      	bne.n	8012032 <xTaskRemoveFromEventList+0x2a>
 801201e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012022:	f383 8811 	msr	BASEPRI, r3
 8012026:	f3bf 8f6f 	isb	sy
 801202a:	f3bf 8f4f 	dsb	sy
 801202e:	60fb      	str	r3, [r7, #12]
 8012030:	e7fe      	b.n	8012030 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	3318      	adds	r3, #24
 8012036:	4618      	mov	r0, r3
 8012038:	f7fd ffe0 	bl	800fffc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801203c:	4b1e      	ldr	r3, [pc, #120]	; (80120b8 <xTaskRemoveFromEventList+0xb0>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d11d      	bne.n	8012080 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	3304      	adds	r3, #4
 8012048:	4618      	mov	r0, r3
 801204a:	f7fd ffd7 	bl	800fffc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801204e:	693b      	ldr	r3, [r7, #16]
 8012050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012052:	4b1a      	ldr	r3, [pc, #104]	; (80120bc <xTaskRemoveFromEventList+0xb4>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	429a      	cmp	r2, r3
 8012058:	d903      	bls.n	8012062 <xTaskRemoveFromEventList+0x5a>
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801205e:	4a17      	ldr	r2, [pc, #92]	; (80120bc <xTaskRemoveFromEventList+0xb4>)
 8012060:	6013      	str	r3, [r2, #0]
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012066:	4613      	mov	r3, r2
 8012068:	009b      	lsls	r3, r3, #2
 801206a:	4413      	add	r3, r2
 801206c:	009b      	lsls	r3, r3, #2
 801206e:	4a14      	ldr	r2, [pc, #80]	; (80120c0 <xTaskRemoveFromEventList+0xb8>)
 8012070:	441a      	add	r2, r3
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	3304      	adds	r3, #4
 8012076:	4619      	mov	r1, r3
 8012078:	4610      	mov	r0, r2
 801207a:	f7fd ff62 	bl	800ff42 <vListInsertEnd>
 801207e:	e005      	b.n	801208c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	3318      	adds	r3, #24
 8012084:	4619      	mov	r1, r3
 8012086:	480f      	ldr	r0, [pc, #60]	; (80120c4 <xTaskRemoveFromEventList+0xbc>)
 8012088:	f7fd ff5b 	bl	800ff42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012090:	4b0d      	ldr	r3, [pc, #52]	; (80120c8 <xTaskRemoveFromEventList+0xc0>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012096:	429a      	cmp	r2, r3
 8012098:	d905      	bls.n	80120a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801209a:	2301      	movs	r3, #1
 801209c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801209e:	4b0b      	ldr	r3, [pc, #44]	; (80120cc <xTaskRemoveFromEventList+0xc4>)
 80120a0:	2201      	movs	r2, #1
 80120a2:	601a      	str	r2, [r3, #0]
 80120a4:	e001      	b.n	80120aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80120a6:	2300      	movs	r3, #0
 80120a8:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 80120aa:	f000 f999 	bl	80123e0 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 80120ae:	697b      	ldr	r3, [r7, #20]
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3718      	adds	r7, #24
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	200272b4 	.word	0x200272b4
 80120bc:	20027294 	.word	0x20027294
 80120c0:	20026dbc 	.word	0x20026dbc
 80120c4:	2002724c 	.word	0x2002724c
 80120c8:	20026db8 	.word	0x20026db8
 80120cc:	200272a0 	.word	0x200272a0

080120d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80120d0:	b480      	push	{r7}
 80120d2:	b083      	sub	sp, #12
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80120d8:	4b06      	ldr	r3, [pc, #24]	; (80120f4 <vTaskInternalSetTimeOutState+0x24>)
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80120e0:	4b05      	ldr	r3, [pc, #20]	; (80120f8 <vTaskInternalSetTimeOutState+0x28>)
 80120e2:	681a      	ldr	r2, [r3, #0]
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	605a      	str	r2, [r3, #4]
}
 80120e8:	bf00      	nop
 80120ea:	370c      	adds	r7, #12
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr
 80120f4:	200272a4 	.word	0x200272a4
 80120f8:	20027290 	.word	0x20027290

080120fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b088      	sub	sp, #32
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d109      	bne.n	8012120 <xTaskCheckForTimeOut+0x24>
 801210c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012110:	f383 8811 	msr	BASEPRI, r3
 8012114:	f3bf 8f6f 	isb	sy
 8012118:	f3bf 8f4f 	dsb	sy
 801211c:	613b      	str	r3, [r7, #16]
 801211e:	e7fe      	b.n	801211e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d109      	bne.n	801213a <xTaskCheckForTimeOut+0x3e>
 8012126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801212a:	f383 8811 	msr	BASEPRI, r3
 801212e:	f3bf 8f6f 	isb	sy
 8012132:	f3bf 8f4f 	dsb	sy
 8012136:	60fb      	str	r3, [r7, #12]
 8012138:	e7fe      	b.n	8012138 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801213a:	f7fe f8af 	bl	801029c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801213e:	4b1d      	ldr	r3, [pc, #116]	; (80121b4 <xTaskCheckForTimeOut+0xb8>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	69ba      	ldr	r2, [r7, #24]
 801214a:	1ad3      	subs	r3, r2, r3
 801214c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012156:	d102      	bne.n	801215e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012158:	2300      	movs	r3, #0
 801215a:	61fb      	str	r3, [r7, #28]
 801215c:	e023      	b.n	80121a6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681a      	ldr	r2, [r3, #0]
 8012162:	4b15      	ldr	r3, [pc, #84]	; (80121b8 <xTaskCheckForTimeOut+0xbc>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	429a      	cmp	r2, r3
 8012168:	d007      	beq.n	801217a <xTaskCheckForTimeOut+0x7e>
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	69ba      	ldr	r2, [r7, #24]
 8012170:	429a      	cmp	r2, r3
 8012172:	d302      	bcc.n	801217a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012174:	2301      	movs	r3, #1
 8012176:	61fb      	str	r3, [r7, #28]
 8012178:	e015      	b.n	80121a6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	697a      	ldr	r2, [r7, #20]
 8012180:	429a      	cmp	r2, r3
 8012182:	d20b      	bcs.n	801219c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	1ad2      	subs	r2, r2, r3
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f7ff ff9d 	bl	80120d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012196:	2300      	movs	r3, #0
 8012198:	61fb      	str	r3, [r7, #28]
 801219a:	e004      	b.n	80121a6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	2200      	movs	r2, #0
 80121a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80121a2:	2301      	movs	r3, #1
 80121a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80121a6:	f7fe f8a7 	bl	80102f8 <vPortExitCritical>

	return xReturn;
 80121aa:	69fb      	ldr	r3, [r7, #28]
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	3720      	adds	r7, #32
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bd80      	pop	{r7, pc}
 80121b4:	20027290 	.word	0x20027290
 80121b8:	200272a4 	.word	0x200272a4

080121bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80121bc:	b480      	push	{r7}
 80121be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80121c0:	4b03      	ldr	r3, [pc, #12]	; (80121d0 <vTaskMissedYield+0x14>)
 80121c2:	2201      	movs	r2, #1
 80121c4:	601a      	str	r2, [r3, #0]
}
 80121c6:	bf00      	nop
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr
 80121d0:	200272a0 	.word	0x200272a0

080121d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80121dc:	f000 f8a6 	bl	801232c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80121e0:	4b17      	ldr	r3, [pc, #92]	; (8012240 <prvIdleTask+0x6c>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	2b01      	cmp	r3, #1
 80121e6:	d907      	bls.n	80121f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80121e8:	4b16      	ldr	r3, [pc, #88]	; (8012244 <prvIdleTask+0x70>)
 80121ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121ee:	601a      	str	r2, [r3, #0]
 80121f0:	f3bf 8f4f 	dsb	sy
 80121f4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80121f8:	f7ff fc60 	bl	8011abc <prvGetExpectedIdleTime>
 80121fc:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2b01      	cmp	r3, #1
 8012202:	d9eb      	bls.n	80121dc <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8012204:	f7ff fc4c 	bl	8011aa0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8012208:	4b0f      	ldr	r3, [pc, #60]	; (8012248 <prvIdleTask+0x74>)
 801220a:	681a      	ldr	r2, [r3, #0]
 801220c:	4b0f      	ldr	r3, [pc, #60]	; (801224c <prvIdleTask+0x78>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	429a      	cmp	r2, r3
 8012212:	d209      	bcs.n	8012228 <prvIdleTask+0x54>
 8012214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012218:	f383 8811 	msr	BASEPRI, r3
 801221c:	f3bf 8f6f 	isb	sy
 8012220:	f3bf 8f4f 	dsb	sy
 8012224:	60bb      	str	r3, [r7, #8]
 8012226:	e7fe      	b.n	8012226 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8012228:	f7ff fc48 	bl	8011abc <prvGetExpectedIdleTime>
 801222c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	2b01      	cmp	r3, #1
 8012232:	d902      	bls.n	801223a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8012234:	68f8      	ldr	r0, [r7, #12]
 8012236:	f7f0 f84f 	bl	80022d8 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801223a:	f7ff fc77 	bl	8011b2c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 801223e:	e7cd      	b.n	80121dc <prvIdleTask+0x8>
 8012240:	20026dbc 	.word	0x20026dbc
 8012244:	e000ed04 	.word	0xe000ed04
 8012248:	200272ac 	.word	0x200272ac
 801224c:	20027290 	.word	0x20027290

08012250 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8012250:	b480      	push	{r7}
 8012252:	b083      	sub	sp, #12
 8012254:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8012256:	2301      	movs	r3, #1
 8012258:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 801225a:	2301      	movs	r3, #1
 801225c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 801225e:	4b0f      	ldr	r3, [pc, #60]	; (801229c <eTaskConfirmSleepModeStatus+0x4c>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d002      	beq.n	801226c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8012266:	2300      	movs	r3, #0
 8012268:	71fb      	strb	r3, [r7, #7]
 801226a:	e010      	b.n	801228e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 801226c:	4b0c      	ldr	r3, [pc, #48]	; (80122a0 <eTaskConfirmSleepModeStatus+0x50>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d002      	beq.n	801227a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8012274:	2300      	movs	r3, #0
 8012276:	71fb      	strb	r3, [r7, #7]
 8012278:	e009      	b.n	801228e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 801227a:	4b0a      	ldr	r3, [pc, #40]	; (80122a4 <eTaskConfirmSleepModeStatus+0x54>)
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	4b0a      	ldr	r3, [pc, #40]	; (80122a8 <eTaskConfirmSleepModeStatus+0x58>)
 8012280:	6819      	ldr	r1, [r3, #0]
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	1acb      	subs	r3, r1, r3
 8012286:	429a      	cmp	r2, r3
 8012288:	d101      	bne.n	801228e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 801228a:	2302      	movs	r3, #2
 801228c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 801228e:	79fb      	ldrb	r3, [r7, #7]
	}
 8012290:	4618      	mov	r0, r3
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr
 801229c:	2002724c 	.word	0x2002724c
 80122a0:	200272a0 	.word	0x200272a0
 80122a4:	20027278 	.word	0x20027278
 80122a8:	2002728c 	.word	0x2002728c

080122ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b082      	sub	sp, #8
 80122b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80122b2:	2300      	movs	r3, #0
 80122b4:	607b      	str	r3, [r7, #4]
 80122b6:	e00c      	b.n	80122d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80122b8:	687a      	ldr	r2, [r7, #4]
 80122ba:	4613      	mov	r3, r2
 80122bc:	009b      	lsls	r3, r3, #2
 80122be:	4413      	add	r3, r2
 80122c0:	009b      	lsls	r3, r3, #2
 80122c2:	4a12      	ldr	r2, [pc, #72]	; (801230c <prvInitialiseTaskLists+0x60>)
 80122c4:	4413      	add	r3, r2
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7fd fe0e 	bl	800fee8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	3301      	adds	r3, #1
 80122d0:	607b      	str	r3, [r7, #4]
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2b37      	cmp	r3, #55	; 0x37
 80122d6:	d9ef      	bls.n	80122b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80122d8:	480d      	ldr	r0, [pc, #52]	; (8012310 <prvInitialiseTaskLists+0x64>)
 80122da:	f7fd fe05 	bl	800fee8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80122de:	480d      	ldr	r0, [pc, #52]	; (8012314 <prvInitialiseTaskLists+0x68>)
 80122e0:	f7fd fe02 	bl	800fee8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80122e4:	480c      	ldr	r0, [pc, #48]	; (8012318 <prvInitialiseTaskLists+0x6c>)
 80122e6:	f7fd fdff 	bl	800fee8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80122ea:	480c      	ldr	r0, [pc, #48]	; (801231c <prvInitialiseTaskLists+0x70>)
 80122ec:	f7fd fdfc 	bl	800fee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80122f0:	480b      	ldr	r0, [pc, #44]	; (8012320 <prvInitialiseTaskLists+0x74>)
 80122f2:	f7fd fdf9 	bl	800fee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80122f6:	4b0b      	ldr	r3, [pc, #44]	; (8012324 <prvInitialiseTaskLists+0x78>)
 80122f8:	4a05      	ldr	r2, [pc, #20]	; (8012310 <prvInitialiseTaskLists+0x64>)
 80122fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80122fc:	4b0a      	ldr	r3, [pc, #40]	; (8012328 <prvInitialiseTaskLists+0x7c>)
 80122fe:	4a05      	ldr	r2, [pc, #20]	; (8012314 <prvInitialiseTaskLists+0x68>)
 8012300:	601a      	str	r2, [r3, #0]
}
 8012302:	bf00      	nop
 8012304:	3708      	adds	r7, #8
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop
 801230c:	20026dbc 	.word	0x20026dbc
 8012310:	2002721c 	.word	0x2002721c
 8012314:	20027230 	.word	0x20027230
 8012318:	2002724c 	.word	0x2002724c
 801231c:	20027260 	.word	0x20027260
 8012320:	20027278 	.word	0x20027278
 8012324:	20027244 	.word	0x20027244
 8012328:	20027248 	.word	0x20027248

0801232c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012332:	e019      	b.n	8012368 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012334:	f7fd ffb2 	bl	801029c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012338:	4b0f      	ldr	r3, [pc, #60]	; (8012378 <prvCheckTasksWaitingTermination+0x4c>)
 801233a:	68db      	ldr	r3, [r3, #12]
 801233c:	68db      	ldr	r3, [r3, #12]
 801233e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	3304      	adds	r3, #4
 8012344:	4618      	mov	r0, r3
 8012346:	f7fd fe59 	bl	800fffc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801234a:	4b0c      	ldr	r3, [pc, #48]	; (801237c <prvCheckTasksWaitingTermination+0x50>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	3b01      	subs	r3, #1
 8012350:	4a0a      	ldr	r2, [pc, #40]	; (801237c <prvCheckTasksWaitingTermination+0x50>)
 8012352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012354:	4b0a      	ldr	r3, [pc, #40]	; (8012380 <prvCheckTasksWaitingTermination+0x54>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	3b01      	subs	r3, #1
 801235a:	4a09      	ldr	r2, [pc, #36]	; (8012380 <prvCheckTasksWaitingTermination+0x54>)
 801235c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801235e:	f7fd ffcb 	bl	80102f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f000 f80e 	bl	8012384 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012368:	4b05      	ldr	r3, [pc, #20]	; (8012380 <prvCheckTasksWaitingTermination+0x54>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d1e1      	bne.n	8012334 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012370:	bf00      	nop
 8012372:	3708      	adds	r7, #8
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}
 8012378:	20027260 	.word	0x20027260
 801237c:	2002728c 	.word	0x2002728c
 8012380:	20027274 	.word	0x20027274

08012384 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012384:	b580      	push	{r7, lr}
 8012386:	b084      	sub	sp, #16
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8012392:	2b00      	cmp	r3, #0
 8012394:	d108      	bne.n	80123a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801239a:	4618      	mov	r0, r3
 801239c:	f7fd fc8e 	bl	800fcbc <vPortFree>
				vPortFree( pxTCB );
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f7fd fc8b 	bl	800fcbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80123a6:	e017      	b.n	80123d8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80123ae:	2b01      	cmp	r3, #1
 80123b0:	d103      	bne.n	80123ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7fd fc82 	bl	800fcbc <vPortFree>
	}
 80123b8:	e00e      	b.n	80123d8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80123c0:	2b02      	cmp	r3, #2
 80123c2:	d009      	beq.n	80123d8 <prvDeleteTCB+0x54>
 80123c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c8:	f383 8811 	msr	BASEPRI, r3
 80123cc:	f3bf 8f6f 	isb	sy
 80123d0:	f3bf 8f4f 	dsb	sy
 80123d4:	60fb      	str	r3, [r7, #12]
 80123d6:	e7fe      	b.n	80123d6 <prvDeleteTCB+0x52>
	}
 80123d8:	bf00      	nop
 80123da:	3710      	adds	r7, #16
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}

080123e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80123e0:	b480      	push	{r7}
 80123e2:	b083      	sub	sp, #12
 80123e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123e6:	4b0f      	ldr	r3, [pc, #60]	; (8012424 <prvResetNextTaskUnblockTime+0x44>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d101      	bne.n	80123f4 <prvResetNextTaskUnblockTime+0x14>
 80123f0:	2301      	movs	r3, #1
 80123f2:	e000      	b.n	80123f6 <prvResetNextTaskUnblockTime+0x16>
 80123f4:	2300      	movs	r3, #0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d004      	beq.n	8012404 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80123fa:	4b0b      	ldr	r3, [pc, #44]	; (8012428 <prvResetNextTaskUnblockTime+0x48>)
 80123fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012400:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012402:	e008      	b.n	8012416 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012404:	4b07      	ldr	r3, [pc, #28]	; (8012424 <prvResetNextTaskUnblockTime+0x44>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	68db      	ldr	r3, [r3, #12]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	685b      	ldr	r3, [r3, #4]
 8012412:	4a05      	ldr	r2, [pc, #20]	; (8012428 <prvResetNextTaskUnblockTime+0x48>)
 8012414:	6013      	str	r3, [r2, #0]
}
 8012416:	bf00      	nop
 8012418:	370c      	adds	r7, #12
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr
 8012422:	bf00      	nop
 8012424:	20027244 	.word	0x20027244
 8012428:	200272ac 	.word	0x200272ac

0801242c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801242c:	b480      	push	{r7}
 801242e:	b083      	sub	sp, #12
 8012430:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8012432:	4b05      	ldr	r3, [pc, #20]	; (8012448 <xTaskGetCurrentTaskHandle+0x1c>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012438:	687b      	ldr	r3, [r7, #4]
	}
 801243a:	4618      	mov	r0, r3
 801243c:	370c      	adds	r7, #12
 801243e:	46bd      	mov	sp, r7
 8012440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012444:	4770      	bx	lr
 8012446:	bf00      	nop
 8012448:	20026db8 	.word	0x20026db8

0801244c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801244c:	b480      	push	{r7}
 801244e:	b083      	sub	sp, #12
 8012450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012452:	4b0b      	ldr	r3, [pc, #44]	; (8012480 <xTaskGetSchedulerState+0x34>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d102      	bne.n	8012460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801245a:	2301      	movs	r3, #1
 801245c:	607b      	str	r3, [r7, #4]
 801245e:	e008      	b.n	8012472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012460:	4b08      	ldr	r3, [pc, #32]	; (8012484 <xTaskGetSchedulerState+0x38>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d102      	bne.n	801246e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012468:	2302      	movs	r3, #2
 801246a:	607b      	str	r3, [r7, #4]
 801246c:	e001      	b.n	8012472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801246e:	2300      	movs	r3, #0
 8012470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012472:	687b      	ldr	r3, [r7, #4]
	}
 8012474:	4618      	mov	r0, r3
 8012476:	370c      	adds	r7, #12
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr
 8012480:	20027298 	.word	0x20027298
 8012484:	200272b4 	.word	0x200272b4

08012488 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012488:	b580      	push	{r7, lr}
 801248a:	b084      	sub	sp, #16
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012494:	2300      	movs	r3, #0
 8012496:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d056      	beq.n	801254c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124a2:	4b2d      	ldr	r3, [pc, #180]	; (8012558 <xTaskPriorityInherit+0xd0>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d246      	bcs.n	801253a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	699b      	ldr	r3, [r3, #24]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	db06      	blt.n	80124c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124b4:	4b28      	ldr	r3, [pc, #160]	; (8012558 <xTaskPriorityInherit+0xd0>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80124c2:	68bb      	ldr	r3, [r7, #8]
 80124c4:	6959      	ldr	r1, [r3, #20]
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ca:	4613      	mov	r3, r2
 80124cc:	009b      	lsls	r3, r3, #2
 80124ce:	4413      	add	r3, r2
 80124d0:	009b      	lsls	r3, r3, #2
 80124d2:	4a22      	ldr	r2, [pc, #136]	; (801255c <xTaskPriorityInherit+0xd4>)
 80124d4:	4413      	add	r3, r2
 80124d6:	4299      	cmp	r1, r3
 80124d8:	d101      	bne.n	80124de <xTaskPriorityInherit+0x56>
 80124da:	2301      	movs	r3, #1
 80124dc:	e000      	b.n	80124e0 <xTaskPriorityInherit+0x58>
 80124de:	2300      	movs	r3, #0
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d022      	beq.n	801252a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	3304      	adds	r3, #4
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7fd fd87 	bl	800fffc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80124ee:	4b1a      	ldr	r3, [pc, #104]	; (8012558 <xTaskPriorityInherit+0xd0>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124fc:	4b18      	ldr	r3, [pc, #96]	; (8012560 <xTaskPriorityInherit+0xd8>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	429a      	cmp	r2, r3
 8012502:	d903      	bls.n	801250c <xTaskPriorityInherit+0x84>
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012508:	4a15      	ldr	r2, [pc, #84]	; (8012560 <xTaskPriorityInherit+0xd8>)
 801250a:	6013      	str	r3, [r2, #0]
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012510:	4613      	mov	r3, r2
 8012512:	009b      	lsls	r3, r3, #2
 8012514:	4413      	add	r3, r2
 8012516:	009b      	lsls	r3, r3, #2
 8012518:	4a10      	ldr	r2, [pc, #64]	; (801255c <xTaskPriorityInherit+0xd4>)
 801251a:	441a      	add	r2, r3
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	3304      	adds	r3, #4
 8012520:	4619      	mov	r1, r3
 8012522:	4610      	mov	r0, r2
 8012524:	f7fd fd0d 	bl	800ff42 <vListInsertEnd>
 8012528:	e004      	b.n	8012534 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801252a:	4b0b      	ldr	r3, [pc, #44]	; (8012558 <xTaskPriorityInherit+0xd0>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012534:	2301      	movs	r3, #1
 8012536:	60fb      	str	r3, [r7, #12]
 8012538:	e008      	b.n	801254c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801253e:	4b06      	ldr	r3, [pc, #24]	; (8012558 <xTaskPriorityInherit+0xd0>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012544:	429a      	cmp	r2, r3
 8012546:	d201      	bcs.n	801254c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012548:	2301      	movs	r3, #1
 801254a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801254c:	68fb      	ldr	r3, [r7, #12]
	}
 801254e:	4618      	mov	r0, r3
 8012550:	3710      	adds	r7, #16
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}
 8012556:	bf00      	nop
 8012558:	20026db8 	.word	0x20026db8
 801255c:	20026dbc 	.word	0x20026dbc
 8012560:	20027294 	.word	0x20027294

08012564 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012564:	b580      	push	{r7, lr}
 8012566:	b086      	sub	sp, #24
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012570:	2300      	movs	r3, #0
 8012572:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d054      	beq.n	8012624 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801257a:	4b2d      	ldr	r3, [pc, #180]	; (8012630 <xTaskPriorityDisinherit+0xcc>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	693a      	ldr	r2, [r7, #16]
 8012580:	429a      	cmp	r2, r3
 8012582:	d009      	beq.n	8012598 <xTaskPriorityDisinherit+0x34>
 8012584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012588:	f383 8811 	msr	BASEPRI, r3
 801258c:	f3bf 8f6f 	isb	sy
 8012590:	f3bf 8f4f 	dsb	sy
 8012594:	60fb      	str	r3, [r7, #12]
 8012596:	e7fe      	b.n	8012596 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801259c:	2b00      	cmp	r3, #0
 801259e:	d109      	bne.n	80125b4 <xTaskPriorityDisinherit+0x50>
 80125a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a4:	f383 8811 	msr	BASEPRI, r3
 80125a8:	f3bf 8f6f 	isb	sy
 80125ac:	f3bf 8f4f 	dsb	sy
 80125b0:	60bb      	str	r3, [r7, #8]
 80125b2:	e7fe      	b.n	80125b2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125b8:	1e5a      	subs	r2, r3, #1
 80125ba:	693b      	ldr	r3, [r7, #16]
 80125bc:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d02c      	beq.n	8012624 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d128      	bne.n	8012624 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	3304      	adds	r3, #4
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fd fd10 	bl	800fffc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125e0:	693b      	ldr	r3, [r7, #16]
 80125e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125f4:	4b0f      	ldr	r3, [pc, #60]	; (8012634 <xTaskPriorityDisinherit+0xd0>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d903      	bls.n	8012604 <xTaskPriorityDisinherit+0xa0>
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012600:	4a0c      	ldr	r2, [pc, #48]	; (8012634 <xTaskPriorityDisinherit+0xd0>)
 8012602:	6013      	str	r3, [r2, #0]
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012608:	4613      	mov	r3, r2
 801260a:	009b      	lsls	r3, r3, #2
 801260c:	4413      	add	r3, r2
 801260e:	009b      	lsls	r3, r3, #2
 8012610:	4a09      	ldr	r2, [pc, #36]	; (8012638 <xTaskPriorityDisinherit+0xd4>)
 8012612:	441a      	add	r2, r3
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	3304      	adds	r3, #4
 8012618:	4619      	mov	r1, r3
 801261a:	4610      	mov	r0, r2
 801261c:	f7fd fc91 	bl	800ff42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012620:	2301      	movs	r3, #1
 8012622:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012624:	697b      	ldr	r3, [r7, #20]
	}
 8012626:	4618      	mov	r0, r3
 8012628:	3718      	adds	r7, #24
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
 801262e:	bf00      	nop
 8012630:	20026db8 	.word	0x20026db8
 8012634:	20027294 	.word	0x20027294
 8012638:	20026dbc 	.word	0x20026dbc

0801263c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801263c:	b580      	push	{r7, lr}
 801263e:	b088      	sub	sp, #32
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801264a:	2301      	movs	r3, #1
 801264c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d06d      	beq.n	8012730 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012654:	69bb      	ldr	r3, [r7, #24]
 8012656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012658:	2b00      	cmp	r3, #0
 801265a:	d109      	bne.n	8012670 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012660:	f383 8811 	msr	BASEPRI, r3
 8012664:	f3bf 8f6f 	isb	sy
 8012668:	f3bf 8f4f 	dsb	sy
 801266c:	60fb      	str	r3, [r7, #12]
 801266e:	e7fe      	b.n	801266e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012670:	69bb      	ldr	r3, [r7, #24]
 8012672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012674:	683a      	ldr	r2, [r7, #0]
 8012676:	429a      	cmp	r2, r3
 8012678:	d902      	bls.n	8012680 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	61fb      	str	r3, [r7, #28]
 801267e:	e002      	b.n	8012686 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012680:	69bb      	ldr	r3, [r7, #24]
 8012682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012684:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012686:	69bb      	ldr	r3, [r7, #24]
 8012688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801268a:	69fa      	ldr	r2, [r7, #28]
 801268c:	429a      	cmp	r2, r3
 801268e:	d04f      	beq.n	8012730 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012690:	69bb      	ldr	r3, [r7, #24]
 8012692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012694:	697a      	ldr	r2, [r7, #20]
 8012696:	429a      	cmp	r2, r3
 8012698:	d14a      	bne.n	8012730 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801269a:	4b27      	ldr	r3, [pc, #156]	; (8012738 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	69ba      	ldr	r2, [r7, #24]
 80126a0:	429a      	cmp	r2, r3
 80126a2:	d109      	bne.n	80126b8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80126a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a8:	f383 8811 	msr	BASEPRI, r3
 80126ac:	f3bf 8f6f 	isb	sy
 80126b0:	f3bf 8f4f 	dsb	sy
 80126b4:	60bb      	str	r3, [r7, #8]
 80126b6:	e7fe      	b.n	80126b6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80126b8:	69bb      	ldr	r3, [r7, #24]
 80126ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80126be:	69bb      	ldr	r3, [r7, #24]
 80126c0:	69fa      	ldr	r2, [r7, #28]
 80126c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80126c4:	69bb      	ldr	r3, [r7, #24]
 80126c6:	699b      	ldr	r3, [r3, #24]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	db04      	blt.n	80126d6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80126d2:	69bb      	ldr	r3, [r7, #24]
 80126d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80126d6:	69bb      	ldr	r3, [r7, #24]
 80126d8:	6959      	ldr	r1, [r3, #20]
 80126da:	693a      	ldr	r2, [r7, #16]
 80126dc:	4613      	mov	r3, r2
 80126de:	009b      	lsls	r3, r3, #2
 80126e0:	4413      	add	r3, r2
 80126e2:	009b      	lsls	r3, r3, #2
 80126e4:	4a15      	ldr	r2, [pc, #84]	; (801273c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80126e6:	4413      	add	r3, r2
 80126e8:	4299      	cmp	r1, r3
 80126ea:	d101      	bne.n	80126f0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80126ec:	2301      	movs	r3, #1
 80126ee:	e000      	b.n	80126f2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80126f0:	2300      	movs	r3, #0
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d01c      	beq.n	8012730 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80126f6:	69bb      	ldr	r3, [r7, #24]
 80126f8:	3304      	adds	r3, #4
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7fd fc7e 	bl	800fffc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012700:	69bb      	ldr	r3, [r7, #24]
 8012702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012704:	4b0e      	ldr	r3, [pc, #56]	; (8012740 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	429a      	cmp	r2, r3
 801270a:	d903      	bls.n	8012714 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 801270c:	69bb      	ldr	r3, [r7, #24]
 801270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012710:	4a0b      	ldr	r2, [pc, #44]	; (8012740 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012712:	6013      	str	r3, [r2, #0]
 8012714:	69bb      	ldr	r3, [r7, #24]
 8012716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012718:	4613      	mov	r3, r2
 801271a:	009b      	lsls	r3, r3, #2
 801271c:	4413      	add	r3, r2
 801271e:	009b      	lsls	r3, r3, #2
 8012720:	4a06      	ldr	r2, [pc, #24]	; (801273c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012722:	441a      	add	r2, r3
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	3304      	adds	r3, #4
 8012728:	4619      	mov	r1, r3
 801272a:	4610      	mov	r0, r2
 801272c:	f7fd fc09 	bl	800ff42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012730:	bf00      	nop
 8012732:	3720      	adds	r7, #32
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}
 8012738:	20026db8 	.word	0x20026db8
 801273c:	20026dbc 	.word	0x20026dbc
 8012740:	20027294 	.word	0x20027294

08012744 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8012744:	b480      	push	{r7}
 8012746:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012748:	4b07      	ldr	r3, [pc, #28]	; (8012768 <pvTaskIncrementMutexHeldCount+0x24>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d004      	beq.n	801275a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012750:	4b05      	ldr	r3, [pc, #20]	; (8012768 <pvTaskIncrementMutexHeldCount+0x24>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012756:	3201      	adds	r2, #1
 8012758:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 801275a:	4b03      	ldr	r3, [pc, #12]	; (8012768 <pvTaskIncrementMutexHeldCount+0x24>)
 801275c:	681b      	ldr	r3, [r3, #0]
	}
 801275e:	4618      	mov	r0, r3
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr
 8012768:	20026db8 	.word	0x20026db8

0801276c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801276c:	b580      	push	{r7, lr}
 801276e:	b086      	sub	sp, #24
 8012770:	af00      	add	r7, sp, #0
 8012772:	60f8      	str	r0, [r7, #12]
 8012774:	60b9      	str	r1, [r7, #8]
 8012776:	607a      	str	r2, [r7, #4]
 8012778:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801277a:	f7fd fd8f 	bl	801029c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801277e:	4b26      	ldr	r3, [pc, #152]	; (8012818 <xTaskNotifyWait+0xac>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8012786:	b2db      	uxtb	r3, r3
 8012788:	2b02      	cmp	r3, #2
 801278a:	d01a      	beq.n	80127c2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801278c:	4b22      	ldr	r3, [pc, #136]	; (8012818 <xTaskNotifyWait+0xac>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012792:	68fa      	ldr	r2, [r7, #12]
 8012794:	43d2      	mvns	r2, r2
 8012796:	400a      	ands	r2, r1
 8012798:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801279a:	4b1f      	ldr	r3, [pc, #124]	; (8012818 <xTaskNotifyWait+0xac>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2201      	movs	r2, #1
 80127a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d00b      	beq.n	80127c2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80127aa:	2101      	movs	r1, #1
 80127ac:	6838      	ldr	r0, [r7, #0]
 80127ae:	f000 f9a3 	bl	8012af8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80127b2:	4b1a      	ldr	r3, [pc, #104]	; (801281c <xTaskNotifyWait+0xb0>)
 80127b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127b8:	601a      	str	r2, [r3, #0]
 80127ba:	f3bf 8f4f 	dsb	sy
 80127be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80127c2:	f7fd fd99 	bl	80102f8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80127c6:	f7fd fd69 	bl	801029c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d004      	beq.n	80127da <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80127d0:	4b11      	ldr	r3, [pc, #68]	; (8012818 <xTaskNotifyWait+0xac>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80127da:	4b0f      	ldr	r3, [pc, #60]	; (8012818 <xTaskNotifyWait+0xac>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	2b02      	cmp	r3, #2
 80127e6:	d002      	beq.n	80127ee <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80127e8:	2300      	movs	r3, #0
 80127ea:	617b      	str	r3, [r7, #20]
 80127ec:	e008      	b.n	8012800 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80127ee:	4b0a      	ldr	r3, [pc, #40]	; (8012818 <xTaskNotifyWait+0xac>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80127f4:	68ba      	ldr	r2, [r7, #8]
 80127f6:	43d2      	mvns	r2, r2
 80127f8:	400a      	ands	r2, r1
 80127fa:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 80127fc:	2301      	movs	r3, #1
 80127fe:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012800:	4b05      	ldr	r3, [pc, #20]	; (8012818 <xTaskNotifyWait+0xac>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	2200      	movs	r2, #0
 8012806:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 801280a:	f7fd fd75 	bl	80102f8 <vPortExitCritical>

		return xReturn;
 801280e:	697b      	ldr	r3, [r7, #20]
	}
 8012810:	4618      	mov	r0, r3
 8012812:	3718      	adds	r7, #24
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}
 8012818:	20026db8 	.word	0x20026db8
 801281c:	e000ed04 	.word	0xe000ed04

08012820 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8012820:	b580      	push	{r7, lr}
 8012822:	b08a      	sub	sp, #40	; 0x28
 8012824:	af00      	add	r7, sp, #0
 8012826:	60f8      	str	r0, [r7, #12]
 8012828:	60b9      	str	r1, [r7, #8]
 801282a:	603b      	str	r3, [r7, #0]
 801282c:	4613      	mov	r3, r2
 801282e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8012830:	2301      	movs	r3, #1
 8012832:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d109      	bne.n	801284e <xTaskGenericNotify+0x2e>
 801283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801283e:	f383 8811 	msr	BASEPRI, r3
 8012842:	f3bf 8f6f 	isb	sy
 8012846:	f3bf 8f4f 	dsb	sy
 801284a:	61bb      	str	r3, [r7, #24]
 801284c:	e7fe      	b.n	801284c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8012852:	f7fd fd23 	bl	801029c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d003      	beq.n	8012864 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801285c:	6a3b      	ldr	r3, [r7, #32]
 801285e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012864:	6a3b      	ldr	r3, [r7, #32]
 8012866:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801286a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801286c:	6a3b      	ldr	r3, [r7, #32]
 801286e:	2202      	movs	r2, #2
 8012870:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8012874:	79fb      	ldrb	r3, [r7, #7]
 8012876:	2b04      	cmp	r3, #4
 8012878:	d827      	bhi.n	80128ca <xTaskGenericNotify+0xaa>
 801287a:	a201      	add	r2, pc, #4	; (adr r2, 8012880 <xTaskGenericNotify+0x60>)
 801287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012880:	080128cb 	.word	0x080128cb
 8012884:	08012895 	.word	0x08012895
 8012888:	080128a3 	.word	0x080128a3
 801288c:	080128af 	.word	0x080128af
 8012890:	080128b7 	.word	0x080128b7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012894:	6a3b      	ldr	r3, [r7, #32]
 8012896:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	431a      	orrs	r2, r3
 801289c:	6a3b      	ldr	r3, [r7, #32]
 801289e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80128a0:	e013      	b.n	80128ca <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80128a2:	6a3b      	ldr	r3, [r7, #32]
 80128a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80128a6:	1c5a      	adds	r2, r3, #1
 80128a8:	6a3b      	ldr	r3, [r7, #32]
 80128aa:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80128ac:	e00d      	b.n	80128ca <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80128ae:	6a3b      	ldr	r3, [r7, #32]
 80128b0:	68ba      	ldr	r2, [r7, #8]
 80128b2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80128b4:	e009      	b.n	80128ca <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80128b6:	7ffb      	ldrb	r3, [r7, #31]
 80128b8:	2b02      	cmp	r3, #2
 80128ba:	d003      	beq.n	80128c4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80128bc:	6a3b      	ldr	r3, [r7, #32]
 80128be:	68ba      	ldr	r2, [r7, #8]
 80128c0:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80128c2:	e001      	b.n	80128c8 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 80128c4:	2300      	movs	r3, #0
 80128c6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80128c8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80128ca:	7ffb      	ldrb	r3, [r7, #31]
 80128cc:	2b01      	cmp	r3, #1
 80128ce:	d13b      	bne.n	8012948 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128d0:	6a3b      	ldr	r3, [r7, #32]
 80128d2:	3304      	adds	r3, #4
 80128d4:	4618      	mov	r0, r3
 80128d6:	f7fd fb91 	bl	800fffc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80128da:	6a3b      	ldr	r3, [r7, #32]
 80128dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128de:	4b1e      	ldr	r3, [pc, #120]	; (8012958 <xTaskGenericNotify+0x138>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d903      	bls.n	80128ee <xTaskGenericNotify+0xce>
 80128e6:	6a3b      	ldr	r3, [r7, #32]
 80128e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ea:	4a1b      	ldr	r2, [pc, #108]	; (8012958 <xTaskGenericNotify+0x138>)
 80128ec:	6013      	str	r3, [r2, #0]
 80128ee:	6a3b      	ldr	r3, [r7, #32]
 80128f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128f2:	4613      	mov	r3, r2
 80128f4:	009b      	lsls	r3, r3, #2
 80128f6:	4413      	add	r3, r2
 80128f8:	009b      	lsls	r3, r3, #2
 80128fa:	4a18      	ldr	r2, [pc, #96]	; (801295c <xTaskGenericNotify+0x13c>)
 80128fc:	441a      	add	r2, r3
 80128fe:	6a3b      	ldr	r3, [r7, #32]
 8012900:	3304      	adds	r3, #4
 8012902:	4619      	mov	r1, r3
 8012904:	4610      	mov	r0, r2
 8012906:	f7fd fb1c 	bl	800ff42 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801290a:	6a3b      	ldr	r3, [r7, #32]
 801290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801290e:	2b00      	cmp	r3, #0
 8012910:	d009      	beq.n	8012926 <xTaskGenericNotify+0x106>
 8012912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012916:	f383 8811 	msr	BASEPRI, r3
 801291a:	f3bf 8f6f 	isb	sy
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	617b      	str	r3, [r7, #20]
 8012924:	e7fe      	b.n	8012924 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8012926:	f7ff fd5b 	bl	80123e0 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801292a:	6a3b      	ldr	r3, [r7, #32]
 801292c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801292e:	4b0c      	ldr	r3, [pc, #48]	; (8012960 <xTaskGenericNotify+0x140>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012934:	429a      	cmp	r2, r3
 8012936:	d907      	bls.n	8012948 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012938:	4b0a      	ldr	r3, [pc, #40]	; (8012964 <xTaskGenericNotify+0x144>)
 801293a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801293e:	601a      	str	r2, [r3, #0]
 8012940:	f3bf 8f4f 	dsb	sy
 8012944:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012948:	f7fd fcd6 	bl	80102f8 <vPortExitCritical>

		return xReturn;
 801294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801294e:	4618      	mov	r0, r3
 8012950:	3728      	adds	r7, #40	; 0x28
 8012952:	46bd      	mov	sp, r7
 8012954:	bd80      	pop	{r7, pc}
 8012956:	bf00      	nop
 8012958:	20027294 	.word	0x20027294
 801295c:	20026dbc 	.word	0x20026dbc
 8012960:	20026db8 	.word	0x20026db8
 8012964:	e000ed04 	.word	0xe000ed04

08012968 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012968:	b580      	push	{r7, lr}
 801296a:	b08e      	sub	sp, #56	; 0x38
 801296c:	af00      	add	r7, sp, #0
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	60b9      	str	r1, [r7, #8]
 8012972:	603b      	str	r3, [r7, #0]
 8012974:	4613      	mov	r3, r2
 8012976:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012978:	2301      	movs	r3, #1
 801297a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d109      	bne.n	8012996 <xTaskGenericNotifyFromISR+0x2e>
 8012982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012986:	f383 8811 	msr	BASEPRI, r3
 801298a:	f3bf 8f6f 	isb	sy
 801298e:	f3bf 8f4f 	dsb	sy
 8012992:	627b      	str	r3, [r7, #36]	; 0x24
 8012994:	e7fe      	b.n	8012994 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012996:	f7fd fd39 	bl	801040c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801299e:	f3ef 8211 	mrs	r2, BASEPRI
 80129a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a6:	f383 8811 	msr	BASEPRI, r3
 80129aa:	f3bf 8f6f 	isb	sy
 80129ae:	f3bf 8f4f 	dsb	sy
 80129b2:	623a      	str	r2, [r7, #32]
 80129b4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80129b6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80129b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d003      	beq.n	80129c8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80129c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80129c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ca:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80129ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80129d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d4:	2202      	movs	r2, #2
 80129d6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 80129da:	79fb      	ldrb	r3, [r7, #7]
 80129dc:	2b04      	cmp	r3, #4
 80129de:	d829      	bhi.n	8012a34 <xTaskGenericNotifyFromISR+0xcc>
 80129e0:	a201      	add	r2, pc, #4	; (adr r2, 80129e8 <xTaskGenericNotifyFromISR+0x80>)
 80129e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129e6:	bf00      	nop
 80129e8:	08012a35 	.word	0x08012a35
 80129ec:	080129fd 	.word	0x080129fd
 80129f0:	08012a0b 	.word	0x08012a0b
 80129f4:	08012a17 	.word	0x08012a17
 80129f8:	08012a1f 	.word	0x08012a1f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80129fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	431a      	orrs	r2, r3
 8012a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a06:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8012a08:	e014      	b.n	8012a34 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a0e:	1c5a      	adds	r2, r3, #1
 8012a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a12:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8012a14:	e00e      	b.n	8012a34 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a18:	68ba      	ldr	r2, [r7, #8]
 8012a1a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8012a1c:	e00a      	b.n	8012a34 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a22:	2b02      	cmp	r3, #2
 8012a24:	d003      	beq.n	8012a2e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	68ba      	ldr	r2, [r7, #8]
 8012a2a:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012a2c:	e001      	b.n	8012a32 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8012a32:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012a34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	d146      	bne.n	8012aca <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d009      	beq.n	8012a58 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8012a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a48:	f383 8811 	msr	BASEPRI, r3
 8012a4c:	f3bf 8f6f 	isb	sy
 8012a50:	f3bf 8f4f 	dsb	sy
 8012a54:	61bb      	str	r3, [r7, #24]
 8012a56:	e7fe      	b.n	8012a56 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a58:	4b21      	ldr	r3, [pc, #132]	; (8012ae0 <xTaskGenericNotifyFromISR+0x178>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d11d      	bne.n	8012a9c <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a62:	3304      	adds	r3, #4
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7fd fac9 	bl	800fffc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a6e:	4b1d      	ldr	r3, [pc, #116]	; (8012ae4 <xTaskGenericNotifyFromISR+0x17c>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d903      	bls.n	8012a7e <xTaskGenericNotifyFromISR+0x116>
 8012a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a7a:	4a1a      	ldr	r2, [pc, #104]	; (8012ae4 <xTaskGenericNotifyFromISR+0x17c>)
 8012a7c:	6013      	str	r3, [r2, #0]
 8012a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a82:	4613      	mov	r3, r2
 8012a84:	009b      	lsls	r3, r3, #2
 8012a86:	4413      	add	r3, r2
 8012a88:	009b      	lsls	r3, r3, #2
 8012a8a:	4a17      	ldr	r2, [pc, #92]	; (8012ae8 <xTaskGenericNotifyFromISR+0x180>)
 8012a8c:	441a      	add	r2, r3
 8012a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a90:	3304      	adds	r3, #4
 8012a92:	4619      	mov	r1, r3
 8012a94:	4610      	mov	r0, r2
 8012a96:	f7fd fa54 	bl	800ff42 <vListInsertEnd>
 8012a9a:	e005      	b.n	8012aa8 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a9e:	3318      	adds	r3, #24
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	4812      	ldr	r0, [pc, #72]	; (8012aec <xTaskGenericNotifyFromISR+0x184>)
 8012aa4:	f7fd fa4d 	bl	800ff42 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aac:	4b10      	ldr	r3, [pc, #64]	; (8012af0 <xTaskGenericNotifyFromISR+0x188>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d909      	bls.n	8012aca <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8012ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d003      	beq.n	8012ac4 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012abe:	2201      	movs	r2, #1
 8012ac0:	601a      	str	r2, [r3, #0]
 8012ac2:	e002      	b.n	8012aca <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8012ac4:	4b0b      	ldr	r3, [pc, #44]	; (8012af4 <xTaskGenericNotifyFromISR+0x18c>)
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	601a      	str	r2, [r3, #0]
 8012aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012acc:	617b      	str	r3, [r7, #20]
	__asm volatile
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3738      	adds	r7, #56	; 0x38
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd80      	pop	{r7, pc}
 8012ade:	bf00      	nop
 8012ae0:	200272b4 	.word	0x200272b4
 8012ae4:	20027294 	.word	0x20027294
 8012ae8:	20026dbc 	.word	0x20026dbc
 8012aec:	2002724c 	.word	0x2002724c
 8012af0:	20026db8 	.word	0x20026db8
 8012af4:	200272a0 	.word	0x200272a0

08012af8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b084      	sub	sp, #16
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012b02:	4b21      	ldr	r3, [pc, #132]	; (8012b88 <prvAddCurrentTaskToDelayedList+0x90>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b08:	4b20      	ldr	r3, [pc, #128]	; (8012b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	3304      	adds	r3, #4
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7fd fa74 	bl	800fffc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b1a:	d10a      	bne.n	8012b32 <prvAddCurrentTaskToDelayedList+0x3a>
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d007      	beq.n	8012b32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b22:	4b1a      	ldr	r3, [pc, #104]	; (8012b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	3304      	adds	r3, #4
 8012b28:	4619      	mov	r1, r3
 8012b2a:	4819      	ldr	r0, [pc, #100]	; (8012b90 <prvAddCurrentTaskToDelayedList+0x98>)
 8012b2c:	f7fd fa09 	bl	800ff42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012b30:	e026      	b.n	8012b80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012b32:	68fa      	ldr	r2, [r7, #12]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	4413      	add	r3, r2
 8012b38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012b3a:	4b14      	ldr	r3, [pc, #80]	; (8012b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	68ba      	ldr	r2, [r7, #8]
 8012b40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012b42:	68ba      	ldr	r2, [r7, #8]
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d209      	bcs.n	8012b5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b4a:	4b12      	ldr	r3, [pc, #72]	; (8012b94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012b4c:	681a      	ldr	r2, [r3, #0]
 8012b4e:	4b0f      	ldr	r3, [pc, #60]	; (8012b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	3304      	adds	r3, #4
 8012b54:	4619      	mov	r1, r3
 8012b56:	4610      	mov	r0, r2
 8012b58:	f7fd fa17 	bl	800ff8a <vListInsert>
}
 8012b5c:	e010      	b.n	8012b80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b5e:	4b0e      	ldr	r3, [pc, #56]	; (8012b98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012b60:	681a      	ldr	r2, [r3, #0]
 8012b62:	4b0a      	ldr	r3, [pc, #40]	; (8012b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	3304      	adds	r3, #4
 8012b68:	4619      	mov	r1, r3
 8012b6a:	4610      	mov	r0, r2
 8012b6c:	f7fd fa0d 	bl	800ff8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012b70:	4b0a      	ldr	r3, [pc, #40]	; (8012b9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	68ba      	ldr	r2, [r7, #8]
 8012b76:	429a      	cmp	r2, r3
 8012b78:	d202      	bcs.n	8012b80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012b7a:	4a08      	ldr	r2, [pc, #32]	; (8012b9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	6013      	str	r3, [r2, #0]
}
 8012b80:	bf00      	nop
 8012b82:	3710      	adds	r7, #16
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}
 8012b88:	20027290 	.word	0x20027290
 8012b8c:	20026db8 	.word	0x20026db8
 8012b90:	20027278 	.word	0x20027278
 8012b94:	20027248 	.word	0x20027248
 8012b98:	20027244 	.word	0x20027244
 8012b9c:	200272ac 	.word	0x200272ac

08012ba0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b08a      	sub	sp, #40	; 0x28
 8012ba4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012baa:	f000 fb51 	bl	8013250 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012bae:	4b1c      	ldr	r3, [pc, #112]	; (8012c20 <xTimerCreateTimerTask+0x80>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d021      	beq.n	8012bfa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012bbe:	1d3a      	adds	r2, r7, #4
 8012bc0:	f107 0108 	add.w	r1, r7, #8
 8012bc4:	f107 030c 	add.w	r3, r7, #12
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7fc ff97 	bl	800fafc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012bce:	6879      	ldr	r1, [r7, #4]
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	68fa      	ldr	r2, [r7, #12]
 8012bd4:	9202      	str	r2, [sp, #8]
 8012bd6:	9301      	str	r3, [sp, #4]
 8012bd8:	2302      	movs	r3, #2
 8012bda:	9300      	str	r3, [sp, #0]
 8012bdc:	2300      	movs	r3, #0
 8012bde:	460a      	mov	r2, r1
 8012be0:	4910      	ldr	r1, [pc, #64]	; (8012c24 <xTimerCreateTimerTask+0x84>)
 8012be2:	4811      	ldr	r0, [pc, #68]	; (8012c28 <xTimerCreateTimerTask+0x88>)
 8012be4:	f7fe fd28 	bl	8011638 <xTaskCreateStatic>
 8012be8:	4602      	mov	r2, r0
 8012bea:	4b10      	ldr	r3, [pc, #64]	; (8012c2c <xTimerCreateTimerTask+0x8c>)
 8012bec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012bee:	4b0f      	ldr	r3, [pc, #60]	; (8012c2c <xTimerCreateTimerTask+0x8c>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d001      	beq.n	8012bfa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d109      	bne.n	8012c14 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8012c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c04:	f383 8811 	msr	BASEPRI, r3
 8012c08:	f3bf 8f6f 	isb	sy
 8012c0c:	f3bf 8f4f 	dsb	sy
 8012c10:	613b      	str	r3, [r7, #16]
 8012c12:	e7fe      	b.n	8012c12 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012c14:	697b      	ldr	r3, [r7, #20]
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	3718      	adds	r7, #24
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}
 8012c1e:	bf00      	nop
 8012c20:	200272f0 	.word	0x200272f0
 8012c24:	08017ae4 	.word	0x08017ae4
 8012c28:	08012e65 	.word	0x08012e65
 8012c2c:	200272f4 	.word	0x200272f4

08012c30 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b088      	sub	sp, #32
 8012c34:	af02      	add	r7, sp, #8
 8012c36:	60f8      	str	r0, [r7, #12]
 8012c38:	60b9      	str	r1, [r7, #8]
 8012c3a:	607a      	str	r2, [r7, #4]
 8012c3c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8012c3e:	2030      	movs	r0, #48	; 0x30
 8012c40:	f7fc ff76 	bl	800fb30 <pvPortMalloc>
 8012c44:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d00d      	beq.n	8012c68 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012c4c:	697b      	ldr	r3, [r7, #20]
 8012c4e:	9301      	str	r3, [sp, #4]
 8012c50:	6a3b      	ldr	r3, [r7, #32]
 8012c52:	9300      	str	r3, [sp, #0]
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	687a      	ldr	r2, [r7, #4]
 8012c58:	68b9      	ldr	r1, [r7, #8]
 8012c5a:	68f8      	ldr	r0, [r7, #12]
 8012c5c:	f000 f844 	bl	8012ce8 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	2200      	movs	r2, #0
 8012c64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8012c68:	697b      	ldr	r3, [r7, #20]
	}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	3718      	adds	r7, #24
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}

08012c72 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8012c72:	b580      	push	{r7, lr}
 8012c74:	b08a      	sub	sp, #40	; 0x28
 8012c76:	af02      	add	r7, sp, #8
 8012c78:	60f8      	str	r0, [r7, #12]
 8012c7a:	60b9      	str	r1, [r7, #8]
 8012c7c:	607a      	str	r2, [r7, #4]
 8012c7e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012c80:	2330      	movs	r3, #48	; 0x30
 8012c82:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8012c84:	693b      	ldr	r3, [r7, #16]
 8012c86:	2b30      	cmp	r3, #48	; 0x30
 8012c88:	d009      	beq.n	8012c9e <xTimerCreateStatic+0x2c>
 8012c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c8e:	f383 8811 	msr	BASEPRI, r3
 8012c92:	f3bf 8f6f 	isb	sy
 8012c96:	f3bf 8f4f 	dsb	sy
 8012c9a:	61bb      	str	r3, [r7, #24]
 8012c9c:	e7fe      	b.n	8012c9c <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8012c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d109      	bne.n	8012cb8 <xTimerCreateStatic+0x46>
 8012ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca8:	f383 8811 	msr	BASEPRI, r3
 8012cac:	f3bf 8f6f 	isb	sy
 8012cb0:	f3bf 8f4f 	dsb	sy
 8012cb4:	617b      	str	r3, [r7, #20]
 8012cb6:	e7fe      	b.n	8012cb6 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cba:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8012cbc:	69fb      	ldr	r3, [r7, #28]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d00d      	beq.n	8012cde <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012cc2:	69fb      	ldr	r3, [r7, #28]
 8012cc4:	9301      	str	r3, [sp, #4]
 8012cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc8:	9300      	str	r3, [sp, #0]
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	687a      	ldr	r2, [r7, #4]
 8012cce:	68b9      	ldr	r1, [r7, #8]
 8012cd0:	68f8      	ldr	r0, [r7, #12]
 8012cd2:	f000 f809 	bl	8012ce8 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8012cd6:	69fb      	ldr	r3, [r7, #28]
 8012cd8:	2201      	movs	r2, #1
 8012cda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8012cde:	69fb      	ldr	r3, [r7, #28]
	}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3720      	adds	r7, #32
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}

08012ce8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b086      	sub	sp, #24
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	60f8      	str	r0, [r7, #12]
 8012cf0:	60b9      	str	r1, [r7, #8]
 8012cf2:	607a      	str	r2, [r7, #4]
 8012cf4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d109      	bne.n	8012d10 <prvInitialiseNewTimer+0x28>
 8012cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d00:	f383 8811 	msr	BASEPRI, r3
 8012d04:	f3bf 8f6f 	isb	sy
 8012d08:	f3bf 8f4f 	dsb	sy
 8012d0c:	617b      	str	r3, [r7, #20]
 8012d0e:	e7fe      	b.n	8012d0e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8012d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d015      	beq.n	8012d42 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8012d16:	f000 fa9b 	bl	8013250 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8012d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1c:	68fa      	ldr	r2, [r7, #12]
 8012d1e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d22:	68ba      	ldr	r2, [r7, #8]
 8012d24:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8012d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d28:	687a      	ldr	r2, [r7, #4]
 8012d2a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8012d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2e:	683a      	ldr	r2, [r7, #0]
 8012d30:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d34:	6a3a      	ldr	r2, [r7, #32]
 8012d36:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d3a:	3304      	adds	r3, #4
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7fd f8f3 	bl	800ff28 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8012d42:	bf00      	nop
 8012d44:	3718      	adds	r7, #24
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
	...

08012d4c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b08a      	sub	sp, #40	; 0x28
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	60f8      	str	r0, [r7, #12]
 8012d54:	60b9      	str	r1, [r7, #8]
 8012d56:	607a      	str	r2, [r7, #4]
 8012d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d109      	bne.n	8012d78 <xTimerGenericCommand+0x2c>
 8012d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d68:	f383 8811 	msr	BASEPRI, r3
 8012d6c:	f3bf 8f6f 	isb	sy
 8012d70:	f3bf 8f4f 	dsb	sy
 8012d74:	623b      	str	r3, [r7, #32]
 8012d76:	e7fe      	b.n	8012d76 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012d78:	4b19      	ldr	r3, [pc, #100]	; (8012de0 <xTimerGenericCommand+0x94>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d02a      	beq.n	8012dd6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	2b05      	cmp	r3, #5
 8012d90:	dc18      	bgt.n	8012dc4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012d92:	f7ff fb5b 	bl	801244c <xTaskGetSchedulerState>
 8012d96:	4603      	mov	r3, r0
 8012d98:	2b02      	cmp	r3, #2
 8012d9a:	d109      	bne.n	8012db0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012d9c:	4b10      	ldr	r3, [pc, #64]	; (8012de0 <xTimerGenericCommand+0x94>)
 8012d9e:	6818      	ldr	r0, [r3, #0]
 8012da0:	f107 0110 	add.w	r1, r7, #16
 8012da4:	2300      	movs	r3, #0
 8012da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012da8:	f7fd fdc4 	bl	8010934 <xQueueGenericSend>
 8012dac:	6278      	str	r0, [r7, #36]	; 0x24
 8012dae:	e012      	b.n	8012dd6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012db0:	4b0b      	ldr	r3, [pc, #44]	; (8012de0 <xTimerGenericCommand+0x94>)
 8012db2:	6818      	ldr	r0, [r3, #0]
 8012db4:	f107 0110 	add.w	r1, r7, #16
 8012db8:	2300      	movs	r3, #0
 8012dba:	2200      	movs	r2, #0
 8012dbc:	f7fd fdba 	bl	8010934 <xQueueGenericSend>
 8012dc0:	6278      	str	r0, [r7, #36]	; 0x24
 8012dc2:	e008      	b.n	8012dd6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012dc4:	4b06      	ldr	r3, [pc, #24]	; (8012de0 <xTimerGenericCommand+0x94>)
 8012dc6:	6818      	ldr	r0, [r3, #0]
 8012dc8:	f107 0110 	add.w	r1, r7, #16
 8012dcc:	2300      	movs	r3, #0
 8012dce:	683a      	ldr	r2, [r7, #0]
 8012dd0:	f7fd feaa 	bl	8010b28 <xQueueGenericSendFromISR>
 8012dd4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3728      	adds	r7, #40	; 0x28
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}
 8012de0:	200272f0 	.word	0x200272f0

08012de4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b088      	sub	sp, #32
 8012de8:	af02      	add	r7, sp, #8
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012dee:	4b1c      	ldr	r3, [pc, #112]	; (8012e60 <prvProcessExpiredTimer+0x7c>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	68db      	ldr	r3, [r3, #12]
 8012df4:	68db      	ldr	r3, [r3, #12]
 8012df6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	3304      	adds	r3, #4
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7fd f8fd 	bl	800fffc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8012e02:	697b      	ldr	r3, [r7, #20]
 8012e04:	69db      	ldr	r3, [r3, #28]
 8012e06:	2b01      	cmp	r3, #1
 8012e08:	d121      	bne.n	8012e4e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	699a      	ldr	r2, [r3, #24]
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	18d1      	adds	r1, r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	683a      	ldr	r2, [r7, #0]
 8012e16:	6978      	ldr	r0, [r7, #20]
 8012e18:	f000 f8c8 	bl	8012fac <prvInsertTimerInActiveList>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d015      	beq.n	8012e4e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e22:	2300      	movs	r3, #0
 8012e24:	9300      	str	r3, [sp, #0]
 8012e26:	2300      	movs	r3, #0
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	2100      	movs	r1, #0
 8012e2c:	6978      	ldr	r0, [r7, #20]
 8012e2e:	f7ff ff8d 	bl	8012d4c <xTimerGenericCommand>
 8012e32:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012e34:	693b      	ldr	r3, [r7, #16]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d109      	bne.n	8012e4e <prvProcessExpiredTimer+0x6a>
 8012e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e3e:	f383 8811 	msr	BASEPRI, r3
 8012e42:	f3bf 8f6f 	isb	sy
 8012e46:	f3bf 8f4f 	dsb	sy
 8012e4a:	60fb      	str	r3, [r7, #12]
 8012e4c:	e7fe      	b.n	8012e4c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e52:	6978      	ldr	r0, [r7, #20]
 8012e54:	4798      	blx	r3
}
 8012e56:	bf00      	nop
 8012e58:	3718      	adds	r7, #24
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	200272e8 	.word	0x200272e8

08012e64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b084      	sub	sp, #16
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e6c:	f107 0308 	add.w	r3, r7, #8
 8012e70:	4618      	mov	r0, r3
 8012e72:	f000 f857 	bl	8012f24 <prvGetNextExpireTime>
 8012e76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	4619      	mov	r1, r3
 8012e7c:	68f8      	ldr	r0, [r7, #12]
 8012e7e:	f000 f803 	bl	8012e88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012e82:	f000 f8d5 	bl	8013030 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e86:	e7f1      	b.n	8012e6c <prvTimerTask+0x8>

08012e88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b084      	sub	sp, #16
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012e92:	f7fe fe05 	bl	8011aa0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012e96:	f107 0308 	add.w	r3, r7, #8
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f000 f866 	bl	8012f6c <prvSampleTimeNow>
 8012ea0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d130      	bne.n	8012f0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d10a      	bne.n	8012ec4 <prvProcessTimerOrBlockTask+0x3c>
 8012eae:	687a      	ldr	r2, [r7, #4]
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	d806      	bhi.n	8012ec4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012eb6:	f7fe fe39 	bl	8011b2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012eba:	68f9      	ldr	r1, [r7, #12]
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f7ff ff91 	bl	8012de4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012ec2:	e024      	b.n	8012f0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d008      	beq.n	8012edc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012eca:	4b13      	ldr	r3, [pc, #76]	; (8012f18 <prvProcessTimerOrBlockTask+0x90>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	bf0c      	ite	eq
 8012ed4:	2301      	moveq	r3, #1
 8012ed6:	2300      	movne	r3, #0
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012edc:	4b0f      	ldr	r3, [pc, #60]	; (8012f1c <prvProcessTimerOrBlockTask+0x94>)
 8012ede:	6818      	ldr	r0, [r3, #0]
 8012ee0:	687a      	ldr	r2, [r7, #4]
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	1ad3      	subs	r3, r2, r3
 8012ee6:	683a      	ldr	r2, [r7, #0]
 8012ee8:	4619      	mov	r1, r3
 8012eea:	f7fe fb71 	bl	80115d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012eee:	f7fe fe1d 	bl	8011b2c <xTaskResumeAll>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d10a      	bne.n	8012f0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012ef8:	4b09      	ldr	r3, [pc, #36]	; (8012f20 <prvProcessTimerOrBlockTask+0x98>)
 8012efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012efe:	601a      	str	r2, [r3, #0]
 8012f00:	f3bf 8f4f 	dsb	sy
 8012f04:	f3bf 8f6f 	isb	sy
}
 8012f08:	e001      	b.n	8012f0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012f0a:	f7fe fe0f 	bl	8011b2c <xTaskResumeAll>
}
 8012f0e:	bf00      	nop
 8012f10:	3710      	adds	r7, #16
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}
 8012f16:	bf00      	nop
 8012f18:	200272ec 	.word	0x200272ec
 8012f1c:	200272f0 	.word	0x200272f0
 8012f20:	e000ed04 	.word	0xe000ed04

08012f24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012f24:	b480      	push	{r7}
 8012f26:	b085      	sub	sp, #20
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f2c:	4b0e      	ldr	r3, [pc, #56]	; (8012f68 <prvGetNextExpireTime+0x44>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	bf0c      	ite	eq
 8012f36:	2301      	moveq	r3, #1
 8012f38:	2300      	movne	r3, #0
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	461a      	mov	r2, r3
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d105      	bne.n	8012f56 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f4a:	4b07      	ldr	r3, [pc, #28]	; (8012f68 <prvGetNextExpireTime+0x44>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	68db      	ldr	r3, [r3, #12]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	60fb      	str	r3, [r7, #12]
 8012f54:	e001      	b.n	8012f5a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012f56:	2300      	movs	r3, #0
 8012f58:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3714      	adds	r7, #20
 8012f60:	46bd      	mov	sp, r7
 8012f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f66:	4770      	bx	lr
 8012f68:	200272e8 	.word	0x200272e8

08012f6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b084      	sub	sp, #16
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012f74:	f7fe fe76 	bl	8011c64 <xTaskGetTickCount>
 8012f78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012f7a:	4b0b      	ldr	r3, [pc, #44]	; (8012fa8 <prvSampleTimeNow+0x3c>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	68fa      	ldr	r2, [r7, #12]
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d205      	bcs.n	8012f90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012f84:	f000 f904 	bl	8013190 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2201      	movs	r2, #1
 8012f8c:	601a      	str	r2, [r3, #0]
 8012f8e:	e002      	b.n	8012f96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2200      	movs	r2, #0
 8012f94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012f96:	4a04      	ldr	r2, [pc, #16]	; (8012fa8 <prvSampleTimeNow+0x3c>)
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	3710      	adds	r7, #16
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
 8012fa6:	bf00      	nop
 8012fa8:	200272f8 	.word	0x200272f8

08012fac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b086      	sub	sp, #24
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	60f8      	str	r0, [r7, #12]
 8012fb4:	60b9      	str	r1, [r7, #8]
 8012fb6:	607a      	str	r2, [r7, #4]
 8012fb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	68ba      	ldr	r2, [r7, #8]
 8012fc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	68fa      	ldr	r2, [r7, #12]
 8012fc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012fca:	68ba      	ldr	r2, [r7, #8]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d812      	bhi.n	8012ff8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fd2:	687a      	ldr	r2, [r7, #4]
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	1ad2      	subs	r2, r2, r3
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	699b      	ldr	r3, [r3, #24]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d302      	bcc.n	8012fe6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	617b      	str	r3, [r7, #20]
 8012fe4:	e01b      	b.n	801301e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012fe6:	4b10      	ldr	r3, [pc, #64]	; (8013028 <prvInsertTimerInActiveList+0x7c>)
 8012fe8:	681a      	ldr	r2, [r3, #0]
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	3304      	adds	r3, #4
 8012fee:	4619      	mov	r1, r3
 8012ff0:	4610      	mov	r0, r2
 8012ff2:	f7fc ffca 	bl	800ff8a <vListInsert>
 8012ff6:	e012      	b.n	801301e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012ff8:	687a      	ldr	r2, [r7, #4]
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d206      	bcs.n	801300e <prvInsertTimerInActiveList+0x62>
 8013000:	68ba      	ldr	r2, [r7, #8]
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	429a      	cmp	r2, r3
 8013006:	d302      	bcc.n	801300e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013008:	2301      	movs	r3, #1
 801300a:	617b      	str	r3, [r7, #20]
 801300c:	e007      	b.n	801301e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801300e:	4b07      	ldr	r3, [pc, #28]	; (801302c <prvInsertTimerInActiveList+0x80>)
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	3304      	adds	r3, #4
 8013016:	4619      	mov	r1, r3
 8013018:	4610      	mov	r0, r2
 801301a:	f7fc ffb6 	bl	800ff8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801301e:	697b      	ldr	r3, [r7, #20]
}
 8013020:	4618      	mov	r0, r3
 8013022:	3718      	adds	r7, #24
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}
 8013028:	200272ec 	.word	0x200272ec
 801302c:	200272e8 	.word	0x200272e8

08013030 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b08e      	sub	sp, #56	; 0x38
 8013034:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013036:	e099      	b.n	801316c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2b00      	cmp	r3, #0
 801303c:	da17      	bge.n	801306e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801303e:	1d3b      	adds	r3, r7, #4
 8013040:	3304      	adds	r3, #4
 8013042:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013046:	2b00      	cmp	r3, #0
 8013048:	d109      	bne.n	801305e <prvProcessReceivedCommands+0x2e>
 801304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801304e:	f383 8811 	msr	BASEPRI, r3
 8013052:	f3bf 8f6f 	isb	sy
 8013056:	f3bf 8f4f 	dsb	sy
 801305a:	61fb      	str	r3, [r7, #28]
 801305c:	e7fe      	b.n	801305c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013064:	6850      	ldr	r0, [r2, #4]
 8013066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013068:	6892      	ldr	r2, [r2, #8]
 801306a:	4611      	mov	r1, r2
 801306c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2b00      	cmp	r3, #0
 8013072:	db7a      	blt.n	801316a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801307a:	695b      	ldr	r3, [r3, #20]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d004      	beq.n	801308a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013082:	3304      	adds	r3, #4
 8013084:	4618      	mov	r0, r3
 8013086:	f7fc ffb9 	bl	800fffc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801308a:	463b      	mov	r3, r7
 801308c:	4618      	mov	r0, r3
 801308e:	f7ff ff6d 	bl	8012f6c <prvSampleTimeNow>
 8013092:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2b09      	cmp	r3, #9
 8013098:	d868      	bhi.n	801316c <prvProcessReceivedCommands+0x13c>
 801309a:	a201      	add	r2, pc, #4	; (adr r2, 80130a0 <prvProcessReceivedCommands+0x70>)
 801309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a0:	080130c9 	.word	0x080130c9
 80130a4:	080130c9 	.word	0x080130c9
 80130a8:	080130c9 	.word	0x080130c9
 80130ac:	0801316d 	.word	0x0801316d
 80130b0:	08013123 	.word	0x08013123
 80130b4:	08013159 	.word	0x08013159
 80130b8:	080130c9 	.word	0x080130c9
 80130bc:	080130c9 	.word	0x080130c9
 80130c0:	0801316d 	.word	0x0801316d
 80130c4:	08013123 	.word	0x08013123
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80130c8:	68ba      	ldr	r2, [r7, #8]
 80130ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130cc:	699b      	ldr	r3, [r3, #24]
 80130ce:	18d1      	adds	r1, r2, r3
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130d6:	f7ff ff69 	bl	8012fac <prvInsertTimerInActiveList>
 80130da:	4603      	mov	r3, r0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d045      	beq.n	801316c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80130e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130e6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80130e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ea:	69db      	ldr	r3, [r3, #28]
 80130ec:	2b01      	cmp	r3, #1
 80130ee:	d13d      	bne.n	801316c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80130f0:	68ba      	ldr	r2, [r7, #8]
 80130f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f4:	699b      	ldr	r3, [r3, #24]
 80130f6:	441a      	add	r2, r3
 80130f8:	2300      	movs	r3, #0
 80130fa:	9300      	str	r3, [sp, #0]
 80130fc:	2300      	movs	r3, #0
 80130fe:	2100      	movs	r1, #0
 8013100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013102:	f7ff fe23 	bl	8012d4c <xTimerGenericCommand>
 8013106:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013108:	6a3b      	ldr	r3, [r7, #32]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d12e      	bne.n	801316c <prvProcessReceivedCommands+0x13c>
 801310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013112:	f383 8811 	msr	BASEPRI, r3
 8013116:	f3bf 8f6f 	isb	sy
 801311a:	f3bf 8f4f 	dsb	sy
 801311e:	61bb      	str	r3, [r7, #24]
 8013120:	e7fe      	b.n	8013120 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013122:	68ba      	ldr	r2, [r7, #8]
 8013124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013126:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312a:	699b      	ldr	r3, [r3, #24]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d109      	bne.n	8013144 <prvProcessReceivedCommands+0x114>
 8013130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013134:	f383 8811 	msr	BASEPRI, r3
 8013138:	f3bf 8f6f 	isb	sy
 801313c:	f3bf 8f4f 	dsb	sy
 8013140:	617b      	str	r3, [r7, #20]
 8013142:	e7fe      	b.n	8013142 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013146:	699a      	ldr	r2, [r3, #24]
 8013148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314a:	18d1      	adds	r1, r2, r3
 801314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013152:	f7ff ff2b 	bl	8012fac <prvInsertTimerInActiveList>
					break;
 8013156:	e009      	b.n	801316c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801315a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801315e:	2b00      	cmp	r3, #0
 8013160:	d104      	bne.n	801316c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8013162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013164:	f7fc fdaa 	bl	800fcbc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013168:	e000      	b.n	801316c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801316a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801316c:	4b07      	ldr	r3, [pc, #28]	; (801318c <prvProcessReceivedCommands+0x15c>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	1d39      	adds	r1, r7, #4
 8013172:	2200      	movs	r2, #0
 8013174:	4618      	mov	r0, r3
 8013176:	f7fd fdf5 	bl	8010d64 <xQueueReceive>
 801317a:	4603      	mov	r3, r0
 801317c:	2b00      	cmp	r3, #0
 801317e:	f47f af5b 	bne.w	8013038 <prvProcessReceivedCommands+0x8>
	}
}
 8013182:	bf00      	nop
 8013184:	3730      	adds	r7, #48	; 0x30
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	bf00      	nop
 801318c:	200272f0 	.word	0x200272f0

08013190 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b088      	sub	sp, #32
 8013194:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013196:	e044      	b.n	8013222 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013198:	4b2b      	ldr	r3, [pc, #172]	; (8013248 <prvSwitchTimerLists+0xb8>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	68db      	ldr	r3, [r3, #12]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80131a2:	4b29      	ldr	r3, [pc, #164]	; (8013248 <prvSwitchTimerLists+0xb8>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	68db      	ldr	r3, [r3, #12]
 80131a8:	68db      	ldr	r3, [r3, #12]
 80131aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	3304      	adds	r3, #4
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7fc ff23 	bl	800fffc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ba:	68f8      	ldr	r0, [r7, #12]
 80131bc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	69db      	ldr	r3, [r3, #28]
 80131c2:	2b01      	cmp	r3, #1
 80131c4:	d12d      	bne.n	8013222 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	699b      	ldr	r3, [r3, #24]
 80131ca:	693a      	ldr	r2, [r7, #16]
 80131cc:	4413      	add	r3, r2
 80131ce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80131d0:	68ba      	ldr	r2, [r7, #8]
 80131d2:	693b      	ldr	r3, [r7, #16]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d90e      	bls.n	80131f6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	68ba      	ldr	r2, [r7, #8]
 80131dc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	68fa      	ldr	r2, [r7, #12]
 80131e2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80131e4:	4b18      	ldr	r3, [pc, #96]	; (8013248 <prvSwitchTimerLists+0xb8>)
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	3304      	adds	r3, #4
 80131ec:	4619      	mov	r1, r3
 80131ee:	4610      	mov	r0, r2
 80131f0:	f7fc fecb 	bl	800ff8a <vListInsert>
 80131f4:	e015      	b.n	8013222 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80131f6:	2300      	movs	r3, #0
 80131f8:	9300      	str	r3, [sp, #0]
 80131fa:	2300      	movs	r3, #0
 80131fc:	693a      	ldr	r2, [r7, #16]
 80131fe:	2100      	movs	r1, #0
 8013200:	68f8      	ldr	r0, [r7, #12]
 8013202:	f7ff fda3 	bl	8012d4c <xTimerGenericCommand>
 8013206:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d109      	bne.n	8013222 <prvSwitchTimerLists+0x92>
 801320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013212:	f383 8811 	msr	BASEPRI, r3
 8013216:	f3bf 8f6f 	isb	sy
 801321a:	f3bf 8f4f 	dsb	sy
 801321e:	603b      	str	r3, [r7, #0]
 8013220:	e7fe      	b.n	8013220 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013222:	4b09      	ldr	r3, [pc, #36]	; (8013248 <prvSwitchTimerLists+0xb8>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d1b5      	bne.n	8013198 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801322c:	4b06      	ldr	r3, [pc, #24]	; (8013248 <prvSwitchTimerLists+0xb8>)
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013232:	4b06      	ldr	r3, [pc, #24]	; (801324c <prvSwitchTimerLists+0xbc>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	4a04      	ldr	r2, [pc, #16]	; (8013248 <prvSwitchTimerLists+0xb8>)
 8013238:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801323a:	4a04      	ldr	r2, [pc, #16]	; (801324c <prvSwitchTimerLists+0xbc>)
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	6013      	str	r3, [r2, #0]
}
 8013240:	bf00      	nop
 8013242:	3718      	adds	r7, #24
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}
 8013248:	200272e8 	.word	0x200272e8
 801324c:	200272ec 	.word	0x200272ec

08013250 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013256:	f7fd f821 	bl	801029c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801325a:	4b15      	ldr	r3, [pc, #84]	; (80132b0 <prvCheckForValidListAndQueue+0x60>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d120      	bne.n	80132a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013262:	4814      	ldr	r0, [pc, #80]	; (80132b4 <prvCheckForValidListAndQueue+0x64>)
 8013264:	f7fc fe40 	bl	800fee8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013268:	4813      	ldr	r0, [pc, #76]	; (80132b8 <prvCheckForValidListAndQueue+0x68>)
 801326a:	f7fc fe3d 	bl	800fee8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801326e:	4b13      	ldr	r3, [pc, #76]	; (80132bc <prvCheckForValidListAndQueue+0x6c>)
 8013270:	4a10      	ldr	r2, [pc, #64]	; (80132b4 <prvCheckForValidListAndQueue+0x64>)
 8013272:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013274:	4b12      	ldr	r3, [pc, #72]	; (80132c0 <prvCheckForValidListAndQueue+0x70>)
 8013276:	4a10      	ldr	r2, [pc, #64]	; (80132b8 <prvCheckForValidListAndQueue+0x68>)
 8013278:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801327a:	2300      	movs	r3, #0
 801327c:	9300      	str	r3, [sp, #0]
 801327e:	4b11      	ldr	r3, [pc, #68]	; (80132c4 <prvCheckForValidListAndQueue+0x74>)
 8013280:	4a11      	ldr	r2, [pc, #68]	; (80132c8 <prvCheckForValidListAndQueue+0x78>)
 8013282:	2110      	movs	r1, #16
 8013284:	200a      	movs	r0, #10
 8013286:	f7fd f967 	bl	8010558 <xQueueGenericCreateStatic>
 801328a:	4602      	mov	r2, r0
 801328c:	4b08      	ldr	r3, [pc, #32]	; (80132b0 <prvCheckForValidListAndQueue+0x60>)
 801328e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013290:	4b07      	ldr	r3, [pc, #28]	; (80132b0 <prvCheckForValidListAndQueue+0x60>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d005      	beq.n	80132a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013298:	4b05      	ldr	r3, [pc, #20]	; (80132b0 <prvCheckForValidListAndQueue+0x60>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	490b      	ldr	r1, [pc, #44]	; (80132cc <prvCheckForValidListAndQueue+0x7c>)
 801329e:	4618      	mov	r0, r3
 80132a0:	f7fe f944 	bl	801152c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80132a4:	f7fd f828 	bl	80102f8 <vPortExitCritical>
}
 80132a8:	bf00      	nop
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}
 80132ae:	bf00      	nop
 80132b0:	200272f0 	.word	0x200272f0
 80132b4:	200272c0 	.word	0x200272c0
 80132b8:	200272d4 	.word	0x200272d4
 80132bc:	200272e8 	.word	0x200272e8
 80132c0:	200272ec 	.word	0x200272ec
 80132c4:	2002739c 	.word	0x2002739c
 80132c8:	200272fc 	.word	0x200272fc
 80132cc:	08017aec 	.word	0x08017aec

080132d0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b086      	sub	sp, #24
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d109      	bne.n	80132f6 <xTimerIsTimerActive+0x26>
 80132e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132e6:	f383 8811 	msr	BASEPRI, r3
 80132ea:	f3bf 8f6f 	isb	sy
 80132ee:	f3bf 8f4f 	dsb	sy
 80132f2:	60fb      	str	r3, [r7, #12]
 80132f4:	e7fe      	b.n	80132f4 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80132f6:	f7fc ffd1 	bl	801029c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	695b      	ldr	r3, [r3, #20]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	bf14      	ite	ne
 8013302:	2301      	movne	r3, #1
 8013304:	2300      	moveq	r3, #0
 8013306:	b2db      	uxtb	r3, r3
 8013308:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801330a:	f7fc fff5 	bl	80102f8 <vPortExitCritical>

	return xTimerIsInActiveList;
 801330e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8013310:	4618      	mov	r0, r3
 8013312:	3718      	adds	r7, #24
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b086      	sub	sp, #24
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d109      	bne.n	801333e <pvTimerGetTimerID+0x26>
 801332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801332e:	f383 8811 	msr	BASEPRI, r3
 8013332:	f3bf 8f6f 	isb	sy
 8013336:	f3bf 8f4f 	dsb	sy
 801333a:	60fb      	str	r3, [r7, #12]
 801333c:	e7fe      	b.n	801333c <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 801333e:	f7fc ffad 	bl	801029c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	6a1b      	ldr	r3, [r3, #32]
 8013346:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8013348:	f7fc ffd6 	bl	80102f8 <vPortExitCritical>

	return pvReturn;
 801334c:	693b      	ldr	r3, [r7, #16]
}
 801334e:	4618      	mov	r0, r3
 8013350:	3718      	adds	r7, #24
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}

08013356 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8013356:	b580      	push	{r7, lr}
 8013358:	b084      	sub	sp, #16
 801335a:	af00      	add	r7, sp, #0
 801335c:	6078      	str	r0, [r7, #4]
 801335e:	460b      	mov	r3, r1
 8013360:	70fb      	strb	r3, [r7, #3]
 8013362:	4613      	mov	r3, r2
 8013364:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8013366:	f002 facb 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801336a:	f002 fa67 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 801336e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	2200      	movs	r2, #0
 8013374:	f062 0260 	orn	r2, r2, #96	; 0x60
 8013378:	701a      	strb	r2, [r3, #0]
 801337a:	2200      	movs	r2, #0
 801337c:	705a      	strb	r2, [r3, #1]
 801337e:	2200      	movs	r2, #0
 8013380:	709a      	strb	r2, [r3, #2]
 8013382:	2200      	movs	r2, #0
 8013384:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	2200      	movs	r2, #0
 801338a:	f042 0203 	orr.w	r2, r2, #3
 801338e:	711a      	strb	r2, [r3, #4]
 8013390:	2200      	movs	r2, #0
 8013392:	715a      	strb	r2, [r3, #5]
 8013394:	2200      	movs	r2, #0
 8013396:	719a      	strb	r2, [r3, #6]
 8013398:	2200      	movs	r2, #0
 801339a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801339c:	687a      	ldr	r2, [r7, #4]
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 80133a2:	78fa      	ldrb	r2, [r7, #3]
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 80133a8:	78ba      	ldrb	r2, [r7, #2]
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 80133ae:	f002 fa69 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80133b2:	f002 fa4f 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 80133b6:	60f8      	str	r0, [r7, #12]
}
 80133b8:	bf00      	nop
 80133ba:	3710      	adds	r7, #16
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}

080133c0 <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b086      	sub	sp, #24
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	60f8      	str	r0, [r7, #12]
 80133c8:	60b9      	str	r1, [r7, #8]
 80133ca:	4613      	mov	r3, r2
 80133cc:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 80133ce:	f002 fa97 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80133d2:	f002 fa33 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 80133d6:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	2200      	movs	r2, #0
 80133dc:	f062 025f 	orn	r2, r2, #95	; 0x5f
 80133e0:	701a      	strb	r2, [r3, #0]
 80133e2:	2200      	movs	r2, #0
 80133e4:	705a      	strb	r2, [r3, #1]
 80133e6:	2200      	movs	r2, #0
 80133e8:	709a      	strb	r2, [r3, #2]
 80133ea:	2200      	movs	r2, #0
 80133ec:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	2200      	movs	r2, #0
 80133f2:	f042 0203 	orr.w	r2, r2, #3
 80133f6:	711a      	strb	r2, [r3, #4]
 80133f8:	2200      	movs	r2, #0
 80133fa:	715a      	strb	r2, [r3, #5]
 80133fc:	2200      	movs	r2, #0
 80133fe:	719a      	strb	r2, [r3, #6]
 8013400:	2200      	movs	r2, #0
 8013402:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8013404:	68fa      	ldr	r2, [r7, #12]
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 801340a:	68ba      	ldr	r2, [r7, #8]
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 8013410:	79fa      	ldrb	r2, [r7, #7]
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8013416:	f002 fa35 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801341a:	f002 fa1b 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 801341e:	6178      	str	r0, [r7, #20]
}
 8013420:	bf00      	nop
 8013422:	3718      	adds	r7, #24
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}

08013428 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b084      	sub	sp, #16
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	460b      	mov	r3, r1
 8013432:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8013434:	f002 fa64 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013438:	f002 fa00 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 801343c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	2200      	movs	r2, #0
 8013442:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8013446:	701a      	strb	r2, [r3, #0]
 8013448:	2200      	movs	r2, #0
 801344a:	705a      	strb	r2, [r3, #1]
 801344c:	2200      	movs	r2, #0
 801344e:	709a      	strb	r2, [r3, #2]
 8013450:	2200      	movs	r2, #0
 8013452:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2200      	movs	r2, #0
 8013458:	f042 0202 	orr.w	r2, r2, #2
 801345c:	711a      	strb	r2, [r3, #4]
 801345e:	2200      	movs	r2, #0
 8013460:	715a      	strb	r2, [r3, #5]
 8013462:	2200      	movs	r2, #0
 8013464:	719a      	strb	r2, [r3, #6]
 8013466:	2200      	movs	r2, #0
 8013468:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8013470:	78fa      	ldrb	r2, [r7, #3]
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8013476:	f002 fa05 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801347a:	f002 f9eb 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 801347e:	60f8      	str	r0, [r7, #12]
}
 8013480:	bf00      	nop
 8013482:	3710      	adds	r7, #16
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}

08013488 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b084      	sub	sp, #16
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	460b      	mov	r3, r1
 8013492:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8013494:	f002 fa34 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013498:	f002 f9d0 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 801349c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	2200      	movs	r2, #0
 80134a2:	f062 025d 	orn	r2, r2, #93	; 0x5d
 80134a6:	701a      	strb	r2, [r3, #0]
 80134a8:	2200      	movs	r2, #0
 80134aa:	705a      	strb	r2, [r3, #1]
 80134ac:	2200      	movs	r2, #0
 80134ae:	709a      	strb	r2, [r3, #2]
 80134b0:	2200      	movs	r2, #0
 80134b2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	2200      	movs	r2, #0
 80134b8:	f042 0202 	orr.w	r2, r2, #2
 80134bc:	711a      	strb	r2, [r3, #4]
 80134be:	2200      	movs	r2, #0
 80134c0:	715a      	strb	r2, [r3, #5]
 80134c2:	2200      	movs	r2, #0
 80134c4:	719a      	strb	r2, [r3, #6]
 80134c6:	2200      	movs	r2, #0
 80134c8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80134ca:	687a      	ldr	r2, [r7, #4]
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 80134d0:	78fa      	ldrb	r2, [r7, #3]
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80134d6:	f002 f9d5 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80134da:	f002 f9bb 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 80134de:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	689b      	ldr	r3, [r3, #8]
 80134e4:	b2db      	uxtb	r3, r3
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3710      	adds	r7, #16
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}

080134ee <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 80134ee:	b580      	push	{r7, lr}
 80134f0:	b084      	sub	sp, #16
 80134f2:	af00      	add	r7, sp, #0
 80134f4:	6078      	str	r0, [r7, #4]
 80134f6:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 80134f8:	f002 fa02 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80134fc:	f002 f99e 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013500:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	2200      	movs	r2, #0
 8013506:	f062 0250 	orn	r2, r2, #80	; 0x50
 801350a:	701a      	strb	r2, [r3, #0]
 801350c:	2200      	movs	r2, #0
 801350e:	705a      	strb	r2, [r3, #1]
 8013510:	2200      	movs	r2, #0
 8013512:	709a      	strb	r2, [r3, #2]
 8013514:	2200      	movs	r2, #0
 8013516:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2200      	movs	r2, #0
 801351c:	f042 0202 	orr.w	r2, r2, #2
 8013520:	711a      	strb	r2, [r3, #4]
 8013522:	2200      	movs	r2, #0
 8013524:	715a      	strb	r2, [r3, #5]
 8013526:	2200      	movs	r2, #0
 8013528:	719a      	strb	r2, [r3, #6]
 801352a:	2200      	movs	r2, #0
 801352c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8013534:	683a      	ldr	r2, [r7, #0]
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 801353a:	f002 f9a3 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801353e:	f002 f989 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013542:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	689b      	ldr	r3, [r3, #8]
 8013548:	b2db      	uxtb	r3, r3
}
 801354a:	4618      	mov	r0, r3
 801354c:	3710      	adds	r7, #16
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}

08013552 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8013552:	b580      	push	{r7, lr}
 8013554:	b084      	sub	sp, #16
 8013556:	af00      	add	r7, sp, #0
 8013558:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801355a:	f002 f9d1 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801355e:	f002 f96d 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013562:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	2200      	movs	r2, #0
 8013568:	f062 024d 	orn	r2, r2, #77	; 0x4d
 801356c:	701a      	strb	r2, [r3, #0]
 801356e:	2200      	movs	r2, #0
 8013570:	705a      	strb	r2, [r3, #1]
 8013572:	2200      	movs	r2, #0
 8013574:	709a      	strb	r2, [r3, #2]
 8013576:	2200      	movs	r2, #0
 8013578:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2200      	movs	r2, #0
 801357e:	f042 0201 	orr.w	r2, r2, #1
 8013582:	711a      	strb	r2, [r3, #4]
 8013584:	2200      	movs	r2, #0
 8013586:	715a      	strb	r2, [r3, #5]
 8013588:	2200      	movs	r2, #0
 801358a:	719a      	strb	r2, [r3, #6]
 801358c:	2200      	movs	r2, #0
 801358e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8013590:	687a      	ldr	r2, [r7, #4]
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013596:	f002 f975 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801359a:	f002 f95b 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 801359e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	689b      	ldr	r3, [r3, #8]
 80135a4:	b2db      	uxtb	r3, r3
}
 80135a6:	4618      	mov	r0, r3
 80135a8:	3710      	adds	r7, #16
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bd80      	pop	{r7, pc}

080135ae <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 80135ae:	b580      	push	{r7, lr}
 80135b0:	b084      	sub	sp, #16
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	6078      	str	r0, [r7, #4]
 80135b6:	460b      	mov	r3, r1
 80135b8:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 80135ba:	f002 f9a1 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80135be:	f002 f93d 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 80135c2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	2200      	movs	r2, #0
 80135c8:	f062 0256 	orn	r2, r2, #86	; 0x56
 80135cc:	701a      	strb	r2, [r3, #0]
 80135ce:	2200      	movs	r2, #0
 80135d0:	705a      	strb	r2, [r3, #1]
 80135d2:	2200      	movs	r2, #0
 80135d4:	709a      	strb	r2, [r3, #2]
 80135d6:	2200      	movs	r2, #0
 80135d8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2200      	movs	r2, #0
 80135de:	f042 0202 	orr.w	r2, r2, #2
 80135e2:	711a      	strb	r2, [r3, #4]
 80135e4:	2200      	movs	r2, #0
 80135e6:	715a      	strb	r2, [r3, #5]
 80135e8:	2200      	movs	r2, #0
 80135ea:	719a      	strb	r2, [r3, #6]
 80135ec:	2200      	movs	r2, #0
 80135ee:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80135f0:	687a      	ldr	r2, [r7, #4]
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 80135f6:	887a      	ldrh	r2, [r7, #2]
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80135fc:	f002 f942 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013600:	f002 f928 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013604:	60f8      	str	r0, [r7, #12]
}
 8013606:	bf00      	nop
 8013608:	3710      	adds	r7, #16
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}

0801360e <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 801360e:	b580      	push	{r7, lr}
 8013610:	b084      	sub	sp, #16
 8013612:	af00      	add	r7, sp, #0
 8013614:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013616:	f002 f973 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801361a:	f002 f90f 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 801361e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	2200      	movs	r2, #0
 8013624:	f062 0261 	orn	r2, r2, #97	; 0x61
 8013628:	701a      	strb	r2, [r3, #0]
 801362a:	2200      	movs	r2, #0
 801362c:	705a      	strb	r2, [r3, #1]
 801362e:	2200      	movs	r2, #0
 8013630:	709a      	strb	r2, [r3, #2]
 8013632:	2200      	movs	r2, #0
 8013634:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2200      	movs	r2, #0
 801363a:	f042 0201 	orr.w	r2, r2, #1
 801363e:	711a      	strb	r2, [r3, #4]
 8013640:	2200      	movs	r2, #0
 8013642:	715a      	strb	r2, [r3, #5]
 8013644:	2200      	movs	r2, #0
 8013646:	719a      	strb	r2, [r3, #6]
 8013648:	2200      	movs	r2, #0
 801364a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013652:	f002 f917 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013656:	f002 f8fd 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 801365a:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	689b      	ldr	r3, [r3, #8]
 8013660:	b2db      	uxtb	r3, r3
}
 8013662:	4618      	mov	r0, r3
 8013664:	3710      	adds	r7, #16
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}

0801366a <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 801366a:	b580      	push	{r7, lr}
 801366c:	b084      	sub	sp, #16
 801366e:	af00      	add	r7, sp, #0
 8013670:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013672:	f002 f945 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013676:	f002 f8e1 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 801367a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	2200      	movs	r2, #0
 8013680:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8013684:	701a      	strb	r2, [r3, #0]
 8013686:	2200      	movs	r2, #0
 8013688:	705a      	strb	r2, [r3, #1]
 801368a:	2200      	movs	r2, #0
 801368c:	709a      	strb	r2, [r3, #2]
 801368e:	2200      	movs	r2, #0
 8013690:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2200      	movs	r2, #0
 8013696:	f042 0201 	orr.w	r2, r2, #1
 801369a:	711a      	strb	r2, [r3, #4]
 801369c:	2200      	movs	r2, #0
 801369e:	715a      	strb	r2, [r3, #5]
 80136a0:	2200      	movs	r2, #0
 80136a2:	719a      	strb	r2, [r3, #6]
 80136a4:	2200      	movs	r2, #0
 80136a6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80136a8:	687a      	ldr	r2, [r7, #4]
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80136ae:	f002 f8e9 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80136b2:	f002 f8cf 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 80136b6:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	689b      	ldr	r3, [r3, #8]
 80136bc:	b2db      	uxtb	r3, r3
}
 80136be:	4618      	mov	r0, r3
 80136c0:	3710      	adds	r7, #16
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}

080136c6 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 80136c6:	b580      	push	{r7, lr}
 80136c8:	b084      	sub	sp, #16
 80136ca:	af00      	add	r7, sp, #0
 80136cc:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80136ce:	f002 f917 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80136d2:	f002 f8b3 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 80136d6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	2200      	movs	r2, #0
 80136dc:	f062 0255 	orn	r2, r2, #85	; 0x55
 80136e0:	701a      	strb	r2, [r3, #0]
 80136e2:	2200      	movs	r2, #0
 80136e4:	705a      	strb	r2, [r3, #1]
 80136e6:	2200      	movs	r2, #0
 80136e8:	709a      	strb	r2, [r3, #2]
 80136ea:	2200      	movs	r2, #0
 80136ec:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2200      	movs	r2, #0
 80136f2:	f042 0201 	orr.w	r2, r2, #1
 80136f6:	711a      	strb	r2, [r3, #4]
 80136f8:	2200      	movs	r2, #0
 80136fa:	715a      	strb	r2, [r3, #5]
 80136fc:	2200      	movs	r2, #0
 80136fe:	719a      	strb	r2, [r3, #6]
 8013700:	2200      	movs	r2, #0
 8013702:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801370a:	f002 f8bb 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801370e:	f002 f8a1 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013712:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	689b      	ldr	r3, [r3, #8]
 8013718:	b29b      	uxth	r3, r3
}
 801371a:	4618      	mov	r0, r3
 801371c:	3710      	adds	r7, #16
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}

08013722 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 8013722:	b580      	push	{r7, lr}
 8013724:	b084      	sub	sp, #16
 8013726:	af00      	add	r7, sp, #0
 8013728:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801372a:	f002 f8e9 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801372e:	f002 f885 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013732:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	2200      	movs	r2, #0
 8013738:	f062 0254 	orn	r2, r2, #84	; 0x54
 801373c:	701a      	strb	r2, [r3, #0]
 801373e:	2200      	movs	r2, #0
 8013740:	705a      	strb	r2, [r3, #1]
 8013742:	2200      	movs	r2, #0
 8013744:	709a      	strb	r2, [r3, #2]
 8013746:	2200      	movs	r2, #0
 8013748:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	2200      	movs	r2, #0
 801374e:	f042 0201 	orr.w	r2, r2, #1
 8013752:	711a      	strb	r2, [r3, #4]
 8013754:	2200      	movs	r2, #0
 8013756:	715a      	strb	r2, [r3, #5]
 8013758:	2200      	movs	r2, #0
 801375a:	719a      	strb	r2, [r3, #6]
 801375c:	2200      	movs	r2, #0
 801375e:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 8013760:	687a      	ldr	r2, [r7, #4]
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013766:	f002 f88d 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801376a:	f002 f873 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 801376e:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	689b      	ldr	r3, [r3, #8]
 8013774:	b2db      	uxtb	r3, r3
}
 8013776:	4618      	mov	r0, r3
 8013778:	3710      	adds	r7, #16
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}

0801377e <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 801377e:	b580      	push	{r7, lr}
 8013780:	b084      	sub	sp, #16
 8013782:	af00      	add	r7, sp, #0
 8013784:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013786:	f002 f8bb 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801378a:	f002 f857 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 801378e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	2200      	movs	r2, #0
 8013794:	f062 0253 	orn	r2, r2, #83	; 0x53
 8013798:	701a      	strb	r2, [r3, #0]
 801379a:	2200      	movs	r2, #0
 801379c:	705a      	strb	r2, [r3, #1]
 801379e:	2200      	movs	r2, #0
 80137a0:	709a      	strb	r2, [r3, #2]
 80137a2:	2200      	movs	r2, #0
 80137a4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	2200      	movs	r2, #0
 80137aa:	f042 0201 	orr.w	r2, r2, #1
 80137ae:	711a      	strb	r2, [r3, #4]
 80137b0:	2200      	movs	r2, #0
 80137b2:	715a      	strb	r2, [r3, #5]
 80137b4:	2200      	movs	r2, #0
 80137b6:	719a      	strb	r2, [r3, #6]
 80137b8:	2200      	movs	r2, #0
 80137ba:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80137bc:	687a      	ldr	r2, [r7, #4]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80137c2:	f002 f85f 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80137c6:	f002 f845 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 80137ca:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	689b      	ldr	r3, [r3, #8]
}
 80137d0:	4618      	mov	r0, r3
 80137d2:	3710      	adds	r7, #16
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}

080137d8 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 80137e2:	f002 f88d 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80137e6:	f002 f829 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 80137ea:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	2200      	movs	r2, #0
 80137f0:	f062 0259 	orn	r2, r2, #89	; 0x59
 80137f4:	701a      	strb	r2, [r3, #0]
 80137f6:	2200      	movs	r2, #0
 80137f8:	705a      	strb	r2, [r3, #1]
 80137fa:	2200      	movs	r2, #0
 80137fc:	709a      	strb	r2, [r3, #2]
 80137fe:	2200      	movs	r2, #0
 8013800:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	2200      	movs	r2, #0
 8013806:	f042 0201 	orr.w	r2, r2, #1
 801380a:	711a      	strb	r2, [r3, #4]
 801380c:	2200      	movs	r2, #0
 801380e:	715a      	strb	r2, [r3, #5]
 8013810:	2200      	movs	r2, #0
 8013812:	719a      	strb	r2, [r3, #6]
 8013814:	2200      	movs	r2, #0
 8013816:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8013818:	683a      	ldr	r2, [r7, #0]
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801381e:	f002 f831 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013822:	f002 f817 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013826:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	689b      	ldr	r3, [r3, #8]

}
 801382c:	4618      	mov	r0, r3
 801382e:	3710      	adds	r7, #16
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}

08013834 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b086      	sub	sp, #24
 8013838:	af00      	add	r7, sp, #0
 801383a:	60f8      	str	r0, [r7, #12]
 801383c:	60b9      	str	r1, [r7, #8]
 801383e:	607a      	str	r2, [r7, #4]
 8013840:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 8013842:	f002 f85d 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013846:	f001 fff9 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 801384a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	2200      	movs	r2, #0
 8013850:	f062 0258 	orn	r2, r2, #88	; 0x58
 8013854:	701a      	strb	r2, [r3, #0]
 8013856:	2200      	movs	r2, #0
 8013858:	705a      	strb	r2, [r3, #1]
 801385a:	2200      	movs	r2, #0
 801385c:	709a      	strb	r2, [r3, #2]
 801385e:	2200      	movs	r2, #0
 8013860:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	2200      	movs	r2, #0
 8013866:	f042 0203 	orr.w	r2, r2, #3
 801386a:	711a      	strb	r2, [r3, #4]
 801386c:	2200      	movs	r2, #0
 801386e:	715a      	strb	r2, [r3, #5]
 8013870:	2200      	movs	r2, #0
 8013872:	719a      	strb	r2, [r3, #6]
 8013874:	2200      	movs	r2, #0
 8013876:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013878:	68ba      	ldr	r2, [r7, #8]
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 801387e:	687a      	ldr	r2, [r7, #4]
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8013884:	683a      	ldr	r2, [r7, #0]
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 801388a:	6a3a      	ldr	r2, [r7, #32]
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8013890:	f001 fff8 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013894:	f001 ffde 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013898:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	689b      	ldr	r3, [r3, #8]
 801389e:	b2db      	uxtb	r3, r3
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	3718      	adds	r7, #24
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}

080138a8 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b084      	sub	sp, #16
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	460b      	mov	r3, r1
 80138b2:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 80138b4:	f002 f824 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80138b8:	f001 ffc0 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 80138bc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	2200      	movs	r2, #0
 80138c2:	f062 024b 	orn	r2, r2, #75	; 0x4b
 80138c6:	701a      	strb	r2, [r3, #0]
 80138c8:	2200      	movs	r2, #0
 80138ca:	705a      	strb	r2, [r3, #1]
 80138cc:	2200      	movs	r2, #0
 80138ce:	709a      	strb	r2, [r3, #2]
 80138d0:	2200      	movs	r2, #0
 80138d2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	2200      	movs	r2, #0
 80138d8:	f042 0201 	orr.w	r2, r2, #1
 80138dc:	711a      	strb	r2, [r3, #4]
 80138de:	2200      	movs	r2, #0
 80138e0:	715a      	strb	r2, [r3, #5]
 80138e2:	2200      	movs	r2, #0
 80138e4:	719a      	strb	r2, [r3, #6]
 80138e6:	2200      	movs	r2, #0
 80138e8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 80138ea:	887a      	ldrh	r2, [r7, #2]
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80138f0:	f001 ffc8 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80138f4:	f001 ffae 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 80138f8:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	689b      	ldr	r3, [r3, #8]
 80138fe:	b2db      	uxtb	r3, r3
}
 8013900:	4618      	mov	r0, r3
 8013902:	3710      	adds	r7, #16
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}

08013908 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b084      	sub	sp, #16
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8013912:	f001 fff5 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013916:	f001 ff91 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 801391a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	2200      	movs	r2, #0
 8013920:	f062 0249 	orn	r2, r2, #73	; 0x49
 8013924:	701a      	strb	r2, [r3, #0]
 8013926:	2200      	movs	r2, #0
 8013928:	705a      	strb	r2, [r3, #1]
 801392a:	2200      	movs	r2, #0
 801392c:	709a      	strb	r2, [r3, #2]
 801392e:	2200      	movs	r2, #0
 8013930:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	2200      	movs	r2, #0
 8013936:	f042 0201 	orr.w	r2, r2, #1
 801393a:	711a      	strb	r2, [r3, #4]
 801393c:	2200      	movs	r2, #0
 801393e:	715a      	strb	r2, [r3, #5]
 8013940:	2200      	movs	r2, #0
 8013942:	719a      	strb	r2, [r3, #6]
 8013944:	2200      	movs	r2, #0
 8013946:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8013948:	683a      	ldr	r2, [r7, #0]
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801394e:	f001 ff99 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013952:	f001 ff7f 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013956:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	689b      	ldr	r3, [r3, #8]
 801395c:	b2db      	uxtb	r3, r3
}
 801395e:	4618      	mov	r0, r3
 8013960:	3710      	adds	r7, #16
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}

08013966 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8013966:	b580      	push	{r7, lr}
 8013968:	b086      	sub	sp, #24
 801396a:	af00      	add	r7, sp, #0
 801396c:	60f8      	str	r0, [r7, #12]
 801396e:	60b9      	str	r1, [r7, #8]
 8013970:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8013972:	f001 ffc5 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013976:	f001 ff61 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 801397a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	2200      	movs	r2, #0
 8013980:	f062 0257 	orn	r2, r2, #87	; 0x57
 8013984:	701a      	strb	r2, [r3, #0]
 8013986:	2200      	movs	r2, #0
 8013988:	705a      	strb	r2, [r3, #1]
 801398a:	2200      	movs	r2, #0
 801398c:	709a      	strb	r2, [r3, #2]
 801398e:	2200      	movs	r2, #0
 8013990:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	2200      	movs	r2, #0
 8013996:	f042 0202 	orr.w	r2, r2, #2
 801399a:	711a      	strb	r2, [r3, #4]
 801399c:	2200      	movs	r2, #0
 801399e:	715a      	strb	r2, [r3, #5]
 80139a0:	2200      	movs	r2, #0
 80139a2:	719a      	strb	r2, [r3, #6]
 80139a4:	2200      	movs	r2, #0
 80139a6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80139a8:	68ba      	ldr	r2, [r7, #8]
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80139b4:	f001 ff66 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80139b8:	f001 ff4c 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 80139bc:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80139be:	697b      	ldr	r3, [r7, #20]
 80139c0:	689b      	ldr	r3, [r3, #8]
 80139c2:	b2db      	uxtb	r3, r3
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3718      	adds	r7, #24
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 80139d2:	f001 ff95 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80139d6:	f001 ff31 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 80139da:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2200      	movs	r2, #0
 80139e0:	f062 026b 	orn	r2, r2, #107	; 0x6b
 80139e4:	701a      	strb	r2, [r3, #0]
 80139e6:	2200      	movs	r2, #0
 80139e8:	705a      	strb	r2, [r3, #1]
 80139ea:	2200      	movs	r2, #0
 80139ec:	709a      	strb	r2, [r3, #2]
 80139ee:	2200      	movs	r2, #0
 80139f0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2200      	movs	r2, #0
 80139f6:	711a      	strb	r2, [r3, #4]
 80139f8:	2200      	movs	r2, #0
 80139fa:	715a      	strb	r2, [r3, #5]
 80139fc:	2200      	movs	r2, #0
 80139fe:	719a      	strb	r2, [r3, #6]
 8013a00:	2200      	movs	r2, #0
 8013a02:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8013a04:	f001 ff3e 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013a08:	f001 ff24 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013a0c:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	689b      	ldr	r3, [r3, #8]
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3708      	adds	r7, #8
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}

08013a1a <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8013a1a:	b580      	push	{r7, lr}
 8013a1c:	b084      	sub	sp, #16
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013a22:	f001 ff6d 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013a26:	f001 ff09 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013a2a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	f062 0269 	orn	r2, r2, #105	; 0x69
 8013a34:	701a      	strb	r2, [r3, #0]
 8013a36:	2200      	movs	r2, #0
 8013a38:	705a      	strb	r2, [r3, #1]
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	709a      	strb	r2, [r3, #2]
 8013a3e:	2200      	movs	r2, #0
 8013a40:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	2200      	movs	r2, #0
 8013a46:	711a      	strb	r2, [r3, #4]
 8013a48:	2200      	movs	r2, #0
 8013a4a:	715a      	strb	r2, [r3, #5]
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	719a      	strb	r2, [r3, #6]
 8013a50:	2200      	movs	r2, #0
 8013a52:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8013a54:	f001 ff16 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013a58:	f001 fefc 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013a5c:	60f8      	str	r0, [r7, #12]
}
 8013a5e:	bf00      	nop
 8013a60:	3710      	adds	r7, #16
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}
	...

08013a68 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b086      	sub	sp, #24
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	60f8      	str	r0, [r7, #12]
 8013a70:	60b9      	str	r1, [r7, #8]
 8013a72:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8013a74:	f001 ff44 	bl	8015900 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8013a78:	4a15      	ldr	r2, [pc, #84]	; (8013ad0 <otSetStateChangedCallback+0x68>)
 8013a7a:	68bb      	ldr	r3, [r7, #8]
 8013a7c:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013a7e:	f001 fedd 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013a82:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	2200      	movs	r2, #0
 8013a88:	f062 0268 	orn	r2, r2, #104	; 0x68
 8013a8c:	701a      	strb	r2, [r3, #0]
 8013a8e:	2200      	movs	r2, #0
 8013a90:	705a      	strb	r2, [r3, #1]
 8013a92:	2200      	movs	r2, #0
 8013a94:	709a      	strb	r2, [r3, #2]
 8013a96:	2200      	movs	r2, #0
 8013a98:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	f042 0201 	orr.w	r2, r2, #1
 8013aa2:	711a      	strb	r2, [r3, #4]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	715a      	strb	r2, [r3, #5]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	719a      	strb	r2, [r3, #6]
 8013aac:	2200      	movs	r2, #0
 8013aae:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 8013ab0:	687a      	ldr	r2, [r7, #4]
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013ab6:	f001 fee5 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013aba:	f001 fecb 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013abe:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	689b      	ldr	r3, [r3, #8]
 8013ac4:	b2db      	uxtb	r3, r3
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3718      	adds	r7, #24
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	200273ec 	.word	0x200273ec

08013ad4 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b084      	sub	sp, #16
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013adc:	f001 ff10 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013ae0:	f001 feac 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013ae4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	f062 0264 	orn	r2, r2, #100	; 0x64
 8013aee:	701a      	strb	r2, [r3, #0]
 8013af0:	2200      	movs	r2, #0
 8013af2:	705a      	strb	r2, [r3, #1]
 8013af4:	2200      	movs	r2, #0
 8013af6:	709a      	strb	r2, [r3, #2]
 8013af8:	2200      	movs	r2, #0
 8013afa:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2200      	movs	r2, #0
 8013b00:	711a      	strb	r2, [r3, #4]
 8013b02:	2200      	movs	r2, #0
 8013b04:	715a      	strb	r2, [r3, #5]
 8013b06:	2200      	movs	r2, #0
 8013b08:	719a      	strb	r2, [r3, #6]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8013b0e:	f001 feb9 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013b12:	f001 fe9f 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013b16:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	689b      	ldr	r3, [r3, #8]
 8013b1c:	b2db      	uxtb	r3, r3
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3710      	adds	r7, #16
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}

08013b26 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8013b26:	b580      	push	{r7, lr}
 8013b28:	b084      	sub	sp, #16
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	6078      	str	r0, [r7, #4]
 8013b2e:	460b      	mov	r3, r1
 8013b30:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8013b32:	f001 fee5 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013b36:	f001 fe81 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013b3a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	2200      	movs	r2, #0
 8013b40:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8013b44:	701a      	strb	r2, [r3, #0]
 8013b46:	2200      	movs	r2, #0
 8013b48:	705a      	strb	r2, [r3, #1]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	709a      	strb	r2, [r3, #2]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	2200      	movs	r2, #0
 8013b56:	f042 0201 	orr.w	r2, r2, #1
 8013b5a:	711a      	strb	r2, [r3, #4]
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	715a      	strb	r2, [r3, #5]
 8013b60:	2200      	movs	r2, #0
 8013b62:	719a      	strb	r2, [r3, #6]
 8013b64:	2200      	movs	r2, #0
 8013b66:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8013b68:	78fa      	ldrb	r2, [r7, #3]
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013b6e:	f001 fe89 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013b72:	f001 fe6f 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013b76:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	689b      	ldr	r3, [r3, #8]
 8013b7c:	b2db      	uxtb	r3, r3
}
 8013b7e:	4618      	mov	r0, r3
 8013b80:	3710      	adds	r7, #16
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}

08013b86 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 8013b86:	b580      	push	{r7, lr}
 8013b88:	b084      	sub	sp, #16
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013b8e:	f001 feb7 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013b92:	f001 fe53 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013b96:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8013ba0:	701a      	strb	r2, [r3, #0]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	705a      	strb	r2, [r3, #1]
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	709a      	strb	r2, [r3, #2]
 8013baa:	2200      	movs	r2, #0
 8013bac:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	711a      	strb	r2, [r3, #4]
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	715a      	strb	r2, [r3, #5]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	719a      	strb	r2, [r3, #6]
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8013bc0:	f001 fe60 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013bc4:	f001 fe46 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013bc8:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	689b      	ldr	r3, [r3, #8]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	bf14      	ite	ne
 8013bd2:	2301      	movne	r3, #1
 8013bd4:	2300      	moveq	r3, #0
 8013bd6:	b2db      	uxtb	r3, r3
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3710      	adds	r7, #16
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}

08013be0 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b084      	sub	sp, #16
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013be8:	f001 fe8a 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013bec:	f001 fe26 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013bf0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8013bfa:	701a      	strb	r2, [r3, #0]
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	705a      	strb	r2, [r3, #1]
 8013c00:	2200      	movs	r2, #0
 8013c02:	709a      	strb	r2, [r3, #2]
 8013c04:	2200      	movs	r2, #0
 8013c06:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	711a      	strb	r2, [r3, #4]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	715a      	strb	r2, [r3, #5]
 8013c12:	2200      	movs	r2, #0
 8013c14:	719a      	strb	r2, [r3, #6]
 8013c16:	2200      	movs	r2, #0
 8013c18:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8013c1a:	f001 fe33 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013c1e:	f001 fe19 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013c22:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	689b      	ldr	r3, [r3, #8]
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3710      	adds	r7, #16
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}

08013c30 <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b084      	sub	sp, #16
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013c3a:	f001 fe61 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013c3e:	f001 fdfd 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013c42:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	2200      	movs	r2, #0
 8013c48:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8013c4c:	701a      	strb	r2, [r3, #0]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	705a      	strb	r2, [r3, #1]
 8013c52:	2200      	movs	r2, #0
 8013c54:	709a      	strb	r2, [r3, #2]
 8013c56:	2200      	movs	r2, #0
 8013c58:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	f042 0202 	orr.w	r2, r2, #2
 8013c62:	711a      	strb	r2, [r3, #4]
 8013c64:	2200      	movs	r2, #0
 8013c66:	715a      	strb	r2, [r3, #5]
 8013c68:	2200      	movs	r2, #0
 8013c6a:	719a      	strb	r2, [r3, #6]
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 8013c70:	687a      	ldr	r2, [r7, #4]
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 8013c76:	683a      	ldr	r2, [r7, #0]
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8013c7c:	f001 fe02 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013c80:	f001 fde8 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013c84:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	689b      	ldr	r3, [r3, #8]
 8013c8a:	b2db      	uxtb	r3, r3
}
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	3710      	adds	r7, #16
 8013c90:	46bd      	mov	sp, r7
 8013c92:	bd80      	pop	{r7, pc}

08013c94 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b084      	sub	sp, #16
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	460b      	mov	r3, r1
 8013c9e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8013ca0:	f001 fe2e 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013ca4:	f001 fdca 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013ca8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	2200      	movs	r2, #0
 8013cae:	f042 0208 	orr.w	r2, r2, #8
 8013cb2:	701a      	strb	r2, [r3, #0]
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	705a      	strb	r2, [r3, #1]
 8013cb8:	2200      	movs	r2, #0
 8013cba:	709a      	strb	r2, [r3, #2]
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	f042 0201 	orr.w	r2, r2, #1
 8013cc8:	711a      	strb	r2, [r3, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	715a      	strb	r2, [r3, #5]
 8013cce:	2200      	movs	r2, #0
 8013cd0:	719a      	strb	r2, [r3, #6]
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8013cd6:	78fa      	ldrb	r2, [r7, #3]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013cdc:	f001 fdd2 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013ce0:	f001 fdb8 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013ce4:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	689b      	ldr	r3, [r3, #8]
 8013cea:	b2db      	uxtb	r3, r3
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3710      	adds	r7, #16
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}

08013cf4 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b084      	sub	sp, #16
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
 8013cfc:	460b      	mov	r3, r1
 8013cfe:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8013d00:	f001 fdfe 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013d04:	f001 fd9a 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013d08:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	f042 020f 	orr.w	r2, r2, #15
 8013d12:	701a      	strb	r2, [r3, #0]
 8013d14:	2200      	movs	r2, #0
 8013d16:	705a      	strb	r2, [r3, #1]
 8013d18:	2200      	movs	r2, #0
 8013d1a:	709a      	strb	r2, [r3, #2]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	2200      	movs	r2, #0
 8013d24:	f042 0201 	orr.w	r2, r2, #1
 8013d28:	711a      	strb	r2, [r3, #4]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	715a      	strb	r2, [r3, #5]
 8013d2e:	2200      	movs	r2, #0
 8013d30:	719a      	strb	r2, [r3, #6]
 8013d32:	2200      	movs	r2, #0
 8013d34:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8013d36:	887a      	ldrh	r2, [r7, #2]
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013d3c:	f001 fda2 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013d40:	f001 fd88 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013d44:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	689b      	ldr	r3, [r3, #8]
 8013d4a:	b2db      	uxtb	r3, r3
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3710      	adds	r7, #16
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}

08013d54 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013d5c:	f001 fdd0 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013d60:	f001 fd6c 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013d64:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	f062 0246 	orn	r2, r2, #70	; 0x46
 8013d6e:	701a      	strb	r2, [r3, #0]
 8013d70:	2200      	movs	r2, #0
 8013d72:	705a      	strb	r2, [r3, #1]
 8013d74:	2200      	movs	r2, #0
 8013d76:	709a      	strb	r2, [r3, #2]
 8013d78:	2200      	movs	r2, #0
 8013d7a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	2200      	movs	r2, #0
 8013d80:	f042 0201 	orr.w	r2, r2, #1
 8013d84:	711a      	strb	r2, [r3, #4]
 8013d86:	2200      	movs	r2, #0
 8013d88:	715a      	strb	r2, [r3, #5]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	719a      	strb	r2, [r3, #6]
 8013d8e:	2200      	movs	r2, #0
 8013d90:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013d92:	687a      	ldr	r2, [r7, #4]
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013d98:	f001 fd74 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013d9c:	f001 fd5a 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013da0:	60f8      	str	r0, [r7, #12]
}
 8013da2:	bf00      	nop
 8013da4:	3710      	adds	r7, #16
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}

08013daa <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 8013daa:	b580      	push	{r7, lr}
 8013dac:	b084      	sub	sp, #16
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013db2:	f001 fda5 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013db6:	f001 fd41 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013dba:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	f062 0243 	orn	r2, r2, #67	; 0x43
 8013dc4:	701a      	strb	r2, [r3, #0]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	705a      	strb	r2, [r3, #1]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	709a      	strb	r2, [r3, #2]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	f042 0201 	orr.w	r2, r2, #1
 8013dda:	711a      	strb	r2, [r3, #4]
 8013ddc:	2200      	movs	r2, #0
 8013dde:	715a      	strb	r2, [r3, #5]
 8013de0:	2200      	movs	r2, #0
 8013de2:	719a      	strb	r2, [r3, #6]
 8013de4:	2200      	movs	r2, #0
 8013de6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013de8:	687a      	ldr	r2, [r7, #4]
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013dee:	f001 fd49 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013df2:	f001 fd2f 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013df6:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	689b      	ldr	r3, [r3, #8]
 8013dfc:	b29b      	uxth	r3, r3
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3710      	adds	r7, #16
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}

08013e06 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8013e06:	b580      	push	{r7, lr}
 8013e08:	b086      	sub	sp, #24
 8013e0a:	af00      	add	r7, sp, #0
 8013e0c:	60f8      	str	r0, [r7, #12]
 8013e0e:	60b9      	str	r1, [r7, #8]
 8013e10:	4613      	mov	r3, r2
 8013e12:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 8013e14:	f001 fd74 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013e18:	f001 fd10 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013e1c:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f062 023e 	orn	r2, r2, #62	; 0x3e
 8013e26:	701a      	strb	r2, [r3, #0]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	705a      	strb	r2, [r3, #1]
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	709a      	strb	r2, [r3, #2]
 8013e30:	2200      	movs	r2, #0
 8013e32:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	2200      	movs	r2, #0
 8013e38:	f042 0203 	orr.w	r2, r2, #3
 8013e3c:	711a      	strb	r2, [r3, #4]
 8013e3e:	2200      	movs	r2, #0
 8013e40:	715a      	strb	r2, [r3, #5]
 8013e42:	2200      	movs	r2, #0
 8013e44:	719a      	strb	r2, [r3, #6]
 8013e46:	2200      	movs	r2, #0
 8013e48:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013e4a:	68fa      	ldr	r2, [r7, #12]
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 8013e50:	68ba      	ldr	r2, [r7, #8]
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 8013e56:	88fa      	ldrh	r2, [r7, #6]
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8013e5c:	f001 fd12 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013e60:	f001 fcf8 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013e64:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	689b      	ldr	r3, [r3, #8]
 8013e6a:	b2db      	uxtb	r3, r3
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3718      	adds	r7, #24
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b086      	sub	sp, #24
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	60f8      	str	r0, [r7, #12]
 8013e7c:	607a      	str	r2, [r7, #4]
 8013e7e:	461a      	mov	r2, r3
 8013e80:	460b      	mov	r3, r1
 8013e82:	817b      	strh	r3, [r7, #10]
 8013e84:	4613      	mov	r3, r2
 8013e86:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 8013e88:	f001 fd3a 	bl	8015900 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013e8c:	f001 fcd6 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 8013e90:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	2200      	movs	r2, #0
 8013e96:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8013e9a:	701a      	strb	r2, [r3, #0]
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	705a      	strb	r2, [r3, #1]
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	709a      	strb	r2, [r3, #2]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 8013ea8:	697b      	ldr	r3, [r7, #20]
 8013eaa:	2200      	movs	r2, #0
 8013eac:	f042 0204 	orr.w	r2, r2, #4
 8013eb0:	711a      	strb	r2, [r3, #4]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	715a      	strb	r2, [r3, #5]
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	719a      	strb	r2, [r3, #6]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013ebe:	68fa      	ldr	r2, [r7, #12]
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8013ec4:	897a      	ldrh	r2, [r7, #10]
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 8013eca:	687a      	ldr	r2, [r7, #4]
 8013ecc:	697b      	ldr	r3, [r7, #20]
 8013ece:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 8013ed0:	893a      	ldrh	r2, [r7, #8]
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8013ed6:	f001 fcd5 	bl	8015884 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013eda:	f001 fcbb 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013ede:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 8013ee0:	697b      	ldr	r3, [r7, #20]
 8013ee2:	689b      	ldr	r3, [r3, #8]
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3718      	adds	r7, #24
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}

08013eec <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8013eec:	b5b0      	push	{r4, r5, r7, lr}
 8013eee:	b084      	sub	sp, #16
 8013ef0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8013ef6:	f001 fcb9 	bl	801586c <THREAD_Get_NotificationPayloadBuffer>
 8013efa:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 8013efc:	683b      	ldr	r3, [r7, #0]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	3b01      	subs	r3, #1
 8013f02:	2b14      	cmp	r3, #20
 8013f04:	f200 8172 	bhi.w	80141ec <OpenThread_CallBack_Processing+0x300>
 8013f08:	a201      	add	r2, pc, #4	; (adr r2, 8013f10 <OpenThread_CallBack_Processing+0x24>)
 8013f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f0e:	bf00      	nop
 8013f10:	08013f65 	.word	0x08013f65
 8013f14:	08013f81 	.word	0x08013f81
 8013f18:	08013fad 	.word	0x08013fad
 8013f1c:	08013fe1 	.word	0x08013fe1
 8013f20:	08013fed 	.word	0x08013fed
 8013f24:	0801400b 	.word	0x0801400b
 8013f28:	08014029 	.word	0x08014029
 8013f2c:	08014047 	.word	0x08014047
 8013f30:	08014065 	.word	0x08014065
 8013f34:	08014083 	.word	0x08014083
 8013f38:	080140a5 	.word	0x080140a5
 8013f3c:	080140c3 	.word	0x080140c3
 8013f40:	080141ed 	.word	0x080141ed
 8013f44:	080140e9 	.word	0x080140e9
 8013f48:	0801411d 	.word	0x0801411d
 8013f4c:	08014145 	.word	0x08014145
 8013f50:	08014163 	.word	0x08014163
 8013f54:	08014187 	.word	0x08014187
 8013f58:	080141af 	.word	0x080141af
 8013f5c:	080141ed 	.word	0x080141ed
 8013f60:	080141cd 	.word	0x080141cd
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 8013f64:	4ba3      	ldr	r3, [pc, #652]	; (80141f4 <OpenThread_CallBack_Processing+0x308>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	f000 8167 	beq.w	801423c <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 8013f6e:	4ba1      	ldr	r3, [pc, #644]	; (80141f4 <OpenThread_CallBack_Processing+0x308>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	683a      	ldr	r2, [r7, #0]
 8013f74:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 8013f76:	683a      	ldr	r2, [r7, #0]
 8013f78:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 8013f7a:	4611      	mov	r1, r2
 8013f7c:	4798      	blx	r3
        }
        break;
 8013f7e:	e15d      	b.n	801423c <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	689b      	ldr	r3, [r3, #8]
 8013f84:	461a      	mov	r2, r3
 8013f86:	4b9c      	ldr	r3, [pc, #624]	; (80141f8 <OpenThread_CallBack_Processing+0x30c>)
 8013f88:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 8013f8a:	4b9b      	ldr	r3, [pc, #620]	; (80141f8 <OpenThread_CallBack_Processing+0x30c>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	f000 8156 	beq.w	8014240 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013f94:	4b98      	ldr	r3, [pc, #608]	; (80141f8 <OpenThread_CallBack_Processing+0x30c>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	683a      	ldr	r2, [r7, #0]
 8013f9a:	68d2      	ldr	r2, [r2, #12]
 8013f9c:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 8013f9e:	683a      	ldr	r2, [r7, #0]
 8013fa0:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013fa2:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 8013fa4:	683a      	ldr	r2, [r7, #0]
 8013fa6:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013fa8:	4798      	blx	r3
        }
        break;
 8013faa:	e149      	b.n	8014240 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	689b      	ldr	r3, [r3, #8]
 8013fb0:	461a      	mov	r2, r3
 8013fb2:	4b92      	ldr	r3, [pc, #584]	; (80141fc <OpenThread_CallBack_Processing+0x310>)
 8013fb4:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 8013fb6:	4b91      	ldr	r3, [pc, #580]	; (80141fc <OpenThread_CallBack_Processing+0x310>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	f000 8142 	beq.w	8014244 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013fc0:	4b8e      	ldr	r3, [pc, #568]	; (80141fc <OpenThread_CallBack_Processing+0x310>)
 8013fc2:	681c      	ldr	r4, [r3, #0]
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	68db      	ldr	r3, [r3, #12]
 8013fc8:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013fce:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013fd4:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013fda:	b2db      	uxtb	r3, r3
 8013fdc:	47a0      	blx	r4
        }
        break;
 8013fde:	e131      	b.n	8014244 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 8013fe0:	2001      	movs	r0, #1
 8013fe2:	f000 f968 	bl	80142b6 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 8013fe6:	f7f3 f97c 	bl	80072e2 <HAL_NVIC_SystemReset>
        break;
 8013fea:	e14a      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 8013fec:	4b84      	ldr	r3, [pc, #528]	; (8014200 <OpenThread_CallBack_Processing+0x314>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f000 8129 	beq.w	8014248 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8013ff6:	4b82      	ldr	r3, [pc, #520]	; (8014200 <OpenThread_CallBack_Processing+0x314>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	683a      	ldr	r2, [r7, #0]
 8013ffc:	6892      	ldr	r2, [r2, #8]
 8013ffe:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8014000:	683a      	ldr	r2, [r7, #0]
 8014002:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8014004:	4611      	mov	r1, r2
 8014006:	4798      	blx	r3
        }
        break;
 8014008:	e11e      	b.n	8014248 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 801400a:	4b7e      	ldr	r3, [pc, #504]	; (8014204 <OpenThread_CallBack_Processing+0x318>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	2b00      	cmp	r3, #0
 8014010:	f000 811c 	beq.w	801424c <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8014014:	4b7b      	ldr	r3, [pc, #492]	; (8014204 <OpenThread_CallBack_Processing+0x318>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	683a      	ldr	r2, [r7, #0]
 801401a:	6892      	ldr	r2, [r2, #8]
 801401c:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 801401e:	683a      	ldr	r2, [r7, #0]
 8014020:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8014022:	2000      	movs	r0, #0
 8014024:	4798      	blx	r3
        }
        break;
 8014026:	e111      	b.n	801424c <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 8014028:	4b77      	ldr	r3, [pc, #476]	; (8014208 <OpenThread_CallBack_Processing+0x31c>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	2b00      	cmp	r3, #0
 801402e:	f000 810f 	beq.w	8014250 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8014032:	4b75      	ldr	r3, [pc, #468]	; (8014208 <OpenThread_CallBack_Processing+0x31c>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	683a      	ldr	r2, [r7, #0]
 8014038:	6892      	ldr	r2, [r2, #8]
 801403a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 801403c:	683a      	ldr	r2, [r7, #0]
 801403e:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8014040:	4611      	mov	r1, r2
 8014042:	4798      	blx	r3
        }
        break;
 8014044:	e104      	b.n	8014250 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 8014046:	4b71      	ldr	r3, [pc, #452]	; (801420c <OpenThread_CallBack_Processing+0x320>)
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	2b00      	cmp	r3, #0
 801404c:	f000 8102 	beq.w	8014254 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8014050:	4b6e      	ldr	r3, [pc, #440]	; (801420c <OpenThread_CallBack_Processing+0x320>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	683a      	ldr	r2, [r7, #0]
 8014056:	6892      	ldr	r2, [r2, #8]
 8014058:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 801405a:	683a      	ldr	r2, [r7, #0]
 801405c:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 801405e:	4611      	mov	r1, r2
 8014060:	4798      	blx	r3
        }
        break;
 8014062:	e0f7      	b.n	8014254 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 8014064:	4b6a      	ldr	r3, [pc, #424]	; (8014210 <OpenThread_CallBack_Processing+0x324>)
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	2b00      	cmp	r3, #0
 801406a:	f000 80f5 	beq.w	8014258 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801406e:	4b68      	ldr	r3, [pc, #416]	; (8014210 <OpenThread_CallBack_Processing+0x324>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	683a      	ldr	r2, [r7, #0]
 8014074:	6892      	ldr	r2, [r2, #8]
 8014076:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8014078:	683a      	ldr	r2, [r7, #0]
 801407a:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801407c:	4611      	mov	r1, r2
 801407e:	4798      	blx	r3
        }
        break;
 8014080:	e0ea      	b.n	8014258 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8014082:	4b64      	ldr	r3, [pc, #400]	; (8014214 <OpenThread_CallBack_Processing+0x328>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	f000 80e8 	beq.w	801425c <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801408c:	4b61      	ldr	r3, [pc, #388]	; (8014214 <OpenThread_CallBack_Processing+0x328>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	683a      	ldr	r2, [r7, #0]
 8014092:	6892      	ldr	r2, [r2, #8]
 8014094:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8014096:	683a      	ldr	r2, [r7, #0]
 8014098:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801409a:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 801409c:	683a      	ldr	r2, [r7, #0]
 801409e:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 80140a0:	4798      	blx	r3
        }
        break;
 80140a2:	e0db      	b.n	801425c <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 80140a4:	4b5c      	ldr	r3, [pc, #368]	; (8014218 <OpenThread_CallBack_Processing+0x32c>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	f000 80d9 	beq.w	8014260 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 80140ae:	4b5a      	ldr	r3, [pc, #360]	; (8014218 <OpenThread_CallBack_Processing+0x32c>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	683a      	ldr	r2, [r7, #0]
 80140b4:	6892      	ldr	r2, [r2, #8]
 80140b6:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 80140b8:	683a      	ldr	r2, [r7, #0]
 80140ba:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 80140bc:	4611      	mov	r1, r2
 80140be:	4798      	blx	r3
        }
        break;
 80140c0:	e0ce      	b.n	8014260 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 80140c2:	4b56      	ldr	r3, [pc, #344]	; (801421c <OpenThread_CallBack_Processing+0x330>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	f000 80cc 	beq.w	8014264 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80140cc:	4b53      	ldr	r3, [pc, #332]	; (801421c <OpenThread_CallBack_Processing+0x330>)
 80140ce:	681c      	ldr	r4, [r3, #0]
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80140d8:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80140de:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80140e4:	47a0      	blx	r4
        }
        break;
 80140e6:	e0bd      	b.n	8014264 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 80140e8:	4b4d      	ldr	r3, [pc, #308]	; (8014220 <OpenThread_CallBack_Processing+0x334>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	f000 80bb 	beq.w	8014268 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80140f2:	4b4b      	ldr	r3, [pc, #300]	; (8014220 <OpenThread_CallBack_Processing+0x334>)
 80140f4:	681c      	ldr	r4, [r3, #0]
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	689b      	ldr	r3, [r3, #8]
 80140fa:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8014100:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8014106:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8014110:	b2db      	uxtb	r3, r3
 8014112:	9300      	str	r3, [sp, #0]
 8014114:	4613      	mov	r3, r2
 8014116:	462a      	mov	r2, r5
 8014118:	47a0      	blx	r4
        }
        break;
 801411a:	e0a5      	b.n	8014268 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 801411c:	4b41      	ldr	r3, [pc, #260]	; (8014224 <OpenThread_CallBack_Processing+0x338>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	2b00      	cmp	r3, #0
 8014122:	f000 80a3 	beq.w	801426c <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8014126:	4b3f      	ldr	r3, [pc, #252]	; (8014224 <OpenThread_CallBack_Processing+0x338>)
 8014128:	681c      	ldr	r4, [r3, #0]
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	689b      	ldr	r3, [r3, #8]
 801412e:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8014134:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 801413a:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8014140:	47a0      	blx	r4
        }
        break;
 8014142:	e093      	b.n	801426c <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 8014144:	4b38      	ldr	r3, [pc, #224]	; (8014228 <OpenThread_CallBack_Processing+0x33c>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	f000 8091 	beq.w	8014270 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 801414e:	4b36      	ldr	r3, [pc, #216]	; (8014228 <OpenThread_CallBack_Processing+0x33c>)
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	683a      	ldr	r2, [r7, #0]
 8014154:	6892      	ldr	r2, [r2, #8]
 8014156:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8014158:	683a      	ldr	r2, [r7, #0]
 801415a:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 801415c:	4611      	mov	r1, r2
 801415e:	4798      	blx	r3
        }
        break;
 8014160:	e086      	b.n	8014270 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8014162:	4b32      	ldr	r3, [pc, #200]	; (801422c <OpenThread_CallBack_Processing+0x340>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	f000 8084 	beq.w	8014274 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801416c:	4b2f      	ldr	r3, [pc, #188]	; (801422c <OpenThread_CallBack_Processing+0x340>)
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	683a      	ldr	r2, [r7, #0]
 8014172:	6892      	ldr	r2, [r2, #8]
 8014174:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8014176:	683a      	ldr	r2, [r7, #0]
 8014178:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801417a:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 801417c:	683a      	ldr	r2, [r7, #0]
 801417e:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8014180:	b2d2      	uxtb	r2, r2
 8014182:	4798      	blx	r3
        }
        break;
 8014184:	e076      	b.n	8014274 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8014186:	4b2a      	ldr	r3, [pc, #168]	; (8014230 <OpenThread_CallBack_Processing+0x344>)
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d074      	beq.n	8014278 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801418e:	4b28      	ldr	r3, [pc, #160]	; (8014230 <OpenThread_CallBack_Processing+0x344>)
 8014190:	681c      	ldr	r4, [r3, #0]
 8014192:	683b      	ldr	r3, [r7, #0]
 8014194:	689b      	ldr	r3, [r3, #8]
 8014196:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801419c:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80141a2:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80141a8:	b2db      	uxtb	r3, r3
 80141aa:	47a0      	blx	r4
        }
        break;
 80141ac:	e064      	b.n	8014278 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 80141ae:	4b21      	ldr	r3, [pc, #132]	; (8014234 <OpenThread_CallBack_Processing+0x348>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d062      	beq.n	801427c <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80141b6:	4b1f      	ldr	r3, [pc, #124]	; (8014234 <OpenThread_CallBack_Processing+0x348>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	683a      	ldr	r2, [r7, #0]
 80141bc:	6892      	ldr	r2, [r2, #8]
 80141be:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 80141c0:	683a      	ldr	r2, [r7, #0]
 80141c2:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80141c4:	b252      	sxtb	r2, r2
 80141c6:	4611      	mov	r1, r2
 80141c8:	4798      	blx	r3
        }
        break;
 80141ca:	e057      	b.n	801427c <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 80141cc:	4b1a      	ldr	r3, [pc, #104]	; (8014238 <OpenThread_CallBack_Processing+0x34c>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d055      	beq.n	8014280 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 80141d4:	4b18      	ldr	r3, [pc, #96]	; (8014238 <OpenThread_CallBack_Processing+0x34c>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	683a      	ldr	r2, [r7, #0]
 80141da:	6892      	ldr	r2, [r2, #8]
 80141dc:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 80141de:	683a      	ldr	r2, [r7, #0]
 80141e0:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80141e2:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 80141e4:	683a      	ldr	r2, [r7, #0]
 80141e6:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80141e8:	4798      	blx	r3
        }
        break;
 80141ea:	e049      	b.n	8014280 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 80141ec:	2301      	movs	r3, #1
 80141ee:	71fb      	strb	r3, [r7, #7]
        break;
 80141f0:	e047      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
 80141f2:	bf00      	nop
 80141f4:	200273ec 	.word	0x200273ec
 80141f8:	2002742c 	.word	0x2002742c
 80141fc:	20027430 	.word	0x20027430
 8014200:	200273f4 	.word	0x200273f4
 8014204:	200273f0 	.word	0x200273f0
 8014208:	200273f8 	.word	0x200273f8
 801420c:	200273fc 	.word	0x200273fc
 8014210:	20027400 	.word	0x20027400
 8014214:	20027404 	.word	0x20027404
 8014218:	20027408 	.word	0x20027408
 801421c:	2002740c 	.word	0x2002740c
 8014220:	20027410 	.word	0x20027410
 8014224:	20027414 	.word	0x20027414
 8014228:	20027418 	.word	0x20027418
 801422c:	2002741c 	.word	0x2002741c
 8014230:	20027420 	.word	0x20027420
 8014234:	20027424 	.word	0x20027424
 8014238:	20027428 	.word	0x20027428
        break;
 801423c:	bf00      	nop
 801423e:	e020      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014240:	bf00      	nop
 8014242:	e01e      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014244:	bf00      	nop
 8014246:	e01c      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014248:	bf00      	nop
 801424a:	e01a      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 801424c:	bf00      	nop
 801424e:	e018      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014250:	bf00      	nop
 8014252:	e016      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014254:	bf00      	nop
 8014256:	e014      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014258:	bf00      	nop
 801425a:	e012      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 801425c:	bf00      	nop
 801425e:	e010      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014260:	bf00      	nop
 8014262:	e00e      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014264:	bf00      	nop
 8014266:	e00c      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014268:	bf00      	nop
 801426a:	e00a      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 801426c:	bf00      	nop
 801426e:	e008      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014270:	bf00      	nop
 8014272:	e006      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014274:	bf00      	nop
 8014276:	e004      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014278:	bf00      	nop
 801427a:	e002      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 801427c:	bf00      	nop
 801427e:	e000      	b.n	8014282 <OpenThread_CallBack_Processing+0x396>
        break;
 8014280:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8014282:	f000 fcdf 	bl	8014c44 <TL_THREAD_SendAck>
    return status;
 8014286:	79fb      	ldrb	r3, [r7, #7]

}
 8014288:	4618      	mov	r0, r3
 801428a:	3708      	adds	r7, #8
 801428c:	46bd      	mov	sp, r7
 801428e:	bdb0      	pop	{r4, r5, r7, pc}

08014290 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b086      	sub	sp, #24
 8014294:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8014296:	1d3b      	adds	r3, r7, #4
 8014298:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 801429a:	697b      	ldr	r3, [r7, #20]
 801429c:	2200      	movs	r2, #0
 801429e:	2100      	movs	r1, #0
 80142a0:	f64f 4067 	movw	r0, #64615	; 0xfc67
 80142a4:	f000 f914 	bl	80144d0 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	330b      	adds	r3, #11
 80142ac:	78db      	ldrb	r3, [r3, #3]
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3718      	adds	r7, #24
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}

080142b6 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 80142b6:	b580      	push	{r7, lr}
 80142b8:	b088      	sub	sp, #32
 80142ba:	af00      	add	r7, sp, #0
 80142bc:	4603      	mov	r3, r0
 80142be:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80142c0:	f107 030c 	add.w	r3, r7, #12
 80142c4:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 80142c6:	79fb      	ldrb	r3, [r7, #7]
 80142c8:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 80142ca:	f107 020c 	add.w	r2, r7, #12
 80142ce:	69fb      	ldr	r3, [r7, #28]
 80142d0:	2101      	movs	r1, #1
 80142d2:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 80142d6:	f000 f8fb 	bl	80144d0 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80142da:	69fb      	ldr	r3, [r7, #28]
 80142dc:	330b      	adds	r3, #11
 80142de:	78db      	ldrb	r3, [r3, #3]
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3720      	adds	r7, #32
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}

080142e8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80142e8:	b480      	push	{r7}
 80142ea:	b089      	sub	sp, #36	; 0x24
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80142f0:	2300      	movs	r3, #0
 80142f2:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 80142f4:	2300      	movs	r3, #0
 80142f6:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 80142f8:	2300      	movs	r3, #0
 80142fa:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 80142fc:	2300      	movs	r3, #0
 80142fe:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 8014300:	2300      	movs	r3, #0
 8014302:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8014304:	4b3c      	ldr	r3, [pc, #240]	; (80143f8 <SHCI_GetWirelessFwInfo+0x110>)
 8014306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014308:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801430c:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 801430e:	69fb      	ldr	r3, [r7, #28]
 8014310:	009b      	lsls	r3, r3, #2
 8014312:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8014316:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 801431a:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801431c:	69bb      	ldr	r3, [r7, #24]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	691b      	ldr	r3, [r3, #16]
 8014322:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	0e1b      	lsrs	r3, r3, #24
 8014328:	b2da      	uxtb	r2, r3
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801432e:	697b      	ldr	r3, [r7, #20]
 8014330:	0c1b      	lsrs	r3, r3, #16
 8014332:	b2da      	uxtb	r2, r3
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	0a1b      	lsrs	r3, r3, #8
 801433c:	b2da      	uxtb	r2, r3
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	091b      	lsrs	r3, r3, #4
 8014346:	b2db      	uxtb	r3, r3
 8014348:	f003 030f 	and.w	r3, r3, #15
 801434c:	b2da      	uxtb	r2, r3
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8014352:	697b      	ldr	r3, [r7, #20]
 8014354:	b2db      	uxtb	r3, r3
 8014356:	f003 030f 	and.w	r3, r3, #15
 801435a:	b2da      	uxtb	r2, r3
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8014360:	69bb      	ldr	r3, [r7, #24]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	695b      	ldr	r3, [r3, #20]
 8014366:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	0e1b      	lsrs	r3, r3, #24
 801436c:	b2da      	uxtb	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	0c1b      	lsrs	r3, r3, #16
 8014376:	b2da      	uxtb	r2, r3
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	0a1b      	lsrs	r3, r3, #8
 8014380:	b2da      	uxtb	r2, r3
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	b2da      	uxtb	r2, r3
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801438e:	69bb      	ldr	r3, [r7, #24]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	699b      	ldr	r3, [r3, #24]
 8014394:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	b2da      	uxtb	r2, r3
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801439e:	69bb      	ldr	r3, [r7, #24]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	685b      	ldr	r3, [r3, #4]
 80143a4:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	0e1b      	lsrs	r3, r3, #24
 80143aa:	b2da      	uxtb	r2, r3
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80143b0:	697b      	ldr	r3, [r7, #20]
 80143b2:	0c1b      	lsrs	r3, r3, #16
 80143b4:	b2da      	uxtb	r2, r3
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80143ba:	697b      	ldr	r3, [r7, #20]
 80143bc:	0a1b      	lsrs	r3, r3, #8
 80143be:	b2da      	uxtb	r2, r3
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80143c4:	69bb      	ldr	r3, [r7, #24]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	689b      	ldr	r3, [r3, #8]
 80143ca:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	0e1b      	lsrs	r3, r3, #24
 80143d0:	b2da      	uxtb	r2, r3
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	0c1b      	lsrs	r3, r3, #16
 80143da:	b2da      	uxtb	r2, r3
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80143e0:	693b      	ldr	r3, [r7, #16]
 80143e2:	b2da      	uxtb	r2, r3
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80143e8:	2300      	movs	r3, #0
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3724      	adds	r7, #36	; 0x24
 80143ee:	46bd      	mov	sp, r7
 80143f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f4:	4770      	bx	lr
 80143f6:	bf00      	nop
 80143f8:	58004000 	.word	0x58004000

080143fc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b082      	sub	sp, #8
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
 8014404:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	4a08      	ldr	r2, [pc, #32]	; (801442c <shci_init+0x30>)
 801440c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 801440e:	4a08      	ldr	r2, [pc, #32]	; (8014430 <shci_init+0x34>)
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8014414:	4806      	ldr	r0, [pc, #24]	; (8014430 <shci_init+0x34>)
 8014416:	f000 f911 	bl	801463c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	4618      	mov	r0, r3
 8014420:	f000 f894 	bl	801454c <TlInit>

  return;
 8014424:	bf00      	nop
}
 8014426:	3708      	adds	r7, #8
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}
 801442c:	20027454 	.word	0x20027454
 8014430:	20027434 	.word	0x20027434

08014434 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b084      	sub	sp, #16
 8014438:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801443a:	4822      	ldr	r0, [pc, #136]	; (80144c4 <shci_user_evt_proc+0x90>)
 801443c:	f000 f922 	bl	8014684 <LST_is_empty>
 8014440:	4603      	mov	r3, r0
 8014442:	2b00      	cmp	r3, #0
 8014444:	d12b      	bne.n	801449e <shci_user_evt_proc+0x6a>
 8014446:	4b20      	ldr	r3, [pc, #128]	; (80144c8 <shci_user_evt_proc+0x94>)
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d027      	beq.n	801449e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801444e:	f107 030c 	add.w	r3, r7, #12
 8014452:	4619      	mov	r1, r3
 8014454:	481b      	ldr	r0, [pc, #108]	; (80144c4 <shci_user_evt_proc+0x90>)
 8014456:	f000 f99c 	bl	8014792 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801445a:	4b1c      	ldr	r3, [pc, #112]	; (80144cc <shci_user_evt_proc+0x98>)
 801445c:	69db      	ldr	r3, [r3, #28]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d00c      	beq.n	801447c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8014466:	2301      	movs	r3, #1
 8014468:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801446a:	4b18      	ldr	r3, [pc, #96]	; (80144cc <shci_user_evt_proc+0x98>)
 801446c:	69db      	ldr	r3, [r3, #28]
 801446e:	1d3a      	adds	r2, r7, #4
 8014470:	4610      	mov	r0, r2
 8014472:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8014474:	793a      	ldrb	r2, [r7, #4]
 8014476:	4b14      	ldr	r3, [pc, #80]	; (80144c8 <shci_user_evt_proc+0x94>)
 8014478:	701a      	strb	r2, [r3, #0]
 801447a:	e002      	b.n	8014482 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801447c:	4b12      	ldr	r3, [pc, #72]	; (80144c8 <shci_user_evt_proc+0x94>)
 801447e:	2201      	movs	r2, #1
 8014480:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8014482:	4b11      	ldr	r3, [pc, #68]	; (80144c8 <shci_user_evt_proc+0x94>)
 8014484:	781b      	ldrb	r3, [r3, #0]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d004      	beq.n	8014494 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	4618      	mov	r0, r3
 801448e:	f000 fc55 	bl	8014d3c <TL_MM_EvtDone>
 8014492:	e004      	b.n	801449e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	4619      	mov	r1, r3
 8014498:	480a      	ldr	r0, [pc, #40]	; (80144c4 <shci_user_evt_proc+0x90>)
 801449a:	f000 f913 	bl	80146c4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801449e:	4809      	ldr	r0, [pc, #36]	; (80144c4 <shci_user_evt_proc+0x90>)
 80144a0:	f000 f8f0 	bl	8014684 <LST_is_empty>
 80144a4:	4603      	mov	r3, r0
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d107      	bne.n	80144ba <shci_user_evt_proc+0x86>
 80144aa:	4b07      	ldr	r3, [pc, #28]	; (80144c8 <shci_user_evt_proc+0x94>)
 80144ac:	781b      	ldrb	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d003      	beq.n	80144ba <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80144b2:	4804      	ldr	r0, [pc, #16]	; (80144c4 <shci_user_evt_proc+0x90>)
 80144b4:	f7ec fe7e 	bl	80011b4 <shci_notify_asynch_evt>
  }


  return;
 80144b8:	bf00      	nop
 80144ba:	bf00      	nop
}
 80144bc:	3710      	adds	r7, #16
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	200001d4 	.word	0x200001d4
 80144c8:	200001e4 	.word	0x200001e4
 80144cc:	20027434 	.word	0x20027434

080144d0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b084      	sub	sp, #16
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	60ba      	str	r2, [r7, #8]
 80144d8:	607b      	str	r3, [r7, #4]
 80144da:	4603      	mov	r3, r0
 80144dc:	81fb      	strh	r3, [r7, #14]
 80144de:	460b      	mov	r3, r1
 80144e0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80144e2:	2000      	movs	r0, #0
 80144e4:	f000 f864 	bl	80145b0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80144e8:	4b16      	ldr	r3, [pc, #88]	; (8014544 <shci_send+0x74>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	89fa      	ldrh	r2, [r7, #14]
 80144ee:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80144f2:	4b14      	ldr	r3, [pc, #80]	; (8014544 <shci_send+0x74>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	7b7a      	ldrb	r2, [r7, #13]
 80144f8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80144fa:	4b12      	ldr	r3, [pc, #72]	; (8014544 <shci_send+0x74>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	330c      	adds	r3, #12
 8014500:	7b7a      	ldrb	r2, [r7, #13]
 8014502:	68b9      	ldr	r1, [r7, #8]
 8014504:	4618      	mov	r0, r3
 8014506:	f002 f921 	bl	801674c <memcpy>

  shciContext.io.Send(0,0);
 801450a:	4b0f      	ldr	r3, [pc, #60]	; (8014548 <shci_send+0x78>)
 801450c:	691b      	ldr	r3, [r3, #16]
 801450e:	2100      	movs	r1, #0
 8014510:	2000      	movs	r0, #0
 8014512:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8014514:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8014518:	f7ec fe6c 	bl	80011f4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f103 0008 	add.w	r0, r3, #8
 8014522:	4b08      	ldr	r3, [pc, #32]	; (8014544 <shci_send+0x74>)
 8014524:	6819      	ldr	r1, [r3, #0]
 8014526:	4b07      	ldr	r3, [pc, #28]	; (8014544 <shci_send+0x74>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	789b      	ldrb	r3, [r3, #2]
 801452c:	3303      	adds	r3, #3
 801452e:	461a      	mov	r2, r3
 8014530:	f002 f90c 	bl	801674c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8014534:	2001      	movs	r0, #1
 8014536:	f000 f83b 	bl	80145b0 <Cmd_SetStatus>

  return;
 801453a:	bf00      	nop
}
 801453c:	3710      	adds	r7, #16
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}
 8014542:	bf00      	nop
 8014544:	200001e0 	.word	0x200001e0
 8014548:	20027434 	.word	0x20027434

0801454c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b086      	sub	sp, #24
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8014554:	4a10      	ldr	r2, [pc, #64]	; (8014598 <TlInit+0x4c>)
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801455a:	4810      	ldr	r0, [pc, #64]	; (801459c <TlInit+0x50>)
 801455c:	f000 f882 	bl	8014664 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8014560:	2001      	movs	r0, #1
 8014562:	f000 f825 	bl	80145b0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8014566:	4b0e      	ldr	r3, [pc, #56]	; (80145a0 <TlInit+0x54>)
 8014568:	2201      	movs	r2, #1
 801456a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 801456c:	4b0d      	ldr	r3, [pc, #52]	; (80145a4 <TlInit+0x58>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d00c      	beq.n	801458e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8014578:	4b0b      	ldr	r3, [pc, #44]	; (80145a8 <TlInit+0x5c>)
 801457a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 801457c:	4b0b      	ldr	r3, [pc, #44]	; (80145ac <TlInit+0x60>)
 801457e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8014580:	4b08      	ldr	r3, [pc, #32]	; (80145a4 <TlInit+0x58>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	f107 020c 	add.w	r2, r7, #12
 8014588:	4610      	mov	r0, r2
 801458a:	4798      	blx	r3
  }

  return;
 801458c:	bf00      	nop
 801458e:	bf00      	nop
}
 8014590:	3718      	adds	r7, #24
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
 8014596:	bf00      	nop
 8014598:	200001e0 	.word	0x200001e0
 801459c:	200001d4 	.word	0x200001d4
 80145a0:	200001e4 	.word	0x200001e4
 80145a4:	20027434 	.word	0x20027434
 80145a8:	08014601 	.word	0x08014601
 80145ac:	08014619 	.word	0x08014619

080145b0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b082      	sub	sp, #8
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	4603      	mov	r3, r0
 80145b8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80145ba:	79fb      	ldrb	r3, [r7, #7]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d10b      	bne.n	80145d8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80145c0:	4b0d      	ldr	r3, [pc, #52]	; (80145f8 <Cmd_SetStatus+0x48>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d003      	beq.n	80145d0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80145c8:	4b0b      	ldr	r3, [pc, #44]	; (80145f8 <Cmd_SetStatus+0x48>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	2000      	movs	r0, #0
 80145ce:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80145d0:	4b0a      	ldr	r3, [pc, #40]	; (80145fc <Cmd_SetStatus+0x4c>)
 80145d2:	2200      	movs	r2, #0
 80145d4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80145d6:	e00b      	b.n	80145f0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80145d8:	4b08      	ldr	r3, [pc, #32]	; (80145fc <Cmd_SetStatus+0x4c>)
 80145da:	2201      	movs	r2, #1
 80145dc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80145de:	4b06      	ldr	r3, [pc, #24]	; (80145f8 <Cmd_SetStatus+0x48>)
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d004      	beq.n	80145f0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80145e6:	4b04      	ldr	r3, [pc, #16]	; (80145f8 <Cmd_SetStatus+0x48>)
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	2001      	movs	r0, #1
 80145ec:	4798      	blx	r3
  return;
 80145ee:	bf00      	nop
 80145f0:	bf00      	nop
}
 80145f2:	3708      	adds	r7, #8
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}
 80145f8:	20027454 	.word	0x20027454
 80145fc:	200001dc 	.word	0x200001dc

08014600 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b082      	sub	sp, #8
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8014608:	2000      	movs	r0, #0
 801460a:	f7ec fde3 	bl	80011d4 <shci_cmd_resp_release>

  return;
 801460e:	bf00      	nop
}
 8014610:	3708      	adds	r7, #8
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}
	...

08014618 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b082      	sub	sp, #8
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8014620:	6879      	ldr	r1, [r7, #4]
 8014622:	4805      	ldr	r0, [pc, #20]	; (8014638 <TlUserEvtReceived+0x20>)
 8014624:	f000 f872 	bl	801470c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8014628:	4803      	ldr	r0, [pc, #12]	; (8014638 <TlUserEvtReceived+0x20>)
 801462a:	f7ec fdc3 	bl	80011b4 <shci_notify_asynch_evt>

  return;
 801462e:	bf00      	nop
}
 8014630:	3708      	adds	r7, #8
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	200001d4 	.word	0x200001d4

0801463c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 801463c:	b480      	push	{r7}
 801463e:	b083      	sub	sp, #12
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	4a05      	ldr	r2, [pc, #20]	; (801465c <shci_register_io_bus+0x20>)
 8014648:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	4a04      	ldr	r2, [pc, #16]	; (8014660 <shci_register_io_bus+0x24>)
 801464e:	611a      	str	r2, [r3, #16]

  return;
 8014650:	bf00      	nop
}
 8014652:	370c      	adds	r7, #12
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr
 801465c:	08014b01 	.word	0x08014b01
 8014660:	08014b55 	.word	0x08014b55

08014664 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8014664:	b480      	push	{r7}
 8014666:	b083      	sub	sp, #12
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	605a      	str	r2, [r3, #4]
}
 8014678:	bf00      	nop
 801467a:	370c      	adds	r7, #12
 801467c:	46bd      	mov	sp, r7
 801467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014682:	4770      	bx	lr

08014684 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8014684:	b480      	push	{r7}
 8014686:	b087      	sub	sp, #28
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801468c:	f3ef 8310 	mrs	r3, PRIMASK
 8014690:	60fb      	str	r3, [r7, #12]
  return(result);
 8014692:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014694:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014696:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	687a      	ldr	r2, [r7, #4]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d102      	bne.n	80146a8 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 80146a2:	2301      	movs	r3, #1
 80146a4:	75fb      	strb	r3, [r7, #23]
 80146a6:	e001      	b.n	80146ac <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 80146a8:	2300      	movs	r3, #0
 80146aa:	75fb      	strb	r3, [r7, #23]
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80146b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	371c      	adds	r7, #28
 80146bc:	46bd      	mov	sp, r7
 80146be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c2:	4770      	bx	lr

080146c4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80146c4:	b480      	push	{r7}
 80146c6:	b087      	sub	sp, #28
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80146ce:	f3ef 8310 	mrs	r3, PRIMASK
 80146d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80146d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80146d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80146d8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681a      	ldr	r2, [r3, #0]
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80146e2:	683b      	ldr	r3, [r7, #0]
 80146e4:	687a      	ldr	r2, [r7, #4]
 80146e6:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	683a      	ldr	r2, [r7, #0]
 80146ec:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80146ee:	683b      	ldr	r3, [r7, #0]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	683a      	ldr	r2, [r7, #0]
 80146f4:	605a      	str	r2, [r3, #4]
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014700:	bf00      	nop
 8014702:	371c      	adds	r7, #28
 8014704:	46bd      	mov	sp, r7
 8014706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470a:	4770      	bx	lr

0801470c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 801470c:	b480      	push	{r7}
 801470e:	b087      	sub	sp, #28
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014716:	f3ef 8310 	mrs	r3, PRIMASK
 801471a:	60fb      	str	r3, [r7, #12]
  return(result);
 801471c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801471e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014720:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	687a      	ldr	r2, [r7, #4]
 8014726:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	685a      	ldr	r2, [r3, #4]
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	683a      	ldr	r2, [r7, #0]
 8014734:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	685b      	ldr	r3, [r3, #4]
 801473a:	683a      	ldr	r2, [r7, #0]
 801473c:	601a      	str	r2, [r3, #0]
 801473e:	697b      	ldr	r3, [r7, #20]
 8014740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014748:	bf00      	nop
 801474a:	371c      	adds	r7, #28
 801474c:	46bd      	mov	sp, r7
 801474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014752:	4770      	bx	lr

08014754 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8014754:	b480      	push	{r7}
 8014756:	b087      	sub	sp, #28
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801475c:	f3ef 8310 	mrs	r3, PRIMASK
 8014760:	60fb      	str	r3, [r7, #12]
  return(result);
 8014762:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014764:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014766:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	687a      	ldr	r2, [r7, #4]
 801476e:	6812      	ldr	r2, [r2, #0]
 8014770:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	687a      	ldr	r2, [r7, #4]
 8014778:	6852      	ldr	r2, [r2, #4]
 801477a:	605a      	str	r2, [r3, #4]
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014780:	693b      	ldr	r3, [r7, #16]
 8014782:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014786:	bf00      	nop
 8014788:	371c      	adds	r7, #28
 801478a:	46bd      	mov	sp, r7
 801478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014790:	4770      	bx	lr

08014792 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8014792:	b580      	push	{r7, lr}
 8014794:	b086      	sub	sp, #24
 8014796:	af00      	add	r7, sp, #0
 8014798:	6078      	str	r0, [r7, #4]
 801479a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801479c:	f3ef 8310 	mrs	r3, PRIMASK
 80147a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80147a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80147a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80147a6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	681a      	ldr	r2, [r3, #0]
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7ff ffcd 	bl	8014754 <LST_remove_node>
 80147ba:	697b      	ldr	r3, [r7, #20]
 80147bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80147c4:	bf00      	nop
 80147c6:	3718      	adds	r7, #24
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}

080147cc <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b084      	sub	sp, #16
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
 80147d4:	460b      	mov	r3, r1
 80147d6:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80147d8:	f001 f892 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80147dc:	f001 f82e 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 80147e0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	2200      	movs	r2, #0
 80147e6:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 80147ea:	701a      	strb	r2, [r3, #0]
 80147ec:	2200      	movs	r2, #0
 80147ee:	705a      	strb	r2, [r3, #1]
 80147f0:	2200      	movs	r2, #0
 80147f2:	709a      	strb	r2, [r3, #2]
 80147f4:	2200      	movs	r2, #0
 80147f6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	2200      	movs	r2, #0
 80147fc:	f042 0201 	orr.w	r2, r2, #1
 8014800:	711a      	strb	r2, [r3, #4]
 8014802:	2200      	movs	r2, #0
 8014804:	715a      	strb	r2, [r3, #5]
 8014806:	2200      	movs	r2, #0
 8014808:	719a      	strb	r2, [r3, #6]
 801480a:	2200      	movs	r2, #0
 801480c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 801480e:	78fa      	ldrb	r2, [r7, #3]
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8014814:	f001 f836 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014818:	f001 f81c 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 801481c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	689b      	ldr	r3, [r3, #8]
 8014822:	b2db      	uxtb	r3, r3
}
 8014824:	4618      	mov	r0, r3
 8014826:	3710      	adds	r7, #16
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}

0801482c <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b084      	sub	sp, #16
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8014836:	f001 f863 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801483a:	f000 ffff 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 801483e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	2200      	movs	r2, #0
 8014844:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 8014848:	701a      	strb	r2, [r3, #0]
 801484a:	2200      	movs	r2, #0
 801484c:	705a      	strb	r2, [r3, #1]
 801484e:	2200      	movs	r2, #0
 8014850:	709a      	strb	r2, [r3, #2]
 8014852:	2200      	movs	r2, #0
 8014854:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	2200      	movs	r2, #0
 801485a:	f042 0201 	orr.w	r2, r2, #1
 801485e:	711a      	strb	r2, [r3, #4]
 8014860:	2200      	movs	r2, #0
 8014862:	715a      	strb	r2, [r3, #5]
 8014864:	2200      	movs	r2, #0
 8014866:	719a      	strb	r2, [r3, #6]
 8014868:	2200      	movs	r2, #0
 801486a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 801486c:	683a      	ldr	r2, [r7, #0]
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8014872:	f001 f807 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014876:	f000 ffed 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 801487a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	689b      	ldr	r3, [r3, #8]
 8014880:	b2db      	uxtb	r3, r3
}
 8014882:	4618      	mov	r0, r3
 8014884:	3710      	adds	r7, #16
 8014886:	46bd      	mov	sp, r7
 8014888:	bd80      	pop	{r7, pc}

0801488a <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 801488a:	b580      	push	{r7, lr}
 801488c:	b084      	sub	sp, #16
 801488e:	af00      	add	r7, sp, #0
 8014890:	6078      	str	r0, [r7, #4]
 8014892:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8014894:	f001 f834 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014898:	f000 ffd0 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 801489c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	2200      	movs	r2, #0
 80148a2:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80148a6:	701a      	strb	r2, [r3, #0]
 80148a8:	2200      	movs	r2, #0
 80148aa:	705a      	strb	r2, [r3, #1]
 80148ac:	2200      	movs	r2, #0
 80148ae:	709a      	strb	r2, [r3, #2]
 80148b0:	2200      	movs	r2, #0
 80148b2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	2200      	movs	r2, #0
 80148b8:	f042 0201 	orr.w	r2, r2, #1
 80148bc:	711a      	strb	r2, [r3, #4]
 80148be:	2200      	movs	r2, #0
 80148c0:	715a      	strb	r2, [r3, #5]
 80148c2:	2200      	movs	r2, #0
 80148c4:	719a      	strb	r2, [r3, #6]
 80148c6:	2200      	movs	r2, #0
 80148c8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 80148ca:	683a      	ldr	r2, [r7, #0]
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80148d0:	f000 ffd8 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80148d4:	f000 ffbe 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 80148d8:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	689b      	ldr	r3, [r3, #8]
 80148de:	b2db      	uxtb	r3, r3
}
 80148e0:	4618      	mov	r0, r3
 80148e2:	3710      	adds	r7, #16
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}

080148e8 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b084      	sub	sp, #16
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80148f0:	f001 f806 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80148f4:	f000 ffa2 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 80148f8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	2200      	movs	r2, #0
 80148fe:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 8014902:	701a      	strb	r2, [r3, #0]
 8014904:	2200      	movs	r2, #0
 8014906:	705a      	strb	r2, [r3, #1]
 8014908:	2200      	movs	r2, #0
 801490a:	709a      	strb	r2, [r3, #2]
 801490c:	2200      	movs	r2, #0
 801490e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	2200      	movs	r2, #0
 8014914:	711a      	strb	r2, [r3, #4]
 8014916:	2200      	movs	r2, #0
 8014918:	715a      	strb	r2, [r3, #5]
 801491a:	2200      	movs	r2, #0
 801491c:	719a      	strb	r2, [r3, #6]
 801491e:	2200      	movs	r2, #0
 8014920:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8014922:	f000 ffaf 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014926:	f000 ff95 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 801492a:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	689b      	ldr	r3, [r3, #8]
}
 8014930:	4618      	mov	r0, r3
 8014932:	3710      	adds	r7, #16
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}

08014938 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8014942:	f000 ffdd 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014946:	f000 ff79 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 801494a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	2200      	movs	r2, #0
 8014950:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8014954:	701a      	strb	r2, [r3, #0]
 8014956:	2200      	movs	r2, #0
 8014958:	705a      	strb	r2, [r3, #1]
 801495a:	2200      	movs	r2, #0
 801495c:	709a      	strb	r2, [r3, #2]
 801495e:	2200      	movs	r2, #0
 8014960:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	2200      	movs	r2, #0
 8014966:	f042 0201 	orr.w	r2, r2, #1
 801496a:	711a      	strb	r2, [r3, #4]
 801496c:	2200      	movs	r2, #0
 801496e:	715a      	strb	r2, [r3, #5]
 8014970:	2200      	movs	r2, #0
 8014972:	719a      	strb	r2, [r3, #6]
 8014974:	2200      	movs	r2, #0
 8014976:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8014978:	683a      	ldr	r2, [r7, #0]
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801497e:	f000 ff81 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014982:	f000 ff67 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014986:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	689b      	ldr	r3, [r3, #8]
 801498c:	b2db      	uxtb	r3, r3
}
 801498e:	4618      	mov	r0, r3
 8014990:	3710      	adds	r7, #16
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}

08014996 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8014996:	b580      	push	{r7, lr}
 8014998:	b084      	sub	sp, #16
 801499a:	af00      	add	r7, sp, #0
 801499c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801499e:	f000 ffaf 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80149a2:	f000 ff4b 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 80149a6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	2200      	movs	r2, #0
 80149ac:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 80149b0:	701a      	strb	r2, [r3, #0]
 80149b2:	2200      	movs	r2, #0
 80149b4:	705a      	strb	r2, [r3, #1]
 80149b6:	2200      	movs	r2, #0
 80149b8:	709a      	strb	r2, [r3, #2]
 80149ba:	2200      	movs	r2, #0
 80149bc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2200      	movs	r2, #0
 80149c2:	711a      	strb	r2, [r3, #4]
 80149c4:	2200      	movs	r2, #0
 80149c6:	715a      	strb	r2, [r3, #5]
 80149c8:	2200      	movs	r2, #0
 80149ca:	719a      	strb	r2, [r3, #6]
 80149cc:	2200      	movs	r2, #0
 80149ce:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80149d0:	f000 ff58 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80149d4:	f000 ff3e 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 80149d8:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	689b      	ldr	r3, [r3, #8]
 80149de:	b2db      	uxtb	r3, r3
}
 80149e0:	4618      	mov	r0, r3
 80149e2:	3710      	adds	r7, #16
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}

080149e8 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b084      	sub	sp, #16
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80149f0:	f000 ff86 	bl	8015900 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80149f4:	f000 ff22 	bl	801583c <THREAD_Get_OTCmdPayloadBuffer>
 80149f8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	2200      	movs	r2, #0
 80149fe:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014a02:	701a      	strb	r2, [r3, #0]
 8014a04:	2200      	movs	r2, #0
 8014a06:	705a      	strb	r2, [r3, #1]
 8014a08:	2200      	movs	r2, #0
 8014a0a:	709a      	strb	r2, [r3, #2]
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	2200      	movs	r2, #0
 8014a14:	711a      	strb	r2, [r3, #4]
 8014a16:	2200      	movs	r2, #0
 8014a18:	715a      	strb	r2, [r3, #5]
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	719a      	strb	r2, [r3, #6]
 8014a1e:	2200      	movs	r2, #0
 8014a20:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8014a22:	f000 ff2f 	bl	8015884 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014a26:	f000 ff15 	bl	8015854 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014a2a:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	689b      	ldr	r3, [r3, #8]
 8014a30:	b29b      	uxth	r3, r3
}
 8014a32:	4618      	mov	r0, r3
 8014a34:	3710      	adds	r7, #16
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}

08014a3a <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8014a3a:	b580      	push	{r7, lr}
 8014a3c:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8014a3e:	f001 fa35 	bl	8015eac <HW_IPCC_Enable>

  return;
 8014a42:	bf00      	nop
}
 8014a44:	bd80      	pop	{r7, pc}
	...

08014a48 <TL_Init>:


void TL_Init( void )
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8014a4c:	4b0f      	ldr	r3, [pc, #60]	; (8014a8c <TL_Init+0x44>)
 8014a4e:	4a10      	ldr	r2, [pc, #64]	; (8014a90 <TL_Init+0x48>)
 8014a50:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8014a52:	4b0e      	ldr	r3, [pc, #56]	; (8014a8c <TL_Init+0x44>)
 8014a54:	4a0f      	ldr	r2, [pc, #60]	; (8014a94 <TL_Init+0x4c>)
 8014a56:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8014a58:	4b0c      	ldr	r3, [pc, #48]	; (8014a8c <TL_Init+0x44>)
 8014a5a:	4a0f      	ldr	r2, [pc, #60]	; (8014a98 <TL_Init+0x50>)
 8014a5c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8014a5e:	4b0b      	ldr	r3, [pc, #44]	; (8014a8c <TL_Init+0x44>)
 8014a60:	4a0e      	ldr	r2, [pc, #56]	; (8014a9c <TL_Init+0x54>)
 8014a62:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8014a64:	4b09      	ldr	r3, [pc, #36]	; (8014a8c <TL_Init+0x44>)
 8014a66:	4a0e      	ldr	r2, [pc, #56]	; (8014aa0 <TL_Init+0x58>)
 8014a68:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8014a6a:	4b08      	ldr	r3, [pc, #32]	; (8014a8c <TL_Init+0x44>)
 8014a6c:	4a0d      	ldr	r2, [pc, #52]	; (8014aa4 <TL_Init+0x5c>)
 8014a6e:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8014a70:	4b06      	ldr	r3, [pc, #24]	; (8014a8c <TL_Init+0x44>)
 8014a72:	4a0d      	ldr	r2, [pc, #52]	; (8014aa8 <TL_Init+0x60>)
 8014a74:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8014a76:	4b05      	ldr	r3, [pc, #20]	; (8014a8c <TL_Init+0x44>)
 8014a78:	4a0c      	ldr	r2, [pc, #48]	; (8014aac <TL_Init+0x64>)
 8014a7a:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8014a7c:	4b03      	ldr	r3, [pc, #12]	; (8014a8c <TL_Init+0x44>)
 8014a7e:	4a0c      	ldr	r2, [pc, #48]	; (8014ab0 <TL_Init+0x68>)
 8014a80:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8014a82:	f001 fa23 	bl	8015ecc <HW_IPCC_Init>

  return;
 8014a86:	bf00      	nop
}
 8014a88:	bd80      	pop	{r7, pc}
 8014a8a:	bf00      	nop
 8014a8c:	20030000 	.word	0x20030000
 8014a90:	20030024 	.word	0x20030024
 8014a94:	20030044 	.word	0x20030044
 8014a98:	20030054 	.word	0x20030054
 8014a9c:	20030060 	.word	0x20030060
 8014aa0:	20030068 	.word	0x20030068
 8014aa4:	20030070 	.word	0x20030070
 8014aa8:	2003008c 	.word	0x2003008c
 8014aac:	20030090 	.word	0x20030090
 8014ab0:	2003009c 	.word	0x2003009c

08014ab4 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8014aba:	e009      	b.n	8014ad0 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8014abc:	1d3b      	adds	r3, r7, #4
 8014abe:	4619      	mov	r1, r3
 8014ac0:	4808      	ldr	r0, [pc, #32]	; (8014ae4 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8014ac2:	f7ff fe66 	bl	8014792 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8014ac6:	4b08      	ldr	r3, [pc, #32]	; (8014ae8 <HW_IPCC_BLE_RxEvtNot+0x34>)
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	687a      	ldr	r2, [r7, #4]
 8014acc:	4610      	mov	r0, r2
 8014ace:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8014ad0:	4804      	ldr	r0, [pc, #16]	; (8014ae4 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8014ad2:	f7ff fdd7 	bl	8014684 <LST_is_empty>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d0ef      	beq.n	8014abc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8014adc:	bf00      	nop
}
 8014ade:	3708      	adds	r7, #8
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	20030828 	.word	0x20030828
 8014ae8:	20027460 	.word	0x20027460

08014aec <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8014af0:	4b02      	ldr	r3, [pc, #8]	; (8014afc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	4798      	blx	r3

  return;
 8014af6:	bf00      	nop
}
 8014af8:	bd80      	pop	{r7, pc}
 8014afa:	bf00      	nop
 8014afc:	20027464 	.word	0x20027464

08014b00 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b084      	sub	sp, #16
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8014b0c:	480d      	ldr	r0, [pc, #52]	; (8014b44 <TL_SYS_Init+0x44>)
 8014b0e:	f7ff fda9 	bl	8014664 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8014b12:	4b0d      	ldr	r3, [pc, #52]	; (8014b48 <TL_SYS_Init+0x48>)
 8014b14:	68db      	ldr	r3, [r3, #12]
 8014b16:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	689a      	ldr	r2, [r3, #8]
 8014b1c:	68bb      	ldr	r3, [r7, #8]
 8014b1e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	4a08      	ldr	r2, [pc, #32]	; (8014b44 <TL_SYS_Init+0x44>)
 8014b24:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8014b26:	f001 f9ff 	bl	8015f28 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	4a07      	ldr	r2, [pc, #28]	; (8014b4c <TL_SYS_Init+0x4c>)
 8014b30:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	685b      	ldr	r3, [r3, #4]
 8014b36:	4a06      	ldr	r2, [pc, #24]	; (8014b50 <TL_SYS_Init+0x50>)
 8014b38:	6013      	str	r3, [r2, #0]

  return 0;
 8014b3a:	2300      	movs	r3, #0
}
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	3710      	adds	r7, #16
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}
 8014b44:	20030830 	.word	0x20030830
 8014b48:	20030000 	.word	0x20030000
 8014b4c:	20027468 	.word	0x20027468
 8014b50:	2002746c 	.word	0x2002746c

08014b54 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b082      	sub	sp, #8
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
 8014b5c:	460b      	mov	r3, r1
 8014b5e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8014b60:	4b05      	ldr	r3, [pc, #20]	; (8014b78 <TL_SYS_SendCmd+0x24>)
 8014b62:	68db      	ldr	r3, [r3, #12]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	2210      	movs	r2, #16
 8014b68:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 8014b6a:	f001 f9e7 	bl	8015f3c <HW_IPCC_SYS_SendCmd>

  return 0;
 8014b6e:	2300      	movs	r3, #0
}
 8014b70:	4618      	mov	r0, r3
 8014b72:	3708      	adds	r7, #8
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	20030000 	.word	0x20030000

08014b7c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8014b80:	4b04      	ldr	r3, [pc, #16]	; (8014b94 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	4a04      	ldr	r2, [pc, #16]	; (8014b98 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 8014b86:	68d2      	ldr	r2, [r2, #12]
 8014b88:	6812      	ldr	r2, [r2, #0]
 8014b8a:	4610      	mov	r0, r2
 8014b8c:	4798      	blx	r3

  return;
 8014b8e:	bf00      	nop
}
 8014b90:	bd80      	pop	{r7, pc}
 8014b92:	bf00      	nop
 8014b94:	20027468 	.word	0x20027468
 8014b98:	20030000 	.word	0x20030000

08014b9c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b082      	sub	sp, #8
 8014ba0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8014ba2:	e009      	b.n	8014bb8 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8014ba4:	1d3b      	adds	r3, r7, #4
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	4808      	ldr	r0, [pc, #32]	; (8014bcc <HW_IPCC_SYS_EvtNot+0x30>)
 8014baa:	f7ff fdf2 	bl	8014792 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8014bae:	4b08      	ldr	r3, [pc, #32]	; (8014bd0 <HW_IPCC_SYS_EvtNot+0x34>)
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	687a      	ldr	r2, [r7, #4]
 8014bb4:	4610      	mov	r0, r2
 8014bb6:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8014bb8:	4804      	ldr	r0, [pc, #16]	; (8014bcc <HW_IPCC_SYS_EvtNot+0x30>)
 8014bba:	f7ff fd63 	bl	8014684 <LST_is_empty>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d0ef      	beq.n	8014ba4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8014bc4:	bf00      	nop
}
 8014bc6:	3708      	adds	r7, #8
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	20030830 	.word	0x20030830
 8014bd0:	2002746c 	.word	0x2002746c

08014bd4 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b084      	sub	sp, #16
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8014bdc:	4b0a      	ldr	r3, [pc, #40]	; (8014c08 <TL_THREAD_Init+0x34>)
 8014bde:	689b      	ldr	r3, [r3, #8]
 8014be0:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	685a      	ldr	r2, [r3, #4]
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	681a      	ldr	r2, [r3, #0]
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	689a      	ldr	r2, [r3, #8]
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 8014bfa:	f001 f9c5 	bl	8015f88 <HW_IPCC_THREAD_Init>

  return;
 8014bfe:	bf00      	nop
}
 8014c00:	3710      	adds	r7, #16
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}
 8014c06:	bf00      	nop
 8014c08:	20030000 	.word	0x20030000

08014c0c <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8014c10:	4b04      	ldr	r3, [pc, #16]	; (8014c24 <TL_OT_SendCmd+0x18>)
 8014c12:	689b      	ldr	r3, [r3, #8]
 8014c14:	689b      	ldr	r3, [r3, #8]
 8014c16:	2208      	movs	r2, #8
 8014c18:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 8014c1a:	f001 f9c3 	bl	8015fa4 <HW_IPCC_OT_SendCmd>

  return;
 8014c1e:	bf00      	nop
}
 8014c20:	bd80      	pop	{r7, pc}
 8014c22:	bf00      	nop
 8014c24:	20030000 	.word	0x20030000

08014c28 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8014c2c:	4b04      	ldr	r3, [pc, #16]	; (8014c40 <TL_CLI_SendCmd+0x18>)
 8014c2e:	689b      	ldr	r3, [r3, #8]
 8014c30:	685b      	ldr	r3, [r3, #4]
 8014c32:	220a      	movs	r2, #10
 8014c34:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 8014c36:	f001 f9c3 	bl	8015fc0 <HW_IPCC_CLI_SendCmd>

  return;
 8014c3a:	bf00      	nop
}
 8014c3c:	bd80      	pop	{r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	20030000 	.word	0x20030000

08014c44 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8014c48:	4b04      	ldr	r3, [pc, #16]	; (8014c5c <TL_THREAD_SendAck+0x18>)
 8014c4a:	689b      	ldr	r3, [r3, #8]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	220d      	movs	r2, #13
 8014c50:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8014c52:	f001 f9bf 	bl	8015fd4 <HW_IPCC_THREAD_SendAck>

  return;
 8014c56:	bf00      	nop
}
 8014c58:	bd80      	pop	{r7, pc}
 8014c5a:	bf00      	nop
 8014c5c:	20030000 	.word	0x20030000

08014c60 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8014c64:	4b04      	ldr	r3, [pc, #16]	; (8014c78 <TL_THREAD_CliSendAck+0x18>)
 8014c66:	689b      	ldr	r3, [r3, #8]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	220d      	movs	r2, #13
 8014c6c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8014c6e:	f001 f9bf 	bl	8015ff0 <HW_IPCC_THREAD_CliSendAck>

  return;
 8014c72:	bf00      	nop
}
 8014c74:	bd80      	pop	{r7, pc}
 8014c76:	bf00      	nop
 8014c78:	20030000 	.word	0x20030000

08014c7c <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8014c80:	4b03      	ldr	r3, [pc, #12]	; (8014c90 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8014c82:	689b      	ldr	r3, [r3, #8]
 8014c84:	689b      	ldr	r3, [r3, #8]
 8014c86:	4618      	mov	r0, r3
 8014c88:	f000 fe20 	bl	80158cc <TL_OT_CmdEvtReceived>

  return;
 8014c8c:	bf00      	nop
}
 8014c8e:	bd80      	pop	{r7, pc}
 8014c90:	20030000 	.word	0x20030000

08014c94 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8014c98:	4b03      	ldr	r3, [pc, #12]	; (8014ca8 <HW_IPCC_THREAD_EvtNot+0x14>)
 8014c9a:	689b      	ldr	r3, [r3, #8]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f000 fe1e 	bl	80158e0 <TL_THREAD_NotReceived>

  return;
 8014ca4:	bf00      	nop
}
 8014ca6:	bd80      	pop	{r7, pc}
 8014ca8:	20030000 	.word	0x20030000

08014cac <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8014cb0:	4b03      	ldr	r3, [pc, #12]	; (8014cc0 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8014cb2:	689b      	ldr	r3, [r3, #8]
 8014cb4:	685b      	ldr	r3, [r3, #4]
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f000 ff00 	bl	8015abc <TL_THREAD_CliNotReceived>

  return;
 8014cbc:	bf00      	nop
}
 8014cbe:	bd80      	pop	{r7, pc}
 8014cc0:	20030000 	.word	0x20030000

08014cc4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b082      	sub	sp, #8
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8014ccc:	4817      	ldr	r0, [pc, #92]	; (8014d2c <TL_MM_Init+0x68>)
 8014cce:	f7ff fcc9 	bl	8014664 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8014cd2:	4817      	ldr	r0, [pc, #92]	; (8014d30 <TL_MM_Init+0x6c>)
 8014cd4:	f7ff fcc6 	bl	8014664 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8014cd8:	4b16      	ldr	r3, [pc, #88]	; (8014d34 <TL_MM_Init+0x70>)
 8014cda:	691b      	ldr	r3, [r3, #16]
 8014cdc:	4a16      	ldr	r2, [pc, #88]	; (8014d38 <TL_MM_Init+0x74>)
 8014cde:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8014ce0:	4b15      	ldr	r3, [pc, #84]	; (8014d38 <TL_MM_Init+0x74>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	687a      	ldr	r2, [r7, #4]
 8014ce6:	6892      	ldr	r2, [r2, #8]
 8014ce8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8014cea:	4b13      	ldr	r3, [pc, #76]	; (8014d38 <TL_MM_Init+0x74>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	68d2      	ldr	r2, [r2, #12]
 8014cf2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8014cf4:	4b10      	ldr	r3, [pc, #64]	; (8014d38 <TL_MM_Init+0x74>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	4a0c      	ldr	r2, [pc, #48]	; (8014d2c <TL_MM_Init+0x68>)
 8014cfa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8014cfc:	4b0e      	ldr	r3, [pc, #56]	; (8014d38 <TL_MM_Init+0x74>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	687a      	ldr	r2, [r7, #4]
 8014d02:	6812      	ldr	r2, [r2, #0]
 8014d04:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8014d06:	4b0c      	ldr	r3, [pc, #48]	; (8014d38 <TL_MM_Init+0x74>)
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	687a      	ldr	r2, [r7, #4]
 8014d0c:	6852      	ldr	r2, [r2, #4]
 8014d0e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8014d10:	4b09      	ldr	r3, [pc, #36]	; (8014d38 <TL_MM_Init+0x74>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	687a      	ldr	r2, [r7, #4]
 8014d16:	6912      	ldr	r2, [r2, #16]
 8014d18:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8014d1a:	4b07      	ldr	r3, [pc, #28]	; (8014d38 <TL_MM_Init+0x74>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	6952      	ldr	r2, [r2, #20]
 8014d22:	619a      	str	r2, [r3, #24]

  return;
 8014d24:	bf00      	nop
}
 8014d26:	3708      	adds	r7, #8
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd80      	pop	{r7, pc}
 8014d2c:	200300a8 	.word	0x200300a8
 8014d30:	20027458 	.word	0x20027458
 8014d34:	20030000 	.word	0x20030000
 8014d38:	20027470 	.word	0x20027470

08014d3c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b082      	sub	sp, #8
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8014d44:	6879      	ldr	r1, [r7, #4]
 8014d46:	4805      	ldr	r0, [pc, #20]	; (8014d5c <TL_MM_EvtDone+0x20>)
 8014d48:	f7ff fce0 	bl	801470c <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8014d4c:	4804      	ldr	r0, [pc, #16]	; (8014d60 <TL_MM_EvtDone+0x24>)
 8014d4e:	f001 f981 	bl	8016054 <HW_IPCC_MM_SendFreeBuf>

  return;
 8014d52:	bf00      	nop
}
 8014d54:	3708      	adds	r7, #8
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}
 8014d5a:	bf00      	nop
 8014d5c:	20027458 	.word	0x20027458
 8014d60:	08014d65 	.word	0x08014d65

08014d64 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b082      	sub	sp, #8
 8014d68:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8014d6a:	e00c      	b.n	8014d86 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8014d6c:	1d3b      	adds	r3, r7, #4
 8014d6e:	4619      	mov	r1, r3
 8014d70:	480a      	ldr	r0, [pc, #40]	; (8014d9c <SendFreeBuf+0x38>)
 8014d72:	f7ff fd0e 	bl	8014792 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8014d76:	4b0a      	ldr	r3, [pc, #40]	; (8014da0 <SendFreeBuf+0x3c>)
 8014d78:	691b      	ldr	r3, [r3, #16]
 8014d7a:	691b      	ldr	r3, [r3, #16]
 8014d7c:	687a      	ldr	r2, [r7, #4]
 8014d7e:	4611      	mov	r1, r2
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7ff fcc3 	bl	801470c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8014d86:	4805      	ldr	r0, [pc, #20]	; (8014d9c <SendFreeBuf+0x38>)
 8014d88:	f7ff fc7c 	bl	8014684 <LST_is_empty>
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d0ec      	beq.n	8014d6c <SendFreeBuf+0x8>
  }

  return;
 8014d92:	bf00      	nop
}
 8014d94:	3708      	adds	r7, #8
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}
 8014d9a:	bf00      	nop
 8014d9c:	20027458 	.word	0x20027458
 8014da0:	20030000 	.word	0x20030000

08014da4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8014da8:	4805      	ldr	r0, [pc, #20]	; (8014dc0 <TL_TRACES_Init+0x1c>)
 8014daa:	f7ff fc5b 	bl	8014664 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8014dae:	4b05      	ldr	r3, [pc, #20]	; (8014dc4 <TL_TRACES_Init+0x20>)
 8014db0:	695b      	ldr	r3, [r3, #20]
 8014db2:	4a03      	ldr	r2, [pc, #12]	; (8014dc0 <TL_TRACES_Init+0x1c>)
 8014db4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8014db6:	f001 f983 	bl	80160c0 <HW_IPCC_TRACES_Init>

  return;
 8014dba:	bf00      	nop
}
 8014dbc:	bd80      	pop	{r7, pc}
 8014dbe:	bf00      	nop
 8014dc0:	200300b0 	.word	0x200300b0
 8014dc4:	20030000 	.word	0x20030000

08014dc8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b082      	sub	sp, #8
 8014dcc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014dce:	e008      	b.n	8014de2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8014dd0:	1d3b      	adds	r3, r7, #4
 8014dd2:	4619      	mov	r1, r3
 8014dd4:	4808      	ldr	r0, [pc, #32]	; (8014df8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8014dd6:	f7ff fcdc 	bl	8014792 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7ec fa1b 	bl	8001218 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014de2:	4805      	ldr	r0, [pc, #20]	; (8014df8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8014de4:	f7ff fc4e 	bl	8014684 <LST_is_empty>
 8014de8:	4603      	mov	r3, r0
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d0f0      	beq.n	8014dd0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8014dee:	bf00      	nop
}
 8014df0:	3708      	adds	r7, #8
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}
 8014df6:	bf00      	nop
 8014df8:	200300b0 	.word	0x200300b0

08014dfc <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b082      	sub	sp, #8
 8014e00:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8014e02:	f000 f9a3 	bl	801514c <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8014e06:	480e      	ldr	r0, [pc, #56]	; (8014e40 <APP_THREAD_Init+0x44>)
 8014e08:	f000 fd08 	bl	801581c <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8014e0c:	2101      	movs	r1, #1
 8014e0e:	2002      	movs	r0, #2
 8014e10:	f001 f97e 	bl	8016110 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8014e14:	f000 fe3a 	bl	8015a8c <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8014e18:	f000 fe1a 	bl	8015a50 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8014e1c:	f7ff fa38 	bl	8014290 <SHCI_C2_THREAD_Init>
 8014e20:	4603      	mov	r3, r0
 8014e22:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8014e24:	4a07      	ldr	r2, [pc, #28]	; (8014e44 <APP_THREAD_Init+0x48>)
 8014e26:	2100      	movs	r1, #0
 8014e28:	4807      	ldr	r0, [pc, #28]	; (8014e48 <APP_THREAD_Init+0x4c>)
 8014e2a:	f7f9 fe93 	bl	800eb54 <osThreadNew>
 8014e2e:	4602      	mov	r2, r0
 8014e30:	4b06      	ldr	r3, [pc, #24]	; (8014e4c <APP_THREAD_Init+0x50>)
 8014e32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8014e34:	f000 f86c 	bl	8014f10 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8014e38:	bf00      	nop
 8014e3a:	3708      	adds	r7, #8
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	20030838 	.word	0x20030838
 8014e44:	08018148 	.word	0x08018148
 8014e48:	08015209 	.word	0x08015209
 8014e4c:	20027688 	.word	0x20027688

08014e50 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b082      	sub	sp, #8
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
 8014e58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	2b07      	cmp	r3, #7
 8014e5e:	d83b      	bhi.n	8014ed8 <APP_THREAD_Error+0x88>
 8014e60:	a201      	add	r2, pc, #4	; (adr r2, 8014e68 <APP_THREAD_Error+0x18>)
 8014e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e66:	bf00      	nop
 8014e68:	08014e89 	.word	0x08014e89
 8014e6c:	08014e93 	.word	0x08014e93
 8014e70:	08014e9d 	.word	0x08014e9d
 8014e74:	08014ea7 	.word	0x08014ea7
 8014e78:	08014eb1 	.word	0x08014eb1
 8014e7c:	08014ebb 	.word	0x08014ebb
 8014e80:	08014ec5 	.word	0x08014ec5
 8014e84:	08014ecf 	.word	0x08014ecf
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8014e88:	6839      	ldr	r1, [r7, #0]
 8014e8a:	4818      	ldr	r0, [pc, #96]	; (8014eec <APP_THREAD_Error+0x9c>)
 8014e8c:	f000 f952 	bl	8015134 <APP_THREAD_TraceError>
    break;
 8014e90:	e027      	b.n	8014ee2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8014e92:	6839      	ldr	r1, [r7, #0]
 8014e94:	4816      	ldr	r0, [pc, #88]	; (8014ef0 <APP_THREAD_Error+0xa0>)
 8014e96:	f000 f94d 	bl	8015134 <APP_THREAD_TraceError>
    break;
 8014e9a:	e022      	b.n	8014ee2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8014e9c:	6839      	ldr	r1, [r7, #0]
 8014e9e:	4815      	ldr	r0, [pc, #84]	; (8014ef4 <APP_THREAD_Error+0xa4>)
 8014ea0:	f000 f948 	bl	8015134 <APP_THREAD_TraceError>
    break;
 8014ea4:	e01d      	b.n	8014ee2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8014ea6:	6839      	ldr	r1, [r7, #0]
 8014ea8:	4813      	ldr	r0, [pc, #76]	; (8014ef8 <APP_THREAD_Error+0xa8>)
 8014eaa:	f000 f943 	bl	8015134 <APP_THREAD_TraceError>
    break;
 8014eae:	e018      	b.n	8014ee2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8014eb0:	6839      	ldr	r1, [r7, #0]
 8014eb2:	4812      	ldr	r0, [pc, #72]	; (8014efc <APP_THREAD_Error+0xac>)
 8014eb4:	f000 f93e 	bl	8015134 <APP_THREAD_TraceError>
    break;
 8014eb8:	e013      	b.n	8014ee2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8014eba:	6839      	ldr	r1, [r7, #0]
 8014ebc:	4810      	ldr	r0, [pc, #64]	; (8014f00 <APP_THREAD_Error+0xb0>)
 8014ebe:	f000 f939 	bl	8015134 <APP_THREAD_TraceError>
    break;
 8014ec2:	e00e      	b.n	8014ee2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8014ec4:	6839      	ldr	r1, [r7, #0]
 8014ec6:	480f      	ldr	r0, [pc, #60]	; (8014f04 <APP_THREAD_Error+0xb4>)
 8014ec8:	f000 f934 	bl	8015134 <APP_THREAD_TraceError>
    break;
 8014ecc:	e009      	b.n	8014ee2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8014ece:	6839      	ldr	r1, [r7, #0]
 8014ed0:	480d      	ldr	r0, [pc, #52]	; (8014f08 <APP_THREAD_Error+0xb8>)
 8014ed2:	f000 f92f 	bl	8015134 <APP_THREAD_TraceError>
    break;
 8014ed6:	e004      	b.n	8014ee2 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8014ed8:	2100      	movs	r1, #0
 8014eda:	480c      	ldr	r0, [pc, #48]	; (8014f0c <APP_THREAD_Error+0xbc>)
 8014edc:	f000 f92a 	bl	8015134 <APP_THREAD_TraceError>
    break;
 8014ee0:	bf00      	nop
  }
}
 8014ee2:	bf00      	nop
 8014ee4:	3708      	adds	r7, #8
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	bf00      	nop
 8014eec:	08017b48 	.word	0x08017b48
 8014ef0:	08017b6c 	.word	0x08017b6c
 8014ef4:	08017b90 	.word	0x08017b90
 8014ef8:	08017bb0 	.word	0x08017bb0
 8014efc:	08017bd0 	.word	0x08017bd0
 8014f00:	08017bf0 	.word	0x08017bf0
 8014f04:	08017c0c 	.word	0x08017c0c
 8014f08:	08017c38 	.word	0x08017c38
 8014f0c:	08017c5c 	.word	0x08017c5c

08014f10 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b082      	sub	sp, #8
 8014f14:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8014f16:	2000      	movs	r0, #0
 8014f18:	f7fe fddc 	bl	8013ad4 <otInstanceErasePersistentInfo>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014f20:	79fb      	ldrb	r3, [r7, #7]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d004      	beq.n	8014f30 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8014f26:	79fb      	ldrb	r3, [r7, #7]
 8014f28:	4619      	mov	r1, r3
 8014f2a:	2006      	movs	r0, #6
 8014f2c:	f7ff ff90 	bl	8014e50 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8014f30:	2000      	movs	r0, #0
 8014f32:	f7fe fd72 	bl	8013a1a <otInstanceFinalize>
  otInstanceInitSingle();
 8014f36:	f7fe fd49 	bl	80139cc <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	4957      	ldr	r1, [pc, #348]	; (801509c <APP_THREAD_DeviceConfig+0x18c>)
 8014f3e:	2000      	movs	r0, #0
 8014f40:	f7fe fd92 	bl	8013a68 <otSetStateChangedCallback>
 8014f44:	4603      	mov	r3, r0
 8014f46:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014f48:	79fb      	ldrb	r3, [r7, #7]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d004      	beq.n	8014f58 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8014f4e:	79fb      	ldrb	r3, [r7, #7]
 8014f50:	4619      	mov	r1, r3
 8014f52:	2001      	movs	r0, #1
 8014f54:	f7ff ff7c 	bl	8014e50 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8014f58:	2117      	movs	r1, #23
 8014f5a:	2000      	movs	r0, #0
 8014f5c:	f7fe fe9a 	bl	8013c94 <otLinkSetChannel>
 8014f60:	4603      	mov	r3, r0
 8014f62:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014f64:	79fb      	ldrb	r3, [r7, #7]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d004      	beq.n	8014f74 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8014f6a:	79fb      	ldrb	r3, [r7, #7]
 8014f6c:	4619      	mov	r1, r3
 8014f6e:	2002      	movs	r0, #2
 8014f70:	f7ff ff6e 	bl	8014e50 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8014f74:	f241 2134 	movw	r1, #4660	; 0x1234
 8014f78:	2000      	movs	r0, #0
 8014f7a:	f7fe febb 	bl	8013cf4 <otLinkSetPanId>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014f82:	79fb      	ldrb	r3, [r7, #7]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d004      	beq.n	8014f92 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8014f88:	79fb      	ldrb	r3, [r7, #7]
 8014f8a:	4619      	mov	r1, r3
 8014f8c:	2003      	movs	r0, #3
 8014f8e:	f7ff ff5f 	bl	8014e50 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8014f92:	2101      	movs	r1, #1
 8014f94:	2000      	movs	r0, #0
 8014f96:	f7fe fdc6 	bl	8013b26 <otIp6SetEnabled>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014f9e:	79fb      	ldrb	r3, [r7, #7]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d004      	beq.n	8014fae <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8014fa4:	79fb      	ldrb	r3, [r7, #7]
 8014fa6:	4619      	mov	r1, r3
 8014fa8:	2004      	movs	r0, #4
 8014faa:	f7ff ff51 	bl	8014e50 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8014fae:	2101      	movs	r1, #1
 8014fb0:	2000      	movs	r0, #0
 8014fb2:	f7ff fc0b 	bl	80147cc <otThreadSetEnabled>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014fba:	79fb      	ldrb	r3, [r7, #7]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d004      	beq.n	8014fca <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8014fc0:	79fb      	ldrb	r3, [r7, #7]
 8014fc2:	4619      	mov	r1, r3
 8014fc4:	2005      	movs	r0, #5
 8014fc6:	f7ff ff43 	bl	8014e50 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 8014fca:	2100      	movs	r1, #0
 8014fcc:	2000      	movs	r0, #0
 8014fce:	f7ff fbfd 	bl	80147cc <otThreadSetEnabled>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014fd6:	79fb      	ldrb	r3, [r7, #7]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d004      	beq.n	8014fe6 <APP_THREAD_DeviceConfig+0xd6>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8014fdc:	79fb      	ldrb	r3, [r7, #7]
 8014fde:	4619      	mov	r1, r3
 8014fe0:	2005      	movs	r0, #5
 8014fe2:	f7ff ff35 	bl	8014e50 <APP_THREAD_Error>
  }

    error = otThreadSetMasterKey(NULL, &masterKey);
 8014fe6:	492e      	ldr	r1, [pc, #184]	; (80150a0 <APP_THREAD_DeviceConfig+0x190>)
 8014fe8:	2000      	movs	r0, #0
 8014fea:	f7ff fc4e 	bl	801488a <otThreadSetMasterKey>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8014ff2:	79fb      	ldrb	r3, [r7, #7]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d004      	beq.n	8015002 <APP_THREAD_DeviceConfig+0xf2>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8014ff8:	79fb      	ldrb	r3, [r7, #7]
 8014ffa:	4619      	mov	r1, r3
 8014ffc:	2002      	movs	r0, #2
 8014ffe:	f7ff ff27 	bl	8014e50 <APP_THREAD_Error>
    }

    error = otThreadSetNetworkName(NULL, networkName);
 8015002:	4928      	ldr	r1, [pc, #160]	; (80150a4 <APP_THREAD_DeviceConfig+0x194>)
 8015004:	2000      	movs	r0, #0
 8015006:	f7ff fc97 	bl	8014938 <otThreadSetNetworkName>
 801500a:	4603      	mov	r3, r0
 801500c:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 801500e:	79fb      	ldrb	r3, [r7, #7]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d004      	beq.n	801501e <APP_THREAD_DeviceConfig+0x10e>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8015014:	79fb      	ldrb	r3, [r7, #7]
 8015016:	4619      	mov	r1, r3
 8015018:	2002      	movs	r0, #2
 801501a:	f7ff ff19 	bl	8014e50 <APP_THREAD_Error>
    }
    error = otThreadSetExtendedPanId(NULL , &extendedPanId);
 801501e:	4922      	ldr	r1, [pc, #136]	; (80150a8 <APP_THREAD_DeviceConfig+0x198>)
 8015020:	2000      	movs	r0, #0
 8015022:	f7ff fc03 	bl	801482c <otThreadSetExtendedPanId>
 8015026:	4603      	mov	r3, r0
 8015028:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 801502a:	79fb      	ldrb	r3, [r7, #7]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d004      	beq.n	801503a <APP_THREAD_DeviceConfig+0x12a>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8015030:	79fb      	ldrb	r3, [r7, #7]
 8015032:	4619      	mov	r1, r3
 8015034:	2002      	movs	r0, #2
 8015036:	f7ff ff0b 	bl	8014e50 <APP_THREAD_Error>
    }

    error = otThreadSetEnabled(NULL, true);
 801503a:	2101      	movs	r1, #1
 801503c:	2000      	movs	r0, #0
 801503e:	f7ff fbc5 	bl	80147cc <otThreadSetEnabled>
 8015042:	4603      	mov	r3, r0
 8015044:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8015046:	79fb      	ldrb	r3, [r7, #7]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d004      	beq.n	8015056 <APP_THREAD_DeviceConfig+0x146>
    {
      APP_THREAD_Error(ERR_THREAD_START,error);
 801504c:	79fb      	ldrb	r3, [r7, #7]
 801504e:	4619      	mov	r1, r3
 8015050:	2005      	movs	r0, #5
 8015052:	f7ff fefd 	bl	8014e50 <APP_THREAD_Error>
    }

    error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8015056:	f241 6133 	movw	r1, #5683	; 0x1633
 801505a:	2000      	movs	r0, #0
 801505c:	f7fe fc24 	bl	80138a8 <otCoapStart>
 8015060:	4603      	mov	r3, r0
 8015062:	71fb      	strb	r3, [r7, #7]
  //  error = otCoapAddResource(NULL, &OT_Light_Ressource);
    error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8015064:	4911      	ldr	r1, [pc, #68]	; (80150ac <APP_THREAD_DeviceConfig+0x19c>)
 8015066:	2000      	movs	r0, #0
 8015068:	f7fe fc4e 	bl	8013908 <otCoapAddResource>
 801506c:	4603      	mov	r3, r0
 801506e:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 8015070:	490f      	ldr	r1, [pc, #60]	; (80150b0 <APP_THREAD_DeviceConfig+0x1a0>)
 8015072:	2000      	movs	r0, #0
 8015074:	f7fe fc48 	bl	8013908 <otCoapAddResource>
 8015078:	4603      	mov	r3, r0
 801507a:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 801507c:	490d      	ldr	r1, [pc, #52]	; (80150b4 <APP_THREAD_DeviceConfig+0x1a4>)
 801507e:	2000      	movs	r0, #0
 8015080:	f7fe fc42 	bl	8013908 <otCoapAddResource>
 8015084:	4603      	mov	r3, r0
 8015086:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 8015088:	490b      	ldr	r1, [pc, #44]	; (80150b8 <APP_THREAD_DeviceConfig+0x1a8>)
 801508a:	2000      	movs	r0, #0
 801508c:	f7fe fc3c 	bl	8013908 <otCoapAddResource>
 8015090:	4603      	mov	r3, r0
 8015092:	71fb      	strb	r3, [r7, #7]

    // start master thread
//    osThreadFlagsSet(masterTaskHandle, 0x00000008U);
//    startSensorThreads();
  /* USER CODE END DEVICECONFIG */
}
 8015094:	bf00      	nop
 8015096:	3708      	adds	r7, #8
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}
 801509c:	080150bd 	.word	0x080150bd
 80150a0:	080181b0 	.word	0x080181b0
 80150a4:	080181c8 	.word	0x080181c8
 80150a8:	080181c0 	.word	0x080181c0
 80150ac:	20000088 	.word	0x20000088
 80150b0:	20000098 	.word	0x20000098
 80150b4:	200000a8 	.word	0x200000a8
 80150b8:	200000b8 	.word	0x200000b8

080150bc <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 80150bc:	b590      	push	{r4, r7, lr}
 80150be:	b083      	sub	sp, #12
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
 80150c4:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f003 0304 	and.w	r3, r3, #4
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d027      	beq.n	8015120 <APP_THREAD_StateNotif+0x64>
  {
    switch (otThreadGetDeviceRole(NULL))
 80150d0:	2000      	movs	r0, #0
 80150d2:	f7ff fc60 	bl	8014996 <otThreadGetDeviceRole>
 80150d6:	4603      	mov	r3, r0
 80150d8:	2b04      	cmp	r3, #4
 80150da:	d81e      	bhi.n	801511a <APP_THREAD_StateNotif+0x5e>
 80150dc:	a201      	add	r2, pc, #4	; (adr r2, 80150e4 <APP_THREAD_StateNotif+0x28>)
 80150de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150e2:	bf00      	nop
 80150e4:	08015125 	.word	0x08015125
 80150e8:	080150f9 	.word	0x080150f9
 80150ec:	08015109 	.word	0x08015109
 80150f0:	0801510f 	.word	0x0801510f
 80150f4:	08015115 	.word	0x08015115

      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
    	borderRouter.epoch = 0;
 80150f8:	4a0d      	ldr	r2, [pc, #52]	; (8015130 <APP_THREAD_StateNotif+0x74>)
 80150fa:	f04f 0300 	mov.w	r3, #0
 80150fe:	f04f 0400 	mov.w	r4, #0
 8015102:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 8015106:	e00e      	b.n	8015126 <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_CHILD:
      /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
    	APP_THREAD_SendMyIP();
 8015108:	f000 f8b0 	bl	801526c <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 801510c:	e00b      	b.n	8015126 <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_ROUTER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_ROUTER */
    	APP_THREAD_SendMyIP();
 801510e:	f000 f8ad 	bl	801526c <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 8015112:	e008      	b.n	8015126 <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_LEADER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_LEADER */
    	APP_THREAD_SendMyIP();
 8015114:	f000 f8aa 	bl	801526c <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 8015118:	e005      	b.n	8015126 <APP_THREAD_StateNotif+0x6a>
    default:
      /* USER CODE BEGIN DEFAULT */
    	APP_THREAD_SendMyIP();
 801511a:	f000 f8a7 	bl	801526c <APP_THREAD_SendMyIP>
      /* USER CODE END DEFAULT */
      break;
 801511e:	e002      	b.n	8015126 <APP_THREAD_StateNotif+0x6a>
    }
  }
 8015120:	bf00      	nop
 8015122:	e000      	b.n	8015126 <APP_THREAD_StateNotif+0x6a>
      break;
 8015124:	bf00      	nop
}
 8015126:	bf00      	nop
 8015128:	370c      	adds	r7, #12
 801512a:	46bd      	mov	sp, r7
 801512c:	bd90      	pop	{r4, r7, pc}
 801512e:	bf00      	nop
 8015130:	20027758 	.word	0x20027758

08015134 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8015134:	b480      	push	{r7}
 8015136:	b083      	sub	sp, #12
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 801513e:	bf00      	nop
 8015140:	370c      	adds	r7, #12
 8015142:	46bd      	mov	sp, r7
 8015144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015148:	4770      	bx	lr
	...

0801514c <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b088      	sub	sp, #32
 8015150:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8015152:	1d3b      	adds	r3, r7, #4
 8015154:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8015156:	6978      	ldr	r0, [r7, #20]
 8015158:	f7ff f8c6 	bl	80142e8 <SHCI_GetWirelessFwInfo>
 801515c:	4603      	mov	r3, r0
 801515e:	2b00      	cmp	r3, #0
 8015160:	d004      	beq.n	801516c <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8015162:	2101      	movs	r1, #1
 8015164:	2007      	movs	r0, #7
 8015166:	f7ff fe73 	bl	8014e50 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 801516a:	e03d      	b.n	80151e8 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 801516c:	4a20      	ldr	r2, [pc, #128]	; (80151f0 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 801516e:	2101      	movs	r1, #1
 8015170:	2000      	movs	r0, #0
 8015172:	f7ef ffff 	bl	8005174 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8015176:	4a1f      	ldr	r2, [pc, #124]	; (80151f4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8015178:	2101      	movs	r1, #1
 801517a:	2000      	movs	r0, #0
 801517c:	f7ef fffa 	bl	8005174 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	781b      	ldrb	r3, [r3, #0]
 8015184:	4619      	mov	r1, r3
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	785b      	ldrb	r3, [r3, #1]
 801518a:	461a      	mov	r2, r3
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	789b      	ldrb	r3, [r3, #2]
 8015190:	9301      	str	r3, [sp, #4]
 8015192:	9200      	str	r2, [sp, #0]
 8015194:	460b      	mov	r3, r1
 8015196:	4a18      	ldr	r2, [pc, #96]	; (80151f8 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8015198:	2101      	movs	r1, #1
 801519a:	2000      	movs	r0, #0
 801519c:	f7ef ffea 	bl	8005174 <logApplication>
    switch(p_wireless_info->StackType)
 80151a0:	697b      	ldr	r3, [r7, #20]
 80151a2:	7a5b      	ldrb	r3, [r3, #9]
 80151a4:	2b11      	cmp	r3, #17
 80151a6:	d009      	beq.n	80151bc <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 80151a8:	2b50      	cmp	r3, #80	; 0x50
 80151aa:	d00d      	beq.n	80151c8 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 80151ac:	2b10      	cmp	r3, #16
 80151ae:	d111      	bne.n	80151d4 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 80151b0:	4a12      	ldr	r2, [pc, #72]	; (80151fc <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 80151b2:	2101      	movs	r1, #1
 80151b4:	2000      	movs	r0, #0
 80151b6:	f7ef ffdd 	bl	8005174 <logApplication>
      break;
 80151ba:	e010      	b.n	80151de <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 80151bc:	4a10      	ldr	r2, [pc, #64]	; (8015200 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 80151be:	2101      	movs	r1, #1
 80151c0:	2000      	movs	r0, #0
 80151c2:	f7ef ffd7 	bl	8005174 <logApplication>
      break;
 80151c6:	e00a      	b.n	80151de <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 80151c8:	4a0e      	ldr	r2, [pc, #56]	; (8015204 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 80151ca:	2101      	movs	r1, #1
 80151cc:	2000      	movs	r0, #0
 80151ce:	f7ef ffd1 	bl	8005174 <logApplication>
      break;
 80151d2:	e004      	b.n	80151de <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80151d4:	2101      	movs	r1, #1
 80151d6:	2007      	movs	r0, #7
 80151d8:	f7ff fe3a 	bl	8014e50 <APP_THREAD_Error>
      break;
 80151dc:	bf00      	nop
    APP_DBG("**********************************************************");
 80151de:	4a04      	ldr	r2, [pc, #16]	; (80151f0 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80151e0:	2101      	movs	r1, #1
 80151e2:	2000      	movs	r0, #0
 80151e4:	f7ef ffc6 	bl	8005174 <logApplication>
}
 80151e8:	bf00      	nop
 80151ea:	3718      	adds	r7, #24
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd80      	pop	{r7, pc}
 80151f0:	08017c6c 	.word	0x08017c6c
 80151f4:	08017ca8 	.word	0x08017ca8
 80151f8:	08017cc4 	.word	0x08017cc4
 80151fc:	08017cdc 	.word	0x08017cdc
 8015200:	08017cf4 	.word	0x08017cf4
 8015204:	08017d0c 	.word	0x08017d0c

08015208 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b082      	sub	sp, #8
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8015210:	f04f 32ff 	mov.w	r2, #4294967295
 8015214:	2101      	movs	r1, #1
 8015216:	2001      	movs	r0, #1
 8015218:	f7f9 fdfa 	bl	800ee10 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 801521c:	f000 fc7a 	bl	8015b14 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8015220:	e7f6      	b.n	8015210 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08015222 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8015222:	b580      	push	{r7, lr}
 8015224:	b082      	sub	sp, #8
 8015226:	af00      	add	r7, sp, #0
 8015228:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801522a:	f04f 32ff 	mov.w	r2, #4294967295
 801522e:	2101      	movs	r1, #1
 8015230:	2001      	movs	r0, #1
 8015232:	f7f9 fded 	bl	800ee10 <osThreadFlagsWait>
    Send_CLI_To_M0();
 8015236:	f000 fbd1 	bl	80159dc <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801523a:	e7f6      	b.n	801522a <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

0801523c <APP_THREAD_DummyReqHandler>:
  */
static void APP_THREAD_DummyReqHandler(void            * p_context,
                                   otCoapHeader        * pHeader,
                                   otMessage           * pMessage,
                                   const otMessageInfo * pMessageInfo)
{
 801523c:	b480      	push	{r7}
 801523e:	b085      	sub	sp, #20
 8015240:	af00      	add	r7, sp, #0
 8015242:	60f8      	str	r0, [r7, #12]
 8015244:	60b9      	str	r1, [r7, #8]
 8015246:	607a      	str	r2, [r7, #4]
 8015248:	603b      	str	r3, [r7, #0]
    tempMessageInfo = pMessageInfo;
 801524a:	4a06      	ldr	r2, [pc, #24]	; (8015264 <APP_THREAD_DummyReqHandler+0x28>)
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8015250:	4a05      	ldr	r2, [pc, #20]	; (8015268 <APP_THREAD_DummyReqHandler+0x2c>)
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	6013      	str	r3, [r2, #0]
}
 8015256:	bf00      	nop
 8015258:	3714      	adds	r7, #20
 801525a:	46bd      	mov	sp, r7
 801525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015260:	4770      	bx	lr
 8015262:	bf00      	nop
 8015264:	200286c0 	.word	0x200286c0
 8015268:	20028704 	.word	0x20028704

0801526c <APP_THREAD_SendMyIP>:
	APP_THREAD_SendCoapUnicastRequest(NULL, NULL, MULICAST_FTD_BORDER_ROUTER, borderSyncResource);
}


char msgSendMyIP[5] = "cal";
void APP_THREAD_SendMyIP(){
 801526c:	b580      	push	{r7, lr}
 801526e:	af00      	add	r7, sp, #0
	APP_THREAD_SendCoapUnicastRequest(msgSendMyIP, sizeof(msgSendMyIP), borderRouter.ipv6, borderSyncResource);
 8015270:	4b03      	ldr	r3, [pc, #12]	; (8015280 <APP_THREAD_SendMyIP+0x14>)
 8015272:	4a04      	ldr	r2, [pc, #16]	; (8015284 <APP_THREAD_SendMyIP+0x18>)
 8015274:	2105      	movs	r1, #5
 8015276:	4804      	ldr	r0, [pc, #16]	; (8015288 <APP_THREAD_SendMyIP+0x1c>)
 8015278:	f000 f94c 	bl	8015514 <APP_THREAD_SendCoapUnicastRequest>
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 801527c:	bf00      	nop
 801527e:	bd80      	pop	{r7, pc}
 8015280:	08018190 	.word	0x08018190
 8015284:	20027758 	.word	0x20027758
 8015288:	200000c8 	.word	0x200000c8

0801528c <APP_THREAD_SendBorderPacket>:

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket){
 801528c:	b580      	push	{r7, lr}
 801528e:	b084      	sub	sp, #16
 8015290:	af02      	add	r7, sp, #8
 8015292:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapUnicastMsg(sensorPacket, sizeof(struct LogPacket), borderRouter.ipv6  , borderPacket, 1U);
 8015294:	2301      	movs	r3, #1
 8015296:	9300      	str	r3, [sp, #0]
 8015298:	4b04      	ldr	r3, [pc, #16]	; (80152ac <APP_THREAD_SendBorderPacket+0x20>)
 801529a:	4a05      	ldr	r2, [pc, #20]	; (80152b0 <APP_THREAD_SendBorderPacket+0x24>)
 801529c:	21cc      	movs	r1, #204	; 0xcc
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f000 f9ea 	bl	8015678 <APP_THREAD_SendCoapUnicastMsg>

}
 80152a4:	bf00      	nop
 80152a6:	3708      	adds	r7, #8
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}
 80152ac:	080181a0 	.word	0x080181a0
 80152b0:	20027758 	.word	0x20027758

080152b4 <APP_THREAD_CoapLightsSimpleRequestHandler>:
//}

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	b084      	sub	sp, #16
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	60f8      	str	r0, [r7, #12]
 80152bc:	60b9      	str	r1, [r7, #8]
 80152be:	607a      	str	r2, [r7, #4]
  do
  {
	lightsSimpleMessage = 0;
 80152c0:	4b21      	ldr	r3, [pc, #132]	; (8015348 <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 80152c2:	2200      	movs	r2, #0
 80152c4:	601a      	str	r2, [r3, #0]

	//REMOVE THIS!!!!!!!!!
//	APP_THREAD_GetBorderRouterIP(); //REMOVE THIS!!!!!!!!!
	//REMOVE THIS!!!!!!!!!

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage)) == 4U)
 80152c6:	68b8      	ldr	r0, [r7, #8]
 80152c8:	f7fe fd6f 	bl	8013daa <otMessageGetOffset>
 80152cc:	4603      	mov	r3, r0
 80152ce:	4619      	mov	r1, r3
 80152d0:	2304      	movs	r3, #4
 80152d2:	4a1d      	ldr	r2, [pc, #116]	; (8015348 <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 80152d4:	68b8      	ldr	r0, [r7, #8]
 80152d6:	f7fe fdcd 	bl	8013e74 <otMessageRead>
 80152da:	4603      	mov	r3, r0
 80152dc:	2b04      	cmp	r3, #4
 80152de:	d106      	bne.n	80152ee <APP_THREAD_CoapLightsSimpleRequestHandler+0x3a>
	{
//    	lightMessage = lightMessage & 0x0F; //remove first 4 bits since they are part of the message overhead (?)

    	osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 80152e0:	4b1a      	ldr	r3, [pc, #104]	; (801534c <APP_THREAD_CoapLightsSimpleRequestHandler+0x98>)
 80152e2:	6818      	ldr	r0, [r3, #0]
 80152e4:	2300      	movs	r3, #0
 80152e6:	2200      	movs	r2, #0
 80152e8:	4917      	ldr	r1, [pc, #92]	; (8015348 <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 80152ea:	f7fa faa1 	bl	800f830 <osMessageQueuePut>
    	//char ipv6_multicast[50] = "deryfd11:1111:1122:0:22e2:b871:dc02:ad96";

//    	APP_THREAD_SendCoapUnicastRequest(message, borderRouter.ipv6, borderSyncResource);

	}
    receivedMessage = (otMessageInfo *) pMessage;
 80152ee:	4a18      	ldr	r2, [pc, #96]	; (8015350 <APP_THREAD_CoapLightsSimpleRequestHandler+0x9c>)
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 80152f4:	68f8      	ldr	r0, [r7, #12]
 80152f6:	f7fe f98a 	bl	801360e <otCoapHeaderGetType>
 80152fa:	4603      	mov	r3, r0
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d104      	bne.n	801530a <APP_THREAD_CoapLightsSimpleRequestHandler+0x56>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 8015300:	6879      	ldr	r1, [r7, #4]
 8015302:	68f8      	ldr	r0, [r7, #12]
 8015304:	f000 fa3e 	bl	8015784 <APP_THREAD_SendDataResponse>
	  break;
 8015308:	e019      	b.n	801533e <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 801530a:	68f8      	ldr	r0, [r7, #12]
 801530c:	f7fe f97f 	bl	801360e <otCoapHeaderGetType>
 8015310:	4603      	mov	r3, r0
 8015312:	2b10      	cmp	r3, #16
 8015314:	d110      	bne.n	8015338 <APP_THREAD_CoapLightsSimpleRequestHandler+0x84>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8015316:	68f8      	ldr	r0, [r7, #12]
 8015318:	f7fe f9a7 	bl	801366a <otCoapHeaderGetCode>
 801531c:	4603      	mov	r3, r0
 801531e:	2b03      	cmp	r3, #3
 8015320:	d10c      	bne.n	801533c <APP_THREAD_CoapLightsSimpleRequestHandler+0x88>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8015322:	68b8      	ldr	r0, [r7, #8]
 8015324:	f7fe fd41 	bl	8013daa <otMessageGetOffset>
 8015328:	4603      	mov	r3, r0
 801532a:	4619      	mov	r1, r3
 801532c:	2301      	movs	r3, #1
 801532e:	4a09      	ldr	r2, [pc, #36]	; (8015354 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>)
 8015330:	68b8      	ldr	r0, [r7, #8]
 8015332:	f7fe fd9f 	bl	8013e74 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8015336:	e002      	b.n	801533e <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
      break;
 8015338:	bf00      	nop
 801533a:	e000      	b.n	801533e <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
      break;
 801533c:	bf00      	nop
}
 801533e:	bf00      	nop
 8015340:	3710      	adds	r7, #16
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}
 8015346:	bf00      	nop
 8015348:	20027dbc 	.word	0x20027dbc
 801534c:	20027978 	.word	0x20027978
 8015350:	20028704 	.word	0x20028704
 8015354:	20027751 	.word	0x20027751

08015358 <APP_THREAD_CoapToggleLoggingRequestHandler>:

static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b084      	sub	sp, #16
 801535c:	af00      	add	r7, sp, #0
 801535e:	60f8      	str	r0, [r7, #12]
 8015360:	60b9      	str	r1, [r7, #8]
 8015362:	607a      	str	r2, [r7, #4]
  do
  {
    //APP_THREAD_SendCoapUnicastRequest();

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage))
 8015364:	68b8      	ldr	r0, [r7, #8]
 8015366:	f7fe fd20 	bl	8013daa <otMessageGetOffset>
 801536a:	4603      	mov	r3, r0
 801536c:	4619      	mov	r1, r3
 801536e:	2306      	movs	r3, #6
 8015370:	4a1e      	ldr	r2, [pc, #120]	; (80153ec <APP_THREAD_CoapToggleLoggingRequestHandler+0x94>)
 8015372:	68b8      	ldr	r0, [r7, #8]
 8015374:	f7fe fd7e 	bl	8013e74 <otMessageRead>
 8015378:	4603      	mov	r3, r0
 801537a:	2b06      	cmp	r3, #6
 801537c:	d106      	bne.n	801538c <APP_THREAD_CoapToggleLoggingRequestHandler+0x34>
	{
    	osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 801537e:	4b1c      	ldr	r3, [pc, #112]	; (80153f0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x98>)
 8015380:	6818      	ldr	r0, [r3, #0]
 8015382:	2300      	movs	r3, #0
 8015384:	2200      	movs	r2, #0
 8015386:	4919      	ldr	r1, [pc, #100]	; (80153ec <APP_THREAD_CoapToggleLoggingRequestHandler+0x94>)
 8015388:	f7fa fa52 	bl	800f830 <osMessageQueuePut>
//    	{
//    		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
//		}
	}

    tempMessageInfo = pMessageInfo;
 801538c:	4a19      	ldr	r2, [pc, #100]	; (80153f4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x9c>)
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8015392:	4a19      	ldr	r2, [pc, #100]	; (80153f8 <APP_THREAD_CoapToggleLoggingRequestHandler+0xa0>)
 8015394:	68bb      	ldr	r3, [r7, #8]
 8015396:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8015398:	68f8      	ldr	r0, [r7, #12]
 801539a:	f7fe f938 	bl	801360e <otCoapHeaderGetType>
 801539e:	4603      	mov	r3, r0
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d104      	bne.n	80153ae <APP_THREAD_CoapToggleLoggingRequestHandler+0x56>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 80153a4:	6879      	ldr	r1, [r7, #4]
 80153a6:	68f8      	ldr	r0, [r7, #12]
 80153a8:	f000 f9ec 	bl	8015784 <APP_THREAD_SendDataResponse>
	  break;
 80153ac:	e019      	b.n	80153e2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 80153ae:	68f8      	ldr	r0, [r7, #12]
 80153b0:	f7fe f92d 	bl	801360e <otCoapHeaderGetType>
 80153b4:	4603      	mov	r3, r0
 80153b6:	2b10      	cmp	r3, #16
 80153b8:	d110      	bne.n	80153dc <APP_THREAD_CoapToggleLoggingRequestHandler+0x84>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 80153ba:	68f8      	ldr	r0, [r7, #12]
 80153bc:	f7fe f955 	bl	801366a <otCoapHeaderGetCode>
 80153c0:	4603      	mov	r3, r0
 80153c2:	2b03      	cmp	r3, #3
 80153c4:	d10c      	bne.n	80153e0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 80153c6:	68b8      	ldr	r0, [r7, #8]
 80153c8:	f7fe fcef 	bl	8013daa <otMessageGetOffset>
 80153cc:	4603      	mov	r3, r0
 80153ce:	4619      	mov	r1, r3
 80153d0:	2301      	movs	r3, #1
 80153d2:	4a0a      	ldr	r2, [pc, #40]	; (80153fc <APP_THREAD_CoapToggleLoggingRequestHandler+0xa4>)
 80153d4:	68b8      	ldr	r0, [r7, #8]
 80153d6:	f7fe fd4d 	bl	8013e74 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 80153da:	e002      	b.n	80153e2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
      break;
 80153dc:	bf00      	nop
 80153de:	e000      	b.n	80153e2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
      break;
 80153e0:	bf00      	nop
}
 80153e2:	bf00      	nop
 80153e4:	3710      	adds	r7, #16
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	200286d8 	.word	0x200286d8
 80153f0:	20027da4 	.word	0x20027da4
 80153f4:	200286c0 	.word	0x200286c0
 80153f8:	20028704 	.word	0x20028704
 80153fc:	20027751 	.word	0x20027751

08015400 <APP_THREAD_CoapBorderTimeRequestHandler>:
volatile char temp_var[100];
volatile uint8_t temp_num = 0;
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	60f8      	str	r0, [r7, #12]
 8015408:	60b9      	str	r1, [r7, #8]
 801540a:	607a      	str	r2, [r7, #4]
  do
  {

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &borderRouter, sizeof(borderRouter)) == sizeof(borderRouter))
 801540c:	68b8      	ldr	r0, [r7, #8]
 801540e:	f7fe fccc 	bl	8013daa <otMessageGetOffset>
 8015412:	4603      	mov	r3, r0
 8015414:	4619      	mov	r1, r3
 8015416:	2340      	movs	r3, #64	; 0x40
 8015418:	4a1a      	ldr	r2, [pc, #104]	; (8015484 <APP_THREAD_CoapBorderTimeRequestHandler+0x84>)
 801541a:	68b8      	ldr	r0, [r7, #8]
 801541c:	f7fe fd2a 	bl	8013e74 <otMessageRead>
 8015420:	4603      	mov	r3, r0
 8015422:	2b40      	cmp	r3, #64	; 0x40
 8015424:	d101      	bne.n	801542a <APP_THREAD_CoapBorderTimeRequestHandler+0x2a>
	{
    	APP_THREAD_SendMyIP();
 8015426:	f7ff ff21 	bl	801526c <APP_THREAD_SendMyIP>
////			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
////			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//		}
	}

    receivedMessage = (otMessageInfo *) pMessage;
 801542a:	4a17      	ldr	r2, [pc, #92]	; (8015488 <APP_THREAD_CoapBorderTimeRequestHandler+0x88>)
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8015430:	68f8      	ldr	r0, [r7, #12]
 8015432:	f7fe f8ec 	bl	801360e <otCoapHeaderGetType>
 8015436:	4603      	mov	r3, r0
 8015438:	2b00      	cmp	r3, #0
 801543a:	d104      	bne.n	8015446 <APP_THREAD_CoapBorderTimeRequestHandler+0x46>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 801543c:	6879      	ldr	r1, [r7, #4]
 801543e:	68f8      	ldr	r0, [r7, #12]
 8015440:	f000 f9a0 	bl	8015784 <APP_THREAD_SendDataResponse>
	  break;
 8015444:	e019      	b.n	801547a <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8015446:	68f8      	ldr	r0, [r7, #12]
 8015448:	f7fe f8e1 	bl	801360e <otCoapHeaderGetType>
 801544c:	4603      	mov	r3, r0
 801544e:	2b10      	cmp	r3, #16
 8015450:	d110      	bne.n	8015474 <APP_THREAD_CoapBorderTimeRequestHandler+0x74>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8015452:	68f8      	ldr	r0, [r7, #12]
 8015454:	f7fe f909 	bl	801366a <otCoapHeaderGetCode>
 8015458:	4603      	mov	r3, r0
 801545a:	2b03      	cmp	r3, #3
 801545c:	d10c      	bne.n	8015478 <APP_THREAD_CoapBorderTimeRequestHandler+0x78>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 801545e:	68b8      	ldr	r0, [r7, #8]
 8015460:	f7fe fca3 	bl	8013daa <otMessageGetOffset>
 8015464:	4603      	mov	r3, r0
 8015466:	4619      	mov	r1, r3
 8015468:	2301      	movs	r3, #1
 801546a:	4a08      	ldr	r2, [pc, #32]	; (801548c <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>)
 801546c:	68b8      	ldr	r0, [r7, #8]
 801546e:	f7fe fd01 	bl	8013e74 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8015472:	e002      	b.n	801547a <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
      break;
 8015474:	bf00      	nop
 8015476:	e000      	b.n	801547a <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
      break;
 8015478:	bf00      	nop
}
 801547a:	bf00      	nop
 801547c:	3710      	adds	r7, #16
 801547e:	46bd      	mov	sp, r7
 8015480:	bd80      	pop	{r7, pc}
 8015482:	bf00      	nop
 8015484:	20027758 	.word	0x20027758
 8015488:	20028704 	.word	0x20028704
 801548c:	20027751 	.word	0x20027751

08015490 <APP_THREAD_CoapLightsComplexRequestHandler>:
//}

static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b084      	sub	sp, #16
 8015494:	af00      	add	r7, sp, #0
 8015496:	60f8      	str	r0, [r7, #12]
 8015498:	60b9      	str	r1, [r7, #8]
 801549a:	607a      	str	r2, [r7, #4]
  do
  {
    //APP_THREAD_SendCoapUnicastRequest();

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex)) == sizeof(lightMessageComplex))
 801549c:	68b8      	ldr	r0, [r7, #8]
 801549e:	f7fe fc84 	bl	8013daa <otMessageGetOffset>
 80154a2:	4603      	mov	r3, r0
 80154a4:	4619      	mov	r1, r3
 80154a6:	2312      	movs	r3, #18
 80154a8:	4a16      	ldr	r2, [pc, #88]	; (8015504 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 80154aa:	68b8      	ldr	r0, [r7, #8]
 80154ac:	f7fe fce2 	bl	8013e74 <otMessageRead>
 80154b0:	4603      	mov	r3, r0
 80154b2:	2b12      	cmp	r3, #18
 80154b4:	d102      	bne.n	80154bc <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
	{
    	FrontLightsSet(&lightMessageComplex);
 80154b6:	4813      	ldr	r0, [pc, #76]	; (8015504 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 80154b8:	f7ee fdba 	bl	8004030 <FrontLightsSet>
	}

    tempMessageInfo = pMessageInfo;
 80154bc:	4a12      	ldr	r2, [pc, #72]	; (8015508 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 80154c2:	4a12      	ldr	r2, [pc, #72]	; (801550c <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 80154c8:	68f8      	ldr	r0, [r7, #12]
 80154ca:	f7fe f8a0 	bl	801360e <otCoapHeaderGetType>
 80154ce:	4603      	mov	r3, r0
 80154d0:	2b10      	cmp	r3, #16
 80154d2:	d110      	bne.n	80154f6 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 80154d4:	68f8      	ldr	r0, [r7, #12]
 80154d6:	f7fe f8c8 	bl	801366a <otCoapHeaderGetCode>
 80154da:	4603      	mov	r3, r0
 80154dc:	2b03      	cmp	r3, #3
 80154de:	d10c      	bne.n	80154fa <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 80154e0:	68b8      	ldr	r0, [r7, #8]
 80154e2:	f7fe fc62 	bl	8013daa <otMessageGetOffset>
 80154e6:	4603      	mov	r3, r0
 80154e8:	4619      	mov	r1, r3
 80154ea:	2301      	movs	r3, #1
 80154ec:	4a08      	ldr	r2, [pc, #32]	; (8015510 <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 80154ee:	68b8      	ldr	r0, [r7, #8]
 80154f0:	f7fe fcc0 	bl	8013e74 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 80154f4:	e002      	b.n	80154fc <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
      break;
 80154f6:	bf00      	nop
 80154f8:	e000      	b.n	80154fc <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
      break;
 80154fa:	bf00      	nop
}
 80154fc:	bf00      	nop
 80154fe:	3710      	adds	r7, #16
 8015500:	46bd      	mov	sp, r7
 8015502:	bd80      	pop	{r7, pc}
 8015504:	200286f0 	.word	0x200286f0
 8015508:	200286c0 	.word	0x200286c0
 801550c:	20028704 	.word	0x20028704
 8015510:	20027751 	.word	0x20027751

08015514 <APP_THREAD_SendCoapUnicastRequest>:
volatile otNetifMulticastAddress multicastAddresses;
volatile otIp6Address  meshLocalEID;
volatile otIp6Address linkLocalIPV6;

static void APP_THREAD_SendCoapUnicastRequest(char* message, uint8_t message_length, char* ipv6_addr  , char* resource)
{
 8015514:	b590      	push	{r4, r7, lr}
 8015516:	b087      	sub	sp, #28
 8015518:	af02      	add	r7, sp, #8
 801551a:	60f8      	str	r0, [r7, #12]
 801551c:	607a      	str	r2, [r7, #4]
 801551e:	603b      	str	r3, [r7, #0]
 8015520:	460b      	mov	r3, r1
 8015522:	72fb      	strb	r3, [r7, #11]
  // https://openthread.io/reference/struct/ot-message-info.html#structot_message_info



	do{
			  myRloc16 = otThreadGetRloc16(NULL);
 8015524:	2000      	movs	r0, #0
 8015526:	f7ff fa5f 	bl	80149e8 <otThreadGetRloc16>
 801552a:	4603      	mov	r3, r0
 801552c:	461a      	mov	r2, r3
 801552e:	4b49      	ldr	r3, [pc, #292]	; (8015654 <APP_THREAD_SendCoapUnicastRequest+0x140>)
 8015530:	801a      	strh	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 8015532:	2000      	movs	r0, #0
 8015534:	f7fe fb27 	bl	8013b86 <otIp6IsEnabled>
 8015538:	4603      	mov	r3, r0
 801553a:	461a      	mov	r2, r3
 801553c:	4b46      	ldr	r3, [pc, #280]	; (8015658 <APP_THREAD_SendCoapUnicastRequest+0x144>)
 801553e:	701a      	strb	r2, [r3, #0]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
			  memcpy(&meshLocalEID, otThreadGetMeshLocalEid(NULL) ,sizeof(otIp6Address));
 8015540:	2000      	movs	r0, #0
 8015542:	f7ff f9d1 	bl	80148e8 <otThreadGetMeshLocalEid>
 8015546:	4602      	mov	r2, r0
 8015548:	4b44      	ldr	r3, [pc, #272]	; (801565c <APP_THREAD_SendCoapUnicastRequest+0x148>)
 801554a:	6814      	ldr	r4, [r2, #0]
 801554c:	6850      	ldr	r0, [r2, #4]
 801554e:	6891      	ldr	r1, [r2, #8]
 8015550:	68d2      	ldr	r2, [r2, #12]
 8015552:	601c      	str	r4, [r3, #0]
 8015554:	6058      	str	r0, [r3, #4]
 8015556:	6099      	str	r1, [r3, #8]
 8015558:	60da      	str	r2, [r3, #12]

			  // clear info
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 801555a:	222c      	movs	r2, #44	; 0x2c
 801555c:	2100      	movs	r1, #0
 801555e:	4840      	ldr	r0, [pc, #256]	; (8015660 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8015560:	f001 f8ff 	bl	8016762 <memset>

			  // set border IP address
			   //error = otIp6AddressFromString("ff03::1", &OT_MessageInfo.mPeerAddr);
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 8015564:	493f      	ldr	r1, [pc, #252]	; (8015664 <APP_THREAD_SendCoapUnicastRequest+0x150>)
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f7fe fb62 	bl	8013c30 <otIp6AddressFromString>
 801556c:	4603      	mov	r3, r0
 801556e:	461a      	mov	r2, r3
 8015570:	4b3d      	ldr	r3, [pc, #244]	; (8015668 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8015572:	701a      	strb	r2, [r3, #0]


			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8015574:	2000      	movs	r0, #0
 8015576:	f7ff f9b7 	bl	80148e8 <otThreadGetMeshLocalEid>
 801557a:	4602      	mov	r2, r0
 801557c:	4b38      	ldr	r3, [pc, #224]	; (8015660 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 801557e:	461c      	mov	r4, r3
 8015580:	4613      	mov	r3, r2
 8015582:	6818      	ldr	r0, [r3, #0]
 8015584:	6859      	ldr	r1, [r3, #4]
 8015586:	689a      	ldr	r2, [r3, #8]
 8015588:	68db      	ldr	r3, [r3, #12]
 801558a:	c40f      	stmia	r4!, {r0, r1, r2, r3}

			   // error = otIp6AddressFromString("fd11:22::994e:6ed7:263d:6187", &OT_MessageInfo.mPeerAddr);
			  //error = otIp6AddressFromString("fdde:ad00:beef:0:0:ff:fe00:3800", &OT_MessageInfo.mPeerAddr);

			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 801558c:	4b34      	ldr	r3, [pc, #208]	; (8015660 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 801558e:	2201      	movs	r2, #1
 8015590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8015594:	4b32      	ldr	r3, [pc, #200]	; (8015660 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8015596:	f241 6233 	movw	r2, #5683	; 0x1633
 801559a:	845a      	strh	r2, [r3, #34]	; 0x22

			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 801559c:	2000      	movs	r0, #0
 801559e:	f7fe fb1f 	bl	8013be0 <otIp6GetUnicastAddresses>
 80155a2:	4602      	mov	r2, r0
 80155a4:	4b31      	ldr	r3, [pc, #196]	; (801566c <APP_THREAD_SendCoapUnicastRequest+0x158>)
 80155a6:	601a      	str	r2, [r3, #0]
			  OT_MessageInfo.mSockAddr = unicastAddresses->mAddress;
 80155a8:	4b30      	ldr	r3, [pc, #192]	; (801566c <APP_THREAD_SendCoapUnicastRequest+0x158>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	4a2c      	ldr	r2, [pc, #176]	; (8015660 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 80155ae:	4614      	mov	r4, r2
 80155b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80155b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  //OT_MessageInfo.mHopLimit = 20;

			  /************** CREATE NEW MESSAGE ********************ifco*/

			  // create header
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 80155b6:	2203      	movs	r2, #3
 80155b8:	2110      	movs	r1, #16
 80155ba:	482d      	ldr	r0, [pc, #180]	; (8015670 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 80155bc:	f7fd fecb 	bl	8013356 <otCoapHeaderInit>
			  //otCoapHeaderSetMessageId(&OT_Header,OT_BufferIdSend); //may not need since sendRequest should set to 0
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 80155c0:	2102      	movs	r1, #2
 80155c2:	482b      	ldr	r0, [pc, #172]	; (8015670 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 80155c4:	f7fd ff30 	bl	8013428 <otCoapHeaderGenerateToken>

			  // the name of the resource
			  //error = otCoapHeaderAppendUriPathOptions(&OT_Header,C_RESSOURCE_BASIC);
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 80155c8:	6839      	ldr	r1, [r7, #0]
 80155ca:	4829      	ldr	r0, [pc, #164]	; (8015670 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 80155cc:	f7fd ff8f 	bl	80134ee <otCoapHeaderAppendUriPathOptions>
 80155d0:	4603      	mov	r3, r0
 80155d2:	461a      	mov	r2, r3
 80155d4:	4b24      	ldr	r3, [pc, #144]	; (8015668 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 80155d6:	701a      	strb	r2, [r3, #0]

			  // This function adds Payload Marker indicating beginning of the payload to the CoAP header
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 80155d8:	4825      	ldr	r0, [pc, #148]	; (8015670 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 80155da:	f7fd ffba 	bl	8013552 <otCoapHeaderSetPayloadMarker>

			  // creates new message with headers but with empty payload
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80155de:	4924      	ldr	r1, [pc, #144]	; (8015670 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 80155e0:	2000      	movs	r0, #0
 80155e2:	f7fe f8f9 	bl	80137d8 <otCoapNewMessage>
 80155e6:	4602      	mov	r2, r0
 80155e8:	4b22      	ldr	r3, [pc, #136]	; (8015674 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 80155ea:	601a      	str	r2, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 80155ec:	4b21      	ldr	r3, [pc, #132]	; (8015674 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d100      	bne.n	80155f6 <APP_THREAD_SendCoapUnicastRequest+0xe2>
 80155f4:	e7fe      	b.n	80155f4 <APP_THREAD_SendCoapUnicastRequest+0xe0>
			  // Append bytes to a message (this is where the payload gets added)

			  //error = otMessageAppend(pOT_Message, OT_BufferSend, sizeof(OT_BufferSend));
//			  error = otMessageAppend(pOT_Message, &OT_MessageInfo, sizeof(OT_MessageInfo));
			  error = otMessageAppend(pOT_Message, message, message_length);
 80155f6:	4b1f      	ldr	r3, [pc, #124]	; (8015674 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	7afa      	ldrb	r2, [r7, #11]
 80155fc:	b292      	uxth	r2, r2
 80155fe:	68f9      	ldr	r1, [r7, #12]
 8015600:	4618      	mov	r0, r3
 8015602:	f7fe fc00 	bl	8013e06 <otMessageAppend>
 8015606:	4603      	mov	r3, r0
 8015608:	461a      	mov	r2, r3
 801560a:	4b17      	ldr	r3, [pc, #92]	; (8015668 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 801560c:	701a      	strb	r2, [r3, #0]

			  if (error != OT_ERROR_NONE) while(1);
 801560e:	4b16      	ldr	r3, [pc, #88]	; (8015668 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8015610:	781b      	ldrb	r3, [r3, #0]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d000      	beq.n	8015618 <APP_THREAD_SendCoapUnicastRequest+0x104>
 8015616:	e7fe      	b.n	8015616 <APP_THREAD_SendCoapUnicastRequest+0x102>

			  error = otCoapSendRequest(NULL,
 8015618:	4b16      	ldr	r3, [pc, #88]	; (8015674 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 801561a:	6819      	ldr	r1, [r3, #0]
 801561c:	2300      	movs	r3, #0
 801561e:	9300      	str	r3, [sp, #0]
 8015620:	2300      	movs	r3, #0
 8015622:	4a0f      	ldr	r2, [pc, #60]	; (8015660 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8015624:	2000      	movs	r0, #0
 8015626:	f7fe f905 	bl	8013834 <otCoapSendRequest>
 801562a:	4603      	mov	r3, r0
 801562c:	461a      	mov	r2, r3
 801562e:	4b0e      	ldr	r3, [pc, #56]	; (8015668 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8015630:	701a      	strb	r2, [r3, #0]
						&OT_MessageInfo,
						NULL,
						(void*) NULL);

			  // if error: free allocated message buffer if one was allocated
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 8015632:	4b0d      	ldr	r3, [pc, #52]	; (8015668 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8015634:	781b      	ldrb	r3, [r3, #0]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d008      	beq.n	801564c <APP_THREAD_SendCoapUnicastRequest+0x138>
 801563a:	4b0e      	ldr	r3, [pc, #56]	; (8015674 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d004      	beq.n	801564c <APP_THREAD_SendCoapUnicastRequest+0x138>
			  {
				otMessageFree(pOT_Message);
 8015642:	4b0c      	ldr	r3, [pc, #48]	; (8015674 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	4618      	mov	r0, r3
 8015648:	f7fe fb84 	bl	8013d54 <otMessageFree>
			  }

			  //HAL_Delay(10000);
			}while(false);

}
 801564c:	bf00      	nop
 801564e:	3714      	adds	r7, #20
 8015650:	46bd      	mov	sp, r7
 8015652:	bd90      	pop	{r4, r7, pc}
 8015654:	20028782 	.word	0x20028782
 8015658:	20028702 	.word	0x20028702
 801565c:	20028770 	.word	0x20028770
 8015660:	20027690 	.word	0x20027690
 8015664:	200276a0 	.word	0x200276a0
 8015668:	20027750 	.word	0x20027750
 801566c:	20028784 	.word	0x20028784
 8015670:	200276bc 	.word	0x200276bc
 8015674:	2002774c 	.word	0x2002774c

08015678 <APP_THREAD_SendCoapUnicastMsg>:

static void APP_THREAD_SendCoapUnicastMsg(struct LogPacket *message, uint8_t msgSize, char* ipv6_addr  , char* resource, uint8_t msgID)
{
 8015678:	b590      	push	{r4, r7, lr}
 801567a:	b087      	sub	sp, #28
 801567c:	af02      	add	r7, sp, #8
 801567e:	60f8      	str	r0, [r7, #12]
 8015680:	607a      	str	r2, [r7, #4]
 8015682:	603b      	str	r3, [r7, #0]
 8015684:	460b      	mov	r3, r1
 8015686:	72fb      	strb	r3, [r7, #11]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

			  // clear info
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8015688:	222c      	movs	r2, #44	; 0x2c
 801568a:	2100      	movs	r1, #0
 801568c:	4838      	ldr	r0, [pc, #224]	; (8015770 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 801568e:	f001 f868 	bl	8016762 <memset>

			  // set border IP address
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 8015692:	4938      	ldr	r1, [pc, #224]	; (8015774 <APP_THREAD_SendCoapUnicastMsg+0xfc>)
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	f7fe facb 	bl	8013c30 <otIp6AddressFromString>
 801569a:	4603      	mov	r3, r0
 801569c:	461a      	mov	r2, r3
 801569e:	4b36      	ldr	r3, [pc, #216]	; (8015778 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 80156a0:	701a      	strb	r2, [r3, #0]

			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 80156a2:	2000      	movs	r0, #0
 80156a4:	f7ff f920 	bl	80148e8 <otThreadGetMeshLocalEid>
 80156a8:	4602      	mov	r2, r0
 80156aa:	4b31      	ldr	r3, [pc, #196]	; (8015770 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 80156ac:	461c      	mov	r4, r3
 80156ae:	4613      	mov	r3, r2
 80156b0:	6818      	ldr	r0, [r3, #0]
 80156b2:	6859      	ldr	r1, [r3, #4]
 80156b4:	689a      	ldr	r2, [r3, #8]
 80156b6:	68db      	ldr	r3, [r3, #12]
 80156b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}

			   // error = otIp6AddressFromString("fd11:22::994e:6ed7:263d:6187", &OT_MessageInfo.mPeerAddr);
			  //error = otIp6AddressFromString("fdde:ad00:beef:0:0:ff:fe00:3800", &OT_MessageInfo.mPeerAddr);

			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 80156ba:	4b2d      	ldr	r3, [pc, #180]	; (8015770 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 80156bc:	2201      	movs	r2, #1
 80156be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 80156c2:	4b2b      	ldr	r3, [pc, #172]	; (8015770 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 80156c4:	f241 6233 	movw	r2, #5683	; 0x1633
 80156c8:	845a      	strh	r2, [r3, #34]	; 0x22
			  //OT_MessageInfo.mHopLimit = 20;

			  /************** CREATE NEW MESSAGE ********************ifco*/

			  // create header
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 80156ca:	2203      	movs	r2, #3
 80156cc:	2110      	movs	r1, #16
 80156ce:	482b      	ldr	r0, [pc, #172]	; (801577c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80156d0:	f7fd fe41 	bl	8013356 <otCoapHeaderInit>
//			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 80156d4:	2102      	movs	r1, #2
 80156d6:	4829      	ldr	r0, [pc, #164]	; (801577c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80156d8:	f7fd fea6 	bl	8013428 <otCoapHeaderGenerateToken>

			  // the name of the resource
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 80156dc:	6839      	ldr	r1, [r7, #0]
 80156de:	4827      	ldr	r0, [pc, #156]	; (801577c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80156e0:	f7fd ff05 	bl	80134ee <otCoapHeaderAppendUriPathOptions>
 80156e4:	4603      	mov	r3, r0
 80156e6:	461a      	mov	r2, r3
 80156e8:	4b23      	ldr	r3, [pc, #140]	; (8015778 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 80156ea:	701a      	strb	r2, [r3, #0]

			  // need this so the coap server doesnt try to parse as 'utf-8' and error out
			  otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 80156ec:	212a      	movs	r1, #42	; 0x2a
 80156ee:	4823      	ldr	r0, [pc, #140]	; (801577c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80156f0:	f7fd feca 	bl	8013488 <otCoapHeaderAppendContentFormatOption>

			  // This function adds Payload Marker indicating beginning of the payload to the CoAP header
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 80156f4:	4821      	ldr	r0, [pc, #132]	; (801577c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80156f6:	f7fd ff2c 	bl	8013552 <otCoapHeaderSetPayloadMarker>

			  // creates new message with headers but with empty payload
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80156fa:	4920      	ldr	r1, [pc, #128]	; (801577c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80156fc:	2000      	movs	r0, #0
 80156fe:	f7fe f86b 	bl	80137d8 <otCoapNewMessage>
 8015702:	4602      	mov	r2, r0
 8015704:	4b1e      	ldr	r3, [pc, #120]	; (8015780 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8015706:	601a      	str	r2, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 8015708:	4b1d      	ldr	r3, [pc, #116]	; (8015780 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d100      	bne.n	8015712 <APP_THREAD_SendCoapUnicastMsg+0x9a>
 8015710:	e7fe      	b.n	8015710 <APP_THREAD_SendCoapUnicastMsg+0x98>
			  // Append bytes to a message (this is where the payload gets added)



			  //error = otMessageAppend(pOT_Message, OT_BufferSend, sizeof(OT_BufferSend));
			  error = otMessageAppend(pOT_Message, message, msgSize);
 8015712:	4b1b      	ldr	r3, [pc, #108]	; (8015780 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	7afa      	ldrb	r2, [r7, #11]
 8015718:	b292      	uxth	r2, r2
 801571a:	68f9      	ldr	r1, [r7, #12]
 801571c:	4618      	mov	r0, r3
 801571e:	f7fe fb72 	bl	8013e06 <otMessageAppend>
 8015722:	4603      	mov	r3, r0
 8015724:	461a      	mov	r2, r3
 8015726:	4b14      	ldr	r3, [pc, #80]	; (8015778 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8015728:	701a      	strb	r2, [r3, #0]

			  if (error != OT_ERROR_NONE) while(1);
 801572a:	4b13      	ldr	r3, [pc, #76]	; (8015778 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 801572c:	781b      	ldrb	r3, [r3, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d000      	beq.n	8015734 <APP_THREAD_SendCoapUnicastMsg+0xbc>
 8015732:	e7fe      	b.n	8015732 <APP_THREAD_SendCoapUnicastMsg+0xba>

			  error = otCoapSendRequest(NULL,
 8015734:	4b12      	ldr	r3, [pc, #72]	; (8015780 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8015736:	6819      	ldr	r1, [r3, #0]
 8015738:	2300      	movs	r3, #0
 801573a:	9300      	str	r3, [sp, #0]
 801573c:	2300      	movs	r3, #0
 801573e:	4a0c      	ldr	r2, [pc, #48]	; (8015770 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8015740:	2000      	movs	r0, #0
 8015742:	f7fe f877 	bl	8013834 <otCoapSendRequest>
 8015746:	4603      	mov	r3, r0
 8015748:	461a      	mov	r2, r3
 801574a:	4b0b      	ldr	r3, [pc, #44]	; (8015778 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 801574c:	701a      	strb	r2, [r3, #0]
						&OT_MessageInfo,
						NULL,
						(void*) NULL);

			  // if error: free allocated message buffer if one was allocated
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 801574e:	4b0a      	ldr	r3, [pc, #40]	; (8015778 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8015750:	781b      	ldrb	r3, [r3, #0]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d008      	beq.n	8015768 <APP_THREAD_SendCoapUnicastMsg+0xf0>
 8015756:	4b0a      	ldr	r3, [pc, #40]	; (8015780 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d004      	beq.n	8015768 <APP_THREAD_SendCoapUnicastMsg+0xf0>
			  {
				otMessageFree(pOT_Message);
 801575e:	4b08      	ldr	r3, [pc, #32]	; (8015780 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	4618      	mov	r0, r3
 8015764:	f7fe faf6 	bl	8013d54 <otMessageFree>
			  }

			  //HAL_Delay(10000);
			}while(false);

}
 8015768:	bf00      	nop
 801576a:	3714      	adds	r7, #20
 801576c:	46bd      	mov	sp, r7
 801576e:	bd90      	pop	{r4, r7, pc}
 8015770:	20027690 	.word	0x20027690
 8015774:	200276a0 	.word	0x200276a0
 8015778:	20027750 	.word	0x20027750
 801577c:	200276bc 	.word	0x200276bc
 8015780:	2002774c 	.word	0x2002774c

08015784 <APP_THREAD_SendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_SendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8015784:	b590      	push	{r4, r7, lr}
 8015786:	b085      	sub	sp, #20
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
 801578c:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 801578e:	2300      	movs	r3, #0
 8015790:	73fb      	strb	r3, [r7, #15]

  APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
 8015792:	4a1f      	ldr	r2, [pc, #124]	; (8015810 <APP_THREAD_SendDataResponse+0x8c>)
 8015794:	2101      	movs	r1, #1
 8015796:	2000      	movs	r0, #0
 8015798:	f7ef fcec 	bl	8005174 <logApplication>
  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 801579c:	2244      	movs	r2, #68	; 0x44
 801579e:	2120      	movs	r1, #32
 80157a0:	481c      	ldr	r0, [pc, #112]	; (8015814 <APP_THREAD_SendDataResponse+0x90>)
 80157a2:	f7fd fdd8 	bl	8013356 <otCoapHeaderInit>
  otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f7fd ff8d 	bl	80136c6 <otCoapHeaderGetMessageId>
 80157ac:	4603      	mov	r3, r0
 80157ae:	4619      	mov	r1, r3
 80157b0:	4818      	ldr	r0, [pc, #96]	; (8015814 <APP_THREAD_SendDataResponse+0x90>)
 80157b2:	f7fd fefc 	bl	80135ae <otCoapHeaderSetMessageId>
  otCoapHeaderSetToken(&OT_Header,
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f7fd ffe1 	bl	801377e <otCoapHeaderGetToken>
 80157bc:	4604      	mov	r4, r0
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f7fd ffaf 	bl	8013722 <otCoapHeaderGetTokenLength>
 80157c4:	4603      	mov	r3, r0
 80157c6:	461a      	mov	r2, r3
 80157c8:	4621      	mov	r1, r4
 80157ca:	4812      	ldr	r0, [pc, #72]	; (8015814 <APP_THREAD_SendDataResponse+0x90>)
 80157cc:	f7fd fdf8 	bl	80133c0 <otCoapHeaderSetToken>
      otCoapHeaderGetToken(pRequestHeader),
      otCoapHeaderGetTokenLength(pRequestHeader));

  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80157d0:	4910      	ldr	r1, [pc, #64]	; (8015814 <APP_THREAD_SendDataResponse+0x90>)
 80157d2:	2000      	movs	r0, #0
 80157d4:	f7fe f800 	bl	80137d8 <otCoapNewMessage>
 80157d8:	4602      	mov	r2, r0
 80157da:	4b0f      	ldr	r3, [pc, #60]	; (8015818 <APP_THREAD_SendDataResponse+0x94>)
 80157dc:	601a      	str	r2, [r3, #0]
  if (pOT_Message == NULL)
  {
    //APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
  }
  error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 80157de:	4b0e      	ldr	r3, [pc, #56]	; (8015818 <APP_THREAD_SendDataResponse+0x94>)
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	683a      	ldr	r2, [r7, #0]
 80157e4:	4619      	mov	r1, r3
 80157e6:	2000      	movs	r0, #0
 80157e8:	f7fe f8bd 	bl	8013966 <otCoapSendResponse>
 80157ec:	4603      	mov	r3, r0
 80157ee:	73fb      	strb	r3, [r7, #15]
  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 80157f0:	7bfb      	ldrb	r3, [r7, #15]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d008      	beq.n	8015808 <APP_THREAD_SendDataResponse+0x84>
 80157f6:	4b08      	ldr	r3, [pc, #32]	; (8015818 <APP_THREAD_SendDataResponse+0x94>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d004      	beq.n	8015808 <APP_THREAD_SendDataResponse+0x84>
  {
    otMessageFree(pOT_Message);
 80157fe:	4b06      	ldr	r3, [pc, #24]	; (8015818 <APP_THREAD_SendDataResponse+0x94>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	4618      	mov	r0, r3
 8015804:	f7fe faa6 	bl	8013d54 <otMessageFree>
    //APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
  }
}
 8015808:	bf00      	nop
 801580a:	3714      	adds	r7, #20
 801580c:	46bd      	mov	sp, r7
 801580e:	bd90      	pop	{r4, r7, pc}
 8015810:	08017d40 	.word	0x08017d40
 8015814:	200276bc 	.word	0x200276bc
 8015818:	2002774c 	.word	0x2002774c

0801581c <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 801581c:	b480      	push	{r7}
 801581e:	b083      	sub	sp, #12
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8015824:	4a04      	ldr	r2, [pc, #16]	; (8015838 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6013      	str	r3, [r2, #0]
}
 801582a:	bf00      	nop
 801582c:	370c      	adds	r7, #12
 801582e:	46bd      	mov	sp, r7
 8015830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015834:	4770      	bx	lr
 8015836:	bf00      	nop
 8015838:	20027678 	.word	0x20027678

0801583c <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 801583c:	b480      	push	{r7}
 801583e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8015840:	4b03      	ldr	r3, [pc, #12]	; (8015850 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	330c      	adds	r3, #12
}
 8015846:	4618      	mov	r0, r3
 8015848:	46bd      	mov	sp, r7
 801584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584e:	4770      	bx	lr
 8015850:	20027678 	.word	0x20027678

08015854 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8015854:	b480      	push	{r7}
 8015856:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8015858:	4b03      	ldr	r3, [pc, #12]	; (8015868 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	330b      	adds	r3, #11
}
 801585e:	4618      	mov	r0, r3
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr
 8015868:	20027678 	.word	0x20027678

0801586c <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 801586c:	b480      	push	{r7}
 801586e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8015870:	4b03      	ldr	r3, [pc, #12]	; (8015880 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	330b      	adds	r3, #11
}
 8015876:	4618      	mov	r0, r3
 8015878:	46bd      	mov	sp, r7
 801587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587e:	4770      	bx	lr
 8015880:	2002767c 	.word	0x2002767c

08015884 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b082      	sub	sp, #8
 8015888:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 801588a:	4b0f      	ldr	r3, [pc, #60]	; (80158c8 <Ot_Cmd_Transfer+0x44>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	2200      	movs	r2, #0
 8015890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015894:	725a      	strb	r2, [r3, #9]
 8015896:	2200      	movs	r2, #0
 8015898:	f042 0202 	orr.w	r2, r2, #2
 801589c:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 801589e:	4b0a      	ldr	r3, [pc, #40]	; (80158c8 <Ot_Cmd_Transfer+0x44>)
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	330c      	adds	r3, #12
 80158a4:	685b      	ldr	r3, [r3, #4]
 80158a6:	3302      	adds	r3, #2
 80158a8:	009b      	lsls	r3, r3, #2
 80158aa:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 80158ac:	4b06      	ldr	r3, [pc, #24]	; (80158c8 <Ot_Cmd_Transfer+0x44>)
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	687a      	ldr	r2, [r7, #4]
 80158b2:	b2d2      	uxtb	r2, r2
 80158b4:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 80158b6:	f7ff f9a9 	bl	8014c0c <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80158ba:	f000 f829 	bl	8015910 <Wait_Getting_Ack_From_M0>
}
 80158be:	bf00      	nop
 80158c0:	3708      	adds	r7, #8
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd80      	pop	{r7, pc}
 80158c6:	bf00      	nop
 80158c8:	20027678 	.word	0x20027678

080158cc <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b082      	sub	sp, #8
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80158d4:	f000 f82e 	bl	8015934 <Receive_Ack_From_M0>
}
 80158d8:	bf00      	nop
 80158da:	3708      	adds	r7, #8
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}

080158e0 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80158e8:	4a04      	ldr	r2, [pc, #16]	; (80158fc <TL_THREAD_NotReceived+0x1c>)
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80158ee:	f000 f82d 	bl	801594c <Receive_Notification_From_M0>
}
 80158f2:	bf00      	nop
 80158f4:	3708      	adds	r7, #8
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}
 80158fa:	bf00      	nop
 80158fc:	2002767c 	.word	0x2002767c

08015900 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8015900:	b480      	push	{r7}
 8015902:	af00      	add	r7, sp, #0

}
 8015904:	bf00      	nop
 8015906:	46bd      	mov	sp, r7
 8015908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590c:	4770      	bx	lr
	...

08015910 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8015910:	b480      	push	{r7}
 8015912:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8015914:	bf00      	nop
 8015916:	4b06      	ldr	r3, [pc, #24]	; (8015930 <Wait_Getting_Ack_From_M0+0x20>)
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d0fb      	beq.n	8015916 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 801591e:	4b04      	ldr	r3, [pc, #16]	; (8015930 <Wait_Getting_Ack_From_M0+0x20>)
 8015920:	2200      	movs	r2, #0
 8015922:	601a      	str	r2, [r3, #0]
}
 8015924:	bf00      	nop
 8015926:	46bd      	mov	sp, r7
 8015928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592c:	4770      	bx	lr
 801592e:	bf00      	nop
 8015930:	20027684 	.word	0x20027684

08015934 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8015934:	b480      	push	{r7}
 8015936:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8015938:	4b03      	ldr	r3, [pc, #12]	; (8015948 <Receive_Ack_From_M0+0x14>)
 801593a:	2201      	movs	r2, #1
 801593c:	601a      	str	r2, [r3, #0]
}
 801593e:	bf00      	nop
 8015940:	46bd      	mov	sp, r7
 8015942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015946:	4770      	bx	lr
 8015948:	20027684 	.word	0x20027684

0801594c <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8015950:	4b06      	ldr	r3, [pc, #24]	; (801596c <Receive_Notification_From_M0+0x20>)
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	3301      	adds	r3, #1
 8015956:	4a05      	ldr	r2, [pc, #20]	; (801596c <Receive_Notification_From_M0+0x20>)
 8015958:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 801595a:	4b05      	ldr	r3, [pc, #20]	; (8015970 <Receive_Notification_From_M0+0x24>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	2101      	movs	r1, #1
 8015960:	4618      	mov	r0, r3
 8015962:	f7f9 f9a3 	bl	800ecac <osThreadFlagsSet>
}
 8015966:	bf00      	nop
 8015968:	bd80      	pop	{r7, pc}
 801596a:	bf00      	nop
 801596c:	20027680 	.word	0x20027680
 8015970:	20027688 	.word	0x20027688

08015974 <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 8015974:	b580      	push	{r7, lr}
 8015976:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8015978:	4b12      	ldr	r3, [pc, #72]	; (80159c4 <RxCpltCallback+0x50>)
 801597a:	881b      	ldrh	r3, [r3, #0]
 801597c:	b29b      	uxth	r3, r3
 801597e:	2bff      	cmp	r3, #255	; 0xff
 8015980:	d818      	bhi.n	80159b4 <RxCpltCallback+0x40>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 8015982:	4b10      	ldr	r3, [pc, #64]	; (80159c4 <RxCpltCallback+0x50>)
 8015984:	881b      	ldrh	r3, [r3, #0]
 8015986:	b29b      	uxth	r3, r3
 8015988:	1c5a      	adds	r2, r3, #1
 801598a:	b291      	uxth	r1, r2
 801598c:	4a0d      	ldr	r2, [pc, #52]	; (80159c4 <RxCpltCallback+0x50>)
 801598e:	8011      	strh	r1, [r2, #0]
 8015990:	461a      	mov	r2, r3
 8015992:	4b0d      	ldr	r3, [pc, #52]	; (80159c8 <RxCpltCallback+0x54>)
 8015994:	7819      	ldrb	r1, [r3, #0]
 8015996:	4b0d      	ldr	r3, [pc, #52]	; (80159cc <RxCpltCallback+0x58>)
 8015998:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 801599a:	4b0b      	ldr	r3, [pc, #44]	; (80159c8 <RxCpltCallback+0x54>)
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	2b0d      	cmp	r3, #13
 80159a0:	d108      	bne.n	80159b4 <RxCpltCallback+0x40>
    {
      CptReceiveCmdFromUser = 1U;
 80159a2:	4b0b      	ldr	r3, [pc, #44]	; (80159d0 <RxCpltCallback+0x5c>)
 80159a4:	2201      	movs	r2, #1
 80159a6:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      osThreadFlagsSet(OsTaskCliId,1);
 80159a8:	4b0a      	ldr	r3, [pc, #40]	; (80159d4 <RxCpltCallback+0x60>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	2101      	movs	r1, #1
 80159ae:	4618      	mov	r0, r3
 80159b0:	f7f9 f97c 	bl	800ecac <osThreadFlagsSet>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 80159b4:	4b08      	ldr	r3, [pc, #32]	; (80159d8 <RxCpltCallback+0x64>)
 80159b6:	2201      	movs	r2, #1
 80159b8:	4903      	ldr	r1, [pc, #12]	; (80159c8 <RxCpltCallback+0x54>)
 80159ba:	2000      	movs	r0, #0
 80159bc:	f7ed fefc 	bl	80037b8 <HW_UART_Receive_IT>
}
 80159c0:	bf00      	nop
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	20027674 	.word	0x20027674
 80159c8:	20027474 	.word	0x20027474
 80159cc:	20027574 	.word	0x20027574
 80159d0:	20027676 	.word	0x20027676
 80159d4:	2002768c 	.word	0x2002768c
 80159d8:	08015975 	.word	0x08015975

080159dc <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 80159e0:	22ff      	movs	r2, #255	; 0xff
 80159e2:	2100      	movs	r1, #0
 80159e4:	4812      	ldr	r0, [pc, #72]	; (8015a30 <Send_CLI_To_M0+0x54>)
 80159e6:	f000 febc 	bl	8016762 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 80159ea:	4b12      	ldr	r3, [pc, #72]	; (8015a34 <Send_CLI_To_M0+0x58>)
 80159ec:	881b      	ldrh	r3, [r3, #0]
 80159ee:	b29b      	uxth	r3, r3
 80159f0:	461a      	mov	r2, r3
 80159f2:	4911      	ldr	r1, [pc, #68]	; (8015a38 <Send_CLI_To_M0+0x5c>)
 80159f4:	480e      	ldr	r0, [pc, #56]	; (8015a30 <Send_CLI_To_M0+0x54>)
 80159f6:	f000 fea9 	bl	801674c <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 80159fa:	4b0e      	ldr	r3, [pc, #56]	; (8015a34 <Send_CLI_To_M0+0x58>)
 80159fc:	881b      	ldrh	r3, [r3, #0]
 80159fe:	b29b      	uxth	r3, r3
 8015a00:	b2da      	uxtb	r2, r3
 8015a02:	4b0e      	ldr	r3, [pc, #56]	; (8015a3c <Send_CLI_To_M0+0x60>)
 8015a04:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8015a06:	4b0d      	ldr	r3, [pc, #52]	; (8015a3c <Send_CLI_To_M0+0x60>)
 8015a08:	2200      	movs	r2, #0
 8015a0a:	725a      	strb	r2, [r3, #9]
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8015a10:	4b0b      	ldr	r3, [pc, #44]	; (8015a40 <Send_CLI_To_M0+0x64>)
 8015a12:	2200      	movs	r2, #0
 8015a14:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8015a16:	4b07      	ldr	r3, [pc, #28]	; (8015a34 <Send_CLI_To_M0+0x58>)
 8015a18:	2200      	movs	r2, #0
 8015a1a:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8015a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015a20:	2100      	movs	r1, #0
 8015a22:	4805      	ldr	r0, [pc, #20]	; (8015a38 <Send_CLI_To_M0+0x5c>)
 8015a24:	f000 fe9d 	bl	8016762 <memset>

  TL_CLI_SendCmd();
 8015a28:	f7ff f8fe 	bl	8014c28 <TL_CLI_SendCmd>
}
 8015a2c:	bf00      	nop
 8015a2e:	bd80      	pop	{r7, pc}
 8015a30:	20030a5c 	.word	0x20030a5c
 8015a34:	20027674 	.word	0x20027674
 8015a38:	20027574 	.word	0x20027574
 8015a3c:	20030a50 	.word	0x20030a50
 8015a40:	20027676 	.word	0x20027676

08015a44 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8015a48:	f7ff f90a 	bl	8014c60 <TL_THREAD_CliSendAck>
}
 8015a4c:	bf00      	nop
 8015a4e:	bd80      	pop	{r7, pc}

08015a50 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8015a54:	4a08      	ldr	r2, [pc, #32]	; (8015a78 <APP_THREAD_Init_UART_CLI+0x28>)
 8015a56:	2100      	movs	r1, #0
 8015a58:	4808      	ldr	r0, [pc, #32]	; (8015a7c <APP_THREAD_Init_UART_CLI+0x2c>)
 8015a5a:	f7f9 f87b 	bl	800eb54 <osThreadNew>
 8015a5e:	4602      	mov	r2, r0
 8015a60:	4b07      	ldr	r3, [pc, #28]	; (8015a80 <APP_THREAD_Init_UART_CLI+0x30>)
 8015a62:	601a      	str	r2, [r3, #0]
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_USART1_UART_Init();
 8015a64:	f7ef fdf6 	bl	8005654 <MX_USART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 8015a68:	4b06      	ldr	r3, [pc, #24]	; (8015a84 <APP_THREAD_Init_UART_CLI+0x34>)
 8015a6a:	2201      	movs	r2, #1
 8015a6c:	4906      	ldr	r1, [pc, #24]	; (8015a88 <APP_THREAD_Init_UART_CLI+0x38>)
 8015a6e:	2000      	movs	r0, #0
 8015a70:	f7ed fea2 	bl	80037b8 <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8015a74:	bf00      	nop
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	0801816c 	.word	0x0801816c
 8015a7c:	08015223 	.word	0x08015223
 8015a80:	2002768c 	.word	0x2002768c
 8015a84:	08015975 	.word	0x08015975
 8015a88:	20027474 	.word	0x20027474

08015a8c <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8015a90:	4b06      	ldr	r3, [pc, #24]	; (8015aac <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015a92:	4a07      	ldr	r2, [pc, #28]	; (8015ab0 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8015a94:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8015a96:	4b05      	ldr	r3, [pc, #20]	; (8015aac <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015a98:	4a06      	ldr	r2, [pc, #24]	; (8015ab4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8015a9a:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8015a9c:	4b03      	ldr	r3, [pc, #12]	; (8015aac <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015a9e:	4a06      	ldr	r2, [pc, #24]	; (8015ab8 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8015aa0:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8015aa2:	4802      	ldr	r0, [pc, #8]	; (8015aac <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015aa4:	f7ff f896 	bl	8014bd4 <TL_THREAD_Init>
}
 8015aa8:	bf00      	nop
 8015aaa:	bd80      	pop	{r7, pc}
 8015aac:	200300b8 	.word	0x200300b8
 8015ab0:	20030838 	.word	0x20030838
 8015ab4:	20030944 	.word	0x20030944
 8015ab8:	20030a50 	.word	0x20030a50

08015abc <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b084      	sub	sp, #16
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	7adb      	ldrb	r3, [r3, #11]
 8015acc:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	330c      	adds	r3, #12
 8015ad2:	490b      	ldr	r1, [pc, #44]	; (8015b00 <TL_THREAD_CliNotReceived+0x44>)
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7ea fb53 	bl	8000180 <strcmp>
 8015ada:	4603      	mov	r3, r0
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d009      	beq.n	8015af4 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	f103 010c 	add.w	r1, r3, #12
 8015ae6:	7afb      	ldrb	r3, [r7, #11]
 8015ae8:	b29a      	uxth	r2, r3
 8015aea:	4b06      	ldr	r3, [pc, #24]	; (8015b04 <TL_THREAD_CliNotReceived+0x48>)
 8015aec:	2000      	movs	r0, #0
 8015aee:	f7ed fe87 	bl	8003800 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 8015af2:	e001      	b.n	8015af8 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 8015af4:	f7ff ffa6 	bl	8015a44 <Send_CLI_Ack_For_OT>
}
 8015af8:	bf00      	nop
 8015afa:	3710      	adds	r7, #16
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd80      	pop	{r7, pc}
 8015b00:	08017d6c 	.word	0x08017d6c
 8015b04:	08015b09 	.word	0x08015b09

08015b08 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 8015b0c:	f7ff ff9a 	bl	8015a44 <Send_CLI_Ack_For_OT>
}
 8015b10:	bf00      	nop
 8015b12:	bd80      	pop	{r7, pc}

08015b14 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8015b18:	4b09      	ldr	r3, [pc, #36]	; (8015b40 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d00d      	beq.n	8015b3c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8015b20:	4b07      	ldr	r3, [pc, #28]	; (8015b40 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	2b01      	cmp	r3, #1
 8015b26:	d904      	bls.n	8015b32 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8015b28:	2100      	movs	r1, #0
 8015b2a:	2000      	movs	r0, #0
 8015b2c:	f7ff f990 	bl	8014e50 <APP_THREAD_Error>
 8015b30:	e001      	b.n	8015b36 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8015b32:	f7fe f9db 	bl	8013eec <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8015b36:	4b02      	ldr	r3, [pc, #8]	; (8015b40 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8015b38:	2200      	movs	r2, #0
 8015b3a:	601a      	str	r2, [r3, #0]
  }
}
 8015b3c:	bf00      	nop
 8015b3e:	bd80      	pop	{r7, pc}
 8015b40:	20027680 	.word	0x20027680

08015b44 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8015b44:	b480      	push	{r7}
 8015b46:	b083      	sub	sp, #12
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8015b4c:	4b06      	ldr	r3, [pc, #24]	; (8015b68 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8015b4e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8015b52:	4905      	ldr	r1, [pc, #20]	; (8015b68 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	4313      	orrs	r3, r2
 8015b58:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8015b5c:	bf00      	nop
 8015b5e:	370c      	adds	r7, #12
 8015b60:	46bd      	mov	sp, r7
 8015b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b66:	4770      	bx	lr
 8015b68:	58000800 	.word	0x58000800

08015b6c <LL_EXTI_EnableRisingTrig_32_63>:
{
 8015b6c:	b480      	push	{r7}
 8015b6e:	b083      	sub	sp, #12
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8015b74:	4b05      	ldr	r3, [pc, #20]	; (8015b8c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015b76:	6a1a      	ldr	r2, [r3, #32]
 8015b78:	4904      	ldr	r1, [pc, #16]	; (8015b8c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	4313      	orrs	r3, r2
 8015b7e:	620b      	str	r3, [r1, #32]
}
 8015b80:	bf00      	nop
 8015b82:	370c      	adds	r7, #12
 8015b84:	46bd      	mov	sp, r7
 8015b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8a:	4770      	bx	lr
 8015b8c:	58000800 	.word	0x58000800

08015b90 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8015b90:	b480      	push	{r7}
 8015b92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8015b94:	4b05      	ldr	r3, [pc, #20]	; (8015bac <LL_PWR_EnableBootC2+0x1c>)
 8015b96:	68db      	ldr	r3, [r3, #12]
 8015b98:	4a04      	ldr	r2, [pc, #16]	; (8015bac <LL_PWR_EnableBootC2+0x1c>)
 8015b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015b9e:	60d3      	str	r3, [r2, #12]
}
 8015ba0:	bf00      	nop
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba8:	4770      	bx	lr
 8015baa:	bf00      	nop
 8015bac:	58000400 	.word	0x58000400

08015bb0 <LL_AHB3_GRP1_EnableClock>:
{
 8015bb0:	b480      	push	{r7}
 8015bb2:	b085      	sub	sp, #20
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8015bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	4313      	orrs	r3, r2
 8015bc6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8015bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015bcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	4013      	ands	r3, r2
 8015bd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015bd4:	68fb      	ldr	r3, [r7, #12]
}
 8015bd6:	bf00      	nop
 8015bd8:	3714      	adds	r7, #20
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be0:	4770      	bx	lr

08015be2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8015be2:	b480      	push	{r7}
 8015be4:	b083      	sub	sp, #12
 8015be6:	af00      	add	r7, sp, #0
 8015be8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	601a      	str	r2, [r3, #0]
}
 8015bf6:	bf00      	nop
 8015bf8:	370c      	adds	r7, #12
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c00:	4770      	bx	lr

08015c02 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8015c02:	b480      	push	{r7}
 8015c04:	b083      	sub	sp, #12
 8015c06:	af00      	add	r7, sp, #0
 8015c08:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	f043 0201 	orr.w	r2, r3, #1
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	601a      	str	r2, [r3, #0]
}
 8015c16:	bf00      	nop
 8015c18:	370c      	adds	r7, #12
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c20:	4770      	bx	lr

08015c22 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015c22:	b480      	push	{r7}
 8015c24:	b083      	sub	sp, #12
 8015c26:	af00      	add	r7, sp, #0
 8015c28:	6078      	str	r0, [r7, #4]
 8015c2a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	685a      	ldr	r2, [r3, #4]
 8015c30:	683b      	ldr	r3, [r7, #0]
 8015c32:	041b      	lsls	r3, r3, #16
 8015c34:	43db      	mvns	r3, r3
 8015c36:	401a      	ands	r2, r3
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	605a      	str	r2, [r3, #4]
}
 8015c3c:	bf00      	nop
 8015c3e:	370c      	adds	r7, #12
 8015c40:	46bd      	mov	sp, r7
 8015c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c46:	4770      	bx	lr

08015c48 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015c48:	b480      	push	{r7}
 8015c4a:	b083      	sub	sp, #12
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
 8015c50:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	685a      	ldr	r2, [r3, #4]
 8015c56:	683b      	ldr	r3, [r7, #0]
 8015c58:	041b      	lsls	r3, r3, #16
 8015c5a:	431a      	orrs	r2, r3
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	605a      	str	r2, [r3, #4]
}
 8015c60:	bf00      	nop
 8015c62:	370c      	adds	r7, #12
 8015c64:	46bd      	mov	sp, r7
 8015c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6a:	4770      	bx	lr

08015c6c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015c6c:	b480      	push	{r7}
 8015c6e:	b083      	sub	sp, #12
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
 8015c74:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	685a      	ldr	r2, [r3, #4]
 8015c7a:	683b      	ldr	r3, [r7, #0]
 8015c7c:	43db      	mvns	r3, r3
 8015c7e:	401a      	ands	r2, r3
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	605a      	str	r2, [r3, #4]
}
 8015c84:	bf00      	nop
 8015c86:	370c      	adds	r7, #12
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8e:	4770      	bx	lr

08015c90 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015c90:	b480      	push	{r7}
 8015c92:	b083      	sub	sp, #12
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
 8015c98:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	685a      	ldr	r2, [r3, #4]
 8015c9e:	683b      	ldr	r3, [r7, #0]
 8015ca0:	431a      	orrs	r2, r3
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	605a      	str	r2, [r3, #4]
}
 8015ca6:	bf00      	nop
 8015ca8:	370c      	adds	r7, #12
 8015caa:	46bd      	mov	sp, r7
 8015cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb0:	4770      	bx	lr

08015cb2 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015cb2:	b480      	push	{r7}
 8015cb4:	b083      	sub	sp, #12
 8015cb6:	af00      	add	r7, sp, #0
 8015cb8:	6078      	str	r0, [r7, #4]
 8015cba:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	683a      	ldr	r2, [r7, #0]
 8015cc0:	609a      	str	r2, [r3, #8]
}
 8015cc2:	bf00      	nop
 8015cc4:	370c      	adds	r7, #12
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ccc:	4770      	bx	lr

08015cce <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015cce:	b480      	push	{r7}
 8015cd0:	b083      	sub	sp, #12
 8015cd2:	af00      	add	r7, sp, #0
 8015cd4:	6078      	str	r0, [r7, #4]
 8015cd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	041a      	lsls	r2, r3, #16
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	609a      	str	r2, [r3, #8]
}
 8015ce0:	bf00      	nop
 8015ce2:	370c      	adds	r7, #12
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cea:	4770      	bx	lr

08015cec <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8015cec:	b480      	push	{r7}
 8015cee:	b083      	sub	sp, #12
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
 8015cf4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	68da      	ldr	r2, [r3, #12]
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	4013      	ands	r3, r2
 8015cfe:	683a      	ldr	r2, [r7, #0]
 8015d00:	429a      	cmp	r2, r3
 8015d02:	d101      	bne.n	8015d08 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8015d04:	2301      	movs	r3, #1
 8015d06:	e000      	b.n	8015d0a <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8015d08:	2300      	movs	r3, #0
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	370c      	adds	r7, #12
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d14:	4770      	bx	lr

08015d16 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8015d16:	b480      	push	{r7}
 8015d18:	b083      	sub	sp, #12
 8015d1a:	af00      	add	r7, sp, #0
 8015d1c:	6078      	str	r0, [r7, #4]
 8015d1e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	69da      	ldr	r2, [r3, #28]
 8015d24:	683b      	ldr	r3, [r7, #0]
 8015d26:	4013      	ands	r3, r2
 8015d28:	683a      	ldr	r2, [r7, #0]
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	d101      	bne.n	8015d32 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8015d2e:	2301      	movs	r3, #1
 8015d30:	e000      	b.n	8015d34 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8015d32:	2300      	movs	r3, #0
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	370c      	adds	r7, #12
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3e:	4770      	bx	lr

08015d40 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8015d44:	2102      	movs	r1, #2
 8015d46:	482a      	ldr	r0, [pc, #168]	; (8015df0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d48:	f7ff ffe5 	bl	8015d16 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d009      	beq.n	8015d66 <HW_IPCC_Rx_Handler+0x26>
 8015d52:	4b27      	ldr	r3, [pc, #156]	; (8015df0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d54:	685b      	ldr	r3, [r3, #4]
 8015d56:	43db      	mvns	r3, r3
 8015d58:	f003 0302 	and.w	r3, r3, #2
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d002      	beq.n	8015d66 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8015d60:	f000 f906 	bl	8015f70 <HW_IPCC_SYS_EvtHandler>
 8015d64:	e041      	b.n	8015dea <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8015d66:	2104      	movs	r1, #4
 8015d68:	4821      	ldr	r0, [pc, #132]	; (8015df0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d6a:	f7ff ffd4 	bl	8015d16 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d009      	beq.n	8015d88 <HW_IPCC_Rx_Handler+0x48>
 8015d74:	4b1e      	ldr	r3, [pc, #120]	; (8015df0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d76:	685b      	ldr	r3, [r3, #4]
 8015d78:	43db      	mvns	r3, r3
 8015d7a:	f003 0304 	and.w	r3, r3, #4
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d002      	beq.n	8015d88 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8015d82:	f000 f94f 	bl	8016024 <HW_IPCC_THREAD_NotEvtHandler>
 8015d86:	e030      	b.n	8015dea <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8015d88:	2110      	movs	r1, #16
 8015d8a:	4819      	ldr	r0, [pc, #100]	; (8015df0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d8c:	f7ff ffc3 	bl	8015d16 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015d90:	4603      	mov	r3, r0
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d009      	beq.n	8015daa <HW_IPCC_Rx_Handler+0x6a>
 8015d96:	4b16      	ldr	r3, [pc, #88]	; (8015df0 <HW_IPCC_Rx_Handler+0xb0>)
 8015d98:	685b      	ldr	r3, [r3, #4]
 8015d9a:	43db      	mvns	r3, r3
 8015d9c:	f003 0310 	and.w	r3, r3, #16
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d002      	beq.n	8015daa <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8015da4:	f000 f94a 	bl	801603c <HW_IPCC_THREAD_CliNotEvtHandler>
 8015da8:	e01f      	b.n	8015dea <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8015daa:	2101      	movs	r1, #1
 8015dac:	4810      	ldr	r0, [pc, #64]	; (8015df0 <HW_IPCC_Rx_Handler+0xb0>)
 8015dae:	f7ff ffb2 	bl	8015d16 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015db2:	4603      	mov	r3, r0
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d008      	beq.n	8015dca <HW_IPCC_Rx_Handler+0x8a>
 8015db8:	4b0d      	ldr	r3, [pc, #52]	; (8015df0 <HW_IPCC_Rx_Handler+0xb0>)
 8015dba:	685b      	ldr	r3, [r3, #4]
 8015dbc:	f003 0301 	and.w	r3, r3, #1
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d102      	bne.n	8015dca <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8015dc4:	f000 f898 	bl	8015ef8 <HW_IPCC_BLE_EvtHandler>
 8015dc8:	e00f      	b.n	8015dea <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8015dca:	2108      	movs	r1, #8
 8015dcc:	4808      	ldr	r0, [pc, #32]	; (8015df0 <HW_IPCC_Rx_Handler+0xb0>)
 8015dce:	f7ff ffa2 	bl	8015d16 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d009      	beq.n	8015dec <HW_IPCC_Rx_Handler+0xac>
 8015dd8:	4b05      	ldr	r3, [pc, #20]	; (8015df0 <HW_IPCC_Rx_Handler+0xb0>)
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	43db      	mvns	r3, r3
 8015dde:	f003 0308 	and.w	r3, r3, #8
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d002      	beq.n	8015dec <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8015de6:	f000 f975 	bl	80160d4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8015dea:	bf00      	nop
 8015dec:	bf00      	nop
}
 8015dee:	bd80      	pop	{r7, pc}
 8015df0:	58000c00 	.word	0x58000c00

08015df4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8015df8:	2102      	movs	r1, #2
 8015dfa:	482b      	ldr	r0, [pc, #172]	; (8015ea8 <HW_IPCC_Tx_Handler+0xb4>)
 8015dfc:	f7ff ff76 	bl	8015cec <LL_C1_IPCC_IsActiveFlag_CHx>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d109      	bne.n	8015e1a <HW_IPCC_Tx_Handler+0x26>
 8015e06:	4b28      	ldr	r3, [pc, #160]	; (8015ea8 <HW_IPCC_Tx_Handler+0xb4>)
 8015e08:	685b      	ldr	r3, [r3, #4]
 8015e0a:	43db      	mvns	r3, r3
 8015e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d002      	beq.n	8015e1a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8015e14:	f000 f8a0 	bl	8015f58 <HW_IPCC_SYS_CmdEvtHandler>
 8015e18:	e042      	b.n	8015ea0 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8015e1a:	2104      	movs	r1, #4
 8015e1c:	4822      	ldr	r0, [pc, #136]	; (8015ea8 <HW_IPCC_Tx_Handler+0xb4>)
 8015e1e:	f7ff ff65 	bl	8015cec <LL_C1_IPCC_IsActiveFlag_CHx>
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d109      	bne.n	8015e3c <HW_IPCC_Tx_Handler+0x48>
 8015e28:	4b1f      	ldr	r3, [pc, #124]	; (8015ea8 <HW_IPCC_Tx_Handler+0xb4>)
 8015e2a:	685b      	ldr	r3, [r3, #4]
 8015e2c:	43db      	mvns	r3, r3
 8015e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d002      	beq.n	8015e3c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8015e36:	f000 f8e9 	bl	801600c <HW_IPCC_OT_CmdEvtHandler>
 8015e3a:	e031      	b.n	8015ea0 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8015e3c:	2102      	movs	r1, #2
 8015e3e:	481a      	ldr	r0, [pc, #104]	; (8015ea8 <HW_IPCC_Tx_Handler+0xb4>)
 8015e40:	f7ff ff54 	bl	8015cec <LL_C1_IPCC_IsActiveFlag_CHx>
 8015e44:	4603      	mov	r3, r0
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d109      	bne.n	8015e5e <HW_IPCC_Tx_Handler+0x6a>
 8015e4a:	4b17      	ldr	r3, [pc, #92]	; (8015ea8 <HW_IPCC_Tx_Handler+0xb4>)
 8015e4c:	685b      	ldr	r3, [r3, #4]
 8015e4e:	43db      	mvns	r3, r3
 8015e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d002      	beq.n	8015e5e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8015e58:	f000 f87e 	bl	8015f58 <HW_IPCC_SYS_CmdEvtHandler>
 8015e5c:	e020      	b.n	8015ea0 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8015e5e:	2108      	movs	r1, #8
 8015e60:	4811      	ldr	r0, [pc, #68]	; (8015ea8 <HW_IPCC_Tx_Handler+0xb4>)
 8015e62:	f7ff ff43 	bl	8015cec <LL_C1_IPCC_IsActiveFlag_CHx>
 8015e66:	4603      	mov	r3, r0
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d109      	bne.n	8015e80 <HW_IPCC_Tx_Handler+0x8c>
 8015e6c:	4b0e      	ldr	r3, [pc, #56]	; (8015ea8 <HW_IPCC_Tx_Handler+0xb4>)
 8015e6e:	685b      	ldr	r3, [r3, #4]
 8015e70:	43db      	mvns	r3, r3
 8015e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d002      	beq.n	8015e80 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8015e7a:	f000 f90d 	bl	8016098 <HW_IPCC_MM_FreeBufHandler>
 8015e7e:	e00f      	b.n	8015ea0 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8015e80:	2120      	movs	r1, #32
 8015e82:	4809      	ldr	r0, [pc, #36]	; (8015ea8 <HW_IPCC_Tx_Handler+0xb4>)
 8015e84:	f7ff ff32 	bl	8015cec <LL_C1_IPCC_IsActiveFlag_CHx>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d109      	bne.n	8015ea2 <HW_IPCC_Tx_Handler+0xae>
 8015e8e:	4b06      	ldr	r3, [pc, #24]	; (8015ea8 <HW_IPCC_Tx_Handler+0xb4>)
 8015e90:	685b      	ldr	r3, [r3, #4]
 8015e92:	43db      	mvns	r3, r3
 8015e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d002      	beq.n	8015ea2 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8015e9c:	f000 f838 	bl	8015f10 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8015ea0:	bf00      	nop
 8015ea2:	bf00      	nop
}
 8015ea4:	bd80      	pop	{r7, pc}
 8015ea6:	bf00      	nop
 8015ea8:	58000c00 	.word	0x58000c00

08015eac <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8015eb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015eb4:	f7ff fe46 	bl	8015b44 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8015eb8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015ebc:	f7ff fe56 	bl	8015b6c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8015ec0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8015ec2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8015ec4:	f7ff fe64 	bl	8015b90 <LL_PWR_EnableBootC2>

  return;
 8015ec8:	bf00      	nop
}
 8015eca:	bd80      	pop	{r7, pc}

08015ecc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8015ed0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8015ed4:	f7ff fe6c 	bl	8015bb0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8015ed8:	4806      	ldr	r0, [pc, #24]	; (8015ef4 <HW_IPCC_Init+0x28>)
 8015eda:	f7ff fe92 	bl	8015c02 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8015ede:	4805      	ldr	r0, [pc, #20]	; (8015ef4 <HW_IPCC_Init+0x28>)
 8015ee0:	f7ff fe7f 	bl	8015be2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8015ee4:	202c      	movs	r0, #44	; 0x2c
 8015ee6:	f7f1 f9e0 	bl	80072aa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8015eea:	202d      	movs	r0, #45	; 0x2d
 8015eec:	f7f1 f9dd 	bl	80072aa <HAL_NVIC_EnableIRQ>

  return;
 8015ef0:	bf00      	nop
}
 8015ef2:	bd80      	pop	{r7, pc}
 8015ef4:	58000c00 	.word	0x58000c00

08015ef8 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8015efc:	f7fe fdda 	bl	8014ab4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8015f00:	2101      	movs	r1, #1
 8015f02:	4802      	ldr	r0, [pc, #8]	; (8015f0c <HW_IPCC_BLE_EvtHandler+0x14>)
 8015f04:	f7ff fed5 	bl	8015cb2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015f08:	bf00      	nop
}
 8015f0a:	bd80      	pop	{r7, pc}
 8015f0c:	58000c00 	.word	0x58000c00

08015f10 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8015f14:	2120      	movs	r1, #32
 8015f16:	4803      	ldr	r0, [pc, #12]	; (8015f24 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8015f18:	f7ff fe96 	bl	8015c48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8015f1c:	f7fe fde6 	bl	8014aec <HW_IPCC_BLE_AclDataAckNot>

  return;
 8015f20:	bf00      	nop
}
 8015f22:	bd80      	pop	{r7, pc}
 8015f24:	58000c00 	.word	0x58000c00

08015f28 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015f2c:	2102      	movs	r1, #2
 8015f2e:	4802      	ldr	r0, [pc, #8]	; (8015f38 <HW_IPCC_SYS_Init+0x10>)
 8015f30:	f7ff fe9c 	bl	8015c6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015f34:	bf00      	nop
}
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	58000c00 	.word	0x58000c00

08015f3c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015f40:	2102      	movs	r1, #2
 8015f42:	4804      	ldr	r0, [pc, #16]	; (8015f54 <HW_IPCC_SYS_SendCmd+0x18>)
 8015f44:	f7ff fec3 	bl	8015cce <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015f48:	2102      	movs	r1, #2
 8015f4a:	4802      	ldr	r0, [pc, #8]	; (8015f54 <HW_IPCC_SYS_SendCmd+0x18>)
 8015f4c:	f7ff fe69 	bl	8015c22 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8015f50:	bf00      	nop
}
 8015f52:	bd80      	pop	{r7, pc}
 8015f54:	58000c00 	.word	0x58000c00

08015f58 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015f5c:	2102      	movs	r1, #2
 8015f5e:	4803      	ldr	r0, [pc, #12]	; (8015f6c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8015f60:	f7ff fe72 	bl	8015c48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8015f64:	f7fe fe0a 	bl	8014b7c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8015f68:	bf00      	nop
}
 8015f6a:	bd80      	pop	{r7, pc}
 8015f6c:	58000c00 	.word	0x58000c00

08015f70 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8015f74:	f7fe fe12 	bl	8014b9c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015f78:	2102      	movs	r1, #2
 8015f7a:	4802      	ldr	r0, [pc, #8]	; (8015f84 <HW_IPCC_SYS_EvtHandler+0x14>)
 8015f7c:	f7ff fe99 	bl	8015cb2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015f80:	bf00      	nop
}
 8015f82:	bd80      	pop	{r7, pc}
 8015f84:	58000c00 	.word	0x58000c00

08015f88 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8015f8c:	2104      	movs	r1, #4
 8015f8e:	4804      	ldr	r0, [pc, #16]	; (8015fa0 <HW_IPCC_THREAD_Init+0x18>)
 8015f90:	f7ff fe6c 	bl	8015c6c <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015f94:	2110      	movs	r1, #16
 8015f96:	4802      	ldr	r0, [pc, #8]	; (8015fa0 <HW_IPCC_THREAD_Init+0x18>)
 8015f98:	f7ff fe68 	bl	8015c6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015f9c:	bf00      	nop
}
 8015f9e:	bd80      	pop	{r7, pc}
 8015fa0:	58000c00 	.word	0x58000c00

08015fa4 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8015fa8:	2104      	movs	r1, #4
 8015faa:	4804      	ldr	r0, [pc, #16]	; (8015fbc <HW_IPCC_OT_SendCmd+0x18>)
 8015fac:	f7ff fe8f 	bl	8015cce <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8015fb0:	2104      	movs	r1, #4
 8015fb2:	4802      	ldr	r0, [pc, #8]	; (8015fbc <HW_IPCC_OT_SendCmd+0x18>)
 8015fb4:	f7ff fe35 	bl	8015c22 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8015fb8:	bf00      	nop
}
 8015fba:	bd80      	pop	{r7, pc}
 8015fbc:	58000c00 	.word	0x58000c00

08015fc0 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8015fc4:	2110      	movs	r1, #16
 8015fc6:	4802      	ldr	r0, [pc, #8]	; (8015fd0 <HW_IPCC_CLI_SendCmd+0x10>)
 8015fc8:	f7ff fe81 	bl	8015cce <LL_C1_IPCC_SetFlag_CHx>

  return;
 8015fcc:	bf00      	nop
}
 8015fce:	bd80      	pop	{r7, pc}
 8015fd0:	58000c00 	.word	0x58000c00

08015fd4 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8015fd8:	2104      	movs	r1, #4
 8015fda:	4804      	ldr	r0, [pc, #16]	; (8015fec <HW_IPCC_THREAD_SendAck+0x18>)
 8015fdc:	f7ff fe69 	bl	8015cb2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8015fe0:	2104      	movs	r1, #4
 8015fe2:	4802      	ldr	r0, [pc, #8]	; (8015fec <HW_IPCC_THREAD_SendAck+0x18>)
 8015fe4:	f7ff fe42 	bl	8015c6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015fe8:	bf00      	nop
}
 8015fea:	bd80      	pop	{r7, pc}
 8015fec:	58000c00 	.word	0x58000c00

08015ff0 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015ff4:	2110      	movs	r1, #16
 8015ff6:	4804      	ldr	r0, [pc, #16]	; (8016008 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8015ff8:	f7ff fe5b 	bl	8015cb2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015ffc:	2110      	movs	r1, #16
 8015ffe:	4802      	ldr	r0, [pc, #8]	; (8016008 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8016000:	f7ff fe34 	bl	8015c6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8016004:	bf00      	nop
}
 8016006:	bd80      	pop	{r7, pc}
 8016008:	58000c00 	.word	0x58000c00

0801600c <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 801600c:	b580      	push	{r7, lr}
 801600e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8016010:	2104      	movs	r1, #4
 8016012:	4803      	ldr	r0, [pc, #12]	; (8016020 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8016014:	f7ff fe18 	bl	8015c48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8016018:	f7fe fe30 	bl	8014c7c <HW_IPCC_OT_CmdEvtNot>

  return;
 801601c:	bf00      	nop
}
 801601e:	bd80      	pop	{r7, pc}
 8016020:	58000c00 	.word	0x58000c00

08016024 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8016024:	b580      	push	{r7, lr}
 8016026:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8016028:	2104      	movs	r1, #4
 801602a:	4803      	ldr	r0, [pc, #12]	; (8016038 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 801602c:	f7ff fe30 	bl	8015c90 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8016030:	f7fe fe30 	bl	8014c94 <HW_IPCC_THREAD_EvtNot>

  return;
 8016034:	bf00      	nop
}
 8016036:	bd80      	pop	{r7, pc}
 8016038:	58000c00 	.word	0x58000c00

0801603c <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 801603c:	b580      	push	{r7, lr}
 801603e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8016040:	2110      	movs	r1, #16
 8016042:	4803      	ldr	r0, [pc, #12]	; (8016050 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8016044:	f7ff fe24 	bl	8015c90 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8016048:	f7fe fe30 	bl	8014cac <HW_IPCC_THREAD_CliEvtNot>

  return;
 801604c:	bf00      	nop
}
 801604e:	bd80      	pop	{r7, pc}
 8016050:	58000c00 	.word	0x58000c00

08016054 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b082      	sub	sp, #8
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 801605c:	2108      	movs	r1, #8
 801605e:	480c      	ldr	r0, [pc, #48]	; (8016090 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8016060:	f7ff fe44 	bl	8015cec <LL_C1_IPCC_IsActiveFlag_CHx>
 8016064:	4603      	mov	r3, r0
 8016066:	2b00      	cmp	r3, #0
 8016068:	d007      	beq.n	801607a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801606a:	4a0a      	ldr	r2, [pc, #40]	; (8016094 <HW_IPCC_MM_SendFreeBuf+0x40>)
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8016070:	2108      	movs	r1, #8
 8016072:	4807      	ldr	r0, [pc, #28]	; (8016090 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8016074:	f7ff fdd5 	bl	8015c22 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8016078:	e006      	b.n	8016088 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801607e:	2108      	movs	r1, #8
 8016080:	4803      	ldr	r0, [pc, #12]	; (8016090 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8016082:	f7ff fe24 	bl	8015cce <LL_C1_IPCC_SetFlag_CHx>
  return;
 8016086:	bf00      	nop
}
 8016088:	3708      	adds	r7, #8
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	bf00      	nop
 8016090:	58000c00 	.word	0x58000c00
 8016094:	20027798 	.word	0x20027798

08016098 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8016098:	b580      	push	{r7, lr}
 801609a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801609c:	2108      	movs	r1, #8
 801609e:	4806      	ldr	r0, [pc, #24]	; (80160b8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80160a0:	f7ff fdd2 	bl	8015c48 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80160a4:	4b05      	ldr	r3, [pc, #20]	; (80160bc <HW_IPCC_MM_FreeBufHandler+0x24>)
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80160aa:	2108      	movs	r1, #8
 80160ac:	4802      	ldr	r0, [pc, #8]	; (80160b8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80160ae:	f7ff fe0e 	bl	8015cce <LL_C1_IPCC_SetFlag_CHx>

  return;
 80160b2:	bf00      	nop
}
 80160b4:	bd80      	pop	{r7, pc}
 80160b6:	bf00      	nop
 80160b8:	58000c00 	.word	0x58000c00
 80160bc:	20027798 	.word	0x20027798

080160c0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80160c4:	2108      	movs	r1, #8
 80160c6:	4802      	ldr	r0, [pc, #8]	; (80160d0 <HW_IPCC_TRACES_Init+0x10>)
 80160c8:	f7ff fdd0 	bl	8015c6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80160cc:	bf00      	nop
}
 80160ce:	bd80      	pop	{r7, pc}
 80160d0:	58000c00 	.word	0x58000c00

080160d4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80160d8:	f7fe fe76 	bl	8014dc8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80160dc:	2108      	movs	r1, #8
 80160de:	4802      	ldr	r0, [pc, #8]	; (80160e8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80160e0:	f7ff fde7 	bl	8015cb2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80160e4:	bf00      	nop
}
 80160e6:	bd80      	pop	{r7, pc}
 80160e8:	58000c00 	.word	0x58000c00

080160ec <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 80160ec:	b480      	push	{r7}
 80160ee:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80160f0:	4b05      	ldr	r3, [pc, #20]	; (8016108 <UTIL_LPM_Init+0x1c>)
 80160f2:	2200      	movs	r2, #0
 80160f4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80160f6:	4b05      	ldr	r3, [pc, #20]	; (801610c <UTIL_LPM_Init+0x20>)
 80160f8:	2200      	movs	r2, #0
 80160fa:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80160fc:	bf00      	nop
 80160fe:	46bd      	mov	sp, r7
 8016100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016104:	4770      	bx	lr
 8016106:	bf00      	nop
 8016108:	2002779c 	.word	0x2002779c
 801610c:	200277a0 	.word	0x200277a0

08016110 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8016110:	b480      	push	{r7}
 8016112:	b087      	sub	sp, #28
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	460b      	mov	r3, r1
 801611a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801611c:	f3ef 8310 	mrs	r3, PRIMASK
 8016120:	613b      	str	r3, [r7, #16]
  return(result);
 8016122:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8016124:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016126:	b672      	cpsid	i
  
  switch(state)
 8016128:	78fb      	ldrb	r3, [r7, #3]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d009      	beq.n	8016142 <UTIL_LPM_SetOffMode+0x32>
 801612e:	2b01      	cmp	r3, #1
 8016130:	d000      	beq.n	8016134 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8016132:	e00e      	b.n	8016152 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8016134:	4b0c      	ldr	r3, [pc, #48]	; (8016168 <UTIL_LPM_SetOffMode+0x58>)
 8016136:	681a      	ldr	r2, [r3, #0]
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	4313      	orrs	r3, r2
 801613c:	4a0a      	ldr	r2, [pc, #40]	; (8016168 <UTIL_LPM_SetOffMode+0x58>)
 801613e:	6013      	str	r3, [r2, #0]
      break;
 8016140:	e007      	b.n	8016152 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	43da      	mvns	r2, r3
 8016146:	4b08      	ldr	r3, [pc, #32]	; (8016168 <UTIL_LPM_SetOffMode+0x58>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	4013      	ands	r3, r2
 801614c:	4a06      	ldr	r2, [pc, #24]	; (8016168 <UTIL_LPM_SetOffMode+0x58>)
 801614e:	6013      	str	r3, [r2, #0]
      break;
 8016150:	bf00      	nop
 8016152:	697b      	ldr	r3, [r7, #20]
 8016154:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801615c:	bf00      	nop
 801615e:	371c      	adds	r7, #28
 8016160:	46bd      	mov	sp, r7
 8016162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016166:	4770      	bx	lr
 8016168:	200277a0 	.word	0x200277a0

0801616c <arm_power_f32>:
 801616c:	b430      	push	{r4, r5}
 801616e:	088d      	lsrs	r5, r1, #2
 8016170:	eddf 5a20 	vldr	s11, [pc, #128]	; 80161f4 <arm_power_f32+0x88>
 8016174:	d020      	beq.n	80161b8 <arm_power_f32+0x4c>
 8016176:	f100 0310 	add.w	r3, r0, #16
 801617a:	462c      	mov	r4, r5
 801617c:	ed53 6a04 	vldr	s13, [r3, #-16]
 8016180:	ed13 7a03 	vldr	s14, [r3, #-12]
 8016184:	ed53 7a02 	vldr	s15, [r3, #-8]
 8016188:	ed13 6a01 	vldr	s12, [r3, #-4]
 801618c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8016190:	ee27 7a07 	vmul.f32	s14, s14, s14
 8016194:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016198:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801619c:	ee37 7a26 	vadd.f32	s14, s14, s13
 80161a0:	ee26 6a06 	vmul.f32	s12, s12, s12
 80161a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80161a8:	3c01      	subs	r4, #1
 80161aa:	f103 0310 	add.w	r3, r3, #16
 80161ae:	ee76 5a27 	vadd.f32	s11, s12, s15
 80161b2:	d1e3      	bne.n	801617c <arm_power_f32+0x10>
 80161b4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80161b8:	f011 0103 	ands.w	r1, r1, #3
 80161bc:	d015      	beq.n	80161ea <arm_power_f32+0x7e>
 80161be:	edd0 7a00 	vldr	s15, [r0]
 80161c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80161c6:	3901      	subs	r1, #1
 80161c8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80161cc:	d00d      	beq.n	80161ea <arm_power_f32+0x7e>
 80161ce:	edd0 7a01 	vldr	s15, [r0, #4]
 80161d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80161d6:	2901      	cmp	r1, #1
 80161d8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80161dc:	d005      	beq.n	80161ea <arm_power_f32+0x7e>
 80161de:	edd0 7a02 	vldr	s15, [r0, #8]
 80161e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80161e6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80161ea:	edc2 5a00 	vstr	s11, [r2]
 80161ee:	bc30      	pop	{r4, r5}
 80161f0:	4770      	bx	lr
 80161f2:	bf00      	nop
 80161f4:	00000000 	.word	0x00000000

080161f8 <arm_mat_mult_f32>:
 80161f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161fc:	8845      	ldrh	r5, [r0, #2]
 80161fe:	880b      	ldrh	r3, [r1, #0]
 8016200:	8806      	ldrh	r6, [r0, #0]
 8016202:	6847      	ldr	r7, [r0, #4]
 8016204:	6854      	ldr	r4, [r2, #4]
 8016206:	6848      	ldr	r0, [r1, #4]
 8016208:	b08b      	sub	sp, #44	; 0x2c
 801620a:	42ab      	cmp	r3, r5
 801620c:	9109      	str	r1, [sp, #36]	; 0x24
 801620e:	9604      	str	r6, [sp, #16]
 8016210:	8849      	ldrh	r1, [r1, #2]
 8016212:	f040 808a 	bne.w	801632a <arm_mat_mult_f32+0x132>
 8016216:	8815      	ldrh	r5, [r2, #0]
 8016218:	42b5      	cmp	r5, r6
 801621a:	f040 8086 	bne.w	801632a <arm_mat_mult_f32+0x132>
 801621e:	8852      	ldrh	r2, [r2, #2]
 8016220:	428a      	cmp	r2, r1
 8016222:	f040 8082 	bne.w	801632a <arm_mat_mult_f32+0x132>
 8016226:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801622a:	1d01      	adds	r1, r0, #4
 801622c:	0116      	lsls	r6, r2, #4
 801622e:	9108      	str	r1, [sp, #32]
 8016230:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8016234:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8016238:	9101      	str	r1, [sp, #4]
 801623a:	fb06 f108 	mul.w	r1, r6, r8
 801623e:	0095      	lsls	r5, r2, #2
 8016240:	9103      	str	r1, [sp, #12]
 8016242:	00d2      	lsls	r2, r2, #3
 8016244:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8016248:	f003 0903 	and.w	r9, r3, #3
 801624c:	009b      	lsls	r3, r3, #2
 801624e:	f107 0b10 	add.w	fp, r7, #16
 8016252:	eb04 0a05 	add.w	sl, r4, r5
 8016256:	9107      	str	r1, [sp, #28]
 8016258:	9202      	str	r2, [sp, #8]
 801625a:	9306      	str	r3, [sp, #24]
 801625c:	f1ab 0310 	sub.w	r3, fp, #16
 8016260:	9305      	str	r3, [sp, #20]
 8016262:	9b07      	ldr	r3, [sp, #28]
 8016264:	f8dd e020 	ldr.w	lr, [sp, #32]
 8016268:	eb03 0c0a 	add.w	ip, r3, sl
 801626c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8016334 <arm_mat_mult_f32+0x13c>
 8016270:	f1b8 0f00 	cmp.w	r8, #0
 8016274:	d053      	beq.n	801631e <arm_mat_mult_f32+0x126>
 8016276:	9b02      	ldr	r3, [sp, #8]
 8016278:	4644      	mov	r4, r8
 801627a:	18c1      	adds	r1, r0, r3
 801627c:	4602      	mov	r2, r0
 801627e:	465b      	mov	r3, fp
 8016280:	ed92 6a00 	vldr	s12, [r2]
 8016284:	ed13 7a04 	vldr	s14, [r3, #-16]
 8016288:	ed53 4a03 	vldr	s9, [r3, #-12]
 801628c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8016290:	ed91 5a00 	vldr	s10, [r1]
 8016294:	ed53 5a01 	vldr	s11, [r3, #-4]
 8016298:	1957      	adds	r7, r2, r5
 801629a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801629e:	ed97 6a00 	vldr	s12, [r7]
 80162a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162a6:	ee26 6a24 	vmul.f32	s12, s12, s9
 80162aa:	194f      	adds	r7, r1, r5
 80162ac:	ee36 6a27 	vadd.f32	s12, s12, s15
 80162b0:	ee26 7a85 	vmul.f32	s14, s13, s10
 80162b4:	edd7 7a00 	vldr	s15, [r7]
 80162b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80162bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80162c0:	3c01      	subs	r4, #1
 80162c2:	4432      	add	r2, r6
 80162c4:	4431      	add	r1, r6
 80162c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80162ca:	f103 0310 	add.w	r3, r3, #16
 80162ce:	d1d7      	bne.n	8016280 <arm_mat_mult_f32+0x88>
 80162d0:	9b03      	ldr	r3, [sp, #12]
 80162d2:	9a01      	ldr	r2, [sp, #4]
 80162d4:	4418      	add	r0, r3
 80162d6:	f1b9 0f00 	cmp.w	r9, #0
 80162da:	d00b      	beq.n	80162f4 <arm_mat_mult_f32+0xfc>
 80162dc:	464b      	mov	r3, r9
 80162de:	edd0 6a00 	vldr	s13, [r0]
 80162e2:	ecb2 7a01 	vldmia	r2!, {s14}
 80162e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80162ea:	3b01      	subs	r3, #1
 80162ec:	4428      	add	r0, r5
 80162ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80162f2:	d1f4      	bne.n	80162de <arm_mat_mult_f32+0xe6>
 80162f4:	ecec 7a01 	vstmia	ip!, {s15}
 80162f8:	45d4      	cmp	ip, sl
 80162fa:	4670      	mov	r0, lr
 80162fc:	f10e 0e04 	add.w	lr, lr, #4
 8016300:	d1b4      	bne.n	801626c <arm_mat_mult_f32+0x74>
 8016302:	9a01      	ldr	r2, [sp, #4]
 8016304:	9b06      	ldr	r3, [sp, #24]
 8016306:	4611      	mov	r1, r2
 8016308:	4419      	add	r1, r3
 801630a:	449b      	add	fp, r3
 801630c:	9b04      	ldr	r3, [sp, #16]
 801630e:	9101      	str	r1, [sp, #4]
 8016310:	3b01      	subs	r3, #1
 8016312:	44aa      	add	sl, r5
 8016314:	9304      	str	r3, [sp, #16]
 8016316:	d004      	beq.n	8016322 <arm_mat_mult_f32+0x12a>
 8016318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801631a:	6858      	ldr	r0, [r3, #4]
 801631c:	e79e      	b.n	801625c <arm_mat_mult_f32+0x64>
 801631e:	9a05      	ldr	r2, [sp, #20]
 8016320:	e7d9      	b.n	80162d6 <arm_mat_mult_f32+0xde>
 8016322:	4618      	mov	r0, r3
 8016324:	b00b      	add	sp, #44	; 0x2c
 8016326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801632a:	f06f 0002 	mvn.w	r0, #2
 801632e:	b00b      	add	sp, #44	; 0x2c
 8016330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016334:	00000000 	.word	0x00000000

08016338 <arm_sin_f32>:
 8016338:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80163b8 <arm_sin_f32+0x80>
 801633c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016340:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016348:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801634c:	d504      	bpl.n	8016358 <arm_sin_f32+0x20>
 801634e:	ee17 3a90 	vmov	r3, s15
 8016352:	3b01      	subs	r3, #1
 8016354:	ee07 3a90 	vmov	s15, r3
 8016358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801635c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80163bc <arm_sin_f32+0x84>
 8016360:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016364:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016368:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801636c:	ee17 3a90 	vmov	r3, s15
 8016370:	b29b      	uxth	r3, r3
 8016372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016376:	d21a      	bcs.n	80163ae <arm_sin_f32+0x76>
 8016378:	ee07 3a90 	vmov	s15, r3
 801637c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016380:	1c59      	adds	r1, r3, #1
 8016382:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016386:	4a0e      	ldr	r2, [pc, #56]	; (80163c0 <arm_sin_f32+0x88>)
 8016388:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801638c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016390:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016394:	ed93 7a00 	vldr	s14, [r3]
 8016398:	edd2 6a00 	vldr	s13, [r2]
 801639c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80163a0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80163a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80163a8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80163ac:	4770      	bx	lr
 80163ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 80163b2:	2101      	movs	r1, #1
 80163b4:	2300      	movs	r3, #0
 80163b6:	e7e6      	b.n	8016386 <arm_sin_f32+0x4e>
 80163b8:	3e22f983 	.word	0x3e22f983
 80163bc:	44000000 	.word	0x44000000
 80163c0:	080181dc 	.word	0x080181dc

080163c4 <arm_cos_f32>:
 80163c4:	eddf 7a21 	vldr	s15, [pc, #132]	; 801644c <arm_cos_f32+0x88>
 80163c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80163cc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80163d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80163d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80163d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163dc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80163e0:	d504      	bpl.n	80163ec <arm_cos_f32+0x28>
 80163e2:	ee17 3a90 	vmov	r3, s15
 80163e6:	3b01      	subs	r3, #1
 80163e8:	ee07 3a90 	vmov	s15, r3
 80163ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163f0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8016450 <arm_cos_f32+0x8c>
 80163f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80163f8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80163fc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016400:	ee17 3a90 	vmov	r3, s15
 8016404:	b29b      	uxth	r3, r3
 8016406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801640a:	d21a      	bcs.n	8016442 <arm_cos_f32+0x7e>
 801640c:	ee07 3a90 	vmov	s15, r3
 8016410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016414:	1c59      	adds	r1, r3, #1
 8016416:	ee30 0a67 	vsub.f32	s0, s0, s15
 801641a:	4a0e      	ldr	r2, [pc, #56]	; (8016454 <arm_cos_f32+0x90>)
 801641c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016420:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016424:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016428:	ed93 7a00 	vldr	s14, [r3]
 801642c:	edd2 6a00 	vldr	s13, [r2]
 8016430:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016434:	ee20 0a26 	vmul.f32	s0, s0, s13
 8016438:	ee67 7a87 	vmul.f32	s15, s15, s14
 801643c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016440:	4770      	bx	lr
 8016442:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016446:	2101      	movs	r1, #1
 8016448:	2300      	movs	r3, #0
 801644a:	e7e6      	b.n	801641a <arm_cos_f32+0x56>
 801644c:	3e22f983 	.word	0x3e22f983
 8016450:	44000000 	.word	0x44000000
 8016454:	080181dc 	.word	0x080181dc

08016458 <arm_sub_f32>:
 8016458:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801645c:	b4f0      	push	{r4, r5, r6, r7}
 801645e:	d033      	beq.n	80164c8 <arm_sub_f32+0x70>
 8016460:	f100 0610 	add.w	r6, r0, #16
 8016464:	f101 0510 	add.w	r5, r1, #16
 8016468:	f102 0410 	add.w	r4, r2, #16
 801646c:	4667      	mov	r7, ip
 801646e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8016472:	ed56 7a04 	vldr	s15, [r6, #-16]
 8016476:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801647a:	3f01      	subs	r7, #1
 801647c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8016480:	ed15 7a03 	vldr	s14, [r5, #-12]
 8016484:	ed56 7a03 	vldr	s15, [r6, #-12]
 8016488:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801648c:	f106 0610 	add.w	r6, r6, #16
 8016490:	ed44 7a03 	vstr	s15, [r4, #-12]
 8016494:	ed15 7a02 	vldr	s14, [r5, #-8]
 8016498:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801649c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164a0:	f105 0510 	add.w	r5, r5, #16
 80164a4:	ed44 7a02 	vstr	s15, [r4, #-8]
 80164a8:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80164ac:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80164b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164b4:	f104 0410 	add.w	r4, r4, #16
 80164b8:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80164bc:	d1d7      	bne.n	801646e <arm_sub_f32+0x16>
 80164be:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80164c2:	4420      	add	r0, r4
 80164c4:	4421      	add	r1, r4
 80164c6:	4422      	add	r2, r4
 80164c8:	f013 0303 	ands.w	r3, r3, #3
 80164cc:	d01b      	beq.n	8016506 <arm_sub_f32+0xae>
 80164ce:	edd0 7a00 	vldr	s15, [r0]
 80164d2:	ed91 7a00 	vldr	s14, [r1]
 80164d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164da:	3b01      	subs	r3, #1
 80164dc:	edc2 7a00 	vstr	s15, [r2]
 80164e0:	d011      	beq.n	8016506 <arm_sub_f32+0xae>
 80164e2:	edd0 7a01 	vldr	s15, [r0, #4]
 80164e6:	ed91 7a01 	vldr	s14, [r1, #4]
 80164ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164ee:	2b01      	cmp	r3, #1
 80164f0:	edc2 7a01 	vstr	s15, [r2, #4]
 80164f4:	d007      	beq.n	8016506 <arm_sub_f32+0xae>
 80164f6:	edd0 7a02 	vldr	s15, [r0, #8]
 80164fa:	ed91 7a02 	vldr	s14, [r1, #8]
 80164fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016502:	edc2 7a02 	vstr	s15, [r2, #8]
 8016506:	bcf0      	pop	{r4, r5, r6, r7}
 8016508:	4770      	bx	lr
 801650a:	bf00      	nop

0801650c <arm_scale_f32>:
 801650c:	b470      	push	{r4, r5, r6}
 801650e:	0896      	lsrs	r6, r2, #2
 8016510:	d025      	beq.n	801655e <arm_scale_f32+0x52>
 8016512:	f100 0410 	add.w	r4, r0, #16
 8016516:	f101 0310 	add.w	r3, r1, #16
 801651a:	4635      	mov	r5, r6
 801651c:	ed54 7a04 	vldr	s15, [r4, #-16]
 8016520:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016524:	3d01      	subs	r5, #1
 8016526:	ed43 7a04 	vstr	s15, [r3, #-16]
 801652a:	ed54 7a03 	vldr	s15, [r4, #-12]
 801652e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016532:	f104 0410 	add.w	r4, r4, #16
 8016536:	ed43 7a03 	vstr	s15, [r3, #-12]
 801653a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801653e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016542:	f103 0310 	add.w	r3, r3, #16
 8016546:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 801654a:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 801654e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016552:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8016556:	d1e1      	bne.n	801651c <arm_scale_f32+0x10>
 8016558:	0136      	lsls	r6, r6, #4
 801655a:	4430      	add	r0, r6
 801655c:	4431      	add	r1, r6
 801655e:	f012 0203 	ands.w	r2, r2, #3
 8016562:	d015      	beq.n	8016590 <arm_scale_f32+0x84>
 8016564:	edd0 7a00 	vldr	s15, [r0]
 8016568:	ee67 7a80 	vmul.f32	s15, s15, s0
 801656c:	3a01      	subs	r2, #1
 801656e:	edc1 7a00 	vstr	s15, [r1]
 8016572:	d00d      	beq.n	8016590 <arm_scale_f32+0x84>
 8016574:	edd0 7a01 	vldr	s15, [r0, #4]
 8016578:	ee67 7a80 	vmul.f32	s15, s15, s0
 801657c:	2a01      	cmp	r2, #1
 801657e:	edc1 7a01 	vstr	s15, [r1, #4]
 8016582:	d005      	beq.n	8016590 <arm_scale_f32+0x84>
 8016584:	edd0 7a02 	vldr	s15, [r0, #8]
 8016588:	ee27 0a80 	vmul.f32	s0, s15, s0
 801658c:	ed81 0a02 	vstr	s0, [r1, #8]
 8016590:	bc70      	pop	{r4, r5, r6}
 8016592:	4770      	bx	lr

08016594 <arm_dot_prod_f32>:
 8016594:	b4f0      	push	{r4, r5, r6, r7}
 8016596:	0897      	lsrs	r7, r2, #2
 8016598:	eddf 5a29 	vldr	s11, [pc, #164]	; 8016640 <arm_dot_prod_f32+0xac>
 801659c:	d02d      	beq.n	80165fa <arm_dot_prod_f32+0x66>
 801659e:	f100 0510 	add.w	r5, r0, #16
 80165a2:	f101 0410 	add.w	r4, r1, #16
 80165a6:	463e      	mov	r6, r7
 80165a8:	ed55 6a04 	vldr	s13, [r5, #-16]
 80165ac:	ed54 3a04 	vldr	s7, [r4, #-16]
 80165b0:	ed15 7a03 	vldr	s14, [r5, #-12]
 80165b4:	ed14 4a03 	vldr	s8, [r4, #-12]
 80165b8:	ed55 7a02 	vldr	s15, [r5, #-8]
 80165bc:	ed54 4a02 	vldr	s9, [r4, #-8]
 80165c0:	ed15 6a01 	vldr	s12, [r5, #-4]
 80165c4:	ed14 5a01 	vldr	s10, [r4, #-4]
 80165c8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80165cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80165d0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80165d4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80165d8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80165dc:	ee66 6a05 	vmul.f32	s13, s12, s10
 80165e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80165e4:	3e01      	subs	r6, #1
 80165e6:	f105 0510 	add.w	r5, r5, #16
 80165ea:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80165ee:	f104 0410 	add.w	r4, r4, #16
 80165f2:	d1d9      	bne.n	80165a8 <arm_dot_prod_f32+0x14>
 80165f4:	013f      	lsls	r7, r7, #4
 80165f6:	4438      	add	r0, r7
 80165f8:	4439      	add	r1, r7
 80165fa:	f012 0203 	ands.w	r2, r2, #3
 80165fe:	d01b      	beq.n	8016638 <arm_dot_prod_f32+0xa4>
 8016600:	edd1 7a00 	vldr	s15, [r1]
 8016604:	ed90 7a00 	vldr	s14, [r0]
 8016608:	ee67 7a87 	vmul.f32	s15, s15, s14
 801660c:	3a01      	subs	r2, #1
 801660e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8016612:	d011      	beq.n	8016638 <arm_dot_prod_f32+0xa4>
 8016614:	edd1 7a01 	vldr	s15, [r1, #4]
 8016618:	ed90 7a01 	vldr	s14, [r0, #4]
 801661c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016620:	2a01      	cmp	r2, #1
 8016622:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8016626:	d007      	beq.n	8016638 <arm_dot_prod_f32+0xa4>
 8016628:	edd0 7a02 	vldr	s15, [r0, #8]
 801662c:	ed91 7a02 	vldr	s14, [r1, #8]
 8016630:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016634:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8016638:	edc3 5a00 	vstr	s11, [r3]
 801663c:	bcf0      	pop	{r4, r5, r6, r7}
 801663e:	4770      	bx	lr
 8016640:	00000000 	.word	0x00000000

08016644 <arm_add_f32>:
 8016644:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8016648:	b4f0      	push	{r4, r5, r6, r7}
 801664a:	d033      	beq.n	80166b4 <arm_add_f32+0x70>
 801664c:	f100 0610 	add.w	r6, r0, #16
 8016650:	f101 0510 	add.w	r5, r1, #16
 8016654:	f102 0410 	add.w	r4, r2, #16
 8016658:	4667      	mov	r7, ip
 801665a:	ed15 7a04 	vldr	s14, [r5, #-16]
 801665e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8016662:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016666:	3f01      	subs	r7, #1
 8016668:	ed44 7a04 	vstr	s15, [r4, #-16]
 801666c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8016670:	ed56 7a03 	vldr	s15, [r6, #-12]
 8016674:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016678:	f106 0610 	add.w	r6, r6, #16
 801667c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8016680:	ed15 7a02 	vldr	s14, [r5, #-8]
 8016684:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8016688:	ee77 7a87 	vadd.f32	s15, s15, s14
 801668c:	f105 0510 	add.w	r5, r5, #16
 8016690:	ed44 7a02 	vstr	s15, [r4, #-8]
 8016694:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8016698:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801669c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80166a0:	f104 0410 	add.w	r4, r4, #16
 80166a4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80166a8:	d1d7      	bne.n	801665a <arm_add_f32+0x16>
 80166aa:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80166ae:	4420      	add	r0, r4
 80166b0:	4421      	add	r1, r4
 80166b2:	4422      	add	r2, r4
 80166b4:	f013 0303 	ands.w	r3, r3, #3
 80166b8:	d01b      	beq.n	80166f2 <arm_add_f32+0xae>
 80166ba:	edd1 7a00 	vldr	s15, [r1]
 80166be:	ed90 7a00 	vldr	s14, [r0]
 80166c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80166c6:	3b01      	subs	r3, #1
 80166c8:	edc2 7a00 	vstr	s15, [r2]
 80166cc:	d011      	beq.n	80166f2 <arm_add_f32+0xae>
 80166ce:	edd0 7a01 	vldr	s15, [r0, #4]
 80166d2:	ed91 7a01 	vldr	s14, [r1, #4]
 80166d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80166da:	2b01      	cmp	r3, #1
 80166dc:	edc2 7a01 	vstr	s15, [r2, #4]
 80166e0:	d007      	beq.n	80166f2 <arm_add_f32+0xae>
 80166e2:	edd0 7a02 	vldr	s15, [r0, #8]
 80166e6:	ed91 7a02 	vldr	s14, [r1, #8]
 80166ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80166ee:	edc2 7a02 	vstr	s15, [r2, #8]
 80166f2:	bcf0      	pop	{r4, r5, r6, r7}
 80166f4:	4770      	bx	lr
 80166f6:	bf00      	nop

080166f8 <__errno>:
 80166f8:	4b01      	ldr	r3, [pc, #4]	; (8016700 <__errno+0x8>)
 80166fa:	6818      	ldr	r0, [r3, #0]
 80166fc:	4770      	bx	lr
 80166fe:	bf00      	nop
 8016700:	200000d0 	.word	0x200000d0

08016704 <__libc_init_array>:
 8016704:	b570      	push	{r4, r5, r6, lr}
 8016706:	4e0d      	ldr	r6, [pc, #52]	; (801673c <__libc_init_array+0x38>)
 8016708:	4c0d      	ldr	r4, [pc, #52]	; (8016740 <__libc_init_array+0x3c>)
 801670a:	1ba4      	subs	r4, r4, r6
 801670c:	10a4      	asrs	r4, r4, #2
 801670e:	2500      	movs	r5, #0
 8016710:	42a5      	cmp	r5, r4
 8016712:	d109      	bne.n	8016728 <__libc_init_array+0x24>
 8016714:	4e0b      	ldr	r6, [pc, #44]	; (8016744 <__libc_init_array+0x40>)
 8016716:	4c0c      	ldr	r4, [pc, #48]	; (8016748 <__libc_init_array+0x44>)
 8016718:	f001 f8d4 	bl	80178c4 <_init>
 801671c:	1ba4      	subs	r4, r4, r6
 801671e:	10a4      	asrs	r4, r4, #2
 8016720:	2500      	movs	r5, #0
 8016722:	42a5      	cmp	r5, r4
 8016724:	d105      	bne.n	8016732 <__libc_init_array+0x2e>
 8016726:	bd70      	pop	{r4, r5, r6, pc}
 8016728:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801672c:	4798      	blx	r3
 801672e:	3501      	adds	r5, #1
 8016730:	e7ee      	b.n	8016710 <__libc_init_array+0xc>
 8016732:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016736:	4798      	blx	r3
 8016738:	3501      	adds	r5, #1
 801673a:	e7f2      	b.n	8016722 <__libc_init_array+0x1e>
 801673c:	08018a98 	.word	0x08018a98
 8016740:	08018a98 	.word	0x08018a98
 8016744:	08018a98 	.word	0x08018a98
 8016748:	08018a9c 	.word	0x08018a9c

0801674c <memcpy>:
 801674c:	b510      	push	{r4, lr}
 801674e:	1e43      	subs	r3, r0, #1
 8016750:	440a      	add	r2, r1
 8016752:	4291      	cmp	r1, r2
 8016754:	d100      	bne.n	8016758 <memcpy+0xc>
 8016756:	bd10      	pop	{r4, pc}
 8016758:	f811 4b01 	ldrb.w	r4, [r1], #1
 801675c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016760:	e7f7      	b.n	8016752 <memcpy+0x6>

08016762 <memset>:
 8016762:	4402      	add	r2, r0
 8016764:	4603      	mov	r3, r0
 8016766:	4293      	cmp	r3, r2
 8016768:	d100      	bne.n	801676c <memset+0xa>
 801676a:	4770      	bx	lr
 801676c:	f803 1b01 	strb.w	r1, [r3], #1
 8016770:	e7f9      	b.n	8016766 <memset+0x4>
	...

08016774 <pow>:
 8016774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016778:	ed2d 8b04 	vpush	{d8-d9}
 801677c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8016a50 <pow+0x2dc>
 8016780:	b08d      	sub	sp, #52	; 0x34
 8016782:	ec57 6b10 	vmov	r6, r7, d0
 8016786:	ec55 4b11 	vmov	r4, r5, d1
 801678a:	f000 f9b5 	bl	8016af8 <__ieee754_pow>
 801678e:	f999 3000 	ldrsb.w	r3, [r9]
 8016792:	9300      	str	r3, [sp, #0]
 8016794:	3301      	adds	r3, #1
 8016796:	eeb0 8a40 	vmov.f32	s16, s0
 801679a:	eef0 8a60 	vmov.f32	s17, s1
 801679e:	46c8      	mov	r8, r9
 80167a0:	d05f      	beq.n	8016862 <pow+0xee>
 80167a2:	4622      	mov	r2, r4
 80167a4:	462b      	mov	r3, r5
 80167a6:	4620      	mov	r0, r4
 80167a8:	4629      	mov	r1, r5
 80167aa:	f7ea f949 	bl	8000a40 <__aeabi_dcmpun>
 80167ae:	4683      	mov	fp, r0
 80167b0:	2800      	cmp	r0, #0
 80167b2:	d156      	bne.n	8016862 <pow+0xee>
 80167b4:	4632      	mov	r2, r6
 80167b6:	463b      	mov	r3, r7
 80167b8:	4630      	mov	r0, r6
 80167ba:	4639      	mov	r1, r7
 80167bc:	f7ea f940 	bl	8000a40 <__aeabi_dcmpun>
 80167c0:	9001      	str	r0, [sp, #4]
 80167c2:	b1e8      	cbz	r0, 8016800 <pow+0x8c>
 80167c4:	2200      	movs	r2, #0
 80167c6:	2300      	movs	r3, #0
 80167c8:	4620      	mov	r0, r4
 80167ca:	4629      	mov	r1, r5
 80167cc:	f7ea f906 	bl	80009dc <__aeabi_dcmpeq>
 80167d0:	2800      	cmp	r0, #0
 80167d2:	d046      	beq.n	8016862 <pow+0xee>
 80167d4:	2301      	movs	r3, #1
 80167d6:	9302      	str	r3, [sp, #8]
 80167d8:	4b96      	ldr	r3, [pc, #600]	; (8016a34 <pow+0x2c0>)
 80167da:	9303      	str	r3, [sp, #12]
 80167dc:	4b96      	ldr	r3, [pc, #600]	; (8016a38 <pow+0x2c4>)
 80167de:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80167e2:	2200      	movs	r2, #0
 80167e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80167e8:	9b00      	ldr	r3, [sp, #0]
 80167ea:	2b02      	cmp	r3, #2
 80167ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80167f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80167f4:	d033      	beq.n	801685e <pow+0xea>
 80167f6:	a802      	add	r0, sp, #8
 80167f8:	f000 ff50 	bl	801769c <matherr>
 80167fc:	bb48      	cbnz	r0, 8016852 <pow+0xde>
 80167fe:	e05d      	b.n	80168bc <pow+0x148>
 8016800:	f04f 0a00 	mov.w	sl, #0
 8016804:	f04f 0b00 	mov.w	fp, #0
 8016808:	4652      	mov	r2, sl
 801680a:	465b      	mov	r3, fp
 801680c:	4630      	mov	r0, r6
 801680e:	4639      	mov	r1, r7
 8016810:	f7ea f8e4 	bl	80009dc <__aeabi_dcmpeq>
 8016814:	ec4b ab19 	vmov	d9, sl, fp
 8016818:	2800      	cmp	r0, #0
 801681a:	d054      	beq.n	80168c6 <pow+0x152>
 801681c:	4652      	mov	r2, sl
 801681e:	465b      	mov	r3, fp
 8016820:	4620      	mov	r0, r4
 8016822:	4629      	mov	r1, r5
 8016824:	f7ea f8da 	bl	80009dc <__aeabi_dcmpeq>
 8016828:	4680      	mov	r8, r0
 801682a:	b318      	cbz	r0, 8016874 <pow+0x100>
 801682c:	2301      	movs	r3, #1
 801682e:	9302      	str	r3, [sp, #8]
 8016830:	4b80      	ldr	r3, [pc, #512]	; (8016a34 <pow+0x2c0>)
 8016832:	9303      	str	r3, [sp, #12]
 8016834:	9b01      	ldr	r3, [sp, #4]
 8016836:	930a      	str	r3, [sp, #40]	; 0x28
 8016838:	9b00      	ldr	r3, [sp, #0]
 801683a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801683e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016842:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d0d5      	beq.n	80167f6 <pow+0x82>
 801684a:	4b7b      	ldr	r3, [pc, #492]	; (8016a38 <pow+0x2c4>)
 801684c:	2200      	movs	r2, #0
 801684e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016854:	b11b      	cbz	r3, 801685e <pow+0xea>
 8016856:	f7ff ff4f 	bl	80166f8 <__errno>
 801685a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801685c:	6003      	str	r3, [r0, #0]
 801685e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8016862:	eeb0 0a48 	vmov.f32	s0, s16
 8016866:	eef0 0a68 	vmov.f32	s1, s17
 801686a:	b00d      	add	sp, #52	; 0x34
 801686c:	ecbd 8b04 	vpop	{d8-d9}
 8016870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016874:	ec45 4b10 	vmov	d0, r4, r5
 8016878:	f000 ff08 	bl	801768c <finite>
 801687c:	2800      	cmp	r0, #0
 801687e:	d0f0      	beq.n	8016862 <pow+0xee>
 8016880:	4652      	mov	r2, sl
 8016882:	465b      	mov	r3, fp
 8016884:	4620      	mov	r0, r4
 8016886:	4629      	mov	r1, r5
 8016888:	f7ea f8b2 	bl	80009f0 <__aeabi_dcmplt>
 801688c:	2800      	cmp	r0, #0
 801688e:	d0e8      	beq.n	8016862 <pow+0xee>
 8016890:	2301      	movs	r3, #1
 8016892:	9302      	str	r3, [sp, #8]
 8016894:	4b67      	ldr	r3, [pc, #412]	; (8016a34 <pow+0x2c0>)
 8016896:	9303      	str	r3, [sp, #12]
 8016898:	f999 3000 	ldrsb.w	r3, [r9]
 801689c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80168a0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80168a4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80168a8:	b913      	cbnz	r3, 80168b0 <pow+0x13c>
 80168aa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80168ae:	e7a2      	b.n	80167f6 <pow+0x82>
 80168b0:	4962      	ldr	r1, [pc, #392]	; (8016a3c <pow+0x2c8>)
 80168b2:	2000      	movs	r0, #0
 80168b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80168b8:	2b02      	cmp	r3, #2
 80168ba:	d19c      	bne.n	80167f6 <pow+0x82>
 80168bc:	f7ff ff1c 	bl	80166f8 <__errno>
 80168c0:	2321      	movs	r3, #33	; 0x21
 80168c2:	6003      	str	r3, [r0, #0]
 80168c4:	e7c5      	b.n	8016852 <pow+0xde>
 80168c6:	eeb0 0a48 	vmov.f32	s0, s16
 80168ca:	eef0 0a68 	vmov.f32	s1, s17
 80168ce:	f000 fedd 	bl	801768c <finite>
 80168d2:	9000      	str	r0, [sp, #0]
 80168d4:	2800      	cmp	r0, #0
 80168d6:	f040 8081 	bne.w	80169dc <pow+0x268>
 80168da:	ec47 6b10 	vmov	d0, r6, r7
 80168de:	f000 fed5 	bl	801768c <finite>
 80168e2:	2800      	cmp	r0, #0
 80168e4:	d07a      	beq.n	80169dc <pow+0x268>
 80168e6:	ec45 4b10 	vmov	d0, r4, r5
 80168ea:	f000 fecf 	bl	801768c <finite>
 80168ee:	2800      	cmp	r0, #0
 80168f0:	d074      	beq.n	80169dc <pow+0x268>
 80168f2:	ec53 2b18 	vmov	r2, r3, d8
 80168f6:	ee18 0a10 	vmov	r0, s16
 80168fa:	4619      	mov	r1, r3
 80168fc:	f7ea f8a0 	bl	8000a40 <__aeabi_dcmpun>
 8016900:	f999 9000 	ldrsb.w	r9, [r9]
 8016904:	4b4b      	ldr	r3, [pc, #300]	; (8016a34 <pow+0x2c0>)
 8016906:	b1b0      	cbz	r0, 8016936 <pow+0x1c2>
 8016908:	2201      	movs	r2, #1
 801690a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801690e:	9b00      	ldr	r3, [sp, #0]
 8016910:	930a      	str	r3, [sp, #40]	; 0x28
 8016912:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016916:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801691a:	f1b9 0f00 	cmp.w	r9, #0
 801691e:	d0c4      	beq.n	80168aa <pow+0x136>
 8016920:	4652      	mov	r2, sl
 8016922:	465b      	mov	r3, fp
 8016924:	4650      	mov	r0, sl
 8016926:	4659      	mov	r1, fp
 8016928:	f7e9 ff1a 	bl	8000760 <__aeabi_ddiv>
 801692c:	f1b9 0f02 	cmp.w	r9, #2
 8016930:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016934:	e7c1      	b.n	80168ba <pow+0x146>
 8016936:	2203      	movs	r2, #3
 8016938:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801693c:	900a      	str	r0, [sp, #40]	; 0x28
 801693e:	4629      	mov	r1, r5
 8016940:	4620      	mov	r0, r4
 8016942:	2200      	movs	r2, #0
 8016944:	4b3e      	ldr	r3, [pc, #248]	; (8016a40 <pow+0x2cc>)
 8016946:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801694a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801694e:	f7e9 fddd 	bl	800050c <__aeabi_dmul>
 8016952:	4604      	mov	r4, r0
 8016954:	460d      	mov	r5, r1
 8016956:	f1b9 0f00 	cmp.w	r9, #0
 801695a:	d124      	bne.n	80169a6 <pow+0x232>
 801695c:	4b39      	ldr	r3, [pc, #228]	; (8016a44 <pow+0x2d0>)
 801695e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016962:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016966:	4630      	mov	r0, r6
 8016968:	4652      	mov	r2, sl
 801696a:	465b      	mov	r3, fp
 801696c:	4639      	mov	r1, r7
 801696e:	f7ea f83f 	bl	80009f0 <__aeabi_dcmplt>
 8016972:	2800      	cmp	r0, #0
 8016974:	d056      	beq.n	8016a24 <pow+0x2b0>
 8016976:	ec45 4b10 	vmov	d0, r4, r5
 801697a:	f000 fe99 	bl	80176b0 <rint>
 801697e:	4622      	mov	r2, r4
 8016980:	462b      	mov	r3, r5
 8016982:	ec51 0b10 	vmov	r0, r1, d0
 8016986:	f7ea f829 	bl	80009dc <__aeabi_dcmpeq>
 801698a:	b920      	cbnz	r0, 8016996 <pow+0x222>
 801698c:	4b2e      	ldr	r3, [pc, #184]	; (8016a48 <pow+0x2d4>)
 801698e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016992:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016996:	f998 3000 	ldrsb.w	r3, [r8]
 801699a:	2b02      	cmp	r3, #2
 801699c:	d142      	bne.n	8016a24 <pow+0x2b0>
 801699e:	f7ff feab 	bl	80166f8 <__errno>
 80169a2:	2322      	movs	r3, #34	; 0x22
 80169a4:	e78d      	b.n	80168c2 <pow+0x14e>
 80169a6:	4b29      	ldr	r3, [pc, #164]	; (8016a4c <pow+0x2d8>)
 80169a8:	2200      	movs	r2, #0
 80169aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80169ae:	4630      	mov	r0, r6
 80169b0:	4652      	mov	r2, sl
 80169b2:	465b      	mov	r3, fp
 80169b4:	4639      	mov	r1, r7
 80169b6:	f7ea f81b 	bl	80009f0 <__aeabi_dcmplt>
 80169ba:	2800      	cmp	r0, #0
 80169bc:	d0eb      	beq.n	8016996 <pow+0x222>
 80169be:	ec45 4b10 	vmov	d0, r4, r5
 80169c2:	f000 fe75 	bl	80176b0 <rint>
 80169c6:	4622      	mov	r2, r4
 80169c8:	462b      	mov	r3, r5
 80169ca:	ec51 0b10 	vmov	r0, r1, d0
 80169ce:	f7ea f805 	bl	80009dc <__aeabi_dcmpeq>
 80169d2:	2800      	cmp	r0, #0
 80169d4:	d1df      	bne.n	8016996 <pow+0x222>
 80169d6:	2200      	movs	r2, #0
 80169d8:	4b18      	ldr	r3, [pc, #96]	; (8016a3c <pow+0x2c8>)
 80169da:	e7da      	b.n	8016992 <pow+0x21e>
 80169dc:	2200      	movs	r2, #0
 80169de:	2300      	movs	r3, #0
 80169e0:	ec51 0b18 	vmov	r0, r1, d8
 80169e4:	f7e9 fffa 	bl	80009dc <__aeabi_dcmpeq>
 80169e8:	2800      	cmp	r0, #0
 80169ea:	f43f af3a 	beq.w	8016862 <pow+0xee>
 80169ee:	ec47 6b10 	vmov	d0, r6, r7
 80169f2:	f000 fe4b 	bl	801768c <finite>
 80169f6:	2800      	cmp	r0, #0
 80169f8:	f43f af33 	beq.w	8016862 <pow+0xee>
 80169fc:	ec45 4b10 	vmov	d0, r4, r5
 8016a00:	f000 fe44 	bl	801768c <finite>
 8016a04:	2800      	cmp	r0, #0
 8016a06:	f43f af2c 	beq.w	8016862 <pow+0xee>
 8016a0a:	2304      	movs	r3, #4
 8016a0c:	9302      	str	r3, [sp, #8]
 8016a0e:	4b09      	ldr	r3, [pc, #36]	; (8016a34 <pow+0x2c0>)
 8016a10:	9303      	str	r3, [sp, #12]
 8016a12:	2300      	movs	r3, #0
 8016a14:	930a      	str	r3, [sp, #40]	; 0x28
 8016a16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016a1a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016a1e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8016a22:	e7b8      	b.n	8016996 <pow+0x222>
 8016a24:	a802      	add	r0, sp, #8
 8016a26:	f000 fe39 	bl	801769c <matherr>
 8016a2a:	2800      	cmp	r0, #0
 8016a2c:	f47f af11 	bne.w	8016852 <pow+0xde>
 8016a30:	e7b5      	b.n	801699e <pow+0x22a>
 8016a32:	bf00      	nop
 8016a34:	08018a40 	.word	0x08018a40
 8016a38:	3ff00000 	.word	0x3ff00000
 8016a3c:	fff00000 	.word	0xfff00000
 8016a40:	3fe00000 	.word	0x3fe00000
 8016a44:	47efffff 	.word	0x47efffff
 8016a48:	c7efffff 	.word	0xc7efffff
 8016a4c:	7ff00000 	.word	0x7ff00000
 8016a50:	20000134 	.word	0x20000134

08016a54 <sqrtf>:
 8016a54:	b510      	push	{r4, lr}
 8016a56:	ed2d 8b02 	vpush	{d8}
 8016a5a:	b08a      	sub	sp, #40	; 0x28
 8016a5c:	eeb0 8a40 	vmov.f32	s16, s0
 8016a60:	f000 fe08 	bl	8017674 <__ieee754_sqrtf>
 8016a64:	4b21      	ldr	r3, [pc, #132]	; (8016aec <sqrtf+0x98>)
 8016a66:	f993 4000 	ldrsb.w	r4, [r3]
 8016a6a:	1c63      	adds	r3, r4, #1
 8016a6c:	d02c      	beq.n	8016ac8 <sqrtf+0x74>
 8016a6e:	eeb4 8a48 	vcmp.f32	s16, s16
 8016a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a76:	d627      	bvs.n	8016ac8 <sqrtf+0x74>
 8016a78:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a80:	d522      	bpl.n	8016ac8 <sqrtf+0x74>
 8016a82:	2301      	movs	r3, #1
 8016a84:	9300      	str	r3, [sp, #0]
 8016a86:	4b1a      	ldr	r3, [pc, #104]	; (8016af0 <sqrtf+0x9c>)
 8016a88:	9301      	str	r3, [sp, #4]
 8016a8a:	ee18 0a10 	vmov	r0, s16
 8016a8e:	2300      	movs	r3, #0
 8016a90:	9308      	str	r3, [sp, #32]
 8016a92:	f7e9 fce3 	bl	800045c <__aeabi_f2d>
 8016a96:	2200      	movs	r2, #0
 8016a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	b9ac      	cbnz	r4, 8016ad0 <sqrtf+0x7c>
 8016aa4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016aa8:	4668      	mov	r0, sp
 8016aaa:	f000 fdf7 	bl	801769c <matherr>
 8016aae:	b1b8      	cbz	r0, 8016ae0 <sqrtf+0x8c>
 8016ab0:	9b08      	ldr	r3, [sp, #32]
 8016ab2:	b11b      	cbz	r3, 8016abc <sqrtf+0x68>
 8016ab4:	f7ff fe20 	bl	80166f8 <__errno>
 8016ab8:	9b08      	ldr	r3, [sp, #32]
 8016aba:	6003      	str	r3, [r0, #0]
 8016abc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016ac0:	f7e9 ffd4 	bl	8000a6c <__aeabi_d2f>
 8016ac4:	ee00 0a10 	vmov	s0, r0
 8016ac8:	b00a      	add	sp, #40	; 0x28
 8016aca:	ecbd 8b02 	vpop	{d8}
 8016ace:	bd10      	pop	{r4, pc}
 8016ad0:	4610      	mov	r0, r2
 8016ad2:	4619      	mov	r1, r3
 8016ad4:	f7e9 fe44 	bl	8000760 <__aeabi_ddiv>
 8016ad8:	2c02      	cmp	r4, #2
 8016ada:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016ade:	d1e3      	bne.n	8016aa8 <sqrtf+0x54>
 8016ae0:	f7ff fe0a 	bl	80166f8 <__errno>
 8016ae4:	2321      	movs	r3, #33	; 0x21
 8016ae6:	6003      	str	r3, [r0, #0]
 8016ae8:	e7e2      	b.n	8016ab0 <sqrtf+0x5c>
 8016aea:	bf00      	nop
 8016aec:	20000134 	.word	0x20000134
 8016af0:	08018a44 	.word	0x08018a44
 8016af4:	00000000 	.word	0x00000000

08016af8 <__ieee754_pow>:
 8016af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016afc:	b091      	sub	sp, #68	; 0x44
 8016afe:	ed8d 1b00 	vstr	d1, [sp]
 8016b02:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016b06:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016b0a:	ea58 0302 	orrs.w	r3, r8, r2
 8016b0e:	ec57 6b10 	vmov	r6, r7, d0
 8016b12:	f000 84be 	beq.w	8017492 <__ieee754_pow+0x99a>
 8016b16:	4b7a      	ldr	r3, [pc, #488]	; (8016d00 <__ieee754_pow+0x208>)
 8016b18:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016b1c:	429c      	cmp	r4, r3
 8016b1e:	463d      	mov	r5, r7
 8016b20:	ee10 aa10 	vmov	sl, s0
 8016b24:	dc09      	bgt.n	8016b3a <__ieee754_pow+0x42>
 8016b26:	d103      	bne.n	8016b30 <__ieee754_pow+0x38>
 8016b28:	b93e      	cbnz	r6, 8016b3a <__ieee754_pow+0x42>
 8016b2a:	45a0      	cmp	r8, r4
 8016b2c:	dc0d      	bgt.n	8016b4a <__ieee754_pow+0x52>
 8016b2e:	e001      	b.n	8016b34 <__ieee754_pow+0x3c>
 8016b30:	4598      	cmp	r8, r3
 8016b32:	dc02      	bgt.n	8016b3a <__ieee754_pow+0x42>
 8016b34:	4598      	cmp	r8, r3
 8016b36:	d10e      	bne.n	8016b56 <__ieee754_pow+0x5e>
 8016b38:	b16a      	cbz	r2, 8016b56 <__ieee754_pow+0x5e>
 8016b3a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016b3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016b42:	ea54 030a 	orrs.w	r3, r4, sl
 8016b46:	f000 84a4 	beq.w	8017492 <__ieee754_pow+0x99a>
 8016b4a:	486e      	ldr	r0, [pc, #440]	; (8016d04 <__ieee754_pow+0x20c>)
 8016b4c:	b011      	add	sp, #68	; 0x44
 8016b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b52:	f000 bda5 	b.w	80176a0 <nan>
 8016b56:	2d00      	cmp	r5, #0
 8016b58:	da53      	bge.n	8016c02 <__ieee754_pow+0x10a>
 8016b5a:	4b6b      	ldr	r3, [pc, #428]	; (8016d08 <__ieee754_pow+0x210>)
 8016b5c:	4598      	cmp	r8, r3
 8016b5e:	dc4d      	bgt.n	8016bfc <__ieee754_pow+0x104>
 8016b60:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016b64:	4598      	cmp	r8, r3
 8016b66:	dd4c      	ble.n	8016c02 <__ieee754_pow+0x10a>
 8016b68:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016b6c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016b70:	2b14      	cmp	r3, #20
 8016b72:	dd26      	ble.n	8016bc2 <__ieee754_pow+0xca>
 8016b74:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016b78:	fa22 f103 	lsr.w	r1, r2, r3
 8016b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8016b80:	4293      	cmp	r3, r2
 8016b82:	d13e      	bne.n	8016c02 <__ieee754_pow+0x10a>
 8016b84:	f001 0101 	and.w	r1, r1, #1
 8016b88:	f1c1 0b02 	rsb	fp, r1, #2
 8016b8c:	2a00      	cmp	r2, #0
 8016b8e:	d15b      	bne.n	8016c48 <__ieee754_pow+0x150>
 8016b90:	4b5b      	ldr	r3, [pc, #364]	; (8016d00 <__ieee754_pow+0x208>)
 8016b92:	4598      	cmp	r8, r3
 8016b94:	d124      	bne.n	8016be0 <__ieee754_pow+0xe8>
 8016b96:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016b9a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016b9e:	ea53 030a 	orrs.w	r3, r3, sl
 8016ba2:	f000 8476 	beq.w	8017492 <__ieee754_pow+0x99a>
 8016ba6:	4b59      	ldr	r3, [pc, #356]	; (8016d0c <__ieee754_pow+0x214>)
 8016ba8:	429c      	cmp	r4, r3
 8016baa:	dd2d      	ble.n	8016c08 <__ieee754_pow+0x110>
 8016bac:	f1b9 0f00 	cmp.w	r9, #0
 8016bb0:	f280 8473 	bge.w	801749a <__ieee754_pow+0x9a2>
 8016bb4:	2000      	movs	r0, #0
 8016bb6:	2100      	movs	r1, #0
 8016bb8:	ec41 0b10 	vmov	d0, r0, r1
 8016bbc:	b011      	add	sp, #68	; 0x44
 8016bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bc2:	2a00      	cmp	r2, #0
 8016bc4:	d13e      	bne.n	8016c44 <__ieee754_pow+0x14c>
 8016bc6:	f1c3 0314 	rsb	r3, r3, #20
 8016bca:	fa48 f103 	asr.w	r1, r8, r3
 8016bce:	fa01 f303 	lsl.w	r3, r1, r3
 8016bd2:	4543      	cmp	r3, r8
 8016bd4:	f040 8469 	bne.w	80174aa <__ieee754_pow+0x9b2>
 8016bd8:	f001 0101 	and.w	r1, r1, #1
 8016bdc:	f1c1 0b02 	rsb	fp, r1, #2
 8016be0:	4b4b      	ldr	r3, [pc, #300]	; (8016d10 <__ieee754_pow+0x218>)
 8016be2:	4598      	cmp	r8, r3
 8016be4:	d118      	bne.n	8016c18 <__ieee754_pow+0x120>
 8016be6:	f1b9 0f00 	cmp.w	r9, #0
 8016bea:	f280 845a 	bge.w	80174a2 <__ieee754_pow+0x9aa>
 8016bee:	4948      	ldr	r1, [pc, #288]	; (8016d10 <__ieee754_pow+0x218>)
 8016bf0:	4632      	mov	r2, r6
 8016bf2:	463b      	mov	r3, r7
 8016bf4:	2000      	movs	r0, #0
 8016bf6:	f7e9 fdb3 	bl	8000760 <__aeabi_ddiv>
 8016bfa:	e7dd      	b.n	8016bb8 <__ieee754_pow+0xc0>
 8016bfc:	f04f 0b02 	mov.w	fp, #2
 8016c00:	e7c4      	b.n	8016b8c <__ieee754_pow+0x94>
 8016c02:	f04f 0b00 	mov.w	fp, #0
 8016c06:	e7c1      	b.n	8016b8c <__ieee754_pow+0x94>
 8016c08:	f1b9 0f00 	cmp.w	r9, #0
 8016c0c:	dad2      	bge.n	8016bb4 <__ieee754_pow+0xbc>
 8016c0e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016c12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016c16:	e7cf      	b.n	8016bb8 <__ieee754_pow+0xc0>
 8016c18:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016c1c:	d106      	bne.n	8016c2c <__ieee754_pow+0x134>
 8016c1e:	4632      	mov	r2, r6
 8016c20:	463b      	mov	r3, r7
 8016c22:	4610      	mov	r0, r2
 8016c24:	4619      	mov	r1, r3
 8016c26:	f7e9 fc71 	bl	800050c <__aeabi_dmul>
 8016c2a:	e7c5      	b.n	8016bb8 <__ieee754_pow+0xc0>
 8016c2c:	4b39      	ldr	r3, [pc, #228]	; (8016d14 <__ieee754_pow+0x21c>)
 8016c2e:	4599      	cmp	r9, r3
 8016c30:	d10a      	bne.n	8016c48 <__ieee754_pow+0x150>
 8016c32:	2d00      	cmp	r5, #0
 8016c34:	db08      	blt.n	8016c48 <__ieee754_pow+0x150>
 8016c36:	ec47 6b10 	vmov	d0, r6, r7
 8016c3a:	b011      	add	sp, #68	; 0x44
 8016c3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c40:	f000 bc68 	b.w	8017514 <__ieee754_sqrt>
 8016c44:	f04f 0b00 	mov.w	fp, #0
 8016c48:	ec47 6b10 	vmov	d0, r6, r7
 8016c4c:	f000 fd15 	bl	801767a <fabs>
 8016c50:	ec51 0b10 	vmov	r0, r1, d0
 8016c54:	f1ba 0f00 	cmp.w	sl, #0
 8016c58:	d127      	bne.n	8016caa <__ieee754_pow+0x1b2>
 8016c5a:	b124      	cbz	r4, 8016c66 <__ieee754_pow+0x16e>
 8016c5c:	4b2c      	ldr	r3, [pc, #176]	; (8016d10 <__ieee754_pow+0x218>)
 8016c5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016c62:	429a      	cmp	r2, r3
 8016c64:	d121      	bne.n	8016caa <__ieee754_pow+0x1b2>
 8016c66:	f1b9 0f00 	cmp.w	r9, #0
 8016c6a:	da05      	bge.n	8016c78 <__ieee754_pow+0x180>
 8016c6c:	4602      	mov	r2, r0
 8016c6e:	460b      	mov	r3, r1
 8016c70:	2000      	movs	r0, #0
 8016c72:	4927      	ldr	r1, [pc, #156]	; (8016d10 <__ieee754_pow+0x218>)
 8016c74:	f7e9 fd74 	bl	8000760 <__aeabi_ddiv>
 8016c78:	2d00      	cmp	r5, #0
 8016c7a:	da9d      	bge.n	8016bb8 <__ieee754_pow+0xc0>
 8016c7c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016c80:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016c84:	ea54 030b 	orrs.w	r3, r4, fp
 8016c88:	d108      	bne.n	8016c9c <__ieee754_pow+0x1a4>
 8016c8a:	4602      	mov	r2, r0
 8016c8c:	460b      	mov	r3, r1
 8016c8e:	4610      	mov	r0, r2
 8016c90:	4619      	mov	r1, r3
 8016c92:	f7e9 fa83 	bl	800019c <__aeabi_dsub>
 8016c96:	4602      	mov	r2, r0
 8016c98:	460b      	mov	r3, r1
 8016c9a:	e7ac      	b.n	8016bf6 <__ieee754_pow+0xfe>
 8016c9c:	f1bb 0f01 	cmp.w	fp, #1
 8016ca0:	d18a      	bne.n	8016bb8 <__ieee754_pow+0xc0>
 8016ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016ca6:	4619      	mov	r1, r3
 8016ca8:	e786      	b.n	8016bb8 <__ieee754_pow+0xc0>
 8016caa:	0fed      	lsrs	r5, r5, #31
 8016cac:	1e6b      	subs	r3, r5, #1
 8016cae:	930d      	str	r3, [sp, #52]	; 0x34
 8016cb0:	ea5b 0303 	orrs.w	r3, fp, r3
 8016cb4:	d102      	bne.n	8016cbc <__ieee754_pow+0x1c4>
 8016cb6:	4632      	mov	r2, r6
 8016cb8:	463b      	mov	r3, r7
 8016cba:	e7e8      	b.n	8016c8e <__ieee754_pow+0x196>
 8016cbc:	4b16      	ldr	r3, [pc, #88]	; (8016d18 <__ieee754_pow+0x220>)
 8016cbe:	4598      	cmp	r8, r3
 8016cc0:	f340 80fe 	ble.w	8016ec0 <__ieee754_pow+0x3c8>
 8016cc4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016cc8:	4598      	cmp	r8, r3
 8016cca:	dd0a      	ble.n	8016ce2 <__ieee754_pow+0x1ea>
 8016ccc:	4b0f      	ldr	r3, [pc, #60]	; (8016d0c <__ieee754_pow+0x214>)
 8016cce:	429c      	cmp	r4, r3
 8016cd0:	dc0d      	bgt.n	8016cee <__ieee754_pow+0x1f6>
 8016cd2:	f1b9 0f00 	cmp.w	r9, #0
 8016cd6:	f6bf af6d 	bge.w	8016bb4 <__ieee754_pow+0xbc>
 8016cda:	a307      	add	r3, pc, #28	; (adr r3, 8016cf8 <__ieee754_pow+0x200>)
 8016cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ce0:	e79f      	b.n	8016c22 <__ieee754_pow+0x12a>
 8016ce2:	4b0e      	ldr	r3, [pc, #56]	; (8016d1c <__ieee754_pow+0x224>)
 8016ce4:	429c      	cmp	r4, r3
 8016ce6:	ddf4      	ble.n	8016cd2 <__ieee754_pow+0x1da>
 8016ce8:	4b09      	ldr	r3, [pc, #36]	; (8016d10 <__ieee754_pow+0x218>)
 8016cea:	429c      	cmp	r4, r3
 8016cec:	dd18      	ble.n	8016d20 <__ieee754_pow+0x228>
 8016cee:	f1b9 0f00 	cmp.w	r9, #0
 8016cf2:	dcf2      	bgt.n	8016cda <__ieee754_pow+0x1e2>
 8016cf4:	e75e      	b.n	8016bb4 <__ieee754_pow+0xbc>
 8016cf6:	bf00      	nop
 8016cf8:	8800759c 	.word	0x8800759c
 8016cfc:	7e37e43c 	.word	0x7e37e43c
 8016d00:	7ff00000 	.word	0x7ff00000
 8016d04:	08018a49 	.word	0x08018a49
 8016d08:	433fffff 	.word	0x433fffff
 8016d0c:	3fefffff 	.word	0x3fefffff
 8016d10:	3ff00000 	.word	0x3ff00000
 8016d14:	3fe00000 	.word	0x3fe00000
 8016d18:	41e00000 	.word	0x41e00000
 8016d1c:	3feffffe 	.word	0x3feffffe
 8016d20:	2200      	movs	r2, #0
 8016d22:	4b63      	ldr	r3, [pc, #396]	; (8016eb0 <__ieee754_pow+0x3b8>)
 8016d24:	f7e9 fa3a 	bl	800019c <__aeabi_dsub>
 8016d28:	a355      	add	r3, pc, #340	; (adr r3, 8016e80 <__ieee754_pow+0x388>)
 8016d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d2e:	4604      	mov	r4, r0
 8016d30:	460d      	mov	r5, r1
 8016d32:	f7e9 fbeb 	bl	800050c <__aeabi_dmul>
 8016d36:	a354      	add	r3, pc, #336	; (adr r3, 8016e88 <__ieee754_pow+0x390>)
 8016d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d3c:	4606      	mov	r6, r0
 8016d3e:	460f      	mov	r7, r1
 8016d40:	4620      	mov	r0, r4
 8016d42:	4629      	mov	r1, r5
 8016d44:	f7e9 fbe2 	bl	800050c <__aeabi_dmul>
 8016d48:	2200      	movs	r2, #0
 8016d4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d4e:	4b59      	ldr	r3, [pc, #356]	; (8016eb4 <__ieee754_pow+0x3bc>)
 8016d50:	4620      	mov	r0, r4
 8016d52:	4629      	mov	r1, r5
 8016d54:	f7e9 fbda 	bl	800050c <__aeabi_dmul>
 8016d58:	4602      	mov	r2, r0
 8016d5a:	460b      	mov	r3, r1
 8016d5c:	a14c      	add	r1, pc, #304	; (adr r1, 8016e90 <__ieee754_pow+0x398>)
 8016d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d62:	f7e9 fa1b 	bl	800019c <__aeabi_dsub>
 8016d66:	4622      	mov	r2, r4
 8016d68:	462b      	mov	r3, r5
 8016d6a:	f7e9 fbcf 	bl	800050c <__aeabi_dmul>
 8016d6e:	4602      	mov	r2, r0
 8016d70:	460b      	mov	r3, r1
 8016d72:	2000      	movs	r0, #0
 8016d74:	4950      	ldr	r1, [pc, #320]	; (8016eb8 <__ieee754_pow+0x3c0>)
 8016d76:	f7e9 fa11 	bl	800019c <__aeabi_dsub>
 8016d7a:	4622      	mov	r2, r4
 8016d7c:	462b      	mov	r3, r5
 8016d7e:	4680      	mov	r8, r0
 8016d80:	4689      	mov	r9, r1
 8016d82:	4620      	mov	r0, r4
 8016d84:	4629      	mov	r1, r5
 8016d86:	f7e9 fbc1 	bl	800050c <__aeabi_dmul>
 8016d8a:	4602      	mov	r2, r0
 8016d8c:	460b      	mov	r3, r1
 8016d8e:	4640      	mov	r0, r8
 8016d90:	4649      	mov	r1, r9
 8016d92:	f7e9 fbbb 	bl	800050c <__aeabi_dmul>
 8016d96:	a340      	add	r3, pc, #256	; (adr r3, 8016e98 <__ieee754_pow+0x3a0>)
 8016d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d9c:	f7e9 fbb6 	bl	800050c <__aeabi_dmul>
 8016da0:	4602      	mov	r2, r0
 8016da2:	460b      	mov	r3, r1
 8016da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016da8:	f7e9 f9f8 	bl	800019c <__aeabi_dsub>
 8016dac:	4602      	mov	r2, r0
 8016dae:	460b      	mov	r3, r1
 8016db0:	4604      	mov	r4, r0
 8016db2:	460d      	mov	r5, r1
 8016db4:	4630      	mov	r0, r6
 8016db6:	4639      	mov	r1, r7
 8016db8:	f7e9 f9f2 	bl	80001a0 <__adddf3>
 8016dbc:	2000      	movs	r0, #0
 8016dbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016dc2:	4632      	mov	r2, r6
 8016dc4:	463b      	mov	r3, r7
 8016dc6:	f7e9 f9e9 	bl	800019c <__aeabi_dsub>
 8016dca:	4602      	mov	r2, r0
 8016dcc:	460b      	mov	r3, r1
 8016dce:	4620      	mov	r0, r4
 8016dd0:	4629      	mov	r1, r5
 8016dd2:	f7e9 f9e3 	bl	800019c <__aeabi_dsub>
 8016dd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016dd8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016ddc:	4313      	orrs	r3, r2
 8016dde:	4606      	mov	r6, r0
 8016de0:	460f      	mov	r7, r1
 8016de2:	f040 81eb 	bne.w	80171bc <__ieee754_pow+0x6c4>
 8016de6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016ea0 <__ieee754_pow+0x3a8>
 8016dea:	e9dd 4500 	ldrd	r4, r5, [sp]
 8016dee:	2400      	movs	r4, #0
 8016df0:	4622      	mov	r2, r4
 8016df2:	462b      	mov	r3, r5
 8016df4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016df8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016dfc:	f7e9 f9ce 	bl	800019c <__aeabi_dsub>
 8016e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016e04:	f7e9 fb82 	bl	800050c <__aeabi_dmul>
 8016e08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e0c:	4680      	mov	r8, r0
 8016e0e:	4689      	mov	r9, r1
 8016e10:	4630      	mov	r0, r6
 8016e12:	4639      	mov	r1, r7
 8016e14:	f7e9 fb7a 	bl	800050c <__aeabi_dmul>
 8016e18:	4602      	mov	r2, r0
 8016e1a:	460b      	mov	r3, r1
 8016e1c:	4640      	mov	r0, r8
 8016e1e:	4649      	mov	r1, r9
 8016e20:	f7e9 f9be 	bl	80001a0 <__adddf3>
 8016e24:	4622      	mov	r2, r4
 8016e26:	462b      	mov	r3, r5
 8016e28:	4680      	mov	r8, r0
 8016e2a:	4689      	mov	r9, r1
 8016e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016e30:	f7e9 fb6c 	bl	800050c <__aeabi_dmul>
 8016e34:	460b      	mov	r3, r1
 8016e36:	4604      	mov	r4, r0
 8016e38:	460d      	mov	r5, r1
 8016e3a:	4602      	mov	r2, r0
 8016e3c:	4649      	mov	r1, r9
 8016e3e:	4640      	mov	r0, r8
 8016e40:	e9cd 4500 	strd	r4, r5, [sp]
 8016e44:	f7e9 f9ac 	bl	80001a0 <__adddf3>
 8016e48:	4b1c      	ldr	r3, [pc, #112]	; (8016ebc <__ieee754_pow+0x3c4>)
 8016e4a:	4299      	cmp	r1, r3
 8016e4c:	4606      	mov	r6, r0
 8016e4e:	460f      	mov	r7, r1
 8016e50:	468b      	mov	fp, r1
 8016e52:	f340 82f7 	ble.w	8017444 <__ieee754_pow+0x94c>
 8016e56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016e5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016e5e:	4303      	orrs	r3, r0
 8016e60:	f000 81ea 	beq.w	8017238 <__ieee754_pow+0x740>
 8016e64:	a310      	add	r3, pc, #64	; (adr r3, 8016ea8 <__ieee754_pow+0x3b0>)
 8016e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016e6e:	f7e9 fb4d 	bl	800050c <__aeabi_dmul>
 8016e72:	a30d      	add	r3, pc, #52	; (adr r3, 8016ea8 <__ieee754_pow+0x3b0>)
 8016e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e78:	e6d5      	b.n	8016c26 <__ieee754_pow+0x12e>
 8016e7a:	bf00      	nop
 8016e7c:	f3af 8000 	nop.w
 8016e80:	60000000 	.word	0x60000000
 8016e84:	3ff71547 	.word	0x3ff71547
 8016e88:	f85ddf44 	.word	0xf85ddf44
 8016e8c:	3e54ae0b 	.word	0x3e54ae0b
 8016e90:	55555555 	.word	0x55555555
 8016e94:	3fd55555 	.word	0x3fd55555
 8016e98:	652b82fe 	.word	0x652b82fe
 8016e9c:	3ff71547 	.word	0x3ff71547
 8016ea0:	00000000 	.word	0x00000000
 8016ea4:	bff00000 	.word	0xbff00000
 8016ea8:	8800759c 	.word	0x8800759c
 8016eac:	7e37e43c 	.word	0x7e37e43c
 8016eb0:	3ff00000 	.word	0x3ff00000
 8016eb4:	3fd00000 	.word	0x3fd00000
 8016eb8:	3fe00000 	.word	0x3fe00000
 8016ebc:	408fffff 	.word	0x408fffff
 8016ec0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016ec4:	f04f 0200 	mov.w	r2, #0
 8016ec8:	da05      	bge.n	8016ed6 <__ieee754_pow+0x3de>
 8016eca:	4bd3      	ldr	r3, [pc, #844]	; (8017218 <__ieee754_pow+0x720>)
 8016ecc:	f7e9 fb1e 	bl	800050c <__aeabi_dmul>
 8016ed0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016ed4:	460c      	mov	r4, r1
 8016ed6:	1523      	asrs	r3, r4, #20
 8016ed8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016edc:	4413      	add	r3, r2
 8016ede:	9309      	str	r3, [sp, #36]	; 0x24
 8016ee0:	4bce      	ldr	r3, [pc, #824]	; (801721c <__ieee754_pow+0x724>)
 8016ee2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016ee6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016eea:	429c      	cmp	r4, r3
 8016eec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016ef0:	dd08      	ble.n	8016f04 <__ieee754_pow+0x40c>
 8016ef2:	4bcb      	ldr	r3, [pc, #812]	; (8017220 <__ieee754_pow+0x728>)
 8016ef4:	429c      	cmp	r4, r3
 8016ef6:	f340 815e 	ble.w	80171b6 <__ieee754_pow+0x6be>
 8016efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016efc:	3301      	adds	r3, #1
 8016efe:	9309      	str	r3, [sp, #36]	; 0x24
 8016f00:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016f04:	f04f 0a00 	mov.w	sl, #0
 8016f08:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016f0c:	930c      	str	r3, [sp, #48]	; 0x30
 8016f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016f10:	4bc4      	ldr	r3, [pc, #784]	; (8017224 <__ieee754_pow+0x72c>)
 8016f12:	4413      	add	r3, r2
 8016f14:	ed93 7b00 	vldr	d7, [r3]
 8016f18:	4629      	mov	r1, r5
 8016f1a:	ec53 2b17 	vmov	r2, r3, d7
 8016f1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016f22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016f26:	f7e9 f939 	bl	800019c <__aeabi_dsub>
 8016f2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016f2e:	4606      	mov	r6, r0
 8016f30:	460f      	mov	r7, r1
 8016f32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016f36:	f7e9 f933 	bl	80001a0 <__adddf3>
 8016f3a:	4602      	mov	r2, r0
 8016f3c:	460b      	mov	r3, r1
 8016f3e:	2000      	movs	r0, #0
 8016f40:	49b9      	ldr	r1, [pc, #740]	; (8017228 <__ieee754_pow+0x730>)
 8016f42:	f7e9 fc0d 	bl	8000760 <__aeabi_ddiv>
 8016f46:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016f4a:	4602      	mov	r2, r0
 8016f4c:	460b      	mov	r3, r1
 8016f4e:	4630      	mov	r0, r6
 8016f50:	4639      	mov	r1, r7
 8016f52:	f7e9 fadb 	bl	800050c <__aeabi_dmul>
 8016f56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016f5a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016f5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8016f62:	2300      	movs	r3, #0
 8016f64:	9302      	str	r3, [sp, #8]
 8016f66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016f6a:	106d      	asrs	r5, r5, #1
 8016f6c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016f70:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016f74:	2200      	movs	r2, #0
 8016f76:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016f7a:	4640      	mov	r0, r8
 8016f7c:	4649      	mov	r1, r9
 8016f7e:	4614      	mov	r4, r2
 8016f80:	461d      	mov	r5, r3
 8016f82:	f7e9 fac3 	bl	800050c <__aeabi_dmul>
 8016f86:	4602      	mov	r2, r0
 8016f88:	460b      	mov	r3, r1
 8016f8a:	4630      	mov	r0, r6
 8016f8c:	4639      	mov	r1, r7
 8016f8e:	f7e9 f905 	bl	800019c <__aeabi_dsub>
 8016f92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016f96:	4606      	mov	r6, r0
 8016f98:	460f      	mov	r7, r1
 8016f9a:	4620      	mov	r0, r4
 8016f9c:	4629      	mov	r1, r5
 8016f9e:	f7e9 f8fd 	bl	800019c <__aeabi_dsub>
 8016fa2:	4602      	mov	r2, r0
 8016fa4:	460b      	mov	r3, r1
 8016fa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016faa:	f7e9 f8f7 	bl	800019c <__aeabi_dsub>
 8016fae:	4642      	mov	r2, r8
 8016fb0:	464b      	mov	r3, r9
 8016fb2:	f7e9 faab 	bl	800050c <__aeabi_dmul>
 8016fb6:	4602      	mov	r2, r0
 8016fb8:	460b      	mov	r3, r1
 8016fba:	4630      	mov	r0, r6
 8016fbc:	4639      	mov	r1, r7
 8016fbe:	f7e9 f8ed 	bl	800019c <__aeabi_dsub>
 8016fc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016fc6:	f7e9 faa1 	bl	800050c <__aeabi_dmul>
 8016fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016fce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016fd2:	4610      	mov	r0, r2
 8016fd4:	4619      	mov	r1, r3
 8016fd6:	f7e9 fa99 	bl	800050c <__aeabi_dmul>
 8016fda:	a37b      	add	r3, pc, #492	; (adr r3, 80171c8 <__ieee754_pow+0x6d0>)
 8016fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe0:	4604      	mov	r4, r0
 8016fe2:	460d      	mov	r5, r1
 8016fe4:	f7e9 fa92 	bl	800050c <__aeabi_dmul>
 8016fe8:	a379      	add	r3, pc, #484	; (adr r3, 80171d0 <__ieee754_pow+0x6d8>)
 8016fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fee:	f7e9 f8d7 	bl	80001a0 <__adddf3>
 8016ff2:	4622      	mov	r2, r4
 8016ff4:	462b      	mov	r3, r5
 8016ff6:	f7e9 fa89 	bl	800050c <__aeabi_dmul>
 8016ffa:	a377      	add	r3, pc, #476	; (adr r3, 80171d8 <__ieee754_pow+0x6e0>)
 8016ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017000:	f7e9 f8ce 	bl	80001a0 <__adddf3>
 8017004:	4622      	mov	r2, r4
 8017006:	462b      	mov	r3, r5
 8017008:	f7e9 fa80 	bl	800050c <__aeabi_dmul>
 801700c:	a374      	add	r3, pc, #464	; (adr r3, 80171e0 <__ieee754_pow+0x6e8>)
 801700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017012:	f7e9 f8c5 	bl	80001a0 <__adddf3>
 8017016:	4622      	mov	r2, r4
 8017018:	462b      	mov	r3, r5
 801701a:	f7e9 fa77 	bl	800050c <__aeabi_dmul>
 801701e:	a372      	add	r3, pc, #456	; (adr r3, 80171e8 <__ieee754_pow+0x6f0>)
 8017020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017024:	f7e9 f8bc 	bl	80001a0 <__adddf3>
 8017028:	4622      	mov	r2, r4
 801702a:	462b      	mov	r3, r5
 801702c:	f7e9 fa6e 	bl	800050c <__aeabi_dmul>
 8017030:	a36f      	add	r3, pc, #444	; (adr r3, 80171f0 <__ieee754_pow+0x6f8>)
 8017032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017036:	f7e9 f8b3 	bl	80001a0 <__adddf3>
 801703a:	4622      	mov	r2, r4
 801703c:	4606      	mov	r6, r0
 801703e:	460f      	mov	r7, r1
 8017040:	462b      	mov	r3, r5
 8017042:	4620      	mov	r0, r4
 8017044:	4629      	mov	r1, r5
 8017046:	f7e9 fa61 	bl	800050c <__aeabi_dmul>
 801704a:	4602      	mov	r2, r0
 801704c:	460b      	mov	r3, r1
 801704e:	4630      	mov	r0, r6
 8017050:	4639      	mov	r1, r7
 8017052:	f7e9 fa5b 	bl	800050c <__aeabi_dmul>
 8017056:	4642      	mov	r2, r8
 8017058:	4604      	mov	r4, r0
 801705a:	460d      	mov	r5, r1
 801705c:	464b      	mov	r3, r9
 801705e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017062:	f7e9 f89d 	bl	80001a0 <__adddf3>
 8017066:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801706a:	f7e9 fa4f 	bl	800050c <__aeabi_dmul>
 801706e:	4622      	mov	r2, r4
 8017070:	462b      	mov	r3, r5
 8017072:	f7e9 f895 	bl	80001a0 <__adddf3>
 8017076:	4642      	mov	r2, r8
 8017078:	4606      	mov	r6, r0
 801707a:	460f      	mov	r7, r1
 801707c:	464b      	mov	r3, r9
 801707e:	4640      	mov	r0, r8
 8017080:	4649      	mov	r1, r9
 8017082:	f7e9 fa43 	bl	800050c <__aeabi_dmul>
 8017086:	2200      	movs	r2, #0
 8017088:	4b68      	ldr	r3, [pc, #416]	; (801722c <__ieee754_pow+0x734>)
 801708a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801708e:	f7e9 f887 	bl	80001a0 <__adddf3>
 8017092:	4632      	mov	r2, r6
 8017094:	463b      	mov	r3, r7
 8017096:	f7e9 f883 	bl	80001a0 <__adddf3>
 801709a:	9802      	ldr	r0, [sp, #8]
 801709c:	460d      	mov	r5, r1
 801709e:	4604      	mov	r4, r0
 80170a0:	4602      	mov	r2, r0
 80170a2:	460b      	mov	r3, r1
 80170a4:	4640      	mov	r0, r8
 80170a6:	4649      	mov	r1, r9
 80170a8:	f7e9 fa30 	bl	800050c <__aeabi_dmul>
 80170ac:	2200      	movs	r2, #0
 80170ae:	4680      	mov	r8, r0
 80170b0:	4689      	mov	r9, r1
 80170b2:	4b5e      	ldr	r3, [pc, #376]	; (801722c <__ieee754_pow+0x734>)
 80170b4:	4620      	mov	r0, r4
 80170b6:	4629      	mov	r1, r5
 80170b8:	f7e9 f870 	bl	800019c <__aeabi_dsub>
 80170bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80170c0:	f7e9 f86c 	bl	800019c <__aeabi_dsub>
 80170c4:	4602      	mov	r2, r0
 80170c6:	460b      	mov	r3, r1
 80170c8:	4630      	mov	r0, r6
 80170ca:	4639      	mov	r1, r7
 80170cc:	f7e9 f866 	bl	800019c <__aeabi_dsub>
 80170d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80170d4:	f7e9 fa1a 	bl	800050c <__aeabi_dmul>
 80170d8:	4622      	mov	r2, r4
 80170da:	4606      	mov	r6, r0
 80170dc:	460f      	mov	r7, r1
 80170de:	462b      	mov	r3, r5
 80170e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80170e4:	f7e9 fa12 	bl	800050c <__aeabi_dmul>
 80170e8:	4602      	mov	r2, r0
 80170ea:	460b      	mov	r3, r1
 80170ec:	4630      	mov	r0, r6
 80170ee:	4639      	mov	r1, r7
 80170f0:	f7e9 f856 	bl	80001a0 <__adddf3>
 80170f4:	4606      	mov	r6, r0
 80170f6:	460f      	mov	r7, r1
 80170f8:	4602      	mov	r2, r0
 80170fa:	460b      	mov	r3, r1
 80170fc:	4640      	mov	r0, r8
 80170fe:	4649      	mov	r1, r9
 8017100:	f7e9 f84e 	bl	80001a0 <__adddf3>
 8017104:	9802      	ldr	r0, [sp, #8]
 8017106:	a33c      	add	r3, pc, #240	; (adr r3, 80171f8 <__ieee754_pow+0x700>)
 8017108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801710c:	4604      	mov	r4, r0
 801710e:	460d      	mov	r5, r1
 8017110:	f7e9 f9fc 	bl	800050c <__aeabi_dmul>
 8017114:	4642      	mov	r2, r8
 8017116:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801711a:	464b      	mov	r3, r9
 801711c:	4620      	mov	r0, r4
 801711e:	4629      	mov	r1, r5
 8017120:	f7e9 f83c 	bl	800019c <__aeabi_dsub>
 8017124:	4602      	mov	r2, r0
 8017126:	460b      	mov	r3, r1
 8017128:	4630      	mov	r0, r6
 801712a:	4639      	mov	r1, r7
 801712c:	f7e9 f836 	bl	800019c <__aeabi_dsub>
 8017130:	a333      	add	r3, pc, #204	; (adr r3, 8017200 <__ieee754_pow+0x708>)
 8017132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017136:	f7e9 f9e9 	bl	800050c <__aeabi_dmul>
 801713a:	a333      	add	r3, pc, #204	; (adr r3, 8017208 <__ieee754_pow+0x710>)
 801713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017140:	4606      	mov	r6, r0
 8017142:	460f      	mov	r7, r1
 8017144:	4620      	mov	r0, r4
 8017146:	4629      	mov	r1, r5
 8017148:	f7e9 f9e0 	bl	800050c <__aeabi_dmul>
 801714c:	4602      	mov	r2, r0
 801714e:	460b      	mov	r3, r1
 8017150:	4630      	mov	r0, r6
 8017152:	4639      	mov	r1, r7
 8017154:	f7e9 f824 	bl	80001a0 <__adddf3>
 8017158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801715a:	4b35      	ldr	r3, [pc, #212]	; (8017230 <__ieee754_pow+0x738>)
 801715c:	4413      	add	r3, r2
 801715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017162:	f7e9 f81d 	bl	80001a0 <__adddf3>
 8017166:	4604      	mov	r4, r0
 8017168:	9809      	ldr	r0, [sp, #36]	; 0x24
 801716a:	460d      	mov	r5, r1
 801716c:	f7e9 f964 	bl	8000438 <__aeabi_i2d>
 8017170:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017172:	4b30      	ldr	r3, [pc, #192]	; (8017234 <__ieee754_pow+0x73c>)
 8017174:	4413      	add	r3, r2
 8017176:	e9d3 8900 	ldrd	r8, r9, [r3]
 801717a:	4606      	mov	r6, r0
 801717c:	460f      	mov	r7, r1
 801717e:	4622      	mov	r2, r4
 8017180:	462b      	mov	r3, r5
 8017182:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017186:	f7e9 f80b 	bl	80001a0 <__adddf3>
 801718a:	4642      	mov	r2, r8
 801718c:	464b      	mov	r3, r9
 801718e:	f7e9 f807 	bl	80001a0 <__adddf3>
 8017192:	4632      	mov	r2, r6
 8017194:	463b      	mov	r3, r7
 8017196:	f7e9 f803 	bl	80001a0 <__adddf3>
 801719a:	9802      	ldr	r0, [sp, #8]
 801719c:	4632      	mov	r2, r6
 801719e:	463b      	mov	r3, r7
 80171a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80171a4:	f7e8 fffa 	bl	800019c <__aeabi_dsub>
 80171a8:	4642      	mov	r2, r8
 80171aa:	464b      	mov	r3, r9
 80171ac:	f7e8 fff6 	bl	800019c <__aeabi_dsub>
 80171b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80171b4:	e607      	b.n	8016dc6 <__ieee754_pow+0x2ce>
 80171b6:	f04f 0a01 	mov.w	sl, #1
 80171ba:	e6a5      	b.n	8016f08 <__ieee754_pow+0x410>
 80171bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8017210 <__ieee754_pow+0x718>
 80171c0:	e613      	b.n	8016dea <__ieee754_pow+0x2f2>
 80171c2:	bf00      	nop
 80171c4:	f3af 8000 	nop.w
 80171c8:	4a454eef 	.word	0x4a454eef
 80171cc:	3fca7e28 	.word	0x3fca7e28
 80171d0:	93c9db65 	.word	0x93c9db65
 80171d4:	3fcd864a 	.word	0x3fcd864a
 80171d8:	a91d4101 	.word	0xa91d4101
 80171dc:	3fd17460 	.word	0x3fd17460
 80171e0:	518f264d 	.word	0x518f264d
 80171e4:	3fd55555 	.word	0x3fd55555
 80171e8:	db6fabff 	.word	0xdb6fabff
 80171ec:	3fdb6db6 	.word	0x3fdb6db6
 80171f0:	33333303 	.word	0x33333303
 80171f4:	3fe33333 	.word	0x3fe33333
 80171f8:	e0000000 	.word	0xe0000000
 80171fc:	3feec709 	.word	0x3feec709
 8017200:	dc3a03fd 	.word	0xdc3a03fd
 8017204:	3feec709 	.word	0x3feec709
 8017208:	145b01f5 	.word	0x145b01f5
 801720c:	be3e2fe0 	.word	0xbe3e2fe0
 8017210:	00000000 	.word	0x00000000
 8017214:	3ff00000 	.word	0x3ff00000
 8017218:	43400000 	.word	0x43400000
 801721c:	0003988e 	.word	0x0003988e
 8017220:	000bb679 	.word	0x000bb679
 8017224:	08018a50 	.word	0x08018a50
 8017228:	3ff00000 	.word	0x3ff00000
 801722c:	40080000 	.word	0x40080000
 8017230:	08018a70 	.word	0x08018a70
 8017234:	08018a60 	.word	0x08018a60
 8017238:	a3b4      	add	r3, pc, #720	; (adr r3, 801750c <__ieee754_pow+0xa14>)
 801723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801723e:	4640      	mov	r0, r8
 8017240:	4649      	mov	r1, r9
 8017242:	f7e8 ffad 	bl	80001a0 <__adddf3>
 8017246:	4622      	mov	r2, r4
 8017248:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801724c:	462b      	mov	r3, r5
 801724e:	4630      	mov	r0, r6
 8017250:	4639      	mov	r1, r7
 8017252:	f7e8 ffa3 	bl	800019c <__aeabi_dsub>
 8017256:	4602      	mov	r2, r0
 8017258:	460b      	mov	r3, r1
 801725a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801725e:	f7e9 fbe5 	bl	8000a2c <__aeabi_dcmpgt>
 8017262:	2800      	cmp	r0, #0
 8017264:	f47f adfe 	bne.w	8016e64 <__ieee754_pow+0x36c>
 8017268:	4aa3      	ldr	r2, [pc, #652]	; (80174f8 <__ieee754_pow+0xa00>)
 801726a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801726e:	4293      	cmp	r3, r2
 8017270:	f340 810a 	ble.w	8017488 <__ieee754_pow+0x990>
 8017274:	151b      	asrs	r3, r3, #20
 8017276:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801727a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801727e:	fa4a f303 	asr.w	r3, sl, r3
 8017282:	445b      	add	r3, fp
 8017284:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017288:	4e9c      	ldr	r6, [pc, #624]	; (80174fc <__ieee754_pow+0xa04>)
 801728a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801728e:	4116      	asrs	r6, r2
 8017290:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8017294:	2000      	movs	r0, #0
 8017296:	ea23 0106 	bic.w	r1, r3, r6
 801729a:	f1c2 0214 	rsb	r2, r2, #20
 801729e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80172a2:	fa4a fa02 	asr.w	sl, sl, r2
 80172a6:	f1bb 0f00 	cmp.w	fp, #0
 80172aa:	4602      	mov	r2, r0
 80172ac:	460b      	mov	r3, r1
 80172ae:	4620      	mov	r0, r4
 80172b0:	4629      	mov	r1, r5
 80172b2:	bfb8      	it	lt
 80172b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80172b8:	f7e8 ff70 	bl	800019c <__aeabi_dsub>
 80172bc:	e9cd 0100 	strd	r0, r1, [sp]
 80172c0:	4642      	mov	r2, r8
 80172c2:	464b      	mov	r3, r9
 80172c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172c8:	f7e8 ff6a 	bl	80001a0 <__adddf3>
 80172cc:	2000      	movs	r0, #0
 80172ce:	a378      	add	r3, pc, #480	; (adr r3, 80174b0 <__ieee754_pow+0x9b8>)
 80172d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d4:	4604      	mov	r4, r0
 80172d6:	460d      	mov	r5, r1
 80172d8:	f7e9 f918 	bl	800050c <__aeabi_dmul>
 80172dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172e0:	4606      	mov	r6, r0
 80172e2:	460f      	mov	r7, r1
 80172e4:	4620      	mov	r0, r4
 80172e6:	4629      	mov	r1, r5
 80172e8:	f7e8 ff58 	bl	800019c <__aeabi_dsub>
 80172ec:	4602      	mov	r2, r0
 80172ee:	460b      	mov	r3, r1
 80172f0:	4640      	mov	r0, r8
 80172f2:	4649      	mov	r1, r9
 80172f4:	f7e8 ff52 	bl	800019c <__aeabi_dsub>
 80172f8:	a36f      	add	r3, pc, #444	; (adr r3, 80174b8 <__ieee754_pow+0x9c0>)
 80172fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172fe:	f7e9 f905 	bl	800050c <__aeabi_dmul>
 8017302:	a36f      	add	r3, pc, #444	; (adr r3, 80174c0 <__ieee754_pow+0x9c8>)
 8017304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017308:	4680      	mov	r8, r0
 801730a:	4689      	mov	r9, r1
 801730c:	4620      	mov	r0, r4
 801730e:	4629      	mov	r1, r5
 8017310:	f7e9 f8fc 	bl	800050c <__aeabi_dmul>
 8017314:	4602      	mov	r2, r0
 8017316:	460b      	mov	r3, r1
 8017318:	4640      	mov	r0, r8
 801731a:	4649      	mov	r1, r9
 801731c:	f7e8 ff40 	bl	80001a0 <__adddf3>
 8017320:	4604      	mov	r4, r0
 8017322:	460d      	mov	r5, r1
 8017324:	4602      	mov	r2, r0
 8017326:	460b      	mov	r3, r1
 8017328:	4630      	mov	r0, r6
 801732a:	4639      	mov	r1, r7
 801732c:	f7e8 ff38 	bl	80001a0 <__adddf3>
 8017330:	4632      	mov	r2, r6
 8017332:	463b      	mov	r3, r7
 8017334:	4680      	mov	r8, r0
 8017336:	4689      	mov	r9, r1
 8017338:	f7e8 ff30 	bl	800019c <__aeabi_dsub>
 801733c:	4602      	mov	r2, r0
 801733e:	460b      	mov	r3, r1
 8017340:	4620      	mov	r0, r4
 8017342:	4629      	mov	r1, r5
 8017344:	f7e8 ff2a 	bl	800019c <__aeabi_dsub>
 8017348:	4642      	mov	r2, r8
 801734a:	4606      	mov	r6, r0
 801734c:	460f      	mov	r7, r1
 801734e:	464b      	mov	r3, r9
 8017350:	4640      	mov	r0, r8
 8017352:	4649      	mov	r1, r9
 8017354:	f7e9 f8da 	bl	800050c <__aeabi_dmul>
 8017358:	a35b      	add	r3, pc, #364	; (adr r3, 80174c8 <__ieee754_pow+0x9d0>)
 801735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801735e:	4604      	mov	r4, r0
 8017360:	460d      	mov	r5, r1
 8017362:	f7e9 f8d3 	bl	800050c <__aeabi_dmul>
 8017366:	a35a      	add	r3, pc, #360	; (adr r3, 80174d0 <__ieee754_pow+0x9d8>)
 8017368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801736c:	f7e8 ff16 	bl	800019c <__aeabi_dsub>
 8017370:	4622      	mov	r2, r4
 8017372:	462b      	mov	r3, r5
 8017374:	f7e9 f8ca 	bl	800050c <__aeabi_dmul>
 8017378:	a357      	add	r3, pc, #348	; (adr r3, 80174d8 <__ieee754_pow+0x9e0>)
 801737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801737e:	f7e8 ff0f 	bl	80001a0 <__adddf3>
 8017382:	4622      	mov	r2, r4
 8017384:	462b      	mov	r3, r5
 8017386:	f7e9 f8c1 	bl	800050c <__aeabi_dmul>
 801738a:	a355      	add	r3, pc, #340	; (adr r3, 80174e0 <__ieee754_pow+0x9e8>)
 801738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017390:	f7e8 ff04 	bl	800019c <__aeabi_dsub>
 8017394:	4622      	mov	r2, r4
 8017396:	462b      	mov	r3, r5
 8017398:	f7e9 f8b8 	bl	800050c <__aeabi_dmul>
 801739c:	a352      	add	r3, pc, #328	; (adr r3, 80174e8 <__ieee754_pow+0x9f0>)
 801739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173a2:	f7e8 fefd 	bl	80001a0 <__adddf3>
 80173a6:	4622      	mov	r2, r4
 80173a8:	462b      	mov	r3, r5
 80173aa:	f7e9 f8af 	bl	800050c <__aeabi_dmul>
 80173ae:	4602      	mov	r2, r0
 80173b0:	460b      	mov	r3, r1
 80173b2:	4640      	mov	r0, r8
 80173b4:	4649      	mov	r1, r9
 80173b6:	f7e8 fef1 	bl	800019c <__aeabi_dsub>
 80173ba:	4604      	mov	r4, r0
 80173bc:	460d      	mov	r5, r1
 80173be:	4602      	mov	r2, r0
 80173c0:	460b      	mov	r3, r1
 80173c2:	4640      	mov	r0, r8
 80173c4:	4649      	mov	r1, r9
 80173c6:	f7e9 f8a1 	bl	800050c <__aeabi_dmul>
 80173ca:	2200      	movs	r2, #0
 80173cc:	e9cd 0100 	strd	r0, r1, [sp]
 80173d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80173d4:	4620      	mov	r0, r4
 80173d6:	4629      	mov	r1, r5
 80173d8:	f7e8 fee0 	bl	800019c <__aeabi_dsub>
 80173dc:	4602      	mov	r2, r0
 80173de:	460b      	mov	r3, r1
 80173e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173e4:	f7e9 f9bc 	bl	8000760 <__aeabi_ddiv>
 80173e8:	4632      	mov	r2, r6
 80173ea:	4604      	mov	r4, r0
 80173ec:	460d      	mov	r5, r1
 80173ee:	463b      	mov	r3, r7
 80173f0:	4640      	mov	r0, r8
 80173f2:	4649      	mov	r1, r9
 80173f4:	f7e9 f88a 	bl	800050c <__aeabi_dmul>
 80173f8:	4632      	mov	r2, r6
 80173fa:	463b      	mov	r3, r7
 80173fc:	f7e8 fed0 	bl	80001a0 <__adddf3>
 8017400:	4602      	mov	r2, r0
 8017402:	460b      	mov	r3, r1
 8017404:	4620      	mov	r0, r4
 8017406:	4629      	mov	r1, r5
 8017408:	f7e8 fec8 	bl	800019c <__aeabi_dsub>
 801740c:	4642      	mov	r2, r8
 801740e:	464b      	mov	r3, r9
 8017410:	f7e8 fec4 	bl	800019c <__aeabi_dsub>
 8017414:	4602      	mov	r2, r0
 8017416:	460b      	mov	r3, r1
 8017418:	2000      	movs	r0, #0
 801741a:	4939      	ldr	r1, [pc, #228]	; (8017500 <__ieee754_pow+0xa08>)
 801741c:	f7e8 febe 	bl	800019c <__aeabi_dsub>
 8017420:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8017424:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8017428:	4602      	mov	r2, r0
 801742a:	460b      	mov	r3, r1
 801742c:	da2f      	bge.n	801748e <__ieee754_pow+0x996>
 801742e:	4650      	mov	r0, sl
 8017430:	ec43 2b10 	vmov	d0, r2, r3
 8017434:	f000 f9c0 	bl	80177b8 <scalbn>
 8017438:	ec51 0b10 	vmov	r0, r1, d0
 801743c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017440:	f7ff bbf1 	b.w	8016c26 <__ieee754_pow+0x12e>
 8017444:	4b2f      	ldr	r3, [pc, #188]	; (8017504 <__ieee754_pow+0xa0c>)
 8017446:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801744a:	429e      	cmp	r6, r3
 801744c:	f77f af0c 	ble.w	8017268 <__ieee754_pow+0x770>
 8017450:	4b2d      	ldr	r3, [pc, #180]	; (8017508 <__ieee754_pow+0xa10>)
 8017452:	440b      	add	r3, r1
 8017454:	4303      	orrs	r3, r0
 8017456:	d00b      	beq.n	8017470 <__ieee754_pow+0x978>
 8017458:	a325      	add	r3, pc, #148	; (adr r3, 80174f0 <__ieee754_pow+0x9f8>)
 801745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801745e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017462:	f7e9 f853 	bl	800050c <__aeabi_dmul>
 8017466:	a322      	add	r3, pc, #136	; (adr r3, 80174f0 <__ieee754_pow+0x9f8>)
 8017468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801746c:	f7ff bbdb 	b.w	8016c26 <__ieee754_pow+0x12e>
 8017470:	4622      	mov	r2, r4
 8017472:	462b      	mov	r3, r5
 8017474:	f7e8 fe92 	bl	800019c <__aeabi_dsub>
 8017478:	4642      	mov	r2, r8
 801747a:	464b      	mov	r3, r9
 801747c:	f7e9 facc 	bl	8000a18 <__aeabi_dcmpge>
 8017480:	2800      	cmp	r0, #0
 8017482:	f43f aef1 	beq.w	8017268 <__ieee754_pow+0x770>
 8017486:	e7e7      	b.n	8017458 <__ieee754_pow+0x960>
 8017488:	f04f 0a00 	mov.w	sl, #0
 801748c:	e718      	b.n	80172c0 <__ieee754_pow+0x7c8>
 801748e:	4621      	mov	r1, r4
 8017490:	e7d4      	b.n	801743c <__ieee754_pow+0x944>
 8017492:	2000      	movs	r0, #0
 8017494:	491a      	ldr	r1, [pc, #104]	; (8017500 <__ieee754_pow+0xa08>)
 8017496:	f7ff bb8f 	b.w	8016bb8 <__ieee754_pow+0xc0>
 801749a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801749e:	f7ff bb8b 	b.w	8016bb8 <__ieee754_pow+0xc0>
 80174a2:	4630      	mov	r0, r6
 80174a4:	4639      	mov	r1, r7
 80174a6:	f7ff bb87 	b.w	8016bb8 <__ieee754_pow+0xc0>
 80174aa:	4693      	mov	fp, r2
 80174ac:	f7ff bb98 	b.w	8016be0 <__ieee754_pow+0xe8>
 80174b0:	00000000 	.word	0x00000000
 80174b4:	3fe62e43 	.word	0x3fe62e43
 80174b8:	fefa39ef 	.word	0xfefa39ef
 80174bc:	3fe62e42 	.word	0x3fe62e42
 80174c0:	0ca86c39 	.word	0x0ca86c39
 80174c4:	be205c61 	.word	0xbe205c61
 80174c8:	72bea4d0 	.word	0x72bea4d0
 80174cc:	3e663769 	.word	0x3e663769
 80174d0:	c5d26bf1 	.word	0xc5d26bf1
 80174d4:	3ebbbd41 	.word	0x3ebbbd41
 80174d8:	af25de2c 	.word	0xaf25de2c
 80174dc:	3f11566a 	.word	0x3f11566a
 80174e0:	16bebd93 	.word	0x16bebd93
 80174e4:	3f66c16c 	.word	0x3f66c16c
 80174e8:	5555553e 	.word	0x5555553e
 80174ec:	3fc55555 	.word	0x3fc55555
 80174f0:	c2f8f359 	.word	0xc2f8f359
 80174f4:	01a56e1f 	.word	0x01a56e1f
 80174f8:	3fe00000 	.word	0x3fe00000
 80174fc:	000fffff 	.word	0x000fffff
 8017500:	3ff00000 	.word	0x3ff00000
 8017504:	4090cbff 	.word	0x4090cbff
 8017508:	3f6f3400 	.word	0x3f6f3400
 801750c:	652b82fe 	.word	0x652b82fe
 8017510:	3c971547 	.word	0x3c971547

08017514 <__ieee754_sqrt>:
 8017514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017518:	4955      	ldr	r1, [pc, #340]	; (8017670 <__ieee754_sqrt+0x15c>)
 801751a:	ec55 4b10 	vmov	r4, r5, d0
 801751e:	43a9      	bics	r1, r5
 8017520:	462b      	mov	r3, r5
 8017522:	462a      	mov	r2, r5
 8017524:	d112      	bne.n	801754c <__ieee754_sqrt+0x38>
 8017526:	ee10 2a10 	vmov	r2, s0
 801752a:	ee10 0a10 	vmov	r0, s0
 801752e:	4629      	mov	r1, r5
 8017530:	f7e8 ffec 	bl	800050c <__aeabi_dmul>
 8017534:	4602      	mov	r2, r0
 8017536:	460b      	mov	r3, r1
 8017538:	4620      	mov	r0, r4
 801753a:	4629      	mov	r1, r5
 801753c:	f7e8 fe30 	bl	80001a0 <__adddf3>
 8017540:	4604      	mov	r4, r0
 8017542:	460d      	mov	r5, r1
 8017544:	ec45 4b10 	vmov	d0, r4, r5
 8017548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801754c:	2d00      	cmp	r5, #0
 801754e:	ee10 0a10 	vmov	r0, s0
 8017552:	4621      	mov	r1, r4
 8017554:	dc0f      	bgt.n	8017576 <__ieee754_sqrt+0x62>
 8017556:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801755a:	4330      	orrs	r0, r6
 801755c:	d0f2      	beq.n	8017544 <__ieee754_sqrt+0x30>
 801755e:	b155      	cbz	r5, 8017576 <__ieee754_sqrt+0x62>
 8017560:	ee10 2a10 	vmov	r2, s0
 8017564:	4620      	mov	r0, r4
 8017566:	4629      	mov	r1, r5
 8017568:	f7e8 fe18 	bl	800019c <__aeabi_dsub>
 801756c:	4602      	mov	r2, r0
 801756e:	460b      	mov	r3, r1
 8017570:	f7e9 f8f6 	bl	8000760 <__aeabi_ddiv>
 8017574:	e7e4      	b.n	8017540 <__ieee754_sqrt+0x2c>
 8017576:	151b      	asrs	r3, r3, #20
 8017578:	d073      	beq.n	8017662 <__ieee754_sqrt+0x14e>
 801757a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801757e:	07dd      	lsls	r5, r3, #31
 8017580:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8017584:	bf48      	it	mi
 8017586:	0fc8      	lsrmi	r0, r1, #31
 8017588:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801758c:	bf44      	itt	mi
 801758e:	0049      	lslmi	r1, r1, #1
 8017590:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8017594:	2500      	movs	r5, #0
 8017596:	1058      	asrs	r0, r3, #1
 8017598:	0fcb      	lsrs	r3, r1, #31
 801759a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801759e:	0049      	lsls	r1, r1, #1
 80175a0:	2316      	movs	r3, #22
 80175a2:	462c      	mov	r4, r5
 80175a4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80175a8:	19a7      	adds	r7, r4, r6
 80175aa:	4297      	cmp	r7, r2
 80175ac:	bfde      	ittt	le
 80175ae:	19bc      	addle	r4, r7, r6
 80175b0:	1bd2      	suble	r2, r2, r7
 80175b2:	19ad      	addle	r5, r5, r6
 80175b4:	0fcf      	lsrs	r7, r1, #31
 80175b6:	3b01      	subs	r3, #1
 80175b8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80175bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80175c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80175c4:	d1f0      	bne.n	80175a8 <__ieee754_sqrt+0x94>
 80175c6:	f04f 0c20 	mov.w	ip, #32
 80175ca:	469e      	mov	lr, r3
 80175cc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80175d0:	42a2      	cmp	r2, r4
 80175d2:	eb06 070e 	add.w	r7, r6, lr
 80175d6:	dc02      	bgt.n	80175de <__ieee754_sqrt+0xca>
 80175d8:	d112      	bne.n	8017600 <__ieee754_sqrt+0xec>
 80175da:	428f      	cmp	r7, r1
 80175dc:	d810      	bhi.n	8017600 <__ieee754_sqrt+0xec>
 80175de:	2f00      	cmp	r7, #0
 80175e0:	eb07 0e06 	add.w	lr, r7, r6
 80175e4:	da42      	bge.n	801766c <__ieee754_sqrt+0x158>
 80175e6:	f1be 0f00 	cmp.w	lr, #0
 80175ea:	db3f      	blt.n	801766c <__ieee754_sqrt+0x158>
 80175ec:	f104 0801 	add.w	r8, r4, #1
 80175f0:	1b12      	subs	r2, r2, r4
 80175f2:	428f      	cmp	r7, r1
 80175f4:	bf88      	it	hi
 80175f6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80175fa:	1bc9      	subs	r1, r1, r7
 80175fc:	4433      	add	r3, r6
 80175fe:	4644      	mov	r4, r8
 8017600:	0052      	lsls	r2, r2, #1
 8017602:	f1bc 0c01 	subs.w	ip, ip, #1
 8017606:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801760a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801760e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017612:	d1dd      	bne.n	80175d0 <__ieee754_sqrt+0xbc>
 8017614:	430a      	orrs	r2, r1
 8017616:	d006      	beq.n	8017626 <__ieee754_sqrt+0x112>
 8017618:	1c5c      	adds	r4, r3, #1
 801761a:	bf13      	iteet	ne
 801761c:	3301      	addne	r3, #1
 801761e:	3501      	addeq	r5, #1
 8017620:	4663      	moveq	r3, ip
 8017622:	f023 0301 	bicne.w	r3, r3, #1
 8017626:	106a      	asrs	r2, r5, #1
 8017628:	085b      	lsrs	r3, r3, #1
 801762a:	07e9      	lsls	r1, r5, #31
 801762c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8017630:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8017634:	bf48      	it	mi
 8017636:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801763a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801763e:	461c      	mov	r4, r3
 8017640:	e780      	b.n	8017544 <__ieee754_sqrt+0x30>
 8017642:	0aca      	lsrs	r2, r1, #11
 8017644:	3815      	subs	r0, #21
 8017646:	0549      	lsls	r1, r1, #21
 8017648:	2a00      	cmp	r2, #0
 801764a:	d0fa      	beq.n	8017642 <__ieee754_sqrt+0x12e>
 801764c:	02d6      	lsls	r6, r2, #11
 801764e:	d50a      	bpl.n	8017666 <__ieee754_sqrt+0x152>
 8017650:	f1c3 0420 	rsb	r4, r3, #32
 8017654:	fa21 f404 	lsr.w	r4, r1, r4
 8017658:	1e5d      	subs	r5, r3, #1
 801765a:	4099      	lsls	r1, r3
 801765c:	4322      	orrs	r2, r4
 801765e:	1b43      	subs	r3, r0, r5
 8017660:	e78b      	b.n	801757a <__ieee754_sqrt+0x66>
 8017662:	4618      	mov	r0, r3
 8017664:	e7f0      	b.n	8017648 <__ieee754_sqrt+0x134>
 8017666:	0052      	lsls	r2, r2, #1
 8017668:	3301      	adds	r3, #1
 801766a:	e7ef      	b.n	801764c <__ieee754_sqrt+0x138>
 801766c:	46a0      	mov	r8, r4
 801766e:	e7bf      	b.n	80175f0 <__ieee754_sqrt+0xdc>
 8017670:	7ff00000 	.word	0x7ff00000

08017674 <__ieee754_sqrtf>:
 8017674:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017678:	4770      	bx	lr

0801767a <fabs>:
 801767a:	ec51 0b10 	vmov	r0, r1, d0
 801767e:	ee10 2a10 	vmov	r2, s0
 8017682:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017686:	ec43 2b10 	vmov	d0, r2, r3
 801768a:	4770      	bx	lr

0801768c <finite>:
 801768c:	ee10 3a90 	vmov	r3, s1
 8017690:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8017694:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017698:	0fc0      	lsrs	r0, r0, #31
 801769a:	4770      	bx	lr

0801769c <matherr>:
 801769c:	2000      	movs	r0, #0
 801769e:	4770      	bx	lr

080176a0 <nan>:
 80176a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80176a8 <nan+0x8>
 80176a4:	4770      	bx	lr
 80176a6:	bf00      	nop
 80176a8:	00000000 	.word	0x00000000
 80176ac:	7ff80000 	.word	0x7ff80000

080176b0 <rint>:
 80176b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176b2:	ec51 0b10 	vmov	r0, r1, d0
 80176b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80176ba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80176be:	2e13      	cmp	r6, #19
 80176c0:	460b      	mov	r3, r1
 80176c2:	ee10 4a10 	vmov	r4, s0
 80176c6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80176ca:	dc56      	bgt.n	801777a <rint+0xca>
 80176cc:	2e00      	cmp	r6, #0
 80176ce:	da2b      	bge.n	8017728 <rint+0x78>
 80176d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80176d4:	4302      	orrs	r2, r0
 80176d6:	d023      	beq.n	8017720 <rint+0x70>
 80176d8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80176dc:	4302      	orrs	r2, r0
 80176de:	4254      	negs	r4, r2
 80176e0:	4314      	orrs	r4, r2
 80176e2:	0c4b      	lsrs	r3, r1, #17
 80176e4:	0b24      	lsrs	r4, r4, #12
 80176e6:	045b      	lsls	r3, r3, #17
 80176e8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80176ec:	ea44 0103 	orr.w	r1, r4, r3
 80176f0:	460b      	mov	r3, r1
 80176f2:	492f      	ldr	r1, [pc, #188]	; (80177b0 <rint+0x100>)
 80176f4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80176f8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80176fc:	4602      	mov	r2, r0
 80176fe:	4639      	mov	r1, r7
 8017700:	4630      	mov	r0, r6
 8017702:	f7e8 fd4d 	bl	80001a0 <__adddf3>
 8017706:	e9cd 0100 	strd	r0, r1, [sp]
 801770a:	463b      	mov	r3, r7
 801770c:	4632      	mov	r2, r6
 801770e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017712:	f7e8 fd43 	bl	800019c <__aeabi_dsub>
 8017716:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801771a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801771e:	4639      	mov	r1, r7
 8017720:	ec41 0b10 	vmov	d0, r0, r1
 8017724:	b003      	add	sp, #12
 8017726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017728:	4a22      	ldr	r2, [pc, #136]	; (80177b4 <rint+0x104>)
 801772a:	4132      	asrs	r2, r6
 801772c:	ea01 0702 	and.w	r7, r1, r2
 8017730:	4307      	orrs	r7, r0
 8017732:	d0f5      	beq.n	8017720 <rint+0x70>
 8017734:	0852      	lsrs	r2, r2, #1
 8017736:	4011      	ands	r1, r2
 8017738:	430c      	orrs	r4, r1
 801773a:	d00b      	beq.n	8017754 <rint+0xa4>
 801773c:	ea23 0202 	bic.w	r2, r3, r2
 8017740:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017744:	2e13      	cmp	r6, #19
 8017746:	fa43 f306 	asr.w	r3, r3, r6
 801774a:	bf0c      	ite	eq
 801774c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8017750:	2400      	movne	r4, #0
 8017752:	4313      	orrs	r3, r2
 8017754:	4916      	ldr	r1, [pc, #88]	; (80177b0 <rint+0x100>)
 8017756:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801775a:	4622      	mov	r2, r4
 801775c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017760:	4620      	mov	r0, r4
 8017762:	4629      	mov	r1, r5
 8017764:	f7e8 fd1c 	bl	80001a0 <__adddf3>
 8017768:	e9cd 0100 	strd	r0, r1, [sp]
 801776c:	4622      	mov	r2, r4
 801776e:	462b      	mov	r3, r5
 8017770:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017774:	f7e8 fd12 	bl	800019c <__aeabi_dsub>
 8017778:	e7d2      	b.n	8017720 <rint+0x70>
 801777a:	2e33      	cmp	r6, #51	; 0x33
 801777c:	dd07      	ble.n	801778e <rint+0xde>
 801777e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017782:	d1cd      	bne.n	8017720 <rint+0x70>
 8017784:	ee10 2a10 	vmov	r2, s0
 8017788:	f7e8 fd0a 	bl	80001a0 <__adddf3>
 801778c:	e7c8      	b.n	8017720 <rint+0x70>
 801778e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8017792:	f04f 32ff 	mov.w	r2, #4294967295
 8017796:	40f2      	lsrs	r2, r6
 8017798:	4210      	tst	r0, r2
 801779a:	d0c1      	beq.n	8017720 <rint+0x70>
 801779c:	0852      	lsrs	r2, r2, #1
 801779e:	4210      	tst	r0, r2
 80177a0:	bf1f      	itttt	ne
 80177a2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80177a6:	ea20 0202 	bicne.w	r2, r0, r2
 80177aa:	4134      	asrne	r4, r6
 80177ac:	4314      	orrne	r4, r2
 80177ae:	e7d1      	b.n	8017754 <rint+0xa4>
 80177b0:	08018a80 	.word	0x08018a80
 80177b4:	000fffff 	.word	0x000fffff

080177b8 <scalbn>:
 80177b8:	b570      	push	{r4, r5, r6, lr}
 80177ba:	ec55 4b10 	vmov	r4, r5, d0
 80177be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80177c2:	4606      	mov	r6, r0
 80177c4:	462b      	mov	r3, r5
 80177c6:	b9aa      	cbnz	r2, 80177f4 <scalbn+0x3c>
 80177c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80177cc:	4323      	orrs	r3, r4
 80177ce:	d03b      	beq.n	8017848 <scalbn+0x90>
 80177d0:	4b31      	ldr	r3, [pc, #196]	; (8017898 <scalbn+0xe0>)
 80177d2:	4629      	mov	r1, r5
 80177d4:	2200      	movs	r2, #0
 80177d6:	ee10 0a10 	vmov	r0, s0
 80177da:	f7e8 fe97 	bl	800050c <__aeabi_dmul>
 80177de:	4b2f      	ldr	r3, [pc, #188]	; (801789c <scalbn+0xe4>)
 80177e0:	429e      	cmp	r6, r3
 80177e2:	4604      	mov	r4, r0
 80177e4:	460d      	mov	r5, r1
 80177e6:	da12      	bge.n	801780e <scalbn+0x56>
 80177e8:	a327      	add	r3, pc, #156	; (adr r3, 8017888 <scalbn+0xd0>)
 80177ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ee:	f7e8 fe8d 	bl	800050c <__aeabi_dmul>
 80177f2:	e009      	b.n	8017808 <scalbn+0x50>
 80177f4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80177f8:	428a      	cmp	r2, r1
 80177fa:	d10c      	bne.n	8017816 <scalbn+0x5e>
 80177fc:	ee10 2a10 	vmov	r2, s0
 8017800:	4620      	mov	r0, r4
 8017802:	4629      	mov	r1, r5
 8017804:	f7e8 fccc 	bl	80001a0 <__adddf3>
 8017808:	4604      	mov	r4, r0
 801780a:	460d      	mov	r5, r1
 801780c:	e01c      	b.n	8017848 <scalbn+0x90>
 801780e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017812:	460b      	mov	r3, r1
 8017814:	3a36      	subs	r2, #54	; 0x36
 8017816:	4432      	add	r2, r6
 8017818:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801781c:	428a      	cmp	r2, r1
 801781e:	dd0b      	ble.n	8017838 <scalbn+0x80>
 8017820:	ec45 4b11 	vmov	d1, r4, r5
 8017824:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017890 <scalbn+0xd8>
 8017828:	f000 f83c 	bl	80178a4 <copysign>
 801782c:	a318      	add	r3, pc, #96	; (adr r3, 8017890 <scalbn+0xd8>)
 801782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017832:	ec51 0b10 	vmov	r0, r1, d0
 8017836:	e7da      	b.n	80177ee <scalbn+0x36>
 8017838:	2a00      	cmp	r2, #0
 801783a:	dd08      	ble.n	801784e <scalbn+0x96>
 801783c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017840:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017844:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017848:	ec45 4b10 	vmov	d0, r4, r5
 801784c:	bd70      	pop	{r4, r5, r6, pc}
 801784e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017852:	da0d      	bge.n	8017870 <scalbn+0xb8>
 8017854:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017858:	429e      	cmp	r6, r3
 801785a:	ec45 4b11 	vmov	d1, r4, r5
 801785e:	dce1      	bgt.n	8017824 <scalbn+0x6c>
 8017860:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017888 <scalbn+0xd0>
 8017864:	f000 f81e 	bl	80178a4 <copysign>
 8017868:	a307      	add	r3, pc, #28	; (adr r3, 8017888 <scalbn+0xd0>)
 801786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801786e:	e7e0      	b.n	8017832 <scalbn+0x7a>
 8017870:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017874:	3236      	adds	r2, #54	; 0x36
 8017876:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801787a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801787e:	4620      	mov	r0, r4
 8017880:	4629      	mov	r1, r5
 8017882:	2200      	movs	r2, #0
 8017884:	4b06      	ldr	r3, [pc, #24]	; (80178a0 <scalbn+0xe8>)
 8017886:	e7b2      	b.n	80177ee <scalbn+0x36>
 8017888:	c2f8f359 	.word	0xc2f8f359
 801788c:	01a56e1f 	.word	0x01a56e1f
 8017890:	8800759c 	.word	0x8800759c
 8017894:	7e37e43c 	.word	0x7e37e43c
 8017898:	43500000 	.word	0x43500000
 801789c:	ffff3cb0 	.word	0xffff3cb0
 80178a0:	3c900000 	.word	0x3c900000

080178a4 <copysign>:
 80178a4:	ec51 0b10 	vmov	r0, r1, d0
 80178a8:	ee11 0a90 	vmov	r0, s3
 80178ac:	ee10 2a10 	vmov	r2, s0
 80178b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80178b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80178b8:	ea41 0300 	orr.w	r3, r1, r0
 80178bc:	ec43 2b10 	vmov	d0, r2, r3
 80178c0:	4770      	bx	lr
	...

080178c4 <_init>:
 80178c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178c6:	bf00      	nop
 80178c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80178ca:	bc08      	pop	{r3}
 80178cc:	469e      	mov	lr, r3
 80178ce:	4770      	bx	lr

080178d0 <_fini>:
 80178d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178d2:	bf00      	nop
 80178d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80178d6:	bc08      	pop	{r3}
 80178d8:	469e      	mov	lr, r3
 80178da:	4770      	bx	lr
